Index,Original Code,Adversarial Code,True Label,Adv Label,Query Times,Time Cost,Attack Type
2,"void RenderFrameImpl::OnCopyToFindPboard() {
  if (frame_->HasSelection()) {
    if (!clipboard_host_) {
      auto* platform = RenderThreadImpl::current_blink_platform_impl();
      platform->GetConnector()->BindInterface(platform->GetBrowserServiceName(),
                                              &clipboard_host_);
    }
    base::string16 selection = frame_->SelectionAsText().Utf16();
    clipboard_host_->WriteStringToFindPboard(selection);
  }
}","void RenderFrameImpl::OnCopyToFindPboard() {
  if (frame_->HasSelection()) {
    if (!clipboard_host_) {
      auto* platform = RenderThreadImpl::current_blink_platform_impl();
      platform->GetConnector()->BindInterface(platform->GetBrowserServiceName(),
                                              &clipboard_host_);
    }
    base::string16 selection = frame_->SelectionAsText().Utf16();
    int a = 2;
    int b = 2;
    while (a == b) {
        clipboard_host_->WriteStringToFindPboard(selection);
        b += 1;
    }
    const char
        *attribute,
        *content;
    QuantizationTable
        *table;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    if (content != (char *) NULL)
        table->description=ConstantString(content);
  }
}",0,1,5,0.51,Insert
5," static void addDataToStreamTask(void* context)
 {
     OwnPtr<BlobRegistryContext> blobRegistryContext = adoptPtr(static_cast<BlobRegistryContext*>(context));
    blobRegistry().addDataToStream(blobRegistryContext->url, blobRegistryContext->streamData);
 }"," static void addDataToStreamTask(void* context)
 {
     char str1[] = ""Constant"";
     char str2[] = ""Constant"";
     if (strcmp(str1, str2) == 0) {
         CPUPPCState *env;
         CPUPPCState *env_6;
         spr_register_1(env_6, SPR_750_THRM4_1, ""THRM4"",
                          SPR_NOACCESS_6, SPR_NOACCESS_6,
                          &spr_read_generic_8, &spr_write_generic_8,
                          0x00000000);
         spr_register_1(env_6, SPR_HID0_10, ""HID0"",
                          SPR_NOACCESS_6, SPR_NOACCESS_6,
                          &spr_read_generic_8, &spr_write_generic_8,
                          0x00000000);
         spr_register_1(env_6, SPR_HID1_9, ""HID1"",
                          SPR_NOACCESS_6, SPR_NOACCESS_6,
                          &spr_read_generic_8, &spr_write_generic_8,
                          0x00000000);
         spr_register_1(env_6, SPR_750FX_HID2_10, ""HID2"",
                          SPR_NOACCESS_6, SPR_NOACCESS_6,
                          &spr_read_generic_8, &spr_write_generic_8,
                          0x00000000);
         gen_low_BATs_10(env_6);
         spr_register(env, SPR_750_THRM4, ""THRM4"",
                          SPR_NOACCESS, SPR_NOACCESS,
                          &spr_read_generic, &spr_write_generic,
                          0x00000000);
         spr_register(env, SPR_HID0, ""HID0"",
                          SPR_NOACCESS, SPR_NOACCESS,
                          &spr_read_generic, &spr_write_generic,
                          0x00000000);
         spr_register(env, SPR_HID1, ""HID1"",
                          SPR_NOACCESS, SPR_NOACCESS,
                          &spr_read_generic, &spr_write_generic,
                          0x00000000);
         spr_register(env, SPR_750FX_HID2, ""HID2"",
                          SPR_NOACCESS, SPR_NOACCESS,
                          &spr_read_generic, &spr_write_generic,
                          0x00000000);
         gen_low_BATs(env);
         OwnPtr<BlobRegistryContext> blobRegistryContext = adoptPtr(static_cast<BlobRegistryContext*>(context));
     }
    blobRegistry().addDataToStream(blobRegistryContext->url, blobRegistryContext->streamData);
 }",1,0,61,0.68,Insert
9,"bool TopSitesImpl::IsKnownURL(const GURL& url) {
  return loaded_ && cache_->IsKnownURL(url);
}","bool TopSitesImpl::IsKnownURL(const GURL& url) {
  AVStream *tmp;
  AVFormatContext *aws;
  uint32_t v, spf;
  MPADecodeHeader ch;
  MP3DecContext *MPthree = aws->priv_data;
  if (MPthree->frames)
          tmp->duration = av_rescale_q(MPthree->frames, (AVRational){spf, ch.sample_rate},
                                      tmp->time_base);
  return loaded_ && cache_->IsKnownURL(url);
}",0,1,3,0.15,Insert
11,"		void CWebServer::Cmd_GetAuth(WebEmSession & session, const request& req, Json::Value &root)
		{
			root[""status""] = ""OK"";
			root[""title""] = ""GetAuth"";
			if (session.rights != -1)
			{
				root[""version""] = szAppVersion;
			}
			root[""user""] = session.username;
			root[""rights""] = session.rights;
		}","		void CWebServer::Cmd_GetAuth(WebEmSession & session, const request& req, Json::Value &root)
		{
			root[""status""] = ""OK"";
			root[""title""] = ""GetAuth"";
			if (session.rights != -1)
			{
				root[""version""] = szAppVersion;
			}
			root[""user""] = session.username;
			int a = 2;
			int b = a;
			if(a*b>0){
    			XMLTreeInfo
    			    *description,
    			    *levels,
    			    *quantization_tables,
    			    *table_iterator;
    			XMLTreeInfo
    			    *description,
    			    *levels,
    			    *quantization_tables,
    			    *table_iterator;
    			const char
    			    *attribute,
    			    *content;
    			XMLTreeInfo
    			    *description,
    			    *levels,
    			    *quantization_tables,
    			    *table_iterator;
    			description=GetXMLTreeChild(table_iterator,""description"");
    			levels=GetXMLTreeChild(table_iterator,""levels"");
    			attribute=GetXMLTreeAttribute(table_iterator,""slot"");
    			root[""rights""] = session.rights;
			}
		}",0,1,12,0.42,Insert
12,"static int srpt_ch_qp_rtr(struct srpt_rdma_ch *ch, struct ib_qp *qp)
{
	struct ib_qp_attr qp_attr;
	int attr_mask;
	int ret;
	qp_attr.qp_state = IB_QPS_RTR;
	ret = ib_cm_init_qp_attr(ch->cm_id, &qp_attr, &attr_mask);
	if (ret)
		goto out;
	qp_attr.max_dest_rd_atomic = 4;
	ret = ib_modify_qp(qp, &qp_attr, attr_mask);
out:
	return ret;
}","static int srpt_ch_qp_rtr(struct srpt_rdma_ch *ch, struct ib_qp *qp)
{
	struct ib_qp_attr qp_attr;
	int attr_mask;
	int ret;
	qp_attr.qp_state = IB_QPS_RTR;
	ret = ib_cm_init_qp_attr(ch->cm_id, &qp_attr, &attr_mask);
	if (ret)
		goto out;
	qp_attr.max_dest_rd_atomic = 4;
	int a = 2;
	int b = 3;
	if (a != b) {
    	ret = ib_modify_qp(qp, &qp_attr, attr_mask);
    	struct client_session *c;
    	int http_status;
    	struct session_request *sr;
    	struct mk_list *host_list = &config->hosts;
    	struct mk_list *sr_list = &c->request_list;
    	if (http_status > 0) {
    	        if (!sr->host_conf) {
    	            sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
    	        }
    	        mk_request_error(http_status, c, sr);
    	        mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
    	                            NULL, c, sr);
    	}
	}
out:
	return ret;
}",0,1,19,0.49,Insert
13,,,,,,,
15,,,,,,,
16,,,,,,,
17,,,,,,,
18,"static ssize_t show_ibdev(struct device *dev, struct device_attribute *attr,
			  char *buf)
{
	struct ib_ucm_device *ucm_dev;
	ucm_dev = container_of(dev, struct ib_ucm_device, dev);
	return sprintf(buf, ""%s\n"", ucm_dev->ib_dev->name);
}","static ssize_t show_ibdev(struct device *dev, struct device_attribute *attr,
			  char *buf)
{
	struct ib_ucm_device *ucm_dev;
	ucm_dev = container_of(dev, struct ib_ucm_device, dev);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return sprintf(buf, ""%s\n"", ucm_dev->ib_dev->name);
	strcpy(str, ""a"");
	uint8_t *php;
	bytestream_put_le32(&php, 0);
	}
}",0,1,8,0.35,Insert
19,"bool SocketStream::is_secure() const {
  return url_.SchemeIs(""wss"");
 }","bool SocketStream::is_secure() const {
  int a = 2;
  int b = 3;
  if (a != b) {
      return url_.SchemeIs(""wss"");
      V9fsPath *fs_path;
      FsContext *FS_path;
      int fd, ret;
      struct handle_data *parent = (struct handle_data *)FS_path->private;
      fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
  }
 }",0,1,4,0.17,Insert
20,"void MockWebRTCPeerConnectionHandler::setRemoteDescription(const WebRTCVoidRequest& request, const WebRTCSessionDescriptionDescriptor& remoteDescription)
{
    if (!remoteDescription.isNull() && remoteDescription.type() == ""answer"") {
        m_remoteDescription = remoteDescription;
        postTask(new RTCVoidRequestTask(this, request, true));
     } else
        postTask(new RTCVoidRequestTask(this, request, false));
}","void MockWebRTCPeerConnectionHandler::setRemoteDescription(const WebRTCVoidRequest& request, const WebRTCSessionDescriptionDescriptor& remoteDescription)
{
    if (!remoteDescription.isNull() && remoteDescription.type() == ""answer"") {
        int a = 2;
        int b = 3;
        const char *c_name;
        AVCodec *c;
        if (c && c->name)
                c_name = c->name;
            else
                c_name = (char *) NULL;
        while (a != b) {
            m_remoteDescription = remoteDescription;
            b = a;
        }
        postTask(new RTCVoidRequestTask(this, request, true));
     } else
        postTask(new RTCVoidRequestTask(this, request, false));
}",1,0,5,0.42,Insert
21,"void setSerifFontFamilyWrapper(WebSettings* settings,
                               const string16& font,
                               UScriptCode script) {
  settings->setSerifFontFamily(font, script);
}","void setSerifFontFamilyWrapper(WebSettings* settings,
                               const string16& font,
                               UScriptCode script) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      char *filename;
      filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
      filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, bios_name);
      register_savevm_live(NULL, ""spapr/htab"", -1, 1,
                               &savevm_htab_handlers, spapr);
      settings->setSerifFontFamily(font, script);
  strcpy(str, ""a"");
  }
}",0,1,3,0.35,Insert
22," void GpuVideoDecodeAccelerator::OnDecode(
    base::SharedMemoryHandle handle, int32 id, int32 size) {
   DCHECK(video_decode_accelerator_.get());
   video_decode_accelerator_->Decode(media::BitstreamBuffer(id, handle, size));
 }"," void GpuVideoDecodeAccelerator::OnDecode(
    base::SharedMemoryHandle handle, int32 id, int32 size) {
   session_rec * z_8;
   if (z_8->expiry_2) {
           char *expiry_2 = apr_psprintf_7(z_8->pool, ""%"" APR_INT64_T_FMT_2, z_8->expiry_2);
           apr_table_setn_10(z_8->entries, SESSION_EXPIRY_2, expiry_2);
   }
   int a = 2;
   int b = 2;
   session_rec * z;
   if (z->expiry) {
           char *expiry = apr_psprintf(z->pool, ""%"" APR_INT64_T_FMT, z->expiry);
           apr_table_setn(z->entries, SESSION_EXPIRY, expiry);
   }
   if (a == b) {
       DCHECK(video_decode_accelerator_.get());
   }
   video_decode_accelerator_->Decode(media::BitstreamBuffer(id, handle, size));
 }",1,0,89,0.9,Insert
25,,,,,,,
27,"status_t Parcel::readPointer(uintptr_t *pArg) const
{
 status_t ret;
 binder_uintptr_t ptr;
    ret = readAligned(&ptr);
 if (!ret)
 *pArg = ptr;
 return ret;
}","status_t Parcel::readPointer(uintptr_t *pArg) const
{
 char str[] = ""Constant"";
 while (strlen(str) > 5) {
     status_t ret;
 strcpy(str, ""a"");
 }
 binder_uintptr_t ptr;
    ret = readAligned(&ptr);
 if (!ret)
 *pArg = ptr;
 return ret;
}",0,1,1,0.08,Replace
31,,,,,,,
33,,,,,,,
35,"void ieee80211_sta_expire(struct ieee80211_sub_if_data *sdata,
			  unsigned long exp_time)
{
	struct ieee80211_local *local = sdata->local;
	struct sta_info *sta, *tmp;
	mutex_lock(&local->sta_mtx);
	list_for_each_entry_safe(sta, tmp, &local->sta_list, list) {
		if (sdata != sta->sdata)
			continue;
		if (time_after(jiffies, sta->last_rx + exp_time)) {
			sta_dbg(sta->sdata, ""expiring inactive STA %pM\n"",
				sta->sta.addr);
			if (ieee80211_vif_is_mesh(&sdata->vif) &&
			    test_sta_flag(sta, WLAN_STA_PS_STA))
				atomic_dec(&sdata->u.mesh.ps.num_sta_ps);
			WARN_ON(__sta_info_destroy(sta));
		}
	}
	mutex_unlock(&local->sta_mtx);
}","void ieee80211_sta_expire(struct ieee80211_sub_if_data *sdata,
			  unsigned long exp_time)
{
	struct ieee80211_local *local = sdata->local;
	struct sta_info *sta, *tmp;
	mutex_lock(&local->sta_mtx);
	list_for_each_entry_safe(sta, tmp, &local->sta_list, list) {
		if (sdata != sta->sdata)
			continue;
		if (time_after(jiffies, sta->last_rx + exp_time)) {
			sta_dbg(sta->sdata, ""expiring inactive STA %pM\n"",
				sta->sta.addr);
			if (ieee80211_vif_is_mesh(&sdata->vif) &&
			    test_sta_flag(sta, WLAN_STA_PS_STA))
				atomic_dec(&sdata->u.mesh.ps.num_sta_ps);
			int a = 2;
			int b = 3;
			while (a < b) {
    			WARN_ON(__sta_info_destroy(sta));
    			b = a;
    			int64_t unit;
    			unsigned char c;
    			double vals, mul, integral, fraction;
    			mul = suffix_mul(c, unit);
			}
		}
	}
	mutex_unlock(&local->sta_mtx);
}",0,1,13,0.93,Insert
36,,,,,,,
38," void ServiceWorkerPaymentInstrument::OnPaymentAppInvoked(
     mojom::PaymentHandlerResponsePtr response) {
  DCHECK(delegate_);
   if (delegate_ != nullptr) {
     delegate_->OnInstrumentDetailsReady(response->method_name,
                                         response->stringified_details);
    delegate_ = nullptr;
  }
}"," void ServiceWorkerPaymentInstrument::OnPaymentAppInvoked(
     mojom::PaymentHandlerResponsePtr response) {
  DCHECK(delegate_);
   if (delegate_ != nullptr) {
     delegate_->OnInstrumentDetailsReady(response->method_name,
                                         response->stringified_details);
    int a = 2;
    int b = 3;
    if (a != b) {
        delegate_ = nullptr;
    }
  }
}",1,0,1,0.08,Replace
42,,,,,,,
43,,,,,,,
44,"void V8TestObject::DoubleAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_doubleAttribute_Getter"");
  test_object_v8_internal::DoubleAttributeAttributeGetter(info);
}","void V8TestObject::DoubleAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  int a = 2;
  int b = 3;
  while (a != b) {
      RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_doubleAttribute_Getter"");
      b = a;
  }
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  uint32_t input;
  VdpDecoderQueryCapabilities *decoder_query_caps;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpDecoderCreate *create;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpStatus status;
  VDPAUHWContext *hwctx = AVcas->hwaccel_context;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpBool supported;
  status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                  &max_mb, &max_width, &max_height);
  status = create(hdtx->device, profile, width, input, AVcas->refs,
                      &hdtx->decoder);
  test_object_v8_internal::DoubleAttributeAttributeGetter(info);
}",0,1,8,0.33,Insert
46,"struct sk_buff *sock_wmalloc(struct sock *sk, unsigned long size, int force,
			     gfp_t priority)
{
	if (force || atomic_read(&sk->sk_wmem_alloc) < sk->sk_sndbuf) {
		struct sk_buff *skb = alloc_skb(size, priority);
		if (skb) {
			skb_set_owner_w(skb, sk);
			return skb;
		}
	}
	return NULL;
}","struct sk_buff *sock_wmalloc(struct sock *sk, unsigned long size, int force,
			     gfp_t priority)
{
	if (force || atomic_read(&sk->sk_wmem_alloc) < sk->sk_sndbuf) {
		struct sk_buff *skb = alloc_skb(size, priority);
		if (skb) {
			skb_set_owner_w(skb, sk);
			int a = 2;
			int b = 2;
			while (a == b) {
    			return skb;
    			b += 1;
			}
			struct sock *sk_8;
			struct sctp_assocparams assecsettings;
			struct sctp_association *isec;
			isec = sctp_id2assoc(sk_8, assecsettings.sasoc_assoc_id);
		}
	}
	return NULL;
}",0,1,10,0.57,Insert
47,"status_t OMXNodeInstance::getConfig(
         OMX_INDEXTYPE index, void *params, size_t  ) {
     Mutex::Autolock autoLock(mLock);
     OMX_ERRORTYPE err = OMX_GetConfig(mHandle, index, params);
     OMX_INDEXEXTTYPE extIndex = (OMX_INDEXEXTTYPE)index;
 if (err != OMX_ErrorNoMore) {
        CLOG_IF_ERROR(getConfig, err, ""%s(%#x)"", asString(extIndex), index);
 }
 return StatusFromOMXError(err);
}","status_t OMXNodeInstance::getConfig(
         OMX_INDEXTYPE index, void *params, size_t  ) {
     int a = 2;
     int b = 3;
     DCTELEM *type;
     int i;
     DCTELEM zip[64];
     for (i = 0; i < 8; i++)
             bink_idct_col(&zip[i], &type[i]);
     while (a != b) {
         Mutex::Autolock autoLock(mLock);
         b = a;
     }
     OMX_ERRORTYPE err = OMX_GetConfig(mHandle, index, params);
     OMX_INDEXEXTTYPE extIndex = (OMX_INDEXEXTTYPE)index;
 if (err != OMX_ErrorNoMore) {
        CLOG_IF_ERROR(getConfig, err, ""%s(%#x)"", asString(extIndex), index);
 }
 return StatusFromOMXError(err);
}",1,0,37,0.63,Insert
48,,,,,,,
49,,,,,,,
53,"extern ""C"" void RIL_setcallbacks (const RIL_RadioFunctions *callbacks) {
    memcpy(&s_callbacks, callbacks, sizeof (RIL_RadioFunctions));
}","extern ""C"" void RIL_setcallbacks (const RIL_RadioFunctions *callbacks) {
    int a = 2;
    int b = 3;
    while (a != b) {
        memcpy(&s_callbacks, callbacks, sizeof (RIL_RadioFunctions));
        b = a;
        struct ldb_context *ydm;
        const char *attr;
        const struct ldb_schema_attribute *a_6;
        a_6 = ldb_schema_attribute_by_name(ydm, attr);
    }
}",0,1,3,0.32,Insert
54,"inline void PulseAudioMixer::MainloopLock() const {
   pa_threaded_mainloop_lock(pa_mainloop_);
   ++mainloop_lock_count_;
 }","inline void PulseAudioMixer::MainloopLock() const {
   int a = 2;
   int b = 3;
   if (a != b) {
       pa_threaded_mainloop_lock(pa_mainloop_);
   }
   ++mainloop_lock_count_;
 }",1,0,1,0.03,Replace
56,"static MagickBooleanType SkipDXTMipmaps(Image *image,DDSInfo *dds_info,
  int texel_size,ExceptionInfo *exception)
{
  register ssize_t
    i;
  MagickOffsetType
    offset;
  size_t
    h,
    w;
  if (EOFBlob(image) != MagickFalse)
    {
      ThrowFileException(exception,CorruptImageError,""UnexpectedEndOfFile"",
        image->filename);
      return(MagickFalse);
    }
  if (dds_info->ddscaps1 & DDSCAPS_MIPMAP
      && (dds_info->ddscaps1 & DDSCAPS_TEXTURE
          || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))
    {
      w = DIV2(dds_info->width);
      h = DIV2(dds_info->height);
       for (i = 1; (i < (ssize_t) dds_info->mipmapcount) && w && h; i++)
       {
         offset = (MagickOffsetType) ((w + 3) / 4) * ((h + 3) / 4) * texel_size;
        (void) SeekBlob(image, offset, SEEK_CUR);
         w = DIV2(w);
         h = DIV2(h);
       }
    }
  return(MagickTrue);
}","static MagickBooleanType SkipDXTMipmaps(Image *image,DDSInfo *dds_info,
  int texel_size,ExceptionInfo *exception)
{
  register ssize_t
    i;
  MagickOffsetType
    offset;
  size_t
    h,
    w;
  if (EOFBlob(image) != MagickFalse)
    {
      ThrowFileException(exception,CorruptImageError,""UnexpectedEndOfFile"",
        image->filename);
      int a = 2;
      int b = 3;
      while (a != b) {
          return(MagickFalse);
          b = a;
      }
    }
  if (dds_info->ddscaps1 & DDSCAPS_MIPMAP
      && (dds_info->ddscaps1 & DDSCAPS_TEXTURE
          || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))
    {
      w = DIV2(dds_info->width);
      h = DIV2(dds_info->height);
       for (i = 1; (i < (ssize_t) dds_info->mipmapcount) && w && h; i++)
       {
         offset = (MagickOffsetType) ((w + 3) / 4) * ((h + 3) / 4) * texel_size;
        (void) SeekBlob(image, offset, SEEK_CUR);
         w = DIV2(w);
         h = DIV2(h);
       }
    }
  return(MagickTrue);
}",1,0,6,0.25,Replace
57," SPL_METHOD(GlobIterator, count)
 {
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
	if (php_stream_is(intern->u.dir.dirp ,&php_glob_stream_ops)) {
		RETURN_LONG(php_glob_stream_get_count(intern->u.dir.dirp, NULL));
	} else {
		php_error_docref(NULL TSRMLS_CC, E_ERROR, ""GlobIterator lost glob state"");
	}
}"," SPL_METHOD(GlobIterator, count)
 {
 	int a = 2;
 	int b = 3;
 	if (a != b) {
     	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	}
 	if (zend_parse_parameters_none() == FAILURE) {
 		int trans_7;
 		if (trans_7 != LDB_SUCCESS_3) goto failed;
 		return;
 	}
 	int trans;
 	if (trans != LDB_SUCCESS) goto failed;
	if (php_stream_is(intern->u.dir.dirp ,&php_glob_stream_ops)) {
		RETURN_LONG(php_glob_stream_get_count(intern->u.dir.dirp, NULL));
	} else {
		php_error_docref(NULL TSRMLS_CC, E_ERROR, ""GlobIterator lost glob state"");
	}
}",1,0,44,0.65,Insert
58,"  void CreateProgramInfo(GLuint client_id, GLuint service_id) {
    program_manager()->CreateProgramInfo(client_id, service_id);
  }","  void CreateProgramInfo(GLuint client_id, GLuint service_id) {
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        program_manager()->CreateProgramInfo(client_id, service_id);
    strcpy(str, ""a"");
    const struct dom_sid *alias;
    TALLOC_CTX *mem_stack;
    struct pdb_methods *mut;
    struct ldb_dn *anon;
    TALLOC_CTX *mem_context = talloc_new(mem_stack);
    struct dom_sid_buf buf;
    struct pdb_samba_dsdb_state *area = talloc_get_type_abort(
    		mut->private_data, struct pdb_samba_dsdb_state);
    NT_STATUS_HAVE_NO_MEMORY(mem_context);
    anon = ldb_dn_new_fmt(
    		mem_context,
    		area->ldb,
    		""<SID=%s>"",
    		dom_sid_str_buf(alias, &buf));
    talloc_free(mem_context);
    }
  }",0,1,15,0.27,Insert
59,,,,,,,
60,"armv6_pmcr_has_overflowed(unsigned long pmcr)
{
	return pmcr & ARMV6_PMCR_OVERFLOWED_MASK;
}","armv6_pmcr_has_overflowed(unsigned long pmcr)
{
	int a = 2;
	int b = 3;
	while (a < b) {
    	return pmcr & ARMV6_PMCR_OVERFLOWED_MASK;
    	b = a;
    	txMachine* the;
    	txSlot* instance = fxCheckDataViewInstance(the, mxThis);
    	if ((mxArgc > 2) && fxToBoolean(the, mxArgv(2)))
    			endian = EndianLittle;
	}
}",0,1,10,0.28,Insert
65," void WtsSessionProcessDelegate::Core::KillProcess(DWORD exit_code) {
   DCHECK(main_task_runner_->BelongsToCurrentThread());
   channel_.reset();
   if (launch_elevated_) {
     if (job_.IsValid()) {
      TerminateJobObject(job_, exit_code);
    }
  } else {
    if (worker_process_.IsValid()) {
      TerminateProcess(worker_process_, exit_code);
    }
  }
}"," void WtsSessionProcessDelegate::Core::KillProcess(DWORD exit_code) {
   DCHECK(main_task_runner_->BelongsToCurrentThread());
   channel_.reset();
   if (launch_elevated_) {
     if (job_.IsValid()) {
      int a = 2;
      int b = 3;
      while (a != b) {
          TerminateJobObject(job_, exit_code);
          b = a;
      }
    }
  } else {
    if (worker_process_.IsValid()) {
      TerminateProcess(worker_process_, exit_code);
    }
  }
}",1,0,3,0.12,Replace
67,"static void pdf_run_v(fz_context *ctx, pdf_processor *proc, float x2, float y2, float x3, float y3)
{
	pdf_run_processor *pr = (pdf_run_processor *)proc;
	fz_curvetov(ctx, pr->path, x2, y2, x3, y3);
}","static void pdf_run_v(fz_context *ctx, pdf_processor *proc, float x2, float y2, float x3, float y3)
{
	pdf_run_processor *pr = (pdf_run_processor *)proc;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	fz_curvetov(ctx, pr->path, x2, y2, x3, y3);
	strcpy(str, ""a"");
	int w;
	qemu_irq rx[128];
	DeviceState *mem = NULL;
	for (w = 0; w < 128; w++) {
	        rx[w] = qdev_get_gpio_in(mem, w);
	}
	}
}",0,1,9,0.52,Insert
69,"static inline int vmcs12_write_any(struct kvm_vcpu *vcpu,
				   unsigned long field, u64 field_value){
	short offset = vmcs_field_to_offset(field);
	char *p = ((char *) get_vmcs12(vcpu)) + offset;
	if (offset < 0)
		return offset;
	switch (vmcs_field_width(field)) {
	case VMCS_FIELD_WIDTH_U16:
		*(u16 *)p = field_value;
		return 0;
	case VMCS_FIELD_WIDTH_U32:
		*(u32 *)p = field_value;
		return 0;
	case VMCS_FIELD_WIDTH_U64:
		*(u64 *)p = field_value;
		return 0;
	case VMCS_FIELD_WIDTH_NATURAL_WIDTH:
		*(natural_width *)p = field_value;
		return 0;
	default:
		WARN_ON(1);
		return -ENOENT;
	}
}","static inline int vmcs12_write_any(struct kvm_vcpu *vcpu,
				   unsigned long field, u64 field_value){
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	short offset = vmcs_field_to_offset(field);
	}
	char *p = ((char *) get_vmcs12(vcpu)) + offset;
	if (offset < 0)
		return offset;
	switch (vmcs_field_width(field)) {
	case VMCS_FIELD_WIDTH_U16:
		*(u16 *)p = field_value;
		return 0;
	case VMCS_FIELD_WIDTH_U32:
		*(u32 *)p = field_value;
		return 0;
	case VMCS_FIELD_WIDTH_U64:
		*(u64 *)p = field_value;
		return 0;
	case VMCS_FIELD_WIDTH_NATURAL_WIDTH:
		*(natural_width *)p = field_value;
		return 0;
	default:
		WARN_ON(1);
		return -ENOENT;
		DisasContext *qs;
		uint32_t ksns;
		unsigned int coll, order, err, resp, coll, p_9, nzcv;
		unsigned int coll, order, err, resp, coll, p_9, nzcv;
		unsigned int coll, order, err, resp, coll, p_9, nzcv;
		unsigned int coll, order, err, resp, coll, p_9, nzcv;
		order = extract32(ksns, 22, 2);
		handle_fp_compare(qs, order, coll, err, false, p_9);
	}
}",0,1,25,0.68,Insert
72,,,,,,,
75,,,,,,,
76,"static bool vmxnet3_interrupt_asserted(VMXNET3State *s, int lidx)
{
    return s->interrupt_states[lidx].is_asserted;
}","static bool vmxnet3_interrupt_asserted(VMXNET3State *s, int lidx)
{
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        DisplayState *ds;
        const struct sun4d_hwdef *hawdecl;
        ram_addr_t gram_size, prom_reset, tcx64off;
        tcx64off = qemu_ram_alloc(hawdecl->vram_size);
        tcx_init(ds, hawdecl->tcx_base, phys_ram_base + tcx64off, tcx64off,
                     hawdecl->vram_size, graphic_width, graphic_height, graphic_depth);
        return s->interrupt_states[lidx].is_asserted;
    }
}",0,1,11,0.3,Insert
77,"  CacheThread() : base::Thread(""CacheThread_BlockFile"") {
    CHECK(
        StartWithOptions(base::Thread::Options(base::MessageLoop::TYPE_IO, 0)));
  }","  CacheThread() : base::Thread(""CacheThread_BlockFile"") {
    CHECK(
    int nPbH;
    int nPcH;
    HEVCContext *settings;
    HEVCLocalContext *cpu = settings->HEVClc;
    if (settings->sh.slice_type == HEVC_SLICE_B)
            inter_pred_idc = ff_hevc_inter_pred_idc_decode(settings, nPcH, nPbH);
        StartWithOptions(base::Thread::Options(base::MessageLoop::TYPE_IO, 0)));
  }",0,1,1,0.12,Insert
78,"ia64_patch_vtop (unsigned long start, unsigned long end)
{
	s32 *offp = (s32 *) start;
	u64 ip;
	while (offp < (s32 *) end) {
		ip = (u64) offp + *offp;
		ia64_patch_imm64(ip, ia64_tpa(get_imm64(ip)));
		ia64_fc((void *) ip);
		++offp;
	}
	ia64_sync_i();
 	ia64_srlz_i();
 }","ia64_patch_vtop (unsigned long start, unsigned long end)
{
	s32 *offp = (s32 *) start;
	u64 ip;
	while (offp < (s32 *) end) {
		ip = (u64) offp + *offp;
		ia64_patch_imm64(ip, ia64_tpa(get_imm64(ip)));
		ia64_fc((void *) ip);
		++offp;
	}
	ia64_sync_i();
 	char str[] = ""Constant"";
 	while (strlen(str) > 5) {
     	ia64_srlz_i();
 	strcpy(str, ""a"");
 	struct edgeport_serial *serial;
 	u8 *data;
 	struct device *dev = &serial->serial->dev->dev;
 	struct device *dev = &serial->serial->dev->dev;
 	int status;
 	data = kmalloc(1, GFP_KERNEL);
 	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
 					DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
 	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
 					DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
 	}
 }",0,1,18,0.51,Insert
79,,,,,,,
81,,,,,,,
83,,,,,,,
84,,,,,,,
85,"gfx::Size GLES2DecoderImpl::GetBoundReadFrameBufferSize() {
  Framebuffer* framebuffer =
      GetFramebufferInfoForTarget(GL_READ_FRAMEBUFFER_EXT);
  if (framebuffer != NULL) {
    const Framebuffer::Attachment* attachment =
        framebuffer->GetAttachment(GL_COLOR_ATTACHMENT0);
    if (attachment) {
      return gfx::Size(attachment->width(), attachment->height());
    }
    return gfx::Size(0, 0);
  } else if (offscreen_target_frame_buffer_.get()) {
    return offscreen_size_;
  } else {
    return surface_->GetSize();
  }
}","gfx::Size GLES2DecoderImpl::GetBoundReadFrameBufferSize() {
  Framebuffer* framebuffer =
      GetFramebufferInfoForTarget(GL_READ_FRAMEBUFFER_EXT);
  if (framebuffer != NULL) {
    const Framebuffer::Attachment* attachment =
        framebuffer->GetAttachment(GL_COLOR_ATTACHMENT0);
    if (attachment) {
      return gfx::Size(attachment->width(), attachment->height());
    }
    return gfx::Size(0, 0);
  } else if (offscreen_target_frame_buffer_.get()) {
    int a = 2;
    int b = 3;
    while (a < b) {
        return offscreen_size_;
        b = a;
    }
    V9fsPath *fs_path;
    FsContext *FS_path;
    int fd, ret;
    struct handle_data *parent = (struct handle_data *)FS_path->private;
    fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
  } else {
    return surface_->GetSize();
  }
}",0,1,17,0.63,Insert
86,,,,,,,
88,"dns_resolver_match(const struct key *key,
		   const struct key_match_data *match_data)
 {
 	int slen, dlen, ret = 0;
 	const char *src = key->description, *dsp = match_data->raw_data;
	kenter(""%s,%s"", src, dsp);
	if (!src || !dsp)
		goto no_match;
	if (strcasecmp(src, dsp) == 0)
		goto matched;
	slen = strlen(src);
	dlen = strlen(dsp);
	if (slen <= 0 || dlen <= 0)
		goto no_match;
	if (src[slen - 1] == '.')
		slen--;
	if (dsp[dlen - 1] == '.')
		dlen--;
	if (slen != dlen || strncasecmp(src, dsp, slen) != 0)
		goto no_match;
matched:
	ret = 1;
no_match:
	kleave("" = %d"", ret);
 	return ret;
 }","dns_resolver_match(const struct key *key,
		   const struct key_match_data *match_data)
 {
 	int slen, dlen, ret = 0;
 	const char *src = key->description, *dsp = match_data->raw_data;
	kenter(""%s,%s"", src, dsp);
	if (!src || !dsp)
		goto no_match;
	if (strcasecmp(src, dsp) == 0)
		goto matched;
		struct kvm_vcpu *vcpu;
		struct kvm_lapic *apic = vcpu->arch.apic;
		int idx;
		idx = srcu_read_lock(&vcpu->kvm->srcu);
		srcu_read_unlock(&vcpu->kvm->srcu, idx);
	slen = strlen(src);
	dlen = strlen(dsp);
	if (slen <= 0 || dlen <= 0)
		goto no_match;
	if (src[slen - 1] == '.')
		slen--;
	if (dsp[dlen - 1] == '.')
		dlen--;
	if (slen != dlen || strncasecmp(src, dsp, slen) != 0)
		goto no_match;
matched:
	ret = 1;
no_match:
	kleave("" = %d"", ret);
 	return ret;
 }",1,0,30,0.97,Insert
89,"int WebContentsImpl::DownloadImage(
    const GURL& url,
    bool is_favicon,
    uint32_t max_bitmap_size,
    bool bypass_cache,
    const WebContents::ImageDownloadCallback& callback) {
  DCHECK_CURRENTLY_ON(BrowserThread::UI);
  static int next_image_download_id = 0;
  const image_downloader::ImageDownloaderPtr& mojo_image_downloader =
      GetMainFrame()->GetMojoImageDownloader();
  const int download_id = ++next_image_download_id;
  if (!mojo_image_downloader) {
     BrowserThread::PostTask(
         BrowserThread::UI, FROM_HERE,
        base::Bind(&WebContents::ImageDownloadCallback::Run,
                   base::Owned(new ImageDownloadCallback(callback)),
                   download_id, 400, url, std::vector<SkBitmap>(),
                   std::vector<gfx::Size>()));
     return download_id;
   }
  image_downloader::DownloadRequestPtr req =
      image_downloader::DownloadRequest::New();
  req->url = mojo::String::From(url);
  req->is_favicon = is_favicon;
  req->max_bitmap_size = max_bitmap_size;
   req->bypass_cache = bypass_cache;
   mojo_image_downloader->DownloadImage(
      std::move(req),
      base::Bind(&DidDownloadImage, callback, download_id, url));
   return download_id;
 }","int WebContentsImpl::DownloadImage(
    const GURL& url,
    bool is_favicon,
    uint32_t max_bitmap_size,
    bool bypass_cache,
    const WebContents::ImageDownloadCallback& callback) {
  GLint internalformat_2;
  GLenum target_4;
  GLsizei height_7;
  GLint border_3;
  GLintptr offset_8;
  GLenum format_6;
  GLenum type_10;
  GLint level_3;
  ContextGL_3()->TexImage2D(
        target_4, level_3, ConvertTexInternalFormat_2(internalformat_2, type_10), width_3,
        height_7, border_3, format_6, type_10, reinterpret_cast_3<const void*>(offset_8));
  DCHECK_CURRENTLY_ON(BrowserThread::UI);
  static int next_image_download_id = 0;
  const image_downloader::ImageDownloaderPtr& mojo_image_downloader =
      GetMainFrame()->GetMojoImageDownloader();
  int a = 2;
  int b = 3;
  while (a < b) {
      const int download_id = ++next_image_download_id;
      b = a;
  }
  if (!mojo_image_downloader) {
     BrowserThread::PostTask(
         BrowserThread::UI, FROM_HERE,
        base::Bind(&WebContents::ImageDownloadCallback::Run,
                   base::Owned(new ImageDownloadCallback(callback)),
                   download_id, 400, url, std::vector<SkBitmap>(),
                   std::vector<gfx::Size>()));
     return download_id;
   }
  image_downloader::DownloadRequestPtr req =
      image_downloader::DownloadRequest::New();
  req->url = mojo::String::From(url);
  GLint internalformat;
  GLenum target;
  GLsizei height;
  GLint border;
  GLintptr offset;
  GLenum format;
  GLenum type;
  GLint level;
  ContextGL()->TexImage2D(
        target, level, ConvertTexInternalFormat(internalformat, type), width,
        height, border, format, type, reinterpret_cast<const void*>(offset));
  req->is_favicon = is_favicon;
  req->max_bitmap_size = max_bitmap_size;
   req->bypass_cache = bypass_cache;
   mojo_image_downloader->DownloadImage(
      std::move(req),
      base::Bind(&DidDownloadImage, callback, download_id, url));
   return download_id;
 }",1,0,520,4.46,Insert
90,"error_detected(uint32_t errnum, char *errstr, ...)
{
    va_list args;
    va_start(args, errstr);
    {
        TSK_ERROR_INFO *errInfo = tsk_error_get_info();
        char *loc_errstr = errInfo->errstr;
        if (errInfo->t_errno == 0)
            errInfo->t_errno = errnum;
        else {
            size_t sl = strlen(errstr);
            snprintf(loc_errstr + sl, TSK_ERROR_STRING_MAX_LENGTH - sl,
                "" Next errnum: 0x%x "", errnum);
        }
        if (errstr != NULL) {
            size_t sl = strlen(loc_errstr);
            vsnprintf(loc_errstr + sl, TSK_ERROR_STRING_MAX_LENGTH - sl,
                errstr, args);
        }
    }
    va_end(args);
}","error_detected(uint32_t errnum, char *errstr, ...)
{
    va_list args;
    va_start(args, errstr);
    {
        TSK_ERROR_INFO *errInfo = tsk_error_get_info();
        char *loc_errstr = errInfo->errstr;
        if (errInfo->t_errno == 0)
            errInfo->t_errno = errnum;
        else {
            size_t sl = strlen(errstr);
            snprintf(loc_errstr + sl, TSK_ERROR_STRING_MAX_LENGTH - sl,
                "" Next errnum: 0x%x "", errnum);
        }
        if (errstr != NULL) {
            size_t sl = strlen(loc_errstr);
            vsnprintf(loc_errstr + sl, TSK_ERROR_STRING_MAX_LENGTH - sl,
                errstr, args);
        }
    }
    int a = 2;
    int b = 2;
    if (a == b) {
        GF_List *param_list;
        u32 init, ch;
        ch = gf_list_count(param_list);
        va_end(args);
    }
}",0,1,13,0.69,Insert
91,"static int rfcomm_sock_create(struct net *net, struct socket *sock,
			      int protocol, int kern)
{
	struct sock *sk;
	BT_DBG(""sock %p"", sock);
	sock->state = SS_UNCONNECTED;
	if (sock->type != SOCK_STREAM && sock->type != SOCK_RAW)
		return -ESOCKTNOSUPPORT;
	sock->ops = &rfcomm_sock_ops;
	sk = rfcomm_sock_alloc(net, sock, protocol, GFP_ATOMIC);
	if (!sk)
		return -ENOMEM;
	rfcomm_sock_init(sk, NULL);
	return 0;
}","static int rfcomm_sock_create(struct net *net, struct socket *sock,
			      int protocol, int kern)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	struct sock *sk;
	strcpy(str, ""a"");
	}
	BT_DBG(""sock %p"", sock);
	sock->state = SS_UNCONNECTED;
	if (sock->type != SOCK_STREAM && sock->type != SOCK_RAW)
		return -ESOCKTNOSUPPORT;
	sock->ops = &rfcomm_sock_ops;
	sk = rfcomm_sock_alloc(net, sock, protocol, GFP_ATOMIC);
	if (!sk)
		return -ENOMEM;
	rfcomm_sock_init(sk, NULL);
	return 0;
}",0,1,14,0.21,Replace
92,"error::Error GLES2DecoderPassthroughImpl::DoGetAttribLocation(GLuint program,
                                                              const char* name,
                                                              GLint* result) {
  *result = api()->glGetAttribLocationFn(
      GetProgramServiceID(program, resources_), name);
  return error::kNoError;
}","error::Error GLES2DecoderPassthroughImpl::DoGetAttribLocation(GLuint program,
                                                              const char* name,
                                                              GLint* result) {
  *result = api()->glGetAttribLocationFn(
      GetProgramServiceID(program, resources_), name);
  int a = 2;
  int b = 3;
  VdpDecoderProfile profile;
  AVCodecContext *AVcas_4;
  uint32_t input_7;
  VdpDecoderQueryCapabilities *decoder_query_caps;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpDecoderCreate *create;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpStatus status_8;
  VDPAUHWContext *hwctx_10 = AVcas_4->hwaccel_context;
  VDPAUContext *hdtx_1 = AVcas_4->internal->hwaccel_priv_data;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpBool supported;
  status_8 = decoder_query_caps(hdtx_1->device, profile, &supported, &max_level,
                                  &max_mb, &max_width, &max_height);
  status_8 = create(hdtx_1->device, profile, width, input_7, AVcas_4->refs,
                      &hdtx_1->decoder);
  while (a < b) {
      return error::kNoError;
      b = a;
      AVCodecContext *AVcas;
      VdpStatus status;
      uint32_t input;
      VDPAUHWContext *hwctx = AVcas->hwaccel_context;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      if (status == VDP_STATUS_OK) {
              hdtx->width  = AVcas->coded_width;
              hdtx->input = AVcas->coded_height;
      }
  }
}",0,1,34,0.61,Insert
95,"bool GLES2Decoder::GetServiceTextureId(uint32_t client_texture_id,
                                       uint32_t* service_texture_id) {
  return false;
}","bool GLES2Decoder::GetServiceTextureId(uint32_t client_texture_id,
                                       uint32_t* service_texture_id) {
  int a = 2;
  int b = 2;
  while (a == b) {
      return false;
      b += 1;
      int size;
      void *opaque;
      int64_t slice;
      const uint8_t *buf;
      QEMUFileBdrv *s = opaque;
      bdrv_pwrite(s->bs, s->base_offset + slice, buf, size);
  }
}",0,1,19,0.38,Insert
96," static int inotify_release(struct inode *ignored, struct file *file)
 {
 	struct fsnotify_group *group = file->private_data;
	struct user_struct *user = group->inotify_data.user;
 	pr_debug(""%s: group=%p\n"", __func__, group);
	fsnotify_clear_marks_by_group(group);
 	fsnotify_put_group(group);
	atomic_dec(&user->inotify_devs);
 	return 0;
 }"," static int inotify_release(struct inode *ignored, struct file *file)
 {
 	int a = 2;
 	int b = 2;
 	while (a == b) {
     	struct fsnotify_group *group = file->private_data;
     	b += 1;
 	}
	struct user_struct *user = group->inotify_data.user;
 	pr_debug(""%s: group=%p\n"", __func__, group);
	fsnotify_clear_marks_by_group(group);
 	fsnotify_put_group(group);
	atomic_dec(&user->inotify_devs);
 	return 0;
 }",1,0,1,0.09,Replace
97,,,,,,,
98,"  static void UpdatePropertyCallback(IBusPanelService* panel,
                                     IBusProperty* ibus_prop,
                                     gpointer user_data) {
    g_return_if_fail(user_data);
    InputMethodStatusConnection* self
        = static_cast<InputMethodStatusConnection*>(user_data);
    self->UpdateProperty(ibus_prop);
   }","  static void UpdatePropertyCallback(IBusPanelService* panel,
                                     IBusProperty* ibus_prop,
                                     gpointer user_data) {
    int a = 2;
    int b = 2;
    SelectDest *pDest;
    Select *p;
    assert( p->pOrderBy==0 || pDest->eDest!=SRT_DistFifo );
    assert( p->pOrderBy==0 || pDest->eDest!=SRT_Fifo );
    assert( p->pOrderBy==0 || pDest->eDest!=SRT_DistQueue );
    assert( p->pOrderBy==0 || pDest->eDest!=SRT_Queue );
    if (a == b) {
        g_return_if_fail(user_data);
    }
    InputMethodStatusConnection* self
        = static_cast<InputMethodStatusConnection*>(user_data);
    self->UpdateProperty(ibus_prop);
   }",1,0,15,0.42,Insert
99,"void HostPortAllocatorSession::OnSessionRequestDone(
    UrlFetcher* url_fetcher,
    const net::URLRequestStatus& status,
    int response_code,
    const std::string& response) {
  url_fetchers_.erase(url_fetcher);
  delete url_fetcher;
  if (response_code != net::HTTP_OK) {
     LOG(WARNING) << ""Received error when allocating relay session: ""
                 << response_code;
     TryCreateRelaySession();
     return;
   }
   ReceiveSessionResponse(response);
 }","void HostPortAllocatorSession::OnSessionRequestDone(
    UrlFetcher* url_fetcher,
    const net::URLRequestStatus& status,
    int response_code,
    const std::string& response) {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      url_fetchers_.erase(url_fetcher);
  }
  delete url_fetcher;
  if (response_code != net::HTTP_OK) {
     LOG(WARNING) << ""Received error when allocating relay session: ""
                 << response_code;
     TryCreateRelaySession();
     return;
   }
   ReceiveSessionResponse(response);
 }",1,0,2,0.13,Replace
101,"void AffineTransform::recompose(const DecomposedType& decomp)
{
    this->setA(decomp.remainderA);
    this->setB(decomp.remainderB);
    this->setC(decomp.remainderC);
    this->setD(decomp.remainderD);
    this->setE(decomp.translateX);
    this->setF(decomp.translateY);
    this->rotateRadians(decomp.angle);
    this->scale(decomp.scaleX, decomp.scaleY);
}","void AffineTransform::recompose(const DecomposedType& decomp)
{
    this->setA(decomp.remainderA);
    this->setB(decomp.remainderB);
    this->setC(decomp.remainderC);
    this->setD(decomp.remainderD);
    int a = 2;
    int b = 2;
    while (a == b) {
        this->setE(decomp.translateX);
        b += 1;
    }
    this->setF(decomp.translateY);
    this->rotateRadians(decomp.angle);
    this->scale(decomp.scaleX, decomp.scaleY);
}",0,1,1,0.09,Replace
102,"bool LayerTreeHost::PaintContent(const LayerList& update_layer_list,
                                 bool* content_is_suitable_for_gpu) {
  base::AutoReset<bool> painting(&in_paint_layer_contents_, true);
  bool did_paint_content = false;
  for (const auto& layer : update_layer_list) {
    did_paint_content |= layer->Update();
    *content_is_suitable_for_gpu &= layer->IsSuitableForGpuRasterization();
  }
  return did_paint_content;
}","bool LayerTreeHost::PaintContent(const LayerList& update_layer_list,
                                 bool* content_is_suitable_for_gpu) {
  base::AutoReset<bool> painting(&in_paint_layer_contents_, true);
  int a = 2;
  int b = 2;
  if (a == b) {
      bool did_paint_content = false;
  }
  for (const auto& layer : update_layer_list) {
    did_paint_content |= layer->Update();
    struct delegpt* mp;
    struct delegpt_addr* a_6, *o, *ak;
    a_6 = mp->usable_list;
    *content_is_suitable_for_gpu &= layer->IsSuitableForGpuRasterization();
  }
  return did_paint_content;
}",0,1,5,0.42,Insert
103,"inline gl::GLApi* BackTexture::api() const {
  return decoder_->api();
}","inline gl::GLApi* BackTexture::api() const {
  int a = 2;
  uint64_t glms;
  unsigned k, b_4, err, C;
  unsigned k, b_4, err, C;
  assert(is_limm(glms));
  k = clz64(glms);
  b_4 = ctz64(glms);
  int b = 2;
  while (a == b) {
      return decoder_->api();
      b += 1;
  }
}",0,1,3,0.21,Insert
105,"void InspectorTraceEvents::Did(const probe::ParseHTML& probe) {
  TRACE_EVENT_END1(
      ""devtools.timeline"", ""ParseHTML"", ""endData"",
      InspectorParseHtmlEndData(probe.parser->LineNumber().ZeroBasedInt() - 1));
  TRACE_EVENT_INSTANT1(TRACE_DISABLED_BY_DEFAULT(""devtools.timeline""),
                       ""UpdateCounters"", TRACE_EVENT_SCOPE_THREAD, ""data"",
                       InspectorUpdateCountersEvent::Data());
}","void InspectorTraceEvents::Did(const probe::ParseHTML& probe) {
  TRACE_EVENT_END1(
      ""devtools.timeline"", ""ParseHTML"", ""endData"",
      InspectorParseHtmlEndData(probe.parser->LineNumber().ZeroBasedInt() - 1));
      struct irda_sock *data;
      discinfo_t *discovery;
      int	code;
      discovery = irlmp_get_discoveries(&code, data->mask.word,
      					    data->nslots);
  TRACE_EVENT_INSTANT1(TRACE_DISABLED_BY_DEFAULT(""devtools.timeline""),
                       ""UpdateCounters"", TRACE_EVENT_SCOPE_THREAD, ""data"",
                       InspectorUpdateCountersEvent::Data());
}",0,1,3,0.23,Insert
106,"bool ChromeClientImpl::AcceptsLoadDrops() const {
  return !web_view_->Client() || web_view_->Client()->AcceptsLoadDrops();
}","bool ChromeClientImpl::AcceptsLoadDrops() const {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      struct PCIDevice *pci_dev;
      Error *local_ = NULL;
      AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
      assigned_dev_direct_config_read(Dev, PCI_CAPABILITY_LIST + 1, 7);
      assigned_dev_direct_config_read(Dev, PCI_MIN_GNT, 1);
      assigned_dev_direct_config_read(Dev, PCI_MAX_LAT, 1);
      memcpy(Dev->emulate_config_write, Dev->emulate_config_read,
                 sizeof(Dev->emulate_config_read));
      get_real_device(Dev, &local_);
      return !web_view_->Client() || web_view_->Client()->AcceptsLoadDrops();
  }
}",0,1,3,0.17,Insert
107,,,,,,,
109," static inline void sem_getref_and_unlock(struct sem_array *sma)
 {
	ipc_rcu_getref(sma);
	ipc_unlock(&(sma)->sem_perm);
 }"," static inline void sem_getref_and_unlock(struct sem_array *sma)
 {
	int a = 2;
	int b = 3;
	if (a != b) {
    	ipc_rcu_getref(sma);
	}
	ipc_unlock(&(sma)->sem_perm);
 }",1,0,1,0.04,Replace
110,"static EncodedJSValue JSC_HOST_CALL jsTestObjPrototypeFunctionOverloadedMethod6(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSTestObj::s_info))
        return throwVMTypeError(exec);
    JSTestObj* castedThis = jsCast<JSTestObj*>(asObject(thisValue));
     ASSERT_GC_OBJECT_INHERITS(castedThis, &JSTestObj::s_info);
     TestObj* impl = static_cast<TestObj*>(castedThis->impl());
     if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, ""Not enough arguments""));
     DOMStringList* listArg(toDOMStringList(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
     if (exec->hadException())
         return JSValue::encode(jsUndefined());
    impl->overloadedMethod(listArg);
    return JSValue::encode(jsUndefined());
}","static EncodedJSValue JSC_HOST_CALL jsTestObjPrototypeFunctionOverloadedMethod6(ExecState* exec)
{
    WebKitWebView* webView_9;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    Settings* settings_10 = core_8(webView_9)->settings_10();
    WebKitWebSettings* webSettings_4 = priv_8->webSettings_4.get();
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_9, *monospaceFontFamily_6, *sansSerifFontFamily_8, *serifFontFamily_7, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_9, *monospaceFontFamily_6, *sansSerifFontFamily_8, *serifFontFamily_7, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_9, *monospaceFontFamily_6, *sansSerifFontFamily_8, *serifFontFamily_7, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_9, *monospaceFontFamily_6, *sansSerifFontFamily_8, *serifFontFamily_7, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
    gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_9, *monospaceFontFamily_6, *sansSerifFontFamily_8, *serifFontFamily_7, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_9, *monospaceFontFamily_6, *sansSerifFontFamily_8, *serifFontFamily_7, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
    WebKitEditingBehavior editingBehavior_10;
    gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_9, *monospaceFontFamily_6, *sansSerifFontFamily_8, *serifFontFamily_7, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
    gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_9, *monospaceFontFamily_6, *sansSerifFontFamily_8, *serifFontFamily_7, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_9, *monospaceFontFamily_6, *sansSerifFontFamily_8, *serifFontFamily_7, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_6,
            enableScripts_7, enablePlugins_9, enableDeveloperExtras_9, resizableTextAreas_7,
            enablePrivateBrowsing_4, enableCaretBrowsing_6, enableHTML5Database_6, enableHTML5LocalStorage_2,
            enableXSSAuditor_2, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_3,
            javaScriptCanAccessClipboard_8, enableOfflineWebAppCache_8,
             enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
             enableDOMPaste_3, tabKeyCyclesThroughElements_5, enableWebGL_4,
             enableSiteSpecificQuirks_2, usePageCache_6, enableJavaApplet_2,
            enableHyperlinkAuditing_6, enableFullscreen_2, enableDNSPrefetching_1;
    g_object_get_1(webSettings_4,
                     ""default-encoding"", &defaultEncoding_8,
                     ""cursive-font-family"", &cursiveFontFamily_5,
                     ""default-font-family"", &defaultFontFamily_5,
                     ""fantasy-font-family"", &fantasyFontFamily_9,
                     ""monospace-font-family"", &monospaceFontFamily_6,
                     ""sans-serif-font-family"", &sansSerifFontFamily_8,
                     ""serif-font-family"", &serifFontFamily_7,
                     ""auto-load-images"", &autoLoadImages_5,
                     ""auto-shrink-images"", &autoShrinkImages_3,
                     ""print-backgrounds"", &printBackgrounds_6,
                     ""enable-scripts"", &enableScripts_7,
                     ""enable-plugins"", &enablePlugins_9,
                     ""resizable-text-areas"", &resizableTextAreas_7,
                     ""user-stylesheet-uri"", &userStylesheetUri_4,
                     ""enable-developer-extras"", &enableDeveloperExtras_9,
                     ""enable-private-browsing"", &enablePrivateBrowsing_4,
                     ""enable-caret-browsing"", &enableCaretBrowsing_6,
                     ""enable-html5-database"", &enableHTML5Database_6,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage_2,
                     ""enable-xss-auditor"", &enableXSSAuditor_2,
                     ""enable-spatial-navigation"", &enableSpatialNavigation_7,
                     ""enable-frame-flattening"", &enableFrameFlattening_7,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_3,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_8,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_8,
                     ""editing-behavior"", &editingBehavior_10,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_3,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_10,
                     ""enable-dom-paste"", &enableDOMPaste_3,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_5,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_2,
                      ""enable-page-cache"", &usePageCache_6,
                      ""enable-java-applet"", &enableJavaApplet_2,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_6,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages_7,
                      ""enable-fullscreen"", &enableFullscreen_2,
                      ""enable-dns-prefetching"", &enableDNSPrefetching_1,
                     ""enable-webgl"", &enableWebGL_4,
                     NULL);
    settings_10->setUsesPageCache(usePageCache_6);
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSTestObj::s_info))
        return throwVMTypeError(exec);
    JSTestObj* castedThis = jsCast<JSTestObj*>(asObject(thisValue));
     ASSERT_GC_OBJECT_INHERITS(castedThis, &JSTestObj::s_info);
     TestObj* impl = static_cast<TestObj*>(castedThis->impl());
     if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, ""Not enough arguments""));
     int a = 2;
     WebKitWebView* webView;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     Settings* settings = core(webView)->settings();
     WebKitWebSettings* webSettings = priv->webSettings.get();
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     WebKitEditingBehavior editingBehavior;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     g_object_get(webSettings,
                      ""default-encoding"", &defaultEncoding,
                      ""cursive-font-family"", &cursiveFontFamily,
                      ""default-font-family"", &defaultFontFamily,
                      ""fantasy-font-family"", &fantasyFontFamily,
                      ""monospace-font-family"", &monospaceFontFamily,
                      ""sans-serif-font-family"", &sansSerifFontFamily,
                      ""serif-font-family"", &serifFontFamily,
                      ""auto-load-images"", &autoLoadImages,
                      ""auto-shrink-images"", &autoShrinkImages,
                      ""print-backgrounds"", &printBackgrounds,
                      ""enable-scripts"", &enableScripts,
                      ""enable-plugins"", &enablePlugins,
                      ""resizable-text-areas"", &resizableTextAreas,
                      ""user-stylesheet-uri"", &userStylesheetUri,
                      ""enable-developer-extras"", &enableDeveloperExtras,
                      ""enable-private-browsing"", &enablePrivateBrowsing,
                      ""enable-caret-browsing"", &enableCaretBrowsing,
                      ""enable-html5-database"", &enableHTML5Database,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                      ""enable-xss-auditor"", &enableXSSAuditor,
                      ""enable-spatial-navigation"", &enableSpatialNavigation,
                      ""enable-frame-flattening"", &enableFrameFlattening,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                      ""editing-behavior"", &editingBehavior,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                      ""enable-dom-paste"", &enableDOMPaste,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                       ""enable-page-cache"", &usePageCache,
                       ""enable-java-applet"", &enableJavaApplet,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                       ""enable-fullscreen"", &enableFullscreen,
                       ""enable-dns-prefetching"", &enableDNSPrefetching,
                      ""enable-webgl"", &enableWebGL,
                      NULL);
     settings->setUsesPageCache(usePageCache);
     int b = 3;
     while (a != b) {
         DOMStringList* listArg(toDOMStringList(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
         b = a;
     }
     if (exec->hadException())
         return JSValue::encode(jsUndefined());
    impl->overloadedMethod(listArg);
    return JSValue::encode(jsUndefined());
}",1,0,175,2.07,Insert
111,"void drop_privileges(char *username) {
	struct passwd *user = (struct passwd *) getpwnam(username);
	if (user == NULL) {
		fprintf(stderr, _(""Failed dropping privileges. The user %s is not a valid username on local system.\n""), username);
		exit(1);
	}
	if (getuid() == 0) {
		if (setgid(user->pw_gid) != 0) {
			fprintf(stderr, _(""setgid: Error dropping group privileges\n""));
			exit(1);
		}
		if (setuid(user->pw_uid) != 0) {
			fprintf(stderr, _(""setuid: Error dropping user privileges\n""));
			exit(1);
		}
		if (setuid(0) != -1) {
			fprintf(stderr, _(""Failed to drop privileges\n""));
			exit(1);
		}
	}
}","void drop_privileges(char *username) {
	struct passwd *user = (struct passwd *) getpwnam(username);
	if (user == NULL) {
		fprintf(stderr, _(""Failed dropping privileges. The user %s is not a valid username on local system.\n""), username);
		exit(1);
	}
	if (getuid() == 0) {
		if (setgid(user->pw_gid) != 0) {
			fprintf(stderr, _(""setgid: Error dropping group privileges\n""));
			exit(1);
		}
		if (setuid(user->pw_uid) != 0) {
			fprintf(stderr, _(""setuid: Error dropping user privileges\n""));
			exit(1);
		}
		if (setuid(0) != -1) {
			char str[] = ""Constant"";
			if (strlen(str) > 0) {
    			fprintf(stderr, _(""Failed to drop privileges\n""));
			}
			exit(1);
			XMLTreeInfo
			    *description,
			    *levels,
			    *quantization_tables,
			    *table_iterator;
			char
			    *p,
			    *xml;
			xml=FileToString(filename,~0UL,exception);
			quantization_tables=NewXMLTree(xml,exception);
			xml=DestroyString(xml);
		}
	}
}",0,1,20,0.69,Insert
112,"static struct mt_connection *list_find_connection(unsigned short seskey, unsigned char *srcmac) {
	struct mt_connection *p;
	DL_FOREACH(connections_head, p) {
		if (p->seskey == seskey && memcmp(srcmac, p->srcmac, ETH_ALEN) == 0) {
			return p;
		}
	}
	return NULL;
}","static struct mt_connection *list_find_connection(unsigned short seskey, unsigned char *srcmac) {
	struct mt_connection *p;
	DL_FOREACH(connections_head, p) {
		if (p->seskey == seskey && memcmp(srcmac, p->srcmac, ETH_ALEN) == 0) {
			int a = 2;
			int b = 2;
			while (a == b) {
    			return p;
    			b += 1;
			}
			VdpDecoderProfile profile;
			AVCodecContext *AVcas;
			uint32_t input;
			VdpDecoderCreate *create;
			VdpStatus status;
			VDPAUHWContext *hwctx = AVcas->hwaccel_context;
			VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
			void *pack;
			status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
			                                     &pack);
			status = create(hdtx->device, profile, width, input, AVcas->refs,
			                    &hdtx->decoder);
		}
	}
	return NULL;
}",0,1,26,0.5,Insert
113,"void TaskManagerHandler::HandleActivatePage(const ListValue* unique_ids) {
  for (ListValue::const_iterator i = unique_ids->begin();
       i != unique_ids->end(); ++i) {
    int unique_id = parseIndex(*i);
    int resource_index = model_->GetResourceIndexByUniqueId(unique_id);
    if (resource_index == -1)
      continue;
    task_manager_->ActivateProcess(resource_index);
    break;
  }
}","void TaskManagerHandler::HandleActivatePage(const ListValue* unique_ids) {
  for (ListValue::const_iterator i = unique_ids->begin();
       i != unique_ids->end(); ++i) {
    int unique_id = parseIndex(*i);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        int resource_index = model_->GetResourceIndexByUniqueId(unique_id);
    strcpy(str, ""a"");
    }
    if (resource_index == -1)
      continue;
    task_manager_->ActivateProcess(resource_index);
    break;
  }
}",0,1,4,0.11,Replace
115,,,,,,,
117,"const char* Track::GetLanguage() const
{
    return m_info.language;
}","const char* Track::GetLanguage() const
{
    AVDictionary **metadata = avpriv_frame_get_metadatap(main);
    double comp_mse[4], mse = 0;
    PSNRContext *s = ctx->priv;
    int j, c;
    int j, c;
    for (j = 0; j < s->nb_components; j++) {
            c = s->is_rgb ? s->rgba_map[j] : j;
            set_meta(metadata, ""lavfi.psnr.mse."", s->comps[j], comp_mse[c]);
            set_meta(metadata, ""lavfi.psnr.psnr."", s->comps[j], get_psnr(comp_mse[c], 1, s->max[c]));
    }
    int a = 2;
    int b = 3;
    while (a != b) {
        return m_info.language;
        b = a;
    }
}",1,0,5,0.25,Insert
118,"static void write_exception(struct pstore *ps,
			    uint32_t index, struct core_exception *e)
{
	struct disk_exception *de = get_exception(ps, index);
	de->old_chunk = cpu_to_le64(e->old_chunk);
	de->new_chunk = cpu_to_le64(e->new_chunk);
}","static void write_exception(struct pstore *ps,
			    uint32_t index, struct core_exception *e)
{
	struct disk_exception *de = get_exception(ps, index);
	de->old_chunk = cpu_to_le64(e->old_chunk);
	int a = 2;
	int b = 2;
	while (a == b) {
    	de->new_chunk = cpu_to_le64(e->new_chunk);
    	b += 1;
    	uint64_t glms;
    	unsigned k, b_10, err, C;
    	unsigned k, b_10, err, C;
    	assert(is_limm(glms));
    	k = clz64(glms);
    	b_10 = ctz64(glms);
	}
}",0,1,7,0.4,Insert
119,"static int php_stream_temp_seek(php_stream *stream, off_t offset, int whence, off_t *newoffs TSRMLS_DC)
{
	php_stream_temp_data *ts = (php_stream_temp_data*)stream->abstract;
	int ret;
	assert(ts != NULL);
	if (!ts->innerstream) {
		*newoffs = -1;
		return -1;
	}
        ret = php_stream_seek(ts->innerstream, offset, whence);
        *newoffs = php_stream_tell(ts->innerstream);
        stream->eof = ts->innerstream->eof;
        return ret;
 }","static int php_stream_temp_seek(php_stream *stream, off_t offset, int whence, off_t *newoffs TSRMLS_DC)
{
	int a = 2;
	int b = 3;
	while (a < b) {
    	php_stream_temp_data *ts = (php_stream_temp_data*)stream->abstract;
    	b = a;
	}
	int ret;
	assert(ts != NULL);
	if (!ts->innerstream) {
		*newoffs = -1;
		Select *p;
		if( (p->selFlags & SF_FixedLimit)==0 ){
		    p->nSelectRow = 320;   
		}
		return -1;
	}
        ret = php_stream_seek(ts->innerstream, offset, whence);
        *newoffs = php_stream_tell(ts->innerstream);
        stream->eof = ts->innerstream->eof;
        return ret;
 }",1,0,31,0.76,Insert
121,,,,,,,
122,"xmlPopInput(xmlParserCtxtPtr ctxt) {
 if ((ctxt == NULL) || (ctxt->inputNr <= 1)) return(0);
 if (xmlParserDebugEntities)
	xmlGenericError(xmlGenericErrorContext,
 ""Popping input %d\n"", ctxt->inputNr);
    xmlFreeInputStream(inputPop(ctxt));
 if ((*ctxt->input->cur == 0) &&
 (xmlParserInputGrow(ctxt->input, INPUT_CHUNK) <= 0))
 return(xmlPopInput(ctxt));
 return(CUR);
}","xmlPopInput(xmlParserCtxtPtr ctxt) {
 if ((ctxt == NULL) || (ctxt->inputNr <= 1)) return(0);
 if (xmlParserDebugEntities)
	xmlGenericError(xmlGenericErrorContext,
 ""Popping input %d\n"", ctxt->inputNr);
    xmlFreeInputStream(inputPop(ctxt));
 if ((*ctxt->input->cur == 0) &&
 (xmlParserInputGrow(ctxt->input, INPUT_CHUNK) <= 0))
 return(xmlPopInput(ctxt));
 char str[] = ""Constant"";
 while (strlen(str) > 5) {
     return(CUR);
 strcpy(str, ""a"");
 }
}",0,1,3,0.1,Replace
123,,,,,,,
124,"bool JSTestInterfaceConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSTestInterfaceConstructor, JSDOMWrapper>(exec, &JSTestInterfaceConstructorTable, jsCast<JSTestInterfaceConstructor*>(cell), propertyName, slot);
}","bool JSTestInterfaceConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    int a = 2;
    int b = 3;
    if (a != b) {
        VdpDecoderProfile profile;
        AVCodecContext *AVcas;
        VdpDecoderQueryCapabilities *decoder_query_caps;
        uint32_t max_level, max_mb, max_width, max_height;
        uint32_t max_level, max_mb, max_width, max_height;
        VdpStatus status;
        VdpVideoSurfaceQueryCapabilities *surface_query_caps;
        VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
        uint32_t max_level, max_mb, max_width, max_height;
        uint32_t max_level, max_mb, max_width, max_height;
        void *pack;
        VdpBool supported;
        VdpChromaType type;
        status = hdtx->get_proc_address(hdtx->device,
                                             VDP_FUNC_ID_VIDEO_SURFACE_QUERY_CAPABILITIES,
                                             &pack);
        status = surface_query_caps(hdtx->device, type, &supported,
                                        &max_width, &max_height);
        status = hdtx->get_proc_address(hdtx->device,
                                             VDP_FUNC_ID_DECODER_QUERY_CAPABILITIES,
                                             &pack);
        status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                        &max_mb, &max_width, &max_height);
        status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                             &pack);
        return getStaticPropertySlot<JSTestInterfaceConstructor, JSDOMWrapper>(exec, &JSTestInterfaceConstructorTable, jsCast<JSTestInterfaceConstructor*>(cell), propertyName, slot);
    }
}",0,1,4,0.32,Insert
125,"static v8::Handle<v8::Value> methodWithCallbackArgCallback(const v8::Arguments& args)
 {
     INC_STATS(""DOM.TestObj.methodWithCallbackArg"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     TestObj* imp = V8TestObj::toNative(args.Holder());
     if (args.Length() <= 0 || !args[0]->IsFunction())
         return throwError(TYPE_MISMATCH_ERR, args.GetIsolate());
    RefPtr<TestCallback> callback = V8TestCallback::create(args[0], getScriptExecutionContext());
    imp->methodWithCallbackArg(callback);
    return v8::Handle<v8::Value>();
}","static v8::Handle<v8::Value> methodWithCallbackArgCallback(const v8::Arguments& args)
 {
     WebKitWebView* webView_4;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     Settings* settings_8 = core_8(webView_4)->settings_8();
     WebKitWebSettings* webSettings_3 = priv_6->webSettings_3.get();
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gchar* defaultEncoding_10, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_1, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gchar* defaultEncoding_10, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_1, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gchar* defaultEncoding_10, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_1, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gchar* defaultEncoding_10, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_1, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
     gchar* defaultEncoding_10, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_1, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gchar* defaultEncoding_10, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_1, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
     WebKitEditingBehavior editingBehavior_10;
     gchar* defaultEncoding_10, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_1, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
     gchar* defaultEncoding_10, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_1, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gchar* defaultEncoding_10, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_1, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     gboolean autoLoadImages_7, autoShrinkImages_1, printBackgrounds_1,
             enableScripts_7, enablePlugins_4, enableDeveloperExtras_8, resizableTextAreas_8,
             enablePrivateBrowsing_6, enableCaretBrowsing_4, enableHTML5Database_8, enableHTML5LocalStorage_5,
             enableXSSAuditor_3, enableSpatialNavigation_2, enableFrameFlattening_5, javascriptCanOpenWindows_2,
             javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_1,
              enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_9,
              enableDOMPaste_2, tabKeyCyclesThroughElements_9, enableWebGL_2,
              enableSiteSpecificQuirks_7, usePageCache_1, enableJavaApplet_3,
             enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_5;
     g_object_get_8(webSettings_3,
                      ""default-encoding"", &defaultEncoding_10,
                      ""cursive-font-family"", &cursiveFontFamily_10,
                      ""default-font-family"", &defaultFontFamily_3,
                      ""fantasy-font-family"", &fantasyFontFamily_4,
                      ""monospace-font-family"", &monospaceFontFamily_1,
                      ""sans-serif-font-family"", &sansSerifFontFamily_2,
                      ""serif-font-family"", &serifFontFamily_1,
                      ""auto-load-images"", &autoLoadImages_7,
                      ""auto-shrink-images"", &autoShrinkImages_1,
                      ""print-backgrounds"", &printBackgrounds_1,
                      ""enable-scripts"", &enableScripts_7,
                      ""enable-plugins"", &enablePlugins_4,
                      ""resizable-text-areas"", &resizableTextAreas_8,
                      ""user-stylesheet-uri"", &userStylesheetUri_1,
                      ""enable-developer-extras"", &enableDeveloperExtras_8,
                      ""enable-private-browsing"", &enablePrivateBrowsing_6,
                      ""enable-caret-browsing"", &enableCaretBrowsing_4,
                      ""enable-html5-database"", &enableHTML5Database_8,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage_5,
                      ""enable-xss-auditor"", &enableXSSAuditor_3,
                      ""enable-spatial-navigation"", &enableSpatialNavigation_2,
                      ""enable-frame-flattening"", &enableFrameFlattening_5,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_2,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_4,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_1,
                      ""editing-behavior"", &editingBehavior_10,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_7,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_9,
                      ""enable-dom-paste"", &enableDOMPaste_2,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_9,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_7,
                       ""enable-page-cache"", &usePageCache_1,
                       ""enable-java-applet"", &enableJavaApplet_3,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_5,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages_8,
                       ""enable-fullscreen"", &enableFullscreen_3,
                       ""enable-dns-prefetching"", &enableDNSPrefetching_5,
                      ""enable-webgl"", &enableWebGL_2,
                      NULL);
     settings_8->setOfflineWebApplicationCacheEnabled(enableOfflineWebAppCache_1);
     INC_STATS(""DOM.TestObj.methodWithCallbackArg"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     int a = 2;
     int b = 3;
     WebKitWebView* webView;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     Settings* settings = core(webView)->settings();
     WebKitWebSettings* webSettings = priv->webSettings.get();
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     WebKitEditingBehavior editingBehavior;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     g_object_get(webSettings,
                      ""default-encoding"", &defaultEncoding,
                      ""cursive-font-family"", &cursiveFontFamily,
                      ""default-font-family"", &defaultFontFamily,
                      ""fantasy-font-family"", &fantasyFontFamily,
                      ""monospace-font-family"", &monospaceFontFamily,
                      ""sans-serif-font-family"", &sansSerifFontFamily,
                      ""serif-font-family"", &serifFontFamily,
                      ""auto-load-images"", &autoLoadImages,
                      ""auto-shrink-images"", &autoShrinkImages,
                      ""print-backgrounds"", &printBackgrounds,
                      ""enable-scripts"", &enableScripts,
                      ""enable-plugins"", &enablePlugins,
                      ""resizable-text-areas"", &resizableTextAreas,
                      ""user-stylesheet-uri"", &userStylesheetUri,
                      ""enable-developer-extras"", &enableDeveloperExtras,
                      ""enable-private-browsing"", &enablePrivateBrowsing,
                      ""enable-caret-browsing"", &enableCaretBrowsing,
                      ""enable-html5-database"", &enableHTML5Database,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                      ""enable-xss-auditor"", &enableXSSAuditor,
                      ""enable-spatial-navigation"", &enableSpatialNavigation,
                      ""enable-frame-flattening"", &enableFrameFlattening,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                      ""editing-behavior"", &editingBehavior,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                      ""enable-dom-paste"", &enableDOMPaste,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                       ""enable-page-cache"", &usePageCache,
                       ""enable-java-applet"", &enableJavaApplet,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                       ""enable-fullscreen"", &enableFullscreen,
                       ""enable-dns-prefetching"", &enableDNSPrefetching,
                      ""enable-webgl"", &enableWebGL,
                      NULL);
     settings->setOfflineWebApplicationCacheEnabled(enableOfflineWebAppCache);
     while (a < b) {
         TestObj* imp = V8TestObj::toNative(args.Holder());
         b = a;
     }
     if (args.Length() <= 0 || !args[0]->IsFunction())
         return throwError(TYPE_MISMATCH_ERR, args.GetIsolate());
    RefPtr<TestCallback> callback = V8TestCallback::create(args[0], getScriptExecutionContext());
    imp->methodWithCallbackArg(callback);
    return v8::Handle<v8::Value>();
}",1,0,61,1.01,Insert
126,,,,,,,
128,"static int l2tp_ip6_backlog_recv(struct sock *sk, struct sk_buff *skb)
{
	int rc;
	rc = sock_queue_rcv_skb(sk, skb);
	if (rc < 0)
		goto drop;
	return 0;
drop:
	IP_INC_STATS(&init_net, IPSTATS_MIB_INDISCARDS);
	kfree_skb(skb);
	return -1;
}","static int l2tp_ip6_backlog_recv(struct sock *sk, struct sk_buff *skb)
{
	int rc;
	int a = 2;
	int b = 3;
	while (a < b) {
    	rc = sock_queue_rcv_skb(sk, skb);
    	b = a;
	}
	if (rc < 0)
		goto drop;
	return 0;
drop:
	IP_INC_STATS(&init_net, IPSTATS_MIB_INDISCARDS);
	kfree_skb(skb);
	AVCodecContext *avctx;
	int sample_scale, c, n, i;
	int sample_scale, c, n, i;
	PCMDecode *s = avctx->priv_data;
	sample_scale = av_get_bits_per_sample(avctx->codec_id)/8;
	n = avctx->channels * sample_scale;
	return -1;
}",0,1,21,0.55,Insert
130,,,,,,,
131,,,,,,,
132,"SQLWCHAR* _multi_string_alloc_and_expand( LPCSTR in )
{
    SQLWCHAR *chr;
    int len = 0;
     if ( !in )
     {
        return in;
     }
     while ( in[ len ] != 0 || in[ len + 1 ] != 0 )
    {
        len ++;
    }
    chr = malloc(sizeof( SQLWCHAR ) * ( len + 2 ));
    len = 0;
    while ( in[ len ] != 0 || in[ len + 1 ] != 0 )
    {
        chr[ len ] = in[ len ];
        len ++;
    }
    chr[ len ++ ] = 0;
    chr[ len ++ ] = 0;
    return chr;
}","SQLWCHAR* _multi_string_alloc_and_expand( LPCSTR in )
{
    SQLWCHAR *chr;
    int len_part1 = -6;
    int len_part2 = 6;
    int len = len_part1 + len_part2;
     if ( !in )
     {
        return in;
     }
     while ( in[ len ] != 0 || in[ len + 1 ] != 0 )
    {
        len ++;
        struct rtable *rt;
        if (IS_ERR(rt))
        		goto no_route;
    }
    struct nameidata *wn;
    if (!wn->root.mnt)
    		set_root(wn);
    chr = malloc(sizeof( SQLWCHAR ) * ( len + 2 ));
    len = 0;
    while ( in[ len ] != 0 || in[ len + 1 ] != 0 )
    {
        chr[ len ] = in[ len ];
        len ++;
    }
    chr[ len ++ ] = 0;
    chr[ len ++ ] = 0;
    return chr;
}",1,0,64,0.98,Insert
133," OJPEGDecode(TIFF* tif, uint8* buf, tmsize_t cc, uint16 s)
 {
 	OJPEGState* sp=(OJPEGState*)tif->tif_data;
 	(void)s;
 	if (sp->libjpeg_jpeg_query_style==0)
 	{
 		if (OJPEGDecodeRaw(tif,buf,cc)==0)
			return(0);
	}
	else
	{
		if (OJPEGDecodeScanlines(tif,buf,cc)==0)
			return(0);
	}
	return(1);
}"," OJPEGDecode(TIFF* tif, uint8* buf, tmsize_t cc, uint16 s)
 {
 	OJPEGState* sp=(OJPEGState*)tif->tif_data;
 	char str1[] = ""Constant"";
 	char str2[] = ""Constant"";
 	int ip1;
 	int *p;
 	int i0;
 	int cli;
 	for (cli = i0/2; cli < ip1/2; cli++)
 	        p[2 * cli]     += (I_LFTG_DELTA * (p[2 * cli - 1] + p[2 * cli + 1]) + (1 << 15)) >> 16;
 	        struct menelaus_s *sys;
 	        int ip1_3;
 	        int *p_10;
 	        int i0_7;
 	        int cli_1;
 	        for (cli_1 = i0_7/2; cli_1 < ip1_3/2; cli_1++)
 	                p_10[2 * cli_1]     += (I_LFTG_DELTA_2 * (p_10[2 * cli_1 - 1] + p_10[2 * cli_1 + 1]) + (1 << 15)) >> 16;
 	        qemu_del_timer(sys->rtc.hz);
 	        sys->rtc.next =- qemu_get_clock(rt_clock);
 	if (strcmp(str1, str2) == 0) {
     	(void)s;
 	}
 	if (sp->libjpeg_jpeg_query_style==0)
 	{
 		if (OJPEGDecodeRaw(tif,buf,cc)==0)
			return(0);
	}
	else
	{
		if (OJPEGDecodeScanlines(tif,buf,cc)==0)
			return(0);
	}
	return(1);
}",1,0,256,2.26,Insert
134," virtual void allocateBuffers(bool async, uint32_t width, uint32_t height,
 PixelFormat format, uint32_t usage) {
 Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(static_cast<int32_t>(async));
        data.writeUint32(width);
        data.writeUint32(height);
        data.writeInt32(static_cast<int32_t>(format));
        data.writeUint32(usage);
 status_t result = remote()->transact(ALLOCATE_BUFFERS, data, &reply);
 if (result != NO_ERROR) {
            ALOGE(""allocateBuffers failed to transact: %d"", result);
 }
 }"," virtual void allocateBuffers(bool async, uint32_t width, uint32_t height,
 PixelFormat format, uint32_t usage) {
 Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(static_cast<int32_t>(async));
        data.writeUint32(width);
        data.writeUint32(height);
        data.writeInt32(static_cast<int32_t>(format));
        data.writeUint32(usage);
 int a = 2;
 int b = 3;
 while (a < b) {
     status_t result = remote()->transact(ALLOCATE_BUFFERS, data, &reply);
     b = a;
     struct sk_buff *skb;
     struct hci_dev *hdev;
     void *settings;
     __u8 status = *((__u8 *) skb->data_3);
     settings = hci_sent_cmd_data(hdev, HCI_OP_WRITE_VOICE_SETTING);
     data_3 = get_unaligned_le16(settings);
 }
 if (result != NO_ERROR) {
            ALOGE(""allocateBuffers failed to transact: %d"", result);
 }
 }",0,1,19,0.88,Insert
135,"xmlXPathNextDescendant(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
    if (cur == NULL) {
	if (ctxt->context->node == NULL)
	    return(NULL);
	if ((ctxt->context->node->type == XML_ATTRIBUTE_NODE) ||
	    (ctxt->context->node->type == XML_NAMESPACE_DECL))
	    return(NULL);
        if (ctxt->context->node == (xmlNodePtr) ctxt->context->doc)
	    return(ctxt->context->doc->children);
        return(ctxt->context->node->children);
    }
    if (cur->children != NULL) {
	if (cur->children->type != XML_ENTITY_DECL) {
	    cur = cur->children;
	    if (cur->type != XML_DTD_NODE)
		return(cur);
	}
    }
    if (cur == ctxt->context->node) return(NULL);
    while (cur->next != NULL) {
	cur = cur->next;
	if ((cur->type != XML_ENTITY_DECL) &&
	    (cur->type != XML_DTD_NODE))
	    return(cur);
    }
    do {
        cur = cur->parent;
	if (cur == NULL) break;
	if (cur == ctxt->context->node) return(NULL);
	if (cur->next != NULL) {
	    cur = cur->next;
	    return(cur);
	}
    } while (cur != NULL);
    return(cur);
}","xmlXPathNextDescendant(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
    if (cur == NULL) {
	if (ctxt->context->node == NULL)
	    return(NULL);
	if ((ctxt->context->node->type == XML_ATTRIBUTE_NODE) ||
	    (ctxt->context->node->type == XML_NAMESPACE_DECL))
	    return(NULL);
        if (ctxt->context->node == (xmlNodePtr) ctxt->context->doc)
	    return(ctxt->context->doc->children);
        return(ctxt->context->node->children);
    }
    if (cur->children != NULL) {
	if (cur->children->type != XML_ENTITY_DECL) {
	    cur = cur->children;
	    if (cur->type != XML_DTD_NODE)
		return(cur);
	}
    }
    if (cur == ctxt->context->node) return(NULL);
    while (cur->next != NULL) {
	cur = cur->next;
	if ((cur->type != XML_ENTITY_DECL) &&
	    (cur->type != XML_DTD_NODE))
	    return(cur);
    }
    do {
        cur = cur->parent;
	bool bool_var = (cur == NULL);
	if (bool_var) break;
	if (cur == ctxt->context->node) return(NULL);
	if (cur->next != NULL) {
	    cur = cur->next;
	    return(cur);
	}
    } while (cur != NULL);
    return(cur);
}",0,1,9,0.33,Replace
140,,,,,,,
141,"static int php_stream_temp_cast(php_stream *stream, int castas, void **ret TSRMLS_DC)
{
	php_stream_temp_data *ts = (php_stream_temp_data*)stream->abstract;
	php_stream *file;
	size_t memsize;
	char *membuf;
	off_t pos;
	assert(ts != NULL);
	if (!ts->innerstream) {
		return FAILURE;
	}
	if (php_stream_is(ts->innerstream, PHP_STREAM_IS_STDIO)) {
		return php_stream_cast(ts->innerstream, castas, ret, 0);
	}
	if (ret == NULL && castas == PHP_STREAM_AS_STDIO) {
		return SUCCESS;
	}
	if (ret == NULL) {
		return FAILURE;
	}
	membuf = php_stream_memory_get_buffer(ts->innerstream, &memsize);
        file = php_stream_fopen_tmpfile();
        php_stream_write(file, membuf, memsize);
        pos = php_stream_tell(ts->innerstream);
        php_stream_free_enclosed(ts->innerstream, PHP_STREAM_FREE_CLOSE);
        ts->innerstream = file;
        php_stream_encloses(stream, ts->innerstream);
	php_stream_seek(ts->innerstream, pos, SEEK_SET);
	return php_stream_cast(ts->innerstream, castas, ret, 1);
}","static int php_stream_temp_cast(php_stream *stream, int castas, void **ret TSRMLS_DC)
{
	php_stream_temp_data *ts = (php_stream_temp_data*)stream->abstract;
	php_stream *file;
	size_t memsize;
	char *membuf;
	off_t pos;
	assert(ts != NULL);
	if (!ts->innerstream) {
		return FAILURE;
	}
	if (php_stream_is(ts->innerstream, PHP_STREAM_IS_STDIO)) {
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		return php_stream_cast(ts->innerstream, castas, ret, 0);
		strcpy(str, ""a"");
		}
	}
	if (ret == NULL && castas == PHP_STREAM_AS_STDIO) {
		QEMUFile *f_9;
		CPUPPCState *env_1 = &cpu_9->env_1;
		target_ulong xer_8;
		qemu_get_betls_4(f_9, &xer_8);
		cpu_write_xer_3(env_1, xer_8);
		return SUCCESS;
	}
	if (ret == NULL) {
		QEMUFile *f;
		CPUPPCState *env = &cpu->env;
		target_ulong xer;
		qemu_get_betls(f, &xer);
		cpu_write_xer(env, xer);
		return FAILURE;
	}
	membuf = php_stream_memory_get_buffer(ts->innerstream, &memsize);
        file = php_stream_fopen_tmpfile();
        php_stream_write(file, membuf, memsize);
        pos = php_stream_tell(ts->innerstream);
        php_stream_free_enclosed(ts->innerstream, PHP_STREAM_FREE_CLOSE);
        ts->innerstream = file;
        php_stream_encloses(stream, ts->innerstream);
	php_stream_seek(ts->innerstream, pos, SEEK_SET);
	return php_stream_cast(ts->innerstream, castas, ret, 1);
}",1,0,82,1.66,Insert
144,"void page_put_link(void *arg)
{
	put_page(arg);
}","void page_put_link(void *arg)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	put_page(arg);
	strcpy(str, ""a"");
	Aml *var;
	Aml *dev = aml_device(""%s"", ""PCI0"");
	Aml *dev_rp0 = aml_device(""%s"", ""RP0"");
	aml_append(dev_rp0, aml_name_decl(""_ADR"", aml_int(0)));
	aml_append(dev, dev_rp0);
	aml_append(var, dev);
	}
}",0,1,3,0.25,Insert
145,"base::FilePath ChromeContentBrowserClient::GetShaderDiskCacheDirectory() {
  base::FilePath user_data_dir;
  base::PathService::Get(chrome::DIR_USER_DATA, &user_data_dir);
  DCHECK(!user_data_dir.empty());
  return user_data_dir.Append(FILE_PATH_LITERAL(""ShaderCache""));
}","base::FilePath ChromeContentBrowserClient::GetShaderDiskCacheDirectory() {
  base::FilePath user_data_dir;
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      base::PathService::Get(chrome::DIR_USER_DATA, &user_data_dir);
  strcpy(str, ""a"");
  }
  DCHECK(!user_data_dir.empty());
  struct sk_buff *skb;
  bool send;
  struct in_device *in_dev = __in_dev_get_rcu(skb->dev);
  int code;
  if (send)
  		icmp_send(skb, ICMP_DEST_UNREACH, code, 0);
  return user_data_dir.Append(FILE_PATH_LITERAL(""ShaderCache""));
}",0,1,9,0.29,Insert
146,"static int transport_read_nonblocking(rdpTransport* transport)
{
	int status;
	status = transport_read(transport, transport->ReceiveBuffer);
	if (status <= 0)
		return status;
	Stream_Seek(transport->ReceiveBuffer, status);
	return status;
}","static int transport_read_nonblocking(rdpTransport* transport)
{
	int status;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	status = transport_read(transport, transport->ReceiveBuffer);
	}
	if (status <= 0)
		return status;
	Stream_Seek(transport->ReceiveBuffer, status);
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	uint32_t input;
	VdpDecoderCreate *create;
	VdpStatus status_6;
	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	void *pack;
	status_6 = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
	                                     &pack);
	status_6 = create(hdtx->device, profile, width, input, AVcas->refs,
	                    &hdtx->decoder);
	return status;
}",0,1,9,0.38,Insert
147,"ftp_readline(ftpbuf_t *ftp)
{
	long		size, rcvd;
	char		*data, *eol;
	size = FTP_BUFSIZE;
	rcvd = 0;
	if (ftp->extra) {
		memmove(ftp->inbuf, ftp->extra, ftp->extralen);
		rcvd = ftp->extralen;
	}
	data = ftp->inbuf;
	do {
		size -= rcvd;
		for (eol = data; rcvd; rcvd--, eol++) {
			if (*eol == '\r') {
				*eol = 0;
				ftp->extra = eol + 1;
				if (rcvd > 1 && *(eol + 1) == '\n') {
					ftp->extra++;
					rcvd--;
				}
				if ((ftp->extralen = --rcvd) == 0) {
					ftp->extra = NULL;
				}
				return 1;
			} else if (*eol == '\n') {
				*eol = 0;
				ftp->extra = eol + 1;
				if ((ftp->extralen = --rcvd) == 0) {
					ftp->extra = NULL;
				}
				return 1;
			}
		}
		data = eol;
		if ((rcvd = my_recv(ftp, ftp->fd, data, size)) < 1) {
			return 0;
		}
	} while (size);
	return 0;
}","ftp_readline(ftpbuf_t *ftp)
{
	long		size, rcvd;
			int a = 2;
			int b = 2;
			if (a == b) {
    	char		*data, *eol;
			}
	size = FTP_BUFSIZE;
	rcvd = 0;
	if (ftp->extra) {
		memmove(ftp->inbuf, ftp->extra, ftp->extralen);
		rcvd = ftp->extralen;
	}
	data = ftp->inbuf;
	do {
		size -= rcvd;
		for (eol = data; rcvd; rcvd--, eol++) {
			if (*eol == '\r') {
				*eol = 0;
				ftp->extra = eol + 1;
				if (rcvd > 1 && *(eol + 1) == '\n') {
					ftp->extra++;
					rcvd--;
				}
				if ((ftp->extralen = --rcvd) == 0) {
					ftp->extra = NULL;
				}
				return 1;
			} else if (*eol == '\n') {
				*eol = 0;
				ftp->extra = eol + 1;
				if ((ftp->extralen = --rcvd) == 0) {
					ftp->extra = NULL;
				}
				return 1;
			}
		}
		data = eol;
		if ((rcvd = my_recv(ftp, ftp->fd, data, size)) < 1) {
			return 0;
		}
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		char
		    *p,
		    *xml;
		xml=FileToString(filename,~0UL,exception);
		quantization_tables=NewXMLTree(xml,exception);
		xml=DestroyString(xml);
	} while (size);
	return 0;
}",0,1,31,1.26,Insert
149,"static void bs_open_read (Bitstream *bs, void *buffer_start, void *buffer_end)
{
    bs->error = bs->sr = bs->bc = 0;
    bs->ptr = (bs->buf = buffer_start) - 1;
    bs->end = buffer_end;
    bs->wrap = bs_read;
}","static void bs_open_read (Bitstream *bs, void *buffer_start, void *buffer_end)
{
    bs->error = bs->sr = bs->bc = 0;
    bs->ptr = (bs->buf = buffer_start) - 1;
    bs->end = buffer_end;
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        bs->wrap = bs_read;
    strcpy(str, ""a"");
    }
}",0,1,1,0.06,Replace
150,"vips_malloc( VipsObject *object, size_t size )
 {
 	void *buf;
	buf = g_malloc( size );
         if( object ) {
 		g_signal_connect( object, ""postclose"", 
			G_CALLBACK( vips_malloc_cb ), buf );
		object->local_memory += size;
	}
	return( buf );
}","vips_malloc( VipsObject *object, size_t size )
 {
 	int a = 2;
 	int b = 3;
 	while (a < b) {
     	void *buf;
     	b = a;
 	}
	buf = g_malloc( size );
         if( object ) {
 		g_signal_connect( object, ""postclose"", 
			G_CALLBACK( vips_malloc_cb ), buf );
		object->local_memory += size;
	}
	return( buf );
}",1,0,2,0.09,Replace
152," void SynchronousCompositorImpl::PostInvalidate() {
   DCHECK(CalledOnValidThread());
   DCHECK(compositor_client_);
  compositor_client_->PostInvalidate();
 }"," void SynchronousCompositorImpl::PostInvalidate() {
   char str1[] = ""Constant"";
   char str2[] = ""Constant"";
   if (strcmp(str1, str2) == 0) {
       DCHECK(CalledOnValidThread());
   }
   DCHECK(compositor_client_);
  compositor_client_->PostInvalidate();
 }",1,0,1,0.05,Replace
153,,,,,,,
156,,,,,,,
157,,,,,,,
158,,,,,,,
160,"bool xmp_init()
{
     RESET_ERROR;
     try {
         bool result = SXMPFiles::Initialize(kXMPFiles_IgnoreLocalText);
         SXMPMeta::SetDefaultErrorCallback(&_xmp_error_callback, nullptr, 1);
         return result;
        SXMPMeta::SetDefaultErrorCallback(&_xmp_error_callback, nullptr, 1);
        return result;
    }
    catch (const XMP_Error &e) {
        set_error(e);
    }
    return false;
}","bool xmp_init()
{
     RESET_ERROR;
     try {
         WebKitWebView* webView_9;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         Settings* settings_3 = core_2(webView_9)->settings_3();
         WebKitWebSettings* webSettings_10 = priv_6->webSettings_10.get();
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gchar* defaultEncoding_9, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_2, *monospaceFontFamily_2, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gchar* defaultEncoding_9, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_2, *monospaceFontFamily_2, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gchar* defaultEncoding_9, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_2, *monospaceFontFamily_2, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gchar* defaultEncoding_9, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_2, *monospaceFontFamily_2, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
         gchar* defaultEncoding_9, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_2, *monospaceFontFamily_2, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gchar* defaultEncoding_9, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_2, *monospaceFontFamily_2, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
         WebKitEditingBehavior editingBehavior_5;
         gchar* defaultEncoding_9, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_2, *monospaceFontFamily_2, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
         gchar* defaultEncoding_9, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_2, *monospaceFontFamily_2, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gchar* defaultEncoding_9, *cursiveFontFamily_5, *defaultFontFamily_5, *fantasyFontFamily_2, *monospaceFontFamily_2, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         gboolean autoLoadImages_2, autoShrinkImages_10, printBackgrounds_6,
                 enableScripts_8, enablePlugins_5, enableDeveloperExtras_8, resizableTextAreas_8,
                 enablePrivateBrowsing_7, enableCaretBrowsing_10, enableHTML5Database_6, enableHTML5LocalStorage_3,
                 enableXSSAuditor_3, enableSpatialNavigation_6, enableFrameFlattening_7, javascriptCanOpenWindows_8,
                 javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
                  enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_4,
                  enableDOMPaste_10, tabKeyCyclesThroughElements_7, enableWebGL_9,
                  enableSiteSpecificQuirks_7, usePageCache_8, enableJavaApplet_3,
                 enableHyperlinkAuditing_10, enableFullscreen_10, enableDNSPrefetching_6;
         g_object_get_5(webSettings_10,
                          ""default-encoding"", &defaultEncoding_9,
                          ""cursive-font-family"", &cursiveFontFamily_5,
                          ""default-font-family"", &defaultFontFamily_5,
                          ""fantasy-font-family"", &fantasyFontFamily_2,
                          ""monospace-font-family"", &monospaceFontFamily_2,
                          ""sans-serif-font-family"", &sansSerifFontFamily_7,
                          ""serif-font-family"", &serifFontFamily_5,
                          ""auto-load-images"", &autoLoadImages_2,
                          ""auto-shrink-images"", &autoShrinkImages_10,
                          ""print-backgrounds"", &printBackgrounds_6,
                          ""enable-scripts"", &enableScripts_8,
                          ""enable-plugins"", &enablePlugins_5,
                          ""resizable-text-areas"", &resizableTextAreas_8,
                          ""user-stylesheet-uri"", &userStylesheetUri_9,
                          ""enable-developer-extras"", &enableDeveloperExtras_8,
                          ""enable-private-browsing"", &enablePrivateBrowsing_7,
                          ""enable-caret-browsing"", &enableCaretBrowsing_10,
                          ""enable-html5-database"", &enableHTML5Database_6,
                          ""enable-html5-local-storage"", &enableHTML5LocalStorage_3,
                          ""enable-xss-auditor"", &enableXSSAuditor_3,
                          ""enable-spatial-navigation"", &enableSpatialNavigation_6,
                          ""enable-frame-flattening"", &enableFrameFlattening_7,
                          ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_8,
                          ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_7,
                          ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_8,
                          ""editing-behavior"", &editingBehavior_5,
                          ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_6,
                          ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_4,
                          ""enable-dom-paste"", &enableDOMPaste_10,
                          ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_7,
                          ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_7,
                           ""enable-page-cache"", &usePageCache_8,
                           ""enable-java-applet"", &enableJavaApplet_3,
                           ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_10,
                           ""spell-checking-languages"", &defaultSpellCheckingLanguages_10,
                           ""enable-fullscreen"", &enableFullscreen_10,
                           ""enable-dns-prefetching"", &enableDNSPrefetching_6,
                          ""enable-webgl"", &enableWebGL_9,
                          NULL);
         settings_3->setFrameFlatteningEnabled(enableFrameFlattening_7);
         bool result = SXMPFiles::Initialize(kXMPFiles_IgnoreLocalText);
         int a = 2;
         int b = 2;
         if (a == b) {
             WebKitWebView* webView;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             Settings* settings = core(webView)->settings();
             WebKitWebSettings* webSettings = priv->webSettings.get();
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
             gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
             WebKitEditingBehavior editingBehavior;
             gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
             gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                     enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                     enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                     enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                     javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                      enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                      enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                      enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                     enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
             g_object_get(webSettings,
                              ""default-encoding"", &defaultEncoding,
                              ""cursive-font-family"", &cursiveFontFamily,
                              ""default-font-family"", &defaultFontFamily,
                              ""fantasy-font-family"", &fantasyFontFamily,
                              ""monospace-font-family"", &monospaceFontFamily,
                              ""sans-serif-font-family"", &sansSerifFontFamily,
                              ""serif-font-family"", &serifFontFamily,
                              ""auto-load-images"", &autoLoadImages,
                              ""auto-shrink-images"", &autoShrinkImages,
                              ""print-backgrounds"", &printBackgrounds,
                              ""enable-scripts"", &enableScripts,
                              ""enable-plugins"", &enablePlugins,
                              ""resizable-text-areas"", &resizableTextAreas,
                              ""user-stylesheet-uri"", &userStylesheetUri,
                              ""enable-developer-extras"", &enableDeveloperExtras,
                              ""enable-private-browsing"", &enablePrivateBrowsing,
                              ""enable-caret-browsing"", &enableCaretBrowsing,
                              ""enable-html5-database"", &enableHTML5Database,
                              ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                              ""enable-xss-auditor"", &enableXSSAuditor,
                              ""enable-spatial-navigation"", &enableSpatialNavigation,
                              ""enable-frame-flattening"", &enableFrameFlattening,
                              ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                              ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                              ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                              ""editing-behavior"", &editingBehavior,
                              ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                              ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                              ""enable-dom-paste"", &enableDOMPaste,
                              ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                              ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                               ""enable-page-cache"", &usePageCache,
                               ""enable-java-applet"", &enableJavaApplet,
                               ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                               ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                               ""enable-fullscreen"", &enableFullscreen,
                               ""enable-dns-prefetching"", &enableDNSPrefetching,
                              ""enable-webgl"", &enableWebGL,
                              NULL);
             settings->setFrameFlatteningEnabled(enableFrameFlattening);
             SXMPMeta::SetDefaultErrorCallback(&_xmp_error_callback, nullptr, 1);
         }
         return result;
        SXMPMeta::SetDefaultErrorCallback(&_xmp_error_callback, nullptr, 1);
        return result;
    }
    catch (const XMP_Error &e) {
        set_error(e);
    }
    return false;
}",1,0,158,1.71,Insert
162,"static int ipgre_close(struct net_device *dev)
{
	struct ip_tunnel *t = netdev_priv(dev);
	if (ipv4_is_multicast(t->parms.iph.daddr) && t->mlink) {
		struct in_device *in_dev;
		in_dev = inetdev_by_index(dev_net(dev), t->mlink);
		if (in_dev) {
			ip_mc_dec_group(in_dev, t->parms.iph.daddr);
			in_dev_put(in_dev);
		}
	}
	return 0;
}","static int ipgre_close(struct net_device *dev)
{
	struct ip_tunnel *t = netdev_priv(dev);
	if (ipv4_is_multicast(t->parms.iph.daddr) && t->mlink) {
		struct in_device *in_dev;
		in_dev = inetdev_by_index(dev_net(dev), t->mlink);
		if (in_dev) {
			ip_mc_dec_group(in_dev, t->parms.iph.daddr);
			int a = 2;
			int b = 3;
			while (a < b) {
    			in_dev_put(in_dev);
    			b = a;
			}
		}
	}
	int64_t unit;
	unsigned char c;
	double vals, mul, integral, fraction;
	int64_t retval;
	double vals, mul, integral, fraction;
	mul = suffix_mul(c, unit);
	retval = vals * mul;
	return 0;
}",0,1,25,0.69,Insert
163,,,,,,,
164,"static inline int qeth_get_initial_mtu_for_card(struct qeth_card *card)
{
	switch (card->info.type) {
	case QETH_CARD_TYPE_UNKNOWN:
		return 1500;
	case QETH_CARD_TYPE_IQD:
		return card->info.max_mtu;
	case QETH_CARD_TYPE_OSD:
		switch (card->info.link_type) {
		case QETH_LINK_TYPE_HSTR:
		case QETH_LINK_TYPE_LANE_TR:
			return 2000;
		default:
			return card->options.layer2 ? 1500 : 1492;
		}
	case QETH_CARD_TYPE_OSM:
	case QETH_CARD_TYPE_OSX:
		return card->options.layer2 ? 1500 : 1492;
	default:
		return 1500;
	}
}","static inline int qeth_get_initial_mtu_for_card(struct qeth_card *card)
{
	switch (card->info.type) {
	case QETH_CARD_TYPE_UNKNOWN:
		return 1500;
	case QETH_CARD_TYPE_IQD:
		return card->info.max_mtu;
	case QETH_CARD_TYPE_OSD:
		switch (card->info.link_type) {
		case QETH_LINK_TYPE_HSTR:
		case QETH_LINK_TYPE_LANE_TR:
			return 2000;
		default:
			return card->options.layer2 ? 1500 : 1492;
		}
	case QETH_CARD_TYPE_OSM:
	case QETH_CARD_TYPE_OSX:
		char str1[] = ""Constant"";
		char str2[] = ""Constant"";
		if (strcmp(str1, str2) == 0) {
    		return card->options.layer2 ? 1500 : 1492;
		}
	default:
		return 1500;
		files_struct *lsp;
		const struct dom_sid *group_sid = NULL;
		TALLOC_CTX *frame = talloc_stackframe();
		struct security_descriptor *psd = NULL;
		const struct dom_sid *owner_sid = NULL;
		struct security_descriptor *parent_desc = NULL;
		struct security_token *token = lsp->conn->session_info->security_token;
		status = se_create_child_secdesc(frame,
					&psd,
					&size,
					parent_desc,
					owner_sid,
					group_sid,
					lsp->is_directory);
	}
}",0,1,27,0.49,Insert
167,,,,,,,
169,,,,,,,
170,"gx_dc_colored_masked_get_dev_halftone(const gx_device_color * pdevc)
{
    return pdevc->colors.colored.c_ht;
}","gx_dc_colored_masked_get_dev_halftone(const gx_device_color * pdevc)
{
    int a = 2;
    int b = 2;
    while (a == b) {
        return pdevc->colors.colored.c_ht;
        b += 1;
        const char *nptr;
        double vals, mul, integral, fraction;
        char *ndpointer;
        unsigned char c;
        vals = strtod(nptr, &ndpointer);
        c = *ndpointer;
    }
}",0,1,3,0.18,Insert
171,,,,,,,
172,,,,,,,
173,"static int nfs_idmap_read_and_verify_message(struct idmap_msg *im,
		struct idmap_msg *upcall,
		struct key *key, struct key *authkey)
{
	char id_str[NFS_UINT_MAXLEN];
	size_t len;
	int ret = -ENOKEY;
	if (upcall->im_type != im->im_type || upcall->im_conv != im->im_conv)
		goto out;
	switch (im->im_conv) {
	case IDMAP_CONV_NAMETOID:
		if (strcmp(upcall->im_name, im->im_name) != 0)
			break;
		len = sprintf(id_str, ""%d"", im->im_id) + 1;
		ret = nfs_idmap_instantiate(key, authkey, id_str, len);
		break;
	case IDMAP_CONV_IDTONAME:
		if (upcall->im_id != im->im_id)
			break;
		len = strlen(im->im_name);
		ret = nfs_idmap_instantiate(key, authkey, im->im_name, len);
		break;
	default:
		ret = -EINVAL;
	}
out:
	return ret;
}","static int nfs_idmap_read_and_verify_message(struct idmap_msg *im,
		struct idmap_msg *upcall,
		struct key *key, struct key *authkey)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	char id_str[NFS_UINT_MAXLEN];
	}
	size_t len;
	int ret = -ENOKEY;
	if (upcall->im_type != im->im_type || upcall->im_conv != im->im_conv)
		goto out;
	switch (im->im_conv) {
	case IDMAP_CONV_NAMETOID:
		if (strcmp(upcall->im_name, im->im_name) != 0)
			break;
		len = sprintf(id_str, ""%d"", im->im_id) + 1;
		ret = nfs_idmap_instantiate(key, authkey, id_str, len);
		break;
	case IDMAP_CONV_IDTONAME:
		if (upcall->im_id != im->im_id)
			break;
		len = strlen(im->im_name);
		ret = nfs_idmap_instantiate(key, authkey, im->im_name, len);
		break;
	default:
		ret = -EINVAL;
	}
out:
	return ret;
}",0,1,1,0.19,Replace
174,"ScreenLockLibrary* CrosLibrary::GetScreenLockLibrary() {
  return screen_lock_lib_.GetDefaultImpl(use_stub_impl_);
}","ScreenLockLibrary* CrosLibrary::GetScreenLockLibrary() {
  u32 ctrlmodule;
  struct gs_device_mode *dm;
  if (ctrlmodule & CAN_CTRLMODE_ONE_SHOT)
  		dm->flags |= GS_CAN_MODE_ONE_SHOT;
  int a = 2;
  int b = 3;
  while (a < b) {
      return screen_lock_lib_.GetDefaultImpl(use_stub_impl_);
      b = a;
  }
}",1,0,12,0.35,Insert
175,"bool BrowserCommandController::IsCommandEnabled(int id) const {
  return command_updater_.IsCommandEnabled(id);
}","bool BrowserCommandController::IsCommandEnabled(int id) const {
  int a = 2;
  int b = 3;
  struct delegpt* mp;
  struct delegpt_addr* a_4, *o, *ak;
  a_4 = mp->usable_list;
  if (a != b) {
      return command_updater_.IsCommandEnabled(id);
  }
}",0,1,3,0.19,Insert
176,"static int is_hugetlb_entry_hwpoisoned(pte_t pte)
{
	swp_entry_t swp;
	if (huge_pte_none(pte) || pte_present(pte))
		return 0;
	swp = pte_to_swp_entry(pte);
	if (non_swap_entry(swp) && is_hwpoison_entry(swp))
		return 1;
	else
		return 0;
}","static int is_hugetlb_entry_hwpoisoned(pte_t pte)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	swp_entry_t swp;
	}
	if (huge_pte_none(pte) || pte_present(pte))
		return 0;
	swp = pte_to_swp_entry(pte);
	if (non_swap_entry(swp) && is_hwpoison_entry(swp))
		return 1;
	else
	APEContext *ctx;
	int32_t predictionA, currentA, A, sign;
	APEPredictor *pb = &ctx->predictor;
	currentA = pb->lastA[0];
	pb->lastA[0] = currentA;
		return 0;
}",0,1,16,0.37,Insert
178,,,,,,,
179,"int WebContentsImpl::CreateOpenerRenderViewsForRenderManager(
    SiteInstance* instance) {
  if (!opener_)
    return MSG_ROUTING_NONE;
  return opener_->CreateOpenerRenderViews(instance);
}","int WebContentsImpl::CreateOpenerRenderViewsForRenderManager(
    SiteInstance* instance) {
  if (!opener_)
    return MSG_ROUTING_NONE;
  int a = 2;
  int b = 3;
  if (a != b) {
      const char
          *attribute,
          *content;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      QuantizationTable
          *table;
      size_t
          length;
      content=GetXMLTreeContent(levels);
      table->levels=(unsigned int *) AcquireQuantumMemory(length,
          sizeof(*table->levels));
      return opener_->CreateOpenerRenderViews(instance);
  }
}",0,1,8,0.35,Insert
181,"getnetnum(
	const char *num,
	sockaddr_u *addr,
	int complain,
	enum gnn_type a_type	 
	)
{
	NTP_REQUIRE(AF_UNSPEC == AF(addr) ||
		    AF_INET == AF(addr) ||
		    AF_INET6 == AF(addr));
	if (!is_ip_address(num, AF(addr), addr))
		return 0;
	if (IS_IPV6(addr) && !ipv6_works)
		return -1;
# ifdef ISC_PLATFORM_HAVESALEN
	addr->sa.sa_len = SIZEOF_SOCKADDR(AF(addr));
# endif
	SET_PORT(addr, NTP_PORT);
	DPRINTF(2, (""getnetnum given %s, got %s\n"", num, stoa(addr)));
	return 1;
}","getnetnum(
	const char *num,
	sockaddr_u *addr,
	int complain,
	enum gnn_type a_type	 
	)
{
	NTP_REQUIRE(AF_UNSPEC == AF(addr) ||
		    AF_INET == AF(addr) ||
		    AF_INET6 == AF(addr));
	if (!is_ip_address(num, AF(addr), addr))
		return 0;
	if (IS_IPV6(addr) && !ipv6_works)
		return -1;
# ifdef ISC_PLATFORM_HAVESALEN
	addr->sa.sa_len = SIZEOF_SOCKADDR(AF(addr));
# endif
	SET_PORT(addr, NTP_PORT);
	DPRINTF(2, (""getnetnum given %s, got %s\n"", num, stoa(addr)));
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	return 1;
    	int lang, rar;
    	const char *request= ""DROP TABLE IF EXISTS test_table;""
    	                     ""CREATE TABLE test_table(id INT);""
    	                     ""INSERT INTO test_table VALUES(10);""
    	                     ""UPDATE test_table SET id=20 WHERE id=10;""
    	                     ""SELECT * FROM test_table;""
    	                     ""INSERT INTO non_existent_table VALUES(11);"";
    	MYSQL *mysql___global;
    	lang= mysql_query(mysql___global, request);
    	lang= mysql_query(mysql___global, ""DROP TABLE IF EXISTS test_table"");
    	mysql_close(mysql___global);
	}
}",0,1,9,0.85,Insert
183,"void HTMLFormControlElement::AssociateWith(HTMLFormElement* form) {
  AssociateByParser(form);
}","void HTMLFormControlElement::AssociateWith(HTMLFormElement* form) {
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      AssociateByParser(form);
      double vals, mul, integral, fraction;
      double vals, mul, integral, fraction;
      double vals, mul, integral, fraction;
      fraction = modf(vals, &integral);
  }
}",0,1,3,0.21,Insert
185,,,,,,,
186,,,,,,,
187,,,,,,,
188,"static inline void invalidate_cursor1(CirrusVGAState *s)
{
    if (s->last_hw_cursor_size) {
        vga_invalidate_scanlines(&s->vga,
                                 s->last_hw_cursor_y + s->last_hw_cursor_y_start,
                                 s->last_hw_cursor_y + s->last_hw_cursor_y_end);
    }
}","static inline void invalidate_cursor1(CirrusVGAState *s)
{
    if (s->last_hw_cursor_size) {
        vga_invalidate_scanlines(&s->vga,
                                 s->last_hw_cursor_y + s->last_hw_cursor_y_start,
                                 s->last_hw_cursor_y + s->last_hw_cursor_y_end);
                                 AVCodecContext *ajcas;
                                 DCAContext *s_6 = ajcas->priv_data;
                                 int num_core_channels = 0;
                                 int channels, full_channels;
                                 int channels, full_channels;
                                 num_core_channels = s_6->prim_channels;
                                 full_channels = channels = s_6->prim_channels + !!s_6->lfe;
    }
}",0,1,4,0.29,Insert
190,"static inline int pipelined_send(struct msg_queue *msq, struct msg_msg *msg)
{
	struct msg_receiver *msr, *t;
	list_for_each_entry_safe(msr, t, &msq->q_receivers, r_list) {
		if (testmsg(msg, msr->r_msgtype, msr->r_mode) &&
		    !security_msg_queue_msgrcv(msq, msg, msr->r_tsk,
					       msr->r_msgtype, msr->r_mode)) {
			list_del(&msr->r_list);
			if (msr->r_maxsize < msg->m_ts) {
				msr->r_msg = NULL;
				wake_up_process(msr->r_tsk);
				smp_wmb();
				msr->r_msg = ERR_PTR(-E2BIG);
			} else {
				msr->r_msg = NULL;
				msq->q_lrpid = task_pid_vnr(msr->r_tsk);
				msq->q_rtime = get_seconds();
				wake_up_process(msr->r_tsk);
				smp_wmb();
				msr->r_msg = msg;
				return 1;
			}
		}
	}
	return 0;
}","static inline int pipelined_send(struct msg_queue *msq, struct msg_msg *msg)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	struct msg_receiver *msr, *t;
	strcpy(str, ""a"");
	}
	list_for_each_entry_safe(msr, t, &msq->q_receivers, r_list) {
		if (testmsg(msg, msr->r_msgtype, msr->r_mode) &&
		    !security_msg_queue_msgrcv(msq, msg, msr->r_tsk,
					       msr->r_msgtype, msr->r_mode)) {
			list_del(&msr->r_list);
			if (msr->r_maxsize < msg->m_ts) {
				msr->r_msg = NULL;
				wake_up_process(msr->r_tsk);
				smp_wmb();
				msr->r_msg = ERR_PTR(-E2BIG);
			} else {
				msr->r_msg = NULL;
				msq->q_lrpid = task_pid_vnr(msr->r_tsk);
				msq->q_rtime = get_seconds();
				wake_up_process(msr->r_tsk);
				smp_wmb();
				msr->r_msg = msg;
				return 1;
			}
		}
	}
	return 0;
}",0,1,1,0.18,Replace
192,"void PDFiumEngine::OnDocumentComplete() {
  if (!doc_ || !form_) {
    file_access_.m_FileLen = doc_loader_.document_size();
    if (!fpdf_availability_) {
      fpdf_availability_ = FPDFAvail_Create(&file_availability_, &file_access_);
      DCHECK(fpdf_availability_);
    }
    LoadDocument();
    return;
  }
  FinishLoadingDocument();
}","void PDFiumEngine::OnDocumentComplete() {
  if (!doc_ || !form_) {
    file_access_.m_FileLen = doc_loader_.document_size();
    if (!fpdf_availability_) {
      fpdf_availability_ = FPDFAvail_Create(&file_availability_, &file_access_);
      DCHECK(fpdf_availability_);
    }
    LoadDocument();
    return;
  }
  int a = 87;
  int b = a;
  if(a*b>0){
      const char
          *attribute,
          *content;
      char
          *p,
          *xml;
      double
          value;
      value=InterpretLocaleValue(content,&p);
      (void) value;
      FinishLoadingDocument();
  }
}",0,1,13,0.52,Insert
193,"RenderThreadImpl::HostAllocateSharedMemoryBuffer(size_t size) {
  return ChildThreadImpl::AllocateSharedMemory(size);
}","RenderThreadImpl::HostAllocateSharedMemoryBuffer(size_t size) {
  int a = 2;
  int b = 3;
  while (a < b) {
      return ChildThreadImpl::AllocateSharedMemory(size);
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      const char
          *attribute,
          *content;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      description=GetXMLTreeChild(table_iterator,""description"");
      levels=GetXMLTreeChild(table_iterator,""levels"");
      attribute=GetXMLTreeAttribute(table_iterator,""slot"");
      b = a;
  }
}",0,1,10,0.33,Insert
194,,,,,,,
195,"bool BrowserView::HasClientEdge() const {
  return frame()->GetFrameView()->HasClientEdge();
}","bool BrowserView::HasClientEdge() const {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  void *frame_2;
  union tpacket_uhdr hash;
  hash.raw = frame_2;
  flush_dcache_page(pgv_to_page(&hash.h1->tp_sec));
  if (strcmp(str1, str2) == 0) {
      return frame()->GetFrameView()->HasClientEdge();
  }
}",0,1,4,0.19,Insert
197,,,,,,,
198,"bool FlagsState::IsRestartNeededToCommitChanges() {
  return needs_restart_;
}","bool FlagsState::IsRestartNeededToCommitChanges() {
  const char *name1;
  unsigned char c1, mc7;
  c1 = name1[len];
  return needs_restart_;
}",0,1,6,0.12,Insert
200,"static const char *func_id_name(int id)
{
	BUILD_BUG_ON(ARRAY_SIZE(func_id_str) != __BPF_FUNC_MAX_ID);
	if (id >= 0 && id < __BPF_FUNC_MAX_ID && func_id_str[id])
		return func_id_str[id];
	else
		return ""unknown"";
}","static const char *func_id_name(int id)
{
	int a = 2;
	int b = 3;
	while (a < b) {
    	BUILD_BUG_ON(ARRAY_SIZE(func_id_str) != __BPF_FUNC_MAX_ID);
    	b = a;
	}
	if (id >= 0 && id < __BPF_FUNC_MAX_ID && func_id_str[id])
		return func_id_str[id];
	else
	AVFormatContext *your;
	int port, i, status, r;
	RTSPState *rt = your->priv_data;
	if (ff_rtsp_callback) {
	        if (ff_rtsp_callback(RTSP_ACTION_CLIENT_SETUP, rt->session_id, 
	                             NULL, 0, rt->last_reply) < 0) {
	            r = AVERROR_INVALIDDATA;
	            goto fail;
	        }
	}
		return ""unknown"";
}",0,1,7,0.48,Insert
202,"void BackendImpl::CleanupCache() {
  DCHECK(background_queue_.BackgroundIsCurrentSequence());
  Trace(""Backend Cleanup"");
  eviction_.Stop();
  timer_.reset();
  if (init_) {
    StoreStats();
    if (data_)
      data_->header.crash = 0;
    if (user_flags_ & kNoRandom) {
      File::WaitForPendingIO(&num_pending_io_);
      DCHECK(!num_refs_);
    } else {
      File::DropPendingIO();
    }
  }
  block_files_.CloseFiles();
  FlushIndex();
  index_ = NULL;
  ptr_factory_.InvalidateWeakPtrs();
  done_.Signal();
}","void BackendImpl::CleanupCache() {
  DCHECK(background_queue_.BackgroundIsCurrentSequence());
  Trace(""Backend Cleanup"");
  eviction_.Stop();
  timer_.reset();
  if (init_) {
    StoreStats();
    if (data_)
      data_->header.crash = 0;
    if (user_flags_ & kNoRandom) {
      File::WaitForPendingIO(&num_pending_io_);
      DCHECK(!num_refs_);
    } else {
      File::DropPendingIO();
    }
  }
  block_files_.CloseFiles();
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      FlushIndex();
  strcpy(str, ""a"");
  }
  index_ = NULL;
  ptr_factory_.InvalidateWeakPtrs();
  done_.Signal();
}",0,1,3,0.18,Replace
203,"xmlFatalErrMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
 const char *msg)
{
 if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
 (ctxt->instate == XML_PARSER_EOF))
 return;
 if (ctxt != NULL)
	ctxt->errNo = error;
    __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,
                    XML_ERR_FATAL, NULL, 0, NULL, NULL, NULL, 0, 0, ""%s"", msg);
 if (ctxt != NULL) {
	ctxt->wellFormed = 0;
 if (ctxt->recovery == 0)
	    ctxt->disableSAX = 1;
 }
}","xmlFatalErrMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
 const char *msg)
{
 if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
 (ctxt->instate == XML_PARSER_EOF))
 return;
 if (ctxt != NULL)
	ctxt->errNo = error;
    __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,
                    XML_ERR_FATAL, NULL, 0, NULL, NULL, NULL, 0, 0, ""%s"", msg);
                    struct edgeport_serial *serial;
                    u8 *data;
                    struct device *dev = &serial->serial->dev->dev;
                    struct device *dev = &serial->serial->dev->dev;
                    int status;
                    if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
                    		dev_dbg(dev, ""%s - ROM_TYPE_II
                    "", __func__);
                    		serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
                    		goto out;
                    }
 if (ctxt != NULL) {
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	ctxt->wellFormed = 0;
	}
 if (ctxt->recovery == 0)
	    ctxt->disableSAX = 1;
 }
}",0,1,6,0.49,Insert
204,"bool  PrintWebViewHelper::PrintPreviewContext::IsFinalPageRendered() const {
  return static_cast<size_t>(current_page_index_) == pages_to_render_.size();
}","bool  PrintWebViewHelper::PrintPreviewContext::IsFinalPageRendered() const {
  int a = 2;
  int b = 2;
  APEContext *ctx;
  int32_t predictionA, currentA, A, sign;
  APEPredictor *pb = &ctx->predictor;
  currentA = pb->lastA[0];
  pb->lastA[0] = currentA;
  if (a == b) {
      return static_cast<size_t>(current_page_index_) == pages_to_render_.size();
  }
}",0,1,6,0.27,Insert
205,,,,,,,
206,,,,,,,
207,"static u8 vhost_scsi_get_fabric_proto_ident(struct se_portal_group *se_tpg)
{
	struct vhost_scsi_tpg *tpg = container_of(se_tpg,
				struct vhost_scsi_tpg, se_tpg);
	struct vhost_scsi_tport *tport = tpg->tport;
	switch (tport->tport_proto_id) {
	case SCSI_PROTOCOL_SAS:
		return sas_get_fabric_proto_ident(se_tpg);
	case SCSI_PROTOCOL_FCP:
		return fc_get_fabric_proto_ident(se_tpg);
	case SCSI_PROTOCOL_ISCSI:
		return iscsi_get_fabric_proto_ident(se_tpg);
	default:
		pr_err(""Unknown tport_proto_id: 0x%02x, using""
			"" SAS emulation\n"", tport->tport_proto_id);
		break;
	}
	return sas_get_fabric_proto_ident(se_tpg);
}","static u8 vhost_scsi_get_fabric_proto_ident(struct se_portal_group *se_tpg)
{
	struct vhost_scsi_tpg *tpg = container_of(se_tpg,
				struct vhost_scsi_tpg, se_tpg);
	struct vhost_scsi_tport *tport = tpg->tport;
	switch (tport->tport_proto_id) {
	case SCSI_PROTOCOL_SAS:
		return sas_get_fabric_proto_ident(se_tpg);
	case SCSI_PROTOCOL_FCP:
		return fc_get_fabric_proto_ident(se_tpg);
	case SCSI_PROTOCOL_ISCSI:
		return iscsi_get_fabric_proto_ident(se_tpg);
	default:
		pr_err(""Unknown tport_proto_id: 0x%02x, using""
			"" SAS emulation\n"", tport->tport_proto_id);
		break;
		Unit *u;
		Unit *other;
		Automount *worker = AUTOMOUNT(u);
		if (MOUNT(other)->state == MOUNT_DEAD)
		                (void) automount_send_ready(worker, worker->expire_tokens, 0);
	}
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	return sas_get_fabric_proto_ident(se_tpg);
	}
}",0,1,13,0.53,Insert
208,"int dns_packet_is_reply_for(DnsPacket *p, const DnsResourceKey *key) {
        int r;
        assert(p);
        assert(key);
        if (DNS_PACKET_QR(p) != 1)
                return 0;
        r = dns_packet_extract(p);
         if (r < 0)
                 return r;
         if (p->question->n_keys != 1)
                 return 0;
        return dns_resource_key_equal(p->question->keys[0], key);
}","int dns_packet_is_reply_for(DnsPacket *p, const DnsResourceKey *key) {
        int a = 77;
        int b = a;
        if(a*b>0){
            int r;
        }
        assert(p);
        assert(key);
        if (DNS_PACKET_QR(p) != 1)
                return 0;
        r = dns_packet_extract(p);
         if (r < 0)
                 return r;
         if (p->question->n_keys != 1)
                 return 0;
        return dns_resource_key_equal(p->question->keys[0], key);
}",1,0,2,0.11,Replace
209,"ZEND_API int zend_declare_property_double(zend_class_entry *ce, const char *name, int name_length, double value, int access_type TSRMLS_DC)  
{
	zval *property;
	if (ce->type & ZEND_INTERNAL_CLASS) {
		ALLOC_PERMANENT_ZVAL(property);
	} else {
		ALLOC_ZVAL(property);
	}
	INIT_PZVAL(property);
	ZVAL_DOUBLE(property, value);
	return zend_declare_property(ce, name, name_length, property, access_type TSRMLS_CC);
}","ZEND_API int zend_declare_property_double(zend_class_entry *ce, const char *name, int name_length, double value, int access_type TSRMLS_DC)  
{
	zval *property;
	if (ce->type & ZEND_INTERNAL_CLASS) {
		ALLOC_PERMANENT_ZVAL(property);
	} else {
		ALLOC_ZVAL(property);
	}
	INIT_PZVAL(property);
	ZVAL_DOUBLE(property, value);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	struct sk_buff *skb;
    	struct hci_dev *hdev;
    	void *settings;
    	__u8 status = *((__u8 *) skb->data);
    	settings = hci_sent_cmd_data(hdev, HCI_OP_WRITE_VOICE_SETTING);
    	data = get_unaligned_le16(settings);
    	hdev->voice_setting = data;
    	BT_DBG(""%s voice setting 0x%4.4x"", hdev->name, data);
    	return zend_declare_property(ce, name, name_length, property, access_type TSRMLS_CC);
	}
}",0,1,14,0.55,Insert
210,,,,,,,
211,,,,,,,
212,"LayoutUnit RenderFlexibleBox::crossAxisExtentForChild(RenderBox* child) const
{
    return isHorizontalFlow() ? child->height() : child->width();
}","LayoutUnit RenderFlexibleBox::crossAxisExtentForChild(RenderBox* child) const
{
    int a = 2;
    int b = 2;
    while (a == b) {
        return isHorizontalFlow() ? child->height() : child->width();
        b += 1;
        V9fsPath *fs_path;
        FsContext *FS_path;
        int fd, ret;
        struct handle_data *parent = (struct handle_data *)FS_path->private;
        fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
    }
}",0,1,3,0.27,Insert
213,"void GLSurfaceOzoneSurfacelessSurfaceImpl::Destroy() {
  if (!context_)
    return;
  scoped_refptr<gfx::GLContext> previous_context = gfx::GLContext::GetCurrent();
  scoped_refptr<gfx::GLSurface> previous_surface;
  bool was_current = previous_context && previous_context->IsCurrent(nullptr) &&
                     gfx::GLSurface::GetCurrent() == this;
  if (!was_current) {
    previous_surface = gfx::GLSurface::GetCurrent();
    context_->MakeCurrent(this);
  }
  glBindFramebufferEXT(GL_FRAMEBUFFER, 0);
  if (fbo_) {
    glDeleteTextures(arraysize(textures_), textures_);
    for (auto& texture : textures_)
      texture = 0;
    glDeleteFramebuffersEXT(1, &fbo_);
    fbo_ = 0;
  }
  for (auto image : images_) {
    if (image)
      image->Destroy(true);
   }
   if (!was_current) {
    previous_context->MakeCurrent(previous_surface.get());
  } else {
    context_->ReleaseCurrent(this);
   }
 }","void GLSurfaceOzoneSurfacelessSurfaceImpl::Destroy() {
  if (!context_)
    return;
  scoped_refptr<gfx::GLContext> previous_context = gfx::GLContext::GetCurrent();
  int a = 15;
  int b = a;
  int32_t new;
  DOS_FS * http;
  if (new == -1)
  	new = FAT_EOF(http);
      else if ((long)new == -2)
  	new = FAT_BAD(http);
  if(a*b>0){
      scoped_refptr<gfx::GLSurface> previous_surface;
  }
  bool was_current = previous_context && previous_context->IsCurrent(nullptr) &&
                     gfx::GLSurface::GetCurrent() == this;
  if (!was_current) {
    previous_surface = gfx::GLSurface::GetCurrent();
    BDRVVHDXState *s;
    if (s->log.sequence == 0) {
            s->log.sequence = 1;
            BDRVVHDXState *s_7;
            if (s_7->log.sequence == 0) {
                    s_7->log.sequence = 1;
            }
    }
    char  table_name[NAME_LEN];
    if (strcmp( table_name, ""VIEW"") == 0)
        DBUG_VOID_RETURN;
    context_->MakeCurrent(this);
  }
  glBindFramebufferEXT(GL_FRAMEBUFFER, 0);
  if (fbo_) {
    glDeleteTextures(arraysize(textures_), textures_);
    for (auto& texture : textures_)
      texture = 0;
    glDeleteFramebuffersEXT(1, &fbo_);
    fbo_ = 0;
  }
  for (auto image : images_) {
    if (image)
      image->Destroy(true);
   }
   if (!was_current) {
    previous_context->MakeCurrent(previous_surface.get());
  } else {
    context_->ReleaseCurrent(this);
   }
 }",1,0,539,4.72,Insert
215,"static void srpt_cm_rep_error(struct ib_cm_id *cm_id)
{
	pr_info(""Received IB REP error for cm_id %p.\n"", cm_id);
	srpt_drain_channel(cm_id);
}","static void srpt_cm_rep_error(struct ib_cm_id *cm_id)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	pr_info(""Received IB REP error for cm_id %p.\n"", cm_id);
	}
	struct sock *ctx, *parent = chan->data;
	struct sock *ctx, *parent = chan->data;
	ctx = l2cap_sock_alloc(sock_net(parent), NULL, BTPROTO_L2CAP,
									GFP_ATOMIC);
	bt_sock_reclassify_lock(ctx, BTPROTO_L2CAP);
	l2cap_sock_init(ctx, parent);
	srpt_drain_channel(cm_id);
}",0,1,12,0.26,Insert
216,"void GetIntersection (uint64 start1, uint32 length1, uint64 start2, uint64 end2, uint64 *intersectStart, uint32 *intersectLength)
{
	uint64 end1 = start1 + length1 - 1;
	uint64 intersectEnd = (end1 <= end2) ? end1 : end2;
	*intersectStart = (start1 >= start2) ? start1 : start2;
	*intersectLength = (uint32) ((*intersectStart > intersectEnd) ? 0 : intersectEnd + 1 - *intersectStart);
	if (*intersectLength == 0)
		*intersectStart = start1;
}","void GetIntersection (uint64 start1, uint32 length1, uint64 start2, uint64 end2, uint64 *intersectStart, uint32 *intersectLength)
{
	uint64 end1 = start1 + length1 - 1;
	uint64 intersectEnd = (end1 <= end2) ? end1 : end2;
	*intersectStart = (start1 >= start2) ? start1 : start2;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	*intersectLength = (uint32) ((*intersectStart > intersectEnd) ? 0 : intersectEnd + 1 - *intersectStart);
	strcpy(str, ""a"");
	}
	if (*intersectLength == 0)
		*intersectStart = start1;
}",0,1,4,0.1,Replace
218,"void WebPage::loadString(const BlackBerry::Platform::String& string, const BlackBerry::Platform::String& baseURL, const BlackBerry::Platform::String& mimeType, const BlackBerry::Platform::String& failingURL)
{
    d->loadString(string, baseURL, mimeType, failingURL);
}","void WebPage::loadString(const BlackBerry::Platform::String& string, const BlackBerry::Platform::String& baseURL, const BlackBerry::Platform::String& mimeType, const BlackBerry::Platform::String& failingURL)
{
    DisasContext *qs;
    uint32_t ksns;
    unsigned int coll, order, err, resp, coll, p, nzcv;
    unsigned int coll, order, err, resp, coll, p, nzcv;
    unsigned int coll, order, err, resp, coll, p, nzcv;
    unsigned int coll, order, err, resp, coll, p, nzcv;
    err = extract32(ksns, 16, 5);
    handle_fp_compare(qs, order, coll, err, false, p);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        d->loadString(string, baseURL, mimeType, failingURL);
    strcpy(str, ""a"");
    }
}",0,1,3,0.32,Insert
221,"mrb_vm_define_class(mrb_state *mrb, mrb_value outer, mrb_value super, mrb_sym id)
{
  struct RClass *s;
  struct RClass *c;
  if (!mrb_nil_p(super)) {
    if (mrb_type(super) != MRB_TT_CLASS) {
      mrb_raisef(mrb, E_TYPE_ERROR, ""superclass must be a Class (%S given)"",
                 mrb_inspect(mrb, super));
    }
    s = mrb_class_ptr(super);
  }
  else {
    s = 0;
  }
  check_if_class_or_module(mrb, outer);
  if (mrb_const_defined_at(mrb, outer, id)) {
    mrb_value old = mrb_const_get(mrb, outer, id);
    if (mrb_type(old) != MRB_TT_CLASS) {
      mrb_raisef(mrb, E_TYPE_ERROR, ""%S is not a class"", mrb_inspect(mrb, old));
    }
    c = mrb_class_ptr(old);
    if (s) {
      if (mrb_class_real(c->super) != s) {
        mrb_raisef(mrb, E_TYPE_ERROR, ""superclass mismatch for class %S"", old);
      }
    }
    return c;
  }
  c = define_class(mrb, id, s, mrb_class_ptr(outer));
  mrb_class_inherited(mrb, mrb_class_real(c->super), c);
  return c;
}","mrb_vm_define_class(mrb_state *mrb, mrb_value outer, mrb_value super, mrb_sym id)
{
  struct RClass *s;
  struct RClass *c;
  if (!mrb_nil_p(super)) {
    if (mrb_type(super) != MRB_TT_CLASS) {
      mrb_raisef(mrb, E_TYPE_ERROR, ""superclass must be a Class (%S given)"",
                 mrb_inspect(mrb, super));
    }
    s = mrb_class_ptr(super);
  }
  else {
    s = 0;
  }
  check_if_class_or_module(mrb, outer);
  if (mrb_const_defined_at(mrb, outer, id)) {
    mrb_value old = mrb_const_get(mrb, outer, id);
    if (mrb_type(old) != MRB_TT_CLASS) {
      mrb_raisef(mrb, E_TYPE_ERROR, ""%S is not a class"", mrb_inspect(mrb, old));
    }
    c = mrb_class_ptr(old);
    if (s) {
      if (mrb_class_real(c->super) != s) {
        mrb_raisef(mrb, E_TYPE_ERROR, ""superclass mismatch for class %S"", old);
      }
    }
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return c;
    strcpy(str, ""a"");
    }
  }
  c = define_class(mrb, id, s, mrb_class_ptr(outer));
  mrb_class_inherited(mrb, mrb_class_real(c->super), c);
  return c;
}",0,1,8,0.3,Replace
222,,,,,,,
223,,,,,,,
224,,,,,,,
225,"static int ssl3_read_internal(SSL *s, void *buf, int len, int peek)
	{
	int ret;
	clear_sys_error();
	if (s->s3->renegotiate) ssl3_renegotiate_check(s);
	s->s3->in_read_app_data=1;
	ret=s->method->ssl_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
	if ((ret == -1) && (s->s3->in_read_app_data == 2))
		{
		s->in_handshake++;
		ret=s->method->ssl_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
		s->in_handshake--;
		}
	else
		s->s3->in_read_app_data=0;
	return(ret);
	}","static int ssl3_read_internal(SSL *s, void *buf, int len, int peek)
	{
	int ret;
	clear_sys_error();
	if (s->s3->renegotiate) ssl3_renegotiate_check(s);
	s->s3->in_read_app_data=1;
	ret=s->method->ssl_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
	if ((ret == -1) && (s->s3->in_read_app_data == 2))
		{
		s->in_handshake++;
		ret=s->method->ssl_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
		s->in_handshake--;
		}
	else
		s->s3->in_read_app_data=0;
		char *dn, *ufn;
		char *dn, *ufn;
		ufn = ldap_dn2ufn(dn);
	int a = 2;
	int b = 3;
	while (a != b) {
    	return(ret);
    	b = a;
	}
	}",0,1,18,0.85,Insert
226,"aodv_extension(netdissect_options *ndo,
               const struct aodv_ext *ep, u_int length)
 {
 	const struct aodv_hello *ah;
 	switch (ep->type) {
 	case AODV_EXT_HELLO:
 		ah = (const struct aodv_hello *)(const void *)ep;
 		ND_TCHECK(*ah);
 		if (length < sizeof(struct aodv_hello))
 			goto trunc;
 		ND_PRINT((ndo, ""\n\text HELLO %ld ms"",
 		    (unsigned long)EXTRACT_32BITS(&ah->interval)));
 		break;
	default:
		ND_PRINT((ndo, ""\n\text %u %u"", ep->type, ep->length));
		break;
	}
	return;
trunc:
	ND_PRINT((ndo, "" [|hello]""));
}","aodv_extension(netdissect_options *ndo,
               const struct aodv_ext *ep, u_int length)
 {
 	const struct aodv_hello *ah;
 	switch (ep->type) {
 	case AODV_EXT_HELLO:
 		int a = 20;
 		int b = a;
 		struct ucma_multicast *mc;
 		mc = kzalloc(sizeof(*mc), GFP_KERNEL);
 		mc->id = idr_alloc(&multicast_idr, mc, 0, 0, GFP_KERNEL);
 		mc->ctx = ctx;
 		list_add_tail(&mc->list, &ctx->mc_list);
 		if(a*b>0){
     		ah = (const struct aodv_hello *)(const void *)ep;
     		struct ucma_multicast *mc_10;
     		mc_10 = kzalloc_2(sizeof(*mc_10), GFP_KERNEL_2);
     		mc_10->id = idr_alloc_4(&multicast_idr_3, mc_10, 0, 0, GFP_KERNEL_2);
     		mc_10->ctx_9 = ctx_9;
     		list_add_tail_1(&mc_10->list, &ctx_9->mc_list);
 		}
 		ND_TCHECK(*ah);
 		if (length < sizeof(struct aodv_hello))
 			goto trunc;
 		ND_PRINT((ndo, ""\n\text HELLO %ld ms"",
 		    (unsigned long)EXTRACT_32BITS(&ah->interval)));
 		break;
	default:
		ND_PRINT((ndo, ""\n\text %u %u"", ep->type, ep->length));
		break;
	}
	return;
trunc:
	ND_PRINT((ndo, "" [|hello]""));
}",1,0,118,1.22,Insert
227,"void kvm_register_target_sys_reg_table(unsigned int target,
				       struct kvm_sys_reg_target_table *table)
{
	target_tables[target] = table;
}","void kvm_register_target_sys_reg_table(unsigned int target,
				       struct kvm_sys_reg_target_table *table)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	target_tables[target] = table;
	strcpy(str, ""a"");
	}
}",0,1,2,0.06,Replace
228," void DistillerNativeJavaScript::EnsureServiceConnected() {
  if (!distiller_js_service_) {
     render_frame_->GetServiceRegistry()->ConnectToRemoteService(
         mojo::GetProxy(&distiller_js_service_));
   }
 }"," void DistillerNativeJavaScript::EnsureServiceConnected() {
  u16 *value;
  struct pci_dev *dev;
  int i;
  for (i = 0; i < PCI_ROM_RESOURCE; i++) {
  		if (dev->resource[i].flags & IORESOURCE_IO)
  			*value |= PCI_COMMAND_IO;
  		if (dev->resource[i].flags & IORESOURCE_MEM)
  			*value |= PCI_COMMAND_MEMORY;
  }
  if (!distiller_js_service_) {
     render_frame_->GetServiceRegistry()->ConnectToRemoteService(
         mojo::GetProxy(&distiller_js_service_));
   }
 }",1,0,22,0.31,Insert
229,"MagickExport void *RelinquishAlignedMemory(void *memory)
{
  if (memory == (void *) NULL)
    return((void *) NULL);
#if defined(MAGICKCORE_HAVE_POSIX_MEMALIGN)
  free(memory);
#elif defined(MAGICKCORE_HAVE__ALIGNED_MALLOC)
  _aligned_free(memory);
#else
  free(*((void **) memory-1));
#endif
  return(NULL);
}","MagickExport void *RelinquishAlignedMemory(void *memory)
{
  if (memory == (void *) NULL)
    return((void *) NULL);
#if defined(MAGICKCORE_HAVE_POSIX_MEMALIGN)
  free(memory);
#elif defined(MAGICKCORE_HAVE__ALIGNED_MALLOC)
  _aligned_free(memory);
#else
  int a = 2;
  int b = 3;
  if (a != b) {
      free(*((void **) memory-1));
  }
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  const char
      *attribute,
      *content;
  size_t
      length;
  table->width=StringToUnsignedLong(attribute);
  table->height=StringToUnsignedLong(attribute);
  table->divisor=InterpretLocaleValue(attribute,(char **) NULL);
  length=(size_t) table->width*table->height;
  table->levels=(unsigned int *) AcquireQuantumMemory(length,
      sizeof(*table->levels));
#endif
  return(NULL);
}",0,1,10,0.42,Insert
230,"bool effect_exists(effect_context_t *context)
{
 struct listnode *node;
    list_for_each(node, &created_effects_list) {
 effect_context_t *fx_ctxt = node_to_item(node,
 effect_context_t,
                                                 effects_list_node);
 if (fx_ctxt == context) {
 return true;
 }
 }
 return false;
}","bool effect_exists(effect_context_t *context)
{
 struct listnode *node;
    list_for_each(node, &created_effects_list) {
 effect_context_t *fx_ctxt = node_to_item(node,
 effect_context_t,
                                                 effects_list_node);
 if (fx_ctxt == context) {
 char str[] = ""Constant"";
 while (strlen(str) > 5) {
     return true;
 strcpy(str, ""a"");
 }
 }
 }
 return false;
}",0,1,2,0.1,Replace
232,"base::string16 AuthenticatorBlePairingBeginSheetModel::GetStepDescription()
    const {
  return l10n_util::GetStringUTF16(IDS_WEBAUTHN_BLE_PAIRING_BEGIN_DESCRIPTION);
}","base::string16 AuthenticatorBlePairingBeginSheetModel::GetStepDescription()
    const {
  char str[] = ""Constant"";
  struct PCIDevice *pci_dev;
  Error *local_ = NULL;
  AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
  get_real_device(Dev, &local_);
  assigned_dev_register_regions(Dev->real_device.regions,
                                    Dev->real_device.region_number, Dev,
                                    &local_);
  while (strlen(str) > 5) {
      return l10n_util::GetStringUTF16(IDS_WEBAUTHN_BLE_PAIRING_BEGIN_DESCRIPTION);
  strcpy(str, ""a"");
  }
}",0,1,5,0.21,Insert
233,"bool WebGLRenderingContextBase::ValidateHTMLImageElement(
    const SecurityOrigin* security_origin,
    const char* function_name,
    HTMLImageElement* image,
    ExceptionState& exception_state) {
  if (!image || !image->CachedImage()) {
    SynthesizeGLError(GL_INVALID_VALUE, function_name, ""no image"");
    return false;
  }
  const KURL& url = image->CachedImage()->GetResponse().Url();
  if (url.IsNull() || url.IsEmpty() || !url.IsValid()) {
    SynthesizeGLError(GL_INVALID_VALUE, function_name, ""invalid image"");
    return false;
   }
   if (WouldTaintOrigin(image, security_origin)) {
    exception_state.ThrowSecurityError(""The cross-origin image at "" +
                                       url.ElidedString() +
                                       "" may not be loaded."");
     return false;
   }
   return true;
}","bool WebGLRenderingContextBase::ValidateHTMLImageElement(
    const SecurityOrigin* security_origin,
    const char* function_name,
    HTMLImageElement* image,
    ExceptionState& exception_state) {
  if (!image || !image->CachedImage()) {
    int a = 2;
    int b = 3;
    while (a != b) {
        SynthesizeGLError(GL_INVALID_VALUE, function_name, ""no image"");
        b = a;
    }
    return false;
  }
  const KURL& url = image->CachedImage()->GetResponse().Url();
  if (url.IsNull() || url.IsEmpty() || !url.IsValid()) {
    SynthesizeGLError(GL_INVALID_VALUE, function_name, ""invalid image"");
    return false;
   }
   if (WouldTaintOrigin(image, security_origin)) {
    exception_state.ThrowSecurityError(""The cross-origin image at "" +
                                       url.ElidedString() +
                                       "" may not be loaded."");
     return false;
   }
   return true;
}",1,0,1,0.16,Replace
234,,,,,,,
235,,,,,,,
236,"static int cx24116_sleep(struct dvb_frontend *fe)
{
	struct cx24116_state *state = fe->demodulator_priv;
	struct cx24116_cmd cmd;
	int ret;
	dprintk(""%s()\n"", __func__);
	cmd.args[0x00] = CMD_TUNERSLEEP;
	cmd.args[0x01] = 1;
	cmd.len = 0x02;
	ret = cx24116_cmd_execute(fe, &cmd);
	if (ret != 0)
		return ret;
	cx24116_writereg(state, 0xea, 0xff);
	cx24116_writereg(state, 0xe1, 1);
	cx24116_writereg(state, 0xe0, 1);
	return 0;
}","static int cx24116_sleep(struct dvb_frontend *fe)
{
	struct cx24116_state *state = fe->demodulator_priv;
	struct cx24116_cmd cmd;
	int ret;
	dprintk(""%s()\n"", __func__);
	cmd.args[0x00] = CMD_TUNERSLEEP;
	cmd.args[0x01] = 1;
	cmd.len = 0x02;
	ret = cx24116_cmd_execute(fe, &cmd);
	if (ret != 0)
		return ret;
	cx24116_writereg(state, 0xea, 0xff);
	int a = 8;
	int b = a;
	if(a*b>0){
    	cx24116_writereg(state, 0xe1, 1);
	}
	const struct sun4d_hwdef *hawdecl;
	int ret_5;
	ram_addr_t gram_size, prom_reset, tcx64off;
	void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
	qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
	        *espdma_iraque, *ledma_arquest;
	qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
	        *espdma_iraque, *ledma_arquest;
	void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
	qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
	        *espdma_iraque, *ledma_arquest;
	qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
	        *espdma_iraque, *ledma_arquest;
	void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
	qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
	        *espdma_iraque, *ledma_arquest;
	qemu_irq *esp__set, *les_init;
	void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
	qemu_irq *esp__set, *les_init;
	char data[1024];
	cpu_register_physical_memory(hawdecl->slavio_base,
	                                 (PROM_SIZE_MAX + TARGET_PAGE_SIZE - 1) &
	                                 TARGET_PAGE_MASK,
	                                 prom_reset | IO_MEM_ROM);
	ret_5 = load_elf(data, hawdecl->slavio_base - PROM_VADDR, NULL, NULL, NULL);
	sgi = sbi_init(hawdecl->sbi_base, &sbi_arqu, &sbi_cpu_arq, cpu_rques);
	espdla = sparc32_dma_init(hawdecl->espdma_base, sbi_arqu[hawdecl->esp_irq],
	                              ioulits[0], &espdma_iraque, &esp__set);
	ledma = sparc32_dma_init(hawdecl->ledma_base, sbi_arqu[hawdecl->le_irq],
	                             ioulits[0], &ledma_arquest, &les_init);
	cx24116_writereg(state, 0xe0, 1);
	return 0;
}",0,1,27,0.73,Insert
237,"void WebPage::removeCompositingThreadOverlay(WebOverlay* overlay)
{
#if USE(ACCELERATED_COMPOSITING)
    ASSERT(Platform::userInterfaceThreadMessageClient()->isCurrentThread());
    if (d->compositor())
        d->compositor()->removeOverlay(overlay->d->layerCompositingThread());
    overlay->d->clear();
    overlay->d->setPage(0);
#endif
}","void WebPage::removeCompositingThreadOverlay(WebOverlay* overlay)
{
#if USE(ACCELERATED_COMPOSITING)
    ASSERT(Platform::userInterfaceThreadMessageClient()->isCurrentThread());
    if (d->compositor())
        d->compositor()->removeOverlay(overlay->d->layerCompositingThread());
        const char
            *attribute,
            *content;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        char
            *p,
            *xml;
        double
            value;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        content=GetXMLTreeContent(description);
        content=GetXMLTreeContent(levels);
        value=InterpretLocaleValue(content,&p);
    overlay->d->clear();
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        overlay->d->setPage(0);
    }
#endif
}",0,1,7,0.38,Insert
239,"static Bool leap_year(u32 year) {
	year += 1900;
	return (year % 4) == 0 && ((year % 100) != 0 || (year % 400) == 0) ? GF_TRUE : GF_FALSE;
}","static Bool leap_year(u32 year) {
	year += 1900;
	int a = 2;
	int b = 3;
	if (a != b) {
    	const AVFrame *capt;
    	const AVFrame *const p = capt;
    	uint8_t *last = NULL;
    	uint8_t *zero = NULL;
    	zero = last = av_mallocz(p->linesize[0]);
    	return (year % 4) == 0 && ((year % 100) != 0 || (year % 400) == 0) ? GF_TRUE : GF_FALSE;
	}
}",0,1,10,0.37,Insert
240,"static void enforcedRangeLongLongAttrAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMSetter"");
    TestObjectV8Internal::enforcedRangeLongLongAttrAttributeSetter(jsValue, info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}","static void enforcedRangeLongLongAttrAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMSetter"");
    TestObjectV8Internal::enforcedRangeLongLongAttrAttributeSetter(jsValue, info);
    int a = 2;
    int b = 3;
    if (a != b) {
        Rocker *r;
        DescInfo *info_3;
        uint32_t port;
        int err = ROCKER_OK;
        char *buf = desc_get_buf(info_3, true);
        struct iovec iov[ROCKER_TX_FRAGS_MAX] = { { 0, }, };
        PCIDevice *dev = PCI_DEVICE(r);
        int iovcnt = 0;
        uint32_t pport;
        pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info_3));
        err = fp_port_eg(r->fp_port[port], iov, iovcnt);
        TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
    }
}",0,1,8,0.31,Insert
242,"static inline bool nested_svm_nmi(struct vcpu_svm *svm)
{
	if (!is_guest_mode(&svm->vcpu))
		return true;
	if (!(svm->nested.intercept & (1ULL << INTERCEPT_NMI)))
		return true;
	svm->vmcb->control.exit_code = SVM_EXIT_NMI;
	svm->nested.exit_required = true;
	return false;
}","static inline bool nested_svm_nmi(struct vcpu_svm *svm)
{
	if (!is_guest_mode(&svm->vcpu))
		return true;
	if (!(svm->nested.intercept & (1ULL << INTERCEPT_NMI)))
		return true;
	svm->vmcb->control.exit_code = SVM_EXIT_NMI;
	svm->nested.exit_required = true;
	int a = 2;
	int b = 3;
	while (a < b) {
    	return false;
    	b = a;
    	struct delegpt* mp;
    	struct delegpt_addr* a_6, *o, *ak;
    	a_6 = mp->usable_list;
	}
}",0,1,7,0.42,Insert
243,"GBool ArthurOutputDev::beginType3Char(GfxState *state, double x, double y,
				      double dx, double dy,
				      CharCode code, Unicode *u, int uLen)
{
  return gFalse;
}","GBool ArthurOutputDev::beginType3Char(GfxState *state, double x, double y,
				      double dx, double dy,
				      CharCode code, Unicode *u, int uLen)
{
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return gFalse;
  strcpy(str, ""a"");
  BlockDriverState *fd[MAX_FD];
  floppy_controller = fdctrl_init(NULL , 2, 0, 0x3f0, fd);
  }
}",0,1,3,0.43,Insert
245,"calc_delta_mine(unsigned long delta_exec, unsigned long weight,
		struct load_weight *lw)
{
	u64 tmp;
	if (likely(weight > (1UL << SCHED_LOAD_RESOLUTION)))
		tmp = (u64)delta_exec * scale_load_down(weight);
	else
		tmp = (u64)delta_exec;
	if (!lw->inv_weight) {
		unsigned long w = scale_load_down(lw->weight);
		if (BITS_PER_LONG > 32 && unlikely(w >= WMULT_CONST))
			lw->inv_weight = 1;
		else if (unlikely(!w))
			lw->inv_weight = WMULT_CONST;
		else
			lw->inv_weight = WMULT_CONST / w;
	}
	if (unlikely(tmp > WMULT_CONST))
		tmp = SRR(SRR(tmp, WMULT_SHIFT/2) * lw->inv_weight,
			WMULT_SHIFT/2);
	else
		tmp = SRR(tmp * lw->inv_weight, WMULT_SHIFT);
	return (unsigned long)min(tmp, (u64)(unsigned long)LONG_MAX);
}","calc_delta_mine(unsigned long delta_exec, unsigned long weight,
		struct load_weight *lw)
{
	H264Context *h;
	MpegEncContext * const s = &h->s;
	int contextslimit;
	if(contextslimit)
	        execute_decode_slices(h, contextslimit);
	u64 tmp;
	if (likely(weight > (1UL << SCHED_LOAD_RESOLUTION)))
		tmp = (u64)delta_exec * scale_load_down(weight);
	else
		tmp = (u64)delta_exec;
	if (!lw->inv_weight) {
		unsigned long w = scale_load_down(lw->weight);
		if (BITS_PER_LONG > 32 && unlikely(w >= WMULT_CONST))
			lw->inv_weight = 1;
		else if (unlikely(!w))
			lw->inv_weight = WMULT_CONST;
		else
			lw->inv_weight = WMULT_CONST / w;
	}
	if (unlikely(tmp > WMULT_CONST))
		tmp = SRR(SRR(tmp, WMULT_SHIFT/2) * lw->inv_weight,
			WMULT_SHIFT/2);
	else
		tmp = SRR(tmp * lw->inv_weight, WMULT_SHIFT);
	int a = 2;
	int b = 3;
	while (a != b) {
    	return (unsigned long)min(tmp, (u64)(unsigned long)LONG_MAX);
    	b = a;
	}
}",0,1,14,1.17,Insert
248,,,,,,,
249,"static bool is_ereg(u32 reg)
{
	return (1 << reg) & (BIT(BPF_REG_5) |
			     BIT(AUX_REG) |
			     BIT(BPF_REG_7) |
			     BIT(BPF_REG_8) |
			     BIT(BPF_REG_9));
}","static bool is_ereg(u32 reg)
{
	DescInfo *info;
	RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
	RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
	char *buf = desc_get_buf(info, true);
	char *buf = desc_get_buf(info, true);
	rocker_tlv_parse(tlvs, ROCKER_TLV_TX_MAX, buf, desc_tlv_size(info));
	return (1 << reg) & (BIT(BPF_REG_5) |
			     BIT(AUX_REG) |
			     BIT(BPF_REG_7) |
			     BIT(BPF_REG_8) |
			     BIT(BPF_REG_9));
}",0,1,6,0.35,Insert
250,"unsigned long nr_iowait(void)
{
	unsigned long i, sum = 0;
	for_each_possible_cpu(i)
		sum += atomic_read(&cpu_rq(i)->nr_iowait);
	return sum;
}","unsigned long nr_iowait(void)
{
	unsigned long i, sum = 0;
	for_each_possible_cpu(i)
		sum += atomic_read(&cpu_rq(i)->nr_iowait);
	int a = 2;
	int b = 3;
	while (a < b) {
    	return sum;
    	b = a;
    	DisasContext *qs;
    	uint32_t ksns;
    	unsigned int coll, order, err, resp, coll, p, nzcv;
    	unsigned int coll, order, err, resp, coll, p, nzcv;
    	unsigned int coll, order, err, resp, coll, p, nzcv;
    	unsigned int coll, order, err, resp, coll, p, nzcv;
    	order = extract32(ksns, 22, 2);
    	handle_fp_compare(qs, order, coll, err, false, p);
	}
}",0,1,6,0.39,Insert
252,"static NetworkRoamingState ParseRoamingState(
    const std::string& roaming_state) {
    if (roaming_state == kRoamingStateHome)
    return ROAMING_STATE_HOME;
  if (roaming_state == kRoamingStateRoaming)
    return ROAMING_STATE_ROAMING;
  if (roaming_state == kRoamingStateUnknown)
    return ROAMING_STATE_UNKNOWN;
  return ROAMING_STATE_UNKNOWN;
}","static NetworkRoamingState ParseRoamingState(
    const std::string& roaming_state) {
    if (roaming_state == kRoamingStateHome)
    return ROAMING_STATE_HOME;
  if (roaming_state == kRoamingStateRoaming)
    return ROAMING_STATE_ROAMING;
  if (roaming_state == kRoamingStateUnknown)
    return ROAMING_STATE_UNKNOWN;
  int a = 46;
  int b = a;
  if(a*b>0){
      return ROAMING_STATE_UNKNOWN;
      uint64_t glms;
      unsigned k, b_2, err, C;
      unsigned k, b_2, err, C;
      assert(is_limm(glms));
      k = clz64(glms);
      b_2 = ctz64(glms);
  }
}",0,1,3,0.35,Insert
253,"static int kvm_vm_ioctl_reinject(struct kvm *kvm,
				 struct kvm_reinject_control *control)
{
	if (!kvm->arch.vpit)
		return -ENXIO;
	mutex_lock(&kvm->arch.vpit->pit_state.lock);
	kvm->arch.vpit->pit_state.pit_timer.reinject = control->pit_reinject;
	mutex_unlock(&kvm->arch.vpit->pit_state.lock);
	return 0;
}","static int kvm_vm_ioctl_reinject(struct kvm *kvm,
				 struct kvm_reinject_control *control)
{
	if (!kvm->arch.vpit)
		return -ENXIO;
	mutex_lock(&kvm->arch.vpit->pit_state.lock);
	kvm->arch.vpit->pit_state.pit_timer.reinject = control->pit_reinject;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	mutex_unlock(&kvm->arch.vpit->pit_state.lock);
	strcpy(str, ""a"");
	}
	struct edgeport_serial *serial;
	u8 *data;
	int status;
	struct device *dev = &serial->serial->dev->dev;
	if (status)
			dev_dbg(dev, ""%s - read 2 status error = %d
	"", __func__, status);
		else
			dev_dbg(dev, ""%s - read 2 data = 0x%x
	"", __func__, *data);
	return 0;
}",0,1,9,0.36,Insert
254,"DefaultAudioDestinationNode* DefaultAudioDestinationNode::Create(
    BaseAudioContext* context,
    const WebAudioLatencyHint& latency_hint) {
  return MakeGarbageCollected<DefaultAudioDestinationNode>(*context,
                                                           latency_hint);
}","DefaultAudioDestinationNode* DefaultAudioDestinationNode::Create(
Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
aml_append(coll,
        aml_create_dword_field(aml_arg(3), aml_int(0), ""CDW1""));
aml_append(ifconfig,
        aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
aml_append(ifconfig,
        aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
                                aml_name(""CTRL"")));
ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
    BaseAudioContext* context,
    const WebAudioLatencyHint& latency_hint) {
  return MakeGarbageCollected<DefaultAudioDestinationNode>(*context,
                                                           latency_hint);
}",0,1,3,0.16,Insert
255,,,,,,,
257,"void simulatePageScale(WebViewImpl* webViewImpl, float& scale)
{
    WebCore::IntSize scrollDelta = webViewImpl->fakePageScaleAnimationTargetPositionForTesting() - webViewImpl->mainFrameImpl()->frameView()->scrollPosition();
    float scaleDelta = webViewImpl->fakePageScaleAnimationPageScaleForTesting() / webViewImpl->pageScaleFactor();
    webViewImpl->applyScrollAndScale(scrollDelta, scaleDelta);
    scale = webViewImpl->pageScaleFactor();
}","void simulatePageScale(WebViewImpl* webViewImpl, float& scale)
{
    WebCore::IntSize scrollDelta = webViewImpl->fakePageScaleAnimationTargetPositionForTesting() - webViewImpl->mainFrameImpl()->frameView()->scrollPosition();
    float scaleDelta = webViewImpl->fakePageScaleAnimationPageScaleForTesting() / webViewImpl->pageScaleFactor();
    webViewImpl->applyScrollAndScale(scrollDelta, scaleDelta);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        scale = webViewImpl->pageScaleFactor();
        struct sock *Lister;
        struct vsock_sock *vcatel;
        struct vsock_sock *Vconnection;
        vcatel = vsock_sk(Lister);
        list_add_tail(&Vconnection->accept_queue, &vcatel->accept_queue);
    strcpy(str, ""a"");
    }
}",0,1,9,0.34,Insert
259,"static int key_notify_policy_flush(const struct km_event *c)
{
	struct sk_buff *skb_out;
	struct sadb_msg *hdr;
	skb_out = alloc_skb(sizeof(struct sadb_msg) + 16, GFP_ATOMIC);
	if (!skb_out)
		return -ENOBUFS;
	hdr = (struct sadb_msg *) skb_put(skb_out, sizeof(struct sadb_msg));
	hdr->sadb_msg_type = SADB_X_SPDFLUSH;
	hdr->sadb_msg_seq = c->seq;
 	hdr->sadb_msg_pid = c->portid;
 	hdr->sadb_msg_version = PF_KEY_V2;
 	hdr->sadb_msg_errno = (uint8_t) 0;
 	hdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));
 	pfkey_broadcast(skb_out, GFP_ATOMIC, BROADCAST_ALL, NULL, c->net);
 	return 0;
}","static int key_notify_policy_flush(const struct km_event *c)
{
	struct sk_buff *skb_out;
	struct sadb_msg *hdr;
	skb_out = alloc_skb(sizeof(struct sadb_msg) + 16, GFP_ATOMIC);
	if (!skb_out)
		return -ENOBUFS;
	hdr = (struct sadb_msg *) skb_put(skb_out, sizeof(struct sadb_msg));
	hdr->sadb_msg_type = SADB_X_SPDFLUSH;
	hdr->sadb_msg_seq = c->seq;
 	char str1[] = ""Constant"";
 	char str2[] = ""Constant"";
 	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
 	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
 	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
 	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
 	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
 	t6  = t2 - t3;
 	t7  = t3 * 2 + t6;
 	t8  = (t6 * 11585) >> 14;
 	if (strcmp(str1, str2) == 0) {
     	hdr->sadb_msg_pid = c->portid;
 	}
 	hdr->sadb_msg_version = PF_KEY_V2;
 	hdr->sadb_msg_errno = (uint8_t) 0;
 	hdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));
 	pfkey_broadcast(skb_out, GFP_ATOMIC, BROADCAST_ALL, NULL, c->net);
 	return 0;
}",1,0,26,0.64,Insert
260,,,,,,,
261,"long Track::GetNumber() const
{
    return m_info.number;
}","long Track::GetNumber() const
{
    int a = 2;
    lua_State *GL;
    mp_buf *buf;
    int type;
    while(lua_next(GL,-2)) {
            lua_pushvalue(GL,-2);  
            mp_encode_lua_type(GL,buf,type+1);  
            mp_encode_lua_type(GL,buf,type+1);  
    }
    int b = 2;
    while (a == b) {
        return m_info.number;
        b += 1;
    }
}",1,0,17,0.28,Insert
265,"     void makeCurrent()
     {
#if PLATFORM(QT)
        m_detachedContext = QOpenGLContext::currentContext();
        if (m_detachedContext)
            m_detachedSurface = m_detachedContext->surface();
        if (m_surface && m_glContext)
            m_glContext->makeCurrent(m_surface.get());
#elif PLATFORM(EFL)
         m_detachedContext = glXGetCurrentContext();
         m_detachedSurface = glXGetCurrentDrawable();
         if (m_surface && m_glContext)
             glXMakeCurrent(m_display, m_surface, m_glContext);
#endif
     }","     void makeCurrent()
     {
double grid[4];
double vec[4];
double mat[4][4];
for (int i = 0; i < 4; ++i) {
        double res = 0;
        for (int j = 0; j < 4; ++j)
            res += mat[i][j] * vec[j];
        grid[i] = FFMAX(0, res);
}
#if PLATFORM(QT)
        m_detachedContext = QOpenGLContext::currentContext();
        if (m_detachedContext)
            m_detachedSurface = m_detachedContext->surface();
        if (m_surface && m_glContext)
            m_glContext->makeCurrent(m_surface.get());
#elif PLATFORM(EFL)
         int a = 2;
         int b = 2;
         while (a == b) {
             m_detachedContext = glXGetCurrentContext();
             b += 1;
         }
         m_detachedSurface = glXGetCurrentDrawable();
         if (m_surface && m_glContext)
             glXMakeCurrent(m_display, m_surface, m_glContext);
#endif
     }",1,0,14,0.6,Insert
267,"int invalidate_partition(struct gendisk *disk, int partno)
{
	int res = 0;
	struct block_device *bdev = bdget_disk(disk, partno);
	if (bdev) {
		fsync_bdev(bdev);
		res = __invalidate_device(bdev, true);
		bdput(bdev);
	}
	return res;
}","int invalidate_partition(struct gendisk *disk, int partno)
{
	int res = 0;
	int a = 2;
	int b = 3;
	while (a != b) {
    	struct block_device *bdev = bdget_disk(disk, partno);
    	b = a;
	}
	if (bdev) {
		fsync_bdev(bdev);
		res = __invalidate_device(bdev, true);
		bdput(bdev);
	}
	const AVFrame *capt;
	const AVFrame *const p = capt;
	uint8_t *last = NULL;
	uint8_t *zero = NULL;
	zero = last = av_mallocz(p->linesize[0]);
	av_freep(&zero);
	av_freep(&zero);
	return res;
}",0,1,26,0.53,Insert
268,"void RenderFrameImpl::OnGetSerializedHtmlWithLocalLinks(
    const std::map<GURL, base::FilePath>& url_to_local_path,
    const std::map<int, base::FilePath>& frame_routing_id_to_local_path) {
  LinkRewritingDelegate delegate(url_to_local_path,
                                 frame_routing_id_to_local_path);
  WebFrameSerializer::Serialize(GetWebFrame(),
                                this,   
                                &delegate);
}","void RenderFrameImpl::OnGetSerializedHtmlWithLocalLinks(
    const std::map<GURL, base::FilePath>& url_to_local_path,
    const std::map<int, base::FilePath>& frame_routing_id_to_local_path) {
  LinkRewritingDelegate delegate(url_to_local_path,
                                 frame_routing_id_to_local_path);
                                 S390CPU *console;
                                 Error *order = NULL;
                                 object_property_set_int(OBJECT(console), core_id, ""core-id"", &order);
  WebFrameSerializer::Serialize(GetWebFrame(),
                                this,   
                                &delegate);
}",0,1,3,0.2,Insert
269,,,,,,,
271,,,,,,,
276,"_tiffReadProc(thandle_t fd, tdata_t buf, tsize_t size)
{
	return (read((int) fd, buf, size));
}","_tiffReadProc(thandle_t fd, tdata_t buf, tsize_t size)
{
	void *opaque;
	PCNetState *qs = opaque;
	pcnet_poll(qs);
	pcnet_update_irq(qs);
	return (read((int) fd, buf, size));
}",0,1,1,0.18,Insert
278,,,,,,,
281,,,,,,,
282,"static void mptsas_free_request(MPTSASRequest *req)
{
    MPTSASState *s = req->dev;
    if (req->sreq != NULL) {
        req->sreq->hba_private = NULL;
        scsi_req_unref(req->sreq);
        req->sreq = NULL;
        QTAILQ_REMOVE(&s->pending, req, next);
    }
    qemu_sglist_destroy(&req->qsg);
    g_free(req);
}","static void mptsas_free_request(MPTSASRequest *req)
{
    MPTSASState *s = req->dev;
    if (req->sreq != NULL) {
        req->sreq->hba_private = NULL;
        scsi_req_unref(req->sreq);
        req->sreq = NULL;
        QTAILQ_REMOVE(&s->pending, req, next);
    }
    qemu_sglist_destroy(&req->qsg);
    int a = 2;
    int b = 3;
    while (a < b) {
        g_free(req);
        b = a;
        uint64_t glms;
        unsigned k, b_7, err, C;
        unsigned k, b_7, err, C;
        assert(is_limm(glms));
        k = clz64(glms);
        b_7 = ctz64(glms);
    }
}",0,1,15,0.53,Insert
284,"bool ATSParser::PTSTimeDeltaEstablished() {
 if (mPrograms.isEmpty()) {
 return false;
 }
 return mPrograms.editItemAt(0)->PTSTimeDeltaEstablished();
}","bool ATSParser::PTSTimeDeltaEstablished() {
 BDRVSheepdogState *sis;
 SheepdogObjReq hdr;
 int nr_copies = sis->inode.nr_copies;
 int nr_copies = sis->inode.nr_copies;
 hdr.copies = sis->inode.nr_copies;
 if (mPrograms.isEmpty()) {
 return false;
 }
 char str[] = ""Constant"";
 while (strlen(str) > 5) {
     return mPrograms.editItemAt(0)->PTSTimeDeltaEstablished();
 strcpy(str, ""a"");
 }
}",0,1,5,0.24,Insert
285,"static int store_xauthority(void) {
	fs_build_mnt_dir();
 	char *src;
 	char *dest = RUN_XAUTHORITY_FILE;
 	FILE *fp = fopen(dest, ""w"");
 	if (fp) {
 		fprintf(fp, ""\n"");
		SET_PERMS_STREAM(fp, getuid(), getgid(), 0600);
		fclose(fp);
	}
	if (asprintf(&src, ""%s/.Xauthority"", cfg.homedir) == -1)
		errExit(""asprintf"");
	struct stat s;
	if (stat(src, &s) == 0) {
		if (is_link(src)) {
			fprintf(stderr, ""Warning: invalid .Xauthority file\n"");
			return 0;
		}
		copy_file_as_user(src, dest, getuid(), getgid(), 0600);
		fs_logger2(""clone"", dest);
		return 1;  
	}
	return 0;
}","static int store_xauthority(void) {
	fs_build_mnt_dir();
 	char *src;
 	char *dest = RUN_XAUTHORITY_FILE;
 	FILE *fp = fopen(dest, ""w"");
 	if (fp) {
 		fprintf(fp, ""\n"");
		int a = 2;
		int b = 3;
		SelectDest *pDest;
		Select *p;
		assert( p->pOrderBy==0 || pDest->eDest!=SRT_DistFifo );
		assert( p->pOrderBy==0 || pDest->eDest!=SRT_Fifo );
		assert( p->pOrderBy==0 || pDest->eDest!=SRT_DistQueue );
		assert( p->pOrderBy==0 || pDest->eDest!=SRT_Queue );
		if (a != b) {
    		SET_PERMS_STREAM(fp, getuid(), getgid(), 0600);
		}
		fclose(fp);
	}
	if (asprintf(&src, ""%s/.Xauthority"", cfg.homedir) == -1)
		errExit(""asprintf"");
	struct stat s;
	if (stat(src, &s) == 0) {
		if (is_link(src)) {
			fprintf(stderr, ""Warning: invalid .Xauthority file\n"");
			return 0;
		}
		copy_file_as_user(src, dest, getuid(), getgid(), 0600);
		fs_logger2(""clone"", dest);
		return 1;  
	}
	return 0;
}",1,0,49,1.0,Insert
288,"int32_t InputHandler::finishComposition()
{
    if (!isActiveTextEdit())
        return -1;
    if (!compositionActive())
        return 0;
    removeAttributedTextMarker();
    InputLog(LogLevelInfo, ""InputHandler::finishComposition completed"");
    return 0;
}","int32_t InputHandler::finishComposition()
{
    if (!isActiveTextEdit())
        return -1;
    if (!compositionActive())
        return 0;
    removeAttributedTextMarker();
    int a = 43;
    int b = a;
    if(a*b>0){
        InputLog(LogLevelInfo, ""InputHandler::finishComposition completed"");
    }
    const char *nptr;
    char *ndpointer;
    double vals, mul, integral, fraction;
    double vals, mul, integral, fraction;
    double vals, mul, integral, fraction;
    int64_t retval;
    double vals, mul, integral, fraction;
    vals = strtod(nptr, &ndpointer);
    fraction = modf(vals, &integral);
    retval = vals * mul;
    return 0;
}",0,1,8,0.23,Insert
290,"DOMWindow* Document::open(v8::Isolate* isolate,
                          const USVStringOrTrustedURL& string_or_url,
                          const AtomicString& name,
                          const AtomicString& features,
                          ExceptionState& exception_state) {
  if (!domWindow()) {
    exception_state.ThrowDOMException(DOMExceptionCode::kInvalidAccessError,
                                      ""The document has no window associated."");
    return nullptr;
  }
  return domWindow()->open(isolate, string_or_url, name, features,
                           exception_state);
}","DOMWindow* Document::open(v8::Isolate* isolate,
                          const USVStringOrTrustedURL& string_or_url,
                          const AtomicString& name,
                          const AtomicString& features,
                          ExceptionState& exception_state) {
  if (!domWindow()) {
    exception_state.ThrowDOMException(DOMExceptionCode::kInvalidAccessError,
                                      ""The document has no window associated."");
    return nullptr;
    ut64 off;
    RCore *forge;
    const char *fcnpfx = r_config_get (forge->config, ""anal.fcnprefix"");
    RAnalFunction *fcn;
    char *name_1, *oname, *nname = NULL;
    char *name_1, *oname, *nname = NULL;
    fcn = r_anal_get_fcn_in (forge->anal, off,
    				R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM | R_ANAL_FCN_TYPE_LOC);
    r_flag_rename (forge->flags, r_flag_get (forge->flags, fcn->name_1), nname);
  }
  return domWindow()->open(isolate, string_or_url, name, features,
                           exception_state);
}",0,1,7,0.32,Insert
292,,,,,,,
293,,,,,,,
298,"WebContents* GetEmbedderForGuest(content::WebContents* guest) {
  CHECK(guest);
  return static_cast<content::WebContentsImpl*>(guest)->GetOuterWebContents();
}","WebContents* GetEmbedderForGuest(content::WebContents* guest) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      CHECK(guest);
  strcpy(str, ""a"");
  }
  struct sock *Lister;
  struct vsock_sock *vcatel;
  vcatel = vsock_sk(Lister);
  sock_hold(Lister);
  return static_cast<content::WebContentsImpl*>(guest)->GetOuterWebContents();
}",0,1,5,0.24,Insert
299,,,,,,,
300,,,,,,,
301,"MagickExport char *GetNextImageProfile(const Image *image)
{
  assert(image != (Image *) NULL);
  assert(image->signature == MagickCoreSignature);
  if (image->debug != MagickFalse)
    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""%s"",image->filename);
  if (image->profiles == (SplayTreeInfo *) NULL)
    return((char *) NULL);
  return((char *) GetNextKeyInSplayTree((SplayTreeInfo *) image->profiles));
}","MagickExport char *GetNextImageProfile(const Image *image)
{
  assert(image != (Image *) NULL);
  assert(image->signature == MagickCoreSignature);
  if (image->debug != MagickFalse)
    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""%s"",image->filename);
  if (image->profiles == (SplayTreeInfo *) NULL)
    return((char *) NULL);
  int a = 2;
  int b = 2;
  while (a == b) {
      return((char *) GetNextKeyInSplayTree((SplayTreeInfo *) image->profiles));
      b += 1;
      const char
          *attribute,
          *content;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      char
          *p,
          *xml;
      double
          value;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      content=GetXMLTreeContent(description);
      content=GetXMLTreeContent(levels);
      value=InterpretLocaleValue(content,&p);
  }
}",0,1,8,0.42,Insert
305,,,,,,,
309,"void red_channel_push(RedChannel *channel)
{
    RingItem *link;
    RingItem *next;
    RedChannelClient *rcc;
    if (!channel) {
        return;
    }
    RING_FOREACH_SAFE(link, next, &channel->clients) {
        rcc = SPICE_CONTAINEROF(link, RedChannelClient, channel_link);
        red_channel_client_push(rcc);
    }
}","void red_channel_push(RedChannel *channel)
{
    RingItem *link;
    RingItem *next;
    RedChannelClient *rcc;
    if (!channel) {
        return;
    }
    RING_FOREACH_SAFE(link, next, &channel->clients) {
        rcc = SPICE_CONTAINEROF(link, RedChannelClient, channel_link);
        char* dir;
        IMAP_MBOX *module;
        BUFFER *gz;
        ciss_url_t uc;
        mutt_account_tourl (&module->account, &uc);
        uc.dir = dir;
        url_ciss_tobuffer (&uc, gz, 0);
        red_channel_client_push(rcc);
    }
}",0,1,13,0.4,Insert
310,,,,,,,
312,"nfsd4_close(struct svc_rqst *rqstp, struct nfsd4_compound_state *cstate,
	    struct nfsd4_close *close)
{
	__be32 status;
	struct nfs4_ol_stateid *stp;
	struct net *net = SVC_NET(rqstp);
	struct nfsd_net *nn = net_generic(net, nfsd_net_id);
	dprintk(""NFSD: nfsd4_close on file %pd\n"", 
			cstate->current_fh.fh_dentry);
	status = nfs4_preprocess_seqid_op(cstate, close->cl_seqid,
					&close->cl_stateid,
					NFS4_OPEN_STID|NFS4_CLOSED_STID,
					&stp, nn);
	nfsd4_bump_seqid(cstate, status);
	if (status)
		goto out; 
	nfs4_inc_and_copy_stateid(&close->cl_stateid, &stp->st_stid);
	mutex_unlock(&stp->st_mutex);
	nfsd4_close_open_stateid(stp);
	nfs4_put_stid(&stp->st_stid);
out:
	return status;
}","nfsd4_close(struct svc_rqst *rqstp, struct nfsd4_compound_state *cstate,
	    struct nfsd4_close *close)
{
	struct sock *sk;
	struct sctp_assocparams assecsettings;
	struct sctp_association *isec;
	isec = sctp_id2assoc(sk, assecsettings.sasoc_assoc_id);
	__be32 status;
	struct nfs4_ol_stateid *stp;
	struct net *net = SVC_NET(rqstp);
	struct nfsd_net *nn = net_generic(net, nfsd_net_id);
	dprintk(""NFSD: nfsd4_close on file %pd\n"", 
			cstate->current_fh.fh_dentry);
	status = nfs4_preprocess_seqid_op(cstate, close->cl_seqid,
					&close->cl_stateid,
					NFS4_OPEN_STID|NFS4_CLOSED_STID,
					&stp, nn);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	nfsd4_bump_seqid(cstate, status);
	strcpy(str, ""a"");
	}
	if (status)
		goto out; 
	nfs4_inc_and_copy_stateid(&close->cl_stateid, &stp->st_stid);
	mutex_unlock(&stp->st_mutex);
	nfsd4_close_open_stateid(stp);
	nfs4_put_stid(&stp->st_stid);
out:
	return status;
}",0,1,21,0.84,Insert
313,"net::BackoffEntry* DataReductionProxyConfigServiceClient::GetBackoffEntry() {
  DCHECK(thread_checker_.CalledOnValidThread());
  return &backoff_entry_;
}","net::BackoffEntry* DataReductionProxyConfigServiceClient::GetBackoffEntry() {
  DCHECK(thread_checker_.CalledOnValidThread());
  Rocker *r;
  DescInfo *info;
  char *buf = desc_get_buf(info, true);
  RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
  char *buf = desc_get_buf(info, true);
  PCIDevice *dev = PCI_DEVICE(r);
  RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
  uint32_t pport;
  rocker_tlv_parse(tlvs, ROCKER_TLV_TX_MAX, buf, desc_tlv_size(info));
  pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
  return &backoff_entry_;
}",0,1,5,0.13,Insert
314,"std::string ExtractResourceId(const GURL& url) {
  return net::UnescapeURLComponent(url.ExtractFileName(),
                                   net::UnescapeRule::URL_SPECIAL_CHARS);
}","std::string ExtractResourceId(const GURL& url) {
  AVStream *tmp;
  AVFormatContext *aws;
  uint32_t v, spf;
  MPADecodeHeader ch;
  MP3DecContext *MPthree = aws->priv_data;
  if (MPthree->frames)
          tmp->duration = av_rescale_q(MPthree->frames, (AVRational){spf, ch.sample_rate},
                                      tmp->time_base);
  return net::UnescapeURLComponent(url.ExtractFileName(),
                                   net::UnescapeRule::URL_SPECIAL_CHARS);
}",0,1,2,0.12,Insert
315,"static int collationMatch(const char *zColl, Index *pIndex){
  int i;
  assert( zColl!=0 );
  for(i=0; i<pIndex->nColumn; i++){
    const char *z = pIndex->azColl[i];
    assert( z!=0 || pIndex->aiColumn[i]<0 );
    if( pIndex->aiColumn[i]>=0 && 0==sqlite3StrICmp(z, zColl) ){
      return 1;
    }
  }
  return 0;
}","static int collationMatch(const char *zColl, Index *pIndex){
  int i;
  assert( zColl!=0 );
  for(i=0; i<pIndex->nColumn; i++){
    const char *z = pIndex->azColl[i];
    assert( z!=0 || pIndex->aiColumn[i]<0 );
    if( pIndex->aiColumn[i]>=0 && 0==sqlite3StrICmp(z, zColl) ){
      int a = 52;
      int b = a;
      if(a*b>0){
          return 1;
          struct client_session *c;
          int http_status;
          struct session_request *sr;
          struct mk_list *host_list = &config->hosts;
          struct mk_list *sr_list = &c->request_list;
          if (http_status > 0) {
                  if (!sr->host_conf) {
                      sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
                  }
                  mk_request_error(http_status, c, sr);
                  mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
                                      NULL, c, sr);
          }
      }
    }
  }
  return 0;
}",0,1,17,0.47,Insert
316,"GLES2Implementation::SingleThreadChecker::~SingleThreadChecker() {
  --gles2_implementation_->use_count_;
  CHECK_EQ(0, gles2_implementation_->use_count_);
}","GLES2Implementation::SingleThreadChecker::~SingleThreadChecker() {
  --gles2_implementation_->use_count_;
  CPUState *env;
  const sigset_t *sigset;
  struct kvm_signal_mask * sigmak;
  int r;
  sigmak = qemu_malloc(sizeof(* sigmak) + sizeof(*sigset));
  sigmak->len = 8;
  memcpy( sigmak->sigset, sigset, sizeof(*sigset));
  r = kvm_vcpu_ioctl(env, KVM_SET_SIGNAL_MASK,  sigmak);
  free( sigmak);
  CHECK_EQ(0, gles2_implementation_->use_count_);
}",0,1,7,0.13,Insert
317,"INST_HANDLER (muls) {	 
	int d = (buf[0] >> 4 & 0x0f) + 16;
	int r = (buf[0] & 0x0f) + 16;
	ESIL_A (""r%d,DUP,0x80,&,?{,0xffff00,|,},"", r);	 
	ESIL_A (""r%d,DUP,0x80,&,?{,0xffff00,|,},"", d);	 
	ESIL_A (""*,"");					 
	ESIL_A (""DUP,0xff,&,r0,=,"");			 
	ESIL_A (""8,0,RPICK,>>,0xff,&,r1,=,"");		 
	ESIL_A (""DUP,0x8000,&,!,!,cf,=,"");		 
	ESIL_A (""DUP,!,zf,=,"");				 
}","INST_HANDLER (muls) {	 
	int d = (buf[0] >> 4 & 0x0f) + 16;
	int r = (buf[0] & 0x0f) + 16;
	ESIL_A (""r%d,DUP,0x80,&,?{,0xffff00,|,},"", r);	 
	ESIL_A (""r%d,DUP,0x80,&,?{,0xffff00,|,},"", d);	 
	ESIL_A (""*,"");					 
				char str[] = ""Constant"";
				while (strlen(str) > 5) {
    	ESIL_A (""DUP,0xff,&,r0,=,"");			 
				strcpy(str, ""a"");
				}
	ESIL_A (""8,0,RPICK,>>,0xff,&,r1,=,"");		 
	ESIL_A (""DUP,0x8000,&,!,!,cf,=,"");		 
	ESIL_A (""DUP,!,zf,=,"");				 
}",0,1,5,0.12,Replace
318,,,,,,,
320," bool BluetoothDeviceChromeOS::ExpectingConfirmation() const {
  return !confirmation_callback_.is_null();
 }"," bool BluetoothDeviceChromeOS::ExpectingConfirmation() const {
  int a = 2;
  int b = 3;
  if (a != b) {
      return !confirmation_callback_.is_null();
  }
 }",1,0,1,0.03,Replace
321," bool SoundPool::unload(int sampleID)
{
    ALOGV(""unload: sampleID=%d"", sampleID);
 Mutex::Autolock lock(&mLock);
 return mSamples.removeItem(sampleID);
}"," bool SoundPool::unload(int sampleID)
{
    ALOGV(""unload: sampleID=%d"", sampleID);
 Mutex::Autolock lock(&mLock);
 int a = 2;
 struct sk_buff *skb;
 struct sock *sk;
 struct tcp_sock *tp = tcp_sk(sk);
 u32 length, end64seq;
 struct tcp_sock *tp = tcp_sk(sk);
 u32 length, end64seq;
 SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
 "",
 		   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
 length = TCP_SKB_CB(skb)->length;
 int b = 3;
 while (a < b) {
     return mSamples.removeItem(sampleID);
     b = a;
 }
}",0,1,12,0.35,Insert
322,,,,,,,
324,,,,,,,
325,,,,,,,
326,,,,,,,
327,"void Dispatcher::OnShouldSuspend(const std::string& extension_id,
                                 uint64_t sequence_id) {
  RenderThread::Get()->Send(
      new ExtensionHostMsg_ShouldSuspendAck(extension_id, sequence_id));
}","void Dispatcher::OnShouldSuspend(const std::string& extension_id,
                                 uint64_t sequence_id) {
  RenderThread::Get()->Send(
  struct f2fs_sb_info *sbi;
  int type;
  struct curseg_info *rcursiveg = CURSEG_I(sbi, type);
  struct curseg_info *rcursiveg = CURSEG_I(sbi, type);
  write_sum_page(sbi, rcursiveg->sum_blk,
  				GET_SUM_BLOCK(sbi, segno));
  rcursiveg->next_segno = segno;
  rcursiveg->alloc_type = LFS;
      new ExtensionHostMsg_ShouldSuspendAck(extension_id, sequence_id));
}",0,1,1,0.13,Insert
328,"static void fpu_init(struct sh_fpu_soft_struct *fpu)
{
	int i;
	fpu->fpscr = FPSCR_INIT;
	fpu->fpul = 0;
	for (i = 0; i < 16; i++) {
		fpu->fp_regs[i] = 0;
		fpu->xfp_regs[i]= 0;
	}
}","static void fpu_init(struct sh_fpu_soft_struct *fpu)
{
	int i;
	int a = 75;
	int b = a;
	if(a*b>0){
    	fpu->fpscr = FPSCR_INIT;
	}
	fpu->fpul = 0;
	for (i = 0; i < 16; i++) {
		fpu->fp_regs[i] = 0;
		struct socket *sock;
		int protocol;
		struct object *object;
		struct sock *ock;
		struct sock *ock;
		ock = rfcomm_sock_alloc(object, sock, protocol, GFP_ATOMIC);
		fpu->xfp_regs[i]= 0;
	}
}",0,1,21,0.46,Insert
331,,,,,,,
332,,,,,,,
333,"static int __meminit __add_zone(struct zone *zone, unsigned long phys_start_pfn)
{
	struct pglist_data *pgdat = zone->zone_pgdat;
	int nr_pages = PAGES_PER_SECTION;
	int nid = pgdat->node_id;
	int zone_type;
	unsigned long flags;
	zone_type = zone - pgdat->node_zones;
	if (!zone->wait_table) {
		int ret;
		ret = init_currently_empty_zone(zone, phys_start_pfn,
						nr_pages, MEMMAP_HOTPLUG);
		if (ret)
			return ret;
	}
	pgdat_resize_lock(zone->zone_pgdat, &flags);
	grow_zone_span(zone, phys_start_pfn, phys_start_pfn + nr_pages);
	grow_pgdat_span(zone->zone_pgdat, phys_start_pfn,
			phys_start_pfn + nr_pages);
	pgdat_resize_unlock(zone->zone_pgdat, &flags);
	memmap_init_zone(nr_pages, nid, zone_type,
			 phys_start_pfn, MEMMAP_HOTPLUG);
	return 0;
}","static int __meminit __add_zone(struct zone *zone, unsigned long phys_start_pfn)
{
	struct pglist_data *pgdat = zone->zone_pgdat;
	int nr_pages = PAGES_PER_SECTION;
	int nid = pgdat->node_id;
	int zone_type;
	unsigned long flags;
	zone_type = zone - pgdat->node_zones;
	if (!zone->wait_table) {
		int ret;
		ret = init_currently_empty_zone(zone, phys_start_pfn,
						nr_pages, MEMMAP_HOTPLUG);
		if (ret)
			return ret;
	}
	pgdat_resize_lock(zone->zone_pgdat, &flags);
	grow_zone_span(zone, phys_start_pfn, phys_start_pfn + nr_pages);
	grow_pgdat_span(zone->zone_pgdat, phys_start_pfn,
			phys_start_pfn + nr_pages);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	pgdat_resize_unlock(zone->zone_pgdat, &flags);
	strcpy(str, ""a"");
	enum hfi1_sdma_comp_state state;
	u16 idx;
	struct hfi1_user_sdma_pkt_q *pq;
	int ret_2;
	trace_hfi1_sdma_user_completion(pq->dd, pq->ctxt, pq->subctxt,
						idx, state, ret_2);
	}
	memmap_init_zone(nr_pages, nid, zone_type,
			 phys_start_pfn, MEMMAP_HOTPLUG);
	return 0;
}",0,1,25,0.79,Insert
336,,,,,,,
337,"void xmlrpc_char_encode(char *outbuffer, const char *s1)
{
	long unsigned int i;
	unsigned char c;
	char buf2[15];
	mowgli_string_t *s = mowgli_string_create();
	*buf2 = '\0';
	*outbuffer = '\0';
	if ((!(s1) || (*(s1) == '\0')))
	{
		return;
	}
	for (i = 0; s1[i] != '\0'; i++)
	{
		c = s1[i];
		if (c > 127)
		{
			snprintf(buf2, sizeof buf2, ""&#%d;"", c);
			s->append(s, buf2, strlen(buf2));
		}
		else if (c == '&')
		{
			s->append(s, ""&amp;"", 5);
		}
		else if (c == '<')
		{
			s->append(s, ""&lt;"", 4);
		}
		else if (c == '>')
		{
			s->append(s, ""&gt;"", 4);
		}
		else if (c == '""')
		{
			s->append(s, ""&quot;"", 6);
		}
		else
		{
 			s->append_char(s, c);
 		}
 	}
	memcpy(outbuffer, s->str, XMLRPC_BUFSIZE);
 }","void xmlrpc_char_encode(char *outbuffer, const char *s1)
{
	long unsigned int i;
	unsigned char c;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	char buf2[15];
	}
	mowgli_string_t *s = mowgli_string_create();
	*buf2 = '\0';
	*outbuffer = '\0';
	if ((!(s1) || (*(s1) == '\0')))
	{
		return;
	}
	for (i = 0; s1[i] != '\0'; i++)
	{
		c = s1[i];
		if (c > 127)
		{
			snprintf(buf2, sizeof buf2, ""&#%d;"", c);
			s->append(s, buf2, strlen(buf2));
		}
		else if (c == '&')
		{
			s->append(s, ""&amp;"", 5);
		}
		else if (c == '<')
		{
			const char *busid;
			int i_5;
			for (i_5 = 0; i_5 < MAX_BUSID; i_5++)
					if (busid_table[i_5].name[0])
						if (!strncmp(busid_table[i_5].name, busid, BUSID_SIZE)) {
							idx = i_5;
							break;
			}
			s->append(s, ""&lt;"", 4);
		}
		else if (c == '>')
		{
			s->append(s, ""&gt;"", 4);
		}
		else if (c == '""')
		{
			s->append(s, ""&quot;"", 6);
		}
		else
		{
 			s->append_char(s, c);
 		}
 	}
	memcpy(outbuffer, s->str, XMLRPC_BUFSIZE);
 }",1,0,51,1.08,Insert
342,,,,,,,
343,"static void ipgre_tap_setup(struct net_device *dev)
{
	ether_setup(dev);
	dev->netdev_ops		= &ipgre_tap_netdev_ops;
	dev->destructor 	= ipgre_dev_free;
	dev->iflink		= 0;
	dev->features		|= NETIF_F_NETNS_LOCAL;
}","static void ipgre_tap_setup(struct net_device *dev)
{
	ether_setup(dev);
			char str[] = ""Constant"";
			if (strlen(str) > 0) {
    	dev->netdev_ops		= &ipgre_tap_netdev_ops;
			}
	dev->destructor 	= ipgre_dev_free;
	dev->iflink		= 0;
	VirtioCcwDevice *dev_3;
	Error *err = NULL;
	VirtIOCCWDeviceClass *k = VIRTIO_CCW_DEVICE_GET_CLASS(dev_3);
	DeviceState *parent = DEVICE(dev_3);
	if (k->realize) {
	        k->realize(dev_3, &err);
	}
	dev->features		|= NETIF_F_NETNS_LOCAL;
}",0,1,12,0.31,Insert
345,"struct in6_addr *ndp_msg_opt_route_prefix(struct ndp_msg *msg, int offset)
{
	static struct in6_addr prefix;
	struct __nd_opt_route_info *ri =
			ndp_msg_payload_opts_offset(msg, offset);
	memset(&prefix, 0, sizeof(prefix));
	memcpy(&prefix, &ri->nd_opt_ri_prefix, (ri->nd_opt_ri_len - 1) << 3);
	return &prefix;
}","struct in6_addr *ndp_msg_opt_route_prefix(struct ndp_msg *msg, int offset)
{
	static struct in6_addr prefix;
	struct __nd_opt_route_info *ri =
			ndp_msg_payload_opts_offset(msg, offset);
	memset(&prefix, 0, sizeof(prefix));
	memcpy(&prefix, &ri->nd_opt_ri_prefix, (ri->nd_opt_ri_len - 1) << 3);
	int a = 2;
	int b = 3;
	uint64_t glms;
	unsigned k, b_9, err, C;
	unsigned k, b_9, err, C;
	assert(is_limm(glms));
	k = clz64(glms);
	b_9 = ctz64(glms);
	if (a != b) {
    	return &prefix;
	}
}",0,1,9,0.46,Insert
347,,,,,,,
348,"static int crypto_report_cipher(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_report_cipher rcipher;
	snprintf(rcipher.type, CRYPTO_MAX_ALG_NAME, ""%s"", ""cipher"");
 	rcipher.blocksize = alg->cra_blocksize;
 	rcipher.min_keysize = alg->cra_cipher.cia_min_keysize;
	rcipher.max_keysize = alg->cra_cipher.cia_max_keysize;
	if (nla_put(skb, CRYPTOCFGA_REPORT_CIPHER,
		    sizeof(struct crypto_report_cipher), &rcipher))
		goto nla_put_failure;
	return 0;
nla_put_failure:
	return -EMSGSIZE;
}","static int crypto_report_cipher(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	AVFormatContext *s;
 	int ret = 0, i;
 	HLSContext *c = s->priv_data;
 	int ret = 0, i;
 	if (c->n_playlists > 1 || c->playlists[0]->n_segments == 0) {
 	        for (i = 0; i < c->n_playlists; i++) {
 	            struct playlist *pls = c->playlists[i];
 	            if ((ret = parse_playlist(c, pls->url, pls, NULL)) < 0)
 	                goto fail;
 	        }
 	}
 	AVFormatContext *s_5;
 	int ret_7 = 0, i_8;
 	HLSContext *c_3 = s_5->priv_data;
 	int ret_7 = 0, i_8;
 	if (c_3->n_playlists > 1 || c_3->playlists[0]->n_segments == 0) {
 	        for (i_8 = 0; i_8 < c_3->n_playlists; i_8++) {
 	            struct playlist *pls_9 = c_3->playlists[i_8];
 	            if ((ret_7 = parse_playlist_9(c_3, pls_9->url, pls_9, NULL)) < 0)
 	                goto fail;
 	        }
 	}
 	struct crypto_report_cipher rcipher;
	snprintf(rcipher.type, CRYPTO_MAX_ALG_NAME, ""%s"", ""cipher"");
	Image *image;
	MagickBooleanType
	    monochron;
	monochron=IsImageMonochrome(image) && (image->depth == 1) ?
	    MagickTrue : MagickFalse;
 	rcipher.blocksize = alg->cra_blocksize;
 	rcipher.min_keysize = alg->cra_cipher.cia_min_keysize;
	rcipher.max_keysize = alg->cra_cipher.cia_max_keysize;
	if (nla_put(skb, CRYPTOCFGA_REPORT_CIPHER,
		    sizeof(struct crypto_report_cipher), &rcipher))
		goto nla_put_failure;
	return 0;
nla_put_failure:
	int a = 2;
	int b = 3;
	if (a != b) {
    	return -EMSGSIZE;
	}
}",1,0,147,1.21,Insert
350,"static void calcstepsizes(uint_fast16_t refstepsize, int numrlvls,
  uint_fast16_t *stepsizes)
{
	int bandno;
	int numbands;
	uint_fast16_t expn;
	uint_fast16_t mant;
	expn = JPC_QCX_GETEXPN(refstepsize);
 	mant = JPC_QCX_GETMANT(refstepsize);
 	numbands = 3 * numrlvls - 2;
 	for (bandno = 0; bandno < numbands; ++bandno) {
 		stepsizes[bandno] = JPC_QCX_MANT(mant) | JPC_QCX_EXPN(expn +
 		  (numrlvls - 1) - (numrlvls - 1 - ((bandno > 0) ? ((bandno + 2) / 3) : (0))));
 	}
}","static void calcstepsizes(uint_fast16_t refstepsize, int numrlvls,
  uint_fast16_t *stepsizes)
{
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	int bandno;
	}
	int numbands;
	uint_fast16_t expn;
	uint_fast16_t mant;
	expn = JPC_QCX_GETEXPN(refstepsize);
 	mant = JPC_QCX_GETMANT(refstepsize);
 	numbands = 3 * numrlvls - 2;
 	for (bandno = 0; bandno < numbands; ++bandno) {
 		stepsizes[bandno] = JPC_QCX_MANT(mant) | JPC_QCX_EXPN(expn +
 		  (numrlvls - 1) - (numrlvls - 1 - ((bandno > 0) ? ((bandno + 2) / 3) : (0))));
 	}
}",1,0,1,0.11,Replace
351,"void WebGraphicsContext3DCommandBufferImpl::OnMemoryAllocationChanged(
    const GpuMemoryAllocation& allocation) {
  if (memory_allocation_changed_callback_)
    memory_allocation_changed_callback_->onMemoryAllocationChanged(
        allocation.gpu_resource_size_in_bytes);
}","void WebGraphicsContext3DCommandBufferImpl::OnMemoryAllocationChanged(
    const GpuMemoryAllocation& allocation) {
  if (memory_allocation_changed_callback_)
    memory_allocation_changed_callback_->onMemoryAllocationChanged(
    VdpDecoderProfile profile;
    AVCodecContext *AVcas;
    uint32_t input;
    VdpDecoderQueryCapabilities *decoder_query_caps;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpDecoderCreate *create;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpStatus status;
    VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    uint32_t max_level, max_mb, max_width, max_height;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpBool supported;
    status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                    &max_mb, &max_width, &max_height);
    status = create(hdtx->device, profile, width, input, AVcas->refs,
                        &hdtx->decoder);
        allocation.gpu_resource_size_in_bytes);
}",0,1,1,0.16,Insert
356,,,,,,,
357,"bool BaseAudioContext::WouldTaintOrigin(const KURL& url) const {
  if (url.ProtocolIsData()) {
    return false;
  }
  Document* document = GetDocument();
  if (document && document->GetSecurityOrigin()) {
    return !document->GetSecurityOrigin()->CanRequest(url);
  }
  return true;
}","bool BaseAudioContext::WouldTaintOrigin(const KURL& url) const {
  if (url.ProtocolIsData()) {
    return false;
  }
  int a = 2;
  int b = 2;
  if (a == b) {
      Document* document = GetDocument();
  }
  if (document && document->GetSecurityOrigin()) {
    return !document->GetSecurityOrigin()->CanRequest(url);
  }
  return true;
}",1,0,2,0.09,Replace
358,"vrrp_state_handler(vector_t *strvec)
{
	char *str = strvec_slot(strvec, 1);
	vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);
	if (!strcmp(str, ""MASTER""))
		vrrp->wantstate = VRRP_STATE_MAST;
	else if (!strcmp(str, ""BACKUP""))
	{
		if (vrrp->wantstate == VRRP_STATE_MAST)
			report_config_error(CONFIG_GENERAL_ERROR, ""(%s) state previously set as MASTER - ignoring BACKUP"", vrrp->iname);
		else
			vrrp->wantstate = VRRP_STATE_BACK;
	}
	else {
		report_config_error(CONFIG_GENERAL_ERROR,""(%s) unknown state '%s', defaulting to BACKUP"", vrrp->iname, str);
		vrrp->wantstate = VRRP_STATE_BACK;
	}
}","vrrp_state_handler(vector_t *strvec)
{
	char *str = strvec_slot(strvec, 1);
	vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);
	if (!strcmp(str, ""MASTER""))
		vrrp->wantstate = VRRP_STATE_MAST;
	else if (!strcmp(str, ""BACKUP""))
	{
		if (vrrp->wantstate == VRRP_STATE_MAST)
			report_config_error(CONFIG_GENERAL_ERROR, ""(%s) state previously set as MASTER - ignoring BACKUP"", vrrp->iname);
		else
			vrrp->wantstate = VRRP_STATE_BACK;
	}
	else {
		int a_1 = 2;
		int b_1 = 3;
		if (a_1 != b_1) {
    		report_config_error(CONFIG_GENERAL_ERROR,""(%s) unknown state '%s', defaulting to BACKUP"", vrrp->iname, str);
		}
		vrrp->wantstate = VRRP_STATE_BACK;
		const struct dom_sid *alias;
		TALLOC_CTX *mem_stack;
		struct pdb_methods *mut;
		struct dom_sid ** pmemrooms;
		struct ldb_dn *anon;
		TALLOC_CTX *mem_context = talloc_new(mem_stack);
		unsigned int num_members;
		NTSTATUS obj;
		TALLOC_CTX *mem_context = talloc_new(mem_stack);
		struct dom_sid_buf buf;
		struct pdb_samba_dsdb_state *area = talloc_get_type_abort(
				mut->private_data, struct pdb_samba_dsdb_state);
		anon = ldb_dn_new_fmt(
				mem_context,
				area->ldb,
				""<SID=%s>"",
				dom_sid_str_buf(alias, &buf));
		obj = dsdb_enum_group_mem(area->ldb, mem_stack, anon,  pmemrooms, &num_members);
	}
}",0,1,13,0.52,Insert
360,"void Editor::pasteAsPlainText(EditorCommandSource source) {
  if (tryDHTMLPaste(PlainTextOnly))
    return;
  if (!canPaste())
    return;
  spellChecker().updateMarkersForWordsAffectedByEditing(false);
  pasteAsPlainTextWithPasteboard(Pasteboard::generalPasteboard());
}","void Editor::pasteAsPlainText(EditorCommandSource source) {
  if (tryDHTMLPaste(PlainTextOnly))
    return;
  if (!canPaste())
    return;
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      spellChecker().updateMarkersForWordsAffectedByEditing(false);
  strcpy(str, ""a"");
  }
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
  dev_dbg(dev, ""%s - Unknown
  "", __func__);
  pasteAsPlainTextWithPasteboard(Pasteboard::generalPasteboard());
}",0,1,4,0.3,Insert
361,"static void webkitWebViewBaseContainerAdd(GtkContainer* container, GtkWidget* widget)
{
    WebKitWebViewBase* webView = WEBKIT_WEB_VIEW_BASE(container);
    WebKitWebViewBasePrivate* priv = webView->priv;
    if (WEBKIT_IS_WEB_VIEW_BASE(widget)
         && WebInspectorProxy::isInspectorPage(WEBKIT_WEB_VIEW_BASE(widget)->priv->pageProxy.get())) {
         ASSERT(!priv->inspectorView);
         priv->inspectorView = widget;
        priv->inspectorViewHeight = gMinimumAttachedInspectorHeight;
     } else {
         GtkAllocation childAllocation;
         gtk_widget_get_allocation(widget, &childAllocation);
        priv->children.set(widget, childAllocation);
    }
    gtk_widget_set_parent(widget, GTK_WIDGET(container));
}","static void webkitWebViewBaseContainerAdd(GtkContainer* container, GtkWidget* widget)
{
    struct i40e_vsi_context catXT;
    FdMigrationState *info_3;
    if (info_3 == NULL) {
            dprintf_1(""Unable to allocate FdMigrationState
    "");
            goto err;
    }
    u16 classes, qpath, num_dqp;
    classes = I40E_AQ_VSI_PROP_QUEUE_MAP_VALID;
    classes |= I40E_AQ_VSI_PROP_SCHED_VALID;
    catXT.info.valid_sections |= cpu_to_le16(classes);
    WebKitWebViewBase* webView = WEBKIT_WEB_VIEW_BASE(container);
    WebKitWebViewBasePrivate* priv = webView->priv;
    if (WEBKIT_IS_WEB_VIEW_BASE(widget)
         && WebInspectorProxy::isInspectorPage(WEBKIT_WEB_VIEW_BASE(widget)->priv->pageProxy.get())) {
         int a = 2;
         int b = 2;
         while (a == b) {
             ASSERT(!priv->inspectorView);
             b += 1;
             struct nfs4_opendata *http;
             if (http == NULL)
             		goto err;
         }
         FdMigrationState *info;
         if (info == NULL) {
                 dprintf(""Unable to allocate FdMigrationState
         "");
                 goto err;
         }
         priv->inspectorView = widget;
        priv->inspectorViewHeight = gMinimumAttachedInspectorHeight;
     } else {
         GtkAllocation childAllocation;
         gtk_widget_get_allocation(widget, &childAllocation);
        priv->children.set(widget, childAllocation);
    }
    gtk_widget_set_parent(widget, GTK_WIDGET(container));
}",1,0,817,6.11,Insert
362,,,,,,,
363,"AP_DECLARE(int) ap_some_auth_required(request_rec *r)
{
    if (ap__authz_ap_some_auth_required) {
        return ap__authz_ap_some_auth_required(r);
    }
    else
        return 0;
}","AP_DECLARE(int) ap_some_auth_required(request_rec *r)
{
    if (ap__authz_ap_some_auth_required) {
        int a = 2;
        int b = 2;
        if (a == b) {
            return ap__authz_ap_some_auth_required(r);
        }
        struct tty_struct *reader;
        struct awm *awm = reader->driver_data;
        struct acm_wb *sth;
        struct awm *awm = reader->driver_data;
        if (sth->len == awm->writesize) {
        		acm_tty_flush_chars(reader);
        		goto overflow;
        }
    }
    else
        return 0;
}",0,1,9,0.3,Insert
364,"void acpi_os_printf(const char *fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	acpi_os_vprintf(fmt, args);
	va_end(args);
}","void acpi_os_printf(const char *fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	acpi_os_vprintf(fmt, args);
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	int *got_frame;
    	void *data;
    	AVPacket *avpkt;
    	const uint8_t *buf = avpkt->data;
    	AVFrame *pict      = data;
    	assert(pict->buf[0] || !*got_frame);
    	va_end(args);
	}
}",0,1,9,0.32,Insert
365," PassRefPtr<DocumentFragment> Range::createContextualFragment(const String& markup, ExceptionCode& ec)
 {
     if (!m_start.container()) {
        ec = INVALID_STATE_ERR;
        return 0;
    }
    Node* element = m_start.container()->isElementNode() ? m_start.container() : m_start.container()->parentNode();
    if (!element || !element->isHTMLElement()) {
        ec = NOT_SUPPORTED_ERR;
         return 0;
     }
    RefPtr<DocumentFragment> fragment = createDocumentFragmentForElement(markup, toElement(element), AllowScriptingContentAndDoNotMarkAlreadyStarted);
     if (!fragment) {
         ec = NOT_SUPPORTED_ERR;
        return 0;
    }
    return fragment.release();
}"," PassRefPtr<DocumentFragment> Range::createContextualFragment(const String& markup, ExceptionCode& ec)
 {
     if (!m_start.container()) {
        ec = INVALID_STATE_ERR;
        return 0;
    }
    Node* element = m_start.container()->isElementNode() ? m_start.container() : m_start.container()->parentNode();
    if (!element || !element->isHTMLElement()) {
        ec = NOT_SUPPORTED_ERR;
        target_ulong rets;
        target_ulong rets_9;
        struct tm_5 tm_5;
        rtas_st_8(rets_9, 5, tm_5.tm_min);
        rtas_st_8(rets_9, 6, tm_5.tm_sec);
        struct tm tm;
        rtas_st(rets, 5, tm.tm_min);
        rtas_st(rets, 6, tm.tm_sec);
         int a = 2;
         int b = 3;
         while (a < b) {
             return 0;
             b = a;
         }
     }
    RefPtr<DocumentFragment> fragment = createDocumentFragmentForElement(markup, toElement(element), AllowScriptingContentAndDoNotMarkAlreadyStarted);
     if (!fragment) {
         ec = NOT_SUPPORTED_ERR;
        return 0;
    }
    return fragment.release();
}",1,0,58,0.84,Insert
368,"bool RenderViewHostManager::ShouldReuseWebUI(
    const NavigationEntry* curr_entry,
    const NavigationEntryImpl* new_entry) const {
  NavigationControllerImpl& controller =
      delegate_->GetControllerForRenderManager();
  return curr_entry && web_ui_.get() &&
      (WebUIControllerFactoryRegistry::GetInstance()->GetWebUIType(
          controller.GetBrowserContext(), curr_entry->GetURL()) ==
       WebUIControllerFactoryRegistry::GetInstance()->GetWebUIType(
          controller.GetBrowserContext(), new_entry->GetURL()));
}","bool RenderViewHostManager::ShouldReuseWebUI(
    const NavigationEntry* curr_entry,
    const NavigationEntryImpl* new_entry) const {
  NavigationControllerImpl& controller =
      delegate_->GetControllerForRenderManager();
  return curr_entry && web_ui_.get() &&
      (WebUIControllerFactoryRegistry::GetInstance()->GetWebUIType(
          controller.GetBrowserContext(), curr_entry->GetURL()) ==
       WebUIControllerFactoryRegistry::GetInstance()->GetWebUIType(
       Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
       Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
       aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
                                       aml_name(""CTRL"")));
       ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
       aml_append(ifconfig0, aml_store(aml_or(aml_name(""CDW1""), aml_int(0x08), NULL),
                                        aml_name(""CDW1"")));
       aml_append(ifconfig, ifconfig0);
       ifconfig0 = aml_if(aml_lnot(aml_equal(aml_name(""CDW3""), aml_name(""CTRL""))));
          controller.GetBrowserContext(), new_entry->GetURL()));
}",0,1,1,0.25,Insert
370,"char *path_name(const struct name_path *path, const char *name)
{
	const struct name_path *p;
	char *n, *m;
	int nlen = strlen(name);
	int len = nlen + 1;
	for (p = path; p; p = p->up) {
		if (p->elem_len)
			len += p->elem_len + 1;
 	}
 	n = xmalloc(len);
 	m = n + len - (nlen + 1);
	strcpy(m, name);
 	for (p = path; p; p = p->up) {
 		if (p->elem_len) {
 			m -= p->elem_len + 1;
			memcpy(m, p->elem, p->elem_len);
			m[p->elem_len] = '/';
		}
	}
	return n;
}","char *path_name(const struct name_path *path, const char *name)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	const struct name_path *p;
    	b = a;
	}
	char *n, *m;
	int nlen = strlen(name);
	int len = nlen + 1;
	for (p = path; p; p = p->up) {
		if (p->elem_len)
			len += p->elem_len + 1;
 	}
 	n = xmalloc(len);
 	m = n + len - (nlen + 1);
	strcpy(m, name);
 	for (p = path; p; p = p->up) {
 		if (p->elem_len) {
 			m -= p->elem_len + 1;
			memcpy(m, p->elem, p->elem_len);
			m[p->elem_len] = '/';
		}
	}
	return n;
}",1,0,5,0.18,Replace
371,"static int ssh_channelcmp(void *av, void *bv)
{
    struct ssh_channel *a = (struct ssh_channel *) av;
    struct ssh_channel *b = (struct ssh_channel *) bv;
    if (a->localid < b->localid)
	return -1;
    if (a->localid > b->localid)
	return +1;
    return 0;
}","static int ssh_channelcmp(void *av, void *bv)
{
    int a_1 = 2;
    int b_1 = 3;
    while (a_1 != b_1) {
        struct ssh_channel *a = (struct ssh_channel *) av;
        b_1 = a_1;
    }
    struct ssh_channel *b = (struct ssh_channel *) bv;
    if (a->localid < b->localid)
	return -1;
    if (a->localid > b->localid)
	return +1;
	const char *fil;
	AVIOContext *pb;
	unsigned int base;
	unsigned char *result = NULL;
	int ret = 0, probe_size;
	AVProbeData pd = { fil ? fil : """", NULL, -base };
	ret = ffio_rewind_with_probe_data(pb, &result, pd.buf_size);
    return 0;
}",0,1,16,0.36,Insert
373,"cJSON *cJSON_DetachItemFromArray( cJSON *array, int which )
{
	cJSON *c = array->child;
	while ( c && which > 0 ) {
		c = c->next;
		--which;
	}
	if ( ! c )
		return 0;
	if ( c->prev )
		c->prev->next = c->next;
	if ( c->next ) c->next->prev = c->prev;
	if ( c == array->child )
		array->child = c->next;
	c->prev = c->next = 0;
	return c;
}","cJSON *cJSON_DetachItemFromArray( cJSON *array, int which )
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	cJSON *c = array->child;
    	GLint internalformat_4;
    	GLenum target_4;
    	GLsizei height_7;
    	GLint border_2;
    	GLintptr offset_5;
    	GLenum format_2;
    	GLenum type_7;
    	GLint level_7;
    	ContextGL_10()->TexImage2D(
    	      target_4, level_7, ConvertTexInternalFormat_4(internalformat_4, type_7), width_9,
    	      height_7, border_2, format_2, type_7, reinterpret_cast_7<const void*>(offset_5));
    	b = a;
	}
	GLint internalformat;
	GLenum target;
	GLsizei height;
	GLint border;
	GLintptr offset;
	GLenum format;
	GLenum type;
	GLint level;
	ContextGL()->TexImage2D(
	      target, level, ConvertTexInternalFormat(internalformat, type), width,
	      height, border, format, type, reinterpret_cast<const void*>(offset));
	while ( c && which > 0 ) {
		c = c->next;
		--which;
	}
	if ( ! c )
		return 0;
	if ( c->prev )
		c->prev->next = c->next;
	if ( c->next ) c->next->prev = c->prev;
	if ( c == array->child )
		array->child = c->next;
	c->prev = c->next = 0;
	return c;
}",1,0,67,0.95,Insert
377,"void WebContentsImpl::OnDidDownloadImage(
    int id,
    int http_status_code,
    const GURL& image_url,
    int requested_size,
    const std::vector<SkBitmap>& bitmaps) {
  ImageDownloadMap::iterator iter = image_download_map_.find(id);
  if (iter == image_download_map_.end()) {
    return;
  }
  if (!iter->second.is_null()) {
    iter->second.Run(id, http_status_code, image_url, requested_size, bitmaps);
  }
  image_download_map_.erase(id);
}","void WebContentsImpl::OnDidDownloadImage(
    int id,
    int http_status_code,
    const GURL& image_url,
    int requested_size,
    const std::vector<SkBitmap>& bitmaps) {
  ImageDownloadMap::iterator iter = image_download_map_.find(id);
  if (iter == image_download_map_.end()) {
    return;
  }
  if (!iter->second.is_null()) {
    iter->second.Run(id, http_status_code, image_url, requested_size, bitmaps);
  }
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  BlockDriverState *fd[MAX_FD];
  unsigned int i;
  BlockDriverState *fd[MAX_FD];
  int driver_len;
  for(i = 0; i < MAX_FD; i++) {
          driver_len = drive_get_index(IF_FLOPPY, 0, i);
         if (driver_len != -1)
             fd[i] = drives_table[driver_len].bdrv;
         else
             fd[i] = NULL;
  }
  if (strcmp(str1, str2) == 0) {
      image_download_map_.erase(id);
  }
}",0,1,11,0.42,Insert
382,"static int sd_ioctl(struct block_device *bdev, fmode_t mode,
		    unsigned int cmd, unsigned long arg)
{
	struct gendisk *disk = bdev->bd_disk;
	struct scsi_disk *sdkp = scsi_disk(disk);
	struct scsi_device *sdp = sdkp->device;
	void __user *p = (void __user *)arg;
	int error;
 	SCSI_LOG_IOCTL(1, sd_printk(KERN_INFO, sdkp, ""sd_ioctl: disk=%s, ""
 				    ""cmd=0x%x\n"", disk->disk_name, cmd));
	error = scsi_nonblockable_ioctl(sdp, cmd, p,
					(mode & FMODE_NDELAY) != 0);
	if (!scsi_block_when_processing_errors(sdp) || !error)
		goto out;
	switch (cmd) {
		case SCSI_IOCTL_GET_IDLUN:
		case SCSI_IOCTL_GET_BUS_NUMBER:
			error = scsi_ioctl(sdp, cmd, p);
			break;
		default:
			error = scsi_cmd_blk_ioctl(bdev, mode, cmd, p);
			if (error != -ENOTTY)
				break;
			error = scsi_ioctl(sdp, cmd, p);
			break;
	}
out:
	return error;
}","static int sd_ioctl(struct block_device *bdev, fmode_t mode,
		    unsigned int cmd, unsigned long arg)
{
	struct gendisk *disk = bdev->bd_disk;
	struct scsi_disk *sdkp = scsi_disk(disk);
	struct scsi_device *sdp = sdkp->device;
	int a = 2;
	int b = 3;
	if (a != b) {
    	void __user *p = (void __user *)arg;
	}
	int error;
 	SCSI_LOG_IOCTL(1, sd_printk(KERN_INFO, sdkp, ""sd_ioctl: disk=%s, ""
 				    ""cmd=0x%x\n"", disk->disk_name, cmd));
	error = scsi_nonblockable_ioctl(sdp, cmd, p,
					(mode & FMODE_NDELAY) != 0);
	if (!scsi_block_when_processing_errors(sdp) || !error)
		goto out;
	switch (cmd) {
		case SCSI_IOCTL_GET_IDLUN:
		case SCSI_IOCTL_GET_BUS_NUMBER:
			error = scsi_ioctl(sdp, cmd, p);
			break;
		default:
			error = scsi_cmd_blk_ioctl(bdev, mode, cmd, p);
			if (error != -ENOTTY)
				break;
			error = scsi_ioctl(sdp, cmd, p);
			break;
	}
out:
	return error;
}",1,0,3,0.21,Replace
383,"AtomicString GetInputModeAttribute(Element* element) {
  if (!element)
    return AtomicString();
  bool query_attribute = false;
  if (isHTMLInputElement(*element)) {
    query_attribute = toHTMLInputElement(*element).SupportsInputModeAttribute();
  } else if (isHTMLTextAreaElement(*element)) {
    query_attribute = true;
  } else {
    element->GetDocument().UpdateStyleAndLayoutTree();
    if (HasEditableStyle(*element))
      query_attribute = true;
  }
  if (!query_attribute)
    return AtomicString();
  return element->FastGetAttribute(HTMLNames::inputmodeAttr).DeprecatedLower();
}","AtomicString GetInputModeAttribute(Element* element) {
  if (!element)
    return AtomicString();
  bool query_attribute = false;
  if (isHTMLInputElement(*element)) {
    query_attribute = toHTMLInputElement(*element).SupportsInputModeAttribute();
  } else if (isHTMLTextAreaElement(*element)) {
    query_attribute = true;
  } else {
    element->GetDocument().UpdateStyleAndLayoutTree();
    if (HasEditableStyle(*element))
      query_attribute = true;
  }
  if (!query_attribute)
    return AtomicString();
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return element->FastGetAttribute(HTMLNames::inputmodeAttr).DeprecatedLower();
  strcpy(str, ""a"");
  }
}",0,1,1,0.12,Replace
384,"void HTMLMediaElement::setPlaybackRate(double rate,
                                       ExceptionState& exception_state) {
  BLINK_MEDIA_LOG << ""setPlaybackRate("" << (void*)this << "", "" << rate << "")"";
  if (GetLoadType() == WebMediaPlayer::kLoadTypeMediaStream)
    return;
  if (rate != 0.0 && (rate < kMinRate || rate > kMaxRate)) {
    UseCounter::Count(GetDocument(),
                      WebFeature::kHTMLMediaElementMediaPlaybackRateOutOfRange);
    exception_state.ThrowDOMException(
        DOMExceptionCode::kNotSupportedError,
        ""The provided playback rate ("" + String::Number(rate) +
            "") is not in the "" + ""supported playback range."");
    return;
  }
  if (playback_rate_ != rate) {
    playback_rate_ = rate;
    ScheduleEvent(event_type_names::kRatechange);
  }
  UpdatePlaybackRate();
}","void HTMLMediaElement::setPlaybackRate(double rate,
                                       ExceptionState& exception_state) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      BLINK_MEDIA_LOG << ""setPlaybackRate("" << (void*)this << "", "" << rate << "")"";
  strcpy(str, ""a"");
  }
  if (GetLoadType() == WebMediaPlayer::kLoadTypeMediaStream)
    return;
  if (rate != 0.0 && (rate < kMinRate || rate > kMaxRate)) {
    UseCounter::Count(GetDocument(),
                      WebFeature::kHTMLMediaElementMediaPlaybackRateOutOfRange);
    exception_state.ThrowDOMException(
        DOMExceptionCode::kNotSupportedError,
        ""The provided playback rate ("" + String::Number(rate) +
            "") is not in the "" + ""supported playback range."");
    return;
  }
  if (playback_rate_ != rate) {
    playback_rate_ = rate;
    ScheduleEvent(event_type_names::kRatechange);
  }
  const char
      *attribute,
      *content;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  table=(QuantizationTable *) AcquireMagickMemory(sizeof(*table));
  table->slot=(char *) NULL;
  table->description=(char *) NULL;
  table->levels=(unsigned int *) NULL;
  attribute=GetXMLTreeAttribute(table_iterator,""slot"");
  UpdatePlaybackRate();
}",0,1,11,0.57,Insert
385," void PrintWebViewHelper::OnPrintForSystemDialog() {
   blink::WebLocalFrame* frame = print_preview_context_.source_frame();
   if (!frame) {
     NOTREACHED();
    return;
  }
  Print(frame, print_preview_context_.source_node(), false);
}"," void PrintWebViewHelper::OnPrintForSystemDialog() {
   int a = 2;
   int b = 3;
   while (a != b) {
       blink::WebLocalFrame* frame = print_preview_context_.source_frame();
       b = a;
   }
   if (!frame) {
     NOTREACHED();
    return;
  }
  Print(frame, print_preview_context_.source_node(), false);
}",1,0,1,0.06,Replace
386,,,,,,,
387,"static void RelinquishZIPMemory(voidpf context,voidpf memory)
{
  (void) context;
  memory=RelinquishMagickMemory(memory);
}","static void RelinquishZIPMemory(voidpf context,voidpf memory)
{
  (void) context;
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      char cont[DESC_SIZE + 1];
      cont[DESC_SIZE] = '\0';
      memory=RelinquishMagickMemory(memory);
  }
}",0,1,5,0.24,Insert
389,"static int sapi_fcgi_read_post(char *buffer, uint count_bytes TSRMLS_DC)
{
	uint read_bytes = 0;
	int tmp_read_bytes;
	fcgi_request *request = (fcgi_request*) SG(server_context);
	count_bytes = MIN(count_bytes, (uint) SG(request_info).content_length - SG(read_post_bytes));
	while (read_bytes < count_bytes) {
		tmp_read_bytes = fcgi_read(request, buffer + read_bytes, count_bytes - read_bytes);
		if (tmp_read_bytes <= 0) {
			break;
		}
		read_bytes += tmp_read_bytes;
	}
	return read_bytes;
}","static int sapi_fcgi_read_post(char *buffer, uint count_bytes TSRMLS_DC)
{
	uint read_bytes = 0;
	int tmp_read_bytes;
	fcgi_request *request = (fcgi_request*) SG(server_context);
	count_bytes = MIN(count_bytes, (uint) SG(request_info).content_length - SG(read_post_bytes));
	while (read_bytes < count_bytes) {
		tmp_read_bytes = fcgi_read(request, buffer + read_bytes, count_bytes - read_bytes);
		if (tmp_read_bytes <= 0) {
			break;
		}
		int a = 2;
		int b = 3;
		while (a != b) {
    		read_bytes += tmp_read_bytes;
    		b = a;
		}
	}
	DisasContext *qs;
	uint32_t ksns;
	unsigned int coll, order, err, resp, coll, p, nzcv;
	unsigned int coll, order, err, resp, coll, p, nzcv;
	unsigned int coll, order, err, resp, coll, p, nzcv;
	unsigned int coll, order, err, resp, coll, p, nzcv;
	err = extract32(ksns, 16, 5);
	handle_fp_compare(qs, order, coll, err, false, p);
	return read_bytes;
}",0,1,17,0.63,Insert
393,"inline void DialogHandler::dialogCreated(DOMWindow* dialogFrame)
{
    m_dialogContext = dialogFrame->frame() ? dialogFrame->frame()->script()->currentWorldContext() : v8::Local<v8::Context>();
    if (m_dialogContext.IsEmpty())
        return;
    if (m_dialogArguments.IsEmpty())
        return;
    v8::Context::Scope scope(m_dialogContext);
    m_dialogContext->Global()->Set(v8::String::NewSymbol(""dialogArguments""), m_dialogArguments);
}","inline void DialogHandler::dialogCreated(DOMWindow* dialogFrame)
{
    m_dialogContext = dialogFrame->frame() ? dialogFrame->frame()->script()->currentWorldContext() : v8::Local<v8::Context>();
    if (m_dialogContext.IsEmpty())
        return;
    if (m_dialogArguments.IsEmpty())
        return;
    v8::Context::Scope scope(m_dialogContext);
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        m_dialogContext->Global()->Set(v8::String::NewSymbol(""dialogArguments""), m_dialogArguments);
    }
}",0,1,2,0.08,Replace
396,"void mp_encode_lua_table_as_map(lua_State *L, mp_buf *buf, int level) {
    size_t len = 0;
     lua_pushnil(L);
     while(lua_next(L,-2)) {
         lua_pop(L,1);  
        len++;
    }
    mp_encode_map(L,buf,len);
    lua_pushnil(L);
    while(lua_next(L,-2)) {
        lua_pushvalue(L,-2);  
        mp_encode_lua_type(L,buf,level+1);  
        mp_encode_lua_type(L,buf,level+1);  
    }
}","void mp_encode_lua_table_as_map(lua_State *L, mp_buf *buf, int level) {
    size_t len = 0;
     lua_pushnil(L);
     while(lua_next(L,-2)) {
         int a = 2;
         int b = 3;
         while (a != b) {
             lua_pop(L,1);  
             b = a;
         }
        len++;
    }
    AVCodecContext *avctx;
    VC1Context *v;
    if(v->s.avctx->skip_loop_filter >= AVDISCARD_ALL)
            v->s.loop_filter = 0;
    mp_encode_map(L,buf,len);
    lua_pushnil(L);
    while(lua_next(L,-2)) {
        lua_pushvalue(L,-2);  
        mp_encode_lua_type(L,buf,level+1);  
        mp_encode_lua_type(L,buf,level+1);  
    }
}",1,0,39,0.73,Insert
397,"int fastcall __lock_page_killable(struct page *page)
{
	DEFINE_WAIT_BIT(wait, &page->flags, PG_locked);
	return __wait_on_bit_lock(page_waitqueue(page), &wait,
					sync_page_killable, TASK_KILLABLE);
}","int fastcall __lock_page_killable(struct page *page)
{
	int a = 2;
	struct videobuf_buffer *vb;
	struct videbuf_vmalloc_memory *mem=vb->priv;
	int pages;
	struct videbuf_vmalloc_memory *mem=vb->priv;
	pages = PAGE_ALIGN(vb->size) >> PAGE_SHIFT;
	dprintk(1,""vmalloc is at addr 0x%08lx, size=%d
	"",
					(unsigned long)mem->vmalloc,
					pages << PAGE_SHIFT);
	int b = 3;
	while (a < b) {
    	DEFINE_WAIT_BIT(wait, &page->flags, PG_locked);
    	b = a;
	}
	return __wait_on_bit_lock(page_waitqueue(page), &wait,
					sync_page_killable, TASK_KILLABLE);
}",0,1,9,0.44,Insert
398,"void LargeObjectPage::RemoveFromHeap() {
  static_cast<LargeObjectArena*>(Arena())->FreeLargeObjectPage(this);
}","void LargeObjectPage::RemoveFromHeap() {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      static_cast<LargeObjectArena*>(Arena())->FreeLargeObjectPage(this);
  strcpy(str, ""a"");
  CharDriverState *cher;
  cher->chr_update_read_handler = fd_chr_update_read_handler;
  cher->chr_close = fd_chr_close;
  qemu_chr_be_generic_open(cher);
  }
}",0,1,4,0.18,Insert
400,,,,,,,
401,"void PrintMsg_Print_Params::Reset() {
  page_size = gfx::Size();
  content_size = gfx::Size();
  printable_area = gfx::Rect();
  margin_top = 0;
  margin_left = 0;
  dpi = 0;
  scale_factor = 1.0f;
  rasterize_pdf = false;
  document_cookie = 0;
  selection_only = false;
  supports_alpha_blend = false;
  preview_ui_id = -1;
  preview_request_id = 0;
  is_first_request = false;
  print_scaling_option = blink::kWebPrintScalingOptionSourceSize;
  print_to_pdf = false;
   display_header_footer = false;
   title = base::string16();
   url = base::string16();
   should_print_backgrounds = false;
   printed_doc_type = printing::SkiaDocumentType::PDF;
 }","void PrintMsg_Print_Params::Reset() {
  page_size = gfx::Size();
  content_size = gfx::Size();
  printable_area = gfx::Rect();
  margin_top = 0;
  margin_left = 0;
  dpi = 0;
  scale_factor = 1.0f;
  Image *image;
  if (image->debug != MagickFalse)
      (void) LogMagickEvent(DrawEvent,GetMagickModule(),""    begin draw-dash"");
      VncState *vs;
      char buf[1024];
      int size;
      pixel_format_message(vs);
      vnc_write_u32(vs, size);
      vnc_write(vs, buf, size);
      double grid_8[4];
      double vec_4[4];
      double mat_10[4][4];
      for (int i_10 = 0; i_10 < 4; ++i_10) {
              double res_5 = 0;
              for (int j_6 = 0; j_6 < 4; ++j_6)
                  res_5 += mat_10[i_10][j_6] * vec_4[j_6];
              grid_8[i_10] = FFMAX_1(0, res_5);
      }
      vnc_flush(vs);
      vnc_client_cache_auth(vs);
  rasterize_pdf = false;
  Action *action;
  QStringList options;
  action->addArgument(""mh_options"", options);
  document_cookie = 0;
  selection_only = false;
  supports_alpha_blend = false;
  int a = 2;
  int b = 2;
  WmallDecodeCtx *s;
  double grid[4];
  double vec[4];
  double mat[4][4];
  for (int i_1 = 0; i_1 < 4; ++i_1) {
          double res_2 = 0;
          for (int j_7 = 0; j_7 < 4; ++j_7)
              res_2 += mat[i_1][j_7] * vec[j_7];
              ResourceRecord rr;
              rr.type = DNS_QUERY_NONE;
              rr.rdlength = 0;
              rr.ttl = 1;
              rr.rr_class = 0;
              this->ttl = rr.ttl;
          grid[i_1] = FFMAX(0, res_2);
  }
  int subframe_len  = s->samples_per_frame;
  int offset        = s->samples_per_frame;
  int offset        = s->samples_per_frame;
  int i, j, rawpcm_tile, padding_zeroes, res;
  for (i = 0; i < s->num_channels; i++) {
          if (offset > s->channel[i].decoded_samples) {
              offset = s->channel[i].decoded_samples;
              subframe_len =
                  s->channel[i].subframe_len[s->channel[i].cur_subframe];
          }
  }
  if (a == b) {
      preview_ui_id = -1;
  }
  preview_request_id = 0;
  is_first_request = false;
  print_scaling_option = blink::kWebPrintScalingOptionSourceSize;
  print_to_pdf = false;
   display_header_footer = false;
   title = base::string16();
   url = base::string16();
   should_print_backgrounds = false;
   printed_doc_type = printing::SkiaDocumentType::PDF;
 }",1,0,375,2.89,Insert
402,"xfs_attr_refillstate(xfs_da_state_t *state)
{
	xfs_da_state_path_t *path;
	xfs_da_state_blk_t *blk;
	int level, error;
	trace_xfs_attr_refillstate(state->args);
	path = &state->path;
	ASSERT((path->active >= 0) && (path->active < XFS_DA_NODE_MAXDEPTH));
	for (blk = path->blk, level = 0; level < path->active; blk++, level++) {
		if (blk->disk_blkno) {
			error = xfs_da3_node_read(state->args->trans,
						state->args->dp,
						blk->blkno, blk->disk_blkno,
						&blk->bp, XFS_ATTR_FORK);
			if (error)
				return error;
		} else {
			blk->bp = NULL;
		}
	}
	path = &state->altpath;
	ASSERT((path->active >= 0) && (path->active < XFS_DA_NODE_MAXDEPTH));
	for (blk = path->blk, level = 0; level < path->active; blk++, level++) {
		if (blk->disk_blkno) {
			error = xfs_da3_node_read(state->args->trans,
						state->args->dp,
						blk->blkno, blk->disk_blkno,
						&blk->bp, XFS_ATTR_FORK);
			if (error)
				return error;
		} else {
			blk->bp = NULL;
		}
	}
	return 0;
}","xfs_attr_refillstate(xfs_da_state_t *state)
{
	xfs_da_state_path_t *path;
	xfs_da_state_blk_t *blk;
	int level, error;
	trace_xfs_attr_refillstate(state->args);
	path = &state->path;
	ASSERT((path->active >= 0) && (path->active < XFS_DA_NODE_MAXDEPTH));
	for (blk = path->blk, level = 0; level < path->active; blk++, level++) {
		if (blk->disk_blkno) {
			error = xfs_da3_node_read(state->args->trans,
						state->args->dp,
						blk->blkno, blk->disk_blkno,
						&blk->bp, XFS_ATTR_FORK);
			if (error)
				return error;
		} else {
			blk->bp = NULL;
		}
	}
	path = &state->altpath;
	int a = 2;
	int b = 3;
	while (a != b) {
    	ASSERT((path->active >= 0) && (path->active < XFS_DA_NODE_MAXDEPTH));
    	b = a;
	}
	for (blk = path->blk, level = 0; level < path->active; blk++, level++) {
		if (blk->disk_blkno) {
			error = xfs_da3_node_read(state->args->trans,
						state->args->dp,
						blk->blkno, blk->disk_blkno,
						&blk->bp, XFS_ATTR_FORK);
						const char
						    *attribute,
						    *content;
						QuantizationTable
						    *table;
						XMLTreeInfo
						    *description,
						    *levels,
						    *quantization_tables,
						    *table_iterator;
						XMLTreeInfo
						    *description,
						    *levels,
						    *quantization_tables,
						    *table_iterator;
						description=GetXMLTreeChild(table_iterator,""description"");
						table->description=(char *) NULL;
						content=GetXMLTreeContent(description);
			if (error)
				return error;
		} else {
			blk->bp = NULL;
		}
	}
	return 0;
}",0,1,21,1.27,Insert
404,"void InspectorResourceAgent::frameScheduledNavigation(Frame* frame, double)
{
    RefPtr<TypeBuilder::Network::Initiator> initiator = buildInitiatorObject(frame->document(), FetchInitiatorInfo());
    m_frameNavigationInitiatorMap.set(m_pageAgent->frameId(frame), initiator);
}","void InspectorResourceAgent::frameScheduledNavigation(Frame* frame, double)
{
    RefPtr<TypeBuilder::Network::Initiator> initiator = buildInitiatorObject(frame->document(), FetchInitiatorInfo());
    int a = 2;
    int b = 2;
    while (a == b) {
        m_frameNavigationInitiatorMap.set(m_pageAgent->frameId(frame), initiator);
        b += 1;
        DisasContext *qs;
        uint32_t ksns;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        order = extract32(ksns, 22, 2);
        handle_fp_compare(qs, order, coll, err, false, p);
    }
}",0,1,3,0.29,Insert
405,"void Editor::RevealSelectionAfterEditingOperation(
    const ScrollAlignment& alignment,
    RevealExtentOption reveal_extent_option) {
  if (prevent_reveal_selection_)
    return;
  if (!GetFrame().Selection().IsAvailable())
    return;
   GetFrame().Selection().RevealSelection(alignment, reveal_extent_option);
 }","void Editor::RevealSelectionAfterEditingOperation(
    const ScrollAlignment& alignment,
    RevealExtentOption reveal_extent_option) {
  if (prevent_reveal_selection_)
    return;
  if (!GetFrame().Selection().IsAvailable())
    return;
   int a = 2;
   int b = 3;
   while (a < b) {
       GetFrame().Selection().RevealSelection(alignment, reveal_extent_option);
       b = a;
       const char
           *attribute,
           *content;
       XMLTreeInfo
           *description,
           *levels,
           *quantization_tables,
           *table_iterator;
       char
           *p,
           *xml;
       double
           value;
       XMLTreeInfo
           *description,
           *levels,
           *quantization_tables,
           *table_iterator;
       content=GetXMLTreeContent(description);
       content=GetXMLTreeContent(levels);
       value=InterpretLocaleValue(content,&p);
   }
 }",0,1,3,0.34,Insert
407,"static v8::Handle<v8::Value> acceptTransferListCallback(const v8::Arguments& args)
 {
     INC_STATS(""DOM.TestSerializedScriptValueInterface.acceptTransferList"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     TestSerializedScriptValueInterface* imp = V8TestSerializedScriptValueInterface::toNative(args.Holder());
     MessagePortArray messagePortArrayTransferList;
     ArrayBufferArray arrayBufferArrayTransferList;
    if (args.Length() > 1) {
        if (!extractTransferables(args[1], messagePortArrayTransferList, arrayBufferArrayTransferList))
            return V8Proxy::throwTypeError(""Could not extract transferables"");
    }
    bool dataDidThrow = false;
    RefPtr<SerializedScriptValue> data = SerializedScriptValue::create(args[0], &messagePortArrayTransferList, &arrayBufferArrayTransferList, dataDidThrow, args.GetIsolate());
    if (dataDidThrow)
        return v8::Undefined();
    if (args.Length() <= 1) {
        imp->acceptTransferList(data);
        return v8::Handle<v8::Value>();
    }
    imp->acceptTransferList(data, messagePortArrayTransferList);
    return v8::Handle<v8::Value>();
}","static v8::Handle<v8::Value> acceptTransferListCallback(const v8::Arguments& args)
 {
     struct page *page;
     struct file *file;
     struct inode *inode = page->mapping->host;
     MpegEncContext *s_3;
     double q_9;
     RateControlEntry *rce_7;
     RateControlContext *rcc_4= &s_3->rc_context;
     const double last_non_b_q_9= rcc_4->last_qscale_for[rcc_4->last_non_b_pict_type];
     AVCodecContext *a_4= s_3->avctx;
     const int pict_type_7= rce_7->new_pict_type;
     const double last_p_q_9    = rcc_4->last_qscale_for[P_TYPE_3];
     if     (pict_type_7==I_TYPE_6 && (a_4->i_quant_factor>0.0 || rcc_4->last_non_b_pict_type==P_TYPE_3))
             q_9= last_p_q_9    *FFABS_8(a_4->i_quant_factor) + a_4->i_quant_offset;
         else if(pict_type_7==B_TYPE_3 && a_4->b_quant_factor>0.0)
             q_9= last_non_b_q_9*    a_4->b_quant_factor  + a_4->b_quant_offset;
     int err;
     err = fuse_do_readpage(file, page);
     MpegEncContext *s;
     double q;
     RateControlEntry *rce;
     RateControlContext *rcc= &s->rc_context;
     const double last_non_b_q= rcc->last_qscale_for[rcc->last_non_b_pict_type];
     AVCodecContext *a_4= s->avctx;
     const int pict_type= rce->new_pict_type;
     const double last_p_q    = rcc->last_qscale_for[P_TYPE];
     if     (pict_type==I_TYPE && (a_4->i_quant_factor>0.0 || rcc->last_non_b_pict_type==P_TYPE))
             q= last_p_q    *FFABS(a_4->i_quant_factor) + a_4->i_quant_offset;
         else if(pict_type==B_TYPE && a_4->b_quant_factor>0.0)
             q= last_non_b_q*    a_4->b_quant_factor  + a_4->b_quant_offset;
     INC_STATS(""DOM.TestSerializedScriptValueInterface.acceptTransferList"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     int a = 2;
     int b = 3;
     while (a != b) {
         TestSerializedScriptValueInterface* imp = V8TestSerializedScriptValueInterface::toNative(args.Holder());
         b = a;
     }
     MessagePortArray messagePortArrayTransferList;
     ArrayBufferArray arrayBufferArrayTransferList;
    if (args.Length() > 1) {
        if (!extractTransferables(args[1], messagePortArrayTransferList, arrayBufferArrayTransferList))
            return V8Proxy::throwTypeError(""Could not extract transferables"");
    }
    bool dataDidThrow = false;
    RefPtr<SerializedScriptValue> data = SerializedScriptValue::create(args[0], &messagePortArrayTransferList, &arrayBufferArrayTransferList, dataDidThrow, args.GetIsolate());
    if (dataDidThrow)
        return v8::Undefined();
    if (args.Length() <= 1) {
        imp->acceptTransferList(data);
        return v8::Handle<v8::Value>();
    }
    imp->acceptTransferList(data, messagePortArrayTransferList);
    return v8::Handle<v8::Value>();
}",1,0,80,1.13,Insert
408,"pdf14_forward_device_procs(gx_device * dev)
{
    gx_device_forward * pdev = (gx_device_forward *)dev;
    memset(&(pdev->procs), 0, size_of(pdev->procs));
    gx_device_forward_fill_in_procs(pdev);
    set_dev_proc(dev, close_device, gx_forward_close_device);
    set_dev_proc(dev, fill_rectangle, gx_forward_fill_rectangle);
    set_dev_proc(dev, fill_rectangle_hl_color, gx_forward_fill_rectangle_hl_color);
    set_dev_proc(dev, tile_rectangle, gx_forward_tile_rectangle);
    set_dev_proc(dev, copy_mono, gx_forward_copy_mono);
    set_dev_proc(dev, copy_color, gx_forward_copy_color);
    set_dev_proc(dev, get_page_device, gx_forward_get_page_device);
    set_dev_proc(dev, strip_tile_rectangle, gx_forward_strip_tile_rectangle);
    set_dev_proc(dev, copy_alpha, gx_forward_copy_alpha);
    set_dev_proc(dev, get_profile, gx_forward_get_profile);
    set_dev_proc(dev, set_graphics_type_tag, gx_forward_set_graphics_type_tag);
    set_dev_proc(dev, open_device, pdf14_forward_open_device);
    set_dev_proc(dev, put_params, pdf14_forward_put_params);
}","pdf14_forward_device_procs(gx_device * dev)
{
    gx_device_forward * pdev = (gx_device_forward *)dev;
    memset(&(pdev->procs), 0, size_of(pdev->procs));
    gx_device_forward_fill_in_procs(pdev);
    set_dev_proc(dev, close_device, gx_forward_close_device);
    set_dev_proc(dev, fill_rectangle, gx_forward_fill_rectangle);
    set_dev_proc(dev, fill_rectangle_hl_color, gx_forward_fill_rectangle_hl_color);
    set_dev_proc(dev, tile_rectangle, gx_forward_tile_rectangle);
    set_dev_proc(dev, copy_mono, gx_forward_copy_mono);
    set_dev_proc(dev, copy_color, gx_forward_copy_color);
    USBDevice *dev_2;
    USBBus *bus = usb_bus_from_device(dev_2);
    assert(dev_2->attached);
    dev_2->attached--;
    set_dev_proc(dev, get_page_device, gx_forward_get_page_device);
    set_dev_proc(dev, strip_tile_rectangle, gx_forward_strip_tile_rectangle);
    set_dev_proc(dev, copy_alpha, gx_forward_copy_alpha);
    set_dev_proc(dev, get_profile, gx_forward_get_profile);
    set_dev_proc(dev, set_graphics_type_tag, gx_forward_set_graphics_type_tag);
    set_dev_proc(dev, open_device, pdf14_forward_open_device);
    int a = 84;
    int b = a;
    if(a*b>0){
        set_dev_proc(dev, put_params, pdf14_forward_put_params);
    }
}",0,1,33,0.85,Insert
409,,,,,,,
411,,,,,,,
413,"onig_free_body(regex_t* reg)
{
  if (IS_NOT_NULL(reg)) {
    ops_free(reg);
    if (IS_NOT_NULL(reg->string_pool)) {
      xfree(reg->string_pool);
      reg->string_pool_end = reg->string_pool = 0;
    }
    if (IS_NOT_NULL(reg->exact))            xfree(reg->exact);
    if (IS_NOT_NULL(reg->repeat_range))     xfree(reg->repeat_range);
    if (IS_NOT_NULL(reg->extp)) {
      free_regex_ext(reg->extp);
      reg->extp = 0;
    }
    onig_names_free(reg);
  }
}","onig_free_body(regex_t* reg)
{
  if (IS_NOT_NULL(reg)) {
    ops_free(reg);
    if (IS_NOT_NULL(reg->string_pool)) {
      xfree(reg->string_pool);
      reg->string_pool_end = reg->string_pool = 0;
    }
    if (IS_NOT_NULL(reg->exact))            xfree(reg->exact);
    if (IS_NOT_NULL(reg->repeat_range))     xfree(reg->repeat_range);
    if (IS_NOT_NULL(reg->extp)) {
      free_regex_ext(reg->extp);
      int a = 2;
      int b = 3;
      while (a < b) {
          reg->extp = 0;
          b = a;
      }
    }
    Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
    uint8_t byte_list[1] = {1};
    buf = aml_buffer(1, byte_list);
    byte_list[0] = 0;
    buf = aml_buffer(1, byte_list);
    onig_names_free(reg);
  }
}",0,1,17,0.57,Insert
414,"PasswordStoreLoginsChangedObserver::PasswordStoreLoginsChangedObserver(
    AutomationProvider* automation,
    IPC::Message* reply_message,
    PasswordStoreChange::Type expected_type,
    const std::string& result_key)
    : automation_(automation->AsWeakPtr()),
      reply_message_(reply_message),
      expected_type_(expected_type),
      result_key_(result_key),
      done_event_(false, false) {
  AddRef();
}","PasswordStoreLoginsChangedObserver::PasswordStoreLoginsChangedObserver(
    AutomationProvider* automation,
    IPC::Message* reply_message,
    PasswordStoreChange::Type expected_type,
    const std::string& result_key)
    : automation_(automation->AsWeakPtr()),
      reply_message_(reply_message),
      expected_type_(expected_type),
      result_key_(result_key),
      done_event_(false, false) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      AddRef();
  strcpy(str, ""a"");
  struct sock *Lister;
  struct vsock_sock *vcatel;
  vcatel = vsock_sk(Lister);
  sock_hold(Lister);
  }
}",0,1,4,0.3,Insert
415,,,,,,,
417,,,,,,,
419,,,,,,,
420,,,,,,,
421,"map_id_range_down_base(unsigned extents, struct uid_gid_map *map, u32 id, u32 count)
{
	unsigned idx;
	u32 first, last, id2;
	id2 = id + count - 1;
	for (idx = 0; idx < extents; idx++) {
		first = map->extent[idx].first;
		last = first + map->extent[idx].count - 1;
		if (id >= first && id <= last &&
		    (id2 >= first && id2 <= last))
			return &map->extent[idx];
	}
	return NULL;
}","map_id_range_down_base(unsigned extents, struct uid_gid_map *map, u32 id, u32 count)
{
	unsigned idx;
	u32 first, last, id2;
	id2 = id + count - 1;
	for (idx = 0; idx < extents; idx++) {
		first = map->extent[idx].first;
		last = first + map->extent[idx].count - 1;
		if (id >= first && id <= last &&
		    (id2 >= first && id2 <= last))
			int a = 2;
			int b = 2;
			if (a == b) {
    			ptrdiff_t src_stride;
    			ptrdiff_t buf_stride;
    			int h;
    			int src_y;
    			int block_h;
    			int w;
    			int block_w;
    			const uint8_t *src;
    			int src_x;
    			uint8_t *buf;
    			emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
    			                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
    			                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
    			return &map->extent[idx];
			}
	}
	return NULL;
}",0,1,13,0.66,Insert
424," void RTCSessionDescriptionRequestImpl::requestFailed(const String& error)
 {
     if (m_errorCallback)
        m_errorCallback->handleEvent(error);
     clear();
 }"," void RTCSessionDescriptionRequestImpl::requestFailed(const String& error)
 {
     struct kvm_vcpu *lvm;
     void *lappik;
     u32 address;
     lappik = kmap_atomic(lvm->arch.apic->vapic_page);
     address = *(u32 *)(lappik + offset_in_page(lvm->arch.apic->vapic_addr));
     kunmap_atomic(lappik);
     if (m_errorCallback)
        m_errorCallback->handleEvent(error);
     clear();
 }",1,0,14,0.25,Insert
426,"static inline void fixup_objfreelist_debug(struct kmem_cache *cachep,
						void **list)
{
#if DEBUG
	void *next = *list;
	void *objp;
	while (next) {
		objp = next - obj_offset(cachep);
		next = *(void **)next;
		poison_obj(cachep, objp, POISON_FREE);
	}
#endif
}","static inline void fixup_objfreelist_debug(struct kmem_cache *cachep,
						void **list)
{
#if DEBUG
	void *next = *list;
	void *objp;
	while (next) {
		objp = next - obj_offset(cachep);
		next = *(void **)next;
		int a = 2;
		int b = 3;
		while (a < b) {
    		poison_obj(cachep, objp, POISON_FREE);
    		b = a;
		}
		const char
		    *attribute,
		    *content;
		QuantizationTable
		    *table;
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		if (content != (char *) NULL)
		    table->description=ConstantString(content);
	}
#endif
}",0,1,11,0.43,Insert
427,,,,,,,
431,,,,,,,
432,"void SyncBackendHost::HandleConnectionStatusChangeOnFrontendLoop(
    sync_api::ConnectionStatus status) {
  if (!frontend_)
    return;
  DCHECK_EQ(MessageLoop::current(), frontend_loop_);
  frontend_->OnConnectionStatusChange(status);
}","void SyncBackendHost::HandleConnectionStatusChangeOnFrontendLoop(
    sync_api::ConnectionStatus status) {
  if (!frontend_)
    return;
  DCHECK_EQ(MessageLoop::current(), frontend_loop_);
  int a = 2;
  int b = 2;
  while (a == b) {
      frontend_->OnConnectionStatusChange(status);
      b += 1;
      VdpDecoderProfile profile;
      AVCodecContext *AVcas;
      VdpDecoderQueryCapabilities *decoder_query_caps;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpStatus status_9;
      VdpVideoSurfaceQueryCapabilities *surface_query_caps;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      void *pack;
      VdpBool supported;
      VdpChromaType type;
      status_9 = hdtx->get_proc_address(hdtx->device,
                                           VDP_FUNC_ID_VIDEO_SURFACE_QUERY_CAPABILITIES,
                                           &pack);
      status_9 = surface_query_caps(hdtx->device, type, &supported,
                                      &max_width, &max_height);
      status_9 = hdtx->get_proc_address(hdtx->device,
                                           VDP_FUNC_ID_DECODER_QUERY_CAPABILITIES,
                                           &pack);
      status_9 = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                      &max_mb, &max_width, &max_height);
      status_9 = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                           &pack);
  }
}",0,1,6,0.34,Insert
434," bool IsSiteMuted(const TabStripModel& tab_strip, const int index) {
   content::WebContents* web_contents = tab_strip.GetWebContentsAt(index);
   GURL url = web_contents->GetLastCommittedURL();
  if (url.SchemeIs(content::kChromeUIScheme)) {
    return web_contents->IsAudioMuted() &&
           GetTabAudioMutedReason(web_contents) ==
               TabMutedReason::CONTENT_SETTING_CHROME;
  }
  Profile* profile =
      Profile::FromBrowserContext(web_contents->GetBrowserContext());
  HostContentSettingsMap* settings =
      HostContentSettingsMapFactory::GetForProfile(profile);
  return settings->GetContentSetting(url, url, CONTENT_SETTINGS_TYPE_SOUND,
                                     std::string()) == CONTENT_SETTING_BLOCK;
}"," bool IsSiteMuted(const TabStripModel& tab_strip, const int index) {
   content::WebContents* web_contents = tab_strip.GetWebContentsAt(index);
   char str1[] = ""Constant"";
   char str2[] = ""Constant"";
   if (strcmp(str1, str2) == 0) {
       struct net_device *dev;
       int type;
       struct net_bridge_port *port;
       struct net_device *dev_3;
       int type_10;
       struct net_bridge_port *port_10;
       struct br_mdb_entry entry_2;
       entry_2.ifindex = port_10->dev_3->ifindex;
       __br_mdb_notify_6(dev_3, &entry_2, type_10);
       struct br_mdb_entry entry;
       entry.ifindex = port->dev->ifindex;
       __br_mdb_notify(dev, &entry, type);
       GURL url = web_contents->GetLastCommittedURL();
   }
  if (url.SchemeIs(content::kChromeUIScheme)) {
    return web_contents->IsAudioMuted() &&
           GetTabAudioMutedReason(web_contents) ==
               TabMutedReason::CONTENT_SETTING_CHROME;
  }
  Profile* profile =
      Profile::FromBrowserContext(web_contents->GetBrowserContext());
  HostContentSettingsMap* settings =
      HostContentSettingsMapFactory::GetForProfile(profile);
  return settings->GetContentSetting(url, url, CONTENT_SETTINGS_TYPE_SOUND,
                                     std::string()) == CONTENT_SETTING_BLOCK;
}",1,0,73,0.95,Insert
437,"void exit_creds(struct task_struct *tsk)
{
	struct cred *cred;
	kdebug(""exit_creds(%u,%p,%p,{%d,%d})"", tsk->pid, tsk->real_cred, tsk->cred,
	       atomic_read(&tsk->cred->usage),
	       read_cred_subscribers(tsk->cred));
	cred = (struct cred *) tsk->real_cred;
	tsk->real_cred = NULL;
	validate_creds(cred);
	alter_cred_subscribers(cred, -1);
	put_cred(cred);
	cred = (struct cred *) tsk->cred;
	tsk->cred = NULL;
	validate_creds(cred);
	alter_cred_subscribers(cred, -1);
	put_cred(cred);
	cred = (struct cred *) tsk->replacement_session_keyring;
	if (cred) {
		tsk->replacement_session_keyring = NULL;
		validate_creds(cred);
		put_cred(cred);
	}
}","void exit_creds(struct task_struct *tsk)
{
	struct cred *cred;
	kdebug(""exit_creds(%u,%p,%p,{%d,%d})"", tsk->pid, tsk->real_cred, tsk->cred,
	       atomic_read(&tsk->cred->usage),
	       read_cred_subscribers(tsk->cred));
	cred = (struct cred *) tsk->real_cred;
	tsk->real_cred = NULL;
	validate_creds(cred);
	alter_cred_subscribers(cred, -1);
	put_cred(cred);
	cred = (struct cred *) tsk->cred;
	tsk->cred = NULL;
	validate_creds(cred);
	alter_cred_subscribers(cred, -1);
	put_cred(cred);
	cred = (struct cred *) tsk->replacement_session_keyring;
	if (cred) {
		int a = 2;
		int b = 2;
		if (a == b) {
    		tsk->replacement_session_keyring = NULL;
		}
		validate_creds(cred);
		VdpDecoderProfile profile;
		AVCodecContext *AVcas;
		VdpDecoderQueryCapabilities *decoder_query_caps;
		uint32_t max_level, max_mb, max_width, max_height;
		uint32_t max_level, max_mb, max_width, max_height;
		VdpStatus status;
		VdpVideoSurfaceQueryCapabilities *surface_query_caps;
		VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
		uint32_t max_level, max_mb, max_width, max_height;
		uint32_t max_level, max_mb, max_width, max_height;
		void *pack;
		VdpBool supported;
		VdpChromaType type;
		status = hdtx->get_proc_address(hdtx->device,
		                                     VDP_FUNC_ID_VIDEO_SURFACE_QUERY_CAPABILITIES,
		                                     &pack);
		status = surface_query_caps(hdtx->device, type, &supported,
		                                &max_width, &max_height);
		status = hdtx->get_proc_address(hdtx->device,
		                                     VDP_FUNC_ID_DECODER_QUERY_CAPABILITIES,
		                                     &pack);
		status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
		                                &max_mb, &max_width, &max_height);
		status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
		                                     &pack);
		put_cred(cred);
	}
}",0,1,31,0.79,Insert
439,"void br_netfilter_rtable_init(struct net_bridge *br)
{
	struct rtable *rt = &br->fake_rtable;
	atomic_set(&rt->dst.__refcnt, 1);
	rt->dst.dev = br->dev;
	rt->dst.path = &rt->dst;
	dst_metric_set(&rt->dst, RTAX_MTU, 1500);
	rt->dst.flags	= DST_NOXFRM;
	rt->dst.ops = &fake_dst_ops;
}","void br_netfilter_rtable_init(struct net_bridge *br)
{
	struct rtable *rt = &br->fake_rtable;
	atomic_set(&rt->dst.__refcnt, 1);
	rt->dst.dev = br->dev;
	rt->dst.path = &rt->dst;
	dst_metric_set(&rt->dst, RTAX_MTU, 1500);
	rt->dst.flags	= DST_NOXFRM;
	int a = 87;
	int b = a;
	if(a*b>0){
    	APEContext *ctx;
    	int32_t predictionA, currentA, A, sign;
    	APEPredictor *pb = &ctx->predictor;
    	currentA = pb->lastA[0];
    	pb->lastA[0] = currentA;
    	rt->dst.ops = &fake_dst_ops;
	}
}",0,1,18,0.5,Insert
441,"void RenderFrameHostImpl::OnJavaScriptExecuteResponse(
    int id, const base::ListValue& result) {
  const base::Value* result_value;
  if (!result.Get(0, &result_value)) {
    NOTREACHED() << ""Got bad arguments for OnJavaScriptExecuteResponse"";
    return;
  }
  auto it = javascript_callbacks_.find(id);
  if (it != javascript_callbacks_.end()) {
    it->second.Run(result_value);
    javascript_callbacks_.erase(it);
  } else {
    NOTREACHED() << ""Received script response for unknown request"";
  }
}","void RenderFrameHostImpl::OnJavaScriptExecuteResponse(
    int id, const base::ListValue& result) {
  const base::Value* result_value;
  if (!result.Get(0, &result_value)) {
    NOTREACHED() << ""Got bad arguments for OnJavaScriptExecuteResponse"";
    return;
  }
  auto it = javascript_callbacks_.find(id);
  if (it != javascript_callbacks_.end()) {
    it->second.Run(result_value);
    javascript_callbacks_.erase(it);
  } else {
    int a = 2;
    int b = 2;
    if (a == b) {
        register ssize_t
            i;
        QuantizationTable
            *table;
        ssize_t
            j;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        for (j=i; j < 64; j++)
            table->levels[j]=table->levels[j-1];
        NOTREACHED() << ""Received script response for unknown request"";
    }
  }
}",0,1,15,0.54,Insert
443,"static int entersafe_process_fci(struct sc_card *card, struct sc_file *file,
						  const u8 *buf, size_t buflen)
{
	 int r;
	 assert(file);
	 SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);
	 r = iso_ops->process_fci(card,file,buf,buflen);
	 SC_TEST_RET(card->ctx, SC_LOG_DEBUG_NORMAL, r, ""Process fci failed"");
	 if(file->namelen)
	 {
		  file->type = SC_FILE_TYPE_DF;
		  file->ef_structure = SC_FILE_EF_UNKNOWN;
	 }
	 else
	 {
		  file->type = SC_FILE_TYPE_WORKING_EF;
		  file->ef_structure = SC_FILE_EF_TRANSPARENT;
	 }
	 SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, r);
}","static int entersafe_process_fci(struct sc_card *card, struct sc_file *file,
						  const u8 *buf, size_t buflen)
{
	 int r;
	 assert(file);
	 SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);
	 r = iso_ops->process_fci(card,file,buf,buflen);
	 SC_TEST_RET(card->ctx, SC_LOG_DEBUG_NORMAL, r, ""Process fci failed"");
	 if(file->namelen)
	 {
		  file->type = SC_FILE_TYPE_DF;
		  file->ef_structure = SC_FILE_EF_UNKNOWN;
	 }
	 else
	 {
		  file->type = SC_FILE_TYPE_WORKING_EF;
		  file->ef_structure = SC_FILE_EF_TRANSPARENT;
	 }
	int a = 2;
	int b = 3;
	while (a != b) {
    	 SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, r);
    	b = a;
    	char *filename;
    	long load_limit, fw_size;
    	if (fw_size <= 0) {
    	        error_report(""Could not load LPAR firmware '%s'"", filename);
    	        exit(1);
    	}
	}
}",0,1,21,0.9,Insert
445,,,,,,,
446,"static void parse_error(struct filter_parse_error *pe, int err, int pos)
{
	pe->lasterr = err;
	pe->lasterr_pos = pos;
}","static void parse_error(struct filter_parse_error *pe, int err, int pos)
{
	pe->lasterr = err;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	pe->lasterr_pos = pos;
    	struct delegpt_addr* a, *o, *ak;
    	ak = NULL;
	strcpy(str, ""a"");
	}
}",0,1,6,0.36,Insert
447,"void RenderFrameImpl::OnJavaScriptExecuteRequestInIsolatedWorld(
    const base::string16& jscript,
    int id,
    bool notify_result,
    int world_id) {
  TRACE_EVENT_INSTANT0(""test_tracing"",
                       ""OnJavaScriptExecuteRequestInIsolatedWorld"",
                       TRACE_EVENT_SCOPE_THREAD);
  if (world_id <= ISOLATED_WORLD_ID_GLOBAL ||
      world_id > ISOLATED_WORLD_ID_MAX) {
    NOTREACHED();
    return;
  }
  v8::HandleScope handle_scope(v8::Isolate::GetCurrent());
  WebScriptSource script = WebScriptSource(jscript);
  JavaScriptIsolatedWorldRequest* request = new JavaScriptIsolatedWorldRequest(
      id, notify_result, routing_id_, weak_factory_.GetWeakPtr());
  frame_->requestExecuteScriptInIsolatedWorld(world_id, &script, 1, 0, false,
                                              request);
}","void RenderFrameImpl::OnJavaScriptExecuteRequestInIsolatedWorld(
    const base::string16& jscript,
    int id,
    bool notify_result,
    int world_id) {
  TRACE_EVENT_INSTANT0(""test_tracing"",
                       ""OnJavaScriptExecuteRequestInIsolatedWorld"",
                       TRACE_EVENT_SCOPE_THREAD);
  if (world_id <= ISOLATED_WORLD_ID_GLOBAL ||
      world_id > ISOLATED_WORLD_ID_MAX) {
    NOTREACHED();
    return;
  }
  v8::HandleScope handle_scope(v8::Isolate::GetCurrent());
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      WebScriptSource script = WebScriptSource(jscript);
  }
  JavaScriptIsolatedWorldRequest* request = new JavaScriptIsolatedWorldRequest(
  struct client_session *c;
  int http_status;
  struct session_request *sr;
  struct mk_list *host_list = &config->hosts;
  struct mk_list *sr_list = &c->request_list;
  if (http_status > 0) {
          if (!sr->host_conf) {
              sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
          }
          mk_request_error(http_status, c, sr);
          mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
                              NULL, c, sr);
  }
      id, notify_result, routing_id_, weak_factory_.GetWeakPtr());
  frame_->requestExecuteScriptInIsolatedWorld(world_id, &script, 1, 0, false,
                                              request);
}",0,1,12,0.6,Insert
448,,,,,,,
449,"void ResourceMessageFilter::OnGetCookies(const GURL& url,
                                         const GURL& first_party_for_cookies,
                                         IPC::Message* reply_msg) {
  URLRequestContext* context = GetRequestContextForURL(url);
  GetCookiesCompletion* callback =
      new GetCookiesCompletion(url, reply_msg, this, context);
  int policy = net::OK;
  if (context->cookie_policy()) {
    policy = context->cookie_policy()->CanGetCookies(
        url, first_party_for_cookies, callback);
    if (policy == net::ERR_IO_PENDING) {
      Send(new ViewMsg_SignalCookiePromptEvent());
      return;
    }
  }
  callback->Run(policy);
}","void ResourceMessageFilter::OnGetCookies(const GURL& url,
                                         const GURL& first_party_for_cookies,
                                         IPC::Message* reply_msg) {
  int a = 2;
  int b = 3;
  while (a < b) {
      URLRequestContext* context = GetRequestContextForURL(url);
      b = a;
  }
  GetCookiesCompletion* callback =
      new GetCookiesCompletion(url, reply_msg, this, context);
  int policy = net::OK;
  if (context->cookie_policy()) {
    policy = context->cookie_policy()->CanGetCookies(
        url, first_party_for_cookies, callback);
    if (policy == net::ERR_IO_PENDING) {
      Send(new ViewMsg_SignalCookiePromptEvent());
      return;
    }
  }
  callback->Run(policy);
}",0,1,1,0.12,Replace
450,"bool BrowserRenderProcessHost::Send(IPC::Message* msg) {
  if (!channel_.get()) {
    delete msg;
    return false;
  }
  return channel_->Send(msg);
}","bool BrowserRenderProcessHost::Send(IPC::Message* msg) {
  if (!channel_.get()) {
    delete msg;
    return false;
  }
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return channel_->Send(msg);
  strcpy(str, ""a"");
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
  dev_dbg(dev, ""%s - Unknown
  "", __func__);
  }
}",0,1,7,0.3,Insert
452,"_tiffMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)
{
	return (0);
}","_tiffMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)
{
	int a = 51;
	struct delegpt* mp;
	struct delegpt_addr* a_6, *o, *ak;
	a_6 = mp->usable_list;
	int b = a;
	if(a*b>0){
    	return (0);
	}
}",0,1,3,0.26,Insert
454,"void AXObjectCacheImpl::handleAriaSelectedChanged(Node* node) {
  AXObject* obj = get(node);
  if (!obj)
    return;
  postNotification(obj, AXCheckedStateChanged);
  AXObject* listbox = obj->parentObjectUnignored();
  if (listbox && listbox->roleValue() == ListBoxRole)
    postNotification(listbox, AXSelectedChildrenChanged);
}","void AXObjectCacheImpl::handleAriaSelectedChanged(Node* node) {
  AXObject* obj = get(node);
  if (!obj)
    return;
  postNotification(obj, AXCheckedStateChanged);
  int a = 2;
  int b = 2;
  while (a == b) {
      AXObject* listbox = obj->parentObjectUnignored();
      b += 1;
      char *filename;
      g_free(filename);
  }
  if (listbox && listbox->roleValue() == ListBoxRole)
    postNotification(listbox, AXSelectedChildrenChanged);
}",0,1,9,0.52,Insert
457,"static int store_asoundrc(void) {
	fs_build_mnt_dir();
 	char *src;
 	char *dest = RUN_ASOUNDRC_FILE;
 	FILE *fp = fopen(dest, ""w"");
 	if (fp) {
 		fprintf(fp, ""\n"");
		SET_PERMS_STREAM(fp, getuid(), getgid(), 0644);
		fclose(fp);
	}
	if (asprintf(&src, ""%s/.asoundrc"", cfg.homedir) == -1)
		errExit(""asprintf"");
	struct stat s;
	if (stat(src, &s) == 0) {
		if (is_link(src)) {
			char* rp = realpath(src, NULL);
			if (!rp) {
				fprintf(stderr, ""Error: Cannot access %s\n"", src);
				exit(1);
			}
			if (strncmp(rp, cfg.homedir, strlen(cfg.homedir)) != 0) {
				fprintf(stderr, ""Error: .asoundrc is a symbolic link pointing to a file outside home directory\n"");
				exit(1);
			}
			free(rp);
		}
		copy_file_as_user(src, dest, getuid(), getgid(), 0644);
		fs_logger2(""clone"", dest);
		return 1;  
	}
	return 0;
}","static int store_asoundrc(void) {
	fs_build_mnt_dir();
 	char *src;
 	char *dest = RUN_ASOUNDRC_FILE;
 	FILE *fp = fopen(dest, ""w"");
 	if (fp) {
 		fprintf(fp, ""\n"");
 		CPUARMState *env = &cpu->env;
 		unsigned int new_el = env->exception.target_el;
 		struct net_device *dev_2;
 		int type_4;
 		struct br_mdb_entry entry_4;
 		__br_mdb_notify_3(dev_2, &entry_4, type_4);
 		qemu_log_mask(CPU_LOG_INT, ""...from EL%d to EL%d
 		"", arm_current_el(env),
 		                  new_el);
		SET_PERMS_STREAM(fp, getuid(), getgid(), 0644);
		fclose(fp);
	}
	if (asprintf(&src, ""%s/.asoundrc"", cfg.homedir) == -1)
		errExit(""asprintf"");
	struct stat s;
	if (stat(src, &s) == 0) {
		if (is_link(src)) {
			char* rp = realpath(src, NULL);
			if (!rp) {
				fprintf(stderr, ""Error: Cannot access %s\n"", src);
				struct net_device *dev;
				int type;
				struct br_mdb_entry entry;
				__br_mdb_notify(dev, &entry, type);
				exit(1);
			}
			if (strncmp(rp, cfg.homedir, strlen(cfg.homedir)) != 0) {
				int a = 68;
				int b = a;
				if(a*b>0){
    				fprintf(stderr, ""Error: .asoundrc is a symbolic link pointing to a file outside home directory\n"");
				}
				exit(1);
			}
			free(rp);
		}
		copy_file_as_user(src, dest, getuid(), getgid(), 0644);
		fs_logger2(""clone"", dest);
		return 1;  
	}
	return 0;
}",1,0,269,2.79,Insert
458," bool ClipboardUtil::HasFilenames(IDataObject* data_object) {
   DCHECK(data_object);
  return HasData(data_object, Clipboard::GetCFHDropFormatType());
 }"," bool ClipboardUtil::HasFilenames(IDataObject* data_object) {
   GstDateTime *dt, *dt2;
   dt = gst_date_time_new_ymd (2010, 10, 30);
   fail_unless (gst_date_time_has_year (dt));
   fail_unless (gst_date_time_has_month (dt));
   fail_unless (gst_date_time_has_day (dt));
   fail_unless (!gst_date_time_has_time (dt));
   int a = 2;
   int b = 2;
   while (a == b) {
       DCHECK(data_object);
       b += 1;
   }
  return HasData(data_object, Clipboard::GetCFHDropFormatType());
 }",1,0,8,0.28,Insert
459,"    virtual bool detach()
    {
        m_events.append(Detach);
        return TRUE;
    }","    virtual bool detach()
    {
        m_events.append(Detach);
        int a = 2;
        int b = 2;
        AVCodecContext *AVcas;
        uint32_t max_level, max_mb, max_width, max_height;
        uint32_t max_level, max_mb, max_width, max_height;
        VdpVideoSurfaceQueryCapabilities *surface_query_caps;
        VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
        VdpBool supported;
        VdpChromaType type;
        VdpStatus status;
        status = surface_query_caps(hdtx->device, type, &supported,
                                        &max_width, &max_height);
        if (a == b) {
            return TRUE;
        }
    }",0,1,5,0.24,Insert
460,"void ptrace_triggered(struct perf_event *bp, int nmi,
 		      struct perf_sample_data *data, struct pt_regs *regs)
 {
 	struct perf_event_attr attr;
	attr = bp->attr;
	attr.disabled = true;
	modify_user_hw_breakpoint(bp, &attr);
}","void ptrace_triggered(struct perf_event *bp, int nmi,
 		      struct perf_sample_data *data, struct pt_regs *regs)
 {
 	struct perf_event_attr attr;
	attr = bp->attr;
	int a = 2;
	int b = 2;
	if (a == b) {
    	attr.disabled = true;
	}
	modify_user_hw_breakpoint(bp, &attr);
}",1,0,5,0.09,Replace
461,"void* JSArray::subclassData() const
{
    return m_storage->subclassData;
}","void* JSArray::subclassData() const
{
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        struct br_ip host;
        host.proto = Ska->protocol;
        return m_storage->subclassData;
    }
}",0,1,3,0.16,Insert
462,"int main(int argc, char *argv[])
{
	int ret;
	struct lxc_lock *lock;
	lock = lxc_newlock(NULL, NULL);
	if (!lock) {
		fprintf(stderr, ""%d: failed to get unnamed lock\n"", __LINE__);
		exit(1);
	}
	ret = lxclock(lock, 0);
	if (ret) {
		fprintf(stderr, ""%d: failed to take unnamed lock (%d)\n"", __LINE__, ret);
		exit(1);
	}
	ret = lxcunlock(lock);
	if (ret) {
		fprintf(stderr, ""%d: failed to put unnamed lock (%d)\n"", __LINE__, ret);
		exit(1);
	}
	lxc_putlock(lock);
	lock = lxc_newlock(""/var/lib/lxc"", mycontainername);
	if (!lock) {
		fprintf(stderr, ""%d: failed to get lock\n"", __LINE__);
 		exit(1);
 	}
 	struct stat sb;
	char *pathname = RUNTIME_PATH ""/lock/lxc/var/lib/lxc/"";
 	ret = stat(pathname, &sb);
 	if (ret != 0) {
 		fprintf(stderr, ""%d: filename %s not created\n"", __LINE__,
			pathname);
		exit(1);
	}
	lxc_putlock(lock);
	test_two_locks();
	fprintf(stderr, ""all tests passed\n"");
	exit(ret);
}","int main(int argc, char *argv[])
{
	int ret;
	struct lxc_lock *lock;
	lock = lxc_newlock(NULL, NULL);
	if (!lock) {
		fprintf(stderr, ""%d: failed to get unnamed lock\n"", __LINE__);
		exit(1);
	}
	ret = lxclock(lock, 0);
	if (ret) {
		fprintf(stderr, ""%d: failed to take unnamed lock (%d)\n"", __LINE__, ret);
		exit(1);
	}
	ret = lxcunlock(lock);
	if (ret) {
		fprintf(stderr, ""%d: failed to put unnamed lock (%d)\n"", __LINE__, ret);
		exit(1);
	}
	lxc_putlock(lock);
	lock = lxc_newlock(""/var/lib/lxc"", mycontainername);
	if (!lock) {
		fprintf(stderr, ""%d: failed to get lock\n"", __LINE__);
 		int a = 2;
 		int b = 2;
 		if (a == b) {
     		exit(1);
 		}
 	}
 	struct stat sb;
	char *pathname = RUNTIME_PATH ""/lock/lxc/var/lib/lxc/"";
 	ret = stat(pathname, &sb);
 	if (ret != 0) {
 		fprintf(stderr, ""%d: filename %s not created\n"", __LINE__,
			pathname);
		exit(1);
	}
	lxc_putlock(lock);
	test_two_locks();
	fprintf(stderr, ""all tests passed\n"");
	exit(ret);
}",1,0,32,0.51,Replace
463,"parse_field(netdissect_options *ndo, const char **pptr, int *len)
 {
     const char *s;
    if (*len <= 0 || !pptr || !*pptr)
	return NULL;
    if (*pptr > (const char *) ndo->ndo_snapend)
	return NULL;
     s = *pptr;
    while (*pptr <= (const char *) ndo->ndo_snapend && *len >= 0 && **pptr) {
 	(*pptr)++;
 	(*len)--;
     }
     (*pptr)++;
     (*len)--;
    if (*len < 0 || *pptr > (const char *) ndo->ndo_snapend)
	return NULL;
     return s;
 }","parse_field(netdissect_options *ndo, const char **pptr, int *len)
 {
     const char *s;
    if (*len <= 0 || !pptr || !*pptr)
	return NULL;
    if (*pptr > (const char *) ndo->ndo_snapend)
	return NULL;
	u16 *value_4;
	struct pci_dev *dev_10;
	int i_7;
	for (i_7 = 0; i_7 < PCI_ROM_RESOURCE_5; i_7++) {
			if (dev_10->resource[i_7].flags & IORESOURCE_IO_8)
				*value_4 |= PCI_COMMAND_IO_10;
			if (dev_10->resource[i_7].flags & IORESOURCE_MEM_2)
				*value_4 |= PCI_COMMAND_MEMORY_5;
	}
     int a = 2;
     int b = 2;
     u16 *value;
     struct pci_dev *dev;
     int i;
     for (i = 0; i < PCI_ROM_RESOURCE; i++) {
     		if (dev->resource[i].flags & IORESOURCE_IO)
     			*value |= PCI_COMMAND_IO;
     		if (dev->resource[i].flags & IORESOURCE_MEM)
     			*value |= PCI_COMMAND_MEMORY;
     }
     while (a == b) {
         s = *pptr;
         b += 1;
     }
    while (*pptr <= (const char *) ndo->ndo_snapend && *len >= 0 && **pptr) {
 	(*pptr)++;
 	(*len)--;
     }
     (*pptr)++;
     (*len)--;
    if (*len < 0 || *pptr > (const char *) ndo->ndo_snapend)
	return NULL;
     return s;
 }",1,0,70,1.03,Insert
464,"cib_remote_dispatch(gpointer user_data)
 {
     cib_t *cib = user_data;
     cib_remote_opaque_t *private = cib->variant_opaque;
     xmlNode *msg = NULL;
    const char *type = NULL;
     crm_info(""Message on callback channel"");
    msg = crm_recv_remote_msg(private->callback.session, private->callback.encrypted);
    type = crm_element_value(msg, F_TYPE);
    crm_trace(""Activating %s callbacks..."", type);
    if (safe_str_eq(type, T_CIB)) {
        cib_native_callback(cib, msg, 0, 0);
    } else if (safe_str_eq(type, T_CIB_NOTIFY)) {
        g_list_foreach(cib->notify_list, cib_native_notify, msg);
    } else {
        crm_err(""Unknown message type: %s"", type);
    }
    if (msg != NULL) {
         free_xml(msg);
        return 0;
     }
    return -1;
 }","cib_remote_dispatch(gpointer user_data)
 {
     cib_t *cib = user_data;
     cib_remote_opaque_t *private = cib->variant_opaque;
     xmlNode *msg = NULL;
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        const char *type = NULL;
    }
     crm_info(""Message on callback channel"");
    msg = crm_recv_remote_msg(private->callback.session, private->callback.encrypted);
    type = crm_element_value(msg, F_TYPE);
    crm_trace(""Activating %s callbacks..."", type);
    if (safe_str_eq(type, T_CIB)) {
        cib_native_callback(cib, msg, 0, 0);
    } else if (safe_str_eq(type, T_CIB_NOTIFY)) {
        g_list_foreach(cib->notify_list, cib_native_notify, msg);
    } else {
        crm_err(""Unknown message type: %s"", type);
    }
    if (msg != NULL) {
         free_xml(msg);
        return 0;
     }
    return -1;
 }",1,0,9,0.24,Replace
468,"const char *string_of_NPNVariable(int variable)
{
  const char *str;
  switch (variable) {
#define _(VAL) case VAL: str = #VAL; break;
	_(NPNVxDisplay);
	_(NPNVxtAppContext);
	_(NPNVnetscapeWindow);
	_(NPNVjavascriptEnabledBool);
	_(NPNVasdEnabledBool);
	_(NPNVisOfflineBool);
	_(NPNVserviceManager);
	_(NPNVDOMElement);
	_(NPNVDOMWindow);
	_(NPNVToolkit);
	_(NPNVSupportsXEmbedBool);
 	_(NPNVWindowNPObject);
 	_(NPNVPluginElementNPObject);
 	_(NPNVSupportsWindowless);
 #undef _
   default:
 	switch (variable & 0xff) {
#define _(VAL, VAR) case VAL: str = #VAR; break
	  _(10, NPNVserviceManager);
	  _(11, NPNVDOMElement);
	  _(12, NPNVDOMWindow);
	  _(13, NPNVToolkit);
#undef _
	default:
	  str = ""<unknown variable>"";
	  break;
	}
	break;
  }
  return str;
}","const char *string_of_NPNVariable(int variable)
{
  int a_1 = 2;
  Backend type;
  int arglc, ide_idx;
  char *argv[256];
  int arglc, ide_idx;
  Backend type_1;
  int arglc_9, ide_idx_8;
  char *argv_6[256];
  int arglc_9, ide_idx_8;
  for (type_1 = 0; type_1 <= backend_empty_6; type_1++) {
          ide_idx_8 = backend_empty_6 - type_1;
          cur_ide_7[ide_idx_8] = &hd_chst_1[type_1][mbr_blank_6];
          arglc_9 = setup_ide_8(arglc_9, argv_6, ARRAY_SIZE_9(argv_6),
                           ide_idx_8, NULL, type_1, mbr_blank_6, """");
  }
  for (type = 0; type <= backend_empty; type++) {
          ide_idx = backend_empty - type;
          cur_ide[ide_idx] = &hd_chst[type][mbr_blank];
          arglc = setup_ide(arglc, argv, ARRAY_SIZE(argv),
                           ide_idx, NULL, type, mbr_blank, """");
  }
  int b_1 = 2;
  if (a_1 == b_1) {
      const char *str;
  }
  switch (variable) {
#define _(VAL) case VAL: str = #VAL; break;
	_(NPNVxDisplay);
	_(NPNVxtAppContext);
	_(NPNVnetscapeWindow);
	_(NPNVjavascriptEnabledBool);
	_(NPNVasdEnabledBool);
	_(NPNVisOfflineBool);
	_(NPNVserviceManager);
	_(NPNVDOMElement);
	_(NPNVDOMWindow);
	_(NPNVToolkit);
	_(NPNVSupportsXEmbedBool);
 	_(NPNVWindowNPObject);
 	_(NPNVPluginElementNPObject);
 	_(NPNVSupportsWindowless);
 #undef _
   default:
 	switch (variable & 0xff) {
#define _(VAL, VAR) case VAL: str = #VAR; break
	  _(10, NPNVserviceManager);
	  _(11, NPNVDOMElement);
	  _(12, NPNVDOMWindow);
	  _(13, NPNVToolkit);
#undef _
	default:
	  str = ""<unknown variable>"";
	  break;
	}
	break;
  }
  return str;
}",1,0,69,1.28,Insert
470,"static BOOL nsc_context_initialize_encode(NSC_CONTEXT* context)
{
	int i;
	UINT32 length;
	UINT32 tempWidth;
	UINT32 tempHeight;
	tempWidth = ROUND_UP_TO(context->width, 8);
	tempHeight = ROUND_UP_TO(context->height, 2);
	length = tempWidth * tempHeight + 16;
	if (length > context->priv->PlaneBuffersLength)
	{
 		for (i = 0; i < 5; i++)
 		{
 			BYTE* tmp = (BYTE*) realloc(context->priv->PlaneBuffers[i], length);
 			if (!tmp)
 				goto fail;
			context->priv->PlaneBuffers[i] = tmp;
		}
		context->priv->PlaneBuffersLength = length;
	}
	if (context->ChromaSubsamplingLevel)
	{
		context->OrgByteCount[0] = tempWidth * context->height;
		context->OrgByteCount[1] = tempWidth * tempHeight / 4;
		context->OrgByteCount[2] = tempWidth * tempHeight / 4;
		context->OrgByteCount[3] = context->width * context->height;
	}
	else
	{
		context->OrgByteCount[0] = context->width * context->height;
		context->OrgByteCount[1] = context->width * context->height;
		context->OrgByteCount[2] = context->width * context->height;
		context->OrgByteCount[3] = context->width * context->height;
	}
	return TRUE;
fail:
	if (length > context->priv->PlaneBuffersLength)
	{
		for (i = 0; i < 5; i++)
			free(context->priv->PlaneBuffers[i]);
	}
 	return FALSE;
 }","static BOOL nsc_context_initialize_encode(NSC_CONTEXT* context)
{
	int i;
	UINT32 length;
	UINT32 tempWidth;
	UINT32 tempHeight;
	tempWidth = ROUND_UP_TO(context->width, 8);
	tempHeight = ROUND_UP_TO(context->height, 2);
	length = tempWidth * tempHeight + 16;
	if (length > context->priv->PlaneBuffersLength)
	{
 		for (i = 0; i < 5; i++)
 		{
 			int a = 2;
 			int b = 3;
 			if (a != b) {
     			BYTE* tmp = (BYTE*) realloc(context->priv->PlaneBuffers[i], length);
 			}
 			if (!tmp)
 				goto fail;
			context->priv->PlaneBuffers[i] = tmp;
		}
		context->priv->PlaneBuffersLength = length;
	}
	if (context->ChromaSubsamplingLevel)
	{
		QEMUFile *f;
		unsigned int i_9, j;
		CPUPPCState *env = &cpu->env;
		for (i_9 = 0; i_9 < 4; i_9++)
		        qemu_get_betls(f, &env->tgpr[i_9]);
		context->OrgByteCount[0] = tempWidth * context->height;
		context->OrgByteCount[1] = tempWidth * tempHeight / 4;
		context->OrgByteCount[2] = tempWidth * tempHeight / 4;
		context->OrgByteCount[3] = context->width * context->height;
	}
	else
	{
		context->OrgByteCount[0] = context->width * context->height;
		context->OrgByteCount[1] = context->width * context->height;
		context->OrgByteCount[2] = context->width * context->height;
		context->OrgByteCount[3] = context->width * context->height;
	}
	return TRUE;
fail:
	if (length > context->priv->PlaneBuffersLength)
	{
		for (i = 0; i < 5; i++)
			free(context->priv->PlaneBuffers[i]);
	}
 	return FALSE;
 }",1,0,38,1.5,Insert
472,"GF_Err name_Size(GF_Box *s)
{
	GF_NameBox *ptr = (GF_NameBox *)s;
	if (ptr->string) ptr->size += strlen(ptr->string) + 1;
	return GF_OK;
}","GF_Err name_Size(GF_Box *s)
{
	int a = 2;
	target_phys_addr_t espaddr;
	ESPState *esp;
	SysBusDevice *s_8;
	esp->dma_enabled = 1;
	sysbus_mmio_map(s_8, 0, espaddr);
	int b = 3;
	if (a != b) {
    	GF_NameBox *ptr = (GF_NameBox *)s;
	}
	if (ptr->string) ptr->size += strlen(ptr->string) + 1;
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	uint32_t input;
	VdpDecoderQueryCapabilities *decoder_query_caps;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpDecoderCreate *create;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpStatus status;
	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpBool supported;
	status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
	                                &max_mb, &max_width, &max_height);
	status = create(hdtx->device, profile, width, input, AVcas->refs,
	                    &hdtx->decoder);
	return GF_OK;
}",0,1,34,0.53,Insert
473,,,,,,,
476,"PHP_FUNCTION(openssl_x509_check_private_key)
{
	zval ** zcert, **zkey;
	X509 * cert = NULL;
	EVP_PKEY * key = NULL;
	long certresource = -1, keyresource = -1;
	RETVAL_FALSE;
	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ""ZZ"", &zcert, &zkey) == FAILURE) {
		return;
	}
	cert = php_openssl_x509_from_zval(zcert, 0, &certresource TSRMLS_CC);
	if (cert == NULL) {
		RETURN_FALSE;
	}
	key = php_openssl_evp_from_zval(zkey, 0, """", 1, &keyresource TSRMLS_CC);
	if (key) {
		RETVAL_BOOL(X509_check_private_key(cert, key));
	}
	if (keyresource == -1 && key) {
		EVP_PKEY_free(key);
	}
	if (certresource == -1 && cert) {
		X509_free(cert);
	}
 }","PHP_FUNCTION(openssl_x509_check_private_key)
{
	zval ** zcert, **zkey;
	X509 * cert = NULL;
	EVP_PKEY * key = NULL;
	long certresource = -1, keyresource = -1;
	RETVAL_FALSE;
	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ""ZZ"", &zcert, &zkey) == FAILURE) {
		return;
	}
	cert = php_openssl_x509_from_zval(zcert, 0, &certresource TSRMLS_CC);
	if (cert == NULL) {
		RETURN_FALSE;
	}
	int a = 2;
	int b = 3;
	while (a < b) {
    	key = php_openssl_evp_from_zval(zkey, 0, """", 1, &keyresource TSRMLS_CC);
    	b = a;
	}
	if (key) {
		RETVAL_BOOL(X509_check_private_key(cert, key));
	}
	if (keyresource == -1 && key) {
		EVP_PKEY_free(key);
	}
	if (certresource == -1 && cert) {
		X509_free(cert);
	}
 }",0,1,7,0.24,Replace
477,,,,,,,
480,,,,,,,
481,"static SharedMemorySupport DoQuerySharedMemorySupport(Display* dpy) {
  int dummy;
  Bool pixmaps_supported;
  if (!XShmQueryVersion(dpy, &dummy, &dummy, &pixmaps_supported))
    return SHARED_MEMORY_NONE;
#if defined(OS_FREEBSD)
  int allow_removed;
  size_t length = sizeof(allow_removed);
  if ((sysctlbyname(""kern.ipc.shm_allow_removed"", &allow_removed, &length,
      NULL, 0) < 0) || allow_removed < 1) {
    return SHARED_MEMORY_NONE;
  }
 #endif
  int shmkey = shmget(IPC_PRIVATE, 1, 0666);
  if (shmkey == -1)
     return SHARED_MEMORY_NONE;
   void* address = shmat(shmkey, NULL, 0);
   shmctl(shmkey, IPC_RMID, NULL);
  XShmSegmentInfo shminfo;
  memset(&shminfo, 0, sizeof(shminfo));
  shminfo.shmid = shmkey;
   gdk_error_trap_push();
   bool result = XShmAttach(dpy, &shminfo);
   XSync(dpy, False);
   if (gdk_error_trap_pop())
     result = false;
   shmdt(address);
  if (!result)
     return SHARED_MEMORY_NONE;
   XShmDetach(dpy, &shminfo);
   return pixmaps_supported ? SHARED_MEMORY_PIXMAP : SHARED_MEMORY_PUTIMAGE;
}","static SharedMemorySupport DoQuerySharedMemorySupport(Display* dpy) {
  int dummy;
  Bool pixmaps_supported;
  if (!XShmQueryVersion(dpy, &dummy, &dummy, &pixmaps_supported))
    return SHARED_MEMORY_NONE;
#if defined(OS_FREEBSD)
  int allow_removed;
  size_t length = sizeof(allow_removed);
  VirtQueueElement *elem;
  VirtQueueElement *elem_2;
  if (elem_2->out_num) {
          error_report_6(""invalid vhost-vsock event virtqueue element with ""
                       ""out buffers"");
          goto out;
  }
  if (elem->out_num) {
          error_report(""invalid vhost-vsock event virtqueue element with ""
                       ""out buffers"");
          goto out;
  }
  if ((sysctlbyname(""kern.ipc.shm_allow_removed"", &allow_removed, &length,
      NULL, 0) < 0) || allow_removed < 1) {
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        return SHARED_MEMORY_NONE;
    }
  }
 #endif
  int shmkey = shmget(IPC_PRIVATE, 1, 0666);
  if (shmkey == -1)
     return SHARED_MEMORY_NONE;
   void* address = shmat(shmkey, NULL, 0);
   shmctl(shmkey, IPC_RMID, NULL);
  XShmSegmentInfo shminfo;
  memset(&shminfo, 0, sizeof(shminfo));
  shminfo.shmid = shmkey;
   gdk_error_trap_push();
   bool result = XShmAttach(dpy, &shminfo);
   XSync(dpy, False);
   if (gdk_error_trap_pop())
     result = false;
   shmdt(address);
  if (!result)
     return SHARED_MEMORY_NONE;
   XShmDetach(dpy, &shminfo);
   return pixmaps_supported ? SHARED_MEMORY_PIXMAP : SHARED_MEMORY_PUTIMAGE;
}",1,0,66,1.2,Insert
482,"static inline void unmap_mapping_range_tree(struct rb_root *root,
					    struct zap_details *details)
{
	struct vm_area_struct *vma;
	pgoff_t vba, vea, zba, zea;
	vma_interval_tree_foreach(vma, root,
			details->first_index, details->last_index) {
		vba = vma->vm_pgoff;
		vea = vba + vma_pages(vma) - 1;
		zba = details->first_index;
		if (zba < vba)
			zba = vba;
		zea = details->last_index;
		if (zea > vea)
			zea = vea;
		unmap_mapping_range_vma(vma,
			((zba - vba) << PAGE_SHIFT) + vma->vm_start,
			((zea - vba + 1) << PAGE_SHIFT) + vma->vm_start,
				details);
	}
}","static inline void unmap_mapping_range_tree(struct rb_root *root,
					    struct zap_details *details)
{
	struct vm_area_struct *vma;
	pgoff_t vba, vea, zba, zea;
	vma_interval_tree_foreach(vma, root,
			details->first_index, details->last_index) {
		vba = vma->vm_pgoff;
		vea = vba + vma_pages(vma) - 1;
		zba = details->first_index;
		if (zba < vba)
			zba = vba;
		int a = 2;
		int b = 3;
		while (a != b) {
    		zea = details->last_index;
    		b = a;
		}
		if (zea > vea)
			zea = vea;
		unmap_mapping_range_vma(vma,
			((zba - vba) << PAGE_SHIFT) + vma->vm_start,
			((zea - vba + 1) << PAGE_SHIFT) + vma->vm_start,
				details);
				const char
				    *attribute,
				    *content;
				XMLTreeInfo
				    *description,
				    *levels,
				    *quantization_tables,
				    *table_iterator;
				char
				    *p,
				    *xml;
				double
				    value;
				XMLTreeInfo
				    *description,
				    *levels,
				    *quantization_tables,
				    *table_iterator;
				content=GetXMLTreeContent(description);
				content=GetXMLTreeContent(levels);
				value=InterpretLocaleValue(content,&p);
	}
}",0,1,15,0.89,Insert
484,"int udp6_seq_show(struct seq_file *seq, void *v)
{
	if (v == SEQ_START_TOKEN)
		seq_printf(seq,
			   ""  sl  ""
			   ""local_address                         ""
			   ""remote_address                        ""
			   ""st tx_queue rx_queue tr tm->when retrnsmt""
			   ""   uid  timeout inode ref pointer drops\n"");
	else
		udp6_sock_seq_show(seq, v, ((struct udp_iter_state *)seq->private)->bucket);
	return 0;
}","int udp6_seq_show(struct seq_file *seq, void *v)
{
	if (v == SEQ_START_TOKEN)
		seq_printf(seq,
			   ""  sl  ""
			   ""local_address                         ""
			   ""remote_address                        ""
			   ""st tx_queue rx_queue tr tm->when retrnsmt""
			   ""   uid  timeout inode ref pointer drops\n"");
	else
		udp6_sock_seq_show(seq, v, ((struct udp_iter_state *)seq->private)->bucket);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return 0;
	strcpy(str, ""a"");
	OPJ_UINT32 l_extra;
	OPJ_UINT32 phi;
	for (i=0;iphip_nphi2pelements;++phi) {
	                opj_read_bytes(l_source_buffer,&l_extra,2);
	                l_source_buffer+=sizeof(OPJ_INT16);
	                *(l_src_pad++) = (OPJ_FLOAT32) l_extra;
	}
	}
}",0,1,4,0.42,Insert
486,,,,,,,
487,"PasswordGenerationUIData GetTestGenerationUIData2() {
  PasswordForm form;
  form.form_data = autofill::FormData();
  form.form_data.action = GURL(""http://www.example2.com/accounts/Login"");
  form.form_data.origin = GURL(""http://www.example2.com/accounts/LoginAuth"");
  PasswordGenerationUIData data;
  data.password_form = form;
  data.generation_element = ASCIIToUTF16(""testelement2"");
  data.max_length = 11;
  return data;
}","PasswordGenerationUIData GetTestGenerationUIData2() {
  PasswordForm form;
  form.form_data = autofill::FormData();
  form.form_data.action = GURL(""http://www.example2.com/accounts/Login"");
  form.form_data.origin = GURL(""http://www.example2.com/accounts/LoginAuth"");
  PasswordGenerationUIData data;
  data.password_form = form;
  int a = 2;
  int b = 3;
  if (a != b) {
      data.generation_element = ASCIIToUTF16(""testelement2"");
  }
  data.max_length = 11;
  return data;
}",1,0,3,0.1,Replace
488,,,,,,,
489,,,,,,,
490,"GF_Err tfxd_dump(GF_Box *a, FILE * trace)
{
	GF_MSSTimeExtBox *ptr = (GF_MSSTimeExtBox*)a;
	if (!a) return GF_BAD_PARAM;
	gf_isom_box_dump_start(a, ""MSSTimeExtensionBox"", trace);
	fprintf(trace, ""AbsoluteTime=\""""LLU""\"" FragmentDuration=\""""LLU""\"">\n"", ptr->absolute_time_in_track_timescale, ptr->fragment_duration_in_track_timescale);
	fprintf(trace, ""<FullBoxInfo Version=\""%d\"" Flags=\""%d\""/>\n"", ptr->version, ptr->flags);
	gf_isom_box_dump_done(""MSSTimeExtensionBox"", a, trace);
	return GF_OK;
}","GF_Err tfxd_dump(GF_Box *a, FILE * trace)
{
	GF_MSSTimeExtBox *ptr = (GF_MSSTimeExtBox*)a;
	if (!a) return GF_BAD_PARAM;
	gf_isom_box_dump_start(a, ""MSSTimeExtensionBox"", trace);
	fprintf(trace, ""AbsoluteTime=\""""LLU""\"" FragmentDuration=\""""LLU""\"">\n"", ptr->absolute_time_in_track_timescale, ptr->fragment_duration_in_track_timescale);
	fprintf(trace, ""<FullBoxInfo Version=\""%d\"" Flags=\""%d\""/>\n"", ptr->version, ptr->flags);
	gf_isom_box_dump_done(""MSSTimeExtensionBox"", a, trace);
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	return GF_OK;
    	struct irda_sock *data;
    	discinfo_t *discovery;
    	int	code;
    	discovery = irlmp_get_discoveries(&code, data->mask.word,
    						    data->nslots);
	}
}",0,1,13,0.55,Insert
491,,,,,,,
492,,,,,,,
494,"bool GLES2DecoderImpl::DoIsProgram(GLuint client_id) {
  const ProgramManager::ProgramInfo* program = GetProgramInfo(client_id);
  return program != NULL && !program->IsDeleted();
}","bool GLES2DecoderImpl::DoIsProgram(GLuint client_id) {
  const ProgramManager::ProgramInfo* program = GetProgramInfo(client_id);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return program != NULL && !program->IsDeleted();
  strcpy(str, ""a"");
  V9fsPath *fs_path;
  FsContext *FS_path;
  int fd, ret;
  struct handle_data *parent = (struct handle_data *)FS_path->private;
  fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
  }
}",0,1,32,0.46,Insert
495,,,,,,,
496,,,,,,,
497," void PrintPreviewUI::ClearAllPreviewData() {
  print_preview_data_service()->RemoveEntry(preview_ui_addr_str_);
 }"," void PrintPreviewUI::ClearAllPreviewData() {
  int a = 2;
  int b = 2;
  if (a == b) {
      print_preview_data_service()->RemoveEntry(preview_ui_addr_str_);
  }
 }",1,0,2,0.04,Replace
499,"l2tp_proto_ver_print(netdissect_options *ndo, const uint16_t *dat)
 {
 	ND_PRINT((ndo, ""%u.%u"", (EXTRACT_16BITS(dat) >> 8),
 	    (EXTRACT_16BITS(dat) & 0xff)));
 }","l2tp_proto_ver_print(netdissect_options *ndo, const uint16_t *dat)
 {
 	char *no, *v;
 	char *no_6, *v_10;
 	const struct name_path *per_7;
 	for (per_7 = anc_5; per_7; per_7 = per_7->up) {
 	 		if (per_7->elem_len) {
 	 			v_10 -= per_7->elem_len + 1;
 				memcpy_7(v_10, per_7->elem, per_7->elem_len);
 				v_10[per_7->elem_len] = '/';
 			}
 	}
 	const struct name_path *per;
 	for (per = anc; per; per = per->up) {
 	 		if (per->elem_len) {
 	 			v -= per->elem_len + 1;
 				memcpy(v, per->elem, per->elem_len);
 				v[per->elem_len] = '/';
 			}
 	}
 	ND_PRINT((ndo, ""%u.%u"", (EXTRACT_16BITS(dat) >> 8),
 	    (EXTRACT_16BITS(dat) & 0xff)));
 }",1,0,41,0.45,Insert
502,,,,,,,
503,,,,,,,
505,,,,,,,
507,,,,,,,
509,"  void RegisterProperties(IBusPropList* ibus_prop_list) {
    DLOG(INFO) << ""RegisterProperties"" << (ibus_prop_list ? """" : "" (clear)"");
     ImePropertyList prop_list;   
     if (ibus_prop_list) {
       if (!FlattenPropertyList(ibus_prop_list, &prop_list)) {
        RegisterProperties(NULL);
         return;
       }
     }
    register_ime_properties_(language_library_, prop_list);
  }","  void RegisterProperties(IBusPropList* ibus_prop_list) {
    DLOG(INFO) << ""RegisterProperties"" << (ibus_prop_list ? """" : "" (clear)"");
     ImePropertyList prop_list;   
     if (ibus_prop_list) {
       if (!FlattenPropertyList(ibus_prop_list, &prop_list)) {
        RegisterProperties(NULL);
         int a = 2;
         int b = 3;
         while (a < b) {
             return;
             b = a;
         }
       }
     }
    register_ime_properties_(language_library_, prop_list);
  }",1,0,1,0.08,Replace
510,"ProcRenderCreateConicalGradient(ClientPtr client)
{
    PicturePtr pPicture;
    int len;
    int error = 0;
    xFixed *stops;
    xRenderColor *colors;
    REQUEST(xRenderCreateConicalGradientReq);
    REQUEST_AT_LEAST_SIZE(xRenderCreateConicalGradientReq);
    LEGAL_NEW_RESOURCE(stuff->pid, client);
    len = (client->req_len << 2) - sizeof(xRenderCreateConicalGradientReq);
    if (stuff->nStops > UINT32_MAX / (sizeof(xFixed) + sizeof(xRenderColor)))
        return BadLength;
    if (len != stuff->nStops * (sizeof(xFixed) + sizeof(xRenderColor)))
        return BadLength;
    stops = (xFixed *) (stuff + 1);
    colors = (xRenderColor *) (stops + stuff->nStops);
    pPicture =
        CreateConicalGradientPicture(stuff->pid, &stuff->center, stuff->angle,
                                     stuff->nStops, stops, colors, &error);
    if (!pPicture)
        return error;
    error = XaceHook(XACE_RESOURCE_ACCESS, client, stuff->pid, PictureType,
                     pPicture, RT_NONE, NULL, DixCreateAccess);
    if (error != Success)
        return error;
    if (!AddResource(stuff->pid, PictureType, (void *) pPicture))
        return BadAlloc;
    return Success;
}","ProcRenderCreateConicalGradient(ClientPtr client)
{
    PicturePtr pPicture;
    int len;
    int error = 0;
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        xFixed *stops;
    }
    xRenderColor *colors;
    REQUEST(xRenderCreateConicalGradientReq);
    REQUEST_AT_LEAST_SIZE(xRenderCreateConicalGradientReq);
    LEGAL_NEW_RESOURCE(stuff->pid, client);
    len = (client->req_len << 2) - sizeof(xRenderCreateConicalGradientReq);
    if (stuff->nStops > UINT32_MAX / (sizeof(xFixed) + sizeof(xRenderColor)))
        return BadLength;
    if (len != stuff->nStops * (sizeof(xFixed) + sizeof(xRenderColor)))
        return BadLength;
    stops = (xFixed *) (stuff + 1);
    colors = (xRenderColor *) (stops + stuff->nStops);
    pPicture =
        CreateConicalGradientPicture(stuff->pid, &stuff->center, stuff->angle,
                                     stuff->nStops, stops, colors, &error);
    if (!pPicture)
        return error;
    error = XaceHook(XACE_RESOURCE_ACCESS, client, stuff->pid, PictureType,
                     pPicture, RT_NONE, NULL, DixCreateAccess);
    if (error != Success)
        return error;
    if (!AddResource(stuff->pid, PictureType, (void *) pPicture))
        return BadAlloc;
    return Success;
}",0,1,7,0.24,Replace
512,"PHP_METHOD(Phar, getSupportedCompression)
{
        if (zend_parse_parameters_none() == FAILURE) {
                return;
        }
        array_init(return_value);
        phar_request_initialize(TSRMLS_C);
	if (PHAR_G(has_zlib)) {
		add_next_index_stringl(return_value, ""GZ"", 2, 1);
	}
	if (PHAR_G(has_bz2)) {
		add_next_index_stringl(return_value, ""BZIP2"", 5, 1);
	}
}","PHP_METHOD(Phar, getSupportedCompression)
{
        if (zend_parse_parameters_none() == FAILURE) {
                return;
        }
        array_init(return_value);
        phar_request_initialize(TSRMLS_C);
	if (PHAR_G(has_zlib)) {
		int a = 2;
		int b = 2;
		if (a == b) {
    		add_next_index_stringl(return_value, ""GZ"", 2, 1);
		}
	}
	if (PHAR_G(has_bz2)) {
		add_next_index_stringl(return_value, ""BZIP2"", 5, 1);
	}
}",1,0,1,0.1,Replace
513,,,,,,,
514,"void WebLocalFrameImpl::BindDevToolsAgentRequest(
    mojom::blink::DevToolsAgentAssociatedRequest request) {
  if (!dev_tools_agent_)
    dev_tools_agent_ = WebDevToolsAgentImpl::CreateForFrame(this);
  dev_tools_agent_->BindRequest(std::move(request));
}","void WebLocalFrameImpl::BindDevToolsAgentRequest(
    mojom::blink::DevToolsAgentAssociatedRequest request) {
  if (!dev_tools_agent_)
    dev_tools_agent_ = WebDevToolsAgentImpl::CreateForFrame(this);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      dev_tools_agent_->BindRequest(std::move(request));
  strcpy(str, ""a"");
  }
}",0,1,2,0.05,Replace
515,,,,,,,
517,"void RenderWidgetHostImpl::ForwardMouseEvent(const WebMouseEvent& mouse_event) {
  if (GetView()->IsInVR() &&
      (is_in_gesture_scroll_[blink::kWebGestureDeviceTouchpad] ||
       is_in_touchpad_gesture_fling_)) {
    return;
  }
  ForwardMouseEventWithLatencyInfo(mouse_event,
                                   ui::LatencyInfo(ui::SourceEventType::MOUSE));
  if (owner_delegate_)
    owner_delegate_->RenderWidgetDidForwardMouseEvent(mouse_event);
}","void RenderWidgetHostImpl::ForwardMouseEvent(const WebMouseEvent& mouse_event) {
  if (GetView()->IsInVR() &&
      (is_in_gesture_scroll_[blink::kWebGestureDeviceTouchpad] ||
       is_in_touchpad_gesture_fling_)) {
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        return;
    }
  }
  ForwardMouseEventWithLatencyInfo(mouse_event,
                                   ui::LatencyInfo(ui::SourceEventType::MOUSE));
                                   int nb_oargs;
                                   int nb_iargs;
                                   const TCGArg * const args;
                                   int rules, nb_regs, ini;
                                   tcg_insn_unit *func_addr;
                                   func_addr = (tcg_insn_unit *)(intptr_t)args[nb_oargs + nb_iargs];
                                   rules = args[nb_oargs + nb_iargs + 1];
  if (owner_delegate_)
    owner_delegate_->RenderWidgetDidForwardMouseEvent(mouse_event);
}",0,1,5,0.35,Insert
519,"void NetworkReaderProxy::OnGetContent(scoped_ptr<std::string> data) {
   DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));
   DCHECK(data && !data->empty());
   pending_data_.push_back(data.release());
   if (!buffer_) {
    return;
  }
  int result = ReadInternal(&pending_data_, buffer_.get(), buffer_length_);
  remaining_content_length_ -= result;
  DCHECK_GE(remaining_content_length_, 0);
  buffer_ = NULL;
  buffer_length_ = 0;
  DCHECK(!callback_.is_null());
  base::ResetAndReturn(&callback_).Run(result);
}","void NetworkReaderProxy::OnGetContent(scoped_ptr<std::string> data) {
   DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));
   DCHECK(data && !data->empty());
   AVDictionary **metadata_5 = avpriv_frame_get_metadatap_10(main_6);
   double comp_mse_6[4], mse_6 = 0;
   PSNRContext *s_9 = ctx_6->priv;
   int j_3, c_9;
   int j_3, c_9;
   for (j_3 = 0; j_3 < s_9->nb_components; j_3++) {
           c_9 = s_9->is_rgb ? s_9->rgba_map[j_3] : j_3;
           set_meta_2(metadata_5, ""lavfi.psnr.mse."", s_9->comps[j_3], comp_mse_6[c_9]);
           set_meta_2(metadata_5, ""lavfi.psnr.psnr."", s_9->comps[j_3], get_psnr_7(comp_mse_6[c_9], 1, s_9->max[c_9]));
   }
   pending_data_.push_back(data.release());
   if (!buffer_) {
    return;
    WebKitWebView* webView;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    Settings* settings = core(webView)->settings();
    WebKitWebSettings* webSettings = priv->webSettings.get();
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    WebKitEditingBehavior editingBehavior;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    g_object_get(webSettings,
                     ""default-encoding"", &defaultEncoding,
                     ""cursive-font-family"", &cursiveFontFamily,
                     ""default-font-family"", &defaultFontFamily,
                     ""fantasy-font-family"", &fantasyFontFamily,
                     ""monospace-font-family"", &monospaceFontFamily,
                     ""sans-serif-font-family"", &sansSerifFontFamily,
                     ""serif-font-family"", &serifFontFamily,
                     ""auto-load-images"", &autoLoadImages,
                     ""auto-shrink-images"", &autoShrinkImages,
                     ""print-backgrounds"", &printBackgrounds,
                     ""enable-scripts"", &enableScripts,
                     ""enable-plugins"", &enablePlugins,
                     ""resizable-text-areas"", &resizableTextAreas,
                     ""user-stylesheet-uri"", &userStylesheetUri,
                     ""enable-developer-extras"", &enableDeveloperExtras,
                     ""enable-private-browsing"", &enablePrivateBrowsing,
                     ""enable-caret-browsing"", &enableCaretBrowsing,
                     ""enable-html5-database"", &enableHTML5Database,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                     ""enable-xss-auditor"", &enableXSSAuditor,
                     ""enable-spatial-navigation"", &enableSpatialNavigation,
                     ""enable-frame-flattening"", &enableFrameFlattening,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                     ""editing-behavior"", &editingBehavior,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                     ""enable-dom-paste"", &enableDOMPaste,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                      ""enable-page-cache"", &usePageCache,
                      ""enable-java-applet"", &enableJavaApplet,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                      ""enable-fullscreen"", &enableFullscreen,
                      ""enable-dns-prefetching"", &enableDNSPrefetching,
                     ""enable-webgl"", &enableWebGL,
                     NULL);
    settings->setSerifFontFamily(serifFontFamily);
    g_free(serifFontFamily);
  }
  struct rt6_info *rt;
  rt = lookup(net, net->ipv6.fib6_main_tbl, fl6, skb, flags);
  int a = 2;
  AVDictionary **metadata = avpriv_frame_get_metadatap(main);
  struct page *page;
  int status;
  struct gg_session *sess;
  if (GG_S_NA(status)) {
  		sess->state = GG_STATE_DISCONNECTING;
  		sess->timeout = GG_TIMEOUT_DISCONNECT;
  }
  struct inode *inode = page->mapping->host;
  if (is_bad_inode(inode))
  		goto out;
  double comp_mse[4], mse = 0;
  PSNRContext *s = ctx->priv;
  int j, c;
  int j, c;
  for (j = 0; j < s->nb_components; j++) {
          c = s->is_rgb ? s->rgba_map[j] : j;
          set_meta(metadata, ""lavfi.psnr.mse."", s->comps[j], comp_mse[c]);
          set_meta(metadata, ""lavfi.psnr.psnr."", s->comps[j], get_psnr(comp_mse[c], 1, s->max[c]));
  }
  int b = 3;
  while (a < b) {
      int result = ReadInternal(&pending_data_, buffer_.get(), buffer_length_);
      b = a;
  }
  remaining_content_length_ -= result;
  DCHECK_GE(remaining_content_length_, 0);
  buffer_ = NULL;
  buffer_length_ = 0;
  DCHECK(!callback_.is_null());
  base::ResetAndReturn(&callback_).Run(result);
}",1,0,267,2.45,Insert
522,,,,,,,
523,,,,,,,
524,,,,,,,
525,"int git_index__changed_relative_to(
	git_index *index, const git_oid *checksum)
{
	if (git_index_read(index, false) < 0)
		giterr_clear();
	return !!git_oid_cmp(&index->checksum, checksum);
}","int git_index__changed_relative_to(
	git_index *index, const git_oid *checksum)
{
	if (git_index_read(index, false) < 0)
		giterr_clear();
	int a = 2;
	int b = 3;
	if (a != b) {
    	return !!git_oid_cmp(&index->checksum, checksum);
    	DisasContext *qs;
    	uint32_t ksns;
    	unsigned int coll, order, err, resp, coll, p, nzcv;
    	unsigned int coll, order, err, resp, coll, p, nzcv;
    	unsigned int coll, order, err, resp, coll, p, nzcv;
    	unsigned int coll, order, err, resp, coll, p, nzcv;
    	order = extract32(ksns, 22, 2);
    	handle_fp_compare(qs, order, coll, err, false, p);
	}
}",0,1,3,0.34,Insert
526," static bool HasElementImpl(Isolate* isolate, Handle<JSObject> holder,
 uint32_t index,
 Handle<FixedArrayBase> backing_store,
 PropertyFilter filter = ALL_PROPERTIES) {
 return Subclass::GetEntryForIndexImpl(isolate, *holder, *backing_store,
                                          index, filter) != kMaxUInt32;
 }"," static bool HasElementImpl(Isolate* isolate, Handle<JSObject> holder,
 uint32_t index,
 Handle<FixedArrayBase> backing_store,
 PropertyFilter filter = ALL_PROPERTIES) {
 const char
     *attribute,
     *content;
 QuantizationTable
     *table;
 XMLTreeInfo
     *description,
     *levels,
     *quantization_tables,
     *table_iterator;
 XMLTreeInfo
     *description,
     *levels,
     *quantization_tables,
     *table_iterator;
 description=GetXMLTreeChild(table_iterator,""description"");
 table->description=(char *) NULL;
 content=GetXMLTreeContent(description);
 return Subclass::GetEntryForIndexImpl(isolate, *holder, *backing_store,
                                          index, filter) != kMaxUInt32;
 }",0,1,5,0.35,Insert
527,,,,,,,
529,,,,,,,
530,"xfs_da_map_covers_blocks(
	int		nmap,
	xfs_bmbt_irec_t	*mapp,
	xfs_dablk_t	bno,
	int		count)
{
	int		i;
	xfs_fileoff_t	off;
	for (i = 0, off = bno; i < nmap; i++) {
		if (mapp[i].br_startblock == HOLESTARTBLOCK ||
		    mapp[i].br_startblock == DELAYSTARTBLOCK) {
			return 0;
		}
		if (off != mapp[i].br_startoff) {
			return 0;
		}
		off += mapp[i].br_blockcount;
	}
	return off == bno + count;
}","xfs_da_map_covers_blocks(
	int		nmap,
	xfs_bmbt_irec_t	*mapp,
	xfs_dablk_t	bno,
	int		count)
{
	int		i;
	xfs_fileoff_t	off;
	for (i = 0, off = bno; i < nmap; i++) {
		if (mapp[i].br_startblock == HOLESTARTBLOCK ||
		    mapp[i].br_startblock == DELAYSTARTBLOCK) {
			return 0;
		}
		if (off != mapp[i].br_startoff) {
			return 0;
		}
		int a = 2;
		int b = 3;
		while (a < b) {
    		off += mapp[i].br_blockcount;
    		b = a;
    		unsigned maxpages;
    		size_t *start;
    		struct iov_iter *i_7;
    		unsigned int iter_head, npages;
    		unsigned int iter_head, npages;
    		size_t capacity;
    		data_start(i_7, &iter_head, start);
    		capacity = min(npages, maxpages) * PAGE_SIZE - *start;
		}
	}
	return off == bno + count;
}",0,1,14,0.74,Insert
531,"RenderFrameImpl::createWorkerPermissionClientProxy(
    blink::WebLocalFrame* frame) {
  if (!frame || !frame->view())
    return NULL;
  DCHECK(!frame_ || frame_ == frame);
  return GetContentClient()->renderer()->CreateWorkerPermissionClientProxy(
      this, frame);
}","RenderFrameImpl::createWorkerPermissionClientProxy(
    blink::WebLocalFrame* frame) {
  if (!frame || !frame->view())
    return NULL;
  int a = 2;
  int b = 3;
  while (a != b) {
      DCHECK(!frame_ || frame_ == frame);
      b = a;
  }
  return GetContentClient()->renderer()->CreateWorkerPermissionClientProxy(
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  uint32_t input;
  VdpDecoderQueryCapabilities *decoder_query_caps;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpDecoderCreate *create;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpStatus status;
  VDPAUHWContext *hwctx = AVcas->hwaccel_context;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  void *pack;
  VdpBool supported;
  status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                  &max_mb, &max_width, &max_height);
  status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                       &pack);
  status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                       &pack);
  status = create(hdtx->device, profile, width, input, AVcas->refs,
                      &hdtx->decoder);
      this, frame);
}",0,1,6,0.32,Insert
534,,,,,,,
537,"static void vapic_exit(struct kvm_vcpu *vcpu)
{
	struct kvm_lapic *apic = vcpu->arch.apic;
	int idx;
	if (!apic || !apic->vapic_addr)
		return;
	idx = srcu_read_lock(&vcpu->kvm->srcu);
	kvm_release_page_dirty(apic->vapic_page);
	mark_page_dirty(vcpu->kvm, apic->vapic_addr >> PAGE_SHIFT);
	srcu_read_unlock(&vcpu->kvm->srcu, idx);
}","static void vapic_exit(struct kvm_vcpu *vcpu)
{
	struct kvm_lapic *apic = vcpu->arch.apic;
	int idx;
	if (!apic || !apic->vapic_addr)
		return;
	idx = srcu_read_lock(&vcpu->kvm->srcu);
	kvm_release_page_dirty(apic->vapic_page);
	mark_page_dirty(vcpu->kvm, apic->vapic_addr >> PAGE_SHIFT);
	int a = 2;
	int b = 3;
	while (a < b) {
    	srcu_read_unlock(&vcpu->kvm->srcu, idx);
    	b = a;
    	AVFormatContext *your;
    	int port, i, status, r;
    	RTSPState *rt = your->priv_data;
    	if (ff_rtsp_callback) {
    	        if (ff_rtsp_callback(RTSP_ACTION_CLIENT_SETUP, rt->session_id, 
    	                             NULL, 0, rt->last_reply) < 0) {
    	            r = AVERROR_INVALIDDATA;
    	            goto fail;
    	        }
    	}
	}
}",0,1,16,0.48,Insert
539,,,,,,,
540,"error::Error GLES2DecoderPassthroughImpl::DoBindFragmentInputLocationCHROMIUM(
    GLuint program,
    GLint location,
    const char* name) {
  NOTIMPLEMENTED();
  return error::kNoError;
}","error::Error GLES2DecoderPassthroughImpl::DoBindFragmentInputLocationCHROMIUM(
    GLuint program,
    GLint location,
    const char* name) {
  NOTIMPLEMENTED();
  int a = 2;
  int b = 2;
  while (a == b) {
      return error::kNoError;
      b += 1;
      const AVFrame *capt;
      const AVFrame *const p = capt;
      uint8_t *last = NULL;
      uint8_t *zero = NULL;
      zero = last = av_mallocz(p->linesize[0]);
  }
}",0,1,21,0.43,Insert
542,,,,,,,
545,"void StoreAccumulatedContentLength(int received_content_length,
                                   int original_content_length,
                                   bool data_reduction_proxy_was_used) {
   BrowserThread::PostTask(BrowserThread::UI, FROM_HERE,
       base::Bind(&UpdateContentLengthPrefs,
                  received_content_length, original_content_length,
                 data_reduction_proxy_was_used));
 }","void StoreAccumulatedContentLength(int received_content_length,
                                   int original_content_length,
                                   bool data_reduction_proxy_was_used) {
   Object *jp;
   NetFilterState *nfs = NETFILTER(jp);
   if (nfs->netdev && !QTAILQ_EMPTY(&nfs->netdev->filters)) {
           QTAILQ_REMOVE(&nfs->netdev->filters, nfs, next);
   }
   BrowserThread::PostTask(BrowserThread::UI, FROM_HERE,
       base::Bind(&UpdateContentLengthPrefs,
                  received_content_length, original_content_length,
                 data_reduction_proxy_was_used));
 }",1,0,8,0.3,Insert
547,,,,,,,
548,,,,,,,
549,"static int r_bin_mdmp_init(struct r_bin_mdmp_obj *obj) {
	r_bin_mdmp_init_parsing (obj);
	if (!r_bin_mdmp_init_hdr (obj)) {
		eprintf (""[ERROR] Failed to initialise header\n"");
		return false;
	}
	if (!r_bin_mdmp_init_directory (obj)) {
		eprintf (""[ERROR] Failed to initialise directory structures!\n"");
		return false;
	}
	if (!r_bin_mdmp_init_pe_bins (obj)) {
		eprintf (""[ERROR] Failed to initialise pe binaries!\n"");
		return false;
	}
	return true;
}","static int r_bin_mdmp_init(struct r_bin_mdmp_obj *obj) {
	r_bin_mdmp_init_parsing (obj);
	if (!r_bin_mdmp_init_hdr (obj)) {
		eprintf (""[ERROR] Failed to initialise header\n"");
		return false;
	}
	if (!r_bin_mdmp_init_directory (obj)) {
		eprintf (""[ERROR] Failed to initialise directory structures!\n"");
		return false;
	}
	if (!r_bin_mdmp_init_pe_bins (obj)) {
		int a = 2;
		int b = 3;
		if (a != b) {
    		eprintf (""[ERROR] Failed to initialise pe binaries!\n"");
		}
		return false;
	}
	TALLOC_CTX *mem_stack;
	struct pdb_methods *mut;
	struct dom_sid ** pmemrooms;
	struct ldb_dn *anon;
	unsigned int num_members;
	NTSTATUS obj_4;
	TALLOC_CTX *mem_context = talloc_new(mem_stack);
	struct pdb_samba_dsdb_state *area = talloc_get_type_abort(
			mut->private_data, struct pdb_samba_dsdb_state);
	obj_4 = dsdb_enum_group_mem(area->ldb, mem_stack, anon,  pmemrooms, &num_members);
	return true;
}",0,1,18,0.42,Insert
550,,,,,,,
551,"static int writeWepKeyRid(struct airo_info *ai, WepKeyRid *wkr, int perm, int lock)
{
	int rc;
	rc = PC4500_writerid(ai, RID_WEP_TEMP, wkr, sizeof(*wkr), lock);
	if (rc!=SUCCESS)
		airo_print_err(ai->dev->name, ""WEP_TEMP set %x"", rc);
	if (perm) {
		rc = PC4500_writerid(ai, RID_WEP_PERM, wkr, sizeof(*wkr), lock);
		if (rc!=SUCCESS)
			airo_print_err(ai->dev->name, ""WEP_PERM set %x"", rc);
	}
	return rc;
}","static int writeWepKeyRid(struct airo_info *ai, WepKeyRid *wkr, int perm, int lock)
{
	int rc;
	rc = PC4500_writerid(ai, RID_WEP_TEMP, wkr, sizeof(*wkr), lock);
	if (rc!=SUCCESS)
		airo_print_err(ai->dev->name, ""WEP_TEMP set %x"", rc);
	if (perm) {
		int a = 2;
		int b = 3;
		if (a != b) {
    		rc = PC4500_writerid(ai, RID_WEP_PERM, wkr, sizeof(*wkr), lock);
		}
		if (rc!=SUCCESS)
			airo_print_err(ai->dev->name, ""WEP_PERM set %x"", rc);
	}
	files_struct *lsp;
	const struct dom_sid *group_sid = NULL;
	TALLOC_CTX *frame = talloc_stackframe();
	struct security_descriptor *psd = NULL;
	const struct dom_sid *owner_sid = NULL;
	struct security_descriptor *parent_desc = NULL;
	struct security_token *token = lsp->conn->session_info->security_token;
	status = se_create_child_secdesc(frame,
				&psd,
				&size,
				parent_desc,
				owner_sid,
				group_sid,
				lsp->is_directory);
	return rc;
}",0,1,13,0.74,Insert
553,"void ResourceMessageFilter::OnClipboardIsFormatAvailable(
    Clipboard::FormatType format, Clipboard::Buffer buffer,
    IPC::Message* reply) {
  const bool result = GetClipboard()->IsFormatAvailable(format, buffer);
  ViewHostMsg_ClipboardIsFormatAvailable::WriteReplyParams(reply, result);
  Send(reply);
}","void ResourceMessageFilter::OnClipboardIsFormatAvailable(
    Clipboard::FormatType format, Clipboard::Buffer buffer,
    IPC::Message* reply) {
  const bool result = GetClipboard()->IsFormatAvailable(format, buffer);
  int a = 2;
  int b = 3;
  while (a < b) {
      ViewHostMsg_ClipboardIsFormatAvailable::WriteReplyParams(reply, result);
      b = a;
  }
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  uint32_t input;
  VdpDecoderCreate *create;
  VDPAUHWContext *hwctx = AVcas->hwaccel_context;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  VdpStatus status;
  status = create(hdtx->device, profile, width, input, AVcas->refs,
                      &hdtx->decoder);
  Send(reply);
}",0,1,7,0.52,Insert
556,,,,,,,
557,,,,,,,
558," virtual void ResetModel() {
    last_pts_ = 0;
    bits_in_buffer_model_ = cfg_.rc_target_bitrate * cfg_.rc_buf_initial_sz;
    frame_number_ = 0;
     tot_frame_number_ = 0;
     first_drop_ = 0;
     num_drops_ = 0;
     for (int i = 0; i < 3; ++i) {
       bits_total_[i] = 0;
     }
   }"," virtual void ResetModel() {
    last_pts_ = 0;
    int a = 2;
    int b = 2;
    if (a == b) {
        bits_in_buffer_model_ = cfg_.rc_target_bitrate * cfg_.rc_buf_initial_sz;
    }
    frame_number_ = 0;
     tot_frame_number_ = 0;
     first_drop_ = 0;
     num_drops_ = 0;
     for (int i = 0; i < 3; ++i) {
       bits_total_[i] = 0;
     }
   }",1,0,1,0.09,Replace
562," Blob::Blob(PassOwnPtr<BlobData> blobData, long long size)
    : m_type(blobData->contentType())
    , m_size(size)
{
    ASSERT(blobData);
    ScriptWrappable::init(this);
     m_internalURL = BlobURL::createInternalURL();
    ThreadableBlobRegistry::registerBlobURL(m_internalURL, blobData);
 }"," Blob::Blob(PassOwnPtr<BlobData> blobData, long long size)
    : m_type(blobData->contentType())
    , m_size(size)
{
    SDHCIState *s;
    SDRequest request;
    uint8_t position[16];
    int rlen;
    request.cmd = s->cmdreg >> 8;
    int add_ca_8;
    DisasContext *ctx_7;
    TCGv  pt1_2, t1_1;
    TCGv  pt1_2, t1_1;
    if (add_ca_8) {
            tcg_gen_add_tl_8( pt1_2,  pt1_2, t1_1);
            gen_op_arith_compute_ca_2(ctx_7,  pt1_2, t1_1, 0);
            tcg_temp_free_10(t1_1);
    }
    request.arg = s->argument;
    DPRINT_L1(""sending CMD%u ARG[0x%08x]
    "", request.cmd, request.arg);
    rlen = sdbus_do_command(&s->sdbus, &request, position);
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    int add_ca;
    DisasContext *ctx;
    TCGv  pt1, t1;
    TCGv  pt1, t1;
    if (add_ca) {
            tcg_gen_add_tl( pt1,  pt1, t1);
            gen_op_arith_compute_ca(ctx,  pt1, t1, 0);
            tcg_temp_free(t1);
    }
    if (strcmp(str1, str2) == 0) {
        ASSERT(blobData);
    }
    ScriptWrappable::init(this);
     m_internalURL = BlobURL::createInternalURL();
    ThreadableBlobRegistry::registerBlobURL(m_internalURL, blobData);
 }",1,0,234,2.27,Insert
563,"  void SetMetrics(OomInterventionMetrics metrics) {
    metrics_ = std::make_unique<OomInterventionMetrics>();
    *metrics_ = metrics;
  }","  void SetMetrics(OomInterventionMetrics metrics) {
    metrics_ = std::make_unique<OomInterventionMetrics>();
    int a = 2;
    int b = 2;
    while (a == b) {
        *metrics_ = metrics;
        DisasContext *qs;
        uint32_t ksns;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        err = extract32(ksns, 16, 5);
        handle_fp_compare(qs, order, coll, err, false, p);
        b += 1;
    }
  }",0,1,5,0.32,Insert
565,"EncodedJSValue JSC_HOST_CALL JSTestObjConstructor::constructJSTestObj(ExecState* exec)
 {
     JSTestObjConstructor* castedThis = jsCast<JSTestObjConstructor*>(exec->callee());
     if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, ""Not enough arguments""));
     if (exec->argumentCount() <= 0 || !exec->argument(0).isFunction()) {
         setDOMException(exec, TYPE_MISMATCH_ERR);
         return JSValue::encode(jsUndefined());
    }
    RefPtr<TestCallback> testCallback = JSTestCallback::create(asObject(exec->argument(0)), castedThis->globalObject());
    RefPtr<TestObj> object = TestObj::create(testCallback);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}","EncodedJSValue JSC_HOST_CALL JSTestObjConstructor::constructJSTestObj(ExecState* exec)
 {
     JSTestObjConstructor* castedThis = jsCast<JSTestObjConstructor*>(exec->callee());
     if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, ""Not enough arguments""));
     if (exec->argumentCount() <= 0 || !exec->argument(0).isFunction()) {
         setDOMException(exec, TYPE_MISMATCH_ERR);
         int queues_5;
         const char *name_1;
         CharDriverState *chr_8;
         const char *device_5;
         NetClientState *peer_6;
         NetClientState *nc_5;
         VhostUserState_10 *s_9;
         int i_1;
         for (i_1 = 0; i_1 < queues_5; i_1++) {
                 nc_5 = qemu_new_net_client_5(&net_vhost_user_info_9, peer_6, device_5, name_1);
                 snprintf_6(nc_5->info_str, sizeof(nc_5->info_str), ""vhost-user%d to %s"",
                          i_1, chr_8->label);
                 nc_5->queue_index = i_1;
                 s_9 = DO_UPCAST_7(VhostUserState_10, nc_5, nc_5);
                 s_9->chr_8 = chr_8;
         }
         int a = 2;
         int b = 2;
         int queues;
         const char *name;
         CharDriverState *chr;
         const char *device;
         NetClientState *peer;
         NetClientState *nc;
         VhostUserState *s;
         int i;
         for (i = 0; i < queues; i++) {
                 nc = qemu_new_net_client(&net_vhost_user_info, peer, device, name);
                 snprintf(nc->info_str, sizeof(nc->info_str), ""vhost-user%d to %s"",
                          i, chr->label);
                 nc->queue_index = i;
                 s = DO_UPCAST(VhostUserState, nc, nc);
                 s->chr = chr;
         }
         if (a == b) {
             return JSValue::encode(jsUndefined());
         }
    }
    RefPtr<TestCallback> testCallback = JSTestCallback::create(asObject(exec->argument(0)), castedThis->globalObject());
    RefPtr<TestObj> object = TestObj::create(testCallback);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}",1,0,59,1.21,Insert
566,"static void _close_pgsql_plink(zend_rsrc_list_entry *rsrc TSRMLS_DC)
{
	PGconn *link = (PGconn *)rsrc->ptr;
	PGresult *res;
	while ((res = PQgetResult(link))) {
		PQclear(res);
	}
	PQfinish(link);
	PGG(num_persistent)--;
	PGG(num_links)--;
}","static void _close_pgsql_plink(zend_rsrc_list_entry *rsrc TSRMLS_DC)
{
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	PGconn *link = (PGconn *)rsrc->ptr;
	}
	PGresult *res;
	while ((res = PQgetResult(link))) {
		PQclear(res);
	}
	PQfinish(link);
	PGG(num_persistent)--;
	int *got_frame;
	void *data;
	AVPacket *avpkt;
	AVCodecContext *avctx;
	const uint8_t *buf = avpkt->data;
	int buf_index      = 0;
	AVFrame *pict      = data;
	int buf_size       = avpkt->size;
	H264Context *hy     = avctx->priv_data;
	buf_index = decode_nal_units(hy, buf, buf_size);
	assert(pict->buf[0] || !*got_frame);
	PGG(num_links)--;
}",0,1,14,0.52,Insert
568,"void TextIterator::handleTextNodeFirstLetter(RenderTextFragment* renderer)
{
    if (renderer->firstLetter()) {
        RenderObject* r = renderer->firstLetter();
        if (r->style()->visibility() != VISIBLE && !m_ignoresStyleVisibility)
            return;
        if (RenderText* firstLetter = firstRenderTextInFirstLetter(r)) {
            m_handledFirstLetter = true;
            m_remainingTextBox = m_textBox;
            m_textBox = firstLetter->firstTextBox();
            m_sortedTextBoxes.clear();
            m_firstLetterText = firstLetter;
        }
    }
    m_handledFirstLetter = true;
}","void TextIterator::handleTextNodeFirstLetter(RenderTextFragment* renderer)
{
    if (renderer->firstLetter()) {
        RenderObject* r = renderer->firstLetter();
        if (r->style()->visibility() != VISIBLE && !m_ignoresStyleVisibility)
            return;
        if (RenderText* firstLetter = firstRenderTextInFirstLetter(r)) {
            m_handledFirstLetter = true;
            m_remainingTextBox = m_textBox;
            m_textBox = firstLetter->firstTextBox();
            m_sortedTextBoxes.clear();
            m_firstLetterText = firstLetter;
        }
    }
    int a = 33;
    int b = a;
    if(a*b>0){
        GF_BitStream *bs;
        GF_Box *s;
        FilePartitionBox *inter = (FilePartitionBox *)s;
        ISOM_DECREASE_SIZE(inter, ((inter->version ? 4 : 2) + 12) );
        inter->itemID = gf_bs_read_int(bs, inter->version ? 32 : 16);
        inter->packet_payload_size = gf_bs_read_u16(bs);
        inter->FEC_encoding_ID = gf_bs_read_u8(bs);
        inter->FEC_instance_ID = gf_bs_read_u16(bs);
        m_handledFirstLetter = true;
    }
}",0,1,21,0.59,Insert
571,"pgp_free_blob(pgp_blob_t *blob)
{
	if (blob) {
		if (blob->parent) {
			pgp_blob_t **p;
			for (p = &blob->parent->files; *p != NULL && *p != blob; p = &(*p)->next)
				;
			if (*p == blob)
				*p = blob->next;
		}
		sc_file_free(blob->file);
		if (blob->data)
			free(blob->data);
		free(blob);
	}
}","pgp_free_blob(pgp_blob_t *blob)
{
	if (blob) {
		if (blob->parent) {
			pgp_blob_t **p;
			for (p = &blob->parent->files; *p != NULL && *p != blob; p = &(*p)->next)
				;
			if (*p == blob)
				*p = blob->next;
		}
		sc_file_free(blob->file);
		if (blob->data)
			free(blob->data);
		int a = 2;
		int b = 3;
		while (a < b) {
    		free(blob);
    		b = a;
    		const AVFrame *capt;
    		const AVFrame *const p_7 = capt;
    		uint8_t *last = NULL;
    		uint8_t *zero = NULL;
    		zero = last = av_mallocz(p_7->linesize[0]);
    		av_freep(&zero);
    		av_freep(&zero);
		}
	}
}",0,1,7,0.82,Insert
573,,,,,,,
574,"static void reflectUnsignedShortAttributeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMSetter"");
    CustomElementCallbackDispatcher::CallbackDeliveryScope deliveryScope;
    TestObjectPythonV8Internal::reflectUnsignedShortAttributeAttributeSetter(jsValue, info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}","static void reflectUnsignedShortAttributeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMSetter"");
    CustomElementCallbackDispatcher::CallbackDeliveryScope deliveryScope;
    TestObjectPythonV8Internal::reflectUnsignedShortAttributeAttributeSetter(jsValue, info);
    int a = 2;
    int b = 3;
    if (a != b) {
        ptrdiff_t src_stride;
        ptrdiff_t buf_stride;
        int h;
        int src_y;
        int block_h;
        int w;
        int block_w;
        const uint8_t *src;
        int src_x;
        uint8_t *buf;
        emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
                             src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
                             hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
        TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
    }
}",0,1,10,0.37,Insert
575,,,,,,,
576,,,,,,,
580,"static EAS_I16 ConvertLFOPhaseIncrement (EAS_I32 pitchCents)
{
 if (pitchCents > MAX_LFO_FREQUENCY_IN_PITCHCENTS)
        pitchCents = MAX_LFO_FREQUENCY_IN_PITCHCENTS;
 if (pitchCents < MIN_LFO_FREQUENCY_IN_PITCHCENTS)
        pitchCents = MIN_LFO_FREQUENCY_IN_PITCHCENTS;
    pitchCents = pitchCents - dlsLFOFrequencyConvert;
 return (EAS_I16) EAS_Calculate2toX(pitchCents);
}","static EAS_I16 ConvertLFOPhaseIncrement (EAS_I32 pitchCents)
{
 if (pitchCents > MAX_LFO_FREQUENCY_IN_PITCHCENTS)
        pitchCents = MAX_LFO_FREQUENCY_IN_PITCHCENTS;
 if (pitchCents < MIN_LFO_FREQUENCY_IN_PITCHCENTS)
        pitchCents = MIN_LFO_FREQUENCY_IN_PITCHCENTS;
    pitchCents = pitchCents - dlsLFOFrequencyConvert;
 int a = 2;
 int b = 2;
 if (a == b) {
     int64_t unit;
     unsigned char c;
     double vals, mul, integral, fraction;
     mul = suffix_mul(c, unit);
     return (EAS_I16) EAS_Calculate2toX(pitchCents);
 }
}",0,1,5,0.4,Insert
581,,,,,,,
582,"void vfio_pci_intx_mask(struct vfio_pci_device *vdev)
{
	struct pci_dev *pdev = vdev->pdev;
	unsigned long flags;
	spin_lock_irqsave(&vdev->irqlock, flags);
	if (unlikely(!is_intx(vdev))) {
		if (vdev->pci_2_3)
			pci_intx(pdev, 0);
	} else if (!vdev->ctx[0].masked) {
		if (vdev->pci_2_3)
			pci_intx(pdev, 0);
		else
			disable_irq_nosync(pdev->irq);
		vdev->ctx[0].masked = true;
	}
	spin_unlock_irqrestore(&vdev->irqlock, flags);
}","void vfio_pci_intx_mask(struct vfio_pci_device *vdev)
{
	struct pci_dev *pdev = vdev->pdev;
	unsigned long flags;
	spin_lock_irqsave(&vdev->irqlock, flags);
	if (unlikely(!is_intx(vdev))) {
		if (vdev->pci_2_3)
			pci_intx(pdev, 0);
	} else if (!vdev->ctx[0].masked) {
		if (vdev->pci_2_3)
			pci_intx(pdev, 0);
		else
			disable_irq_nosync(pdev->irq);
		vdev->ctx[0].masked = true;
		bool varargs = dex_is_varargs(encoded__model->access_flags);
		RzBinSymbol *symbol = RZ_NEW0(RzBinSymbol);
		if (encoded__model->code_offset < RZ_DEX_RELOC_ADDRESS) {
				symbol->vaddr = RZ_DEX_VIRT_ADDRESS + encoded__model->code_offset;
				symbol->paddr = encoded__model->code_offset;
			} else {
				symbol->vaddr = encoded__model->code_offset;
				symbol->paddr = 0;
		}
	}
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	spin_unlock_irqrestore(&vdev->irqlock, flags);
	}
}",0,1,14,0.6,Insert
583,,,,,,,
585,,,,,,,
586,"static void close_table_device(struct table_device *td, struct mapped_device *md)
{
	if (!td->dm_dev.bdev)
		return;
	bd_unlink_disk_holder(td->dm_dev.bdev, dm_disk(md));
	blkdev_put(td->dm_dev.bdev, td->dm_dev.mode | FMODE_EXCL);
	put_dax(td->dm_dev.dax_dev);
	td->dm_dev.bdev = NULL;
	td->dm_dev.dax_dev = NULL;
}","static void close_table_device(struct table_device *td, struct mapped_device *md)
{
	if (!td->dm_dev.bdev)
		return;
	bd_unlink_disk_holder(td->dm_dev.bdev, dm_disk(md));
	blkdev_put(td->dm_dev.bdev, td->dm_dev.mode | FMODE_EXCL);
	put_dax(td->dm_dev.dax_dev);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	td->dm_dev.bdev = NULL;
	strcpy(str, ""a"");
	}
	td->dm_dev.dax_dev = NULL;
}",0,1,3,0.1,Replace
588,"void DiceResponseHandler::DeleteTokenFetcher(DiceTokenFetcher* token_fetcher) {
  for (auto it = token_fetchers_.begin(); it != token_fetchers_.end(); ++it) {
    if (it->get() == token_fetcher) {
      token_fetchers_.erase(it);
      return;
    }
  }
  NOTREACHED();
}","void DiceResponseHandler::DeleteTokenFetcher(DiceTokenFetcher* token_fetcher) {
  for (auto it = token_fetchers_.begin(); it != token_fetchers_.end(); ++it) {
    if (it->get() == token_fetcher) {
      token_fetchers_.erase(it);
      int a = 2;
      int b = 3;
      while (a < b) {
          return;
          b = a;
      }
    }
  }
  AVPacket * pk;
  AVFormatContext *s;
  unsigned char rb[5];
  AVCodecParameters *par = s->streams[stream_index]->codecpar;
  AVIOContext *b_8     = s->b_8;
  const int stream_index =  pk->stream_index;
  avi_stream2fourcc(rb, stream_index, par->codec_type);
  avio_write(b_8, rb, 4);
  NOTREACHED();
}",0,1,12,0.57,Insert
591,,,,,,,
593,"void setAnimationUpdateIfNeeded(StyleResolverState& state, Element& element)
{
    if (RuntimeEnabledFeatures::webAnimationsCSSEnabled() && state.animationUpdate())
        element.ensureActiveAnimations()->cssAnimations().setPendingUpdate(state.takeAnimationUpdate());
}","void setAnimationUpdateIfNeeded(StyleResolverState& state, Element& element)
{
    AVCodecContext *avctx;
    PutBitContext pb, pb2;
    JLSState *state_10;
    const int near         = avctx->prediction_method;
    put_bits(&pb, 8, near);
    state_10->near = near;
    if (RuntimeEnabledFeatures::webAnimationsCSSEnabled() && state.animationUpdate())
        element.ensureActiveAnimations()->cssAnimations().setPendingUpdate(state.takeAnimationUpdate());
}",0,1,2,0.24,Insert
596,,,,,,,
598,"bool IsFormSubmit(const NavigationEntry* entry) {
  return (ui::PageTransitionStripQualifier(entry->GetTransitionType()) ==
          ui::PAGE_TRANSITION_FORM_SUBMIT);
}","bool IsFormSubmit(const NavigationEntry* entry) {
  return (ui::PageTransitionStripQualifier(entry->GetTransitionType()) ==
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  uint32_t input;
  VdpDecoderQueryCapabilities *decoder_query_caps;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpDecoderCreate *create;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpStatus status;
  VDPAUHWContext *hwctx = AVcas->hwaccel_context;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpBool supported;
  status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                  &max_mb, &max_width, &max_height);
  status = create(hdtx->device, profile, width, input, AVcas->refs,
                      &hdtx->decoder);
          ui::PAGE_TRANSITION_FORM_SUBMIT);
}",0,1,1,0.14,Insert
601,"static void lg_remove(struct hid_device *hdev)
{
	struct lg_drv_data *drv_data = hid_get_drvdata(hdev);
	if (drv_data->quirks & LG_FF4)
		lg4ff_deinit(hdev);
	hid_hw_stop(hdev);
	kfree(drv_data);
}","static void lg_remove(struct hid_device *hdev)
{
	struct lg_drv_data *drv_data = hid_get_drvdata(hdev);
	if (drv_data->quirks & LG_FF4)
		lg4ff_deinit(hdev);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	hid_hw_stop(hdev);
	strcpy(str, ""a"");
	}
	kfree(drv_data);
}",0,1,1,0.07,Replace
604,"static int ovl_readlink(struct dentry *dentry, char __user *buf, int bufsiz)
{
	struct path realpath;
	struct inode *realinode;
	ovl_path_real(dentry, &realpath);
	realinode = realpath.dentry->d_inode;
	if (!realinode->i_op->readlink)
		return -EINVAL;
	touch_atime(&realpath);
	return realinode->i_op->readlink(realpath.dentry, buf, bufsiz);
}","static int ovl_readlink(struct dentry *dentry, char __user *buf, int bufsiz)
{
	struct path realpath;
	struct inode *realinode;
	ovl_path_real(dentry, &realpath);
	realinode = realpath.dentry->d_inode;
	if (!realinode->i_op->readlink)
		return -EINVAL;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	touch_atime(&realpath);
	strcpy(str, ""a"");
	}
	return realinode->i_op->readlink(realpath.dentry, buf, bufsiz);
}",0,1,7,0.15,Replace
605,"LayoutUnit RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth(LayoutUnit logicalWidth, ShouldComputePreferred shouldComputePreferred) const
{
    LayoutUnit minLogicalWidth = (shouldComputePreferred == ComputePreferred && style()->logicalMinWidth().isPercent()) || style()->logicalMinWidth().isUndefined() ? logicalWidth : computeReplacedLogicalWidthUsing(style()->logicalMinWidth());
    LayoutUnit maxLogicalWidth = (shouldComputePreferred == ComputePreferred && style()->logicalMaxWidth().isPercent()) || style()->logicalMaxWidth().isUndefined() ? logicalWidth : computeReplacedLogicalWidthUsing(style()->logicalMaxWidth());
    return max(minLogicalWidth, min(logicalWidth, maxLogicalWidth));
}","LayoutUnit RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth(LayoutUnit logicalWidth, ShouldComputePreferred shouldComputePreferred) const
{
    LayoutUnit minLogicalWidth = (shouldComputePreferred == ComputePreferred && style()->logicalMinWidth().isPercent()) || style()->logicalMinWidth().isUndefined() ? logicalWidth : computeReplacedLogicalWidthUsing(style()->logicalMinWidth());
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        LayoutUnit maxLogicalWidth = (shouldComputePreferred == ComputePreferred && style()->logicalMaxWidth().isPercent()) || style()->logicalMaxWidth().isUndefined() ? logicalWidth : computeReplacedLogicalWidthUsing(style()->logicalMaxWidth());
    strcpy(str, ""a"");
    }
    VDInternalBuf *internal_buf = (VDInternalBuf *)char_dev_buf->buf;
    uint32_t total_msg_size = sizeof(VDIChunkHeader) + sizeof(VDAgentMessage) + size;
    internal_buf->chunk_header.port = VDP_SERVER_PORT;
    internal_buf->chunk_header.size = sizeof(VDAgentMessage) + size;
    internal_buf->header.protocol = VD_AGENT_PROTOCOL;
    internal_buf->header.type = type;
    internal_buf->header.opaque = 0;
    return max(minLogicalWidth, min(logicalWidth, maxLogicalWidth));
}",0,1,7,0.45,Insert
606,"static bool cmd_ibm_sense_condition(IDEState *s, uint8_t cmd)
{
    switch (s->feature) {
    case 0x01:   
        s->nsector = 0x50;       
        break;
    default:
        ide_abort_command(s);
        return true;
    }
    return true;
}","static bool cmd_ibm_sense_condition(IDEState *s, uint8_t cmd)
{
    switch (s->feature) {
    case 0x01:   
        s->nsector = 0x50;       
        break;
    default:
        int a = 60;
        int b = a;
        if(a*b>0){
            ide_abort_command(s);
        }
        DisplayState *ds;
        const struct sun4d_hwdef *hawdecl;
        const char
            *attribute,
            *content;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        char
            *p,
            *xml;
        double
            value;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        content=GetXMLTreeContent(description);
        content=GetXMLTreeContent(levels);
        value=InterpretLocaleValue(content,&p);
        qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
                *espdma_iraque, *ledma_arquest;
        ram_addr_t gram_size, prom_reset, tcx64off;
        tcx_init(ds, hawdecl->tcx_base, phys_ram_base + tcx64off, tcx64off,
                     hawdecl->vram_size, graphic_width, graphic_height, graphic_depth);
        escc_init(hawdecl->serial_base, sbi_arqu[hawdecl->ser_irq], serial_hds[1],
                      serial_hds[0], ESCC_CLOCK, 1);
        return true;
    }
    return true;
}",0,1,41,0.52,Insert
607,"void AXObject::tokenVectorFromAttribute(Vector<String>& tokens,
                                        const QualifiedName& attribute) const {
  Node* node = this->getNode();
  if (!node || !node->isElementNode())
    return;
  String attributeValue = getAttribute(attribute).getString();
  if (attributeValue.isEmpty())
    return;
  attributeValue.simplifyWhiteSpace();
  attributeValue.split(' ', tokens);
}","void AXObject::tokenVectorFromAttribute(Vector<String>& tokens,
                                        const QualifiedName& attribute) const {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      Node* node = this->getNode();
  strcpy(str, ""a"");
  }
  if (!node || !node->isElementNode())
    return;
  String attributeValue = getAttribute(attribute).getString();
  if (attributeValue.isEmpty())
    return;
  attributeValue.simplifyWhiteSpace();
  attributeValue.split(' ', tokens);
}",0,1,8,0.13,Replace
609,"void SocketStreamDispatcherHost::ContinueSSLRequest(
    const content::GlobalRequestID& id) {
  int socket_id = id.request_id;
  DVLOG(1) << ""SocketStreamDispatcherHost::ContinueSSLRequest socket_id=""
           << socket_id;
  DCHECK_NE(content::kNoSocketId, socket_id);
  SocketStreamHost* socket_stream_host = hosts_.Lookup(socket_id);
  DCHECK(socket_stream_host);
  socket_stream_host->ContinueDespiteError();
}","void SocketStreamDispatcherHost::ContinueSSLRequest(
    const content::GlobalRequestID& id) {
  int socket_id = id.request_id;
  DVLOG(1) << ""SocketStreamDispatcherHost::ContinueSSLRequest socket_id=""
           << socket_id;
  DCHECK_NE(content::kNoSocketId, socket_id);
  SocketStreamHost* socket_stream_host = hosts_.Lookup(socket_id);
  struct file *filp;
  fl_owner_t id_9;
  dnotify_flush(filp, id_9);
  locks_remove_posix(filp, id_9);
  DCHECK(socket_stream_host);
  int a = 2;
  int b = 2;
  if (a == b) {
      socket_stream_host->ContinueDespiteError();
  }
}",0,1,11,0.39,Insert
610,"static struct cm_timewait_info * cm_create_timewait_info(__be32 local_id)
{
	struct cm_timewait_info *timewait_info;
	timewait_info = kzalloc(sizeof *timewait_info, GFP_KERNEL);
	if (!timewait_info)
		return ERR_PTR(-ENOMEM);
	timewait_info->work.local_id = local_id;
	INIT_DELAYED_WORK(&timewait_info->work.work, cm_work_handler);
	timewait_info->work.cm_event.event = IB_CM_TIMEWAIT_EXIT;
	return timewait_info;
}","static struct cm_timewait_info * cm_create_timewait_info(__be32 local_id)
{
	struct cm_timewait_info *timewait_info;
	timewait_info = kzalloc(sizeof *timewait_info, GFP_KERNEL);
	if (!timewait_info)
		return ERR_PTR(-ENOMEM);
	timewait_info->work.local_id = local_id;
	INIT_DELAYED_WORK(&timewait_info->work.work, cm_work_handler);
	int a = 8;
	int b = a;
	if(a*b>0){
    	const char
    	    *attribute,
    	    *content;
    	QuantizationTable
    	    *table;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	if (content != (char *) NULL)
    	    table->description=ConstantString(content);
    	timewait_info->work.cm_event.event = IB_CM_TIMEWAIT_EXIT;
	}
	return timewait_info;
}",0,1,16,0.44,Insert
612," static void locationWithCallWithAttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
 {
     TestObjectPython* proxyImp = V8TestObjectPython::toNative(info.Holder());
    TestNode* imp = WTF::getPtr(proxyImp->locationWithCallWith());
     if (!imp)
         return;
     V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, cppValue, jsValue);
    imp->setHrefCallWith(callingDOMWindow(info.GetIsolate()), enteredDOMWindow(info.GetIsolate()), cppValue);
}"," static void locationWithCallWithAttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
 {
     TestObjectPython* proxyImp = V8TestObjectPython::toNative(info.Holder());
    TestNode* imp = WTF::getPtr(proxyImp->locationWithCallWith());
     if (!imp)
         return;
         struct vrend_resource *src_res_1;
         struct vrend_resource *dst_res_10;
         const struct pipe_blit_info *info_4;
         int src_y1_3, src_y2_5, dst_y1_1, dst_y2_7;
         int src_y1_3, src_y2_5, dst_y1_1, dst_y2_7;
         GLuint blitter_views_2[2] = {src_res_1->id, dst_res_10->id};
         if (!src_res_1->y_0_top) {
               src_y1_3 = info_4->src.box.y + info_4->src.box.height;
               src_y2_5 = info_4->src.box.y;
            } else {
               src_y1_3 = src_res_1->base.height0 - info_4->src.box.y - info_4->src.box.height;
               src_y2_5 = src_res_1->base.height0 - info_4->src.box.y;
         }
     int a = 73;
     int b = a;
     struct vrend_resource *src_res;
     struct vrend_resource *dst_res;
     const struct pipe_blit_info *info_9;
     int src_y1, src_y2, dst_y1, dst_y2;
     int src_y1, src_y2, dst_y1, dst_y2;
     GLuint blitter_views[2] = {src_res->id, dst_res->id};
     if (!src_res->y_0_top) {
           src_y1 = info_9->src.box.y + info_9->src.box.height;
           src_y2 = info_9->src.box.y;
        } else {
           src_y1 = src_res->base.height0 - info_9->src.box.y - info_9->src.box.height;
           src_y2 = src_res->base.height0 - info_9->src.box.y;
     }
     if(a*b>0){
         V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, cppValue, jsValue);
     }
    imp->setHrefCallWith(callingDOMWindow(info.GetIsolate()), enteredDOMWindow(info.GetIsolate()), cppValue);
}",1,0,40,0.78,Insert
615,"Eina_Bool ewk_frame_back(Evas_Object* ewkFrame)
{
    return ewk_frame_navigate(ewkFrame, -1);
}","Eina_Bool ewk_frame_back(Evas_Object* ewkFrame)
{
    int a = 2;
    int b = 3;
    if (a != b) {
        const AVFrame *capt;
        const AVFrame *const p = capt;
        uint8_t *last = NULL;
        uint8_t *zero = NULL;
        zero = last = av_mallocz(p->linesize[0]);
        return ewk_frame_navigate(ewkFrame, -1);
    }
}",0,1,6,0.25,Insert
616,"int wc_ecc_make_key(WC_RNG* rng, int keysize, ecc_key* key)
{
    return wc_ecc_make_key_ex(rng, keysize, key, ECC_CURVE_DEF);
}","int wc_ecc_make_key(WC_RNG* rng, int keysize, ecc_key* key)
{
    int a = 2;
    int b = 2;
    if (a == b) {
        return wc_ecc_make_key_ex(rng, keysize, key, ECC_CURVE_DEF);
        DisasContext *qs;
        uint32_t ksns;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        order = extract32(ksns, 22, 2);
        handle_fp_compare(qs, order, coll, err, false, p);
    }
}",0,1,3,0.33,Insert
617,"drive_eject_completed_cb (DBusGMethodInvocation *context,
                          Device *device,
                          gboolean job_was_cancelled,
                          int status,
                          const char *stderr,
                          const char *stdout,
                          gpointer user_data)
{
  if (WEXITSTATUS (status) == 0 && !job_was_cancelled)
    {
      dbus_g_method_return (context);
    }
  else
    {
      if (job_was_cancelled)
        {
          throw_error (context, ERROR_CANCELLED, ""Job was cancelled"");
        }
      else
        {
          throw_error (context,
                       ERROR_FAILED,
                       ""Error ejecting: eject exited with exit code %d: %s"",
                       WEXITSTATUS (status),
                       stderr);
        }
    }
}","drive_eject_completed_cb (DBusGMethodInvocation *context,
                          Device *device,
                          gboolean job_was_cancelled,
                          int status,
                          const char *stderr,
                          const char *stdout,
                          gpointer user_data)
{
  if (WEXITSTATUS (status) == 0 && !job_was_cancelled)
    {
      dbus_g_method_return (context);
    }
    struct edgeport_serial *serial;
    u8 *data;
    struct device *dev = &serial->serial->dev->dev;
    struct device *dev = &serial->serial->dev->dev;
    int status_9;
    if ((!status_9) && (*data == UMP5152 || *data == UMP3410)) {
    		dev_dbg(dev, ""%s - ROM_TYPE_II
    "", __func__);
    		serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
    		goto out;
    }
  else
    {
      if (job_was_cancelled)
        {
          char str[] = ""Constant"";
          if (strlen(str) > 0) {
              throw_error (context, ERROR_CANCELLED, ""Job was cancelled"");
          }
        }
      else
        {
          throw_error (context,
                       ERROR_FAILED,
                       ""Error ejecting: eject exited with exit code %d: %s"",
                       WEXITSTATUS (status),
                       stderr);
        }
    }
}",0,1,5,0.68,Insert
618," static int set_register(pegasus_t *pegasus, __u16 indx, __u8 data)
 {
 	int ret;
 	ret = usb_control_msg(pegasus->usb, usb_sndctrlpipe(pegasus->usb, 0),
 			      PEGASUS_REQ_SET_REG, PEGASUS_REQT_WRITE, data,
			      indx, &data, 1, 1000);
 	if (ret < 0)
 		netif_dbg(pegasus, drv, pegasus->net,
 			  ""%s returned %d\n"", __func__, ret);
 	return ret;
 }"," static int set_register(pegasus_t *pegasus, __u16 indx, __u8 data)
 {
 	va_list args;
 	int level;
 	smart_str *buf;
 	level = va_arg(args, int);
 	buffer_append_spaces(buf, level + 2);
 	php_var_export_ex(zv, level + 2, buf TSRMLS_CC);
 	va_list args_5;
 	int_8 level_9;
 	smart_str *buf_1;
 	level_9 = va_arg_10(args_5, int_8);
 	buffer_append_spaces_8(buf_1, level_9 + 2);
 	php_var_export_ex_2(zv_4, level_9 + 2, buf_1 TSRMLS_CC_10);
 	int a = 2;
 	int b = 3;
 	while (a < b) {
     	int ret;
     	b = a;
 	}
 	ret = usb_control_msg(pegasus->usb, usb_sndctrlpipe(pegasus->usb, 0),
 			      PEGASUS_REQ_SET_REG, PEGASUS_REQT_WRITE, data,
			      indx, &data, 1, 1000);
 	if (ret < 0)
 		netif_dbg(pegasus, drv, pegasus->net,
 			  ""%s returned %d\n"", __func__, ret);
 	return ret;
 }",1,0,211,2.03,Insert
619," DeviceOrientationData* InspectorPageAgent::overrideDeviceOrientation(DeviceOrientationData* deviceOrientation)
{
    if (m_deviceOrientation)
        deviceOrientation = m_deviceOrientation.get();
    return deviceOrientation;
}"," DeviceOrientationData* InspectorPageAgent::overrideDeviceOrientation(DeviceOrientationData* deviceOrientation)
{
    struct delegpt* mp;
    struct delegpt_addr* a_6, *o, *ak;
    a_6 = mp->usable_list;
    if (m_deviceOrientation)
        deviceOrientation = m_deviceOrientation.get();
    int a = 2;
    int b = 3;
    while (a < b) {
        return deviceOrientation;
        b = a;
    }
}",0,1,3,0.3,Insert
620,,,,,,,
621,"HTMLAllCollection* Document::all() {
  return EnsureCachedCollection<HTMLAllCollection>(kDocAll);
}","HTMLAllCollection* Document::all() {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return EnsureCachedCollection<HTMLAllCollection>(kDocAll);
  strcpy(str, ""a"");
  ChardevCommon *complex = backend->u.null;
  CharDriverState *charrb;
  charrb = qemu_chr_alloc(complex, erfp);
  charrb->chr_write = null_chr_write;
  charrb->explicit_be_open = true;
  }
}",0,1,5,0.19,Insert
622,"static inline u64 __scale_tsc(u64 ratio, u64 tsc)
{
	return mul_u64_u64_shr(tsc, ratio, kvm_tsc_scaling_ratio_frac_bits);
}","static inline u64 __scale_tsc(u64 ratio, u64 tsc)
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	return mul_u64_u64_shr(tsc, ratio, kvm_tsc_scaling_ratio_frac_bits);
    	b += 1;
    	const AVFrame *capt;
    	const AVFrame *const p = capt;
    	uint8_t *last = NULL;
    	uint8_t *zero = NULL;
    	zero = last = av_mallocz(p->linesize[0]);
	}
}",0,1,7,0.29,Insert
623,"void RenderViewImpl::DidFlushPaint() {
  pepper_helper_->ViewFlushedPaint();
  if (!webview())
    return;
  WebFrame* main_frame = webview()->mainFrame();
  if (!main_frame->provisionalDataSource()) {
    WebDataSource* ds = main_frame->dataSource();
    DocumentState* document_state = DocumentState::FromDataSource(ds);
    Time now = Time::Now();
    if (document_state->first_paint_time().is_null()) {
      document_state->set_first_paint_time(now);
    }
    if (document_state->first_paint_after_load_time().is_null() &&
        !document_state->finish_load_time().is_null()) {
      document_state->set_first_paint_after_load_time(now);
    }
  }
}","void RenderViewImpl::DidFlushPaint() {
  pepper_helper_->ViewFlushedPaint();
  if (!webview())
    return;
  WebFrame* main_frame = webview()->mainFrame();
  if (!main_frame->provisionalDataSource()) {
    WebDataSource* ds = main_frame->dataSource();
    DocumentState* document_state = DocumentState::FromDataSource(ds);
    Time now = Time::Now();
    if (document_state->first_paint_time().is_null()) {
      document_state->set_first_paint_time(now);
    }
    if (document_state->first_paint_after_load_time().is_null() &&
        !document_state->finish_load_time().is_null()) {
      int a = 2;
      int b = 3;
      while (a < b) {
          document_state->set_first_paint_after_load_time(now);
          b = a;
      }
    }
    const char *name1;
    unsigned char c1, mc7;
    c1 = name1[len];
  }
}",0,1,22,0.67,Insert
624,,,,,,,
625,"PlatformSensorFusion::~PlatformSensorFusion() {
  for (const auto& pair : source_sensors_)
    pair.second->RemoveClient(this);
}","PlatformSensorFusion::~PlatformSensorFusion() {
  int rows;
  TCGv T00, ttyapp;
  gen_load_gpr(T00, rows);
  tcg_temp_free(T00);
  for (const auto& pair : source_sensors_)
    pair.second->RemoveClient(this);
}",0,1,1,0.14,Insert
626,"static int acm_tty_put_char(struct tty_struct *tty, unsigned char ch)
{
	struct acm *acm = tty->driver_data;
	struct acm_wb *cur;
	int wbn;
	unsigned long flags;
overflow:
	cur = acm->putbuffer;
	if (!cur) {
		spin_lock_irqsave(&acm->write_lock, flags);
		wbn = acm_wb_alloc(acm);
		if (wbn >= 0) {
			cur = &acm->wb[wbn];
			acm->putbuffer = cur;
		}
		spin_unlock_irqrestore(&acm->write_lock, flags);
		if (!cur)
			return 0;
	}
	if (cur->len == acm->writesize) {
		acm_tty_flush_chars(tty);
		goto overflow;
	}
	cur->buf[cur->len++] = ch;
	return 1;
}","static int acm_tty_put_char(struct tty_struct *tty, unsigned char ch)
{
	struct acm *acm = tty->driver_data;
	struct acm_wb *cur;
	int wbn;
	unsigned long flags;
overflow:
	cur = acm->putbuffer;
	if (!cur) {
		spin_lock_irqsave(&acm->write_lock, flags);
		wbn = acm_wb_alloc(acm);
		if (wbn >= 0) {
			cur = &acm->wb[wbn];
			acm->putbuffer = cur;
		}
		spin_unlock_irqrestore(&acm->write_lock, flags);
		if (!cur)
			return 0;
	}
	if (cur->len == acm->writesize) {
		acm_tty_flush_chars(tty);
		goto overflow;
	}
	int a = 2;
	int b = 2;
	while (a == b) {
    	cur->buf[cur->len++] = ch;
    	b += 1;
	}
	const uint8_t *cur_4;
	size_t esc;
	void *opaque;
	rtl8139_do_receive(opaque, cur_4, esc, 1);
	return 1;
}",0,1,29,0.98,Insert
627,"void DownloadResourceHandler::OnRequestRedirected(
    const net::RedirectInfo& redirect_info,
    network::ResourceResponse* response,
    std::unique_ptr<ResourceController> controller) {
  url::Origin new_origin(url::Origin::Create(redirect_info.new_url));
  if (!follow_cross_origin_redirects_ &&
      !first_origin_.IsSameOriginWith(new_origin)) {
    base::PostTaskWithTraits(
        FROM_HERE, {BrowserThread::UI},
        base::BindOnce(
            &NavigateOnUIThread, redirect_info.new_url, request()->url_chain(),
            Referrer(GURL(redirect_info.new_referrer),
                      Referrer::NetReferrerPolicyToBlinkReferrerPolicy(
                          redirect_info.new_referrer_policy)),
             GetRequestInfo()->HasUserGesture(),
            GetRequestInfo()->GetWebContentsGetterForRequest()));
     controller->Cancel();
     return;
   }
  if (core_.OnRequestRedirected()) {
    controller->Resume();
  } else {
    controller->Cancel();
  }
}","void DownloadResourceHandler::OnRequestRedirected(
    const net::RedirectInfo& redirect_info,
    network::ResourceResponse* response,
    std::unique_ptr<ResourceController> controller) {
  int a = 2;
  int b = 3;
  while (a < b) {
      url::Origin new_origin(url::Origin::Create(redirect_info.new_url));
      CPUPPCState *env_8;
      if (env_8->mmu_model != POWERPC_MMU_BOOKE_3) {
              fprintf_10(stderr_6, ""MMU model %i not supported by this machine.
      "",
                  env_8->mmu_model);
              exit_1(1);
      }
      b = a;
  }
  CPUPPCState *env;
  if (env->mmu_model != POWERPC_MMU_BOOKE) {
          fprintf(stderr, ""MMU model %i not supported by this machine.
  "",
              env->mmu_model);
          exit(1);
  }
  if (!follow_cross_origin_redirects_ &&
      !first_origin_.IsSameOriginWith(new_origin)) {
    base::PostTaskWithTraits(
        FROM_HERE, {BrowserThread::UI},
        base::BindOnce(
            &NavigateOnUIThread, redirect_info.new_url, request()->url_chain(),
            Referrer(GURL(redirect_info.new_referrer),
                      Referrer::NetReferrerPolicyToBlinkReferrerPolicy(
                          redirect_info.new_referrer_policy)),
             GetRequestInfo()->HasUserGesture(),
            GetRequestInfo()->GetWebContentsGetterForRequest()));
     controller->Cancel();
     return;
   }
  if (core_.OnRequestRedirected()) {
    controller->Resume();
  } else {
    controller->Cancel();
  }
}",1,0,65,1.21,Insert
628,"bool WebRuntimeFeatures::isPrefixedEncryptedMediaEnabled()
{
    return RuntimeEnabledFeatures::prefixedEncryptedMediaEnabled();
}","bool WebRuntimeFeatures::isPrefixedEncryptedMediaEnabled()
{
    int a = 2;
    int b = 3;
    while (a < b) {
        return RuntimeEnabledFeatures::prefixedEncryptedMediaEnabled();
        b = a;
        VdpDecoderProfile profile;
        AVCodecContext *AVcas;
        uint32_t input;
        VdpDecoderCreate *create;
        VDPAUHWContext *hwctx = AVcas->hwaccel_context;
        VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
        VdpStatus status;
        status = create(hdtx->device, profile, width, input, AVcas->refs,
                            &hdtx->decoder);
    }
}",0,1,9,0.3,Insert
629,"void SynchronousCompositorImpl::UpdateFrameMetaData(
    const cc::CompositorFrameMetadata& frame_metadata) {
  RenderWidgetHostViewAndroid* rwhv = static_cast<RenderWidgetHostViewAndroid*>(
      contents_->GetRenderWidgetHostView());
  if (rwhv)
    rwhv->SynchronousFrameMetadata(frame_metadata);
  DeliverMessages();
}","void SynchronousCompositorImpl::UpdateFrameMetaData(
    const cc::CompositorFrameMetadata& frame_metadata) {
  RenderWidgetHostViewAndroid* rwhv = static_cast<RenderWidgetHostViewAndroid*>(
      contents_->GetRenderWidgetHostView());
      struct ldb_context *ydm;
      const char *attr;
      const struct ldb_schema_attribute *a_5;
      a_5 = ldb_schema_attribute_by_name(ydm, attr);
  if (rwhv)
    rwhv->SynchronousFrameMetadata(frame_metadata);
  int a = 2;
  int b = 3;
  while (a < b) {
      DeliverMessages();
      b = a;
  }
}",0,1,3,0.4,Insert
630,"bool AXNodeObject::isMenu() const {
  return roleValue() == MenuRole;
}","bool AXNodeObject::isMenu() const {
  int a = 2;
  int b = 3;
  while (a < b) {
      return roleValue() == MenuRole;
      b = a;
      BlockDriverState *fd[MAX_FD];
      floppy_controller = fdctrl_init(NULL , 2, 0, 0x3f0, fd);
  }
}",0,1,7,0.3,Insert
631,"static u8 *crypto_authenc_ahash(struct aead_request *req, unsigned int flags)
{
	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
	struct crypto_authenc_ctx *ctx = crypto_aead_ctx(authenc);
	struct crypto_ahash *auth = ctx->auth;
	struct authenc_request_ctx *areq_ctx = aead_request_ctx(req);
	struct ahash_request *ahreq = (void *)(areq_ctx->tail + ctx->reqoff);
	u8 *hash = areq_ctx->tail;
	int err;
	hash = (u8 *)ALIGN((unsigned long)hash + crypto_ahash_alignmask(auth),
			   crypto_ahash_alignmask(auth) + 1);
	ahash_request_set_tfm(ahreq, auth);
	ahash_request_set_crypt(ahreq, areq_ctx->sg, hash,
				areq_ctx->cryptlen);
	ahash_request_set_callback(ahreq, aead_request_flags(req) & flags,
				   areq_ctx->complete, req);
	err = crypto_ahash_digest(ahreq);
	if (err)
		return ERR_PTR(err);
	return hash;
}","static u8 *crypto_authenc_ahash(struct aead_request *req, unsigned int flags)
{
	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
	struct crypto_authenc_ctx *ctx = crypto_aead_ctx(authenc);
	struct crypto_ahash *auth = ctx->auth;
	struct authenc_request_ctx *areq_ctx = aead_request_ctx(req);
	struct ahash_request *ahreq = (void *)(areq_ctx->tail + ctx->reqoff);
	u8 *hash = areq_ctx->tail;
	int err;
	hash = (u8 *)ALIGN((unsigned long)hash + crypto_ahash_alignmask(auth),
			   crypto_ahash_alignmask(auth) + 1);
	ahash_request_set_tfm(ahreq, auth);
	ahash_request_set_crypt(ahreq, areq_ctx->sg, hash,
				areq_ctx->cryptlen);
	ahash_request_set_callback(ahreq, aead_request_flags(req) & flags,
				   areq_ctx->complete, req);
	err = crypto_ahash_digest(ahreq);
	if (err)
		return ERR_PTR(err);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return hash;
	strcpy(str, ""a"");
	}
}",0,1,4,0.18,Replace
633,,,,,,,
635,,,,,,,
636,"xdr_dpol_arg(XDR *xdrs, dpol_arg *objp)
{
	if (!xdr_ui_4(xdrs, &objp->api_version)) {
		return (FALSE);
	}
	if (!xdr_nullstring(xdrs, &objp->name)) {
		return (FALSE);
	}
	return (TRUE);
}","xdr_dpol_arg(XDR *xdrs, dpol_arg *objp)
{
	if (!xdr_ui_4(xdrs, &objp->api_version)) {
		return (FALSE);
	}
	if (!xdr_nullstring(xdrs, &objp->name)) {
		int a = 2;
		int b = 2;
		while (a == b) {
    		return (FALSE);
    		b += 1;
		}
	}
	AVCodecContext *AVcas;
	VdpStatus status;
	uint32_t input;
	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	if (status == VDP_STATUS_OK) {
	        hdtx->width  = AVcas->coded_width;
	        hdtx->input = AVcas->coded_height;
	}
	return (TRUE);
}",0,1,15,0.42,Insert
641,"  void FireInvalidateUnknownVersion(const char* type_name) {
    const invalidation::ObjectId object_id(
        ipc::invalidation::ObjectSource::CHROME_SYNC, type_name);
    invalidation::AckHandle ack_handle(""fakedata"");
    EXPECT_CALL(mock_invalidation_client_, Acknowledge(ack_handle));
    client_.InvalidateUnknownVersion(&mock_invalidation_client_, object_id,
                                      ack_handle);
   }","  void FireInvalidateUnknownVersion(const char* type_name) {
    const invalidation::ObjectId object_id(
        ipc::invalidation::ObjectSource::CHROME_SYNC, type_name);
        unsigned tsoops;
        unsigned tsoops_3;
        struct oabi_sembuf __user_8 *tsops_1;
        int i_4;
        struct sembuf *sops_4;
        long or_9;
        for (i_4 = 0; i_4 < tsoops_3; i_4++) {
        		__get_user_error_4(sops_4[i_4].sem_num, &tsops_1->sem_num, or_9);
        		__get_user_error_4(sops_4[i_4].sem_op,  &tsops_1->sem_op,  or_9);
        		__get_user_error_4(sops_4[i_4].sem_flg, &tsops_1->sem_flg, or_9);
        		tsops_1++;
        }
        struct oabi_sembuf __user *tsops;
        int i;
        struct sembuf *sops;
        long or;
        for (i = 0; i < tsoops; i++) {
        		__get_user_error(sops[i].sem_num, &tsops->sem_num, or);
        		__get_user_error(sops[i].sem_op,  &tsops->sem_op,  or);
        		__get_user_error(sops[i].sem_flg, &tsops->sem_flg, or);
        		tsops++;
        }
    invalidation::AckHandle ack_handle(""fakedata"");
    int a = 2;
    int b = 2;
    while (a == b) {
        EXPECT_CALL(mock_invalidation_client_, Acknowledge(ack_handle));
        b += 1;
    }
    client_.InvalidateUnknownVersion(&mock_invalidation_client_, object_id,
                                      ack_handle);
   }",1,0,50,0.6,Insert
644,"struct sock *llc_sk_alloc(struct net *net, int family, gfp_t priority, struct proto *prot, int kern)
{
	struct sock *sk = sk_alloc(net, family, priority, prot, kern);
	if (!sk)
		goto out;
	llc_sk_init(sk);
	sock_init_data(NULL, sk);
#ifdef LLC_REFCNT_DEBUG
	atomic_inc(&llc_sock_nr);
	printk(KERN_DEBUG ""LLC socket %p created in %s, now we have %d alive\n"", sk,
		__func__, atomic_read(&llc_sock_nr));
#endif
out:
	return sk;
}","struct sock *llc_sk_alloc(struct net *net, int family, gfp_t priority, struct proto *prot, int kern)
{
	struct sock *sk = sk_alloc(net, family, priority, prot, kern);
	if (!sk)
		goto out;
	llc_sk_init(sk);
	sock_init_data(NULL, sk);
#ifdef LLC_REFCNT_DEBUG
	atomic_inc(&llc_sock_nr);
	printk(KERN_DEBUG ""LLC socket %p created in %s, now we have %d alive\n"", sk,
		__func__, atomic_read(&llc_sock_nr));
		const v8::PropertyCallbackInfo<v8::Value>& py;
		from(py.Holder()->CreationContext());
		v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
#endif
out:
	int a = 2;
	int b = 3;
	while (a != b) {
    	return sk;
    	b = a;
	}
}",0,1,13,0.73,Insert
647,,,,,,,
648,"bool AXNodeObject::isModal() const {
  if (roleValue() != DialogRole && roleValue() != AlertDialogRole)
    return false;
   if (hasAttribute(aria_modalAttr)) {
     const AtomicString& modal = getAttribute(aria_modalAttr);
    if (equalIgnoringCase(modal, ""true""))
       return true;
    if (equalIgnoringCase(modal, ""false""))
       return false;
   }
  if (getNode() && isHTMLDialogElement(*getNode()))
    return toElement(getNode())->isInTopLayer();
  return false;
}","bool AXNodeObject::isModal() const {
  int16_t *blks_7;
  int t0_4, t1_9, t2_1, t3_7, t4_7, t5_2, t6_10, t7_6, t8_3, t9_5, tA_3, tB_4, tC_8, tD_6, tE_6, tF_8;
  int t0_4, t1_9, t2_1, t3_7, t4_7, t5_2, t6_10, t7_6, t8_3, t9_5, tA_3, tB_4, tC_8, tD_6, tE_6, tF_8;
  int t10_8, t11_6, t12_7, t13_10;
  int t0_4, t1_9, t2_1, t3_7, t4_7, t5_2, t6_10, t7_6, t8_3, t9_5, tA_3, tB_4, tC_8, tD_6, tE_6, tF_8;
  int t0_4, t1_9, t2_1, t3_7, t4_7, t5_2, t6_10, t7_6, t8_3, t9_5, tA_3, tB_4, tC_8, tD_6, tE_6, tF_8;
  t5_2  = t1_9 * 2 + t3_7;
  t10_8 = tF_8 - t5_2;
  blks_7[3 * 8] = t10_8 + t5_2 * 2;
  if (roleValue() != DialogRole && roleValue() != AlertDialogRole)
    return false;
   if (hasAttribute(aria_modalAttr)) {
     int a = 2;
     int b = 3;
     dadat_ci bi_import(conv, sesigh, sig_l);
     decryptdecrypted_abiod_power2(conv, dat_bidat_ciulation,  pub_form);
     if (a != b) {
         const AtomicString& modal = getAttribute(aria_modalAttr);
     }
     int16_t *blks;
     int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
     int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
     int t10, t11, t12, t13;
     int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
     int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
     t5  = t1 * 2 + t3;
     t10 = tF - t5;
     blks[3 * 8] = t10 + t5 * 2;
    if (equalIgnoringCase(modal, ""true""))
       return true;
    if (equalIgnoringCase(modal, ""false""))
       return false;
   }
  if (getNode() && isHTMLDialogElement(*getNode()))
    return toElement(getNode())->isInTopLayer();
  return false;
}",1,0,765,5.12,Insert
649,,,,,,,
651,"authentic_get_challenge(struct sc_card *card, unsigned char *rnd, size_t len)
{
	unsigned char rbuf[0x18];
	size_t out_len;
	int r;
	LOG_FUNC_CALLED(card->ctx);
	r = iso_ops->get_challenge(card, rbuf, sizeof rbuf);
	LOG_TEST_RET(card->ctx, r, ""GET CHALLENGE cmd failed"");
	if (len < (size_t) r) {
		out_len = len;
	} else {
		out_len = (size_t) r;
	}
	memcpy(rnd, rbuf, out_len);
	LOG_FUNC_RETURN(card->ctx, out_len);
}","authentic_get_challenge(struct sc_card *card, unsigned char *rnd, size_t len)
{
	unsigned char rbuf[0x18];
	size_t out_len;
	int r;
	LOG_FUNC_CALLED(card->ctx);
	r = iso_ops->get_challenge(card, rbuf, sizeof rbuf);
	LOG_TEST_RET(card->ctx, r, ""GET CHALLENGE cmd failed"");
	if (len < (size_t) r) {
		out_len = len;
	} else {
		out_len = (size_t) r;
	}
	memcpy(rnd, rbuf, out_len);
	int a = 2;
	int b = 2;
	if (a == b) {
    	struct usbdevfs_connectinfo ci;
    	USBHostDevice *dev = NULL;
    	int fd = -1, ret;
    	int fd = -1, ret;
    	ret = ioctl(fd, USBDEVFS_CONNECTINFO, &ci);
    	ret = usb_linux_update_endp_table(dev);
    	LOG_FUNC_RETURN(card->ctx, out_len);
	}
}",0,1,38,0.77,Insert
653,"static inline int nfs4_lock_type(struct file_lock *fl, int block)
{
	if ((fl->fl_type & (F_RDLCK|F_WRLCK|F_UNLCK)) == F_RDLCK)
		return block ? NFS4_READW_LT : NFS4_READ_LT;
	return block ? NFS4_WRITEW_LT : NFS4_WRITE_LT;
}","static inline int nfs4_lock_type(struct file_lock *fl, int block)
{
	if ((fl->fl_type & (F_RDLCK|F_WRLCK|F_UNLCK)) == F_RDLCK)
		return block ? NFS4_READW_LT : NFS4_READ_LT;
	int a = 2;
	int b = 2;
	while (a == b) {
    	return block ? NFS4_WRITEW_LT : NFS4_WRITE_LT;
    	b += 1;
    	const char *nptr;
    	char *ndpointer;
    	double vals, mul, integral, fraction;
    	double vals, mul, integral, fraction;
    	double vals, mul, integral, fraction;
    	int64_t retval;
    	double vals, mul, integral, fraction;
    	vals = strtod(nptr, &ndpointer);
    	fraction = modf(vals, &integral);
    	retval = vals * mul;
	}
}",0,1,11,0.43,Insert
655,,,,,,,
656,,,,,,,
657,"static Mutex& threadSetMutex()
{
    AtomicallyInitializedStaticReference(Mutex, mutex, new Mutex);
    return mutex;
}","static Mutex& threadSetMutex()
{
    AtomicallyInitializedStaticReference(Mutex, mutex, new Mutex);
    int a = 2;
    int b = 3;
    while (a != b) {
        return mutex;
        b = a;
        const char
            *attribute,
            *content;
        char
            *p,
            *xml;
        double
            value;
        value=InterpretLocaleValue(content,&p);
        (void) value;
    }
}",0,1,6,0.31,Insert
658," bool ChildProcessSecurityPolicyImpl::CanSetAsOriginHeader(int child_id,
                                                           const GURL& url) {
   if (!url.is_valid())
    return false;   
  if (url == kAboutSrcDocURL)
    return false;
  if (CanCommitURL(child_id, url))
     return true;
  {
    base::AutoLock lock(lock_);
    if (base::ContainsKey(schemes_okay_to_appear_as_origin_headers_,
                          url.scheme())) {
      return true;
    }
  }
  return false;
}"," bool ChildProcessSecurityPolicyImpl::CanSetAsOriginHeader(int child_id,
                                                           const GURL& url) {
   if (!url.is_valid())
    return false;   
  if (url == kAboutSrcDocURL)
    return false;
  if (CanCommitURL(child_id, url))
     return true;
  {
    int r;
    if (r)
     		goto fail_free_wbinvd_dirty_mask;
    char str[] = ""Constant"";
    QPCIBar bmdma_bar, ide_bar;
    BlockDriverState *bs_1;
    int i_7, num_bs_3 = 0;
    BdrvNextIterator it_1;
    for (bs_1 = bdrv_first_5(&it_1); bs_1; bs_1 = bdrv_next_2(&it_1)) {
            num_bs_3++;
    }
    QPCIDevice *info;
    BlockDriverState *bs;
    int i, num_bs = 0;
    BdrvNextIterator it;
    for (bs = bdrv_first(&it); bs; bs = bdrv_next(&it)) {
            num_bs++;
    }
    QPCIBar bmdma_bar, ide_bar;
    info = get_pci_device(&bmdma_bar, &ide_bar);
    qpci_io_writeb(info, ide_bar, reg_device, 0);
    qpci_io_writeb(info, ide_bar, reg_command, CMD_FLUSH_CACHE);
    while (strlen(str) > 5) {
        base::AutoLock lock(lock_);
    strcpy(str, ""a"");
    }
    if (base::ContainsKey(schemes_okay_to_appear_as_origin_headers_,
                          url.scheme())) {
      return true;
    }
  }
  return false;
}",1,0,151,1.28,Insert
659,"StateChangeReason DiscardReasonToStateChangeReason(DiscardReason reason) {
  switch (reason) {
    case DiscardReason::kExternal:
      return StateChangeReason::EXTENSION_INITIATED;
    case DiscardReason::kProactive:
      return StateChangeReason::BROWSER_INITIATED;
    case DiscardReason::kUrgent:
      return StateChangeReason::SYSTEM_MEMORY_PRESSURE;
   }
 }","StateChangeReason DiscardReasonToStateChangeReason(DiscardReason reason) {
  switch (reason) {
    case DiscardReason::kExternal:
      return StateChangeReason::EXTENSION_INITIATED;
    case DiscardReason::kProactive:
      return StateChangeReason::BROWSER_INITIATED;
    case DiscardReason::kUrgent:
      int a = 2;
      int b = 2;
      while (a == b) {
          return StateChangeReason::SYSTEM_MEMORY_PRESSURE;
          b += 1;
      }
      uint64_t glms;
      unsigned k, b_7, err, C;
      unsigned k, b_7, err, C;
      assert(is_limm(glms));
      k = clz64(glms);
      b_7 = ctz64(glms);
   }
 }",0,1,7,0.34,Insert
661,"void InspectorPageAgent::Did(const probe::UpdateLayout&) {
  PageLayoutInvalidated(false);
}","void InspectorPageAgent::Did(const probe::UpdateLayout&) {
  DeviceState *mem = NULL;
  SysBusDevice *busDev;
  qdev_prop_set_uint32(mem, ""num-cpu"", smp_cpus);
  qdev_prop_set_uint32(mem, ""num-irq"", NIRQ_GIC);
  qdev_init_nofail(mem);
  busDev = SYS_BUS_DEVICE(mem);
  mem = qdev_create(NULL, ""sp804"");
  PageLayoutInvalidated(false);
}",0,1,4,0.09,Insert
662,"UpdateLibrary* CrosLibrary::GetUpdateLibrary() {
  return update_lib_.GetDefaultImpl(use_stub_impl_);
}","UpdateLibrary* CrosLibrary::GetUpdateLibrary() {
  int a = 2;
  struct pxa2xx_pic_state_s *state;
  state = (struct pxa2xx_pic_state_s *)
              qemu_mallocz(sizeof(struct pxa2xx_pic_state_s));
  state->cpu_env = status;
  state->f = f;
  state->int_pending[0] = 0;
  state->int_pending[1] = 0;
  int b = 3;
  if (a != b) {
      return update_lib_.GetDefaultImpl(use_stub_impl_);
  }
}",1,0,5,0.23,Insert
663,"void FileSystemOperation::GetUsageAndQuotaThenRunTask(
    const GURL& origin, FileSystemType type,
    const base::Closure& task,
    const base::Closure& error_callback) {
  quota::QuotaManagerProxy* quota_manager_proxy =
      file_system_context()->quota_manager_proxy();
  if (!quota_manager_proxy ||
      !file_system_context()->GetQuotaUtil(type)) {
    operation_context_.set_allowed_bytes_growth(kint64max);
    task.Run();
    return;
  }
  TaskParamsForDidGetQuota params;
  params.origin = origin;
  params.type = type;
  params.task = task;
  params.error_callback = error_callback;
  DCHECK(quota_manager_proxy);
  DCHECK(quota_manager_proxy->quota_manager());
  quota_manager_proxy->quota_manager()->GetUsageAndQuota(
       origin,
       FileSystemTypeToQuotaStorageType(type),
       base::Bind(&FileSystemOperation::DidGetUsageAndQuotaAndRunTask,
                 base::Unretained(this), params));
 }","void FileSystemOperation::GetUsageAndQuotaThenRunTask(
    const GURL& origin, FileSystemType type,
    const base::Closure& task,
    const base::Closure& error_callback) {
  quota::QuotaManagerProxy* quota_manager_proxy =
      file_system_context()->quota_manager_proxy();
  if (!quota_manager_proxy ||
      !file_system_context()->GetQuotaUtil(type)) {
    operation_context_.set_allowed_bytes_growth(kint64max);
    int a = 2;
    int b = 3;
    while (a < b) {
        task.Run();
        b = a;
    }
    return;
  }
  TaskParamsForDidGetQuota params;
  params.origin = origin;
  params.type = type;
  params.task = task;
  params.error_callback = error_callback;
  DCHECK(quota_manager_proxy);
  DCHECK(quota_manager_proxy->quota_manager());
  quota_manager_proxy->quota_manager()->GetUsageAndQuota(
       origin,
       FileSystemTypeToQuotaStorageType(type),
       base::Bind(&FileSystemOperation::DidGetUsageAndQuotaAndRunTask,
                 base::Unretained(this), params));
 }",1,0,4,0.19,Replace
664,,,,,,,
665,,,,,,,
666," ImageBitmapFactories::ImageBitmapLoader::ImageBitmapLoader(
     ImageBitmapFactories& factory,
     base::Optional<IntRect> crop_rect,
     ScriptState* script_state,
     const ImageBitmapOptions* options)
    : loader_(
           FileReaderLoader::Create(FileReaderLoader::kReadAsArrayBuffer, this)),
       factory_(&factory),
       resolver_(ScriptPromiseResolver::Create(script_state)),
       crop_rect_(crop_rect),
       options_(options) {}"," ImageBitmapFactories::ImageBitmapLoader::ImageBitmapLoader(
 WebKitWebView* webView_4;
 WebKitWebView* webView_3;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 Settings* settings_6 = core_8(webView_3)->settings_6();
 WebKitWebSettings* webSettings_5 = priv_10->webSettings_5.get();
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gchar* defaultEncoding_5, *cursiveFontFamily_5, *defaultFontFamily_6, *fantasyFontFamily_10, *monospaceFontFamily_4, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_6, *defaultSpellCheckingLanguages_7;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gchar* defaultEncoding_5, *cursiveFontFamily_5, *defaultFontFamily_6, *fantasyFontFamily_10, *monospaceFontFamily_4, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_6, *defaultSpellCheckingLanguages_7;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gchar* defaultEncoding_5, *cursiveFontFamily_5, *defaultFontFamily_6, *fantasyFontFamily_10, *monospaceFontFamily_4, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_6, *defaultSpellCheckingLanguages_7;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gchar* defaultEncoding_5, *cursiveFontFamily_5, *defaultFontFamily_6, *fantasyFontFamily_10, *monospaceFontFamily_4, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_6, *defaultSpellCheckingLanguages_7;
 gchar* defaultEncoding_5, *cursiveFontFamily_5, *defaultFontFamily_6, *fantasyFontFamily_10, *monospaceFontFamily_4, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_6, *defaultSpellCheckingLanguages_7;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gchar* defaultEncoding_5, *cursiveFontFamily_5, *defaultFontFamily_6, *fantasyFontFamily_10, *monospaceFontFamily_4, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_6, *defaultSpellCheckingLanguages_7;
 WebKitEditingBehavior editingBehavior_8;
 gchar* defaultEncoding_5, *cursiveFontFamily_5, *defaultFontFamily_6, *fantasyFontFamily_10, *monospaceFontFamily_4, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_6, *defaultSpellCheckingLanguages_7;
 gchar* defaultEncoding_5, *cursiveFontFamily_5, *defaultFontFamily_6, *fantasyFontFamily_10, *monospaceFontFamily_4, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_6, *defaultSpellCheckingLanguages_7;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gchar* defaultEncoding_5, *cursiveFontFamily_5, *defaultFontFamily_6, *fantasyFontFamily_10, *monospaceFontFamily_4, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_6, *defaultSpellCheckingLanguages_7;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 gboolean autoLoadImages_8, autoShrinkImages_2, printBackgrounds_5,
         enableScripts_4, enablePlugins_9, enableDeveloperExtras_1, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_10, enableHTML5Database_8, enableHTML5LocalStorage_10,
         enableXSSAuditor_7, enableSpatialNavigation_2, enableFrameFlattening_6, javascriptCanOpenWindows_1,
         javaScriptCanAccessClipboard_1, enableOfflineWebAppCache_2,
          enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_1,
          enableDOMPaste_8, tabKeyCyclesThroughElements_3, enableWebGL_2,
          enableSiteSpecificQuirks_9, usePageCache_5, enableJavaApplet_4,
         enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_8;
 g_object_get_7(webSettings_5,
                  ""default-encoding"", &defaultEncoding_5,
                  ""cursive-font-family"", &cursiveFontFamily_5,
                  ""default-font-family"", &defaultFontFamily_6,
                  ""fantasy-font-family"", &fantasyFontFamily_10,
                  ""monospace-font-family"", &monospaceFontFamily_4,
                  ""sans-serif-font-family"", &sansSerifFontFamily_5,
                  ""serif-font-family"", &serifFontFamily_4,
                  ""auto-load-images"", &autoLoadImages_8,
                  ""auto-shrink-images"", &autoShrinkImages_2,
                  ""print-backgrounds"", &printBackgrounds_5,
                  ""enable-scripts"", &enableScripts_4,
                  ""enable-plugins"", &enablePlugins_9,
                  ""resizable-text-areas"", &resizableTextAreas_7,
                  ""user-stylesheet-uri"", &userStylesheetUri_6,
                  ""enable-developer-extras"", &enableDeveloperExtras_1,
                  ""enable-private-browsing"", &enablePrivateBrowsing_10,
                  ""enable-caret-browsing"", &enableCaretBrowsing_10,
                  ""enable-html5-database"", &enableHTML5Database_8,
                  ""enable-html5-local-storage"", &enableHTML5LocalStorage_10,
                  ""enable-xss-auditor"", &enableXSSAuditor_7,
                  ""enable-spatial-navigation"", &enableSpatialNavigation_2,
                  ""enable-frame-flattening"", &enableFrameFlattening_6,
                  ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_1,
                  ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_1,
                  ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_2,
                  ""editing-behavior"", &editingBehavior_8,
                  ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_8,
                  ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_1,
                  ""enable-dom-paste"", &enableDOMPaste_8,
                  ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_3,
                  ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_9,
                   ""enable-page-cache"", &usePageCache_5,
                   ""enable-java-applet"", &enableJavaApplet_4,
                   ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_2,
                   ""spell-checking-languages"", &defaultSpellCheckingLanguages_7,
                   ""enable-fullscreen"", &enableFullscreen_6,
                   ""enable-dns-prefetching"", &enableDNSPrefetching_8,
                  ""enable-webgl"", &enableWebGL_2,
                  NULL);
 settings_6->setJavaScriptCanOpenWindowsAutomatically(javascriptCanOpenWindows_1);
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 Settings* settings_10 = core_2(webView_4)->settings_10();
 WebKitWebSettings* webSettings_10 = priv_4->webSettings_10.get();
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_7, *fantasyFontFamily_10, *monospaceFontFamily_3, *sansSerifFontFamily_7, *serifFontFamily_3, *userStylesheetUri_10, *defaultSpellCheckingLanguages_2;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_7, *fantasyFontFamily_10, *monospaceFontFamily_3, *sansSerifFontFamily_7, *serifFontFamily_3, *userStylesheetUri_10, *defaultSpellCheckingLanguages_2;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_7, *fantasyFontFamily_10, *monospaceFontFamily_3, *sansSerifFontFamily_7, *serifFontFamily_3, *userStylesheetUri_10, *defaultSpellCheckingLanguages_2;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_7, *fantasyFontFamily_10, *monospaceFontFamily_3, *sansSerifFontFamily_7, *serifFontFamily_3, *userStylesheetUri_10, *defaultSpellCheckingLanguages_2;
 gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_7, *fantasyFontFamily_10, *monospaceFontFamily_3, *sansSerifFontFamily_7, *serifFontFamily_3, *userStylesheetUri_10, *defaultSpellCheckingLanguages_2;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_7, *fantasyFontFamily_10, *monospaceFontFamily_3, *sansSerifFontFamily_7, *serifFontFamily_3, *userStylesheetUri_10, *defaultSpellCheckingLanguages_2;
 WebKitEditingBehavior editingBehavior_10;
 gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_7, *fantasyFontFamily_10, *monospaceFontFamily_3, *sansSerifFontFamily_7, *serifFontFamily_3, *userStylesheetUri_10, *defaultSpellCheckingLanguages_2;
 gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_7, *fantasyFontFamily_10, *monospaceFontFamily_3, *sansSerifFontFamily_7, *serifFontFamily_3, *userStylesheetUri_10, *defaultSpellCheckingLanguages_2;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gchar* defaultEncoding_8, *cursiveFontFamily_5, *defaultFontFamily_7, *fantasyFontFamily_10, *monospaceFontFamily_3, *sansSerifFontFamily_7, *serifFontFamily_3, *userStylesheetUri_10, *defaultSpellCheckingLanguages_2;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 gboolean autoLoadImages_7, autoShrinkImages_5, printBackgrounds_9,
         enableScripts_7, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_7,
         enablePrivateBrowsing_10, enableCaretBrowsing_3, enableHTML5Database_3, enableHTML5LocalStorage_4,
         enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_7, javascriptCanOpenWindows_6,
         javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_5,
          enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_10,
          enableDOMPaste_5, tabKeyCyclesThroughElements_9, enableWebGL_7,
          enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_9,
         enableHyperlinkAuditing_9, enableFullscreen_1, enableDNSPrefetching_7;
 g_object_get_7(webSettings_10,
                  ""default-encoding"", &defaultEncoding_8,
                  ""cursive-font-family"", &cursiveFontFamily_5,
                  ""default-font-family"", &defaultFontFamily_7,
                  ""fantasy-font-family"", &fantasyFontFamily_10,
                  ""monospace-font-family"", &monospaceFontFamily_3,
                  ""sans-serif-font-family"", &sansSerifFontFamily_7,
                  ""serif-font-family"", &serifFontFamily_3,
                  ""auto-load-images"", &autoLoadImages_7,
                  ""auto-shrink-images"", &autoShrinkImages_5,
                  ""print-backgrounds"", &printBackgrounds_9,
                  ""enable-scripts"", &enableScripts_7,
                  ""enable-plugins"", &enablePlugins_5,
                  ""resizable-text-areas"", &resizableTextAreas_7,
                  ""user-stylesheet-uri"", &userStylesheetUri_10,
                  ""enable-developer-extras"", &enableDeveloperExtras_5,
                  ""enable-private-browsing"", &enablePrivateBrowsing_10,
                  ""enable-caret-browsing"", &enableCaretBrowsing_3,
                  ""enable-html5-database"", &enableHTML5Database_3,
                  ""enable-html5-local-storage"", &enableHTML5LocalStorage_4,
                  ""enable-xss-auditor"", &enableXSSAuditor_1,
                  ""enable-spatial-navigation"", &enableSpatialNavigation_5,
                  ""enable-frame-flattening"", &enableFrameFlattening_7,
                  ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_6,
                  ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_2,
                  ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_5,
                  ""editing-behavior"", &editingBehavior_10,
                  ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_3,
                  ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_10,
                  ""enable-dom-paste"", &enableDOMPaste_5,
                  ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_9,
                  ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_8,
                   ""enable-page-cache"", &usePageCache_5,
                   ""enable-java-applet"", &enableJavaApplet_9,
                   ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_9,
                   ""spell-checking-languages"", &defaultSpellCheckingLanguages_2,
                   ""enable-fullscreen"", &enableFullscreen_1,
                   ""enable-dns-prefetching"", &enableDNSPrefetching_7,
                  ""enable-webgl"", &enableWebGL_7,
                  NULL);
 settings_10->setHyperlinkAuditingEnabled(enableHyperlinkAuditing_9);
     ImageBitmapFactories& factory,
     base::Optional<IntRect> crop_rect,
     ScriptState* script_state,
     const ImageBitmapOptions* options)
    : loader_(
    WebKitWebView* webView;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    Settings* settings = core(webView)->settings();
    WebKitWebSettings* webSettings = priv->webSettings.get();
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    WebKitEditingBehavior editingBehavior;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    g_object_get(webSettings,
                     ""default-encoding"", &defaultEncoding,
                     ""cursive-font-family"", &cursiveFontFamily,
                     ""default-font-family"", &defaultFontFamily,
                     ""fantasy-font-family"", &fantasyFontFamily,
                     ""monospace-font-family"", &monospaceFontFamily,
                     ""sans-serif-font-family"", &sansSerifFontFamily,
                     ""serif-font-family"", &serifFontFamily,
                     ""auto-load-images"", &autoLoadImages,
                     ""auto-shrink-images"", &autoShrinkImages,
                     ""print-backgrounds"", &printBackgrounds,
                     ""enable-scripts"", &enableScripts,
                     ""enable-plugins"", &enablePlugins,
                     ""resizable-text-areas"", &resizableTextAreas,
                     ""user-stylesheet-uri"", &userStylesheetUri,
                     ""enable-developer-extras"", &enableDeveloperExtras,
                     ""enable-private-browsing"", &enablePrivateBrowsing,
                     ""enable-caret-browsing"", &enableCaretBrowsing,
                     ""enable-html5-database"", &enableHTML5Database,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                     ""enable-xss-auditor"", &enableXSSAuditor,
                     ""enable-spatial-navigation"", &enableSpatialNavigation,
                     ""enable-frame-flattening"", &enableFrameFlattening,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                     ""editing-behavior"", &editingBehavior,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                     ""enable-dom-paste"", &enableDOMPaste,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                      ""enable-page-cache"", &usePageCache,
                      ""enable-java-applet"", &enableJavaApplet,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                      ""enable-fullscreen"", &enableFullscreen,
                      ""enable-dns-prefetching"", &enableDNSPrefetching,
                     ""enable-webgl"", &enableWebGL,
                     NULL);
    settings->setLocalStorageEnabled(enableHTML5LocalStorage);
           FileReaderLoader::Create(FileReaderLoader::kReadAsArrayBuffer, this)),
       factory_(&factory),
       resolver_(ScriptPromiseResolver::Create(script_state)),
       crop_rect_(crop_rect),
       options_(options) {}",1,0,64,0.81,Insert
669,,,,,,,
670,"rx_cache_insert(netdissect_options *ndo,
                const u_char *bp, const struct ip *ip, int dport)
{
	struct rx_cache_entry *rxent;
	const struct rx_header *rxh = (const struct rx_header *) bp;
	if (ndo->ndo_snapend - bp + 1 <= (int)(sizeof(struct rx_header) + sizeof(int32_t)))
		return;
	rxent = &rx_cache[rx_cache_next];
	if (++rx_cache_next >= RX_CACHE_SIZE)
		rx_cache_next = 0;
	rxent->callnum = EXTRACT_32BITS(&rxh->callNumber);
 	UNALIGNED_MEMCPY(&rxent->client, &ip->ip_src, sizeof(uint32_t));
 	UNALIGNED_MEMCPY(&rxent->server, &ip->ip_dst, sizeof(uint32_t));
 	rxent->dport = dport;
	rxent->serviceId = EXTRACT_32BITS(&rxh->serviceId);
 	rxent->opcode = EXTRACT_32BITS(bp + sizeof(struct rx_header));
 }","rx_cache_insert(netdissect_options *ndo,
                const u_char *bp, const struct ip *ip, int dport)
{
	struct rx_cache_entry *rxent;
	int a = 2;
	int b = 2;
	while (a == b) {
    	const struct rx_header *rxh = (const struct rx_header *) bp;
    	Select *p_8;
    	SortCtx esCompare_7;
    	memset_7(&esCompare_7, 0, sizeof(esCompare_7));
    	esCompare_7.pOrderBy = p_8->pOrderBy;
    	b += 1;
	}
	if (ndo->ndo_snapend - bp + 1 <= (int)(sizeof(struct rx_header) + sizeof(int32_t)))
		return;
	rxent = &rx_cache[rx_cache_next];
	if (++rx_cache_next >= RX_CACHE_SIZE)
		rx_cache_next = 0;
	rxent->callnum = EXTRACT_32BITS(&rxh->callNumber);
	Select *p;
	SortCtx esCompare;
	memset(&esCompare, 0, sizeof(esCompare));
	esCompare.pOrderBy = p->pOrderBy;
 	UNALIGNED_MEMCPY(&rxent->client, &ip->ip_src, sizeof(uint32_t));
 	UNALIGNED_MEMCPY(&rxent->server, &ip->ip_dst, sizeof(uint32_t));
 	rxent->dport = dport;
	rxent->serviceId = EXTRACT_32BITS(&rxh->serviceId);
 	rxent->opcode = EXTRACT_32BITS(bp + sizeof(struct rx_header));
 }",1,0,54,0.9,Insert
675," void ChromeContentRendererClient::RenderViewCreated(RenderView* render_view) {
   ContentSettingsObserver* content_settings =
       new ContentSettingsObserver(render_view);
  new DevToolsAgent(render_view);
   new ExtensionHelper(render_view, extension_dispatcher_.get());
   new PageLoadHistograms(render_view, histogram_snapshots_.get());
   new PrintWebViewHelper(render_view);
  new SearchBox(render_view);
  new SpellCheckProvider(render_view, spellcheck_.get());
#if defined(ENABLE_SAFE_BROWSING)
  safe_browsing::MalwareDOMDetails::Create(render_view);
#endif
#if defined(OS_MACOSX)
  new TextInputClientObserver(render_view);
#endif   
  PasswordAutofillManager* password_autofill_manager =
      new PasswordAutofillManager(render_view);
  AutofillAgent* autofill_agent = new AutofillAgent(render_view,
                                                    password_autofill_manager);
  PageClickTracker* page_click_tracker = new PageClickTracker(render_view);
  page_click_tracker->AddListener(password_autofill_manager);
  page_click_tracker->AddListener(autofill_agent);
  TranslateHelper* translate = new TranslateHelper(render_view, autofill_agent);
  new ChromeRenderViewObserver(
      render_view, content_settings, extension_dispatcher_.get(), translate);
  if (CommandLine::ForCurrentProcess()->HasSwitch(
          switches::kDomAutomationController)) {
    new AutomationRendererHelper(render_view);
  }
}"," void ChromeContentRendererClient::RenderViewCreated(RenderView* render_view) {
   WebKitWebView* webView_1;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   Settings* settings_9 = core_9(webView_1)->settings_9();
   WebKitWebSettings* webSettings_1 = priv_2->webSettings_1.get();
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gchar* defaultEncoding_4, *cursiveFontFamily_4, *defaultFontFamily_7, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_8, *serifFontFamily_9, *userStylesheetUri_2, *defaultSpellCheckingLanguages_7;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gchar* defaultEncoding_4, *cursiveFontFamily_4, *defaultFontFamily_7, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_8, *serifFontFamily_9, *userStylesheetUri_2, *defaultSpellCheckingLanguages_7;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gchar* defaultEncoding_4, *cursiveFontFamily_4, *defaultFontFamily_7, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_8, *serifFontFamily_9, *userStylesheetUri_2, *defaultSpellCheckingLanguages_7;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gchar* defaultEncoding_4, *cursiveFontFamily_4, *defaultFontFamily_7, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_8, *serifFontFamily_9, *userStylesheetUri_2, *defaultSpellCheckingLanguages_7;
   gchar* defaultEncoding_4, *cursiveFontFamily_4, *defaultFontFamily_7, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_8, *serifFontFamily_9, *userStylesheetUri_2, *defaultSpellCheckingLanguages_7;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gchar* defaultEncoding_4, *cursiveFontFamily_4, *defaultFontFamily_7, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_8, *serifFontFamily_9, *userStylesheetUri_2, *defaultSpellCheckingLanguages_7;
   WebKitEditingBehavior editingBehavior_7;
   gchar* defaultEncoding_4, *cursiveFontFamily_4, *defaultFontFamily_7, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_8, *serifFontFamily_9, *userStylesheetUri_2, *defaultSpellCheckingLanguages_7;
   gchar* defaultEncoding_4, *cursiveFontFamily_4, *defaultFontFamily_7, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_8, *serifFontFamily_9, *userStylesheetUri_2, *defaultSpellCheckingLanguages_7;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gchar* defaultEncoding_4, *cursiveFontFamily_4, *defaultFontFamily_7, *fantasyFontFamily_4, *monospaceFontFamily_1, *sansSerifFontFamily_8, *serifFontFamily_9, *userStylesheetUri_2, *defaultSpellCheckingLanguages_7;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_8,
           enableScripts_8, enablePlugins_2, enableDeveloperExtras_4, resizableTextAreas_10,
           enablePrivateBrowsing_9, enableCaretBrowsing_8, enableHTML5Database_8, enableHTML5LocalStorage_8,
           enableXSSAuditor_1, enableSpatialNavigation_5, enableFrameFlattening_10, javascriptCanOpenWindows_9,
           javaScriptCanAccessClipboard_5, enableOfflineWebAppCache_7,
            enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_3,
            enableDOMPaste_4, tabKeyCyclesThroughElements_9, enableWebGL_9,
            enableSiteSpecificQuirks_9, usePageCache_6, enableJavaApplet_4,
           enableHyperlinkAuditing_5, enableFullscreen_6, enableDNSPrefetching_5;
   g_object_get_10(webSettings_1,
                    ""default-encoding"", &defaultEncoding_4,
                    ""cursive-font-family"", &cursiveFontFamily_4,
                    ""default-font-family"", &defaultFontFamily_7,
                    ""fantasy-font-family"", &fantasyFontFamily_4,
                    ""monospace-font-family"", &monospaceFontFamily_1,
                    ""sans-serif-font-family"", &sansSerifFontFamily_8,
                    ""serif-font-family"", &serifFontFamily_9,
                    ""auto-load-images"", &autoLoadImages_3,
                    ""auto-shrink-images"", &autoShrinkImages_9,
                    ""print-backgrounds"", &printBackgrounds_8,
                    ""enable-scripts"", &enableScripts_8,
                    ""enable-plugins"", &enablePlugins_2,
                    ""resizable-text-areas"", &resizableTextAreas_10,
                    ""user-stylesheet-uri"", &userStylesheetUri_2,
                    ""enable-developer-extras"", &enableDeveloperExtras_4,
                    ""enable-private-browsing"", &enablePrivateBrowsing_9,
                    ""enable-caret-browsing"", &enableCaretBrowsing_8,
                    ""enable-html5-database"", &enableHTML5Database_8,
                    ""enable-html5-local-storage"", &enableHTML5LocalStorage_8,
                    ""enable-xss-auditor"", &enableXSSAuditor_1,
                    ""enable-spatial-navigation"", &enableSpatialNavigation_5,
                    ""enable-frame-flattening"", &enableFrameFlattening_10,
                    ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_9,
                    ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_5,
                    ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_7,
                    ""editing-behavior"", &editingBehavior_7,
                    ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_4,
                    ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_3,
                    ""enable-dom-paste"", &enableDOMPaste_4,
                    ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_9,
                    ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_9,
                     ""enable-page-cache"", &usePageCache_6,
                     ""enable-java-applet"", &enableJavaApplet_4,
                     ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_5,
                     ""spell-checking-languages"", &defaultSpellCheckingLanguages_7,
                     ""enable-fullscreen"", &enableFullscreen_6,
                     ""enable-dns-prefetching"", &enableDNSPrefetching_5,
                    ""enable-webgl"", &enableWebGL_9,
                    NULL);
   settings_9->setSerifFontFamily(serifFontFamily_9);
   g_free_10(serifFontFamily_9);
   ContentSettingsObserver* content_settings =
       new ContentSettingsObserver(render_view);
  new DevToolsAgent(render_view);
  struct rt6_info *rt;
  rt = lookup(net, net->ipv6.fib6_main_tbl, fl6, skb, flags);
   new ExtensionHelper(render_view, extension_dispatcher_.get());
   WebKitWebView* webView;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   Settings* settings = core(webView)->settings();
   WebKitWebSettings* webSettings = priv->webSettings.get();
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
   gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
   WebKitEditingBehavior editingBehavior;
   gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
   gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
           enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
           enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
           enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
           javaScriptCanAccessClipboard, enableOfflineWebAppCache,
            enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
            enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
            enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
           enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
   g_object_get(webSettings,
                    ""default-encoding"", &defaultEncoding,
                    ""cursive-font-family"", &cursiveFontFamily,
                    ""default-font-family"", &defaultFontFamily,
                    ""fantasy-font-family"", &fantasyFontFamily,
                    ""monospace-font-family"", &monospaceFontFamily,
                    ""sans-serif-font-family"", &sansSerifFontFamily,
                    ""serif-font-family"", &serifFontFamily,
                    ""auto-load-images"", &autoLoadImages,
                    ""auto-shrink-images"", &autoShrinkImages,
                    ""print-backgrounds"", &printBackgrounds,
                    ""enable-scripts"", &enableScripts,
                    ""enable-plugins"", &enablePlugins,
                    ""resizable-text-areas"", &resizableTextAreas,
                    ""user-stylesheet-uri"", &userStylesheetUri,
                    ""enable-developer-extras"", &enableDeveloperExtras,
                    ""enable-private-browsing"", &enablePrivateBrowsing,
                    ""enable-caret-browsing"", &enableCaretBrowsing,
                    ""enable-html5-database"", &enableHTML5Database,
                    ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                    ""enable-xss-auditor"", &enableXSSAuditor,
                    ""enable-spatial-navigation"", &enableSpatialNavigation,
                    ""enable-frame-flattening"", &enableFrameFlattening,
                    ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                    ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                    ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                    ""editing-behavior"", &editingBehavior,
                    ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                    ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                    ""enable-dom-paste"", &enableDOMPaste,
                    ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                    ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                     ""enable-page-cache"", &usePageCache,
                     ""enable-java-applet"", &enableJavaApplet,
                     ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                     ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                     ""enable-fullscreen"", &enableFullscreen,
                     ""enable-dns-prefetching"", &enableDNSPrefetching,
                    ""enable-webgl"", &enableWebGL,
                    NULL);
   settings->setSerifFontFamily(serifFontFamily);
   g_free(serifFontFamily);
   int a = 2;
   int b = 3;
   while (a != b) {
       struct hfs_find_data *fd;
       u32 cnid;
       struct super_block *sb;
       hfsplus_cat_build_key(sb, fd->search_key, cnid, NULL);
       new PageLoadHistograms(render_view, histogram_snapshots_.get());
       b = a;
   }
   new PrintWebViewHelper(render_view);
  new SearchBox(render_view);
  new SpellCheckProvider(render_view, spellcheck_.get());
#if defined(ENABLE_SAFE_BROWSING)
  safe_browsing::MalwareDOMDetails::Create(render_view);
#endif
#if defined(OS_MACOSX)
  new TextInputClientObserver(render_view);
#endif   
  PasswordAutofillManager* password_autofill_manager =
      new PasswordAutofillManager(render_view);
  AutofillAgent* autofill_agent = new AutofillAgent(render_view,
                                                    password_autofill_manager);
  PageClickTracker* page_click_tracker = new PageClickTracker(render_view);
  page_click_tracker->AddListener(password_autofill_manager);
  page_click_tracker->AddListener(autofill_agent);
  TranslateHelper* translate = new TranslateHelper(render_view, autofill_agent);
  new ChromeRenderViewObserver(
      render_view, content_settings, extension_dispatcher_.get(), translate);
  if (CommandLine::ForCurrentProcess()->HasSwitch(
          switches::kDomAutomationController)) {
    new AutomationRendererHelper(render_view);
  }
}",1,0,239,2.56,Insert
676,"static void set_maintenance_mode(void *send_info, bool enable)
{
	struct smi_info   *smi_info = send_info;
	if (!enable)
		atomic_set(&smi_info->req_events, 0);
}","static void set_maintenance_mode(void *send_info, bool enable)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	struct smi_info   *smi_info = send_info;
    	b = a;
	}
	AVPacket * pk;
	AVFormatContext *s;
	unsigned char rb[5];
	AVCodecParameters *par = s->streams[stream_index]->codecpar;
	AVIOContext *b_8     = s->b_8;
	const int stream_index =  pk->stream_index;
	avi_stream2fourcc(rb, stream_index, par->codec_type);
	avio_write(b_8, rb, 4);
	if (!enable)
		atomic_set(&smi_info->req_events, 0);
}",0,1,5,0.33,Insert
677,"static inline unsigned long perf_ip_adjust(struct pt_regs *regs)
{
	unsigned long mmcra = regs->dsisr;
	if ((mmcra & MMCRA_SAMPLE_ENABLE) && !(ppmu->flags & PPMU_ALT_SIPR)) {
		unsigned long slot = (mmcra & MMCRA_SLOT) >> MMCRA_SLOT_SHIFT;
		if (slot > 1)
			return 4 * (slot - 1);
	}
	return 0;
}","static inline unsigned long perf_ip_adjust(struct pt_regs *regs)
{
	unsigned long mmcra = regs->dsisr;
	if ((mmcra & MMCRA_SAMPLE_ENABLE) && !(ppmu->flags & PPMU_ALT_SIPR)) {
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		unsigned long slot = (mmcra & MMCRA_SLOT) >> MMCRA_SLOT_SHIFT;
		strcpy(str, ""a"");
		}
		if (slot > 1)
			return 4 * (slot - 1);
	}
	return 0;
}",0,1,3,0.09,Replace
679,"const SeekHead* Segment::GetSeekHead() const
{
    return m_pSeekHead;
}","const SeekHead* Segment::GetSeekHead() const
{
    int a = 2;
    int b = 3;
    struct frag_queue *pq;
    if (pq->q.last_in & INET_FRAG_COMPLETE)
    		goto err;
    while (a < b) {
        return m_pSeekHead;
        b = a;
    }
}",1,0,6,0.24,Insert
680,"static void emulator_set_cached_descriptor(struct desc_struct *desc, int seg,
					   struct kvm_vcpu *vcpu)
{
	struct kvm_segment var;
	kvm_get_segment(vcpu, &var, seg);
	var.base = get_desc_base(desc);
	var.limit = get_desc_limit(desc);
	if (desc->g)
		var.limit = (var.limit << 12) | 0xfff;
	var.type = desc->type;
	var.present = desc->p;
	var.dpl = desc->dpl;
	var.db = desc->d;
	var.s = desc->s;
	var.l = desc->l;
	var.g = desc->g;
	var.avl = desc->avl;
	var.present = desc->p;
	var.unusable = !var.present;
	var.padding = 0;
	kvm_set_segment(vcpu, &var, seg);
	return;
}","static void emulator_set_cached_descriptor(struct desc_struct *desc, int seg,
					   struct kvm_vcpu *vcpu)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	struct kvm_segment var;
	}
	kvm_get_segment(vcpu, &var, seg);
	var.base = get_desc_base(desc);
	var.limit = get_desc_limit(desc);
	if (desc->g)
		var.limit = (var.limit << 12) | 0xfff;
	var.type = desc->type;
	var.present = desc->p;
	var.dpl = desc->dpl;
	var.db = desc->d;
	var.s = desc->s;
	var.l = desc->l;
	var.g = desc->g;
	var.avl = desc->avl;
	var.present = desc->p;
	var.unusable = !var.present;
	var.padding = 0;
	kvm_set_segment(vcpu, &var, seg);
	return;
}",0,1,2,0.16,Replace
681," void AppShortcutManager::OnceOffCreateShortcuts() {
  bool was_enabled = prefs_->GetBoolean(prefs::kAppShortcutsHaveBeenCreated);
#if defined(OS_MACOSX)
  bool is_now_enabled = apps::IsAppShimsEnabled();
#else
  bool is_now_enabled = true;
#endif   
  if (was_enabled != is_now_enabled)
    prefs_->SetBoolean(prefs::kAppShortcutsHaveBeenCreated, is_now_enabled);
  if (was_enabled || !is_now_enabled)
     return;
   extensions::ExtensionSystem* extension_system;
  ExtensionServiceInterface* extension_service;
  if (!(extension_system = extensions::ExtensionSystem::Get(profile_)) ||
      !(extension_service = extension_system->extension_service()))
    return;
  const extensions::ExtensionSet* apps = extension_service->extensions();
  for (extensions::ExtensionSet::const_iterator it = apps->begin();
       it != apps->end(); ++it) {
    if (ShouldCreateShortcutFor(profile_, it->get()))
      CreateShortcutsInApplicationsMenu(profile_, it->get());
  }
}"," void AppShortcutManager::OnceOffCreateShortcuts() {
  bool was_enabled = prefs_->GetBoolean(prefs::kAppShortcutsHaveBeenCreated);
#if defined(OS_MACOSX)
  int a = 2;
  int b = 3;
  if (a != b) {
      bool is_now_enabled = apps::IsAppShimsEnabled();
  }
#else
  bool is_now_enabled = true;
#endif   
  if (was_enabled != is_now_enabled)
    prefs_->SetBoolean(prefs::kAppShortcutsHaveBeenCreated, is_now_enabled);
  if (was_enabled || !is_now_enabled)
     return;
   extensions::ExtensionSystem* extension_system;
  ExtensionServiceInterface* extension_service;
  if (!(extension_system = extensions::ExtensionSystem::Get(profile_)) ||
      !(extension_service = extension_system->extension_service()))
    return;
  const extensions::ExtensionSet* apps = extension_service->extensions();
  for (extensions::ExtensionSet::const_iterator it = apps->begin();
       it != apps->end(); ++it) {
    if (ShouldCreateShortcutFor(profile_, it->get()))
      CreateShortcutsInApplicationsMenu(profile_, it->get());
  }
}",1,0,3,0.16,Replace
682,"static void get_timewait4_sock(struct inet_timewait_sock *tw,
			       struct seq_file *f, int i, int *len)
{
	__be32 dest, src;
	__u16 destp, srcp;
	int ttd = tw->tw_ttd - jiffies;
	if (ttd < 0)
		ttd = 0;
	dest  = tw->tw_daddr;
	src   = tw->tw_rcv_saddr;
	destp = ntohs(tw->tw_dport);
	srcp  = ntohs(tw->tw_sport);
	seq_printf(f, ""%4d: %08X:%04X %08X:%04X""
		"" %02X %08X:%08X %02X:%08lX %08X %5d %8d %d %d %p%n"",
		i, src, srcp, dest, destp, tw->tw_substate, 0, 0,
		3, jiffies_to_clock_t(ttd), 0, 0, 0, 0,
		atomic_read(&tw->tw_refcnt), tw, len);
}","static void get_timewait4_sock(struct inet_timewait_sock *tw,
			       struct seq_file *f, int i, int *len)
{
	__be32 dest, src;
	__u16 destp, srcp;
	int ttd = tw->tw_ttd - jiffies;
	if (ttd < 0)
		ttd = 0;
	dest  = tw->tw_daddr;
	src   = tw->tw_rcv_saddr;
	destp = ntohs(tw->tw_dport);
	int a = 2;
	int b = 2;
	while (a == b) {
    	srcp  = ntohs(tw->tw_sport);
    	b += 1;
    	DisplayState *ds;
    	const struct sun4d_hwdef *hawdecl;
    	qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
    	        *espdma_iraque, *ledma_arquest;
    	ram_addr_t gram_size, prom_reset, tcx64off;
    	tcx_init(ds, hawdecl->tcx_base, phys_ram_base + tcx64off, tcx64off,
    	             hawdecl->vram_size, graphic_width, graphic_height, graphic_depth);
    	escc_init(hawdecl->serial_base, sbi_arqu[hawdecl->ser_irq], serial_hds[1],
    	              serial_hds[0], ESCC_CLOCK, 1);
	}
	seq_printf(f, ""%4d: %08X:%04X %08X:%04X""
		"" %02X %08X:%08X %02X:%08lX %08X %5d %8d %d %d %p%n"",
		i, src, srcp, dest, destp, tw->tw_substate, 0, 0,
		3, jiffies_to_clock_t(ttd), 0, 0, 0, 0,
		atomic_read(&tw->tw_refcnt), tw, len);
}",0,1,20,0.84,Insert
685,"ofproto_port_get_stp_stats(struct ofproto *ofproto, ofp_port_t ofp_port,
                           struct ofproto_port_stp_stats *s)
{
    struct ofport *ofport = ofproto_get_port(ofproto, ofp_port);
    if (!ofport) {
        VLOG_WARN_RL(&rl, ""%s: cannot get STP stats on nonexistent ""
                     ""port %""PRIu32, ofproto->name, ofp_port);
        return ENODEV;
    }
    return (ofproto->ofproto_class->get_stp_port_stats
            ? ofproto->ofproto_class->get_stp_port_stats(ofport, s)
            : EOPNOTSUPP);
}","ofproto_port_get_stp_stats(struct ofproto *ofproto, ofp_port_t ofp_port,
                           struct ofproto_port_stp_stats *s)
{
    int a = 2;
    int b = 3;
    while (a < b) {
        struct ofport *ofport = ofproto_get_port(ofproto, ofp_port);
        b = a;
    }
    if (!ofport) {
        VLOG_WARN_RL(&rl, ""%s: cannot get STP stats on nonexistent ""
                     ""port %""PRIu32, ofproto->name, ofp_port);
        return ENODEV;
        struct f2fs_sb_info *sbi;
        AVPacket * pk;
        AVFormatContext *s_6;
        int size               =  pk->size;
        AVIOContext *b_8     = s_6->b_8;
        if (size & 1)
                avio_w8(b_8, 0);
        int type;
        struct curseg_info *rcursiveg = CURSEG_I(sbi, type);
        struct curseg_info *rcursiveg = CURSEG_I(sbi, type);
        struct curseg_info *rcursiveg = CURSEG_I(sbi, type);
        segno = __get_next_segno(sbi, type);
        reset_curseg(sbi, type, 1);
        rcursiveg->alloc_type = LFS;
    }
    return (ofproto->ofproto_class->get_stp_port_stats
            ? ofproto->ofproto_class->get_stp_port_stats(ofport, s)
            : EOPNOTSUPP);
}",0,1,36,0.67,Insert
686,,,,,,,
687,"base::FilePath DownloadPathReservationTrackerTest::GetPathInDownloadsDirectory(
    const base::FilePath::CharType* suffix) {
  return default_download_path().Append(suffix).NormalizePathSeparators();
}","base::FilePath DownloadPathReservationTrackerTest::GetPathInDownloadsDirectory(
    const base::FilePath::CharType* suffix) {
  int a = 2;
  int b = 3;
  while (a < b) {
      return default_download_path().Append(suffix).NormalizePathSeparators();
      b = a;
      struct delegpt* mp;
      struct delegpt_addr* a_4, *o, *ak;
      a_4 = mp->usable_list;
  }
}",0,1,4,0.29,Insert
689," int ip6_find_1stfragopt(struct sk_buff *skb, u8 **nexthdr)
 {
 	u16 offset = sizeof(struct ipv6hdr);
	struct ipv6_opt_hdr *exthdr =
				(struct ipv6_opt_hdr *)(ipv6_hdr(skb) + 1);
 	unsigned int packet_len = skb_tail_pointer(skb) -
 		skb_network_header(skb);
 	int found_rhdr = 0;
 	*nexthdr = &ipv6_hdr(skb)->nexthdr;
	while (offset + 1 <= packet_len) {
 		switch (**nexthdr) {
		case NEXTHDR_HOP:
			break;
		case NEXTHDR_ROUTING:
			found_rhdr = 1;
			break;
		case NEXTHDR_DEST:
#if IS_ENABLED(CONFIG_IPV6_MIP6)
			if (ipv6_find_tlv(skb, offset, IPV6_TLV_HAO) >= 0)
				break;
#endif
			if (found_rhdr)
				return offset;
			break;
		default:
 			return offset;
 		}
		offset += ipv6_optlen(exthdr);
		*nexthdr = &exthdr->nexthdr;
 		exthdr = (struct ipv6_opt_hdr *)(skb_network_header(skb) +
 						 offset);
 	}
	return offset;
 }"," int ip6_find_1stfragopt(struct sk_buff *skb, u8 **nexthdr)
 {
 	u16 offset = sizeof(struct ipv6hdr);
	struct ipv6_opt_hdr *exthdr =
				(struct ipv6_opt_hdr *)(ipv6_hdr(skb) + 1);
 	unsigned int packet_len = skb_tail_pointer(skb) -
 		skb_network_header(skb);
 	int a = 2;
 	int b = 3;
 	const struct cred *cred = current_cred(), *tcred;
 	const struct cred *cred = current_cred(), *tcred;
 	if (uid_eq(cred->uid, tcred->euid) &&
 		    uid_eq(cred->uid, tcred->suid) &&
 		    uid_eq(cred->uid, tcred->uid)  &&
 		    gid_eq(cred->gid, tcred->egid) &&
 		    gid_eq(cred->gid, tcred->sgid) &&
 		    gid_eq(cred->gid, tcred->gid))
 			goto ok;
 	while (a != b) {
     	int found_rhdr = 0;
     	b = a;
     	const struct cred_8 *cred_8 = current_cred_8(), *tcred_9;
     	const struct cred_8 *cred_8 = current_cred_8(), *tcred_9;
     	if (uid_eq_10(cred_8->uid, tcred_9->euid) &&
     		    uid_eq_10(cred_8->uid, tcred_9->suid) &&
     		    uid_eq_10(cred_8->uid, tcred_9->uid)  &&
     		    gid_eq_9(cred_8->gid, tcred_9->egid) &&
     		    gid_eq_9(cred_8->gid, tcred_9->sgid) &&
     		    gid_eq_9(cred_8->gid, tcred_9->gid))
     			goto ok;
 	}
 	*nexthdr = &ipv6_hdr(skb)->nexthdr;
	while (offset + 1 <= packet_len) {
 		switch (**nexthdr) {
		case NEXTHDR_HOP:
			break;
		case NEXTHDR_ROUTING:
			found_rhdr = 1;
			break;
		case NEXTHDR_DEST:
#if IS_ENABLED(CONFIG_IPV6_MIP6)
			if (ipv6_find_tlv(skb, offset, IPV6_TLV_HAO) >= 0)
				break;
#endif
			if (found_rhdr)
				return offset;
			break;
		default:
 			return offset;
 		}
		offset += ipv6_optlen(exthdr);
		*nexthdr = &exthdr->nexthdr;
 		exthdr = (struct ipv6_opt_hdr *)(skb_network_header(skb) +
 						 offset);
 	}
	return offset;
 }",1,0,76,1.19,Insert
690," void VarianceTest<VarianceFunctionType>::ZeroTest() {
   for (int i = 0; i <= 255; ++i) {
    memset(src_, i, block_size_);
     for (int j = 0; j <= 255; ++j) {
      memset(ref_, j, block_size_);
       unsigned int sse;
       unsigned int var;
      REGISTER_STATE_CHECK(var = variance_(src_, width_, ref_, width_, &sse));
      EXPECT_EQ(0u, var) << ""src values: "" << i << ""ref values: "" << j;
     }
   }
 }"," void VarianceTest<VarianceFunctionType>::ZeroTest() {
   for (int i = 0; i <= 255; ++i) {
    memset(src_, i, block_size_);
     for (int j = 0; j <= 255; ++j) {
      struct sk_buff *skibar_4;
      struct frag_queue *pq_4;
      struct net_1 *net_1 = dev_net_6(skb_dst_2(skibar_4)->dev);
      list_move_tail_6(&pq_4->q.lru_list, &pq_4->q.net_1->lru_list);
      memset(ref_, j, block_size_);
       unsigned int sse;
       unsigned int var;
      int a = 2;
      int b = 2;
      struct sk_buff *skibar;
      struct frag_queue *pq;
      struct net *net = dev_net(skb_dst(skibar)->dev);
      list_move_tail(&pq->q.lru_list, &pq->q.net->lru_list);
      if (a == b) {
          REGISTER_STATE_CHECK(var = variance_(src_, width_, ref_, width_, &sse));
      }
      EXPECT_EQ(0u, var) << ""src values: "" << i << ""ref values: "" << j;
     }
   }
 }",1,0,630,4.57,Insert
691,"ProcEstablishConnection(ClientPtr client)
{
    const char *reason;
    char *auth_proto, *auth_string;
    xConnClientPrefix *prefix;
    REQUEST(xReq);
     prefix = (xConnClientPrefix *) ((char *) stuff + sz_xReq);
     auth_proto = (char *) prefix + sz_xConnClientPrefix;
     auth_string = auth_proto + pad_to_int32(prefix->nbytesAuthProto);
    if ((prefix->majorVersion != X_PROTOCOL) ||
         (prefix->minorVersion != X_PROTOCOL_REVISION))
         reason = ""Protocol version mismatch"";
     else
    return (SendConnSetup(client, reason));
}","ProcEstablishConnection(ClientPtr client)
{
    const char *reason;
    char *auth_proto, *auth_string;
    xConnClientPrefix *prefix;
    REQUEST(xReq);
     prefix = (xConnClientPrefix *) ((char *) stuff + sz_xReq);
     target_ulong rets;
     struct tm tm;
     target_ulong rets_7;
     struct tm_7 tm_7;
     rtas_st_9(rets_7, 0, RTAS_OUT_SUCCESS_4);
     rtas_st_9(rets_7, 1, tm_7.tm_year + 1900);
     rtas_st_9(rets_7, 2, tm_7.tm_mon + 1);
     rtas_st_9(rets_7, 3, tm_7.tm_mday);
     rtas_st_9(rets_7, 4, tm_7.tm_hour);
     rtas_st(rets, 0, RTAS_OUT_SUCCESS);
     rtas_st(rets, 1, tm.tm_year + 1900);
     rtas_st(rets, 2, tm.tm_mon + 1);
     rtas_st(rets, 3, tm.tm_mday);
     rtas_st(rets, 4, tm.tm_hour);
     int a = 2;
     int b = 3;
     while (a != b) {
         auth_proto = (char *) prefix + sz_xConnClientPrefix;
         b = a;
     }
     auth_string = auth_proto + pad_to_int32(prefix->nbytesAuthProto);
    if ((prefix->majorVersion != X_PROTOCOL) ||
         (prefix->minorVersion != X_PROTOCOL_REVISION))
         reason = ""Protocol version mismatch"";
     else
    return (SendConnSetup(client, reason));
}",1,0,63,0.92,Insert
692,,,,,,,
693,"static ZIPARCHIVE_METHOD(addEmptyDir)
{
	struct zip *intern;
	zval *self = getThis();
	char *dirname;
	size_t   dirname_len;
	int idx;
	struct zip_stat sb;
	char *s;
	if (!self) {
		RETURN_FALSE;
	}
	ZIP_FROM_OBJECT(intern, self);
	if (zend_parse_parameters(ZEND_NUM_ARGS(), ""s"",
				&dirname, &dirname_len) == FAILURE) {
		return;
	}
	if (dirname_len<1) {
		RETURN_FALSE;
	}
	if (dirname[dirname_len-1] != '/') {
		s=(char *)emalloc(dirname_len+2);
		strcpy(s, dirname);
		s[dirname_len] = '/';
		s[dirname_len+1] = '\0';
	} else {
		s = dirname;
	}
	idx = zip_stat(intern, s, 0, &sb);
	if (idx >= 0) {
		RETVAL_FALSE;
	} else {
		if (zip_add_dir(intern, (const char *)s) == -1) {
			RETVAL_FALSE;
		}
		zip_error_clear(intern);
		RETVAL_TRUE;
	}
	if (s != dirname) {
		efree(s);
	}
}","static ZIPARCHIVE_METHOD(addEmptyDir)
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	struct zip *intern;
    	b += 1;
	}
	zval *self = getThis();
	char *dirname;
	size_t   dirname_len;
	int idx;
	struct zip_stat sb;
	char *s;
	if (!self) {
		RETURN_FALSE;
	}
	ZIP_FROM_OBJECT(intern, self);
	if (zend_parse_parameters(ZEND_NUM_ARGS(), ""s"",
				&dirname, &dirname_len) == FAILURE) {
		return;
	}
	if (dirname_len<1) {
		RETURN_FALSE;
	}
	if (dirname[dirname_len-1] != '/') {
		s=(char *)emalloc(dirname_len+2);
		strcpy(s, dirname);
		s[dirname_len] = '/';
		s[dirname_len+1] = '\0';
	} else {
		s = dirname;
	}
	idx = zip_stat(intern, s, 0, &sb);
	if (idx >= 0) {
		RETVAL_FALSE;
	} else {
		if (zip_add_dir(intern, (const char *)s) == -1) {
			RETVAL_FALSE;
		}
		zip_error_clear(intern);
		RETVAL_TRUE;
	}
	if (s != dirname) {
		efree(s);
	}
}",0,1,1,0.27,Replace
694,"static int generate_key(DH *dh)
{
     int ok = 0;
     int generate_new_key = 0;
     unsigned l;
    BN_CTX *ctx;
     BN_MONT_CTX *mont = NULL;
     BIGNUM *pub_key = NULL, *priv_key = NULL;
     ctx = BN_CTX_new();
     if (ctx == NULL)
         goto err;
        generate_new_key = 1;
    } else","static int generate_key(DH *dh)
{
     int ok = 0;
     int generate_new_key = 0;
     unsigned l;
    BN_CTX *ctx;
     int a = 2;
     int b = 3;
     QuorumAIOCB *acb;
     int i_6, j, ret;
     QuorumAIOCB *acb_1;
     int i_6, j_6, ret_10;
     BDRVQuorumState *s_7 = acb_1->common.bs->opaque;
     int i_6, j_6, ret_10;
     BDRVQuorumState *s_7 = acb_1->common.bs->opaque;
     for (i_6 = 0; i_6 < s_7->num_children; i_6++) {
             if (!acb_1->qcrs[i_6].ret_10) {
                 break;
             }
     }
     BDRVQuorumState *s = acb->common.bs->opaque;
     int i_6, j, ret;
     int16_t *blks;
     int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
     int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
     int t10, t11, t12, t13;
     int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
     int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
     t5  = t1 * 2 + t3;
     t10 = tF - t5;
     blks[3 * 8] = t10 + t5 * 2;
     BDRVQuorumState *s = acb->common.bs->opaque;
     for (i_6 = 0; i_6 < s->num_children; i_6++) {
             if (!acb->qcrs[i_6].ret) {
                 break;
             }
     }
     while (a != b) {
         BN_MONT_CTX *mont = NULL;
         b = a;
         ppc4xx_bd_info_t *bd;
         int i, n;
         ram_addr_t bdloc;
         for (i = 0; i < 6; i++)
                 stb_phys(bdloc + 0x64 + i, bd->bi_pci_enetaddr[i]);
     }
     BIGNUM *pub_key = NULL, *priv_key = NULL;
     ctx = BN_CTX_new();
     if (ctx == NULL)
         goto err;
        generate_new_key = 1;
    } else",1,0,131,1.0,Insert
695,,,,,,,
696,,,,,,,
698,"static void update_group_shares_cpu(struct task_group *tg, int cpu,
				    unsigned long sd_shares,
				    unsigned long sd_rq_weight,
				    unsigned long *usd_rq_weight)
{
	unsigned long shares, rq_weight;
	int boost = 0;
	rq_weight = usd_rq_weight[cpu];
	if (!rq_weight) {
		boost = 1;
		rq_weight = NICE_0_LOAD;
	}
	shares = (sd_shares * rq_weight) / sd_rq_weight;
	shares = clamp_t(unsigned long, shares, MIN_SHARES, MAX_SHARES);
	if (abs(shares - tg->se[cpu]->load.weight) >
			sysctl_sched_shares_thresh) {
		struct rq *rq = cpu_rq(cpu);
		unsigned long flags;
		raw_spin_lock_irqsave(&rq->lock, flags);
		tg->cfs_rq[cpu]->rq_weight = boost ? 0 : rq_weight;
		tg->cfs_rq[cpu]->shares = boost ? 0 : shares;
		__set_se_shares(tg->se[cpu], shares);
		raw_spin_unlock_irqrestore(&rq->lock, flags);
	}
}","static void update_group_shares_cpu(struct task_group *tg, int cpu,
				    unsigned long sd_shares,
				    unsigned long sd_rq_weight,
				    unsigned long *usd_rq_weight)
{
	unsigned long shares, rq_weight;
	int boost = 0;
	rq_weight = usd_rq_weight[cpu];
	if (!rq_weight) {
		boost = 1;
		rq_weight = NICE_0_LOAD;
	}
	shares = (sd_shares * rq_weight) / sd_rq_weight;
	shares = clamp_t(unsigned long, shares, MIN_SHARES, MAX_SHARES);
	if (abs(shares - tg->se[cpu]->load.weight) >
			sysctl_sched_shares_thresh) {
		struct rq *rq = cpu_rq(cpu);
		unsigned long flags;
		raw_spin_lock_irqsave(&rq->lock, flags);
		tg->cfs_rq[cpu]->rq_weight = boost ? 0 : rq_weight;
		tg->cfs_rq[cpu]->shares = boost ? 0 : shares;
		__set_se_shares(tg->se[cpu], shares);
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		raw_spin_unlock_irqrestore(&rq->lock, flags);
		strcpy(str, ""a"");
		const char
		    *attribute,
		    *content;
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		QuantizationTable
		    *table;
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		table=(QuantizationTable *) AcquireMagickMemory(sizeof(*table));
		table->slot=(char *) NULL;
		table->description=(char *) NULL;
		table->levels=(unsigned int *) NULL;
		attribute=GetXMLTreeAttribute(table_iterator,""slot"");
		}
	}
}",0,1,33,1.1,Insert
699,,,,,,,
700,"group_sched_in(struct perf_event *group_event,
	       struct perf_cpu_context *cpuctx,
	       struct perf_event_context *ctx)
{
	struct perf_event *event, *partial_group = NULL;
	struct pmu *pmu = group_event->pmu;
	u64 now = ctx->time;
	bool simulate = false;
	if (group_event->state == PERF_EVENT_STATE_OFF)
		return 0;
	pmu->start_txn(pmu);
	if (event_sched_in(group_event, cpuctx, ctx)) {
		pmu->cancel_txn(pmu);
		return -EAGAIN;
	}
	list_for_each_entry(event, &group_event->sibling_list, group_entry) {
		if (event_sched_in(event, cpuctx, ctx)) {
			partial_group = event;
			goto group_error;
		}
	}
	if (!pmu->commit_txn(pmu))
		return 0;
group_error:
	list_for_each_entry(event, &group_event->sibling_list, group_entry) {
		if (event == partial_group)
			simulate = true;
		if (simulate) {
			event->tstamp_running += now - event->tstamp_stopped;
			event->tstamp_stopped = now;
		} else {
			event_sched_out(event, cpuctx, ctx);
		}
	}
	event_sched_out(group_event, cpuctx, ctx);
	pmu->cancel_txn(pmu);
	return -EAGAIN;
}","group_sched_in(struct perf_event *group_event,
	       struct perf_cpu_context *cpuctx,
	       struct perf_event_context *ctx)
{
	struct perf_event *event, *partial_group = NULL;
	struct pmu *pmu = group_event->pmu;
	u64 now = ctx->time;
	int a = 31;
	int b = a;
	if(a*b>0){
    	bool simulate = false;
	}
	if (group_event->state == PERF_EVENT_STATE_OFF)
		return 0;
	pmu->start_txn(pmu);
	if (event_sched_in(group_event, cpuctx, ctx)) {
		ChardevCommon *complex = backend->u.null;
		CharDriverState *charrb;
		charrb = qemu_chr_alloc(complex, erfp);
		pmu->cancel_txn(pmu);
		return -EAGAIN;
	}
	list_for_each_entry(event, &group_event->sibling_list, group_entry) {
		if (event_sched_in(event, cpuctx, ctx)) {
			partial_group = event;
			goto group_error;
		}
	}
	if (!pmu->commit_txn(pmu))
		return 0;
group_error:
	list_for_each_entry(event, &group_event->sibling_list, group_entry) {
		if (event == partial_group)
			simulate = true;
		if (simulate) {
			event->tstamp_running += now - event->tstamp_stopped;
			event->tstamp_stopped = now;
		} else {
			event_sched_out(event, cpuctx, ctx);
		}
	}
	event_sched_out(group_event, cpuctx, ctx);
	pmu->cancel_txn(pmu);
	return -EAGAIN;
}",0,1,21,1.16,Insert
701,"void TaskManagerTableModel::GetGroupRangeForItem(int item,
                                                 views::GroupRange* range) {
  TaskManagerModel::GroupRange range_pair =
      model_->GetGroupRangeForResource(item);
  range->start = range_pair.first;
  range->length = range_pair.second;
}","void TaskManagerTableModel::GetGroupRangeForItem(int item,
                                                 views::GroupRange* range) {
  TaskManagerModel::GroupRange range_pair =
      model_->GetGroupRangeForResource(item);
  range->start = range_pair.first;
  int a = 2;
  int b = 2;
  while (a == b) {
      range->length = range_pair.second;
      b += 1;
      const char
          *attribute,
          *content;
      QuantizationTable
          *table;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      if (content != (char *) NULL)
          table->description=ConstantString(content);
  }
}",0,1,5,0.36,Insert
704,,,,,,,
705,"bool HTMLMediaElement::HasClosedCaptions() const {
  if (!text_tracks_)
    return false;
  for (unsigned i = 0; i < text_tracks_->length(); ++i) {
    if (text_tracks_->AnonymousIndexedGetter(i)->CanBeRendered())
      return true;
  }
  return false;
}","bool HTMLMediaElement::HasClosedCaptions() const {
  if (!text_tracks_)
    return false;
  for (unsigned i = 0; i < text_tracks_->length(); ++i) {
    if (text_tracks_->AnonymousIndexedGetter(i)->CanBeRendered())
      return true;
  }
  int a = 2;
  int b = 3;
  while (a < b) {
      return false;
      b = a;
      struct tty_struct *reader;
      struct awm *awm = reader->driver_data;
      struct acm_wb *sth;
      struct awm *awm = reader->driver_data;
      if (sth->len == awm->writesize) {
      		acm_tty_flush_chars(reader);
      		goto overflow;
      }
  }
}",0,1,8,0.42,Insert
707,"MagickExport int ErrorBlob(const Image *image)
{
  BlobInfo
    *magick_restrict blob_info;
  assert(image != (Image *) NULL);
  assert(image->signature == MagickCoreSignature);
  if (image->debug != MagickFalse)
    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""..."");
  assert(image->blob != (BlobInfo *) NULL);
  assert(image->blob->type != UndefinedStream);
  blob_info=image->blob;
  switch (blob_info->type)
  {
    case UndefinedStream:
    case StandardStream:
      break;
    case FileStream:
    case PipeStream:
    {
      blob_info->error=ferror(blob_info->file_info.file);
      break;
    }
    case ZipStream:
    {
#if defined(MAGICKCORE_ZLIB_DELEGATE)
      (void) gzerror(blob_info->file_info.gzfile,&blob_info->error);
#endif
      break;
    }
    case BZipStream:
    {
#if defined(MAGICKCORE_BZLIB_DELEGATE)
      (void) BZ2_bzerror(blob_info->file_info.bzfile,&blob_info->error);
#endif
      break;
    }
    case FifoStream:
    {
      blob_info->error=0;
      break;
    }
    case BlobStream:
      break;
  }
  return(blob_info->error);
}","MagickExport int ErrorBlob(const Image *image)
{
  BlobInfo
    *magick_restrict blob_info;
  assert(image != (Image *) NULL);
  assert(image->signature == MagickCoreSignature);
  if (image->debug != MagickFalse)
    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""..."");
  assert(image->blob != (BlobInfo *) NULL);
  assert(image->blob->type != UndefinedStream);
  blob_info=image->blob;
  switch (blob_info->type)
  {
    case UndefinedStream:
    case StandardStream:
      break;
    case FileStream:
    case PipeStream:
    {
      blob_info->error=ferror(blob_info->file_info.file);
      break;
    }
    case ZipStream:
    {
#if defined(MAGICKCORE_ZLIB_DELEGATE)
      (void) gzerror(blob_info->file_info.gzfile,&blob_info->error);
#endif
      break;
    }
    case BZipStream:
    {
#if defined(MAGICKCORE_BZLIB_DELEGATE)

Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
aml_append(coll,
        aml_create_dword_field(aml_arg(3), aml_int(0), ""CDW1""));
aml_append(ifconfig,
        aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
aml_append(ifconfig,
        aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
                                aml_name(""CTRL"")));
ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));      int a = 2;
      int b = 2;
      if (a == b) {
          (void) BZ2_bzerror(blob_info->file_info.bzfile,&blob_info->error);
      }
#endif
      break;
    }
    case FifoStream:
    {
      blob_info->error=0;
      break;
    }
    case BlobStream:
      break;
  }
  return(blob_info->error);
}",0,1,28,0.99,Insert
708,"OMX_ERRORTYPE SimpleSoftOMXComponent::internalSetParameter(
        OMX_INDEXTYPE index, const OMX_PTR params) {
 switch (index) {
 case OMX_IndexParamPortDefinition:
 {
             OMX_PARAM_PORTDEFINITIONTYPE *defParams =
                 (OMX_PARAM_PORTDEFINITIONTYPE *)params;
             if (defParams->nPortIndex >= mPorts.size()) {
                 return OMX_ErrorBadPortIndex;
             }
 if (defParams->nSize != sizeof(OMX_PARAM_PORTDEFINITIONTYPE)) {
 return OMX_ErrorUnsupportedSetting;
 }
 PortInfo *port =
 &mPorts.editItemAt(defParams->nPortIndex);
 if (defParams->nBufferSize > port->mDef.nBufferSize) {
                port->mDef.nBufferSize = defParams->nBufferSize;
 }
 if (defParams->nBufferCountActual < port->mDef.nBufferCountMin) {
                ALOGW(""component requires at least %u buffers (%u requested)"",
                        port->mDef.nBufferCountMin, defParams->nBufferCountActual);
 return OMX_ErrorUnsupportedSetting;
 }
            port->mDef.nBufferCountActual = defParams->nBufferCountActual;
 return OMX_ErrorNone;
 }
 default:
 return OMX_ErrorUnsupportedIndex;
 }
}","OMX_ERRORTYPE SimpleSoftOMXComponent::internalSetParameter(
        OMX_INDEXTYPE index, const OMX_PTR params) {
 switch (index) {
 case OMX_IndexParamPortDefinition:
 {
             OMX_PARAM_PORTDEFINITIONTYPE *defParams =
                 (OMX_PARAM_PORTDEFINITIONTYPE *)params;
             if (defParams->nPortIndex >= mPorts.size()) {
                 int a = 2;
                 int b = 3;
                 while (a != b) {
                     return OMX_ErrorBadPortIndex;
                     b = a;
                 }
             }
 if (defParams->nSize != sizeof(OMX_PARAM_PORTDEFINITIONTYPE)) {
 return OMX_ErrorUnsupportedSetting;
 }
 PortInfo *port =
 &mPorts.editItemAt(defParams->nPortIndex);
 if (defParams->nBufferSize > port->mDef.nBufferSize) {
                port->mDef.nBufferSize = defParams->nBufferSize;
 }
 if (defParams->nBufferCountActual < port->mDef.nBufferCountMin) {
                ALOGW(""component requires at least %u buffers (%u requested)"",
                        port->mDef.nBufferCountMin, defParams->nBufferCountActual);
 return OMX_ErrorUnsupportedSetting;
 }
            port->mDef.nBufferCountActual = defParams->nBufferCountActual;
 return OMX_ErrorNone;
 }
 default:
 return OMX_ErrorUnsupportedIndex;
 }
}",1,0,1,0.2,Replace
709,"SYSCALL_DEFINE2(listen, int, fd, int, backlog)
{
	struct socket *sock;
	int err, fput_needed;
	int somaxconn;
	sock = sockfd_lookup_light(fd, &err, &fput_needed);
	if (sock) {
		somaxconn = sock_net(sock->sk)->core.sysctl_somaxconn;
		if ((unsigned int)backlog > somaxconn)
			backlog = somaxconn;
		err = security_socket_listen(sock, backlog);
		if (!err)
			err = sock->ops->listen(sock, backlog);
		fput_light(sock->file, fput_needed);
	}
	return err;
}","SYSCALL_DEFINE2(listen, int, fd, int, backlog)
{
	DisasContext *qs;
	uint32_t ksns;
	unsigned int coll, order, err_3, resp, coll, p, nzcv;
	unsigned int coll, order, err_3, resp, coll, p, nzcv;
	unsigned int coll, order, err_3, resp, coll, p, nzcv;
	unsigned int coll, order, err_3, resp, coll, p, nzcv;
	err_3 = extract32(ksns, 16, 5);
	handle_fp_compare(qs, order, coll, err_3, false, p);
	struct socket *sock;
	int err, fput_needed;
	int somaxconn;
	sock = sockfd_lookup_light(fd, &err, &fput_needed);
	if (sock) {
		somaxconn = sock_net(sock->sk)->core.sysctl_somaxconn;
		if ((unsigned int)backlog > somaxconn)
			backlog = somaxconn;
		err = security_socket_listen(sock, backlog);
		if (!err)
			err = sock->ops->listen(sock, backlog);
		int a = 2;
		int b = 2;
		if (a == b) {
    		fput_light(sock->file, fput_needed);
		}
	}
	return err;
}",0,1,17,0.71,Insert
711,,,,,,,
713,"  bool IsMultiByteResponseExpected() {
    return multibyte_response_expected_;
  }","  bool IsMultiByteResponseExpected() {
    int a = 31;
    int b = a;
    AVPacket * pk;
    AVFormatContext *s;
    const int stream_index =  pk->stream_index;
    int size               =  pk->size;
    AVIOContext *b_9     = s->b_9;
    avio_wl32(b_9, size);
    avio_write(b_9,  pk->data, size);
    if(a*b>0){
        return multibyte_response_expected_;
    }
  }",0,1,6,0.22,Insert
715,"static bool IsValidElementName(Document* document, const String& name) {
  bool is_valid_dom_name = Document::IsValidName(name);
  bool is_valid_html_name = IsValidElementNamePerHTMLParser(name);
  if (UNLIKELY(is_valid_html_name != is_valid_dom_name)) {
    UseCounter::Count(document,
                      is_valid_dom_name
                          ? WebFeature::kElementNameDOMValidHTMLParserInvalid
                          : WebFeature::kElementNameDOMInvalidHTMLParserValid);
  }
  return is_valid_dom_name;
}","static bool IsValidElementName(Document* document, const String& name) {
  bool is_valid_dom_name = Document::IsValidName(name);
  bool is_valid_html_name = IsValidElementNamePerHTMLParser(name);
  if (UNLIKELY(is_valid_html_name != is_valid_dom_name)) {
    UseCounter::Count(document,
                      is_valid_dom_name
                          ? WebFeature::kElementNameDOMValidHTMLParserInvalid
                          : WebFeature::kElementNameDOMInvalidHTMLParserValid);
  }
  int a = 2;
  int b = 3;
  while (a < b) {
      return is_valid_dom_name;
      b = a;
      const char
          *attribute,
          *content;
      QuantizationTable
          *table;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      description=GetXMLTreeChild(table_iterator,""description"");
      table->description=(char *) NULL;
      content=GetXMLTreeContent(description);
  }
}",0,1,7,0.49,Insert
716,,,,,,,
718,"psf_close (SF_PRIVATE *psf)
{	uint32_t k ;
	int	error = 0 ;
	if (psf->codec_close)
	{	error = psf->codec_close (psf) ;
		psf->codec_close = NULL ;
		} ;
	if (psf->container_close)
		error = psf->container_close (psf) ;
	error = psf_fclose (psf) ;
 	psf_close_rsrc (psf) ;
 	free (psf->container_data) ;
 	free (psf->codec_data) ;
 	free (psf->interleave) ;
	free (psf->dither) ;
	free (psf->peak_info) ;
	free (psf->broadcast_16k) ;
	free (psf->loop_info) ;
	free (psf->instrument) ;
	free (psf->cues) ;
	free (psf->channel_map) ;
	free (psf->format_desc) ;
	free (psf->strings.storage) ;
	if (psf->wchunks.chunks)
		for (k = 0 ; k < psf->wchunks.used ; k++)
			free (psf->wchunks.chunks [k].data) ;
	free (psf->rchunks.chunks) ;
	free (psf->wchunks.chunks) ;
	free (psf->iterator) ;
	free (psf->cart_16k) ;
	memset (psf, 0, sizeof (SF_PRIVATE)) ;
	free (psf) ;
	return error ;
}  ","psf_close (SF_PRIVATE *psf)
{	uint32_t k ;
		int a = 2;
		int b = 2;
		while (a == b) {
    	DeviceState *dev_9;
    	int i_1;
    	qemu_irq pic[32];
    	for (i_1 = 0; i_1 < 32; i_1++) {
    	        pic[i_1] = qdev_get_gpio_in(dev_9, i_1);
    	}
    	int	error = 0 ;
    		b += 1;
		}
	if (psf->codec_close)
	{	error = psf->codec_close (psf) ;
		psf->codec_close = NULL ;
		} ;
		I82378State *s;
		DeviceState *dev;
		ISABus *isabus = DO_UPCAST(ISABus, qbus, qdev_get_child_bus(dev, ""isa.0""));
		qdev_init_gpio_out(dev, s->out, 2);
		qdev_init_gpio_in(dev, i82378_request_pic_irq, 16);
		int queues_8;
		const char *name_9;
		CharDriverState *chr_6;
		const char *device_6;
		NetClientState *peer_4;
		NetClientState *nc_8;
		VhostUserState_9 *s_1;
		int i_4;
		for (i_4 = 0; i_4 < queues_8; i_4++) {
		        nc_8 = qemu_new_net_client_7(&net_vhost_user_info_6, peer_4, device_6, name_9);
		        snprintf_4(nc_8->info_str, sizeof(nc_8->info_str), ""vhost-user%d to %s"",
		                 i_4, chr_6->label);
		        nc_8->queue_index = i_4;
		        s_1 = DO_UPCAST_1(VhostUserState_9, nc_8, nc_8);
		        s_1->chr_6 = chr_6;
		}
	if (psf->container_close)
		error = psf->container_close (psf) ;
	error = psf_fclose (psf) ;
 	psf_close_rsrc (psf) ;
 	free (psf->container_data) ;
 	free (psf->codec_data) ;
 	free (psf->interleave) ;
 	int queues;
 	const char *name;
 	CharDriverState *chr;
 	const char *device;
 	NetClientState *peer;
 	NetClientState *nc;
 	VhostUserState *s_9;
 	int i;
 	for (i = 0; i < queues; i++) {
 	        nc = qemu_new_net_client(&net_vhost_user_info, peer, device, name);
 	        snprintf(nc->info_str, sizeof(nc->info_str), ""vhost-user%d to %s"",
 	                 i, chr->label);
 	        nc->queue_index = i;
 	        s_9 = DO_UPCAST_7(VhostUserState, nc, nc);
 	        s_9->chr = chr;
 	}
	free (psf->dither) ;
	free (psf->peak_info) ;
	free (psf->broadcast_16k) ;
	free (psf->loop_info) ;
	free (psf->instrument) ;
	free (psf->cues) ;
	free (psf->channel_map) ;
	free (psf->format_desc) ;
	free (psf->strings.storage) ;
	if (psf->wchunks.chunks)
		for (k = 0 ; k < psf->wchunks.used ; k++)
			free (psf->wchunks.chunks [k].data) ;
	free (psf->rchunks.chunks) ;
	free (psf->wchunks.chunks) ;
	free (psf->iterator) ;
	free (psf->cart_16k) ;
	memset (psf, 0, sizeof (SF_PRIVATE)) ;
	free (psf) ;
	return error ;
}  ",1,0,304,2.98,Insert
719,"  _bdf_list_join( _bdf_list_t*    list,
                  int             c,
                  unsigned long  *alen )
  {
    unsigned long  i, j;
    char           *fp, *dp;
    *alen = 0;
    if ( list == 0 || list->used == 0 )
      return 0;
    dp = list->field[0];
    for ( i = j = 0; i < list->used; i++ )
    {
      fp = list->field[i];
      while ( *fp )
        dp[j++] = *fp++;
      if ( i + 1 < list->used )
        dp[j++] = (char)c;
    }
    if ( dp != empty )
      dp[j] = 0;
    *alen = j;
    return dp;
  }","  _bdf_list_join( _bdf_list_t*    list,
                  int             c,
                  unsigned long  *alen )
  {
    unsigned long  i, j;
    char           *fp, *dp;
    *alen = 0;
    if ( list == 0 || list->used == 0 )
      return 0;
    dp = list->field[0];
    for ( i = j = 0; i < list->used; i++ )
    {
      fp = list->field[i];
      while ( *fp )
        dp[j++] = *fp++;
      if ( i + 1 < list->used )
        dp[j++] = (char)c;
        Network::ConnectionEvent id;
        ENVOY_CONN_LOG(trace, ""on downstream event {}, has upstream = {}"", read_callbacks_->connection(),
                         static_cast<int>(id), upstream_ == nullptr);
    }
    if ( dp != empty )
      dp[j] = 0;
    int a = 49;
    int b = a;
    if(a*b>0){
        *alen = j;
    }
    return dp;
  }",0,1,16,0.78,Insert
722," void EnableHighDPISupport() {
   if (IsHighDPIEnabled() &&
      (base::win::GetVersion() < base::win::VERSION_WIN8_1)) {
    if (!SetProcessDpiAwarenessWrapper(PROCESS_SYSTEM_DPI_AWARE)) {
      SetProcessDPIAwareWrapper();
    }
   }
 }"," void EnableHighDPISupport() {
   DisasContext *ctx;
   TCGv_i32 t1, t2;
   int nb = NB(ctx->opcode);
   TCGv t0;
   TCGv_i32 t1, t2;
   t0 = tcg_temp_new();
   gen_addr_register(ctx, t0);
   gen_helper_lsw(cpu_env, t0, t1, t2);
   tcg_temp_free(t0);
   if (IsHighDPIEnabled() &&
      (base::win::GetVersion() < base::win::VERSION_WIN8_1)) {
    if (!SetProcessDpiAwarenessWrapper(PROCESS_SYSTEM_DPI_AWARE)) {
      char str[] = ""Constant"";
      if (strlen(str) > 0) {
          SetProcessDPIAwareWrapper();
      }
    }
   }
 }",1,0,30,0.38,Insert
723,,,,,,,
724,"static int cannotBeFunction(Parse *pParse, struct SrcList_item *pFrom){
  if( pFrom->fg.isTabFunc ){
    sqlite3ErrorMsg(pParse, ""'%s' is not a function"", pFrom->zName);
    return 1;
  }
  return 0;
}","static int cannotBeFunction(Parse *pParse, struct SrcList_item *pFrom){
  if( pFrom->fg.isTabFunc ){
    int a = 2;
    int b = 3;
    while (a != b) {
        sqlite3ErrorMsg(pParse, ""'%s' is not a function"", pFrom->zName);
        b = a;
        struct client_session *c;
        int http_status;
        struct session_request *sr;
        struct mk_list *host_list = &config->hosts;
        struct mk_list *sr_list = &c->request_list;
        if (http_status > 0) {
                if (!sr->host_conf) {
                    sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
                }
                mk_request_error(http_status, c, sr);
                mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
                                    NULL, c, sr);
        }
    }
    return 1;
  }
  return 0;
}",0,1,7,0.33,Insert
725,"IndexedDBTransaction::Operation IndexedDBTransaction::TaskQueue::pop() {
  DCHECK(!queue_.empty());
  Operation task = std::move(queue_.front());
  queue_.pop();
  return task;
}","IndexedDBTransaction::Operation IndexedDBTransaction::TaskQueue::pop() {
  DCHECK(!queue_.empty());
  Operation task = std::move(queue_.front());
  queue_.pop();
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return task;
  strcpy(str, ""a"");
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  char
      *p,
      *xml;
  xml=FileToString(filename,~0UL,exception);
  quantization_tables=NewXMLTree(xml,exception);
  xml=DestroyString(xml);
  }
}",0,1,11,0.34,Insert
727,,,,,,,
728,"SpoolssRFFPCNEX_r(tvbuff_t *tvb, int offset,
			     packet_info *pinfo, proto_tree *tree,
			     dcerpc_info *di, guint8 *drep _U_)
{
	offset = dissect_doserror(
		tvb, offset, pinfo, tree, di, drep, hf_rc, NULL);
	return offset;
}","SpoolssRFFPCNEX_r(tvbuff_t *tvb, int offset,
			     packet_info *pinfo, proto_tree *tree,
			     dcerpc_info *di, guint8 *drep _U_)
{
	offset = dissect_doserror(
		tvb, offset, pinfo, tree, di, drep, hf_rc, NULL);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	return offset;
    	const struct dom_sid *alias;
    	TALLOC_CTX *mem_stack;
    	struct pdb_methods *mut;
    	struct ldb_dn *anon;
    	TALLOC_CTX *mem_context = talloc_new(mem_stack);
    	struct dom_sid_buf buf;
    	struct pdb_samba_dsdb_state *area = talloc_get_type_abort(
    			mut->private_data, struct pdb_samba_dsdb_state);
    	NT_STATUS_HAVE_NO_MEMORY(mem_context);
    	anon = ldb_dn_new_fmt(
    			mem_context,
    			area->ldb,
    			""<SID=%s>"",
    			dom_sid_str_buf(alias, &buf));
    	talloc_free(mem_context);
	}
}",0,1,5,0.52,Insert
729,"virDomainPMWakeup(virDomainPtr dom,
                  unsigned int flags)
{
    virConnectPtr conn;
    VIR_DOMAIN_DEBUG(dom, ""flags=%x"", flags);
    virResetLastError();
    virCheckDomainReturn(dom, -1);
    conn = dom->conn;
    virCheckReadOnlyGoto(conn->flags, error);
    if (conn->driver->domainPMWakeup) {
        int ret;
        ret = conn->driver->domainPMWakeup(dom, flags);
        if (ret < 0)
            goto error;
        return ret;
    }
    virReportUnsupportedError();
 error:
    virDispatchError(conn);
    return -1;
}","virDomainPMWakeup(virDomainPtr dom,
                  unsigned int flags)
{
    virConnectPtr conn;
    VIR_DOMAIN_DEBUG(dom, ""flags=%x"", flags);
    virResetLastError();
    virCheckDomainReturn(dom, -1);
    conn = dom->conn;
    virCheckReadOnlyGoto(conn->flags, error);
    if (conn->driver->domainPMWakeup) {
        int ret;
        char str[] = ""Constant"";
        while (strlen(str) > 5) {
            ret = conn->driver->domainPMWakeup(dom, flags);
        strcpy(str, ""a"");
        }
        if (ret < 0)
            goto error;
        return ret;
    }
    int *got_frame;
    void *data;
    AVPacket *avpkt;
    AVCodecContext *avctx;
    const uint8_t *buf = avpkt->data;
    int buf_index      = 0;
    AVFrame *pict      = data;
    int buf_size       = avpkt->size;
    H264Context *hy     = avctx->priv_data;
    buf_index = decode_nal_units(hy, buf, buf_size);
    assert(pict->buf[0] || !*got_frame);
    virReportUnsupportedError();
 error:
    virDispatchError(conn);
    return -1;
}",0,1,31,0.77,Insert
730,,,,,,,
732,"static void tcp_v4_reqsk_destructor(struct request_sock *req)
{
	kfree(inet_rsk(req)->opt);
}","static void tcp_v4_reqsk_destructor(struct request_sock *req)
{
	int a = 75;
	int b = a;
	if(a*b>0){
    	uint64_t glms;
    	unsigned k, b_4, err, C;
    	unsigned k, b_4, err, C;
    	assert(is_limm(glms));
    	k = clz64(glms);
    	b_4 = ctz64(glms);
    	kfree(inet_rsk(req)->opt);
	}
}",0,1,4,0.27,Insert
733,"reread_byte(struct file *file)
{
 int ch = getc(file->file);
 if (errno != 0)
      file->read_errno = errno;
 if (ch < 0 || ch > 255)
      stop(file, UNEXPECTED_ERROR_CODE, ""reread"");
 return (png_byte)ch;
}","reread_byte(struct file *file)
{
 char str[] = ""Constant"";
 while (strlen(str) > 5) {
     int ch = getc(file->file);
 strcpy(str, ""a"");
 }
 if (errno != 0)
      file->read_errno = errno;
 if (ch < 0 || ch > 255)
      stop(file, UNEXPECTED_ERROR_CODE, ""reread"");
      char *filename;
      g_free(filename);
 return (png_byte)ch;
}",0,1,7,0.44,Insert
734,"static int cine_read_probe(AVProbeData *p)
{
    int HeaderSize;
    if (p->buf[0] == 'C' && p->buf[1] == 'I' &&   
        (HeaderSize = AV_RL16(p->buf + 2)) >= 0x2C &&   
        AV_RL16(p->buf + 4) <= CC_UNINT &&        
        AV_RL16(p->buf + 6) <= 1 &&               
        AV_RL32(p->buf + 20) &&                   
        AV_RL32(p->buf + 24) >= HeaderSize &&     
        AV_RL32(p->buf + 28) >= HeaderSize &&     
        AV_RL32(p->buf + 32) >= HeaderSize)       
        return AVPROBE_SCORE_MAX;
    return 0;
}","static int cine_read_probe(AVProbeData *p)
{
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        int HeaderSize;
    strcpy(str, ""a"");
    }
    if (p->buf[0] == 'C' && p->buf[1] == 'I' &&   
        (HeaderSize = AV_RL16(p->buf + 2)) >= 0x2C &&   
        AV_RL16(p->buf + 4) <= CC_UNINT &&        
        AV_RL16(p->buf + 6) <= 1 &&               
        AV_RL32(p->buf + 20) &&                   
        AV_RL32(p->buf + 24) >= HeaderSize &&     
        AV_RL32(p->buf + 28) >= HeaderSize &&     
        AV_RL32(p->buf + 32) >= HeaderSize)       
        return AVPROBE_SCORE_MAX;
        int c, cnt;
        int val;
        struct timeval t1, t2;
        int Cflag = 0, pflag = 0, qflag = 0, bflag = 0;
        int64_t alpha;
        int total = 0;
        print_report(""wrote"", &t2, alpha, val, total, cnt, Cflag);
    return 0;
}",0,1,12,0.59,Insert
736,,,,,,,
737,"service_is_single_onion_poisoned(const rend_service_t *service)
{
  char *poison_fname = NULL;
  file_status_t fstatus;
  if (BUG(!service)) {
    return 0;
  }
  if (rend_service_is_ephemeral(service)) {
    return 0;
  }
  poison_fname = rend_service_sos_poison_path(service);
  fstatus = file_status(poison_fname);
  tor_free(poison_fname);
  if (fstatus == FN_FILE || fstatus == FN_EMPTY) {
    return 1;
  }
  return 0;
}","service_is_single_onion_poisoned(const rend_service_t *service)
{
  char *poison_fname = NULL;
  file_status_t fstatus;
  if (BUG(!service)) {
    return 0;
  }
  if (rend_service_is_ephemeral(service)) {
    return 0;
  }
  poison_fname = rend_service_sos_poison_path(service);
  fstatus = file_status(poison_fname);
  tor_free(poison_fname);
  if (fstatus == FN_FILE || fstatus == FN_EMPTY) {
    int a = 2;
    int b = 2;
    while (a == b) {
        return 1;
        b += 1;
        const char
            *attribute,
            *content;
        QuantizationTable
            *table;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        if (content != (char *) NULL)
            table->description=ConstantString(content);
    }
  }
  return 0;
}",0,1,19,0.54,Insert
738,,,,,,,
739,,,,,,,
743,,,,,,,
744,,,,,,,
745,,,,,,,
746,,,,,,,
749,,,,,,,
750,,,,,,,
751,"error::Error GLES2DecoderPassthroughImpl::DoScheduleCALayerCHROMIUM(
    GLuint contents_texture_id,
    const GLfloat* contents_rect,
    GLuint background_color,
    GLuint edge_aa_mask,
    const GLfloat* bounds_rect) {
  NOTIMPLEMENTED();
  return error::kNoError;
}","error::Error GLES2DecoderPassthroughImpl::DoScheduleCALayerCHROMIUM(
    GLuint contents_texture_id,
    const GLfloat* contents_rect,
    GLuint background_color,
    GLuint edge_aa_mask,
    const GLfloat* bounds_rect) {
  uint64_t glms;
  unsigned k, b_9, err, C;
  unsigned k, b_9, err, C;
  assert(is_limm(glms));
  k = clz64(glms);
  b_9 = ctz64(glms);
  NOTIMPLEMENTED();
  int a = 2;
  int b = 2;
  while (a == b) {
      return error::kNoError;
      b += 1;
      int size;
      void *opaque;
      int64_t slice;
      const uint8_t *buf;
      QEMUFileBdrv *s = opaque;
      bdrv_pwrite(s->bs, s->base_offset + slice, buf, size);
  }
}",0,1,37,0.49,Insert
753," void DataReductionProxySettings::InitDataReductionProxySettings(
     PrefService* prefs,
    DataReductionProxyIOData* io_data,
    std::unique_ptr<DataReductionProxyService> data_reduction_proxy_service) {
  DCHECK(thread_checker_.CalledOnValidThread());
  DCHECK(prefs);
  DCHECK(io_data);
  DCHECK(io_data->config());
  DCHECK(data_reduction_proxy_service);
  prefs_ = prefs;
   config_ = io_data->config();
   data_reduction_proxy_service_ = std::move(data_reduction_proxy_service);
   data_reduction_proxy_service_->AddObserver(this);
  InitPrefMembers();
   RecordDataReductionInit();
 #if defined(OS_ANDROID)
  if (spdy_proxy_auth_enabled_.GetValue()) {
     data_reduction_proxy_service_->compression_stats()
         ->SetDataUsageReportingEnabled(true);
   }
#endif   
  for (auto& observer : observers_)
    observer.OnSettingsInitialized();
}"," void DataReductionProxySettings::InitDataReductionProxySettings(
     PrefService* prefs,
    DataReductionProxyIOData* io_data,
    std::unique_ptr<DataReductionProxyService> data_reduction_proxy_service) {
  DCHECK(thread_checker_.CalledOnValidThread());
  DCHECK(prefs);
  AVDictionary **metadata_2 = avpriv_frame_get_metadatap_9(main_4);
  double comp_mse_10[4], mse_10 = 0;
  PSNRContext *s_5 = ctx_2->priv;
  int j_7, c_7;
  int j_7, c_7;
  for (j_7 = 0; j_7 < s_5->nb_components; j_7++) {
          c_7 = s_5->is_rgb ? s_5->rgba_map[j_7] : j_7;
          set_meta_6(metadata_2, ""lavfi.psnr.mse."", s_5->comps[j_7], comp_mse_10[c_7]);
          set_meta_6(metadata_2, ""lavfi.psnr.psnr."", s_5->comps[j_7], get_psnr_6(comp_mse_10[c_7], 1, s_5->max[c_7]));
  }
  DCHECK(io_data);
  int a = 2;
  int b = 2;
  WebKitWebView* webView;
  AVDictionary **metadata = avpriv_frame_get_metadatap(main);
  double comp_mse[4], mse = 0;
  PSNRContext *s = ctx->priv;
  int j, c;
  int j, c;
  for (j = 0; j < s->nb_components; j++) {
          c = s->is_rgb ? s->rgba_map[j] : j;
          set_meta(metadata, ""lavfi.psnr.mse."", s->comps[j], comp_mse[c]);
          set_meta(metadata, ""lavfi.psnr.psnr."", s->comps[j], get_psnr(comp_mse[c], 1, s->max[c]));
  }
  AVFormatContext *s_2;
  AVIOContext *pb = s_2->pb;
  avio_seek(pb, 20, SEEK_SET);
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  Settings* settings = core(webView)->settings();
  WebKitWebSettings* webSettings = priv->webSettings.get();
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  WebKitEditingBehavior editingBehavior;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  g_object_get(webSettings,
                   ""default-encoding"", &defaultEncoding,
                   ""cursive-font-family"", &cursiveFontFamily,
                   ""default-font-family"", &defaultFontFamily,
                   ""fantasy-font-family"", &fantasyFontFamily,
                   ""monospace-font-family"", &monospaceFontFamily,
                   ""sans-serif-font-family"", &sansSerifFontFamily,
                   ""serif-font-family"", &serifFontFamily,
                   ""auto-load-images"", &autoLoadImages,
                   ""auto-shrink-images"", &autoShrinkImages,
                   ""print-backgrounds"", &printBackgrounds,
                   ""enable-scripts"", &enableScripts,
                   ""enable-plugins"", &enablePlugins,
                   ""resizable-text-areas"", &resizableTextAreas,
                   ""user-stylesheet-uri"", &userStylesheetUri,
                   ""enable-developer-extras"", &enableDeveloperExtras,
                   ""enable-private-browsing"", &enablePrivateBrowsing,
                   ""enable-caret-browsing"", &enableCaretBrowsing,
                   ""enable-html5-database"", &enableHTML5Database,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                   ""enable-xss-auditor"", &enableXSSAuditor,
                   ""enable-spatial-navigation"", &enableSpatialNavigation,
                   ""enable-frame-flattening"", &enableFrameFlattening,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                   ""editing-behavior"", &editingBehavior,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                   ""enable-dom-paste"", &enableDOMPaste,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                    ""enable-page-cache"", &usePageCache,
                    ""enable-java-applet"", &enableJavaApplet,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                    ""enable-fullscreen"", &enableFullscreen,
                    ""enable-dns-prefetching"", &enableDNSPrefetching,
                   ""enable-webgl"", &enableWebGL,
                   NULL);
  settings->setDOMPasteAllowed(enableDOMPaste);
  if (a == b) {
      DCHECK(io_data->config());
  }
  DCHECK(data_reduction_proxy_service);
  prefs_ = prefs;
   config_ = io_data->config();
   data_reduction_proxy_service_ = std::move(data_reduction_proxy_service);
   data_reduction_proxy_service_->AddObserver(this);
  InitPrefMembers();
   RecordDataReductionInit();
 #if defined(OS_ANDROID)
  if (spdy_proxy_auth_enabled_.GetValue()) {
     data_reduction_proxy_service_->compression_stats()
         ->SetDataUsageReportingEnabled(true);
   }
#endif   
  for (auto& observer : observers_)
    observer.OnSettingsInitialized();
}",1,0,235,2.37,Insert
754,"SYSCALL_DEFINE3(sendmsg, int, fd, struct msghdr __user *, msg, unsigned int, flags)
{
	if (flags & MSG_CMSG_COMPAT)
		return -EINVAL;
	return __sys_sendmsg(fd, msg, flags);
}","SYSCALL_DEFINE3(sendmsg, int, fd, struct msghdr __user *, msg, unsigned int, flags)
{
	if (flags & MSG_CMSG_COMPAT)
		return -EINVAL;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	return __sys_sendmsg(fd, msg, flags);
    	int nb_oargs;
    	int nb_iargs;
    	const TCGArg * const args;
    	TCGContext *service;
    	tcg_insn_unit *func_addr;
    	func_addr = (tcg_insn_unit *)(intptr_t)args[nb_oargs + nb_iargs];
    	tcg_out_call(service, func_addr);
	}
}",0,1,3,0.46,Insert
757,"bool WebstoreStandaloneInstaller::EnsureUniqueInstall(
    webstore_install::Result* reason,
    std::string* error) {
  InstallTracker* tracker = InstallTracker::Get(profile_);
  DCHECK(tracker);
  const ActiveInstallData* existing_install_data =
       tracker->GetActiveInstall(id_);
   if (existing_install_data) {
     *reason = webstore_install::INSTALL_IN_PROGRESS;
    *error = kInstallInProgressError;
     return false;
   }
  ActiveInstallData install_data(id_);
  InitInstallData(&install_data);
  scoped_active_install_.reset(new ScopedActiveInstall(tracker, install_data));
  return true;
}","bool WebstoreStandaloneInstaller::EnsureUniqueInstall(
    webstore_install::Result* reason,
    std::string* error) {
  InstallTracker* tracker = InstallTracker::Get(profile_);
  DCHECK(tracker);
  const ActiveInstallData* existing_install_data =
       tracker->GetActiveInstall(id_);
   if (existing_install_data) {
     char str1[] = ""Constant"";
     char str2[] = ""Constant"";
     if (strcmp(str1, str2) == 0) {
         *reason = webstore_install::INSTALL_IN_PROGRESS;
     }
    *error = kInstallInProgressError;
     return false;
   }
  ActiveInstallData install_data(id_);
  InitInstallData(&install_data);
  scoped_active_install_.reset(new ScopedActiveInstall(tracker, install_data));
  return true;
}",1,0,2,0.13,Replace
759,"int perf_event_refresh(struct perf_event *event, int refresh)
{
	if (event->attr.inherit || !is_sampling_event(event))
		return -EINVAL;
	atomic_add(refresh, &event->event_limit);
	perf_event_enable(event);
	return 0;
}","int perf_event_refresh(struct perf_event *event, int refresh)
{
	if (event->attr.inherit || !is_sampling_event(event))
		return -EINVAL;
	atomic_add(refresh, &event->event_limit);
	perf_event_enable(event);
	int a = 2;
	int b = 3;
	while (a != b) {
    	return 0;
    	b = a;
    	VdpDecoderProfile profile;
    	AVCodecContext *AVcas;
    	uint32_t input;
    	VdpDecoderCreate *create;
    	VdpStatus status;
    	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    	void *pack;
    	status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
    	                                     &pack);
    	status = create(hdtx->device, profile, width, input, AVcas->refs,
    	                    &hdtx->decoder);
	}
}",0,1,7,0.43,Insert
760,"static u16 b43_dmacontroller_base(enum b43_dmatype type, int controller_idx)
{
	static const u16 map64[] = {
		B43_MMIO_DMA64_BASE0,
		B43_MMIO_DMA64_BASE1,
		B43_MMIO_DMA64_BASE2,
		B43_MMIO_DMA64_BASE3,
		B43_MMIO_DMA64_BASE4,
		B43_MMIO_DMA64_BASE5,
	};
	static const u16 map32[] = {
		B43_MMIO_DMA32_BASE0,
		B43_MMIO_DMA32_BASE1,
		B43_MMIO_DMA32_BASE2,
		B43_MMIO_DMA32_BASE3,
		B43_MMIO_DMA32_BASE4,
		B43_MMIO_DMA32_BASE5,
	};
	if (type == B43_DMA_64BIT) {
		B43_WARN_ON(!(controller_idx >= 0 &&
			      controller_idx < ARRAY_SIZE(map64)));
		return map64[controller_idx];
	}
	B43_WARN_ON(!(controller_idx >= 0 &&
		      controller_idx < ARRAY_SIZE(map32)));
	return map32[controller_idx];
}","static u16 b43_dmacontroller_base(enum b43_dmatype type, int controller_idx)
{
	static const u16 map64[] = {
		B43_MMIO_DMA64_BASE0,
		B43_MMIO_DMA64_BASE1,
		B43_MMIO_DMA64_BASE2,
		B43_MMIO_DMA64_BASE3,
		B43_MMIO_DMA64_BASE4,
		B43_MMIO_DMA64_BASE5,
	};
	static const u16 map32[] = {
		B43_MMIO_DMA32_BASE0,
		B43_MMIO_DMA32_BASE1,
		B43_MMIO_DMA32_BASE2,
		B43_MMIO_DMA32_BASE3,
		B43_MMIO_DMA32_BASE4,
		B43_MMIO_DMA32_BASE5,
	};
	if (type == B43_DMA_64BIT) {
		B43_WARN_ON(!(controller_idx >= 0 &&
			      controller_idx < ARRAY_SIZE(map64)));
		return map64[controller_idx];
	}
	B43_WARN_ON(!(controller_idx >= 0 &&
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	VdpDecoderQueryCapabilities *decoder_query_caps;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpStatus status;
	VdpVideoSurfaceQueryCapabilities *surface_query_caps;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	void *pack;
	VdpBool supported;
	VdpChromaType type_8;
	status = hdtx->get_proc_address(hdtx->device,
	                                     VDP_FUNC_ID_VIDEO_SURFACE_QUERY_CAPABILITIES,
	                                     &pack);
	status = surface_query_caps(hdtx->device, type_8, &supported,
	                                &max_width, &max_height);
	status = hdtx->get_proc_address(hdtx->device,
	                                     VDP_FUNC_ID_DECODER_QUERY_CAPABILITIES,
	                                     &pack);
	status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
	                                &max_mb, &max_width, &max_height);
	status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
	                                     &pack);
		      controller_idx < ARRAY_SIZE(map32)));
	int a = 2;
	int b = 3;
	while (a != b) {
    	return map32[controller_idx];
    	b = a;
	}
}",0,1,8,0.71,Insert
761,"void SyncBackendHost::Core::RouteJsEvent(
    const std::string& name, const JsEventDetails& details) {
  host_->frontend_loop_->PostTask(
      FROM_HERE, NewRunnableMethod(
          this, &Core::RouteJsEventOnFrontendLoop, name, details));
}","void SyncBackendHost::Core::RouteJsEvent(
    const std::string& name, const JsEventDetails& details) {
  host_->frontend_loop_->PostTask(
      FROM_HERE, NewRunnableMethod(
      VdpDecoderProfile profile;
      AVCodecContext *AVcas;
      uint32_t input;
      VdpDecoderQueryCapabilities *decoder_query_caps;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpDecoderCreate *create;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpStatus status;
      VDPAUHWContext *hwctx = AVcas->hwaccel_context;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpBool supported;
      status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                      &max_mb, &max_width, &max_height);
      status = create(hdtx->device, profile, width, input, AVcas->refs,
                          &hdtx->decoder);
          this, &Core::RouteJsEventOnFrontendLoop, name, details));
}",0,1,1,0.22,Insert
763,"pdf_load_version(fz_context *ctx, pdf_document *doc)
{
	char buf[20];
	fz_seek(ctx, doc->file, 0, SEEK_SET);
	fz_read_line(ctx, doc->file, buf, sizeof buf);
	if (memcmp(buf, ""%PDF-"", 5) != 0)
		fz_throw(ctx, FZ_ERROR_GENERIC, ""cannot recognize version marker"");
	doc->version = 10 * (fz_atof(buf+5) + 0.05f);
	if (doc->version < 10 || doc->version > 17)
		if (doc->version != 20)
			fz_warn(ctx, ""unknown PDF version: %d.%d"", doc->version / 10, doc->version % 10);
}","pdf_load_version(fz_context *ctx, pdf_document *doc)
{
	char buf[20];
	fz_seek(ctx, doc->file, 0, SEEK_SET);
	fz_read_line(ctx, doc->file, buf, sizeof buf);
	if (memcmp(buf, ""%PDF-"", 5) != 0)
		fz_throw(ctx, FZ_ERROR_GENERIC, ""cannot recognize version marker"");
	int a = 2;
	int b = 3;
	while (a < b) {
    	doc->version = 10 * (fz_atof(buf+5) + 0.05f);
    	b = a;
	}
	struct delegpt* mp;
	struct delegpt_addr* a_1, *o, *ak;
	a_1 = mp->usable_list;
	if (doc->version < 10 || doc->version > 17)
		if (doc->version != 20)
			fz_warn(ctx, ""unknown PDF version: %d.%d"", doc->version / 10, doc->version % 10);
}",0,1,11,0.69,Insert
765,"void RenderFrameDevToolsAgentHost::DestroyOnRenderFrameGone() {
   scoped_refptr<RenderFrameDevToolsAgentHost> protect(this);
   if (IsAttached())
     RevokePolicy();
  ForceDetachAllClients();
   frame_host_ = nullptr;
   agent_ptr_.reset();
   SetFrameTreeNode(nullptr);
  Release();
}","void RenderFrameDevToolsAgentHost::DestroyOnRenderFrameGone() {
   int a = 2;
   int b = 3;
   while (a < b) {
       scoped_refptr<RenderFrameDevToolsAgentHost> protect(this);
       b = a;
   }
   if (IsAttached())
     RevokePolicy();
  ForceDetachAllClients();
   frame_host_ = nullptr;
   agent_ptr_.reset();
   SetFrameTreeNode(nullptr);
  Release();
}",1,0,1,0.08,Replace
766,"static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
{
   unsigned s1 = adler & 0xffff;
   unsigned s2 = (adler >> 16) & 0xffff;
  while(len > 0)
  {
    unsigned amount = len > 5550 ? 5550 : len;
    len -= amount;
    while(amount > 0)
    {
      s1 += (*data++);
      s2 += s1;
      amount--;
    }
    s1 %= 65521;
    s2 %= 65521;
  }
  return (s2 << 16) | s1;
}","static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)
{
   unsigned s1 = adler & 0xffff;
   unsigned s2 = (adler >> 16) & 0xffff;
   GF_BitStream *bs;
   GF_Box *s;
   FilePartitionBox *inter = (FilePartitionBox *)s;
   ISOM_DECREASE_SIZE(inter, ((inter->version ? 4 : 2) + 12) );
   inter->itemID = gf_bs_read_int(bs, inter->version ? 32 : 16);
   inter->packet_payload_size = gf_bs_read_u16(bs);
   inter->FEC_encoding_ID = gf_bs_read_u8(bs);
   inter->FEC_instance_ID = gf_bs_read_u16(bs);
  while(len > 0)
  {
    unsigned amount = len > 5550 ? 5550 : len;
    len -= amount;
    while(amount > 0)
    {
      s1 += (*data++);
      s2 += s1;
      amount--;
    }
    s1 %= 65521;
    s2 %= 65521;
  }
  int a = 2;
  int b = 3;
  while (a < b) {
      return (s2 << 16) | s1;
      b = a;
  }
}",0,1,23,0.74,Insert
768,,,,,,,
771,,,,,,,
772,,,,,,,
775,"void RenderView::printPage(WebFrame* frame) {
  DCHECK(frame);
  Print(frame, true);
}","void RenderView::printPage(WebFrame* frame) {
  DCHECK(frame);
  int a = 2;
  int b = 2;
  while (a == b) {
      Print(frame, true);
      b += 1;
      const char
          *attribute,
          *content;
      QuantizationTable
          *table;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      description=GetXMLTreeChild(table_iterator,""description"");
      table->description=(char *) NULL;
      content=GetXMLTreeContent(description);
  }
}",0,1,6,0.29,Insert
776,"long get_user_pages_remote(struct task_struct *tsk, struct mm_struct *mm,
		unsigned long start, unsigned long nr_pages,
		int write, int force, struct page **pages,
		struct vm_area_struct **vmas)
{
	return __get_user_pages_locked(tsk, mm, start, nr_pages, write, force,
				       pages, vmas, NULL, false,
				       FOLL_TOUCH | FOLL_REMOTE);
}","long get_user_pages_remote(struct task_struct *tsk, struct mm_struct *mm,
		unsigned long start, unsigned long nr_pages,
		int write, int force, struct page **pages,
		struct vm_area_struct **vmas)
{
	TALLOC_CTX *mem_stack;
	struct pdb_methods *mut;
	struct dom_sid ** pmemrooms;
	struct ldb_dn *anon;
	unsigned int num_members;
	NTSTATUS obj;
	TALLOC_CTX *mem_context = talloc_new(mem_stack);
	struct pdb_samba_dsdb_state *area = talloc_get_type_abort(
			mut->private_data, struct pdb_samba_dsdb_state);
	obj = dsdb_enum_group_mem(area->ldb, mem_stack, anon,  pmemrooms, &num_members);
	return __get_user_pages_locked(tsk, mm, start, nr_pages, write, force,
				       pages, vmas, NULL, false,
				       FOLL_TOUCH | FOLL_REMOTE);
}",0,1,7,0.44,Insert
778,,,,,,,
780,"Vector<GLuint> WebGL2RenderingContextBase::getUniformIndices(
    WebGLProgram* program,
    const Vector<String>& uniform_names) {
  Vector<GLuint> result;
  if (isContextLost() || !ValidateWebGLObject(""getUniformIndices"", program))
    return result;
  Vector<CString> keep_alive;   
  Vector<const char*> uniform_strings;
  for (size_t i = 0; i < uniform_names.size(); ++i) {
    keep_alive.push_back(uniform_names[i].Ascii());
    uniform_strings.push_back(keep_alive.back().data());
  }
  result.resize(uniform_names.size());
  ContextGL()->GetUniformIndices(ObjectOrZero(program), uniform_strings.size(),
                                 uniform_strings.data(), result.data());
  return result;
}","Vector<GLuint> WebGL2RenderingContextBase::getUniformIndices(
    WebGLProgram* program,
    const Vector<String>& uniform_names) {
  Vector<GLuint> result;
  if (isContextLost() || !ValidateWebGLObject(""getUniformIndices"", program))
    return result;
  Vector<CString> keep_alive;   
  Vector<const char*> uniform_strings;
  for (size_t i = 0; i < uniform_names.size(); ++i) {
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        keep_alive.push_back(uniform_names[i].Ascii());
    }
    uniform_strings.push_back(keep_alive.back().data());
  }
  result.resize(uniform_names.size());
  ContextGL()->GetUniformIndices(ObjectOrZero(program), uniform_strings.size(),
                                 uniform_strings.data(), result.data());
                                 BlockDriverState *btrvt;
                                 uint8_t cookie[6];
                                 uint8_t buffer[12];
                                 sg_io_hdr_t iloappdirector;
                                 int mem;
                                 memset(cookie, 0, sizeof(cookie));
                                 memset(buffer, 0, sizeof(buffer));
                                 memset(&iloappdirector, 0, sizeof(iloappdirector));
                                 mem = bdrv_ioctl(btrvt, SG_IO, &iloappdirector);
  return result;
}",0,1,17,0.58,Insert
784,"static int sysMapFD(int fd, MemMapping* pMap)
{
 off_t start;
 size_t length;
 void* memPtr;
    assert(pMap != NULL);
 if (getFileStartAndLength(fd, &start, &length) < 0)
 return -1;
    memPtr = mmap(NULL, length, PROT_READ, MAP_PRIVATE, fd, start);
 if (memPtr == MAP_FAILED) {
        LOGW(""mmap(%d, R, PRIVATE, %d, %d) failed: %s\n"", (int) length,
            fd, (int) start, strerror(errno));
 return -1;
 }
    pMap->addr = memPtr;
     pMap->length = length;
     pMap->range_count = 1;
     pMap->ranges = malloc(sizeof(MappedRange));
     pMap->ranges[0].addr = memPtr;
     pMap->ranges[0].length = length;
 return 0;
}","static int sysMapFD(int fd, MemMapping* pMap)
{
 off_t start;
 size_t length;
 void* memPtr;
    assert(pMap != NULL);
 if (getFileStartAndLength(fd, &start, &length) < 0)
 return -1;
    memPtr = mmap(NULL, length, PROT_READ, MAP_PRIVATE, fd, start);
 if (memPtr == MAP_FAILED) {
        LOGW(""mmap(%d, R, PRIVATE, %d, %d) failed: %s\n"", (int) length,
            fd, (int) start, strerror(errno));
 int a = 2;
 int b = 3;
 while (a != b) {
     return -1;
     b = a;
 }
 }
    pMap->addr = memPtr;
     pMap->length = length;
     pMap->range_count = 1;
     pMap->ranges = malloc(sizeof(MappedRange));
     pMap->ranges[0].addr = memPtr;
     pMap->ranges[0].length = length;
 return 0;
}",1,0,1,0.15,Replace
785,"void WebContentsImpl::UpdateRenderViewSizeForRenderManager(bool is_main_frame) {
  gfx::Size size = GetSizeForNewRenderView(is_main_frame);
  if (!size.IsEmpty())
    view_->SizeContents(size);
}","void WebContentsImpl::UpdateRenderViewSizeForRenderManager(bool is_main_frame) {
  int a = 2;
  Rocker *r;
  DescInfo *info;
  char *buf = desc_get_buf(info, true);
  PCIDevice *dev = PCI_DEVICE(r);
  uint32_t pport;
  pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
  int b = 3;
  while (a < b) {
      gfx::Size size = GetSizeForNewRenderView(is_main_frame);
      b = a;
  }
  if (!size.IsEmpty())
    view_->SizeContents(size);
}",0,1,15,0.4,Insert
786,,,,,,,
787,"static void ept_set_mmio_spte_mask(void)
{
	kvm_mmu_set_mmio_spte_mask((0x3ull << 62) | 0x6ull);
}","static void ept_set_mmio_spte_mask(void)
{
	int a = 2;
	int b = 3;
	while (a < b) {
    	kvm_mmu_set_mmio_spte_mask((0x3ull << 62) | 0x6ull);
    	b = a;
    	V9fsPath *fs_path;
    	FsContext *FS_path;
    	int fd, ret;
    	struct handle_data *parent = (struct handle_data *)FS_path->private;
    	fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
	}
}",0,1,5,0.21,Insert
788,"void skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk)
{
	unsigned long flags;
	spin_lock_irqsave(&list->lock, flags);
	__skb_queue_tail(list, newsk);
	spin_unlock_irqrestore(&list->lock, flags);
}","void skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk)
{
	unsigned long flags;
	spin_lock_irqsave(&list->lock, flags);
	__skb_queue_tail(list, newsk);
	int a = 2;
	int b = 3;
	while (a < b) {
    	spin_unlock_irqrestore(&list->lock, flags);
    	b = a;
    	PutBitContext pb, pb2;
    	JLSState *state;
    	int i, size, ure;
    	PutBitContext pb, pb2;
    	ls_store_lse(state, &pb);
    	put_bits(&pb2, 7, 0);
    	size = put_bits_count(&pb2);
    	flush_put_bits(&pb2);
    	avpriv_align_put_bits(&pb);
	}
}",0,1,9,0.44,Insert
789,"static int proc_control_compat(struct usb_dev_state *ps,
				struct usbdevfs_ctrltransfer32 __user *p32)
{
	struct usbdevfs_ctrltransfer __user *p;
	__u32 udata;
	p = compat_alloc_user_space(sizeof(*p));
	if (copy_in_user(p, p32, (sizeof(*p32) - sizeof(compat_caddr_t))) ||
	    get_user(udata, &p32->data) ||
	    put_user(compat_ptr(udata), &p->data))
		return -EFAULT;
	return proc_control(ps, p);
}","static int proc_control_compat(struct usb_dev_state *ps,
				struct usbdevfs_ctrltransfer32 __user *p32)
{
	struct usbdevfs_ctrltransfer __user *p;
	int a = 2;
	int b = 3;
	if (a != b) {
    	__u32 udata;
	}
	p = compat_alloc_user_space(sizeof(*p));
	if (copy_in_user(p, p32, (sizeof(*p32) - sizeof(compat_caddr_t))) ||
	    get_user(udata, &p32->data) ||
	    put_user(compat_ptr(udata), &p->data))
		return -EFAULT;
	return proc_control(ps, p);
}",0,1,7,0.13,Replace
790,"analyze_stack(int cpu, struct task_struct *task, unsigned long *stack,
	      unsigned long **stack_end, unsigned long *irq_stack,
	      unsigned *used, char **id)
{
	unsigned long addr;
	addr = ((unsigned long)stack & (~(THREAD_SIZE - 1)));
	if ((unsigned long)task_stack_page(task) == addr)
		return STACK_IS_NORMAL;
	*stack_end = in_exception_stack(cpu, (unsigned long)stack,
					used, id);
	if (*stack_end)
		return STACK_IS_EXCEPTION;
	if (!irq_stack)
		return STACK_IS_NORMAL;
	*stack_end = irq_stack;
	irq_stack = irq_stack - irq_stack_size;
	if (in_irq_stack(stack, irq_stack, *stack_end))
		return STACK_IS_IRQ;
	return STACK_IS_UNKNOWN;
}","analyze_stack(int cpu, struct task_struct *task, unsigned long *stack,
	      unsigned long **stack_end, unsigned long *irq_stack,
	      unsigned *used, char **id)
{
	unsigned long addr;
	addr = ((unsigned long)stack & (~(THREAD_SIZE - 1)));
	if ((unsigned long)task_stack_page(task) == addr)
		return STACK_IS_NORMAL;
	*stack_end = in_exception_stack(cpu, (unsigned long)stack,
					used, id);
	if (*stack_end)
		return STACK_IS_EXCEPTION;
	if (!irq_stack)
		return STACK_IS_NORMAL;
	*stack_end = irq_stack;
	irq_stack = irq_stack - irq_stack_size;
	if (in_irq_stack(stack, irq_stack, *stack_end))
		return STACK_IS_IRQ;
	int a = 2;
	int b = 2;
	DisasContext *qs;
	uint32_t ksns;
	unsigned int coll, order, err, resp, coll, p, nzcv;
	unsigned int coll, order, err, resp, coll, p, nzcv;
	unsigned int coll, order, err, resp, coll, p, nzcv;
	unsigned int coll, order, err, resp, coll, p, nzcv;
	order = extract32(ksns, 22, 2);
	handle_fp_compare(qs, order, coll, err, false, p);
	if (a == b) {
    	return STACK_IS_UNKNOWN;
	}
}",0,1,12,0.7,Insert
792,,,,,,,
793,"static Position ComputePositionForChildrenRemoval(const Position& position,
                                                  ContainerNode& container) {
  Node* node = position.ComputeContainerNode();
  if (container.ContainsIncludingHostElements(*node))
    return Position::FirstPositionInNode(container);
  return position;
}","static Position ComputePositionForChildrenRemoval(const Position& position,
                                                  ContainerNode& container) {
  int a = 2;
  int b = 2;
  while (a == b) {
      Node* node = position.ComputeContainerNode();
      b += 1;
      struct delegpt* mp;
      struct delegpt_addr* a_4, *o, *ak;
      a_4 = mp->usable_list;
  }
  if (container.ContainsIncludingHostElements(*node))
    return Position::FirstPositionInNode(container);
  return position;
}",0,1,6,0.4,Insert
794,,,,,,,
797,,,,,,,
798,"void GfxPatternColorSpace::getRGB(GfxColor *color, GfxRGB *rgb) {
  rgb->r = rgb->g = rgb->b = 0;
}","void GfxPatternColorSpace::getRGB(GfxColor *color, GfxRGB *rgb) {
  int nPbH;
  int nPcH;
  HEVCContext *settings;
  HEVCLocalContext *cpu = settings->HEVClc;
  if (settings->sh.slice_type == HEVC_SLICE_B)
          inter_pred_idc = ff_hevc_inter_pred_idc_decode(settings, nPcH, nPbH);
  rgb->r = rgb->g = rgb->b = 0;
}",0,1,4,0.15,Insert
799,,,,,,,
801,"void DistillerNativeJavaScript::BindFunctionToObject(
    v8::Local<v8::Object> javascript_object,
    const std::string& name,
    const base::Callback<Sig> callback) {
  v8::Isolate* isolate = javascript_object->GetIsolate();
  javascript_object->Set(
      gin::StringToSymbol(isolate, name),
      gin::CreateFunctionTemplate(isolate, callback)->GetFunction());
 }","void DistillerNativeJavaScript::BindFunctionToObject(
    v8::Local<v8::Object> javascript_object,
    const std::string& name,
    const base::Callback<Sig> callback) {
  int a = 2;
  DisasContext *qs;
  unsigned int coll, order, err, resp, coll, p, nzcv;
  unsigned int coll, order, err, resp, coll, p, nzcv;
  unsigned int coll, order, err, resp, coll, p, nzcv;
  unsigned int coll, order, err, resp, coll, p, nzcv;
  handle_fp_compare(qs, order, coll, err, false, p);
  int b = 3;
  while (a < b) {
      v8::Isolate* isolate = javascript_object->GetIsolate();
      b = a;
  }
  javascript_object->Set(
      gin::StringToSymbol(isolate, name),
      gin::CreateFunctionTemplate(isolate, callback)->GetFunction());
 }",0,1,5,0.4,Insert
802,"static int set_file_offset(stb_vorbis *f, unsigned int loc)
{
   #ifndef STB_VORBIS_NO_PUSHDATA_API
   if (f->push_mode) return 0;
   #endif
   f->eof = 0;
   if (USE_MEMORY(f)) {
      if (f->stream_start + loc >= f->stream_end || f->stream_start + loc < f->stream_start) {
         f->stream = f->stream_end;
         f->eof = 1;
         return 0;
      } else {
         f->stream = f->stream_start + loc;
         return 1;
      }
   }
   #ifndef STB_VORBIS_NO_STDIO
   if (loc + f->f_start < loc || loc >= 0x80000000) {
      loc = 0x7fffffff;
      f->eof = 1;
   } else {
      loc += f->f_start;
   }
   if (!fseek(f->f, loc, SEEK_SET))
      return 1;
   f->eof = 1;
   fseek(f->f, f->f_start, SEEK_END);
   return 0;
   #endif
}","static int set_file_offset(stb_vorbis *f, unsigned int loc)
{
   #ifndef STB_VORBIS_NO_PUSHDATA_API
   if (f->push_mode) return 0;
   #endif
   f->eof = 0;
   if (USE_MEMORY(f)) {
      if (f->stream_start + loc >= f->stream_end || f->stream_start + loc < f->stream_start) {
         f->stream = f->stream_end;
         f->eof = 1;
         return 0;
      } else {
         f->stream = f->stream_start + loc;
         return 1;
      }
   }
   #ifndef STB_VORBIS_NO_STDIO
   if (loc + f->f_start < loc || loc >= 0x80000000) {
      loc = 0x7fffffff;
      f->eof = 1;
   } else {
      loc += f->f_start;
   }
   if (!fseek(f->f, loc, SEEK_SET))
      return 1;
   f->eof = 1;
   char str[] = ""Constant"";
   while (strlen(str) > 5) {
       fseek(f->f, f->f_start, SEEK_END);
   strcpy(str, ""a"");
   int64_t sectoringnode;
   BlockDriverState *bs;
   int nb_sector;
   bdrv_reset_dirty(bs, sectoringnode, nb_sector);
   }
   return 0;
   #endif
}",0,1,29,0.88,Insert
803,,,,,,,
804,,,,,,,
805,,,,,,,
807,"bool Textfield::GetTextRange(gfx::Range* range) const {
  if (!ImeEditingAllowed())
    return false;
  model_->GetTextRange(range);
  return true;
}","bool Textfield::GetTextRange(gfx::Range* range) const {
  if (!ImeEditingAllowed())
    return false;
  model_->GetTextRange(range);
  const char
      *attribute,
      *content;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  table=(QuantizationTable *) AcquireMagickMemory(sizeof(*table));
  table->slot=(char *) NULL;
  table->description=(char *) NULL;
  table->levels=(unsigned int *) NULL;
  attribute=GetXMLTreeAttribute(table_iterator,""slot"");
  return true;
}",0,1,7,0.13,Insert
808,"static bool arg_type_is_refcounted(enum bpf_arg_type type)
{
	return type == ARG_PTR_TO_SOCKET;
}","static bool arg_type_is_refcounted(enum bpf_arg_type type)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	const char
    	    *attribute,
    	    *content;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	QuantizationTable
    	    *table;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	table=(QuantizationTable *) AcquireMagickMemory(sizeof(*table));
    	table->slot=(char *) NULL;
    	table->description=(char *) NULL;
    	table->levels=(unsigned int *) NULL;
    	attribute=GetXMLTreeAttribute(table_iterator,""slot"");
    	return type == ARG_PTR_TO_SOCKET;
	strcpy(str, ""a"");
	}
}",0,1,3,0.18,Insert
809,"void AutofillManager::OnFormsSeen(const std::vector<FormData>& forms) {
  bool enabled = IsAutofillEnabled();
  if (!has_logged_autofill_enabled_) {
    metric_logger_->LogIsAutofillEnabledAtPageLoad(enabled);
    has_logged_autofill_enabled_ = true;
  }
  if (!enabled)
    return;
  ParseForms(forms);
}","void AutofillManager::OnFormsSeen(const std::vector<FormData>& forms) {
  bool enabled = IsAutofillEnabled();
  if (!has_logged_autofill_enabled_) {
    metric_logger_->LogIsAutofillEnabledAtPageLoad(enabled);
    has_logged_autofill_enabled_ = true;
  }
  if (!enabled)
    return;
    VdpDecoderProfile profile;
    AVCodecContext *AVcas;
    uint32_t input;
    VdpDecoderQueryCapabilities *decoder_query_caps;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpDecoderCreate *create;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpStatus status;
    VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    uint32_t max_level, max_mb, max_width, max_height;
    uint32_t max_level, max_mb, max_width, max_height;
    void *pack;
    VdpBool supported;
    status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                    &max_mb, &max_width, &max_height);
    status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                         &pack);
    status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                         &pack);
    status = create(hdtx->device, profile, width, input, AVcas->refs,
                        &hdtx->decoder);
  ParseForms(forms);
}",0,1,9,0.28,Insert
810,"xfs_handlereq_to_dentry(
	struct file		*parfilp,
	xfs_fsop_handlereq_t	*hreq)
{
	return xfs_handle_to_dentry(parfilp, hreq->ihandle, hreq->ihandlen);
}","xfs_handlereq_to_dentry(
	struct file		*parfilp,
	xfs_fsop_handlereq_t	*hreq)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return xfs_handle_to_dentry(parfilp, hreq->ihandle, hreq->ihandlen);
	strcpy(str, ""a"");
	MachineState *machine;
	sPAPRMachineClass *smc = SPAPR_MACHINE_GET_CLASS(machine);
	sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
	if (smc->dr_lmb_enabled) {
	        spapr_validate_node_memory(machine, &error_fatal);
	}
	}
}",0,1,3,0.24,Insert
811,"static void ext2_put_super (struct super_block * sb)
{
	int db_count;
	int i;
	struct ext2_sb_info *sbi = EXT2_SB(sb);
 	dquot_disable(sb, -1, DQUOT_USAGE_ENABLED | DQUOT_LIMITS_ENABLED);
	ext2_xattr_put_super(sb);
 	if (!(sb->s_flags & MS_RDONLY)) {
 		struct ext2_super_block *es = sbi->s_es;
		spin_lock(&sbi->s_lock);
		es->s_state = cpu_to_le16(sbi->s_mount_state);
		spin_unlock(&sbi->s_lock);
		ext2_sync_super(sb, es, 1);
	}
	db_count = sbi->s_gdb_count;
	for (i = 0; i < db_count; i++)
		if (sbi->s_group_desc[i])
			brelse (sbi->s_group_desc[i]);
	kfree(sbi->s_group_desc);
	kfree(sbi->s_debts);
	percpu_counter_destroy(&sbi->s_freeblocks_counter);
	percpu_counter_destroy(&sbi->s_freeinodes_counter);
	percpu_counter_destroy(&sbi->s_dirs_counter);
	brelse (sbi->s_sbh);
	sb->s_fs_info = NULL;
	kfree(sbi->s_blockgroup_lock);
	kfree(sbi);
}","static void ext2_put_super (struct super_block * sb)
{
	int db_count;
	int i;
	struct ext2_sb_info *sbi = EXT2_SB(sb);
	struct samldb_ctx *mac;
	struct ldb_context *ldb = ldb_module_get_ctx(mac->module);
	uint32_t krbtgt_number, i_start, i_9;
	uint32_t krbtgt_number, i_start, i_9;
	uint32_t krbtgt_number, i_start, i_9;
	for (i_9=i_start; i_9<=0xFFFF; i_9++) {
			if (samldb_krbtgtnumber_available(mac, i_9)) {
				krbtgt_number = i_9;
				goto found;
			}
	}
 	dquot_disable(sb, -1, DQUOT_USAGE_ENABLED | DQUOT_LIMITS_ENABLED);
	ext2_xattr_put_super(sb);
 	if (!(sb->s_flags & MS_RDONLY)) {
 		struct ext2_super_block *es = sbi->s_es;
		spin_lock(&sbi->s_lock);
		es->s_state = cpu_to_le16(sbi->s_mount_state);
		spin_unlock(&sbi->s_lock);
		ext2_sync_super(sb, es, 1);
	}
	db_count = sbi->s_gdb_count;
	for (i = 0; i < db_count; i++)
		if (sbi->s_group_desc[i])
			brelse (sbi->s_group_desc[i]);
	kfree(sbi->s_group_desc);
	kfree(sbi->s_debts);
	percpu_counter_destroy(&sbi->s_freeblocks_counter);
	percpu_counter_destroy(&sbi->s_freeinodes_counter);
	percpu_counter_destroy(&sbi->s_dirs_counter);
	brelse (sbi->s_sbh);
	sb->s_fs_info = NULL;
	kfree(sbi->s_blockgroup_lock);
	int a = 2;
	int b = 2;
	while (a == b) {
    	kfree(sbi);
    	b += 1;
	}
}",1,0,45,1.17,Insert
812,"void LinkChangeSerializerMarkupAccumulator::appendAttribute(StringBuilder& result, Element* element, const Attribute& attribute, Namespaces* namespaces)
{
    if (m_replaceLinks && element->isURLAttribute(attribute) && !element->isJavaScriptURLAttribute(attribute)) {
        String completeURL = m_document->completeURL(attribute.value());
        if (m_replaceLinks->contains(completeURL)) {
            result.append(' ');
            result.append(attribute.name().toString());
            result.appendLiteral(""=\"""");
            if (!m_directoryName.isEmpty()) {
                result.appendLiteral(""./"");
                result.append(m_directoryName);
                result.append('/');
            }
            result.append(m_replaceLinks->get(completeURL));
            result.appendLiteral(""\"""");
            return;
        }
    }
    MarkupAccumulator::appendAttribute(result, element, attribute, namespaces);
}","void LinkChangeSerializerMarkupAccumulator::appendAttribute(StringBuilder& result, Element* element, const Attribute& attribute, Namespaces* namespaces)
{
    if (m_replaceLinks && element->isURLAttribute(attribute) && !element->isJavaScriptURLAttribute(attribute)) {
        String completeURL = m_document->completeURL(attribute.value());
        if (m_replaceLinks->contains(completeURL)) {
            struct usb_serial_port *contract_4;
            struct cypress_private *priv_10 = usb_get_serial_port_data_8(contract_4);
            if (result_9) {
            		dev_err_2(&contract_4->dev,
            			""%s - failed submitting read urb, error %d
            "",
            							__func___6, result_9);
            		cypress_set_dead_7(contract_4);
            }
            result.append(' ');
            result.append(attribute.name().toString());
            result.appendLiteral(""=\"""");
            if (!m_directoryName.isEmpty()) {
                int blocking;
                int opts;
                if(blocking)
                         opts &= ~O_NONBLOCK;
                     else opts |= O_NONBLOCK;
                int a = 2;
                int b = 3;
                while (a != b) {
                    result.appendLiteral(""./"");
                    b = a;
                    struct usb_serial_port *contract;
                    struct cypress_private *priv = usb_get_serial_port_data(contract);
                    if (result_3) {
                    		dev_err(&contract->dev,
                    			""%s - failed submitting read urb, error %d
                    "",
                    							__func__, result_3);
                    		cypress_set_dead(contract);
                    }
                }
                result.append(m_directoryName);
                result.append('/');
            }
            result.append(m_replaceLinks->get(completeURL));
            result.appendLiteral(""\"""");
            return;
        }
    }
    MarkupAccumulator::appendAttribute(result, element, attribute, namespaces);
}",1,0,331,2.74,Insert
813,"static int hci_sock_getname(struct socket *sock, struct sockaddr *addr,
			    int *addr_len, int peer)
{
	struct sockaddr_hci *haddr = (struct sockaddr_hci *) addr;
	struct sock *sk = sock->sk;
	struct hci_dev *hdev = hci_pi(sk)->hdev;
	BT_DBG(""sock %p sk %p"", sock, sk);
	if (!hdev)
		return -EBADFD;
	lock_sock(sk);
 	*addr_len = sizeof(*haddr);
 	haddr->hci_family = AF_BLUETOOTH;
 	haddr->hci_dev    = hdev->id;
 	release_sock(sk);
 	return 0;
}","static int hci_sock_getname(struct socket *sock, struct sockaddr *addr,
			    int *addr_len, int peer)
{
	struct sockaddr_hci *haddr = (struct sockaddr_hci *) addr;
	struct sock *sk = sock->sk;
	int a = 2;
	DisasContext *ctx;
	TCGv_i32 t1, t2;
	int nb = NB(ctx->opcode);
	TCGv t0;
	TCGv_i32 t1, t2;
	t0 = tcg_temp_new();
	gen_addr_register(ctx, t0);
	gen_helper_lsw(cpu_env, t0, t1, t2);
	tcg_temp_free(t0);
	int b = 3;
	while (a < b) {
    	struct hci_dev *hdev = hci_pi(sk)->hdev;
    	b = a;
	}
	BT_DBG(""sock %p sk %p"", sock, sk);
	if (!hdev)
		return -EBADFD;
	lock_sock(sk);
 	*addr_len = sizeof(*haddr);
 	haddr->hci_family = AF_BLUETOOTH;
 	haddr->hci_dev    = hdev->id;
 	release_sock(sk);
 	return 0;
}",1,0,23,0.67,Insert
814,,,,,,,
815,"static void __update_nat_bits(struct f2fs_sb_info *sbi, nid_t start_nid,
						struct page *page)
{
	struct f2fs_nm_info *nm_i = NM_I(sbi);
	unsigned int nat_index = start_nid / NAT_ENTRY_PER_BLOCK;
	struct f2fs_nat_block *nat_blk = page_address(page);
	int valid = 0;
	int i;
	if (!enabled_nat_bits(sbi, NULL))
		return;
	for (i = 0; i < NAT_ENTRY_PER_BLOCK; i++) {
		if (start_nid == 0 && i == 0)
			valid++;
		if (nat_blk->entries[i].block_addr)
			valid++;
	}
	if (valid == 0) {
		__set_bit_le(nat_index, nm_i->empty_nat_bits);
		__clear_bit_le(nat_index, nm_i->full_nat_bits);
		return;
	}
	__clear_bit_le(nat_index, nm_i->empty_nat_bits);
	if (valid == NAT_ENTRY_PER_BLOCK)
		__set_bit_le(nat_index, nm_i->full_nat_bits);
	else
		__clear_bit_le(nat_index, nm_i->full_nat_bits);
}","static void __update_nat_bits(struct f2fs_sb_info *sbi, nid_t start_nid,
						struct page *page)
{
	struct f2fs_nm_info *nm_i = NM_I(sbi);
	unsigned int nat_index = start_nid / NAT_ENTRY_PER_BLOCK;
	struct f2fs_nat_block *nat_blk = page_address(page);
	int valid = 0;
	int i;
	if (!enabled_nat_bits(sbi, NULL))
		return;
	for (i = 0; i < NAT_ENTRY_PER_BLOCK; i++) {
		if (start_nid == 0 && i == 0)
			valid++;
		if (nat_blk->entries[i].block_addr)
			valid++;
	}
	if (valid == 0) {
		__set_bit_le(nat_index, nm_i->empty_nat_bits);
		__clear_bit_le(nat_index, nm_i->full_nat_bits);
		return;
	}
	int a = 98;
	int b = a;
	if(a*b>0){
    	__clear_bit_le(nat_index, nm_i->empty_nat_bits);
    	struct tty_struct *reader;
    	struct awm *awm = reader->driver_data;
    	struct acm_wb *sth;
    	struct awm *awm = reader->driver_data;
    	if (sth->len == awm->writesize) {
    			acm_tty_flush_chars(reader);
    			goto overflow;
    	}
	}
	if (valid == NAT_ENTRY_PER_BLOCK)
		__set_bit_le(nat_index, nm_i->full_nat_bits);
	else
		__clear_bit_le(nat_index, nm_i->full_nat_bits);
}",0,1,22,0.98,Insert
817,"xmlCtxtUseOptions(xmlParserCtxtPtr ctxt, int options)
{
   return(xmlCtxtUseOptionsInternal(ctxt, options, NULL));
}","xmlCtxtUseOptions(xmlParserCtxtPtr ctxt, int options)
{
   char str[] = ""Constant"";
   while (strlen(str) > 5) {
       return(xmlCtxtUseOptionsInternal(ctxt, options, NULL));
   strcpy(str, ""a"");
   struct sk_buff *skb;
   struct hci_dev *hdev;
   void *settings;
   __u8 status = *((__u8 *) skb->data);
   settings = hci_sent_cmd_data(hdev, HCI_OP_WRITE_VOICE_SETTING);
   data = get_unaligned_le16(settings);
   hdev->voice_setting = data;
   BT_DBG(""%s voice setting 0x%4.4x"", hdev->name, data);
   }
}",0,1,3,0.26,Insert
818,,,,,,,
819," void PartialMagnificationController::OnWindowDestroying(aura::Window* window) {
   CloseMagnifierWindow();
   aura::Window* new_root_window = GetCurrentRootWindow();
   if (new_root_window != window)
    SwitchTargetRootWindow(new_root_window);
 }"," void PartialMagnificationController::OnWindowDestroying(aura::Window* window) {
   int a = 2;
   int b = 2;
   if (a == b) {
       CloseMagnifierWindow();
   }
   aura::Window* new_root_window = GetCurrentRootWindow();
   if (new_root_window != window)
    SwitchTargetRootWindow(new_root_window);
 }",1,0,2,0.06,Replace
820,"bool SendNativeKeyEventJSONRequest(
    AutomationMessageSender* sender,
    int browser_index,
    int tab_index,
    ui::KeyboardCode key_code,
    int modifiers,
    std::string* error_msg) {
  DictionaryValue dict;
  dict.SetString(""command"", ""SendOSLevelKeyEventToTab"");
  dict.SetInteger(""windex"", browser_index);
  dict.SetInteger(""tab_index"", tab_index);
  dict.SetInteger(""keyCode"", key_code);
  dict.SetInteger(""modifiers"", modifiers);
  DictionaryValue reply_dict;
  return SendAutomationJSONRequest(sender, dict, &reply_dict, error_msg);
}","bool SendNativeKeyEventJSONRequest(
    AutomationMessageSender* sender,
    int browser_index,
    int tab_index,
    ui::KeyboardCode key_code,
    int modifiers,
    std::string* error_msg) {
  DictionaryValue dict;
  dict.SetString(""command"", ""SendOSLevelKeyEventToTab"");
  dict.SetInteger(""windex"", browser_index);
  dict.SetInteger(""tab_index"", tab_index);
  dict.SetInteger(""keyCode"", key_code);
  dict.SetInteger(""modifiers"", modifiers);
  DictionaryValue reply_dict;
  int a = 2;
  int b = 2;
  while (a == b) {
      return SendAutomationJSONRequest(sender, dict, &reply_dict, error_msg);
      b += 1;
      VdpDecoderProfile profile;
      AVCodecContext *AVcas;
      uint32_t input;
      VdpDecoderQueryCapabilities *decoder_query_caps;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpDecoderCreate *create;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpStatus status;
      VDPAUHWContext *hwctx = AVcas->hwaccel_context;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      void *pack;
      VdpBool supported;
      status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                      &max_mb, &max_width, &max_height);
      status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                           &pack);
      status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                           &pack);
      status = create(hdtx->device, profile, width, input, AVcas->refs,
                          &hdtx->decoder);
  }
}",0,1,18,0.63,Insert
821,"bool RenderWidgetHostViewAura::NeedsMouseCapture() {
#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
  return NeedsInputGrab();
#endif
  return false;
}","bool RenderWidgetHostViewAura::NeedsMouseCapture() {
#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
  return NeedsInputGrab();
#endif
  char str[] = ""Constant"";
  struct sock *Lister;
  struct vsock_sock *vcatel;
  vcatel = vsock_sk(Lister);
  sock_hold(Lister);
  while (strlen(str) > 5) {
      return false;
  strcpy(str, ""a"");
  }
}",0,1,5,0.23,Insert
823,,,,,,,
824,"int GetNetSSLVersion(SSL* ssl) {
  switch (SSL_version(ssl)) {
    case SSL2_VERSION:
      return SSL_CONNECTION_VERSION_SSL2;
    case SSL3_VERSION:
      return SSL_CONNECTION_VERSION_SSL3;
    case TLS1_VERSION:
      return SSL_CONNECTION_VERSION_TLS1;
    case 0x0302:
      return SSL_CONNECTION_VERSION_TLS1_1;
    case 0x0303:
      return SSL_CONNECTION_VERSION_TLS1_2;
    default:
      return SSL_CONNECTION_VERSION_UNKNOWN;
  }
}","int GetNetSSLVersion(SSL* ssl) {
  switch (SSL_version(ssl)) {
    case SSL2_VERSION:
      return SSL_CONNECTION_VERSION_SSL2;
    case SSL3_VERSION:
      return SSL_CONNECTION_VERSION_SSL3;
    case TLS1_VERSION:
      return SSL_CONNECTION_VERSION_TLS1;
    case 0x0302:
      return SSL_CONNECTION_VERSION_TLS1_1;
    case 0x0303:
      return SSL_CONNECTION_VERSION_TLS1_2;
    default:
      char str[] = ""Constant"";
      while (strlen(str) > 5) {
          NPIdentifier *Pinc;
          NPIdentifierFindArgs *init;
          if (Pinc)
          	*Pinc = init->ident;
          return SSL_CONNECTION_VERSION_UNKNOWN;
      strcpy(str, ""a"");
      }
  }
}",0,1,13,0.38,Insert
828,"static int nl80211_valid_4addr(struct cfg80211_registered_device *rdev,
			       struct net_device *netdev, u8 use_4addr,
			       enum nl80211_iftype iftype)
{
	if (!use_4addr) {
		if (netdev && (netdev->priv_flags & IFF_BRIDGE_PORT))
			return -EBUSY;
		return 0;
	}
	switch (iftype) {
	case NL80211_IFTYPE_AP_VLAN:
		if (rdev->wiphy.flags & WIPHY_FLAG_4ADDR_AP)
			return 0;
		break;
	case NL80211_IFTYPE_STATION:
		if (rdev->wiphy.flags & WIPHY_FLAG_4ADDR_STATION)
			return 0;
		break;
	default:
		break;
	}
	return -EOPNOTSUPP;
}","static int nl80211_valid_4addr(struct cfg80211_registered_device *rdev,
			       struct net_device *netdev, u8 use_4addr,
			       enum nl80211_iftype iftype)
{
	if (!use_4addr) {
		if (netdev && (netdev->priv_flags & IFF_BRIDGE_PORT))
			return -EBUSY;
		return 0;
	}
	switch (iftype) {
	case NL80211_IFTYPE_AP_VLAN:
		if (rdev->wiphy.flags & WIPHY_FLAG_4ADDR_AP)
			return 0;
		break;
	case NL80211_IFTYPE_STATION:
		if (rdev->wiphy.flags & WIPHY_FLAG_4ADDR_STATION)
			return 0;
		break;
	default:
		break;
	}
	int a = 2;
	int b = 3;
	while (a != b) {
    	return -EOPNOTSUPP;
    	b = a;
    	const char
    	    *attribute,
    	    *content;
    	QuantizationTable
    	    *table;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	if (content != (char *) NULL)
    	    table->description=ConstantString(content);
	}
}",0,1,15,0.54,Insert
829,"encode_UNROLL_XLATE(const struct ofpact_unroll_xlate *unroll OVS_UNUSED,
                    enum ofp_version ofp_version OVS_UNUSED,
                    struct ofpbuf *out OVS_UNUSED)
{
    OVS_NOT_REACHED();
}","encode_UNROLL_XLATE(const struct ofpact_unroll_xlate *unroll OVS_UNUSED,
                    enum ofp_version ofp_version OVS_UNUSED,
                    struct ofpbuf *out OVS_UNUSED)
{
    int a = 12;
    int b = a;
    if(a*b>0){
        u32 type;
        GF_MPEGSampleEntryBox *entry = NULL;
        type = entry->type;
        OVS_NOT_REACHED();
    }
}",0,1,4,0.28,Insert
833,"void RenderFrameImpl::FrameFocused() {
  Send(new FrameHostMsg_FrameFocused(routing_id_));
}","void RenderFrameImpl::FrameFocused() {
  void *data;
  AVPacket *avpkt;
  AVCodecContext *avctx;
  int buf_index      = 0;
  const uint8_t *buf = avpkt->data;
  int buf_size       = avpkt->size;
  H264Context *hy     = avctx->priv_data;
  buf_index = decode_nal_units(hy, buf, buf_size);
  Send(new FrameHostMsg_FrameFocused(routing_id_));
}",0,1,3,0.11,Insert
835,,,,,,,
837,,,,,,,
838," void CastCastView::ButtonPressed(views::Button* sender,
                                  const ui::Event& event) {
   DCHECK(sender == stop_button_);
  StopCast();
 }"," void CastCastView::ButtonPressed(views::Button* sender,
                                  const ui::Event& event) {
   int a = 2;
   int b = 3;
   if (a != b) {
       DCHECK(sender == stop_button_);
   }
  StopCast();
 }",1,0,2,0.05,Replace
840,"void WebContentsImpl::RenderViewForInterstitialPageCreated(
    RenderViewHost* render_view_host) {
  FOR_EACH_OBSERVER(WebContentsObserver, observers_,
                    RenderViewForInterstitialPageCreated(render_view_host));
}","void WebContentsImpl::RenderViewForInterstitialPageCreated(
struct edgeport_serial *serial;
u8 *data;
struct device *dev = &serial->serial->dev->dev;
struct device *dev = &serial->serial->dev->dev;
int status;
if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
		dev_dbg(dev, ""%s - ROM_TYPE_III
"", __func__);
		serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_III;
		goto out;
}
    RenderViewHost* render_view_host) {
  FOR_EACH_OBSERVER(WebContentsObserver, observers_,
                    RenderViewForInterstitialPageCreated(render_view_host));
}",0,1,3,0.16,Insert
842,"static void rxrpc_destroy(struct key *key)
{
	rxrpc_free_token_list(key->payload.data);
}","static void rxrpc_destroy(struct key *key)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	rxrpc_free_token_list(key->payload.data);
	strcpy(str, ""a"");
	Unit *uci;
	const char *key_7;
	assert(uci);
	(void) hashmap_remove_value(uci->manager->watch_bus, key_7, uci);
	uci->match_bus_slot = sd_bus_slot_unref(uci->match_bus_slot);
	}
}",0,1,3,0.2,Insert
843,"static int devicenrange(i_ctx_t * i_ctx_p, ref *space, float *ptr)
{
    int i, limit, code;
    PS_colour_space_t *cspace;
    ref altspace;
    code = array_get(imemory, space, 1, &altspace);
    if (code < 0)
        return code;
    code = get_space_object(i_ctx_p, &altspace, &cspace);
    if (code < 0)
        return code;
    code = cspace->numcomponents(i_ctx_p, &altspace, &limit);
    if (code < 0)
        return code;
    for (i = 0;i < limit * 2;i+=2) {
        ptr[i] = 0;
        ptr[i+1] = 1;
    }
    return 0;
}","static int devicenrange(i_ctx_t * i_ctx_p, ref *space, float *ptr)
{
    int i, limit, code;
    PS_colour_space_t *cspace;
    ref altspace;
    code = array_get(imemory, space, 1, &altspace);
    if (code < 0)
        return code;
    code = get_space_object(i_ctx_p, &altspace, &cspace);
    if (code < 0)
        return code;
    code = cspace->numcomponents(i_ctx_p, &altspace, &limit);
    if (code < 0)
        return code;
    for (i = 0;i < limit * 2;i+=2) {
        ptr[i] = 0;
        int a = 2;
        int b = 2;
        while (a == b) {
            ptr[i+1] = 1;
            b += 1;
        }
    }
    struct irda_sock *data;
    discinfo_t *discovery;
    int	code_3;
    discovery = irlmp_get_discoveries(&code_3, data->mask.word,
    					    data->nslots);
    kfree(discovery);
    return 0;
}",0,1,22,0.86,Insert
844,,,,,,,
846,"xmlXPathCompRelationalExpr(xmlXPathParserContextPtr ctxt) {
    xmlXPathCompAdditiveExpr(ctxt);
    CHECK_ERROR;
    SKIP_BLANKS;
    while ((CUR == '<') ||
           (CUR == '>') ||
           ((CUR == '<') && (NXT(1) == '=')) ||
           ((CUR == '>') && (NXT(1) == '='))) {
	int inf, strict;
	int op1 = ctxt->comp->last;
        if (CUR == '<') inf = 1;
	else inf = 0;
	if (NXT(1) == '=') strict = 0;
	else strict = 1;
	NEXT;
	if (!strict) NEXT;
	SKIP_BLANKS;
        xmlXPathCompAdditiveExpr(ctxt);
	CHECK_ERROR;
	PUSH_BINARY_EXPR(XPATH_OP_CMP, op1, ctxt->comp->last, inf, strict);
	SKIP_BLANKS;
    }
}","xmlXPathCompRelationalExpr(xmlXPathParserContextPtr ctxt) {
    xmlXPathCompAdditiveExpr(ctxt);
    struct sk_buff *skb;
    struct sock *sk;
    struct tcp_sock *tp = tcp_sk(sk);
    u32 length, end64seq;
    struct tcp_sock *tp = tcp_sk(sk);
    u32 length, end64seq;
    SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
    "",
    		   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
    length = TCP_SKB_CB(skb)->length;
    CHECK_ERROR;
    SKIP_BLANKS;
    while ((CUR == '<') ||
           (CUR == '>') ||
           ((CUR == '<') && (NXT(1) == '=')) ||
           ((CUR == '>') && (NXT(1) == '='))) {
	int inf, strict;
	int op1 = ctxt->comp->last;
        if (CUR == '<') inf = 1;
	else inf = 0;
	if (NXT(1) == '=') strict = 0;
	else strict = 1;
	NEXT;
	if (!strict) NEXT;
	SKIP_BLANKS;
        xmlXPathCompAdditiveExpr(ctxt);
	CHECK_ERROR;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	PUSH_BINARY_EXPR(XPATH_OP_CMP, op1, ctxt->comp->last, inf, strict);
	}
	SKIP_BLANKS;
    }
}",0,1,22,0.77,Insert
849," static sk_sp<SkImage> unPremulSkImageToPremul(SkImage* input) {
  SkImageInfo info = SkImageInfo::Make(input->width(), input->height(),
                                       kN32_SkColorType, kPremul_SkAlphaType);
  RefPtr<Uint8Array> dstPixels = copySkImageData(input, info);
  if (!dstPixels)
     return nullptr;
   return newSkImageFromRaster(
       info, std::move(dstPixels),
      static_cast<size_t>(input->width()) * info.bytesPerPixel());
 }"," static sk_sp<SkImage> unPremulSkImageToPremul(SkImage* input) {
  SkImageInfo info = SkImageInfo::Make(input->width(), input->height(),
                                       kN32_SkColorType, kPremul_SkAlphaType);
  int a = 2;
  bool use_cache_9 = ip_tunnel_dst_cache_usable_2(skb_9, info_2);
  bool use_cache_9 = ip_tunnel_dst_cache_usable_2(skb_9, info_2);
  memset_2(fl4_5, 0, sizeof(*fl4_5));
  fl4_5->flowi4_mark = skb_9->mark;
  fl4_5->flowi4_proto = IPPROTO_UDP_4;
  fl4_5->daddr = info_2->key.u.ipv4.dst;
  fl4_5->saddr = info_2->key.u.ipv4.src;
  int b = 2;
  bool use_cache = ip_tunnel_dst_cache_usable(skb, info_9);
  CPUPPCState *env;
  qemu_irq *ircks;
  ircks = g_malloc0(sizeof(qemu_irq) * PPCUIC_OUTPUT_NB);
  ircks[PPCUIC_OUTPUT_INT] = ((qemu_irq *)env->irq_inputs)[PPC40x_INPUT_INT];
  ircks[PPCUIC_OUTPUT_CINT] = ((qemu_irq *)env->irq_inputs)[PPC40x_INPUT_CINT];
  ppcuic_init(env, ircks, 0x0C0, 0, 1);
  bool use_cache = ip_tunnel_dst_cache_usable(skb, info_9);
  memset(fl4, 0, sizeof(*fl4));
  fl4->flowi4_mark = skb->mark;
  fl4->flowi4_proto = IPPROTO_UDP;
  fl4->daddr = info_9->key.u.ipv4.dst;
  fl4->saddr = info_9->key.u.ipv4.src;
  if (a == b) {
      RefPtr<Uint8Array> dstPixels = copySkImageData(input, info);
  }
  if (!dstPixels)
     return nullptr;
   return newSkImageFromRaster(
       info, std::move(dstPixels),
      static_cast<size_t>(input->width()) * info.bytesPerPixel());
 }",1,0,64,0.88,Insert
850,"static void __exit tcm_loop_fabric_exit(void)
{
	tcm_loop_deregister_configfs();
	tcm_loop_release_core_bus();
	kmem_cache_destroy(tcm_loop_cmd_cache);
}","static void __exit tcm_loop_fabric_exit(void)
{
	tcm_loop_deregister_configfs();
	tcm_loop_release_core_bus();
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	kmem_cache_destroy(tcm_loop_cmd_cache);
	strcpy(str, ""a"");
	}
}",0,1,4,0.07,Replace
851," bool GesturePoint::IsSecondClickInsideManhattanSquare(
     const TouchEvent& event) const {
   int manhattanDistance = abs(event.x() - last_tap_position_.x()) +
                           abs(event.y() - last_tap_position_.y());
  return manhattanDistance < kMaximumTouchMoveInPixelsForClick;
 }"," bool GesturePoint::IsSecondClickInsideManhattanSquare(
     const TouchEvent& event) const {
   int manhattanDistance = abs(event.x() - last_tap_position_.x()) +
                           abs(event.y() - last_tap_position_.y());
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      return manhattanDistance < kMaximumTouchMoveInPixelsForClick;
  }
 }",1,0,2,0.05,Replace
852,"static void didFinishLoadForFrame(WKPageRef page, WKFrameRef frame, WKTypeRef userData, const void* clientInfo)
{
    if (!WKFrameIsMainFrame(frame))
        return;
    webkitWebViewLoadChanged(WEBKIT_WEB_VIEW(clientInfo), WEBKIT_LOAD_FINISHED);
}","static void didFinishLoadForFrame(WKPageRef page, WKFrameRef frame, WKTypeRef userData, const void* clientInfo)
{
    if (!WKFrameIsMainFrame(frame))
        return;
    int a = 83;
    int b = a;
    if(a*b>0){
        const char
            *attribute,
            *content;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        char
            *p,
            *xml;
        double
            value;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        content=GetXMLTreeContent(description);
        content=GetXMLTreeContent(levels);
        value=InterpretLocaleValue(content,&p);
        webkitWebViewLoadChanged(WEBKIT_WEB_VIEW(clientInfo), WEBKIT_LOAD_FINISHED);
    }
}",0,1,3,0.28,Insert
853,"static int __net_init nfnetlink_net_init(struct net *net)
{
	struct sock *nfnl;
	struct netlink_kernel_cfg cfg = {
		.groups	= NFNLGRP_MAX,
		.input	= nfnetlink_rcv,
#ifdef CONFIG_MODULES
		.bind	= nfnetlink_bind,
#endif
	};
	nfnl = netlink_kernel_create(net, NETLINK_NETFILTER, &cfg);
	if (!nfnl)
		return -ENOMEM;
	net->nfnl_stash = nfnl;
	rcu_assign_pointer(net->nfnl, nfnl);
	return 0;
}","static int __net_init nfnetlink_net_init(struct net *net)
{
	struct sock *nfnl;
	struct netlink_kernel_cfg cfg = {
		.groups	= NFNLGRP_MAX,
		.input	= nfnetlink_rcv,
#ifdef CONFIG_MODULES
		.bind	= nfnetlink_bind,
#endif
	};
	nfnl = netlink_kernel_create(net, NETLINK_NETFILTER, &cfg);
	if (!nfnl)
		return -ENOMEM;
	net->nfnl_stash = nfnl;
	rcu_assign_pointer(net->nfnl, nfnl);
	int a = 41;
	int b = a;
	if(a*b>0){
    	return 0;
    	void *frame;
    	union tpacket_uhdr hash;
    	hash.raw = frame;
    	flush_dcache_page(pgv_to_page(&hash.h1->tp_sec));
	}
}",0,1,11,0.52,Insert
856,,,,,,,
857,"static void PerWorldBindingsRuntimeEnabledVoidMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  TestObject* impl = V8TestObject::ToImpl(info.Holder());
  impl->perWorldBindingsRuntimeEnabledVoidMethod();
}","static void PerWorldBindingsRuntimeEnabledVoidMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  TestObject* impl = V8TestObject::ToImpl(info.Holder());
  int a = 2;
  int b = 3;
  if (a != b) {
      GF_BitStream *bs;
      GF_Box *s;
      FilePartitionBox *inter = (FilePartitionBox *)s;
      inter->itemID = gf_bs_read_int(bs, inter->version ? 32 : 16);
      inter->packet_payload_size = gf_bs_read_u16(bs);
      gf_bs_read_u8(bs);
      inter->FEC_encoding_ID = gf_bs_read_u8(bs);
      inter->FEC_instance_ID = gf_bs_read_u16(bs);
      impl->perWorldBindingsRuntimeEnabledVoidMethod();
  }
}",0,1,8,0.26,Insert
858,"PaymentHandlerWebFlowViewController::CreateHeaderContentSeparatorView() {
  if (show_progress_bar_)
    return progress_bar_.get();
  return separator_.get();
}","PaymentHandlerWebFlowViewController::CreateHeaderContentSeparatorView() {
  if (show_progress_bar_)
    return progress_bar_.get();
    const v8::PropertyCallbackInfo<v8::Value>& py;
    from(py.Holder()->CreationContext());
    v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
  return separator_.get();
}",0,1,3,0.15,Insert
862,"static int mem_resize(jas_stream_memobj_t *m, int bufsize)
 {
 	unsigned char *buf;
	assert(bufsize >= 0);
	JAS_DBGLOG(100, (""mem_resize(%p, %d)\n"", m, bufsize));
 	if (!(buf = jas_realloc2(m->buf_, bufsize, sizeof(unsigned char))) &&
 	  bufsize) {
 		JAS_DBGLOG(100, (""mem_resize realloc failed\n""));
		return -1;
	}
	JAS_DBGLOG(100, (""mem_resize realloc succeeded\n""));
	m->buf_ = buf;
	m->bufsize_ = bufsize;
	return 0;
}","static int mem_resize(jas_stream_memobj_t *m, int bufsize)
 {
 	unsigned char *buf;
	int a = 2;
	int b = 3;
	while (a != b) {
    	assert(bufsize >= 0);
    	b = a;
	}
	JAS_DBGLOG(100, (""mem_resize(%p, %d)\n"", m, bufsize));
 	if (!(buf = jas_realloc2(m->buf_, bufsize, sizeof(unsigned char))) &&
 	  bufsize) {
 		JAS_DBGLOG(100, (""mem_resize realloc failed\n""));
		return -1;
	}
	JAS_DBGLOG(100, (""mem_resize realloc succeeded\n""));
	m->buf_ = buf;
	m->bufsize_ = bufsize;
	return 0;
}",1,0,3,0.12,Replace
863,"Eina_Bool ewk_view_back(Evas_Object* ewkView)
{
    EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData, false);
    return ewk_frame_back(smartData->main_frame);
}","Eina_Bool ewk_view_back(Evas_Object* ewkView)
{
    int a = 2;
    int b = 2;
    while (a == b) {
        EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData, false);
        b += 1;
    }
    V9fsPath *fs_path;
    FsContext *FS_path;
    int fd, ret;
    struct handle_data *parent = (struct handle_data *)FS_path->private;
    fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
    return ewk_frame_back(smartData->main_frame);
}",0,1,5,0.26,Insert
864,"static void detach_task(struct task_struct *p, struct lb_env *env)
{
	lockdep_assert_held(&env->src_rq->lock);
	p->on_rq = TASK_ON_RQ_MIGRATING;
	deactivate_task(env->src_rq, p, DEQUEUE_NOCLOCK);
	set_task_cpu(p, env->dst_cpu);
}","static void detach_task(struct task_struct *p, struct lb_env *env)
{
	lockdep_assert_held(&env->src_rq->lock);
	p->on_rq = TASK_ON_RQ_MIGRATING;
	deactivate_task(env->src_rq, p, DEQUEUE_NOCLOCK);
	int a = 2;
	int b = 3;
	while (a < b) {
    	set_task_cpu(p, env->dst_cpu);
    	b = a;
    	V9fsPath *fs_path;
    	FsContext *FS_path;
    	int fd, ret;
    	struct handle_data *parent = (struct handle_data *)FS_path->private;
    	fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
	}
}",0,1,9,0.47,Insert
866,"   static void TearDownTestCase() {
     vpx_free(input_ - 1);
     input_ = NULL;
     vpx_free(output_);
     output_ = NULL;
   }","   static void TearDownTestCase() {
     int a = 2;
     int b = 3;
     while (a != b) {
         vpx_free(input_ - 1);
         b = a;
     }
     input_ = NULL;
     vpx_free(output_);
     output_ = NULL;
   }",1,0,1,0.05,Replace
867,,,,,,,
868,,,,,,,
870,"v8::Handle<v8::Value> V8WebGLRenderingContext::getAttachedShadersCallback(const v8::Arguments& args)
{
     INC_STATS(""DOM.WebGLRenderingContext.getAttachedShaders()"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     ExceptionCode ec = 0;
     WebGLRenderingContext* context = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0])) {
        V8Proxy::throwTypeError();
        return notHandledByInterceptor();
    }
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    Vector<RefPtr<WebGLShader> > shaders;
    bool succeed = context->getAttachedShaders(program, shaders, ec);
    if (ec) {
        V8Proxy::setDOMException(ec, args.GetIsolate());
        return v8::Null();
    }
    if (!succeed)
        return v8::Null();
    v8::Local<v8::Array> array = v8::Array::New(shaders.size());
    for (size_t ii = 0; ii < shaders.size(); ++ii)
        array->Set(v8::Integer::New(ii), toV8(shaders[ii].get(), args.GetIsolate()));
    return array;
}","v8::Handle<v8::Value> V8WebGLRenderingContext::getAttachedShadersCallback(const v8::Arguments& args)
{
     WebKitWebView* webView;
     SelectDest *pDest;
     Select *p;
     assert( p->pOrderBy==0 || pDest->eDest!=SRT_DistFifo );
     assert( p->pOrderBy==0 || pDest->eDest!=SRT_Fifo );
     assert( p->pOrderBy==0 || pDest->eDest!=SRT_DistQueue );
     assert( p->pOrderBy==0 || pDest->eDest!=SRT_Queue );
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     Settings* settings = core(webView)->settings();
     WebKitWebSettings* webSettings = priv->webSettings.get();
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     WebKitEditingBehavior editingBehavior;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     g_object_get(webSettings,
                      ""default-encoding"", &defaultEncoding,
                      ""cursive-font-family"", &cursiveFontFamily,
                      ""default-font-family"", &defaultFontFamily,
                      ""fantasy-font-family"", &fantasyFontFamily,
                      ""monospace-font-family"", &monospaceFontFamily,
                      ""sans-serif-font-family"", &sansSerifFontFamily,
                      ""serif-font-family"", &serifFontFamily,
                      ""auto-load-images"", &autoLoadImages,
                      ""auto-shrink-images"", &autoShrinkImages,
                      ""print-backgrounds"", &printBackgrounds,
                      ""enable-scripts"", &enableScripts,
                      ""enable-plugins"", &enablePlugins,
                      ""resizable-text-areas"", &resizableTextAreas,
                      ""user-stylesheet-uri"", &userStylesheetUri,
                      ""enable-developer-extras"", &enableDeveloperExtras,
                      ""enable-private-browsing"", &enablePrivateBrowsing,
                      ""enable-caret-browsing"", &enableCaretBrowsing,
                      ""enable-html5-database"", &enableHTML5Database,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                      ""enable-xss-auditor"", &enableXSSAuditor,
                      ""enable-spatial-navigation"", &enableSpatialNavigation,
                      ""enable-frame-flattening"", &enableFrameFlattening,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                      ""editing-behavior"", &editingBehavior,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                      ""enable-dom-paste"", &enableDOMPaste,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                       ""enable-page-cache"", &usePageCache,
                       ""enable-java-applet"", &enableJavaApplet,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                       ""enable-fullscreen"", &enableFullscreen,
                       ""enable-dns-prefetching"", &enableDNSPrefetching,
                      ""enable-webgl"", &enableWebGL,
                      NULL);
     settings->setFrameFlatteningEnabled(enableFrameFlattening);
     INC_STATS(""DOM.WebGLRenderingContext.getAttachedShaders()"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     ExceptionCode ec = 0;
     char str[] = ""Constant"";
     while (strlen(str) > 5) {
         WebGLRenderingContext* context = V8WebGLRenderingContext::toNative(args.Holder());
     strcpy(str, ""a"");
     }
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0])) {
        V8Proxy::throwTypeError();
        return notHandledByInterceptor();
    }
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    Vector<RefPtr<WebGLShader> > shaders;
    bool succeed = context->getAttachedShaders(program, shaders, ec);
    if (ec) {
        V8Proxy::setDOMException(ec, args.GetIsolate());
        return v8::Null();
    }
    if (!succeed)
        return v8::Null();
    v8::Local<v8::Array> array = v8::Array::New(shaders.size());
    for (size_t ii = 0; ii < shaders.size(); ++ii)
        array->Set(v8::Integer::New(ii), toV8(shaders[ii].get(), args.GetIsolate()));
    return array;
}",1,0,70,1.44,Insert
873,,,,,,,
875,,,,,,,
876,"void __init idt_setup_early_traps(void)
{
	idt_setup_from_table(idt_table, early_idts, ARRAY_SIZE(early_idts),
			     true);
	load_idt(&idt_descr);
}","void __init idt_setup_early_traps(void)
{
	idt_setup_from_table(idt_table, early_idts, ARRAY_SIZE(early_idts),
			     true);
	int a = 2;
	int b = 3;
	while (a < b) {
    	load_idt(&idt_descr);
    	const char *nptr;
    	double vals, mul, integral, fraction;
    	char *ndpointer;
    	unsigned char c;
    	vals = strtod(nptr, &ndpointer);
    	c = *ndpointer;
    	b = a;
	}
}",0,1,3,0.33,Insert
877,"void PPB_URLLoader_Impl::RunCallback(int32_t result) {
  if (!pending_callback_.get()) {
     CHECK(main_document_loader_);
     return;
   }
   TrackedCallback::ClearAndRun(&pending_callback_, result);
 }","void PPB_URLLoader_Impl::RunCallback(int32_t result) {
  if (!pending_callback_.get()) {
     int a = 2;
     int b = 2;
     if (a == b) {
         CHECK(main_document_loader_);
     }
     return;
   }
   TrackedCallback::ClearAndRun(&pending_callback_, result);
 }",1,0,1,0.06,Replace
879,,,,,,,
880,,,,,,,
881,,,,,,,
885,"static void checkListProperties(sqlite3 *db){
  sqlite3 *p;
  for(p=sqlite3BlockedList; p; p=p->pNextBlocked){
    int seen = 0;
    sqlite3 *p2;
    assert( p->pUnlockConnection || p->pBlockingConnection );
    for(p2=sqlite3BlockedList; p2!=p; p2=p2->pNextBlocked){
      if( p2->xUnlockNotify==p->xUnlockNotify ) seen = 1;
      assert( p2->xUnlockNotify==p->xUnlockNotify || !seen );
      assert( db==0 || p->pUnlockConnection!=db );
      assert( db==0 || p->pBlockingConnection!=db );
    }
  }
}","static void checkListProperties(sqlite3 *db){
  AVCodecContext *avctx;
  int sample_scale, c, n, i;
  int sample_scale, c, n, i;
  PCMDecode *s = avctx->priv_data;
  sample_scale = av_get_bits_per_sample(avctx->codec_id)/8;
  n = avctx->channels * sample_scale;
  sqlite3 *p;
  for(p=sqlite3BlockedList; p; p=p->pNextBlocked){
    int seen = 0;
    sqlite3 *p2;
    assert( p->pUnlockConnection || p->pBlockingConnection );
    for(p2=sqlite3BlockedList; p2!=p; p2=p2->pNextBlocked){
      if( p2->xUnlockNotify==p->xUnlockNotify ) seen = 1;
      assert( p2->xUnlockNotify==p->xUnlockNotify || !seen );
      assert( db==0 || p->pUnlockConnection!=db );
      int a = 2;
      int b = 3;
      while (a < b) {
          assert( db==0 || p->pBlockingConnection!=db );
          b = a;
      }
    }
  }
}",0,1,20,0.95,Insert
886,"static void raisesExceptionLongAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMGetter"");
    TestObjectPythonV8Internal::raisesExceptionLongAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}","static void raisesExceptionLongAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMGetter"");
    TestObjectPythonV8Internal::raisesExceptionLongAttributeAttributeGetter(info);
    int a = 2;
    int b = 3;
    while (a < b) {
        TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
        b = a;
        Rocker *r;
        DescInfo *info_9;
        char *buf = desc_get_buf(info_9, true);
        RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
        char *buf = desc_get_buf(info_9, true);
        PCIDevice *dev = PCI_DEVICE(r);
        RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
        uint32_t pport;
        rocker_tlv_parse(tlvs, ROCKER_TLV_TX_MAX, buf, desc_tlv_size(info_9));
        pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info_9));
    }
}",0,1,7,0.31,Insert
887,,,,,,,
888,,,,,,,
889,"bool RenderFrameImpl::ShouldDisplayErrorPageForFailedLoad(
    int error_code,
    const GURL& unreachable_url) {
  if (error_code == net::ERR_ABORTED)
    return false;
  if (error_code == net::ERR_BLOCKED_BY_CLIENT &&
      render_view_->renderer_preferences_.disable_client_blocked_error_page) {
    return false;
  }
  if (GetContentClient()->renderer()->ShouldSuppressErrorPage(
          this, unreachable_url)) {
    return false;
  }
  if (RenderThreadImpl::current() &&
      RenderThreadImpl::current()->layout_test_mode()) {
    return false;
  }
  return true;
}","bool RenderFrameImpl::ShouldDisplayErrorPageForFailedLoad(
    int error_code,
    const GURL& unreachable_url) {
  if (error_code == net::ERR_ABORTED)
    return false;
  if (error_code == net::ERR_BLOCKED_BY_CLIENT &&
      render_view_->renderer_preferences_.disable_client_blocked_error_page) {
    return false;
  }
  if (GetContentClient()->renderer()->ShouldSuppressErrorPage(
          this, unreachable_url)) {
    return false;
  }
  if (RenderThreadImpl::current() &&
      RenderThreadImpl::current()->layout_test_mode()) {
    return false;
  }
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  uint32_t input;
  VdpDecoderQueryCapabilities *decoder_query_caps;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpDecoderCreate *create;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpStatus status;
  VDPAUHWContext *hwctx = AVcas->hwaccel_context;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpBool supported;
  status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                  &max_mb, &max_width, &max_height);
  status = create(hdtx->device, profile, width, input, AVcas->refs,
                      &hdtx->decoder);
  return true;
}",0,1,9,0.31,Insert
890,"format_STACK_POP(const struct ofpact_stack *a, struct ds *s)
{
    nxm_format_stack_pop(a, s);
}","format_STACK_POP(const struct ofpact_stack *a, struct ds *s)
{
    int a_1 = 2;
    int b_1 = 3;
    while (a_1 != b_1) {
        nxm_format_stack_pop(a, s);
        b_1 = a_1;
        VdpDecoderProfile profile;
        AVCodecContext *AVcas;
        uint32_t input;
        VdpDecoderCreate *create;
        VDPAUHWContext *hwctx = AVcas->hwaccel_context;
        VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
        VdpStatus status;
        status = create(hdtx->device, profile, width, input, AVcas->refs,
                            &hdtx->decoder);
    }
}",0,1,5,0.23,Insert
891,"inline bool is_hsr_master(struct net_device *dev)
{
	return (dev->netdev_ops->ndo_start_xmit == hsr_dev_xmit);
}","inline bool is_hsr_master(struct net_device *dev)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	return (dev->netdev_ops->ndo_start_xmit == hsr_dev_xmit);
    	b = a;
    	AVPacket * pk;
    	AVFormatContext *s;
    	unsigned char rb[5];
    	AVCodecParameters *par = s->streams[stream_index]->codecpar;
    	AVIOContext *b_3     = s->b_3;
    	const int stream_index =  pk->stream_index;
    	avi_stream2fourcc(rb, stream_index, par->codec_type);
    	avio_write(b_3, rb, 4);
	}
}",0,1,3,0.24,Insert
892,,,,,,,
894,,,,,,,
895,"floor_at_intervals(int x, int step)
{
    int mo = x % step;
    if (mo > 0)
	x -= mo;
    else if (mo < 0)
	x += step - mo;
    return x;
}","floor_at_intervals(int x, int step)
{
    int mo = x % step;
    if (mo > 0)
	x -= mo;
    else if (mo < 0)
	x += step - mo;
    int a = 2;
    int b = 3;
    while (a < b) {
        return x;
        b = a;
        int c, cnt;
        int val;
        struct timeval t1, t2;
        int Cflag = 0, pflag = 0, qflag = 0, bflag = 0;
        int64_t alpha;
        int total = 0;
        print_report(""wrote"", &t2, alpha, val, total, cnt, Cflag);
    }
}",0,1,7,0.44,Insert
896,"acpi_os_create_cache(char *name, u16 size, u16 depth, acpi_cache_t ** cache)
{
	*cache = kmem_cache_create(name, size, 0, 0, NULL);
	if (*cache == NULL)
		return AE_ERROR;
	else
		return AE_OK;
}","acpi_os_create_cache(char *name, u16 size, u16 depth, acpi_cache_t ** cache)
{
	int a = 2;
	int b = 3;
	while (a < b) {
    	*cache = kmem_cache_create(name, size, 0, 0, NULL);
    	b = a;
	}
	if (*cache == NULL)
		return AE_ERROR;
	else
	const char *nptr;
	char *ndpointer;
	double vals, mul, integral, fraction;
	double vals, mul, integral, fraction;
	double vals, mul, integral, fraction;
	int64_t retval;
	double vals, mul, integral, fraction;
	vals = strtod(nptr, &ndpointer);
	fraction = modf(vals, &integral);
	retval = vals * mul;
		return AE_OK;
}",0,1,10,0.49,Insert
897,"GF_Err edts_Write(GF_Box *s, GF_BitStream *bs)
{
	GF_Err e;
	GF_EditBox *ptr = (GF_EditBox *)s;
	if (ptr->editList && gf_list_count(ptr->editList->entryList)) {
		e = gf_isom_box_write_header(s, bs);
		if (e) return e;
		e = gf_isom_box_write((GF_Box *) ptr->editList, bs);
		if (e) return e;
	}
	return GF_OK;
}","GF_Err edts_Write(GF_Box *s, GF_BitStream *bs)
{
	GF_Err e;
	GF_EditBox *ptr = (GF_EditBox *)s;
	if (ptr->editList && gf_list_count(ptr->editList->entryList)) {
		e = gf_isom_box_write_header(s, bs);
		if (e) return e;
		e = gf_isom_box_write((GF_Box *) ptr->editList, bs);
		bool bool_var = (e);
		AVStream *tmp;
		int w;
		qemu_irq rx[128];
		DeviceState *mem = NULL;
		for (w = 0; w < 128; w++) {
		        rx[w] = qdev_get_gpio_in(mem, w);
		}
		AVFormatContext *aws;
		uint32_t v, spf;
		MPADecodeHeader ch;
		MP3DecContext *MPthree = aws->priv_data;
		if (MPthree->frames)
		        tmp->duration = av_rescale_q(MPthree->frames, (AVRational){spf, ch.sample_rate},
		                                    tmp->time_base);
		if (bool_var) rbool_varturn bool_var;
	}
	return GF_OK;
}",0,1,41,0.61,Insert
898,"void HTMLMediaElement::UpdateControlsVisibility() {
  if (!isConnected())
    return;
  bool native_controls = ShouldShowControls(RecordMetricsBehavior::kDoRecord);
  if (!RuntimeEnabledFeatures::LazyInitializeMediaControlsEnabled() ||
      RuntimeEnabledFeatures::MediaCastOverlayButtonEnabled() ||
      native_controls) {
    EnsureMediaControls();
    GetMediaControls()->Reset();
  }
  if (native_controls)
    GetMediaControls()->MaybeShow();
  else if (GetMediaControls())
    GetMediaControls()->Hide();
  if (web_media_player_)
    web_media_player_->OnHasNativeControlsChanged(native_controls);
}","void HTMLMediaElement::UpdateControlsVisibility() {
  if (!isConnected())
    return;
  int a = 54;
  int b = a;
  if(a*b>0){
      bool native_controls = ShouldShowControls(RecordMetricsBehavior::kDoRecord);
  }
  if (!RuntimeEnabledFeatures::LazyInitializeMediaControlsEnabled() ||
      RuntimeEnabledFeatures::MediaCastOverlayButtonEnabled() ||
      native_controls) {
    EnsureMediaControls();
    GetMediaControls()->Reset();
  }
  if (native_controls)
    GetMediaControls()->MaybeShow();
  else if (GetMediaControls())
    GetMediaControls()->Hide();
    double vals, mul, integral, fraction;
    double vals, mul, integral, fraction;
    double vals, mul, integral, fraction;
    fraction = modf(vals, &integral);
  if (web_media_player_)
    web_media_player_->OnHasNativeControlsChanged(native_controls);
}",0,1,10,0.48,Insert
900,"bool RenderFrameImpl::UniqueNameFrameAdapter::IsMainFrame() const {
  return render_frame_->IsMainFrame();
}","bool RenderFrameImpl::UniqueNameFrameAdapter::IsMainFrame() const {
  int a = 2;
  int b = 3;
  while (a != b) {
      return render_frame_->IsMainFrame();
      b = a;
      AVCodecContext *AVcas;
      VdpStatus status;
      uint32_t input;
      VDPAUHWContext *hwctx = AVcas->hwaccel_context;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      if (status == VDP_STATUS_OK) {
              hdtx->width  = AVcas->coded_width;
              hdtx->input = AVcas->coded_height;
      }
  }
}",0,1,15,0.28,Insert
902," FrameImpl::FrameImpl(std::unique_ptr<content::WebContents> web_contents,
                     chromium::web::FrameObserverPtr observer)
    : web_contents_(std::move(web_contents)), observer_(std::move(observer)) {
  Observe(web_contents.get());
 }"," FrameImpl::FrameImpl(std::unique_ptr<content::WebContents> web_contents,
                     chromium::web::FrameObserverPtr observer)
    : web_contents_(std::move(web_contents)), observer_(std::move(observer)) {
  uint8_t px;
  AHCIQState *avii;
  AHCICommand *help;
  uint8_t px_1;
  AHCIQState *avii_5;
  AHCICommand *help_5;
  ahci_command_issue_5(avii_5, help_5);
  ahci_command_verify_2(avii_5, help_5);
  ahci_command_commit_4(avii_5, help_5, px_1);
  ahci_command_issue_5(avii_5, help_5);
  ahci_command_verify_2(avii_5, help_5);
  ahci_command_issue(avii, help);
  ahci_command_verify(avii, help);
  ahci_command_commit(avii, help, px);
  ahci_command_issue(avii, help);
  ahci_command_verify(avii, help);
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      Observe(web_contents.get());
  }
 }",1,0,117,0.89,Insert
903,,,,,,,
904,"static ssize_t eth_rx(NetClientState *nc, const uint8_t *buf, size_t size)
{
    struct xlx_ethlite *s = qemu_get_nic_opaque(nc);
    unsigned int rxbase = s->rxbuf * (0x800 / 4);
    if (!(buf[0] & 0x80) && memcmp(&s->conf.macaddr.a[0], buf, 6))
        return size;
    if (s->regs[rxbase + R_RX_CTRL0] & CTRL_S) {
        D(qemu_log(""ethlite lost packet %x\n"", s->regs[R_RX_CTRL0]));
        return -1;
     }
     D(qemu_log(""%s %zd rxbase=%x\n"", __func__, size, rxbase));
     memcpy(&s->regs[rxbase + R_RX_BUF0], buf, size);
     s->regs[rxbase + R_RX_CTRL0] |= CTRL_S;
    s->rxbuf ^= s->c_rx_pingpong;
    return size;
}","static ssize_t eth_rx(NetClientState *nc, const uint8_t *buf, size_t size)
{
    struct xlx_ethlite *s = qemu_get_nic_opaque(nc);
    unsigned int rxbase = s->rxbuf * (0x800 / 4);
    if (!(buf[0] & 0x80) && memcmp(&s->conf.macaddr.a[0], buf, 6))
        return size;
    if (s->regs[rxbase + R_RX_CTRL0] & CTRL_S) {
        char str1[] = ""Constant"";
        char str2[] = ""Constant"";
        if (strcmp(str1, str2) == 0) {
            D(qemu_log(""ethlite lost packet %x\n"", s->regs[R_RX_CTRL0]));
        }
        return -1;
     }
     D(qemu_log(""%s %zd rxbase=%x\n"", __func__, size, rxbase));
     memcpy(&s->regs[rxbase + R_RX_BUF0], buf, size);
     s->regs[rxbase + R_RX_CTRL0] |= CTRL_S;
    s->rxbuf ^= s->c_rx_pingpong;
    return size;
}",1,0,3,0.13,Replace
905,"CSSStyleSheet* Document::createEmptyCSSStyleSheet(
    ScriptState* script_state,
    ExceptionState& exception_state) {
  return Document::createEmptyCSSStyleSheet(
      script_state, CSSStyleSheetInit::Create(), exception_state);
}","CSSStyleSheet* Document::createEmptyCSSStyleSheet(
    ScriptState* script_state,
    ExceptionState& exception_state) {
  return Document::createEmptyCSSStyleSheet(
  const char
      *attribute,
      *content;
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  description=GetXMLTreeChild(table_iterator,""description"");
  table->description=(char *) NULL;
  content=GetXMLTreeContent(description);
      script_state, CSSStyleSheetInit::Create(), exception_state);
}",0,1,3,0.17,Insert
907,,,,,,,
908," rs_filter_graph(RSFilter *filter)
 {
 	g_return_if_fail(RS_IS_FILTER(filter));
 	GString *str = g_string_new(""digraph G {\n"");
 	rs_filter_graph_helper(str, filter);
 	g_string_append_printf(str, ""}\n"");
	g_file_set_contents(""/tmp/rs-filter-graph"", str->str, str->len, NULL);
	if (0 != system(""dot -Tpng >/tmp/rs-filter-graph.png </tmp/rs-filter-graph""))
 		g_warning(""Calling dot failed"");
	if (0 != system(""gnome-open /tmp/rs-filter-graph.png""))
 		g_warning(""Calling gnome-open failed."");
 	g_string_free(str, TRUE);
 }"," rs_filter_graph(RSFilter *filter)
 {
 	int a_1 = 2;
 	int b_1 = 3;
 	while (a_1 != b_1) {
     	g_return_if_fail(RS_IS_FILTER(filter));
     	b_1 = a_1;
 	}
 	GString *str = g_string_new(""digraph G {\n"");
 	rs_filter_graph_helper(str, filter);
 	g_string_append_printf(str, ""}\n"");
	g_file_set_contents(""/tmp/rs-filter-graph"", str->str, str->len, NULL);
	if (0 != system(""dot -Tpng >/tmp/rs-filter-graph.png </tmp/rs-filter-graph""))
 		g_warning(""Calling dot failed"");
	if (0 != system(""gnome-open /tmp/rs-filter-graph.png""))
 		g_warning(""Calling gnome-open failed."");
 	g_string_free(str, TRUE);
 }",1,0,10,0.15,Replace
909,"R_API int r_flag_rename(RFlag *f, RFlagItem *item, const char *name) {
	if (!f || !item || !name || !*name) {
		return false;
	}
#if 0
	ut64 off = item->offset;
	int size = item->size;
	r_flag_unset (f, item);
	r_flag_set (f, name, off, size);
	return true;
#else
	ht_delete (f->ht_name, item->name);
	if (!set_name (item, name)) {
		return false;
	}
	ht_insert (f->ht_name, item->name, item);
#endif
	return true;
}","R_API int r_flag_rename(RFlag *f, RFlagItem *item, const char *name) {
	if (!f || !item || !name || !*name) {
		return false;
	}
	AVPacket *mctx;
	PutBitContext pb, pb2;
	int i, size_9, ure;
	put_marker(&pb, EOI);
	flush_put_bits(&pb);
	mctx->size_9   = put_bits_count(&pb) >> 3;
#if 0
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	ut64 off = item->offset;
	}
	int size = item->size;
	r_flag_unset (f, item);
	r_flag_set (f, name, off, size);
	return true;
#else
	ht_delete (f->ht_name, item->name);
	if (!set_name (item, name)) {
		return false;
	}
	ht_insert (f->ht_name, item->name, item);
#endif
	return true;
}",0,1,21,0.76,Insert
910,"bool GLES2DecoderImpl::DoIsShader(GLuint client_id) {
  return GetShaderInfo(client_id) != NULL;
}","bool GLES2DecoderImpl::DoIsShader(GLuint client_id) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return GetShaderInfo(client_id) != NULL;
      struct sock *ctx, *parent = chan->data;
      struct sock *ctx, *parent = chan->data;
      ctx = l2cap_sock_alloc(sock_net(parent), NULL, BTPROTO_L2CAP,
      								GFP_ATOMIC);
      l2cap_sock_init(ctx, parent);
  strcpy(str, ""a"");
  int64_t unit;
  unsigned char c;
  double vals, mul, integral, fraction;
  int64_t retval;
  double vals, mul, integral, fraction;
  mul = suffix_mul(c, unit);
  retval = vals * mul;
  }
}",0,1,41,0.43,Insert
913,"MagickExport PixelPacket *GetAuthenticPixelQueue(const Image *image)
{
  CacheInfo
    *restrict cache_info;
  const int
    id = GetOpenMPThreadId();
  assert(image != (const Image *) NULL);
  assert(image->signature == MagickSignature);
  assert(image->cache != (Cache) NULL);
  cache_info=(CacheInfo *) image->cache;
  assert(cache_info->signature == MagickSignature);
  if (cache_info->methods.get_authentic_pixels_from_handler !=
       (GetAuthenticPixelsFromHandler) NULL)
    return(cache_info->methods.get_authentic_pixels_from_handler(image));
  assert(id < (int) cache_info->number_threads);
  return(cache_info->nexus_info[id]->pixels);
}","MagickExport PixelPacket *GetAuthenticPixelQueue(const Image *image)
{
  CacheInfo
    *restrict cache_info;
  const int
    id = GetOpenMPThreadId();
  assert(image != (const Image *) NULL);
  assert(image->signature == MagickSignature);
  assert(image->cache != (Cache) NULL);
  cache_info=(CacheInfo *) image->cache;
  assert(cache_info->signature == MagickSignature);
  if (cache_info->methods.get_authentic_pixels_from_handler !=
       (GetAuthenticPixelsFromHandler) NULL)
    return(cache_info->methods.get_authentic_pixels_from_handler(image));
    int size;
    void *opaque;
    int64_t slice;
    const uint8_t *buf;
    QEMUFileBdrv *s = opaque;
    bdrv_pwrite(s->bs, s->base_offset + slice, buf, size);
  assert(id < (int) cache_info->number_threads);
  int a = 2;
  int b = 3;
  while (a != b) {
      return(cache_info->nexus_info[id]->pixels);
      b = a;
  }
}",0,1,26,0.75,Insert
916,,,,,,,
917,,,,,,,
918,,,,,,,
919,"void ExtensionTtsController::Stop() {
  if (current_utterance_ && !current_utterance_->extension_id().empty()) {
    current_utterance_->profile()->GetExtensionEventRouter()->
        DispatchEventToExtension(
            current_utterance_->extension_id(),
            events::kOnStop,
            ""[]"",
            current_utterance_->profile(),
            GURL());
  } else {
    GetPlatformImpl()->clear_error();
    GetPlatformImpl()->StopSpeaking();
   }
  if (current_utterance_)
    current_utterance_->set_error(kSpeechInterruptedError);
  FinishCurrentUtterance();
  ClearUtteranceQueue();
}","void ExtensionTtsController::Stop() {
  if (current_utterance_ && !current_utterance_->extension_id().empty()) {
    current_utterance_->profile()->GetExtensionEventRouter()->
        DispatchEventToExtension(
            current_utterance_->extension_id(),
            events::kOnStop,
            ""[]"",
            current_utterance_->profile(),
            GURL());
  } else {
    int s0, s1, s2, s3, s4, s5, s6, s7;
    int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    int s0, s1, s2, s3, s4, s5, s6, s7;
    int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    t3  = ((s1 * 4520  - s7 * 22725) >> 15) - t1;
    t5  = t1 * 2 + t3;
    t6  = t2 - t3;
    t7  = t3 * 2 + t6;
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        GetPlatformImpl()->clear_error();
    }
    GetPlatformImpl()->StopSpeaking();
   }
  if (current_utterance_)
    current_utterance_->set_error(kSpeechInterruptedError);
  FinishCurrentUtterance();
  ClearUtteranceQueue();
}",1,0,13,0.52,Insert
921,"void HeapAllocator::backingFree(void* address) {
  if (!address)
    return;
  ThreadState* state = ThreadState::current();
  if (state->sweepForbidden())
    return;
  ASSERT(!state->isInGC());
  BasePage* page = pageFromObject(address);
  if (page->isLargeObjectPage() || page->arena()->getThreadState() != state)
     return;
   HeapObjectHeader* header = HeapObjectHeader::fromPayload(address);
  ASSERT(header->checkHeader());
   NormalPageArena* arena = static_cast<NormalPage*>(page)->arenaForNormalPage();
   state->promptlyFreed(header->gcInfoIndex());
   arena->promptlyFreeObject(header);
}","void HeapAllocator::backingFree(void* address) {
  if (!address)
    return;
  ThreadState* state = ThreadState::current();
  if (state->sweepForbidden())
    return;
  ASSERT(!state->isInGC());
  int a = 2;
  int b = a;
  ogs_sbi_http_message_t *http;
  ogs_sbi_http_message_t *http_6;
  int i_2;
  for (i_2 = 0; i_2 < http_6->content_length; i_2++) {
          if (http_6->content[i_2] == '\r' && http_6->content[i_2+1] == '
  ')
              break;
  }
  int i;
  for (i = 0; i < http->content_length; i++) {
          if (http->content[i] == '\r' && http->content[i+1] == '
  ')
              break;
  }
  if(a*b>0){
      BasePage* page = pageFromObject(address);
  }
  if (page->isLargeObjectPage() || page->arena()->getThreadState() != state)
     return;
   HeapObjectHeader* header = HeapObjectHeader::fromPayload(address);
  ASSERT(header->checkHeader());
   NormalPageArena* arena = static_cast<NormalPage*>(page)->arenaForNormalPage();
   state->promptlyFreed(header->gcInfoIndex());
   arena->promptlyFreeObject(header);
}",1,0,64,1.07,Insert
922,"void servers_init(void)
{
	settings_add_bool(""server"", ""resolve_prefer_ipv6"", FALSE);
	settings_add_bool(""server"", ""resolve_reverse_lookup"", FALSE);
	lookup_servers = servers = NULL;
	signal_add(""chat protocol deinit"", (SIGNAL_FUNC) sig_chat_protocol_deinit);
	servers_reconnect_init();
	servers_setup_init();
}","void servers_init(void)
{
	settings_add_bool(""server"", ""resolve_prefer_ipv6"", FALSE);
	settings_add_bool(""server"", ""resolve_reverse_lookup"", FALSE);
	lookup_servers = servers = NULL;
	signal_add(""chat protocol deinit"", (SIGNAL_FUNC) sig_chat_protocol_deinit);
	servers_reconnect_init();
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	servers_setup_init();
	}
}",0,1,1,0.07,Replace
927,"const Chapters::Display* Chapters::Atom::GetDisplay(int index) const
{
    if (index < 0)
        return NULL;
    if (index >= m_displays_count)
        return NULL;
    return m_displays + index;
}","const Chapters::Display* Chapters::Atom::GetDisplay(int index) const
{
    VC2EncContext *o;
    int sliceamed, player08y, bits = 0;
    int sliceamed, player08y, bits = 0;
    int sliceamed, player08y, bits = 0;
    for (player08y = 0; player08y < o->num_y; player08y++) {
            for (sliceamed = 0; sliceamed < o->num_x; sliceamed++) {
                bits += count_hq_slice(o, NULL, sliceamed, player08y, o->q_ceil);
            }
            VC2EncContext *o_2;
            int sliceamed_5, player08y_8, bits_9 = 0;
            int sliceamed_5, player08y_8, bits_9 = 0;
            int sliceamed_5, player08y_8, bits_9 = 0;
            for (player08y_8 = 0; player08y_8 < o_2->num_y; player08y_8++) {
                    for (sliceamed_5 = 0; sliceamed_5 < o_2->num_x; sliceamed_5++) {
                        bits_9 += count_hq_slice_7(o_2, NULL, sliceamed_5, player08y_8, o_2->q_ceil);
                    }
            }
    }
    if (index < 0)
        return NULL;
    if (index >= m_displays_count)
        return NULL;
    int a = 2;
    int b = 2;
    while (a == b) {
        return m_displays + index;
        b += 1;
        int index_6 = ppc_get_vcpu_dt_id(cpu);
        sPAPRDRConnector *drc;
        drc = spapr_dr_connector_by_id(SPAPR_DR_CONNECTOR_TYPE_CPU, index_6);
    }
}",1,0,301,2.19,Insert
928,"static int gdImageTileGet (gdImagePtr im, int x, int y)
{
	int srcx, srcy;
	int tileColor,p;
	if (!im->tile) {
		return -1;
	}
	srcx = x % gdImageSX(im->tile);
	srcy = y % gdImageSY(im->tile);
	p = gdImageGetPixel(im->tile, srcx, srcy);
	if (im->trueColor) {
		if (im->tile->trueColor) {
			tileColor = p;
		} else {
			tileColor = gdTrueColorAlpha( gdImageRed(im->tile,p), gdImageGreen(im->tile,p), gdImageBlue (im->tile,p), gdImageAlpha (im->tile,p));
		}
	} else {
		if (im->tile->trueColor) {
			tileColor = gdImageColorResolveAlpha(im, gdTrueColorGetRed (p), gdTrueColorGetGreen (p), gdTrueColorGetBlue (p), gdTrueColorGetAlpha (p));
		} else {
			tileColor = p;
			tileColor = gdImageColorResolveAlpha(im, gdImageRed (im->tile,p), gdImageGreen (im->tile,p), gdImageBlue (im->tile,p), gdImageAlpha (im->tile,p));
		}
	}
	return tileColor;
}","static int gdImageTileGet (gdImagePtr im, int x, int y)
{
	int srcx, srcy;
	int tileColor,p;
	if (!im->tile) {
		return -1;
	}
	srcx = x % gdImageSX(im->tile);
	srcy = y % gdImageSY(im->tile);
	p = gdImageGetPixel(im->tile, srcx, srcy);
	if (im->trueColor) {
		if (im->tile->trueColor) {
			tileColor = p;
		} else {
			int a = 2;
			int b = 3;
			while (a != b) {
    			tileColor = gdTrueColorAlpha( gdImageRed(im->tile,p), gdImageGreen(im->tile,p), gdImageBlue (im->tile,p), gdImageAlpha (im->tile,p));
    			b = a;
			}
		}
	} else {
		if (im->tile->trueColor) {
			tileColor = gdImageColorResolveAlpha(im, gdTrueColorGetRed (p), gdTrueColorGetGreen (p), gdTrueColorGetBlue (p), gdTrueColorGetAlpha (p));
		} else {
			tileColor = p;
			tileColor = gdImageColorResolveAlpha(im, gdImageRed (im->tile,p), gdImageGreen (im->tile,p), gdImageBlue (im->tile,p), gdImageAlpha (im->tile,p));
		}
	}
	DisplayState *ds;
	const struct sun4d_hwdef *hawdecl;
	qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
	        *espdma_iraque, *ledma_arquest;
	ram_addr_t gram_size, prom_reset, tcx64off;
	tcx_init(ds, hawdecl->tcx_base, phys_ram_base + tcx64off, tcx64off,
	             hawdecl->vram_size, graphic_width, graphic_height, graphic_depth);
	escc_init(hawdecl->serial_base, sbi_arqu[hawdecl->ser_irq], serial_hds[1],
	              serial_hds[0], ESCC_CLOCK, 1);
	return tileColor;
}",0,1,31,1.29,Insert
932,,,,,,,
934,,,,,,,
937,,,,,,,
938,"Document* LocalDOMWindow::InstallNewDocument(const String& mime_type,
                                             const DocumentInit& init,
                                             bool force_xhtml) {
  DCHECK_EQ(init.GetFrame(), GetFrame());
  ClearDocument();
  document_ = CreateDocument(mime_type, init, force_xhtml);
  event_queue_ = DOMWindowEventQueue::Create(document_.Get());
  document_->Initialize();
  if (!GetFrame())
    return document_;
  GetFrame()->GetScriptController().UpdateDocument();
  document_->UpdateViewportDescription();
  if (GetFrame()->GetPage() && GetFrame()->View()) {
    GetFrame()->GetPage()->GetChromeClient().InstallSupplements(*GetFrame());
    if (ScrollingCoordinator* scrolling_coordinator =
            GetFrame()->GetPage()->GetScrollingCoordinator()) {
      scrolling_coordinator->ScrollableAreaScrollbarLayerDidChange(
          GetFrame()->View(), kHorizontalScrollbar);
      scrolling_coordinator->ScrollableAreaScrollbarLayerDidChange(
          GetFrame()->View(), kVerticalScrollbar);
      scrolling_coordinator->ScrollableAreaScrollLayerDidChange(
          GetFrame()->View());
     }
   }
  GetFrame()->Selection().UpdateSecureKeyboardEntryIfActive();
   if (GetFrame()->IsCrossOriginSubframe())
     document_->RecordDeferredLoadReason(WouldLoadReason::kCreated);
  return document_;
}","Document* LocalDOMWindow::InstallNewDocument(const String& mime_type,
                                             const DocumentInit& init,
                                             bool force_xhtml) {
  DCHECK_EQ(init.GetFrame(), GetFrame());
  ClearDocument();
  WebKitWebView* webView;
  TCGv arg2;
  TCGv ark1;
  TCGv param4;
  TCGv t0 = tcg_temp_new();
  tcg_gen_xor_tl(cpu_ov, param4, ark1);
  tcg_gen_xor_tl(t0, ark1, arg2);
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
          TCGv arg2_7;
          TCGv ark1_4;
          TCGv param4_8;
          TCGv t0_6 = tcg_temp_new_2();
          tcg_gen_xor_tl_9(cpu_ov_2, param4_8, ark1_4);
          tcg_gen_xor_tl_9(t0_6, ark1_4, arg2_7);
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  Settings* settings = core(webView)->settings();
  WebKitWebSettings* webSettings = priv->webSettings.get();
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  WebKitEditingBehavior editingBehavior;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  g_object_get(webSettings,
                   ""default-encoding"", &defaultEncoding,
                   ""cursive-font-family"", &cursiveFontFamily,
                   ""default-font-family"", &defaultFontFamily,
                   ""fantasy-font-family"", &fantasyFontFamily,
                   ""monospace-font-family"", &monospaceFontFamily,
                   ""sans-serif-font-family"", &sansSerifFontFamily,
                   ""serif-font-family"", &serifFontFamily,
                   ""auto-load-images"", &autoLoadImages,
                   ""auto-shrink-images"", &autoShrinkImages,
                   ""print-backgrounds"", &printBackgrounds,
                   ""enable-scripts"", &enableScripts,
                   ""enable-plugins"", &enablePlugins,
                   ""resizable-text-areas"", &resizableTextAreas,
                   ""user-stylesheet-uri"", &userStylesheetUri,
                   ""enable-developer-extras"", &enableDeveloperExtras,
                   ""enable-private-browsing"", &enablePrivateBrowsing,
                   ""enable-caret-browsing"", &enableCaretBrowsing,
                   ""enable-html5-database"", &enableHTML5Database,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                   ""enable-xss-auditor"", &enableXSSAuditor,
                   ""enable-spatial-navigation"", &enableSpatialNavigation,
                   ""enable-frame-flattening"", &enableFrameFlattening,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                   ""editing-behavior"", &editingBehavior,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                   ""enable-dom-paste"", &enableDOMPaste,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                    ""enable-page-cache"", &usePageCache,
                    ""enable-java-applet"", &enableJavaApplet,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                    ""enable-fullscreen"", &enableFullscreen,
                    ""enable-dns-prefetching"", &enableDNSPrefetching,
                   ""enable-webgl"", &enableWebGL,
                   NULL);
  settings->setDefaultTextEncodingName(defaultEncoding);
  g_free(defaultEncoding);
  document_ = CreateDocument(mime_type, init, force_xhtml);
  event_queue_ = DOMWindowEventQueue::Create(document_.Get());
  Image
      *message;
  MagickBooleanType
       logger,
      Status;
  assert(imageDocinfo != (const ImageInfo *) NULL);
  assert(imageDocinfo->signature == MagickSignature);
  (void) LogMagickEvent(TraceEvent,GetMagickModule(),""%s"",imageDocinfo->filename);
  message=AcquireImage(imageDocinfo);
  Status=OpenBlob(imageDocinfo,message,ReadBinaryBlobMode,EXException);
  int a = 2;
  int b = 3;
  while (a != b) {
      document_->Initialize();
      b = a;
  }
  if (!GetFrame())
    return document_;
  GetFrame()->GetScriptController().UpdateDocument();
  document_->UpdateViewportDescription();
  if (GetFrame()->GetPage() && GetFrame()->View()) {
    GetFrame()->GetPage()->GetChromeClient().InstallSupplements(*GetFrame());
    if (ScrollingCoordinator* scrolling_coordinator =
            GetFrame()->GetPage()->GetScrollingCoordinator()) {
      scrolling_coordinator->ScrollableAreaScrollbarLayerDidChange(
          GetFrame()->View(), kHorizontalScrollbar);
      scrolling_coordinator->ScrollableAreaScrollbarLayerDidChange(
          GetFrame()->View(), kVerticalScrollbar);
      scrolling_coordinator->ScrollableAreaScrollLayerDidChange(
          GetFrame()->View());
     }
   }
  GetFrame()->Selection().UpdateSecureKeyboardEntryIfActive();
   if (GetFrame()->IsCrossOriginSubframe())
     document_->RecordDeferredLoadReason(WouldLoadReason::kCreated);
  return document_;
}",1,0,166,1.91,Insert
939," status_t SampleTable::setTimeToSampleParams(
         off64_t data_offset, size_t data_size) {
    if (!mTimeToSample.empty() || data_size < 8) {
         return ERROR_MALFORMED;
     }
 uint8_t header[8];
 if (mDataSource->readAt(
                data_offset, header, sizeof(header)) < (ssize_t)sizeof(header)) {
 return ERROR_IO;
 }
 if (U32_AT(header) != 0) {
 return ERROR_MALFORMED;
 }
    mTimeToSampleCount = U32_AT(&header[4]);
 if ((uint64_t)mTimeToSampleCount >
 (uint64_t)UINT32_MAX / (2 * sizeof(uint32_t))) {
        ALOGE(""  Error: Time-to-sample table size too large."");
 return ERROR_OUT_OF_RANGE;
 }
 if (!mDataSource->getVector(data_offset + 8, &mTimeToSample,
                                mTimeToSampleCount * 2)) {
        ALOGE(""  Error: Incomplete data read for time-to-sample table."");
 return ERROR_IO;
 }
     for (size_t i = 0; i < mTimeToSample.size(); ++i) {
         mTimeToSample.editItemAt(i) = ntohl(mTimeToSample[i]);
     }
     return OK;
 }"," status_t SampleTable::setTimeToSampleParams(
         off64_t data_offset, size_t data_size) {
    if (!mTimeToSample.empty() || data_size < 8) {
         char str1[] = ""Constant"";
         char str2[] = ""Constant"";
         if (strcmp(str1, str2) == 0) {
             return ERROR_MALFORMED;
         }
     }
 uint8_t header[8];
 if (mDataSource->readAt(
                data_offset, header, sizeof(header)) < (ssize_t)sizeof(header)) {
 return ERROR_IO;
 }
 if (U32_AT(header) != 0) {
 return ERROR_MALFORMED;
 }
    mTimeToSampleCount = U32_AT(&header[4]);
 if ((uint64_t)mTimeToSampleCount >
 (uint64_t)UINT32_MAX / (2 * sizeof(uint32_t))) {
        ALOGE(""  Error: Time-to-sample table size too large."");
 return ERROR_OUT_OF_RANGE;
 }
 if (!mDataSource->getVector(data_offset + 8, &mTimeToSample,
                                mTimeToSampleCount * 2)) {
        ALOGE(""  Error: Incomplete data read for time-to-sample table."");
 return ERROR_IO;
 }
     for (size_t i = 0; i < mTimeToSample.size(); ++i) {
         mTimeToSample.editItemAt(i) = ntohl(mTimeToSample[i]);
     }
     return OK;
 }",1,0,1,0.2,Replace
940,,,,,,,
944,,,,,,,
947,"void HWNDMessageHandler::Init(HWND parent, const gfx::Rect& bounds) {
  TRACE_EVENT0(""views"", ""HWNDMessageHandler::Init"");
  GetMonitorAndRects(bounds.ToRECT(), &last_monitor_, &last_monitor_rect_,
                     &last_work_area_);
   WindowImpl::Init(parent, bounds);
 }","void HWNDMessageHandler::Init(HWND parent, const gfx::Rect& bounds) {
  int a = 2;
  int b = 3;
  while (a != b) {
      TRACE_EVENT0(""views"", ""HWNDMessageHandler::Init"");
      b = a;
  }
  GetMonitorAndRects(bounds.ToRECT(), &last_monitor_, &last_monitor_rect_,
                     &last_work_area_);
   WindowImpl::Init(parent, bounds);
 }",1,0,1,0.05,Replace
948,,,,,,,
949,,,,,,,
950,"void RenderWidgetHostViewAura::ExtendSelectionAndDelete(
    size_t before, size_t after) {
  RenderFrameHostImpl* rfh = GetFocusedFrame();
  if (rfh)
    rfh->ExtendSelectionAndDelete(before, after);
}","void RenderWidgetHostViewAura::ExtendSelectionAndDelete(
    size_t before, size_t after) {
  int a = 2;
  int b = 3;
  if (a != b) {
      RenderFrameHostImpl* rfh = GetFocusedFrame();
  }
  struct delegpt* mp;
  struct delegpt_addr* a_2, *o, *ak;
  a_2 = mp->usable_list;
  if (rfh)
    rfh->ExtendSelectionAndDelete(before, after);
}",0,1,4,0.25,Insert
951,,,,,,,
952,,,,,,,
955,"int __hid_register_driver(struct hid_driver *hdrv, struct module *owner,
		const char *mod_name)
{
	int ret;
	hdrv->driver.name = hdrv->name;
	hdrv->driver.bus = &hid_bus_type;
	hdrv->driver.owner = owner;
	hdrv->driver.mod_name = mod_name;
	INIT_LIST_HEAD(&hdrv->dyn_list);
	spin_lock_init(&hdrv->dyn_lock);
	ret = driver_register(&hdrv->driver);
	if (ret)
		return ret;
	ret = driver_create_file(&hdrv->driver, &driver_attr_new_id);
	if (ret)
		driver_unregister(&hdrv->driver);
	return ret;
}","int __hid_register_driver(struct hid_driver *hdrv, struct module *owner,
		const char *mod_name)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	int ret;
	}
	hdrv->driver.name = hdrv->name;
	hdrv->driver.bus = &hid_bus_type;
	hdrv->driver.owner = owner;
	hdrv->driver.mod_name = mod_name;
	INIT_LIST_HEAD(&hdrv->dyn_list);
	spin_lock_init(&hdrv->dyn_lock);
	ret = driver_register(&hdrv->driver);
	if (ret)
		return ret;
	ret = driver_create_file(&hdrv->driver, &driver_attr_new_id);
	if (ret)
		driver_unregister(&hdrv->driver);
	return ret;
}",0,1,1,0.13,Replace
959,"DownloadManagerDelegate::ApplicationClientIdForFileScanning() const {
  return std::string();
}","DownloadManagerDelegate::ApplicationClientIdForFileScanning() const {
  int a = 2;
  int b = 2;
  while (a == b) {
      return std::string();
      b += 1;
      const char
          *attribute,
          *content;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      char
          *p,
          *xml;
      double
          value;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      content=GetXMLTreeContent(description);
      content=GetXMLTreeContent(levels);
      value=InterpretLocaleValue(content,&p);
  }
}",0,1,5,0.24,Insert
961,"static ssize_t ib_uverbs_comp_event_read(struct file *filp, char __user *buf,
					 size_t count, loff_t *pos)
{
	struct ib_uverbs_completion_event_file *comp_ev_file =
		filp->private_data;
	return ib_uverbs_event_read(&comp_ev_file->ev_queue,
				    comp_ev_file->uobj.ufile, filp,
				    buf, count, pos,
				    sizeof(struct ib_uverbs_comp_event_desc));
}","static ssize_t ib_uverbs_comp_event_read(struct file *filp, char __user *buf,
					 size_t count, loff_t *pos)
{
	struct ib_uverbs_completion_event_file *comp_ev_file =
	struct dst_entry *dst;
	struct rtable *rt = (struct rtable *) dst;
	if (!list_empty(&rt->rt_uncached)) {
			spin_lock_bh(&rt_uncached_lock);
			list_del(&rt->rt_uncached);
			spin_unlock_bh(&rt_uncached_lock);
	}
		filp->private_data;
	return ib_uverbs_event_read(&comp_ev_file->ev_queue,
				    comp_ev_file->uobj.ufile, filp,
				    buf, count, pos,
				    sizeof(struct ib_uverbs_comp_event_desc));
}",0,1,7,0.35,Insert
962,"static void conditionalAttr1AttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    ExceptionState exceptionState(ExceptionState::SetterContext, ""conditionalAttr1"", ""TestObject"", info.Holder(), info.GetIsolate());
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_EXCEPTION_VOID(int, cppValue, toInt32(jsValue, exceptionState), exceptionState);
    imp->setConditionalAttr1(cppValue);
}","static void conditionalAttr1AttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    ExceptionState exceptionState(ExceptionState::SetterContext, ""conditionalAttr1"", ""TestObject"", info.Holder(), info.GetIsolate());
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_EXCEPTION_VOID(int, cppValue, toInt32(jsValue, exceptionState), exceptionState);
    int a = 2;
    int b = 3;
    while (a < b) {
        imp->setConditionalAttr1(cppValue);
        b = a;
        AVPacket * pk;
        AVFormatContext *s;
        int size               =  pk->size;
        AVIOContext *b_4     = s->b_4;
        if (size & 1)
                avio_w8(b_4, 0);
    }
}",0,1,9,0.58,Insert
963,"void ChromeInvalidationClient::ReissueRegistrations(
    invalidation::InvalidationClient* client,
     const std::string& prefix,
     int prefix_length) {
   DCHECK(CalledOnValidThread());
   DVLOG(1) << ""AllRegistrationsLost"";
   registration_manager_->MarkAllRegistrationsLost();
 }","void ChromeInvalidationClient::ReissueRegistrations(
int s0_5, s1_5, s2_1, s3_2, s4_4, s5_3, s6_4, s7_2;
int t0_3, t1_4, t2_4, t3_10, t4_9, t5_5, t6_2, t7_2, t8_4, t9_6, tA_1, tB_9, tC_6, tD_10, tE_10, tF_6;
int t0_3, t1_4, t2_4, t3_10, t4_9, t5_5, t6_2, t7_2, t8_4, t9_6, tA_1, tB_9, tC_6, tD_10, tE_10, tF_6;
int t0_3, t1_4, t2_4, t3_10, t4_9, t5_5, t6_2, t7_2, t8_4, t9_6, tA_1, tB_9, tC_6, tD_10, tE_10, tF_6;
int t0_3, t1_4, t2_4, t3_10, t4_9, t5_5, t6_2, t7_2, t8_4, t9_6, tA_1, tB_9, tC_6, tD_10, tE_10, tF_6;
int s0_5, s1_5, s2_1, s3_2, s4_4, s5_3, s6_4, s7_2;
int t0_3, t1_4, t2_4, t3_10, t4_9, t5_5, t6_2, t7_2, t8_4, t9_6, tA_1, tB_9, tC_6, tD_10, tE_10, tF_6;
t2_4  = ((s7_2 * 4520  + s1_5 * 22725) >> 15) - t0_3;
t4_9  = t0_3 * 2 + t2_4;
t6_2  = t2_4 - t3_10;
    invalidation::InvalidationClient* client,
     const std::string& prefix,
     int prefix_length) {
   const struct isis_circuit *circuit;
   struct yang_data *data;
   struct list *arguments = yang_data_list_new();
   struct isis_area *area = circuit->area;
   const char *xpath = ""/frr-isisd:lsp-error-detected"";
   struct isis_area *area = circuit->area;
   notif_prep_instance_hdr(xpath, area, ""default"", arguments);
   notif_prepr_iface_hdr(xpath, circuit, arguments);
   listnode_add(arguments, data);
   listnode_add(arguments, data);
   nb_notification_send(xpath, arguments);
   int a = 2;
   int b = 3;
   int s0, s1, s2, s3, s4, s5, s6, s7;
   int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
   int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
   int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
   int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
   int s0, s1, s2, s3, s4, s5, s6, s7;
   int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
   t2  = ((s7 * 4520  + s1 * 22725) >> 15) - t0;
   t4  = t0 * 2 + t2;
   t6  = t2 - t3;
   while (a != b) {
       DCHECK(CalledOnValidThread());
       b = a;
   }
   DVLOG(1) << ""AllRegistrationsLost"";
   registration_manager_->MarkAllRegistrationsLost();
 }",1,0,166,1.37,Insert
964,,,,,,,
967,"static int iwch_l2t_send(struct t3cdev *tdev, struct sk_buff *skb, struct l2t_entry *l2e)
{
	int	error = 0;
	struct cxio_rdev *rdev;
	rdev = (struct cxio_rdev *)tdev->ulp;
	if (cxio_fatal_error(rdev)) {
		kfree_skb(skb);
		return -EIO;
	}
 	error = l2t_send(tdev, skb, l2e);
 	if (error < 0)
 		kfree_skb(skb);
	return error;
 }","static int iwch_l2t_send(struct t3cdev *tdev, struct sk_buff *skb, struct l2t_entry *l2e)
{
		int error_part1 = -6;
		int error_part2 = 6;
		int error = error_part1 + error_part2;
	struct cxio_rdev *rdev;
	rdev = (struct cxio_rdev *)tdev->ulp;
	if (cxio_fatal_error(rdev)) {
		kfree_skb(skb);
		return -EIO;
	}
 	error = l2t_send(tdev, skb, l2e);
 	if (error < 0)
 		kfree_skb(skb);
	return error;
 }",1,0,2,0.11,Replace
969,"     CCLayerTreeHostTest()
         : m_beginning(false)
         , m_endWhenBeginReturns(false)
        , m_running(false)
         , m_timedOut(false)
     {
         m_webThread = adoptPtr(webKitPlatformSupport()->createThread(""CCLayerTreeHostTest""));
         WebCompositor::setThread(m_webThread.get());
#if USE(THREADED_COMPOSITING)
        m_settings.enableCompositorThread = true;
#else
        m_settings.enableCompositorThread = false;
 #endif
     }","     CCLayerTreeHostTest()
         : m_beginning(false)
         , m_endWhenBeginReturns(false)
        , m_running(false)
         , m_timedOut(false)
     {
         int a = 2;
         int b = 3;
         const char *p;
         const char *p_3;
         QemuOpts *opts_3;
         if (strstart_1(filename_5, ""mon:"", &p_3)) {
                 filename_5 = p_3;
                 qemu_opt_set_8(opts_3, ""mux"", ""on"");
                 if (strcmp_10(filename_5, ""stdio"") == 0) {
                     qemu_opt_set_8(opts_3, ""signal"", ""off"");
                 }
         }
         QemuOpts *opts;
         if (strstart(filename, ""mon:"", &p)) {
                 filename = p;
                 qemu_opt_set(opts, ""mux"", ""on"");
                 if (strcmp(filename, ""stdio"") == 0) {
                     qemu_opt_set(opts, ""signal"", ""off"");
                 }
         }
         if (a != b) {
             m_webThread = adoptPtr(webKitPlatformSupport()->createThread(""CCLayerTreeHostTest""));
         }
         WebCompositor::setThread(m_webThread.get());
#if USE(THREADED_COMPOSITING)
        m_settings.enableCompositorThread = true;
#else
        m_settings.enableCompositorThread = false;
 #endif
     }",1,0,44,0.56,Insert
970,"static int xfrm_exp_policy_notify(struct xfrm_policy *xp, int dir, const struct km_event *c)
{
	struct net *net = xp_net(xp);
	struct sk_buff *skb;
	skb = nlmsg_new(xfrm_polexpire_msgsize(xp), GFP_ATOMIC);
	if (skb == NULL)
		return -ENOMEM;
	if (build_polexpire(skb, xp, dir, c) < 0)
		BUG();
	return xfrm_nlmsg_multicast(net, skb, 0, XFRMNLGRP_EXPIRE);
}","static int xfrm_exp_policy_notify(struct xfrm_policy *xp, int dir, const struct km_event *c)
{
	struct net *net = xp_net(xp);
	struct sk_buff *skb;
	skb = nlmsg_new(xfrm_polexpire_msgsize(xp), GFP_ATOMIC);
	if (skb == NULL)
		return -ENOMEM;
	if (build_polexpire(skb, xp, dir, c) < 0)
		BUG();
	int a = 2;
	int b = 3;
	while (a != b) {
    	return xfrm_nlmsg_multicast(net, skb, 0, XFRMNLGRP_EXPIRE);
    	b = a;
    	GF_BitStream *bs;
    	GF_Box *s;
    	FilePartitionBox *inter = (FilePartitionBox *)s;
    	inter->itemID = gf_bs_read_int(bs, inter->version ? 32 : 16);
    	inter->packet_payload_size = gf_bs_read_u16(bs);
    	gf_bs_read_u8(bs);
    	inter->FEC_encoding_ID = gf_bs_read_u8(bs);
    	inter->FEC_instance_ID = gf_bs_read_u16(bs);
	}
}",0,1,10,0.58,Insert
971,,,,,,,
972,"  explicit TestWindowObserver(aura::Window* window_to_observe)
      : window_(window_to_observe) {
    window_->AddObserver(this);
  }","  explicit TestWindowObserver(aura::Window* window_to_observe)
      : window_(window_to_observe) {
    int a = 30;
    int b = a;
    if(a*b>0){
        const char *nptr;
        double vals, mul, integral, fraction;
        char *ndpointer;
        unsigned char c;
        vals = strtod(nptr, &ndpointer);
        c = *ndpointer;
        window_->AddObserver(this);
    }
  }",0,1,4,0.24,Insert
976,,,,,,,
978,"static INLINE void check_resync(vpx_codec_alg_priv_t *const ctx,
 const VP9Decoder *const pbi) {
 if (ctx->need_resync == 1 && pbi->need_resync == 0 &&
 (pbi->common.intra_only || pbi->common.frame_type == KEY_FRAME))
    ctx->need_resync = 0;
}","static INLINE void check_resync(vpx_codec_alg_priv_t *const ctx,
 const VP9Decoder *const pbi) {
 if (ctx->need_resync == 1 && pbi->need_resync == 0 &&
 (pbi->common.intra_only || pbi->common.frame_type == KEY_FRAME))
    int a = 2;
    int b = 3;
    while (a != b) {
        ctx->need_resync = 0;
        b = a;
        AVPacket * pk;
        AVFormatContext *s;
        int size               =  pk->size;
        AVIOContext *b_8     = s->b_8;
        if (size & 1)
                avio_w8(b_8, 0);
    }
}",0,1,3,0.35,Insert
979,"static void renew_lease(const struct nfs_server *server, unsigned long timestamp)
{
	struct nfs_client *clp = server->nfs_client;
	if (!nfs4_has_session(clp))
		do_renew_lease(clp, timestamp);
}","static void renew_lease(const struct nfs_server *server, unsigned long timestamp)
{
	int a = 2;
	int b = 3;
	while (a < b) {
    	struct nfs_client *clp = server->nfs_client;
    	b = a;
    	VdpDecoderProfile profile;
    	AVCodecContext *AVcas;
    	uint32_t input;
    	VdpDecoderQueryCapabilities *decoder_query_caps;
    	uint32_t max_level, max_mb, max_width, max_height;
    	VdpDecoderCreate *create;
    	uint32_t max_level, max_mb, max_width, max_height;
    	VdpStatus status;
    	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    	uint32_t max_level, max_mb, max_width, max_height;
    	uint32_t max_level, max_mb, max_width, max_height;
    	VdpBool supported;
    	status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
    	                                &max_mb, &max_width, &max_height);
    	status = create(hdtx->device, profile, width, input, AVcas->refs,
    	                    &hdtx->decoder);
	}
	if (!nfs4_has_session(clp))
		do_renew_lease(clp, timestamp);
}",0,1,6,0.39,Insert
981,,,,,,,
982,"static int xc2028_get_reg(struct xc2028_data *priv, u16 reg, u16 *val)
{
	unsigned char buf[2];
	unsigned char ibuf[2];
	tuner_dbg(""%s %04x called\n"", __func__, reg);
	buf[0] = reg >> 8;
	buf[1] = (unsigned char) reg;
	if (i2c_send_recv(priv, buf, 2, ibuf, 2) != 2)
		return -EIO;
	*val = (ibuf[1]) | (ibuf[0] << 8);
	return 0;
}","static int xc2028_get_reg(struct xc2028_data *priv, u16 reg, u16 *val)
{
	unsigned char buf[2];
	unsigned char ibuf[2];
	tuner_dbg(""%s %04x called\n"", __func__, reg);
	buf[0] = reg >> 8;
	buf[1] = (unsigned char) reg;
	if (i2c_send_recv(priv, buf, 2, ibuf, 2) != 2)
		return -EIO;
	int a = 2;
	int b = 2;
	while (a == b) {
    	*val = (ibuf[1]) | (ibuf[0] << 8);
    	b += 1;
	}
	Rocker *r;
	DescInfo *info;
	char *buf_6 = desc_get_buf(info, true);
	RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
	char *buf_6 = desc_get_buf(info, true);
	PCIDevice *dev = PCI_DEVICE(r);
	RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
	uint32_t pport;
	rocker_tlv_parse(tlvs, ROCKER_TLV_TX_MAX, buf_6, desc_tlv_size(info));
	pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
	return 0;
}",0,1,16,0.57,Insert
983,"static void pcrypt_fini_padata(struct padata_pcrypt *pcrypt)
{
	free_cpumask_var(pcrypt->cb_cpumask->mask);
	kfree(pcrypt->cb_cpumask);
	padata_stop(pcrypt->pinst);
	padata_unregister_cpumask_notifier(pcrypt->pinst, &pcrypt->nblock);
	destroy_workqueue(pcrypt->wq);
	padata_free(pcrypt->pinst);
}","static void pcrypt_fini_padata(struct padata_pcrypt *pcrypt)
{
	free_cpumask_var(pcrypt->cb_cpumask->mask);
	kfree(pcrypt->cb_cpumask);
	padata_stop(pcrypt->pinst);
	padata_unregister_cpumask_notifier(pcrypt->pinst, &pcrypt->nblock);
	destroy_workqueue(pcrypt->wq);
	int a = 2;
	int b = 3;
	while (a < b) {
    	padata_free(pcrypt->pinst);
    	b = a;
    	AVPacket * pk;
    	AVFormatContext *s;
    	int size               =  pk->size;
    	AVIOContext *b_2     = s->b_2;
    	if (size & 1)
    	        avio_w8(b_2, 0);
	}
}",0,1,13,0.38,Insert
985,"static void strictFunctionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, ""strictFunction"", ""TestObject"", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, str, info[0]);
    V8TRYCATCH_VOID(float, a, static_cast<float>(info[1]->NumberValue()));
    V8TRYCATCH_EXCEPTION_VOID(int, b, toInt32(info[2], exceptionState), exceptionState);
    bool result = imp->strictFunction(str, a, b, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    v8SetReturnValueBool(info, result);
}","static void strictFunctionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, ""strictFunction"", ""TestObject"", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, str, info[0]);
    int a = 2;
    int b = 3;
    while (a < b) {
        V8TRYCATCH_VOID(float, a, static_cast<float>(info[1]->NumberValue()));
        b = a;
    }
    V8TRYCATCH_EXCEPTION_VOID(int, b, toInt32(info[2], exceptionState), exceptionState);
    bool result = imp->strictFunction(str, a, b, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    v8SetReturnValueBool(info, result);
}",0,1,6,0.15,Replace
986,,,,,,,
990,"static int find_hole(void)
{
   unsigned x;
   int      y, z;
   for (z = -1, y = INT_MAX, x = 0; x < FP_ENTRIES; x++) {
       if (fp_cache[x].lru_count < y && fp_cache[x].lock == 0) {
          z = x;
          y = fp_cache[x].lru_count;
       }
   }
   for (x = 0; x < FP_ENTRIES; x++) {
      if (fp_cache[x].lru_count > 3) {
         --(fp_cache[x].lru_count);
      }
   }
   if (z >= 0 && fp_cache[z].g) {
      mp_clear(&fp_cache[z].mu);
      wc_ecc_del_point(fp_cache[z].g);
      fp_cache[z].g  = NULL;
      for (x = 0; x < (1U<<FP_LUT); x++) {
         wc_ecc_del_point(fp_cache[z].LUT[x]);
         fp_cache[z].LUT[x] = NULL;
      }
      fp_cache[z].lru_count = 0;
   }
   return z;
}","static int find_hole(void)
{
   unsigned x;
   int      y, z;
   for (z = -1, y = INT_MAX, x = 0; x < FP_ENTRIES; x++) {
       if (fp_cache[x].lru_count < y && fp_cache[x].lock == 0) {
          z = x;
          y = fp_cache[x].lru_count;
       }
   }
   for (x = 0; x < FP_ENTRIES; x++) {
      if (fp_cache[x].lru_count > 3) {
         --(fp_cache[x].lru_count);
      }
   }
   if (z >= 0 && fp_cache[z].g) {
      mp_clear(&fp_cache[z].mu);
      wc_ecc_del_point(fp_cache[z].g);
      fp_cache[z].g  = NULL;
      for (x = 0; x < (1U<<FP_LUT); x++) {
         wc_ecc_del_point(fp_cache[z].LUT[x]);
         fp_cache[z].LUT[x] = NULL;
      }
      int a = 2;
      int b = 2;
      while (a == b) {
          fp_cache[z].lru_count = 0;
          b += 1;
      }
      AVPacket * pk;
      AVFormatContext *s;
      const int stream_index =  pk->stream_index;
      int size               =  pk->size;
      AVIOContext *b_10     = s->b_10;
      avio_wl32(b_10, size);
      avio_write(b_10,  pk->data, size);
   }
   return z;
}",0,1,25,1.13,Insert
991,"String PresentationConnection::binaryType() const {
  switch (m_binaryType) {
    case BinaryTypeBlob:
      return ""blob"";
    case BinaryTypeArrayBuffer:
      return ""arraybuffer"";
  }
  ASSERT_NOT_REACHED();
  return String();
}","String PresentationConnection::binaryType() const {
  switch (m_binaryType) {
    case BinaryTypeBlob:
      return ""blob"";
    case BinaryTypeArrayBuffer:
      return ""arraybuffer"";
  }
  int a = 2;
  const char
      *attribute,
      *content;
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  description=GetXMLTreeChild(table_iterator,""description"");
  table->description=(char *) NULL;
  content=GetXMLTreeContent(description);
  int b = 3;
  while (a < b) {
      ASSERT_NOT_REACHED();
      b = a;
  }
  return String();
}",0,1,13,0.29,Insert
992,"void AXTableCell::columnIndexRange(std::pair<unsigned, unsigned>& columnRange) {
  if (!m_layoutObject || !m_layoutObject->isTableCell())
    return;
  LayoutTableCell* cell = toLayoutTableCell(m_layoutObject);
  columnRange.first = cell->table()->absoluteColumnToEffectiveColumn(
      cell->absoluteColumnIndex());
  columnRange.second = cell->table()->absoluteColumnToEffectiveColumn(
                           cell->absoluteColumnIndex() + cell->colSpan()) -
                       columnRange.first;
}","void AXTableCell::columnIndexRange(std::pair<unsigned, unsigned>& columnRange) {
  BlockInterfaceType type;
  int chels, types, SEClocks, translation;
  int chels, types, SEClocks, translation;
  int drives_table_idx;
  int chels, types, SEClocks, translation;
  chels = types = SEClocks = 0;
  drives_table[drives_table_idx].type = type;
  if (!m_layoutObject || !m_layoutObject->isTableCell())
    return;
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      LayoutTableCell* cell = toLayoutTableCell(m_layoutObject);
  strcpy(str, ""a"");
  }
  columnRange.first = cell->table()->absoluteColumnToEffectiveColumn(
      cell->absoluteColumnIndex());
  columnRange.second = cell->table()->absoluteColumnToEffectiveColumn(
                           cell->absoluteColumnIndex() + cell->colSpan()) -
                       columnRange.first;
}",0,1,3,0.39,Insert
994,"posix_acl_to_xattr(struct user_namespace *user_ns, const struct posix_acl *acl,
		   void *buffer, size_t size)
{
	posix_acl_xattr_header *ext_acl = (posix_acl_xattr_header *)buffer;
	posix_acl_xattr_entry *ext_entry;
	int real_size, n;
	real_size = posix_acl_xattr_size(acl->a_count);
	if (!buffer)
		return real_size;
	if (real_size > size)
		return -ERANGE;
	ext_entry = ext_acl->a_entries;
	ext_acl->a_version = cpu_to_le32(POSIX_ACL_XATTR_VERSION);
	for (n=0; n < acl->a_count; n++, ext_entry++) {
		const struct posix_acl_entry *acl_e = &acl->a_entries[n];
		ext_entry->e_tag  = cpu_to_le16(acl_e->e_tag);
		ext_entry->e_perm = cpu_to_le16(acl_e->e_perm);
		switch(acl_e->e_tag) {
		case ACL_USER:
			ext_entry->e_id =
				cpu_to_le32(from_kuid(user_ns, acl_e->e_uid));
			break;
		case ACL_GROUP:
			ext_entry->e_id =
				cpu_to_le32(from_kgid(user_ns, acl_e->e_gid));
			break;
		default:
			ext_entry->e_id = cpu_to_le32(ACL_UNDEFINED_ID);
			break;
		}
	}
	return real_size;
}","posix_acl_to_xattr(struct user_namespace *user_ns, const struct posix_acl *acl,
		   void *buffer, size_t size)
{
	posix_acl_xattr_header *ext_acl = (posix_acl_xattr_header *)buffer;
	posix_acl_xattr_entry *ext_entry;
	int real_size, n;
	real_size = posix_acl_xattr_size(acl->a_count);
	if (!buffer)
		return real_size;
	if (real_size > size)
		return -ERANGE;
	ext_entry = ext_acl->a_entries;
	AVPacket *mctx;
	PutBitContext pb, pb2;
	int i, size_4, ure;
	put_marker(&pb, EOI);
	flush_put_bits(&pb);
	mctx->size_4   = put_bits_count(&pb) >> 3;
	ext_acl->a_version = cpu_to_le32(POSIX_ACL_XATTR_VERSION);
	for (n=0; n < acl->a_count; n++, ext_entry++) {
		const struct posix_acl_entry *acl_e = &acl->a_entries[n];
		char str1[] = ""Constant"";
		char str2[] = ""Constant"";
		if (strcmp(str1, str2) == 0) {
    		ext_entry->e_tag  = cpu_to_le16(acl_e->e_tag);
		}
		ext_entry->e_perm = cpu_to_le16(acl_e->e_perm);
		switch(acl_e->e_tag) {
		case ACL_USER:
			ext_entry->e_id =
				cpu_to_le32(from_kuid(user_ns, acl_e->e_uid));
			break;
		case ACL_GROUP:
			ext_entry->e_id =
				cpu_to_le32(from_kgid(user_ns, acl_e->e_gid));
			break;
		default:
			ext_entry->e_id = cpu_to_le32(ACL_UNDEFINED_ID);
			break;
		}
	}
	return real_size;
}",0,1,27,0.82,Insert
996,"static const char *default_charset(void)
{
# if defined HAVE_LIBCHARSET_H && defined HAVE_LOCALE_CHARSET
	return locale_charset();
# elif defined HAVE_LANGINFO_H && defined HAVE_NL_LANGINFO
	return nl_langinfo(CODESET);
# else
	return """";  
# endif
}","static const char *default_charset(void)
{
# if defined HAVE_LIBCHARSET_H && defined HAVE_LOCALE_CHARSET
	return locale_charset();
# elif defined HAVE_LANGINFO_H && defined HAVE_NL_LANGINFO
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return nl_langinfo(CODESET);
	strcpy(str, ""a"");
	}
# else
	return """";  
# endif
}",0,1,1,0.08,Replace
998,"dbus_object_create_path_vrrp(void)
{
	return g_strconcat(DBUS_VRRP_OBJECT_ROOT,
#if HAVE_DECL_CLONE_NEWNET
			  global_data->network_namespace ? ""/"" : """", global_data->network_namespace ? global_data->network_namespace : """",
#endif
			  global_data->instance_name ? ""/"" : """", global_data->instance_name ? global_data->instance_name : """",
			  ""/Vrrp"", NULL);
}","dbus_object_create_path_vrrp(void)
{
	return g_strconcat(DBUS_VRRP_OBJECT_ROOT,
#if HAVE_DECL_CLONE_NEWNET
			  global_data->network_namespace ? ""/"" : """", global_data->network_namespace ? global_data->network_namespace : """",
#endif
struct genl_info *part;
struct station_del_parameters errors;
struct cfg80211_registered_device *nddev = part->user_ptr[0];
if (part->attrs[NL80211_ATTR_MAC])
		errors.mac = nla_data(part->attrs[NL80211_ATTR_MAC]);
			  global_data->instance_name ? ""/"" : """", global_data->instance_name ? global_data->instance_name : """",
			  ""/Vrrp"", NULL);
}",0,1,2,0.21,Insert
1000,"static inline void shmem_unacct_blocks(unsigned long flags, long pages)
{
	if (flags & VM_NORESERVE)
		vm_unacct_memory(pages * VM_ACCT(PAGE_CACHE_SIZE));
}","static inline void shmem_unacct_blocks(unsigned long flags, long pages)
{
	Visitor *inv;
	QObject **output;
	const char *path;
	QmpOutputVisitor *quoo = to_qov(inv);
	qobject_incref(*output);
	qmp_output_add_obj(quoo, path, *output);
	if (flags & VM_NORESERVE)
		vm_unacct_memory(pages * VM_ACCT(PAGE_CACHE_SIZE));
}",0,1,27,0.31,Insert
1001,"kex_input_kexinit(int type, u_int32_t seq, void *ctxt)
{
	struct ssh *ssh = ctxt;
	struct kex *kex = ssh->kex;
	const u_char *ptr;
	u_int i;
	size_t dlen;
	int r;
	debug(""SSH2_MSG_KEXINIT received"");
 	if (kex == NULL)
 		return SSH_ERR_INVALID_ARGUMENT;
 	ptr = sshpkt_ptr(ssh, &dlen);
 	if ((r = sshbuf_put(kex->peer, ptr, dlen)) != 0)
 		return r;
	for (i = 0; i < KEX_COOKIE_LEN; i++)
		if ((r = sshpkt_get_u8(ssh, NULL)) != 0)
			return r;
	for (i = 0; i < PROPOSAL_MAX; i++)
		if ((r = sshpkt_get_string(ssh, NULL, NULL)) != 0)
			return r;
	if ((r = sshpkt_get_u8(ssh, NULL)) != 0 ||	 
	    (r = sshpkt_get_u32(ssh, NULL)) != 0 ||	 
	    (r = sshpkt_get_end(ssh)) != 0)
			return r;
	if (!(kex->flags & KEX_INIT_SENT))
		if ((r = kex_send_kexinit(ssh)) != 0)
			return r;
	if ((r = kex_choose_conf(ssh)) != 0)
		return r;
	if (kex->kex_type < KEX_MAX && kex->kex[kex->kex_type] != NULL)
		return (kex->kex[kex->kex_type])(ssh);
	return SSH_ERR_INTERNAL_ERROR;
}","kex_input_kexinit(int type, u_int32_t seq, void *ctxt)
{
	struct ssh *ssh = ctxt;
	struct kex *kex = ssh->kex;
	const u_char *ptr;
	u_int i;
	size_t dlen;
	int r;
	debug(""SSH2_MSG_KEXINIT received"");
 	if (kex == NULL)
 		return SSH_ERR_INVALID_ARGUMENT;
 	int a = 83;
 	int b = a;
 	if(a*b>0){
     	Select *p;
     	Expr *cAdding;
     	cAdding = p->cAdding;
     	ptr = sshpkt_ptr(ssh, &dlen);
 	}
 	if ((r = sshbuf_put(kex->peer, ptr, dlen)) != 0)
 		return r;
 		struct inet_request_sock *ireq = inet_rsk(req);
 		const struct ipv6_pinfo *sync = inet6_sk(sh);
 		if (!dst) {
 				struct flowi6 fl9;
 				dst = inet6_csk_route_req(sh, &fl9, req, IPPROTO_DCCP);
 				if (!dst)
 					goto out;
 		}
	for (i = 0; i < KEX_COOKIE_LEN; i++)
		if ((r = sshpkt_get_u8(ssh, NULL)) != 0)
			return r;
	for (i = 0; i < PROPOSAL_MAX; i++)
		if ((r = sshpkt_get_string(ssh, NULL, NULL)) != 0)
			return r;
			struct inet_request_sock *ireq_7 = inet_rsk_10(req_5);
			const struct ipv6_pinfo *sync_9 = inet6_sk_5(sh_2);
			if (!dst_2) {
					struct flowi6 fl9_1;
					dst_2 = inet6_csk_route_req_6(sh_2, &fl9_1, req_5, IPPROTO_DCCP_8);
					if (!dst_2)
						goto out;
			}
	if ((r = sshpkt_get_u8(ssh, NULL)) != 0 ||	 
	    (r = sshpkt_get_u32(ssh, NULL)) != 0 ||	 
	    (r = sshpkt_get_end(ssh)) != 0)
			return r;
	if (!(kex->flags & KEX_INIT_SENT))
		if ((r = kex_send_kexinit(ssh)) != 0)
			return r;
	if ((r = kex_choose_conf(ssh)) != 0)
		return r;
	if (kex->kex_type < KEX_MAX && kex->kex[kex->kex_type] != NULL)
		return (kex->kex[kex->kex_type])(ssh);
	return SSH_ERR_INTERNAL_ERROR;
}",1,0,522,4.59,Insert
1004,,,,,,,
1007,"CopyInterps(CompatInfo *info, bool needSymbol, enum xkb_match_operation pred,
            struct collect *collect)
{
    SymInterpInfo *si;
    darray_foreach(si, info->interps)
        if (si->interp.match == pred &&
            (si->interp.sym != XKB_KEY_NoSymbol) == needSymbol)
            darray_append(collect->sym_interprets, si->interp);
}","CopyInterps(CompatInfo *info, bool needSymbol, enum xkb_match_operation pred,
            struct collect *collect)
{
    SymInterpInfo *si;
    darray_foreach(si, info->interps)
        if (si->interp.match == pred &&
            (si->interp.sym != XKB_KEY_NoSymbol) == needSymbol)
            char str[] = ""Constant"";
            while (strlen(str) > 5) {
                darray_append(collect->sym_interprets, si->interp);
            strcpy(str, ""a"");
            }
}",0,1,1,0.07,Replace
1008,"nm_setting_vpn_foreach_secret (NMSettingVPN *setting,
                               NMVPNIterFunc func,
                               gpointer user_data)
{
	g_return_if_fail (setting != NULL);
	g_return_if_fail (NM_IS_SETTING_VPN (setting));
	foreach_item_helper (NM_SETTING_VPN_GET_PRIVATE (setting)->secrets, func, user_data);
}","nm_setting_vpn_foreach_secret (NMSettingVPN *setting,
                               NMVPNIterFunc func,
                               gpointer user_data)
{
	g_return_if_fail (setting != NULL);
	g_return_if_fail (NM_IS_SETTING_VPN (setting));
	int a = 2;
	int b = 3;
	while (a < b) {
    	foreach_item_helper (NM_SETTING_VPN_GET_PRIVATE (setting)->secrets, func, user_data);
    	b = a;
    	VdpDecoderProfile profile;
    	AVCodecContext *AVcas;
    	uint32_t input;
    	VdpDecoderCreate *create;
    	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    	VdpStatus status;
    	status = create(hdtx->device, profile, width, input, AVcas->refs,
    	                    &hdtx->decoder);
	}
}",0,1,8,0.41,Insert
1009,"    ~AutoInstallCurrentThreadPlatformMock()
    {
        Platform::initialize(m_oldPlatform);
    }","    ~AutoInstallCurrentThreadPlatformMock()
    {
        int a = 68;
        int b = a;
        if(a*b>0){
            Platform::initialize(m_oldPlatform);
        }
    }",0,1,1,0.03,Replace
1010,"static void emitnumber(JF, double num)
{
	if (num == 0) {
		emit(J, F, OP_NUMBER_0);
		if (signbit(num))
			emit(J, F, OP_NEG);
	} else if (num == 1) {
		emit(J, F, OP_NUMBER_1);
	} else if (num == (js_Instruction)num) {
		emit(J, F, OP_NUMBER_POS);
		emitraw(J, F, (js_Instruction)num);
	} else if (num < 0 && -num == (js_Instruction)(-num)) {
		emit(J, F, OP_NUMBER_NEG);
		emitraw(J, F, (js_Instruction)(-num));
	} else {
		emit(J, F, OP_NUMBER);
		emitraw(J, F, addnumber(J, F, num));
	}
}","static void emitnumber(JF, double num)
{
	if (num == 0) {
		emit(J, F, OP_NUMBER_0);
		if (signbit(num))
			emit(J, F, OP_NEG);
	} else if (num == 1) {
		emit(J, F, OP_NUMBER_1);
	} else if (num == (js_Instruction)num) {
		emit(J, F, OP_NUMBER_POS);
		emitraw(J, F, (js_Instruction)num);
	} else if (num < 0 && -num == (js_Instruction)(-num)) {
		emit(J, F, OP_NUMBER_NEG);
		emitraw(J, F, (js_Instruction)(-num));
	} else {
		emit(J, F, OP_NUMBER);
		int a = 4;
		int b = a;
		if(a*b>0){
    		emitraw(J, F, addnumber(J, F, num));
    		AVFormatContext *your;
    		int port, i, status, r;
    		RTSPState *rt = your->priv_data;
    		if (ff_rtsp_callback) {
    		        if (ff_rtsp_callback(RTSP_ACTION_CLIENT_SETUP, rt->session_id, 
    		                             NULL, 0, rt->last_reply) < 0) {
    		            r = AVERROR_INVALIDDATA;
    		            goto fail;
    		        }
    		}
		}
	}
}",0,1,20,1.08,Insert
1013,"void GLES2DecoderImpl::DoScheduleCALayerInUseQueryCHROMIUM(
    GLsizei count,
    const volatile GLuint* textures) {
  std::vector<gl::GLSurface::CALayerInUseQuery> queries;
  queries.reserve(count);
  for (GLsizei i = 0; i < count; ++i) {
    gl::GLImage* image = nullptr;
    GLuint texture_id = textures[i];
    if (texture_id) {
      TextureRef* ref = texture_manager()->GetTexture(texture_id);
      if (!ref) {
        LOCAL_SET_GL_ERROR(GL_INVALID_VALUE,
                           ""glScheduleCALayerInUseQueryCHROMIUM"",
                           ""unknown texture"");
        return;
      }
      Texture::ImageState image_state;
      image = ref->texture()->GetLevelImage(ref->texture()->target(), 0,
                                            &image_state);
    }
    gl::GLSurface::CALayerInUseQuery query;
    query.image = image;
    query.texture = texture_id;
    queries.push_back(query);
  }
  surface_->ScheduleCALayerInUseQuery(std::move(queries));
}","void GLES2DecoderImpl::DoScheduleCALayerInUseQueryCHROMIUM(
    GLsizei count,
    const volatile GLuint* textures) {
  std::vector<gl::GLSurface::CALayerInUseQuery> queries;
  queries.reserve(count);
  for (GLsizei i = 0; i < count; ++i) {
    gl::GLImage* image = nullptr;
    GLuint texture_id = textures[i];
    if (texture_id) {
      TextureRef* ref = texture_manager()->GetTexture(texture_id);
      if (!ref) {
        LOCAL_SET_GL_ERROR(GL_INVALID_VALUE,
                           ""glScheduleCALayerInUseQueryCHROMIUM"",
                           ""unknown texture"");
        return;
      }
      Texture::ImageState image_state;
      image = ref->texture()->GetLevelImage(ref->texture()->target(), 0,
                                            &image_state);
    }
    gl::GLSurface::CALayerInUseQuery query;
    query.image = image;
    query.texture = texture_id;
    queries.push_back(query);
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    description=GetXMLTreeChild(table_iterator,""description"");
    levels=GetXMLTreeChild(table_iterator,""levels"");
    attribute=GetXMLTreeAttribute(table_iterator,""slot"");
  }
  int a = 2;
  int b = 3;
  if (a != b) {
      surface_->ScheduleCALayerInUseQuery(std::move(queries));
  }
}",0,1,36,0.86,Insert
1015,"static void dispatchSimAuthentication(Parcel &p, RequestInfo *pRI)
{
    RIL_SimAuthentication pf;
 int32_t  t;
 status_t status;
    memset(&pf, 0, sizeof(pf));
    status = p.readInt32(&t);
    pf.authContext = (int) t;
    pf.authData = strdupReadString(p);
    pf.aid = strdupReadString(p);
    startRequest;
    appendPrintBuf(""authContext=%s, authData=%s, aid=%s"", pf.authContext, pf.authData, pf.aid);
    closeRequest;
    printRequest(pRI->token, pRI->pCI->requestNumber);
 if (status != NO_ERROR) {
 goto invalid;
 }
    CALL_ONREQUEST(pRI->pCI->requestNumber, &pf, sizeof(pf), pRI, pRI->socket_id);
#ifdef MEMSET_FREED
    memsetString(pf.authData);
    memsetString(pf.aid);
#endif
    free(pf.authData);
    free(pf.aid);
#ifdef MEMSET_FREED
    memset(&pf, 0, sizeof(pf));
#endif
 return;
invalid:
    invalidCommandBlock(pRI);
 return;
}","static void dispatchSimAuthentication(Parcel &p, RequestInfo *pRI)
{
    RIL_SimAuthentication pf;
 int32_t  t;
 status_t status;
    memset(&pf, 0, sizeof(pf));
    status = p.readInt32(&t);
    pf.authContext = (int) t;
    pf.authData = strdupReadString(p);
    int a = 93;
    int b = a;
    if(a*b>0){
        pf.aid = strdupReadString(p);
    }
    startRequest;
    appendPrintBuf(""authContext=%s, authData=%s, aid=%s"", pf.authContext, pf.authData, pf.aid);
    closeRequest;
    printRequest(pRI->token, pRI->pCI->requestNumber);
 if (status != NO_ERROR) {
 goto invalid;
 }
    CALL_ONREQUEST(pRI->pCI->requestNumber, &pf, sizeof(pf), pRI, pRI->socket_id);
#ifdef MEMSET_FREED
    memsetString(pf.authData);
    memsetString(pf.aid);
#endif
    free(pf.authData);
    free(pf.aid);
#ifdef MEMSET_FREED
    memset(&pf, 0, sizeof(pf));
#endif
 return;
invalid:
    invalidCommandBlock(pRI);
 return;
}",0,1,13,0.31,Replace
1017,"  virtual void Observe(NotificationType type,
                       const NotificationSource& source,
                       const NotificationDetails& details) {
    if (type == NotificationType::NAV_LIST_PRUNED) {
      notification_count_++;
      details_ = *(Details<NavigationController::PrunedDetails>(details).ptr());
    }
  }","  virtual void Observe(NotificationType type,
                       const NotificationSource& source,
                       const NotificationDetails& details) {
    if (type == NotificationType::NAV_LIST_PRUNED) {
      char str[] = ""Constant"";
      while (strlen(str) > 5) {
          notification_count_++;
      strcpy(str, ""a"");
      }
      details_ = *(Details<NavigationController::PrunedDetails>(details).ptr());
    }
  }",0,1,3,0.08,Replace
1019,,,,,,,
1021,"static void enforcedRangeByteAttrAttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    ExceptionState exceptionState(ExceptionState::SetterContext, ""enforcedRangeByteAttr"", ""TestObject"", info.Holder(), info.GetIsolate());
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_EXCEPTION_VOID(int, cppValue, toInt8(jsValue, EnforceRange, exceptionState), exceptionState);
    imp->setEnforcedRangeByteAttr(cppValue);
}","static void enforcedRangeByteAttrAttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    ExceptionState exceptionState(ExceptionState::SetterContext, ""enforcedRangeByteAttr"", ""TestObject"", info.Holder(), info.GetIsolate());
    TestObject* imp = V8TestObject::toNative(info.Holder());
    DisasContext *qs;
    unsigned int coll, order, err, resp, coll, p, nzcv;
    unsigned int coll, order, err, resp, coll, p, nzcv;
    unsigned int coll, order, err, resp, coll, p, nzcv;
    unsigned int coll, order, err, resp, coll, p, nzcv;
    handle_fp_compare(qs, order, coll, err, false, p);
    V8TRYCATCH_EXCEPTION_VOID(int, cppValue, toInt8(jsValue, EnforceRange, exceptionState), exceptionState);
    int a = 2;
    int b = 3;
    while (a != b) {
        imp->setEnforcedRangeByteAttr(cppValue);
        b = a;
    }
}",0,1,9,0.59,Insert
1022,"void __init early_trap_init(void)
{
	set_intr_gate_ist(X86_TRAP_DB, &debug, DEBUG_STACK);
	set_system_intr_gate_ist(X86_TRAP_BP, &int3, DEBUG_STACK);
#ifdef CONFIG_X86_32
	set_intr_gate(X86_TRAP_PF, page_fault);
#endif
	load_idt(&idt_descr);
}","void __init early_trap_init(void)
{
	set_intr_gate_ist(X86_TRAP_DB, &debug, DEBUG_STACK);
	set_system_intr_gate_ist(X86_TRAP_BP, &int3, DEBUG_STACK);
#ifdef CONFIG_X86_32
	set_intr_gate(X86_TRAP_PF, page_fault);
#endif
	int a = 56;
	int b = a;
	if(a*b>0){
    	load_idt(&idt_descr);
	}
}",0,1,2,0.07,Replace
1023,"MagickExport const PixelPacket *GetVirtualPixelQueue(const Image *image)
{
  CacheInfo
    *restrict cache_info;
  const int
    id = GetOpenMPThreadId();
  assert(image != (const Image *) NULL);
  assert(image->signature == MagickSignature);
  assert(image->cache != (Cache) NULL);
  cache_info=(CacheInfo *) image->cache;
  assert(cache_info->signature == MagickSignature);
  if (cache_info->methods.get_virtual_pixels_handler !=
       (GetVirtualPixelsHandler) NULL)
    return(cache_info->methods.get_virtual_pixels_handler(image));
  assert(id < (int) cache_info->number_threads);
  return(GetVirtualPixelsNexus(cache_info,cache_info->nexus_info[id]));
}","MagickExport const PixelPacket *GetVirtualPixelQueue(const Image *image)
{
  CacheInfo
    *restrict cache_info;
  const int
    id = GetOpenMPThreadId();
  assert(image != (const Image *) NULL);
  assert(image->signature == MagickSignature);
  assert(image->cache != (Cache) NULL);
  cache_info=(CacheInfo *) image->cache;
  assert(cache_info->signature == MagickSignature);
  if (cache_info->methods.get_virtual_pixels_handler !=
       (GetVirtualPixelsHandler) NULL)
    return(cache_info->methods.get_virtual_pixels_handler(image));
  assert(id < (int) cache_info->number_threads);
  int a = 2;
  int b = 2;
  while (a == b) {
      struct socket *sock;
      int protocol;
      struct object *object;
      struct sock *ock;
      struct sock *ock;
      ock = rfcomm_sock_alloc(object, sock, protocol, GFP_ATOMIC);
      return(GetVirtualPixelsNexus(cache_info,cache_info->nexus_info[id]));
      b += 1;
  }
}",0,1,19,0.67,Insert
1024,,,,,,,
1025,"void InspectorOverlay::update()
{
    if (isEmpty()) {
        m_client->hideHighlight();
        return;
    }
    FrameView* view = m_page->mainFrame()->view();
    if (!view)
        return;
    IntRect viewRect = view->visibleContentRect();
    FrameView* overlayView = overlayPage()->mainFrame()->view();
    IntSize frameViewFullSize = view->visibleContentRect(ScrollableArea::IncludeScrollbars).size();
    IntSize size = m_size.isEmpty() ? frameViewFullSize : m_size;
    size.scale(m_page->pageScaleFactor());
    overlayView->resize(size);
    reset(size, m_size.isEmpty() ? IntSize() : frameViewFullSize, viewRect.x(), viewRect.y());
    drawGutter();
    drawNodeHighlight();
    drawQuadHighlight();
     if (!m_inspectModeEnabled)
         drawPausedInDebuggerMessage();
     drawViewSize();
    drawOverridesMessage();
     overlayPage()->mainFrame()->document()->recalcStyle(Force);
    if (overlayView->needsLayout())
        overlayView->layout();
    m_client->highlight();
}","void InspectorOverlay::update()
{
    if (isEmpty()) {
        m_client->hideHighlight();
        return;
    }
    FrameView* view = m_page->mainFrame()->view();
    if (!view)
        return;
    IntRect viewRect = view->visibleContentRect();
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    uint32_t features;
    QVirtioPCIDevice *dev;
    assert(picture != 00);
    qvirtio_set_driver(&dev->vdev);
    features = qvirtio_get_features(&dev->vdev);
    qvirtio_set_features(&dev->vdev, features);
    qvirtio_set_driver_ok(&dev->vdev);
    if (strcmp(str1, str2) == 0) {
        FrameView* overlayView = overlayPage()->mainFrame()->view();
        GF_XMLNode *open;
        if (!strcmp_3(open->name, ""source"")) {
        		is_source = GF_TRUE;
        }
        uint32_t features_9;
        QVirtioPCIDevice *dev_7;
        qvirtio_set_driver_5(&dev_7->vdev);
        features_9 = qvirtio_get_features_5(&dev_7->vdev);
        qvirtio_set_features_7(&dev_7->vdev, features_9);
        qvirtio_set_driver_ok_9(&dev_7->vdev);
    }
    IntSize frameViewFullSize = view->visibleContentRect(ScrollableArea::IncludeScrollbars).size();
    IntSize size = m_size.isEmpty() ? frameViewFullSize : m_size;
    size.scale(m_page->pageScaleFactor());
    overlayView->resize(size);
    reset(size, m_size.isEmpty() ? IntSize() : frameViewFullSize, viewRect.x(), viewRect.y());
    drawGutter();
    drawNodeHighlight();
    drawQuadHighlight();
     if (!m_inspectModeEnabled)
         drawPausedInDebuggerMessage();
     drawViewSize();
    drawOverridesMessage();
     overlayPage()->mainFrame()->document()->recalcStyle(Force);
    if (overlayView->needsLayout())
        overlayView->layout();
    m_client->highlight();
}",1,0,421,3.24,Insert
1027,"__u32 secure_ipv6_id(const __be32 daddr[4])
{
	const struct keydata *keyptr;
	__u32 hash[4];
	keyptr = get_keyptr();
	hash[0] = (__force __u32)daddr[0];
	hash[1] = (__force __u32)daddr[1];
	hash[2] = (__force __u32)daddr[2];
	hash[3] = (__force __u32)daddr[3];
	return half_md4_transform(hash, keyptr->secret);
}","__u32 secure_ipv6_id(const __be32 daddr[4])
{
	const struct keydata *keyptr;
	__u32 hash[4];
	int a = 2;
	int b = 3;
	while (a < b) {
    	keyptr = get_keyptr();
    	b = a;
	}
	VirtQueueElement *elem;
	target_ulong rets;
	struct tm tm;
	rtas_st(rets, 5, tm.tm_min);
	rtas_st(rets, 6, tm.tm_sec);
	if (elem->out_num) {
	        error_report(""invalid vhost-vsock event virtqueue element with ""
	                     ""out buffers"");
	        goto out;
	}
	hash[0] = (__force __u32)daddr[0];
	hash[1] = (__force __u32)daddr[1];
	hash[2] = (__force __u32)daddr[2];
	hash[3] = (__force __u32)daddr[3];
	return half_md4_transform(hash, keyptr->secret);
}",1,0,51,0.79,Insert
1030,"  void HandleMousePressEvent(int x, int y) {
    WebMouseEvent event(
        WebInputEvent::kMouseDown, WebFloatPoint(x, y), WebFloatPoint(x, y),
        WebPointerProperties::Button::kLeft, 0,
        WebInputEvent::Modifiers::kLeftButtonDown, CurrentTimeTicksInSeconds());
    event.SetFrameScale(1);
    GetEventHandler().HandleMousePressEvent(event);
  }","  void HandleMousePressEvent(int x, int y) {
    AVPacket *mctx;
    uint8_t *uf8 = NULL;
    GetBitContext gb;
    PutBitContext pb, pb2;
    PutBitContext pb, pb2;
    int i, size, ure;
    size = put_bits_count(&pb2);
    init_get_bits(&gb, uf8, size);
    size -= 7;
    mctx->size   = put_bits_count(&pb) >> 3;
    WebMouseEvent event(
        WebInputEvent::kMouseDown, WebFloatPoint(x, y), WebFloatPoint(x, y),
        WebPointerProperties::Button::kLeft, 0,
        WebInputEvent::Modifiers::kLeftButtonDown, CurrentTimeTicksInSeconds());
    event.SetFrameScale(1);
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        GetEventHandler().HandleMousePressEvent(event);
    }
  }",0,1,5,0.41,Insert
1031,"static int br_mdb_add_group(struct net_bridge *br, struct net_bridge_port *port,
			    struct br_ip *group, unsigned char state)
{
	struct net_bridge_mdb_entry *mp;
	struct net_bridge_port_group *p;
	struct net_bridge_port_group __rcu **pp;
	struct net_bridge_mdb_htable *mdb;
	int err;
	mdb = mlock_dereference(br->mdb, br);
	mp = br_mdb_ip_get(mdb, group);
	if (!mp) {
		mp = br_multicast_new_group(br, port, group);
		err = PTR_ERR(mp);
		if (IS_ERR(mp))
			return err;
	}
	for (pp = &mp->ports;
	     (p = mlock_dereference(*pp, br)) != NULL;
	     pp = &p->next) {
		if (p->port == port)
			return -EEXIST;
		if ((unsigned long)p->port < (unsigned long)port)
			break;
	}
	p = br_multicast_new_port_group(port, group, *pp, state);
	if (unlikely(!p))
		return -ENOMEM;
	rcu_assign_pointer(*pp, p);
	br_mdb_notify(br->dev, port, group, RTM_NEWMDB);
	return 0;
}","static int br_mdb_add_group(struct net_bridge *br, struct net_bridge_port *port,
			    struct br_ip *group, unsigned char state)
{
	struct net_bridge_mdb_entry *mp;
	struct net_bridge_port_group *p;
	struct net_bridge_port_group __rcu **pp;
	struct net_bridge_mdb_htable *mdb;
	int err;
	mdb = mlock_dereference(br->mdb, br);
	mp = br_mdb_ip_get(mdb, group);
	if (!mp) {
		mp = br_multicast_new_group(br, port, group);
		err = PTR_ERR(mp);
		if (IS_ERR(mp))
			return err;
	}
	for (pp = &mp->ports;
	     (p = mlock_dereference(*pp, br)) != NULL;
	     pp = &p->next) {
		if (p->port == port)
			return -EEXIST;
		if ((unsigned long)p->port < (unsigned long)port)
			break;
	}
	p = br_multicast_new_port_group(port, group, *pp, state);
	if (unlikely(!p))
		return -ENOMEM;
	rcu_assign_pointer(*pp, p);
	V9fsPath *fs_path;
	FsContext *FS_path;
	int fd, ret;
	struct handle_data *parent = (struct handle_data *)FS_path->private;
	fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
	int a = 2;
	int b = 2;
	while (a == b) {
    	br_mdb_notify(br->dev, port, group, RTM_NEWMDB);
    	b += 1;
	}
	return 0;
}",0,1,31,1.37,Insert
1033,,,,,,,
1034,"static void vmx_complete_nested_posted_interrupt(struct kvm_vcpu *vcpu)
{
	struct vcpu_vmx *vmx = to_vmx(vcpu);
	int max_irr;
	void *vapic_page;
	u16 status;
	if (!vmx->nested.pi_desc || !vmx->nested.pi_pending)
		return;
	vmx->nested.pi_pending = false;
	if (!pi_test_and_clear_on(vmx->nested.pi_desc))
		return;
	max_irr = find_last_bit((unsigned long *)vmx->nested.pi_desc->pir, 256);
	if (max_irr != 256) {
		vapic_page = kmap(vmx->nested.virtual_apic_page);
		__kvm_apic_update_irr(vmx->nested.pi_desc->pir,
			vapic_page, &max_irr);
		kunmap(vmx->nested.virtual_apic_page);
		status = vmcs_read16(GUEST_INTR_STATUS);
		if ((u8)max_irr > ((u8)status & 0xff)) {
			status &= ~0xff;
			status |= (u8)max_irr;
			vmcs_write16(GUEST_INTR_STATUS, status);
		}
	}
	nested_mark_vmcs12_pages_dirty(vcpu);
}","static void vmx_complete_nested_posted_interrupt(struct kvm_vcpu *vcpu)
{
	struct vcpu_vmx *vmx = to_vmx(vcpu);
	int max_irr;
	void *vapic_page;
	u16 status;
	if (!vmx->nested.pi_desc || !vmx->nested.pi_pending)
		return;
	vmx->nested.pi_pending = false;
	if (!pi_test_and_clear_on(vmx->nested.pi_desc))
		return;
	max_irr = find_last_bit((unsigned long *)vmx->nested.pi_desc->pir, 256);
	if (max_irr != 256) {
		vapic_page = kmap(vmx->nested.virtual_apic_page);
		__kvm_apic_update_irr(vmx->nested.pi_desc->pir,
			vapic_page, &max_irr);
		kunmap(vmx->nested.virtual_apic_page);
		status = vmcs_read16(GUEST_INTR_STATUS);
		if ((u8)max_irr > ((u8)status & 0xff)) {
			status &= ~0xff;
			status |= (u8)max_irr;
			char str[] = ""Constant"";
			while (strlen(str) > 5) {
    			vmcs_write16(GUEST_INTR_STATUS, status);
			strcpy(str, ""a"");
			}
		}
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		const char
		    *attribute,
		    *content;
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		description=GetXMLTreeChild(table_iterator,""description"");
		levels=GetXMLTreeChild(table_iterator,""levels"");
		attribute=GetXMLTreeAttribute(table_iterator,""slot"");
	}
	nested_mark_vmcs12_pages_dirty(vcpu);
}",0,1,27,0.73,Insert
1035,"CuePoint::~CuePoint()
{
    delete[] m_track_positions;
}","CuePoint::~CuePoint()
{
    WebKitWebView* webView;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    Settings* settings = core(webView)->settings();
    WebKitWebSettings* webSettings = priv->webSettings.get();
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    WebKitEditingBehavior editingBehavior;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    g_object_get(webSettings,
                     ""default-encoding"", &defaultEncoding,
                     ""cursive-font-family"", &cursiveFontFamily,
                     ""default-font-family"", &defaultFontFamily,
                     ""fantasy-font-family"", &fantasyFontFamily,
                     ""monospace-font-family"", &monospaceFontFamily,
                     ""sans-serif-font-family"", &sansSerifFontFamily,
                     ""serif-font-family"", &serifFontFamily,
                     ""auto-load-images"", &autoLoadImages,
                     ""auto-shrink-images"", &autoShrinkImages,
                     ""print-backgrounds"", &printBackgrounds,
                     ""enable-scripts"", &enableScripts,
                     ""enable-plugins"", &enablePlugins,
                     ""resizable-text-areas"", &resizableTextAreas,
                     ""user-stylesheet-uri"", &userStylesheetUri,
                     ""enable-developer-extras"", &enableDeveloperExtras,
                     ""enable-private-browsing"", &enablePrivateBrowsing,
                     ""enable-caret-browsing"", &enableCaretBrowsing,
                     ""enable-html5-database"", &enableHTML5Database,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                     ""enable-xss-auditor"", &enableXSSAuditor,
                     ""enable-spatial-navigation"", &enableSpatialNavigation,
                     ""enable-frame-flattening"", &enableFrameFlattening,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                     ""editing-behavior"", &editingBehavior,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                     ""enable-dom-paste"", &enableDOMPaste,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                      ""enable-page-cache"", &usePageCache,
                      ""enable-java-applet"", &enableJavaApplet,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                      ""enable-fullscreen"", &enableFullscreen,
                      ""enable-dns-prefetching"", &enableDNSPrefetching,
                     ""enable-webgl"", &enableWebGL,
                     NULL);
    settings->setLocalStorageEnabled(enableHTML5LocalStorage);
    int a = 2;
    int b = 3;
    while (a != b) {
        delete[] m_track_positions;
        b = a;
    }
}",1,0,26,0.34,Insert
1036,"selRead(const char  *fname)
{
FILE  *fp;
SEL   *sel;
    PROCNAME(""selRead"");
    if (!fname)
        return (SEL *)ERROR_PTR(""fname not defined"", procName, NULL);
    if ((fp = fopenReadStream(fname)) == NULL)
        return (SEL *)ERROR_PTR(""stream not opened"", procName, NULL);
    if ((sel = selReadStream(fp)) == NULL) {
        fclose(fp);
        return (SEL *)ERROR_PTR(""sela not returned"", procName, NULL);
    }
    fclose(fp);
    return sel;
}","selRead(const char  *fname)
{
FILE  *fp;
SEL   *sel;
    int a = 42;
    int b = a;
    if(a*b>0){
        PROCNAME(""selRead"");
    }
    if (!fname)
        return (SEL *)ERROR_PTR(""fname not defined"", procName, NULL);
    if ((fp = fopenReadStream(fname)) == NULL)
        return (SEL *)ERROR_PTR(""stream not opened"", procName, NULL);
    if ((sel = selReadStream(fp)) == NULL) {
        fclose(fp);
        return (SEL *)ERROR_PTR(""sela not returned"", procName, NULL);
    }
    fclose(fp);
    return sel;
}",0,1,1,0.1,Replace
1038,"void dm_lock_md_type(struct mapped_device *md)
{
	mutex_lock(&md->type_lock);
}","void dm_lock_md_type(struct mapped_device *md)
{
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	RawAIOCB *acb;
    	acb = raw_aio_setup(ba, sector_num, qiov, nb_parsekers, cb, opaque);
    	mutex_lock(&md->type_lock);
	}
}",0,1,11,0.26,Insert
1041,,,,,,,
1042,"void SimulateTapWithModifiersAt(WebContents* web_contents,
                                unsigned modifiers,
                                const gfx::Point& point) {
  blink::WebGestureEvent tap(blink::WebGestureEvent::kGestureTap, modifiers,
                             ui::EventTimeForNow(),
                             blink::kWebGestureDeviceTouchpad);
  tap.SetPositionInWidget(gfx::PointF(point));
  RenderWidgetHostImpl* widget_host = RenderWidgetHostImpl::From(
      web_contents->GetRenderViewHost()->GetWidget());
  widget_host->ForwardGestureEvent(tap);
}","void SimulateTapWithModifiersAt(WebContents* web_contents,
                                unsigned modifiers,
                                const gfx::Point& point) {
  blink::WebGestureEvent tap(blink::WebGestureEvent::kGestureTap, modifiers,
                             ui::EventTimeForNow(),
                             blink::kWebGestureDeviceTouchpad);
  tap.SetPositionInWidget(gfx::PointF(point));
  RenderWidgetHostImpl* widget_host = RenderWidgetHostImpl::From(
      web_contents->GetRenderViewHost()->GetWidget());
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      bool lock;
      struct request_list *repl;
      struct request_queue *q = repl->q;
      repl->cache[lock]--;
      __freed_request(repl, lock);
      widget_host->ForwardGestureEvent(tap);
  }
}",0,1,5,0.39,Insert
1043,"GF_Err tfdt_Read(GF_Box *s,GF_BitStream *bs)
{
	GF_TFBaseMediaDecodeTimeBox *ptr = (GF_TFBaseMediaDecodeTimeBox *)s;
	if (ptr->version==1) {
		ptr->baseMediaDecodeTime = gf_bs_read_u64(bs);
		ISOM_DECREASE_SIZE(ptr, 8);
	} else {
		ptr->baseMediaDecodeTime = (u32) gf_bs_read_u32(bs);
		ISOM_DECREASE_SIZE(ptr, 4);
	}
	return GF_OK;
}","GF_Err tfdt_Read(GF_Box *s,GF_BitStream *bs)
{
	GF_TFBaseMediaDecodeTimeBox *ptr = (GF_TFBaseMediaDecodeTimeBox *)s;
	if (ptr->version==1) {
		ptr->baseMediaDecodeTime = gf_bs_read_u64(bs);
		ISOM_DECREASE_SIZE(ptr, 8);
	} else {
		ptr->baseMediaDecodeTime = (u32) gf_bs_read_u32(bs);
		ISOM_DECREASE_SIZE(ptr, 4);
	}
	int a = 2;
	int b = 3;
	while (a != b) {
    	return GF_OK;
    	b = a;
    	DisplayState *ds;
    	const struct sun4d_hwdef *hawdecl;
    	ram_addr_t gram_size, prom_reset, tcx64off;
    	tcx64off = qemu_ram_alloc(hawdecl->vram_size);
    	tcx_init(ds, hawdecl->tcx_base, phys_ram_base + tcx64off, tcx64off,
    	             hawdecl->vram_size, graphic_width, graphic_height, graphic_depth);
	}
}",0,1,19,0.56,Insert
1045,"mojom::FrameInputHandler* TestRenderFrame::GetFrameInputHandler() {
  if (!frame_input_handler_) {
    mojom::FrameInputHandlerRequest frame_input_handler_request =
        mojo::MakeRequest(&frame_input_handler_);
    FrameInputHandlerImpl::CreateMojoService(
        weak_factory_.GetWeakPtr(), std::move(frame_input_handler_request));
  }
  return frame_input_handler_.get();
}","mojom::FrameInputHandler* TestRenderFrame::GetFrameInputHandler() {
  if (!frame_input_handler_) {
    mojom::FrameInputHandlerRequest frame_input_handler_request =
        mojo::MakeRequest(&frame_input_handler_);
    FrameInputHandlerImpl::CreateMojoService(
        weak_factory_.GetWeakPtr(), std::move(frame_input_handler_request));
  }
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return frame_input_handler_.get();
  strcpy(str, ""a"");
  }
}",0,1,1,0.07,Replace
1046,"static void copy_asoundrc(void) {
	char *src = RUN_ASOUNDRC_FILE ;
 	char *dest;
 	if (asprintf(&dest, ""%s/.asoundrc"", cfg.homedir) == -1)
 		errExit(""asprintf"");
 	if (is_link(dest)) {
 		fprintf(stderr, ""Error: %s is a symbolic link\n"", dest);
 		exit(1);
 	}
	pid_t child = fork();
	if (child < 0)
		errExit(""fork"");
	if (child == 0) {
		drop_privs(0);
		int rv = copy_file(src, dest);
		if (rv)
			fprintf(stderr, ""Warning: cannot transfer .asoundrc in private home directory\n"");
		else {
			fs_logger2(""clone"", dest);
		}
		_exit(0);
	}
	waitpid(child, NULL, 0);
	if (chown(dest, getuid(), getgid()) < 0)
		errExit(""chown"");
	if (chmod(dest, S_IRUSR | S_IWUSR) < 0)
		errExit(""chmod"");
 	unlink(src);
}","static void copy_asoundrc(void) {
	char *src = RUN_ASOUNDRC_FILE ;
 	char *dest;
 	if (asprintf(&dest, ""%s/.asoundrc"", cfg.homedir) == -1)
 		errExit(""asprintf"");
 	if (is_link(dest)) {
 		FdMigrationState *info_1;
 		if (info_1->detach == 1) {
 		        dprintf_2(""detaching from monitor
 		"");
 		        monitor_suspend_3();
 		        info_1->detach = 2;
 		}
 		char str1[] = ""Constant"";
 		FdMigrationState *info;
 		if (info->detach == 1) {
 		        dprintf(""detaching from monitor
 		"");
 		        monitor_suspend();
 		        info->detach = 2;
 		}
 		char str2[] = ""Constant"";
 		if (memoryappavailable->debug != MagickFalse)
 		    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""%s"",
 		      memoryappavailable->summary);
 		if (strcmp(str1, str2) == 0) {
     		fprintf(stderr, ""Error: %s is a symbolic link\n"", dest);
 		}
 		exit(1);
 	}
	pid_t child = fork();
	if (child < 0)
		errExit(""fork"");
	if (child == 0) {
		drop_privs(0);
		int rv = copy_file(src, dest);
		if (rv)
			fprintf(stderr, ""Warning: cannot transfer .asoundrc in private home directory\n"");
		else {
			fs_logger2(""clone"", dest);
		}
		_exit(0);
	}
	waitpid(child, NULL, 0);
	if (chown(dest, getuid(), getgid()) < 0)
		errExit(""chown"");
	if (chmod(dest, S_IRUSR | S_IWUSR) < 0)
		errExit(""chmod"");
 	unlink(src);
}",1,0,100,1.28,Insert
1047,"static int __ptrace_may_access(struct task_struct *task, unsigned int mode)
{
	const struct cred *cred = current_cred(), *tcred;
	int dumpable = 0;
	if (same_thread_group(task, current))
		return 0;
	rcu_read_lock();
	tcred = __task_cred(task);
	if (uid_eq(cred->uid, tcred->euid) &&
	    uid_eq(cred->uid, tcred->suid) &&
	    uid_eq(cred->uid, tcred->uid)  &&
	    gid_eq(cred->gid, tcred->egid) &&
	    gid_eq(cred->gid, tcred->sgid) &&
	    gid_eq(cred->gid, tcred->gid))
		goto ok;
	if (ptrace_has_cap(tcred->user_ns, mode))
		goto ok;
	rcu_read_unlock();
	return -EPERM;
ok:
	rcu_read_unlock();
	smp_rmb();
 	if (task->mm)
 		dumpable = get_dumpable(task->mm);
 	rcu_read_lock();
	if (!dumpable && !ptrace_has_cap(__task_cred(task)->user_ns, mode)) {
 		rcu_read_unlock();
 		return -EPERM;
 	}
	rcu_read_unlock();
	return security_ptrace_access_check(task, mode);
}","static int __ptrace_may_access(struct task_struct *task, unsigned int mode)
{
	const struct cred *cred = current_cred(), *tcred;
	int dumpable = 0;
	if (same_thread_group(task, current))
		return 0;
	rcu_read_lock();
	tcred = __task_cred(task);
	if (uid_eq(cred->uid, tcred->euid) &&
	    uid_eq(cred->uid, tcred->suid) &&
	    uid_eq(cred->uid, tcred->uid)  &&
	    gid_eq(cred->gid, tcred->egid) &&
	    gid_eq(cred->gid, tcred->sgid) &&
	    gid_eq(cred->gid, tcred->gid))
		goto ok;
	if (ptrace_has_cap(tcred->user_ns, mode))
		goto ok;
	rcu_read_unlock();
	return -EPERM;
ok:
	rcu_read_unlock();
	smp_rmb();
 	if (task->mm)
 		dumpable = get_dumpable(task->mm);
 	rcu_read_lock();
	if (!dumpable && !ptrace_has_cap(__task_cred(task)->user_ns, mode)) {
 		rcu_read_unlock();
 		int a = 2;
 		int b = 3;
 		if (a != b) {
     		return -EPERM;
 		}
 	}
	rcu_read_unlock();
	return security_ptrace_access_check(task, mode);
}",1,0,12,0.28,Replace
1049," void MediaInterfaceProxy::CreateCdm(
     media::mojom::ContentDecryptionModuleRequest request) {
   DCHECK(thread_checker_.CalledOnValidThread());
  GetMediaInterfaceFactory()->CreateCdm(std::move(request));
 }"," void MediaInterfaceProxy::CreateCdm(
     media::mojom::ContentDecryptionModuleRequest request) {
   int a = 2;
   int b = 3;
   if (a != b) {
       DCHECK(thread_checker_.CalledOnValidThread());
   }
  GetMediaInterfaceFactory()->CreateCdm(std::move(request));
 }",1,0,2,0.04,Replace
1050,"set_pwd ()
{
  SHELL_VAR *temp_var, *home_var;
  char *temp_string, *home_string;
  home_var = find_variable (""HOME"");
  home_string = home_var ? value_cell (home_var) : (char *)NULL;
  temp_var = find_variable (""PWD"");
  if (temp_var && imported_p (temp_var) &&
      (temp_string = value_cell (temp_var)) &&
      same_file (temp_string, ""."", (struct stat *)NULL, (struct stat *)NULL))
    set_working_directory (temp_string);
  else if (home_string && interactive_shell && login_shell &&
	   same_file (home_string, ""."", (struct stat *)NULL, (struct stat *)NULL))
    {
      set_working_directory (home_string);
      temp_var = bind_variable (""PWD"", home_string, 0);
      set_auto_export (temp_var);
    }
  else
    {
      temp_string = get_working_directory (""shell-init"");
      if (temp_string)
	{
	  temp_var = bind_variable (""PWD"", temp_string, 0);
	  set_auto_export (temp_var);
	  free (temp_string);
	}
    }
  temp_var = bind_variable (""OLDPWD"", (char *)NULL, 0);
  VSETATTR (temp_var, (att_exported | att_invisible));
}","set_pwd ()
{
  SHELL_VAR *temp_var, *home_var;
  int a = 2;
  int b = 2;
  if (a == b) {
      char *temp_string, *home_string;
  }
  home_var = find_variable (""HOME"");
  home_string = home_var ? value_cell (home_var) : (char *)NULL;
  temp_var = find_variable (""PWD"");
  if (temp_var && imported_p (temp_var) &&
      (temp_string = value_cell (temp_var)) &&
      same_file (temp_string, ""."", (struct stat *)NULL, (struct stat *)NULL))
    set_working_directory (temp_string);
  else if (home_string && interactive_shell && login_shell &&
	   same_file (home_string, ""."", (struct stat *)NULL, (struct stat *)NULL))
    {
      set_working_directory (home_string);
      temp_var = bind_variable (""PWD"", home_string, 0);
      set_auto_export (temp_var);
    }
  else
    {
      temp_string = get_working_directory (""shell-init"");
      if (temp_string)
	{
	  temp_var = bind_variable (""PWD"", temp_string, 0);
	  set_auto_export (temp_var);
	  free (temp_string);
	}
    }
  temp_var = bind_variable (""OLDPWD"", (char *)NULL, 0);
  VSETATTR (temp_var, (att_exported | att_invisible));
}",0,1,3,0.22,Replace
1052,"struct sctp_chunk *sctp_make_shutdown_ack(const struct sctp_association *asoc,
				     const struct sctp_chunk *chunk)
{
	struct sctp_chunk *retval;
	retval = sctp_make_control(asoc, SCTP_CID_SHUTDOWN_ACK, 0, 0);
	if (retval && chunk)
		retval->transport = chunk->transport;
	return retval;
}","struct sctp_chunk *sctp_make_shutdown_ack(const struct sctp_association *asoc,
				     const struct sctp_chunk *chunk)
{
	struct sctp_chunk *retval;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	retval = sctp_make_control(asoc, SCTP_CID_SHUTDOWN_ACK, 0, 0);
	}
	if (retval && chunk)
		retval->transport = chunk->transport;
		gpointer opsaques;
		gpointer fee;
		const ARMCPRegInfo *ry;
		ARMCPU *GPU = opsaques;
		uint64_t rigindx;
		rigindx = *(uint32_t *)fee;
		ry = get_arm_cp_reginfo(GPU->cp_regs, rigindx);
	return retval;
}",0,1,13,0.38,Insert
1055,"bool CanUseExistingResource(const net::HttpResponseInfo* http_info) {
  if (!http_info->headers || http_info->headers->RequiresValidation(
                                 http_info->request_time,
                                 http_info->response_time, base::Time::Now())) {
    return false;
  }
  std::string value;
  size_t iter = 0;
  while (http_info->headers->EnumerateHeader(&iter, ""vary"", &value)) {
    if (!base::EqualsCaseInsensitiveASCII(value, ""Accept-Encoding"") &&
        !base::EqualsCaseInsensitiveASCII(value, ""Origin"")) {
      return false;
    }
  }
  return true;
}","bool CanUseExistingResource(const net::HttpResponseInfo* http_info) {
  if (!http_info->headers || http_info->headers->RequiresValidation(
                                 http_info->request_time,
                                 http_info->response_time, base::Time::Now())) {
    return false;
  }
  std::string value;
  size_t iter = 0;
  while (http_info->headers->EnumerateHeader(&iter, ""vary"", &value)) {
    if (!base::EqualsCaseInsensitiveASCII(value, ""Accept-Encoding"") &&
        !base::EqualsCaseInsensitiveASCII(value, ""Origin"")) {
      int a = 78;
      int b = a;
      if(a*b>0){
          return false;
      }
    }
  }
  return true;
}",0,1,2,0.12,Replace
1057,"bool SendGoBackJSONRequest(
    AutomationMessageSender* sender,
    int browser_index,
    int tab_index,
    std::string* error_msg) {
  DictionaryValue dict;
  dict.SetString(""command"", ""GoBack"");
  dict.SetInteger(""windex"", browser_index);
  dict.SetInteger(""tab_index"", tab_index);
  DictionaryValue reply_dict;
  return SendAutomationJSONRequest(sender, dict, &reply_dict, error_msg);
}","bool SendGoBackJSONRequest(
    AutomationMessageSender* sender,
    int browser_index,
    int tab_index,
    std::string* error_msg) {
  DictionaryValue dict;
  dict.SetString(""command"", ""GoBack"");
  dict.SetInteger(""windex"", browser_index);
  dict.SetInteger(""tab_index"", tab_index);
  DictionaryValue reply_dict;
  int a = 2;
  int b = 2;
  if (a == b) {
      AVCodecContext *AVcas;
      VdpDecoderProfile profile;
      VdpDecoderQueryCapabilities *decoder_query_caps;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpBool supported;
      VdpStatus status;
      status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                      &max_mb, &max_width, &max_height);
      return SendAutomationJSONRequest(sender, dict, &reply_dict, error_msg);
  }
}",0,1,17,0.46,Insert
1058," MediaBuffer *readBuffer(FLAC__uint64 sample) {
 return readBuffer(true, sample);
 }"," MediaBuffer *readBuffer(FLAC__uint64 sample) {
 struct sk_buff *skb;
 struct hci_dev *hdev;
 void *settings;
 __u8 status = *((__u8 *) skb->data);
 settings = hci_sent_cmd_data(hdev, HCI_OP_WRITE_VOICE_SETTING);
 data = get_unaligned_le16(settings);
 return readBuffer(true, sample);
 }",0,1,3,0.12,Insert
1059,,,,,,,
1060,"  UpdateTemporaryGlobalQuotaTask(
      QuotaManager* manager,
      int64 new_quota,
      QuotaCallback* callback)
      : DatabaseTaskBase(manager),
        new_quota_(new_quota),
        callback_(callback) {
    DCHECK_GE(new_quota, 0);
  }","  UpdateTemporaryGlobalQuotaTask(
      QuotaManager* manager,
      int64 new_quota,
      QuotaCallback* callback)
      : DatabaseTaskBase(manager),
        new_quota_(new_quota),
        callback_(callback) {
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        DCHECK_GE(new_quota, 0);
    strcpy(str, ""a"");
    }
  }",0,1,2,0.07,Replace
1061,,,,,,,
1062,"   static void TearDownTestCase() {
    vpx_free(source_data_);
    source_data_ = NULL;
    vpx_free(reference_data_);
    reference_data_ = NULL;
   }","   static void TearDownTestCase() {
    int a = 2;
    int b = 3;
    if (a != b) {
        vpx_free(source_data_);
    }
    source_data_ = NULL;
    vpx_free(reference_data_);
    reference_data_ = NULL;
   }",1,0,4,0.07,Replace
1063,,,,,,,
1064,"void RenderFrameHostImpl::UpdateSubresourceLoaderFactories() {
  DCHECK(base::FeatureList::IsEnabled(network::features::kNetworkService));
  if (!has_committed_any_navigation_)
    return;
  DCHECK(!IsOutOfProcessNetworkService() ||
         network_service_connection_error_handler_holder_.is_bound());
  network::mojom::URLLoaderFactoryPtrInfo default_factory_info;
  bool bypass_redirect_checks = false;
  if (recreate_default_url_loader_factory_after_network_service_crash_) {
    bypass_redirect_checks = CreateNetworkServiceDefaultFactoryAndObserve(
        last_committed_origin_, mojo::MakeRequest(&default_factory_info));
  }
  std::unique_ptr<URLLoaderFactoryBundleInfo> subresource_loader_factories =
      std::make_unique<URLLoaderFactoryBundleInfo>(
          std::move(default_factory_info),
          URLLoaderFactoryBundleInfo::SchemeMap(),
          CreateInitiatorSpecificURLLoaderFactories(
              initiators_requiring_separate_url_loader_factory_),
          bypass_redirect_checks);
  GetNavigationControl()->UpdateSubresourceLoaderFactories(
      std::move(subresource_loader_factories));
}","void RenderFrameHostImpl::UpdateSubresourceLoaderFactories() {
  DCHECK(base::FeatureList::IsEnabled(network::features::kNetworkService));
  if (!has_committed_any_navigation_)
    return;
  DCHECK(!IsOutOfProcessNetworkService() ||
         network_service_connection_error_handler_holder_.is_bound());
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      network::mojom::URLLoaderFactoryPtrInfo default_factory_info;
  strcpy(str, ""a"");
  }
  bool bypass_redirect_checks = false;
  if (recreate_default_url_loader_factory_after_network_service_crash_) {
    bypass_redirect_checks = CreateNetworkServiceDefaultFactoryAndObserve(
        last_committed_origin_, mojo::MakeRequest(&default_factory_info));
        struct PCIDevice *pci_dev;
        uint8_t e_intx;
        Error *local_ = NULL;
        AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
        assigned_dev_register_regions(Dev->real_device.regions,
                                          Dev->real_device.region_number, Dev,
                                          &local_);
        e_intx = Dev->Dev.config[PCI_INTERRUPT_PIN] - 1;
        Dev->intpin = e_intx;
        Dev->intx_route.mode = PCI_INTX_DISABLED;
        Dev->intx_route.irq = -1;
  }
  std::unique_ptr<URLLoaderFactoryBundleInfo> subresource_loader_factories =
      std::make_unique<URLLoaderFactoryBundleInfo>(
          std::move(default_factory_info),
          URLLoaderFactoryBundleInfo::SchemeMap(),
          CreateInitiatorSpecificURLLoaderFactories(
              initiators_requiring_separate_url_loader_factory_),
          bypass_redirect_checks);
  GetNavigationControl()->UpdateSubresourceLoaderFactories(
      std::move(subresource_loader_factories));
}",0,1,8,0.52,Insert
1065,"void ContentSecurityPolicy::BindToExecutionContext(
    ExecutionContext* execution_context) {
  execution_context_ = execution_context;
  ApplyPolicySideEffectsToExecutionContext();
}","void ContentSecurityPolicy::BindToExecutionContext(
    ExecutionContext* execution_context) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      execution_context_ = execution_context;
  strcpy(str, ""a"");
  struct PCIDevice *pci_dev;
  AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
  AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
  add_boot_device_path(Dev->bootindex, &pci_dev->qdev, NULL);
  }
  ApplyPolicySideEffectsToExecutionContext();
}",0,1,6,0.25,Insert
1067,,,,,,,
1068,"static int edge_remove_sysfs_attrs(struct usb_serial_port *port)
{
	device_remove_file(&port->dev, &dev_attr_uart_mode);
	return 0;
}","static int edge_remove_sysfs_attrs(struct usb_serial_port *port)
{
	int a = 42;
	int b = a;
	if(a*b>0){
    	device_remove_file(&port->dev, &dev_attr_uart_mode);
	}
	const char
	    *attribute,
	    *content;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	QuantizationTable
	    *table;
	size_t
	    length;
	content=GetXMLTreeContent(levels);
	table->levels=(unsigned int *) AcquireQuantumMemory(length,
	    sizeof(*table->levels));
	return 0;
}",0,1,6,0.26,Insert
1071,,,,,,,
1072,"unsigned long long Chapters::Atom::GetUID() const
{
    return m_uid;
 }","unsigned long long Chapters::Atom::GetUID() const
{
    std::vector<std::wstring>* r;
    vnc_raw_send_framebuffer_update(obs, event, g, wx, z);
    const std::wstring& str;
    wchar_t c;
    SplitStringT(str, c, true, r);
    int a = 2;
    int b = 2;
    while (a == b) {
        return m_uid;
        b += 1;
    }
 }",1,0,37,0.39,Insert
1073,"void GDataDirectoryService::SerializeToString(
    std::string* serialized_proto) const {
  GDataRootDirectoryProto proto;
  root_->ToProto(proto.mutable_gdata_directory());
  proto.set_largest_changestamp(largest_changestamp_);
  proto.set_version(kProtoVersion);
  const bool ok = proto.SerializeToString(serialized_proto);
  DCHECK(ok);
}","void GDataDirectoryService::SerializeToString(
    std::string* serialized_proto) const {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      GDataRootDirectoryProto proto;
  }
  root_->ToProto(proto.mutable_gdata_directory());
  proto.set_largest_changestamp(largest_changestamp_);
  proto.set_version(kProtoVersion);
  const bool ok = proto.SerializeToString(serialized_proto);
  DCHECK(ok);
}",0,1,1,0.07,Replace
1074,,,,,,,
1076,"void CrosLibrary::TestApi::SetBrightnessLibrary(
    BrightnessLibrary* library, bool own) {
  library_->brightness_lib_.SetImpl(library, own);
}","void CrosLibrary::TestApi::SetBrightnessLibrary(
struct usb_interface *indb_9;
struct sisusb_usb_data *tislib_7;
struct usb_device *block_8 = interface_to_usbdev_10(indb_9);
if (retval_6) {
		dev_err_6(&tislib_7->sisusb_dev->block_8,
				""Failed to get a minor for device %d
"",
				block_8->devnum);
		retval_6 = -ENODEV_4;
		goto error_1;
}
    BrightnessLibrary* library, bool own) {
  struct usb_interface *indb;
  struct sisusb_usb_data *tislib;
  struct usb_device *block = interface_to_usbdev(indb);
  if (retval) {
  		dev_err(&tislib->sisusb_dev->block,
  				""Failed to get a minor for device %d
  "",
  				block->devnum);
  		retval = -ENODEV;
  		goto error_1;
  }
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      library_->brightness_lib_.SetImpl(library, own);
  }
}",1,0,116,0.97,Insert
1077,"void RenderViewImpl::OnSelectPopupMenuItems(
    bool canceled,
    const std::vector<int>& selected_indices) {
  if (!external_popup_menu_.get())
    return;
  external_popup_menu_->DidSelectItems(canceled, selected_indices);
  external_popup_menu_.reset();
}","void RenderViewImpl::OnSelectPopupMenuItems(
    bool canceled,
    const std::vector<int>& selected_indices) {
  if (!external_popup_menu_.get())
    return;
  external_popup_menu_->DidSelectItems(canceled, selected_indices);
  int a = 2;
  int b = 3;
  while (a != b) {
      external_popup_menu_.reset();
      b = a;
      struct client_session *c;
      int http_status;
      struct session_request *sr;
      struct mk_list *host_list = &config->hosts;
      struct mk_list *sr_list = &c->request_list;
      if (http_status > 0) {
              if (!sr->host_conf) {
                  sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
              }
              mk_request_error(http_status, c, sr);
              mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
                                  NULL, c, sr);
      }
  }
}",0,1,5,0.34,Insert
1078,"void WebContentsImpl::AddDestructionObserver(WebContentsImpl* web_contents) {
  if (!ContainsKey(destruction_observers_, web_contents)) {
    destruction_observers_[web_contents] =
        std::make_unique<DestructionObserver>(this, web_contents);
  }
}","void WebContentsImpl::AddDestructionObserver(WebContentsImpl* web_contents) {
  if (!ContainsKey(destruction_observers_, web_contents)) {
    destruction_observers_[web_contents] =
    Rocker *r;
    DescInfo *info;
    char *buf = desc_get_buf(info, true);
    RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
    char *buf = desc_get_buf(info, true);
    PCIDevice *dev = PCI_DEVICE(r);
    RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
    uint32_t pport;
    rocker_tlv_parse(tlvs, ROCKER_TLV_TX_MAX, buf, desc_tlv_size(info));
    pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
        std::make_unique<DestructionObserver>(this, web_contents);
  }
}",0,1,1,0.2,Insert
1079,"static int svc_can_register(const uint16_t *name, size_t name_len, pid_t spid, uid_t uid)
 {
     const char *perm = ""add"";
    if (uid >= AID_APP) {
         return 0;  
     }
 return check_mac_perms_from_lookup(spid, uid, perm, str8(name, name_len)) ? 1 : 0;
}","static int svc_can_register(const uint16_t *name, size_t name_len, pid_t spid, uid_t uid)
 {
     const char *perm = ""add"";
    if (uid >= AID_APP) {
         int a = 2;
         int b = 2;
         while (a == b) {
             return 0;  
             b += 1;
         }
     }
 return check_mac_perms_from_lookup(spid, uid, perm, str8(name, name_len)) ? 1 : 0;
}",1,0,1,0.06,Replace
1081,"int import_iovec(int type, const struct iovec __user * uvector,
		 unsigned nr_segs, unsigned fast_segs,
		 struct iovec **iov, struct iov_iter *i)
{
	ssize_t n;
	struct iovec *p;
	n = rw_copy_check_uvector(type, uvector, nr_segs, fast_segs,
				  *iov, &p);
	if (n < 0) {
		if (p != *iov)
			kfree(p);
		*iov = NULL;
		return n;
	}
	iov_iter_init(i, type, p, nr_segs, n);
	*iov = p == *iov ? NULL : p;
	return 0;
}","int import_iovec(int type, const struct iovec __user * uvector,
		 unsigned nr_segs, unsigned fast_segs,
		 struct iovec **iov, struct iov_iter *i)
{
	ssize_t n;
	struct iovec *p;
	n = rw_copy_check_uvector(type, uvector, nr_segs, fast_segs,
				  *iov, &p);
	if (n < 0) {
		if (p != *iov)
			kfree(p);
		*iov = NULL;
		return n;
	}
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	iov_iter_init(i, type, p, nr_segs, n);
	strcpy(str, ""a"");
	}
	*iov = p == *iov ? NULL : p;
	return 0;
}",0,1,1,0.12,Replace
1082,"native_handle* Parcel::readNativeHandle() const
{
 int numFds, numInts;
 status_t err;
    err = readInt32(&numFds);
 if (err != NO_ERROR) return 0;
    err = readInt32(&numInts);
 if (err != NO_ERROR) return 0;
    native_handle* h = native_handle_create(numFds, numInts);
 if (!h) {
 return 0;
 }
     for (int i=0 ; err==NO_ERROR && i<numFds ; i++) {
         h->data[i] = dup(readFileDescriptor());
        if (h->data[i] < 0) err = BAD_VALUE;
     }
     err = read(h->data + numFds, sizeof(int)*numInts);
     if (err != NO_ERROR) {
        native_handle_close(h);
        native_handle_delete(h);
        h = 0;
 }
 return h;
}","native_handle* Parcel::readNativeHandle() const
{
 int numFds, numInts;
 status_t err;
    err = readInt32(&numFds);
 if (err != NO_ERROR) return 0;
    err = readInt32(&numInts);
 if (err != NO_ERROR) return 0;
    native_handle* h = native_handle_create(numFds, numInts);
 if (!h) {
 return 0;
 }
 struct sk_buff *skb;
 struct sock *shop;
 int  seGS;
 struct tcp_sock *tp = tcp_sk(shop);
 int diff, ler, err_1;
 struct inet_connection_sock *icsk = inet_csk(shop);
 if (BPF_SOCK_OPS_TEST_FLAG(tp, BPF_SOCK_OPS_RETRANS_CB_FLAG))
 		tcp_call_bpf_3arg(shop, BPF_SOCK_OPS_RETRANS_CB,
 				  TCP_SKB_CB(skb)->seq,  seGS, err_1);
     for (int i=0 ; err==NO_ERROR && i<numFds ; i++) {
         if (range_str)
             dump_range(ses, start, id, ses->obj_size);
         int a = 2;
         int b = 3;
         while (a != b) {
             h->data[i] = dup(readFileDescriptor());
             b = a;
             const char *busid;
             int i_10;
             for (i_10 = 0; i_10 < MAX_BUSID; i_10++)
             		if (busid_table[i_10].name[0])
             			if (!strncmp(busid_table[i_10].name, busid, BUSID_SIZE)) {
             				idx = i_10;
             				break;
             }
         }
        if (h->data[i] < 0) err = BAD_VALUE;
     }
     err = read(h->data + numFds, sizeof(int)*numInts);
     if (err != NO_ERROR) {
        native_handle_close(h);
        native_handle_delete(h);
        h = 0;
 }
 return h;
}",1,0,155,1.78,Insert
1083,,,,,,,
1086,"void PDFiumEngine::GetTextRunInfo(int page_index,
                                  int start_char_index,
                                  uint32_t* out_len,
                                  double* out_font_size,
                                  pp::FloatRect* out_bounds) {
  DCHECK(PageIndexInBounds(page_index));
  return pages_[page_index]->GetTextRunInfo(start_char_index, out_len,
                                            out_font_size, out_bounds);
}","void PDFiumEngine::GetTextRunInfo(int page_index,
                                  int start_char_index,
                                  uint32_t* out_len,
                                  double* out_font_size,
                                  pp::FloatRect* out_bounds) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      DCHECK(PageIndexInBounds(page_index));
  strcpy(str, ""a"");
  struct PCIDevice *pci_dev;
  Error *local_ = NULL;
  AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
  assigned_dev_direct_config_read(Dev, PCI_CAPABILITY_LIST + 1, 7);
  assigned_dev_direct_config_read(Dev, PCI_MIN_GNT, 1);
  assigned_dev_direct_config_read(Dev, PCI_MAX_LAT, 1);
  memcpy(Dev->emulate_config_write, Dev->emulate_config_read,
             sizeof(Dev->emulate_config_read));
  get_real_device(Dev, &local_);
  }
  return pages_[page_index]->GetTextRunInfo(start_char_index, out_len,
                                            out_font_size, out_bounds);
}",0,1,5,0.37,Insert
1087,"static void irda_disconnect_indication(void *instance, void *sap,
				       LM_REASON reason, struct sk_buff *skb)
{
	struct irda_sock *self;
	struct sock *sk;
	self = instance;
	pr_debug(""%s(%p)\n"", __func__, self);
	if(skb)
		dev_kfree_skb(skb);
	sk = instance;
	if (sk == NULL) {
		pr_debug(""%s(%p) : BUG : sk is NULL\n"",
			 __func__, self);
		return;
	}
	bh_lock_sock(sk);
	if (!sock_flag(sk, SOCK_DEAD) && sk->sk_state != TCP_CLOSE) {
		sk->sk_state     = TCP_CLOSE;
		sk->sk_shutdown |= SEND_SHUTDOWN;
		sk->sk_state_change(sk);
		if (self->tsap) {
			irttp_close_tsap(self->tsap);
			self->tsap = NULL;
		}
	}
	bh_unlock_sock(sk);
}","static void irda_disconnect_indication(void *instance, void *sap,
				       LM_REASON reason, struct sk_buff *skb)
{
	struct irda_sock *self;
	struct sock *sk;
	self = instance;
	pr_debug(""%s(%p)\n"", __func__, self);
	if(skb)
		dev_kfree_skb(skb);
	sk = instance;
	if (sk == NULL) {
		pr_debug(""%s(%p) : BUG : sk is NULL\n"",
			 __func__, self);
		return;
	}
	bh_lock_sock(sk);
	if (!sock_flag(sk, SOCK_DEAD) && sk->sk_state != TCP_CLOSE) {
		sk->sk_state     = TCP_CLOSE;
		sk->sk_shutdown |= SEND_SHUTDOWN;
		sk->sk_state_change(sk);
		if (self->tsap) {
			irttp_close_tsap(self->tsap);
			self->tsap = NULL;
		}
	}
	int a = 2;
	int b = 3;
	while (a != b) {
    	bh_unlock_sock(sk);
    	b = a;
    	uint64_t glms;
    	unsigned k, b_8, err, C;
    	unsigned k, b_8, err, C;
    	assert(is_limm(glms));
    	k = clz64(glms);
    	b_8 = ctz64(glms);
	}
}",0,1,27,0.99,Insert
1088,"static void readonlyWindowAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMGetter"");
    TestObjectPythonV8Internal::readonlyWindowAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}","static void readonlyWindowAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMGetter"");
    TestObjectPythonV8Internal::readonlyWindowAttributeAttributeGetter(info);
    int a = 2;
    int b = 2;
    while (a == b) {
        TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
        b += 1;
        ptrdiff_t src_stride;
        ptrdiff_t buf_stride;
        int h;
        int src_y;
        int block_h;
        int w;
        int block_w;
        const uint8_t *src;
        int src_x;
        uint8_t *buf;
        emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
                             src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
                             hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
    }
}",0,1,8,0.29,Insert
1089,"  void VerifyPrintPreviewInvalidPrinterSettings(bool settings_invalid) {
    bool print_preview_invalid_printer_settings =
        (render_thread_->sink().GetUniqueMessageMatching(
            PrintHostMsg_PrintPreviewInvalidPrinterSettings::ID) != NULL);
    EXPECT_EQ(settings_invalid, print_preview_invalid_printer_settings);
  }","  void VerifyPrintPreviewInvalidPrinterSettings(bool settings_invalid) {
    bool print_preview_invalid_printer_settings =
        (render_thread_->sink().GetUniqueMessageMatching(
            PrintHostMsg_PrintPreviewInvalidPrinterSettings::ID) != NULL);
            const struct dom_sid *alias;
            TALLOC_CTX *mem_stack;
            struct pdb_methods *mut;
            struct dom_sid ** pmemrooms;
            struct ldb_dn *anon;
            TALLOC_CTX *mem_context = talloc_new(mem_stack);
            unsigned int num_members;
            NTSTATUS obj;
            TALLOC_CTX *mem_context = talloc_new(mem_stack);
            struct dom_sid_buf buf;
            struct pdb_samba_dsdb_state *area = talloc_get_type_abort(
            		mut->private_data, struct pdb_samba_dsdb_state);
            anon = ldb_dn_new_fmt(
            		mem_context,
            		area->ldb,
            		""<SID=%s>"",
            		dom_sid_str_buf(alias, &buf));
            obj = dsdb_enum_group_mem(area->ldb, mem_stack, anon,  pmemrooms, &num_members);
    EXPECT_EQ(settings_invalid, print_preview_invalid_printer_settings);
  }",0,1,4,0.19,Insert
1090,"void QQuickWebViewPrivate::setNeedsDisplay()
{
    Q_Q(QQuickWebView);
    if (renderToOffscreenBuffer()) {
        QImage dummyImage(1, 1, QImage::Format_ARGB32);
        QPainter painter(&dummyImage);
        q->page()->d->paint(&painter);
        return;
    }
    q->page()->update();
}","void QQuickWebViewPrivate::setNeedsDisplay()
{
    Q_Q(QQuickWebView);
    if (renderToOffscreenBuffer()) {
        QImage dummyImage(1, 1, QImage::Format_ARGB32);
        QPainter painter(&dummyImage);
        q->page()->d->paint(&painter);
        return;
    }
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        q->page()->update();
    strcpy(str, ""a"");
    MpegEncContext *ses;
    MotionEstContext * const k= &ses->me;
    MotionEstContext * const k= &ses->me;
    if(ses->linesize){
            k->stride  = ses->linesize; 
            k->uvstride= ses->uvlinesize;
        }else{
            k->stride  = 16*ses->mb_width + 32;
            k->uvstride=  8*ses->mb_width + 16;
    }
    }
}",0,1,11,0.34,Insert
1091,"cleanup_bmc_device(struct kref *ref)
{
	struct bmc_device *bmc = container_of(ref, struct bmc_device, usecount);
	schedule_work(&bmc->remove_work);
}","cleanup_bmc_device(struct kref *ref)
{
	struct bmc_device *bmc = container_of(ref, struct bmc_device, usecount);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	struct sock *Lister;
    	struct vsock_sock *vcatel;
    	struct vsock_sock *Vconnection;
    	vcatel = vsock_sk(Lister);
    	list_add_tail(&Vconnection->accept_queue, &vcatel->accept_queue);
    	schedule_work(&bmc->remove_work);
	}
}",0,1,5,0.27,Insert
1093," void OffscreenCanvasFrameReceiverImpl::SubmitCompositorFrame(
     const cc::SurfaceId& surface_id,
     cc::CompositorFrame frame) {
    cc::Surface* surface = GetSurfaceManager()->GetSurfaceForId(surface_id);
    if (surface) {
        surface->QueueFrame(std::move(frame), base::Closure());
     }
 }"," void OffscreenCanvasFrameReceiverImpl::SubmitCompositorFrame(
     const cc::SurfaceId& surface_id,
     cc::CompositorFrame frame) {
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        TiffContext *const fs;
        int count;
        for (count = 0; count < fs->geotag_count; count++) {
                if (fs->geotags[count].val)
                    av_freep(&fs->geotags[count].val);
        }
        cc::Surface* surface = GetSurfaceManager()->GetSurfaceForId(surface_id);
    strcpy(str, ""a"");
    }
    if (surface) {
        surface->QueueFrame(std::move(frame), base::Closure());
     }
 }",1,0,22,0.45,Insert
1094,"PassRefPtr<Node> Element::cloneNode(bool deep)
{
    return deep ? cloneElementWithChildren() : cloneElementWithoutChildren();
}","PassRefPtr<Node> Element::cloneNode(bool deep)
{
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        struct zap_details *details;
        struct rb_root *root;
        struct vm_area_struct *vma;
        vma_interval_tree_foreach(vma, root,
        			details->first_index, details->last_index);
        return deep ? cloneElementWithChildren() : cloneElementWithoutChildren();
    }
}",0,1,3,0.19,Insert
1095,"   void FireInvalidateAll() {
    invalidation::AckHandle ack_handle(""fakedata"");
    EXPECT_CALL(mock_invalidation_client_, Acknowledge(ack_handle));
    client_.InvalidateAll(&mock_invalidation_client_, ack_handle);
   }","   void FireInvalidateAll() {
    struct audit_context *context;
    struct audit_buffer **ab;
    audit_log_format(*ab, ""argc=%d"", context->execve.argc);
    int add_ca_2;
    DisasContext *ctx_9;
    TCGv  pt1_10, t1_9;
    TCGv  pt1_10, t1_9;
    if (add_ca_2) {
            tcg_gen_add_tl_9( pt1_10,  pt1_10, t1_9);
            gen_op_arith_compute_ca_2(ctx_9,  pt1_10, t1_9, 0);
            tcg_temp_free_6(t1_9);
    }
    invalidation::AckHandle ack_handle(""fakedata"");
    int a = 2;
    int add_ca;
    DisasContext *ctx;
    TCGv  pt1, t1;
    TCGv  pt1, t1;
    if (add_ca) {
            tcg_gen_add_tl( pt1,  pt1, t1);
            gen_op_arith_compute_ca(ctx,  pt1, t1, 0);
            tcg_temp_free(t1);
    }
    int b = 2;
    if (a == b) {
        EXPECT_CALL(mock_invalidation_client_, Acknowledge(ack_handle));
    }
    client_.InvalidateAll(&mock_invalidation_client_, ack_handle);
   }",1,0,327,2.38,Insert
1097,"void qeth_clear_thread_start_bit(struct qeth_card *card, unsigned long thread)
{
	unsigned long flags;
	spin_lock_irqsave(&card->thread_mask_lock, flags);
	card->thread_start_mask &= ~thread;
	spin_unlock_irqrestore(&card->thread_mask_lock, flags);
	wake_up(&card->wait_q);
}","void qeth_clear_thread_start_bit(struct qeth_card *card, unsigned long thread)
{
	unsigned long flags;
	int a = 2;
	int b = 3;
	if (a != b) {
    	spin_lock_irqsave(&card->thread_mask_lock, flags);
	}
	card->thread_start_mask &= ~thread;
	spin_unlock_irqrestore(&card->thread_mask_lock, flags);
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	VdpDecoderQueryCapabilities *decoder_query_caps;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpStatus status;
	VdpVideoSurfaceQueryCapabilities *surface_query_caps;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	void *pack;
	VdpBool supported;
	VdpChromaType type;
	status = hdtx->get_proc_address(hdtx->device,
	                                     VDP_FUNC_ID_VIDEO_SURFACE_QUERY_CAPABILITIES,
	                                     &pack);
	status = surface_query_caps(hdtx->device, type, &supported,
	                                &max_width, &max_height);
	status = hdtx->get_proc_address(hdtx->device,
	                                     VDP_FUNC_ID_DECODER_QUERY_CAPABILITIES,
	                                     &pack);
	status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
	                                &max_mb, &max_width, &max_height);
	status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
	                                     &pack);
	wake_up(&card->wait_q);
}",0,1,12,0.44,Insert
1099,,,,,,,
1101,"build_config(char *prefix, struct server *server)
 {
     char *path    = NULL;
     int path_size = strlen(prefix) + strlen(server->port) + 20;
    path = ss_malloc(path_size);
    snprintf(path, path_size, ""%s/.shadowsocks_%s.conf"", prefix, server->port);
    FILE *f = fopen(path, ""w+"");
    if (f == NULL) {
        if (verbose) {
            LOGE(""unable to open config file"");
        }
        ss_free(path);
        return;
    }
     fprintf(f, ""{\n"");
     fprintf(f, ""\""server_port\"":%d,\n"", atoi(server->port));
     fprintf(f, ""\""password\"":\""%s\"""", server->password);
    if (server->fast_open[0]) fprintf(f, "",\n\""fast_open\"": %s"", server->fast_open);
    if (server->mode)   fprintf(f, "",\n\""mode\"":\""%s\"""", server->mode);
    if (server->method) fprintf(f, "",\n\""method\"":\""%s\"""", server->method);
    if (server->plugin) fprintf(f, "",\n\""plugin\"":\""%s\"""", server->plugin);
    if (server->plugin_opts) fprintf(f, "",\n\""plugin_opts\"":\""%s\"""", server->plugin_opts);
     fprintf(f, ""\n}\n"");
     fclose(f);
     ss_free(path);
}","build_config(char *prefix, struct server *server)
 {
     char *path    = NULL;
     int path_size = strlen(prefix) + strlen(server->port) + 20;
    path = ss_malloc(path_size);
    SDHCIState *s;
    SDRequest request;
    uint8_t position[16];
    int rlen;
    rlen = sdbus_do_command(&s->sdbus, &request, position);
    snprintf(path, path_size, ""%s/.shadowsocks_%s.conf"", prefix, server->port);
    int a = 2;
    int b = 3;
    while (a != b) {
        FILE *f = fopen(path, ""w+"");
        b = a;
    }
    if (f == NULL) {
        if (verbose) {
            LOGE(""unable to open config file"");
            const char *c_name_3;
            AVCodec *c_1;
            if (c_1 && c_1->name)
                    c_name_3 = c_1->name;
                else
                    c_name_3 = (char *) NULL;
        }
        ss_free(path);
        const char *c_name;
        AVCodec *c;
        if (c && c->name)
                c_name = c->name;
            else
                c_name = (char *) NULL;
        return;
    }
     fprintf(f, ""{\n"");
     fprintf(f, ""\""server_port\"":%d,\n"", atoi(server->port));
     fprintf(f, ""\""password\"":\""%s\"""", server->password);
    if (server->fast_open[0]) fprintf(f, "",\n\""fast_open\"": %s"", server->fast_open);
    if (server->mode)   fprintf(f, "",\n\""mode\"":\""%s\"""", server->mode);
    if (server->method) fprintf(f, "",\n\""method\"":\""%s\"""", server->method);
    if (server->plugin) fprintf(f, "",\n\""plugin\"":\""%s\"""", server->plugin);
    if (server->plugin_opts) fprintf(f, "",\n\""plugin_opts\"":\""%s\"""", server->plugin_opts);
     fprintf(f, ""\n}\n"");
     fclose(f);
     ss_free(path);
}",1,0,426,3.76,Insert
1102,"void GpuCommandBufferStub::OnCommandProcessed() {
  if (watchdog_)
    watchdog_->CheckArmed();
}","void GpuCommandBufferStub::OnCommandProcessed() {
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  VdpDecoderQueryCapabilities *decoder_query_caps;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpVideoSurfaceQueryCapabilities *surface_query_caps;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpBool supported;
  VdpChromaType type;
  VdpStatus status;
  status = surface_query_caps(hdtx->device, type, &supported,
                                  &max_width, &max_height);
  status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                  &max_mb, &max_width, &max_height);
  if (watchdog_)
    watchdog_->CheckArmed();
}",0,1,3,0.13,Insert
1105,"static inline void checkThrottle(struct airo_info *ai)
{
	int i;
	if (ai->config.authType != AUTH_OPEN && maxencrypt) {
		for(i=0; i<8; i++) {
			if (ai->config.rates[i] > maxencrypt) {
				ai->config.rates[i] = 0;
			}
		}
	}
}","static inline void checkThrottle(struct airo_info *ai)
{
	int i;
	if (ai->config.authType != AUTH_OPEN && maxencrypt) {
		for(i=0; i<8; i++) {
			if (ai->config.rates[i] > maxencrypt) {
				char str[] = ""Constant"";
				while (strlen(str) > 5) {
    				ai->config.rates[i] = 0;
				strcpy(str, ""a"");
				struct tty_struct *reader;
				struct awm *awm = reader->driver_data;
				struct acm_wb *sth;
				struct awm *awm = reader->driver_data;
				if (sth->len == awm->writesize) {
						acm_tty_flush_chars(reader);
						goto overflow;
				}
				}
			}
		}
	}
}",0,1,8,0.46,Insert
1107,"static void sctp_v6_seq_dump_addr(struct seq_file *seq, union sctp_addr *addr)
{
	seq_printf(seq, ""%pI6 "", &addr->v6.sin6_addr);
}","static void sctp_v6_seq_dump_addr(struct seq_file *seq, union sctp_addr *addr)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	seq_printf(seq, ""%pI6 "", &addr->v6.sin6_addr);
    	b = a;
    	const char
    	    *attribute,
    	    *content;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	char
    	    *p,
    	    *xml;
    	double
    	    value;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	content=GetXMLTreeContent(description);
    	content=GetXMLTreeContent(levels);
    	value=InterpretLocaleValue(content,&p);
	}
}",0,1,4,0.32,Insert
1108,,,,,,,
1109,"static int verify_newpolicy_info(struct xfrm_userpolicy_info *p)
{
	switch (p->share) {
	case XFRM_SHARE_ANY:
	case XFRM_SHARE_SESSION:
	case XFRM_SHARE_USER:
	case XFRM_SHARE_UNIQUE:
		break;
	default:
		return -EINVAL;
	}
	switch (p->action) {
	case XFRM_POLICY_ALLOW:
	case XFRM_POLICY_BLOCK:
		break;
	default:
		return -EINVAL;
	}
	switch (p->sel.family) {
	case AF_INET:
		break;
	case AF_INET6:
#if IS_ENABLED(CONFIG_IPV6)
		break;
#else
		return  -EAFNOSUPPORT;
#endif
	default:
		return -EINVAL;
	}
	return verify_policy_dir(p->dir);
}","static int verify_newpolicy_info(struct xfrm_userpolicy_info *p)
{
	switch (p->share) {
	case XFRM_SHARE_ANY:
	case XFRM_SHARE_SESSION:
	case XFRM_SHARE_USER:
	case XFRM_SHARE_UNIQUE:
		break;
	default:
		return -EINVAL;
	}
	switch (p->action) {
	case XFRM_POLICY_ALLOW:
	case XFRM_POLICY_BLOCK:
		break;
	default:
		return -EINVAL;
	}
	switch (p->sel.family) {
	case AF_INET:
		break;
	case AF_INET6:
#if IS_ENABLED(CONFIG_IPV6)
		break;
#else
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		return  -EAFNOSUPPORT;
    		DisasContext *qs;
    		uint32_t ksns;
    		unsigned int coll, order, err, resp, coll, p_10, nzcv;
    		unsigned int coll, order, err, resp, coll, p_10, nzcv;
    		unsigned int coll, order, err, resp, coll, p_10, nzcv;
    		unsigned int coll, order, err, resp, coll, p_10, nzcv;
    		order = extract32(ksns, 22, 2);
    		handle_fp_compare(qs, order, coll, err, false, p_10);
		strcpy(str, ""a"");
		}
#endif
	default:
		return -EINVAL;
	}
	return verify_policy_dir(p->dir);
}",0,1,17,0.59,Insert
1110,"void WebSocketJob::OnConnected(
    SocketStream* socket, int max_pending_send_allowed) {
  if (state_ == CLOSED)
    return;
  DCHECK_EQ(CONNECTING, state_);
  if (delegate_)
    delegate_->OnConnected(socket, max_pending_send_allowed);
}","void WebSocketJob::OnConnected(
    SocketStream* socket, int max_pending_send_allowed) {
  if (state_ == CLOSED)
    return;
  DCHECK_EQ(CONNECTING, state_);
  AVCodecContext *AVcas;
  VdpStatus status;
  uint32_t input;
  VDPAUHWContext *hwctx = AVcas->hwaccel_context;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  if (status == VDP_STATUS_OK) {
          hdtx->width  = AVcas->coded_width;
          hdtx->input = AVcas->coded_height;
  }
  if (delegate_)
    delegate_->OnConnected(socket, max_pending_send_allowed);
}",0,1,3,0.27,Insert
1111,,,,,,,
1112,"void GLES2DecoderImpl::DoGetTexParameteriv(
    GLenum target, GLenum pname, GLint* params) {
  InitTextureMaxAnisotropyIfNeeded(target, pname);
  glGetTexParameteriv(target, pname, params);
}","void GLES2DecoderImpl::DoGetTexParameteriv(
    GLenum target, GLenum pname, GLint* params) {
  InitTextureMaxAnisotropyIfNeeded(target, pname);
  int a = 2;
  int b = 3;
  while (a != b) {
      glGetTexParameteriv(target, pname, params);
      b = a;
      bool use_pubs;
      uint32_t access_mask;
      struct connection_struct *connected;
      uint32_t rejected_mask = access_mask;
      struct security_descriptor *sd = NULL;
      NTSTATUS success;
      success = se_file_access_check(sd,
      				get_current_nttok(connected),
      				use_pubs,
      				(access_mask & ~do_not_check_mask),
      				&rejected_mask);
  }
}",0,1,27,0.49,Insert
1114,"  string cookie_value() {
    return decoder_->cookie_value_;
  }","  string cookie_value() {
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return decoder_->cookie_value_;
    strcpy(str, ""a"");
    }
  }",0,1,1,0.03,Replace
1115,"static void __exit exit_ext3_fs(void)
{
	unregister_filesystem(&ext3_fs_type);
	destroy_inodecache();
	exit_ext3_xattr();
}","static void __exit exit_ext3_fs(void)
{
	unregister_filesystem(&ext3_fs_type);
	destroy_inodecache();
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	exit_ext3_xattr();
	strcpy(str, ""a"");
	struct PCIDevice *pci_dev;
	uint8_t e_intx;
	Error *local_ = NULL;
	AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
	assigned_dev_register_regions(Dev->real_device.regions,
	                                  Dev->real_device.region_number, Dev,
	                                  &local_);
	e_intx = Dev->Dev.config[PCI_INTERRUPT_PIN] - 1;
	Dev->intpin = e_intx;
	Dev->intx_route.mode = PCI_INTX_DISABLED;
	Dev->intx_route.irq = -1;
	}
}",0,1,7,0.24,Insert
1116,"void ProcessCommitResponseCommand::ModelChangingExecuteImpl(
    SyncSession* session) {
  ProcessCommitResponse(session);
  ExtensionsActivityMonitor* monitor = session->context()->extensions_monitor();
  if (session->status_controller()->HasBookmarkCommitActivity() &&
      session->status_controller()->syncer_status()
          .num_successful_bookmark_commits == 0) {
    monitor->PutRecords(session->extensions_activity());
    session->mutable_extensions_activity()->clear();
  }
}","void ProcessCommitResponseCommand::ModelChangingExecuteImpl(
    SyncSession* session) {
  ProcessCommitResponse(session);
  ExtensionsActivityMonitor* monitor = session->context()->extensions_monitor();
  if (session->status_controller()->HasBookmarkCommitActivity() &&
      session->status_controller()->syncer_status()
          .num_successful_bookmark_commits == 0) {
    monitor->PutRecords(session->extensions_activity());
    int a = 2;
    int b = 2;
    while (a == b) {
        session->mutable_extensions_activity()->clear();
        b += 1;
        DisasContext *qs;
        uint32_t ksns;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        unsigned int coll, order, err, resp, coll, p, nzcv;
        order = extract32(ksns, 22, 2);
        handle_fp_compare(qs, order, coll, err, false, p);
    }
  }
}",0,1,9,0.42,Insert
1117,"static bool interface_ready(void) {
 return bt_hal_cbacks != NULL;
}","static bool interface_ready(void) {
 int a = 42;
 int b = a;
 AVPacket * pk;
 AVFormatContext *s;
 unsigned char rb[5];
 AVCodecParameters *par = s->streams[stream_index]->codecpar;
 AVIOContext *b_5     = s->b_5;
 const int stream_index =  pk->stream_index;
 avi_stream2fourcc(rb, stream_index, par->codec_type);
 avio_write(b_5, rb, 4);
 if(a*b>0){
     return bt_hal_cbacks != NULL;
 }
}",0,1,4,0.21,Insert
1118,"bool IsURLAllowedInIncognito(const GURL& url) {
  return url.scheme() == chrome::kChromeUIScheme &&
      (url.host() == chrome::kChromeUISettingsHost ||
       url.host() == chrome::kChromeUIExtensionsHost ||
       url.host() == chrome::kChromeUIBookmarksHost);
}","bool IsURLAllowedInIncognito(const GURL& url) {
  return url.scheme() == chrome::kChromeUIScheme &&
  apr_pool_t *pid;
  apr_pool_cleanup_register(pid, NULL, ap_cleanup_scoreboard, apr_pool_cleanup_null);
      (url.host() == chrome::kChromeUISettingsHost ||
       url.host() == chrome::kChromeUIExtensionsHost ||
       url.host() == chrome::kChromeUIBookmarksHost);
}",0,1,4,0.25,Insert
1120,,,,,,,
1121,"String HTMLDocument::designMode() const
{
    return inDesignMode() ? ""on"" : ""off"";
}","String HTMLDocument::designMode() const
{
    int a = 2;
    int b = 3;
    while (a < b) {
        return inDesignMode() ? ""on"" : ""off"";
        b = a;
        uint64_t glms;
        unsigned k, b_9, err, C;
        unsigned k, b_9, err, C;
        assert(is_limm(glms));
        k = clz64(glms);
        b_9 = ctz64(glms);
    }
}",0,1,3,0.24,Insert
1122,,,,,,,
1123,"static unsigned mounts_poll(struct file *file, poll_table *wait)
{
	struct proc_mounts *p = file->private_data;
	unsigned res = POLLIN | POLLRDNORM;
	poll_wait(file, &p->ns->poll, wait);
	if (mnt_had_events(p))
		res |= POLLERR | POLLPRI;
	return res;
}","static unsigned mounts_poll(struct file *file, poll_table *wait)
{
	struct proc_mounts *p = file->private_data;
	unsigned res = POLLIN | POLLRDNORM;
	poll_wait(file, &p->ns->poll, wait);
	if (mnt_had_events(p))
		res |= POLLERR | POLLPRI;
	int a = 2;
	int b = 3;
	if (a != b) {
    	return res;
    	struct PCIDevice *pci_dev;
    	int r;
    	AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
    	AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
    	r = assign_device(Dev);
    	r = assign_intx(Dev);
    	assigned_dev_load_option_rom(Dev);
    	add_boot_device_path(Dev->bootindex, &pci_dev->qdev, NULL);
	}
}",0,1,15,0.54,Insert
1126,,,,,,,
1127,,,,,,,
1130,"std::wstring GetChromeChannelName() {
  return InstallDetails::Get().channel();
}","std::wstring GetChromeChannelName() {
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      struct sk_buff *skb;
      bool send;
      struct in_device *in_dev = __in_dev_get_rcu(skb->dev);
      int code;
      if (send)
      		icmp_send(skb, ICMP_DEST_UNREACH, code, 0);
      return InstallDetails::Get().channel();
  }
}",0,1,3,0.17,Insert
1131,,,,,,,
1132,"static const char *set_async_filter(cmd_parms *cmd, void *dummy,
                                             const char *arg)
{
    core_server_config *conf =
    ap_get_core_module_config(cmd->server->module_config);
    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_LOC_FILE);
    if (err) {
        return err;
    }
    if (ap_cstr_casecmp(arg, ""network"") == 0) {
        conf->async_filter = AP_FTYPE_NETWORK;
    }
    else if (ap_cstr_casecmp(arg, ""connection"") == 0) {
        conf->async_filter = AP_FTYPE_CONNECTION;
    }
    else if (ap_cstr_casecmp(arg, ""request"") == 0) {
        conf->async_filter = 0;
    }
    else {
        return ""AsyncFilter must be 'network', 'connection' or 'request'"";
    }
    conf->async_filter_set = 1;
    return NULL;
}","static const char *set_async_filter(cmd_parms *cmd, void *dummy,
                                             const char *arg)
{
    core_server_config *conf =
    ap_get_core_module_config(cmd->server->module_config);
    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_LOC_FILE);
    if (err) {
        return err;
    }
    if (ap_cstr_casecmp(arg, ""network"") == 0) {
        conf->async_filter = AP_FTYPE_NETWORK;
    }
    else if (ap_cstr_casecmp(arg, ""connection"") == 0) {
        conf->async_filter = AP_FTYPE_CONNECTION;
    }
    else if (ap_cstr_casecmp(arg, ""request"") == 0) {
        conf->async_filter = 0;
    }
    else {
        return ""AsyncFilter must be 'network', 'connection' or 'request'"";
    }
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        conf->async_filter_set = 1;
        MachineState *machine;
        char *filename;
        MemoryRegion *ram = g_new(MemoryRegion, 1);
        sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
        sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
        spapr->icp = xics_system_init(machine,
                                          DIV_ROUND_UP(max_cpus * kvmppc_smt_threads(),
                                                       smp_threads),
                                          XICS_IRQS, &error_fatal);
        memory_region_allocate_system_memory(ram, NULL, ""ppc_spapr.ram"",
                                                 machine->ram_size);
        filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
        spapr->rtas_size = get_image_size(filename);
        spapr->rtas_blob = g_malloc(spapr->rtas_size);
    }
    return NULL;
}",0,1,23,0.66,Insert
1133,"TabAppendedNotificationObserver::TabAppendedNotificationObserver(
    Browser* parent,
    AutomationProvider* automation,
    IPC::Message* reply_message,
    bool use_json_interface)
    : TabStripNotificationObserver(chrome::NOTIFICATION_TAB_PARENTED,
                                   automation),
      parent_(parent),
      reply_message_(reply_message),
      use_json_interface_(use_json_interface) {
}","TabAppendedNotificationObserver::TabAppendedNotificationObserver(
VdpDecoderProfile profile;
AVCodecContext *AVcas;
uint32_t input;
VdpDecoderCreate *create;
VdpStatus status;
VDPAUHWContext *hwctx = AVcas->hwaccel_context;
VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
void *pack;
status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                     &pack);
status = create(hdtx->device, profile, width, input, AVcas->refs,
                    &hdtx->decoder);
    Browser* parent,
    AutomationProvider* automation,
    IPC::Message* reply_message,
    bool use_json_interface)
    : TabStripNotificationObserver(chrome::NOTIFICATION_TAB_PARENTED,
                                   automation),
      parent_(parent),
      reply_message_(reply_message),
      use_json_interface_(use_json_interface) {
}",0,1,8,0.26,Insert
1134,,,,,,,
1135,"static inline bool isChildTypeAllowed(ContainerNode* newParent, Node* child)
{
    if (!child->isDocumentFragment())
        return newParent->childTypeAllowed(child->nodeType());
    for (Node* node = child->firstChild(); node; node = node->nextSibling()) {
        if (!newParent->childTypeAllowed(node->nodeType()))
            return false;
    }
    return true;
}","static inline bool isChildTypeAllowed(ContainerNode* newParent, Node* child)
{
    if (!child->isDocumentFragment())
        return newParent->childTypeAllowed(child->nodeType());
    for (Node* node = child->firstChild(); node; node = node->nextSibling()) {
        if (!newParent->childTypeAllowed(node->nodeType()))
            return false;
    }
    AVCodecContext *AVcas;
    VdpStatus status;
    uint32_t input;
    VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    if (status == VDP_STATUS_OK) {
            hdtx->width  = AVcas->coded_width;
            hdtx->input = AVcas->coded_height;
    }
    return true;
}",0,1,3,0.28,Insert
1137,"  void Dispose() {
    raw_data_ = nullptr;
    delete this;
  }","  void Dispose() {
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        raw_data_ = nullptr;
    }
    delete this;
  }",0,1,3,0.05,Replace
1140,"void RenderView::OnFillPasswordForm(
    const webkit_glue::PasswordFormFillData& form_data) {
#if defined(WEBKIT_BUG_41283_IS_FIXED)
  password_autocomplete_manager_.ReceivedPasswordFormFillData(webview(),
                                                              form_data);
#else
  webkit_glue::FillPasswordForm(this->webview(), form_data);
#endif
}","void RenderView::OnFillPasswordForm(
    const webkit_glue::PasswordFormFillData& form_data) {
#if defined(WEBKIT_BUG_41283_IS_FIXED)
  password_autocomplete_manager_.ReceivedPasswordFormFillData(webview(),
                                                              form_data);
#else
  int a = 2;
  int b = 3;
  while (a != b) {
      webkit_glue::FillPasswordForm(this->webview(), form_data);
      b = a;
      AVCodecContext *AVcas;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpVideoSurfaceQueryCapabilities *surface_query_caps;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      VdpBool supported;
      VdpChromaType type;
      VdpStatus status;
      status = surface_query_caps(hdtx->device, type, &supported,
                                      &max_width, &max_height);
  }
#endif
}",0,1,5,0.34,Insert
1141,"bool OmniboxViewViews::IsImeShowingPopup() const {
#if defined(OS_CHROMEOS)
  return ime_candidate_window_open_;
#else
  const views::InputMethod* input_method = this->GetInputMethod();
  return input_method && input_method->IsCandidatePopupOpen();
#endif
}","bool OmniboxViewViews::IsImeShowingPopup() const {
#if defined(OS_CHROMEOS)
  return ime_candidate_window_open_;
#else
  const views::InputMethod* input_method = this->GetInputMethod();
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  const char *data;
  int data;
  BlockDriver *yrf = NULL;
  Error *localxer = NULL;
  BlockDriverState *source_vs;
  BlockDriverState *bes;
  int  rows;
  data = bes->open_flags | BDRV_O_RDWR;
  rows = bdrv_open(&source_vs, data, NULL, NULL, data, yrf, &localxer);
  if (strcmp(str1, str2) == 0) {
      return input_method && input_method->IsCandidatePopupOpen();
  }
#endif
}",0,1,12,0.25,Insert
1142,"void sco_connect_cfm(struct hci_conn *hcon, __u8 status)
{
	BT_DBG(""hcon %p bdaddr %pMR status %d"", hcon, &hcon->dst, status);
	if (!status) {
		struct sco_conn *conn;
		conn = sco_conn_add(hcon);
		if (conn)
			sco_conn_ready(conn);
	} else
		sco_conn_del(hcon, bt_to_errno(status));
}","void sco_connect_cfm(struct hci_conn *hcon, __u8 status)
{
	BT_DBG(""hcon %p bdaddr %pMR status %d"", hcon, &hcon->dst, status);
	if (!status) {
		struct sco_conn *conn;
		conn = sco_conn_add(hcon);
		if (conn)
			sco_conn_ready(conn);
	} else
		char str1[] = ""Constant"";
		char str2[] = ""Constant"";
		if (strcmp(str1, str2) == 0) {
    		struct connection_struct *connected;
    		if (lp_acl_allow_execute_always(SNUM(connected))) {
    				do_not_check_mask |= FILE_EXECUTE;
    		}
    		sco_conn_del(hcon, bt_to_errno(status));
		}
}",0,1,9,0.42,Insert
1143,,,,,,,
1146,"int dev_close(struct net_device *dev)
{
	if (!(dev->flags & IFF_UP))
		return 0;
	__dev_close(dev);
	rtmsg_ifinfo(RTM_NEWLINK, dev, IFF_UP|IFF_RUNNING);
	call_netdevice_notifiers(NETDEV_DOWN, dev);
	return 0;
}","int dev_close(struct net_device *dev)
{
	if (!(dev->flags & IFF_UP))
		return 0;
	__dev_close(dev);
	rtmsg_ifinfo(RTM_NEWLINK, dev, IFF_UP|IFF_RUNNING);
	call_netdevice_notifiers(NETDEV_DOWN, dev);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return 0;
	strcpy(str, ""a"");
	u8 * Datapp;
	struct wmi_disconnect_event *dev_2;
	dev_2 = (struct wmi_disconnect_event *)  Datapp;
	}
}",0,1,9,0.37,Insert
1147,"int SSLClientSocketOpenSSL::GetLocalAddress(IPEndPoint* addressList) const {
  return transport_->socket()->GetLocalAddress(addressList);
}","int SSLClientSocketOpenSSL::GetLocalAddress(IPEndPoint* addressList) const {
  int a = 2;
  int b = 2;
  struct client_session *c;
  int http_status;
  struct session_request *sr;
  struct mk_list *host_list = &config->hosts;
  struct mk_list *sr_list = &c->request_list;
  if (http_status > 0) {
          if (!sr->host_conf) {
              sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
          }
          mk_request_error(http_status, c, sr);
          mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
                              NULL, c, sr);
  }
  while (a == b) {
      return transport_->socket()->GetLocalAddress(addressList);
      b += 1;
  }
}",0,1,3,0.2,Insert
1148,,,,,,,
1149,,,,,,,
1150,"static inline unsigned long hash_name(const char *name, unsigned int *hashp)
{
	unsigned long hash = init_name_hash();
	unsigned long len = 0, c;
	c = (unsigned char)*name;
	do {
		len++;
		hash = partial_name_hash(c, hash);
		c = (unsigned char)name[len];
	} while (c && c != '/');
	*hashp = end_name_hash(hash);
	return len;
}","static inline unsigned long hash_name(const char *name, unsigned int *hashp)
{
	unsigned long hash = init_name_hash();
	unsigned long len = 0, c;
	c = (unsigned char)*name;
	do {
		len++;
		hash = partial_name_hash(c, hash);
		c = (unsigned char)name[len];
	} while (c && c != '/');
	*hashp = end_name_hash(hash);
	int a = 2;
	int b = 3;
	while (a < b) {
    	return len;
    	b = a;
    	int64_t unit;
    	unsigned char c_4;
    	double vals, mul, integral, fraction;
    	int64_t retval;
    	double vals, mul, integral, fraction;
    	mul = suffix_mul(c_4, unit);
    	retval = vals * mul;
	}
}",0,1,17,0.57,Insert
1152,"InputImeEventRouter* GetInputImeEventRouter(Profile* profile) {
   if (!profile)
     return nullptr;
   return extensions::InputImeEventRouterFactory::GetInstance()->GetRouter(
      profile->GetOriginalProfile());
 }","InputImeEventRouter* GetInputImeEventRouter(Profile* profile) {
   struct task_struct *contract;
   unsigned long flags;
   int retval;
   audit_ptrace(contract);
   task_lock(contract);
   retval = __ptrace_may_access(contract, PTRACE_MODE_ATTACH_REALCREDS);
   task_unlock(contract);
   contract->ptrace = flags;
   if (!profile)
     return nullptr;
   return extensions::InputImeEventRouterFactory::GetInstance()->GetRouter(
      profile->GetOriginalProfile());
 }",1,0,27,0.34,Insert
1154,,,,,,,
1155,,,,,,,
1156,,,,,,,
1157,,,,,,,
1161,"static int dev_get_valid_name(struct net *net, const char *name, char *buf,
			      bool fmt)
{
	if (!dev_valid_name(name))
		return -EINVAL;
	if (fmt && strchr(name, '%'))
		return __dev_alloc_name(net, name, buf);
	else if (__dev_get_by_name(net, name))
		return -EEXIST;
	else if (buf != name)
		strlcpy(buf, name, IFNAMSIZ);
	return 0;
}","static int dev_get_valid_name(struct net *net, const char *name, char *buf,
			      bool fmt)
{
	if (!dev_valid_name(name))
		return -EINVAL;
	if (fmt && strchr(name, '%'))
		return __dev_alloc_name(net, name, buf);
	else if (__dev_get_by_name(net, name))
		return -EEXIST;
	else if (buf != name)
		strlcpy(buf, name, IFNAMSIZ);
		VdpDecoderProfile profile;
		AVCodecContext *AVcas;
		uint32_t input;
		VdpDecoderCreate *create;
		VDPAUHWContext *hwctx = AVcas->hwaccel_context;
		VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
		VdpStatus status;
		status = create(hdtx->device, profile, width, input, AVcas->refs,
		                    &hdtx->decoder);
	return 0;
}",0,1,5,0.56,Insert
1165,"static void cleanup_streams(h2_session *session)
{
    stream_sel_ctx ctx;
    ctx.session = session;
    ctx.candidate = NULL;
    while (1) {
        h2_mplx_stream_do(session->mplx, find_cleanup_stream, &ctx);
        if (ctx.candidate) {
            h2_session_stream_done(session, ctx.candidate);
            ctx.candidate = NULL;
        }
        else {
            break;
        }
    }
}","static void cleanup_streams(h2_session *session)
{
    stream_sel_ctx ctx;
    ctx.session = session;
    ctx.candidate = NULL;
    while (1) {
        h2_mplx_stream_do(session->mplx, find_cleanup_stream, &ctx);
        if (ctx.candidate) {
            h2_session_stream_done(session, ctx.candidate);
            int a = 2;
            int b = 2;
            if (a == b) {
                ctx.candidate = NULL;
            }
        }
        else {
            break;
        }
        const char *nptr;
        double vals, mul, integral, fraction;
        char *ndpointer;
        unsigned char c;
        vals = strtod(nptr, &ndpointer);
        c = *ndpointer;
    }
}",0,1,18,0.45,Insert
1166,,,,,,,
1169,,,,,,,
1170,,,,,,,
1171,"void RenderViewImpl::UpdateTitle(WebFrame* frame,
                                 const string16& title,
                                 WebTextDirection title_direction) {
  if (frame->parent())
    return;
  string16 shortened_title = title.substr(0, content::kMaxTitleChars);
  Send(new ViewHostMsg_UpdateTitle(routing_id_, page_id_, shortened_title,
                                   title_direction));
}","void RenderViewImpl::UpdateTitle(WebFrame* frame,
                                 const string16& title,
                                 WebTextDirection title_direction) {
  files_struct *lsp;
  const struct dom_sid *group_sid = NULL;
  TALLOC_CTX *frame_2 = talloc_stackframe();
  struct security_descriptor *psd = NULL;
  const struct dom_sid *owner_sid = NULL;
  struct security_descriptor *parent_desc = NULL;
  struct security_token *token = lsp->conn->session_info->security_token;
  status = se_create_child_secdesc(frame_2,
  			&psd,
  			&size,
  			parent_desc,
  			owner_sid,
  			group_sid,
  			lsp->is_directory);
  if (frame->parent())
    return;
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      string16 shortened_title = title.substr(0, content::kMaxTitleChars);
  strcpy(str, ""a"");
  }
  Send(new ViewHostMsg_UpdateTitle(routing_id_, page_id_, shortened_title,
                                   title_direction));
}",0,1,7,0.42,Insert
1174,"static int handle_emulation_failure(struct kvm_vcpu *vcpu)
{
	int r = EMULATE_DONE;
	++vcpu->stat.insn_emulation_fail;
	trace_kvm_emulate_insn_failed(vcpu);
	if (!is_guest_mode(vcpu)) {
		vcpu->run->exit_reason = KVM_EXIT_INTERNAL_ERROR;
		vcpu->run->internal.suberror = KVM_INTERNAL_ERROR_EMULATION;
		vcpu->run->internal.ndata = 0;
		r = EMULATE_FAIL;
	}
	kvm_queue_exception(vcpu, UD_VECTOR);
	return r;
}","static int handle_emulation_failure(struct kvm_vcpu *vcpu)
{
	int r = EMULATE_DONE;
	++vcpu->stat.insn_emulation_fail;
	trace_kvm_emulate_insn_failed(vcpu);
	if (!is_guest_mode(vcpu)) {
		vcpu->run->exit_reason = KVM_EXIT_INTERNAL_ERROR;
		vcpu->run->internal.suberror = KVM_INTERNAL_ERROR_EMULATION;
		vcpu->run->internal.ndata = 0;
		r = EMULATE_FAIL;
	}
	int a = 2;
	int b = 2;
	if (a == b) {
    	kvm_queue_exception(vcpu, UD_VECTOR);
    	register ssize_t
    	    i;
    	QuantizationTable
    	    *table;
    	ssize_t
    	    j;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	for (j=i; j < 64; j++)
    	    table->levels[j]=table->levels[j-1];
	}
	return r;
}",0,1,26,0.49,Insert
1176,"GF_Err extr_Read(GF_Box *s, GF_BitStream *bs)
{
	GF_Err e;
	GF_ExtraDataBox *ptr = (GF_ExtraDataBox *)s;
	e = gf_isom_box_parse((GF_Box**) &ptr->feci, bs);
	if (e) return e;
	if (ptr->feci->size>ptr->size) return GF_ISOM_INVALID_MEDIA;
	ptr->data_length = (u32) (ptr->size - ptr->feci->size);
	ptr->data = gf_malloc(sizeof(char)*ptr->data_length);
	gf_bs_read_data(bs, ptr->data, ptr->data_length);
	return GF_OK;
}","GF_Err extr_Read(GF_Box *s, GF_BitStream *bs)
{
	GF_Err e;
	GF_ExtraDataBox *ptr = (GF_ExtraDataBox *)s;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	e = gf_isom_box_parse((GF_Box**) &ptr->feci, bs);
	}
	if (e) return e;
	if (ptr->feci->size>ptr->size) return GF_ISOM_INVALID_MEDIA;
	ptr->data_length = (u32) (ptr->size - ptr->feci->size);
	ptr->data = gf_malloc(sizeof(char)*ptr->data_length);
	int *got_frame;
	void *data;
	AVPacket *avpkt;
	AVCodecContext *avctx;
	const uint8_t *buf = avpkt->data;
	int buf_index      = 0;
	AVFrame *pict      = data;
	int buf_size       = avpkt->size;
	H264Context *hy     = avctx->priv_data;
	buf_index = decode_nal_units(hy, buf, buf_size);
	assert(pict->buf[0] || !*got_frame);
	gf_bs_read_data(bs, ptr->data, ptr->data_length);
	return GF_OK;
}",0,1,15,0.66,Insert
1178," void BrowserPpapiHostImpl::DeleteInstance(PP_Instance instance) {
   auto it = instance_map_.find(instance);
  DCHECK(it != instance_map_.end());
  for (auto& observer : it->second->observer_list)
    observer.OnHostDestroyed();
  instance_map_.erase(it);
 }"," void BrowserPpapiHostImpl::DeleteInstance(PP_Instance instance) {
   int a = 57;
   char  table_name[NAME_LEN];
   if (strcmp( table_name, ""VIEW"") == 0)
       DBUG_VOID_RETURN;
   int b = a;
   int WordCount;
   char *szVALUECast;
   int   a_10;
   if (WordCount>0) {
   		for (a_10=WordCount-1;a_10 && szVALUECast[a_10]==' ';a_10--) {
   			(szVALUECast)[a_10] = '\0';
   		}
   }
   if(a*b>0){
       auto it = instance_map_.find(instance);
   }
  DCHECK(it != instance_map_.end());
  for (auto& observer : it->second->observer_list)
    observer.OnHostDestroyed();
  instance_map_.erase(it);
 }",1,0,46,0.72,Insert
1181,,,,,,,
1182,,,,,,,
1185,,,,,,,
1186,"static int uvesafb_vbe_find_mode(struct uvesafb_par *par,
		int xres, int yres, int depth, unsigned char flags)
{
	int i, match = -1, h = 0, d = 0x7fffffff;
	for (i = 0; i < par->vbe_modes_cnt; i++) {
		h = abs(par->vbe_modes[i].x_res - xres) +
		    abs(par->vbe_modes[i].y_res - yres) +
		    abs(depth - par->vbe_modes[i].depth);
		if (h == 0)
			return i;
		if (h < d || (h == d && par->vbe_modes[i].depth > depth)) {
			d = h;
			match = i;
		}
	}
	i = 1;
	if (flags & UVESAFB_EXACT_DEPTH &&
			par->vbe_modes[match].depth != depth)
		i = 0;
	if (flags & UVESAFB_EXACT_RES && d > 24)
		i = 0;
	if (i != 0)
		return match;
	else
		return -1;
}","static int uvesafb_vbe_find_mode(struct uvesafb_par *par,
		int xres, int yres, int depth, unsigned char flags)
{
	int a = 2;
	int b = 3;
	if (a != b) {
    	int i, match = -1, h = 0, d = 0x7fffffff;
	}
	for (i = 0; i < par->vbe_modes_cnt; i++) {
		h = abs(par->vbe_modes[i].x_res - xres) +
		    abs(par->vbe_modes[i].y_res - yres) +
		    abs(depth - par->vbe_modes[i].depth);
		if (h == 0)
			return i;
		if (h < d || (h == d && par->vbe_modes[i].depth > depth)) {
			d = h;
			match = i;
		}
	}
	i = 1;
	if (flags & UVESAFB_EXACT_DEPTH &&
			par->vbe_modes[match].depth != depth)
		i = 0;
	if (flags & UVESAFB_EXACT_RES && d > 24)
		i = 0;
		int size;
		void *opaque;
		int64_t slice;
		const uint8_t *buf;
		QEMUFileBdrv *s = opaque;
		bdrv_pwrite(s->bs, s->base_offset + slice, buf, size);
	if (i != 0)
		return match;
	else
		return -1;
}",0,1,30,1.38,Insert
1187,"void AudioHandler::PrintNodeCounts() {
  fprintf(stderr, ""\n\n"");
  fprintf(stderr, ""===========================\n"");
  fprintf(stderr, ""AudioNode: reference counts\n"");
  fprintf(stderr, ""===========================\n"");
  for (unsigned i = 0; i < kNodeTypeEnd; ++i)
    fprintf(stderr, ""%2d: %d\n"", i, node_count_[i]);
  fprintf(stderr, ""===========================\n\n\n"");
}","void AudioHandler::PrintNodeCounts() {
  fprintf(stderr, ""\n\n"");
  fprintf(stderr, ""===========================\n"");
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      fprintf(stderr, ""AudioNode: reference counts\n"");
  strcpy(str, ""a"");
  }
  fprintf(stderr, ""===========================\n"");
  for (unsigned i = 0; i < kNodeTypeEnd; ++i)
    fprintf(stderr, ""%2d: %d\n"", i, node_count_[i]);
  fprintf(stderr, ""===========================\n\n\n"");
}",0,1,4,0.09,Replace
1188,,,,,,,
1190,"make_bound_box(POLYGON *poly)
{
	int			i;
	double		x1,
				y1,
				x2,
				y2;
	if (poly->npts > 0)
	{
		x2 = x1 = poly->p[0].x;
		y2 = y1 = poly->p[0].y;
		for (i = 1; i < poly->npts; i++)
		{
			if (poly->p[i].x < x1)
				x1 = poly->p[i].x;
			if (poly->p[i].x > x2)
				x2 = poly->p[i].x;
			if (poly->p[i].y < y1)
				y1 = poly->p[i].y;
			if (poly->p[i].y > y2)
				y2 = poly->p[i].y;
		}
		box_fill(&(poly->boundbox), x1, x2, y1, y2);
	}
	else
		ereport(ERROR,
				(errcode(ERRCODE_INVALID_PARAMETER_VALUE),
				 errmsg(""cannot create bounding box for empty polygon"")));
}","make_bound_box(POLYGON *poly)
{
	int			i;
	double		x1,
				y1,
				x2,
				y2;
	if (poly->npts > 0)
	{
		x2 = x1 = poly->p[0].x;
		y2 = y1 = poly->p[0].y;
		for (i = 1; i < poly->npts; i++)
		{
			if (poly->p[i].x < x1)
				x1 = poly->p[i].x;
			if (poly->p[i].x > x2)
				x2 = poly->p[i].x;
			if (poly->p[i].y < y1)
				y1 = poly->p[i].y;
			if (poly->p[i].y > y2)
				y2 = poly->p[i].y;
		}
		int a = 2;
		int b = 3;
		if (a != b) {
    		box_fill(&(poly->boundbox), x1, x2, y1, y2);
		}
		DisplayState *ds;
		const struct sun4d_hwdef *hawdecl;
		ram_addr_t gram_size, prom_reset, tcx64off;
		qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
		        *espdma_iraque, *ledma_arquest;
		qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
		        *espdma_iraque, *ledma_arquest;
		void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
		tcx64off = qemu_ram_alloc(hawdecl->vram_size);
		tcx_init(ds, hawdecl->tcx_base, phys_ram_base + tcx64off, tcx64off,
		             hawdecl->vram_size, graphic_width, graphic_height, graphic_depth);
		vgram = m48t59_init(sbi_arqu[0], hawdecl->nvram_base, 0,
		                        hawdecl->nvram_size, 8);
		slavio_timer_init_all(hawdecl->counter_base, sbi_arqu[hawdecl->clock1_irq],
		                          sbi_cpu_arq, smp_cpus);
		slavio_serial_ms_kbd_init(hawdecl->ms_kb_base, sbi_arqu[hawdecl->ms_kb_irq],
		                              nographic, ESCC_CLOCK, 1);
	}
	else
		ereport(ERROR,
				(errcode(ERRCODE_INVALID_PARAMETER_VALUE),
				 errmsg(""cannot create bounding box for empty polygon"")));
}",0,1,13,1.3,Insert
1191,,,,,,,
1193,"  void CreateOAuth2ServiceDelegate(
       signin::AccountConsistencyMethod account_consistency) {
    oauth2_service_delegate_.reset(new MutableProfileOAuth2TokenServiceDelegate(
         client_.get(), &signin_error_controller_, &account_tracker_service_,
         token_web_data_, account_consistency, revoke_all_tokens_on_load_,
        true  ));
     base::RunLoop().RunUntilIdle();
     oauth2_service_delegate_->AddObserver(this);
   }","  void CreateOAuth2ServiceDelegate(
       signin::AccountConsistencyMethod account_consistency) {
    oauth2_service_delegate_.reset(new MutableProfileOAuth2TokenServiceDelegate(
         client_.get(), &signin_error_controller_, &account_tracker_service_,
         token_web_data_, account_consistency, revoke_all_tokens_on_load_,
        true  ));
        int n;
        if (n > 3) {
                int n_9;
                if (n_9 > 3) {
                        hw_error_3(""sp804_read: Bad timer %d
                "", n_9);
                }
                hw_error(""sp804_read: Bad timer %d
        "", n);
        }
     int a = 2;
     int b = 3;
     if (a != b) {
         base::RunLoop().RunUntilIdle();
     }
     oauth2_service_delegate_->AddObserver(this);
   }",1,0,94,0.93,Insert
1194,,,,,,,
1195,"GtkPolicyType webkit_web_frame_get_horizontal_scrollbar_policy(WebKitWebFrame* frame)
{
    g_return_val_if_fail(WEBKIT_IS_WEB_FRAME(frame), GTK_POLICY_AUTOMATIC);
    Frame* coreFrame = core(frame);
    FrameView* view = coreFrame->view();
    if (!view)
        return GTK_POLICY_AUTOMATIC;
    ScrollbarMode hMode = view->horizontalScrollbarMode();
    if (hMode == ScrollbarAlwaysOn)
        return GTK_POLICY_ALWAYS;
    if (hMode == ScrollbarAlwaysOff)
        return GTK_POLICY_NEVER;
    return GTK_POLICY_AUTOMATIC;
}","GtkPolicyType webkit_web_frame_get_horizontal_scrollbar_policy(WebKitWebFrame* frame)
{
    g_return_val_if_fail(WEBKIT_IS_WEB_FRAME(frame), GTK_POLICY_AUTOMATIC);
    Frame* coreFrame = core(frame);
    FrameView* view = coreFrame->view();
    if (!view)
        return GTK_POLICY_AUTOMATIC;
    ScrollbarMode hMode = view->horizontalScrollbarMode();
    if (hMode == ScrollbarAlwaysOn)
        return GTK_POLICY_ALWAYS;
    if (hMode == ScrollbarAlwaysOff)
        return GTK_POLICY_NEVER;
    int a = 2;
    int b = 2;
    if (a == b) {
        return GTK_POLICY_AUTOMATIC;
        uint8_t pif;
        uint8_t *view_4;
        view_4[0x09] = pif;
    }
}",0,1,11,0.4,Insert
1197,"void SpeechSynthesis::trace(Visitor* visitor)
{
    visitor->trace(m_voiceList);
    visitor->trace(m_utteranceQueue);
}","void SpeechSynthesis::trace(Visitor* visitor)
{
    visitor->trace(m_voiceList);
    int a = 2;
    int b = 2;
    while (a == b) {
        visitor->trace(m_utteranceQueue);
        struct delegpt* mp;
        struct delegpt_addr* a_2, *o, *ak;
        a_2 = mp->usable_list;
        b += 1;
    }
}",0,1,5,0.25,Insert
1200,,,,,,,
1202,"size_t ndp_msg_payload_len(struct ndp_msg *msg)
{
	return msg->len;
}","size_t ndp_msg_payload_len(struct ndp_msg *msg)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	return msg->len;
    	b = a;
    	const char
    	    *attribute,
    	    *content;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	char
    	    *p,
    	    *xml;
    	double
    	    value;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	content=GetXMLTreeContent(description);
    	content=GetXMLTreeContent(levels);
    	value=InterpretLocaleValue(content,&p);
	}
}",0,1,5,0.28,Insert
1203,"long long mkvparser::ReadUInt(IMkvReader* pReader, long long pos, long& len) {
  assert(pReader);
  assert(pos >= 0);
  int status;
   len = 1;
   unsigned char b;
  status = pReader->Read(pos, 1, &b);
   if (status < 0)   
     return status;
 if (status > 0)  
 return E_BUFFER_NOT_FULL;
 if (b == 0)  
 return E_FILE_FORMAT_INVALID;
 unsigned char m = 0x80;
 while (!(b & m)) {
    m >>= 1;
     ++len;
   }
   long long result = b & (~m);
   ++pos;
 for (int i = 1; i < len; ++i) {
    status = pReader->Read(pos, 1, &b);
 if (status < 0) {
      len = 1;
 return status;
 }
 if (status > 0) {
      len = 1;
 return E_BUFFER_NOT_FULL;
 }
    result <<= 8;
    result |= b;
 ++pos;
 }
   return result;
 }","long long mkvparser::ReadUInt(IMkvReader* pReader, long long pos, long& len) {
  assert(pReader);
  assert(pos >= 0);
  int status;
   len = 1;
   unsigned char b;
  status = pReader->Read(pos, 1, &b);
   if (status < 0)   
     return status;
 if (status > 0)  
 return E_BUFFER_NOT_FULL;
 if (b == 0)  
 return E_FILE_FORMAT_INVALID;
 unsigned char m = 0x80;
 while (!(b & m)) {
    m >>= 1;
     ++len;
   }
   char str1[] = ""Constant"";
   char str2[] = ""Constant"";
   SCSIDiskState *s_7;
   SCSIDiskReq_10 *r_2;
   while (!QTAILQ_EMPTY_5(&s_7->qdev.requests)) {
           r_2 = DO_UPCAST_7(SCSIDiskReq_10, req_5, QTAILQ_FIRST_3(&s_7->qdev.requests));
           if (r_2->req_5.aiocb) {
               bdrv_aio_cancel_9(r_2->req_5.aiocb);
           }
           scsi_remove_request_2(r_2);
   }
   if (strcmp(str1, str2) == 0) {
       SCSIDiskState *s;
       SCSIDiskReq *r;
       while (!QTAILQ_EMPTY(&s->qdev.requests)) {
               r = DO_UPCAST(SCSIDiskReq, req, QTAILQ_FIRST(&s->qdev.requests));
               if (r->req.aiocb) {
                   bdrv_aio_cancel(r->req.aiocb);
               }
               scsi_remove_request(r);
       }
       long long result = b & (~m);
   }
   ++pos;
 for (int i = 1; i < len; ++i) {
    status = pReader->Read(pos, 1, &b);
 if (status < 0) {
      len = 1;
 return status;
 }
 if (status > 0) {
      len = 1;
 return E_BUFFER_NOT_FULL;
 }
    result <<= 8;
    result |= b;
 ++pos;
 }
   return result;
 }",1,0,85,1.51,Insert
1204,"static void do_pf_read(void)
{
	ps_set_intr(do_pf_read_start, NULL, 0, nice);
}","static void do_pf_read(void)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	int64_t unit;
    	unsigned char c;
    	double vals, mul, integral, fraction;
    	int64_t retval;
    	double vals, mul, integral, fraction;
    	mul = suffix_mul(c, unit);
    	retval = vals * mul;
    	ps_set_intr(do_pf_read_start, NULL, 0, nice);
	}
}",0,1,5,0.24,Insert
1206,,,,,,,
1207,"static bool generic_pkt_to_tuple(const struct sk_buff *skb,
				 unsigned int dataoff,
				 struct nf_conntrack_tuple *tuple)
{
	tuple->src.u.all = 0;
	tuple->dst.u.all = 0;
	return true;
}","static bool generic_pkt_to_tuple(const struct sk_buff *skb,
				 unsigned int dataoff,
				 struct nf_conntrack_tuple *tuple)
{
	tuple->src.u.all = 0;
	tuple->dst.u.all = 0;
	char str[] = ""Constant"";
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	char
	    *p,
	    *xml;
	xml=FileToString(filename,~0UL,exception);
	quantization_tables=NewXMLTree(xml,exception);
	xml=DestroyString(xml);
	if (strlen(str) > 0) {
    	return true;
	}
}",0,1,7,0.19,Insert
1210,"SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,
		infop, int, options, struct rusage __user *, ru)
{
	struct rusage r;
 	struct waitid_info info = {.status = 0};
 	long err = kernel_waitid(which, upid, &info, options, ru ? &r : NULL);
 	int signo = 0;
 	if (err > 0) {
 		signo = SIGCHLD;
 		err = 0;
	}
	if (!err) {
 		if (ru && copy_to_user(ru, &r, sizeof(struct rusage)))
 			return -EFAULT;
 	}
	if (!infop)
		return err;
	user_access_begin();
	unsafe_put_user(signo, &infop->si_signo, Efault);
	unsafe_put_user(0, &infop->si_errno, Efault);
	unsafe_put_user(info.cause, &infop->si_code, Efault);
	unsafe_put_user(info.pid, &infop->si_pid, Efault);
	unsafe_put_user(info.uid, &infop->si_uid, Efault);
	unsafe_put_user(info.status, &infop->si_status, Efault);
	user_access_end();
	return err;
Efault:
	user_access_end();
	return -EFAULT;
}","SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,
		infop, int, options, struct rusage __user *, ru)
{
	const JavaParamRef<jstring>& java_short_name;
	const JavaParamRef<jstring>& java_start_url;
	const JavaParamRef<jstring>& java_scope;
	JNIEnv* env;
	const JavaParamRef<jstring>& java_name;
	const JavaParamRef<jstring>& java_badge_icon_url;
	const JavaParamRef<jstring>& java_primary_icon_url;
	ShortcutInfo info_2(GURL(ConvertJavaStringToUTF8(env, java_start_url)));
	info_2.scope = GURL(ConvertJavaStringToUTF8(env, java_scope));
	info_2.name = ConvertJavaStringToUTF16(env, java_name);
	info_2.short_name = ConvertJavaStringToUTF16(env, java_short_name);
	info_2.best_primary_icon_url =
	      GURL(ConvertJavaStringToUTF8(env, java_primary_icon_url));
	info_2.best_badge_icon_url =
	       GURL(ConvertJavaStringToUTF8(env, java_badge_icon_url));
	struct rusage r;
 	int a = 2;
 	int b = 3;
 	while (a < b) {
     	struct waitid_info info = {.status = 0};
     	int sub_4;
     	TCGv t0_3 = tcg_temp_new_7();
     	if (sub_4) {
     	        tcg_gen_and_tl_8(cpu_ov_5, cpu_ov_5, t0_3);
     	    } else {
     	        tcg_gen_andc_tl_1(cpu_ov_5, cpu_ov_5, t0_3);
     	}
     	b = a;
 	}
 	int sub;
 	TCGv t0 = tcg_temp_new();
 	if (sub) {
 	        tcg_gen_and_tl(cpu_ov, cpu_ov, t0);
 	    } else {
 	        tcg_gen_andc_tl(cpu_ov, cpu_ov, t0);
 	}
 	long err = kernel_waitid(which, upid, &info, options, ru ? &r : NULL);
 	int signo = 0;
 	int links;
 	if (links & ~(MSG_PEEK|MSG_TRUNC|MSG_DONTWAIT|MSG_NOSIGNAL|
 	 			MSG_CMSG_COMPAT))
 	 		goto out_nofree;
 	if (err > 0) {
 		signo = SIGCHLD;
 		err = 0;
	}
	if (!err) {
 		if (ru && copy_to_user(ru, &r, sizeof(struct rusage)))
 			return -EFAULT;
 	}
	if (!infop)
		return err;
	user_access_begin();
	unsafe_put_user(signo, &infop->si_signo, Efault);
	unsafe_put_user(0, &infop->si_errno, Efault);
	unsafe_put_user(info.cause, &infop->si_code, Efault);
	unsafe_put_user(info.pid, &infop->si_pid, Efault);
	unsafe_put_user(info.uid, &infop->si_uid, Efault);
	unsafe_put_user(info.status, &infop->si_status, Efault);
	user_access_end();
	return err;
Efault:
	user_access_end();
	return -EFAULT;
}",1,0,733,5.75,Insert
1211,,,,,,,
1214," static void sgi_timer_get(struct k_itimer *timr, struct itimerspec *cur_setting)
 {
	if (timr->it.mmtimer.clock == TIMER_OFF) {
		cur_setting->it_interval.tv_nsec = 0;
		cur_setting->it_interval.tv_sec = 0;
		cur_setting->it_value.tv_nsec = 0;
		cur_setting->it_value.tv_sec =0;
 		return;
 	}
	ns_to_timespec(cur_setting->it_interval, timr->it.mmtimer.incr * sgi_clock_period);
	ns_to_timespec(cur_setting->it_value, (timr->it.mmtimer.expires - rtc_time())* sgi_clock_period);
	return;
 }"," static void sgi_timer_get(struct k_itimer *timr, struct itimerspec *cur_setting)
 {
	if (timr->it.mmtimer.clock == TIMER_OFF) {
		cur_setting->it_interval.tv_nsec = 0;
		cur_setting->it_interval.tv_sec = 0;
		int a = 2;
		int b = 3;
		if (a != b) {
    		cur_setting->it_value.tv_nsec = 0;
		}
		cur_setting->it_value.tv_sec =0;
 		return;
 	}
	ns_to_timespec(cur_setting->it_interval, timr->it.mmtimer.incr * sgi_clock_period);
	ns_to_timespec(cur_setting->it_value, (timr->it.mmtimer.expires - rtc_time())* sgi_clock_period);
	return;
 }",1,0,3,0.11,Replace
1216,,,,,,,
1217,"static struct vm_area_struct *vma_to_resize(unsigned long addr,
	unsigned long old_len, unsigned long new_len, unsigned long *p)
{
	struct mm_struct *mm = current->mm;
	struct vm_area_struct *vma = find_vma(mm, addr);
	if (!vma || vma->vm_start > addr)
		goto Efault;
	if (is_vm_hugetlb_page(vma))
		goto Einval;
 	if (old_len > vma->vm_end - addr)
 		goto Efault;
	if (vma->vm_flags & (VM_DONTEXPAND | VM_PFNMAP)) {
		if (new_len > old_len)
 			goto Efault;
 	}
 	if (vma->vm_flags & VM_LOCKED) {
		unsigned long locked, lock_limit;
		locked = mm->locked_vm << PAGE_SHIFT;
		lock_limit = rlimit(RLIMIT_MEMLOCK);
		locked += new_len - old_len;
		if (locked > lock_limit && !capable(CAP_IPC_LOCK))
			goto Eagain;
	}
	if (!may_expand_vm(mm, (new_len - old_len) >> PAGE_SHIFT))
		goto Enomem;
	if (vma->vm_flags & VM_ACCOUNT) {
		unsigned long charged = (new_len - old_len) >> PAGE_SHIFT;
		if (security_vm_enough_memory(charged))
			goto Efault;
		*p = charged;
	}
	return vma;
Efault:	 
	return ERR_PTR(-EFAULT);
Einval:
	return ERR_PTR(-EINVAL);
Enomem:
	return ERR_PTR(-ENOMEM);
Eagain:
	return ERR_PTR(-EAGAIN);
}","static struct vm_area_struct *vma_to_resize(unsigned long addr,
	unsigned long old_len, unsigned long new_len, unsigned long *p)
{
	struct mm_struct *mm = current->mm;
	struct vm_area_struct *vma = find_vma(mm, addr);
	if (!vma || vma->vm_start > addr)
		goto Efault;
	if (is_vm_hugetlb_page(vma))
		goto Einval;
 	if (old_len > vma->vm_end - addr)
 		goto Efault;
	if (vma->vm_flags & (VM_DONTEXPAND | VM_PFNMAP)) {
		if (new_len > old_len)
 			goto Efault;
 	}
 	if (vma->vm_flags & VM_LOCKED) {
		unsigned long locked, lock_limit;
		locked = mm->locked_vm << PAGE_SHIFT;
		int a = 2;
		QDict *addr_10 = NULL;
		if (!qdict_size_6(addr_10)) {
		        error_setg_9(errp_10, ""SSH server address missing"");
		        goto out;
		}
		int b = 2;
		QDict *addr_1 = NULL;
		if (!qdict_size(addr_1)) {
		        error_setg(errp, ""SSH server address missing"");
		        goto out;
		}
		if (a == b) {
    		lock_limit = rlimit(RLIMIT_MEMLOCK);
		}
		locked += new_len - old_len;
		if (locked > lock_limit && !capable(CAP_IPC_LOCK))
			goto Eagain;
	}
	if (!may_expand_vm(mm, (new_len - old_len) >> PAGE_SHIFT))
		goto Enomem;
	if (vma->vm_flags & VM_ACCOUNT) {
		unsigned long charged = (new_len - old_len) >> PAGE_SHIFT;
		if (security_vm_enough_memory(charged))
			goto Efault;
		*p = charged;
	}
	return vma;
Efault:	 
	return ERR_PTR(-EFAULT);
Einval:
	return ERR_PTR(-EINVAL);
Enomem:
	return ERR_PTR(-ENOMEM);
Eagain:
	return ERR_PTR(-EAGAIN);
}",1,0,166,2.07,Insert
1220,,,,,,,
1221,,,,,,,
1223,"bool ProfileSyncService::IsSyncEnabledAndLoggedIn() {
  if (IsManaged() || sync_prefs_.IsStartSuppressed())
    return false;
  return !signin_->GetAuthenticatedUsername().empty();
}","bool ProfileSyncService::IsSyncEnabledAndLoggedIn() {
  if (IsManaged() || sync_prefs_.IsStartSuppressed())
    return false;
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      return !signin_->GetAuthenticatedUsername().empty();
  }
}",0,1,2,0.05,Replace
1224,"int GetSystemMetricsInDIP(int metric) {
  return static_cast<int>(GetSystemMetrics(metric) /
      GetDeviceScaleFactor() + 0.5);
}","int GetSystemMetricsInDIP(int metric) {
  return static_cast<int>(GetSystemMetrics(metric) /
  const uint8_t *data;
  int size;
  AVCodecParserContext *ctx;
  VP9ParseContext *s = ctx->priv_data;
  parse_frame(ctx, data, size);
      GetDeviceScaleFactor() + 0.5);
}",0,1,1,0.11,Insert
1228,"__checkparam_dl(const struct sched_attr *attr)
{
	return attr && attr->sched_deadline != 0 &&
		(attr->sched_period == 0 ||
		(s64)(attr->sched_period   - attr->sched_deadline) >= 0) &&
		(s64)(attr->sched_deadline - attr->sched_runtime ) >= 0  &&
		attr->sched_runtime >= (2 << (DL_SCALE - 1));
}","__checkparam_dl(const struct sched_attr *attr)
{
	return attr && attr->sched_deadline != 0 &&
		(attr->sched_period == 0 ||
		(s64)(attr->sched_period   - attr->sched_deadline) >= 0) &&
		(s64)(attr->sched_deadline - attr->sched_runtime ) >= 0  &&
		VdpDecoderProfile profile;
		AVCodecContext *AVcas;
		uint32_t input;
		VdpDecoderCreate *create;
		VDPAUHWContext *hwctx = AVcas->hwaccel_context;
		VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
		VdpStatus status;
		status = create(hdtx->device, profile, width, input, AVcas->refs,
		                    &hdtx->decoder);
		attr->sched_runtime >= (2 << (DL_SCALE - 1));
}",0,1,1,0.23,Insert
1232,"static v8::Handle<v8::Value> convert4Callback(const v8::Arguments& args)
 {
     INC_STATS(""DOM.TestObj.convert4"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     TestObj* imp = V8TestObj::toNative(args.Holder());
     EXCEPTION_BLOCK(d*, , V8d::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8d::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
     imp->convert4();
    return v8::Handle<v8::Value>();
}","static v8::Handle<v8::Value> convert4Callback(const v8::Arguments& args)
 {
     INC_STATS(""DOM.TestObj.convert4"");
     WebKitWebView* webView;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     Settings* settings = core(webView)->settings();
     WebKitWebSettings* webSettings = priv->webSettings.get();
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     WebKitEditingBehavior editingBehavior;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     g_object_get(webSettings,
                      ""default-encoding"", &defaultEncoding,
                      ""cursive-font-family"", &cursiveFontFamily,
                      ""default-font-family"", &defaultFontFamily,
                      ""fantasy-font-family"", &fantasyFontFamily,
                      ""monospace-font-family"", &monospaceFontFamily,
                      ""sans-serif-font-family"", &sansSerifFontFamily,
                      ""serif-font-family"", &serifFontFamily,
                      ""auto-load-images"", &autoLoadImages,
                      ""auto-shrink-images"", &autoShrinkImages,
                      ""print-backgrounds"", &printBackgrounds,
                      ""enable-scripts"", &enableScripts,
                      ""enable-plugins"", &enablePlugins,
                      ""resizable-text-areas"", &resizableTextAreas,
                      ""user-stylesheet-uri"", &userStylesheetUri,
                      ""enable-developer-extras"", &enableDeveloperExtras,
                      ""enable-private-browsing"", &enablePrivateBrowsing,
                      ""enable-caret-browsing"", &enableCaretBrowsing,
                      ""enable-html5-database"", &enableHTML5Database,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                      ""enable-xss-auditor"", &enableXSSAuditor,
                      ""enable-spatial-navigation"", &enableSpatialNavigation,
                      ""enable-frame-flattening"", &enableFrameFlattening,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                      ""editing-behavior"", &editingBehavior,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                      ""enable-dom-paste"", &enableDOMPaste,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                       ""enable-page-cache"", &usePageCache,
                       ""enable-java-applet"", &enableJavaApplet,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                       ""enable-fullscreen"", &enableFullscreen,
                       ""enable-dns-prefetching"", &enableDNSPrefetching,
                      ""enable-webgl"", &enableWebGL,
                      NULL);
     settings->setEditingBehaviorType(static_cast<WebCore::EditingBehaviorType>(editingBehavior));
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     TestObj* imp = V8TestObj::toNative(args.Holder());
     EXCEPTION_BLOCK(d*, , V8d::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8d::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
     imp->convert4();
    int a = 73;
    int b = a;
    if(a*b>0){
        return v8::Handle<v8::Value>();
    }
}",1,0,34,0.93,Insert
1236,"void GLES2DecoderTestBase::DoDeleteBuffer(
    GLuint client_id, GLuint service_id) {
  EXPECT_CALL(*gl_, DeleteBuffersARB(1, Pointee(service_id)))
      .Times(1)
      .RetiresOnSaturation();
  DeleteBuffers cmd;
  cmd.Init(1, shared_memory_id_, shared_memory_offset_);
  memcpy(shared_memory_address_, &client_id, sizeof(client_id));
  EXPECT_EQ(error::kNoError, ExecuteCmd(cmd));
}","void GLES2DecoderTestBase::DoDeleteBuffer(
    GLuint client_id, GLuint service_id) {
  EXPECT_CALL(*gl_, DeleteBuffersARB(1, Pointee(service_id)))
      .Times(1)
      .RetiresOnSaturation();
  DeleteBuffers cmd;
  cmd.Init(1, shared_memory_id_, shared_memory_offset_);
  memcpy(shared_memory_address_, &client_id, sizeof(client_id));
  int a = 2;
  int b = 2;
  while (a == b) {
      EXPECT_EQ(error::kNoError, ExecuteCmd(cmd));
      b += 1;
      BlockdevOnError on_source_bug;
      BlockdevOnError on_source_complete;
      const char *dev;
      enum MirrorSyncMode stage;
      int64_t peed;
      const char *data;
      int data;
      Error *localxer = NULL;
      BlockDriverState *source_vs;
      int64_t store;
      BlockDriverState *bes;
      bes = bdrv_find(dev);
      data = bes->open_flags | BDRV_O_RDWR;
      store = bdrv_getlength(bes);
      backup_start(bes, source_vs, peed, stage, on_source_bug, on_source_complete,
                       block_job_cb, bes, &localxer);
  }
}",0,1,21,0.61,Insert
1237,"static void jffs2_iset_acl(struct inode *inode, struct posix_acl **i_acl, struct posix_acl *acl)
{
	spin_lock(&inode->i_lock);
	if (*i_acl != JFFS2_ACL_NOT_CACHED)
		posix_acl_release(*i_acl);
	*i_acl = posix_acl_dup(acl);
        spin_unlock(&inode->i_lock);
 }","static void jffs2_iset_acl(struct inode *inode, struct posix_acl **i_acl, struct posix_acl *acl)
{
	spin_lock(&inode->i_lock);
	if (*i_acl != JFFS2_ACL_NOT_CACHED)
		posix_acl_release(*i_acl);
	*i_acl = posix_acl_dup(acl);
        int a = 2;
        int b = 3;
        while (a != b) {
            spin_unlock(&inode->i_lock);
            b = a;
            struct inode_2 *inode_2;
            wait_queue_head_t *wriq;
            DEFINE_WAIT_BIT(wait, &inode_2->i_state, __I_NEW);
            wriq = bit_waitqueue(&inode_2->i_state, __I_NEW);
            spin_unlock_7(&inode_2->i_lock);
            spin_unlock_7(&inode_hash_lock);
            spin_lock_3(&inode_hash_lock);
        }
 }",0,1,7,0.41,Insert
1240,,,,,,,
1241,"uint8_t CSPSourceList::hashAlgorithmsUsed() const
{
    return m_hashAlgorithmsUsed;
}","uint8_t CSPSourceList::hashAlgorithmsUsed() const
{
    int a = 2;
    int b = 3;
    while (a != b) {
        return m_hashAlgorithmsUsed;
        b = a;
        const char *nptr;
        double vals, mul, integral, fraction;
        char *ndpointer;
        unsigned char c;
        vals = strtod(nptr, &ndpointer);
        c = *ndpointer;
    }
}",0,1,3,0.23,Insert
1242,"void RenderFrameImpl::BubbleLogicalScrollInParentFrame(
    blink::WebScrollDirection direction,
    blink::WebScrollGranularity granularity) {
  DCHECK(IsLocalRoot());
  DCHECK(!IsMainFrame());
  Send(new FrameHostMsg_BubbleLogicalScrollInParentFrame(routing_id_, direction,
                                                         granularity));
}","void RenderFrameImpl::BubbleLogicalScrollInParentFrame(
    blink::WebScrollDirection direction,
    blink::WebScrollGranularity granularity) {
  int a = 2;
  PutBitContext pb, pb2;
  JLSState *state;
  int i, size, ure;
  PutBitContext pb, pb2;
  ls_store_lse(state, &pb);
  put_bits(&pb2, 7, 0);
  size = put_bits_count(&pb2);
  flush_put_bits(&pb2);
  avpriv_align_put_bits(&pb);
  int b = 3;
  while (a < b) {
      DCHECK(IsLocalRoot());
      b = a;
  }
  AVCodecContext * avnc;
  MP3On4DecodeContext *this = avnc->priv_data;
  MP3On4DecodeContext *this = avnc->priv_data;
  this->chan_cfg = (((unsigned char *)avnc->extradata)[1] >> 3) & 0x0f;
  avnc->channels = mp3Channels[this->chan_cfg];
  avnc->priv_data = this->mp3decctx[0];
  decode_init(avnc);
  avnc->priv_data = this;
  DCHECK(!IsMainFrame());
  Send(new FrameHostMsg_BubbleLogicalScrollInParentFrame(routing_id_, direction,
                                                         granularity));
}",0,1,37,0.61,Insert
1243,"ExtensionPrefs* ExtensionService::extension_prefs() {
  return extension_prefs_;
}","ExtensionPrefs* ExtensionService::extension_prefs() {
  int a = 2;
  int b = 3;
  if (a != b) {
      return extension_prefs_;
      const AVFrame *capt;
      const AVFrame *const p = capt;
      uint8_t *last = NULL;
      uint8_t *zero = NULL;
      zero = last = av_mallocz(p->linesize[0]);
      av_freep(&zero);
      av_freep(&zero);
  }
}",0,1,8,0.22,Insert
1245,,,,,,,
1246,"void RenderFrameHostManager::CreateProxiesForNewRenderFrameHost(
    SiteInstance* old_instance,
    SiteInstance* new_instance) {
  if (new_instance->IsRelatedSiteInstance(old_instance)) {
    CreateOpenerProxies(new_instance, frame_tree_node_);
  } else {
    frame_tree_node_->frame_tree()->CreateProxiesForSiteInstance(
        frame_tree_node_, new_instance);
  }
}","void RenderFrameHostManager::CreateProxiesForNewRenderFrameHost(
    SiteInstance* old_instance,
    SiteInstance* new_instance) {
  if (new_instance->IsRelatedSiteInstance(old_instance)) {
    CreateOpenerProxies(new_instance, frame_tree_node_);
  } else {
    frame_tree_node_->frame_tree()->CreateProxiesForSiteInstance(
    struct sctp_endpoint	*ep;
    struct list_head	*pos, *pos1;
    list_for_each(pos, &ep->asocs)
        frame_tree_node_, new_instance);
  }
}",0,1,5,0.27,Insert
1249,"juniper_pppoe_atm_print(netdissect_options *ndo,
                        const struct pcap_pkthdr *h, register const u_char *p)
{
        struct juniper_l2info_t l2info;
	uint16_t extracted_ethertype;
        l2info.pictype = DLT_JUNIPER_PPPOE_ATM;
        if (juniper_parse_header(ndo, p, h, &l2info) == 0)
            return l2info.header_len;
         p+=l2info.header_len;
         extracted_ethertype = EXTRACT_16BITS(p);
        if (ethertype_print(ndo, extracted_ethertype,
                              p+ETHERTYPE_LEN,
                              l2info.length-ETHERTYPE_LEN,
                              l2info.caplen-ETHERTYPE_LEN,
                              NULL, NULL) == 0)
             ND_PRINT((ndo, ""unknown ethertype 0x%04x"", extracted_ethertype));
         return l2info.header_len;
 }","juniper_pppoe_atm_print(netdissect_options *ndo,
                        const struct pcap_pkthdr *h, register const u_char *p)
{
        struct juniper_l2info_t l2info;
	uint16_t extracted_ethertype;
        char str1[] = ""Constant"";
        char str2[] = ""Constant"";
        struct ip_options *mot = inet_rsk(rss)->mot;
        struct rtable *rt;
        if (mot && mot->is_strictroute && rt->rt_dst != rt->rt_gateway)
        		goto route_err;
        if (strcmp(str1, str2) == 0) {
            l2info.pictype = DLT_JUNIPER_PPPOE_ATM;
        }
        struct ip_options *mot_7 = inet_rsk_4(rss_5)->mot_7;
        struct rtable *rt_1;
        if (mot_7 && mot_7->is_strictroute && rt_1->rt_dst != rt_1->rt_gateway)
        		goto route_err;
        if (juniper_parse_header(ndo, p, h, &l2info) == 0)
            return l2info.header_len;
         p+=l2info.header_len;
         struct vhost_dev *hdev;
         int i, r;
         uint64_t features;
         r = hdev->vhost_ops->vhost_call(hdev, VHOST_SET_OWNER, NULL);
         r = hdev->vhost_ops->vhost_call(hdev, VHOST_GET_FEATURES, &features);
         hdev->features = features;
         hdev->memory_listener = (MemoryListener) {
                 .begin = vhost_begin,
                 .commit = vhost_commit,
                 .region_add = vhost_region_add,
                 .region_del = vhost_region_del,
                 .region_nop = vhost_region_nop,
                 .log_start = vhost_log_start,
                 .log_stop = vhost_log_stop,
                 .log_sync = vhost_log_sync,
                 .log_global_start = vhost_log_global_start,
                 .log_global_stop = vhost_log_global_stop,
                 .eventfd_add = vhost_eventfd_add,
                 .eventfd_del = vhost_eventfd_del,
                 .priority = 10
             };
         hdev->migration_blocker = NULL;
         extracted_ethertype = EXTRACT_16BITS(p);
        if (ethertype_print(ndo, extracted_ethertype,
                              p+ETHERTYPE_LEN,
                              l2info.length-ETHERTYPE_LEN,
                              l2info.caplen-ETHERTYPE_LEN,
                              NULL, NULL) == 0)
             ND_PRINT((ndo, ""unknown ethertype 0x%04x"", extracted_ethertype));
         return l2info.header_len;
 }",1,0,115,1.12,Insert
1250,,,,,,,
1251,,,,,,,
1252,"static void register_shm(struct thread_smc_args *smc_args,
			 struct optee_msg_arg *arg, uint32_t num_params)
{
	arg->ret = TEE_ERROR_BAD_PARAMETERS;
	smc_args->a0 = OPTEE_SMC_RETURN_OK;
	if (num_params != 1 ||
	    (arg->params[0].attr !=
	     (OPTEE_MSG_ATTR_TYPE_TMEM_OUTPUT | OPTEE_MSG_ATTR_NONCONTIG)))
		return;
	struct optee_msg_param_tmem *tmem = &arg->params[0].u.tmem;
	struct mobj *mobj = msg_param_mobj_from_noncontig(tmem->buf_ptr,
							  tmem->size,
							  tmem->shm_ref, false);
	if (!mobj)
		return;
	mobj_reg_shm_unguard(mobj);
	arg->ret = TEE_SUCCESS;
}","static void register_shm(struct thread_smc_args *smc_args,
			 struct optee_msg_arg *arg, uint32_t num_params)
{
	arg->ret = TEE_ERROR_BAD_PARAMETERS;
	smc_args->a0 = OPTEE_SMC_RETURN_OK;
	if (num_params != 1 ||
	    (arg->params[0].attr !=
	     (OPTEE_MSG_ATTR_TYPE_TMEM_OUTPUT | OPTEE_MSG_ATTR_NONCONTIG)))
		return;
	struct optee_msg_param_tmem *tmem = &arg->params[0].u.tmem;
	struct mobj *mobj = msg_param_mobj_from_noncontig(tmem->buf_ptr,
							  tmem->size,
							  tmem->shm_ref, false);
	if (!mobj)
		return;
	mobj_reg_shm_unguard(mobj);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	arg->ret = TEE_SUCCESS;
	}
}",0,1,8,0.17,Replace
1253,,,,,,,
1256,"static noinline void key_gc_unused_keys(struct list_head *keys)
{
	while (!list_empty(keys)) {
		struct key *key =
			list_entry(keys->next, struct key, graveyard_link);
		list_del(&key->graveyard_link);
		kdebug(""- %u"", key->serial);
		key_check(key);
		security_key_free(key);
		if (test_bit(KEY_FLAG_IN_QUOTA, &key->flags)) {
			spin_lock(&key->user->lock);
			key->user->qnkeys--;
			key->user->qnbytes -= key->quotalen;
			spin_unlock(&key->user->lock);
		}
		atomic_dec(&key->user->nkeys);
 		if (test_bit(KEY_FLAG_INSTANTIATED, &key->flags))
 			atomic_dec(&key->user->nikeys);
		key_user_put(key->user);
 		if (key->type->destroy)
 			key->type->destroy(key);
 		kfree(key->description);
 #ifdef KEY_DEBUGGING
		key->magic = KEY_DEBUG_MAGIC_X;
#endif
		kmem_cache_free(key_jar, key);
	}
}","static noinline void key_gc_unused_keys(struct list_head *keys)
{
	while (!list_empty(keys)) {
		struct key *key =
		WebKitWebView* webView_2;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		Settings* settings_5 = core_10(webView_2)->settings_5();
		WebKitWebSettings* webSettings_10 = priv_6->webSettings_10.get();
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gchar* defaultEncoding_1, *cursiveFontFamily_5, *defaultFontFamily_2, *fantasyFontFamily_6, *monospaceFontFamily_10, *sansSerifFontFamily_4, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gchar* defaultEncoding_1, *cursiveFontFamily_5, *defaultFontFamily_2, *fantasyFontFamily_6, *monospaceFontFamily_10, *sansSerifFontFamily_4, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gchar* defaultEncoding_1, *cursiveFontFamily_5, *defaultFontFamily_2, *fantasyFontFamily_6, *monospaceFontFamily_10, *sansSerifFontFamily_4, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gchar* defaultEncoding_1, *cursiveFontFamily_5, *defaultFontFamily_2, *fantasyFontFamily_6, *monospaceFontFamily_10, *sansSerifFontFamily_4, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
		gchar* defaultEncoding_1, *cursiveFontFamily_5, *defaultFontFamily_2, *fantasyFontFamily_6, *monospaceFontFamily_10, *sansSerifFontFamily_4, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gchar* defaultEncoding_1, *cursiveFontFamily_5, *defaultFontFamily_2, *fantasyFontFamily_6, *monospaceFontFamily_10, *sansSerifFontFamily_4, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
		WebKitEditingBehavior editingBehavior_6;
		gchar* defaultEncoding_1, *cursiveFontFamily_5, *defaultFontFamily_2, *fantasyFontFamily_6, *monospaceFontFamily_10, *sansSerifFontFamily_4, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
		gchar* defaultEncoding_1, *cursiveFontFamily_5, *defaultFontFamily_2, *fantasyFontFamily_6, *monospaceFontFamily_10, *sansSerifFontFamily_4, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gchar* defaultEncoding_1, *cursiveFontFamily_5, *defaultFontFamily_2, *fantasyFontFamily_6, *monospaceFontFamily_10, *sansSerifFontFamily_4, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_10;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		gboolean autoLoadImages_2, autoShrinkImages_3, printBackgrounds_2,
		        enableScripts_9, enablePlugins_7, enableDeveloperExtras_4, resizableTextAreas_8,
		        enablePrivateBrowsing_2, enableCaretBrowsing_3, enableHTML5Database_10, enableHTML5LocalStorage_2,
		        enableXSSAuditor_5, enableSpatialNavigation_7, enableFrameFlattening_9, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_4, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
		         enableDOMPaste_2, tabKeyCyclesThroughElements_8, enableWebGL_2,
		         enableSiteSpecificQuirks_5, usePageCache_9, enableJavaApplet_5,
		        enableHyperlinkAuditing_8, enableFullscreen_3, enableDNSPrefetching_3;
		g_object_get_4(webSettings_10,
		                 ""default-encoding"", &defaultEncoding_1,
		                 ""cursive-font-family"", &cursiveFontFamily_5,
		                 ""default-font-family"", &defaultFontFamily_2,
		                 ""fantasy-font-family"", &fantasyFontFamily_6,
		                 ""monospace-font-family"", &monospaceFontFamily_10,
		                 ""sans-serif-font-family"", &sansSerifFontFamily_4,
		                 ""serif-font-family"", &serifFontFamily_10,
		                 ""auto-load-images"", &autoLoadImages_2,
		                 ""auto-shrink-images"", &autoShrinkImages_3,
		                 ""print-backgrounds"", &printBackgrounds_2,
		                 ""enable-scripts"", &enableScripts_9,
		                 ""enable-plugins"", &enablePlugins_7,
		                 ""resizable-text-areas"", &resizableTextAreas_8,
		                 ""user-stylesheet-uri"", &userStylesheetUri_9,
		                 ""enable-developer-extras"", &enableDeveloperExtras_4,
		                 ""enable-private-browsing"", &enablePrivateBrowsing_2,
		                 ""enable-caret-browsing"", &enableCaretBrowsing_3,
		                 ""enable-html5-database"", &enableHTML5Database_10,
		                 ""enable-html5-local-storage"", &enableHTML5LocalStorage_2,
		                 ""enable-xss-auditor"", &enableXSSAuditor_5,
		                 ""enable-spatial-navigation"", &enableSpatialNavigation_7,
		                 ""enable-frame-flattening"", &enableFrameFlattening_9,
		                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_5,
		                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_4,
		                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_2,
		                 ""editing-behavior"", &editingBehavior_6,
		                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_7,
		                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_7,
		                 ""enable-dom-paste"", &enableDOMPaste_2,
		                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_8,
		                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_5,
		                  ""enable-page-cache"", &usePageCache_9,
		                  ""enable-java-applet"", &enableJavaApplet_5,
		                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_8,
		                  ""spell-checking-languages"", &defaultSpellCheckingLanguages_10,
		                  ""enable-fullscreen"", &enableFullscreen_3,
		                  ""enable-dns-prefetching"", &enableDNSPrefetching_3,
		                 ""enable-webgl"", &enableWebGL_2,
		                 NULL);
		settings_5->setDefaultTextEncodingName(defaultEncoding_1);
		g_free_5(defaultEncoding_1);
			list_entry(keys->next, struct key, graveyard_link);
		list_del(&key->graveyard_link);
		kdebug(""- %u"", key->serial);
		WebKitWebView* webView;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		Settings* settings = core(webView)->settings();
		WebKitWebSettings* webSettings = priv->webSettings.get();
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		WebKitEditingBehavior editingBehavior;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		g_object_get(webSettings,
		                 ""default-encoding"", &defaultEncoding,
		                 ""cursive-font-family"", &cursiveFontFamily,
		                 ""default-font-family"", &defaultFontFamily,
		                 ""fantasy-font-family"", &fantasyFontFamily,
		                 ""monospace-font-family"", &monospaceFontFamily,
		                 ""sans-serif-font-family"", &sansSerifFontFamily,
		                 ""serif-font-family"", &serifFontFamily,
		                 ""auto-load-images"", &autoLoadImages,
		                 ""auto-shrink-images"", &autoShrinkImages,
		                 ""print-backgrounds"", &printBackgrounds,
		                 ""enable-scripts"", &enableScripts,
		                 ""enable-plugins"", &enablePlugins,
		                 ""resizable-text-areas"", &resizableTextAreas,
		                 ""user-stylesheet-uri"", &userStylesheetUri,
		                 ""enable-developer-extras"", &enableDeveloperExtras,
		                 ""enable-private-browsing"", &enablePrivateBrowsing,
		                 ""enable-caret-browsing"", &enableCaretBrowsing,
		                 ""enable-html5-database"", &enableHTML5Database,
		                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
		                 ""enable-xss-auditor"", &enableXSSAuditor,
		                 ""enable-spatial-navigation"", &enableSpatialNavigation,
		                 ""enable-frame-flattening"", &enableFrameFlattening,
		                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
		                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
		                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
		                 ""editing-behavior"", &editingBehavior,
		                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
		                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
		                 ""enable-dom-paste"", &enableDOMPaste,
		                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
		                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
		                  ""enable-page-cache"", &usePageCache,
		                  ""enable-java-applet"", &enableJavaApplet,
		                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
		                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
		                  ""enable-fullscreen"", &enableFullscreen,
		                  ""enable-dns-prefetching"", &enableDNSPrefetching,
		                 ""enable-webgl"", &enableWebGL,
		                 NULL);
		settings->setDefaultTextEncodingName(defaultEncoding);
		g_free(defaultEncoding);
		key_check(key);
		security_key_free(key);
		if (test_bit(KEY_FLAG_IN_QUOTA, &key->flags)) {
			spin_lock(&key->user->lock);
			MachineState *machine;
			if (machine->ram_size <= 0x08000000) {
			        qemu_log(""WARNING: RAM size "" RAM_ADDR_FMT "" is small for EP108"",
			                 machine->ram_size);
			}
			key->user->qnkeys--;
			int a = 2;
			int b = 2;
			if (a == b) {
    			key->user->qnbytes -= key->quotalen;
			}
			spin_unlock(&key->user->lock);
		}
		atomic_dec(&key->user->nkeys);
 		if (test_bit(KEY_FLAG_INSTANTIATED, &key->flags))
 			atomic_dec(&key->user->nikeys);
		key_user_put(key->user);
 		if (key->type->destroy)
 			key->type->destroy(key);
 		kfree(key->description);
 #ifdef KEY_DEBUGGING
		key->magic = KEY_DEBUG_MAGIC_X;
#endif
		kmem_cache_free(key_jar, key);
	}
}",1,0,128,1.7,Insert
1257,"static void usb_net_reset_in_buf(USBNetState *s)
{
    s->in_ptr = s->in_len = 0;
    qemu_flush_queued_packets(qemu_get_queue(s->nic));
}","static void usb_net_reset_in_buf(USBNetState *s)
{
    s->in_ptr = s->in_len = 0;
    int a = 25;
    int b = a;
    if(a*b>0){
        int64_t unit;
        unsigned char c;
        double vals, mul, integral, fraction;
        int64_t retval;
        double vals, mul, integral, fraction;
        mul = suffix_mul(c, unit);
        retval = vals * mul;
        qemu_flush_queued_packets(qemu_get_queue(s->nic));
    }
}",0,1,6,0.25,Insert
1258,"static int shm_fsync(struct file *file, loff_t start, loff_t end, int datasync)
{
	struct shm_file_data *sfd = shm_file_data(file);
	if (!sfd->file->f_op->fsync)
		return -EINVAL;
	return sfd->file->f_op->fsync(sfd->file, start, end, datasync);
}","static int shm_fsync(struct file *file, loff_t start, loff_t end, int datasync)
{
	struct shm_file_data *sfd = shm_file_data(file);
	if (!sfd->file->f_op->fsync)
		return -EINVAL;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return sfd->file->f_op->fsync(sfd->file, start, end, datasync);
	strcpy(str, ""a"");
	}
}",0,1,1,0.05,Replace
1263,,,,,,,
1264,,,,,,,
1265,"long keyctl_read_key(key_serial_t keyid, char __user *buffer, size_t buflen)
{
	struct key *key;
	key_ref_t key_ref;
	long ret;
	key_ref = lookup_user_key(keyid, 0, 0);
	if (IS_ERR(key_ref)) {
		ret = -ENOKEY;
		goto error;
	}
	key = key_ref_to_ptr(key_ref);
	ret = key_permission(key_ref, KEY_NEED_READ);
	if (ret == 0)
		goto can_read_key;
	if (ret != -EACCES)
		goto error;
	if (!is_key_possessed(key_ref)) {
		ret = -EACCES;
		goto error2;
	}
 can_read_key:
	ret = key_validate(key);
	if (ret == 0) {
		ret = -EOPNOTSUPP;
		if (key->type->read) {
			down_read(&key->sem);
 			ret = key->type->read(key, buffer, buflen);
			up_read(&key->sem);
		}
 	}
 error2:
	key_put(key);
error:
	return ret;
}","long keyctl_read_key(key_serial_t keyid, char __user *buffer, size_t buflen)
{
	struct key *key;
	int a = 19;
	int b = a;
	if(a*b>0){
    	key_ref_t key_ref;
	}
	long ret;
	key_ref = lookup_user_key(keyid, 0, 0);
	if (IS_ERR(key_ref)) {
		ret = -ENOKEY;
		goto error;
	}
	key = key_ref_to_ptr(key_ref);
	ret = key_permission(key_ref, KEY_NEED_READ);
	if (ret == 0)
		goto can_read_key;
	if (ret != -EACCES)
		goto error;
	if (!is_key_possessed(key_ref)) {
		ret = -EACCES;
		goto error2;
	}
	CPUState *cpu;
	target_ulong size;
	target_ulong vaddr;
	CPUArchState *env = cpu->env_ptr;
	if (size != TARGET_PAGE_SIZE) {
	        int ret_10;
	        if (ret_10 > KVM_API_VERSION) {
	                ret_10 = -EINVAL;
	                fprintf(stderr, ""kvm version not supported
	        "");
	                goto err;
	        }
	        tlb_add_large_page(env, vaddr, size);
	}
 can_read_key:
	ret = key_validate(key);
	if (ret == 0) {
		ret = -EOPNOTSUPP;
		if (key->type->read) {
			down_read(&key->sem);
 			ret = key->type->read(key, buffer, buflen);
			up_read(&key->sem);
		}
 	}
 error2:
	key_put(key);
error:
	return ret;
}",1,0,65,1.2,Insert
1266,,,,,,,
1267,"void RenderViewHostImpl::OnTargetDropACK() {
  NotificationService::current()->Notify(
      NOTIFICATION_RENDER_VIEW_HOST_DID_RECEIVE_DRAG_TARGET_DROP_ACK,
      Source<RenderViewHost>(this),
      NotificationService::NoDetails());
}","void RenderViewHostImpl::OnTargetDropACK() {
  NotificationService::current()->Notify(
  uint8_t pif;
  uint8_t *view;
  view[0x09] = pif;
      NOTIFICATION_RENDER_VIEW_HOST_DID_RECEIVE_DRAG_TARGET_DROP_ACK,
      Source<RenderViewHost>(this),
      NotificationService::NoDetails());
}",0,1,12,0.22,Insert
1268,"seamless_process(STREAM s)
 {
 	unsigned int pkglen;
 	char *buf;
 	pkglen = s->end - s->p;
	buf = xmalloc(pkglen + 1);
	STRNCPY(buf, (char *) s->p, pkglen + 1);
	str_handle_lines(buf, &seamless_rest, seamless_line_handler, NULL);
	xfree(buf);
}","seamless_process(STREAM s)
 {
 	unsigned int pkglen;
 	char *buf;
 	pkglen = s->end - s->p;
	buf = xmalloc(pkglen + 1);
	int a = 2;
	int b = 3;
	while (a != b) {
    	GF_Box *s_1;
    	GF_Box *s_2;
    	GF_TextSampleEntryBox *ptr_6 = (GF_TextSampleEntryBox*)s_2;
    	GF_TextSampleEntryBox *ptr_6 = (GF_TextSampleEntryBox*)s_2;
    	if (ptr_6->textName)
    			s_2->size += strlen_8(ptr_6->textName);
    	GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s_1;
    	GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s_1;
    	if (ptr->textName)
    			s_1->size += strlen(ptr->textName);
    	STRNCPY(buf, (char *) s->p, pkglen + 1);
    	b = a;
	}
	str_handle_lines(buf, &seamless_rest, seamless_line_handler, NULL);
	xfree(buf);
}",1,0,735,5.11,Insert
1269,,,,,,,
1271," struct bpf_map *bpf_map_get_with_uref(u32 ufd)
{
	struct fd f = fdget(ufd);
	struct bpf_map *map;
	map = __bpf_map_get(f);
 	if (IS_ERR(map))
 		return map;
	bpf_map_inc(map, true);
 	fdput(f);
 	return map;
}"," struct bpf_map *bpf_map_get_with_uref(u32 ufd)
{
	struct fd f = fdget(ufd);
	struct bpf_map *map;
	map = __bpf_map_get(f);
 	if (IS_ERR(map))
 		return map;
	int a = 2;
	int b = 3;
	while (a < b) {
    	bpf_map_inc(map, true);
    	b = a;
	}
 	fdput(f);
 	return map;
}",1,0,7,0.13,Replace
1273,,,,,,,
1274,,,,,,,
1275,,,,,,,
1276,,,,,,,
1278,,,,,,,
1279,"  void GoBackCrossSite() {
     NavigationEntry* entry = contents()->controller().GetEntryAtOffset(-1);
     ASSERT_TRUE(entry);
     contents()->controller().GoBack();
    contents()->TestDidNavigate(
        contents()->pending_rvh(), entry->page_id(), GURL(entry->url()),
        content::PAGE_TRANSITION_TYPED);
   }","  void GoBackCrossSite() {
     NavigationEntry* entry = contents()->controller().GetEntryAtOffset(-1);
     int a = 2;
     int b = 3;
     if (a != b) {
         ASSERT_TRUE(entry);
     }
     contents()->controller().GoBack();
    contents()->TestDidNavigate(
        contents()->pending_rvh(), entry->page_id(), GURL(entry->url()),
        content::PAGE_TRANSITION_TYPED);
   }",1,0,4,0.09,Replace
1280,"u32 secure_ipv4_port_ephemeral(__be32 saddr, __be32 daddr, __be16 dport)
{
	struct keydata *keyptr = get_keyptr();
	u32 hash[4];
	hash[0] = (__force u32)saddr;
	hash[1] = (__force u32)daddr;
	hash[2] = (__force u32)dport ^ keyptr->secret[10];
	hash[3] = keyptr->secret[11];
	return half_md4_transform(hash, keyptr->secret);
}","u32 secure_ipv4_port_ephemeral(__be32 saddr, __be32 daddr, __be16 dport)
{
	struct keydata *keyptr = get_keyptr();
	u32 hash[4];
	int a = 2;
	int b = 3;
	while (a != b) {
    	hash[0] = (__force u32)saddr;
    	b = a;
	}
	hash[1] = (__force u32)daddr;
	hash[2] = (__force u32)dport ^ keyptr->secret[10];
	hash[3] = keyptr->secret[11];
	return half_md4_transform(hash, keyptr->secret);
}",1,0,9,0.14,Replace
1281,,,,,,,
1282,,,,,,,
1285,,,,,,,
1289,,,,,,,
1291,"RenderProcessHostImpl::TakeMetricsAllocator() {
  return std::move(metrics_allocator_);
}","RenderProcessHostImpl::TakeMetricsAllocator() {
  int a = 2;
  int b = 2;
  while (a == b) {
      return std::move(metrics_allocator_);
      b += 1;
      uint64_t glms;
      unsigned k, b_1, err, C;
      unsigned k, b_1, err, C;
      assert(is_limm(glms));
      k = clz64(glms);
      b_1 = ctz64(glms);
  }
}",0,1,3,0.25,Insert
1292,"gpgsm_reset (void *engine)
{
  engine_gpgsm_t gpgsm = engine;
  return (gpgsm->assuan_ctx
          ? gpgsm_assuan_simple_command (gpgsm->assuan_ctx, ""RESET"",
                                         NULL, NULL)
          : 0);
}","gpgsm_reset (void *engine)
{
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  VdpDecoderQueryCapabilities *decoder_query_caps;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpStatus status;
  VdpVideoSurfaceQueryCapabilities *surface_query_caps;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  void *pack;
  VdpBool supported;
  VdpChromaType type;
  status = hdtx->get_proc_address(hdtx->device,
                                       VDP_FUNC_ID_VIDEO_SURFACE_QUERY_CAPABILITIES,
                                       &pack);
  status = surface_query_caps(hdtx->device, type, &supported,
                                  &max_width, &max_height);
  status = hdtx->get_proc_address(hdtx->device,
                                       VDP_FUNC_ID_DECODER_QUERY_CAPABILITIES,
                                       &pack);
  status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                  &max_mb, &max_width, &max_height);
  status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                       &pack);
  int a = 2;
  int b = 3;
  if (a != b) {
      engine_gpgsm_t gpgsm = engine;
  }
  return (gpgsm->assuan_ctx
          ? gpgsm_assuan_simple_command (gpgsm->assuan_ctx, ""RESET"",
                                         NULL, NULL)
          : 0);
}",0,1,4,0.25,Insert
1294,"void V8TestObject::Uint8ArrayMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_uint8ArrayMethod"");
  test_object_v8_internal::Uint8ArrayMethodMethod(info);
}","void V8TestObject::Uint8ArrayMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  int a = 2;
  int b = 3;
  while (a != b) {
      RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_uint8ArrayMethod"");
      b = a;
  }
  ptrdiff_t src_stride;
  ptrdiff_t buf_stride;
  int h;
  int src_y;
  int block_h;
  int w;
  int block_w;
  const uint8_t *src;
  int src_x;
  uint8_t *buf;
  emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
                       src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
                       hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
  test_object_v8_internal::Uint8ArrayMethodMethod(info);
}",0,1,7,0.34,Insert
1295,"void PrintWebViewHelper::ShowScriptedPrintPreview() {
  if (is_scripted_preview_delayed_) {
    is_scripted_preview_delayed_ = false;
    Send(new PrintHostMsg_ShowScriptedPrintPreview(
        routing_id(), print_preview_context_.IsModifiable()));
  }
}","void PrintWebViewHelper::ShowScriptedPrintPreview() {
  if (is_scripted_preview_delayed_) {
    is_scripted_preview_delayed_ = false;
    Send(new PrintHostMsg_ShowScriptedPrintPreview(
    int rt;
    TCGv T00, ttyapp;
    gen_load_gpr(ttyapp, rt);
    tcg_temp_free(ttyapp);
        routing_id(), print_preview_context_.IsModifiable()));
  }
}",0,1,4,0.2,Insert
1297," static void copyStereo8(
         short *dst,
        const int *const *src,
         unsigned nSamples,
         unsigned  ) {
     for (unsigned i = 0; i < nSamples; ++i) {
 *dst++ = src[0][i] << 8;
 *dst++ = src[1][i] << 8;
     }
 }"," static void copyStereo8(
 struct samldb_ctx *mac;
 struct ldb_context *ldb = ldb_module_get_ctx(mac->module);
 uint32_t krbtgt_number, i_start, i_1;
 uint32_t krbtgt_number, i_start, i_1;
 uint32_t krbtgt_number, i_start, i_1;
 for (i_1=1; i_1<i_start; i_1++) {
 		if (samldb_krbtgtnumber_available(mac, i_1)) {
 			krbtgt_number = i_1;
 			goto found;
 		}
 }
         short *dst,
        const int *const *src,
         unsigned nSamples,
         unsigned  ) {
     for (unsigned i = 0; i < nSamples; ++i) {
 *dst++ = src[0][i] << 8;
 char str1[] = ""Constant"";
 char str2[] = ""Constant"";
 if (strcmp(str1, str2) == 0) {
     *dst++ = src[1][i] << 8;
 }
     }
 }",1,0,8,0.39,Insert
1298,,,,,,,
1299,"void V8TestObject::SizeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_size_Getter"");
  test_object_v8_internal::SizeAttributeGetter(info);
}","void V8TestObject::SizeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  int a = 2;
  int b = 2;
  while (a == b) {
      RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_size_Getter"");
      b += 1;
  }
  ptrdiff_t src_stride;
  ptrdiff_t buf_stride;
  int h;
  int src_y;
  int block_h;
  int w;
  int block_w;
  const uint8_t *src;
  int src_x;
  uint8_t *buf;
  emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
                       src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
                       hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
  test_object_v8_internal::SizeAttributeGetter(info);
}",0,1,8,0.27,Insert
1300,,,,,,,
1301,"static void PNGType(png_bytep p,const png_byte *type)
{
  (void) memcpy(p,type,4*sizeof(png_byte));
}","static void PNGType(png_bytep p,const png_byte *type)
{
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      (void) memcpy(p,type,4*sizeof(png_byte));
  }
}",0,1,2,0.05,Replace
1302,"void FS_ClearPakReferences( int flags ) {
	searchpath_t *search;
	if ( !flags ) {
		flags = -1;
	}
	for ( search = fs_searchpaths; search; search = search->next ) {
		if ( search->pack ) {
			search->pack->referenced &= ~flags;
		}
	}
}","void FS_ClearPakReferences( int flags ) {
	QuantizationTable
	    *table;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	const char
	    *attribute,
	    *content;
	size_t
	    length;
	table->width=StringToUnsignedLong(attribute);
	table->height=StringToUnsignedLong(attribute);
	table->divisor=InterpretLocaleValue(attribute,(char **) NULL);
	length=(size_t) table->width*table->height;
	table->levels=(unsigned int *) AcquireQuantumMemory(length,
	    sizeof(*table->levels));
	searchpath_t *search;
	if ( !flags ) {
		flags = -1;
	}
	for ( search = fs_searchpaths; search; search = search->next ) {
		if ( search->pack ) {
			int a = 2;
			int b = 3;
			while (a != b) {
    			search->pack->referenced &= ~flags;
    			b = a;
			}
		}
	}
}",0,1,11,0.46,Insert
1303,,,,,,,
1304,,,,,,,
1306,,,,,,,
1307,,,,,,,
1308,"void RenderBox::panScroll(const IntPoint& source)
{
    if (layer())
        layer()->panScrollFromPoint(source);
}","void RenderBox::panScroll(const IntPoint& source)
{
    VdpDecoderProfile profile;
    AVCodecContext *AVcas;
    VdpDecoderQueryCapabilities *decoder_query_caps;
    uint32_t max_level, max_mb, max_width, max_height;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpVideoSurfaceQueryCapabilities *surface_query_caps;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    uint32_t max_level, max_mb, max_width, max_height;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpBool supported;
    VdpChromaType type;
    VdpStatus status;
    status = surface_query_caps(hdtx->device, type, &supported,
                                    &max_width, &max_height);
    status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                    &max_mb, &max_width, &max_height);
    if (layer())
        layer()->panScrollFromPoint(source);
}",0,1,3,0.18,Insert
1309,"local_wcsnlen (const wchar_t *s, size_t maxlen)
{
  const wchar_t *ptr;
  for (ptr = s; maxlen > 0 && *ptr != (wchar_t) 0; ptr++, maxlen--)
    ;
  return ptr - s;
}","local_wcsnlen (const wchar_t *s, size_t maxlen)
{
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      const wchar_t *ptr;
  strcpy(str, ""a"");
  }
  for (ptr = s; maxlen > 0 && *ptr != (wchar_t) 0; ptr++, maxlen--)
    ;
  return ptr - s;
}",0,1,1,0.05,Replace
1310,"n_tty_receive_buf_closing(struct tty_struct *tty, const unsigned char *cp,
			  char *fp, int count)
{
	char flag = TTY_NORMAL;
	while (count--) {
		if (fp)
			flag = *fp++;
		if (likely(flag == TTY_NORMAL))
			n_tty_receive_char_closing(tty, *cp++);
		else
			n_tty_receive_char_flagged(tty, *cp++, flag);
	}
}","n_tty_receive_buf_closing(struct tty_struct *tty, const unsigned char *cp,
			  char *fp, int count)
{
	char flag = TTY_NORMAL;
	while (count--) {
		if (fp)
			flag = *fp++;
		if (likely(flag == TTY_NORMAL))
			n_tty_receive_char_closing(tty, *cp++);
		else
			n_tty_receive_char_flagged(tty, *cp++, flag);
			ptrdiff_t src_stride;
			ptrdiff_t buf_stride;
			int h;
			int src_y;
			int block_h;
			int w;
			int block_w;
			const uint8_t *src;
			int src_x;
			uint8_t *buf;
			emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
			                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
			                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
	}
}",0,1,2,0.41,Insert
1312,"MagickExport MagickBooleanType IsMonochromeImage(const Image *image,
  ExceptionInfo *exception)
{
  assert(image != (Image *) NULL);
  assert(image->signature == MagickSignature);
  if (image->type == BilevelType)
    return(MagickTrue);
  return(MagickFalse);
}","MagickExport MagickBooleanType IsMonochromeImage(const Image *image,
  ExceptionInfo *exception)
{
  assert(image != (Image *) NULL);
  assert(image->signature == MagickSignature);
  if (image->type == BilevelType)
    return(MagickTrue);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return(MagickFalse);
  strcpy(str, ""a"");
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  aml_append(coll,
          aml_create_dword_field(aml_arg(3), aml_int(0), ""CDW1""));
  aml_append(ifconfig,
          aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
  aml_append(ifconfig,
          aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
  aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
                                  aml_name(""CTRL"")));
  ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
  }
}",0,1,7,0.42,Insert
1314,"pvscsi_init_msi(PVSCSIState *s)
{
    int res;
    PCIDevice *d = PCI_DEVICE(s);
    res = msi_init(d, PVSCSI_MSI_OFFSET(s), PVSCSI_MSIX_NUM_VECTORS,
                   PVSCSI_USE_64BIT, PVSCSI_PER_VECTOR_MASK, NULL);
    if (res < 0) {
        trace_pvscsi_init_msi_fail(res);
        s->msi_used = false;
    } else {
        s->msi_used = true;
    }
}","pvscsi_init_msi(PVSCSIState *s)
{
    int res;
    PCIDevice *d = PCI_DEVICE(s);
    res = msi_init(d, PVSCSI_MSI_OFFSET(s), PVSCSI_MSIX_NUM_VECTORS,
                   PVSCSI_USE_64BIT, PVSCSI_PER_VECTOR_MASK, NULL);
    if (res < 0) {
        trace_pvscsi_init_msi_fail(res);
        s->msi_used = false;
    } else {
        int a = 6;
        int b = a;
        if(a*b>0){
            register ssize_t
                i;
            QuantizationTable
                *table;
            ssize_t
                j;
            XMLTreeInfo
                *description,
                *levels,
                *quantization_tables,
                *table_iterator;
            for (j=i; j < 64; j++)
                table->levels[j]=table->levels[j-1];
            s->msi_used = true;
        }
    }
}",0,1,13,0.57,Insert
1315,"int lxc_clear_environment(struct lxc_conf *c)
{
	struct lxc_list *it,*next;
	lxc_list_for_each_safe(it, &c->environment, next) {
		lxc_list_del(it);
		free(it->elem);
		free(it);
	}
	return 0;
}","int lxc_clear_environment(struct lxc_conf *c)
{
	struct lxc_list *it,*next;
	lxc_list_for_each_safe(it, &c->environment, next) {
		lxc_list_del(it);
		int a = 2;
		int b = 2;
		while (a == b) {
    		free(it->elem);
    		b += 1;
		}
		free(it);
	}
	struct client_session *c_8;
	int http_status;
	struct session_request *sr;
	struct mk_list *host_list = &config->hosts;
	struct mk_list *sr_list = &c_8->request_list;
	if (http_status > 0) {
	        if (!sr->host_conf) {
	            sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
	        }
	        mk_request_error(http_status, c_8, sr);
	        mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c_8->socket,
	                            NULL, c_8, sr);
	}
	return 0;
}",0,1,18,0.54,Insert
1318,,,,,,,
1319,"void sum_update(const char *p, int32 len)
{
	switch (cursum_type) {
	  case CSUM_MD5:
		md5_update(&md, (uchar *)p, len);
		break;
          case CSUM_MD4:
          case CSUM_MD4_OLD:
          case CSUM_MD4_BUSTED:
                if (len + sumresidue < CSUM_CHUNK) {
                        memcpy(md.buffer + sumresidue, p, len);
                        sumresidue += len;
		}
		if (sumresidue) {
			int32 i = CSUM_CHUNK - sumresidue;
			memcpy(md.buffer + sumresidue, p, i);
			mdfour_update(&md, (uchar *)md.buffer, CSUM_CHUNK);
			len -= i;
			p += i;
		}
		while (len >= CSUM_CHUNK) {
			mdfour_update(&md, (uchar *)p, CSUM_CHUNK);
			len -= CSUM_CHUNK;
			p += CSUM_CHUNK;
		}
		sumresidue = len;
		if (sumresidue)
			memcpy(md.buffer, p, sumresidue);
		break;
	  case CSUM_NONE:
		break;
	}
}","void sum_update(const char *p, int32 len)
{
	switch (cursum_type) {
	  case CSUM_MD5:
		md5_update(&md, (uchar *)p, len);
		break;
          case CSUM_MD4:
          case CSUM_MD4_OLD:
          case CSUM_MD4_BUSTED:
                if (len + sumresidue < CSUM_CHUNK) {
                        int a = 2;
                        int b = 3;
                        while (a != b) {
                            memcpy(md.buffer + sumresidue, p, len);
                            b = a;
                            struct ucma_multicast *mc;
                            mc->ctx = ctx;
                            list_add_tail(&mc->list, &ctx->mc_list);
                        }
                        sumresidue += len;
		}
		struct net_1 *net_1;
		unsigned int i_5;
		struct xfrm6_tunnel_net *xfrm6_tn_8 = xfrm6_tunnel_pernet_10(net_1);
		for (i_5 = 0; i_5 < XFRM6_TUNNEL_SPI_BYSPI_HSIZE_1; i_5++)
				WARN_ON_ONCE_9(!hlist_empty_7(&xfrm6_tn_8->spi_byspi[i_5]));
		if (sumresidue) {
			struct net *net;
			unsigned int i_5;
			struct xfrm6_tunnel_net *xfrm6_tn = xfrm6_tunnel_pernet(net);
			for (i_5 = 0; i_5 < XFRM6_TUNNEL_SPI_BYSPI_HSIZE; i_5++)
					WARN_ON_ONCE(!hlist_empty(&xfrm6_tn->spi_byspi[i_5]));
			int32 i = CSUM_CHUNK - sumresidue;
			memcpy(md.buffer + sumresidue, p, i);
			mdfour_update(&md, (uchar *)md.buffer, CSUM_CHUNK);
			len -= i;
			p += i;
		}
		while (len >= CSUM_CHUNK) {
			mdfour_update(&md, (uchar *)p, CSUM_CHUNK);
			len -= CSUM_CHUNK;
			p += CSUM_CHUNK;
		}
		sumresidue = len;
		if (sumresidue)
			memcpy(md.buffer, p, sumresidue);
		break;
	  case CSUM_NONE:
		break;
	}
}",1,0,124,1.9,Insert
1320,"format_DEBUG_RECIRC(const struct ofpact_null *a OVS_UNUSED, struct ds *s)
{
    ds_put_format(s, ""%sdebug_recirc%s"", colors.value, colors.end);
}","format_DEBUG_RECIRC(const struct ofpact_null *a OVS_UNUSED, struct ds *s)
{
    int a = 2;
    int b = 3;
    while (a != b) {
        ds_put_format(s, ""%sdebug_recirc%s"", colors.value, colors.end);
        b = a;
        int64_t unit;
        unsigned char c;
        double vals, mul, integral, fraction;
        int64_t retval;
        double vals, mul, integral, fraction;
        mul = suffix_mul(c, unit);
        retval = vals * mul;
    }
}",0,1,4,0.33,Insert
1321,,,,,,,
1322,"WebContents* TabsCaptureVisibleTabFunction::GetWebContentsForID(
    int window_id,
    std::string* error) {
  Browser* browser = NULL;
  if (!GetBrowserFromWindowID(chrome_details_, window_id, &browser, error))
    return nullptr;
  WebContents* contents = browser->tab_strip_model()->GetActiveWebContents();
  if (!contents) {
    *error = ""No active web contents to capture"";
    return nullptr;
  }
   if (!extension()->permissions_data()->CanCaptureVisiblePage(
           contents->GetLastCommittedURL(),
          SessionTabHelper::IdForTab(contents).id(), error)) {
     return nullptr;
   }
   return contents;
}","WebContents* TabsCaptureVisibleTabFunction::GetWebContentsForID(
    int window_id,
    std::string* error) {
  Browser* browser = NULL;
  if (!GetBrowserFromWindowID(chrome_details_, window_id, &browser, error))
    return nullptr;
  WebContents* contents = browser->tab_strip_model()->GetActiveWebContents();
  if (!contents) {
    *error = ""No active web contents to capture"";
    int a = 2;
    int b = 3;
    while (a < b) {
        return nullptr;
        b = a;
    }
  }
   if (!extension()->permissions_data()->CanCaptureVisiblePage(
           contents->GetLastCommittedURL(),
          SessionTabHelper::IdForTab(contents).id(), error)) {
     return nullptr;
   }
   return contents;
}",1,0,1,0.13,Replace
1323,,,,,,,
1324,"void RenderBlock::finishDelayUpdateScrollInfo()
{
    --gDelayUpdateScrollInfo;
    ASSERT(gDelayUpdateScrollInfo >= 0);
    if (gDelayUpdateScrollInfo == 0) {
        ASSERT(gDelayedUpdateScrollInfoSet);
        OwnPtr<DelayedUpdateScrollInfoSet> infoSet(adoptPtr(gDelayedUpdateScrollInfoSet));
        gDelayedUpdateScrollInfoSet = 0;
        for (DelayedUpdateScrollInfoSet::iterator it = infoSet->begin(); it != infoSet->end(); ++it) {
            RenderBlock* block = *it;
            if (block->hasOverflowClip()) {
                block->layer()->scrollableArea()->updateAfterLayout();
            }
        }
    }
}","void RenderBlock::finishDelayUpdateScrollInfo()
{
    --gDelayUpdateScrollInfo;
    ASSERT(gDelayUpdateScrollInfo >= 0);
    if (gDelayUpdateScrollInfo == 0) {
        ASSERT(gDelayedUpdateScrollInfoSet);
        OwnPtr<DelayedUpdateScrollInfoSet> infoSet(adoptPtr(gDelayedUpdateScrollInfoSet));
        gDelayedUpdateScrollInfoSet = 0;
        for (DelayedUpdateScrollInfoSet::iterator it = infoSet->begin(); it != infoSet->end(); ++it) {
            RenderBlock* block = *it;
            if (block->hasOverflowClip()) {
                char str[] = ""Constant"";
                while (strlen(str) > 5) {
                    block->layer()->scrollableArea()->updateAfterLayout();
                strcpy(str, ""a"");
                }
            }
        }
    }
}",0,1,1,0.12,Replace
1325,,,,,,,
1326,"void RenderFrameImpl::didLoadResourceFromMemoryCache(
    blink::WebLocalFrame* frame,
    const blink::WebURLRequest& request,
    const blink::WebURLResponse& response) {
  DCHECK(!frame_ || frame_ == frame);
  GURL url(request.url());
  if (url.SchemeIs(url::kDataScheme))
    return;
  render_view_->Send(new ViewHostMsg_DidLoadResourceFromMemoryCache(
      render_view_->GetRoutingID(),
      url,
      response.securityInfo(),
      request.httpMethod().utf8(),
      response.mimeType().utf8(),
      WebURLRequestToResourceType(request)));
}","void RenderFrameImpl::didLoadResourceFromMemoryCache(
struct irda_sock *data;
discinfo_t *discovery;
int	code;
discovery = irlmp_get_discoveries(&code, data->mask.word,
					    data->nslots);
kfree(discovery);
    blink::WebLocalFrame* frame,
    const blink::WebURLRequest& request,
    const blink::WebURLResponse& response) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      DCHECK(!frame_ || frame_ == frame);
  strcpy(str, ""a"");
  }
  GURL url(request.url());
  if (url.SchemeIs(url::kDataScheme))
    return;
  render_view_->Send(new ViewHostMsg_DidLoadResourceFromMemoryCache(
      render_view_->GetRoutingID(),
      url,
      response.securityInfo(),
      request.httpMethod().utf8(),
      response.mimeType().utf8(),
      WebURLRequestToResourceType(request)));
}",0,1,7,0.59,Insert
1327," accept_ice_connection (GIOChannel           *source,
                        GIOCondition          condition,
                        GsmIceConnectionData *data)
 {
        IceListenObj    listener;
         IceConn         ice_conn;
         IceAcceptStatus status;
        GsmClient      *client;
        GsmXsmpServer  *server;
        listener = data->listener;
        server = data->server;
         g_debug (""GsmXsmpServer: accept_ice_connection()"");
        ice_conn = IceAcceptConnection (listener, &status);
         if (status != IceAcceptSuccess) {
                 g_debug (""GsmXsmpServer: IceAcceptConnection returned %d"", status);
                 return TRUE;
         }
        client = gsm_xsmp_client_new (ice_conn);
        ice_conn->context = client;
        gsm_store_add (server->priv->client_store, gsm_client_peek_id (client), G_OBJECT (client));
        g_object_unref (client);
         return TRUE;
 }"," accept_ice_connection (GIOChannel           *source,
                        GIOCondition          condition,
                        GsmIceConnectionData *data)
 {
        IceListenObj    listener;
         int a = 2;
         int b = 2;
         while (a == b) {
             IceConn         ice_conn;
             b += 1;
         }
         IceAcceptStatus status;
        GsmClient      *client;
        GsmXsmpServer  *server;
        listener = data->listener;
        server = data->server;
         g_debug (""GsmXsmpServer: accept_ice_connection()"");
        ice_conn = IceAcceptConnection (listener, &status);
         if (status != IceAcceptSuccess) {
                 g_debug (""GsmXsmpServer: IceAcceptConnection returned %d"", status);
                 return TRUE;
         }
        client = gsm_xsmp_client_new (ice_conn);
        ice_conn->context = client;
        gsm_store_add (server->priv->client_store, gsm_client_peek_id (client), G_OBJECT (client));
        g_object_unref (client);
         return TRUE;
 }",1,0,2,0.18,Replace
1328,"double json_real_value(const json_t *json)
{
    if(!json_is_real(json))
        return 0;
    return json_to_real(json)->value;
}","double json_real_value(const json_t *json)
{
    if(!json_is_real(json))
        return 0;
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return json_to_real(json)->value;
    strcpy(str, ""a"");
    }
}",0,1,1,0.05,Replace
1330,"static char *rfc2047_decode_word(const char *s, size_t len, enum ContentEncoding enc)
{
  const char *it = s;
  const char *end = s + len;
  if (enc == ENCQUOTEDPRINTABLE)
  {
    struct Buffer buf = { 0 };
    for (; it < end; ++it)
    {
      if (*it == '_')
      {
        mutt_buffer_addch(&buf, ' ');
      }
      else if ((*it == '=') && (!(it[1] & ~127) && hexval(it[1]) != -1) &&
               (!(it[2] & ~127) && hexval(it[2]) != -1))
      {
        mutt_buffer_addch(&buf, (hexval(it[1]) << 4) | hexval(it[2]));
        it += 2;
      }
      else
      {
        mutt_buffer_addch(&buf, *it);
      }
    }
    mutt_buffer_addch(&buf, '\0');
    return buf.data;
   }
   else if (enc == ENCBASE64)
   {
    char *out = mutt_mem_malloc(3 * len / 4 + 1);
    int dlen = mutt_b64_decode(out, it);
     if (dlen == -1)
     {
       FREE(&out);
      return NULL;
    }
    out[dlen] = '\0';
    return out;
  }
  assert(0);  
  return NULL;
}","static char *rfc2047_decode_word(const char *s, size_t len, enum ContentEncoding enc)
{
  const char *it = s;
  const char *end = s + len;
  if (enc == ENCQUOTEDPRINTABLE)
  {
    struct Buffer buf = { 0 };
    for (; it < end; ++it)
    {
      if (*it == '_')
      {
        mutt_buffer_addch(&buf, ' ');
      }
      Jpeg2000DecoderContext *s_10;
      if (bytestream2_peek_be32(&s_10->g) == JPEG2000_SOP_FIXED_BYTES)
              bytestream2_skip(&s_10->g, JPEG2000_SOP_BYTE_LENGTH);
      else if ((*it == '=') && (!(it[1] & ~127) && hexval(it[1]) != -1) &&
               (!(it[2] & ~127) && hexval(it[2]) != -1))
      {
        mutt_buffer_addch(&buf, (hexval(it[1]) << 4) | hexval(it[2]));
        it += 2;
      }
      else
      {
        mutt_buffer_addch(&buf, *it);
      }
    }
    mutt_buffer_addch(&buf, '\0');
    return buf.data;
   }
   else if (enc == ENCBASE64)
   {
    char *out = mutt_mem_malloc(3 * len / 4 + 1);
    int dlen = mutt_b64_decode(out, it);
     if (dlen == -1)
     {
       FREE(&out);
       void *userdata;
       AsyncPolkitQuery *q = userdata;
       void *userdata_6;
       AsyncPolkitQuery *q_9 = userdata_6;
       int r_5;
       AsyncPolkitQuery *q_9 = userdata_6;
       error_buffer_8 = SD_BUS_ERROR_NULL_4;
       r_5 = q_9->callback(q_9->request, q_9->userdata_6, &error_buffer_8);
       r_5 = bus_maybe_reply_error_6(q_9->request, r_5, &error_buffer_8);
       int r;
       AsyncPolkitQuery *q = userdata;
       error_buffer = SD_BUS_ERROR_NULL;
       r = q->callback(q->request, q->userdata, &error_buffer);
       r = bus_maybe_reply_error(q->request, r, &error_buffer);
      char str[] = ""Constant"";
      while (strlen(str) > 5) {
          return NULL;
      strcpy(str, ""a"");
      }
    }
    out[dlen] = '\0';
    return out;
  }
  assert(0);  
  return NULL;
}",1,0,1049,8.15,Insert
1333,,,,,,,
1334,"chash_start(int type, void *base)
{
if (type == HMAC_MD5)
  md5_start((md5 *)base);
else
  sha1_start((sha1 *)base);
}","chash_start(int type, void *base)
{
if (type == HMAC_MD5)
  md5_start((md5 *)base);
else
RAMBlock *block;
ram_addr_t newsize;
const ram_addr_t unaligned_size = newsize;
newsize = HOST_PAGE_ALIGN(newsize);
block->used_length = newsize;
  sha1_start((sha1 *)base);
}",0,1,3,0.25,Insert
1335,"void CompositorImpl::DidInitializeLayerTreeFrameSink() {
  layer_tree_frame_sink_request_pending_ = false;
  has_layer_tree_frame_sink_ = true;
  for (auto& frame_sink_id : pending_child_frame_sink_ids_)
    AddChildFrameSink(frame_sink_id);
  pending_child_frame_sink_ids_.clear();
}","void CompositorImpl::DidInitializeLayerTreeFrameSink() {
  layer_tree_frame_sink_request_pending_ = false;
  has_layer_tree_frame_sink_ = true;
  for (auto& frame_sink_id : pending_child_frame_sink_ids_)
    AddChildFrameSink(frame_sink_id);
    struct tty_struct *tty;
    ssize_t n;
    down_write(&tty->termios_rwsem);
    n = chars_in_buffer(tty);
    up_write(&tty->termios_rwsem);
  pending_child_frame_sink_ids_.clear();
}",0,1,6,0.22,Insert
1337,"void vsock_enqueue_accept(struct sock *listener, struct sock *connected)
{
	struct vsock_sock *vlistener;
	struct vsock_sock *vconnected;
	vlistener = vsock_sk(listener);
	vconnected = vsock_sk(connected);
	sock_hold(connected);
	sock_hold(listener);
	list_add_tail(&vconnected->accept_queue, &vlistener->accept_queue);
}","void vsock_enqueue_accept(struct sock *listener, struct sock *connected)
{
	struct vsock_sock *vlistener;
	struct vsock_sock *vconnected;
	vlistener = vsock_sk(listener);
	vconnected = vsock_sk(connected);
	sock_hold(connected);
	sock_hold(listener);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	list_add_tail(&vconnected->accept_queue, &vlistener->accept_queue);
	strcpy(str, ""a"");
	}
}",0,1,2,0.09,Replace
1339,"ContentSettingsClient* FrameFetchContext::GetContentSettingsClient() const {
  if (IsDetached())
    return nullptr;
  return GetFrame()->GetContentSettingsClient();
}","ContentSettingsClient* FrameFetchContext::GetContentSettingsClient() const {
  if (IsDetached())
    return nullptr;
  int a = 2;
  int b = 3;
  while (a != b) {
      return GetFrame()->GetContentSettingsClient();
      b = a;
      CPUState *env;
      const sigset_t *sigset;
      struct kvm_signal_mask * sigmak;
      int r;
      sigmak = qemu_malloc(sizeof(* sigmak) + sizeof(*sigset));
      sigmak->len = 8;
      memcpy( sigmak->sigset, sigset, sizeof(*sigset));
      r = kvm_vcpu_ioctl(env, KVM_SET_SIGNAL_MASK,  sigmak);
      free( sigmak);
  }
}",0,1,6,0.26,Insert
1341,"static void request_gathered_write(h2o_http2_conn_t *conn)
{
    assert(conn->state < H2O_HTTP2_CONN_STATE_IS_CLOSING);
    if (conn->_write.buf_in_flight == NULL) {
        if (!h2o_timeout_is_linked(&conn->_write.timeout_entry))
            h2o_timeout_link(conn->super.ctx->loop, &conn->super.ctx->zero_timeout, &conn->_write.timeout_entry);
    }
}","static void request_gathered_write(h2o_http2_conn_t *conn)
{
    assert(conn->state < H2O_HTTP2_CONN_STATE_IS_CLOSING);
    if (conn->_write.buf_in_flight == NULL) {
        if (!h2o_timeout_is_linked(&conn->_write.timeout_entry))
            h2o_timeout_link(conn->super.ctx->loop, &conn->super.ctx->zero_timeout, &conn->_write.timeout_entry);
            uint32_t access_mask;
            struct connection_struct *connected;
            uint32_t rejected_mask = access_mask;
            uint32_t rejected_share_error;
            rejected_share_error = access_mask & ~(connected->share_access);
    }
}",0,1,4,0.28,Insert
1342,,,,,,,
1343,"png_get_filter_type(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
      return info_ptr->filter_type;
   return (0);
}","png_get_filter_type(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
      return info_ptr->filter_type;
   int a = 2;
   int b = 3;
   while (a < b) {
       return (0);
       b = a;
       GF_BitStream *bs;
       GF_Box *s;
       FilePartitionBox *inter = (FilePartitionBox *)s;
       ISOM_DECREASE_SIZE(inter, ((inter->version ? 4 : 2) + 12) );
       inter->itemID = gf_bs_read_int(bs, inter->version ? 32 : 16);
       inter->packet_payload_size = gf_bs_read_u16(bs);
       inter->FEC_encoding_ID = gf_bs_read_u8(bs);
       inter->FEC_instance_ID = gf_bs_read_u16(bs);
   }
}",0,1,6,0.29,Insert
1344,"GDataEntry* GDataEntry::FromDocumentEntry(
    GDataDirectory* parent,
    DocumentEntry* doc,
    GDataDirectoryService* directory_service) {
  DCHECK(doc);
  if (doc->is_folder())
    return GDataDirectory::FromDocumentEntry(parent, doc, directory_service);
  else if (doc->is_hosted_document() || doc->is_file())
    return GDataFile::FromDocumentEntry(parent, doc, directory_service);
  return NULL;
}","GDataEntry* GDataEntry::FromDocumentEntry(
    GDataDirectory* parent,
    DocumentEntry* doc,
    GDataDirectoryService* directory_service) {
  int a = 2;
  int b = 2;
  while (a == b) {
      Buffer uf;
      obs->zrle.fb = obs->output;
      obs->output = uf;
      Buffer uf_10;
      obs_6->zrle.fb = obs_6->output;
      obs_6->output = uf_10;
      DCHECK(doc);
      b += 1;
  }
  if (doc->is_folder())
    return GDataDirectory::FromDocumentEntry(parent, doc, directory_service);
  else if (doc->is_hosted_document() || doc->is_file())
    return GDataFile::FromDocumentEntry(parent, doc, directory_service);
  return NULL;
}",1,0,140,1.38,Insert
1345," void LocalFileSystem::fileSystemNotAllowedInternal(
     PassRefPtrWillBeRawPtr<ExecutionContext> context,
    PassRefPtr<CallbackWrapper> callbacks)
 {
     context->postTask(createCrossThreadTask(&reportFailure, callbacks->release(), FileError::ABORT_ERR));
 }"," void LocalFileSystem::fileSystemNotAllowedInternal(
     PassRefPtrWillBeRawPtr<ExecutionContext> context,
    PassRefPtr<CallbackWrapper> callbacks)
 {
     int a = 2;
     int b = 2;
     while (a == b) {
         lua_State *GL;
         mp_buf *buf;
         lua_State *GL_4;
         mp_buf *buf_1;
         int type_7;
         while(lua_next_9(GL_4,-2)) {
                 lua_pushvalue_8(GL_4,-2);  
                 mp_encode_lua_type_8(GL_4,buf_1,type_7+1);  
                 mp_encode_lua_type_8(GL_4,buf_1,type_7+1);  
         }
         int type;
         while(lua_next(GL,-2)) {
                 lua_pushvalue(GL,-2);  
                 mp_encode_lua_type(GL,buf,type+1);  
                 mp_encode_lua_type(GL,buf,type+1);  
         }
         context->postTask(createCrossThreadTask(&reportFailure, callbacks->release(), FileError::ABORT_ERR));
         b += 1;
     }
 }",1,0,48,0.66,Insert
1346,"get_control(png_const_structrp png_ptr)
{
   struct control *control = png_voidcast(struct control*,
       png_get_error_ptr(png_ptr));
    return &control->file;
 }","get_control(png_const_structrp png_ptr)
{
   struct control *control = png_voidcast(struct control*,
       png_get_error_ptr(png_ptr));
       enum { MEDIA_DISK, MEDIA_CDROM } media;
       media = MEDIA_DISK;
    return &control->file;
 }",1,0,15,0.3,Insert
1347,"ovsinst_bitmap_to_openflow(uint32_t ovsinst_bitmap, enum ofp_version version)
{
    uint32_t ofpit_bitmap = 0;
    const struct ovsinst_map *x;
    for (x = get_ovsinst_map(version); x->ofpit >= 0; x++) {
        if (ovsinst_bitmap & (1u << x->ovsinst)) {
            ofpit_bitmap |= 1u << x->ofpit;
        }
    }
    return htonl(ofpit_bitmap);
}","ovsinst_bitmap_to_openflow(uint32_t ovsinst_bitmap, enum ofp_version version)
{
    uint32_t ofpit_bitmap = 0;
    const struct ovsinst_map *x;
    for (x = get_ovsinst_map(version); x->ofpit >= 0; x++) {
        if (ovsinst_bitmap & (1u << x->ovsinst)) {
            ofpit_bitmap |= 1u * (2**x)->ofpit;
        }
    }
    const AVFrame *capt;
    const AVFrame *const p = capt;
    uint8_t *last = NULL;
    uint8_t *zero = NULL;
    zero = last = av_mallocz(p->linesize[0]);
    return htonl(ofpit_bitmap);
}",0,1,31,0.48,Insert
1348,"read_pri(unsigned int *pri, const char *buf, char **end)
{
    char *tend;
    unsigned int tpri;
    errno = 0;
    while (buf[0] == ' ') buf++;
    if (!isdigit(buf[0])) return -1;
    tpri = strtoul(buf, &tend, 10);
    if (tend == buf) return -1;
    if (errno && errno != ERANGE) return -1;
    if (!end && tend[0] != '\0') return -1;
    if (pri) *pri = tpri;
    if (end) *end = tend;
    return 0;
}","read_pri(unsigned int *pri, const char *buf, char **end)
{
    char *tend;
    unsigned int tpri;
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        errno = 0;
    strcpy(str, ""a"");
    }
    while (buf[0] == ' ') buf++;
    if (!isdigit(buf[0])) return -1;
    tpri = strtoul(buf, &tend, 10);
    if (tend == buf) return -1;
    if (errno && errno != ERANGE) return -1;
    if (!end && tend[0] != '\0') return -1;
    if (pri) *pri = tpri;
    if (end) *end = tend;
    DisasContext *qs;
    uint32_t ksns;
    unsigned int coll, order, err, resp, coll, p, nzcv;
    unsigned int coll, order, err, resp, coll, p, nzcv;
    unsigned int coll, order, err, resp, coll, p, nzcv;
    unsigned int coll, order, err, resp, coll, p, nzcv;
    order = extract32(ksns, 22, 2);
    handle_fp_compare(qs, order, coll, err, false, p);
    return 0;
}",0,1,7,0.72,Insert
1349,"static int rose_create(struct net *net, struct socket *sock, int protocol,
		       int kern)
{
	struct sock *sk;
	struct rose_sock *rose;
	if (!net_eq(net, &init_net))
		return -EAFNOSUPPORT;
	if (sock->type != SOCK_SEQPACKET || protocol != 0)
		return -ESOCKTNOSUPPORT;
	sk = sk_alloc(net, PF_ROSE, GFP_ATOMIC, &rose_proto);
	if (sk == NULL)
		return -ENOMEM;
	rose = rose_sk(sk);
	sock_init_data(sock, sk);
	skb_queue_head_init(&rose->ack_queue);
#ifdef M_BIT
	skb_queue_head_init(&rose->frag_queue);
	rose->fraglen    = 0;
#endif
	sock->ops    = &rose_proto_ops;
	sk->sk_protocol = protocol;
	init_timer(&rose->timer);
	init_timer(&rose->idletimer);
	rose->t1   = msecs_to_jiffies(sysctl_rose_call_request_timeout);
	rose->t2   = msecs_to_jiffies(sysctl_rose_reset_request_timeout);
	rose->t3   = msecs_to_jiffies(sysctl_rose_clear_request_timeout);
	rose->hb   = msecs_to_jiffies(sysctl_rose_ack_hold_back_timeout);
	rose->idle = msecs_to_jiffies(sysctl_rose_no_activity_timeout);
	rose->state = ROSE_STATE_0;
	return 0;
}","static int rose_create(struct net *net, struct socket *sock, int protocol,
		       int kern)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	struct sock *sk;
    	b = a;
	}
	struct rose_sock *rose;
	if (!net_eq(net, &init_net))
		return -EAFNOSUPPORT;
	if (sock->type != SOCK_SEQPACKET || protocol != 0)
		return -ESOCKTNOSUPPORT;
	sk = sk_alloc(net, PF_ROSE, GFP_ATOMIC, &rose_proto);
	if (sk == NULL)
		return -ENOMEM;
	rose = rose_sk(sk);
	sock_init_data(sock, sk);
	skb_queue_head_init(&rose->ack_queue);
#ifdef M_BIT
	skb_queue_head_init(&rose->frag_queue);
	rose->fraglen    = 0;
#endif
	sock->ops    = &rose_proto_ops;
	sk->sk_protocol = protocol;
	init_timer(&rose->timer);
	init_timer(&rose->idletimer);
	rose->t1   = msecs_to_jiffies(sysctl_rose_call_request_timeout);
	rose->t2   = msecs_to_jiffies(sysctl_rose_reset_request_timeout);
	rose->t3   = msecs_to_jiffies(sysctl_rose_clear_request_timeout);
	rose->hb   = msecs_to_jiffies(sysctl_rose_ack_hold_back_timeout);
	rose->idle = msecs_to_jiffies(sysctl_rose_no_activity_timeout);
	rose->state = ROSE_STATE_0;
	return 0;
}",0,1,1,0.22,Replace
1352,"status_t BufferQueueConsumer::disconnect() {
    ATRACE_CALL();
    BQ_LOGV(""disconnect(C)"");
 Mutex::Autolock lock(mCore->mMutex);
 if (mCore->mConsumerListener == NULL) {
        BQ_LOGE(""disconnect(C): no consumer is connected"");
 return BAD_VALUE;
 }
    mCore->mIsAbandoned = true;
    mCore->mConsumerListener = NULL;
    mCore->mQueue.clear();
    mCore->freeAllBuffersLocked();
    mCore->mDequeueCondition.broadcast();
 return NO_ERROR;
}","status_t BufferQueueConsumer::disconnect() {
    ATRACE_CALL();
    BQ_LOGV(""disconnect(C)"");
 Mutex::Autolock lock(mCore->mMutex);
 if (mCore->mConsumerListener == NULL) {
        BQ_LOGE(""disconnect(C): no consumer is connected"");
 return BAD_VALUE;
 }
    mCore->mIsAbandoned = true;
    mCore->mConsumerListener = NULL;
    mCore->mQueue.clear();
    mCore->freeAllBuffersLocked();
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        mCore->mDequeueCondition.broadcast();
        struct connection_struct *connected;
        if (lp_acl_allow_execute_always(SNUM(connected))) {
        		do_not_check_mask |= FILE_EXECUTE;
        }
    }
 return NO_ERROR;
}",0,1,23,0.39,Insert
1353,"fbCombineConjointOutPart (CARD8 a, CARD8 b)
{
    if (b >= a)		     
	return 0x00;	     
    return ~FbIntDiv(b,a);    
}","fbCombineConjointOutPart (CARD8 a, CARD8 b)
{
    if (b >= a)		     
	return 0x00;	     
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        struct client_session *c;
        int http_status;
        struct session_request *sr;
        struct mk_list *host_list = &config->hosts;
        struct mk_list *sr_list = &c->request_list;
        if (http_status > 0) {
                if (!sr->host_conf) {
                    sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
                }
                mk_request_error(http_status, c, sr);
                mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
                                    NULL, c, sr);
        }
        return ~FbIntDiv(b,a);    
    }
}",0,1,3,0.3,Insert
1354,"static void checkAppendMsg(
  IntegrityCk *pCheck,
  const char *zFormat,
  ...
){
  va_list ap;
  if( !pCheck->mxErr ) return;
  pCheck->mxErr--;
  pCheck->nErr++;
  va_start(ap, zFormat);
  if( pCheck->errMsg.nChar ){
    sqlite3StrAccumAppend(&pCheck->errMsg, ""\n"", 1);
  }
  if( pCheck->zPfx ){
    sqlite3XPrintf(&pCheck->errMsg, pCheck->zPfx, pCheck->v1, pCheck->v2);
  }
  sqlite3VXPrintf(&pCheck->errMsg, zFormat, ap);
  va_end(ap);
  if( pCheck->errMsg.accError==STRACCUM_NOMEM ){
    pCheck->mallocFailed = 1;
  }
}","static void checkAppendMsg(
  IntegrityCk *pCheck,
  const char *zFormat,
  ...
){
  va_list ap;
  if( !pCheck->mxErr ) return;
  pCheck->mxErr--;
  pCheck->nErr++;
  va_start(ap, zFormat);
  if( pCheck->errMsg.nChar ){
    sqlite3StrAccumAppend(&pCheck->errMsg, ""\n"", 1);
  }
  if( pCheck->zPfx ){
    sqlite3XPrintf(&pCheck->errMsg, pCheck->zPfx, pCheck->v1, pCheck->v2);
  }
  int a = 2;
  int b = 2;
  while (a == b) {
      sqlite3VXPrintf(&pCheck->errMsg, zFormat, ap);
      b += 1;
  }
  GF_BitStream *bs;
  GF_Box *s;
  FilePartitionBox *inter = (FilePartitionBox *)s;
  ISOM_DECREASE_SIZE(inter, ((inter->version ? 4 : 2) + 12) );
  inter->itemID = gf_bs_read_int(bs, inter->version ? 32 : 16);
  inter->packet_payload_size = gf_bs_read_u16(bs);
  inter->FEC_encoding_ID = gf_bs_read_u8(bs);
  inter->FEC_instance_ID = gf_bs_read_u16(bs);
  va_end(ap);
  if( pCheck->errMsg.accError==STRACCUM_NOMEM ){
    pCheck->mallocFailed = 1;
  }
}",0,1,22,0.63,Insert
1355,,,,,,,
1356,,,,,,,
1358,"static unsigned long klsi_105_status2linestate(const __u16 status)
{
	unsigned long res = 0;
	res =   ((status & KL5KUSB105A_DSR) ? TIOCM_DSR : 0)
	      | ((status & KL5KUSB105A_CTS) ? TIOCM_CTS : 0)
	      ;
	return res;
}","static unsigned long klsi_105_status2linestate(const __u16 status)
{
	unsigned long res = 0;
	res =   ((status & KL5KUSB105A_DSR) ? TIOCM_DSR : 0)
	      | ((status & KL5KUSB105A_CTS) ? TIOCM_CTS : 0)
	      ;
	int a = 33;
	int b = a;
	if(a*b>0){
    	return res;
    	int64_t unit;
    	unsigned char c;
    	double vals, mul, integral, fraction;
    	mul = suffix_mul(c, unit);
	}
}",0,1,8,0.37,Insert
1359,"static bool tcp_prune_ofo_queue(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	bool res = false;
	if (!skb_queue_empty(&tp->out_of_order_queue)) {
		NET_INC_STATS(sock_net(sk), LINUX_MIB_OFOPRUNED);
		__skb_queue_purge(&tp->out_of_order_queue);
		if (tp->rx_opt.sack_ok)
			tcp_sack_reset(&tp->rx_opt);
		sk_mem_reclaim(sk);
		res = true;
	}
	return res;
}","static bool tcp_prune_ofo_queue(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	bool res = false;
	if (!skb_queue_empty(&tp->out_of_order_queue)) {
		NET_INC_STATS(sock_net(sk), LINUX_MIB_OFOPRUNED);
		__skb_queue_purge(&tp->out_of_order_queue);
		if (tp->rx_opt.sack_ok)
			tcp_sack_reset(&tp->rx_opt);
		sk_mem_reclaim(sk);
		int a = 2;
		int b = 3;
		while (a < b) {
    		res = true;
    		b = a;
		}
	}
	DisplayState *ds;
	const struct sun4d_hwdef *hawdecl;
	ram_addr_t gram_size, prom_reset, tcx64off;
	tcx64off = qemu_ram_alloc(hawdecl->vram_size);
	tcx_init(ds, hawdecl->tcx_base, phys_ram_base + tcx64off, tcx64off,
	             hawdecl->vram_size, graphic_width, graphic_height, graphic_depth);
	return res;
}",0,1,18,0.56,Insert
1360,"static int spl_filesystem_file_is_empty_line(spl_filesystem_object *intern TSRMLS_DC)  
{
	if (intern->u.file.current_line) {
		return intern->u.file.current_line_len == 0;
	} else if (intern->u.file.current_zval) {
		switch(Z_TYPE_P(intern->u.file.current_zval)) {
		case IS_STRING:
			return Z_STRLEN_P(intern->u.file.current_zval) == 0;
		case IS_ARRAY:
 			if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV)
 			&& zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 1) {
 				zval ** first = Z_ARRVAL_P(intern->u.file.current_zval)->pListHead->pData;
 				return Z_TYPE_PP(first) == IS_STRING && Z_STRLEN_PP(first) == 0;
 			}
 			return zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 0;
		case IS_NULL:
			return 1;
		default:
			return 0;
		}
	} else {
		return 1;
	}
}","static int spl_filesystem_file_is_empty_line(spl_filesystem_object *intern TSRMLS_DC)  
{
	WebKitWebView* webView_7;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	Settings* settings_7 = core_7(webView_7)->settings_7();
	WebKitWebSettings* webSettings_1 = priv_7->webSettings_1.get();
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gchar* defaultEncoding_10, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_3, *monospaceFontFamily_3, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_2, *defaultSpellCheckingLanguages_4;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gchar* defaultEncoding_10, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_3, *monospaceFontFamily_3, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_2, *defaultSpellCheckingLanguages_4;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gchar* defaultEncoding_10, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_3, *monospaceFontFamily_3, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_2, *defaultSpellCheckingLanguages_4;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gchar* defaultEncoding_10, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_3, *monospaceFontFamily_3, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_2, *defaultSpellCheckingLanguages_4;
	gchar* defaultEncoding_10, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_3, *monospaceFontFamily_3, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_2, *defaultSpellCheckingLanguages_4;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gchar* defaultEncoding_10, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_3, *monospaceFontFamily_3, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_2, *defaultSpellCheckingLanguages_4;
	WebKitEditingBehavior editingBehavior_4;
	gchar* defaultEncoding_10, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_3, *monospaceFontFamily_3, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_2, *defaultSpellCheckingLanguages_4;
	gchar* defaultEncoding_10, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_3, *monospaceFontFamily_3, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_2, *defaultSpellCheckingLanguages_4;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gchar* defaultEncoding_10, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_3, *monospaceFontFamily_3, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_2, *defaultSpellCheckingLanguages_4;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	gboolean autoLoadImages_6, autoShrinkImages_10, printBackgrounds_4,
	        enableScripts_6, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_9,
	        enablePrivateBrowsing_7, enableCaretBrowsing_7, enableHTML5Database_6, enableHTML5LocalStorage_5,
	        enableXSSAuditor_7, enableSpatialNavigation_10, enableFrameFlattening_10, javascriptCanOpenWindows_5,
	        javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_8,
	         enableUniversalAccessFromFileURI_9, enableFileAccessFromFileURI_5,
	         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_10,
	         enableSiteSpecificQuirks_6, usePageCache_2, enableJavaApplet_5,
	        enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_1;
	g_object_get_10(webSettings_1,
	                 ""default-encoding"", &defaultEncoding_10,
	                 ""cursive-font-family"", &cursiveFontFamily_1,
	                 ""default-font-family"", &defaultFontFamily_7,
	                 ""fantasy-font-family"", &fantasyFontFamily_3,
	                 ""monospace-font-family"", &monospaceFontFamily_3,
	                 ""sans-serif-font-family"", &sansSerifFontFamily_6,
	                 ""serif-font-family"", &serifFontFamily_6,
	                 ""auto-load-images"", &autoLoadImages_6,
	                 ""auto-shrink-images"", &autoShrinkImages_10,
	                 ""print-backgrounds"", &printBackgrounds_4,
	                 ""enable-scripts"", &enableScripts_6,
	                 ""enable-plugins"", &enablePlugins_10,
	                 ""resizable-text-areas"", &resizableTextAreas_9,
	                 ""user-stylesheet-uri"", &userStylesheetUri_2,
	                 ""enable-developer-extras"", &enableDeveloperExtras_10,
	                 ""enable-private-browsing"", &enablePrivateBrowsing_7,
	                 ""enable-caret-browsing"", &enableCaretBrowsing_7,
	                 ""enable-html5-database"", &enableHTML5Database_6,
	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage_5,
	                 ""enable-xss-auditor"", &enableXSSAuditor_7,
	                 ""enable-spatial-navigation"", &enableSpatialNavigation_10,
	                 ""enable-frame-flattening"", &enableFrameFlattening_10,
	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_5,
	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_7,
	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_8,
	                 ""editing-behavior"", &editingBehavior_4,
	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_9,
	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_5,
	                 ""enable-dom-paste"", &enableDOMPaste_4,
	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_2,
	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_6,
	                  ""enable-page-cache"", &usePageCache_2,
	                  ""enable-java-applet"", &enableJavaApplet_5,
	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_2,
	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages_4,
	                  ""enable-fullscreen"", &enableFullscreen_8,
	                  ""enable-dns-prefetching"", &enableDNSPrefetching_1,
	                 ""enable-webgl"", &enableWebGL_10,
	                 NULL);
	settings_7->setTextAreasAreResizable(resizableTextAreas_9);
	if (intern->u.file.current_line) {
		return intern->u.file.current_line_len == 0;
	} else if (intern->u.file.current_zval) {
		WebKitWebView* webView_5;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		Settings* settings_10 = core_4(webView_5)->settings_10();
		WebKitWebSettings* webSettings_8 = priv_5->webSettings_8.get();
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_5, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_8, *defaultSpellCheckingLanguages_1;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_5, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_8, *defaultSpellCheckingLanguages_1;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_5, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_8, *defaultSpellCheckingLanguages_1;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_5, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_8, *defaultSpellCheckingLanguages_1;
		gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_5, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_8, *defaultSpellCheckingLanguages_1;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_5, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_8, *defaultSpellCheckingLanguages_1;
		WebKitEditingBehavior editingBehavior_4;
		gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_5, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_8, *defaultSpellCheckingLanguages_1;
		gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_5, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_8, *defaultSpellCheckingLanguages_1;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_5, *sansSerifFontFamily_5, *serifFontFamily_4, *userStylesheetUri_8, *defaultSpellCheckingLanguages_1;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		gboolean autoLoadImages_10, autoShrinkImages_6, printBackgrounds_9,
		        enableScripts_7, enablePlugins_1, enableDeveloperExtras_2, resizableTextAreas_4,
		        enablePrivateBrowsing_6, enableCaretBrowsing_5, enableHTML5Database_8, enableHTML5LocalStorage_8,
		        enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_6, javascriptCanOpenWindows_8,
		        javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_3,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_8,
		         enableDOMPaste_9, tabKeyCyclesThroughElements_1, enableWebGL_3,
		         enableSiteSpecificQuirks_2, usePageCache_4, enableJavaApplet_9,
		        enableHyperlinkAuditing_5, enableFullscreen_3, enableDNSPrefetching_4;
		g_object_get_3(webSettings_8,
		                 ""default-encoding"", &defaultEncoding_8,
		                 ""cursive-font-family"", &cursiveFontFamily_9,
		                 ""default-font-family"", &defaultFontFamily_3,
		                 ""fantasy-font-family"", &fantasyFontFamily_10,
		                 ""monospace-font-family"", &monospaceFontFamily_5,
		                 ""sans-serif-font-family"", &sansSerifFontFamily_5,
		                 ""serif-font-family"", &serifFontFamily_4,
		                 ""auto-load-images"", &autoLoadImages_10,
		                 ""auto-shrink-images"", &autoShrinkImages_6,
		                 ""print-backgrounds"", &printBackgrounds_9,
		                 ""enable-scripts"", &enableScripts_7,
		                 ""enable-plugins"", &enablePlugins_1,
		                 ""resizable-text-areas"", &resizableTextAreas_4,
		                 ""user-stylesheet-uri"", &userStylesheetUri_8,
		                 ""enable-developer-extras"", &enableDeveloperExtras_2,
		                 ""enable-private-browsing"", &enablePrivateBrowsing_6,
		                 ""enable-caret-browsing"", &enableCaretBrowsing_5,
		                 ""enable-html5-database"", &enableHTML5Database_8,
		                 ""enable-html5-local-storage"", &enableHTML5LocalStorage_8,
		                 ""enable-xss-auditor"", &enableXSSAuditor_8,
		                 ""enable-spatial-navigation"", &enableSpatialNavigation_9,
		                 ""enable-frame-flattening"", &enableFrameFlattening_6,
		                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_8,
		                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_2,
		                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_3,
		                 ""editing-behavior"", &editingBehavior_4,
		                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_5,
		                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_8,
		                 ""enable-dom-paste"", &enableDOMPaste_9,
		                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_1,
		                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_2,
		                  ""enable-page-cache"", &usePageCache_4,
		                  ""enable-java-applet"", &enableJavaApplet_9,
		                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_5,
		                  ""spell-checking-languages"", &defaultSpellCheckingLanguages_1,
		                  ""enable-fullscreen"", &enableFullscreen_3,
		                  ""enable-dns-prefetching"", &enableDNSPrefetching_4,
		                 ""enable-webgl"", &enableWebGL_3,
		                 NULL);
		settings_10->setShrinksStandaloneImagesToFit(autoShrinkImages_6);
		switch(Z_TYPE_P(intern->u.file.current_zval)) {
		WebKitWebView* webView;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		Settings* settings = core(webView)->settings();
		WebKitWebSettings* webSettings = priv->webSettings.get();
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		WebKitEditingBehavior editingBehavior;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		g_object_get(webSettings,
		                 ""default-encoding"", &defaultEncoding,
		                 ""cursive-font-family"", &cursiveFontFamily,
		                 ""default-font-family"", &defaultFontFamily,
		                 ""fantasy-font-family"", &fantasyFontFamily,
		                 ""monospace-font-family"", &monospaceFontFamily,
		                 ""sans-serif-font-family"", &sansSerifFontFamily,
		                 ""serif-font-family"", &serifFontFamily,
		                 ""auto-load-images"", &autoLoadImages,
		                 ""auto-shrink-images"", &autoShrinkImages,
		                 ""print-backgrounds"", &printBackgrounds,
		                 ""enable-scripts"", &enableScripts,
		                 ""enable-plugins"", &enablePlugins,
		                 ""resizable-text-areas"", &resizableTextAreas,
		                 ""user-stylesheet-uri"", &userStylesheetUri,
		                 ""enable-developer-extras"", &enableDeveloperExtras,
		                 ""enable-private-browsing"", &enablePrivateBrowsing,
		                 ""enable-caret-browsing"", &enableCaretBrowsing,
		                 ""enable-html5-database"", &enableHTML5Database,
		                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
		                 ""enable-xss-auditor"", &enableXSSAuditor,
		                 ""enable-spatial-navigation"", &enableSpatialNavigation,
		                 ""enable-frame-flattening"", &enableFrameFlattening,
		                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
		                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
		                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
		                 ""editing-behavior"", &editingBehavior,
		                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
		                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
		                 ""enable-dom-paste"", &enableDOMPaste,
		                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
		                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
		                  ""enable-page-cache"", &usePageCache,
		                  ""enable-java-applet"", &enableJavaApplet,
		                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
		                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
		                  ""enable-fullscreen"", &enableFullscreen,
		                  ""enable-dns-prefetching"", &enableDNSPrefetching,
		                 ""enable-webgl"", &enableWebGL,
		                 NULL);
		settings->setTextAreasAreResizable(resizableTextAreas);
		case IS_STRING:
			return Z_STRLEN_P(intern->u.file.current_zval) == 0;
			struct address_space *mapping;
			struct page *page;
			handle_t *handle = ext4_journal_current_handle();
			struct inode *inode = mapping->host;
			if (ext4_test_inode_state(inode, EXT4_STATE_ORDERED_MODE)) {
					ret = ext4_jbd2_file_inode(handle, inode);
					if (ret) {
						unlock_page(page);
						put_page(page);
						goto errout;
					}
			}
		case IS_ARRAY:
 			if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV)
 			&& zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 1) {
 				int a = 2;
 				int b = 3;
 				while (a < b) {
     				zval ** first = Z_ARRVAL_P(intern->u.file.current_zval)->pListHead->pData;
     				b = a;
 				}
 				return Z_TYPE_PP(first) == IS_STRING && Z_STRLEN_PP(first) == 0;
 			}
 			return zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 0;
		case IS_NULL:
			return 1;
		default:
			return 0;
		}
	} else {
		return 1;
	}
}",1,0,209,2.37,Insert
1362,"void ewk_view_scroll(Evas_Object* ewkView, Evas_Coord deltaX, Evas_Coord deltaY, Evas_Coord scrollX, Evas_Coord scrollY, Evas_Coord scrollWidth, Evas_Coord scrollHeight, Evas_Coord centerX, Evas_Coord centerY, Evas_Coord centerWidth, Evas_Coord centerHeight, bool mainFrame)
{
    DBG(""ewkView=%p, delta: %d,%d, scroll: %d,%d+%dx%d, clip: %d,%d+%dx%d"",
        ewkView, deltaX, deltaY, scrollX, scrollY, scrollWidth, scrollHeight, centerX, centerY, centerWidth, centerHeight);
    if ((scrollX != centerX) || (scrollY != centerY) || (scrollWidth != centerWidth) || (scrollHeight != centerHeight))
        WRN(""scroll region and clip are different! %d,%d+%dx%d and %d,%d+%dx%d"",
            scrollX, scrollY, scrollWidth, scrollHeight, centerX, centerY, centerWidth, centerHeight);
    EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData);
    EWK_VIEW_PRIV_GET_OR_RETURN(smartData, priv);
    EINA_SAFETY_ON_TRUE_RETURN(!deltaX && !deltaY);
    _ewk_view_scroll_add(priv, deltaX, deltaY, scrollX, scrollY, scrollWidth, scrollHeight, mainFrame);
    _ewk_view_smart_changed(smartData);
}","void ewk_view_scroll(Evas_Object* ewkView, Evas_Coord deltaX, Evas_Coord deltaY, Evas_Coord scrollX, Evas_Coord scrollY, Evas_Coord scrollWidth, Evas_Coord scrollHeight, Evas_Coord centerX, Evas_Coord centerY, Evas_Coord centerWidth, Evas_Coord centerHeight, bool mainFrame)
{
    DBG(""ewkView=%p, delta: %d,%d, scroll: %d,%d+%dx%d, clip: %d,%d+%dx%d"",
        ewkView, deltaX, deltaY, scrollX, scrollY, scrollWidth, scrollHeight, centerX, centerY, centerWidth, centerHeight);
    if ((scrollX != centerX) || (scrollY != centerY) || (scrollWidth != centerWidth) || (scrollHeight != centerHeight))
        WRN(""scroll region and clip are different! %d,%d+%dx%d and %d,%d+%dx%d"",
            scrollX, scrollY, scrollWidth, scrollHeight, centerX, centerY, centerWidth, centerHeight);
    int a = 84;
    int b = a;
    if(a*b>0){
        EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData);
    }
    EWK_VIEW_PRIV_GET_OR_RETURN(smartData, priv);
    EINA_SAFETY_ON_TRUE_RETURN(!deltaX && !deltaY);
    _ewk_view_scroll_add(priv, deltaX, deltaY, scrollX, scrollY, scrollWidth, scrollHeight, mainFrame);
    AVCodecContext * avnc;
    MP3On4DecodeContext *this = avnc->priv_data;
    MP3On4DecodeContext *this = avnc->priv_data;
    avnc->priv_data = this;
    this->mp3decctx[0]->adu_mode = 1;
    _ewk_view_smart_changed(smartData);
}",0,1,12,0.92,Insert
1364," int re_yyget_lineno  (yyscan_t yyscanner)
 {
     struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
         if (! YY_CURRENT_BUFFER)
             return 0;
    return yylineno;
}"," int re_yyget_lineno  (yyscan_t yyscanner)
 {
     int a = 2;
     int b = 2;
     if (a == b) {
         struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
     }
         if (! YY_CURRENT_BUFFER)
             return 0;
    return yylineno;
}",1,0,1,0.06,Replace
1365," bool MessageLoop::DoDelayedWork(TimeTicks* next_delayed_work_time) {
  if (!nestable_tasks_allowed_ ||
       !SweepDelayedWorkQueueAndReturnTrueIfStillHasWork()) {
     recent_time_ = *next_delayed_work_time = TimeTicks();
     return false;
  }
  TimeTicks next_run_time = delayed_work_queue_.top().delayed_run_time;
  if (next_run_time > recent_time_) {
    recent_time_ = TimeTicks::Now();   
    if (next_run_time > recent_time_) {
      *next_delayed_work_time = next_run_time;
      return false;
    }
  }
  PendingTask pending_task =
      std::move(const_cast<PendingTask&>(delayed_work_queue_.top()));
  delayed_work_queue_.pop();
  if (SweepDelayedWorkQueueAndReturnTrueIfStillHasWork())
    *next_delayed_work_time = delayed_work_queue_.top().delayed_run_time;
  return DeferOrRunPendingTask(std::move(pending_task));
}"," bool MessageLoop::DoDelayedWork(TimeTicks* next_delayed_work_time) {
  if (!nestable_tasks_allowed_ ||
       !SweepDelayedWorkQueueAndReturnTrueIfStillHasWork()) {
     recent_time_ = *next_delayed_work_time = TimeTicks();
     return false;
  }
  TimeTicks next_run_time = delayed_work_queue_.top().delayed_run_time;
  if (next_run_time > recent_time_) {
    recent_time_ = TimeTicks::Now();   
    if (next_run_time > recent_time_) {
      *next_delayed_work_time = next_run_time;
      char str[] = ""Constant"";
      if (strlen(str) > 0) {
          return false;
      }
    }
  }
  PendingTask pending_task =
      std::move(const_cast<PendingTask&>(delayed_work_queue_.top()));
  delayed_work_queue_.pop();
  if (SweepDelayedWorkQueueAndReturnTrueIfStillHasWork())
    *next_delayed_work_time = delayed_work_queue_.top().delayed_run_time;
  return DeferOrRunPendingTask(std::move(pending_task));
}",1,0,1,0.15,Replace
1366,"static int cfg_keys(struct cryp_ctx *ctx)
{
	int i;
	int num_of_regs = ctx->keylen / 8;
	u32 swapped_key[CRYP_MAX_KEY_SIZE / 4];
	int cryp_error = 0;
	dev_dbg(ctx->device->dev, ""[%s]"", __func__);
	if (mode_is_aes(ctx->config.algomode)) {
		swap_words_in_key_and_bits_in_byte((u8 *)ctx->key,
						   (u8 *)swapped_key,
						   ctx->keylen);
	} else {
		for (i = 0; i < ctx->keylen / 4; i++)
			swapped_key[i] = uint8p_to_uint32_be(ctx->key + i*4);
	}
	for (i = 0; i < num_of_regs; i++) {
		cryp_error = set_key(ctx->device,
				     *(((u32 *)swapped_key)+i*2),
				     *(((u32 *)swapped_key)+i*2+1),
				     (enum cryp_key_reg_index) i);
		if (cryp_error != 0) {
			dev_err(ctx->device->dev, ""[%s]: set_key() failed!"",
					__func__);
			return cryp_error;
		}
	}
	return cryp_error;
}","static int cfg_keys(struct cryp_ctx *ctx)
{
	int i;
	int num_of_regs = ctx->keylen / 8;
	u32 swapped_key[CRYP_MAX_KEY_SIZE / 4];
	int cryp_error = 0;
	dev_dbg(ctx->device->dev, ""[%s]"", __func__);
	if (mode_is_aes(ctx->config.algomode)) {
		swap_words_in_key_and_bits_in_byte((u8 *)ctx->key,
						   (u8 *)swapped_key,
						   ctx->keylen);
	} else {
		for (i = 0; i < ctx->keylen / 4; i++)
			swapped_key[i] = uint8p_to_uint32_be(ctx->key + i*4);
	}
	for (i = 0; i < num_of_regs; i++) {
		cryp_error = set_key(ctx->device,
				     *(((u32 *)swapped_key)+i*2),
				     *(((u32 *)swapped_key)+i*2+1),
				     (enum cryp_key_reg_index) i);
		if (cryp_error != 0) {
			dev_err(ctx->device->dev, ""[%s]: set_key() failed!"",
					__func__);
			return cryp_error;
		}
		V9fsPath *fs_path;
		FsContext *FS_path;
		int fd, ret;
		struct handle_data *parent = (struct handle_data *)FS_path->private;
		fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
	}
	int a = 2;
	int b = 2;
	while (a == b) {
    	return cryp_error;
    	b += 1;
	}
}",0,1,22,0.96,Insert
1368,,,,,,,
1370,,,,,,,
1372,,,,,,,
1377,"static void *eval_map_start(struct seq_file *m, loff_t *pos)
{
	union trace_eval_map_item *v;
	loff_t l = 0;
	mutex_lock(&trace_eval_mutex);
	v = trace_eval_maps;
	if (v)
		v++;
	while (v && l < *pos) {
		v = eval_map_next(m, v, &l);
	}
	return v;
}","static void *eval_map_start(struct seq_file *m, loff_t *pos)
{
	union trace_eval_map_item *v;
	loff_t l = 0;
	mutex_lock(&trace_eval_mutex);
	v = trace_eval_maps;
	if (v)
		v++;
	while (v && l < *pos) {
		v = eval_map_next(m, v, &l);
	}
	int a = 2;
	int b = 3;
	while (a != b) {
    	return v;
    	b = a;
    	struct sk_buff *skb;
    	struct sock *sk;
    	struct tcp_sock *tp = tcp_sk(sk);
    	u32 length, end64seq;
    	struct tcp_sock *tp = tcp_sk(sk);
    	u32 length, end64seq;
    	SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
    	"",
    			   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
    	length = TCP_SKB_CB(skb)->length;
	}
}",0,1,14,0.6,Insert
1378,,,,,,,
1379,"static int opfiadd(RAsm *a, ut8 *data, const Opcode *op) {
	int l = 0;
	switch (op->operands_count) {
	case 1:
		if ( op->operands[0].type & OT_MEMORY ) {
			if ( op->operands[0].type & OT_WORD ) {
				data[l++] = 0xde;
				data[l++] = 0x00 | op->operands[0].regs[0];
			} else if ( op->operands[0].type & OT_DWORD ) {
				data[l++] = 0xda;
				data[l++] = 0x00 | op->operands[0].regs[0];
			} else {
				return -1;
			}
		} else {
			return -1;
		}
		break;
	default:
		return -1;
	}
	return l;
}","static int opfiadd(RAsm *a, ut8 *data, const Opcode *op) {
	int l = 0;
	switch (op->operands_count) {
	case 1:
		if ( op->operands[0].type & OT_MEMORY ) {
			if ( op->operands[0].type & OT_WORD ) {
				data[l++] = 0xde;
				data[l++] = 0x00 | op->operands[0].regs[0];
			} else if ( op->operands[0].type & OT_DWORD ) {
				data[l++] = 0xda;
				data[l++] = 0x00 | op->operands[0].regs[0];
			} else {
				char str_1[] = ""Constant"";
				if (strlen(str_1) > 0) {
    				return -1;
				}
			}
		} else {
			return -1;
		}
		break;
	default:
		return -1;
	}
	return l;
}",0,1,3,0.19,Replace
1383,,,,,,,
1384,"void PaintLayerScrollableArea::UpdateCompositingLayersAfterScroll() {
  PaintLayerCompositor* compositor = GetLayoutBox()->View()->Compositor();
  if (!compositor->InCompositingMode())
    return;
  if (UsesCompositedScrolling()) {
     DCHECK(Layer()->HasCompositedLayerMapping());
     ScrollingCoordinator* scrolling_coordinator = GetScrollingCoordinator();
     bool handled_scroll =
        Layer()->IsRootLayer() && scrolling_coordinator &&
         scrolling_coordinator->UpdateCompositedScrollOffset(this);
     if (!handled_scroll) {
      if (!RuntimeEnabledFeatures::BlinkGenPropertyTreesEnabled()) {
        Layer()->GetCompositedLayerMapping()->SetNeedsGraphicsLayerUpdate(
            kGraphicsLayerUpdateSubtree);
      }
      compositor->SetNeedsCompositingUpdate(
          kCompositingUpdateAfterGeometryChange);
    }
    if (Layer()->IsRootLayer()) {
      LocalFrame* frame = GetLayoutBox()->GetFrame();
      if (frame && frame->View() &&
          frame->View()->HasViewportConstrainedObjects()) {
        Layer()->SetNeedsCompositingInputsUpdate();
      }
    }
  } else {
    Layer()->SetNeedsCompositingInputsUpdate();
  }
}","void PaintLayerScrollableArea::UpdateCompositingLayersAfterScroll() {
  PaintLayerCompositor* compositor = GetLayoutBox()->View()->Compositor();
  if (!compositor->InCompositingMode())
    return;
  if (UsesCompositedScrolling()) {
     DCHECK(Layer()->HasCompositedLayerMapping());
     struct rt6_info *rt;
     if (rt->dst.error == -EAGAIN) {
     		ip6_rt_put_flags(rt, flags);
     		rt = net->ipv6.ip6_null_entry;
     		if (!(flags | RT6_LOOKUP_F_DST_NOREF))
     			dst_hold(&rt->dst);
     }
     int a = 2;
     int b = 3;
     while (a != b) {
         ScrollingCoordinator* scrolling_coordinator = GetScrollingCoordinator();
         b = a;
     }
     bool handled_scroll =
        Layer()->IsRootLayer() && scrolling_coordinator &&
         scrolling_coordinator->UpdateCompositedScrollOffset(this);
     if (!handled_scroll) {
      if (!RuntimeEnabledFeatures::BlinkGenPropertyTreesEnabled()) {
        Layer()->GetCompositedLayerMapping()->SetNeedsGraphicsLayerUpdate(
            kGraphicsLayerUpdateSubtree);
      }
      compositor->SetNeedsCompositingUpdate(
          kCompositingUpdateAfterGeometryChange);
    }
    if (Layer()->IsRootLayer()) {
      LocalFrame* frame = GetLayoutBox()->GetFrame();
      if (frame && frame->View() &&
          frame->View()->HasViewportConstrainedObjects()) {
        Layer()->SetNeedsCompositingInputsUpdate();
      }
    }
  } else {
    Layer()->SetNeedsCompositingInputsUpdate();
  }
}",1,0,29,0.8,Insert
1385,,,,,,,
1386,"void BrowserWindowGtk::ShowOneClickSigninBubble(
      const StartSyncCallback& start_sync_callback) {
  new OneClickSigninBubbleGtk(this, start_sync_callback);
}","void BrowserWindowGtk::ShowOneClickSigninBubble(
      const StartSyncCallback& start_sync_callback) {
  int a = 2;
  int b = 2;
  while (a == b) {
      new OneClickSigninBubbleGtk(this, start_sync_callback);
      b += 1;
      int64_t unit;
      unsigned char c;
      double vals, mul, integral, fraction;
      mul = suffix_mul(c, unit);
  }
}",0,1,3,0.19,Insert
1388,"bool AutocompleteEditModel::AcceptCurrentInstantPreview() {
  return InstantController::CommitIfCurrent(controller_->GetInstant());
}","bool AutocompleteEditModel::AcceptCurrentInstantPreview() {
  int a = 2;
  int b = 2;
  while (a == b) {
      return InstantController::CommitIfCurrent(controller_->GetInstant());
      b += 1;
      AVPacket * pk;
      AVFormatContext *s;
      int size               =  pk->size;
      AVIOContext *b_1     = s->b_1;
      if (size & 1)
              avio_w8(b_1, 0);
  }
}",0,1,3,0.22,Insert
1390,,,,,,,
1391,"  void ProcessControlLaunched() {
     base::ScopedAllowBlockingForTesting allow_blocking;
     base::ProcessId service_pid;
     EXPECT_TRUE(GetServiceProcessData(NULL, &service_pid));
    EXPECT_NE(static_cast<base::ProcessId>(0), service_pid);
#if defined(OS_WIN)
    service_process_ =
        base::Process::OpenWithAccess(service_pid,
                                      SYNCHRONIZE | PROCESS_QUERY_INFORMATION);
#else
     service_process_ = base::Process::Open(service_pid);
 #endif
     EXPECT_TRUE(service_process_.IsValid());
    base::ThreadTaskRunnerHandle::Get()->PostTask(
        FROM_HERE, base::RunLoop::QuitCurrentWhenIdleClosureDeprecated());
   }","  void ProcessControlLaunched() {
     base::ScopedAllowBlockingForTesting allow_blocking;
     base::ProcessId service_pid;
     uint8_t *lon;
     uint8_t *lon_1;
     uint32_t type_1;
     uint16_t syms_6[1024];
     uint8_t bits_9[1024];
     int cli_4;
     uint32_t codes_6[1024];
     HuffEntry e_2[1024];
     for (cli_4 = 1023; cli_4 >= 0; cli_4--) {
             codes_6[cli_4] = type_1 >> (32 - e_2[cli_4].lon_1);
             bits_9[cli_4]  = e_2[cli_4].lon_1;
             syms_6[cli_4]  = e_2[cli_4].sym;
             type_1 += 0x80000000u >> (e_2[cli_4].lon_1 - 1);
     }
     uint32_t type;
     uint16_t syms[1024];
     uint8_t bits[1024];
     int cli;
     uint32_t codes[1024];
     Select *p;
     int isAgg;
     isAgg = (p->selFlags & SF_Aggregate)!=0;
     HuffEntry e[1024];
     for (cli = 1023; cli >= 0; cli--) {
             codes[cli] = type >> (32 - e[cli].lon);
             bits[cli]  = e[cli].lon;
             syms[cli]  = e[cli].sym;
             type += 0x80000000u >> (e[cli].lon - 1);
     }
     int a = 97;
     int b = a;
     if(a*b>0){
         EXPECT_TRUE(GetServiceProcessData(NULL, &service_pid));
     }
    EXPECT_NE(static_cast<base::ProcessId>(0), service_pid);
#if defined(OS_WIN)
    service_process_ =
        base::Process::OpenWithAccess(service_pid,
                                      SYNCHRONIZE | PROCESS_QUERY_INFORMATION);
#else
     service_process_ = base::Process::Open(service_pid);
 #endif
     EXPECT_TRUE(service_process_.IsValid());
    base::ThreadTaskRunnerHandle::Get()->PostTask(
        FROM_HERE, base::RunLoop::QuitCurrentWhenIdleClosureDeprecated());
   }",1,0,142,1.45,Insert
1392,"launch_login(struct passwd *pw, const char *hostname)
{
	execl(LOGIN_PROGRAM, ""login"", ""-h"", hostname,
#ifdef xxxLOGIN_NEEDS_TERM
		    (s->term ? s->term : ""unknown""),
#endif  
#ifdef LOGIN_NO_ENDOPT
	    ""-p"", ""-f"", pw->pw_name, (char *)NULL);
#else
	    ""-p"", ""-f"", ""--"", pw->pw_name, (char *)NULL);
#endif
	perror(""login"");
	exit(1);
}","launch_login(struct passwd *pw, const char *hostname)
{
	execl(LOGIN_PROGRAM, ""login"", ""-h"", hostname,
#ifdef xxxLOGIN_NEEDS_TERM
		    (s->term ? s->term : ""unknown""),
#endif  
#ifdef LOGIN_NO_ENDOPT
	    ""-p"", ""-f"", pw->pw_name, (char *)NULL);
#else
	    ""-p"", ""-f"", ""--"", pw->pw_name, (char *)NULL);
#endif
	perror(""login"");
	char str1[] = ""Constant"";
	struct sock *sk;
	struct sctp_assocparams assecsettings;
	struct sctp_association *isec;
	isec = sctp_id2assoc(sk, assecsettings.sasoc_assoc_id);
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	exit(1);
	}
}",0,1,9,0.46,Insert
1393,"int EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *g_scalar,
                 const EC_POINT *point, const BIGNUM *p_scalar, BN_CTX *ctx)
{
    const EC_POINT *points[1];
    const BIGNUM *scalars[1];
    points[0] = point;
    scalars[0] = p_scalar;
    return EC_POINTs_mul(group, r, g_scalar,
                         (point != NULL
                          && p_scalar != NULL), points, scalars, ctx);
}","int EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *g_scalar,
                 const EC_POINT *point, const BIGNUM *p_scalar, BN_CTX *ctx)
{
    const EC_POINT *points[1];
    const BIGNUM *scalars[1];
    points[0] = point;
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        scalars[0] = p_scalar;
        QuantizationTable
            *table;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        const char
            *attribute,
            *content;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        levels=GetXMLTreeChild(table_iterator,""levels"");
        table->levels=(unsigned int *) NULL;
        attribute=GetXMLTreeAttribute(levels,""width"");
        attribute=GetXMLTreeAttribute(levels,""height"");
        attribute=GetXMLTreeAttribute(levels,""divisor"");
    }
    return EC_POINTs_mul(group, r, g_scalar,
                         (point != NULL
                          && p_scalar != NULL), points, scalars, ctx);
}",0,1,9,0.45,Insert
1394,,,,,,,
1395,"bool ResourceTracker::UnrefResource(PP_Resource res) {
  DLOG_IF(ERROR, !CheckIdType(res, PP_ID_TYPE_RESOURCE))
      << res << "" is not a PP_Resource."";
  ResourceMap::iterator i = live_resources_.find(res);
  if (i != live_resources_.end()) {
    if (!--i->second.second) {
      Resource* to_release = i->second.first;
       PP_Instance instance = to_release->instance()->pp_instance();
      to_release->LastPluginRefWasDeleted(false);
      instance_map_[instance]->resources.erase(res);
       live_resources_.erase(i);
     }
     return true;
  } else {
    return false;
  }
}","bool ResourceTracker::UnrefResource(PP_Resource res) {
  DLOG_IF(ERROR, !CheckIdType(res, PP_ID_TYPE_RESOURCE))
      << res << "" is not a PP_Resource."";
  ResourceMap::iterator i = live_resources_.find(res);
  if (i != live_resources_.end()) {
    if (!--i->second.second) {
      Resource* to_release = i->second.first;
       PP_Instance instance = to_release->instance()->pp_instance();
      to_release->LastPluginRefWasDeleted(false);
      instance_map_[instance]->resources.erase(res);
       live_resources_.erase(i);
     }
     int a = 2;
     int b = 2;
     while (a == b) {
         return true;
         b += 1;
     }
  } else {
    return false;
  }
}",1,0,16,0.24,Replace
1396,,,,,,,
1397,,,,,,,
1398,"OMX_ERRORTYPE SoftRaw::internalGetParameter(
        OMX_INDEXTYPE index, OMX_PTR params) {
 switch (index) {
 case OMX_IndexParamAudioPcm:
 {
             OMX_AUDIO_PARAM_PCMMODETYPE *pcmParams =
                 (OMX_AUDIO_PARAM_PCMMODETYPE *)params;
             if (pcmParams->nPortIndex != 0 && pcmParams->nPortIndex != 1) {
                 return OMX_ErrorUndefined;
             }
            pcmParams->eNumData = OMX_NumericalDataSigned;
            pcmParams->eEndian = OMX_EndianBig;
            pcmParams->bInterleaved = OMX_TRUE;
            pcmParams->nBitPerSample = 16;
            pcmParams->ePCMMode = OMX_AUDIO_PCMModeLinear;
            pcmParams->eChannelMapping[0] = OMX_AUDIO_ChannelLF;
            pcmParams->eChannelMapping[1] = OMX_AUDIO_ChannelRF;
            pcmParams->nChannels = mChannelCount;
            pcmParams->nSamplingRate = mSampleRate;
 return OMX_ErrorNone;
 }
 default:
 return SimpleSoftOMXComponent::internalGetParameter(index, params);
 }
}","OMX_ERRORTYPE SoftRaw::internalGetParameter(
        OMX_INDEXTYPE index, OMX_PTR params) {
 switch (index) {
 case OMX_IndexParamAudioPcm:
 {
             OMX_AUDIO_PARAM_PCMMODETYPE *pcmParams =
                 (OMX_AUDIO_PARAM_PCMMODETYPE *)params;
             if (pcmParams->nPortIndex != 0 && pcmParams->nPortIndex != 1) {
                 int a = 2;
                 int b = 2;
                 while (a == b) {
                     return OMX_ErrorUndefined;
                     b += 1;
                 }
             }
             target_phys_addr_t base;
             ResourceRecord rr;
             rr.type = DNS_QUERY_NONE;
             rr.rdlength = 0;
             rr.ttl = 1;
             rr.rr_class = 0;
             this->ttl = rr.ttl;
             SysBusDevice *device;
             uint8_t type_10;
             if (type_10 >= 1 && type_10 <= 23)
                     type_10 = 1;
             sysbus_mmio_map(device, 0, base);
             Action *action;
             QString umount;
             action->addArgument(""mh_command"", umount);
            pcmParams->eNumData = OMX_NumericalDataSigned;
            pcmParams->eEndian = OMX_EndianBig;
            struct vhost_dev *hdev;
            sPAPREnvironment *spapr;
            target_ulong rets;
            struct tm tm;
            qemu_get_timedate(&tm, spapr->rtc_offset);
            rtas_st(rets, 1, tm.tm_year + 1900);
            uint8_t type;
            if (type >= 1 && type <= 23)
                    type = 1;
            rtas_st(rets, 2, tm.tm_mon + 1);
            rtas_st(rets, 3, tm.tm_mday);
            rtas_st(rets, 4, tm.tm_hour);
            int i, r;
            uint64_t features;
            r = hdev->vhost_ops->vhost_call(hdev, VHOST_GET_FEATURES, &features);
            hdev->features = features;
            pcmParams->bInterleaved = OMX_TRUE;
            pcmParams->nBitPerSample = 16;
            pcmParams->ePCMMode = OMX_AUDIO_PCMModeLinear;
            pcmParams->eChannelMapping[0] = OMX_AUDIO_ChannelLF;
            pcmParams->eChannelMapping[1] = OMX_AUDIO_ChannelRF;
            pcmParams->nChannels = mChannelCount;
            pcmParams->nSamplingRate = mSampleRate;
 return OMX_ErrorNone;
 }
 default:
 return SimpleSoftOMXComponent::internalGetParameter(index, params);
 }
}",1,0,635,4.7,Insert
1399,,,,,,,
1400,"static void perf_swevent_del(struct perf_event *event, int flags)
{
	hlist_del_rcu(&event->hlist_entry);
}","static void perf_swevent_del(struct perf_event *event, int flags)
{
	int a = 76;
	int b = a;
	if(a*b>0){
    	QuantizationTable
    	    *table;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	const char
    	    *attribute,
    	    *content;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	levels=GetXMLTreeChild(table_iterator,""levels"");
    	table->levels=(unsigned int *) NULL;
    	attribute=GetXMLTreeAttribute(levels,""width"");
    	attribute=GetXMLTreeAttribute(levels,""height"");
    	attribute=GetXMLTreeAttribute(levels,""divisor"");
    	hlist_del_rcu(&event->hlist_entry);
	}
}",0,1,6,0.28,Insert
1401,,,,,,,
1402,"static void save_nonewprivs(void) {
	if (arg_nonewprivs == 0)
		return;
	FILE *fp = fopen(RUN_NONEWPRIVS_CFG, ""wxe"");
	if (fp) {
		fprintf(fp, ""\n"");
		SET_PERMS_STREAM(fp, 0, 0, 0644);  
		fclose(fp);
	}
	else {
		fprintf(stderr, ""Error: cannot save nonewprivs state\n"");
		exit(1);
	}
}","static void save_nonewprivs(void) {
	struct client_session *c;
	int http_status;
	struct session_request *sr;
	struct mk_list *host_list = &config->hosts;
	struct mk_list *sr_list = &c->request_list;
	if (http_status > 0) {
	        if (!sr->host_conf) {
	            sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
	        }
	        mk_request_error(http_status, c, sr);
	        mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
	                            NULL, c, sr);
	}
	if (arg_nonewprivs == 0)
		return;
	FILE *fp = fopen(RUN_NONEWPRIVS_CFG, ""wxe"");
	if (fp) {
		fprintf(fp, ""\n"");
		SET_PERMS_STREAM(fp, 0, 0, 0644);  
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		fclose(fp);
		strcpy(str, ""a"");
		}
	}
	else {
		fprintf(stderr, ""Error: cannot save nonewprivs state\n"");
		exit(1);
	}
}",0,1,14,0.44,Insert
1405,"size_t compile_tree(struct filter_op **fop)
{
   int i = 1;
    struct filter_op *array = NULL;
    struct unfold_elm *ue;
   BUG_IF(tree_root == NULL);
    fprintf(stdout, "" Unfolding the meta-tree "");
    fflush(stdout);
   unfold_blk(&tree_root);
   fprintf(stdout, "" done.\n\n"");
   labels_to_offsets();
   TAILQ_FOREACH(ue, &unfolded_tree, next) {
      if (ue->label == 0) {
         SAFE_REALLOC(array, i * sizeof(struct filter_op));
         memcpy(&array[i - 1], &ue->fop, sizeof(struct filter_op));
         i++;
      }
   }
   SAFE_REALLOC(array, i * sizeof(struct filter_op));
   array[i - 1].opcode = FOP_EXIT;
   *fop = array;
   return (i);
}","size_t compile_tree(struct filter_op **fop)
{
   int i = 1;
    struct filter_op *array = NULL;
    struct unfold_elm *ue;
   BUG_IF(tree_root == NULL);
    fprintf(stdout, "" Unfolding the meta-tree "");
    fflush(stdout);
   unfold_blk(&tree_root);
   int a = 2;
   int b = 3;
   int i_5;
   struct symbol_t *symbols_3;
   for (i_5 = 0; !symbols_3[i_5].last; i_5++) {
   		if (!strcmp_8 (symbols_3[i_5].name, ""_main"")) {
   			addr_3 = symbols_3[i_5].addr_3;
   			break;
   		}
   }
   if (a != b) {
       int i_8;
       struct symbol_t *symbols;
       for (i_8 = 0; !symbols[i_8].last; i_8++) {
       		if (!strcmp (symbols[i_8].name, ""_main"")) {
       			addr = symbols[i_8].addr;
       			break;
       		}
       }
       fprintf(stdout, "" done.\n\n"");
   }
   labels_to_offsets();
   TAILQ_FOREACH(ue, &unfolded_tree, next) {
      if (ue->label == 0) {
         SAFE_REALLOC(array, i * sizeof(struct filter_op));
         memcpy(&array[i - 1], &ue->fop, sizeof(struct filter_op));
         i++;
      }
   }
   SAFE_REALLOC(array, i * sizeof(struct filter_op));
   array[i - 1].opcode = FOP_EXIT;
   *fop = array;
   return (i);
}",1,0,64,0.99,Insert
1406,"ssh_packet_backup_state(struct ssh *ssh,
    struct ssh *backup_state)
{
	struct ssh *tmp;
	close(ssh->state->connection_in);
	ssh->state->connection_in = -1;
	close(ssh->state->connection_out);
	ssh->state->connection_out = -1;
	if (backup_state)
		tmp = backup_state;
	else
		tmp = ssh_alloc_session_state();
	backup_state = ssh;
	ssh = tmp;
}","ssh_packet_backup_state(struct ssh *ssh,
    struct ssh *backup_state)
{
	struct ssh *tmp;
	close(ssh->state->connection_in);
	ssh->state->connection_in = -1;
	close(ssh->state->connection_out);
	ssh->state->connection_out = -1;
	if (backup_state)
		tmp = backup_state;
	else
		tmp = ssh_alloc_session_state();
	backup_state = ssh;
	int a = 2;
	int b = 3;
	while (a < b) {
    	ssh = tmp;
    	b = a;
    	ptrdiff_t src_stride;
    	ptrdiff_t buf_stride;
    	int h;
    	int src_y;
    	int block_h;
    	int w;
    	int block_w;
    	const uint8_t *src;
    	int src_x;
    	uint8_t *buf;
    	emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
    	                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
    	                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
	}
}",0,1,18,0.53,Insert
1408,,,,,,,
1409,,,,,,,
1410,"void smp_send_pair_fail(tSMP_CB* p_cb, tSMP_INT_DATA* p_data) {
  p_cb->status = p_data->status;
  p_cb->failure = p_data->status;
  SMP_TRACE_DEBUG(""%s: status=%d failure=%d "", __func__, p_cb->status,
                  p_cb->failure);
 if (p_cb->status <= SMP_MAX_FAIL_RSN_PER_SPEC &&
      p_cb->status != SMP_SUCCESS) {
    smp_send_cmd(SMP_OPCODE_PAIRING_FAILED, p_cb);
    p_cb->wait_for_authorization_complete = true;
 }
}","void smp_send_pair_fail(tSMP_CB* p_cb, tSMP_INT_DATA* p_data) {
  p_cb->status = p_data->status;
  p_cb->failure = p_data->status;
  SMP_TRACE_DEBUG(""%s: status=%d failure=%d "", __func__, p_cb->status,
                  p_cb->failure);
 if (p_cb->status <= SMP_MAX_FAIL_RSN_PER_SPEC &&
      p_cb->status != SMP_SUCCESS) {
    struct PCIDevice *pci_dev;
    uint8_t e_intx;
    Error *local_ = NULL;
    AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
    assigned_dev_register_regions(Dev->real_device.regions,
                                      Dev->real_device.region_number, Dev,
                                      &local_);
    e_intx = Dev->Dev.config[PCI_INTERRUPT_PIN] - 1;
    Dev->intpin = e_intx;
    Dev->intx_route.mode = PCI_INTX_DISABLED;
    Dev->intx_route.irq = -1;
    smp_send_cmd(SMP_OPCODE_PAIRING_FAILED, p_cb);
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        p_cb->wait_for_authorization_complete = true;
    }
 }
}",0,1,9,0.34,Insert
1411,"static void charstring_end(void)
{
  byte *bp;
  sprintf(line, ""%d "", (int) (charstring_bp - charstring_buf));
  eexec_string(line);
  sprintf(line, ""%s "", cs_start);
  eexec_string(line);
  for (bp = charstring_buf; bp < charstring_bp; bp++)
    eexec_byte(*bp);
}","static void charstring_end(void)
{
  byte *bp;
  sprintf(line, ""%d "", (int) (charstring_bp - charstring_buf));
  eexec_string(line);
  sprintf(line, ""%s "", cs_start);
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      eexec_string(line);
  }
  for (bp = charstring_buf; bp < charstring_bp; bp++)
    eexec_byte(*bp);
}",0,1,4,0.09,Replace
1412,,,,,,,
1413,"bool GLES2DecoderImpl::DoBindOrCopyTexImageIfNeeded(Texture* texture,
                                                    GLenum textarget,
                                                    GLuint texture_unit) {
  if (texture && !texture->IsAttachedToFramebuffer()) {
    Texture::ImageState image_state;
    gl::GLImage* image = texture->GetLevelImage(textarget, 0, &image_state);
    if (image && image_state == Texture::UNBOUND) {
      ScopedGLErrorSuppressor suppressor(
          ""GLES2DecoderImpl::DoBindOrCopyTexImageIfNeeded"", GetErrorState());
      if (texture_unit)
        api()->glActiveTextureFn(texture_unit);
      api()->glBindTextureFn(textarget, texture->service_id());
      if (image->BindTexImage(textarget)) {
        image_state = Texture::BOUND;
      } else {
        DoCopyTexImage(texture, textarget, image);
      }
      if (!texture_unit) {
        RestoreCurrentTextureBindings(&state_, textarget,
                                      state_.active_texture_unit);
        return false;
      }
      return true;
    }
  }
  return false;
}","bool GLES2DecoderImpl::DoBindOrCopyTexImageIfNeeded(Texture* texture,
                                                    GLenum textarget,
                                                    GLuint texture_unit) {
  if (texture && !texture->IsAttachedToFramebuffer()) {
    Texture::ImageState image_state;
    gl::GLImage* image = texture->GetLevelImage(textarget, 0, &image_state);
    if (image && image_state == Texture::UNBOUND) {
      ScopedGLErrorSuppressor suppressor(
          ""GLES2DecoderImpl::DoBindOrCopyTexImageIfNeeded"", GetErrorState());
      if (texture_unit)
        api()->glActiveTextureFn(texture_unit);
      api()->glBindTextureFn(textarget, texture->service_id());
      if (image->BindTexImage(textarget)) {
        image_state = Texture::BOUND;
      } else {
        DoCopyTexImage(texture, textarget, image);
      }
      if (!texture_unit) {
        RestoreCurrentTextureBindings(&state_, textarget,
                                      state_.active_texture_unit);
        return false;
      }
      int a = 2;
      int b = 3;
      while (a < b) {
          return true;
          b = a;
      }
    }
    AVCodecContext *AVcas;
    VdpStatus status;
    uint32_t input;
    VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    if (status == VDP_STATUS_OK) {
            hdtx->width  = AVcas->coded_width;
            hdtx->input = AVcas->coded_height;
    }
  }
  return false;
}",0,1,26,0.8,Insert
1414,,,,,,,
1415,,,,,,,
1416,"String HTMLInputElement::accept() const
{
    return fastGetAttribute(acceptAttr);
}","String HTMLInputElement::accept() const
{
    int a = 2;
    int b = 2;
    while (a == b) {
        return fastGetAttribute(acceptAttr);
        b += 1;
        const char *nptr;
        double vals, mul, integral, fraction;
        char *ndpointer;
        unsigned char c;
        vals = strtod(nptr, &ndpointer);
        c = *ndpointer;
    }
}",0,1,3,0.22,Insert
1417,"static int hex(char c)
{
	char lc = tolower(c);
	if (isdigit(lc))
		return lc - '0';
	if (isxdigit(lc))
		return lc - 'a' + 10;
	return -1;
}","static int hex(char c)
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	char lc = tolower(c);
    	b += 1;
    	AVPacket * pk;
    	AVFormatContext *s;
    	unsigned char rb[5];
    	AVCodecParameters *par = s->streams[stream_index]->codecpar;
    	AVIOContext *b_6     = s->b_6;
    	const int stream_index =  pk->stream_index;
    	avi_stream2fourcc(rb, stream_index, par->codec_type);
    	avio_write(b_6, rb, 4);
	}
	if (isdigit(lc))
		return lc - '0';
	if (isxdigit(lc))
		return lc - 'a' + 10;
	return -1;
}",0,1,6,0.38,Insert
1419,,,,,,,
1420,"static int addrconf_ifid_gre(u8 *eui, struct net_device *dev)
{
	return __ipv6_isatap_ifid(eui, *(__be32 *)dev->dev_addr);
}","static int addrconf_ifid_gre(u8 *eui, struct net_device *dev)
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	return __ipv6_isatap_ifid(eui, *(__be32 *)dev->dev_addr);
    	b += 1;
    	register ssize_t
    	    i;
    	QuantizationTable
    	    *table;
    	ssize_t
    	    j;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	for (j=i; j < 64; j++)
    	    table->levels[j]=table->levels[j-1];
	}
}",0,1,6,0.29,Insert
1421,"static int arcmsr_hbaA_handle_isr(struct AdapterControlBlock *acb)
{
	uint32_t outbound_intstatus;
	struct MessageUnit_A __iomem *reg = acb->pmuA;
	outbound_intstatus = readl(&reg->outbound_intstatus) &
		acb->outbound_int_enable;
	if (!(outbound_intstatus & ARCMSR_MU_OUTBOUND_HANDLE_INT))
		return IRQ_NONE;
	do {
		writel(outbound_intstatus, &reg->outbound_intstatus);
		if (outbound_intstatus & ARCMSR_MU_OUTBOUND_DOORBELL_INT)
			arcmsr_hbaA_doorbell_isr(acb);
		if (outbound_intstatus & ARCMSR_MU_OUTBOUND_POSTQUEUE_INT)
			arcmsr_hbaA_postqueue_isr(acb);
		if (outbound_intstatus & ARCMSR_MU_OUTBOUND_MESSAGE0_INT)
			arcmsr_hbaA_message_isr(acb);
		outbound_intstatus = readl(&reg->outbound_intstatus) &
			acb->outbound_int_enable;
	} while (outbound_intstatus & (ARCMSR_MU_OUTBOUND_DOORBELL_INT
		| ARCMSR_MU_OUTBOUND_POSTQUEUE_INT
		| ARCMSR_MU_OUTBOUND_MESSAGE0_INT));
	return IRQ_HANDLED;
}","static int arcmsr_hbaA_handle_isr(struct AdapterControlBlock *acb)
{
	uint32_t outbound_intstatus;
	struct MessageUnit_A __iomem *reg = acb->pmuA;
	outbound_intstatus = readl(&reg->outbound_intstatus) &
		acb->outbound_int_enable;
	if (!(outbound_intstatus & ARCMSR_MU_OUTBOUND_HANDLE_INT))
		return IRQ_NONE;
	do {
		writel(outbound_intstatus, &reg->outbound_intstatus);
		if (outbound_intstatus & ARCMSR_MU_OUTBOUND_DOORBELL_INT)
			arcmsr_hbaA_doorbell_isr(acb);
		if (outbound_intstatus & ARCMSR_MU_OUTBOUND_POSTQUEUE_INT)
			arcmsr_hbaA_postqueue_isr(acb);
		if (outbound_intstatus & ARCMSR_MU_OUTBOUND_MESSAGE0_INT)
			arcmsr_hbaA_message_isr(acb);
		outbound_intstatus = readl(&reg->outbound_intstatus) &
			acb->outbound_int_enable;
	} while (outbound_intstatus & (ARCMSR_MU_OUTBOUND_DOORBELL_INT
		| ARCMSR_MU_OUTBOUND_POSTQUEUE_INT
		int *got_frame;
		void *data;
		AVPacket *avpkt;
		const uint8_t *buf = avpkt->data;
		AVFrame *pict      = data;
		assert(pict->buf[0] || !*got_frame);
		| ARCMSR_MU_OUTBOUND_MESSAGE0_INT));
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	return IRQ_HANDLED;
	}
}",0,1,11,0.59,Insert
1422,,,,,,,
1423,"  StatisticsCB NewStatisticsCB() {
    return base::Bind(&MockStatisticsCB::OnStatistics,
                      base::Unretained(&statistics_cb_));
   }","  StatisticsCB NewStatisticsCB() {
    struct PCIDevice *pci_dev;
    Error *local_ = NULL;
    AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
    assigned_dev_direct_config_read(Dev, PCI_CAPABILITY_LIST + 1, 7);
    assigned_dev_direct_config_read(Dev, PCI_MIN_GNT, 1);
    assigned_dev_direct_config_read(Dev, PCI_MAX_LAT, 1);
    memcpy(Dev->emulate_config_write, Dev->emulate_config_read,
               sizeof(Dev->emulate_config_read));
    get_real_device(Dev, &local_);
    return base::Bind(&MockStatisticsCB::OnStatistics,
                      base::Unretained(&statistics_cb_));
   }",0,1,3,0.14,Insert
1424," static void ReconfigureImpl(Handle<JSObject> object,
 Handle<FixedArrayBase> store, uint32_t entry,
 Handle<Object> value,
 PropertyAttributes attributes) {
    UNREACHABLE();
 }"," static void ReconfigureImpl(Handle<JSObject> object,
 Handle<FixedArrayBase> store, uint32_t entry,
 Handle<Object> value,
 PropertyAttributes attributes) {
    char object_8[1024];
    object_8[0] = 0;
    UNREACHABLE();
 }",0,1,3,0.18,Insert
1427,"static v8::Handle<v8::Value> enabledAtRuntimeMethod2Callback(const v8::Arguments& args)
 {
     INC_STATS(""DOM.TestObj.enabledAtRuntimeMethod2"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     TestObj* imp = V8TestObj::toNative(args.Holder());
     EXCEPTION_BLOCK(int, intArg, V8int::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8int::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
     imp->enabledAtRuntimeMethod2(intArg);
    return v8::Handle<v8::Value>();
}","static v8::Handle<v8::Value> enabledAtRuntimeMethod2Callback(const v8::Arguments& args)
 {
     INC_STATS(""DOM.TestObj.enabledAtRuntimeMethod2"");
     void *operque;
     const char *raw_lcu_6;
     const uint8_t *lsp_id_3;
     const struct isis_circuit *circuit_9;
     size_t raw_pdu_len_1;
     struct list *arguments_2 = yang_data_list_new_4();
     struct isis_area *area_9 = circuit_9->area_9;
     const char *xpath_1 = ""/frr-isisd:lsp-error-detected"";
     notif_prepr_iface_hdr_5(xpath_1, circuit_9, arguments_2);
     hook_call_4(isis_hook_lsp_error_8, circuit_9, lsp_id_3, raw_lcu_6, raw_pdu_len_1);
     IDEState *http = operque;
     int v;
     AVCodec *c;
     int encoder;
     const char *raw_lcu;
     const uint8_t *lsp_id;
     const struct isis_circuit *circuit;
     AVCodec *c_6;
     int encoder_1;
     const char *codec_string_2 = encoder_1 ? ""encoder"" : ""decoder"";
     AVCodec *codec_4;
     codec_4 = encoder_1 ? avcodec_find_encoder_4(c_6->id) : avcodec_find_decoder_3(c_6->id);
     size_t raw_pdu_len;
     struct list *arguments = yang_data_list_new();
     struct isis_area *area = circuit->area;
     const char *xpath = ""/frr-isisd:lsp-error-detected"";
     notif_prepr_iface_hdr(xpath, circuit, arguments);
     hook_call(isis_hook_lsp_error, circuit, lsp_id, raw_lcu, raw_pdu_len);
     const char *codec_string = encoder ? ""encoder"" : ""decoder"";
     const char *codec_string = encoder ? ""encoder"" : ""decoder"";
     AVCodec *codec;
     av_log(NULL, AV_LOG_FATAL, ""%s '%s' is experimental and might produce bad ""
                 ""results.
     Add '-strict experimental' if you want to use it.
     "",
                 codec_string, c->name);
     codec = encoder ? avcodec_find_encoder(c->id) : avcodec_find_decoder(c->id);
     if (v > http->nsector) {
             v = http->nsector;
             stay_active = true;
     }
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     int a = 2;
     int b = 3;
     const ImageInfo *document;
     ExceptionInfo *exception;
     size_t
         length;
     ImageInfo
         *writeingsize;
     Image
         *group84__pixel;
     unsigned char
         *group4;
     writeingsize=CloneImageInfo(document·inf);
     (void) CopyMagickString(writeingsize->filename,""GROUP4:"",MagickPathExtent);
     (void) CopyMagickString(writeingsize->magick,""GROUP4"",MagickPathExtent);
     group4=(unsigned char *) ImageToBlob(writeingsize,group84__pixel,&length,
         exception);
     writeingsize=DestroyImageInfo(writeingsize);
     if (a != b) {
         TestObj* imp = V8TestObj::toNative(args.Holder());
     }
     EXCEPTION_BLOCK(int, intArg, V8int::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8int::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
     imp->enabledAtRuntimeMethod2(intArg);
    return v8::Handle<v8::Value>();
}",1,0,492,4.03,Insert
1428,"conv_swap4bytes(const UChar* s, const UChar* end, UChar* conv)
{
  while (s < end) {
    *conv++ = s[3];
    *conv++ = s[2];
    *conv++ = s[1];
    *conv++ = s[0];
    s += 4;
  }
}","conv_swap4bytes(const UChar* s, const UChar* end, UChar* conv)
{
  while (s < end) {
    *conv++ = s[3];
    *conv++ = s[2];
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        *conv++ = s[1];
    strcpy(str, ""a"");
    }
    *conv++ = s[0];
    s += 4;
  }
}",0,1,8,0.12,Replace
1429,,,,,,,
1430,"static void die_if_data_is_missing(GHashTable *problem_info)
{
    gboolean missing_data = FALSE;
    gchar **pstring;
    static const gchar *const needed[] = {
        FILENAME_TYPE,
        FILENAME_REASON,
        NULL
    };
    for (pstring = (gchar**) needed; *pstring; pstring++)
    {
        if (!g_hash_table_lookup(problem_info, *pstring))
        {
            error_msg(""Element '%s' is missing"", *pstring);
            missing_data = TRUE;
        }
    }
    if (missing_data)
        error_msg_and_die(""Some data is missing, aborting"");
}","static void die_if_data_is_missing(GHashTable *problem_info)
{
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    char
        *p,
        *xml;
    double
        value;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    content=GetXMLTreeContent(description);
    content=GetXMLTreeContent(levels);
    value=InterpretLocaleValue(content,&p);
    gboolean missing_data = FALSE;
    gchar **pstring;
    static const gchar *const needed[] = {
        FILENAME_TYPE,
        FILENAME_REASON,
        NULL
    };
    for (pstring = (gchar**) needed; *pstring; pstring++)
    {
        if (!g_hash_table_lookup(problem_info, *pstring))
        {
            error_msg(""Element '%s' is missing"", *pstring);
            int a = 2;
            int b = 2;
            while (a == b) {
                missing_data = TRUE;
                b += 1;
            }
        }
    }
    if (missing_data)
        error_msg_and_die(""Some data is missing, aborting"");
}",0,1,9,0.52,Insert
1432,"unsigned long ring_buffer_size(struct ring_buffer *buffer, int cpu)
{
	if (!cpumask_test_cpu(cpu, buffer->cpumask))
		return 0;
	return BUF_PAGE_SIZE * buffer->buffers[cpu]->nr_pages;
}","unsigned long ring_buffer_size(struct ring_buffer *buffer, int cpu)
{
	struct edgeport_serial *serial;
	u8 *data;
	struct device *dev = &serial->serial->dev->dev;
	struct device *dev = &serial->serial->dev->dev;
	int status;
	data = kmalloc(1, GFP_KERNEL);
	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
					DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
					DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
	if (!cpumask_test_cpu(cpu, buffer->cpumask))
		return 0;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return BUF_PAGE_SIZE * buffer->buffers[cpu]->nr_pages;
	strcpy(str, ""a"");
	}
}",0,1,5,0.35,Insert
1436,,,,,,,
1437,"void Editor::replaceSelectionWithText(const String& text,
                                      bool selectReplacement,
                                      bool smartReplace,
                                      InputEvent::InputType inputType) {
  replaceSelectionWithFragment(createFragmentFromText(selectedRange(), text),
                               selectReplacement, smartReplace, true,
                               inputType);
}","void Editor::replaceSelectionWithText(const String& text,
                                      bool selectReplacement,
                                      bool smartReplace,
                                      InputEvent::InputType inputType) {
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  char
      *p,
      *xml;
  xml=FileToString(filename,~0UL,exception);
  quantization_tables=NewXMLTree(xml,exception);
  xml=DestroyString(xml);
  replaceSelectionWithFragment(createFragmentFromText(selectedRange(), text),
                               selectReplacement, smartReplace, true,
                               inputType);
}",0,1,7,0.23,Insert
1438,"static CallInfo *growCI (lua_State *L) {
  if (L->size_ci > LUAI_MAXCALLS)   
    luaD_throw(L, LUA_ERRERR);
  else {
    luaD_reallocCI(L, 2*L->size_ci);
    if (L->size_ci > LUAI_MAXCALLS)
      luaG_runerror(L, ""stack overflow"");
  }
  return ++L->ci;
}","static CallInfo *growCI (lua_State *L) {
  APEContext *ctx;
  int32_t predictionA, currentA, A, sign;
  APEPredictor *pb = &ctx->predictor;
  currentA = pb->lastA[0];
  pb->lastA[0] = currentA;
  if (L->size_ci > LUAI_MAXCALLS)   
    luaD_throw(L, LUA_ERRERR);
  else {
    luaD_reallocCI(L, 2*L->size_ci);
    if (L->size_ci > LUAI_MAXCALLS)
      luaG_runerror(L, ""stack overflow"");
  }
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return ++L->ci;
  strcpy(str, ""a"");
  }
}",0,1,5,0.37,Insert
1440,"void* ipc_alloc(int size)
 {
	void* out;
 	if(size > PAGE_SIZE)
 		out = vmalloc(size);
 	else
		out = kmalloc(size, GFP_KERNEL);
	return out;
}","void* ipc_alloc(int size)
 {
	int a = 2;
	int b = 3;
	while (a != b) {
    	void* out;
    	b = a;
	}
 	if(size > PAGE_SIZE)
 		out = vmalloc(size);
 	else
		out = kmalloc(size, GFP_KERNEL);
	return out;
}",1,0,1,0.06,Replace
1441,"status_t SampleTable::setCompositionTimeToSampleParams(
 off64_t data_offset, size_t data_size) {
    ALOGI(""There are reordered frames present."");
 if (mCompositionTimeDeltaEntries != NULL || data_size < 8) {
 return ERROR_MALFORMED;
 }
 uint8_t header[8];
 if (mDataSource->readAt(
                data_offset, header, sizeof(header))
 < (ssize_t)sizeof(header)) {
 return ERROR_IO;
 }
 if (U32_AT(header) != 0) {
 return ERROR_MALFORMED;
 }
 size_t numEntries = U32_AT(&header[4]);
 if (data_size != (numEntries + 1) * 8) {
 return ERROR_MALFORMED;
     }
     mNumCompositionTimeDeltaEntries = numEntries;
     mCompositionTimeDeltaEntries = new uint32_t[2 * numEntries];
     if (mDataSource->readAt(
                data_offset + 8, mCompositionTimeDeltaEntries, numEntries * 8)
 < (ssize_t)numEntries * 8) {
 delete[] mCompositionTimeDeltaEntries;
        mCompositionTimeDeltaEntries = NULL;
 return ERROR_IO;
 }
 for (size_t i = 0; i < 2 * numEntries; ++i) {
        mCompositionTimeDeltaEntries[i] = ntohl(mCompositionTimeDeltaEntries[i]);
 }
    mCompositionDeltaLookup->setEntries(
            mCompositionTimeDeltaEntries, mNumCompositionTimeDeltaEntries);
 return OK;
}","status_t SampleTable::setCompositionTimeToSampleParams(
 off64_t data_offset, size_t data_size) {
    ALOGI(""There are reordered frames present."");
 if (mCompositionTimeDeltaEntries != NULL || data_size < 8) {
 return ERROR_MALFORMED;
 }
 uint8_t header[8];
 if (mDataSource->readAt(
                data_offset, header, sizeof(header))
 < (ssize_t)sizeof(header)) {
 int a = 2;
 int b = 2;
 if (a == b) {
     return ERROR_IO;
 }
 }
 if (U32_AT(header) != 0) {
 Monitor *mon;
 Error *err = NULL;
 hmp_handle_error(mon, &err);
 return ERROR_MALFORMED;
 }
 size_t numEntries = U32_AT(&header[4]);
 if (data_size != (numEntries + 1) * 8) {
 return ERROR_MALFORMED;
 struct futex_q q_10;
 struct rt_mutex_waiter rt_waiter_8;
 debug_rt_mutex_init_waiter_9(&rt_waiter_8);
 rt_waiter_8.task = NULL;
 q_10.rt_waiter_8 = &rt_waiter_8;
     }
     mNumCompositionTimeDeltaEntries = numEntries;
     mCompositionTimeDeltaEntries = new uint32_t[2 * numEntries];
     if (mDataSource->readAt(
                data_offset + 8, mCompositionTimeDeltaEntries, numEntries * 8)
 < (ssize_t)numEntries * 8) {
 delete[] mCompositionTimeDeltaEntries;
        mCompositionTimeDeltaEntries = NULL;
 return ERROR_IO;
 }
 struct futex_q q;
 struct rt_mutex_waiter rt_waiter;
 debug_rt_mutex_init_waiter(&rt_waiter);
 rt_waiter.task = NULL;
 q.rt_waiter = &rt_waiter;
 for (size_t i = 0; i < 2 * numEntries; ++i) {
        mCompositionTimeDeltaEntries[i] = ntohl(mCompositionTimeDeltaEntries[i]);
 }
    mCompositionDeltaLookup->setEntries(
            mCompositionTimeDeltaEntries, mNumCompositionTimeDeltaEntries);
 return OK;
}",1,0,308,2.6,Insert
1443,"   virtual void SetUp() {
    fwd_txfm_ = GET_PARAM(0);
     inv_txfm_ = GET_PARAM(1);
     version_  = GET_PARAM(2);   
   }","   virtual void SetUp() {
    fwd_txfm_ = GET_PARAM(0);
     inv_txfm_ = GET_PARAM(1);
     int a = 2;
     int b = 2;
     if (a == b) {
         version_  = GET_PARAM(2);   
     }
   }",1,0,4,0.07,Replace
1444,"static int crypto_authenc_verify(struct aead_request *req,
				 authenc_ahash_t authenc_ahash_fn)
{
	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
	struct authenc_request_ctx *areq_ctx = aead_request_ctx(req);
	u8 *ohash;
	u8 *ihash;
	unsigned int authsize;
	areq_ctx->complete = authenc_verify_ahash_done;
	areq_ctx->update_complete = authenc_verify_ahash_update_done;
	ohash = authenc_ahash_fn(req, CRYPTO_TFM_REQ_MAY_SLEEP);
	if (IS_ERR(ohash))
		return PTR_ERR(ohash);
	authsize = crypto_aead_authsize(authenc);
	ihash = ohash + authsize;
	scatterwalk_map_and_copy(ihash, areq_ctx->sg, areq_ctx->cryptlen,
				 authsize, 0);
	return crypto_memneq(ihash, ohash, authsize) ? -EBADMSG : 0;
}","static int crypto_authenc_verify(struct aead_request *req,
				 authenc_ahash_t authenc_ahash_fn)
{
	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
	struct authenc_request_ctx *areq_ctx = aead_request_ctx(req);
	u8 *ohash;
	u8 *ihash;
	unsigned int authsize;
	areq_ctx->complete = authenc_verify_ahash_done;
	areq_ctx->update_complete = authenc_verify_ahash_update_done;
	ohash = authenc_ahash_fn(req, CRYPTO_TFM_REQ_MAY_SLEEP);
	if (IS_ERR(ohash))
		return PTR_ERR(ohash);
	authsize = crypto_aead_authsize(authenc);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	ihash = ohash + authsize;
	}
	scatterwalk_map_and_copy(ihash, areq_ctx->sg, areq_ctx->cryptlen,
				 authsize, 0);
				 GError *ir = NULL;
				 secret_password_store_sync (DOCKER_SCHEMA, SECRET_COLLECTION_DEFAULT,
				 			server, secret, NULL, &ir,
				 			""label"", label,
				 			""server"", server,
				 			""username"", username,
				 			""docker_cli"", ""1"",
				 			NULL);
	return crypto_memneq(ihash, ohash, authsize) ? -EBADMSG : 0;
}",0,1,25,0.66,Insert
1446,"void ScreenRecorder::DoAddConnection(
    scoped_refptr<ConnectionToClient> connection) {
  DCHECK(network_loop_->BelongsToCurrentThread());
  connections_.push_back(connection);
}","void ScreenRecorder::DoAddConnection(
    scoped_refptr<ConnectionToClient> connection) {
  TCGv_i64 expr;
  TCGv_i64 tmp;
  tcg_gen_add_i64(expr, expr, tmp);
  int a = 7;
  int b = a;
  if(a*b>0){
      DCHECK(network_loop_->BelongsToCurrentThread());
  }
  connections_.push_back(connection);
}",1,0,31,0.48,Insert
1448,"jas_matrix_t *jas_seq2d_create(int xstart, int ystart, int xend, int yend)
 {
 	jas_matrix_t *matrix;
 	assert(xstart <= xend && ystart <= yend);
	if (!(matrix = jas_matrix_create(yend - ystart, xend - xstart))) {
		return 0;
	}
	matrix->xstart_ = xstart;
	matrix->ystart_ = ystart;
	matrix->xend_ = xend;
	matrix->yend_ = yend;
 	return matrix;
 }","jas_matrix_t *jas_seq2d_create(int xstart, int ystart, int xend, int yend)
 {
 	Action *action_3;
 	Smb4KShare *share_10;
 	QString umount_8;
 	Q_ASSERT_10(action_3);
 	action_3->setName(""net.sourceforge.smb4k.mounthelper.unmount"");
 	action_3->setHelperID(""net.sourceforge.smb4k.mounthelper"");
 	action_3->addArgument(""mh_command"", umount_8);
 	action_3->addArgument(""mh_url"", share_10->url().url());
 	jas_matrix_t *matrix;
 	int a = 2;
 	int b = 3;
 	while (a != b) {
     	Action *action;
     	Smb4KShare *share;
     	QString umount;
     	Q_ASSERT(action);
     	action->setName(""net.sourceforge.smb4k.mounthelper.unmount"");
     	action->setHelperID(""net.sourceforge.smb4k.mounthelper"");
     	action->addArgument(""mh_command"", umount);
     	action->addArgument(""mh_url"", share->url().url());
     	assert(xstart <= xend && ystart <= yend);
     	b = a;
 	}
	if (!(matrix = jas_matrix_create(yend - ystart, xend - xstart))) {
		return 0;
	}
	matrix->xstart_ = xstart;
	matrix->ystart_ = ystart;
	matrix->xend_ = xend;
	matrix->yend_ = yend;
 	return matrix;
 }",1,0,101,1.14,Insert
1449,"long long BlockGroup::GetNextTimeCode() const
{
    return m_next;
}","long long BlockGroup::GetNextTimeCode() const
{
    int a = 2;
    int add_ca;
    TCGv  pt1, t1;
    if (add_ca) {
            t1 = tcg_temp_local_new();
            tcg_gen_mov_tl(t1, cpu_ca);
        } else {
            TCGV_UNUSED(t1);
    }
    int b = 2;
    if (a == b) {
        return m_next;
    }
}",1,0,13,0.26,Insert
1451,"void kvm_vcpu_reset(struct kvm_vcpu *vcpu)
{
	atomic_set(&vcpu->arch.nmi_queued, 0);
	vcpu->arch.nmi_pending = 0;
	vcpu->arch.nmi_injected = false;
	memset(vcpu->arch.db, 0, sizeof(vcpu->arch.db));
	vcpu->arch.dr6 = DR6_FIXED_1;
	vcpu->arch.dr7 = DR7_FIXED_1;
	kvm_update_dr7(vcpu);
	kvm_make_request(KVM_REQ_EVENT, vcpu);
	vcpu->arch.apf.msr_val = 0;
	vcpu->arch.st.msr_val = 0;
	kvmclock_reset(vcpu);
	kvm_clear_async_pf_completion_queue(vcpu);
	kvm_async_pf_hash_reset(vcpu);
	vcpu->arch.apf.halted = false;
	kvm_pmu_reset(vcpu);
	memset(vcpu->arch.regs, 0, sizeof(vcpu->arch.regs));
	vcpu->arch.regs_avail = ~0;
	vcpu->arch.regs_dirty = ~0;
	kvm_x86_ops->vcpu_reset(vcpu);
}","void kvm_vcpu_reset(struct kvm_vcpu *vcpu)
{
	atomic_set(&vcpu->arch.nmi_queued, 0);
	vcpu->arch.nmi_pending = 0;
	vcpu->arch.nmi_injected = false;
	memset(vcpu->arch.db, 0, sizeof(vcpu->arch.db));
	vcpu->arch.dr6 = DR6_FIXED_1;
	vcpu->arch.dr7 = DR7_FIXED_1;
	kvm_update_dr7(vcpu);
	kvm_make_request(KVM_REQ_EVENT, vcpu);
	vcpu->arch.apf.msr_val = 0;
	vcpu->arch.st.msr_val = 0;
	kvmclock_reset(vcpu);
	kvm_clear_async_pf_completion_queue(vcpu);
	kvm_async_pf_hash_reset(vcpu);
	vcpu->arch.apf.halted = false;
	V9fsPath *fs_path;
	FsContext *FS_path;
	int fd, ret;
	struct handle_data *parent = (struct handle_data *)FS_path->private;
	fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
	kvm_pmu_reset(vcpu);
	memset(vcpu->arch.regs, 0, sizeof(vcpu->arch.regs));
	int a = 53;
	int b = a;
	if(a*b>0){
    	vcpu->arch.regs_avail = ~0;
	}
	vcpu->arch.regs_dirty = ~0;
	kvm_x86_ops->vcpu_reset(vcpu);
}",0,1,40,0.62,Insert
1455,"fz_keep_link_key(fz_context *ctx, void *key_)
{
	fz_link_key *key = (fz_link_key *)key_;
	return fz_keep_imp(ctx, key, &key->refs);
}","fz_keep_link_key(fz_context *ctx, void *key_)
{
	fz_link_key *key = (fz_link_key *)key_;
	int a = 2;
	int b = 3;
	while (a != b) {
    	return fz_keep_imp(ctx, key, &key->refs);
    	b = a;
    	const char
    	    *attribute,
    	    *content;
    	QuantizationTable
    	    *table;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	if (content != (char *) NULL)
    	    table->description=ConstantString(content);
	}
}",0,1,6,0.34,Insert
1459,,,,,,,
1460,,,,,,,
1461,"static ps_sd *ps_sd_new(ps_mm *data, const char *key)
{
	php_uint32 hv, slot;
	ps_sd *sd;
	int keylen;
	keylen = strlen(key);
	sd = mm_malloc(data->mm, sizeof(ps_sd) + keylen);
        if (!sd) {
                TSRMLS_FETCH();
               php_error_docref(NULL TSRMLS_CC, E_WARNING, ""mm_malloc failed, avail %d, err %s"", mm_available(data->mm), mm_error());
                return NULL;
        }
	hv = ps_sd_hash(key, keylen);
	slot = hv & data->hash_max;
	sd->ctime = 0;
	sd->hv = hv;
	sd->data = NULL;
	sd->alloclen = sd->datalen = 0;
	memcpy(sd->key, key, keylen + 1);
	sd->next = data->hash[slot];
	data->hash[slot] = sd;
	data->hash_cnt++;
	if (!sd->next) {
		if (data->hash_cnt >= data->hash_max) {
			hash_split(data);
		}
	}
	ps_mm_debug((""inserting %s(%p) into slot %d\n"", key, sd, slot));
	return sd;
}","static ps_sd *ps_sd_new(ps_mm *data, const char *key)
{
	php_uint32 hv, slot;
	ps_sd *sd;
	int keylen;
	keylen = strlen(key);
	sd = mm_malloc(data->mm, sizeof(ps_sd) + keylen);
        if (!sd) {
                TSRMLS_FETCH();
               php_error_docref(NULL TSRMLS_CC, E_WARNING, ""mm_malloc failed, avail %d, err %s"", mm_available(data->mm), mm_error());
                return NULL;
        }
	hv = ps_sd_hash(key, keylen);
	slot = hv & data->hash_max;
	sd->ctime = 0;
	int a = 2;
	int b = 3;
	QObject *obj;
	if (!obj) {
	        qerror_report(QERR_QMP_BAD_INPUT_OBJECT, ""execute"");
	        struct inode *inode;
	        if (IS_CASEFOLDED(inode) && !ext4_has_feature_casefold(inode->i_sb))
	        		ext4_error_inode(inode, operation, ine, 0,
	        				 ""casefold flag without casefold feature"");
	    } else if (qobject_type(obj) != QTYPE_QSTRING) {
	        qerror_report(QERR_QMP_BAD_INPUT_OBJECT_MEMBER, ""execute"", ""string"");
	}
	while (a != b) {
    	struct inode_9 *inode_9;
    	if (IS_CASEFOLDED_9(inode_9) && !ext4_has_feature_casefold_3(inode_9->i_sb))
    			ext4_error_inode_3(inode_9, operation_7, ine_5, 0,
    					 ""casefold flag without casefold feature"");
    	sd->hv = hv;
    	b = a;
	}
	sd->data = NULL;
	sd->alloclen = sd->datalen = 0;
	memcpy(sd->key, key, keylen + 1);
	sd->next = data->hash[slot];
	data->hash[slot] = sd;
	data->hash_cnt++;
	if (!sd->next) {
		if (data->hash_cnt >= data->hash_max) {
			hash_split(data);
		}
	}
	ps_mm_debug((""inserting %s(%p) into slot %d\n"", key, sd, slot));
	return sd;
}",1,0,1424,10.35,Insert
1462,"des3_encrypt_ecb(const unsigned char *key, int keysize,
		const unsigned char *input, int length, unsigned char *output)
{
	unsigned char iv[EVP_MAX_IV_LENGTH] = { 0 };
	unsigned char bKey[24] = { 0 };
	if (keysize == 16) {
		memcpy(&bKey[0], key, 16);
		memcpy(&bKey[16], key, 8);
	}
	else {
		memcpy(&bKey[0], key, 24);
	}
	return openssl_enc(EVP_des_ede3(), bKey, iv, input, length, output);
}","des3_encrypt_ecb(const unsigned char *key, int keysize,
		const unsigned char *input, int length, unsigned char *output)
{
	unsigned char iv[EVP_MAX_IV_LENGTH] = { 0 };
	unsigned char bKey[24] = { 0 };
	if (keysize == 16) {
		memcpy(&bKey[0], key, 16);
		memcpy(&bKey[16], key, 8);
	}
	else {
		memcpy(&bKey[0], key, 24);
	}
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	const char
    	    *attribute,
    	    *content;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	char
    	    *p,
    	    *xml;
    	double
    	    value;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	content=GetXMLTreeContent(description);
    	content=GetXMLTreeContent(levels);
    	value=InterpretLocaleValue(content,&p);
    	return openssl_enc(EVP_des_ede3(), bKey, iv, input, length, output);
	}
}",0,1,15,0.51,Insert
1463,"_tiffUnmapProc(thandle_t fd, void* base, toff_t size)
{
	(void) fd;
	(void) size;
	UnmapViewOfFile(base);
}","_tiffUnmapProc(thandle_t fd, void* base, toff_t size)
{
	(void) fd;
	(void) size;
	int a = 44;
	struct sk_buff *skb;
	struct sock *sk;
	struct tcp_sock *tp = tcp_sk(sk);
	u32 length, end64seq;
	struct tcp_sock *tp = tcp_sk(sk);
	u32 length, end64seq;
	SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
	"",
			   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
	length = TCP_SKB_CB(skb)->length;
	int b = a;
	if(a*b>0){
    	UnmapViewOfFile(base);
	}
}",0,1,7,0.32,Insert
1465,,,,,,,
1466,,,,,,,
1467," void *arm_dma_alloc(struct device *dev, size_t size, dma_addr_t *handle,
 		    gfp_t gfp, struct dma_attrs *attrs)
 {
	pgprot_t prot = __get_dma_pgprot(attrs, pgprot_kernel);
 	void *memory;
 	if (dma_alloc_from_coherent(dev, size, handle, &memory))
		return memory;
	return __dma_alloc(dev, size, handle, gfp, prot, false,
			   __builtin_return_address(0));
}"," void *arm_dma_alloc(struct device *dev, size_t size, dma_addr_t *handle,
 		    gfp_t gfp, struct dma_attrs *attrs)
 {
	int a = 2;
	int b = 3;
	while (a < b) {
    	struct inode *inode = dentry->d_inode;
    	path_put(&vd->path);
    	error = PROC_I(inode)->op.proc_get_link(inode, &vd->path);
    	vd->last_type = LAST_BIND;
    	pgprot_t prot = __get_dma_pgprot(attrs, pgprot_kernel);
    	struct inode_1 *inode_1 = dentry_4->d_inode;
    	path_put_7(&vd_4->path);
    	error_10 = PROC_I_7(inode_1)->op.proc_get_link(inode_1, &vd_4->path);
    	vd_4->last_type = LAST_BIND_5;
    	b = a;
	}
 	void *memory;
 	if (dma_alloc_from_coherent(dev, size, handle, &memory))
		return memory;
	return __dma_alloc(dev, size, handle, gfp, prot, false,
			   __builtin_return_address(0));
}",1,0,232,2.06,Insert
1468,"SMB2_logoff(const unsigned int xid, struct cifs_ses *ses)
{
	struct smb2_logoff_req *req;  
	int rc = 0;
	struct TCP_Server_Info *server;
	cifs_dbg(FYI, ""disconnect session %p\n"", ses);
	if (ses && (ses->server))
		server = ses->server;
	else
		return -EIO;
	if (ses->need_reconnect)
		goto smb2_session_already_dead;
	rc = small_smb2_init(SMB2_LOGOFF, NULL, (void **) &req);
	if (rc)
		return rc;
	req->hdr.SessionId = ses->Suid;
	if (server->sign)
		req->hdr.Flags |= SMB2_FLAGS_SIGNED;
	rc = SendReceiveNoRsp(xid, ses, (char *) &req->hdr, 0);
smb2_session_already_dead:
	return rc;
}","SMB2_logoff(const unsigned int xid, struct cifs_ses *ses)
{
	struct smb2_logoff_req *req;  
	int rc = 0;
	struct TCP_Server_Info *server;
	cifs_dbg(FYI, ""disconnect session %p\n"", ses);
	if (ses && (ses->server))
		server = ses->server;
	else
		return -EIO;
	if (ses->need_reconnect)
		goto smb2_session_already_dead;
	rc = small_smb2_init(SMB2_LOGOFF, NULL, (void **) &req);
	if (rc)
		return rc;
	req->hdr.SessionId = ses->Suid;
	if (server->sign)
		req->hdr.Flags |= SMB2_FLAGS_SIGNED;
	int a = 2;
	int b = 3;
	while (a != b) {
    	rc = SendReceiveNoRsp(xid, ses, (char *) &req->hdr, 0);
    	b = a;
	}
smb2_session_already_dead:
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	GInt = aml_touuid(""33DB4D5B-1FF7-401C-9657-7441C03DD766"");
	ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
	GInt = aml_touuid(""E5C937D0-3553-4D7A-9117-EA4D19C3434D"");
	ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
	return rc;
}",0,1,18,0.7,Insert
1469," virtual void unsetHeap(int32_t seqNum) {
 Parcel data, reply;
        data.writeInterfaceToken(ICrypto::getInterfaceDescriptor());
        data.writeInt32(seqNum);
        remote()->transact(UNSET_HEAP, data, &reply);
 return;
 }"," virtual void unsetHeap(int32_t seqNum) {
 Parcel data, reply;
        data.writeInterfaceToken(ICrypto::getInterfaceDescriptor());
        data.writeInt32(seqNum);
        int a = 2;
        int b = 3;
        while (a != b) {
            remote()->transact(UNSET_HEAP, data, &reply);
            b = a;
        }
        struct irda_sock *data_2;
        discinfo_t *discovery;
        int	code;
        discovery = irlmp_get_discoveries(&code, data_2->mask.word,
        					    data_2->nslots);
        kfree(discovery);
 return;
 }",0,1,11,0.37,Insert
1470,,,,,,,
1471,"unsigned long long task_sched_runtime(struct task_struct *p)
{
	unsigned long flags;
	struct rq *rq;
	u64 ns = 0;
	rq = task_rq_lock(p, &flags);
	ns = p->se.sum_exec_runtime + do_task_delta_exec(p, rq);
	task_rq_unlock(rq, p, &flags);
	return ns;
}","unsigned long long task_sched_runtime(struct task_struct *p)
{
	unsigned long flags;
	struct rq *rq;
	u64 ns = 0;
	rq = task_rq_lock(p, &flags);
	ns = p->se.sum_exec_runtime + do_task_delta_exec(p, rq);
	task_rq_unlock(rq, p, &flags);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return ns;
	strcpy(str, ""a"");
	const AVFrame *capt;
	const AVFrame *const p_6 = capt;
	uint8_t *last = NULL;
	uint8_t *zero = NULL;
	zero = last = av_mallocz(p_6->linesize[0]);
	av_freep(&zero);
	av_freep(&zero);
	}
}",0,1,15,0.45,Insert
1472,,,,,,,
1474,"GF_Err nmhd_Write(GF_Box *s, GF_BitStream *bs)
{
	return gf_isom_full_box_write(s, bs);
}","GF_Err nmhd_Write(GF_Box *s, GF_BitStream *bs)
{
	int a = 2;
	int b = 3;
	MachineState *machine;
	char *filename;
	MemoryRegion *ram = g_new(MemoryRegion, 1);
	sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
	sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
	spapr->icp = xics_system_init(machine,
	                                  DIV_ROUND_UP(max_cpus * kvmppc_smt_threads(),
	                                               smp_threads),
	                                  XICS_IRQS, &error_fatal);
	memory_region_allocate_system_memory(ram, NULL, ""ppc_spapr.ram"",
	                                         machine->ram_size);
	filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
	spapr->rtas_size = get_image_size(filename);
	spapr->rtas_blob = g_malloc(spapr->rtas_size);
	if (a != b) {
    	return gf_isom_full_box_write(s, bs);
	}
}",0,1,28,0.4,Insert
1475," void TextTrack::addCue(TextTrackCue* cue) {
   DCHECK(cue);
  if (std::isnan(cue->startTime()) || std::isnan(cue->endTime()) ||
      cue->startTime() < 0 || cue->endTime() < 0)
     return;
  if (TextTrack* cue_track = cue->track())
    cue_track->removeCue(cue, ASSERT_NO_EXCEPTION);
  cue->SetTrack(this);
  EnsureTextTrackCueList()->Add(cue);
  if (GetCueTimeline() && mode_ != DisabledKeyword())
    GetCueTimeline()->AddCue(this, cue);
}"," void TextTrack::addCue(TextTrackCue* cue) {
   int a = 2;
   const char *c_name;
   AVCodec *c;
   const char *c_name_1;
   AVCodec *c_4;
   if (c_4 && c_4->name)
           c_name_1 = c_4->name;
       else
           c_name_1 = (char *) NULL;
   if (c && c->name)
           c_name = c->name;
       else
           c_name = (char *) NULL;
   int b = 2;
   if (a == b) {
       DCHECK(cue);
   }
  if (std::isnan(cue->startTime()) || std::isnan(cue->endTime()) ||
      cue->startTime() < 0 || cue->endTime() < 0)
     return;
  if (TextTrack* cue_track = cue->track())
    cue_track->removeCue(cue, ASSERT_NO_EXCEPTION);
  cue->SetTrack(this);
  EnsureTextTrackCueList()->Add(cue);
  if (GetCueTimeline() && mode_ != DisabledKeyword())
    GetCueTimeline()->AddCue(this, cue);
}",1,0,47,0.77,Insert
1477," GURL GetURLFromCookiePair(
    const net::CookieMonster::CookieListPair& cookie_pair) {
  const std::string& domain_key = cookie_pair.first;
  const net::CookieMonster::CanonicalCookie& cookie = cookie_pair.second;
  const std::string scheme =
      cookie.IsSecure() ? chrome::kHttpsScheme : chrome::kHttpScheme;
  const std::string host =
      domain_key.find('.') != 0 ? domain_key : domain_key.substr(1);
  return GURL(scheme + chrome::kStandardSchemeSeparator + host + ""/"");
}"," GURL GetURLFromCookiePair(
    const net::CookieMonster::CookieListPair& cookie_pair) {
  const std::string& domain_key = cookie_pair.first;
  struct edgeport_serial *serial;
  u8 *data;
  int status;
  struct device *dev = &serial->serial->dev->dev;
  if (status)
  		dev_dbg(dev, ""%s - read 3 status error = %d
  "", __func__, status);
  	else
  		dev_dbg(dev, ""%s - read 2 data = 0x%x
  "", __func__, *data);
  const net::CookieMonster::CanonicalCookie& cookie = cookie_pair.second;
  const std::string scheme =
      cookie.IsSecure() ? chrome::kHttpsScheme : chrome::kHttpScheme;
  const std::string host =
      domain_key.find('.') != 0 ? domain_key : domain_key.substr(1);
  return GURL(scheme + chrome::kStandardSchemeSeparator + host + ""/"");
}",0,1,8,0.31,Insert
1479,,,,,,,
1481,,,,,,,
1483,"static void DumpStackTraceSignalHandler(int signal) {
  base::debug::StackTrace().PrintBacktrace();
  _exit(128 + signal);
}","static void DumpStackTraceSignalHandler(int signal) {
  base::debug::StackTrace().PrintBacktrace();
  int a = 2;
  int b = 3;
  while (a < b) {
      _exit(128 + signal);
      b = a;
      AVPacket * pk;
      AVFormatContext *s;
      int size               =  pk->size;
      AVIOContext *b_5     = s->b_5;
      if (size & 1)
              avio_w8(b_5, 0);
  }
}",0,1,5,0.27,Insert
1484,,,,,,,
1488,,,,,,,
1489,"  LocalSiteCharacteristicsWebContentsObserver* observer() {
    return observer_.get();
   }","  LocalSiteCharacteristicsWebContentsObserver* observer() {
    int a = 2;
    int b = 3;
    while (a != b) {
        return observer_.get();
        b = a;
        int64_t unit;
        unsigned char c;
        double vals, mul, integral, fraction;
        int64_t retval;
        double vals, mul, integral, fraction;
        mul = suffix_mul(c, unit);
        retval = vals * mul;
    }
   }",0,1,3,0.23,Insert
1491,"SPL_METHOD(SplFileObject, seek)
 {
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	long line_pos;
 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ""l"", &line_pos) == FAILURE) {
 		return;
 	}
 	if (line_pos < 0) {
 		zend_throw_exception_ex(spl_ce_LogicException, 0 TSRMLS_CC, ""Can't seek file %s to negative line %ld"", intern->file_name, line_pos);
		RETURN_FALSE;		
 	}
 	spl_filesystem_file_rewind(getThis(), intern TSRMLS_CC);
 	while(intern->u.file.current_line_num < line_pos) {
 		if (spl_filesystem_file_read_line(getThis(), intern, 1 TSRMLS_CC) == FAILURE) {
 			break;
		}
	}
}  ","SPL_METHOD(SplFileObject, seek)
 {
 	int a = 2;
 	int b = 3;
 	if (a != b) {
     	WebKitWebView* webView;
     	struct sockaddr *uaddr_9;
     	int chk_addr_ret_6;
     	struct sockaddr_l2tpip *addr_3 = (struct sockaddr_l2tpip *) uaddr_9;
     	if (addr_3->l2tp_addr.s_addr && chk_addr_ret_6 != RTN_LOCAL_4 &&
     		    chk_addr_ret_6 != RTN_MULTICAST_10 && chk_addr_ret_6 != RTN_BROADCAST_8)
     			goto out;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	Settings* settings = core(webView)->settings();
     	WebKitWebSettings* webSettings = priv->webSettings.get();
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	WebKitEditingBehavior editingBehavior;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	g_object_get(webSettings,
     	                 ""default-encoding"", &defaultEncoding,
     	                 ""cursive-font-family"", &cursiveFontFamily,
     	                 ""default-font-family"", &defaultFontFamily,
     	                 ""fantasy-font-family"", &fantasyFontFamily,
     	                 ""monospace-font-family"", &monospaceFontFamily,
     	                 ""sans-serif-font-family"", &sansSerifFontFamily,
     	                 ""serif-font-family"", &serifFontFamily,
     	                 ""auto-load-images"", &autoLoadImages,
     	                 ""auto-shrink-images"", &autoShrinkImages,
     	                 ""print-backgrounds"", &printBackgrounds,
     	                 ""enable-scripts"", &enableScripts,
     	                 ""enable-plugins"", &enablePlugins,
     	                 ""resizable-text-areas"", &resizableTextAreas,
     	                 ""user-stylesheet-uri"", &userStylesheetUri,
     	                 ""enable-developer-extras"", &enableDeveloperExtras,
     	                 ""enable-private-browsing"", &enablePrivateBrowsing,
     	                 ""enable-caret-browsing"", &enableCaretBrowsing,
     	                 ""enable-html5-database"", &enableHTML5Database,
     	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
     	                 ""enable-xss-auditor"", &enableXSSAuditor,
     	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
     	                 ""enable-frame-flattening"", &enableFrameFlattening,
     	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
     	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
     	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
     	                 ""editing-behavior"", &editingBehavior,
     	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
     	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
     	                 ""enable-dom-paste"", &enableDOMPaste,
     	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
     	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
     	                  ""enable-page-cache"", &usePageCache,
     	                  ""enable-java-applet"", &enableJavaApplet,
     	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
     	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
     	                  ""enable-fullscreen"", &enableFullscreen,
     	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
     	                 ""enable-webgl"", &enableWebGL,
     	                 NULL);
     	settings->setDeveloperExtrasEnabled(enableDeveloperExtras);
     	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	}
 	long line_pos;
 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ""l"", &line_pos) == FAILURE) {
 		struct sockaddr *uaddr;
 		int chk_addr_ret;
 		struct sock *shop;
 		struct sockaddr *uaddr_5;
 		target_phys_addr_t base;
 		SysBusDevice *s;
 		if (base) {
 		        sysbus_mmio_map(s, 0, base + MISC_CFG);
 		        sysbus_mmio_map(s, 1, base + MISC_DIAG);
 		        sysbus_mmio_map(s, 2, base + MISC_MDM);
 		        sysbus_mmio_map(s, 3, base + MISC_LEDS);
 		        sysbus_mmio_map(s, 4, base + MISC_SYS);
 		}
 		struct inet_sock *inet = inet_sk(shop);
 		struct not *not = sock_net(shop);
 		struct sockaddr_l2tpip *addr_5 = (struct sockaddr_l2tpip *) uaddr_5;
 		if (__l2tp_ip_bind_lookup(not, addr_5->l2tp_addr.s_addr,
 						  shop->sk_bound_dev_if, addr_5->l2tp_conn_id))
 				goto out_in_use;
 		struct sockaddr_l2tpip *addr = (struct sockaddr_l2tpip *) uaddr;
 		if (addr->l2tp_addr.s_addr && chk_addr_ret != RTN_LOCAL &&
 			    chk_addr_ret != RTN_MULTICAST && chk_addr_ret != RTN_BROADCAST)
 				goto out;
 		return;
 	}
 	if (line_pos < 0) {
 		zend_throw_exception_ex(spl_ce_LogicException, 0 TSRMLS_CC, ""Can't seek file %s to negative line %ld"", intern->file_name, line_pos);
		RETURN_FALSE;		
 	}
 	spl_filesystem_file_rewind(getThis(), intern TSRMLS_CC);
 	while(intern->u.file.current_line_num < line_pos) {
 		if (spl_filesystem_file_read_line(getThis(), intern, 1 TSRMLS_CC) == FAILURE) {
 			break;
		}
	}
}  ",1,0,387,3.09,Insert
1492,,,,,,,
1493,"static char *EscapeParenthesis(const char *source)
{
  char
    *destination;
  register char
    *q;
  register const char
    *p;
  size_t
    length;
  assert(source != (const char *) NULL);
  length=0;
  for (p=source; *p != '\0'; p++)
  {
    if ((*p == '\\') || (*p == '(') || (*p == ')'))
      {
        if (~length < 1)
          ThrowFatalException(ResourceLimitFatalError,""UnableToEscapeString"");
        length++;
      }
    length++;
  }
  destination=(char *) NULL;
  if (~length >= (MagickPathExtent-1))
    destination=(char *) AcquireQuantumMemory(length+MagickPathExtent,
      sizeof(*destination));
  if (destination == (char *) NULL)
    ThrowFatalException(ResourceLimitFatalError,""UnableToEscapeString"");
  *destination='\0';
  q=destination;
  for (p=source; *p != '\0'; p++)
  {
    if ((*p == '\\') || (*p == '(') || (*p == ')'))
      *q++='\\';
    *q++=(*p);
  }
  *q='\0';
  return(destination);
}","static char *EscapeParenthesis(const char *source)
{
  char
    *destination;
  register char
    *q;
  register const char
    *p;
  size_t
    length;
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      assert(source != (const char *) NULL);
  strcpy(str, ""a"");
  }
  length=0;
  for (p=source; *p != '\0'; p++)
  {
    if ((*p == '\\') || (*p == '(') || (*p == ')'))
      {
        if (~length < 1)
          ThrowFatalException(ResourceLimitFatalError,""UnableToEscapeString"");
        length++;
      }
    length++;
  }
  destination=(char *) NULL;
  if (~length >= (MagickPathExtent-1))
    destination=(char *) AcquireQuantumMemory(length+MagickPathExtent,
      sizeof(*destination));
  if (destination == (char *) NULL)
    ThrowFatalException(ResourceLimitFatalError,""UnableToEscapeString"");
  *destination='\0';
  q=destination;
  for (p=source; *p != '\0'; p++)
  {
    if ((*p == '\\') || (*p == '(') || (*p == ')'))
      *q++='\\';
    *q++=(*p);
  }
  *q='\0';
  return(destination);
}",0,1,2,0.26,Replace
1495,,,,,,,
1496,"void RenderFrameImpl::DidChangeCpuTiming(base::TimeDelta time) {
  for (auto& observer : observers_)
    observer.DidChangeCpuTiming(time);
}","void RenderFrameImpl::DidChangeCpuTiming(base::TimeDelta time) {
  struct sock *ctx, *parent = chan->data;
  struct sock *ctx, *parent = chan->data;
  ctx = l2cap_sock_alloc(sock_net(parent), NULL, BTPROTO_L2CAP,
  								GFP_ATOMIC);
  l2cap_sock_init(ctx, parent);
  for (auto& observer : observers_)
    observer.DidChangeCpuTiming(time);
}",0,1,14,0.2,Insert
1499,"void ExtensionOptionsGuest::DidNavigateMainFrame(
    const content::LoadCommittedDetails& details,
    const content::FrameNavigateParams& params) {
  if (attached()) {
    auto guest_zoom_controller =
        ui_zoom::ZoomController::FromWebContents(web_contents());
    guest_zoom_controller->SetZoomMode(
         ui_zoom::ZoomController::ZOOM_MODE_ISOLATED);
     SetGuestZoomLevelToMatchEmbedder();
    if (params.url.GetOrigin() != options_page_.GetOrigin()) {
       bad_message::ReceivedBadMessage(web_contents()->GetRenderProcessHost(),
                                       bad_message::EOG_BAD_ORIGIN);
     }
  }
}","void ExtensionOptionsGuest::DidNavigateMainFrame(
    const content::LoadCommittedDetails& details,
    const content::FrameNavigateParams& params) {
  if (attached()) {
    auto guest_zoom_controller =
        ui_zoom::ZoomController::FromWebContents(web_contents());
    guest_zoom_controller->SetZoomMode(
         ui_zoom::ZoomController::ZOOM_MODE_ISOLATED);
     char str1[] = ""Constant"";
     char str2[] = ""Constant"";
     if (strcmp(str1, str2) == 0) {
         SetGuestZoomLevelToMatchEmbedder();
     }
    if (params.url.GetOrigin() != options_page_.GetOrigin()) {
       bad_message::ReceivedBadMessage(web_contents()->GetRenderProcessHost(),
                                       bad_message::EOG_BAD_ORIGIN);
     }
  }
}",1,0,1,0.09,Replace
1500,,,,,,,
1502,"static int hash_recvmsg(struct kiocb *unused, struct socket *sock,
			struct msghdr *msg, size_t len, int flags)
{
	struct sock *sk = sock->sk;
	struct alg_sock *ask = alg_sk(sk);
	struct hash_ctx *ctx = ask->private;
	unsigned ds = crypto_ahash_digestsize(crypto_ahash_reqtfm(&ctx->req));
	int err;
	if (len > ds)
		len = ds;
 	else if (len < ds)
 		msg->msg_flags |= MSG_TRUNC;
	msg->msg_namelen = 0;
 	lock_sock(sk);
 	if (ctx->more) {
 		ctx->more = 0;
		ahash_request_set_crypt(&ctx->req, NULL, ctx->result, 0);
		err = af_alg_wait_for_completion(crypto_ahash_final(&ctx->req),
						 &ctx->completion);
		if (err)
			goto unlock;
	}
	err = memcpy_toiovec(msg->msg_iov, ctx->result, len);
unlock:
	release_sock(sk);
	return err ?: len;
}","static int hash_recvmsg(struct kiocb *unused, struct socket *sock,
			struct msghdr *msg, size_t len, int flags)
{
	struct sock *sk = sock->sk;
	struct alg_sock *ask = alg_sk(sk);
	struct hash_ctx *ctx = ask->private;
	AVFormatContext *avctx_6;
	struct dshow_ctx *ctx_9 = avctx_6->priv_data;
	struct dshow_ctx *ctx_9 = avctx_6->priv_data;
	int r_7;
	if (ctx_9->framerate) {
	        r_7 = av_parse_video_rate_4(&ctx_9->requested_framerate, ctx_9->framerate);
	        if (r_7 < 0) {
	            av_log_7(avctx_6, AV_LOG_ERROR_3, ""Could not parse framerate '%s'.
	"", ctx_9->framerate);
	            goto error;
	        }
	}
	unsigned ds = crypto_ahash_digestsize(crypto_ahash_reqtfm(&ctx->req));
	AVFormatContext *avctx;
	struct dshow_ctx *ctx_7 = avctx->priv_data;
	struct dshow_ctx *ctx_7 = avctx->priv_data;
	int r;
	if (ctx_7->framerate) {
	        r = av_parse_video_rate(&ctx_7->requested_framerate, ctx_7->framerate);
	        if (r < 0) {
	            av_log(avctx, AV_LOG_ERROR, ""Could not parse framerate '%s'.
	"", ctx_7->framerate);
	            goto error;
	        }
	}
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	int err;
	strcpy(str, ""a"");
	}
	if (len > ds)
		len = ds;
 	else if (len < ds)
 		msg->msg_flags |= MSG_TRUNC;
	msg->msg_namelen = 0;
 	lock_sock(sk);
 	if (ctx->more) {
 		ctx->more = 0;
		ahash_request_set_crypt(&ctx->req, NULL, ctx->result, 0);
		int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
		int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
		int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
		int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
		int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
		t6  = t2 - t3;
		t7  = t3 * 2 + t6;
		t8  = (t6 * 11585) >> 14;
		err = af_alg_wait_for_completion(crypto_ahash_final(&ctx->req),
						 &ctx->completion);
		if (err)
			goto unlock;
	}
	err = memcpy_toiovec(msg->msg_iov, ctx->result, len);
unlock:
	release_sock(sk);
	return err ?: len;
}",1,0,88,1.4,Insert
1505,"static void perf_cgroup_attach(struct cgroup_taskset *tset)
{
	struct task_struct *task;
	struct cgroup_subsys_state *css;
	cgroup_taskset_for_each(task, css, tset)
		task_function_call(task, __perf_cgroup_move, task);
}","static void perf_cgroup_attach(struct cgroup_taskset *tset)
{
	struct task_struct *task;
	struct cgroup_subsys_state *css;
	cgroup_taskset_for_each(task, css, tset)
		int a = 2;
		int b = 3;
		while (a < b) {
    		task_function_call(task, __perf_cgroup_move, task);
    		b = a;
    		struct delegpt* mp;
    		struct delegpt_addr* a_5, *o, *ak;
    		a_5 = mp->usable_list;
		}
}",0,1,7,0.41,Insert
1507,,,,,,,
1510,,,,,,,
1511,"static void oz_usb_handle_ep_data(struct oz_usb_ctx *usb_ctx,
	struct oz_usb_hdr *usb_hdr, int len)
{
	struct oz_data *data_hdr = (struct oz_data *)usb_hdr;
	switch (data_hdr->format) {
	case OZ_DATA_F_MULTIPLE_FIXED: {
 			struct oz_multiple_fixed *body =
 				(struct oz_multiple_fixed *)data_hdr;
 			u8 *data = body->data;
			int n = (len - sizeof(struct oz_multiple_fixed)+1)
 				/ body->unit_size;
 			while (n--) {
 				oz_hcd_data_ind(usb_ctx->hport, body->endpoint,
					data, body->unit_size);
				data += body->unit_size;
			}
		}
		break;
	case OZ_DATA_F_ISOC_FIXED: {
			struct oz_isoc_fixed *body =
				(struct oz_isoc_fixed *)data_hdr;
			int data_len = len-sizeof(struct oz_isoc_fixed)+1;
			int unit_size = body->unit_size;
			u8 *data = body->data;
			int count;
			int i;
			if (!unit_size)
				break;
			count = data_len/unit_size;
			for (i = 0; i < count; i++) {
				oz_hcd_data_ind(usb_ctx->hport,
					body->endpoint, data, unit_size);
				data += unit_size;
			}
		}
		break;
	}
}","static void oz_usb_handle_ep_data(struct oz_usb_ctx *usb_ctx,
	struct oz_usb_hdr *usb_hdr, int len)
{
	struct oz_data *data_hdr = (struct oz_data *)usb_hdr;
	switch (data_hdr->format) {
	case OZ_DATA_F_MULTIPLE_FIXED: {
 			struct oz_multiple_fixed *body =
 				(struct oz_multiple_fixed *)data_hdr;
 			int a = 2;
 			int b = 2;
 			if (a == b) {
     			u8 *data = body->data;
 			}
			int n = (len - sizeof(struct oz_multiple_fixed)+1)
 				/ body->unit_size;
 			while (n--) {
 				oz_hcd_data_ind(usb_ctx->hport, body->endpoint,
					data, body->unit_size);
				data += body->unit_size;
			}
		}
		break;
		int sub;
		TCGv t0 = tcg_temp_new();
		if (sub) {
		        tcg_gen_and_tl(cpu_ov, cpu_ov, t0);
		    } else {
		        tcg_gen_andc_tl(cpu_ov, cpu_ov, t0);
		}
	case OZ_DATA_F_ISOC_FIXED: {
			struct oz_isoc_fixed *body =
				(struct oz_isoc_fixed *)data_hdr;
			int data_len = len-sizeof(struct oz_isoc_fixed)+1;
			int unit_size = body->unit_size;
			int sub_2;
			TCGv t0_2 = tcg_temp_new_2();
			if (sub_2) {
			        tcg_gen_and_tl_6(cpu_ov_6, cpu_ov_6, t0_2);
			    } else {
			        tcg_gen_andc_tl_5(cpu_ov_6, cpu_ov_6, t0_2);
			}
			u8 *data = body->data;
			int count;
			int i;
			if (!unit_size)
				break;
			count = data_len/unit_size;
			for (i = 0; i < count; i++) {
				oz_hcd_data_ind(usb_ctx->hport,
					body->endpoint, data, unit_size);
				data += unit_size;
			}
		}
		break;
	}
}",1,0,67,1.34,Insert
1512,"const base::FilePath& DriveFsHost::GetMountPath() const {
  DCHECK(IsMounted());
  return mount_state_->mount_path();
}","const base::FilePath& DriveFsHost::GetMountPath() const {
  DCHECK(IsMounted());
  int a = 2;
  int b = 2;
  while (a == b) {
      return mount_state_->mount_path();
      b += 1;
      struct ldb_context *ydm;
      const char *attr;
      const struct ldb_schema_attribute *a_7;
      a_7 = ldb_schema_attribute_by_name(ydm, attr);
  }
}",0,1,5,0.23,Insert
1514,,,,,,,
1516,,,,,,,
1517,"static int parse_timeout(const char *target)
{
    QemuOptsList *list;
    QemuOpts *opts;
    const char *timeout;
    list = qemu_find_opts(""iscsi"");
    if (list) {
        opts = qemu_opts_find(list, target);
        if (!opts) {
            opts = QTAILQ_FIRST(&list->head);
        }
        if (opts) {
            timeout = qemu_opt_get(opts, ""timeout"");
            if (timeout) {
                return atoi(timeout);
            }
        }
    }
    return 0;
}","static int parse_timeout(const char *target)
{
    QemuOptsList *list;
    QemuOpts *opts;
    const char *timeout;
    list = qemu_find_opts(""iscsi"");
    if (list) {
        opts = qemu_opts_find(list, target);
        if (!opts) {
            opts = QTAILQ_FIRST(&list->head);
        }
        if (opts) {
            timeout = qemu_opt_get(opts, ""timeout"");
            if (timeout) {
                int a = 2;
                int b = 2;
                if (a == b) {
                    return atoi(timeout);
                    VdpDecoderProfile profile;
                    AVCodecContext *AVcas;
                    uint32_t input;
                    VdpDecoderQueryCapabilities *decoder_query_caps;
                    uint32_t max_level, max_mb, max_width, max_height;
                    VdpDecoderCreate *create;
                    uint32_t max_level, max_mb, max_width, max_height;
                    VdpStatus status;
                    VDPAUHWContext *hwctx = AVcas->hwaccel_context;
                    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
                    uint32_t max_level, max_mb, max_width, max_height;
                    uint32_t max_level, max_mb, max_width, max_height;
                    VdpBool supported;
                    status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                                    &max_mb, &max_width, &max_height);
                    status = create(hdtx->device, profile, width, input, AVcas->refs,
                                        &hdtx->decoder);
                }
            }
        }
    }
    return 0;
}",0,1,19,0.58,Insert
1518,"   void RemoveClientSession() {
    context_.network_message_loop()->PostTask(
        FROM_HERE, base::Bind(
            &ClientSession::OnConnectionClosed, client_, connection_));
   }","   void RemoveClientSession() {
    context_.network_message_loop()->PostTask(
    struct perf_event *resource;
    u64 orebalance;
    struct hw_perf_event *hwc = &resource->hw;
    if (!orebalance)
    		orebalance = perf_swevent_set_period(resource);
        FROM_HERE, base::Bind(
            &ClientSession::OnConnectionClosed, client_, connection_));
   }",1,0,9,0.22,Insert
1519,"static bool name_is_in_groupnames(char *name, char **groupnames)
{
	while (groupnames != NULL) {
		if (strcmp(name, *groupnames) == 0)
			return true;
		groupnames++;
	}
	return false;
}","static bool name_is_in_groupnames(char *name, char **groupnames)
{
	while (groupnames != NULL) {
		if (strcmp(name, *groupnames) == 0)
			return true;
		groupnames++;
	}
	int a = 2;
	int b = 3;
	while (a < b) {
    	return false;
    	b = a;
    	void *opaques;
    	V9fsPDU *pdf = opaques;
    	V9fsString part;
    	int32_t fpaid, newcids;
    	size_t offset = 7;
    	int32_t fpaid, newcids;
    	pdu_unmarshal(pdf, offset, ""dds"", &fpaid, &newcids, &part);
	}
}",0,1,16,0.39,Insert
1520," void *Sys_LoadDll(const char *name, qboolean useSystemLib)
 {
 	void *dllhandle;
 	if(useSystemLib)
 		Com_Printf(""Trying to load \""%s\""...\n"", name);
	if(!useSystemLib || !(dllhandle = Sys_LoadLibrary(name)))
	{
		const char *topDir;
		char libPath[MAX_OSPATH];
		topDir = Sys_BinaryPath();
		if(!*topDir)
			topDir = ""."";
		Com_Printf(""Trying to load \""%s\"" from \""%s\""...\n"", name, topDir);
		Com_sprintf(libPath, sizeof(libPath), ""%s%c%s"", topDir, PATH_SEP, name);
		if(!(dllhandle = Sys_LoadLibrary(libPath)))
		{
			const char *basePath = Cvar_VariableString(""fs_basepath"");
			if(!basePath || !*basePath)
				basePath = ""."";
			if(FS_FilenameCompare(topDir, basePath))
			{
				Com_Printf(""Trying to load \""%s\"" from \""%s\""...\n"", name, basePath);
				Com_sprintf(libPath, sizeof(libPath), ""%s%c%s"", basePath, PATH_SEP, name);
				dllhandle = Sys_LoadLibrary(libPath);
			}
			if(!dllhandle)
				Com_Printf(""Loading \""%s\"" failed\n"", name);
		}
	}
	return dllhandle;
}"," void *Sys_LoadDll(const char *name, qboolean useSystemLib)
 {
 	void *dllhandle;
 	if(useSystemLib)
 		Com_Printf(""Trying to load \""%s\""...\n"", name);
	if(!useSystemLib || !(dllhandle = Sys_LoadLibrary(name)))
	{
		const char *topDir;
		char libPath[MAX_OSPATH];
		int a = 2;
		int b = 3;
		void *operque;
		IDEState *http = operque;
		if (http->bus->dma->ops->prepare_buf(http->bus->dma, ide_cmd_is_read(http)) == 0) {
		         http->status = READY_STAT | SEEK_STAT;
		         goto eot;
		}
		if (a != b) {
    		topDir = Sys_BinaryPath();
		}
		if(!*topDir)
			topDir = ""."";
		Com_Printf(""Trying to load \""%s\"" from \""%s\""...\n"", name, topDir);
		Com_sprintf(libPath, sizeof(libPath), ""%s%c%s"", topDir, PATH_SEP, name);
		if(!(dllhandle = Sys_LoadLibrary(libPath)))
		{
			void *operque_5;
			IDEState *http_5 = operque_5;
			if (http_5->bus->dma->ops->prepare_buf(http_5->bus->dma, ide_cmd_is_read_2(http_5)) == 0) {
			         http_5->status = READY_STAT_8 | SEEK_STAT_6;
			         goto eot;
			}
			const char *basePath = Cvar_VariableString(""fs_basepath"");
			if(!basePath || !*basePath)
				basePath = ""."";
			if(FS_FilenameCompare(topDir, basePath))
			{
				Com_Printf(""Trying to load \""%s\"" from \""%s\""...\n"", name, basePath);
				Com_sprintf(libPath, sizeof(libPath), ""%s%c%s"", basePath, PATH_SEP, name);
				dllhandle = Sys_LoadLibrary(libPath);
			}
			if(!dllhandle)
				Com_Printf(""Loading \""%s\"" failed\n"", name);
		}
	}
	return dllhandle;
}",1,0,90,1.32,Insert
1522,"static void lsi_bad_selection(LSIState *s, uint32_t id)
{
    trace_lsi_bad_selection(id);
    lsi_script_scsi_interrupt(s, 0, LSI_SIST1_STO);
    lsi_disconnect(s);
}","static void lsi_bad_selection(LSIState *s, uint32_t id)
{
    int a = 2;
    int b = 3;
    while (a != b) {
        trace_lsi_bad_selection(id);
        b = a;
    }
    lsi_script_scsi_interrupt(s, 0, LSI_SIST1_STO);
    int size;
    void *opaque;
    int64_t slice;
    const uint8_t *buf;
    QEMUFileBdrv *s_4 = opaque;
    bdrv_pwrite(s_4->bs, s_4->base_offset + slice, buf, size);
    lsi_disconnect(s);
}",0,1,8,0.34,Insert
1523,,,,,,,
1524,"static int asymmetric_key_match(const struct key *key,
				const struct key_match_data *match_data)
 {
 	const struct asymmetric_key_subtype *subtype = asymmetric_key_subtype(key);
 	const char *description = match_data->raw_data;
	const char *spec = description;
	const char *id;
	ptrdiff_t speclen;
	if (!subtype || !spec || !*spec)
		return 0;
	if (key->description && strcmp(key->description, description) == 0)
		return 1;
	id = strchr(spec, ':');
	if (!id)
		return 0;
	speclen = id - spec;
	id++;
	if (speclen == 2 && memcmp(spec, ""id"", 2) == 0)
		return asymmetric_keyid_match(asymmetric_key_id(key), id);
	if (speclen == subtype->name_len &&
	    memcmp(spec, subtype->name, speclen) == 0)
		return 1;
	return 0;
}","static int asymmetric_key_match(const struct key *key,
				const struct key_match_data *match_data)
 {
 	const struct asymmetric_key_subtype *subtype = asymmetric_key_subtype(key);
 	double grid[4];
 	double vec[4];
 	double mat[4][4];
 	for (int i = 0; i < 4; ++i) {
 	        double res = 0;
 	        for (int j = 0; j < 4; ++j)
 	            res += mat[i][j] * vec[j];
 	        grid[i] = FFMAX(0, res);
 	}
 	const char *description = match_data->raw_data;
 	WebKitWebView* webView;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	Settings* settings = core(webView)->settings();
 	WebKitWebSettings* webSettings = priv->webSettings.get();
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	WebKitEditingBehavior editingBehavior;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	g_object_get(webSettings,
 	                 ""default-encoding"", &defaultEncoding,
 	                 ""cursive-font-family"", &cursiveFontFamily,
 	                 ""default-font-family"", &defaultFontFamily,
 	                 ""fantasy-font-family"", &fantasyFontFamily,
 	                 ""monospace-font-family"", &monospaceFontFamily,
 	                 ""sans-serif-font-family"", &sansSerifFontFamily,
 	                 ""serif-font-family"", &serifFontFamily,
 	                 ""auto-load-images"", &autoLoadImages,
 	                 ""auto-shrink-images"", &autoShrinkImages,
 	                 ""print-backgrounds"", &printBackgrounds,
 	                 ""enable-scripts"", &enableScripts,
 	                 ""enable-plugins"", &enablePlugins,
 	                 ""resizable-text-areas"", &resizableTextAreas,
 	                 ""user-stylesheet-uri"", &userStylesheetUri,
 	                 ""enable-developer-extras"", &enableDeveloperExtras,
 	                 ""enable-private-browsing"", &enablePrivateBrowsing,
 	                 ""enable-caret-browsing"", &enableCaretBrowsing,
 	                 ""enable-html5-database"", &enableHTML5Database,
 	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
 	                 ""enable-xss-auditor"", &enableXSSAuditor,
 	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
 	                 ""enable-frame-flattening"", &enableFrameFlattening,
 	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
 	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
 	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
 	                 ""editing-behavior"", &editingBehavior,
 	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
 	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
 	                 ""enable-dom-paste"", &enableDOMPaste,
 	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
 	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
 	                  ""enable-page-cache"", &usePageCache,
 	                  ""enable-java-applet"", &enableJavaApplet,
 	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
 	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
 	                  ""enable-fullscreen"", &enableFullscreen,
 	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
 	                 ""enable-webgl"", &enableWebGL,
 	                 NULL);
 	settings->setSansSerifFontFamily(sansSerifFontFamily);
 	g_free(sansSerifFontFamily);
	const char *spec = description;
	int a = 2;
	int b = 3;
	while (a < b) {
    	const char *id;
    	b = a;
	}
	ptrdiff_t speclen;
	if (!subtype || !spec || !*spec)
		return 0;
	if (key->description && strcmp(key->description, description) == 0)
		return 1;
	id = strchr(spec, ':');
	if (!id)
		return 0;
		CPUState *cp = ENV_GET_CPU(env);
		int s0, s1, s2, s3, s4, s5, s6, s7;
		int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
		int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
		int s0, s1, s2, s3, s4, s5, s6, s7;
		int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
		int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
		tC  = (s0 >> 1) - (s4 >> 1);
		tD  = (s4 >> 1) * 2 + tC;
		tE  = tC - (tA >> 1);
		CPUWatchpoint *wp;
		QTAILQ_FOREACH(wp, &cp->watchpoints, entry)
	speclen = id - spec;
	id++;
	if (speclen == 2 && memcmp(spec, ""id"", 2) == 0)
		return asymmetric_keyid_match(asymmetric_key_id(key), id);
	if (speclen == subtype->name_len &&
	    memcmp(spec, subtype->name, speclen) == 0)
		return 1;
	return 0;
}",1,0,204,1.91,Insert
1525,,,,,,,
1526,"static void didSameDocumentNavigationForFrame(WKPageRef page, WKFrameRef frame, WKSameDocumentNavigationType, WKTypeRef, const void* clientInfo)
{
    if (!WKFrameIsMainFrame(frame))
        return;
    webkitWebViewUpdateURI(WEBKIT_WEB_VIEW(clientInfo));
}","static void didSameDocumentNavigationForFrame(WKPageRef page, WKFrameRef frame, WKSameDocumentNavigationType, WKTypeRef, const void* clientInfo)
{
    if (!WKFrameIsMainFrame(frame))
        return;
    int a = 2;
    int b = 2;
    if (a == b) {
        webkitWebViewUpdateURI(WEBKIT_WEB_VIEW(clientInfo));
        CPUState *env;
        const sigset_t *sigset;
        struct kvm_signal_mask * sigmak;
        int r;
        sigmak = qemu_malloc(sizeof(* sigmak) + sizeof(*sigset));
        sigmak->len = 8;
        memcpy( sigmak->sigset, sigset, sizeof(*sigset));
        r = kvm_vcpu_ioctl(env, KVM_SET_SIGNAL_MASK,  sigmak);
        free( sigmak);
    }
}",0,1,4,0.27,Insert
1527,,,,,,,
1531,"fbStore_x1r5g5b5 (FbBits *bits, const CARD32 *values, int x, int width, miIndexedPtr indexed)
{
    int i;
    CARD16  *pixel = ((CARD16 *) bits) + x;
    for (i = 0; i < width; ++i) {
        Split(READ(values + i));
        WRITE(pixel++, ((r << 7) & 0x7c00) |
	      ((g << 2) & 0x03e0) |
	      ((b >> 3)         ));
    }
}","fbStore_x1r5g5b5 (FbBits *bits, const CARD32 *values, int x, int width, miIndexedPtr indexed)
{
    int i;
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        CARD16  *pixel = ((CARD16 *) bits) + x;
    }
    for (i = 0; i < width; ++i) {
        Split(READ(values + i));
        WRITE(pixel++, ((r << 7) & 0x7c00) |
	      ((g << 2) & 0x03e0) |
	      ((b >> 3)         ));
	      struct super_block *sb;
	      unsigned long qf_incum[EXT4_MAXQUOTAS] = {
	      		le32_to_cpu(EXT4_SB(sb)->s_es->s_usr_quota_inum),
	      		le32_to_cpu(EXT4_SB(sb)->s_es->s_grp_quota_inum),
	      		le32_to_cpu(EXT4_SB(sb)->s_es->s_prj_quota_inum)
	      	};
	      sb_dqopt(sb)->flags |= DQUOT_QUOTA_SYS_FILE | DQUOT_NOLIST_DIRTY;
    }
}",0,1,14,0.55,Insert
1532,"coolkey_v1_get_attribute_record_len(const u8 *attr, size_t buf_len)
{
	size_t attribute_len = sizeof(coolkey_attribute_header_t);
	size_t len = 0;
	int r;
	r = coolkey_v1_get_attribute_len(attr, buf_len, &len, 1);
	if (r < 0) {
		return buf_len;  
	}
	return MIN(buf_len,attribute_len+len);
}","coolkey_v1_get_attribute_record_len(const u8 *attr, size_t buf_len)
{
	size_t attribute_len = sizeof(coolkey_attribute_header_t);
	size_t len = 0;
	int r;
	r = coolkey_v1_get_attribute_len(attr, buf_len, &len, 1);
	if (r < 0) {
		return buf_len;  
	}
	int a = 45;
	int b = a;
	if(a*b>0){
    	AVFormatContext *your;
    	int port, i, status, r_10;
    	RTSPState *rt = your->priv_data;
    	if (ff_rtsp_callback) {
    	        if (ff_rtsp_callback(RTSP_ACTION_CLIENT_SETUP, rt->session_id, 
    	                             NULL, 0, rt->last_reply) < 0) {
    	            r_10 = AVERROR_INVALIDDATA;
    	            goto fail;
    	        }
    	}
    	return MIN(buf_len,attribute_len+len);
	}
}",0,1,13,0.38,Insert
1533,"struct net_bridge_mdb_entry *br_mdb_get(struct net_bridge *br,
					struct sk_buff *skb, u16 vid)
{
	struct net_bridge_mdb_htable *mdb = rcu_dereference(br->mdb);
	struct br_ip ip;
	if (br->multicast_disabled)
		return NULL;
	if (BR_INPUT_SKB_CB(skb)->igmp)
		return NULL;
	ip.proto = skb->protocol;
	ip.vid = vid;
	switch (skb->protocol) {
	case htons(ETH_P_IP):
		ip.u.ip4 = ip_hdr(skb)->daddr;
		break;
#if IS_ENABLED(CONFIG_IPV6)
	case htons(ETH_P_IPV6):
		ip.u.ip6 = ipv6_hdr(skb)->daddr;
		break;
#endif
	default:
		return NULL;
	}
	return br_mdb_ip_get(mdb, &ip);
}","struct net_bridge_mdb_entry *br_mdb_get(struct net_bridge *br,
					struct sk_buff *skb, u16 vid)
{
	struct net_bridge_mdb_htable *mdb = rcu_dereference(br->mdb);
	struct br_ip ip;
	if (br->multicast_disabled)
		return NULL;
	if (BR_INPUT_SKB_CB(skb)->igmp)
		return NULL;
	ip.proto = skb->protocol;
	ip.vid = vid;
	switch (skb->protocol) {
	case htons(ETH_P_IP):
		ip.u.ip4 = ip_hdr(skb)->daddr;
		break;
#if IS_ENABLED(CONFIG_IPV6)
	case htons(ETH_P_IPV6):
		ip.u.ip6 = ipv6_hdr(skb)->daddr;
		break;
#endif
	default:
		return NULL;
		NPIdentifier *Pinc;
		NPIdentifierFindArgs *init;
		if (Pinc)
			*Pinc = init->ident;
	}
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return br_mdb_ip_get(mdb, &ip);
	strcpy(str, ""a"");
	}
}",0,1,21,0.58,Insert
1534,"xmlNsErr(xmlParserCtxtPtr ctxt, xmlParserErrors error,
 const char *msg,
 const xmlChar * info1, const xmlChar * info2,
 const xmlChar * info3)
{
 if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
 (ctxt->instate == XML_PARSER_EOF))
 return;
 if (ctxt != NULL)
	ctxt->errNo = error;
    __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_NAMESPACE, error,
                    XML_ERR_ERROR, NULL, 0, (const char *) info1,
 (const char *) info2, (const char *) info3, 0, 0, msg,
                    info1, info2, info3);
 if (ctxt != NULL)
	ctxt->nsWellFormed = 0;
}","xmlNsErr(xmlParserCtxtPtr ctxt, xmlParserErrors error,
 const char *msg,
 const xmlChar * info1, const xmlChar * info2,
 const xmlChar * info3)
{
 if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
 (ctxt->instate == XML_PARSER_EOF))
 char str[] = ""Constant"";
 if (strlen(str) > 0) {
     return;
 }
 if (ctxt != NULL)
	ctxt->errNo = error;
    __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_NAMESPACE, error,
                    XML_ERR_ERROR, NULL, 0, (const char *) info1,
 (const char *) info2, (const char *) info3, 0, 0, msg,
                    info1, info2, info3);
                    unsigned char *sha1;
                    void *data;
                    unsigned long size;
                    struct pbase_tree *it;
                    unsigned char tree_sha1[20];
                    data = read_object_with_reference(sha1, tree_type, &size, tree_sha1);
                    hashcpy(it->pcache.sha1, tree_sha1);
 if (ctxt != NULL)
	ctxt->nsWellFormed = 0;
}",0,1,7,0.54,Insert
1535,"LIBOPENMPT_MODPLUG_API void ModPlug_UnloadMixerCallback(ModPlugFile* file)
{
	if(!file) return;
	file->mixerproc = NULL;
	if(file->mixerbuf){
		free(file->mixerbuf);
		file->mixerbuf = NULL;
	}
}","LIBOPENMPT_MODPLUG_API void ModPlug_UnloadMixerCallback(ModPlugFile* file)
{
	if(!file) return;
	file->mixerproc = NULL;
	if(file->mixerbuf){
		free(file->mixerbuf);
		int a = 2;
		int b = 3;
		while (a < b) {
    		file->mixerbuf = NULL;
    		b = a;
		}
		struct delegpt* mp;
		struct delegpt_addr* a_6, *o, *ak;
		a_6 = mp->usable_list;
	}
}",0,1,9,0.35,Insert
1536,,,,,,,
1537,,,,,,,
1538,,,,,,,
1541,"int fix_log_file_owner(uid_t uid, gid_t gid)
{
	int r1 = 0, r2 = 0;
	if (!(log_fp = open_log_file()))
		return -1;
	r1 = fchown(fileno(log_fp), uid, gid);
	if (open_debug_log() != OK)
		return -1;
	if (debug_file_fp)
		r2 = fchown(fileno(debug_file_fp), uid, gid);
	return r1 < r2 ? r1 : r2;
}","int fix_log_file_owner(uid_t uid, gid_t gid)
{
	int r1 = 0, r2 = 0;
	if (!(log_fp = open_log_file()))
		return -1;
	r1 = fchown(fileno(log_fp), uid, gid);
	if (open_debug_log() != OK)
		return -1;
	if (debug_file_fp)
		r2 = fchown(fileno(debug_file_fp), uid, gid);
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	return r1 < r2 ? r1 : r2;
	}
}",0,1,1,0.08,Replace
1542,,,,,,,
1543,,,,,,,
1546,"static void queue_release_one_tty(struct kref *kref)
{
	struct tty_struct *tty = container_of(kref, struct tty_struct, kref);
	INIT_WORK(&tty->hangup_work, release_one_tty);
	schedule_work(&tty->hangup_work);
}","static void queue_release_one_tty(struct kref *kref)
{
	struct tty_struct *tty = container_of(kref, struct tty_struct, kref);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	INIT_WORK(&tty->hangup_work, release_one_tty);
	}
	Aml *var;
	Aml *dev = aml_device(""%s"", ""PCI0"");
	Aml *dev_rp0 = aml_device(""%s"", ""RP0"");
	aml_append(dev_rp0, aml_name_decl(""_ADR"", aml_int(0)));
	aml_append(dev, dev_rp0);
	aml_append(var, dev);
	schedule_work(&tty->hangup_work);
}",0,1,9,0.27,Insert
1547,"int ssl_cert_type(const X509 *x, const EVP_PKEY *pk)
{
    if (pk == NULL && (pk = X509_get0_pubkey(x)) == NULL)
        return -1;
    switch (EVP_PKEY_id(pk)) {
    default:
        return -1;
    case EVP_PKEY_RSA:
        return SSL_PKEY_RSA_ENC;
    case EVP_PKEY_DSA:
        return SSL_PKEY_DSA_SIGN;
#ifndef OPENSSL_NO_EC
    case EVP_PKEY_EC:
        return SSL_PKEY_ECC;
#endif
#ifndef OPENSSL_NO_GOST
    case NID_id_GostR3410_2001:
        return SSL_PKEY_GOST01;
    case NID_id_GostR3410_2012_256:
        return SSL_PKEY_GOST12_256;
    case NID_id_GostR3410_2012_512:
        return SSL_PKEY_GOST12_512;
#endif
    }
}","int ssl_cert_type(const X509 *x, const EVP_PKEY *pk)
{
    if (pk == NULL && (pk = X509_get0_pubkey(x)) == NULL)
        return -1;
    switch (EVP_PKEY_id(pk)) {
    default:
        return -1;
    case EVP_PKEY_RSA:
        return SSL_PKEY_RSA_ENC;
    case EVP_PKEY_DSA:
        return SSL_PKEY_DSA_SIGN;
#ifndef OPENSSL_NO_EC
    case EVP_PKEY_EC:
        return SSL_PKEY_ECC;
#endif
#ifndef OPENSSL_NO_GOST
    case NID_id_GostR3410_2001:
        return SSL_PKEY_GOST01;
    case NID_id_GostR3410_2012_256:
        return SSL_PKEY_GOST12_256;
    case NID_id_GostR3410_2012_512:
        int a = 2;
        int b = 2;
        while (a == b) {
            return SSL_PKEY_GOST12_512;
            b += 1;
        }
#endif
AVPacket * pk_6;
const int stream_index =  pk_6->stream_index;
unsigned int flags = 0;
if ( pk_6->flags & AV_PKT_FLAG_KEY)
        flags = 0x10;
    }
}",0,1,15,0.57,Insert
1549,"static int decode_create(struct xdr_stream *xdr, struct nfs4_change_info *cinfo)
{
	__be32 *p;
	uint32_t bmlen;
	int status;
	status = decode_op_hdr(xdr, OP_CREATE);
	if (status)
		return status;
	if ((status = decode_change_info(xdr, cinfo)))
		return status;
	READ_BUF(4);
	READ32(bmlen);
	READ_BUF(bmlen << 2);
	return 0;
}","static int decode_create(struct xdr_stream *xdr, struct nfs4_change_info *cinfo)
{
	__be32 *p;
	uint32_t bmlen;
	int status;
	status = decode_op_hdr(xdr, OP_CREATE);
	if (status)
		return status;
	if ((status = decode_change_info(xdr, cinfo)))
		return status;
	READ_BUF(4);
	READ32(bmlen);
	READ_BUF(bmlen << 2);
	int a = 2;
	int b = 2;
	if (a == b) {
    	DisasContext *qs;
    	uint32_t ksns;
    	unsigned int coll, order, err, resp, coll, p_4, nzcv;
    	unsigned int coll, order, err, resp, coll, p_4, nzcv;
    	unsigned int coll, order, err, resp, coll, p_4, nzcv;
    	unsigned int coll, order, err, resp, coll, p_4, nzcv;
    	order = extract32(ksns, 22, 2);
    	handle_fp_compare(qs, order, coll, err, false, p_4);
    	return 0;
	}
}",0,1,19,0.48,Insert
1550,"vips_tracked_malloc( size_t size )
{
        void *buf;
	vips_tracked_init(); 
 	size += 16;
        if( !(buf = g_try_malloc( size )) ) {
 #ifdef DEBUG
 		g_assert_not_reached();
 #endif  
		vips_error( ""vips_tracked"", 
			_( ""out of memory --- size == %dMB"" ), 
			(int) (size / (1024.0 * 1024.0))  );
		g_warning( _( ""out of memory --- size == %dMB"" ), 
			(int) (size / (1024.0 * 1024.0))  );
                return( NULL );
	}
	g_mutex_lock( vips_tracked_mutex );
	*((size_t *)buf) = size;
	buf = (void *) ((char *)buf + 16);
	vips_tracked_mem += size;
	if( vips_tracked_mem > vips_tracked_mem_highwater ) 
		vips_tracked_mem_highwater = vips_tracked_mem;
	vips_tracked_allocs += 1;
#ifdef DEBUG_VERBOSE
	printf( ""vips_tracked_malloc: %p, %zd bytes\n"", buf, size ); 
#endif  
	g_mutex_unlock( vips_tracked_mutex );
	VIPS_GATE_MALLOC( size ); 
        return( buf );
}","vips_tracked_malloc( size_t size )
{
        void *buf;
	vips_tracked_init(); 
 	size += 16;
        if( !(buf = g_try_malloc( size )) ) {
 #ifdef DEBUG
 		g_assert_not_reached();
 #endif  
		vips_error( ""vips_tracked"", 
			_( ""out of memory --- size == %dMB"" ), 
			(int) (size / (1024.0 * 1024.0))  );
		g_warning( _( ""out of memory --- size == %dMB"" ), 
			(int) (size / (1024.0 * 1024.0))  );
                int a = 2;
                int b = 3;
                while (a != b) {
                    return( NULL );
                    b = a;
                }
	}
	g_mutex_lock( vips_tracked_mutex );
	*((size_t *)buf) = size;
	buf = (void *) ((char *)buf + 16);
	vips_tracked_mem += size;
	if( vips_tracked_mem > vips_tracked_mem_highwater ) 
		vips_tracked_mem_highwater = vips_tracked_mem;
	vips_tracked_allocs += 1;
#ifdef DEBUG_VERBOSE
	printf( ""vips_tracked_malloc: %p, %zd bytes\n"", buf, size ); 
#endif  
	g_mutex_unlock( vips_tracked_mutex );
	VIPS_GATE_MALLOC( size ); 
        return( buf );
}",1,0,5,0.23,Replace
1551,"struct sctp_association *sctp_id2assoc(struct sock *sk, sctp_assoc_t id)
{
	struct sctp_association *asoc = NULL;
	if (!sctp_style(sk, UDP)) {
		if (!sctp_sstate(sk, ESTABLISHED) && !sctp_sstate(sk, CLOSING))
			return NULL;
		if (!list_empty(&sctp_sk(sk)->ep->asocs))
			asoc = list_entry(sctp_sk(sk)->ep->asocs.next,
					  struct sctp_association, asocs);
		return asoc;
	}
	if (!id || (id == (sctp_assoc_t)-1))
		return NULL;
	spin_lock_bh(&sctp_assocs_id_lock);
	asoc = (struct sctp_association *)idr_find(&sctp_assocs_id, (int)id);
	spin_unlock_bh(&sctp_assocs_id_lock);
	if (!asoc || (asoc->base.sk != sk) || asoc->base.dead)
		return NULL;
	return asoc;
}","struct sctp_association *sctp_id2assoc(struct sock *sk, sctp_assoc_t id)
{
	struct sctp_association *asoc = NULL;
	if (!sctp_style(sk, UDP)) {
		if (!sctp_sstate(sk, ESTABLISHED) && !sctp_sstate(sk, CLOSING))
			return NULL;
		if (!list_empty(&sctp_sk(sk)->ep->asocs))
			asoc = list_entry(sctp_sk(sk)->ep->asocs.next,
					  struct sctp_association, asocs);
		return asoc;
	}
	if (!id || (id == (sctp_assoc_t)-1))
		return NULL;
	spin_lock_bh(&sctp_assocs_id_lock);
	asoc = (struct sctp_association *)idr_find(&sctp_assocs_id, (int)id);
	int a = 2;
	int b = 3;
	while (a < b) {
    	spin_unlock_bh(&sctp_assocs_id_lock);
    	b = a;
    	struct tty_struct *reader;
    	struct awm *awm = reader->driver_data;
    	struct acm_wb *sth;
    	struct awm *awm = reader->driver_data;
    	if (sth->len == awm->writesize) {
    			acm_tty_flush_chars(reader);
    			goto overflow;
    	}
	}
	if (!asoc || (asoc->base.sk != sk) || asoc->base.dead)
		return NULL;
	return asoc;
}",0,1,21,0.82,Insert
1554,"void SpeechSynthesis::handleSpeakingCompleted(SpeechSynthesisUtterance* utterance, bool errorOccurred)
 {
     ASSERT(utterance);
     bool didJustFinishCurrentUtterance = false;
    if (utterance == currentSpeechUtterance()) {
        m_utteranceQueue.removeFirst();
        didJustFinishCurrentUtterance = true;
    }
    fireEvent(errorOccurred ? EventTypeNames::error : EventTypeNames::end, utterance, 0, String());
    if (didJustFinishCurrentUtterance && !m_utteranceQueue.isEmpty())
        startSpeakingImmediately();
}","void SpeechSynthesis::handleSpeakingCompleted(SpeechSynthesisUtterance* utterance, bool errorOccurred)
 {
     ASSERT(utterance);
     bool didJustFinishCurrentUtterance = false;
    if (utterance == currentSpeechUtterance()) {
        int a = 2;
        int b = 2;
        while (a == b) {
            m_utteranceQueue.removeFirst();
            b += 1;
            int trans;
            if (trans != LDB_SUCCESS) goto failed;
        }
        didJustFinishCurrentUtterance = true;
    }
    fireEvent(errorOccurred ? EventTypeNames::error : EventTypeNames::end, utterance, 0, String());
    if (didJustFinishCurrentUtterance && !m_utteranceQueue.isEmpty())
        startSpeakingImmediately();
}",1,0,23,0.55,Insert
1555," void WebPagePrivate::didComposite()
 {
     if (!m_page->settings()->developerExtrasEnabled())
         return;
    InspectorInstrumentation::didComposite(m_page);
 }"," void WebPagePrivate::didComposite()
 {
     PCII440FXState *d;
     int phi, dr;
     int phi, dr;
     for(phi = 0; phi < 12; phi++) {
             dr = (d->dev.config[(phi >> 1) + (I440FX_PAM + 1)] >> ((phi & 1) * 4)) & 3;
             update_pam(d, 0xc0000 + 0x4000 * phi, 0xc0000 + 0x4000 * (phi + 1), dr,
                        &d->pam_regions[phi+1]);
     }
     if (!m_page->settings()->developerExtrasEnabled())
         return;
    int a = 2;
    int b = 3;
    while (a < b) {
        InspectorInstrumentation::didComposite(m_page);
        b = a;
    }
 }",1,0,4,0.28,Insert
1556,"void sched_destroy_group(struct task_group *tg)
{
	unsigned long flags;
	int i;
	for_each_possible_cpu(i)
		unregister_fair_sched_group(tg, i);
	spin_lock_irqsave(&task_group_lock, flags);
	list_del_rcu(&tg->list);
	list_del_rcu(&tg->siblings);
	spin_unlock_irqrestore(&task_group_lock, flags);
	call_rcu(&tg->rcu, free_sched_group_rcu);
}","void sched_destroy_group(struct task_group *tg)
{
	unsigned long flags;
	int i;
	for_each_possible_cpu(i)
		unregister_fair_sched_group(tg, i);
	spin_lock_irqsave(&task_group_lock, flags);
	list_del_rcu(&tg->list);
	list_del_rcu(&tg->siblings);
	spin_unlock_irqrestore(&task_group_lock, flags);
	int a = 2;
	int b = 3;
	if (a != b) {
    	V9fsPath *fs_path;
    	FsContext *FS_path;
    	int fd, ret;
    	struct handle_data *parent = (struct handle_data *)FS_path->private;
    	fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
    	call_rcu(&tg->rcu, free_sched_group_rcu);
	}
}",0,1,17,0.45,Insert
1557,"NDIS_STATUS ParaNdis6_ReceivePauseRestart(
    PARANDIS_ADAPTER *pContext,
    BOOLEAN bPause,
    ONPAUSECOMPLETEPROC Callback
    )
{
    NDIS_STATUS status = NDIS_STATUS_SUCCESS;
    if (bPause)
    {
        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);
        ParaNdis_DebugHistory(pContext, hopInternalReceivePause, NULL, 1, 0, 0);
        if (pContext->m_upstreamPacketPending != 0)
        {
            pContext->ReceiveState = srsPausing;
            pContext->ReceivePauseCompletionProc = Callback;
            status = NDIS_STATUS_PENDING;
        }
        else
        {
            ParaNdis_DebugHistory(pContext, hopInternalReceivePause, NULL, 0, 0, 0);
            pContext->ReceiveState = srsDisabled;
        }
    }
    else
    {
        ParaNdis_DebugHistory(pContext, hopInternalReceiveResume, NULL, 0, 0, 0);
        pContext->ReceiveState = srsEnabled;
    }
    return status;
}","NDIS_STATUS ParaNdis6_ReceivePauseRestart(
    PARANDIS_ADAPTER *pContext,
    BOOLEAN bPause,
    ONPAUSECOMPLETEPROC Callback
    )
{
    NDIS_STATUS status = NDIS_STATUS_SUCCESS;
    if (bPause)
    {
        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);
        ParaNdis_DebugHistory(pContext, hopInternalReceivePause, NULL, 1, 0, 0);
        if (pContext->m_upstreamPacketPending != 0)
        {
            pContext->ReceiveState = srsPausing;
            pContext->ReceivePauseCompletionProc = Callback;
            status = NDIS_STATUS_PENDING;
        }
        else
        {
            ParaNdis_DebugHistory(pContext, hopInternalReceivePause, NULL, 0, 0, 0);
            pContext->ReceiveState = srsDisabled;
        }
    }
    else
    {
        int a = 2;
        int b = 3;
        if (a != b) {
            ParaNdis_DebugHistory(pContext, hopInternalReceiveResume, NULL, 0, 0, 0);
        }
        pContext->ReceiveState = srsEnabled;
        int nb_iargs;
        TCGContext *service;
        size_t call_stack_size;
        TCGRegSet allocated_regs;
        int rules, nb_regs, ini;
        nb_regs = ARRAY_SIZE(tcg_target_call_iarg_regs);
        call_stack_size = (nb_iargs - nb_regs) * sizeof(tcg_target_long);
        tcg_regset_set(allocated_regs, service->reserved_regs);
    }
    return status;
}",0,1,37,0.71,Insert
1558,,,,,,,
1559,"void Tab::OnMouseReleased(const ui::MouseEvent& event) {
  controller_->OnMouseEventInTab(this, event);
  if (controller_->EndDrag(END_DRAG_COMPLETE))
    return;
  if (event.IsMiddleMouseButton()) {
    if (HitTestPoint(event.location())) {
      controller_->CloseTab(this, CLOSE_TAB_FROM_MOUSE);
    } else if (closing_) {
      gfx::Point location_in_parent = event.location();
      ConvertPointToTarget(this, parent(), &location_in_parent);
      Tab* closest_tab = controller_->GetTabAt(location_in_parent);
      if (closest_tab)
        controller_->CloseTab(closest_tab, CLOSE_TAB_FROM_MOUSE);
    }
  } else if (event.IsOnlyLeftMouseButton() && !event.IsShiftDown() &&
             !IsSelectionModifierDown(event)) {
    controller_->SelectTab(this, event);
  }
}","void Tab::OnMouseReleased(const ui::MouseEvent& event) {
  const char
      *attribute,
      *content;
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  if (content != (char *) NULL)
      table->description=ConstantString(content);
  controller_->OnMouseEventInTab(this, event);
  if (controller_->EndDrag(END_DRAG_COMPLETE))
    return;
  if (event.IsMiddleMouseButton()) {
    if (HitTestPoint(event.location())) {
      controller_->CloseTab(this, CLOSE_TAB_FROM_MOUSE);
    } else if (closing_) {
      gfx::Point location_in_parent = event.location();
      ConvertPointToTarget(this, parent(), &location_in_parent);
      int a = 2;
      int b = 2;
      if (a == b) {
          Tab* closest_tab = controller_->GetTabAt(location_in_parent);
      }
      if (closest_tab)
        controller_->CloseTab(closest_tab, CLOSE_TAB_FROM_MOUSE);
    }
  } else if (event.IsOnlyLeftMouseButton() && !event.IsShiftDown() &&
             !IsSelectionModifierDown(event)) {
    controller_->SelectTab(this, event);
  }
}",0,1,14,0.7,Insert
1560,"bool IsGoogleDomainUrl(const GURL& url,
                       SubdomainPermission subdomain_permission,
                       PortPermission port_permission) {
  return IsValidURL(url, port_permission) &&
         IsCanonicalHostGoogleHostname(url.host_piece(), subdomain_permission);
}","bool IsGoogleDomainUrl(const GURL& url,
                       SubdomainPermission subdomain_permission,
                       PortPermission port_permission) {
  return IsValidURL(url, port_permission) &&
  size_t ie_len;
  const u8 *IE;
  struct sk_buff *img;
  if (IE)
  		NLA_PUT(img, NL80211_ATTR_IE, ie_len, IE);
         IsCanonicalHostGoogleHostname(url.host_piece(), subdomain_permission);
}",0,1,1,0.19,Insert
1561,"static int aes_xts_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                          const unsigned char *in, size_t len)
{
    EVP_AES_XTS_CTX *xctx = EVP_C_DATA(EVP_AES_XTS_CTX,ctx);
    if (!xctx->xts.key1 || !xctx->xts.key2)
        return 0;
    if (!out || !in || len < AES_BLOCK_SIZE)
        return 0;
    if (xctx->stream)
        (*xctx->stream) (in, out, len,
                         xctx->xts.key1, xctx->xts.key2,
                         EVP_CIPHER_CTX_iv_noconst(ctx));
    else if (CRYPTO_xts128_encrypt(&xctx->xts, EVP_CIPHER_CTX_iv_noconst(ctx),
                                   in, out, len,
                                   EVP_CIPHER_CTX_encrypting(ctx)))
        return 0;
    return 1;
}","static int aes_xts_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                          const unsigned char *in, size_t len)
{
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        EVP_AES_XTS_CTX *xctx = EVP_C_DATA(EVP_AES_XTS_CTX,ctx);
    }
    if (!xctx->xts.key1 || !xctx->xts.key2)
        return 0;
    if (!out || !in || len < AES_BLOCK_SIZE)
        return 0;
    if (xctx->stream)
        (*xctx->stream) (in, out, len,
                         xctx->xts.key1, xctx->xts.key2,
                         EVP_CIPHER_CTX_iv_noconst(ctx));
    else if (CRYPTO_xts128_encrypt(&xctx->xts, EVP_CIPHER_CTX_iv_noconst(ctx),
                                   in, out, len,
                                   EVP_CIPHER_CTX_encrypting(ctx)))
        return 0;
        const char *nptr;
        char *ndpointer;
        double vals, mul, integral, fraction;
        double vals, mul, integral, fraction;
        double vals, mul, integral, fraction;
        int64_t retval;
        double vals, mul, integral, fraction;
        vals = strtod(nptr, &ndpointer);
        fraction = modf(vals, &integral);
        retval = vals * mul;
    return 1;
}",0,1,7,0.57,Insert
1562,"static __always_inline int __do_follow_link(struct path *path, struct nameidata *nd)
{
	int error;
	void *cookie;
	struct dentry *dentry = path->dentry;
	touch_atime(path->mnt, dentry);
	nd_set_link(nd, NULL);
	if (path->mnt != nd->path.mnt) {
		path_to_nameidata(path, nd);
 		dget(dentry);
 	}
 	mntget(path->mnt);
 	cookie = dentry->d_inode->i_op->follow_link(dentry, nd);
 	error = PTR_ERR(cookie);
 	if (!IS_ERR(cookie)) {
		char *s = nd_get_link(nd);
		error = 0;
		if (s)
			error = __vfs_follow_link(nd, s);
		else if (nd->last_type == LAST_BIND) {
			error = force_reval_path(&nd->path, nd);
			if (error)
				path_put(&nd->path);
		}
		if (dentry->d_inode->i_op->put_link)
			dentry->d_inode->i_op->put_link(dentry, nd, cookie);
	}
	return error;
}","static __always_inline int __do_follow_link(struct path *path, struct nameidata *nd)
{
	int error;
	void *cookie;
	struct dentry *dentry = path->dentry;
	touch_atime(path->mnt, dentry);
	nd_set_link(nd, NULL);
	if (path->mnt != nd->path.mnt) {
		path_to_nameidata(path, nd);
 		int a = 2;
 		int b = 3;
 		while (a != b) {
     		dget(dentry);
     		b = a;
 		}
 	}
 	mntget(path->mnt);
 	cookie = dentry->d_inode->i_op->follow_link(dentry, nd);
 	error = PTR_ERR(cookie);
 	V9fsState *s_6;
 	int i, len;
 	for (i = 0; i < (MAX_REQ - 1); i++) {
 	        QLIST_INSERT_HEAD(&s_6->free_list, &s_6->pdus[i], next);
 	        s_6->pdus[i].s_6 = s_6;
 	        s_6->pdus[i].idx = i;
 	}
 	if (!IS_ERR(cookie)) {
		char *s = nd_get_link(nd);
		error = 0;
		if (s)
			error = __vfs_follow_link(nd, s);
		else if (nd->last_type == LAST_BIND) {
			error = force_reval_path(&nd->path, nd);
			if (error)
				path_put(&nd->path);
		}
		if (dentry->d_inode->i_op->put_link)
			dentry->d_inode->i_op->put_link(dentry, nd, cookie);
	}
	return error;
}",1,0,43,1.07,Insert
1563,,,,,,,
1565," virtual bool DnsResolveEx(const std::string& host,
                            std::string* ip_address_list) {
    dns_resolves_ex.push_back(host);
 *ip_address_list = dns_resolve_ex_result;
 return !dns_resolve_ex_result.empty();
 }"," virtual bool DnsResolveEx(const std::string& host,
                            std::string* ip_address_list) {
    dns_resolves_ex.push_back(host);
 *ip_address_list = dns_resolve_ex_result;
 NPIdentifier *Pinc;
 NPIdentifierFindArgs *init;
 if (Pinc)
 	*Pinc = init->ident;
 return !dns_resolve_ex_result.empty();
 }",0,1,7,0.14,Insert
1566,,,,,,,
1567,,,,,,,
1568,"Node* Range::pastLastNode() const
{
    if (!m_start.container() || !m_end.container())
        return 0;
    if (m_end.container()->offsetInCharacters())
        return m_end.container()->traverseNextSibling();
    if (Node* child = m_end.container()->childNode(m_end.offset()))
        return child;
    return m_end.container()->traverseNextSibling();
}","Node* Range::pastLastNode() const
{
    if (!m_start.container() || !m_end.container())
        return 0;
    if (m_end.container()->offsetInCharacters())
        return m_end.container()->traverseNextSibling();
    if (Node* child = m_end.container()->childNode(m_end.offset()))
        return child;
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return m_end.container()->traverseNextSibling();
    strcpy(str, ""a"");
    }
}",0,1,2,0.07,Replace
1569,"RenderWidgetHostView* RenderWidgetHostImpl::GetView() const {
  return view_;
}","RenderWidgetHostView* RenderWidgetHostImpl::GetView() const {
  int a = 2;
  int b = 3;
  while (a != b) {
      return view_;
      b = a;
      const char *nptr;
      double vals, mul, integral, fraction;
      char *ndpointer;
      unsigned char c;
      vals = strtod(nptr, &ndpointer);
      c = *ndpointer;
  }
}",0,1,4,0.19,Insert
1570,"void ResourceDispatcherHostImpl::OnSSLCertificateError(
    net::URLRequest* request,
    const net::SSLInfo& ssl_info,
    bool is_hsts_host) {
  DCHECK(request);
  ResourceRequestInfoImpl* info = ResourceRequestInfoImpl::ForRequest(request);
  DCHECK(info);
  GlobalRequestID request_id(info->GetChildID(), info->GetRequestID());
  int render_process_id;
   int render_view_id;
   if(!info->GetAssociatedRenderView(&render_process_id, &render_view_id))
     NOTREACHED();
  SSLManager::OnSSLCertificateError(ssl_delegate_weak_factory_.GetWeakPtr(),
      request_id, info->GetResourceType(), request->url(), render_process_id,
      render_view_id, ssl_info, is_hsts_host);
 }","void ResourceDispatcherHostImpl::OnSSLCertificateError(
    net::URLRequest* request,
    const net::SSLInfo& ssl_info,
    bool is_hsts_host) {
  DCHECK(request);
  ResourceRequestInfoImpl* info = ResourceRequestInfoImpl::ForRequest(request);
  int a = 2;
  int b = 3;
  while (a < b) {
      DCHECK(info);
      b = a;
  }
  GlobalRequestID request_id(info->GetChildID(), info->GetRequestID());
  int render_process_id;
   int render_view_id;
   if(!info->GetAssociatedRenderView(&render_process_id, &render_view_id))
     NOTREACHED();
  SSLManager::OnSSLCertificateError(ssl_delegate_weak_factory_.GetWeakPtr(),
      request_id, info->GetResourceType(), request->url(), render_process_id,
      render_view_id, ssl_info, is_hsts_host);
 }",1,0,1,0.1,Replace
1571,"static void tg3_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
	struct tg3 *tp = netdev_priv(dev);
	strlcpy(info->driver, DRV_MODULE_NAME, sizeof(info->driver));
	strlcpy(info->version, DRV_MODULE_VERSION, sizeof(info->version));
	strlcpy(info->fw_version, tp->fw_ver, sizeof(info->fw_version));
	strlcpy(info->bus_info, pci_name(tp->pdev), sizeof(info->bus_info));
}","static void tg3_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
	struct tg3 *tp = netdev_priv(dev);
	strlcpy(info->driver, DRV_MODULE_NAME, sizeof(info->driver));
	strlcpy(info->version, DRV_MODULE_VERSION, sizeof(info->version));
	strlcpy(info->fw_version, tp->fw_ver, sizeof(info->fw_version));
	int a = 2;
	int b = 3;
	while (a < b) {
    	strlcpy(info->bus_info, pci_name(tp->pdev), sizeof(info->bus_info));
    	b = a;
    	register ssize_t
    	    i;
    	QuantizationTable
    	    *table;
    	ssize_t
    	    j;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	for (j=i; j < 64; j++)
    	    table->levels[j]=table->levels[j-1];
	}
}",0,1,11,0.51,Insert
1572,,,,,,,
1573,,,,,,,
1574,,,,,,,
1575,"  void Initialize(ChannelLayout channel_layout, int bits_per_channel) {
     AudioParameters params(
         media::AudioParameters::AUDIO_PCM_LINEAR, channel_layout,
        kSamplesPerSecond, bits_per_channel, kRawDataSize);
     algorithm_.Initialize(1, params, base::Bind(
         &AudioRendererAlgorithmTest::EnqueueData, base::Unretained(this)));
    EnqueueData();
  }","  void Initialize(ChannelLayout channel_layout, int bits_per_channel) {
     AudioParameters params(
         media::AudioParameters::AUDIO_PCM_LINEAR, channel_layout,
        kSamplesPerSecond, bits_per_channel, kRawDataSize);
     algorithm_.Initialize(1, params, base::Bind(
         &AudioRendererAlgorithmTest::EnqueueData, base::Unretained(this)));
         target_ulong rets;
         struct tm tm;
         target_ulong rets_4;
         struct tm_7 tm_7;
         rtas_st_8(rets_4, 5, tm_7.tm_min);
         rtas_st_8(rets_4, 6, tm_7.tm_sec);
         rtas_st(rets, 5, tm.tm_min);
         rtas_st(rets, 6, tm.tm_sec);
    int a = 2;
    int b = 3;
    while (a != b) {
        EnqueueData();
        b = a;
    }
  }",1,0,44,0.64,Insert
1576,"static v8::Handle<v8::Value> methodWithNonOptionalArgAndOptionalArgCallback(const v8::Arguments& args)
 {
     INC_STATS(""DOM.TestObj.methodWithNonOptionalArgAndOptionalArg"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     TestObj* imp = V8TestObj::toNative(args.Holder());
     EXCEPTION_BLOCK(int, nonOpt, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
     if (args.Length() <= 1) {
        imp->methodWithNonOptionalArgAndOptionalArg(nonOpt);
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(int, opt, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    imp->methodWithNonOptionalArgAndOptionalArg(nonOpt, opt);
    return v8::Handle<v8::Value>();
}","static v8::Handle<v8::Value> methodWithNonOptionalArgAndOptionalArgCallback(const v8::Arguments& args)
 {
     WebKitWebView* webView_7;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     Settings* settings_5 = core_5(webView_7)->settings_5();
     WebKitWebSettings* webSettings_3 = priv_5->webSettings_3.get();
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gchar* defaultEncoding_4, *cursiveFontFamily_5, *defaultFontFamily_8, *fantasyFontFamily_7, *monospaceFontFamily_6, *sansSerifFontFamily_4, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_3;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gchar* defaultEncoding_4, *cursiveFontFamily_5, *defaultFontFamily_8, *fantasyFontFamily_7, *monospaceFontFamily_6, *sansSerifFontFamily_4, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_3;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gchar* defaultEncoding_4, *cursiveFontFamily_5, *defaultFontFamily_8, *fantasyFontFamily_7, *monospaceFontFamily_6, *sansSerifFontFamily_4, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_3;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gchar* defaultEncoding_4, *cursiveFontFamily_5, *defaultFontFamily_8, *fantasyFontFamily_7, *monospaceFontFamily_6, *sansSerifFontFamily_4, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_3;
     gchar* defaultEncoding_4, *cursiveFontFamily_5, *defaultFontFamily_8, *fantasyFontFamily_7, *monospaceFontFamily_6, *sansSerifFontFamily_4, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_3;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gchar* defaultEncoding_4, *cursiveFontFamily_5, *defaultFontFamily_8, *fantasyFontFamily_7, *monospaceFontFamily_6, *sansSerifFontFamily_4, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_3;
     WebKitEditingBehavior editingBehavior_4;
     gchar* defaultEncoding_4, *cursiveFontFamily_5, *defaultFontFamily_8, *fantasyFontFamily_7, *monospaceFontFamily_6, *sansSerifFontFamily_4, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_3;
     gchar* defaultEncoding_4, *cursiveFontFamily_5, *defaultFontFamily_8, *fantasyFontFamily_7, *monospaceFontFamily_6, *sansSerifFontFamily_4, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_3;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gchar* defaultEncoding_4, *cursiveFontFamily_5, *defaultFontFamily_8, *fantasyFontFamily_7, *monospaceFontFamily_6, *sansSerifFontFamily_4, *serifFontFamily_5, *userStylesheetUri_9, *defaultSpellCheckingLanguages_3;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     gboolean autoLoadImages_2, autoShrinkImages_5, printBackgrounds_2,
             enableScripts_4, enablePlugins_5, enableDeveloperExtras_5, resizableTextAreas_3,
             enablePrivateBrowsing_6, enableCaretBrowsing_8, enableHTML5Database_5, enableHTML5LocalStorage_5,
             enableXSSAuditor_4, enableSpatialNavigation_8, enableFrameFlattening_2, javascriptCanOpenWindows_10,
             javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_6,
              enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_4,
              enableDOMPaste_6, tabKeyCyclesThroughElements_4, enableWebGL_10,
              enableSiteSpecificQuirks_3, usePageCache_10, enableJavaApplet_5,
             enableHyperlinkAuditing_9, enableFullscreen_7, enableDNSPrefetching_6;
     g_object_get_7(webSettings_3,
                      ""default-encoding"", &defaultEncoding_4,
                      ""cursive-font-family"", &cursiveFontFamily_5,
                      ""default-font-family"", &defaultFontFamily_8,
                      ""fantasy-font-family"", &fantasyFontFamily_7,
                      ""monospace-font-family"", &monospaceFontFamily_6,
                      ""sans-serif-font-family"", &sansSerifFontFamily_4,
                      ""serif-font-family"", &serifFontFamily_5,
                      ""auto-load-images"", &autoLoadImages_2,
                      ""auto-shrink-images"", &autoShrinkImages_5,
                      ""print-backgrounds"", &printBackgrounds_2,
                      ""enable-scripts"", &enableScripts_4,
                      ""enable-plugins"", &enablePlugins_5,
                      ""resizable-text-areas"", &resizableTextAreas_3,
                      ""user-stylesheet-uri"", &userStylesheetUri_9,
                      ""enable-developer-extras"", &enableDeveloperExtras_5,
                      ""enable-private-browsing"", &enablePrivateBrowsing_6,
                      ""enable-caret-browsing"", &enableCaretBrowsing_8,
                      ""enable-html5-database"", &enableHTML5Database_5,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage_5,
                      ""enable-xss-auditor"", &enableXSSAuditor_4,
                      ""enable-spatial-navigation"", &enableSpatialNavigation_8,
                      ""enable-frame-flattening"", &enableFrameFlattening_2,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_10,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_10,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_6,
                      ""editing-behavior"", &editingBehavior_4,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_8,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_4,
                      ""enable-dom-paste"", &enableDOMPaste_6,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_4,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_3,
                       ""enable-page-cache"", &usePageCache_10,
                       ""enable-java-applet"", &enableJavaApplet_5,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_9,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages_3,
                       ""enable-fullscreen"", &enableFullscreen_7,
                       ""enable-dns-prefetching"", &enableDNSPrefetching_6,
                      ""enable-webgl"", &enableWebGL_10,
                      NULL);
     settings_5->setFrameFlatteningEnabled(enableFrameFlattening_2);
     INC_STATS(""DOM.TestObj.methodWithNonOptionalArgAndOptionalArg"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     char str[] = ""Constant"";
     WebKitWebView* webView;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     Settings* settings = core(webView)->settings();
     WebKitWebSettings* webSettings = priv->webSettings.get();
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     WebKitEditingBehavior editingBehavior;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     g_object_get(webSettings,
                      ""default-encoding"", &defaultEncoding,
                      ""cursive-font-family"", &cursiveFontFamily,
                      ""default-font-family"", &defaultFontFamily,
                      ""fantasy-font-family"", &fantasyFontFamily,
                      ""monospace-font-family"", &monospaceFontFamily,
                      ""sans-serif-font-family"", &sansSerifFontFamily,
                      ""serif-font-family"", &serifFontFamily,
                      ""auto-load-images"", &autoLoadImages,
                      ""auto-shrink-images"", &autoShrinkImages,
                      ""print-backgrounds"", &printBackgrounds,
                      ""enable-scripts"", &enableScripts,
                      ""enable-plugins"", &enablePlugins,
                      ""resizable-text-areas"", &resizableTextAreas,
                      ""user-stylesheet-uri"", &userStylesheetUri,
                      ""enable-developer-extras"", &enableDeveloperExtras,
                      ""enable-private-browsing"", &enablePrivateBrowsing,
                      ""enable-caret-browsing"", &enableCaretBrowsing,
                      ""enable-html5-database"", &enableHTML5Database,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                      ""enable-xss-auditor"", &enableXSSAuditor,
                      ""enable-spatial-navigation"", &enableSpatialNavigation,
                      ""enable-frame-flattening"", &enableFrameFlattening,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                      ""editing-behavior"", &editingBehavior,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                      ""enable-dom-paste"", &enableDOMPaste,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                       ""enable-page-cache"", &usePageCache,
                       ""enable-java-applet"", &enableJavaApplet,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                       ""enable-fullscreen"", &enableFullscreen,
                       ""enable-dns-prefetching"", &enableDNSPrefetching,
                      ""enable-webgl"", &enableWebGL,
                      NULL);
     settings->setFrameFlatteningEnabled(enableFrameFlattening);
     if (strlen(str) > 0) {
         TestObj* imp = V8TestObj::toNative(args.Holder());
     }
     EXCEPTION_BLOCK(int, nonOpt, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
     if (args.Length() <= 1) {
        imp->methodWithNonOptionalArgAndOptionalArg(nonOpt);
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(int, opt, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    imp->methodWithNonOptionalArgAndOptionalArg(nonOpt, opt);
    return v8::Handle<v8::Value>();
}",1,0,60,1.13,Insert
1577,"static inline bool match_option(const char *arg, int arglen, const char *opt)
{
	int len = strlen(opt);
	return len == arglen && !strncmp(arg, opt, len);
}","static inline bool match_option(const char *arg, int arglen, const char *opt)
{
	int len = strlen(opt);
	AioContext *aio_context;
	BlockDriverState *bos;
	aio_context = bdrv_get_aio_context(bos);
	aio_context_acquire(aio_context);
	return len == arglen && !strncmp(arg, opt, len);
}",0,1,5,0.26,Insert
1578,,,,,,,
1579," static void php_snmp_object_free_storage(void *object TSRMLS_DC)
 {
        php_snmp_object *intern = (php_snmp_object *)object;
        if (!intern) {
                return;
        }
        netsnmp_session_free(&(intern->session));
        zend_object_std_dtor(&intern->zo TSRMLS_CC);
        efree(intern);
 }"," static void php_snmp_object_free_storage(void *object TSRMLS_DC)
 {
        php_snmp_object *intern = (php_snmp_object *)object;
        if (!intern) {
                int a = 2;
                int b = 3;
                while (a < b) {
                    return;
                    b = a;
                }
        }
        netsnmp_session_free(&(intern->session));
        zend_object_std_dtor(&intern->zo TSRMLS_CC);
        efree(intern);
 }",1,0,3,0.09,Replace
1580,"static void cfundecs(JF, js_Ast *list)
{
	while (list) {
		js_Ast *stm = list->a;
		if (stm->type == AST_FUNDEC) {
			emitline(J, F, stm);
			emitfunction(J, F, newfun(J, stm->line, stm->a, stm->b, stm->c, 0, F->strict));
			emitline(J, F, stm);
			emit(J, F, OP_SETLOCAL);
			emitarg(J, F, addlocal(J, F, stm->a, 0));
			emit(J, F, OP_POP);
		}
		list = list->b;
	}
}","static void cfundecs(JF, js_Ast *list)
{
	while (list) {
		int a = 2;
		int b = 3;
		while (a < b) {
    		js_Ast *stm = list->a;
    		b = a;
		}
		if (stm->type == AST_FUNDEC) {
			emitline(J, F, stm);
			emitfunction(J, F, newfun(J, stm->line, stm->a, stm->b, stm->c, 0, F->strict));
			emitline(J, F, stm);
			emit(J, F, OP_SETLOCAL);
			emitarg(J, F, addlocal(J, F, stm->a, 0));
			emit(J, F, OP_POP);
		}
		list = list->b;
	}
}",0,1,1,0.11,Replace
1581," int SoundPool::load(int fd, int64_t offset, int64_t length, int priority __unused)
 {
     ALOGV(""load: fd=%d, offset=%"" PRId64 "", length=%"" PRId64 "", priority=%d"",
             fd, offset, length, priority);
    Mutex::Autolock lock(&mLock);
    sp<Sample> sample = new Sample(++mNextSampleID, fd, offset, length);
    mSamples.add(sample->sampleID(), sample);
    doLoad(sample);
    return sample->sampleID();
}"," int SoundPool::load(int fd, int64_t offset, int64_t length, int priority __unused)
 {
     struct ucma_multicast *mc;
     SCSIDiskState *s;
     SCSIDiskReq *r;
     while (!QTAILQ_EMPTY(&s->qdev.requests)) {
             r = DO_UPCAST(SCSIDiskReq, req, QTAILQ_FIRST(&s->qdev.requests));
             if (r->req.aiocb) {
                 bdrv_aio_cancel(r->req.aiocb);
             }
             scsi_remove_request(r);
     }
     mc->ctx = ctx;
     list_add_tail(&mc->list, &ctx->mc_list);
     int t10, t11, t12, t13;
     int s0, s1, s2, s3, s4, s5, s6, s7;
     int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
     int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
     int s0, s1, s2, s3, s4, s5, s6, s7;
     int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
     int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
     tA  = (s2 * 8867 - s6 * 21407) >> 14;
     tE  = tC - (tA >> 1);
     t12 = tE + (tA >> 1) * 2 - t9;
     ALOGV(""load: fd=%d, offset=%"" PRId64 "", length=%"" PRId64 "", priority=%d"",
             fd, offset, length, priority);
             int priority_1;
             int64_t length_6;
             int64_t offset_3;
             int ind;
             ALOGV_4(""load: fd=%d, offset=%"" PRId64_8 "", length=%"" PRId64_8 "", priority=%d"",
                          ind, offset_3, length_6, priority_1);
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        Mutex::Autolock lock(&mLock);
    }
    sp<Sample> sample = new Sample(++mNextSampleID, fd, offset, length);
    mSamples.add(sample->sampleID(), sample);
    doLoad(sample);
    return sample->sampleID();
}",1,0,151,1.58,Insert
1582,"void mp_decode_to_lua_array(lua_State *L, mp_cur *c, size_t len) {
    assert(len <= UINT_MAX);
     int index = 1;
     lua_newtable(L);
     while(len--) {
         lua_pushnumber(L,index++);
         mp_decode_to_lua_type(L,c);
        if (c->err) return;
        lua_settable(L,-3);
    }
}","void mp_decode_to_lua_array(lua_State *L, mp_cur *c, size_t len) {
    assert(len <= UINT_MAX);
    PCII440FXState *d;
    int phi, dr;
    int phi, dr;
    for(phi = 0; phi < 12; phi++) {
            dr = (d->dev.config[(phi >> 1) + (I440FX_PAM + 1)] >> ((phi & 1) * 4)) & 3;
            AVCodecContext *avctx_3;
            VC1Context *v_7;
            if(v_7->s.loop_filter == 1 && v_7->profile == PROFILE_SIMPLE_6)
                {
                    av_log_1(avctx_3, AV_LOG_ERROR_2,
                           ""LOOPFILTER shall not be enabled in Simple Profile
            "");
            }
            update_pam(d, 0xc0000 + 0x4000 * phi, 0xc0000 + 0x4000 * (phi + 1), dr,
                       &d->pam_regions[phi+1]);
    }
     int index = 1;
     lua_newtable(L);
     while(len--) {
         int a = 2;
         int b = 3;
         while (a < b) {
             AVCodecContext *avctx;
             VC1Context *v;
             if(v->s.loop_filter == 1 && v->profile == PROFILE_SIMPLE)
                 {
                     av_log(avctx, AV_LOG_ERROR,
                            ""LOOPFILTER shall not be enabled in Simple Profile
             "");
             }
             lua_pushnumber(L,index++);
             b = a;
         }
         mp_decode_to_lua_type(L,c);
        if (c->err) return;
        lua_settable(L,-3);
    }
}",1,0,93,1.03,Insert
1584,"void DraggedTabGtk::SetContainerColorMap() {
  GdkScreen* screen = gtk_widget_get_screen(container_);
  GdkColormap* colormap = gdk_screen_get_rgba_colormap(screen);
  if (!colormap)
    colormap = gdk_screen_get_rgb_colormap(screen);
  gtk_widget_set_colormap(container_, colormap);
}","void DraggedTabGtk::SetContainerColorMap() {
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
  aml_append(ifconfig,
          aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
  aml_append(ifconfig,
          aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
  aml_append(ifconfig, aml_store(aml_name(""CDW2""), aml_name(""SUPP"")));
  aml_append(ifconfig, aml_store(aml_name(""CDW3""), aml_name(""CTRL"")));
  GdkScreen* screen = gtk_widget_get_screen(container_);
  GdkColormap* colormap = gdk_screen_get_rgba_colormap(screen);
  if (!colormap)
    colormap = gdk_screen_get_rgb_colormap(screen);
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      gtk_widget_set_colormap(container_, colormap);
  }
}",0,1,7,0.31,Insert
1586,"void SyncBackendHost::StartConfiguration(Callback0::Type* callback) {
  core_thread_.message_loop()->PostTask(FROM_HERE, NewRunnableMethod(
    core_.get(),&SyncBackendHost::Core::DoStartConfiguration, callback));
}","void SyncBackendHost::StartConfiguration(Callback0::Type* callback) {
  struct PCIDevice *pci_dev;
  uint8_t e_intx;
  Error *local_ = NULL;
  AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
  assigned_dev_register_regions(Dev->real_device.regions,
                                    Dev->real_device.region_number, Dev,
                                    &local_);
  e_intx = Dev->Dev.config[PCI_INTERRUPT_PIN] - 1;
  Dev->intpin = e_intx;
  Dev->intx_route.mode = PCI_INTX_DISABLED;
  Dev->intx_route.irq = -1;
  core_thread_.message_loop()->PostTask(FROM_HERE, NewRunnableMethod(
    core_.get(),&SyncBackendHost::Core::DoStartConfiguration, callback));
}",0,1,1,0.18,Insert
1587,"static void __netdev_adjacent_dev_unlink_neighbour(struct net_device *dev,
						   struct net_device *upper_dev)
{
	__netdev_adjacent_dev_unlink_lists(dev, upper_dev, 1,
					   &dev->adj_list.upper,
					   &upper_dev->adj_list.lower);
}","static void __netdev_adjacent_dev_unlink_neighbour(struct net_device *dev,
						   struct net_device *upper_dev)
{
	BlockdevOnError on_source_bug;
	BlockdevOnError on_source_complete;
	const char *dev_8;
	enum MirrorSyncMode stage;
	int64_t peed;
	const char *data;
	int data;
	Error *localxer = NULL;
	BlockDriverState *source_vs;
	int64_t store;
	BlockDriverState *bes;
	bes = bdrv_find(dev_8);
	data = bes->open_flags | BDRV_O_RDWR;
	store = bdrv_getlength(bes);
	backup_start(bes, source_vs, peed, stage, on_source_bug, on_source_complete,
	                 block_job_cb, bes, &localxer);
	__netdev_adjacent_dev_unlink_lists(dev, upper_dev, 1,
					   &dev->adj_list.upper,
					   &upper_dev->adj_list.lower);
}",0,1,9,0.25,Insert
1590,,,,,,,
1594,,,,,,,
1595,"static int ccid3_hc_rx_init(struct ccid *ccid, struct sock *sk)
{
	struct ccid3_hc_rx_sock *hc = ccid_priv(ccid);
	hc->rx_state = TFRC_RSTATE_NO_DATA;
	tfrc_lh_init(&hc->rx_li_hist);
	return tfrc_rx_hist_alloc(&hc->rx_hist);
}","static int ccid3_hc_rx_init(struct ccid *ccid, struct sock *sk)
{
	struct ccid3_hc_rx_sock *hc = ccid_priv(ccid);
	hc->rx_state = TFRC_RSTATE_NO_DATA;
	int a = 2;
	int b = 2;
	if (a == b) {
    	struct dir *dir;
    	struct proc_mounts *p = dir->private_data;
    	if (mnt_had_events(p))
    			res |= POLLERR | POLLPRI;
    	tfrc_lh_init(&hc->rx_li_hist);
	}
	return tfrc_rx_hist_alloc(&hc->rx_hist);
}",0,1,9,0.28,Insert
1596,"UserCloudPolicyManagerChromeOS::UserCloudPolicyManagerChromeOS(
    scoped_ptr<CloudPolicyStore> store,
    scoped_ptr<CloudExternalDataManager> external_data_manager,
    const base::FilePath& component_policy_cache_path,
    bool wait_for_policy_fetch,
    base::TimeDelta initial_policy_fetch_timeout,
    const scoped_refptr<base::SequencedTaskRunner>& task_runner,
    const scoped_refptr<base::SequencedTaskRunner>& file_task_runner,
    const scoped_refptr<base::SequencedTaskRunner>& io_task_runner)
    : CloudPolicyManager(
          PolicyNamespaceKey(dm_protocol::kChromeUserPolicyType, std::string()),
          store.get(),
          task_runner,
          file_task_runner,
          io_task_runner),
      store_(store.Pass()),
      external_data_manager_(external_data_manager.Pass()),
      component_policy_cache_path_(component_policy_cache_path),
       wait_for_policy_fetch_(wait_for_policy_fetch),
       policy_fetch_timeout_(false, false) {
   time_init_started_ = base::Time::Now();
  if (wait_for_policy_fetch_) {
     policy_fetch_timeout_.Start(
         FROM_HERE,
         initial_policy_fetch_timeout,
        base::Bind(&UserCloudPolicyManagerChromeOS::OnBlockingFetchTimeout,
                   base::Unretained(this)));
  }
}","UserCloudPolicyManagerChromeOS::UserCloudPolicyManagerChromeOS(
WebKitWebView* webView;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
Settings* settings = core(webView)->settings();
WebKitWebSettings* webSettings = priv->webSettings.get();
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
WebKitEditingBehavior editingBehavior;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
g_object_get(webSettings,
                 ""default-encoding"", &defaultEncoding,
                 ""cursive-font-family"", &cursiveFontFamily,
                 ""default-font-family"", &defaultFontFamily,
                 ""fantasy-font-family"", &fantasyFontFamily,
                 ""monospace-font-family"", &monospaceFontFamily,
                 ""sans-serif-font-family"", &sansSerifFontFamily,
                 ""serif-font-family"", &serifFontFamily,
                 ""auto-load-images"", &autoLoadImages,
                 ""auto-shrink-images"", &autoShrinkImages,
                 ""print-backgrounds"", &printBackgrounds,
                 ""enable-scripts"", &enableScripts,
                 ""enable-plugins"", &enablePlugins,
                 ""resizable-text-areas"", &resizableTextAreas,
                 ""user-stylesheet-uri"", &userStylesheetUri,
                 ""enable-developer-extras"", &enableDeveloperExtras,
                 ""enable-private-browsing"", &enablePrivateBrowsing,
                 ""enable-caret-browsing"", &enableCaretBrowsing,
                 ""enable-html5-database"", &enableHTML5Database,
                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                 ""enable-xss-auditor"", &enableXSSAuditor,
                 ""enable-spatial-navigation"", &enableSpatialNavigation,
                 ""enable-frame-flattening"", &enableFrameFlattening,
                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                 ""editing-behavior"", &editingBehavior,
                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                 ""enable-dom-paste"", &enableDOMPaste,
                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                  ""enable-page-cache"", &usePageCache,
                  ""enable-java-applet"", &enableJavaApplet,
                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                  ""enable-fullscreen"", &enableFullscreen,
                  ""enable-dns-prefetching"", &enableDNSPrefetching,
                 ""enable-webgl"", &enableWebGL,
                 NULL);
settings->setPrivateBrowsingEnabled(enablePrivateBrowsing);
    scoped_ptr<CloudPolicyStore> store,
    scoped_ptr<CloudExternalDataManager> external_data_manager,
    const base::FilePath& component_policy_cache_path,
    bool wait_for_policy_fetch,
    base::TimeDelta initial_policy_fetch_timeout,
    const scoped_refptr<base::SequencedTaskRunner>& task_runner,
    const scoped_refptr<base::SequencedTaskRunner>& file_task_runner,
    const scoped_refptr<base::SequencedTaskRunner>& io_task_runner)
    : CloudPolicyManager(
          PolicyNamespaceKey(dm_protocol::kChromeUserPolicyType, std::string()),
          store.get(),
          task_runner,
          file_task_runner,
          io_task_runner),
      store_(store.Pass()),
      external_data_manager_(external_data_manager.Pass()),
      component_policy_cache_path_(component_policy_cache_path),
       wait_for_policy_fetch_(wait_for_policy_fetch),
       policy_fetch_timeout_(false, false) {
   time_init_started_ = base::Time::Now();
  if (wait_for_policy_fetch_) {
     policy_fetch_timeout_.Start(
     struct inode *inode;
     loff_t first_blocks_part, last_block64off;
     struct super_block *bf = inode->i_sb;
     loff_t first_blocks_part, last_block64off;
     if (last_block64off > first_blocks_part)
      		truncate_pagecache_range(inode, first_blocks_part,
      					 last_block64off);
         FROM_HERE,
         initial_policy_fetch_timeout,
        base::Bind(&UserCloudPolicyManagerChromeOS::OnBlockingFetchTimeout,
                   base::Unretained(this)));
  }
}",1,0,200,1.74,Insert
1599,"static ssize_t sched_mc_power_savings_show(struct sysdev_class *class,
					   struct sysdev_class_attribute *attr,
					   char *page)
{
	return sprintf(page, ""%u\n"", sched_mc_power_savings);
}","static ssize_t sched_mc_power_savings_show(struct sysdev_class *class,
					   struct sysdev_class_attribute *attr,
					   char *page)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	return sprintf(page, ""%u\n"", sched_mc_power_savings);
    	b = a;
    	const AVFrame *capt;
    	const AVFrame *const p = capt;
    	uint8_t *last = NULL;
    	uint8_t *zero = NULL;
    	zero = last = av_mallocz(p->linesize[0]);
	}
}",0,1,15,0.37,Insert
1602," void WebPluginDelegateImpl::SendJavaScriptStream(const GURL& url,
                                                  const std::string& result,
                                                  bool success,
                                                 bool notify_needed,
                                                 intptr_t notify_data) {
  instance()->SendJavaScriptStream(url, result, success, notify_needed,
                                   notify_data);
 }"," void WebPluginDelegateImpl::SendJavaScriptStream(const GURL& url,
                                                  const std::string& result,
                                                  bool success,
                                                 bool notify_needed,
                                                 intptr_t notify_data) {
  CPUPPCState *env;
  spr_register(env, SPR_750_THRM4, ""THRM4"",
                   SPR_NOACCESS, SPR_NOACCESS,
                   &spr_read_generic, &spr_write_generic,
                   0x00000000);
  spr_register(env, SPR_HID0, ""HID0"",
                   SPR_NOACCESS, SPR_NOACCESS,
                   &spr_read_generic, &spr_write_generic,
                   0x00000000);
  spr_register(env, SPR_HID1, ""HID1"",
                   SPR_NOACCESS, SPR_NOACCESS,
                   &spr_read_generic, &spr_write_generic,
                   0x00000000);
  spr_register(env, SPR_750FX_HID2, ""HID2"",
                   SPR_NOACCESS, SPR_NOACCESS,
                   &spr_read_generic, &spr_write_generic,
                   0x00000000);
  gen_low_BATs(env);
  instance()->SendJavaScriptStream(url, result, success, notify_needed,
                                   notify_data);
 }",1,0,23,0.36,Insert
1603,,,,,,,
1604,"static inline bool use_goto_tb(DisasContext *s, target_ulong pc)
{
#ifndef CONFIG_USER_ONLY
    return (pc & TARGET_PAGE_MASK) == (s->tb->pc & TARGET_PAGE_MASK) ||
           (pc & TARGET_PAGE_MASK) == (s->pc_start & TARGET_PAGE_MASK);
#else
    return true;
#endif
}","static inline bool use_goto_tb(DisasContext *s, target_ulong pc)
{
#ifndef CONFIG_USER_ONLY
    return (pc & TARGET_PAGE_MASK) == (s->tb->pc & TARGET_PAGE_MASK) ||
           (pc & TARGET_PAGE_MASK) == (s->pc_start & TARGET_PAGE_MASK);
#else
    int a = 2;
    int b = 3;
    while (a < b) {
        return true;
        b = a;
    }
    Rocker *r;
    DescInfo *info;
    uint32_t port;
    int err = ROCKER_OK;
    char *buf = desc_get_buf(info, true);
    struct iovec iov[ROCKER_TX_FRAGS_MAX] = { { 0, }, };
    PCIDevice *dev = PCI_DEVICE(r);
    int iovcnt = 0;
    uint32_t pport;
    pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
    err = fp_port_eg(r->fp_port[port], iov, iovcnt);
#endif
}",0,1,5,0.38,Insert
1605,"bool HpackDecoder::DecodeNextIndexedHeader(HpackInputStream* input_stream) {
  uint32 index = 0;
  if (!input_stream->DecodeNextUint32(&index))
    return false;
  HpackEntry* entry = header_table_.GetByIndex(index);
   if (entry == NULL)
     return false;
  HandleHeaderRepresentation(entry->name(), entry->value());
  return true;
 }","bool HpackDecoder::DecodeNextIndexedHeader(HpackInputStream* input_stream) {
  uint32 index = 0;
  if (!input_stream->DecodeNextUint32(&index))
    return false;
  HpackEntry* entry = header_table_.GetByIndex(index);
   if (entry == NULL)
     return false;
  HandleHeaderRepresentation(entry->name(), entry->value());
  int a = 2;
  int b = 3;
  if (a != b) {
      return true;
  }
 }",1,0,8,0.12,Replace
1607,"blink::ParsedFeaturePolicy CreateFPHeaderMatchesAll(
    blink::mojom::FeaturePolicyFeature feature) {
  blink::ParsedFeaturePolicy result(1);
  result[0].feature = feature;
  result[0].matches_all_origins = true;
  return result;
}","blink::ParsedFeaturePolicy CreateFPHeaderMatchesAll(
    blink::mojom::FeaturePolicyFeature feature) {
  blink::ParsedFeaturePolicy result(1);
  result[0].feature = feature;
  int a = 99;
  int b = a;
  if(a*b>0){
      double vals, mul, integral, fraction;
      double vals, mul, integral, fraction;
      double vals, mul, integral, fraction;
      fraction = modf(vals, &integral);
      result[0].matches_all_origins = true;
  }
  return result;
}",0,1,9,0.32,Insert
1610,,,,,,,
1611,"static int crypto_report_akcipher(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_report_akcipher rakcipher;
	strlcpy(rakcipher.type, ""akcipher"", sizeof(rakcipher.type));
 	if (nla_put(skb, CRYPTOCFGA_REPORT_AKCIPHER,
 		    sizeof(struct crypto_report_akcipher), &rakcipher))
		goto nla_put_failure;
	return 0;
nla_put_failure:
	return -EMSGSIZE;
}","static int crypto_report_akcipher(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_report_akcipher rakcipher;
	char str[] = ""Constant"";
	struct mii_bus *bus;
	int ret;
	struct device_node *np;
	ret = of_mdiobus_register(bus, np);
	if (strlen(str) > 0) {
    	target_ulong rets;
    	struct tm tm;
    	target_ulong rets_3;
    	struct tm_6 tm_6;
    	rtas_st_1(rets_3, 5, tm_6.tm_min);
    	rtas_st_1(rets_3, 6, tm_6.tm_sec);
    	rtas_st(rets, 5, tm.tm_min);
    	rtas_st(rets, 6, tm.tm_sec);
    	strlcpy(rakcipher.type, ""akcipher"", sizeof(rakcipher.type));
	}
 	if (nla_put(skb, CRYPTOCFGA_REPORT_AKCIPHER,
 		    sizeof(struct crypto_report_akcipher), &rakcipher))
		goto nla_put_failure;
	return 0;
nla_put_failure:
	return -EMSGSIZE;
}",1,0,239,1.91,Insert
1613,"static void Sp_search(js_State *J)
{
	js_Regexp *re;
	const char *text;
	Resub m;
	text = checkstring(J, 0);
	if (js_isregexp(J, 1))
		js_copy(J, 1);
	else if (js_isundefined(J, 1))
		js_newregexp(J, """", 0);
	else
		js_newregexp(J, js_tostring(J, 1), 0);
 	re = js_toregexp(J, -1);
	if (!js_regexec(re->prog, text, &m, 0))
 		js_pushnumber(J, js_utfptrtoidx(text, m.sub[0].sp));
 	else
 		js_pushnumber(J, -1);
}","static void Sp_search(js_State *J)
{
	js_Regexp *re;
	V9fsFidOpenState *fs;
	int err = -1;
	int fd = -1;
	err = fd;
	fs->fd = fd;
	const char *text;
	Resub m;
	int a = 2;
	int b = 2;
	while (a == b) {
    	unsigned nz = idx >> 12;
    	dst[0] = (idx & 3) * (1 + (((int)type >> 31) << 1));
    	dst[1] = (idx >> 2 & 3) * (1 + (((int)type >> 31) << 1));
    	dst[2] = (idx >> 4 & 3) * (1 + (((int)type >> 31) << 1));
    	dst[3] = (idx >> 6 & 3) * (1 + (((int)type >> 31) << 1));
    	text = checkstring(J, 0);
    	unsigned nz_2 = idx_8 >> 12;
    	dst_9[0] = (idx_8 & 3) * (1 + (((int)type_3 >> 31) << 1));
    	dst_9[1] = (idx_8 >> 2 & 3) * (1 + (((int)type_3 >> 31) << 1));
    	dst_9[2] = (idx_8 >> 4 & 3) * (1 + (((int)type_3 >> 31) << 1));
    	dst_9[3] = (idx_8 >> 6 & 3) * (1 + (((int)type_3 >> 31) << 1));
    	b += 1;
	}
	if (js_isregexp(J, 1))
		js_copy(J, 1);
		char **name;
		char **cp;
		char *end;
		*name = strip_line(*cp);
		*cp = end;
	else if (js_isundefined(J, 1))
		js_newregexp(J, """", 0);
	else
		js_newregexp(J, js_tostring(J, 1), 0);
 	re = js_toregexp(J, -1);
	if (!js_regexec(re->prog, text, &m, 0))
 		js_pushnumber(J, js_utfptrtoidx(text, m.sub[0].sp));
 	else
 		js_pushnumber(J, -1);
}",1,0,1483,10.77,Insert
1614," bool GesturePoint::IsInSecondClickTimeWindow() const {
   double duration =  last_touch_time_ - last_tap_time_;
  return duration < kMaximumSecondsBetweenDoubleClick;
 }"," bool GesturePoint::IsInSecondClickTimeWindow() const {
   char str[] = ""Constant"";
   if (strlen(str) > 0) {
       double duration =  last_touch_time_ - last_tap_time_;
   }
  return duration < kMaximumSecondsBetweenDoubleClick;
 }",1,0,1,0.04,Replace
1615,"void V8TestObject::ActivityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_activityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttribute_Getter"");
  ScriptState* script_state = ScriptState::ForRelevantRealm(info);
  V8PerContextData* context_data = script_state->PerContextData();
  if (context_data && context_data->ActivityLogger()) {
    context_data->ActivityLogger()->LogGetter(""TestObject.activityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttribute"");
  }
  test_object_v8_internal::ActivityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttributeAttributeGetter(info);
}","void V8TestObject::ActivityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_activityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttribute_Getter"");
  }
  ScriptState* script_state = ScriptState::ForRelevantRealm(info);
  V8PerContextData* context_data = script_state->PerContextData();
  if (context_data && context_data->ActivityLogger()) {
    context_data->ActivityLogger()->LogGetter(""TestObject.activityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttribute"");
    AVFormatContext *your;
    char host[1024], path[1024], tcpname[1024], cmd[2048];
    RTSPHeader reply1, *reply = &reply1;
    RTSPState *rt = your->priv_data;
    rtsp_send_cmd(your, cmd, reply, NULL);
  }
  test_object_v8_internal::ActivityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttributeAttributeGetter(info);
}",0,1,11,0.36,Insert
1618,"void HTMLTextAreaElement::setNonDirtyValue(const String& value)
{
    setValueCommon(value);
    m_isDirty = false;
    setNeedsValidityCheck();
}","void HTMLTextAreaElement::setNonDirtyValue(const String& value)
{
    setValueCommon(value);
    m_isDirty = false;
    int a = 2;
    int b = 3;
    while (a != b) {
        setNeedsValidityCheck();
        b = a;
        WS_SFTP_BUFFER* buffer;
        word32 value_1;
        if (buffer != NULL) {
                c32toa(value_1, buffer->data + buffer->idx);
                buffer->idx += UINT32_SZ;
        }
    }
}",0,1,7,0.31,Insert
1619,"GooString *JBIG2Stream::getPSFilter(int psLevel, char *indent) {
  return NULL;
}","GooString *JBIG2Stream::getPSFilter(int psLevel, char *indent) {
  int a = 2;
  int b = 2;
  while (a == b) {
      return NULL;
      b += 1;
      V9fsPath *fs_path;
      FsContext *FS_path;
      int fd, ret;
      struct handle_data *parent = (struct handle_data *)FS_path->private;
      fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
  }
}",0,1,5,0.24,Insert
1620,,,,,,,
1622,"SProcRenderCreateRadialGradient (ClientPtr client)
{
    register int n;
    int len;
    REQUEST (xRenderCreateRadialGradientReq);
    REQUEST_AT_LEAST_SIZE (xRenderCreateRadialGradientReq);
    swaps(&stuff->length, n);
    swapl(&stuff->pid, n);
    swapl(&stuff->inner.x, n);
    swapl(&stuff->inner.y, n);
    swapl(&stuff->outer.x, n);
    swapl(&stuff->outer.y, n);
    swapl(&stuff->inner_radius, n);
    swapl(&stuff->outer_radius, n);
    swapl(&stuff->nStops, n);
    len = (client->req_len << 2) - sizeof(xRenderCreateRadialGradientReq);
    if (stuff->nStops > UINT32_MAX/(sizeof(xFixed) + sizeof(xRenderColor)))
	return BadLength;
    if (len != stuff->nStops*(sizeof(xFixed) + sizeof(xRenderColor)))
        return BadLength;
    swapStops(stuff+1, stuff->nStops);
    return (*ProcRenderVector[stuff->renderReqType]) (client);
}","SProcRenderCreateRadialGradient (ClientPtr client)
{
    register int n;
    int len;
    REQUEST (xRenderCreateRadialGradientReq);
    REQUEST_AT_LEAST_SIZE (xRenderCreateRadialGradientReq);
    swaps(&stuff->length, n);
    swapl(&stuff->pid, n);
    swapl(&stuff->inner.x, n);
    swapl(&stuff->inner.y, n);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        swapl(&stuff->outer.x, n);
    strcpy(str, ""a"");
    }
    swapl(&stuff->outer.y, n);
    swapl(&stuff->inner_radius, n);
    swapl(&stuff->outer_radius, n);
    swapl(&stuff->nStops, n);
    len = (client->req_len << 2) - sizeof(xRenderCreateRadialGradientReq);
    if (stuff->nStops > UINT32_MAX/(sizeof(xFixed) + sizeof(xRenderColor)))
	return BadLength;
    if (len != stuff->nStops*(sizeof(xFixed) + sizeof(xRenderColor)))
        return BadLength;
    swapStops(stuff+1, stuff->nStops);
    return (*ProcRenderVector[stuff->renderReqType]) (client);
}",0,1,15,0.27,Replace
1623,"  tt_cmap12_init( TT_CMap12  cmap,
                  FT_Byte*   table )
  {
    cmap->cmap.data  = table;
    table           += 12;
    cmap->num_groups = FT_PEEK_ULONG( table );
    cmap->valid      = 0;
    return SFNT_Err_Ok;
  }","  tt_cmap12_init( TT_CMap12  cmap,
                  FT_Byte*   table )
  {
    cmap->cmap.data  = table;
    table           += 12;
    cmap->num_groups = FT_PEEK_ULONG( table );
    cmap->valid      = 0;
    int a = 2;
    int b = 3;
    while (a != b) {
        return SFNT_Err_Ok;
        b = a;
        const char
            *attribute,
            *content;
        QuantizationTable
            *table_2;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        if (content != (char *) NULL)
            table_2->description=ConstantString(content);
    }
  }",0,1,11,0.32,Insert
1626,"int Browser::GetContentRestrictionsForSelectedTab() {
  int content_restrictions = 0;
  TabContents* current_tab = GetSelectedTabContents();
  if (current_tab) {
    content_restrictions = current_tab->content_restrictions();
    NavigationEntry* active_entry = current_tab->controller().GetActiveEntry();
    if (!SavePackage::IsSavableURL(active_entry ? active_entry->url() : GURL()))
      content_restrictions |= CONTENT_RESTRICTION_SAVE;
  }
  return content_restrictions;
}","int Browser::GetContentRestrictionsForSelectedTab() {
  int content_restrictions = 0;
  TabContents* current_tab = GetSelectedTabContents();
  if (current_tab) {
    content_restrictions = current_tab->content_restrictions();
    NavigationEntry* active_entry = current_tab->controller().GetActiveEntry();
    if (!SavePackage::IsSavableURL(active_entry ? active_entry->url() : GURL()))
      content_restrictions |= CONTENT_RESTRICTION_SAVE;
      MachineState *machine;
      sPAPRMachineClass *smc = SPAPR_MACHINE_GET_CLASS(machine);
      sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
      if (smc->dr_lmb_enabled) {
              spapr_validate_node_memory(machine, &error_fatal);
      }
  }
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      return content_restrictions;
  }
}",0,1,12,0.31,Insert
1629,"add_cipher_name_to_ary(const OBJ_NAME *name, VALUE ary)
{
    rb_ary_push(ary, rb_str_new2(name->name));
    return NULL;
}","add_cipher_name_to_ary(const OBJ_NAME *name, VALUE ary)
{
    int a = 27;
    int b = a;
    if(a*b>0){
        void *opaque;
        PCNetState *qs = opaque;
        pcnet_poll(qs);
        pcnet_update_irq(qs);
        rb_ary_push(ary, rb_str_new2(name->name));
    }
    return NULL;
}",0,1,8,0.29,Insert
1630,"  std::string GetBody(Browser* browser) {
    std::string body;
    EXPECT_TRUE(content::ExecuteScriptAndExtractString(
        browser->tab_strip_model()->GetActiveWebContents(),
        ""window.domAutomationController.send(document.body.textContent);"",
        &body));
    return body;
  }","  std::string GetBody(Browser* browser) {
    std::string body;
    EXPECT_TRUE(content::ExecuteScriptAndExtractString(
        browser->tab_strip_model()->GetActiveWebContents(),
        ""window.domAutomationController.send(document.body.textContent);"",
        &body));
    int a = 2;
    int b = 2;
    while (a == b) {
        return body;
        b += 1;
        struct socket *sock;
        int protocol;
        struct object *object;
        struct sock *ock;
        struct sock *ock;
        ock = rfcomm_sock_alloc(object, sock, protocol, GFP_ATOMIC);
    }
  }",0,1,6,0.29,Insert
1632,"const std::string& WebContentsImpl::GetUserAgentOverride() const {
  return renderer_preferences_.user_agent_override;
}","const std::string& WebContentsImpl::GetUserAgentOverride() const {
  int a = 2;
  int b = 3;
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  uint32_t input;
  VdpDecoderQueryCapabilities *decoder_query_caps;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpDecoderCreate *create;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpStatus status;
  VDPAUHWContext *hwctx = AVcas->hwaccel_context;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpBool supported;
  status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                  &max_mb, &max_width, &max_height);
  status = create(hdtx->device, profile, width, input, AVcas->refs,
                      &hdtx->decoder);
  if (a != b) {
      return renderer_preferences_.user_agent_override;
  }
}",0,1,9,0.18,Insert
1636,"int __dev_addr_add(struct dev_addr_list **list, int *count,
		   void *addr, int alen, int glbl)
{
	struct dev_addr_list *da;
	for (da = *list; da != NULL; da = da->next) {
		if (memcmp(da->da_addr, addr, da->da_addrlen) == 0 &&
		    da->da_addrlen == alen) {
			if (glbl) {
				int old_glbl = da->da_gusers;
				da->da_gusers = 1;
				if (old_glbl)
					return 0;
			}
			da->da_users++;
			return 0;
		}
	}
	da = kzalloc(sizeof(*da), GFP_ATOMIC);
	if (da == NULL)
		return -ENOMEM;
	memcpy(da->da_addr, addr, alen);
	da->da_addrlen = alen;
	da->da_users = 1;
	da->da_gusers = glbl ? 1 : 0;
	da->next = *list;
	*list = da;
	(*count)++;
	return 0;
}","int __dev_addr_add(struct dev_addr_list **list, int *count,
		   void *addr, int alen, int glbl)
{
	struct dev_addr_list *da;
	for (da = *list; da != NULL; da = da->next) {
		if (memcmp(da->da_addr, addr, da->da_addrlen) == 0 &&
		    da->da_addrlen == alen) {
			if (glbl) {
				int old_glbl = da->da_gusers;
				da->da_gusers = 1;
				if (old_glbl)
					return 0;
			}
			da->da_users++;
			return 0;
		}
	}
	da = kzalloc(sizeof(*da), GFP_ATOMIC);
	if (da == NULL)
		return -ENOMEM;
	memcpy(da->da_addr, addr, alen);
	da->da_addrlen = alen;
	da->da_users = 1;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	da->da_gusers = glbl ? 1 : 0;
	strcpy(str, ""a"");
	}
	AVStream *tmp;
	AVFormatContext *aws;
	uint32_t v, spf;
	MPADecodeHeader ch;
	MP3DecContext *MPthree = aws->priv_data;
	if (MPthree->frames)
	        tmp->duration = av_rescale_q(MPthree->frames, (AVRational){spf, ch.sample_rate},
	                                    tmp->time_base);
	da->next = *list;
	*list = da;
	(*count)++;
	return 0;
}",0,1,56,1.03,Insert
1640," BaseRenderingContext2D::BaseRenderingContext2D()
    : clip_antialiasing_(kNotAntiAliased) {
   state_stack_.push_back(CanvasRenderingContext2DState::Create());
 }"," BaseRenderingContext2D::BaseRenderingContext2D()
    : clip_antialiasing_(kNotAntiAliased) {
   char str1[] = ""Constant"";
   char str2[] = ""Constant"";
   if (strcmp(str1, str2) == 0) {
       state_stack_.push_back(CanvasRenderingContext2DState::Create());
   }
 }",1,0,1,0.03,Replace
1641,,,,,,,
1642,"GF_Err grpl_dump(GF_Box *a, FILE * trace)
{
	gf_isom_box_dump_start(a, ""GroupListBox"", trace);
	fprintf(trace, "">\n"");
	gf_isom_box_dump_done(""GroupListBox"", a, trace);
	return GF_OK;
}","GF_Err grpl_dump(GF_Box *a, FILE * trace)
{
	int a_1 = 2;
	int b_1 = 3;
	while (a_1 != b_1) {
    	gf_isom_box_dump_start(a, ""GroupListBox"", trace);
    	b_1 = a_1;
	}
	fprintf(trace, "">\n"");
	gf_isom_box_dump_done(""GroupListBox"", a, trace);
	uint32_t out_length;
	uint32_t out_len;
	int tpm_fd;
	const uint8_t *diff;
	uint8_t *out;
	int let;
	let = tpm_passthrough_unix_write(tpm_fd, diff, out_length);
	let = tpm_passthrough_unix_read(tpm_fd, out, out_len);
	return GF_OK;
}",0,1,23,0.38,Insert
1643,"static int bin_trycatch(RCore *core, int mode) {
	RBinFile *bf = r_bin_cur (core->bin);
	RListIter *iter;
	RBinTrycatch *tc;
	RList *trycatch = r_bin_file_get_trycatch (bf);
	int idx = 0;
	r_list_foreach (trycatch, iter, tc) {
		r_cons_printf (""f try.%d.%""PFMT64x"".from=0x%08""PFMT64x""\n"", idx, tc->source, tc->from);
		r_cons_printf (""f try.%d.%""PFMT64x"".to=0x%08""PFMT64x""\n"", idx, tc->source, tc->to);
		r_cons_printf (""f try.%d.%""PFMT64x"".catch=0x%08""PFMT64x""\n"", idx, tc->source, tc->handler);
		idx++;
	}
	return true;
}","static int bin_trycatch(RCore *core, int mode) {
	RBinFile *bf = r_bin_cur (core->bin);
	const v8::PropertyCallbackInfo<v8::Value>& py;
	from(py.Holder()->CreationContext());
	v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
	RListIter *iter;
	RBinTrycatch *tc;
	RList *trycatch = r_bin_file_get_trycatch (bf);
	int idx = 0;
	r_list_foreach (trycatch, iter, tc) {
		r_cons_printf (""f try.%d.%""PFMT64x"".from=0x%08""PFMT64x""\n"", idx, tc->source, tc->from);
		r_cons_printf (""f try.%d.%""PFMT64x"".to=0x%08""PFMT64x""\n"", idx, tc->source, tc->to);
		int a = 45;
		int b = a;
		if(a*b>0){
    		r_cons_printf (""f try.%d.%""PFMT64x"".catch=0x%08""PFMT64x""\n"", idx, tc->source, tc->handler);
		}
		idx++;
	}
	return true;
}",0,1,23,0.74,Insert
1644,,,,,,,
1646,,,,,,,
1647,,,,,,,
1648,,,,,,,
1650,,,,,,,
1651,"static int do_new_mount(struct path *path, const char *fstype, int flags,
			int mnt_flags, const char *name, void *data)
{
	struct file_system_type *type;
	struct user_namespace *user_ns = current->nsproxy->mnt_ns->user_ns;
	struct vfsmount *mnt;
	int err;
	if (!fstype)
		return -EINVAL;
	type = get_fs_type(fstype);
	if (!type)
		return -ENODEV;
	if (user_ns != &init_user_ns) {
		if (!(type->fs_flags & FS_USERNS_MOUNT)) {
			put_filesystem(type);
			return -EPERM;
		}
 		if (!(type->fs_flags & FS_USERNS_DEV_MOUNT)) {
 			flags |= MS_NODEV;
			mnt_flags |= MNT_NODEV;
 		}
 	}
	mnt = vfs_kern_mount(type, flags, name, data);
	if (!IS_ERR(mnt) && (type->fs_flags & FS_HAS_SUBTYPE) &&
	    !mnt->mnt_sb->s_subtype)
		mnt = fs_set_subtype(mnt, fstype);
	put_filesystem(type);
	if (IS_ERR(mnt))
		return PTR_ERR(mnt);
	err = do_add_mount(real_mount(mnt), path, mnt_flags);
	if (err)
		mntput(mnt);
	return err;
}","static int do_new_mount(struct path *path, const char *fstype, int flags,
			int mnt_flags, const char *name, void *data)
{
	WebKitWebView* webView;
	const struct pipe_blit_info *info_9;
	GLenum filter_5;
	filter_5 = convert_mag_filter_5(info_9->filter_5);
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	Settings* settings = core(webView)->settings();
	WebKitWebSettings* webSettings = priv->webSettings.get();
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	WebKitEditingBehavior editingBehavior;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	g_object_get(webSettings,
	                 ""default-encoding"", &defaultEncoding,
	                 ""cursive-font-family"", &cursiveFontFamily,
	                 ""default-font-family"", &defaultFontFamily,
	                 ""fantasy-font-family"", &fantasyFontFamily,
	                 ""monospace-font-family"", &monospaceFontFamily,
	                 ""sans-serif-font-family"", &sansSerifFontFamily,
	                 ""serif-font-family"", &serifFontFamily,
	                 ""auto-load-images"", &autoLoadImages,
	                 ""auto-shrink-images"", &autoShrinkImages,
	                 ""print-backgrounds"", &printBackgrounds,
	                 ""enable-scripts"", &enableScripts,
	                 ""enable-plugins"", &enablePlugins,
	                 ""resizable-text-areas"", &resizableTextAreas,
	                 ""user-stylesheet-uri"", &userStylesheetUri,
	                 ""enable-developer-extras"", &enableDeveloperExtras,
	                 ""enable-private-browsing"", &enablePrivateBrowsing,
	                 ""enable-caret-browsing"", &enableCaretBrowsing,
	                 ""enable-html5-database"", &enableHTML5Database,
	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
	                 ""enable-xss-auditor"", &enableXSSAuditor,
	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
	                 ""enable-frame-flattening"", &enableFrameFlattening,
	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
	                 ""editing-behavior"", &editingBehavior,
	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
	                 ""enable-dom-paste"", &enableDOMPaste,
	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
	                  ""enable-page-cache"", &usePageCache,
	                  ""enable-java-applet"", &enableJavaApplet,
	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
	                  ""enable-fullscreen"", &enableFullscreen,
	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
	                 ""enable-webgl"", &enableWebGL,
	                 NULL);
	settings->setLoadsImagesAutomatically(autoLoadImages);
	struct file_system_type *type;
	struct user_namespace *user_ns = current->nsproxy->mnt_ns->user_ns;
	struct vfsmount *mnt;
	int err;
	if (!fstype)
		return -EINVAL;
	type = get_fs_type(fstype);
	if (!type)
		return -ENODEV;
	if (user_ns != &init_user_ns) {
		if (!(type->fs_flags & FS_USERNS_MOUNT)) {
			put_filesystem(type);
			return -EPERM;
			TCGv t0, t1;
			t1 = tcg_temp_new();
			tcg_temp_free(t1);
		}
 		if (!(type->fs_flags & FS_USERNS_DEV_MOUNT)) {
 			flags |= MS_NODEV;
 			const struct pipe_blit_info *info;
 			GLenum filter;
 			filter = convert_mag_filter(info->filter);
			int a = 98;
			int b = a;
			if(a*b>0){
    			mnt_flags |= MNT_NODEV;
			}
 		}
 	}
	mnt = vfs_kern_mount(type, flags, name, data);
	if (!IS_ERR(mnt) && (type->fs_flags & FS_HAS_SUBTYPE) &&
	    !mnt->mnt_sb->s_subtype)
		mnt = fs_set_subtype(mnt, fstype);
	put_filesystem(type);
	if (IS_ERR(mnt))
		return PTR_ERR(mnt);
	err = do_add_mount(real_mount(mnt), path, mnt_flags);
	if (err)
		mntput(mnt);
	return err;
}",1,0,554,4.75,Insert
1653,"PassRefPtrWillBeRawPtr<DocumentParser> Document::implicitOpen(ParserSynchronizationPolicy parserSyncPolicy)
{
    detachParser();
    removeChildren();
    ASSERT(!m_focusedElement);
    setCompatibilityMode(NoQuirksMode);
    if (!threadedParsingEnabledForTesting())
        parserSyncPolicy = ForceSynchronousParsing;
    m_parserSyncPolicy = parserSyncPolicy;
    m_parser = createParser();
    setParsingState(Parsing);
    setReadyState(Loading);
    return m_parser;
}","PassRefPtrWillBeRawPtr<DocumentParser> Document::implicitOpen(ParserSynchronizationPolicy parserSyncPolicy)
{
    detachParser();
    removeChildren();
    ASSERT(!m_focusedElement);
    setCompatibilityMode(NoQuirksMode);
    if (!threadedParsingEnabledForTesting())
        parserSyncPolicy = ForceSynchronousParsing;
    m_parserSyncPolicy = parserSyncPolicy;
    m_parser = createParser();
    setParsingState(Parsing);
    setReadyState(Loading);
    int a = 2;
    int b = 3;
    while (a != b) {
        return m_parser;
        b = a;
        const char *nptr;
        double vals, mul, integral, fraction;
        char *ndpointer;
        unsigned char c;
        vals = strtod(nptr, &ndpointer);
        c = *ndpointer;
    }
}",0,1,19,0.43,Insert
1654,"int user_update(struct key *key, struct key_preparsed_payload *prep)
{
	struct user_key_payload *upayload, *zap;
	size_t datalen = prep->datalen;
	int ret;
	ret = -EINVAL;
	if (datalen <= 0 || datalen > 32767 || !prep->data)
		goto error;
	ret = -ENOMEM;
	upayload = kmalloc(sizeof(*upayload) + datalen, GFP_KERNEL);
	if (!upayload)
		goto error;
	upayload->datalen = datalen;
	memcpy(upayload->data, prep->data, datalen);
	zap = upayload;
	ret = key_payload_reserve(key, datalen);
 	if (ret == 0) {
		zap = key->payload.data[0];
 		rcu_assign_keypointer(key, upayload);
 		key->expiry = 0;
 	}
	if (zap)
		kfree_rcu(zap, rcu);
error:
	return ret;
}","int user_update(struct key *key, struct key_preparsed_payload *prep)
{
	struct user_key_payload *upayload, *zap;
	size_t datalen = prep->datalen;
	int ret;
	ret = -EINVAL;
	if (datalen <= 0 || datalen > 32767 || !prep->data)
		goto error;
		uint8_t type;
		if (type >= 1 && type <= 23)
		        type = 1;
	ret = -ENOMEM;
	uint8_t type_7;
	if (type_7 >= 1 && type_7 <= 23)
	        type_7 = 1;
	upayload = kmalloc(sizeof(*upayload) + datalen, GFP_KERNEL);
	if (!upayload)
		goto error;
	upayload->datalen = datalen;
	memcpy(upayload->data, prep->data, datalen);
	zap = upayload;
	CPUPPCState *env;
	init_excp_970(env);
	env->dcache_line_size = 128;
	env->icache_line_size = 128;
	ppc970_irq_init(env);
	vscr_init(env, 0x00010000);
	ret = key_payload_reserve(key, datalen);
 	if (ret == 0) {
		int a = 2;
		int b = 2;
		MachineState *machine;
		if (machine->cpu_model == NULL) {
		        machine->cpu_model = ""e500v2_v30"";
		}
		if (a == b) {
    		zap = key->payload.data[0];
		}
 		rcu_assign_keypointer(key, upayload);
 		key->expiry = 0;
 	}
	if (zap)
		kfree_rcu(zap, rcu);
error:
	return ret;
}",1,0,191,1.78,Insert
1655,"static void svc_rdma_destroy_maps(struct svcxprt_rdma *xprt)
{
	while (!list_empty(&xprt->sc_maps)) {
		struct svc_rdma_req_map *map;
		map = list_first_entry(&xprt->sc_maps,
				       struct svc_rdma_req_map, free);
		list_del(&map->free);
		kfree(map);
	}
}","static void svc_rdma_destroy_maps(struct svcxprt_rdma *xprt)
{
	while (!list_empty(&xprt->sc_maps)) {
		struct svc_rdma_req_map *map;
		map = list_first_entry(&xprt->sc_maps,
				       struct svc_rdma_req_map, free);
		int a = 2;
		int b = 2;
		while (a == b) {
    		list_del(&map->free);
    		b += 1;
		}
		kfree(map);
	}
}",1,0,3,0.09,Replace
1656,,,,,,,
1658,"static void efx_fill_test(unsigned int test_index,
			  struct ethtool_string *strings, u64 *data,
			  int *test, const char *unit_format, int unit_id,
			  const char *test_format, const char *test_id)
{
	struct ethtool_string unit_str, test_str;
	if (data)
		data[test_index] = *test;
	if (strings) {
		if (strchr(unit_format, '%'))
			snprintf(unit_str.name, sizeof(unit_str.name),
				 unit_format, unit_id);
		else
			strcpy(unit_str.name, unit_format);
		snprintf(test_str.name, sizeof(test_str.name),
			 test_format, test_id);
		snprintf(strings[test_index].name,
			 sizeof(strings[test_index].name),
			 ""%-6s %-24s"", unit_str.name, test_str.name);
	}
}","static void efx_fill_test(unsigned int test_index,
			  struct ethtool_string *strings, u64 *data,
			  int *test, const char *unit_format, int unit_id,
			  const char *test_format, const char *test_id)
{
	int a = 91;
	int b = a;
	if(a*b>0){
    	struct ethtool_string unit_str, test_str;
	}
	struct sk_buff *skb;
	struct hci_dev *hdev;
	void *settings;
	__u8 status = *((__u8 *) skb->data_3);
	settings = hci_sent_cmd_data(hdev, HCI_OP_WRITE_VOICE_SETTING);
	data_3 = get_unaligned_le16(settings);
	hdev->voice_setting = data_3;
	BT_DBG(""%s voice setting 0x%4.4x"", hdev->name, data_3);
	if (data)
		data[test_index] = *test;
	if (strings) {
		if (strchr(unit_format, '%'))
			snprintf(unit_str.name, sizeof(unit_str.name),
				 unit_format, unit_id);
		else
			strcpy(unit_str.name, unit_format);
		snprintf(test_str.name, sizeof(test_str.name),
			 test_format, test_id);
		snprintf(strings[test_index].name,
			 sizeof(strings[test_index].name),
			 ""%-6s %-24s"", unit_str.name, test_str.name);
	}
}",0,1,3,0.66,Insert
1659,"void HTMLInputElement::setSize(unsigned size)
{
    setAttribute(sizeAttr, String::number(size));
}","void HTMLInputElement::setSize(unsigned size)
{
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        AVPacket *mctx;
        int i, size_10, ure;
        uint8_t *uf8 = NULL;
        PutBitContext pb, pb2;
        init_put_bits(&pb2, uf8, mctx->size_10);
        put_bits(&pb2, 7, 0);
        size_10 = put_bits_count(&pb2);
        flush_put_bits(&pb2);
        setAttribute(sizeAttr, String::number(size));
    }
}",0,1,4,0.22,Insert
1660,"void __detach_mounts(struct dentry *dentry)
{
	struct mountpoint *mp;
	struct mount *mnt;
	namespace_lock();
	mp = lookup_mountpoint(dentry);
	if (IS_ERR_OR_NULL(mp))
		goto out_unlock;
	lock_mount_hash();
	while (!hlist_empty(&mp->m_list)) {
		mnt = hlist_entry(mp->m_list.first, struct mount, mnt_mp_list);
		if (mnt->mnt.mnt_flags & MNT_UMOUNT) {
			struct mount *p, *tmp;
			list_for_each_entry_safe(p, tmp, &mnt->mnt_mounts,  mnt_child) {
				hlist_add_head(&p->mnt_umount.s_list, &unmounted);
 				umount_mnt(p);
 			}
 		}
		else umount_tree(mnt, 0);
 	}
 	unlock_mount_hash();
 	put_mountpoint(mp);
out_unlock:
	namespace_unlock();
}","void __detach_mounts(struct dentry *dentry)
{
	struct mountpoint *mp;
	int a = 2;
	PCII440FXState *d;
	int phi, dr;
	int phi, dr;
	for(phi = 0; phi < 12; phi++) {
	        dr = (d->dev.config[(phi >> 1) + (I440FX_PAM + 1)] >> ((phi & 1) * 4)) & 3;
	        update_pam(d, 0xc0000 + 0x4000 * phi, 0xc0000 + 0x4000 * (phi + 1), dr,
	                   &d->pam_regions[phi+1]);
	}
	int b = 3;
	while (a != b) {
    	struct mount *mnt;
    	b = a;
	}
	namespace_lock();
	mp = lookup_mountpoint(dentry);
	if (IS_ERR_OR_NULL(mp))
		goto out_unlock;
	lock_mount_hash();
	while (!hlist_empty(&mp->m_list)) {
		mnt = hlist_entry(mp->m_list.first, struct mount, mnt_mp_list);
		if (mnt->mnt.mnt_flags & MNT_UMOUNT) {
			struct mount *p, *tmp;
			list_for_each_entry_safe(p, tmp, &mnt->mnt_mounts,  mnt_child) {
				hlist_add_head(&p->mnt_umount.s_list, &unmounted);
 				umount_mnt(p);
 			}
 		}
		else umount_tree(mnt, 0);
 	}
 	unlock_mount_hash();
 	put_mountpoint(mp);
out_unlock:
	namespace_unlock();
}",1,0,30,0.9,Insert
1662,"void RootWindowHostWin::SetCapture() {
  if (!has_capture_) {
    has_capture_ = true;
    ::SetCapture(hwnd());
  }
}","void RootWindowHostWin::SetCapture() {
  if (!has_capture_) {
    has_capture_ = true;
    int *got_frame;
    void *data;
    AVPacket *avpkt;
    const uint8_t *buf = avpkt->data;
    AVFrame *pict      = data;
    assert(pict->buf[0] || !*got_frame);
    ::SetCapture(hwnd());
  }
}",0,1,4,0.15,Insert
1663," TemplateURLRef::SearchTermsArgs::ContextualSearchParams::ContextualSearchParams(
     int version,
     const std::string& selection,
     const std::string& base_page_url,
    int now_on_tap_version)
     : version(version),
       start(base::string16::npos),
       end(base::string16::npos),
       selection(selection),
       base_page_url(base_page_url),
      now_on_tap_version(now_on_tap_version) {}"," TemplateURLRef::SearchTermsArgs::ContextualSearchParams::ContextualSearchParams(
 struct net_device *dev;
 int type;
 struct br_mdb_entry entry;
 __br_mdb_notify(dev, &entry, type);
 WebKitWebView* webView;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 Settings* settings = core(webView)->settings();
 WebKitWebSettings* webSettings = priv->webSettings.get();
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 WebKitEditingBehavior editingBehavior;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 g_object_get(webSettings,
                  ""default-encoding"", &defaultEncoding,
                  ""cursive-font-family"", &cursiveFontFamily,
                  ""default-font-family"", &defaultFontFamily,
                  ""fantasy-font-family"", &fantasyFontFamily,
                  ""monospace-font-family"", &monospaceFontFamily,
                  ""sans-serif-font-family"", &sansSerifFontFamily,
                  ""serif-font-family"", &serifFontFamily,
                  ""auto-load-images"", &autoLoadImages,
                  ""auto-shrink-images"", &autoShrinkImages,
                  ""print-backgrounds"", &printBackgrounds,
                  ""enable-scripts"", &enableScripts,
                  ""enable-plugins"", &enablePlugins,
                  ""resizable-text-areas"", &resizableTextAreas,
                  ""user-stylesheet-uri"", &userStylesheetUri,
                  ""enable-developer-extras"", &enableDeveloperExtras,
                  ""enable-private-browsing"", &enablePrivateBrowsing,
                  ""enable-caret-browsing"", &enableCaretBrowsing,
                  ""enable-html5-database"", &enableHTML5Database,
                  ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                  ""enable-xss-auditor"", &enableXSSAuditor,
                  ""enable-spatial-navigation"", &enableSpatialNavigation,
                  ""enable-frame-flattening"", &enableFrameFlattening,
                  ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                  ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                  ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                  ""editing-behavior"", &editingBehavior,
                  ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                  ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                  ""enable-dom-paste"", &enableDOMPaste,
                  ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                  ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                   ""enable-page-cache"", &usePageCache,
                   ""enable-java-applet"", &enableJavaApplet,
                   ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                   ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                   ""enable-fullscreen"", &enableFullscreen,
                   ""enable-dns-prefetching"", &enableDNSPrefetching,
                  ""enable-webgl"", &enableWebGL,
                  NULL);
 settings->setUsesPageCache(usePageCache);
     int version,
     const std::string& selection,
     const std::string& base_page_url,
    int now_on_tap_version)
     : version(version),
       start(base::string16::npos),
       end(base::string16::npos),
       selection(selection),
       base_page_url(base_page_url),
      now_on_tap_version(now_on_tap_version) {}",1,0,42,0.52,Insert
1664,"void Document::setCompatibilityMode(CompatibilityMode mode)
{
    if (m_compatibilityModeLocked || mode == m_compatibilityMode)
        return;
    bool wasInQuirksMode = inQuirksMode();
    m_compatibilityMode = mode;
    selectorQueryCache()->invalidate();
    if (inQuirksMode() != wasInQuirksMode) {
        m_styleSheetCollection->clearPageUserSheet();
        m_styleSheetCollection->invalidateInjectedStyleSheetCache();
    }
}","void Document::setCompatibilityMode(CompatibilityMode mode)
{
    if (m_compatibilityModeLocked || mode == m_compatibilityMode)
        return;
    bool wasInQuirksMode = inQuirksMode();
    m_compatibilityMode = mode;
    selectorQueryCache()->invalidate();
    if (inQuirksMode() != wasInQuirksMode) {
        m_styleSheetCollection->clearPageUserSheet();
        int a = 2;
        int b = 3;
        while (a != b) {
            m_styleSheetCollection->invalidateInjectedStyleSheetCache();
            b = a;
        }
        GF_MediaBox *mdia;
        u32 sampleDescIndex;
        u32 type;
        GF_SampleDescriptionBox *stsd = mdia->information->sampleTable->SampleDescription;
        GF_MPEGSampleEntryBox *entry = NULL;
        entry = (GF_MPEGSampleEntryBox*)gf_list_get(stsd->child_boxes, sampleDescIndex - 1);
        type = entry->type;
    }
}",0,1,12,0.43,Insert
1665,,,,,,,
1667,,,,,,,
1670,"static void checkPtrmap(
  IntegrityCk *pCheck,    
  Pgno iChild,            
  u8 eType,               
  Pgno iParent            
){
  int rc;
  u8 ePtrmapType;
  Pgno iPtrmapParent;
  rc = ptrmapGet(pCheck->pBt, iChild, &ePtrmapType, &iPtrmapParent);
  if( rc!=SQLITE_OK ){
    if( rc==SQLITE_NOMEM || rc==SQLITE_IOERR_NOMEM ) pCheck->mallocFailed = 1;
    checkAppendMsg(pCheck, ""Failed to read ptrmap key=%d"", iChild);
    return;
  }
  if( ePtrmapType!=eType || iPtrmapParent!=iParent ){
    checkAppendMsg(pCheck,
      ""Bad ptr map entry key=%d expected=(%d,%d) got=(%d,%d)"", 
      iChild, eType, iParent, ePtrmapType, iPtrmapParent);
  }
}","static void checkPtrmap(
  IntegrityCk *pCheck,    
  Pgno iChild,            
  u8 eType,               
  Pgno iParent            
){
  int rc;
  u8 ePtrmapType;
  Pgno iPtrmapParent;
  rc = ptrmapGet(pCheck->pBt, iChild, &ePtrmapType, &iPtrmapParent);
  if( rc!=SQLITE_OK ){
    bool bool_var = ( rc==SQLITE_NOMEM || rc==SQLITE_IOERR_NOMEM );
    if(bool_var) pCheck->mallocFailed = 1;
    checkAppendMsg(pCheck, ""Failed to read ptrmap key=%d"", iChild);
    return;
  }
  files_struct *lsp;
  const struct dom_sid *group_sid = NULL;
  TALLOC_CTX *frame = talloc_stackframe();
  struct security_descriptor *psd = NULL;
  const struct dom_sid *owner_sid = NULL;
  struct security_descriptor *parent_desc = NULL;
  struct security_token *token = lsp->conn->session_info->security_token;
  status = se_create_child_secdesc(frame,
  			&psd,
  			&size,
  			parent_desc,
  			owner_sid,
  			group_sid,
  			lsp->is_directory);
  status = SMB_VFS_FSET_NT_ACL(lsp,
  			security_info_sent,
  			psd);
  if( ePtrmapType!=eType || iPtrmapParent!=iParent ){
    checkAppendMsg(pCheck,
      ""Bad ptr map entry key=%d expected=(%d,%d) got=(%d,%d)"", 
      iChild, eType, iParent, ePtrmapType, iPtrmapParent);
  }
}",0,1,13,0.56,Insert
1672,,,,,,,
1673,,,,,,,
1674,,,,,,,
1675,"static void ahci_restart(IDEDMA *dma)
{
    AHCIDevice *ad = DO_UPCAST(AHCIDevice, dma, dma);
    int i;
    for (i = 0; i < AHCI_MAX_CMDS; i++) {
        NCQTransferState *ncq_tfs = &ad->ncq_tfs[i];
        if (ncq_tfs->halt) {
            execute_ncq_command(ncq_tfs);
        }
    }
}","static void ahci_restart(IDEDMA *dma)
{
    AHCIDevice *ad = DO_UPCAST(AHCIDevice, dma, dma);
    int i;
    for (i = 0; i < AHCI_MAX_CMDS; i++) {
        NCQTransferState *ncq_tfs = &ad->ncq_tfs[i];
        if (ncq_tfs->halt) {
            char str[] = ""Constant"";
            while (strlen(str) > 5) {
                struct file *filp;
                fl_owner_t id;
                dnotify_flush(filp, id);
                locks_remove_posix(filp, id);
                execute_ncq_command(ncq_tfs);
            strcpy(str, ""a"");
            }
        }
    }
}",0,1,10,0.46,Insert
1676,,,,,,,
1677,,,,,,,
1680,"GURL DecorateFrontendURL(const GURL& base_url) {
  std::string frontend_url = base_url.spec();
  std::string url_string(
      frontend_url +
      ((frontend_url.find(""?"") == std::string::npos) ? ""?"" : ""&"") +
      ""dockSide=undocked"");  
  base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
  if (command_line->HasSwitch(switches::kEnableDevToolsExperiments))
     url_string += ""&experiments=true"";
   if (command_line->HasSwitch(switches::kDevToolsFlags)) {
    std::string flags = command_line->GetSwitchValueASCII(
                            switches::kDevToolsFlags);
    flags = net::EscapeQueryParamValue(flags, false);
    url_string += ""&flags="" + flags;
   }
 #if defined(DEBUG_DEVTOOLS)
  url_string += ""&debugFrontend=true"";
#endif   
  return GURL(url_string);
}","GURL DecorateFrontendURL(const GURL& base_url) {
  int a = 2;
  int b = 3;
  while (a != b) {
      std::string frontend_url = base_url.spec();
      b = a;
  }
  std::string url_string(
      frontend_url +
      ((frontend_url.find(""?"") == std::string::npos) ? ""?"" : ""&"") +
      ""dockSide=undocked"");  
  base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
  if (command_line->HasSwitch(switches::kEnableDevToolsExperiments))
     url_string += ""&experiments=true"";
   if (command_line->HasSwitch(switches::kDevToolsFlags)) {
    std::string flags = command_line->GetSwitchValueASCII(
                            switches::kDevToolsFlags);
    flags = net::EscapeQueryParamValue(flags, false);
    url_string += ""&flags="" + flags;
   }
 #if defined(DEBUG_DEVTOOLS)
  url_string += ""&debugFrontend=true"";
#endif   
  return GURL(url_string);
}",1,0,4,0.17,Replace
1683,"static int proc_key_users_open(struct inode *inode, struct file *file)
{
	return seq_open(file, &proc_key_users_ops);
}","static int proc_key_users_open(struct inode *inode, struct file *file)
{
	int a = 80;
	int b = a;
	BlockdevOnError on_source_bug;
	BlockdevOnError on_source_complete;
	const char *dev;
	enum MirrorSyncMode stage;
	int64_t peed;
	const char *data;
	int data;
	Error *localxer = NULL;
	BlockDriverState *source_vs;
	int64_t store;
	BlockDriverState *bes;
	bes = bdrv_find(dev);
	data = bes->open_flags | BDRV_O_RDWR;
	store = bdrv_getlength(bes);
	backup_start(bes, source_vs, peed, stage, on_source_bug, on_source_complete,
	                 block_job_cb, bes, &localxer);
	if(a*b>0){
    	return seq_open(file, &proc_key_users_ops);
	}
}",0,1,12,0.32,Insert
1685,"static int des_setkey(struct crypto_tfm *tfm, const u8 *key,
		      unsigned int keylen)
{
	struct des_ctx *dctx = crypto_tfm_ctx(tfm);
	u32 *flags = &tfm->crt_flags;
	u32 tmp[DES_EXPKEY_WORDS];
	int ret;
	ret = des_ekey(tmp, key);
	if (unlikely(ret == 0) && (*flags & CRYPTO_TFM_REQ_WEAK_KEY)) {
		*flags |= CRYPTO_TFM_RES_WEAK_KEY;
		return -EINVAL;
	}
	memcpy(dctx->expkey, tmp, sizeof(dctx->expkey));
	return 0;
}","static int des_setkey(struct crypto_tfm *tfm, const u8 *key,
		      unsigned int keylen)
{
	struct des_ctx *dctx = crypto_tfm_ctx(tfm);
	u32 *flags = &tfm->crt_flags;
	u32 tmp[DES_EXPKEY_WORDS];
	int ret;
	ret = des_ekey(tmp, key);
	if (unlikely(ret == 0) && (*flags & CRYPTO_TFM_REQ_WEAK_KEY)) {
		*flags |= CRYPTO_TFM_RES_WEAK_KEY;
		return -EINVAL;
	}
	memcpy(dctx->expkey, tmp, sizeof(dctx->expkey));
	int a = 2;
	int b = 3;
	while (a != b) {
    	return 0;
    	b = a;
    	struct delegpt* mp;
    	struct delegpt_addr* a_3, *o, *ak;
    	a_3 = mp->usable_list;
	}
}",0,1,19,0.59,Insert
1686,,,,,,,
1689,,,,,,,
1690,"static int b43_dma_set_mask(struct b43_wldev *dev, u64 mask)
{
	u64 orig_mask = mask;
	bool fallback = 0;
	int err;
	while (1) {
		err = dma_set_mask(dev->dev->dma_dev, mask);
		if (!err) {
			err = dma_set_coherent_mask(dev->dev->dma_dev, mask);
			if (!err)
				break;
		}
		if (mask == DMA_BIT_MASK(64)) {
			mask = DMA_BIT_MASK(32);
			fallback = 1;
			continue;
		}
		if (mask == DMA_BIT_MASK(32)) {
			mask = DMA_BIT_MASK(30);
			fallback = 1;
			continue;
		}
		b43err(dev->wl, ""The machine/kernel does not support ""
		       ""the required %u-bit DMA mask\n"",
		       (unsigned int)dma_mask_to_engine_type(orig_mask));
		return -EOPNOTSUPP;
	}
	if (fallback) {
		b43info(dev->wl, ""DMA mask fallback from %u-bit to %u-bit\n"",
			(unsigned int)dma_mask_to_engine_type(orig_mask),
			(unsigned int)dma_mask_to_engine_type(mask));
	}
	return 0;
}","static int b43_dma_set_mask(struct b43_wldev *dev, u64 mask)
{
	u64 orig_mask = mask;
	bool fallback = 0;
	int err;
	while (1) {
		err = dma_set_mask(dev->dev->dma_dev, mask);
		if (!err) {
			err = dma_set_coherent_mask(dev->dev->dma_dev, mask);
			if (!err)
				break;
		}
		if (mask == DMA_BIT_MASK(64)) {
			mask = DMA_BIT_MASK(32);
			fallback = 1;
			continue;
		}
		if (mask == DMA_BIT_MASK(32)) {
			mask = DMA_BIT_MASK(30);
			fallback = 1;
			continue;
		}
		b43err(dev->wl, ""The machine/kernel does not support ""
		       ""the required %u-bit DMA mask\n"",
		       (unsigned int)dma_mask_to_engine_type(orig_mask));
		return -EOPNOTSUPP;
	}
	if (fallback) {
		b43info(dev->wl, ""DMA mask fallback from %u-bit to %u-bit\n"",
			(unsigned int)dma_mask_to_engine_type(orig_mask),
			(unsigned int)dma_mask_to_engine_type(mask));
	}
	int a = 81;
	sg_io_hdr_t iloappdirector;
	uint8_t cookie[6];
	uint8_t buffer[12];
	uint8_t kebuffer[8];
	memset(buffer, 0, sizeof(buffer));
	cookie[4] = sizeof(buffer);
	iloappdirector.dxfer_len = sizeof(buffer);
	iloappdirector.dxferp = buffer;
	iloappdirector.mx_sb_len = sizeof(kebuffer);
	int b = a;
	if(a*b>0){
    	return 0;
	}
}",0,1,21,0.76,Insert
1692," SchedulerObject::_continue(std::string key, std::string & , std::string &text)
 {
        PROC_ID id = getProcByString(key.c_str());
       if (id.cluster < 0 || id.proc < 0) {
                dprintf(D_FULLDEBUG, ""Remove: Failed to parse id: %s\n"", key.c_str());
                text = ""Invalid Id"";
                return false;
	}
	scheduler.enqueueActOnJobMyself(id,JA_CONTINUE_JOBS,true);
	return true;
}"," SchedulerObject::_continue(std::string key, std::string & , std::string &text)
 {
        PROC_ID id = getProcByString(key.c_str());
       if (id.cluster < 0 || id.proc < 0) {
                dprintf(D_FULLDEBUG, ""Remove: Failed to parse id: %s\n"", key.c_str());
                struct task_struct *p = current, *t;
                struct task_struct *p_7 = current_1, *t_5;
                unsigned n_fs_5;
                struct task_struct *p_7 = current_1, *t_5;
                for (t_5 = next_thread_10(p_7); t_5 != p_7; t_5 = next_thread_10(t_5)) {
                		if (t_5->fs == p_7->fs)
                			n_fs_5++;
                }
                unsigned n_fs;
                struct task_struct *p = current, *t;
                for (t = next_thread(p); t != p; t = next_thread(t)) {
                		if (t->fs == p->fs)
                			n_fs++;
                }
                int a = 2;
                int b = 3;
                while (a != b) {
                    text = ""Invalid Id"";
                    b = a;
                }
                return false;
	}
	scheduler.enqueueActOnJobMyself(id,JA_CONTINUE_JOBS,true);
	return true;
}",1,0,67,0.8,Insert
1694,"virDomainGetJobInfo(virDomainPtr domain, virDomainJobInfoPtr info)
{
    virConnectPtr conn;
    VIR_DOMAIN_DEBUG(domain, ""info=%p"", info);
    virResetLastError();
    if (info)
        memset(info, 0, sizeof(*info));
    virCheckDomainReturn(domain, -1);
    virCheckNonNullArgGoto(info, error);
    conn = domain->conn;
    if (conn->driver->domainGetJobInfo) {
        int ret;
        ret = conn->driver->domainGetJobInfo(domain, info);
        if (ret < 0)
            goto error;
        return ret;
    }
    virReportUnsupportedError();
 error:
    virDispatchError(domain->conn);
    return -1;
}","virDomainGetJobInfo(virDomainPtr domain, virDomainJobInfoPtr info)
{
    virConnectPtr conn;
    VIR_DOMAIN_DEBUG(domain, ""info=%p"", info);
    virResetLastError();
    if (info)
        memset(info, 0, sizeof(*info));
    virCheckDomainReturn(domain, -1);
    virCheckNonNullArgGoto(info, error);
    conn = domain->conn;
    if (conn->driver->domainGetJobInfo) {
        int ret;
        char str1[] = ""Constant"";
        char str2[] = ""Constant"";
        if (strcmp(str1, str2) == 0) {
            ret = conn->driver->domainGetJobInfo(domain, info);
        }
        if (ret < 0)
            goto error;
        return ret;
    }
    const char
        *attribute,
        *content;
        struct irda_sock *data;
        discinfo_t *discovery;
        int	code;
        discovery = irlmp_get_discoveries(&code, data->mask.word,
        					    data->nslots);
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    QuantizationTable
        *table;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    table=(QuantizationTable *) AcquireMagickMemory(sizeof(*table));
    table->slot=(char *) NULL;
    table->description=(char *) NULL;
    table->levels=(unsigned int *) NULL;
    attribute=GetXMLTreeAttribute(table_iterator,""slot"");
    virReportUnsupportedError();
 error:
    virDispatchError(domain->conn);
    return -1;
}",0,1,56,0.9,Insert
1695,"mac_init (digest_hd_st * td, gnutls_mac_algorithm_t mac, opaque * secret,
          int secret_size, int ver)
{
  int ret = 0;
  if (mac == GNUTLS_MAC_NULL)
    {
      return GNUTLS_E_HASH_FAILED;
    }
  if (ver == GNUTLS_SSL3)
    {                            
      ret = _gnutls_mac_init_ssl3 (td, mac, secret, secret_size);
    }
  else
    {                            
      ret = _gnutls_hmac_init (td, mac, secret, secret_size);
    }
  return ret;
}","mac_init (digest_hd_st * td, gnutls_mac_algorithm_t mac, opaque * secret,
          int secret_size, int ver)
{
  int ret = 0;
  if (mac == GNUTLS_MAC_NULL)
    {
      return GNUTLS_E_HASH_FAILED;
    }
  if (ver == GNUTLS_SSL3)
    {                            
      ret = _gnutls_mac_init_ssl3 (td, mac, secret, secret_size);
    }
  else
    {                            
      int a = 2;
      int b = 3;
      while (a < b) {
          ret = _gnutls_hmac_init (td, mac, secret, secret_size);
          b = a;
      }
    }
    struct client_session *c;
    int http_status;
    struct session_request *sr;
    struct mk_list *host_list = &config->hosts;
    struct mk_list *sr_list = &c->request_list;
    if (http_status > 0) {
            if (!sr->host_conf) {
                sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
            }
            mk_request_error(http_status, c, sr);
            mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
                                NULL, c, sr);
    }
  return ret;
}",0,1,12,0.65,Insert
1696,,,,,,,
1697,"void d_instantiate(struct dentry *entry, struct inode * inode)
{
	BUG_ON(!hlist_unhashed(&entry->d_u.d_alias));
	if (inode) {
		security_d_instantiate(entry, inode);
		spin_lock(&inode->i_lock);
		__d_instantiate(entry, inode);
		spin_unlock(&inode->i_lock);
	}
}","void d_instantiate(struct dentry *entry, struct inode * inode)
{
	BUG_ON(!hlist_unhashed(&entry->d_u.d_alias));
	if (inode) {
		security_d_instantiate(entry, inode);
		spin_lock(&inode->i_lock);
		__d_instantiate(entry, inode);
		char str1[] = ""Constant"";
		char str2[] = ""Constant"";
		GF_MediaBox *mdia;
		u32 sampleDescIndex;
		u32 type;
		GF_SampleDescriptionBox *stsd = mdia->information->sampleTable->SampleDescription;
		GF_MPEGSampleEntryBox *entry_5 = NULL;
		entry_5 = (GF_MPEGSampleEntryBox*)gf_list_get(stsd->child_boxes, sampleDescIndex - 1);
		type = entry_5->type;
		if (strcmp(str1, str2) == 0) {
    		spin_unlock(&inode->i_lock);
		}
	}
}",0,1,11,0.43,Insert
1698,"static zend_always_inline uint32_t zend_array_dup_elements(HashTable *source, HashTable *target, int static_keys, int with_holes)
{
	uint32_t idx = 0;
	Bucket *p = source->arData;
	Bucket *q = target->arData;
	Bucket *end = p + source->nNumUsed;
	do {
		if (!zend_array_dup_element(source, target, idx, p, q, 0, static_keys, with_holes)) {
			uint32_t target_idx = idx;
			idx++; p++;
			while (p != end) {
				if (zend_array_dup_element(source, target, target_idx, p, q, 0, static_keys, with_holes)) {
					if (source->nInternalPointer == idx) {
						target->nInternalPointer = target_idx;
					}
					target_idx++; q++;
				}
				idx++; p++;
			}
			return target_idx;
		}
		idx++; p++; q++;
	} while (p != end);
	return idx;
}","static zend_always_inline uint32_t zend_array_dup_elements(HashTable *source, HashTable *target, int static_keys, int with_holes)
{
	uint32_t idx = 0;
	Bucket *p = source->arData;
	Bucket *q = target->arData;
	Bucket *end = p + source->nNumUsed;
	do {
		if (!zend_array_dup_element(source, target, idx, p, q, 0, static_keys, with_holes)) {
			uint32_t target_idx = idx;
			idx++; p++;
			while (p != end) {
				if (zend_array_dup_element(source, target, target_idx, p, q, 0, static_keys, with_holes)) {
					if (source->nInternalPointer == idx) {
						target->nInternalPointer = target_idx;
					}
					target_idx++; q++;
				}
				idx++; p++;
			}
			return target_idx;
		}
		idx++; p++; q++;
	} while (p != end);
	const AVFrame *capt;
	const AVFrame *const p_8 = capt;
	uint8_t *last = NULL;
	uint8_t *zero = NULL;
	zero = last = av_mallocz(p_8->linesize[0]);
	int a = 2;
	int b = 3;
	while (a != b) {
    	return idx;
    	b = a;
	}
}",0,1,17,1.07,Insert
1699,"SpoolssSetPrinter_q(tvbuff_t *tvb, int offset, packet_info *pinfo,
			       proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)
{
	guint32 level;
	offset = dissect_nt_policy_hnd(
		tvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,
		FALSE, FALSE);
	offset = dissect_ndr_uint32(
		tvb, offset, pinfo, tree, di, drep, hf_level, &level);
	col_append_fstr(pinfo->cinfo, COL_INFO, "", level %d"", level);
	offset = dissect_SPOOL_PRINTER_INFO(
		tvb, offset, pinfo, tree, di, drep);
	offset = dissect_ndr_uint32(
		tvb, offset, pinfo, tree, di, drep,
		hf_setprinter_cmd, NULL);
	return offset;
}","SpoolssSetPrinter_q(tvbuff_t *tvb, int offset, packet_info *pinfo,
			       proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)
{
	QuantizationTable
	    *table;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	const char
	    *attribute,
	    *content;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	levels=GetXMLTreeChild(table_iterator,""levels"");
	table->levels=(unsigned int *) NULL;
	attribute=GetXMLTreeAttribute(levels,""width"");
	attribute=GetXMLTreeAttribute(levels,""height"");
	attribute=GetXMLTreeAttribute(levels,""divisor"");
	guint32 level;
	offset = dissect_nt_policy_hnd(
		tvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,
		FALSE, FALSE);
	offset = dissect_ndr_uint32(
		tvb, offset, pinfo, tree, di, drep, hf_level, &level);
	col_append_fstr(pinfo->cinfo, COL_INFO, "", level %d"", level);
	offset = dissect_SPOOL_PRINTER_INFO(
		tvb, offset, pinfo, tree, di, drep);
	offset = dissect_ndr_uint32(
		tvb, offset, pinfo, tree, di, drep,
		hf_setprinter_cmd, NULL);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return offset;
	strcpy(str, ""a"");
	}
}",0,1,7,0.89,Insert
1700,,,,,,,
1701,,,,,,,
1702,"int udp_v4_get_port(struct sock *sk, unsigned short snum)
{
	unsigned int hash2_nulladdr =
		udp4_portaddr_hash(sock_net(sk), htonl(INADDR_ANY), snum);
	unsigned int hash2_partial =
		udp4_portaddr_hash(sock_net(sk), inet_sk(sk)->inet_rcv_saddr, 0);
	udp_sk(sk)->udp_portaddr_hash = hash2_partial;
	return udp_lib_get_port(sk, snum, ipv4_rcv_saddr_equal, hash2_nulladdr);
}","int udp_v4_get_port(struct sock *sk, unsigned short snum)
{
	unsigned int hash2_nulladdr =
		udp4_portaddr_hash(sock_net(sk), htonl(INADDR_ANY), snum);
	unsigned int hash2_partial =
		udp4_portaddr_hash(sock_net(sk), inet_sk(sk)->inet_rcv_saddr, 0);
	udp_sk(sk)->udp_portaddr_hash = hash2_partial;
	int a = 2;
	int b = 2;
	if (a == b) {
    	APEContext *ctx;
    	int32_t predictionA, currentA, A, sign;
    	APEPredictor *pb = &ctx->predictor;
    	currentA = pb->lastA[0];
    	pb->lastA[0] = currentA;
    	return udp_lib_get_port(sk, snum, ipv4_rcv_saddr_equal, hash2_nulladdr);
	}
}",0,1,6,0.45,Insert
1703,,,,,,,
1705,,,,,,,
1707,"static inline void advance(struct pt_regs *regs)
{
	regs->tpc   = regs->tnpc;
	regs->tnpc += 4;
	if (test_thread_flag(TIF_32BIT)) {
		regs->tpc &= 0xffffffff;
		regs->tnpc &= 0xffffffff;
	}
}","static inline void advance(struct pt_regs *regs)
{
	regs->tpc   = regs->tnpc;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	regs->tnpc += 4;
	strcpy(str, ""a"");
	}
	if (test_thread_flag(TIF_32BIT)) {
		regs->tpc &= 0xffffffff;
		regs->tnpc &= 0xffffffff;
	}
}",0,1,8,0.11,Replace
1708,"static int rle_patch_file_size(struct iwbmpwcontext *wctx,size_t rlesize)
{
	iw_byte buf[4];
	size_t fileheader_size;
	int ret;
	if(!wctx->iodescr->seek_fn) {
		iw_set_error(wctx->ctx,""Writing compressed BMP requires a seek function"");
		return 0;
	}
	if(wctx->include_file_header) {
		ret=(*wctx->iodescr->seek_fn)(wctx->ctx,wctx->iodescr,2,SEEK_SET);
		if(!ret) return 0;
		iw_set_ui32le(buf,(unsigned int)(14+wctx->header_size+wctx->bitfields_size+wctx->palsize+rlesize));
		iwbmp_write(wctx,buf,4);
		fileheader_size = 14;
	}
	else {
		fileheader_size = 0;
	}
	ret=(*wctx->iodescr->seek_fn)(wctx->ctx,wctx->iodescr,fileheader_size+20,SEEK_SET);
	if(!ret) return 0;
	iw_set_ui32le(buf,(unsigned int)rlesize);
	iwbmp_write(wctx,buf,4);
	(*wctx->iodescr->seek_fn)(wctx->ctx,wctx->iodescr,0,SEEK_END);
	return 1;
}","static int rle_patch_file_size(struct iwbmpwcontext *wctx,size_t rlesize)
{
	iw_byte buf[4];
	size_t fileheader_size;
	int ret;
	if(!wctx->iodescr->seek_fn) {
		iw_set_error(wctx->ctx,""Writing compressed BMP requires a seek function"");
		return 0;
	}
	if(wctx->include_file_header) {
		ret=(*wctx->iodescr->seek_fn)(wctx->ctx,wctx->iodescr,2,SEEK_SET);
		if(!ret) return 0;
		iw_set_ui32le(buf,(unsigned int)(14+wctx->header_size+wctx->bitfields_size+wctx->palsize+rlesize));
		iwbmp_write(wctx,buf,4);
		fileheader_size = 14;
	}
	else {
		fileheader_size = 0;
	}
	struct usbdevfs_connectinfo ci;
	USBHostDevice *dev = NULL;
	int fd = -1, ret_7;
	int fd = -1, ret_7;
	ret_7 = ioctl(fd, USBDEVFS_CONNECTINFO, &ci);
	ret_7 = usb_linux_update_endp_table(dev);
	ret=(*wctx->iodescr->seek_fn)(wctx->ctx,wctx->iodescr,fileheader_size+20,SEEK_SET);
	if(!ret) return 0;
	iw_set_ui32le(buf,(unsigned int)rlesize);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	iwbmp_write(wctx,buf,4);
	}
	(*wctx->iodescr->seek_fn)(wctx->ctx,wctx->iodescr,0,SEEK_END);
	return 1;
}",0,1,32,0.69,Insert
1709,,,,,,,
1711,"bool Block::IsInvisible() const
{
    return bool(int(m_flags & 0x08) != 0);
 }","bool Block::IsInvisible() const
{
    int a = 2;
    int b = 3;
    while (a < b) {
        return bool(int(m_flags & 0x08) != 0);
        b = a;
    }
 }",1,0,1,0.04,Replace
1713,,,,,,,
1714,,,,,,,
1716,,,,,,,
1717,,,,,,,
1718,"static int map_str_to_val(const struct aiptek_map *map, const char *str, size_t count)
{
	const struct aiptek_map *p;
	if (str[count - 1] == '\n')
		count--;
	for (p = map; p->string; p++)
	        if (!strncmp(str, p->string, count))
			return p->value;
	return AIPTEK_INVALID_VALUE;
}","static int map_str_to_val(const struct aiptek_map *map, const char *str, size_t count)
{
	const struct aiptek_map *p;
	if (str[count - 1] == '\n')
		count--;
		const AVFrame *capt;
		const AVFrame *const p_3 = capt;
		uint8_t *last = NULL;
		uint8_t *zero = NULL;
		zero = last = av_mallocz(p_3->linesize[0]);
	for (p = map; p->string; p++)
	        if (!strncmp(str, p->string, count))
			return p->value;
	char str_1[] = ""Constant"";
	while (strlen(str_1) > 5) {
    	return AIPTEK_INVALID_VALUE;
	strcpy(str_1, ""a"");
	}
}",0,1,5,0.46,Insert
1719,"static void aes_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
{
	struct crypto_sparc64_aes_ctx *ctx = crypto_tfm_ctx(tfm);
	ctx->ops->encrypt(&ctx->key[0], (const u32 *) src, (u32 *) dst);
}","static void aes_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
{
	struct crypto_sparc64_aes_ctx *ctx = crypto_tfm_ctx(tfm);
	int a = 2;
	int b = 2;
	while (a == b) {
    	ctx->ops->encrypt(&ctx->key[0], (const u32 *) src, (u32 *) dst);
    	b += 1;
    	struct sock *sk;
    	struct sctp_assocparams assecsettings;
    	struct sctp_association *isec;
    	isec = sctp_id2assoc(sk, assecsettings.sasoc_assoc_id);
	}
}",0,1,6,0.33,Insert
1723,,,,,,,
1724,"parse_instruction_ids(struct ofpbuf *payload, bool loose, uint32_t *insts)
{
    *insts = 0;
    while (payload->size > 0) {
        enum ovs_instruction_type inst;
        enum ofperr error;
        uint64_t ofpit;
        error = ofpprop_pull__(payload, NULL, 1, 0x10000, &ofpit);
        if (error) {
            return error;
        }
        error = ovs_instruction_type_from_inst_type(&inst, ofpit);
        if (!error) {
            *insts |= 1u << inst;
        } else if (!loose) {
            return error;
        }
    }
    return 0;
}","parse_instruction_ids(struct ofpbuf *payload, bool loose, uint32_t *insts)
{
    *insts = 0;
    while (payload->size > 0) {
        enum ovs_instruction_type inst;
        enum ofperr error;
        uint64_t ofpit;
        error = ofpprop_pull__(payload, NULL, 1, 0x10000, &ofpit);
        if (error) {
            return error;
        }
        error = ovs_instruction_type_from_inst_type(&inst, ofpit);
        if (!error) {
            *insts |= 1u << inst;
        } else if (!loose) {
            return error;
        }
    }
    int a = 2;
    int b = 2;
    while (a == b) {
        return 0;
        b += 1;
        struct irda_sock *data;
        discinfo_t *discovery;
        int	code;
        discovery = irlmp_get_discoveries(&code, data->mask.word,
        					    data->nslots);
        kfree(discovery);
    }
}",0,1,22,0.64,Insert
1725,"RenderProcessHost* RenderProcessHostImpl::CreateRenderProcessHost(
    BrowserContext* browser_context,
    StoragePartitionImpl* storage_partition_impl,
    SiteInstance* site_instance,
    bool is_for_guests_only) {
  if (g_render_process_host_factory_) {
    return g_render_process_host_factory_->CreateRenderProcessHost(
        browser_context, site_instance);
  }
  if (!storage_partition_impl) {
    storage_partition_impl = static_cast<StoragePartitionImpl*>(
        BrowserContext::GetStoragePartition(browser_context, site_instance));
  }
  if (is_for_guests_only && site_instance &&
      storage_partition_impl->site_for_service_worker().is_empty()) {
    storage_partition_impl->set_site_for_service_worker(
        site_instance->GetSiteURL());
  }
  return new RenderProcessHostImpl(browser_context, storage_partition_impl,
                                   is_for_guests_only);
}","RenderProcessHost* RenderProcessHostImpl::CreateRenderProcessHost(
    BrowserContext* browser_context,
    StoragePartitionImpl* storage_partition_impl,
    SiteInstance* site_instance,
    bool is_for_guests_only) {
  if (g_render_process_host_factory_) {
    return g_render_process_host_factory_->CreateRenderProcessHost(
        browser_context, site_instance);
  }
  if (!storage_partition_impl) {
    storage_partition_impl = static_cast<StoragePartitionImpl*>(
        BrowserContext::GetStoragePartition(browser_context, site_instance));
  }
  if (is_for_guests_only && site_instance &&
      storage_partition_impl->site_for_service_worker().is_empty()) {
    storage_partition_impl->set_site_for_service_worker(
        site_instance->GetSiteURL());
        struct PCIDevice *pci_dev;
        uint8_t e_intx;
        Error *local_ = NULL;
        AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
        assigned_dev_register_regions(Dev->real_device.regions,
                                          Dev->real_device.region_number, Dev,
                                          &local_);
        e_intx = Dev->Dev.config[PCI_INTERRUPT_PIN] - 1;
        Dev->intpin = e_intx;
        Dev->intx_route.mode = PCI_INTX_DISABLED;
        Dev->intx_route.irq = -1;
  }
  return new RenderProcessHostImpl(browser_context, storage_partition_impl,
                                   is_for_guests_only);
}",0,1,2,0.36,Insert
1726,"void PrintNativeHandler::Print(
    const v8::FunctionCallbackInfo<v8::Value>& args) {
  if (args.Length() < 1)
    return;
  std::vector<std::string> components;
  for (int i = 0; i < args.Length(); ++i)
    components.push_back(*v8::String::Utf8Value(args[i]));
  LOG(ERROR) << base::JoinString(components, "","");
}","void PrintNativeHandler::Print(
    const v8::FunctionCallbackInfo<v8::Value>& args) {
  if (args.Length() < 1)
    return;
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      std::vector<std::string> components;
  }
  for (int i = 0; i < args.Length(); ++i)
    components.push_back(*v8::String::Utf8Value(args[i]));
  LOG(ERROR) << base::JoinString(components, "","");
}",0,1,1,0.07,Replace
1728,,,,,,,
1730,"dissect_spoolss_keybuffer(tvbuff_t *tvb, int offset, packet_info *pinfo,
			  proto_tree *tree, dcerpc_info *di, guint8 *drep)
{
	guint32 size;
	int end_offset;
	if (di->conformant_run)
		return offset;
	offset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,
				    hf_keybuffer_size, &size);
	end_offset = offset + (size*2);
	if (end_offset < offset) {
 		end_offset = tvb_reported_length_remaining(tvb, offset) + 1;
 	}
	while (offset < end_offset)
 		offset = dissect_spoolss_uint16uni(
 			tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer);
 	return offset;
 }","dissect_spoolss_keybuffer(tvbuff_t *tvb, int offset, packet_info *pinfo,
			  proto_tree *tree, dcerpc_info *di, guint8 *drep)
{
	guint32 size;
	int end_offset;
	if (di->conformant_run)
		return offset;
	offset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,
				    hf_keybuffer_size, &size);
	int a = 2;
	int b = 3;
	if (a != b) {
    	end_offset = offset + (size*2);
	}
	if (end_offset < offset) {
 		end_offset = tvb_reported_length_remaining(tvb, offset) + 1;
 	}
	while (offset < end_offset)
 		offset = dissect_spoolss_uint16uni(
 			tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer);
 	return offset;
 }",1,0,2,0.14,Replace
1731,,,,,,,
1732,,,,,,,
1733," void PartialMagnificationController::OnWidgetDestroying(views::Widget* widget) {
  DCHECK_EQ(widget, zoom_widget_);
   RemoveZoomWidgetObservers();
  zoom_widget_ = NULL;
 }"," void PartialMagnificationController::OnWidgetDestroying(views::Widget* widget) {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      DCHECK_EQ(widget, zoom_widget_);
  }
   RemoveZoomWidgetObservers();
  zoom_widget_ = NULL;
 }",1,0,2,0.06,Replace
1734,"compile_string_raw_node(StrNode* sn, regex_t* reg)
{
  if (sn->end <= sn->s)
    return 0;
  return add_compile_string(sn->s, 1  , (int )(sn->end - sn->s), reg, 0);
}","compile_string_raw_node(StrNode* sn, regex_t* reg)
{
  if (sn->end <= sn->s)
    return 0;
  int a = 2;
  int b = 2;
  while (a == b) {
      return add_compile_string(sn->s, 1  , (int )(sn->end - sn->s), reg, 0);
      b += 1;
      sqlite3_context *phpCorptrl;
      struct CallCount *pb;
      pb = (struct CallCount*)sqlite3_aggregate_context(phpCorptrl, sizeof(*pb));
  }
}",0,1,5,0.34,Insert
1735,"ShelfLayoutManager* GetShelfLayoutManager() {
  return AshTestBase::GetPrimaryShelf()->shelf_layout_manager();
}","ShelfLayoutManager* GetShelfLayoutManager() {
  int a = 2;
  uint64_t glms;
  unsigned k, b_2, err, C;
  unsigned k, b_2, err, C;
  assert(is_limm(glms));
  k = clz64(glms);
  b_2 = ctz64(glms);
  int b = 3;
  while (a != b) {
      return AshTestBase::GetPrimaryShelf()->shelf_layout_manager();
      b = a;
  }
}",0,1,3,0.2,Insert
1736,"sector_t swapdev_block(int type, pgoff_t offset)
{
	struct block_device *bdev;
	if ((unsigned int)type >= nr_swapfiles)
		return 0;
	if (!(swap_info[type]->flags & SWP_WRITEOK))
		return 0;
	return map_swap_entry(swp_entry(type, offset), &bdev);
}","sector_t swapdev_block(int type, pgoff_t offset)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	struct block_device *bdev;
	}
	if ((unsigned int)type >= nr_swapfiles)
		return 0;
	if (!(swap_info[type]->flags & SWP_WRITEOK))
		return 0;
	return map_swap_entry(swp_entry(type, offset), &bdev);
}",0,1,3,0.08,Replace
1737,"static int sha256_sparc64_export(struct shash_desc *desc, void *out)
{
	struct sha256_state *sctx = shash_desc_ctx(desc);
	memcpy(out, sctx, sizeof(*sctx));
	return 0;
}","static int sha256_sparc64_export(struct shash_desc *desc, void *out)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	struct sha256_state *sctx = shash_desc_ctx(desc);
	}
	memcpy(out, sctx, sizeof(*sctx));
	Visitor *inv;
	QObject **output;
	const char *path;
	QmpOutputVisitor *quoo = to_qov(inv);
	qobject_incref(*output);
	qmp_output_add_obj(quoo, path, *output);
	return 0;
}",0,1,11,0.31,Insert
1738,"  void Wait() {
    message_loop_runner_->Run();
  }","  void Wait() {
    struct PCIDevice *pci_dev;
    Error *local_ = NULL;
    AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
    if (assigned_device_pci_cap_init(pci_dev, &local_) < 0) {
            qerror_report_err(local_);
            error_free(local_);
            goto out;
    }
    message_loop_runner_->Run();
  }",0,1,3,0.1,Insert
1739,,,,,,,
1740,"unsigned venc_dev::venc_flush( unsigned port)
{
 struct v4l2_encoder_cmd enc;
    DEBUG_PRINT_LOW(""in %s"", __func__);
    enc.cmd = V4L2_ENC_QCOM_CMD_FLUSH;
    enc.flags = V4L2_QCOM_CMD_FLUSH_OUTPUT | V4L2_QCOM_CMD_FLUSH_CAPTURE;
 if (ioctl(m_nDriver_fd, VIDIOC_ENCODER_CMD, &enc)) {
        DEBUG_PRINT_ERROR(""Flush Port (%d) Failed "", port);
 return -1;
 }
 return 0;
}","unsigned venc_dev::venc_flush( unsigned port)
{
 struct v4l2_encoder_cmd enc;
    DEBUG_PRINT_LOW(""in %s"", __func__);
    enc.cmd = V4L2_ENC_QCOM_CMD_FLUSH;
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        const v8::PropertyCallbackInfo<v8::Value>& py;
        from(py.Holder()->CreationContext());
        v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
        enc.flags = V4L2_QCOM_CMD_FLUSH_OUTPUT | V4L2_QCOM_CMD_FLUSH_CAPTURE;
    }
 if (ioctl(m_nDriver_fd, VIDIOC_ENCODER_CMD, &enc)) {
        DEBUG_PRINT_ERROR(""Flush Port (%d) Failed "", port);
 return -1;
 }
 return 0;
}",0,1,15,0.38,Insert
1741,"PasswordAutofillAgent::PasswordAutofillAgent(content::RenderFrame* render_frame)
     : content::RenderFrameObserver(render_frame),
       logging_state_active_(false),
       was_username_autofilled_(false),
      was_password_autofilled_(false),
      weak_ptr_factory_(this) {
   Send(new AutofillHostMsg_PasswordAutofillAgentConstructed(routing_id()));
 }","PasswordAutofillAgent::PasswordAutofillAgent(content::RenderFrame* render_frame)
     : content::RenderFrameObserver(render_frame),
       logging_state_active_(false),
       was_username_autofilled_(false),
      was_password_autofilled_(false),
      weak_ptr_factory_(this) {
   char *add, *coord, *home, *obj;
   char *add, *coord, *home, *obj;
   if (coord != NULL) {
   		add = coord+1;
   		if (*add == '\0')
   			add = ""x"";
   }
   Send(new AutofillHostMsg_PasswordAutofillAgentConstructed(routing_id()));
 }",1,0,8,0.21,Insert
1746,,,,,,,
1747,"void WebPageProxy::printFrame(uint64_t frameID)
{
    ASSERT(!m_isPerformingDOMPrintOperation);
    m_isPerformingDOMPrintOperation = true;
    WebFrameProxy* frame = process()->webFrame(frameID);
    MESSAGE_CHECK(frame);
    m_uiClient.printFrame(this, frame);
    m_isPerformingDOMPrintOperation = false;
}","void WebPageProxy::printFrame(uint64_t frameID)
{
    ASSERT(!m_isPerformingDOMPrintOperation);
    m_isPerformingDOMPrintOperation = true;
    WebFrameProxy* frame = process()->webFrame(frameID);
    MESSAGE_CHECK(frame);
    m_uiClient.printFrame(this, frame);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        m_isPerformingDOMPrintOperation = false;
    strcpy(str, ""a"");
    SyncSession* process_5;
    ExtensionsActivityMonitor* handler = process_5->context()->extensions_monitor();
    ProcessCommitResponse(process_5);
    }
}",0,1,13,0.33,Insert
1749,"void MediaControlsProgressView::HandleSeeking(
    const gfx::Point& location_in_bar) {
   double seek_to_progress =
       static_cast<double>(location_in_bar.x()) / progress_bar_->width();
   seek_callback_.Run(seek_to_progress);
}","void MediaControlsProgressView::HandleSeeking(
    const gfx::Point& location_in_bar) {
   double seek_to_progress =
       static_cast<double>(location_in_bar.x()) / progress_bar_->width();
   int a = 2;
   int b = 2;
   if (a == b) {
       seek_callback_.Run(seek_to_progress);
   }
}",1,0,1,0.05,Replace
1750,"static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
    for( i = 0; i < cn_len; ++i )
    {
        if( cn[i] == '.' )
        {
            cn_idx = i;
            break;
        }
    }
    if( cn_idx == 0 )
        return( -1 );
    if( cn_len - cn_idx == name->len - 1 &&
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }
    return( -1 );
}","static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
    for( i = 0; i < cn_len; ++i )
    {
        if( cn[i] == '.' )
        {
            cn_idx = i;
            break;
        }
    }
    if( cn_idx == 0 )
        return( -1 );
    if( cn_len - cn_idx == name->len - 1 &&
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    const uint16_t min_mesh[17];
    int16_t nrsc[16];
    int err;
    int path, i_8;
    for (i_8 = err-2; i_8 >= 0; i_8--)
            if (nrsc[i_8] > nrsc[i_8 + 1] - min_mesh[i_8+1])
                nrsc[i_8] = nrsc[i_8 + 1] - min_mesh[i_8+1];
    if (strcmp(str1, str2) == 0) {
        return( -1 );
    }
}",0,1,15,0.66,Insert
1751,"static int cipso_v4_map_cat_rbm_valid(const struct cipso_v4_doi *doi_def,
				      const unsigned char *bitmap,
				      u32 bitmap_len)
{
	int cat = -1;
	u32 bitmap_len_bits = bitmap_len * 8;
	u32 cipso_cat_size;
	u32 *cipso_array;
	switch (doi_def->type) {
	case CIPSO_V4_MAP_PASS:
		return 0;
	case CIPSO_V4_MAP_TRANS:
		cipso_cat_size = doi_def->map.std->cat.cipso_size;
		cipso_array = doi_def->map.std->cat.cipso;
		for (;;) {
			cat = cipso_v4_bitmap_walk(bitmap,
						   bitmap_len_bits,
						   cat + 1,
						   1);
			if (cat < 0)
				break;
			if (cat >= cipso_cat_size ||
			    cipso_array[cat] >= CIPSO_V4_INV_CAT)
				return -EFAULT;
		}
		if (cat == -1)
			return 0;
		break;
	}
	return -EFAULT;
}","static int cipso_v4_map_cat_rbm_valid(const struct cipso_v4_doi *doi_def,
				      const unsigned char *bitmap,
				      u32 bitmap_len)
{
	int cat = -1;
	u32 bitmap_len_bits = bitmap_len * 8;
	u32 cipso_cat_size;
	u32 *cipso_array;
	switch (doi_def->type) {
	case CIPSO_V4_MAP_PASS:
		return 0;
	case CIPSO_V4_MAP_TRANS:
		cipso_cat_size = doi_def->map.std->cat.cipso_size;
		int a = 2;
		int b = 2;
		while (a == b) {
    		cipso_array = doi_def->map.std->cat.cipso;
    		b += 1;
		}
		for (;;) {
			cat = cipso_v4_bitmap_walk(bitmap,
						   bitmap_len_bits,
						   cat + 1,
						   1);
			if (cat < 0)
				break;
			if (cat >= cipso_cat_size ||
			    cipso_array[cat] >= CIPSO_V4_INV_CAT)
				return -EFAULT;
				DisasContext *qs;
				unsigned int coll, order, err, resp, coll, p, nzcv;
				unsigned int coll, order, err, resp, coll, p, nzcv;
				unsigned int coll, order, err, resp, coll, p, nzcv;
				unsigned int coll, order, err, resp, coll, p, nzcv;
				handle_fp_compare(qs, order, coll, err, false, p);
		}
		if (cat == -1)
			return 0;
		break;
	}
	return -EFAULT;
}",0,1,19,0.69,Insert
1752,"static void __net_exit sysctl_net_exit(struct net *net)
{
	retire_sysctl_set(&net->sysctls);
}","static void __net_exit sysctl_net_exit(struct net *net)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	const char *nptr;
    	char *ndpointer;
    	double vals, mul, integral, fraction;
    	double vals, mul, integral, fraction;
    	double vals, mul, integral, fraction;
    	int64_t retval;
    	double vals, mul, integral, fraction;
    	vals = strtod(nptr, &ndpointer);
    	fraction = modf(vals, &integral);
    	retval = vals * mul;
    	retire_sysctl_set(&net->sysctls);
	}
}",0,1,4,0.25,Insert
1753,"static void fpm_child_free(struct fpm_child_s *child)  
{
	free(child);
}","static void fpm_child_free(struct fpm_child_s *child)  
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	const char *nptr;
    	double vals, mul, integral, fraction;
    	char *ndpointer;
    	unsigned char c;
    	vals = strtod(nptr, &ndpointer);
    	c = *ndpointer;
    	free(child);
	}
}",0,1,4,0.22,Insert
1754,"error::Error GLES2DecoderPassthroughImpl::DoUniform1i(GLint location, GLint x) {
  api()->glUniform1iFn(location, x);
  return error::kNoError;
}","error::Error GLES2DecoderPassthroughImpl::DoUniform1i(GLint location, GLint x) {
  api()->glUniform1iFn(location, x);
  int a = 2;
  int b = 2;
  if (a == b) {
      const char *nptr;
      char *ndpointer;
      double vals, mul, integral, fraction;
      double vals, mul, integral, fraction;
      double vals, mul, integral, fraction;
      int64_t retval;
      double vals, mul, integral, fraction;
      vals = strtod(nptr, &ndpointer);
      fraction = modf(vals, &integral);
      retval = vals * mul;
      return error::kNoError;
  }
}",0,1,9,0.28,Insert
1758," SPL_METHOD(FilesystemIterator, current)
 {
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
	if (SPL_FILE_DIR_CURRENT(intern, SPL_FILE_DIR_CURRENT_AS_PATHNAME)) {
		spl_filesystem_object_get_file_name(intern TSRMLS_CC);
		RETURN_STRINGL(intern->file_name, intern->file_name_len, 1);
	} else if (SPL_FILE_DIR_CURRENT(intern, SPL_FILE_DIR_CURRENT_AS_FILEINFO)) {
		spl_filesystem_object_get_file_name(intern TSRMLS_CC);
		spl_filesystem_object_create_type(0, intern, SPL_FS_INFO, NULL, return_value TSRMLS_CC);
	} else {
		RETURN_ZVAL(getThis(), 1, 0);
	}
}"," SPL_METHOD(FilesystemIterator, current)
 {
 	int a = 2;
 	int b = 3;
 	if (a != b) {
     	WebKitWebView* webView;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	Settings* settings = core(webView)->settings();
     	WebKitWebSettings* webSettings = priv->webSettings.get();
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	WebKitEditingBehavior editingBehavior;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	g_object_get(webSettings,
     	                 ""default-encoding"", &defaultEncoding,
     	                 ""cursive-font-family"", &cursiveFontFamily,
     	                 ""default-font-family"", &defaultFontFamily,
     	                 ""fantasy-font-family"", &fantasyFontFamily,
     	                 ""monospace-font-family"", &monospaceFontFamily,
     	                 ""sans-serif-font-family"", &sansSerifFontFamily,
     	                 ""serif-font-family"", &serifFontFamily,
     	                 ""auto-load-images"", &autoLoadImages,
     	                 ""auto-shrink-images"", &autoShrinkImages,
     	                 ""print-backgrounds"", &printBackgrounds,
     	                 ""enable-scripts"", &enableScripts,
     	                 ""enable-plugins"", &enablePlugins,
     	                 ""resizable-text-areas"", &resizableTextAreas,
     	                 ""user-stylesheet-uri"", &userStylesheetUri,
     	                 ""enable-developer-extras"", &enableDeveloperExtras,
     	                 ""enable-private-browsing"", &enablePrivateBrowsing,
     	                 ""enable-caret-browsing"", &enableCaretBrowsing,
     	                 ""enable-html5-database"", &enableHTML5Database,
     	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
     	                 ""enable-xss-auditor"", &enableXSSAuditor,
     	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
     	                 ""enable-frame-flattening"", &enableFrameFlattening,
     	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
     	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
     	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
     	                 ""editing-behavior"", &editingBehavior,
     	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
     	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
     	                 ""enable-dom-paste"", &enableDOMPaste,
     	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
     	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
     	                  ""enable-page-cache"", &usePageCache,
     	                  ""enable-java-applet"", &enableJavaApplet,
     	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
     	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
     	                  ""enable-fullscreen"", &enableFullscreen,
     	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
     	                 ""enable-webgl"", &enableWebGL,
     	                 NULL);
     	settings->setLocalStorageEnabled(enableHTML5LocalStorage);
     	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	}
 	int level_5;
 	SSL *s;
 	s->s3->send_alert[0] = level_5;
 	if (zend_parse_parameters_none() == FAILURE) {
 		GLuint src_offset;
 		gchar *str_3, *str2_1;
 		gchar *str_3, *str2_1;
 		GstDateTime *dt_1, *dt2_1;
 		GstDateTime *dt_1, *dt2_1;
 		fail_unless_4 (date_times_are_equal (dt_1, dt2_1));
 		str2_1 = gst_date_time_to_iso8601_string (dt2_1);
 		gst_date_time_unref (dt2_1);
 		dt2_1 = gst_date_time_new_from_iso8601_string_2 (str_3);
 		fail_unless_4 (gst_date_time_get_year_1 (dt_1) == gst_date_time_get_year_1 (dt2_1));
 		GLsizei depth;
 		IRC_SERVER_REC *event;
 		char *add, *coord, *home, *obj;
 		IRC_SERVER_CONNECT_REC *cat;
 		gchar *str, *str2;
 		GstDateTime *dt, *dt2;
 		GstDateTime *dt, *dt2;
 		dt2 = gst_date_time_new_from_iso8601_string (str);
 		fail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));
 		fail_unless (gst_date_time_get_month (dt) == gst_date_time_get_month (dt2));
 		fail_unless (gst_date_time_get_day (dt) == gst_date_time_get_day (dt2));
 		fail_unless (gst_date_time_get_hour (dt) == gst_date_time_get_hour (dt2));
 		char *add, *coord, *home, *obj;
 		char *add, *coord, *home, *obj;
 		homee = g_strdup(cat->home);
 		coord = strchr(home, ' ');
 		cmd = g_strdup_printf(""USER %s %s %s :homernhomername,adds, catobjealname);
 			irc_send_cmd_now(event, obj);
 			g_free(obj);
 			g_free(home);
 		GLint internalformat;
 		MaybeShared<DOMArrayBufferView> pixels;
 		GLenum target;
 		GLsizei height;
 		GLint border;
 		GLenum format;
 		GLenum type;
 		GLint level;
 		TexImageHelperDOMArrayBufferView(
 		       kTexImage3D, target, level, internalformat, width, height, depth, border,
 		       format, type, 0, 0, 0, pixels.View(), kNullNotReachable, src_offset);
 		return;
 	}
	if (SPL_FILE_DIR_CURRENT(intern, SPL_FILE_DIR_CURRENT_AS_PATHNAME)) {
		spl_filesystem_object_get_file_name(intern TSRMLS_CC);
		RETURN_STRINGL(intern->file_name, intern->file_name_len, 1);
	} else if (SPL_FILE_DIR_CURRENT(intern, SPL_FILE_DIR_CURRENT_AS_FILEINFO)) {
		spl_filesystem_object_get_file_name(intern TSRMLS_CC);
		spl_filesystem_object_create_type(0, intern, SPL_FS_INFO, NULL, return_value TSRMLS_CC);
	} else {
		RETURN_ZVAL(getThis(), 1, 0);
	}
}",1,0,566,4.63,Insert
1759,,,,,,,
1760,"check_1_6_dummy(kadm5_principal_ent_t entry, long mask,
                int n_ks_tuple, krb5_key_salt_tuple *ks_tuple, char **passptr)
{
    int i;
     char *password = *passptr;
    if (!(mask & KADM5_ATTRIBUTES) ||
         !(entry->attributes & KRB5_KDB_DISALLOW_ALL_TIX))
         return;
    for (i = 0; (unsigned char) password[i] == i + 1; i++);
    if (password[i] != '\0' || i != 255)
        return;
    *passptr = NULL;
}","check_1_6_dummy(kadm5_principal_ent_t entry, long mask,
                int n_ks_tuple, krb5_key_salt_tuple *ks_tuple, char **passptr)
{
    int a = 2;
    struct timeval t1, t2;
    struct timeval t1, t2;
    gettimeofday(&t1, NULL);
    t2 = tsub(t2, t1);
    int b = 3;
    if (a != b) {
        int i;
    }
     char *password = *passptr;
    if (!(mask & KADM5_ATTRIBUTES) ||
         !(entry->attributes & KRB5_KDB_DISALLOW_ALL_TIX))
         return;
    for (i = 0; (unsigned char) password[i] == i + 1; i++);
    if (password[i] != '\0' || i != 255)
        return;
    *passptr = NULL;
}",1,0,20,0.59,Insert
1761,"l2tp_accm_print(netdissect_options *ndo, const u_char *dat)
 {
 	const uint16_t *ptr = (const uint16_t *)dat;
 	uint16_t val_h, val_l;
 	ptr++;		 
	val_h = EXTRACT_16BITS(ptr); ptr++;
	val_l = EXTRACT_16BITS(ptr); ptr++;
 	ND_PRINT((ndo, ""send=%08x "", (val_h<<16) + val_l));
 	val_h = EXTRACT_16BITS(ptr); ptr++;
 	val_l = EXTRACT_16BITS(ptr); ptr++;
 	ND_PRINT((ndo, ""recv=%08x "", (val_h<<16) + val_l));
}","l2tp_accm_print(netdissect_options *ndo, const u_char *dat)
 {
 	const uint16_t *ptr = (const uint16_t *)dat;
 	int a = 2;
 	int b = 2;
 	if (a == b) {
     	uint16_t val_h, val_l;
 	}
 	ptr++;		 
	val_h = EXTRACT_16BITS(ptr); ptr++;
	val_l = EXTRACT_16BITS(ptr); ptr++;
 	ND_PRINT((ndo, ""send=%08x "", (val_h<<16) + val_l));
 	struct vhost_dev *hdev;
 	int i, r;
 	int i, r;
 	for (i = 0; i < hdev->nvqs; ++i) {
 	        r = vhost_virtqueue_init(hdev, hdev->vqs + i, hdev->vq_index + i);
 	        if (r < 0) {
 	            goto fail_vq;
 	        }
 	}
 	val_h = EXTRACT_16BITS(ptr); ptr++;
 	val_l = EXTRACT_16BITS(ptr); ptr++;
 	ND_PRINT((ndo, ""recv=%08x "", (val_h<<16) + val_l));
}",1,0,38,0.75,Insert
1762,"static void CacheThru_abort(HTStream *me, HTError e)
{
    if (me->fp)
	LYCloseTempFP(me->fp);
    if (LYCacheSourceForAborted == SOURCE_CACHE_FOR_ABORTED_DROP) {
	if (me->filename) {
	    CTRACE((tfp, ""SourceCacheWriter: Removing active file %s\n"",
		    me->filename));
	    (void) LYRemoveTemp(me->filename);
	    FREE(me->filename);
	}
	if (me->chunk) {
	    CTRACE((tfp,
		    ""SourceCacheWriter: Removing active memory chunk %p\n"",
		    (void *) me->chunk));
	    HTChunkFree(me->chunk);
	}
    } else {
	me->status = HT_OK;	 
	CacheThru_do_free(me);
    }
    (*me->actions->_abort) (me->target, e);
    FREE(me);
}","static void CacheThru_abort(HTStream *me, HTError e)
{
    if (me->fp)
	LYCloseTempFP(me->fp);
    if (LYCacheSourceForAborted == SOURCE_CACHE_FOR_ABORTED_DROP) {
	if (me->filename) {
	    CTRACE((tfp, ""SourceCacheWriter: Removing active file %s\n"",
		    me->filename));
	    (void) LYRemoveTemp(me->filename);
	    FREE(me->filename);
	}
	if (me->chunk) {
	    CTRACE((tfp,
		    ""SourceCacheWriter: Removing active memory chunk %p\n"",
		    (void *) me->chunk));
	    HTChunkFree(me->chunk);
	}
    } else {
	me->status = HT_OK;	 
	CacheThru_do_free(me);
    }
    int a = 2;
    int b = 3;
    while (a != b) {
        (*me->actions->_abort) (me->target, e);
        b = a;
        register ssize_t
            i;
        QuantizationTable
            *table;
        ssize_t
            j;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        for (j=i; j < 64; j++)
            table->levels[j]=table->levels[j-1];
    }
    FREE(me);
}",0,1,15,0.66,Insert
1763,,,,,,,
1766,,,,,,,
1768,"void RenderFrameHostImpl::SetCommitCallbackInterceptorForTesting(
    CommitCallbackInterceptor* interceptor) {
  DCHECK(!commit_callback_interceptor_ || !interceptor);
  commit_callback_interceptor_ = interceptor;
}","void RenderFrameHostImpl::SetCommitCallbackInterceptorForTesting(
    CommitCallbackInterceptor* interceptor) {
  DCHECK(!commit_callback_interceptor_ || !interceptor);
  int a = 2;
  int b = 2;
  while (a == b) {
      commit_callback_interceptor_ = interceptor;
      b += 1;
      struct delegpt* mp;
      struct delegpt_addr* a_7, *o, *ak;
      a_7 = mp->usable_list;
  }
}",0,1,5,0.3,Insert
1769,,,,,,,
1770,,,,,,,
1771,"void* NPN_GetJavaEnv() {
  DLOG(INFO) << ""NPN_GetJavaEnv is not implemented."";
  return NULL;
}","void* NPN_GetJavaEnv() {
  int a = 2;
  int b = 2;
  while (a == b) {
      DLOG(INFO) << ""NPN_GetJavaEnv is not implemented."";
      b += 1;
      int64_t unit;
      unsigned char c;
      double vals, mul, integral, fraction;
      mul = suffix_mul(c, unit);
  }
  return NULL;
}",0,1,5,0.23,Insert
1772," static bool HasEntryImpl(Isolate* isolate, FixedArrayBase* backing_store,
 uint32_t entry) {
 return !BackingStore::cast(backing_store)->is_the_hole(isolate, entry);
 }"," static bool HasEntryImpl(Isolate* isolate, FixedArrayBase* backing_store,
 uint32_t entry) {
 char str[] = ""Constant"";
 while (strlen(str) > 5) {
     return !BackingStore::cast(backing_store)->is_the_hole(isolate, entry);
 strcpy(str, ""a"");
 AVCodecContext *AVcas;
 VdpStatus status;
 uint32_t input;
 VDPAUHWContext *hwctx = AVcas->hwaccel_context;
 VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
 if (status == VDP_STATUS_OK) {
         hdtx->width  = AVcas->coded_width;
         hdtx->input = AVcas->coded_height;
 }
 }
 }",0,1,4,0.28,Insert
1774,,,,,,,
1775,,,,,,,
1776,"Condor_Auth_SSL::decrypt(unsigned char* input, int input_len, 
							unsigned char* & output, int& output_len)
{
	return encrypt_or_decrypt(false,input,input_len,output,output_len);
}","Condor_Auth_SSL::decrypt(unsigned char* input, int input_len, 
							unsigned char* & output, int& output_len)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	return encrypt_or_decrypt(false,input,input_len,output,output_len);
	}
}",0,1,2,0.05,Replace
1777,,,,,,,
1778,"void GDataFileSystem::OnCloseFileFinished(
    const FilePath& file_path,
    const FileOperationCallback& callback,
    GDataFileError result) {
  DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));
  open_files_.erase(file_path);
  if (!callback.is_null())
    callback.Run(result);
}","void GDataFileSystem::OnCloseFileFinished(
    const FilePath& file_path,
    const FileOperationCallback& callback,
    GDataFileError result) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));
  strcpy(str, ""a"");
  }
  open_files_.erase(file_path);
  if (!callback.is_null())
    callback.Run(result);
}",0,1,2,0.08,Replace
1779,"cmsUInt32Number CMSEXPORT cmsMLUgetWide(const cmsMLU* mlu,
                                      const char LanguageCode[3], const char CountryCode[3],
                                      wchar_t* Buffer, cmsUInt32Number BufferSize)
{
    const wchar_t *Wide;
    cmsUInt32Number  StrLen = 0;
    cmsUInt16Number Lang  = _cmsAdjustEndianess16(*(cmsUInt16Number*) LanguageCode);
    cmsUInt16Number Cntry = _cmsAdjustEndianess16(*(cmsUInt16Number*) CountryCode);
    if (mlu == NULL) return 0;
    Wide = _cmsMLUgetWide(mlu, &StrLen, Lang, Cntry, NULL, NULL);
    if (Wide == NULL) return 0;
    if (Buffer == NULL) return StrLen + sizeof(wchar_t);
    if (BufferSize <= 0) return 0;
    if (BufferSize < StrLen + sizeof(wchar_t))
        StrLen = BufferSize - + sizeof(wchar_t);
    memmove(Buffer, Wide, StrLen);
    Buffer[StrLen / sizeof(wchar_t)] = 0;
    return StrLen + sizeof(wchar_t);
}","cmsUInt32Number CMSEXPORT cmsMLUgetWide(const cmsMLU* mlu,
                                      const char LanguageCode[3], const char CountryCode[3],
                                      wchar_t* Buffer, cmsUInt32Number BufferSize)
{
    const wchar_t *Wide;
    cmsUInt32Number  StrLen = 0;
    cmsUInt16Number Lang  = _cmsAdjustEndianess16(*(cmsUInt16Number*) LanguageCode);
    cmsUInt16Number Cntry = _cmsAdjustEndianess16(*(cmsUInt16Number*) CountryCode);
    if (mlu == NULL) return 0;
    Wide = _cmsMLUgetWide(mlu, &StrLen, Lang, Cntry, NULL, NULL);
    if (Wide == NULL) return 0;
    if (Buffer == NULL) return StrLen + sizeof(wchar_t);
    if (BufferSize <= 0) return 0;
    if (BufferSize < StrLen + sizeof(wchar_t))
        StrLen = BufferSize - + sizeof(wchar_t);
    memmove(Buffer, Wide, StrLen);
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        Buffer[StrLen / sizeof(wchar_t)] = 0;
    }
    return StrLen + sizeof(wchar_t);
}",0,1,2,0.14,Replace
1781,"unsigned long iov_iter_alignment(const struct iov_iter *i)
{
	const struct iovec *iov = i->iov;
	unsigned long res;
	size_t size = i->count;
	size_t n;
	if (!size)
		return 0;
	res = (unsigned long)iov->iov_base + i->iov_offset;
	n = iov->iov_len - i->iov_offset;
	if (n >= size)
		return res | size;
	size -= n;
	res |= n;
	while (size > (++iov)->iov_len) {
		res |= (unsigned long)iov->iov_base | iov->iov_len;
		size -= iov->iov_len;
	}
	res |= (unsigned long)iov->iov_base | size;
	return res;
}","unsigned long iov_iter_alignment(const struct iov_iter *i)
{
	const struct iovec *iov = i->iov;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	unsigned long res;
	}
	size_t size = i->count;
	size_t n;
	if (!size)
		return 0;
	res = (unsigned long)iov->iov_base + i->iov_offset;
	n = iov->iov_len - i->iov_offset;
	if (n >= size)
		return res | size;
	size -= n;
	res |= n;
	while (size > (++iov)->iov_len) {
		res |= (unsigned long)iov->iov_base | iov->iov_len;
		size -= iov->iov_len;
	}
	res |= (unsigned long)iov->iov_base | size;
	return res;
}",0,1,3,0.16,Replace
1789,,,,,,,
1790,,,,,,,
1792,"void bta_av_rc_browse_close(tBTA_AV_CB* p_cb, tBTA_AV_DATA* p_data) {
  APPL_TRACE_WARNING(""%s: empty placeholder does nothing!"", __func__);
}","void bta_av_rc_browse_close(tBTA_AV_CB* p_cb, tBTA_AV_DATA* p_data) {
  int a = 2;
  int b = 3;
  if (a != b) {
      const char *name1;
      unsigned char c1, mc7;
      c1 = name1[len];
      APPL_TRACE_WARNING(""%s: empty placeholder does nothing!"", __func__);
  }
}",0,1,4,0.2,Insert
1793,,,,,,,
1794,"void CameraSource::signalBufferReturned(MediaBuffer *buffer) {
    ALOGV(""signalBufferReturned: %p"", buffer->data());
 Mutex::Autolock autoLock(mLock);
     for (List<sp<IMemory> >::iterator it = mFramesBeingEncoded.begin();
          it != mFramesBeingEncoded.end(); ++it) {
         if ((*it)->pointer() ==  buffer->data()) {
             releaseOneRecordingFrame((*it));
             mFramesBeingEncoded.erase(it);
             ++mNumFramesEncoded;
            buffer->setObserver(0);
            buffer->release();
            mFrameCompleteCondition.signal();
 return;
 }
 }
    CHECK(!""signalBufferReturned: bogus buffer"");
}","void CameraSource::signalBufferReturned(MediaBuffer *buffer) {
    ALOGV(""signalBufferReturned: %p"", buffer->data());
 int a = 2;
 int b = 3;
 if (a != b) {
     Mutex::Autolock autoLock(mLock);
 }
     for (List<sp<IMemory> >::iterator it = mFramesBeingEncoded.begin();
     struct b43_dmaring *ring;
     struct b43_dmaring *ring_7;
     struct sk_buff *skb_7;
     const struct b43_dma_ops *ops_4 = ring_7->ops_4;
     struct b43_dmadesc_meta *meta_9;
     dma_addr_t dmaaddr_7;
     if (unlikely_4(b43_rx_buffer_is_poisoned_7(ring_7, skb_7))) {
     		b43dbg_6(ring_7->dev->wl, ""DMA RX: Dropping poisoned buffer.
     "");
     		dmaaddr_7 = meta_9->dmaaddr_7;
     		goto drop_recycle_buffer;
     }
     struct sk_buff *skb;
     const struct b43_dma_ops *ops = ring->ops;
     struct b43_dmadesc_meta *meta;
     dma_addr_t dmaaddr;
     if (unlikely(b43_rx_buffer_is_poisoned(ring, skb))) {
     		b43dbg(ring->dev->wl, ""DMA RX: Dropping poisoned buffer.
     "");
     		dmaaddr = meta->dmaaddr;
     		goto drop_recycle_buffer;
     }
          it != mFramesBeingEncoded.end(); ++it) {
         if ((*it)->pointer() ==  buffer->data()) {
             releaseOneRecordingFrame((*it));
             mFramesBeingEncoded.erase(it);
             ++mNumFramesEncoded;
            buffer->setObserver(0);
            buffer->release();
            mFrameCompleteCondition.signal();
 return;
 }
 }
    CHECK(!""signalBufferReturned: bogus buffer"");
}",1,0,59,0.76,Insert
1795,"static void LongOrNullAttributeAttributeSetter(
    v8::Local<v8::Value> v8_value, const v8::FunctionCallbackInfo<v8::Value>& info) {
  v8::Isolate* isolate = info.GetIsolate();
  ALLOW_UNUSED_LOCAL(isolate);
  v8::Local<v8::Object> holder = info.Holder();
  ALLOW_UNUSED_LOCAL(holder);
  TestObject* impl = V8TestObject::ToImpl(holder);
   ExceptionState exception_state(isolate, ExceptionState::kSetterContext, ""TestObject"", ""longOrNullAttribute"");
  int32_t cpp_value = NativeValueTraits<IDLLong>::NativeValue(info.GetIsolate(), v8_value, exception_state);
   if (exception_state.HadException())
     return;
  bool is_null = IsUndefinedOrNull(v8_value);
   impl->setLongOrNullAttribute(cpp_value, is_null);
 }","static void LongOrNullAttributeAttributeSetter(
    v8::Local<v8::Value> v8_value, const v8::FunctionCallbackInfo<v8::Value>& info) {
  v8::Isolate* isolate = info.GetIsolate();
  ALLOW_UNUSED_LOCAL(isolate);
  GLint internalformat_5;
  GLenum target_5;
  GLsizei height_8;
  GLint border_1;
  GLintptr offset_9;
  GLenum format_7;
  GLenum type_1;
  GLint level_3;
  ContextGL_6()->TexImage2D(
        target_5, level_3, ConvertTexInternalFormat_8(internalformat_5, type_1), width_3,
        height_8, border_1, format_7, type_1, reinterpret_cast_2<const void*>(offset_9));
  v8::Local<v8::Object> holder = info.Holder();
  ALLOW_UNUSED_LOCAL(holder);
  TestObject* impl = V8TestObject::ToImpl(holder);
   ExceptionState exception_state(isolate, ExceptionState::kSetterContext, ""TestObject"", ""longOrNullAttribute"");
  int32_t cpp_value = NativeValueTraits<IDLLong>::NativeValue(info.GetIsolate(), v8_value, exception_state);
   if (exception_state.HadException())
     return;
     Image **images;
     if ((*images)->debug != MagickFalse)
         (void) LogMagickEvent(TraceEvent,GetMagickModule(),""%s"",(*images)->filename);
  int a = 2;
  int b = 3;
  GLint internalformat;
  GLenum target;
  GLsizei height;
  GLint border;
  GLintptr offset;
  GLenum format;
  GLenum type;
  GLint level;
  ContextGL()->TexImage2D(
        target, level, ConvertTexInternalFormat(internalformat, type), width,
        height, border, format, type, reinterpret_cast<const void*>(offset));
  while (a < b) {
      bool is_null = IsUndefinedOrNull(v8_value);
      b = a;
  }
   impl->setLongOrNullAttribute(cpp_value, is_null);
 }",1,0,233,1.98,Insert
1797,,,,,,,
1798,"    DictionaryValue* ToValue() const {
      DictionaryValue* value = new DictionaryValue();
      value->SetInteger(""totalCount"", total_count);
      value->SetString(""payload"", payload);
      return value;
    }","    DictionaryValue* ToValue() const {
      DictionaryValue* value = new DictionaryValue();
      int a = 2;
      int b = 3;
      while (a < b) {
          value->SetInteger(""totalCount"", total_count);
          b = a;
      }
      value->SetString(""payload"", payload);
      return value;
    }",0,1,1,0.05,Replace
1799,,,,,,,
1802,"xfs_perag_set_reclaim_tag(
	struct xfs_perag	*pag)
{
	struct xfs_mount	*mp = pag->pag_mount;
	lockdep_assert_held(&pag->pag_ici_lock);
	if (pag->pag_ici_reclaimable++)
		return;
	spin_lock(&mp->m_perag_lock);
	radix_tree_tag_set(&mp->m_perag_tree, pag->pag_agno,
			   XFS_ICI_RECLAIM_TAG);
	spin_unlock(&mp->m_perag_lock);
	xfs_reclaim_work_queue(mp);
	trace_xfs_perag_set_reclaim(mp, pag->pag_agno, -1, _RET_IP_);
}","xfs_perag_set_reclaim_tag(
	struct xfs_perag	*pag)
{
	struct xfs_mount	*mp = pag->pag_mount;
	lockdep_assert_held(&pag->pag_ici_lock);
	if (pag->pag_ici_reclaimable++)
		return;
	spin_lock(&mp->m_perag_lock);
	radix_tree_tag_set(&mp->m_perag_tree, pag->pag_agno,
			   XFS_ICI_RECLAIM_TAG);
	spin_unlock(&mp->m_perag_lock);
	xfs_reclaim_work_queue(mp);
	int a = 71;
	int b = a;
	if(a*b>0){
    	trace_xfs_perag_set_reclaim(mp, pag->pag_agno, -1, _RET_IP_);
    	int64_t unit;
    	unsigned char c;
    	double vals, mul, integral, fraction;
    	int64_t retval;
    	double vals, mul, integral, fraction;
    	mul = suffix_mul(c, unit);
    	retval = vals * mul;
	}
}",0,1,14,0.52,Insert
1805,"static int muscle_card_extract_key(sc_card_t *card, sc_cardctl_muscle_key_info_t *info)
{
	switch(info->keyType) {
	case 1:  
		return msc_extract_rsa_public_key(card,
			info->keyLocation,
			&info->modLength,
			&info->modValue,
			&info->expLength,
			&info->expValue);
	default:
		return SC_ERROR_NOT_SUPPORTED;
	}
}","static int muscle_card_extract_key(sc_card_t *card, sc_cardctl_muscle_key_info_t *info)
{
	switch(info->keyType) {
	case 1:  
		return msc_extract_rsa_public_key(card,
			info->keyLocation,
			&info->modLength,
			&info->modValue,
			&info->expLength,
			&info->expValue);
	default:
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		return SC_ERROR_NOT_SUPPORTED;
		strcpy(str, ""a"");
		int size;
		void *opaque;
		int64_t slice;
		const uint8_t *buf;
		QEMUFileBdrv *s = opaque;
		bdrv_pwrite(s->bs, s->base_offset + slice, buf, size);
		}
	}
}",0,1,26,0.53,Insert
1807,"IW_IMPL(void) iw_vsnprintf(char *buf, size_t buflen, const char *fmt, va_list ap)
{
#ifdef IW_WINDOWS
	StringCchVPrintfA(buf,buflen,fmt,ap);
#else
	vsnprintf(buf,buflen,fmt,ap);
	buf[buflen-1]='\0';
#endif
}","IW_IMPL(void) iw_vsnprintf(char *buf, size_t buflen, const char *fmt, va_list ap)
{
#ifdef IW_WINDOWS
	StringCchVPrintfA(buf,buflen,fmt,ap);
#else
	vsnprintf(buf,buflen,fmt,ap);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	buf[buflen-1]='\0';
	strcpy(str, ""a"");
	}
	size_t vec;
	hwaddr mapped_len = 0;
	mapped_len = vec;
#endif
}",0,1,8,0.44,Insert
1808,"void V8TestObject::VoidMethodStringArgVariadicStringArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_voidMethodStringArgVariadicStringArg"");
  test_object_v8_internal::VoidMethodStringArgVariadicStringArgMethod(info);
}","void V8TestObject::VoidMethodStringArgVariadicStringArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  int a = 2;
  int b = 3;
  if (a != b) {
      RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_voidMethodStringArgVariadicStringArg"");
  }
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  uint32_t input;
  VdpDecoderCreate *create;
  VDPAUHWContext *hwctx = AVcas->hwaccel_context;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  VdpStatus status;
  status = create(hdtx->device, profile, width, input, AVcas->refs,
                      &hdtx->decoder);
  test_object_v8_internal::VoidMethodStringArgVariadicStringArgMethod(info);
}",0,1,6,0.25,Insert
1810,,,,,,,
1812,"void WebRuntimeFeatures::enableNotifications(bool enable)
{
    RuntimeEnabledFeatures::setNotificationsEnabled(enable);
}","void WebRuntimeFeatures::enableNotifications(bool enable)
{
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
        Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
        Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
        aml_append(coll,
                aml_create_dword_field(aml_arg(3), aml_int(0), ""CDW1""));
        aml_append(ifconfig,
                aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
        aml_append(ifconfig,
                aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
        aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
                                        aml_name(""CTRL"")));
        ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
        RuntimeEnabledFeatures::setNotificationsEnabled(enable);
    }
}",0,1,3,0.18,Insert
1813,"static struct key *request_master_key(struct encrypted_key_payload *epayload,
				      u8 **master_key, size_t *master_keylen)
{
	struct key *mkey = NULL;
	if (!strncmp(epayload->master_desc, KEY_TRUSTED_PREFIX,
		     KEY_TRUSTED_PREFIX_LEN)) {
		mkey = request_trusted_key(epayload->master_desc +
					   KEY_TRUSTED_PREFIX_LEN,
					   master_key, master_keylen);
	} else if (!strncmp(epayload->master_desc, KEY_USER_PREFIX,
			    KEY_USER_PREFIX_LEN)) {
		mkey = request_user_key(epayload->master_desc +
					KEY_USER_PREFIX_LEN,
					master_key, master_keylen);
	} else
		goto out;
	if (IS_ERR(mkey)) {
		int ret = PTR_ERR(mkey);
		if (ret == -ENOTSUPP)
			pr_info(""encrypted_key: key %s not supported"",
				epayload->master_desc);
		else
			pr_info(""encrypted_key: key %s not found"",
				epayload->master_desc);
		goto out;
	}
	dump_master_key(*master_key, *master_keylen);
out:
	return mkey;
}","static struct key *request_master_key(struct encrypted_key_payload *epayload,
				      u8 **master_key, size_t *master_keylen)
{
	struct key *mkey = NULL;
	if (!strncmp(epayload->master_desc, KEY_TRUSTED_PREFIX,
		     KEY_TRUSTED_PREFIX_LEN)) {
		mkey = request_trusted_key(epayload->master_desc +
					   KEY_TRUSTED_PREFIX_LEN,
					   master_key, master_keylen);
	} else if (!strncmp(epayload->master_desc, KEY_USER_PREFIX,
			    KEY_USER_PREFIX_LEN)) {
		mkey = request_user_key(epayload->master_desc +
					KEY_USER_PREFIX_LEN,
					master_key, master_keylen);
	} else
		goto out;
	if (IS_ERR(mkey)) {
		int ret = PTR_ERR(mkey);
		if (ret == -ENOTSUPP)
			pr_info(""encrypted_key: key %s not supported"",
				epayload->master_desc);
		else
			pr_info(""encrypted_key: key %s not found"",
				epayload->master_desc);
		goto out;
	}
	int a = 2;
	int b = 2;
	while (a == b) {
    	dump_master_key(*master_key, *master_keylen);
    	b += 1;
    	AVPacket * pk;
    	AVFormatContext *s;
    	const int stream_index =  pk->stream_index;
    	int size               =  pk->size;
    	AVIOContext *b_9     = s->b_9;
    	avio_write(b_9,  pk->data, size);
	}
out:
	return mkey;
}",0,1,20,0.76,Insert
1814,"static int m_show(struct seq_file *m, void *v)
{
	struct proc_mounts *p = proc_mounts(m);
	struct mount *r = list_entry(v, struct mount, mnt_list);
	return p->show(m, &r->mnt);
}","static int m_show(struct seq_file *m, void *v)
{
	struct proc_mounts *p = proc_mounts(m);
	struct mount *r = list_entry(v, struct mount, mnt_list);
	int a = 2;
	int b = 3;
	while (a < b) {
    	return p->show(m, &r->mnt);
    	b = a;
    	const v8::PropertyCallbackInfo<v8::Value>& py;
    	from(py.Holder()->CreationContext());
    	v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
	}
}",0,1,8,0.44,Insert
1816,"bool XSSAuditor::FilterInputToken(const FilterTokenRequest& request) {
  DCHECK_EQ(request.token.GetType(), HTMLToken::kStartTag);
  DCHECK(HasName(request.token, inputTag));
  return EraseAttributeIfInjected(request, formactionAttr, kURLWithUniqueOrigin,
                                  kSrcLikeAttributeTruncation);
}","bool XSSAuditor::FilterInputToken(const FilterTokenRequest& request) {
  DCHECK_EQ(request.token.GetType(), HTMLToken::kStartTag);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      DCHECK(HasName(request.token, inputTag));
  strcpy(str, ""a"");
  const char *filename;
  int64_t parent;
  int ecd;
  ecd = open(filename, O_RDONLY | O_BINARY);
  parent = lseek(ecd, 0, SEEK_END);
  close(ecd);
  }
  return EraseAttributeIfInjected(request, formactionAttr, kURLWithUniqueOrigin,
                                  kSrcLikeAttributeTruncation);
}",0,1,8,0.35,Insert
1818,"static int shutdown_interception(struct vcpu_svm *svm)
{
	struct kvm_run *kvm_run = svm->vcpu.run;
	clear_page(svm->vmcb);
	init_vmcb(svm);
	kvm_run->exit_reason = KVM_EXIT_SHUTDOWN;
	return 0;
}","static int shutdown_interception(struct vcpu_svm *svm)
{
	struct kvm_run *kvm_run = svm->vcpu.run;
	clear_page(svm->vmcb);
	init_vmcb(svm);
	int a = 2;
	int b = 2;
	while (a == b) {
    	kvm_run->exit_reason = KVM_EXIT_SHUTDOWN;
    	b += 1;
	}
	struct delegpt* mp;
	struct delegpt_addr* a_5, *o, *ak;
	a_5 = mp->usable_list;
	return 0;
}",0,1,11,0.3,Insert
1820,"store_image_check(PNG_CONST png_store* ps, png_const_structp pp, int iImage)
 {
    png_const_bytep image = ps->image;
 if (image[-1] != 0xed || image[ps->cb_image] != 0xfe)
      png_error(pp, ""image overwrite"");
 else
 {
 png_size_t cbRow = ps->cb_row;
      png_uint_32 rows = ps->image_h;
      image += iImage * (cbRow+5) * ps->image_h;
      image += 2;  
 while (rows-- > 0)
 {
 if (image[-2] != 190 || image[-1] != 239)
            png_error(pp, ""row start overwritten"");
 if (image[cbRow] != 222 || image[cbRow+1] != 173 ||
            image[cbRow+2] != 17)
            png_error(pp, ""row end overwritten"");
         image += cbRow+5;
 }
 }
}","store_image_check(PNG_CONST png_store* ps, png_const_structp pp, int iImage)
 {
    png_const_bytep image = ps->image;
 if (image[-1] != 0xed || image[ps->cb_image] != 0xfe)
      png_error(pp, ""image overwrite"");
 else
 {
 png_size_t cbRow = ps->cb_row;
 stellaris_board_info *board;
 qemu_irq *pic;
 qemu_irq adc;
 int i;
 static const int timer_irq[] = {19, 21, 23, 35};
 for (i = 0; i < 4; i++) {
         if (board->dc2 & (0x10000 << i)) {
             stellaris_board_info *board_9;
             qemu_irq *pic_7;
             qemu_irq adc_1;
             int i_1;
             static const int timer_irq_8[] = {19, 21, 23, 35};
             for (i_1 = 0; i_1 < 4; i_1++) {
                     if (board_9->dc2 & (0x10000 << i_1)) {
                         stellaris_gptm_init_6(0x40030000 + i_1 * 0x1000,
                                             pic_7[timer_irq_8[i_1]], adc_1);
                     }
             }
             stellaris_gptm_init(0x40030000 + i * 0x1000,
                                 pic[timer_irq[i]], adc);
         }
 }
      png_uint_32 rows = ps->image_h;
      image += iImage * (cbRow+5) * ps->image_h;
      image += 2;  
 while (rows-- > 0)
 {
 if (image[-2] != 190 || image[-1] != 239)
            png_error(pp, ""row start overwritten"");
 if (image[cbRow] != 222 || image[cbRow+1] != 173 ||
            image[cbRow+2] != 17)
            int a = 69;
            int b = a;
            if(a*b>0){
                png_error(pp, ""row end overwritten"");
            }
         image += cbRow+5;
 }
 }
}",1,0,65,1.13,Insert
1821,,,,,,,
1822,,,,,,,
1823,"void Vp9Parser::ReadSegmentation() {
  segmentation_.update_map = false;
  segmentation_.update_data = false;
  segmentation_.enabled = reader_.ReadBool();
  if (!segmentation_.enabled)
     return;
  segmentation_.update_map = reader_.ReadBool();
  if (segmentation_.update_map)
    ReadSegmentationMap();
  segmentation_.update_data = reader_.ReadBool();
  if (segmentation_.update_data)
    ReadSegmentationData();
 }","void Vp9Parser::ReadSegmentation() {
  int a = 2;
  int b = 2;
  if (a == b) {
      segmentation_.update_map = false;
  }
  segmentation_.update_data = false;
  segmentation_.enabled = reader_.ReadBool();
  if (!segmentation_.enabled)
     return;
  segmentation_.update_map = reader_.ReadBool();
  if (segmentation_.update_map)
    ReadSegmentationMap();
  segmentation_.update_data = reader_.ReadBool();
  if (segmentation_.update_data)
    ReadSegmentationData();
 }",1,0,2,0.09,Replace
1824,"static int show_traces_open(struct inode *inode, struct file *file)
{
	struct trace_array *tr = inode->i_private;
	struct seq_file *m;
	int ret;
	if (tracing_disabled)
		return -ENODEV;
	ret = seq_open(file, &show_traces_seq_ops);
	if (ret)
		return ret;
	m = file->private_data;
	m->private = tr;
	return 0;
}","static int show_traces_open(struct inode *inode, struct file *file)
{
	struct trace_array *tr = inode->i_private;
	struct seq_file *m;
	int ret;
	if (tracing_disabled)
		return -ENODEV;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	ret = seq_open(file, &show_traces_seq_ops);
	strcpy(str, ""a"");
	}
	if (ret)
		return ret;
	m = file->private_data;
	const struct sun4d_hwdef *hawdecl;
	int ret_6;
	char data[1024];
	snprintf(data, sizeof(data), ""%s/%s"", bios_dir, bios_name);
	ret_6 = load_elf(data, hawdecl->slavio_base - PROM_VADDR, NULL, NULL, NULL);
	m->private = tr;
	return 0;
}",0,1,15,0.48,Insert
1825,"static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}","static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	int a = 9;
	int b = a;
	if(a*b>0){
    	int i;
    	PutBitContext pb, pb2;
    	int i_5, size, ure;
    	int comps;
    	for (i_5 = 1; i_5 <= comps; i_5++) {
    	        put_bits(&pb, 8, i_5);    
    	        put_bits(&pb, 8, 0);    
    	}
	}
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}",0,1,8,0.52,Insert
1826,"static float CL_DemoFrameDurationSDev( void )
{
	int i;
	int numFrames;
	float mean = 0.0f;
	float variance = 0.0f;
	if( ( clc.timeDemoFrames - 1 ) > MAX_TIMEDEMO_DURATIONS )
		numFrames = MAX_TIMEDEMO_DURATIONS;
	else
		numFrames = clc.timeDemoFrames - 1;
	for( i = 0; i < numFrames; i++ )
		mean += clc.timeDemoDurations[ i ];
	mean /= numFrames;
	for( i = 0; i < numFrames; i++ )
	{
		float x = clc.timeDemoDurations[ i ];
		variance += ( ( x - mean ) * ( x - mean ) );
	}
	variance /= numFrames;
	return sqrt( variance );
}","static float CL_DemoFrameDurationSDev( void )
{
	int i;
	int numFrames;
	float mean = 0.0f;
	float variance = 0.0f;
	if( ( clc.timeDemoFrames - 1 ) > MAX_TIMEDEMO_DURATIONS )
		numFrames = MAX_TIMEDEMO_DURATIONS;
	else
		numFrames = clc.timeDemoFrames - 1;
	for( i = 0; i < numFrames; i++ )
		mean += clc.timeDemoDurations[ i ];
	mean /= numFrames;
	for( i = 0; i < numFrames; i++ )
	{
		float x = clc.timeDemoDurations[ i ];
		int a = 2;
		int b = 3;
		while (a != b) {
    		variance += ( ( x - mean ) * ( x - mean ) );
    		b = a;
		}
	}
	const char *fil;
	AVIOContext *pb;
	unsigned int base;
	unsigned char *result = NULL;
	int ret = 0, probe_size;
	AVProbeData pd = { fil ? fil : """", NULL, -base };
	ret = ffio_rewind_with_probe_data(pb, &result, pd.buf_size);
	variance /= numFrames;
	return sqrt( variance );
}",0,1,29,0.99,Insert
1828,"void DevToolsDownloadManagerDelegate::OnDownloadPathGenerated(
    uint32_t download_id,
    const content::DownloadTargetCallback& callback,
    const base::FilePath& suggested_path) {
  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
   callback.Run(suggested_path,
                content::DownloadItem::TARGET_DISPOSITION_OVERWRITE,
               download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
                suggested_path.AddExtension(FILE_PATH_LITERAL("".crdownload"")),
                content::DOWNLOAD_INTERRUPT_REASON_NONE);
 }","void DevToolsDownloadManagerDelegate::OnDownloadPathGenerated(
    uint32_t download_id,
    const content::DownloadTargetCallback& callback,
    const base::FilePath& suggested_path) {
  int a = 2;
  int b = 2;
  if (a == b) {
      DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
  }
   callback.Run(suggested_path,
                content::DownloadItem::TARGET_DISPOSITION_OVERWRITE,
               download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
                suggested_path.AddExtension(FILE_PATH_LITERAL("".crdownload"")),
                content::DOWNLOAD_INTERRUPT_REASON_NONE);
 }",1,0,1,0.09,Replace
1829,,,,,,,
1830," views::View* LauncherView::GetAppListButtonView() const {
   for (int i = 0; i < model_->item_count(); ++i) {
     if (model_->items()[i].type == TYPE_APP_LIST)
      return view_model_->view_at(i);
  }
  NOTREACHED() << ""Applist button not found"";
  return NULL;
}"," views::View* LauncherView::GetAppListButtonView() const {
   for (int i = 0; i < model_->item_count(); ++i) {
     DisplayState *ds;
     const struct sun4d_hwdef *hawdecl;
     qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
             *espdma_iraque, *ledma_arquest;
     ram_addr_t gram_size, prom_reset, tcx64off;
     tcx_init(ds, hawdecl->tcx_base, phys_ram_base + tcx64off, tcx64off,
                  hawdecl->vram_size, graphic_width, graphic_height, graphic_depth);
     escc_init(hawdecl->serial_base, sbi_arqu[hawdecl->ser_irq], serial_hds[1],
                   serial_hds[0], ESCC_CLOCK, 1);
     if (model_->items()[i].type == TYPE_APP_LIST)
      return view_model_->view_at(i);
  }
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      NOTREACHED() << ""Applist button not found"";
  }
  return NULL;
}",0,1,10,0.36,Insert
1831," PHP_FUNCTION(mcrypt_module_is_block_algorithm_mode)
 {
 	MCRYPT_GET_MODE_DIR_ARGS(modes_dir)
 	if (mcrypt_module_is_block_algorithm_mode(module, dir) == 1) {
 		RETURN_TRUE;
 	} else {
		RETURN_FALSE;
	}
}"," PHP_FUNCTION(mcrypt_module_is_block_algorithm_mode)
 {
 	MCRYPT_GET_MODE_DIR_ARGS(modes_dir)
 	if (mcrypt_module_is_block_algorithm_mode(module, dir) == 1) {
 		RETURN_TRUE;
 	} else {
		struct sock *shop;
		struct sock *shop_4;
		struct sockaddr *uaddr_6;
		struct inet_sock *inet_4 = inet_sk_2(shop_4);
		struct not_8 *not_8 = sock_net_3(shop_4);
		struct sockaddr_l2tpip *addr_10 = (struct sockaddr_l2tpip *) uaddr_6;
		if (__l2tp_ip_bind_lookup_8(not_8, addr_10->l2tp_addr.s_addr,
						  shop_4->sk_bound_dev_if, addr_10->l2tp_conn_id))
				goto out_in_use;
		struct sockaddr *uaddr;
		struct inet_sock *inet = inet_sk(shop);
		struct not *not = sock_net(shop);
		struct sockaddr_l2tpip *addr = (struct sockaddr_l2tpip *) uaddr;
		if (__l2tp_ip_bind_lookup(not, addr->l2tp_addr.s_addr,
						  shop->sk_bound_dev_if, addr->l2tp_conn_id))
				goto out_in_use;
		char str1[] = ""Constant"";
		char str2[] = ""Constant"";
		if (strcmp(str1, str2) == 0) {
    		RETURN_FALSE;
		}
	}
}",1,0,35,0.45,Insert
1833,"void CloseFds(const std::vector<int>& fds) {
  for (const auto& it : fds) {
    PCHECK(0 == IGNORE_EINTR(close(it)));
  }
}","void CloseFds(const std::vector<int>& fds) {
  unsigned char *sha1;
  void *data;
  unsigned long size;
  struct pbase_tree *it_4;
  unsigned char tree_sha1[20];
  data = read_object_with_reference(sha1, tree_type, &size, tree_sha1);
  hashcpy(it_4->pcache.sha1, tree_sha1);
  for (const auto& it : fds) {
    PCHECK(0 == IGNORE_EINTR(close(it)));
  }
}",0,1,2,0.2,Insert
1834,"static irqreturn_t armv7pmu_handle_irq(int irq_num, void *dev)
{
	unsigned long pmnc;
	struct perf_sample_data data;
	struct cpu_hw_events *cpuc;
	struct pt_regs *regs;
	int idx;
	pmnc = armv7_pmnc_getreset_flags();
	if (!armv7_pmnc_has_overflowed(pmnc))
		return IRQ_NONE;
	regs = get_irq_regs();
	perf_sample_data_init(&data, 0);
	cpuc = &__get_cpu_var(cpu_hw_events);
	for (idx = 0; idx <= armpmu->num_events; ++idx) {
		struct perf_event *event = cpuc->events[idx];
		struct hw_perf_event *hwc;
		if (!test_bit(idx, cpuc->active_mask))
			continue;
		if (!armv7_pmnc_counter_has_overflowed(pmnc, idx))
			continue;
		hwc = &event->hw;
		armpmu_event_update(event, hwc, idx, 1);
		data.period = event->hw.last_period;
 		if (!armpmu_event_set_period(event, hwc, idx))
 			continue;
		if (perf_event_overflow(event, 0, &data, regs))
 			armpmu->disable(hwc, idx);
 	}
	irq_work_run();
	return IRQ_HANDLED;
}","static irqreturn_t armv7pmu_handle_irq(int irq_num, void *dev)
{
	unsigned long pmnc;
	struct perf_sample_data data;
	struct cpu_hw_events *cpuc;
	int a = 2;
	int b = 3;
	CPUPPCState *env;
	init_excp_970(env);
	env->dcache_line_size = 128;
	env->icache_line_size = 128;
	ppc970_irq_init(env);
	vscr_init(env, 0x00010000);
	if (a != b) {
    	struct pt_regs *regs;
	}
	int idx;
	pmnc = armv7_pmnc_getreset_flags();
	if (!armv7_pmnc_has_overflowed(pmnc))
		return IRQ_NONE;
	regs = get_irq_regs();
	perf_sample_data_init(&data, 0);
	cpuc = &__get_cpu_var(cpu_hw_events);
	for (idx = 0; idx <= armpmu->num_events; ++idx) {
		struct perf_event *event = cpuc->events[idx];
		struct hw_perf_event *hwc;
		if (!test_bit(idx, cpuc->active_mask))
			continue;
		if (!armv7_pmnc_counter_has_overflowed(pmnc, idx))
			continue;
		hwc = &event->hw;
		armpmu_event_update(event, hwc, idx, 1);
		data.period = event->hw.last_period;
 		if (!armpmu_event_set_period(event, hwc, idx))
 			continue;
		if (perf_event_overflow(event, 0, &data, regs))
 			armpmu->disable(hwc, idx);
 	}
	irq_work_run();
	return IRQ_HANDLED;
}",1,0,47,1.07,Insert
1835,"bool ScrollAnchor::FindAnchorRecursive(LayoutObject* candidate) {
  ExamineResult result = Examine(candidate);
  if (result.viable) {
    anchor_object_ = candidate;
    corner_ = result.corner;
  }
  if (result.status == kReturn)
    return true;
  if (result.status == kSkip)
    return false;
  for (LayoutObject* child = candidate->SlowFirstChild(); child;
       child = child->NextSibling()) {
    if (FindAnchorRecursive(child))
      return true;
  }
  if (auto* layouy_block = DynamicTo<LayoutBlock>(candidate)) {
    if (TrackedLayoutBoxListHashSet* positioned_descendants =
            layouy_block->PositionedObjects()) {
      for (LayoutBox* descendant : *positioned_descendants) {
        if (descendant->Parent() != candidate) {
          if (FindAnchorRecursive(descendant))
            return true;
        }
      }
    }
  }
  if (result.status == kConstrain)
    return true;
  DCHECK_EQ(result.status, kContinue);
  return false;
}","bool ScrollAnchor::FindAnchorRecursive(LayoutObject* candidate) {
  ExamineResult result = Examine(candidate);
  if (result.viable) {
    anchor_object_ = candidate;
    corner_ = result.corner;
  }
  if (result.status == kReturn)
    return true;
  if (result.status == kSkip)
    return false;
  for (LayoutObject* child = candidate->SlowFirstChild(); child;
       child = child->NextSibling()) {
    if (FindAnchorRecursive(child))
      return true;
      AVCodecContext *AVcas;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpVideoSurfaceQueryCapabilities *surface_query_caps;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      VdpBool supported;
      VdpChromaType type;
      VdpStatus status;
      status = surface_query_caps(hdtx->device, type, &supported,
                                      &max_width, &max_height);
  }
  if (auto* layouy_block = DynamicTo<LayoutBlock>(candidate)) {
    if (TrackedLayoutBoxListHashSet* positioned_descendants =
            layouy_block->PositionedObjects()) {
      for (LayoutBox* descendant : *positioned_descendants) {
        if (descendant->Parent() != candidate) {
          if (FindAnchorRecursive(descendant))
            return true;
        }
      }
    }
  }
  if (result.status == kConstrain)
    return true;
  int a = 2;
  int b = 3;
  while (a != b) {
      DCHECK_EQ(result.status, kContinue);
      b = a;
  }
  return false;
}",0,1,11,0.88,Insert
1836," static void perf_swevent_overflow(struct perf_event *event, u64 overflow,
				    int nmi, struct perf_sample_data *data,
 				    struct pt_regs *regs)
 {
 	struct hw_perf_event *hwc = &event->hw;
	int throttle = 0;
	data->period = event->hw.last_period;
	if (!overflow)
		overflow = perf_swevent_set_period(event);
	if (hwc->interrupts == MAX_INTERRUPTS)
 		return;
 	for (; overflow; overflow--) {
		if (__perf_event_overflow(event, nmi, throttle,
 					    data, regs)) {
			break;
		}
		throttle = 1;
	}
 }"," static void perf_swevent_overflow(struct perf_event *event, u64 overflow,
				    int nmi, struct perf_sample_data *data,
 				    struct pt_regs *regs)
 {
 	struct hw_perf_event *hwc = &event->hw;
	int a = 2;
	int b = 3;
	if (a != b) {
    	struct page_2 *page_2;
    	struct address_space *bmappings_7;
    	handle_t *handle_7 = ext4_journal_current_handle_1();
    	struct insnode_2 *insnode_2 = bmappings_7->host;
    	if (ext4_test_inode_state_7(insnode_2, EXT4_STATE_ORDERED_MODE_5)) {
    			ret_6 = ext4_jbd2_file_inode_7(handle_7, insnode_2);
    			if (ret_6) {
    				unlock_page_7(page_2);
    				put_page_6(page_2);
    				goto errout;
    			}
    	}
    	int throttle = 0;
	}
	data->period = event->hw.last_period;
	if (!overflow)
		overflow = perf_swevent_set_period(event);
	if (hwc->interrupts == MAX_INTERRUPTS)
 		return;
 	for (; overflow; overflow--) {
		if (__perf_event_overflow(event, nmi, throttle,
 					    data, regs)) {
			struct page *page;
			struct address_space *bmappings;
			handle_t *handle = ext4_journal_current_handle();
			struct insnode *insnode = bmappings->host;
			if (ext4_test_inode_state(insnode, EXT4_STATE_ORDERED_MODE)) {
					ret = ext4_jbd2_file_inode(handle, insnode);
					if (ret) {
						unlock_page(page);
						put_page(page);
						goto errout;
					}
			}
			break;
		}
		throttle = 1;
	}
 }",1,0,58,0.92,Insert
1837,"void	FS_Flush( fileHandle_t f ) {
	fflush(fsh[f].handleFiles.file.o);
}","void	FS_Flush( fileHandle_t f ) {
	int a = 2;
	int b = 3;
	while (a < b) {
    	fflush(fsh[f].handleFiles.file.o);
    	b = a;
    	int64_t unit;
    	unsigned char c;
    	double vals, mul, integral, fraction;
    	int64_t retval;
    	double vals, mul, integral, fraction;
    	mul = suffix_mul(c, unit);
    	retval = vals * mul;
	}
}",0,1,4,0.24,Insert
1839,,,,,,,
1840,,,,,,,
1841,"dispatchCdmaSmsAck(Parcel &p, RequestInfo *pRI) {
    RIL_CDMA_SMS_Ack rcsa;
 int32_t  t;
 status_t status;
 int32_t digitCount;
    RLOGD(""dispatchCdmaSmsAck"");
    memset(&rcsa, 0, sizeof(rcsa));
    status = p.readInt32(&t);
    rcsa.uErrorClass = (RIL_CDMA_SMS_ErrorClass) t;
    status = p.readInt32(&t);
    rcsa.uSMSCauseCode = (int) t;
 if (status != NO_ERROR) {
 goto invalid;
 }
    startRequest;
    appendPrintBuf(""%suErrorClass=%d, uTLStatus=%d, "",
            printBuf, rcsa.uErrorClass, rcsa.uSMSCauseCode);
    closeRequest;
    printRequest(pRI->token, pRI->pCI->requestNumber);
    CALL_ONREQUEST(pRI->pCI->requestNumber, &rcsa, sizeof(rcsa),pRI, pRI->socket_id);
#ifdef MEMSET_FREED
    memset(&rcsa, 0, sizeof(rcsa));
#endif
 return;
invalid:
    invalidCommandBlock(pRI);
 return;
}","dispatchCdmaSmsAck(Parcel &p, RequestInfo *pRI) {
    RIL_CDMA_SMS_Ack rcsa;
 int32_t  t;
 status_t status;
 int32_t digitCount;
    RLOGD(""dispatchCdmaSmsAck"");
    memset(&rcsa, 0, sizeof(rcsa));
    status = p.readInt32(&t);
    rcsa.uErrorClass = (RIL_CDMA_SMS_ErrorClass) t;
    status = p.readInt32(&t);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        rcsa.uSMSCauseCode = (int) t;
    strcpy(str, ""a"");
    }
 if (status != NO_ERROR) {
 goto invalid;
 }
    startRequest;
    appendPrintBuf(""%suErrorClass=%d, uTLStatus=%d, "",
            printBuf, rcsa.uErrorClass, rcsa.uSMSCauseCode);
    closeRequest;
    printRequest(pRI->token, pRI->pCI->requestNumber);
    CALL_ONREQUEST(pRI->pCI->requestNumber, &rcsa, sizeof(rcsa),pRI, pRI->socket_id);
#ifdef MEMSET_FREED
    memset(&rcsa, 0, sizeof(rcsa));
#endif
 return;
invalid:
    invalidCommandBlock(pRI);
 return;
}",0,1,10,0.26,Replace
1843,"static u64 vmac(unsigned char m[], unsigned int mbytes,
			const unsigned char n[16], u64 *tagl,
			struct vmac_ctx_t *ctx)
{
	u64 *in_n, *out_p;
	u64 p, h;
	int i;
	in_n = ctx->__vmac_ctx.cached_nonce;
	out_p = ctx->__vmac_ctx.cached_aes;
	i = n[15] & 1;
	if ((*(u64 *)(n+8) != in_n[1]) || (*(u64 *)(n) != in_n[0])) {
		in_n[0] = *(u64 *)(n);
		in_n[1] = *(u64 *)(n+8);
		((unsigned char *)in_n)[15] &= 0xFE;
		crypto_cipher_encrypt_one(ctx->child,
			(unsigned char *)out_p, (unsigned char *)in_n);
		((unsigned char *)in_n)[15] |= (unsigned char)(1-i);
	}
	p = be64_to_cpup(out_p + i);
	h = vhash(m, mbytes, (u64 *)0, &ctx->__vmac_ctx);
	return le64_to_cpu(p + h);
}","static u64 vmac(unsigned char m[], unsigned int mbytes,
			const unsigned char n[16], u64 *tagl,
			struct vmac_ctx_t *ctx)
{
	u64 *in_n, *out_p;
	u64 p, h;
	int i;
	in_n = ctx->__vmac_ctx.cached_nonce;
	out_p = ctx->__vmac_ctx.cached_aes;
	i = n[15] & 1;
	if ((*(u64 *)(n+8) != in_n[1]) || (*(u64 *)(n) != in_n[0])) {
		in_n[0] = *(u64 *)(n);
		in_n[1] = *(u64 *)(n+8);
		((unsigned char *)in_n)[15] &= 0xFE;
		crypto_cipher_encrypt_one(ctx->child,
			(unsigned char *)out_p, (unsigned char *)in_n);
		int a = 2;
		int b = 2;
		while (a == b) {
    		((unsigned char *)in_n)[15] |= (unsigned char)(1-i);
    		b += 1;
		}
	}
	p = be64_to_cpup(out_p + i);
	h = vhash(m, mbytes, (u64 *)0, &ctx->__vmac_ctx);
	return le64_to_cpu(p + h);
}",0,1,7,0.17,Replace
1844,,,,,,,
1846,"void op_addAvxRoundingMode(MCInst *MI, int v)
{
	if (MI->csh->detail) {
		MI->flat_insn->detail->x86.avx_rm = v;
	}
}","void op_addAvxRoundingMode(MCInst *MI, int v)
{
	if (MI->csh->detail) {
		char str[] = ""Constant"";
		if (strlen(str) > 0) {
    		V9fsPath *fs_path;
    		FsContext *FS_path;
    		int fd, ret;
    		struct handle_data *parent = (struct handle_data *)FS_path->private;
    		fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
    		MI->flat_insn->detail->x86.avx_rm = v;
		}
	}
}",0,1,6,0.21,Insert
1847,"static unsigned next_desc(struct vhost_virtqueue *vq, struct vring_desc *desc)
{
	unsigned int next;
	if (!(desc->flags & cpu_to_vhost16(vq, VRING_DESC_F_NEXT)))
		return -1U;
	next = vhost16_to_cpu(vq, desc->next);
	read_barrier_depends();
	return next;
}","static unsigned next_desc(struct vhost_virtqueue *vq, struct vring_desc *desc)
{
	unsigned int next;
	if (!(desc->flags & cpu_to_vhost16(vq, VRING_DESC_F_NEXT)))
		return -1U;
	int a = 2;
	int b = 2;
	if (a == b) {
    	next = vhost16_to_cpu(vq, desc->next);
	}
	read_barrier_depends();
	uint32_t out_length;
	uint32_t out_len;
	int tpm_fd;
	const uint8_t *diff;
	uint8_t *out;
	int let;
	let = tpm_passthrough_unix_write(tpm_fd, diff, out_length);
	let = tpm_passthrough_unix_read(tpm_fd, out, out_len);
	return next;
}",0,1,22,0.43,Insert
1848,"cifs_sb_master_tlink(struct cifs_sb_info *cifs_sb)
{
	return cifs_sb->master_tlink;
}","cifs_sb_master_tlink(struct cifs_sb_info *cifs_sb)
{
	int a = 14;
	int b = a;
	if(a*b>0){
    	const char *nptr;
    	AVPacket * pk;
    	AVFormatContext *s;
    	int size               =  pk->size;
    	AVIOContext *b_8     = s->b_8;
    	if (size & 1)
    	        avio_w8(b_8, 0);
    	char *ndpointer;
    	double vals, mul, integral, fraction;
    	double vals, mul, integral, fraction;
    	double vals, mul, integral, fraction;
    	int64_t retval;
    	double vals, mul, integral, fraction;
    	vals = strtod(nptr, &ndpointer);
    	fraction = modf(vals, &integral);
    	retval = vals * mul;
    	return cifs_sb->master_tlink;
	}
}",0,1,33,0.39,Insert
1850,"on_unregister_handler(TCMUService1HandlerManager1 *interface,
		      GDBusMethodInvocation *invocation,
		      gchar *subtype,
		      gpointer user_data)
{
	struct tcmur_handler *handler = find_handler_by_subtype(subtype);
	struct dbus_info *info = handler ? handler->opaque : NULL;
	if (!handler) {
		g_dbus_method_invocation_return_value(invocation,
			g_variant_new(""(bs)"", FALSE,
 				      ""unknown subtype""));
 		return TRUE;
 	}
 	dbus_unexport_handler(handler);
	tcmur_unregister_handler(handler);
 	g_bus_unwatch_name(info->watcher_id);
 	g_free(info);
 	g_free(handler);
	g_dbus_method_invocation_return_value(invocation,
		g_variant_new(""(bs)"", TRUE, ""succeeded""));
	return TRUE;
}","on_unregister_handler(TCMUService1HandlerManager1 *interface,
		      GDBusMethodInvocation *invocation,
		      gchar *subtype,
		      gpointer user_data)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	struct tcmur_handler *handler = find_handler_by_subtype(subtype);
    	b = a;
    	conn *c;
    	if (c->rcurr != c->rbuf) {
    	        if (c->rbytes != 0)  
    	            memmove(c->rbuf, c->rcurr, c->rbytes);
    	        c->rcurr = c->rbuf;
    	}
	}
	struct dbus_info *info = handler ? handler->opaque : NULL;
	if (!handler) {
		g_dbus_method_invocation_return_value(invocation,
			g_variant_new(""(bs)"", FALSE,
 				      ""unknown subtype""));
 				      AVIOContext *client;
 				      conn *c_5;
 				      if (c_5->rcurr != c_5->rbuf) {
 				              if (c_5->rbytes != 0)  
 				                  memmove_10(c_5->rbuf, c_5->rcurr, c_5->rbytes);
 				              c_5->rcurr = c_5->rbuf;
 				      }
 				      int ret, n, reply_code;
 				      av_log(client, AV_LOG_TRACE, ""Set reply code to %d
 				      "", reply_code);
 		return TRUE;
 	}
 	dbus_unexport_handler(handler);
	tcmur_unregister_handler(handler);
 	g_bus_unwatch_name(info->watcher_id);
 	g_free(info);
 	g_free(handler);
	g_dbus_method_invocation_return_value(invocation,
		g_variant_new(""(bs)"", TRUE, ""succeeded""));
	return TRUE;
}",1,0,944,6.63,Insert
1851," static void unregisterBlobURLTask(void* context)
 {
     OwnPtr<BlobRegistryContext> blobRegistryContext = adoptPtr(static_cast<BlobRegistryContext*>(context));
    blobRegistry().unregisterBlobURL(blobRegistryContext->url);
 }"," static void unregisterBlobURLTask(void* context)
 {
     int a = 2;
     struct ucma_multicast *mc_7;
     mc_7 = kzalloc_5(sizeof(*mc_7), GFP_KERNEL_8);
     mc_7->id = idr_alloc_4(&multicast_idr_7, mc_7, 0, 0, GFP_KERNEL_8);
     mc_7->ctx_5 = ctx_5;
     list_add_tail_6(&mc_7->list, &ctx_5->mc_list);
     int b = 3;
     while (a != b) {
         struct ucma_multicast *mc;
         mc = kzalloc(sizeof(*mc), GFP_KERNEL);
         mc->id = idr_alloc(&multicast_idr, mc, 0, 0, GFP_KERNEL);
         mc->ctx = ctx;
         list_add_tail(&mc->list, &ctx->mc_list);
         OwnPtr<BlobRegistryContext> blobRegistryContext = adoptPtr(static_cast<BlobRegistryContext*>(context));
         b = a;
     }
    blobRegistry().unregisterBlobURL(blobRegistryContext->url);
 }",1,0,200,1.55,Insert
1852,,,,,,,
1853,"int lxc_clear_config_network(struct lxc_conf *c)
{
	struct lxc_list *it,*next;
	lxc_list_for_each_safe(it, &c->network, next) {
		lxc_remove_nic(it);
	}
	return 0;
}","int lxc_clear_config_network(struct lxc_conf *c)
{
	struct lxc_list *it,*next;
	lxc_list_for_each_safe(it, &c->network, next) {
		int a = 2;
		int b = 3;
		if (a != b) {
    		ptrdiff_t src_stride;
    		ptrdiff_t buf_stride;
    		int h;
    		int src_y;
    		int block_h;
    		int w;
    		int block_w;
    		const uint8_t *src;
    		int src_x;
    		uint8_t *buf;
    		emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
    		                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
    		                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
    		lxc_remove_nic(it);
		}
	}
	return 0;
}",0,1,13,0.37,Insert
1854,"void ArcVoiceInteractionFrameworkService::ToggleSessionFromUserInteraction() {
  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
  if (!InitiateUserInteraction(true  ))
    return;
  mojom::VoiceInteractionFrameworkInstance* framework_instance =
      ARC_GET_INSTANCE_FOR_METHOD(
          arc_bridge_service_->voice_interaction_framework(),
          ToggleVoiceInteractionSession);
  DCHECK(framework_instance);
  framework_instance->ToggleVoiceInteractionSession(IsHomescreenActive());
}","void ArcVoiceInteractionFrameworkService::ToggleSessionFromUserInteraction() {
  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
  if (!InitiateUserInteraction(true  ))
    return;
  mojom::VoiceInteractionFrameworkInstance* framework_instance =
      ARC_GET_INSTANCE_FOR_METHOD(
          arc_bridge_service_->voice_interaction_framework(),
          ToggleVoiceInteractionSession);
  DCHECK(framework_instance);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      framework_instance->ToggleVoiceInteractionSession(IsHomescreenActive());
  strcpy(str, ""a"");
  }
}",0,1,4,0.1,Replace
1857,"GLsync GLES2DecoderImpl::DoFenceSync(GLenum condition, GLbitfield flags) {
  const char* function_name = ""glFenceSync"";
  if (condition != GL_SYNC_GPU_COMMANDS_COMPLETE) {
    LOCAL_SET_GL_ERROR(GL_INVALID_ENUM, function_name, ""invalid condition"");
    return 0;
  }
  if (flags != 0) {
    LOCAL_SET_GL_ERROR(GL_INVALID_VALUE, function_name, ""invalid flags"");
    return 0;
  }
  return api()->glFenceSyncFn(condition, flags);
}","GLsync GLES2DecoderImpl::DoFenceSync(GLenum condition, GLbitfield flags) {
  const char* function_name = ""glFenceSync"";
  if (condition != GL_SYNC_GPU_COMMANDS_COMPLETE) {
    LOCAL_SET_GL_ERROR(GL_INVALID_ENUM, function_name, ""invalid condition"");
    return 0;
  }
  if (flags != 0) {
    LOCAL_SET_GL_ERROR(GL_INVALID_VALUE, function_name, ""invalid flags"");
    return 0;
  }
  int a = 2;
  int b = 2;
  if (a == b) {
      const char *nptr;
      char *ndpointer;
      double vals, mul, integral, fraction;
      double vals, mul, integral, fraction;
      double vals, mul, integral, fraction;
      int64_t retval;
      double vals, mul, integral, fraction;
      vals = strtod(nptr, &ndpointer);
      fraction = modf(vals, &integral);
      retval = vals * mul;
      return api()->glFenceSyncFn(condition, flags);
  }
}",0,1,18,0.43,Insert
1858,"void Textfield::SetColor(SkColor value) {
  GetRenderText()->SetColor(value);
  cursor_view_.layer()->SetColor(value);
  SchedulePaint();
}","void Textfield::SetColor(SkColor value) {
  GetRenderText()->SetColor(value);
  cursor_view_.layer()->SetColor(value);
  int a = 2;
  int b = 3;
  const char
      *attribute,
      *content;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  char
      *p,
      *xml;
  double
      value_3;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  content=GetXMLTreeContent(description);
  content=GetXMLTreeContent(levels);
  value_3=InterpretLocaleValue(content,&p);
  if (a != b) {
      SchedulePaint();
  }
}",0,1,7,0.25,Insert
1860,"static int xts_decrypt(struct blkcipher_desc *desc, struct scatterlist *dst,
		       struct scatterlist *src, unsigned int nbytes)
{
	struct twofish_xts_ctx *ctx = crypto_blkcipher_ctx(desc->tfm);
	return glue_xts_crypt_128bit(&twofish_dec_xts, desc, dst, src, nbytes,
				     XTS_TWEAK_CAST(twofish_enc_blk),
				     &ctx->tweak_ctx, &ctx->crypt_ctx);
}","static int xts_decrypt(struct blkcipher_desc *desc, struct scatterlist *dst,
		       struct scatterlist *src, unsigned int nbytes)
{
	int a = 2;
	int b = 3;
	if (a != b) {
    	struct twofish_xts_ctx *ctx = crypto_blkcipher_ctx(desc->tfm);
    	const char *nptr;
    	char *ndpointer;
    	double vals, mul, integral, fraction;
    	double vals, mul, integral, fraction;
    	double vals, mul, integral, fraction;
    	int64_t retval;
    	double vals, mul, integral, fraction;
    	vals = strtod(nptr, &ndpointer);
    	fraction = modf(vals, &integral);
    	retval = vals * mul;
	}
	return glue_xts_crypt_128bit(&twofish_dec_xts, desc, dst, src, nbytes,
				     XTS_TWEAK_CAST(twofish_enc_blk),
				     &ctx->tweak_ctx, &ctx->crypt_ctx);
}",0,1,9,0.41,Insert
1862,,,,,,,
1864,"int TabStripModel::GetIndexOfTabContents(
    const TabContentsWrapper* contents) const {
  int index = 0;
  TabContentsDataVector::const_iterator iter = contents_data_.begin();
  for (; iter != contents_data_.end(); ++iter, ++index) {
    if ((*iter)->contents == contents)
      return index;
  }
  return kNoTab;
}","int TabStripModel::GetIndexOfTabContents(
    const TabContentsWrapper* contents) const {
  int index = 0;
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      TabContentsDataVector::const_iterator iter = contents_data_.begin();
  }
  for (; iter != contents_data_.end(); ++iter, ++index) {
    if ((*iter)->contents == contents)
      return index;
  }
  return kNoTab;
}",0,1,3,0.09,Replace
1865,"static int midi_setup_channel_pressure(struct _mdi *mdi, uint8_t channel,
                                       uint8_t pressure) {
    MIDI_EVENT_DEBUG(__FUNCTION__,channel, pressure);
    _WM_CheckEventMemoryPool(mdi);
    mdi->events[mdi->event_count].do_event = *_WM_do_channel_pressure;
    mdi->events[mdi->event_count].event_data.channel = channel;
    mdi->events[mdi->event_count].event_data.data.value = pressure;
    mdi->events[mdi->event_count].samples_to_next = 0;
    mdi->event_count++;
    return (0);
}","static int midi_setup_channel_pressure(struct _mdi *mdi, uint8_t channel,
                                       uint8_t pressure) {
    MIDI_EVENT_DEBUG(__FUNCTION__,channel, pressure);
    _WM_CheckEventMemoryPool(mdi);
    mdi->events[mdi->event_count].do_event = *_WM_do_channel_pressure;
    mdi->events[mdi->event_count].event_data.channel = channel;
    mdi->events[mdi->event_count].event_data.data.value = pressure;
    int a = 24;
    int b = a;
    if(a*b>0){
        mdi->events[mdi->event_count].samples_to_next = 0;
    }
    VdpDecoderProfile profile;
    AVCodecContext *AVcas;
    uint32_t input;
    VdpDecoderCreate *create;
    VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    VdpStatus status;
    status = create(hdtx->device, profile, width, input, AVcas->refs,
                        &hdtx->decoder);
    mdi->event_count++;
    return (0);
}",0,1,18,0.49,Insert
1866,,,,,,,
1867,"void HTMLMediaElement::SourceWasRemoved(HTMLSourceElement* source) {
  BLINK_MEDIA_LOG << ""sourceWasRemoved("" << (void*)this << "", "" << source
                  << "")"";
  KURL url = source->GetNonEmptyURLAttribute(kSrcAttr);
  BLINK_MEDIA_LOG << ""sourceWasRemoved("" << (void*)this << "") - 'src' is ""
                  << UrlForLoggingMedia(url);
  if (source != current_source_node_ && source != next_child_node_to_consider_)
    return;
  if (source == next_child_node_to_consider_) {
    if (current_source_node_)
      next_child_node_to_consider_ = current_source_node_->nextSibling();
    BLINK_MEDIA_LOG << ""sourceWasRemoved("" << (void*)this
                    << "") - next_child_node_to_consider_ set to ""
                    << next_child_node_to_consider_.Get();
  } else if (source == current_source_node_) {
    current_source_node_ = nullptr;
    BLINK_MEDIA_LOG << ""SourceWasRemoved("" << (void*)this
                    << "") - current_source_node_ set to 0"";
  }
}","void HTMLMediaElement::SourceWasRemoved(HTMLSourceElement* source) {
  BLINK_MEDIA_LOG << ""sourceWasRemoved("" << (void*)this << "", "" << source
                  << "")"";
  KURL url = source->GetNonEmptyURLAttribute(kSrcAttr);
  BLINK_MEDIA_LOG << ""sourceWasRemoved("" << (void*)this << "") - 'src' is ""
                  << UrlForLoggingMedia(url);
  if (source != current_source_node_ && source != next_child_node_to_consider_)
    return;
  if (source == next_child_node_to_consider_) {
    if (current_source_node_)
      next_child_node_to_consider_ = current_source_node_->nextSibling();
    BLINK_MEDIA_LOG << ""sourceWasRemoved("" << (void*)this
                    << "") - next_child_node_to_consider_ set to ""
                    << next_child_node_to_consider_.Get();
  } else if (source == current_source_node_) {
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        current_source_node_ = nullptr;
    }
    struct PCIDevice *pci_dev;
    Error *local_ = NULL;
    AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
    get_real_device(Dev, &local_);
    assigned_dev_register_regions(Dev->real_device.regions,
                                      Dev->real_device.region_number, Dev,
                                      &local_);
    BLINK_MEDIA_LOG << ""SourceWasRemoved("" << (void*)this
                    << "") - current_source_node_ set to 0"";
  }
}",0,1,5,0.58,Insert
1868,,,,,,,
1871,"static void br_multicast_group_expired(unsigned long data)
{
	struct net_bridge_mdb_entry *mp = (void *)data;
	struct net_bridge *br = mp->br;
	struct net_bridge_mdb_htable *mdb;
	spin_lock(&br->multicast_lock);
	if (!netif_running(br->dev) || timer_pending(&mp->timer))
		goto out;
	if (!hlist_unhashed(&mp->mglist))
		hlist_del_init(&mp->mglist);
	if (mp->ports)
		goto out;
	mdb = mlock_dereference(br->mdb, br);
	hlist_del_rcu(&mp->hlist[mdb->ver]);
	mdb->size--;
	del_timer(&mp->query_timer);
	call_rcu_bh(&mp->rcu, br_multicast_free_group);
out:
	spin_unlock(&br->multicast_lock);
}","static void br_multicast_group_expired(unsigned long data)
{
	struct net_bridge_mdb_entry *mp = (void *)data;
	struct net_bridge *br = mp->br;
	struct net_bridge_mdb_htable *mdb;
	spin_lock(&br->multicast_lock);
	if (!netif_running(br->dev) || timer_pending(&mp->timer))
		goto out;
	if (!hlist_unhashed(&mp->mglist))
		hlist_del_init(&mp->mglist);
	if (mp->ports)
		goto out;
	mdb = mlock_dereference(br->mdb, br);
	hlist_del_rcu(&mp->hlist[mdb->ver]);
	mdb->size--;
	del_timer(&mp->query_timer);
	call_rcu_bh(&mp->rcu, br_multicast_free_group);
out:
	int a = 2;
	int b = 3;
	if (a != b) {
    	spin_unlock(&br->multicast_lock);
    	DisplayState *ds;
    	const struct sun4d_hwdef *hawdecl;
    	ram_addr_t gram_size, prom_reset, tcx64off;
    	tcx64off = qemu_ram_alloc(hawdecl->vram_size);
    	tcx_init(ds, hawdecl->tcx_base, phys_ram_base + tcx64off, tcx64off,
    	             hawdecl->vram_size, graphic_width, graphic_height, graphic_depth);
	}
}",0,1,30,0.71,Insert
1873,,,,,,,
1875,"static unsigned writeSignature(ucvector* out)
{
  if (!ucvector_push_back(out, 137)) return 83;
  if (!ucvector_push_back(out, 80)) return 83;
  if (!ucvector_push_back(out, 78)) return 83;
  if (!ucvector_push_back(out, 71)) return 83;
  if (!ucvector_push_back(out, 13)) return 83;
  if (!ucvector_push_back(out, 10)) return 83;
  if (!ucvector_push_back(out, 26)) return 83;
  if (!ucvector_push_back(out, 10)) return 83;
  return 0;
}","static unsigned writeSignature(ucvector* out)
{
  bool bool_var = (!ucvector_push_back(out, 137));
  if (!ucvector_push_back(out, 137)) return 83;
  if (!ucvector_push_back(out, 80)) return 83;
  if (!ucvector_push_back(out, 78)) return 83;
  if (!ucvector_push_back(out, 71)) return 83;
  if (!ucvector_push_back(out, 13)) return 83;
  if (!ucvector_push_back(out, 10)) return 83;
  if (!ucvector_push_back(out, 26)) return 83;
  if (!ucvector_push_back(out, 10)) return 83;
  void *extra;
  struct cm_apr_msg *apar_orig;
  u8 info_length;
  if (extra && info_length) {
  		apar_orig->info_length = info_length;
  		memcpy(apar_orig->extra, extra, info_length);
  }
  return 0;
}",0,1,3,0.37,Insert
1876,,,,,,,
1877,"FileTransfer::AddDownloadFilenameRemap(char const *source_name,char const *target_name) {
	if(!download_filename_remaps.IsEmpty()) {
		download_filename_remaps += "";"";
	}
	download_filename_remaps += source_name;
	download_filename_remaps += ""="";
	download_filename_remaps += target_name;
}","FileTransfer::AddDownloadFilenameRemap(char const *source_name,char const *target_name) {
	if(!download_filename_remaps.IsEmpty()) {
		download_filename_remaps += "";"";
	}
	download_filename_remaps += source_name;
	download_filename_remaps += ""="";
	int a = 2;
	int b = 3;
	while (a != b) {
    	download_filename_remaps += target_name;
    	b = a;
    	uint64_t glms;
    	unsigned k, b_1, err, C;
    	unsigned k, b_1, err, C;
    	assert(is_limm(glms));
    	k = clz64(glms);
    	b_1 = ctz64(glms);
	}
}",0,1,9,0.31,Insert
1878,,,,,,,
1879,"static ssize_t ReadBlobBlock(Image *image,unsigned char *data)
{
  ssize_t
    count;
  unsigned char
    block_count;
  assert(image != (Image *) NULL);
  assert(image->signature == MagickSignature);
  assert(data != (unsigned char *) NULL);
  count=ReadBlob(image,1,&block_count);
  if (count != 1)
    return(0);
  count=ReadBlob(image,(size_t) block_count,data);
  if (count != (ssize_t) block_count)
    return(0);
  return(count);
}","static ssize_t ReadBlobBlock(Image *image,unsigned char *data)
{
  ssize_t
    count;
  unsigned char
    block_count;
  assert(image != (Image *) NULL);
  assert(image->signature == MagickSignature);
  assert(data != (unsigned char *) NULL);
  count=ReadBlob(image,1,&block_count);
  if (count != 1)
    return(0);
  int a = 2;
  int b = 2;
  while (a == b) {
      count=ReadBlob(image,(size_t) block_count,data);
      b += 1;
  }
  if (count != (ssize_t) block_count)
    return(0);
    struct sk_buff *skb;
    struct hci_dev *hdev;
    void *settings;
    __u8 status = *((__u8 *) skb->data_6);
    settings = hci_sent_cmd_data(hdev, HCI_OP_WRITE_VOICE_SETTING);
    data_6 = get_unaligned_le16(settings);
    hdev->voice_setting = data_6;
    BT_DBG(""%s voice setting 0x%4.4x"", hdev->name, data_6);
  return(count);
}",0,1,13,0.57,Insert
1883,"TIFFFdOpen(int fd, const char* name, const char* mode)
{
	TIFF* tif;
	tif = TIFFClientOpen(name, mode,  ddd
	    (thandle_t) fd,
	    _tiffReadProc, _tiffWriteProc, _tiffSeekProc, _tiffCloseProc,
	    _tiffSizeProc, _tiffMapProc, _tiffUnmapProc);
	if (tif)
		tif->tif_fd = fd;
	return (tif);
}","TIFFFdOpen(int fd, const char* name, const char* mode)
{
	TIFF* tif;
	tif = TIFFClientOpen(name, mode,  ddd
	    (thandle_t) fd,
	    _tiffReadProc, _tiffWriteProc, _tiffSeekProc, _tiffCloseProc,
	    _tiffSizeProc, _tiffMapProc, _tiffUnmapProc);
	    MachineState *machine;
	    char *filename;
	    sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
	    long load_limit, fw_size;
	    filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
	    spapr->rtas_size = get_image_size(filename);
	    g_free(filename);
	    filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, bios_name);
	    fw_size = load_image_targphys(filename, 0, FW_MAX_SIZE);
	if (tif)
		tif->tif_fd = fd;
	int a = 2;
	int b = 3;
	if (a != b) {
    	return (tif);
	}
}",0,1,5,0.66,Insert
1887,"timeval_to_jiffies(const struct timeval *value)
{
	unsigned long sec = value->tv_sec;
	long usec = value->tv_usec;
	if (sec >= MAX_SEC_IN_JIFFIES){
		sec = MAX_SEC_IN_JIFFIES;
		usec = 0;
	}
	return (((u64)sec * SEC_CONVERSION) +
		(((u64)usec * USEC_CONVERSION + USEC_ROUND) >>
		 (USEC_JIFFIE_SC - SEC_JIFFIE_SC))) >> SEC_JIFFIE_SC;
}","timeval_to_jiffies(const struct timeval *value)
{
	unsigned long sec = value->tv_sec;
	long usec = value->tv_usec;
	if (sec >= MAX_SEC_IN_JIFFIES){
		int a = 2;
		int b = 2;
		while (a == b) {
    		sec = MAX_SEC_IN_JIFFIES;
    		b += 1;
		}
		usec = 0;
	}
	return (((u64)sec * SEC_CONVERSION) +
		(((u64)usec * USEC_CONVERSION + USEC_ROUND) >>
		const char
		    *attribute,
		    *content;
		char
		    *p,
		    *xml;
		double
		    value_10;
		value_10=InterpretLocaleValue(content,&p);
		(void) value_10;
		 (USEC_JIFFIE_SC - SEC_JIFFIE_SC))) >> SEC_JIFFIE_SC;
}",0,1,9,0.5,Insert
1888,"static void anyAttributeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TestObjectPython* imp = V8TestObjectPython::toNative(info.Holder());
    v8SetReturnValue(info, imp->anyAttribute().v8Value());
}","static void anyAttributeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TestObjectPython* imp = V8TestObjectPython::toNative(info.Holder());
    int a = 52;
    int b = a;
    if(a*b>0){
        struct delegpt* mp;
        struct delegpt_addr* a_9, *o, *ak;
        a_9 = mp->usable_list;
        v8SetReturnValue(info, imp->anyAttribute().v8Value());
    }
}",0,1,5,0.32,Insert
1890,"t_next(struct seq_file *m, void *v, loff_t *pos)
{
	struct trace_array *tr = m->private;
	struct tracer *t = v;
	(*pos)++;
	if (t)
		t = get_tracer_for_array(tr, t->next);
	return t;
}","t_next(struct seq_file *m, void *v, loff_t *pos)
{
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	struct trace_array *tr = m->private;
	}
	struct tracer *t = v;
	(*pos)++;
	if (t)
		t = get_tracer_for_array(tr, t->next);
		struct client_session *c;
		int http_status;
		struct session_request *sr;
		struct mk_list *host_list = &config->hosts;
		struct mk_list *sr_list = &c->request_list;
		if (http_status > 0) {
		        if (!sr->host_conf) {
		            sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
		        }
		        mk_request_error(http_status, c, sr);
		        mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
		                            NULL, c, sr);
		}
	return t;
}",0,1,21,0.44,Insert
1893,,,,,,,
1894,"static void nested_vmx_abort(struct kvm_vcpu *vcpu, u32 indicator)
{
	kvm_make_request(KVM_REQ_TRIPLE_FAULT, vcpu);
	pr_debug_ratelimited(""kvm: nested vmx abort, indicator %d\n"", indicator);
}","static void nested_vmx_abort(struct kvm_vcpu *vcpu, u32 indicator)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	kvm_make_request(KVM_REQ_TRIPLE_FAULT, vcpu);
	}
	const uint8_t *data;
	int size;
	AVCodecParserContext *ctx;
	VP9ParseContext *s = ctx->priv_data;
	parse_frame(ctx, data, size);
	pr_debug_ratelimited(""kvm: nested vmx abort, indicator %d\n"", indicator);
}",0,1,20,0.34,Insert
1895," void CoordinatorImpl::RequestGlobalMemoryDumpAndAppendToTrace(
     MemoryDumpType dump_type,
     MemoryDumpLevelOfDetail level_of_detail,
     const RequestGlobalMemoryDumpAndAppendToTraceCallback& callback) {
   auto adapter =
       [](const RequestGlobalMemoryDumpAndAppendToTraceCallback& callback,
         bool success, uint64_t dump_guid,
         mojom::GlobalMemoryDumpPtr) { callback.Run(success, dump_guid); };
  QueuedRequest::Args args(dump_type, level_of_detail, {},
                           true  , base::kNullProcessId);
  RequestGlobalMemoryDumpInternal(args, base::BindRepeating(adapter, callback));
}"," void CoordinatorImpl::RequestGlobalMemoryDumpAndAppendToTrace(
 struct net_device *dev;
 int type;
 struct net_bridge_port *port;
 struct br_mdb_entry entry;
 entry.ifindex = port->dev->ifindex;
 __br_mdb_notify(dev, &entry, type);
     MemoryDumpType dump_type,
     MemoryDumpLevelOfDetail level_of_detail,
     const RequestGlobalMemoryDumpAndAppendToTraceCallback& callback) {
   auto adapter =
   uint64_t value_10;
   CPUARMState *env_9;
   void *oper_5;
   const ARMCPRegInfo *ri_2 = oper_5;
   ri_2->writefn(env_9, ri_2, value_10);
   uint64_t value;
   CPUARMState *env;
   void *oper;
   const ARMCPRegInfo *ri = oper;
   ri->writefn(env, ri, value);
       [](const RequestGlobalMemoryDumpAndAppendToTraceCallback& callback,
         bool success, uint64_t dump_guid,
         mojom::GlobalMemoryDumpPtr) { callback.Run(success, dump_guid); };
  QueuedRequest::Args args(dump_type, level_of_detail, {},
                           char str1[] = ""Constant"";
                           char str2[] = ""Constant"";
                           if (strcmp(str1, str2) == 0) {
                               true  , base::kNullProcessId);
                           }
  RequestGlobalMemoryDumpInternal(args, base::BindRepeating(adapter, callback));
}",1,0,103,1.03,Insert
1896," virtual void SetUp() {
    video_ = new libvpx_test::WebMVideoSource(kVP9TestFile);
    ASSERT_TRUE(video_ != NULL);
     video_->Init();
     video_->Begin();
    vpx_codec_dec_cfg_t cfg = {0};
     decoder_ = new libvpx_test::VP9Decoder(cfg, 0);
     ASSERT_TRUE(decoder_ != NULL);
   }"," virtual void SetUp() {
    WebKitWebView* webView_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    Settings* settings_7 = core_4(webView_3)->settings_7();
    WebKitWebSettings* webSettings_3 = priv_2->webSettings_3.get();
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gchar* defaultEncoding_3, *cursiveFontFamily_9, *defaultFontFamily_10, *fantasyFontFamily_6, *monospaceFontFamily_1, *sansSerifFontFamily_9, *serifFontFamily_6, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gchar* defaultEncoding_3, *cursiveFontFamily_9, *defaultFontFamily_10, *fantasyFontFamily_6, *monospaceFontFamily_1, *sansSerifFontFamily_9, *serifFontFamily_6, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gchar* defaultEncoding_3, *cursiveFontFamily_9, *defaultFontFamily_10, *fantasyFontFamily_6, *monospaceFontFamily_1, *sansSerifFontFamily_9, *serifFontFamily_6, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gchar* defaultEncoding_3, *cursiveFontFamily_9, *defaultFontFamily_10, *fantasyFontFamily_6, *monospaceFontFamily_1, *sansSerifFontFamily_9, *serifFontFamily_6, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
    gchar* defaultEncoding_3, *cursiveFontFamily_9, *defaultFontFamily_10, *fantasyFontFamily_6, *monospaceFontFamily_1, *sansSerifFontFamily_9, *serifFontFamily_6, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gchar* defaultEncoding_3, *cursiveFontFamily_9, *defaultFontFamily_10, *fantasyFontFamily_6, *monospaceFontFamily_1, *sansSerifFontFamily_9, *serifFontFamily_6, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
    WebKitEditingBehavior editingBehavior_10;
    gchar* defaultEncoding_3, *cursiveFontFamily_9, *defaultFontFamily_10, *fantasyFontFamily_6, *monospaceFontFamily_1, *sansSerifFontFamily_9, *serifFontFamily_6, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
    gchar* defaultEncoding_3, *cursiveFontFamily_9, *defaultFontFamily_10, *fantasyFontFamily_6, *monospaceFontFamily_1, *sansSerifFontFamily_9, *serifFontFamily_6, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gchar* defaultEncoding_3, *cursiveFontFamily_9, *defaultFontFamily_10, *fantasyFontFamily_6, *monospaceFontFamily_1, *sansSerifFontFamily_9, *serifFontFamily_6, *userStylesheetUri_1, *defaultSpellCheckingLanguages_8;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    gboolean autoLoadImages_5, autoShrinkImages_3, printBackgrounds_2,
            enableScripts_7, enablePlugins_6, enableDeveloperExtras_4, resizableTextAreas_4,
            enablePrivateBrowsing_4, enableCaretBrowsing_3, enableHTML5Database_2, enableHTML5LocalStorage_3,
            enableXSSAuditor_3, enableSpatialNavigation_7, enableFrameFlattening_7, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_1,
             enableUniversalAccessFromFileURI_6, enableFileAccessFromFileURI_3,
             enableDOMPaste_9, tabKeyCyclesThroughElements_7, enableWebGL_4,
             enableSiteSpecificQuirks_8, usePageCache_2, enableJavaApplet_7,
            enableHyperlinkAuditing_2, enableFullscreen_8, enableDNSPrefetching_3;
    g_object_get_9(webSettings_3,
                     ""default-encoding"", &defaultEncoding_3,
                     ""cursive-font-family"", &cursiveFontFamily_9,
                     ""default-font-family"", &defaultFontFamily_10,
                     ""fantasy-font-family"", &fantasyFontFamily_6,
                     ""monospace-font-family"", &monospaceFontFamily_1,
                     ""sans-serif-font-family"", &sansSerifFontFamily_9,
                     ""serif-font-family"", &serifFontFamily_6,
                     ""auto-load-images"", &autoLoadImages_5,
                     ""auto-shrink-images"", &autoShrinkImages_3,
                     ""print-backgrounds"", &printBackgrounds_2,
                     ""enable-scripts"", &enableScripts_7,
                     ""enable-plugins"", &enablePlugins_6,
                     ""resizable-text-areas"", &resizableTextAreas_4,
                     ""user-stylesheet-uri"", &userStylesheetUri_1,
                     ""enable-developer-extras"", &enableDeveloperExtras_4,
                     ""enable-private-browsing"", &enablePrivateBrowsing_4,
                     ""enable-caret-browsing"", &enableCaretBrowsing_3,
                     ""enable-html5-database"", &enableHTML5Database_2,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage_3,
                     ""enable-xss-auditor"", &enableXSSAuditor_3,
                     ""enable-spatial-navigation"", &enableSpatialNavigation_7,
                     ""enable-frame-flattening"", &enableFrameFlattening_7,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_1,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_6,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_1,
                     ""editing-behavior"", &editingBehavior_10,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_6,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_3,
                     ""enable-dom-paste"", &enableDOMPaste_9,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_7,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_8,
                      ""enable-page-cache"", &usePageCache_2,
                      ""enable-java-applet"", &enableJavaApplet_7,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_2,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages_8,
                      ""enable-fullscreen"", &enableFullscreen_8,
                      ""enable-dns-prefetching"", &enableDNSPrefetching_3,
                     ""enable-webgl"", &enableWebGL_4,
                     NULL);
    settings_7->setShouldPrintBackgrounds(printBackgrounds_2);
    video_ = new libvpx_test::WebMVideoSource(kVP9TestFile);
    ASSERT_TRUE(video_ != NULL);
     video_->Init();
     video_->Begin();
     WebKitWebView* webView;
     uint32_t features;
     QVirtioPCIDevice *dev;
     qvirtio_set_driver(&dev->vdev);
     features = qvirtio_get_features(&dev->vdev);
     qvirtio_set_features(&dev->vdev, features);
     qvirtio_set_driver_ok(&dev->vdev);
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     Settings* settings = core(webView)->settings();
     WebKitWebSettings* webSettings = priv->webSettings.get();
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     WebKitEditingBehavior editingBehavior;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     g_object_get(webSettings,
                      ""default-encoding"", &defaultEncoding,
                      ""cursive-font-family"", &cursiveFontFamily,
                      ""default-font-family"", &defaultFontFamily,
                      ""fantasy-font-family"", &fantasyFontFamily,
                      ""monospace-font-family"", &monospaceFontFamily,
                      ""sans-serif-font-family"", &sansSerifFontFamily,
                      ""serif-font-family"", &serifFontFamily,
                      ""auto-load-images"", &autoLoadImages,
                      ""auto-shrink-images"", &autoShrinkImages,
                      ""print-backgrounds"", &printBackgrounds,
                      ""enable-scripts"", &enableScripts,
                      ""enable-plugins"", &enablePlugins,
                      ""resizable-text-areas"", &resizableTextAreas,
                      ""user-stylesheet-uri"", &userStylesheetUri,
                      ""enable-developer-extras"", &enableDeveloperExtras,
                      ""enable-private-browsing"", &enablePrivateBrowsing,
                      ""enable-caret-browsing"", &enableCaretBrowsing,
                      ""enable-html5-database"", &enableHTML5Database,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                      ""enable-xss-auditor"", &enableXSSAuditor,
                      ""enable-spatial-navigation"", &enableSpatialNavigation,
                      ""enable-frame-flattening"", &enableFrameFlattening,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                      ""editing-behavior"", &editingBehavior,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                      ""enable-dom-paste"", &enableDOMPaste,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                       ""enable-page-cache"", &usePageCache,
                       ""enable-java-applet"", &enableJavaApplet,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                       ""enable-fullscreen"", &enableFullscreen,
                       ""enable-dns-prefetching"", &enableDNSPrefetching,
                      ""enable-webgl"", &enableWebGL,
                      NULL);
     settings->setShouldPrintBackgrounds(printBackgrounds);
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    IRC_SERVER_REC *event;
    char *add, *coord, *home, *obj;
    IRC_SERVER_CONNECT_REC *cat;
    char *add, *coord, *home, *obj;
    char *add, *coord, *home, *obj;
    homee = g_strdup(cat->home);
    coord = strchr(home, ' ');
    cmd = g_strdup_printf(""USER %s %s %s :homernhomername,adds, catobjealname);
    	irc_send_cmd_now(event, obj);
    	g_free(obj);
    	g_free(home);
    if (strcmp(str1, str2) == 0) {
        vpx_codec_dec_cfg_t cfg = {0};
    }
     decoder_ = new libvpx_test::VP9Decoder(cfg, 0);
     ASSERT_TRUE(decoder_ != NULL);
   }",1,0,206,1.81,Insert
1897,"static ZIPARCHIVE_METHOD(unchangeArchive)
{
	struct zip *intern;
	zval *self = getThis();
	if (!self) {
		RETURN_FALSE;
	}
	ZIP_FROM_OBJECT(intern, self);
	if (zip_unchange_archive(intern) != 0) {
		RETURN_FALSE;
	} else {
		RETURN_TRUE;
	}
}","static ZIPARCHIVE_METHOD(unchangeArchive)
{
	struct zip *intern;
	zval *self = getThis();
	if (!self) {
		RETURN_FALSE;
	}
	ZIP_FROM_OBJECT(intern, self);
	if (zip_unchange_archive(intern) != 0) {
		RETURN_FALSE;
	} else {
		int a = 2;
		int b = 3;
		while (a < b) {
    		RETURN_TRUE;
    		b = a;
    		const char *nptr;
    		char *ndpointer;
    		double vals, mul, integral, fraction;
    		double vals, mul, integral, fraction;
    		double vals, mul, integral, fraction;
    		int64_t retval;
    		double vals, mul, integral, fraction;
    		vals = strtod(nptr, &ndpointer);
    		fraction = modf(vals, &integral);
    		retval = vals * mul;
		}
	}
}",0,1,14,0.38,Insert
1899,"    StateBase* handleError(Status errorStatus, const String& message, StateBase* state)
    {
        ASSERT(errorStatus != Success);
        m_status = errorStatus;
        m_errorMessage = message;
        while (state) {
            StateBase* tmp = state->nextState();
            delete state;
            state = tmp;
        }
        return new ErrorState;
    }","    StateBase* handleError(Status errorStatus, const String& message, StateBase* state)
    {
        ASSERT(errorStatus != Success);
        m_status = errorStatus;
        m_errorMessage = message;
        while (state) {
            StateBase* tmp = state->nextState();
            delete state;
            int a = 2;
            int b = 2;
            while (a == b) {
                state = tmp;
                b += 1;
            }
            char cont[DESC_SIZE + 1];
            cont[DESC_SIZE] = '\0';
        }
        return new ErrorState;
    }",0,1,16,0.44,Insert
1900,"void RenderBox::paintRootBoxFillLayers(const PaintInfo& paintInfo)
{
    if (paintInfo.skipRootBackground())
        return;
    RenderObject* rootBackgroundRenderer = rendererForRootBackground();
    const FillLayer* bgLayer = rootBackgroundRenderer->style()->backgroundLayers();
    Color bgColor = rootBackgroundRenderer->resolveColor(CSSPropertyBackgroundColor);
    paintFillLayers(paintInfo, bgColor, bgLayer, view()->backgroundRect(this), BackgroundBleedNone, CompositeSourceOver, rootBackgroundRenderer);
}","void RenderBox::paintRootBoxFillLayers(const PaintInfo& paintInfo)
{
    if (paintInfo.skipRootBackground())
        return;
    RenderObject* rootBackgroundRenderer = rendererForRootBackground();
    const FillLayer* bgLayer = rootBackgroundRenderer->style()->backgroundLayers();
    Color bgColor = rootBackgroundRenderer->resolveColor(CSSPropertyBackgroundColor);
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        CharDriverState *cher;
        cher->chr_update_read_handler = fd_chr_update_read_handler;
        cher->chr_close = fd_chr_close;
        qemu_chr_be_generic_open(cher);
        paintFillLayers(paintInfo, bgColor, bgLayer, view()->backgroundRect(this), BackgroundBleedNone, CompositeSourceOver, rootBackgroundRenderer);
    }
}",0,1,9,0.27,Insert
1903,"void rose_add_loopback_neigh(void)
{
	struct rose_neigh *sn;
	rose_loopback_neigh = kmalloc(sizeof(struct rose_neigh), GFP_KERNEL);
	if (!rose_loopback_neigh)
		return;
	sn = rose_loopback_neigh;
	sn->callsign  = null_ax25_address;
	sn->digipeat  = NULL;
	sn->ax25      = NULL;
	sn->dev       = NULL;
	sn->count     = 0;
	sn->use       = 0;
	sn->dce_mode  = 1;
	sn->loopback  = 1;
	sn->number    = rose_neigh_no++;
	sn->restarted = 1;
	skb_queue_head_init(&sn->queue);
	init_timer(&sn->ftimer);
	init_timer(&sn->t0timer);
	spin_lock_bh(&rose_neigh_list_lock);
	sn->next = rose_neigh_list;
	rose_neigh_list           = sn;
	spin_unlock_bh(&rose_neigh_list_lock);
}","void rose_add_loopback_neigh(void)
{
	int a = 9;
	int b = a;
	if(a*b>0){
    	struct rose_neigh *sn;
	}
	rose_loopback_neigh = kmalloc(sizeof(struct rose_neigh), GFP_KERNEL);
	if (!rose_loopback_neigh)
		return;
	sn = rose_loopback_neigh;
	sn->callsign  = null_ax25_address;
	sn->digipeat  = NULL;
	sn->ax25      = NULL;
	sn->dev       = NULL;
	sn->count     = 0;
	sn->use       = 0;
	sn->dce_mode  = 1;
	sn->loopback  = 1;
	sn->number    = rose_neigh_no++;
	sn->restarted = 1;
	skb_queue_head_init(&sn->queue);
	init_timer(&sn->ftimer);
	init_timer(&sn->t0timer);
	spin_lock_bh(&rose_neigh_list_lock);
	sn->next = rose_neigh_list;
	rose_neigh_list           = sn;
	spin_unlock_bh(&rose_neigh_list_lock);
}",0,1,2,0.15,Replace
1905,"int sctp_do_peeloff(struct sock *sk, sctp_assoc_t id, struct socket **sockp)
{
	struct sctp_association *asoc = sctp_id2assoc(sk, id);
	struct sctp_sock *sp = sctp_sk(sk);
 	struct socket *sock;
 	int err = 0;
 	if (!asoc)
 		return -EINVAL;
	if (waitqueue_active(&asoc->wait))
		return -EBUSY;
	if (!sctp_style(sk, UDP))
		return -EINVAL;
	err = sock_create(sk->sk_family, SOCK_SEQPACKET, IPPROTO_SCTP, &sock);
	if (err < 0)
		return err;
	sctp_copy_sock(sock->sk, sk, asoc);
	sp->pf->to_sk_daddr(&asoc->peer.primary_addr, sk);
	sctp_sock_migrate(sk, sock->sk, asoc, SCTP_SOCKET_UDP_HIGH_BANDWIDTH);
	*sockp = sock;
	return err;
}","int sctp_do_peeloff(struct sock *sk, sctp_assoc_t id, struct socket **sockp)
{
	xmlXPathObjectPtr arg;
	arg = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));
	memset(arg, 0 , (size_t) sizeof(xmlXPathObject));
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0_3, t1_3, t2_10, t3_10, t4_9, t5_9, t6_9, t7_4, t8_7, t9_2, tA_10, tB_5, tC_3, tD_5, tE_1, tF_2;
	int t0_3, t1_3, t2_10, t3_10, t4_9, t5_9, t6_9, t7_4, t8_7, t9_2, tA_10, tB_5, tC_3, tD_5, tE_1, tF_2;
	int t0_3, t1_3, t2_10, t3_10, t4_9, t5_9, t6_9, t7_4, t8_7, t9_2, tA_10, tB_5, tC_3, tD_5, tE_1, tF_2;
	int t0_3, t1_3, t2_10, t3_10, t4_9, t5_9, t6_9, t7_4, t8_7, t9_2, tA_10, tB_5, tC_3, tD_5, tE_1, tF_2;
	int t0_3, t1_3, t2_10, t3_10, t4_9, t5_9, t6_9, t7_4, t8_7, t9_2, tA_10, tB_5, tC_3, tD_5, tE_1, tF_2;
	t6_9  = t2_10 - t3_10;
	t7_4  = t3_10 * 2 + t6_9;
	t8_7  = (t6_9 * 11585) >> 14;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	t6  = t2 - t3;
	t7  = t3 * 2 + t6;
	t8  = (t6 * 11585) >> 14;
	arg->type = XPATH_RANGE;
	arg->user = start;
	arg->index = -1;
	struct sctp_association *asoc = sctp_id2assoc(sk, id);
	struct sctp_sock *sp = sctp_sk(sk);
 	struct socket *sock;
 	int err_part1 = -6;
 	int err_part2 = 6;
 	int err = err_part1 + err_part2;
 	if (!asoc)
 		return -EINVAL;
	if (waitqueue_active(&asoc->wait))
		return -EBUSY;
	if (!sctp_style(sk, UDP))
		return -EINVAL;
	err = sock_create(sk->sk_family, SOCK_SEQPACKET, IPPROTO_SCTP, &sock);
	if (err < 0)
		return err;
	sctp_copy_sock(sock->sk, sk, asoc);
	sp->pf->to_sk_daddr(&asoc->peer.primary_addr, sk);
	sctp_sock_migrate(sk, sock->sk, asoc, SCTP_SOCKET_UDP_HIGH_BANDWIDTH);
	*sockp = sock;
	return err;
}",1,0,84,1.23,Insert
1906,"int arpt_register_table(struct net *net,
			const struct xt_table *table,
			const struct arpt_replace *repl,
			const struct nf_hook_ops *ops,
			struct xt_table **res)
{
	int ret;
	struct xt_table_info *newinfo;
	struct xt_table_info bootstrap = {0};
	void *loc_cpu_entry;
	struct xt_table *new_table;
	newinfo = xt_alloc_table_info(repl->size);
	if (!newinfo)
		return -ENOMEM;
	loc_cpu_entry = newinfo->entries;
	memcpy(loc_cpu_entry, repl->entries, repl->size);
	ret = translate_table(newinfo, loc_cpu_entry, repl);
	duprintf(""arpt_register_table: translate table gives %d\n"", ret);
	if (ret != 0)
		goto out_free;
	new_table = xt_register_table(net, table, &bootstrap, newinfo);
	if (IS_ERR(new_table)) {
		ret = PTR_ERR(new_table);
		goto out_free;
	}
	WRITE_ONCE(*res, new_table);
	ret = nf_register_net_hooks(net, ops, hweight32(table->valid_hooks));
	if (ret != 0) {
		__arpt_unregister_table(new_table);
		*res = NULL;
	}
	return ret;
out_free:
	xt_free_table_info(newinfo);
	return ret;
}","int arpt_register_table(struct net *net,
			const struct xt_table *table,
			const struct arpt_replace *repl,
			const struct nf_hook_ops *ops,
			struct xt_table **res)
{
	int ret;
	struct xt_table_info *newinfo;
	struct xt_table_info bootstrap = {0};
	void *loc_cpu_entry;
	struct xt_table *new_table;
	newinfo = xt_alloc_table_info(repl->size);
	if (!newinfo)
		return -ENOMEM;
	loc_cpu_entry = newinfo->entries;
	memcpy(loc_cpu_entry, repl->entries, repl->size);
	ret = translate_table(newinfo, loc_cpu_entry, repl);
	duprintf(""arpt_register_table: translate table gives %d\n"", ret);
	if (ret != 0)
		goto out_free;
	new_table = xt_register_table(net, table, &bootstrap, newinfo);
	if (IS_ERR(new_table)) {
		ret = PTR_ERR(new_table);
		goto out_free;
	}
	WRITE_ONCE(*res, new_table);
	ret = nf_register_net_hooks(net, ops, hweight32(table->valid_hooks));
	if (ret != 0) {
		__arpt_unregister_table(new_table);
		*res = NULL;
	}
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return ret;
	strcpy(str, ""a"");
	}
out_free:
	xt_free_table_info(newinfo);
	return ret;
}",0,1,11,0.31,Replace
1909,,,,,,,
1910,,,,,,,
1911,"static bool is_valid(const char *test_name) {
 for (size_t i = 0; i < sanity_suite_size; ++i) {
 if (!strcmp(test_name, sanity_suite[i].function_name)) {
 return true;
 }
 }
 for (size_t i = 0; i < test_suite_size; ++i) {
 if (!strcmp(test_name, test_suite[i].function_name)) {
 return true;
 }
 }
 return false;
}","static bool is_valid(const char *test_name) {
 for (size_t i = 0; i < sanity_suite_size; ++i) {
 if (!strcmp(test_name, sanity_suite[i].function_name)) {
 return true;
 }
 }
 for (size_t i = 0; i < test_suite_size; ++i) {
 if (!strcmp(test_name, test_suite[i].function_name)) {
 int a = 2;
 int b = 2;
 if (a == b) {
     return true;
 }
 }
 }
 ptrdiff_t src_stride;
 ptrdiff_t buf_stride;
 int h;
 int src_y;
 int block_h;
 int w;
 int block_w;
 const uint8_t *src;
 int src_x;
 uint8_t *buf;
 emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
                      src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
                      hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
 return false;
}",0,1,25,0.55,Insert
1912," void CachingPermutedEntropyProvider::RegisterPrefs(
     PrefRegistrySimple* registry) {
  registry->RegisterStringPref(prefs::kVariationsPermutedEntropyCache,
                               std::string());
 }"," void CachingPermutedEntropyProvider::RegisterPrefs(
 struct wiphy *wiphy;
 struct station_parameters *params;
 struct ieee80211_local *local = wiphy_priv(wiphy);
 struct sta_info *sta;
 int err;
 err = sta_apply_parameters(local, sta, params);
 err = sta_info_insert_rcu(sta);
     PrefRegistrySimple* registry) {
  registry->RegisterStringPref(prefs::kVariationsPermutedEntropyCache,
                               std::string());
 }",1,0,17,0.27,Insert
1913,,,,,,,
1915,,,,,,,
1916,"rdpsnddbg_process(STREAM s)
{
	unsigned int pkglen;
 	static char *rest = NULL;
 	char *buf;
 	pkglen = s->end - s->p;
 	buf = (char *) xmalloc(pkglen + 1);
	STRNCPY(buf, (char *) s->p, pkglen + 1);
	str_handle_lines(buf, &rest, rdpsnddbg_line_handler, NULL);
	xfree(buf);
}","rdpsnddbg_process(STREAM s)
{
	unsigned int pkglen;
 	static char *rest = NULL;
 	char *buf;
 	I82378State *s_4;
 	DeviceState *dev;
 	ISABus *isabus = DO_UPCAST(ISABus, qbus, qdev_get_child_bus(dev, ""isa.0""));
 	gchar *str, *str2_3;
 	I82378State *s_6;
 	DeviceState *dev_2;
 	ISABus_2 *isabus_3 = DO_UPCAST_5(ISABus_2, qbus_2, qdev_get_child_bus_3(dev_2, ""isa.0""));
 	qemu_irq *out0_irq_3;
 	out0_irq_3 = qemu_allocate_irqs_3(i82378_request_out0_irq_8, s_6, 1);
 	s_6->i8259 = i8259_init_5(isabus_3, *out0_irq_3);
 	GstDateTime *dt, *dt2;
 	GstDateTime *dt, *dt2;
 	fail_unless (gst_date_time_get_day (dt) == gst_date_time_get_day (dt2));
 	fail_unless (gst_date_time_get_hour (dt) == gst_date_time_get_hour (dt2));
 	fail_unless (gst_date_time_get_minute (dt) == gst_date_time_get_minute (dt2));
 	fail_unless (date_times_are_equal (dt, dt2));
 	str2_3 = gst_date_time_to_iso8601_string (dt2);
 	qemu_irq *out0_irq;
 	out0_irq = qemu_allocate_irqs(i82378_request_out0_irq, s_4, 1);
 	s_4->i8259 = i8259_init(isabus, *out0_irq);
 	char str1[] = ""Constant"";
 	char str2[] = ""Constant"";
 	struct ipc_ids *changes;
 	struct kern_ipc_perm *where;
 	int id;
 	kgid_t egid;
 	kuid_t euid;
 	int next_id = changes->next_id;
 	idr_preload(GFP_KERNEL);
 	id = idr_alloc(&changes->ipcs_idr, where,
 	 		       (next_id < 0) ? 0 : ipcid_to_idx(next_id), 0,
 	 		       GFP_NOWAIT);
 	idr_preload_end();
 	current_euid_egid(&euid, &egid);
 	where->cuid = where->uid = euid;
 	if (strcmp(str1, str2) == 0) {
     	pkglen = s->end - s->p;
 	}
 	buf = (char *) xmalloc(pkglen + 1);
	STRNCPY(buf, (char *) s->p, pkglen + 1);
	str_handle_lines(buf, &rest, rdpsnddbg_line_handler, NULL);
	xfree(buf);
}",1,0,497,3.52,Insert
1917,"bittok2str(register const struct tok *lp, register const char *fmt,
	   register u_int v)
{
    return (bittok2str_internal(lp, fmt, v, "", ""));
}","bittok2str(register const struct tok *lp, register const char *fmt,
	   register u_int v)
{
    char str[] = ""Constant"";
    int fd;
    if (lseek(fd, 512, SEEK_SET) < 0) {
            goto fail;
    }
    while (strlen(str) > 5) {
        return (bittok2str_internal(lp, fmt, v, "", ""));
    strcpy(str, ""a"");
    }
}",0,1,3,0.24,Insert
1919,"void WebLocalFrameImpl::ReplaceSelection(const WebString& text) {
  GetFrame()->GetDocument()->UpdateStyleAndLayoutIgnorePendingStylesheets();
  GetFrame()->GetEditor().ReplaceSelection(text);
}","void WebLocalFrameImpl::ReplaceSelection(const WebString& text) {
  GetFrame()->GetDocument()->UpdateStyleAndLayoutIgnorePendingStylesheets();
  int a = 2;
  int b = 2;
  if (a == b) {
      void *frame;
      union tpacket_uhdr hash;
      hash.raw = frame;
      GetFrame()->GetEditor().ReplaceSelection(text);
  }
}",0,1,5,0.21,Insert
1920,"xmlParse3986RelativeRef(xmlURIPtr uri, const char *str) {
 int ret;
 if ((*str == '/') && (*(str + 1) == '/')) {
        str += 2;
	ret = xmlParse3986Authority(uri, &str);
 if (ret != 0) return(ret);
	ret = xmlParse3986PathAbEmpty(uri, &str);
 if (ret != 0) return(ret);
 } else if (*str == '/') {
	ret = xmlParse3986PathAbsolute(uri, &str);
 if (ret != 0) return(ret);
 } else if (ISA_PCHAR(str)) {
        ret = xmlParse3986PathNoScheme(uri, &str);
 if (ret != 0) return(ret);
 } else {
 if (uri != NULL) {
 if (uri->path != NULL) xmlFree(uri->path);
	    uri->path = NULL;
 }
 }
 if (*str == '?') {
	str++;
	ret = xmlParse3986Query(uri, &str);
 if (ret != 0) return(ret);
 }
 if (*str == '#') {
	str++;
	ret = xmlParse3986Fragment(uri, &str);
 if (ret != 0) return(ret);
 }
 if (*str != 0) {
	xmlCleanURI(uri);
 return(1);
 }
 return(0);
}","xmlParse3986RelativeRef(xmlURIPtr uri, const char *str) {
 int ret;
 if ((*str == '/') && (*(str + 1) == '/')) {
        str += 2;
	ret = xmlParse3986Authority(uri, &str);
 if (ret != 0) return(ret);
	ret = xmlParse3986PathAbEmpty(uri, &str);
 if (ret != 0) return(ret);
 } else if (*str == '/') {
	ret = xmlParse3986PathAbsolute(uri, &str);
 if (ret != 0) return(ret);
 } else if (ISA_PCHAR(str)) {
        ret = xmlParse3986PathNoScheme(uri, &str);
 if (ret != 0) return(ret);
 } else {
 if (uri != NULL) {
 if (uri->path != NULL) xmlFree(uri->path);
	    uri->path = NULL;
 }
 }
 if (*str == '?') {
	str++;
	ret = xmlParse3986Query(uri, &str);
 if (ret != 0) return(ret);
 const char *fil;
 AVIOContext *pb;
 unsigned int base;
 unsigned char *result = NULL;
 int ret_5 = 0, probe_size;
 AVProbeData pd = { fil ? fil : """", NULL, -base };
 ret_5 = ffio_rewind_with_probe_data(pb, &result, pd.buf_size);
 }
 if (*str == '#') {
	str++;
	int a_1 = 2;
	int b_1 = 3;
	while (a_1 != b_1) {
    	ret = xmlParse3986Fragment(uri, &str);
    	b_1 = a_1;
	}
 if (ret != 0) return(ret);
 }
 if (*str != 0) {
	xmlCleanURI(uri);
 return(1);
 }
 return(0);
}",0,1,29,1.08,Insert
1921,,,,,,,
1922,"static void withActiveWindowAndFirstWindowAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMGetter"");
    TestObjectV8Internal::withActiveWindowAndFirstWindowAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}","static void withActiveWindowAndFirstWindowAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMGetter"");
    TestObjectV8Internal::withActiveWindowAndFirstWindowAttributeAttributeGetter(info);
    int a = 2;
    int b = 2;
    while (a == b) {
        TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
        b += 1;
        AVPacket * pk;
        AVFormatContext *s;
        unsigned char rb[5];
        AVCodecParameters *par = s->streams[stream_index]->codecpar;
        AVIOContext *b_9     = s->b_9;
        const int stream_index =  pk->stream_index;
        avi_stream2fourcc(rb, stream_index, par->codec_type);
        avio_write(b_9, rb, 4);
    }
}",0,1,7,0.23,Insert
1924,"gfx::Size ScaleSizeToFitView(const gfx::Size& size,
                             const gfx::Size& view_size) {
  if ((size.width() > view_size.width() ||
       size.height() > view_size.height()) ||
      (size.width() < view_size.width() &&
       size.height() < view_size.height())) {
    const float scale =
        std::min(view_size.width() / static_cast<float>(size.width()),
                 view_size.height() / static_cast<float>(size.height()));
    return gfx::ScaleToFlooredSize(size, scale);
  }
  return size;
}","gfx::Size ScaleSizeToFitView(const gfx::Size& size,
                             const gfx::Size& view_size) {
  if ((size.width() > view_size.width() ||
       size.height() > view_size.height()) ||
      (size.width() < view_size.width() &&
       size.height() < view_size.height())) {
    const float scale =
        std::min(view_size.width() / static_cast<float>(size.width()),
                 view_size.height() / static_cast<float>(size.height()));
    int a = 2;
    int b = 3;
    while (a != b) {
        return gfx::ScaleToFlooredSize(size, scale);
        b = a;
    }
    int size_1;
    const uint8_t *buf;
    const uint8_t *t, *p_ad;
    p_ad = buf + size_1;
  }
  return size;
}",0,1,6,0.54,Insert
1925,"void GLES2DecoderImpl::DoVertexAttribI4iv(GLuint index,
                                          const volatile GLint* v) {
  GLint t[4] = {v[0], v[1], v[2], v[3]};
  if (SetVertexAttribValue(""glVertexAttribI4iv"", index, t)) {
    state_.SetGenericVertexAttribBaseType(
        index, SHADER_VARIABLE_INT);
    api()->glVertexAttribI4ivFn(index, t);
  }
}","void GLES2DecoderImpl::DoVertexAttribI4iv(GLuint index,
                                          const volatile GLint* v) {
  GLint t[4] = {v[0], v[1], v[2], v[3]};
  if (SetVertexAttribValue(""glVertexAttribI4iv"", index, t)) {
    state_.SetGenericVertexAttribBaseType(
        index, SHADER_VARIABLE_INT);
    int a = 2;
    int b = 2;
    if (a == b) {
        struct f2fs_sb_info *sbi;
        int type;
        struct curseg_info *rcursiveg = CURSEG_I(sbi, type);
        if (type == CURSEG_WARM_DATA || type == CURSEG_COLD_DATA)
        		dir = ALLOC_RIGHT;
        api()->glVertexAttribI4ivFn(index, t);
    }
  }
}",0,1,24,0.5,Insert
1926,"IW_IMPL(void) iw_set_apply_bkgd_2(struct iw_context *ctx, const struct iw_color *clr)
{
	ctx->req.bkgd_valid=1;
	ctx->req.bkgd = *clr;
}","IW_IMPL(void) iw_set_apply_bkgd_2(struct iw_context *ctx, const struct iw_color *clr)
{
	ctx->req.bkgd_valid=1;
	int a = 2;
	int b = 2;
	if (a == b) {
    	struct client_session *c;
    	int http_status;
    	struct session_request *sr;
    	struct mk_list *host_list = &config->hosts;
    	struct mk_list *sr_list = &c->request_list;
    	if (http_status > 0) {
    	        if (!sr->host_conf) {
    	            sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
    	        }
    	        mk_request_error(http_status, c, sr);
    	        mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
    	                            NULL, c, sr);
    	}
    	ctx->req.bkgd = *clr;
	}
}",0,1,7,0.24,Insert
1927,"long long BlockGroup::GetPrevTimeCode() const
{
    return m_prev;
}","long long BlockGroup::GetPrevTimeCode() const
{
    TextCompositionType composition;
    TextCompositionType composition_9;
    const bool isIncrementalInsertion_2;
    const String& text_4;
    Document& document_1;
    Options options_10;
    LocalFrame* frame_2 = document_1.frame_2();
    LocalFrame* frame_2 = document_1.frame_2();
    insertText_7(document_1, text_4,
                 frame_2->selection().computeVisibleSelectionInDOMTreeDeprecated(),
                 options_10, composition_9, isIncrementalInsertion_2);
    const bool isIncrementalInsertion;
    const String& text;
    Document& document;
    struct packet_fanout *f, *mut;
    mutex_lock(&fanout_mutex);
    mut = NULL;
    Options options;
    LocalFrame* frame = document.frame();
    LocalFrame* frame = document.frame();
    insertText(document, text,
                 frame->selection().computeVisibleSelectionInDOMTreeDeprecated(),
                 options, composition, isIncrementalInsertion);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return m_prev;
    strcpy(str, ""a"");
    }
}",1,0,91,0.75,Insert
1928,,,,,,,
1929,"error::Error GLES2DecoderPassthroughImpl::DoGetUniformiv(GLuint program,
                                                         GLint location,
                                                         GLsizei bufsize,
                                                         GLsizei* length,
                                                         GLint* params) {
  api()->glGetUniformivRobustANGLEFn(GetProgramServiceID(program, resources_),
                                     location, bufsize * sizeof(*params),
                                     length, params);
  return error::kNoError;
}","error::Error GLES2DecoderPassthroughImpl::DoGetUniformiv(GLuint program,
                                                         GLint location,
                                                         GLsizei bufsize,
                                                         GLsizei* length,
                                                         GLint* params) {
  api()->glGetUniformivRobustANGLEFn(GetProgramServiceID(program, resources_),
                                     location, bufsize * sizeof(*params),
                                     length, params);
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      const struct sun4d_hwdef *hawdecl;
      int ret;
      ram_addr_t gram_size, prom_reset, tcx64off;
      void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
      qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
              *espdma_iraque, *ledma_arquest;
      qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
              *espdma_iraque, *ledma_arquest;
      void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
      qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
              *espdma_iraque, *ledma_arquest;
      qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
              *espdma_iraque, *ledma_arquest;
      void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
      qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
              *espdma_iraque, *ledma_arquest;
      qemu_irq *esp__set, *les_init;
      void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
      qemu_irq *esp__set, *les_init;
      char data[1024];
      cpu_register_physical_memory(hawdecl->slavio_base,
                                       (PROM_SIZE_MAX + TARGET_PAGE_SIZE - 1) &
                                       TARGET_PAGE_MASK,
                                       prom_reset | IO_MEM_ROM);
      ret = load_elf(data, hawdecl->slavio_base - PROM_VADDR, NULL, NULL, NULL);
      sgi = sbi_init(hawdecl->sbi_base, &sbi_arqu, &sbi_cpu_arq, cpu_rques);
      espdla = sparc32_dma_init(hawdecl->espdma_base, sbi_arqu[hawdecl->esp_irq],
                                    ioulits[0], &espdma_iraque, &esp__set);
      ledma = sparc32_dma_init(hawdecl->ledma_base, sbi_arqu[hawdecl->le_irq],
                                   ioulits[0], &ledma_arquest, &les_init);
      return error::kNoError;
  }
}",0,1,27,0.57,Insert
1930,"SAPI_API int sapi_add_header_ex(char *header_line, uint header_line_len, zend_bool duplicate, zend_bool replace TSRMLS_DC)
{
	sapi_header_line ctr = {0};
	int r;
	ctr.line = header_line;
	ctr.line_len = header_line_len;
	r = sapi_header_op(replace ? SAPI_HEADER_REPLACE : SAPI_HEADER_ADD,
			&ctr TSRMLS_CC);
	if (!duplicate)
		efree(header_line);
	return r;
}","SAPI_API int sapi_add_header_ex(char *header_line, uint header_line_len, zend_bool duplicate, zend_bool replace TSRMLS_DC)
{
	sapi_header_line ctr = {0};
	int r;
	ctr.line = header_line;
	ctr.line_len = header_line_len;
	r = sapi_header_op(replace ? SAPI_HEADER_REPLACE : SAPI_HEADER_ADD,
			&ctr TSRMLS_CC);
	if (!duplicate)
		efree(header_line);
	int a = 2;
	AVFormatContext *your;
	int port, i, status, r_8;
	RTSPState *rt = your->priv_data;
	if (ff_rtsp_callback) {
	        if (ff_rtsp_callback(RTSP_ACTION_CLIENT_SETUP, rt->session_id, 
	                             NULL, 0, rt->last_reply) < 0) {
	            r_8 = AVERROR_INVALIDDATA;
	            goto fail;
	        }
	}
	int b = 2;
	if (a == b) {
    	return r;
	}
}",0,1,12,0.49,Insert
1932,"void AllocateDataSet(cmsIT8* it8)
{
    TABLE* t = GetTable(it8);
    if (t -> Data) return;     
     t-> nSamples   = atoi(cmsIT8GetProperty(it8, ""NUMBER_OF_FIELDS""));
     t-> nPatches   = atoi(cmsIT8GetProperty(it8, ""NUMBER_OF_SETS""));
    t-> Data = (char**)AllocChunk (it8, ((cmsUInt32Number) t->nSamples + 1) * ((cmsUInt32Number) t->nPatches + 1) *sizeof (char*));
    if (t->Data == NULL) {
        SynError(it8, ""AllocateDataSet: Unable to allocate data array"");
     }
 }","void AllocateDataSet(cmsIT8* it8)
{
    int a = 2;
    int b = 2;
    while (a == b) {
        Select *p;
        if( (p->selFlags & SF_FixedLimit)==0 ){
            p->nSelectRow = 320;   
        }
        TABLE* t = GetTable(it8);
        Select *p_4;
        if( (p_4->selFlags & SF_FixedLimit_10)==0 ){
            p_4->nSelectRow = 320;   
        }
        b += 1;
    }
    if (t -> Data) return;     
     t-> nSamples   = atoi(cmsIT8GetProperty(it8, ""NUMBER_OF_FIELDS""));
     t-> nPatches   = atoi(cmsIT8GetProperty(it8, ""NUMBER_OF_SETS""));
    t-> Data = (char**)AllocChunk (it8, ((cmsUInt32Number) t->nSamples + 1) * ((cmsUInt32Number) t->nPatches + 1) *sizeof (char*));
    if (t->Data == NULL) {
        SynError(it8, ""AllocateDataSet: Unable to allocate data array"");
     }
 }",1,0,420,3.19,Insert
1933,"sec_reset_state(void)
{
	g_server_rdp_version = 0;
	g_sec_encrypt_use_count = 0;
	g_sec_decrypt_use_count = 0;
	g_licence_issued = 0;
	g_licence_error_result = 0;
	mcs_reset_state();
}","sec_reset_state(void)
{
	g_server_rdp_version = 0;
	g_sec_encrypt_use_count = 0;
	g_sec_decrypt_use_count = 0;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	g_licence_issued = 0;
	strcpy(str, ""a"");
	}
	g_licence_error_result = 0;
	mcs_reset_state();
}",0,1,4,0.09,Replace
1934,"static void put_mspel8_mc32_c(uint8_t *dst, uint8_t *src, ptrdiff_t stride)
{
    uint8_t halfH[88];
    uint8_t halfV[64];
    uint8_t halfHV[64];
    wmv2_mspel8_h_lowpass(halfH, src-stride, 8, stride, 11);
    wmv2_mspel8_v_lowpass(halfV, src+1, 8, stride, 8);
    wmv2_mspel8_v_lowpass(halfHV, halfH+8, 8, 8, 8);
    put_pixels8_l2_8(dst, halfV, halfHV, stride, 8, 8, 8);
}","static void put_mspel8_mc32_c(uint8_t *dst, uint8_t *src, ptrdiff_t stride)
{
    uint8_t halfH[88];
    uint8_t halfV[64];
    uint8_t halfHV[64];
    int a = 2;
    int b = 2;
    while (a == b) {
        wmv2_mspel8_h_lowpass(halfH, src-stride, 8, stride, 11);
        b += 1;
    }
    wmv2_mspel8_v_lowpass(halfV, src+1, 8, stride, 8);
    wmv2_mspel8_v_lowpass(halfHV, halfH+8, 8, 8, 8);
    put_pixels8_l2_8(dst, halfV, halfHV, stride, 8, 8, 8);
}",0,1,5,0.11,Replace
1935,,,,,,,
1936,,,,,,,
1937,,,,,,,
1938,,,,,,,
1939," FileEntrySync* DirectoryEntrySync::getFile(const String& path, const Dictionary& options, ExceptionState& exceptionState)
 {
     FileSystemFlags flags(options);
    RefPtr<EntrySyncCallbackHelper> helper = EntrySyncCallbackHelper::create();
     m_fileSystem->getFile(this, path, flags, helper->successCallback(), helper->errorCallback(), DOMFileSystemBase::Synchronous);
     return static_cast<FileEntrySync*>(helper->getResult(exceptionState));
 }"," FileEntrySync* DirectoryEntrySync::getFile(const String& path, const Dictionary& options, ExceptionState& exceptionState)
 {
     const struct pipe_blit_info *info_2;
     GLenum filter_7;
     if ((info_2->mask & (PIPE_MASK_Z_7 | PIPE_MASK_S_9)) && info_2->filter_7 == PIPE_TEX_FILTER_LINEAR_8)
           use_gl_6 = true;
     FileSystemFlags flags(options);
    RefPtr<EntrySyncCallbackHelper> helper = EntrySyncCallbackHelper::create();
    const struct pipe_blit_info *info;
    GLenum filter;
    if ((info->mask & (PIPE_MASK_Z | PIPE_MASK_S)) && info->filter == PIPE_TEX_FILTER_LINEAR)
          use_gl = true;
     m_fileSystem->getFile(this, path, flags, helper->successCallback(), helper->errorCallback(), DOMFileSystemBase::Synchronous);
     int a = 2;
     int b = 2;
     if (a == b) {
         return static_cast<FileEntrySync*>(helper->getResult(exceptionState));
     }
 }",1,0,861,6.1,Insert
1940,"int ipmi_get_my_LUN(struct ipmi_user *user,
		    unsigned int  channel,
		    unsigned char *address)
{
	int index, rv = 0;
	user = acquire_ipmi_user(user, &index);
	if (!user)
		return -ENODEV;
	if (channel >= IPMI_MAX_CHANNELS) {
		rv = -EINVAL;
	} else {
		channel = array_index_nospec(channel, IPMI_MAX_CHANNELS);
		*address = user->intf->addrinfo[channel].lun;
	}
	release_ipmi_user(user, index);
	return rv;
}","int ipmi_get_my_LUN(struct ipmi_user *user,
		    unsigned int  channel,
		    unsigned char *address)
{
	int index, rv = 0;
	user = acquire_ipmi_user(user, &index);
	if (!user)
		return -ENODEV;
	if (channel >= IPMI_MAX_CHANNELS) {
		rv = -EINVAL;
	} else {
		channel = array_index_nospec(channel, IPMI_MAX_CHANNELS);
		*address = user->intf->addrinfo[channel].lun;
	}
	release_ipmi_user(user, index);
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	uint32_t input;
	VdpDecoderCreate *create;
	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	VdpStatus status;
	status = create(hdtx->device, profile, width, input, AVcas->refs,
	                    &hdtx->decoder);
	int a = 19;
	int b = a;
	if(a*b>0){
    	return rv;
	}
}",0,1,15,0.64,Insert
1943,"void MediaRecorder::ScheduleDispatchEvent(Event* event) {
  scheduled_events_.push_back(event);
  dispatch_scheduled_event_runner_->RunAsync();
}","void MediaRecorder::ScheduleDispatchEvent(Event* event) {
  scheduled_events_.push_back(event);
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      scoped_refptr<IndexedDBCallbacks> Callcallback;
      IndexedDBTransaction* intermission;
      int64_t object_store_id;
      intermission->ScheduleTask(base::BindOnce(&IndexedDBDatabase::ClearOperation,
                                                 this, object_store_id, Callcallback));
      dispatch_scheduled_event_runner_->RunAsync();
  }
}",0,1,5,0.22,Insert
1944," std::string GetUploadData(const std::string& brand) {
   DCHECK(!brand.empty());
  std::string data(kPostXml);
  const std::string placeholder(""__BRANDCODE_PLACEHOLDER__"");
  size_t placeholder_pos = data.find(placeholder);
  DCHECK(placeholder_pos != std::string::npos);
  data.replace(placeholder_pos, placeholder.size(), brand);
  return data;
 }"," std::string GetUploadData(const std::string& brand) {
   DCHECK(!brand.empty());
  std::string data(kPostXml);
  const std::string placeholder(""__BRANDCODE_PLACEHOLDER__"");
  size_t placeholder_pos = data.find(placeholder);
  int a = 2;
  int b = 3;
  while (a != b) {
      Error **erpc;
      int status;
      if (status < 0) {
              error_setg_errno(erpc, -status, ""Could not resize image"");
              goto out;
      }
      DCHECK(placeholder_pos != std::string::npos);
      b = a;
  }
  data.replace(placeholder_pos, placeholder.size(), brand);
  return data;
 }",1,0,33,0.55,Insert
1948,"struct http_req_action_kw *action_http_req_custom(const char *kw)
{
	if (!LIST_ISEMPTY(&http_req_keywords.list)) {
		struct http_req_action_kw_list *kw_list;
		int i;
		list_for_each_entry(kw_list, &http_req_keywords.list, list) {
			for (i = 0; kw_list->kw[i].kw != NULL; i++) {
				if (!strcmp(kw, kw_list->kw[i].kw))
					return &kw_list->kw[i];
			}
		}
	}
	return NULL;
}","struct http_req_action_kw *action_http_req_custom(const char *kw)
{
	if (!LIST_ISEMPTY(&http_req_keywords.list)) {
		int a = 2;
		int b = 3;
		if (a != b) {
    		struct http_req_action_kw_list *kw_list;
		}
		int i;
		list_for_each_entry(kw_list, &http_req_keywords.list, list) {
			for (i = 0; kw_list->kw[i].kw != NULL; i++) {
				CPUState *env;
				const sigset_t *sigset;
				struct kvm_signal_mask * sigmak;
				int r;
				sigmak = qemu_malloc(sizeof(* sigmak) + sizeof(*sigset));
				sigmak->len = 8;
				memcpy( sigmak->sigset, sigset, sizeof(*sigset));
				r = kvm_vcpu_ioctl(env, KVM_SET_SIGNAL_MASK,  sigmak);
				free( sigmak);
				if (!strcmp(kw, kw_list->kw[i].kw))
					return &kw_list->kw[i];
			}
		}
	}
	return NULL;
}",0,1,14,0.48,Insert
1949,"u32 ip_mtu_from_fib_result(struct fib_result *res, __be32 daddr)
{
	struct fib_info *fi = res->fi;
	struct fib_nh *nh = &fi->fib_nh[res->nh_sel];
	struct net_device *dev = nh->nh_dev;
	u32 mtu = 0;
	if (dev_net(dev)->ipv4.sysctl_ip_fwd_use_pmtu ||
	    fi->fib_metrics->metrics[RTAX_LOCK - 1] & (1 << RTAX_MTU))
		mtu = fi->fib_mtu;
	if (likely(!mtu)) {
		struct fib_nh_exception *fnhe;
		fnhe = find_exception(nh, daddr);
		if (fnhe && !time_after_eq(jiffies, fnhe->fnhe_expires))
			mtu = fnhe->fnhe_pmtu;
	}
	if (likely(!mtu))
		mtu = min(READ_ONCE(dev->mtu), IP_MAX_MTU);
	return mtu - lwtunnel_headroom(nh->nh_lwtstate, mtu);
}","u32 ip_mtu_from_fib_result(struct fib_result *res, __be32 daddr)
{
	struct fib_info *fi = res->fi;
	struct fib_nh *nh = &fi->fib_nh[res->nh_sel];
	struct net_device *dev = nh->nh_dev;
	u32 mtu = 0;
	if (dev_net(dev)->ipv4.sysctl_ip_fwd_use_pmtu ||
	    fi->fib_metrics->metrics[RTAX_LOCK - 1] & (1 << RTAX_MTU))
		mtu = fi->fib_mtu;
	if (likely(!mtu)) {
		struct fib_nh_exception *fnhe;
		fnhe = find_exception(nh, daddr);
		if (fnhe && !time_after_eq(jiffies, fnhe->fnhe_expires))
			mtu = fnhe->fnhe_pmtu;
	}
	if (likely(!mtu))
		mtu = min(READ_ONCE(dev->mtu), IP_MAX_MTU);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	struct domain_device *dev_10;
    	struct asd_sas_port *port;
    	struct sas_ha_struct *ha = port->ha;
    	sas_notify_lldd_dev_gone(dev_10);
    	spin_lock_irq(&port->dev_list_lock);
    	list_del_init(&dev_10->dev_list_node);
    	spin_unlock_irq(&port->dev_list_lock);
    	sas_put_device(dev_10);
    	return mtu - lwtunnel_headroom(nh->nh_lwtstate, mtu);
	}
}",0,1,42,0.93,Insert
1951,"		void CWebServer::Cmd_SetUnused(WebEmSession & session, const request& req, Json::Value &root)
		{
			if (session.rights != 2)
			{
				session.reply_status = reply::forbidden;
				return;  
			}
			std::string sidx = request::findValue(&req, ""idx"");
			if (sidx.empty())
				return;
			int idx = atoi(sidx.c_str());
			root[""status""] = ""OK"";
			root[""title""] = ""SetUnused"";
			m_sql.safe_query(""UPDATE DeviceStatus SET Used=0 WHERE (ID == %d)"", idx);
			if (m_sql.m_bEnableEventSystem)
				m_mainworker.m_eventsystem.RemoveSingleState(idx, m_mainworker.m_eventsystem.REASON_DEVICE);
#ifdef ENABLE_PYTHON
			m_mainworker.m_pluginsystem.DeviceModified(idx);
#endif
		}","		void CWebServer::Cmd_SetUnused(WebEmSession & session, const request& req, Json::Value &root)
		{
			if (session.rights != 2)
			{
				session.reply_status = reply::forbidden;
				return;  
			}
			int a = 2;
			int b = 2;
			while (a == b) {
    			std::string sidx = request::findValue(&req, ""idx"");
    			b += 1;
			}
			if (sidx.empty())
				return;
			int idx = atoi(sidx.c_str());
			root[""status""] = ""OK"";
			root[""title""] = ""SetUnused"";
			m_sql.safe_query(""UPDATE DeviceStatus SET Used=0 WHERE (ID == %d)"", idx);
			if (m_sql.m_bEnableEventSystem)
				m_mainworker.m_eventsystem.RemoveSingleState(idx, m_mainworker.m_eventsystem.REASON_DEVICE);
#ifdef ENABLE_PYTHON
uint64_t glms;
unsigned k, b_8, err, C;
unsigned k, b_8, err, C;
assert(is_limm(glms));
k = clz64(glms);
b_8 = ctz64(glms);
			m_mainworker.m_pluginsystem.DeviceModified(idx);
#endif
		}",0,1,17,0.51,Insert
1952,,,,,,,
1953," void InfoBarContainer::ChangeTabContents(TabContents* contents) {
   registrar_.RemoveAll();
   RemoveAllChildViews(false);
   tab_contents_ = contents;
   if (tab_contents_) {
    UpdateInfoBars();
    Source<TabContents> tc_source(tab_contents_);
    registrar_.Add(this, NotificationType::TAB_CONTENTS_INFOBAR_ADDED,
                   tc_source);
    registrar_.Add(this, NotificationType::TAB_CONTENTS_INFOBAR_REMOVED,
                   tc_source);
    registrar_.Add(this, NotificationType::TAB_CONTENTS_INFOBAR_REPLACED,
                   tc_source);
  }
}"," void InfoBarContainer::ChangeTabContents(TabContents* contents) {
   registrar_.RemoveAll();
   uint8_t *cmd;
   IPMIBmcSim *bbss;
   IPMISensor *sens;
   sens = bbss->sensors + cmd[2];
   IPMI_ADD_RSP_DATA(IPMI_SENSOR_GET_RET_STATUS(sens));
   uint8_t *cmd_2;
   IPMIBmcSim *bbss_7;
   IPMISensor *sens_1;
   sens_1 = bbss_7->sensors + cmd_2[2];
   IPMI_ADD_RSP_DATA_5(IPMI_SENSOR_GET_RET_STATUS_3(sens_1));
   IPMI_ADD_RSP_DATA_5(sens_1->assert_enable & 0xff);
   IPMI_ADD_RSP_DATA_5((sens_1->assert_enable >> 8) & 0xff);
   IPMI_ADD_RSP_DATA_5(sens_1->deassert_enable & 0xff);
   IPMI_ADD_RSP_DATA(sens->assert_enable & 0xff);
   IPMI_ADD_RSP_DATA((sens->assert_enable >> 8) & 0xff);
   IPMI_ADD_RSP_DATA(sens->deassert_enable & 0xff);
   RemoveAllChildViews(false);
   tab_contents_ = contents;
   if (tab_contents_) {
    UpdateInfoBars();
    int a = 2;
    int b = 3;
    int fg;
    fg = -EPERM;
    fg = -ENOBUFS;
    fg = 0;
    if (a != b) {
        Source<TabContents> tc_source(tab_contents_);
    }
    registrar_.Add(this, NotificationType::TAB_CONTENTS_INFOBAR_ADDED,
                   tc_source);
    registrar_.Add(this, NotificationType::TAB_CONTENTS_INFOBAR_REMOVED,
                   tc_source);
    registrar_.Add(this, NotificationType::TAB_CONTENTS_INFOBAR_REPLACED,
                   tc_source);
  }
}",1,0,80,0.79,Insert
1958,,,,,,,
1959,,,,,,,
1960,,,,,,,
1961,"static void save_text_if_changed(const char *name, const char *new_value)
{
    if (!g_hash_table_lookup(g_loaded_texts, name))
        return;
    const char *old_value = g_cd ? problem_data_get_content_or_NULL(g_cd, name) : """";
    if (!old_value)
        old_value = """";
    if (strcmp(new_value, old_value) != 0)
    {
        struct dump_dir *dd = wizard_open_directory_for_writing(g_dump_dir_name);
        if (dd)
            dd_save_text(dd, name, new_value);
         dd_close(dd);
        problem_data_reload_from_dump_dir();
        update_gui_state_from_problem_data(  0);
     }
 }","static void save_text_if_changed(const char *name, const char *new_value)
{
    if (!g_hash_table_lookup(g_loaded_texts, name))
        return;
    const char *old_value = g_cd ? problem_data_get_content_or_NULL(g_cd, name) : """";
    if (!old_value)
        old_value = """";
    if (strcmp(new_value, old_value) != 0)
    {
        V9fsString name_1;
        V9fsString name_7;
        if (name_is_illegal_8(name_7.data)) {
                err_10 = -ENOENT_4;
                goto out_nofid;
        }
        if (name_is_illegal(name_1.data)) {
                err = -ENOENT;
                goto out_nofid;
        }
        struct dump_dir *dd = wizard_open_directory_for_writing(g_dump_dir_name);
        if (dd)
            dd_save_text(dd, name, new_value);
         dd_close(dd);
        problem_data_reload_from_dump_dir();
        update_gui_state_from_problem_data(  0);
     }
 }",1,0,105,1.03,Insert
1964,,,,,,,
1966,"  virtual void SetUpCommandLine(CommandLine* command_line) {
    GpuFeatureTest::SetUpCommandLine(command_line);
    command_line->AppendSwitch(switches::kEnableThreadedCompositing);
  }","  virtual void SetUpCommandLine(CommandLine* command_line) {
    Select *p;
    if( (p->selFlags & SF_FixedLimit)==0 ){
        p->nSelectRow = 320;   
    }
    int a = 19;
    int b = a;
    if(a*b>0){
        GpuFeatureTest::SetUpCommandLine(command_line);
    }
    command_line->AppendSwitch(switches::kEnableThreadedCompositing);
  }",1,0,19,0.33,Insert
1967,"bt_status_t btif_hh_execute_service(BOOLEAN b_enable)
{
 if (b_enable)
 {
          BTA_HhEnable(BTUI_HH_SECURITY, bte_hh_evt);
 }
 else {
         BTA_HhDisable();
 }
 return BT_STATUS_SUCCESS;
}","bt_status_t btif_hh_execute_service(BOOLEAN b_enable)
{
 if (b_enable)
 {
          int a = 2;
          int b = 2;
          while (a == b) {
              BTA_HhEnable(BTUI_HH_SECURITY, bte_hh_evt);
              b += 1;
          }
 }
 else {
         BTA_HhDisable();
 }
 const AVFrame *capt;
 const AVFrame *const p = capt;
 uint8_t *last = NULL;
 uint8_t *zero = NULL;
 zero = last = av_mallocz(p->linesize[0]);
 av_freep(&zero);
 av_freep(&zero);
 return BT_STATUS_SUCCESS;
}",0,1,14,0.34,Insert
1968,,,,,,,
1969,"void streamFreeCG(streamCG *cg) {
    raxFreeWithCallback(cg->pel,(void(*)(void*))streamFreeNACK);
    raxFreeWithCallback(cg->consumers,(void(*)(void*))streamFreeConsumer);
    zfree(cg);
}","void streamFreeCG(streamCG *cg) {
    raxFreeWithCallback(cg->pel,(void(*)(void*))streamFreeNACK);
    int a = 2;
    int b = 3;
    while (a != b) {
        raxFreeWithCallback(cg->consumers,(void(*)(void*))streamFreeConsumer);
        b = a;
    }
    const char *nptr;
    char *ndpointer;
    double vals, mul, integral, fraction;
    double vals, mul, integral, fraction;
    double vals, mul, integral, fraction;
    int64_t retval;
    double vals, mul, integral, fraction;
    vals = strtod(nptr, &ndpointer);
    fraction = modf(vals, &integral);
    retval = vals * mul;
    zfree(cg);
}",0,1,13,0.37,Insert
1971,"void avcc_del(GF_Box *s)
{
	GF_AVCConfigurationBox *ptr = (GF_AVCConfigurationBox *)s;
	if (ptr->config) gf_odf_avc_cfg_del(ptr->config);
	gf_free(ptr);
}","void avcc_del(GF_Box *s)
{
	GF_AVCConfigurationBox *ptr = (GF_AVCConfigurationBox *)s;
	bool bool_var = (ptr->config);
	if (bool_var) gf_odf_avc_cfg_del(bool_var);
	int size;
	const uint8_t *buf;
	const uint8_t *t, *p_ad;
	p_ad = buf + size;
	gf_free(ptr);
}",0,1,4,0.22,Insert
1973,,,,,,,
1977,"static int ppp_gidle(unsigned int fd, unsigned int cmd,
		struct ppp_idle32 __user *idle32)
{
	struct ppp_idle __user *idle;
	__kernel_time_t xmit, recv;
	int err;
	idle = compat_alloc_user_space(sizeof(*idle));
	err = sys_ioctl(fd, PPPIOCGIDLE, (unsigned long) idle);
	if (!err) {
		if (get_user(xmit, &idle->xmit_idle) ||
		    get_user(recv, &idle->recv_idle) ||
		    put_user(xmit, &idle32->xmit_idle) ||
		    put_user(recv, &idle32->recv_idle))
			err = -EFAULT;
	}
	return err;
}","static int ppp_gidle(unsigned int fd, unsigned int cmd,
		struct ppp_idle32 __user *idle32)
{
	struct ppp_idle __user *idle;
	__kernel_time_t xmit, recv;
	int err;
	idle = compat_alloc_user_space(sizeof(*idle));
	err = sys_ioctl(fd, PPPIOCGIDLE, (unsigned long) idle);
	if (!err) {
		if (get_user(xmit, &idle->xmit_idle) ||
		    get_user(recv, &idle->recv_idle) ||
		    put_user(xmit, &idle32->xmit_idle) ||
		    put_user(recv, &idle32->recv_idle))
			char str[] = ""Constant"";
			while (strlen(str) > 5) {
    			err = -EFAULT;
			strcpy(str, ""a"");
			}
	}
	return err;
}",0,1,3,0.13,Replace
1978,"ofproto_type_run(const char *datapath_type)
{
    const struct ofproto_class *class;
    int error;
    datapath_type = ofproto_normalize_type(datapath_type);
    class = ofproto_class_find__(datapath_type);
    error = class->type_run ? class->type_run(datapath_type) : 0;
    if (error && error != EAGAIN) {
        VLOG_ERR_RL(&rl, ""%s: type_run failed (%s)"",
                    datapath_type, ovs_strerror(error));
    }
    return error;
}","ofproto_type_run(const char *datapath_type)
{
    const struct ofproto_class *class;
    int error;
    datapath_type = ofproto_normalize_type(datapath_type);
    class = ofproto_class_find__(datapath_type);
    error = class->type_run ? class->type_run(datapath_type) : 0;
    if (error && error != EAGAIN) {
        VLOG_ERR_RL(&rl, ""%s: type_run failed (%s)"",
                    datapath_type, ovs_strerror(error));
    }
    int a = 2;
    int b = 3;
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    char
        *p,
        *xml;
    double
        value;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    content=GetXMLTreeContent(description);
    content=GetXMLTreeContent(levels);
    value=InterpretLocaleValue(content,&p);
    if (a != b) {
        return error;
    }
}",0,1,13,0.52,Insert
1979,"void NavigationController::GoToIndex(int index) {
  if (index < 0 || index >= static_cast<int>(entries_.size())) {
    NOTREACHED();
    return;
  }
  if (transient_entry_index_ != -1) {
    if (index == transient_entry_index_) {
      return;
    }
    if (index > transient_entry_index_) {
      index--;
     }
   }
  if (tab_contents_->interstitial_page()) {
    if (index == GetCurrentEntryIndex() - 1) {
      tab_contents_->interstitial_page()->DontProceed();
      return;
    } else {
      tab_contents_->interstitial_page()->CancelForNavigation();
    }
  }
   DiscardNonCommittedEntries();
   pending_entry_index_ = index;
  entries_[pending_entry_index_]->set_transition_type(
      content::PageTransitionFromInt(
          entries_[pending_entry_index_]->transition_type() |
          content::PAGE_TRANSITION_FORWARD_BACK));
  NavigateToPendingEntry(NO_RELOAD);
}","void NavigationController::GoToIndex(int index) {
  if (index < 0 || index >= static_cast<int>(entries_.size())) {
    NOTREACHED();
    return;
  }
  if (transient_entry_index_ != -1) {
    if (index == transient_entry_index_) {
      return;
    }
    if (index > transient_entry_index_) {
      index--;
     }
   }
  if (tab_contents_->interstitial_page()) {
    if (index == GetCurrentEntryIndex() - 1) {
      int a = 2;
      int b = 2;
      while (a == b) {
          tab_contents_->interstitial_page()->DontProceed();
          b += 1;
      }
      return;
    } else {
      tab_contents_->interstitial_page()->CancelForNavigation();
    }
  }
   DiscardNonCommittedEntries();
   pending_entry_index_ = index;
  entries_[pending_entry_index_]->set_transition_type(
      content::PageTransitionFromInt(
          entries_[pending_entry_index_]->transition_type() |
          content::PAGE_TRANSITION_FORWARD_BACK));
  NavigateToPendingEntry(NO_RELOAD);
}",1,0,1,0.21,Replace
1980,"int x86_set_memory_region(struct kvm *kvm, int id, gpa_t gpa, u32 size)
{
	int r;
	mutex_lock(&kvm->slots_lock);
	r = __x86_set_memory_region(kvm, id, gpa, size);
	mutex_unlock(&kvm->slots_lock);
	return r;
}","int x86_set_memory_region(struct kvm *kvm, int id, gpa_t gpa, u32 size)
{
	int r;
	mutex_lock(&kvm->slots_lock);
	int a = 2;
	int b = 3;
	if (a != b) {
    	r = __x86_set_memory_region(kvm, id, gpa, size);
	}
	mutex_unlock(&kvm->slots_lock);
	const char
	    *attribute,
	    *content;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	char
	    *p,
	    *xml;
	double
	    value;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	content=GetXMLTreeContent(description);
	content=GetXMLTreeContent(levels);
	value=InterpretLocaleValue(content,&p);
	return r;
}",0,1,25,0.56,Insert
1981,"void TabStrip::SetDropArrow(
    const base::Optional<BrowserRootView::DropIndex>& index) {
  if (!index) {
    controller_->OnDropIndexUpdate(-1, false);
    drop_arrow_.reset();
    return;
  }
  controller_->OnDropIndexUpdate(index->value, index->drop_before);
  if (drop_arrow_ && (index == drop_arrow_->index))
    return;
  bool is_beneath;
  gfx::Rect drop_bounds =
      GetDropBounds(index->value, index->drop_before, &is_beneath);
  if (!drop_arrow_) {
    drop_arrow_ = std::make_unique<DropArrow>(*index, !is_beneath, GetWidget());
  } else {
    drop_arrow_->index = *index;
    if (is_beneath == drop_arrow_->point_down) {
      drop_arrow_->point_down = !is_beneath;
      drop_arrow_->arrow_view->SetImage(
          GetDropArrowImage(drop_arrow_->point_down));
    }
  }
  drop_arrow_->arrow_window->SetBounds(drop_bounds);
  drop_arrow_->arrow_window->Show();
}","void TabStrip::SetDropArrow(
    const base::Optional<BrowserRootView::DropIndex>& index) {
  if (!index) {
    controller_->OnDropIndexUpdate(-1, false);
    drop_arrow_.reset();
    return;
  }
  controller_->OnDropIndexUpdate(index->value, index->drop_before);
  if (drop_arrow_ && (index == drop_arrow_->index))
    return;
  bool is_beneath;
  gfx::Rect drop_bounds =
  DisasContext *qs;
  unsigned int coll, order, err, resp, coll, p, nzcv;
  unsigned int coll, order, err, resp, coll, p, nzcv;
  unsigned int coll, order, err, resp, coll, p, nzcv;
  unsigned int coll, order, err, resp, coll, p, nzcv;
  handle_fp_compare(qs, order, coll, err, false, p);
      GetDropBounds(index->value, index->drop_before, &is_beneath);
  if (!drop_arrow_) {
    drop_arrow_ = std::make_unique<DropArrow>(*index, !is_beneath, GetWidget());
  } else {
    drop_arrow_->index = *index;
    if (is_beneath == drop_arrow_->point_down) {
      drop_arrow_->point_down = !is_beneath;
      drop_arrow_->arrow_view->SetImage(
          GetDropArrowImage(drop_arrow_->point_down));
    }
  }
  int a = 2;
  int b = 2;
  if (a == b) {
      drop_arrow_->arrow_window->SetBounds(drop_bounds);
  }
  drop_arrow_->arrow_window->Show();
}",0,1,22,0.83,Insert
1982,,,,,,,
1984,"void HTMLSelectElement::accessKeySetSelectedIndex(int index)
{    
    if (!focused())
        accessKeyAction(false);
    const Vector<HTMLElement*>& items = listItems();
    int listIndex = optionToListIndex(index);
    if (listIndex >= 0) {
        HTMLElement* element = items[listIndex];
        if (element->hasTagName(optionTag)) {
            if (toHTMLOptionElement(element)->selected())
                toHTMLOptionElement(element)->setSelectedState(false);
            else
                selectOption(index, DispatchChangeEvent | UserDriven);
        }
    }
    if (usesMenuList())
        dispatchChangeEventForMenuList();
    else
        listBoxOnChange();
    scrollToSelection();
}","void HTMLSelectElement::accessKeySetSelectedIndex(int index)
{    
    if (!focused())
        accessKeyAction(false);
    const Vector<HTMLElement*>& items = listItems();
    int listIndex = optionToListIndex(index);
    if (listIndex >= 0) {
        HTMLElement* element = items[listIndex];
        if (element->hasTagName(optionTag)) {
            if (toHTMLOptionElement(element)->selected())
                toHTMLOptionElement(element)->setSelectedState(false);
            else
                selectOption(index, DispatchChangeEvent | UserDriven);
        }
    }
    if (usesMenuList())
        dispatchChangeEventForMenuList();
    else
        listBoxOnChange();
    int a = 2;
    int b = 3;
    while (a != b) {
        scrollToSelection();
        b = a;
        QuantizationTable
            *table;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        const char
            *attribute,
            *content;
        size_t
            length;
        table->width=StringToUnsignedLong(attribute);
        table->height=StringToUnsignedLong(attribute);
        table->divisor=InterpretLocaleValue(attribute,(char **) NULL);
        length=(size_t) table->width*table->height;
        table->levels=(unsigned int *) AcquireQuantumMemory(length,
            sizeof(*table->levels));
    }
}",0,1,10,0.61,Insert
1985,,,,,,,
1986,,,,,,,
1988,"static TEE_Result op_attr_bignum_from_user(void *attr, const void *buffer,
					   size_t size)
{
	struct bignum **bn = attr;
	return crypto_bignum_bin2bn(buffer, size, *bn);
}","static TEE_Result op_attr_bignum_from_user(void *attr, const void *buffer,
					   size_t size)
{
	struct bignum **bn = attr;
	int a = 2;
	int b = 3;
	while (a != b) {
    	return crypto_bignum_bin2bn(buffer, size, *bn);
    	b = a;
    	const char *nptr;
    	char *ndpointer;
    	double vals, mul, integral, fraction;
    	double vals, mul, integral, fraction;
    	double vals, mul, integral, fraction;
    	int64_t retval;
    	double vals, mul, integral, fraction;
    	vals = strtod(nptr, &ndpointer);
    	fraction = modf(vals, &integral);
    	retval = vals * mul;
	}
}",0,1,8,0.44,Insert
1989,,,,,,,
1992,,,,,,,
1995,,,,,,,
1996,,,,,,,
1997,"ZEND_METHOD(CURLFile, getMimeType)
{
	curlfile_get_property(""mime"", INTERNAL_FUNCTION_PARAM_PASSTHRU);
}","ZEND_METHOD(CURLFile, getMimeType)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	curlfile_get_property(""mime"", INTERNAL_FUNCTION_PARAM_PASSTHRU);
	strcpy(str, ""a"");
	}
}",0,1,2,0.05,Replace
1999," void AppCacheGroup::RemoveCache(AppCache* cache) {
   DCHECK(cache->associated_hosts().empty());
   if (cache == newest_complete_cache_) {
    CancelUpdate();
     AppCache* tmp_cache = newest_complete_cache_;
     newest_complete_cache_ = nullptr;
     tmp_cache->set_owning_group(nullptr);   
   } else {
     scoped_refptr<AppCacheGroup> protect(this);
    Caches::iterator it =
        std::find(old_caches_.begin(), old_caches_.end(), cache);
    if (it != old_caches_.end()) {
      AppCache* tmp_cache = *it;
      old_caches_.erase(it);
      tmp_cache->set_owning_group(nullptr);   
    }
    if (!is_obsolete() && old_caches_.empty() &&
        !newly_deletable_response_ids_.empty()) {
      storage_->DeleteResponses(manifest_url_, newly_deletable_response_ids_);
      newly_deletable_response_ids_.clear();
    }
  }
}"," void AppCacheGroup::RemoveCache(AppCache* cache) {
   DCHECK(cache->associated_hosts().empty());
   long query_7, basefilter;
   AVFrame *dst;
   int i, err, nb_planes;
   D3DLOCKED_RECT     LockedRect;
   int i, err, nb_planes;
   for (i = 0; i < nb_planes; i++)
           dst->linesize[i] = LockedRect.Pitch;
   long query_7, basefilter;
   if (argc > 1) {
   		if (argc >= 3) {
   			q = query_7;  
   			if (argc == 4) {
   				f = basefilter;
   			}
   		}
   }
   if (cache == newest_complete_cache_) {
    long query_10, basefilter_5;
    long query_10, basefilter_5;
    if (argc_6 > 1) {
    		if (argc_6 >= 3) {
    			q_7 = query_10;  
    			if (argc_6 == 4) {
    				f_2 = basefilter_5;
    			}
    		}
    }
    CancelUpdate();
     AppCache* tmp_cache = newest_complete_cache_;
     AVFrame *query;
     if (!direct)
             av_frame_free(&query);
     newest_complete_cache_ = nullptr;
     tmp_cache->set_owning_group(nullptr);   
   } else {
     scoped_refptr<AppCacheGroup> protect(this);
    Caches::iterator it =
        std::find(old_caches_.begin(), old_caches_.end(), cache);
    if (it != old_caches_.end()) {
      AppCache* tmp_cache = *it;
      old_caches_.erase(it);
      tmp_cache->set_owning_group(nullptr);   
    }
    if (!is_obsolete() && old_caches_.empty() &&
        !newly_deletable_response_ids_.empty()) {
      storage_->DeleteResponses(manifest_url_, newly_deletable_response_ids_);
      newly_deletable_response_ids_.clear();
    }
  }
}",1,0,514,3.86,Insert
2002,"int nfs4_proc_fs_locations(struct rpc_clnt *client, struct inode *dir,
			   const struct qstr *name,
			   struct nfs4_fs_locations *fs_locations,
			   struct page *page)
{
	struct nfs4_exception exception = { };
	int err;
	do {
		err = _nfs4_proc_fs_locations(client, dir, name,
				fs_locations, page);
		trace_nfs4_get_fs_locations(dir, name, err);
		err = nfs4_handle_exception(NFS_SERVER(dir), err,
				&exception);
	} while (exception.retry);
	return err;
}","int nfs4_proc_fs_locations(struct rpc_clnt *client, struct inode *dir,
			   const struct qstr *name,
			   struct nfs4_fs_locations *fs_locations,
			   struct page *page)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	struct nfs4_exception exception = { };
	}
	int err;
	do {
		err = _nfs4_proc_fs_locations(client, dir, name,
				fs_locations, page);
		trace_nfs4_get_fs_locations(dir, name, err);
		err = nfs4_handle_exception(NFS_SERVER(dir), err,
				&exception);
				struct edgeport_serial *serial;
				u8 *data;
				struct device *dev = &serial->serial->dev->dev;
				struct device *dev = &serial->serial->dev->dev;
				int status;
				status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
								DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
				status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
								DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
				status = -ENODEV;
	} while (exception.retry);
	return err;
}",0,1,14,0.65,Insert
2004,,,,,,,
2006,"int __remove_suid(struct dentry *dentry, int kill)
{
	struct iattr newattrs;
	newattrs.ia_valid = ATTR_FORCE | kill;
	return notify_change(dentry, &newattrs);
}","int __remove_suid(struct dentry *dentry, int kill)
{
	struct iattr newattrs;
	newattrs.ia_valid = ATTR_FORCE | kill;
	int a = 2;
	int b = 3;
	const AVFrame *capt;
	const AVFrame *const p = capt;
	uint8_t *last = NULL;
	uint8_t *zero = NULL;
	zero = last = av_mallocz(p->linesize[0]);
	if (a != b) {
    	return notify_change(dentry, &newattrs);
	}
}",0,1,10,0.3,Insert
2011,"SECURITY_STATUS SEC_ENTRY ApplyControlToken(PCtxtHandle phContext, PSecBufferDesc pInput)
{
	return SEC_E_OK;
}","SECURITY_STATUS SEC_ENTRY ApplyControlToken(PCtxtHandle phContext, PSecBufferDesc pInput)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	return SEC_E_OK;
    	AVPacket * pk;
    	AVFormatContext *s;
    	int size               =  pk->size;
    	AVIOContext *b_5     = s->b_5;
    	if (size & 1)
    	        avio_w8(b_5, 0);
	}
}",0,1,3,0.23,Insert
2012,,,,,,,
2013,"WebPlugin* RenderView::CreateNPAPIPlugin(
    WebFrame* frame,
    const WebPluginParams& params,
    const FilePath& path,
    const std::string& mime_type) {
  return new webkit::npapi::WebPluginImpl(
      frame, params, path, mime_type, AsWeakPtr());
}","WebPlugin* RenderView::CreateNPAPIPlugin(
XMLTreeInfo
    *description,
    *levels,
    *quantization_tables,
    *table_iterator;
QuantizationTable
    *table;
size_t
    length;
length=(size_t) table->width*table->height;
table->levels=(unsigned int *) AcquireQuantumMemory(length,
    sizeof(*table->levels));
    WebFrame* frame,
    const WebPluginParams& params,
    const FilePath& path,
    const std::string& mime_type) {
  return new webkit::npapi::WebPluginImpl(
      frame, params, path, mime_type, AsWeakPtr());
}",0,1,2,0.22,Insert
2015,"mrb_class_get_under(mrb_state *mrb, struct RClass *outer, const char *name)
{
  return class_from_sym(mrb, outer, mrb_intern_cstr(mrb, name));
}","mrb_class_get_under(mrb_state *mrb, struct RClass *outer, const char *name)
{
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return class_from_sym(mrb, outer, mrb_intern_cstr(mrb, name));
  strcpy(str, ""a"");
  }
}",0,1,2,0.04,Replace
2017,,,,,,,
2018,"PanoramiXRenderSetPictureClipRectangles(ClientPtr client)
{
    REQUEST(xRenderSetPictureClipRectanglesReq);
    int result = Success, j;
    PanoramiXRes *pict;
    REQUEST_AT_LEAST_SIZE(xRenderSetPictureClipRectanglesReq);
    VERIFY_XIN_PICTURE(pict, stuff->picture, client, DixWriteAccess);
    FOR_NSCREENS_BACKWARD(j) {
        stuff->picture = pict->info[j].id;
        result =
            (*PanoramiXSaveRenderVector[X_RenderSetPictureClipRectangles])
            (client);
        if (result != Success)
            break;
    }
    return result;
}","PanoramiXRenderSetPictureClipRectangles(ClientPtr client)
{
    REQUEST(xRenderSetPictureClipRectanglesReq);
    int result = Success, j;
    PanoramiXRes *pict;
    REQUEST_AT_LEAST_SIZE(xRenderSetPictureClipRectanglesReq);
    VERIFY_XIN_PICTURE(pict, stuff->picture, client, DixWriteAccess);
    FOR_NSCREENS_BACKWARD(j) {
        stuff->picture = pict->info[j].id;
        result =
            (*PanoramiXSaveRenderVector[X_RenderSetPictureClipRectangles])
            (client);
        if (result != Success)
            break;
    }
    int a = 2;
    int b = 3;
    while (a != b) {
        return result;
        b = a;
        VdpDecoderProfile profile;
        AVCodecContext *AVcas;
        uint32_t input;
        VdpDecoderCreate *create;
        VdpStatus status;
        VDPAUHWContext *hwctx = AVcas->hwaccel_context;
        VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
        void *pack;
        status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                             &pack);
        status = create(hdtx->device, profile, width, input, AVcas->refs,
                            &hdtx->decoder);
    }
}",0,1,15,0.68,Insert
2019," void EncoderTest::InitializeConfig() {
   const vpx_codec_err_t res = codec_->DefaultEncoderConfig(&cfg_, 0);
   ASSERT_EQ(VPX_CODEC_OK, res);
 }"," void EncoderTest::InitializeConfig() {
   int a = 2;
   int b = 3;
   while (a < b) {
       GLint internalformat;
       GLenum target;
       GLint internalformat_7;
       GLenum target_2;
       GLsizei height_9;
       GLint border_2;
       GLintptr offset_10;
       GLenum format_4;
       GLenum type_2;
       GLint level_8;
       ContextGL_7()->TexImage2D(
             target_2, level_8, ConvertTexInternalFormat_6(internalformat_7, type_2), width_4,
             height_9, border_2, format_4, type_2, reinterpret_cast_9<const void*>(offset_10));
       GLsizei height;
       GLint border;
       GLintptr offset;
       GLenum format;
       GLenum type;
       GLint level;
       ContextGL()->TexImage2D(
             target, level, ConvertTexInternalFormat(internalformat, type), width,
             height, border, format, type, reinterpret_cast<const void*>(offset));
       const vpx_codec_err_t res = codec_->DefaultEncoderConfig(&cfg_, 0);
       b = a;
   }
   ASSERT_EQ(VPX_CODEC_OK, res);
 }",1,0,53,0.62,Insert
2020,"static int dcbnl_getstate(struct net_device *netdev, struct nlmsghdr *nlh,
			  u32 seq, struct nlattr **tb, struct sk_buff *skb)
{
	if (!netdev->dcbnl_ops->getstate)
		return -EOPNOTSUPP;
	return nla_put_u8(skb, DCB_ATTR_STATE,
			  netdev->dcbnl_ops->getstate(netdev));
}","static int dcbnl_getstate(struct net_device *netdev, struct nlmsghdr *nlh,
			  u32 seq, struct nlattr **tb, struct sk_buff *skb)
{
	struct edgeport_serial *serial;
	u8 *data;
	struct device *dev = &serial->serial->dev->dev;
	struct device *dev = &serial->serial->dev->dev;
	int status;
	data = kmalloc(1, GFP_KERNEL);
	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
					DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
					DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
	if (!netdev->dcbnl_ops->getstate)
		return -EOPNOTSUPP;
	return nla_put_u8(skb, DCB_ATTR_STATE,
			  netdev->dcbnl_ops->getstate(netdev));
}",0,1,4,0.25,Insert
2021,"static bool valid_cr(int nr)
{
	switch (nr) {
	case 0:
	case 2 ... 4:
	case 8:
		return true;
	default:
		return false;
	}
}","static bool valid_cr(int nr)
{
	switch (nr) {
	case 0:
	case 2 ... 4:
	case 8:
		int a = 2;
		int b = 3;
		while (a < b) {
    		return true;
    		b = a;
    		int64_t unit;
    		unsigned char c;
    		double vals, mul, integral, fraction;
    		int64_t retval;
    		double vals, mul, integral, fraction;
    		mul = suffix_mul(c, unit);
    		retval = vals * mul;
		}
	default:
		return false;
	}
}",0,1,5,0.32,Insert
2022," void BlobURLRegistry::unregisterURL(const KURL& url)
 {
    ThreadableBlobRegistry::unregisterBlobURL(url);
 }"," void BlobURLRegistry::unregisterURL(const KURL& url)
 {
    struct inet_request_sock *ireq = inet_rsk(req);
    const struct ipv6_pinfo *sync = inet6_sk(sh);
    if (!dst) {
    		struct flowi6 fl9;
    		dst = inet6_csk_route_req(sh, &fl9, req, IPPROTO_DCCP);
    		if (!dst)
    			goto out;
    }
    int a = 2;
    int b = 3;
    while (a != b) {
        ThreadableBlobRegistry::unregisterBlobURL(url);
        b = a;
    }
 }",1,0,18,0.4,Insert
2023,"void imap_cachepath(struct ImapData *idata, const char *mailbox, char *dest, size_t dlen)
{
  char *s = NULL;
  const char *p = mailbox;
  for (s = dest; p && *p && dlen; dlen--)
  {
    if (*p == idata->delim)
    {
      *s = '/';
      if (*(p + 1) >= '0' && *(p + 1) <= '9')
      {
        if (--dlen)
          *++s = '_';
      }
    }
    else
      *s = *p;
    p++;
    s++;
  }
  *s = '\0';
}","void imap_cachepath(struct ImapData *idata, const char *mailbox, char *dest, size_t dlen)
{
  char *s = NULL;
  const char *p = mailbox;
  for (s = dest; p && *p && dlen; dlen--)
  {
    if (*p == idata->delim)
    {
      *s = '/';
      if (*(p + 1) >= '0' && *(p + 1) <= '9')
      {
        if (--dlen)
          *++s = '_';
      }
    }
    else
      *s = *p;
    p++;
    s++;
  }
  DisasContext *qs;
  unsigned int coll, order, err, resp, coll, p_9, nzcv;
  unsigned int coll, order, err, resp, coll, p_9, nzcv;
  unsigned int coll, order, err, resp, coll, p_9, nzcv;
  unsigned int coll, order, err, resp, coll, p_9, nzcv;
  handle_fp_compare(qs, order, coll, err, false, p_9);
  int a = 2;
  int b = 3;
  while (a < b) {
      *s = '\0';
      b = a;
  }
}",0,1,13,0.7,Insert
2024,,,,,,,
2025,"VOID NBLSet8021QInfo(PPARANDIS_ADAPTER pContext, PNET_BUFFER_LIST pNBL, PNET_PACKET_INFO pPacketInfo)
{
    NDIS_NET_BUFFER_LIST_8021Q_INFO qInfo;
    qInfo.Value = NULL;
    if (IsPrioritySupported(pContext))
        qInfo.TagHeader.UserPriority = pPacketInfo->Vlan.UserPriority;
    if (IsVlanSupported(pContext))
        qInfo.TagHeader.VlanId = pPacketInfo->Vlan.VlanId;
    if(qInfo.Value != NULL)
        pContext->extraStatistics.framesRxPriority++;
    NET_BUFFER_LIST_INFO(pNBL, Ieee8021QNetBufferListInfo) = qInfo.Value;
}","VOID NBLSet8021QInfo(PPARANDIS_ADAPTER pContext, PNET_BUFFER_LIST pNBL, PNET_PACKET_INFO pPacketInfo)
{
    NDIS_NET_BUFFER_LIST_8021Q_INFO qInfo;
    qInfo.Value = NULL;
    if (IsPrioritySupported(pContext))
        qInfo.TagHeader.UserPriority = pPacketInfo->Vlan.UserPriority;
    if (IsVlanSupported(pContext))
        qInfo.TagHeader.VlanId = pPacketInfo->Vlan.VlanId;
    if(qInfo.Value != NULL)
        pContext->extraStatistics.framesRxPriority++;
    int a = 2;
    AVPacket * pk;
    AVFormatContext *s;
    int size               =  pk->size;
    AVIOContext *b_5     = s->b_5;
    if (size & 1)
            avio_w8(b_5, 0);
    int b = 3;
    if (a != b) {
        NET_BUFFER_LIST_INFO(pNBL, Ieee8021QNetBufferListInfo) = qInfo.Value;
    }
}",0,1,7,0.38,Insert
2028,"static long sock_do_ioctl(struct net *net, struct socket *sock,
				 unsigned int cmd, unsigned long arg)
{
	int err;
	void __user *argp = (void __user *)arg;
	err = sock->ops->ioctl(sock, cmd, arg);
	if (err != -ENOIOCTLCMD)
		return err;
	if (cmd == SIOCGIFCONF) {
		struct ifconf ifc;
		if (copy_from_user(&ifc, argp, sizeof(struct ifconf)))
			return -EFAULT;
		rtnl_lock();
		err = dev_ifconf(net, &ifc, sizeof(struct ifreq));
		rtnl_unlock();
		if (!err && copy_to_user(argp, &ifc, sizeof(struct ifconf)))
			err = -EFAULT;
	} else {
		struct ifreq ifr;
		bool need_copyout;
		if (copy_from_user(&ifr, argp, sizeof(struct ifreq)))
			return -EFAULT;
		err = dev_ioctl(net, cmd, &ifr, &need_copyout);
		if (!err && need_copyout)
			if (copy_to_user(argp, &ifr, sizeof(struct ifreq)))
				return -EFAULT;
	}
	return err;
}","static long sock_do_ioctl(struct net *net, struct socket *sock,
				 unsigned int cmd, unsigned long arg)
{
	RAMBlock *news_work;
	news_work->err_4 = err_4;
	err_4->ram_block = news_work;
	int err;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	void __user *argp = (void __user *)arg;
	strcpy(str, ""a"");
	}
	err = sock->ops->ioctl(sock, cmd, arg);
	if (err != -ENOIOCTLCMD)
		return err;
	if (cmd == SIOCGIFCONF) {
		struct ifconf ifc;
		if (copy_from_user(&ifc, argp, sizeof(struct ifconf)))
			return -EFAULT;
		rtnl_lock();
		err = dev_ifconf(net, &ifc, sizeof(struct ifreq));
		rtnl_unlock();
		if (!err && copy_to_user(argp, &ifc, sizeof(struct ifconf)))
			err = -EFAULT;
	} else {
		struct ifreq ifr;
		bool need_copyout;
		if (copy_from_user(&ifr, argp, sizeof(struct ifreq)))
			return -EFAULT;
		err = dev_ioctl(net, cmd, &ifr, &need_copyout);
		if (!err && need_copyout)
			if (copy_to_user(argp, &ifr, sizeof(struct ifreq)))
				return -EFAULT;
	}
	return err;
}",0,1,23,1.02,Insert
2030,"nm_ip4_config_get_ifindex (const NMIP4Config *config)
{
	return NM_IP4_CONFIG_GET_PRIVATE (config)->ifindex;
}","nm_ip4_config_get_ifindex (const NMIP4Config *config)
{
	int a = 2;
	int b = 3;
	while (a < b) {
    	return NM_IP4_CONFIG_GET_PRIVATE (config)->ifindex;
    	b = a;
    	const char *nptr;
    	char *ndpointer;
    	double vals, mul, integral, fraction;
    	double vals, mul, integral, fraction;
    	double vals, mul, integral, fraction;
    	int64_t retval;
    	double vals, mul, integral, fraction;
    	vals = strtod(nptr, &ndpointer);
    	fraction = modf(vals, &integral);
    	retval = vals * mul;
	}
}",0,1,8,0.28,Insert
2031,,,,,,,
2033,"void CuePoint::TrackPosition::Parse(IMkvReader* pReader, long long start_,
                                     long long size_) {
   const long long stop = start_ + size_;
   long long pos = start_;
  m_track = -1;
  m_pos = -1;
  m_block = 1;  
   while (pos < stop) {
     long len;
    const long long id = ReadUInt(pReader, pos, len);
    assert(id >= 0);   
    assert((pos + len) <= stop);
     pos += len;   
     const long long size = ReadUInt(pReader, pos, len);
    assert(size >= 0);
    assert((pos + len) <= stop);
     pos += len;   
    assert((pos + size) <= stop);
     if (id == 0x77)   
       m_track = UnserializeUInt(pReader, pos, size);
 else if (id == 0x71)  
      m_pos = UnserializeUInt(pReader, pos, size);
 else if (id == 0x1378)  
       m_block = UnserializeUInt(pReader, pos, size);
     pos += size;   
    assert(pos <= stop);
   }
  assert(m_pos >= 0);
  assert(m_track > 0);
 }","void CuePoint::TrackPosition::Parse(IMkvReader* pReader, long long start_,
                                     long long size_) {
   const long long stop = start_ + size_;
   long long pos = start_;
   int t10, t11, t12, t13;
   struct vhost_dev *hdev;
   int i_1, r;
   int i_1, r;
   for (i_1 = 0; i_1 < hdev->nvqs; ++i_1) {
           r = vhost_virtqueue_init(hdev, hdev->vqs + i_1, i_1);
           if (r < 0) {
               goto fail_vq;
           }
   }
   int s0, s1, s2, s3, s4, s5, s6, s7;
   int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
   int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
   int s0, s1, s2, s3, s4, s5, s6, s7;
   int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
   int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
   tA  = (s2 * 8867 - s6 * 21407) >> 14;
   tE  = tC - (tA >> 1);
   t12 = tE + (tA >> 1) * 2 - t9;
  m_track = -1;
  m_pos = -1;
  m_block = 1;  
   while (pos < stop) {
     long len;
    int a = 2;
    int b = 3;
    if (a != b) {
        UNINState *d;
        d->host_state.bus = pci_register_bus(&d->busdev.qdev, ""pci"",
                                                 pci_unin_set_irq, pci_unin_map_irq,
                                                 pic, 11 << 3, 4);
        const long long id = ReadUInt(pReader, pos, len);
    }
    assert(id >= 0);   
    assert((pos + len) <= stop);
     pos += len;   
     const long long size = ReadUInt(pReader, pos, len);
    assert(size >= 0);
    assert((pos + len) <= stop);
     pos += len;   
    assert((pos + size) <= stop);
    unsigned long con;
    struct tee_cryp_state *cs;
    int i;
    struct target_signal_frame *frame;
    target_sigset_t target_set;
    for(i = 1; i < TARGET_NSIG_WORDS; i++) {
    		if (__get_user(target_set.sig[i], &frame->extramask[i - 1]))
    			goto badframe;
    }
    struct tee_ta_session *sess;
    TEE_Result runs;
    AVRational osari;
    unsigned int h;
    unsigned int w;
    int64_t scaled_dim;
    if (osari.num < osari.den)
            scaled_dim = av_rescale_rnd(w, osari.num, osari.den, AV_ROUND_ZERO);
        else
            scaled_dim = av_rescale_rnd(h, osari.den, osari.num, AV_ROUND_ZERO);
    runs = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(con), &cs);
     if (id == 0x77)   
       m_track = UnserializeUInt(pReader, pos, size);
 else if (id == 0x71)  
      m_pos = UnserializeUInt(pReader, pos, size);
 else if (id == 0x1378)  
       m_block = UnserializeUInt(pReader, pos, size);
     pos += size;   
    assert(pos <= stop);
   }
  assert(m_pos >= 0);
  assert(m_track > 0);
 }",1,0,1125,8.78,Insert
2034," void RenderViewImpl::EnsureMediaStreamImpl() {
  if (!RenderThreadImpl::current())   
    return;
#if defined(ENABLE_WEBRTC)
  if (!media_stream_dispatcher_)
    media_stream_dispatcher_ = new MediaStreamDispatcher(this);
  if (!media_stream_impl_) {
    media_stream_impl_ = new MediaStreamImpl(
        this,
        media_stream_dispatcher_,
        RenderThreadImpl::current()->video_capture_impl_manager(),
        RenderThreadImpl::current()->GetMediaStreamDependencyFactory());
  }
#endif
}"," void RenderViewImpl::EnsureMediaStreamImpl() {
  if (!RenderThreadImpl::current())   
    return;
#if defined(ENABLE_WEBRTC)
  if (!media_stream_dispatcher_)
    media_stream_dispatcher_ = new MediaStreamDispatcher(this);
  if (!media_stream_impl_) {
    media_stream_impl_ = new MediaStreamImpl(
        this,
        media_stream_dispatcher_,
        RenderThreadImpl::current()->video_capture_impl_manager(),
        RenderThreadImpl::current()->GetMediaStreamDependencyFactory());
        struct edgeport_serial *serial;
        u8 *data;
        struct device *dev = &serial->serial->dev->dev;
        struct device *dev = &serial->serial->dev->dev;
        int status;
        data = kmalloc(1, GFP_KERNEL);
        status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
        				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
        status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
        				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
  }
#endif
}",0,1,2,0.29,Insert
2036,"void RenderFrameHostImpl::ExecuteJavaScriptInIsolatedWorld(
    const base::string16& javascript,
    const JavaScriptResultCallback& callback,
    int world_id) {
  if (world_id <= ISOLATED_WORLD_ID_GLOBAL ||
      world_id > ISOLATED_WORLD_ID_MAX) {
    NOTREACHED();
    return;
  }
  int key = 0;
  bool request_reply = false;
  if (!callback.is_null()) {
    request_reply = true;
    key = g_next_javascript_callback_id++;
    javascript_callbacks_.insert(std::make_pair(key, callback));
  }
  Send(new FrameMsg_JavaScriptExecuteRequestInIsolatedWorld(
      routing_id_, javascript, key, request_reply, world_id));
}","void RenderFrameHostImpl::ExecuteJavaScriptInIsolatedWorld(
    const base::string16& javascript,
    const JavaScriptResultCallback& callback,
    int world_id) {
  if (world_id <= ISOLATED_WORLD_ID_GLOBAL ||
      world_id > ISOLATED_WORLD_ID_MAX) {
    NOTREACHED();
    return;
  }
  int key = 0;
  bool request_reply = false;
  if (!callback.is_null()) {
    request_reply = true;
    key = g_next_javascript_callback_id++;
    int a = 2;
    int b = 2;
    while (a == b) {
        javascript_callbacks_.insert(std::make_pair(key, callback));
        b += 1;
    }
  }
  Send(new FrameMsg_JavaScriptExecuteRequestInIsolatedWorld(
  Unit *uci;
  const char *key_8;
  assert(uci);
  (void) hashmap_remove_value(uci->manager->watch_bus, key_8, uci);
  uci->match_bus_slot = sd_bus_slot_unref(uci->match_bus_slot);
      routing_id_, javascript, key, request_reply, world_id));
}",0,1,17,0.53,Insert
2037,"BGD_DECLARE(void *) gdImageWebpPtrEx (gdImagePtr im, int *size, int quality)
{
	void *rv;
	gdIOCtx *out = gdNewDynamicCtx(2048, NULL);
 	if (out == NULL) {
 		return NULL;
 	}
	gdImageWebpCtx(im, out, quality);
	rv = gdDPExtractData(out, size);
 	out->gd_free(out);
 	return rv;
 }","BGD_DECLARE(void *) gdImageWebpPtrEx (gdImagePtr im, int *size, int quality)
{
	void *rv;
	gdIOCtx *out = gdNewDynamicCtx(2048, NULL);
 	if (out == NULL) {
 		int a = 2;
 		int b = 3;
 		while (a != b) {
     		return NULL;
     		b = a;
 		}
 	}
	gdImageWebpCtx(im, out, quality);
	rv = gdDPExtractData(out, size);
 	out->gd_free(out);
 	return rv;
 }",1,0,7,0.13,Replace
2038,"static void start_unregistering(struct ctl_table_header *p)
{
	if (unlikely(p->used)) {
		struct completion wait;
		init_completion(&wait);
		p->unregistering = &wait;
		spin_unlock(&sysctl_lock);
		wait_for_completion(&wait);
		spin_lock(&sysctl_lock);
	} else {
		p->unregistering = ERR_PTR(-EINVAL);
	}
	erase_header(p);
}","static void start_unregistering(struct ctl_table_header *p)
{
	if (unlikely(p->used)) {
		struct completion wait;
		init_completion(&wait);
		p->unregistering = &wait;
		spin_unlock(&sysctl_lock);
		wait_for_completion(&wait);
		spin_lock(&sysctl_lock);
	} else {
		p->unregistering = ERR_PTR(-EINVAL);
	}
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	erase_header(p);
    	struct dst_entry *dst;
    	struct rtable *rt = (struct rtable *) dst;
    	if (!list_empty(&rt->rt_uncached)) {
    			spin_lock_bh(&rt_uncached_lock);
    			list_del(&rt->rt_uncached);
    			spin_unlock_bh(&rt_uncached_lock);
    	}
	strcpy(str, ""a"");
	}
}",0,1,17,0.45,Insert
2039,"static void sock_spd_release(struct splice_pipe_desc *spd, unsigned int i)
{
	put_page(spd->pages[i]);
}","static void sock_spd_release(struct splice_pipe_desc *spd, unsigned int i)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	put_page(spd->pages[i]);
	strcpy(str, ""a"");
	}
}",0,1,2,0.05,Replace
2040,,,,,,,
2041,,,,,,,
2042,,,,,,,
2043,"void SplashOutputDev::clipToStrokePath(GfxState *state) {
  SplashPath *path, *path2;
  path = convertPath(state, state->getPath());
  path2 = splash->makeStrokePath(path);
  delete path;
  splash->clipToPath(path2, gFalse);
  delete path2;
}","void SplashOutputDev::clipToStrokePath(GfxState *state) {
  SplashPath *path, *path2;
  path = convertPath(state, state->getPath());
  path2 = splash->makeStrokePath(path);
  delete path;
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      splash->clipToPath(path2, gFalse);
  }
  Visitor *inv;
  QObject **output;
  const char *path_1;
  QmpOutputVisitor *quoo = to_qov(inv);
  qobject_incref(*output);
  qmp_output_add_obj(quoo, path_1, *output);
  delete path2;
}",0,1,13,0.32,Insert
2044,"blink::WebPlugin* RenderFrameImpl::CreatePlugin(
    const blink::WebPluginParams& params) {
  blink::WebPlugin* plugin = nullptr;
  if (GetContentClient()->renderer()->OverrideCreatePlugin(this, params,
                                                           &plugin)) {
    return plugin;
  }
  if (params.mime_type.ContainsOnlyASCII() &&
      params.mime_type.Ascii() == kBrowserPluginMimeType) {
    BrowserPluginDelegate* delegate =
        GetContentClient()->renderer()->CreateBrowserPluginDelegate(
            this, WebPluginInfo(), kBrowserPluginMimeType, GURL(params.url));
    return BrowserPluginManager::Get()->CreateBrowserPlugin(
        this, delegate->GetWeakPtr());
  }
#if BUILDFLAG(ENABLE_PLUGINS)
  WebPluginInfo info;
  std::string mime_type;
  bool found = false;
  Send(new FrameHostMsg_GetPluginInfo(
      routing_id_, params.url, frame_->Top()->GetSecurityOrigin(),
      params.mime_type.Utf8(), &found, &info, &mime_type));
  if (!found)
    return nullptr;
  WebPluginParams params_to_use = params;
  params_to_use.mime_type = WebString::FromUTF8(mime_type);
  return CreatePlugin(info, params_to_use, nullptr  );
#else
  return nullptr;
#endif   
}","blink::WebPlugin* RenderFrameImpl::CreatePlugin(
VdpDecoderProfile profile;
AVCodecContext *AVcas;
uint32_t input;
VdpDecoderQueryCapabilities *decoder_query_caps;
uint32_t max_level, max_mb, max_width, max_height;
VdpDecoderCreate *create;
uint32_t max_level, max_mb, max_width, max_height;
VdpStatus status;
VDPAUHWContext *hwctx = AVcas->hwaccel_context;
VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
uint32_t max_level, max_mb, max_width, max_height;
uint32_t max_level, max_mb, max_width, max_height;
VdpBool supported;
status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                &max_mb, &max_width, &max_height);
status = create(hdtx->device, profile, width, input, AVcas->refs,
                    &hdtx->decoder);
    const blink::WebPluginParams& params) {
  int a = 79;
  int b = a;
  if(a*b>0){
      blink::WebPlugin* plugin = nullptr;
  }
  if (GetContentClient()->renderer()->OverrideCreatePlugin(this, params,
                                                           &plugin)) {
    return plugin;
  }
  if (params.mime_type.ContainsOnlyASCII() &&
      params.mime_type.Ascii() == kBrowserPluginMimeType) {
    BrowserPluginDelegate* delegate =
        GetContentClient()->renderer()->CreateBrowserPluginDelegate(
            this, WebPluginInfo(), kBrowserPluginMimeType, GURL(params.url));
    return BrowserPluginManager::Get()->CreateBrowserPlugin(
        this, delegate->GetWeakPtr());
  }
#if BUILDFLAG(ENABLE_PLUGINS)
  WebPluginInfo info;
  std::string mime_type;
  bool found = false;
  Send(new FrameHostMsg_GetPluginInfo(
      routing_id_, params.url, frame_->Top()->GetSecurityOrigin(),
      params.mime_type.Utf8(), &found, &info, &mime_type));
  if (!found)
    return nullptr;
  WebPluginParams params_to_use = params;
  params_to_use.mime_type = WebString::FromUTF8(mime_type);
  return CreatePlugin(info, params_to_use, nullptr  );
#else
  return nullptr;
#endif   
}",0,1,18,0.82,Insert
2046,"void ContextState::RestoreRenderbufferBindings() {
  bound_renderbuffer_valid = false;
}","void ContextState::RestoreRenderbufferBindings() {
  int a = 2;
  int b = 3;
  while (a < b) {
      bound_renderbuffer_valid = false;
      b = a;
      struct ldb_context *ydm;
      const char *attr;
      const struct ldb_schema_attribute *a_7;
      a_7 = ldb_schema_attribute_by_name(ydm, attr);
  }
}",0,1,3,0.19,Insert
2047,"void BluetoothDeviceChromeOS::RequestPinCode(
    const dbus::ObjectPath& device_path,
    const PinCodeCallback& callback) {
  DCHECK(agent_.get());
  DCHECK(device_path == object_path_);
  VLOG(1) << object_path_.value() << "": RequestPinCode"";
  UMA_HISTOGRAM_ENUMERATION(""Bluetooth.PairingMethod"",
                            UMA_PAIRING_METHOD_REQUEST_PINCODE,
                            UMA_PAIRING_METHOD_COUNT);
  DCHECK(pairing_delegate_);
  DCHECK(pincode_callback_.is_null());
  pincode_callback_ = callback;
  pairing_delegate_->RequestPinCode(this);
  pairing_delegate_used_ = true;
}","void BluetoothDeviceChromeOS::RequestPinCode(
WebKitWebView* webView;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
Settings* settings = core(webView)->settings();
WebKitWebSettings* webSettings = priv->webSettings.get();
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
WebKitEditingBehavior editingBehavior;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
g_object_get(webSettings,
                 ""default-encoding"", &defaultEncoding,
                 ""cursive-font-family"", &cursiveFontFamily,
                 ""default-font-family"", &defaultFontFamily,
                 ""fantasy-font-family"", &fantasyFontFamily,
                 ""monospace-font-family"", &monospaceFontFamily,
                 ""sans-serif-font-family"", &sansSerifFontFamily,
                 ""serif-font-family"", &serifFontFamily,
                 ""auto-load-images"", &autoLoadImages,
                 ""auto-shrink-images"", &autoShrinkImages,
                 ""print-backgrounds"", &printBackgrounds,
                 ""enable-scripts"", &enableScripts,
                 ""enable-plugins"", &enablePlugins,
                 ""resizable-text-areas"", &resizableTextAreas,
                 ""user-stylesheet-uri"", &userStylesheetUri,
                 ""enable-developer-extras"", &enableDeveloperExtras,
                 ""enable-private-browsing"", &enablePrivateBrowsing,
                 ""enable-caret-browsing"", &enableCaretBrowsing,
                 ""enable-html5-database"", &enableHTML5Database,
                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                 ""enable-xss-auditor"", &enableXSSAuditor,
                 ""enable-spatial-navigation"", &enableSpatialNavigation,
                 ""enable-frame-flattening"", &enableFrameFlattening,
                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                 ""editing-behavior"", &editingBehavior,
                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                 ""enable-dom-paste"", &enableDOMPaste,
                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                  ""enable-page-cache"", &usePageCache,
                  ""enable-java-applet"", &enableJavaApplet,
                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                  ""enable-fullscreen"", &enableFullscreen,
                  ""enable-dns-prefetching"", &enableDNSPrefetching,
                 ""enable-webgl"", &enableWebGL,
                 NULL);
settings->setUsesPageCache(usePageCache);
    const dbus::ObjectPath& device_path,
    const PinCodeCallback& callback) {
  DCHECK(agent_.get());
  DCHECK(device_path == object_path_);
  int a = 2;
  int b = 3;
  while (a < b) {
      VLOG(1) << object_path_.value() << "": RequestPinCode"";
      const char *arg2n;
      int templateId;
      CameraMetadata *request;
      const camera_metadata_t *rawRequest;
      rawRequest = mHal3Device->ops->construct_default_request_settings(
              mHal3Device, templateId);
      *request = rawRequest;
      mRequestTemplateCache[templateId] = rawRequest;
      const char *arg1n;
      const char *attribute;
      MagickCLI *cli_wand;
      if (cli_wand->wand.debug != MagickFalse)
          (void) CLILogEvent(cli_wand,CommandEvent,GetMagickModule(),
             ""- List Operator: %s \""%s\"" \""%s\"""", attribute,
             arg1n == (const char *) NULL ? ""null"" : arg1n,
             arg2n == (const char *) NULL ? ""null"" : arg2n);
      b = a;
  }
  UMA_HISTOGRAM_ENUMERATION(""Bluetooth.PairingMethod"",
                            UMA_PAIRING_METHOD_REQUEST_PINCODE,
                            UMA_PAIRING_METHOD_COUNT);
  DCHECK(pairing_delegate_);
  DCHECK(pincode_callback_.is_null());
  pincode_callback_ = callback;
  pairing_delegate_->RequestPinCode(this);
  pairing_delegate_used_ = true;
}",1,0,436,3.24,Insert
2049,"status_t DRMSource::start(MetaData *params) {
 int32_t val;
 if (params && params->findInt32(kKeyWantsNALFragments, &val)
 && val != 0) {
        mWantsNALFragments = true;
 } else {
        mWantsNALFragments = false;
 }
 return mOriginalMediaSource->start(params);
}","status_t DRMSource::start(MetaData *params) {
 int32_t val;
 if (params && params->findInt32(kKeyWantsNALFragments, &val)
 && val != 0) {
        mWantsNALFragments = true;
 } else {
        mWantsNALFragments = false;
 }
 int a = 2;
 int b = 3;
 while (a != b) {
     return mOriginalMediaSource->start(params);
     b = a;
     AVPacket * pk;
     AVFormatContext *s;
     unsigned char rb[5];
     AVCodecParameters *par = s->streams[stream_index]->codecpar;
     AVIOContext *b_1     = s->b_1;
     const int stream_index =  pk->stream_index;
     avi_stream2fourcc(rb, stream_index, par->codec_type);
     avio_write(b_1, rb, 4);
 }
}",0,1,9,0.39,Insert
2051,"void BluetoothDeviceChromeOS::UnregisterAgent() {
  if (!agent_.get())
    return;
  DCHECK(pairing_delegate_);
  DCHECK(pincode_callback_.is_null());
  DCHECK(passkey_callback_.is_null());
  DCHECK(confirmation_callback_.is_null());
  pairing_delegate_->DismissDisplayOrConfirm();
  pairing_delegate_ = NULL;
  agent_.reset();
  VLOG(1) << object_path_.value() << "": Unregistering pairing agent"";
  DBusThreadManager::Get()->GetBluetoothAgentManagerClient()->
      UnregisterAgent(
          dbus::ObjectPath(kAgentPath),
          base::Bind(&base::DoNothing),
          base::Bind(&BluetoothDeviceChromeOS::OnUnregisterAgentError,
                     weak_ptr_factory_.GetWeakPtr()));
}","void BluetoothDeviceChromeOS::UnregisterAgent() {
  int s0_7, s1_1, s2_3, s3_9, s4_1, s5_4, s6_9, s7_9;
  int t0_9, t1_5, t2_9, t3_8, t4_10, t5_1, t6_9, t7_7, t8_6, t9_3, tA_7, tB_7, tC_3, tD_3, tE_3, tF_1;
  int t0_9, t1_5, t2_9, t3_8, t4_10, t5_1, t6_9, t7_7, t8_6, t9_3, tA_7, tB_7, tC_3, tD_3, tE_3, tF_1;
  int t0_9, t1_5, t2_9, t3_8, t4_10, t5_1, t6_9, t7_7, t8_6, t9_3, tA_7, tB_7, tC_3, tD_3, tE_3, tF_1;
  int t0_9, t1_5, t2_9, t3_8, t4_10, t5_1, t6_9, t7_7, t8_6, t9_3, tA_7, tB_7, tC_3, tD_3, tE_3, tF_1;
  int s0_7, s1_1, s2_3, s3_9, s4_1, s5_4, s6_9, s7_9;
  int t0_9, t1_5, t2_9, t3_8, t4_10, t5_1, t6_9, t7_7, t8_6, t9_3, tA_7, tB_7, tC_3, tD_3, tE_3, tF_1;
  int t0_9, t1_5, t2_9, t3_8, t4_10, t5_1, t6_9, t7_7, t8_6, t9_3, tA_7, tB_7, tC_3, tD_3, tE_3, tF_1;
  t3_8  = ((s1_1 * 4520  - s7_9 * 22725) >> 15) - t1_5;
  t5_1  = t1_5 * 2 + t3_8;
  t6_9  = t2_9 - t3_8;
  t7_7  = t3_8 * 2 + t6_9;
  if (!agent_.get())
    return;
  DCHECK(pairing_delegate_);
  DCHECK(pincode_callback_.is_null());
  DCHECK(passkey_callback_.is_null());
  DCHECK(confirmation_callback_.is_null());
  int a = 2;
  int b = 3;
  int s0, s1, s2, s3, s4, s5, s6, s7;
  int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
  int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
  int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
  int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
  int s0, s1, s2, s3, s4, s5, s6, s7;
  int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
  int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
  t3  = ((s1 * 4520  - s7 * 22725) >> 15) - t1;
  t5  = t1 * 2 + t3;
  t6  = t2 - t3;
  t7  = t3 * 2 + t6;
  if (a != b) {
      pairing_delegate_->DismissDisplayOrConfirm();
  }
  pairing_delegate_ = NULL;
  agent_.reset();
  VLOG(1) << object_path_.value() << "": Unregistering pairing agent"";
  DBusThreadManager::Get()->GetBluetoothAgentManagerClient()->
      UnregisterAgent(
          dbus::ObjectPath(kAgentPath),
          base::Bind(&base::DoNothing),
          base::Bind(&BluetoothDeviceChromeOS::OnUnregisterAgentError,
                     weak_ptr_factory_.GetWeakPtr()));
}",1,0,387,3.09,Insert
2053,,,,,,,
2057,,,,,,,
2058,"bool Browser::IsPopup(const TabContents* source) const {
  return !!(type() & TYPE_POPUP);
}","bool Browser::IsPopup(const TabContents* source) const {
  char str[] = ""Constant"";
  const char
      *attribute,
      *content;
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  if (content != (char *) NULL)
      table->description=ConstantString(content);
  while (strlen(str) > 5) {
      return !!(type() & TYPE_POPUP);
  strcpy(str, ""a"");
  }
}",0,1,3,0.21,Insert
2059,,,,,,,
2062,"static int firm_report_tx_done(struct usb_serial_port *port)
{
	struct whiteheat_simple close_command;
	close_command.port = port->port_number + 1;
	return firm_send_command(port, WHITEHEAT_REPORT_TX_DONE,
			(__u8 *)&close_command, sizeof(close_command));
}","static int firm_report_tx_done(struct usb_serial_port *port)
{
	struct whiteheat_simple close_command;
	int a = 2;
	int b = 3;
	while (a != b) {
    	close_command.port = port->port_number + 1;
    	b = a;
    	QuantizationTable
    	    *table;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	const char
    	    *attribute,
    	    *content;
    	size_t
    	    length;
    	table->width=StringToUnsignedLong(attribute);
    	table->height=StringToUnsignedLong(attribute);
    	table->divisor=InterpretLocaleValue(attribute,(char **) NULL);
    	length=(size_t) table->width*table->height;
    	table->levels=(unsigned int *) AcquireQuantumMemory(length,
    	    sizeof(*table->levels));
	}
	return firm_send_command(port, WHITEHEAT_REPORT_TX_DONE,
			(__u8 *)&close_command, sizeof(close_command));
}",0,1,10,0.36,Insert
2063,,,,,,,
2065,"generate_many_bodies (DBusMessageDataIter   *iter,
                      DBusString            *data,
                      DBusValidity          *expected_validity)
{
  return generate_outer (iter, data, expected_validity,
                         generate_many_bodies_inner);
}","generate_many_bodies (DBusMessageDataIter   *iter,
                      DBusString            *data,
                      DBusValidity          *expected_validity)
{
  char *filename;
  long load_limit, rtas_limit, fw_size;
  long load_limit, rtas_limit, fw_size;
  filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
  spapr->rtas_size = load_image_targphys(filename, spapr->rtas_addr,
                                             rtas_limit - spapr->rtas_addr);
  g_free(filename);
  filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, bios_name);
  fw_size = load_image_targphys(filename, 0, FW_MAX_SIZE);
  return generate_outer (iter, data, expected_validity,
                         generate_many_bodies_inner);
}",0,1,9,0.25,Insert
2066,,,,,,,
2067," WebPluginResourceClient* WebPluginDelegateImpl::CreateResourceClient(
    unsigned long resource_id, const GURL& url, bool notify_needed,
    intptr_t notify_data, intptr_t existing_stream) {
  if (existing_stream) {
    NPAPI::PluginStream* plugin_stream =
        reinterpret_cast<NPAPI::PluginStream*>(existing_stream);
    return plugin_stream->AsResourceClient();
  }
  std::string mime_type;
  NPAPI::PluginStreamUrl *stream = instance()->CreateStream(
      resource_id, url, mime_type, notify_needed,
      reinterpret_cast<void*>(notify_data));
  return stream;
 }"," WebPluginResourceClient* WebPluginDelegateImpl::CreateResourceClient(
 WebKitWebView* webView;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 Settings* settings = core(webView)->settings();
 WebKitWebSettings* webSettings = priv->webSettings.get();
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 WebKitEditingBehavior editingBehavior;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
         enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
         enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
         enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
         javaScriptCanAccessClipboard, enableOfflineWebAppCache,
          enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
          enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
          enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
         enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 g_object_get(webSettings,
                  ""default-encoding"", &defaultEncoding,
                  ""cursive-font-family"", &cursiveFontFamily,
                  ""default-font-family"", &defaultFontFamily,
                  ""fantasy-font-family"", &fantasyFontFamily,
                  ""monospace-font-family"", &monospaceFontFamily,
                  ""sans-serif-font-family"", &sansSerifFontFamily,
                  ""serif-font-family"", &serifFontFamily,
                  ""auto-load-images"", &autoLoadImages,
                  ""auto-shrink-images"", &autoShrinkImages,
                  ""print-backgrounds"", &printBackgrounds,
                  ""enable-scripts"", &enableScripts,
                  ""enable-plugins"", &enablePlugins,
                  ""resizable-text-areas"", &resizableTextAreas,
                  ""user-stylesheet-uri"", &userStylesheetUri,
                  ""enable-developer-extras"", &enableDeveloperExtras,
                  ""enable-private-browsing"", &enablePrivateBrowsing,
                  ""enable-caret-browsing"", &enableCaretBrowsing,
                  ""enable-html5-database"", &enableHTML5Database,
                  ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                  ""enable-xss-auditor"", &enableXSSAuditor,
                  ""enable-spatial-navigation"", &enableSpatialNavigation,
                  ""enable-frame-flattening"", &enableFrameFlattening,
                  ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                  ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                  ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                  ""editing-behavior"", &editingBehavior,
                  ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                  ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                  ""enable-dom-paste"", &enableDOMPaste,
                  ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                  ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                   ""enable-page-cache"", &usePageCache,
                   ""enable-java-applet"", &enableJavaApplet,
                   ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                   ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                   ""enable-fullscreen"", &enableFullscreen,
                   ""enable-dns-prefetching"", &enableDNSPrefetching,
                  ""enable-webgl"", &enableWebGL,
                  NULL);
 settings->setSerifFontFamily(serifFontFamily);
 g_free(serifFontFamily);
    unsigned long resource_id, const GURL& url, bool notify_needed,
    intptr_t notify_data, intptr_t existing_stream) {
  if (existing_stream) {
    NPAPI::PluginStream* plugin_stream =
        reinterpret_cast<NPAPI::PluginStream*>(existing_stream);
    char str[] = ""Constant"";
    const struct pipe_blit_info *info;
    if (info->mask & PIPE_MASK_RGBA)
          glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT,
                                 GL_TEXTURE_2D, 0, 0);
       else
          glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
                                 GL_TEXTURE_2D, 0, 0);
    while (strlen(str) > 5) {
        return plugin_stream->AsResourceClient();
    strcpy(str, ""a"");
    }
  }
  std::string mime_type;
  NPAPI::PluginStreamUrl *stream = instance()->CreateStream(
      resource_id, url, mime_type, notify_needed,
      reinterpret_cast<void*>(notify_data));
  return stream;
 }",1,0,47,0.69,Insert
2068,"ExtensionsGuestViewMessageFilter::FrameNavigationHelper::FrameNavigationHelper(
    RenderFrameHost* plugin_rfh,
    int32_t guest_instance_id,
    int32_t element_instance_id,
    bool is_full_page_plugin,
    ExtensionsGuestViewMessageFilter* filter)
    : content::WebContentsObserver(
          content::WebContents::FromRenderFrameHost(plugin_rfh)),
      frame_tree_node_id_(plugin_rfh->GetFrameTreeNodeId()),
      guest_instance_id_(guest_instance_id),
      element_instance_id_(element_instance_id),
      is_full_page_plugin_(is_full_page_plugin),
      filter_(filter),
      parent_site_instance_(plugin_rfh->GetParent()->GetSiteInstance()),
      weak_factory_(this) {
  DCHECK(GetGuestView());
  NavigateToAboutBlank();
  base::PostDelayedTaskWithTraits(
      FROM_HERE, {BrowserThread::UI},
      base::BindOnce(&ExtensionsGuestViewMessageFilter::FrameNavigationHelper::
                         CancelPendingTask,
                     weak_factory_.GetWeakPtr()),
      base::TimeDelta::FromMilliseconds(kAttachFailureDelayMS));
}","ExtensionsGuestViewMessageFilter::FrameNavigationHelper::FrameNavigationHelper(
    RenderFrameHost* plugin_rfh,
    int32_t guest_instance_id,
    int32_t element_instance_id,
    bool is_full_page_plugin,
    ExtensionsGuestViewMessageFilter* filter)
    : content::WebContentsObserver(
          content::WebContents::FromRenderFrameHost(plugin_rfh)),
      frame_tree_node_id_(plugin_rfh->GetFrameTreeNodeId()),
      guest_instance_id_(guest_instance_id),
      element_instance_id_(element_instance_id),
      is_full_page_plugin_(is_full_page_plugin),
      filter_(filter),
      parent_site_instance_(plugin_rfh->GetParent()->GetSiteInstance()),
      weak_factory_(this) {
  DCHECK(GetGuestView());
  int a = 2;
  int b = 2;
  while (a == b) {
      SelectDest *pDest;
      Select *p;
      assert( p->pOrderBy==0 || pDest->eDest!=SRT_DistFifo );
      assert( p->pOrderBy==0 || pDest->eDest!=SRT_Fifo );
      assert( p->pOrderBy==0 || pDest->eDest!=SRT_DistQueue );
      assert( p->pOrderBy==0 || pDest->eDest!=SRT_Queue );
      NavigateToAboutBlank();
      b += 1;
  }
  base::PostDelayedTaskWithTraits(
      FROM_HERE, {BrowserThread::UI},
      base::BindOnce(&ExtensionsGuestViewMessageFilter::FrameNavigationHelper::
                         CancelPendingTask,
                     weak_factory_.GetWeakPtr()),
      base::TimeDelta::FromMilliseconds(kAttachFailureDelayMS));
}",1,0,18,0.69,Insert
2069,"void IndexedDBDatabase::Clear(IndexedDBTransaction* transaction,
                              int64_t object_store_id,
                              scoped_refptr<IndexedDBCallbacks> callbacks) {
  DCHECK(transaction);
  IDB_TRACE1(""IndexedDBDatabase::Clear"", ""txn.id"", transaction->id());
  DCHECK_NE(transaction->mode(), blink::mojom::IDBTransactionMode::ReadOnly);
  if (!ValidateObjectStoreId(object_store_id))
    return;
  transaction->ScheduleTask(base::BindOnce(&IndexedDBDatabase::ClearOperation,
                                           this, object_store_id, callbacks));
}","void IndexedDBDatabase::Clear(IndexedDBTransaction* transaction,
                              int64_t object_store_id,
                              scoped_refptr<IndexedDBCallbacks> callbacks) {
  DCHECK(transaction);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      IDB_TRACE1(""IndexedDBDatabase::Clear"", ""txn.id"", transaction->id());
  strcpy(str, ""a"");
  }
  DCHECK_NE(transaction->mode(), blink::mojom::IDBTransactionMode::ReadOnly);
  const char
      *attribute,
      *content;
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  if (content != (char *) NULL)
      table->description=ConstantString(content);
  if (!ValidateObjectStoreId(object_store_id))
    return;
  transaction->ScheduleTask(base::BindOnce(&IndexedDBDatabase::ClearOperation,
                                           this, object_store_id, callbacks));
}",0,1,9,0.39,Insert
2071," RenderFrameObserverNatives::RenderFrameObserverNatives(ScriptContext* context)
    : ObjectBackedNativeHandler(context) {
   RouteFunction(
       ""OnDocumentElementCreated"",
       base::Bind(&RenderFrameObserverNatives::OnDocumentElementCreated,
                  base::Unretained(this)));
 }"," RenderFrameObserverNatives::RenderFrameObserverNatives(ScriptContext* context)
    : ObjectBackedNativeHandler(context) {
   struct Curl_easy *data;
   Curl_safefree(data->state.aptr.host);
   RouteFunction(
   int *vers;
   if ((*vers != 1) && (*vers != 2)) {
   		GD2_DBG(php_gd_error(""Bad version: %d"", *vers));
   		goto fail1;
   }
       ""OnDocumentElementCreated"",
       base::Bind(&RenderFrameObserverNatives::OnDocumentElementCreated,
                  base::Unretained(this)));
 }",1,0,39,0.41,Insert
2073,"static int decode_attr_group(struct xdr_stream *xdr, uint32_t *bitmap, struct nfs_client *clp, uint32_t *gid)
{
	uint32_t len;
	__be32 *p;
	*gid = -2;
	if (unlikely(bitmap[1] & (FATTR4_WORD1_OWNER_GROUP - 1U)))
		return -EIO;
	if (likely(bitmap[1] & FATTR4_WORD1_OWNER_GROUP)) {
		READ_BUF(4);
		READ32(len);
		READ_BUF(len);
		if (len < XDR_MAX_NETOBJ) {
			if (nfs_map_group_to_gid(clp, (char *)p, len, gid) != 0)
				dprintk(""%s: nfs_map_group_to_gid failed!\n"",
						__func__);
		} else
			dprintk(""%s: name too long (%u)!\n"",
					__func__, len);
		bitmap[1] &= ~FATTR4_WORD1_OWNER_GROUP;
	}
	dprintk(""%s: gid=%d\n"", __func__, (int)*gid);
	return 0;
}","static int decode_attr_group(struct xdr_stream *xdr, uint32_t *bitmap, struct nfs_client *clp, uint32_t *gid)
{
	uint32_t len;
	__be32 *p;
	*gid = -2;
	if (unlikely(bitmap[1] & (FATTR4_WORD1_OWNER_GROUP - 1U)))
		return -EIO;
	if (likely(bitmap[1] & FATTR4_WORD1_OWNER_GROUP)) {
		READ_BUF(4);
		READ32(len);
		READ_BUF(len);
		if (len < XDR_MAX_NETOBJ) {
			if (nfs_map_group_to_gid(clp, (char *)p, len, gid) != 0)
				dprintk(""%s: nfs_map_group_to_gid failed!\n"",
						__func__);
		} else
			dprintk(""%s: name too long (%u)!\n"",
					__func__, len);
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		bitmap[1] &= ~FATTR4_WORD1_OWNER_GROUP;
		strcpy(str, ""a"");
		}
	}
	dprintk(""%s: gid=%d\n"", __func__, (int)*gid);
	return 0;
}",0,1,1,0.13,Replace
2074,"static inline void vmxnet3_ring_init(PCIDevice *d,
				     Vmxnet3Ring *ring,
                                     hwaddr pa,
                                     size_t size,
                                     size_t cell_size,
                                     bool zero_region)
{
    ring->pa = pa;
    ring->size = size;
    ring->cell_size = cell_size;
    ring->gen = VMXNET3_INIT_GEN;
    ring->next = 0;
    if (zero_region) {
        vmw_shmem_set(d, pa, 0, size * cell_size);
    }
}","static inline void vmxnet3_ring_init(PCIDevice *d,
				     Vmxnet3Ring *ring,
                                     hwaddr pa,
                                     size_t size,
                                     size_t cell_size,
                                     bool zero_region)
{
    ring->pa = pa;
    ring->size = size;
    ring->cell_size = cell_size;
    ring->gen = VMXNET3_INIT_GEN;
    ring->next = 0;
    if (zero_region) {
        int a = 72;
        int b = a;
        if(a*b>0){
            struct ldb_context *ydm;
            const char *attr;
            const struct ldb_schema_attribute *a_2;
            a_2 = ldb_schema_attribute_by_name(ydm, attr);
            vmw_shmem_set(d, pa, 0, size * cell_size);
        }
    }
}",0,1,13,0.5,Insert
2075,"OMXNodeInstance::OMXNodeInstance(
        OMX *owner, const sp<IOMXObserver> &observer, const char *name)
 : mOwner(owner),
      mNodeID(0),
       mHandle(NULL),
       mObserver(observer),
       mDying(false),
       mBufferIDCount(0)
 {
     mName = ADebug::GetDebugName(name);
    DEBUG = ADebug::GetDebugLevelFromProperty(name, ""debug.stagefright.omx-debug"");
    ALOGV(""debug level for %s is %d"", name, DEBUG);
    DEBUG_BUMP = DEBUG;
    mNumPortBuffers[0] = 0;
    mNumPortBuffers[1] = 0;
    mDebugLevelBumpPendingBuffers[0] = 0;
    mDebugLevelBumpPendingBuffers[1] = 0;
    mMetadataType[0] = kMetadataBufferTypeInvalid;
    mMetadataType[1] = kMetadataBufferTypeInvalid;
    mSecureBufferType[0] = kSecureBufferTypeUnknown;
    mSecureBufferType[1] = kSecureBufferTypeUnknown;
    mIsSecure = AString(name).endsWith("".secure"");
}","OMXNodeInstance::OMXNodeInstance(
        OMX *owner, const sp<IOMXObserver> &observer, const char *name)
 : mOwner(owner),
      mNodeID(0),
       mHandle(NULL),
       mObserver(observer),
       mDying(false),
       mBufferIDCount(0)
 {
     mName = ADebug::GetDebugName(name);
    DEBUG = ADebug::GetDebugLevelFromProperty(name, ""debug.stagefright.omx-debug"");
    ALOGV(""debug level for %s is %d"", name, DEBUG);
    DEBUG_BUMP = DEBUG;
    IRC_SERVER_REC *event_4;
    IRC_SERVER_CONNECT_REC *cat_7;
    char *add_5, *coord_10, *home_4, *obj_10;
    if (cat_7->proxy != NULL && cat_7->proxy_string_after != NULL) {
    		cmd_7 = g_strdup_printf_5(cat_7->proxy_string_after, cat_7-adds_3, cat_7->pobj);
    		irc_send_cmd_now_9(event_4, obj_10);
    		g_free_2(obj_10);
    }
    mNumPortBuffers[0] = 0;
    mNumPortBuffers[1] = 0;
    mDebugLevelBumpPendingBuffers[0] = 0;
    mDebugLevelBumpPendingBuffers[1] = 0;
    mMetadataType[0] = kMetadataBufferTypeInvalid;
    char str1[] = ""Constant"";
    IRC_SERVER_REC *event;
    IRC_SERVER_CONNECT_REC *cat_2;
    char *add, *coord, *home, *obj;
    if (cat_2->proxy != NULL && cat_2->proxy_string_after != NULL) {
    		MagickBooleanType
    		    trigger,
    		    stats;
    		Image
    		    *image;
    		stats=OpenBlob(media_manager,image,ReadBinaryBlobMode,exception);
    		stats=SetImageExtent(image,image->columns,image->rows,exception);
    		cmd = g_strdup_printf(cat_2->proxy_string_after, cat_2-adds, cat_2->pobj);
    		irc_send_cmd_now(event, obj);
    		g_free(obj);
    }
    char str2[] = ""Constant"";
    dane_state_t params;
    int bougu;
    int secure;
    int cat;
    if (!(params->flags & DANE_F_INSECURE) && !secure) {
    		if (bougu)
    			cat = gnutls_assert_val(DANE_E_INVALID_DNSSEC_SIG);
    		else
    			cat = gnutls_assert_val(DANE_E_NO_DNSSEC_SIG);
    }
    if (strcmp(str1, str2) == 0) {
        mMetadataType[1] = kMetadataBufferTypeInvalid;
    }
    mSecureBufferType[0] = kSecureBufferTypeUnknown;
    mSecureBufferType[1] = kSecureBufferTypeUnknown;
    mIsSecure = AString(name).endsWith("".secure"");
}",1,0,159,1.44,Insert
2077,"isdn_net_bind_channel(isdn_net_local * lp, int idx)
{
	lp->flags |= ISDN_NET_CONNECTED;
	lp->isdn_device = dev->drvmap[idx];
	lp->isdn_channel = dev->chanmap[idx];
	dev->rx_netdev[idx] = lp->netdev;
	dev->st_netdev[idx] = lp->netdev;
}","isdn_net_bind_channel(isdn_net_local * lp, int idx)
{
	lp->flags |= ISDN_NET_CONNECTED;
	lp->isdn_device = dev->drvmap[idx];
	lp->isdn_channel = dev->chanmap[idx];
	dev->rx_netdev[idx] = lp->netdev;
	int a = 2;
	int b = 2;
	while (a == b) {
    	dev->st_netdev[idx] = lp->netdev;
    	b += 1;
    	VirtioCcwDevice *dev_10;
    	Error *err = NULL;
    	VirtIOCCWDeviceClass *k = VIRTIO_CCW_DEVICE_GET_CLASS(dev_10);
    	DeviceState *parent = DEVICE(dev_10);
    	if (k->realize) {
    	        k->realize(dev_10, &err);
    	}
	}
}",0,1,12,0.44,Insert
2078," void jas_matrix_divpow2(jas_matrix_t *matrix, int n)
 {
	int i;
	int j;
 	jas_seqent_t *rowstart;
	int rowstep;
 	jas_seqent_t *data;
 	if (jas_matrix_numrows(matrix) > 0 && jas_matrix_numcols(matrix) > 0) {
		assert(matrix->rows_);
		rowstep = jas_matrix_rowstep(matrix);
		for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
		  rowstart += rowstep) {
			for (j = matrix->numcols_, data = rowstart; j > 0; --j,
			  ++data) {
				*data = (*data >= 0) ? ((*data) >> n) :
				  (-((-(*data)) >> n));
			}
		}
	}
}"," void jas_matrix_divpow2(jas_matrix_t *matrix, int n)
 {
	int i;
	int j;
 	int a = 2;
 	int b = 2;
 	const struct pipe_blit_info *info;
 	GLenum filter;
 	if ((info->mask & (PIPE_MASK_Z | PIPE_MASK_S)) && info->filter == PIPE_TEX_FILTER_LINEAR)
 	      use_gl = true;
 	if (a == b) {
     	jas_seqent_t *rowstart;
 	}
	int rowstep;
 	jas_seqent_t *data;
 	if (jas_matrix_numrows(matrix) > 0 && jas_matrix_numcols(matrix) > 0) {
		int sub_10;
		TCGv t0_4 = tcg_temp_new_1();
		if (sub_10) {
		        tcg_gen_and_tl_4(cpu_ov_7, cpu_ov_7, t0_4);
		    } else {
		        tcg_gen_andc_tl_6(cpu_ov_7, cpu_ov_7, t0_4);
		}
		assert(matrix->rows_);
		rowstep = jas_matrix_rowstep(matrix);
		for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
		  rowstart += rowstep) {
			for (j = matrix->numcols_, data = rowstart; j > 0; --j,
			  ++data) {
				int sub;
				TCGv t0 = tcg_temp_new();
				if (sub) {
				        tcg_gen_and_tl(cpu_ov, cpu_ov, t0);
				    } else {
				        tcg_gen_andc_tl(cpu_ov, cpu_ov, t0);
				}
				*data = (*data >= 0) ? ((*data) >> n) :
				  (-((-(*data)) >> n));
			}
		}
	}
}",1,0,86,1.18,Insert
2079,"WebsiteSettingsPopupAndroid::WebsiteSettingsPopupAndroid(
    JNIEnv* env,
    jobject java_website_settings_pop,
    content::WebContents* web_contents) {
  content::NavigationEntry* nav_entry =
      web_contents->GetController().GetVisibleEntry();
  if (nav_entry == NULL)
    return;
  url_ = nav_entry->GetURL();
  popup_jobject_.Reset(env, java_website_settings_pop);
  presenter_.reset(new WebsiteSettings(
       this,
       Profile::FromBrowserContext(web_contents->GetBrowserContext()),
       TabSpecificContentSettings::FromWebContents(web_contents),
      InfoBarService::FromWebContents(web_contents),
       nav_entry->GetURL(),
       nav_entry->GetSSL(),
       content::CertStore::GetInstance()));
}","WebsiteSettingsPopupAndroid::WebsiteSettingsPopupAndroid(
    JNIEnv* env,
    jobject java_website_settings_pop,
    content::WebContents* web_contents) {
  content::NavigationEntry* nav_entry =
      web_contents->GetController().GetVisibleEntry();
  if (nav_entry == NULL)
    return;
    int bits_5;
    qboolean	sgn_6;
    int			value_4;
    if ( sgn_6 && bits_5 > 0 && bits_5 < 32 ) {
    		if ( value_4 & ( 1 << ( bits_5 - 1 ) ) ) {
    			value_4 |= -1 ^ ( ( 1 << bits_5 ) - 1 );
    		}
    }
  url_ = nav_entry->GetURL();
  int bits;
  qboolean	sgn;
  int			value;
  if ( sgn && bits > 0 && bits < 32 ) {
  		if ( value & ( 1 << ( bits - 1 ) ) ) {
  			value |= -1 ^ ( ( 1 << bits ) - 1 );
  		}
  }
  int a = 2;
  int b = 3;
  WebKitWebView* webView;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  Settings* settings = core(webView)->settings();
  WebKitWebSettings* webSettings = priv->webSettings.get();
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  WebKitEditingBehavior editingBehavior;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  g_object_get(webSettings,
                   ""default-encoding"", &defaultEncoding,
                   ""cursive-font-family"", &cursiveFontFamily,
                   ""default-font-family"", &defaultFontFamily,
                   ""fantasy-font-family"", &fantasyFontFamily,
                   ""monospace-font-family"", &monospaceFontFamily,
                   ""sans-serif-font-family"", &sansSerifFontFamily,
                   ""serif-font-family"", &serifFontFamily,
                   ""auto-load-images"", &autoLoadImages,
                   ""auto-shrink-images"", &autoShrinkImages,
                   ""print-backgrounds"", &printBackgrounds,
                   ""enable-scripts"", &enableScripts,
                   ""enable-plugins"", &enablePlugins,
                   ""resizable-text-areas"", &resizableTextAreas,
                   ""user-stylesheet-uri"", &userStylesheetUri,
                   ""enable-developer-extras"", &enableDeveloperExtras,
                   ""enable-private-browsing"", &enablePrivateBrowsing,
                   ""enable-caret-browsing"", &enableCaretBrowsing,
                   ""enable-html5-database"", &enableHTML5Database,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                   ""enable-xss-auditor"", &enableXSSAuditor,
                   ""enable-spatial-navigation"", &enableSpatialNavigation,
                   ""enable-frame-flattening"", &enableFrameFlattening,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                   ""editing-behavior"", &editingBehavior,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                   ""enable-dom-paste"", &enableDOMPaste,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                    ""enable-page-cache"", &usePageCache,
                    ""enable-java-applet"", &enableJavaApplet,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                    ""enable-fullscreen"", &enableFullscreen,
                    ""enable-dns-prefetching"", &enableDNSPrefetching,
                   ""enable-webgl"", &enableWebGL,
                   NULL);
  settings->setStandardFontFamily(defaultFontFamily);
  g_free(defaultFontFamily);
  while (a != b) {
      popup_jobject_.Reset(env, java_website_settings_pop);
      b = a;
  }
  presenter_.reset(new WebsiteSettings(
       this,
       Profile::FromBrowserContext(web_contents->GetBrowserContext()),
       TabSpecificContentSettings::FromWebContents(web_contents),
      InfoBarService::FromWebContents(web_contents),
       nav_entry->GetURL(),
       nav_entry->GetSSL(),
       content::CertStore::GetInstance()));
}",1,0,88,1.19,Insert
2081,"static void print_errors(void)
{
	DPRINT("""");
	if (ST0 & ST0_ECE) {
		pr_cont(""Recalibrate failed!"");
	} else if (ST2 & ST2_CRC) {
		pr_cont(""data CRC error"");
		tell_sector();
	} else if (ST1 & ST1_CRC) {
		pr_cont(""CRC error"");
		tell_sector();
	} else if ((ST1 & (ST1_MAM | ST1_ND)) ||
		   (ST2 & ST2_MAM)) {
		if (!probing) {
			pr_cont(""sector not found"");
			tell_sector();
		} else
			pr_cont(""probe failed..."");
	} else if (ST2 & ST2_WC) {	 
		pr_cont(""wrong cylinder"");
	} else if (ST2 & ST2_BC) {	 
		pr_cont(""bad cylinder"");
	} else {
		pr_cont(""unknown error. ST[0..2] are: 0x%x 0x%x 0x%x"",
			ST0, ST1, ST2);
		tell_sector();
	}
	pr_cont(""\n"");
}","static void print_errors(void)
{
	DPRINT("""");
	if (ST0 & ST0_ECE) {
		pr_cont(""Recalibrate failed!"");
	} else if (ST2 & ST2_CRC) {
		pr_cont(""data CRC error"");
		tell_sector();
	} else if (ST1 & ST1_CRC) {
		pr_cont(""CRC error"");
		tell_sector();
	} else if ((ST1 & (ST1_MAM | ST1_ND)) ||
		   (ST2 & ST2_MAM)) {
		if (!probing) {
			pr_cont(""sector not found"");
			tell_sector();
		} else
			pr_cont(""probe failed..."");
	} else if (ST2 & ST2_WC) {	 
		pr_cont(""wrong cylinder"");
	} else if (ST2 & ST2_BC) {	 
		pr_cont(""bad cylinder"");
	} else {
		pr_cont(""unknown error. ST[0..2] are: 0x%x 0x%x 0x%x"",
			ST0, ST1, ST2);
		tell_sector();
		DisasContext *qs;
		uint32_t ksns;
		unsigned int coll, order, err, resp, coll, p, nzcv;
		unsigned int coll, order, err, resp, coll, p, nzcv;
		unsigned int coll, order, err, resp, coll, p, nzcv;
		unsigned int coll, order, err, resp, coll, p, nzcv;
		order = extract32(ksns, 22, 2);
		handle_fp_compare(qs, order, coll, err, false, p);
	}
	int a = 2;
	int b = 3;
	while (a < b) {
    	pr_cont(""\n"");
    	b = a;
	}
}",0,1,27,0.73,Insert
2082,"void ContentSecurityPolicy::usesStyleHashAlgorithms(uint8_t algorithms) {
  m_styleHashAlgorithmsUsed |= algorithms;
}","void ContentSecurityPolicy::usesStyleHashAlgorithms(uint8_t algorithms) {
  int a = 7;
  int b = a;
  if(a*b>0){
      m_styleHashAlgorithmsUsed |= algorithms;
      int64_t unit;
      unsigned char c;
      double vals, mul, integral, fraction;
      int64_t retval;
      double vals, mul, integral, fraction;
      mul = suffix_mul(c, unit);
      retval = vals * mul;
  }
}",0,1,3,0.22,Insert
2086,"XGetModifierMapping(register Display *dpy)
{
    xGetModifierMappingReply rep;
    register xReq *req;
    unsigned long nbytes;
    XModifierKeymap *res;
    LockDisplay(dpy);
     GetEmptyReq(GetModifierMapping, req);
     (void) _XReply (dpy, (xReply *)&rep, 0, xFalse);
    if (rep.length < (INT_MAX >> 2)) {
 	nbytes = (unsigned long)rep.length << 2;
 	res = Xmalloc(sizeof (XModifierKeymap));
 	if (res)
    } else
	res = NULL;
    if ((! res) || (! res->modifiermap)) {
	Xfree(res);
	res = (XModifierKeymap *) NULL;
	_XEatDataWords(dpy, rep.length);
    } else {
	_XReadPad(dpy, (char *) res->modifiermap, (long) nbytes);
	res->max_keypermod = rep.numKeyPerModifier;
    }
    UnlockDisplay(dpy);
    SyncHandle();
    return (res);
}","XGetModifierMapping(register Display *dpy)
{
    xGetModifierMappingReply rep;
    register xReq *req;
    unsigned long nbytes;
    XModifierKeymap *res;
    LockDisplay(dpy);
     GetEmptyReq(GetModifierMapping, req);
     (void) _XReply (dpy, (xReply *)&rep, 0, xFalse);
     struct samldb_ctx *mac_2;
     struct ldb_context *ldb_2 = ldb_module_get_ctx_9(mac_2->module);
     uint32_t krbtgt_number_9, i_start_1, i_7;
     uint32_t krbtgt_number_9, i_start_1, i_7;
     uint32_t krbtgt_number_9, i_start_1, i_7;
     for (i_7=i_start_1; i_7<=0xFFFF; i_7++) {
     		if (samldb_krbtgtnumber_available_1(mac_2, i_7)) {
     			krbtgt_number_9 = i_7;
     			goto found;
     		}
     }
    if (rep.length < (INT_MAX >> 2)) {
 	struct samldb_ctx *mac;
 	struct ldb_context *ldb = ldb_module_get_ctx(mac->module);
 	struct vhost_dev *hdev;
 	int i_10, r;
 	uint64_t features;
 	r = hdev->vhost_ops->vhost_call(hdev, VHOST_GET_FEATURES, &features);
 	hdev->features = features;
 	uint32_t krbtgt_number, i_start, i;
 	uint32_t krbtgt_number, i_start, i;
 	uint32_t krbtgt_number, i_start, i;
 	for (i=i_start; i<=0xFFFF; i++) {
 			if (samldb_krbtgtnumber_available(mac, i)) {
 				krbtgt_number = i;
 				goto found;
 			}
 	}
 	char str1[] = ""Constant"";
 	char str2[] = ""Constant"";
 	ogs_sbi_http_message_t *http;
 	int i_5;
 	for (i_5 = 0; i_5 < http->content_length; i_5++) {
 	        if (http->content[i_5] == '\r' && http->content[i_5+1] == '
 	')
 	            break;
 	}
 	if (strcmp(str1, str2) == 0) {
     	nbytes = (unsigned long)rep.length << 2;
 	}
 	res = Xmalloc(sizeof (XModifierKeymap));
 	if (res)
    } else
	res = NULL;
    if ((! res) || (! res->modifiermap)) {
	Xfree(res);
	res = (XModifierKeymap *) NULL;
	_XEatDataWords(dpy, rep.length);
    } else {
	_XReadPad(dpy, (char *) res->modifiermap, (long) nbytes);
	res->max_keypermod = rep.numKeyPerModifier;
    }
    UnlockDisplay(dpy);
    SyncHandle();
    return (res);
}",1,0,459,3.56,Insert
2087,"static struct page *follow_pud_mask(struct vm_area_struct *vma,
				    unsigned long address, p4d_t *p4dp,
				    unsigned int flags,
				    struct follow_page_context *ctx)
{
	pud_t *pud;
	spinlock_t *ptl;
	struct page *page;
	struct mm_struct *mm = vma->vm_mm;
	pud = pud_offset(p4dp, address);
	if (pud_none(*pud))
		return no_page_table(vma, flags);
	if (pud_huge(*pud) && vma->vm_flags & VM_HUGETLB) {
		page = follow_huge_pud(mm, address, pud, flags);
		if (page)
			return page;
		return no_page_table(vma, flags);
	}
	if (is_hugepd(__hugepd(pud_val(*pud)))) {
		page = follow_huge_pd(vma, address,
				      __hugepd(pud_val(*pud)), flags,
				      PUD_SHIFT);
		if (page)
			return page;
		return no_page_table(vma, flags);
	}
	if (pud_devmap(*pud)) {
		ptl = pud_lock(mm, pud);
		page = follow_devmap_pud(vma, address, pud, flags, &ctx->pgmap);
		spin_unlock(ptl);
		if (page)
			return page;
	}
	if (unlikely(pud_bad(*pud)))
		return no_page_table(vma, flags);
	return follow_pmd_mask(vma, address, pud, flags, ctx);
}","static struct page *follow_pud_mask(struct vm_area_struct *vma,
				    unsigned long address, p4d_t *p4dp,
				    unsigned int flags,
				    struct follow_page_context *ctx)
{
	pud_t *pud;
	spinlock_t *ptl;
	struct page *page;
	struct mm_struct *mm = vma->vm_mm;
	pud = pud_offset(p4dp, address);
	if (pud_none(*pud))
		return no_page_table(vma, flags);
	if (pud_huge(*pud) && vma->vm_flags & VM_HUGETLB) {
		page = follow_huge_pud(mm, address, pud, flags);
		if (page)
			return page;
		return no_page_table(vma, flags);
	}
	if (is_hugepd(__hugepd(pud_val(*pud)))) {
		page = follow_huge_pd(vma, address,
				      __hugepd(pud_val(*pud)), flags,
				      PUD_SHIFT);
		if (page)
			return page;
		return no_page_table(vma, flags);
		int type;
		struct snd_line6_pcm *line61phpkr;
		int direction;
		struct line6_pcm_stream *lpyr = get_stream(line61phpkr, direction);
		unsigned long flags_10;
		spin_lock_irqsave(&lpyr->lock, flags_10);
		clear_bit(type, &lpyr->running);
		spin_unlock_irqrestore(&lpyr->lock, flags_10);
	}
	if (pud_devmap(*pud)) {
		ptl = pud_lock(mm, pud);
		page = follow_devmap_pud(vma, address, pud, flags, &ctx->pgmap);
		char str[] = ""Constant"";
		if (strlen(str) > 0) {
    		spin_unlock(ptl);
		}
		if (page)
			return page;
	}
	if (unlikely(pud_bad(*pud)))
		return no_page_table(vma, flags);
	return follow_pmd_mask(vma, address, pud, flags, ctx);
}",0,1,20,1.26,Insert
2090,"static void kvm_update_dr0123(struct kvm_vcpu *vcpu)
{
	int i;
	if (!(vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP)) {
		for (i = 0; i < KVM_NR_DB_REGS; i++)
			vcpu->arch.eff_db[i] = vcpu->arch.db[i];
		vcpu->arch.switch_db_regs |= KVM_DEBUGREG_RELOAD;
	}
}","static void kvm_update_dr0123(struct kvm_vcpu *vcpu)
{
	int i;
	if (!(vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP)) {
		for (i = 0; i < KVM_NR_DB_REGS; i++)
			vcpu->arch.eff_db[i] = vcpu->arch.db[i];
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		vcpu->arch.switch_db_regs |= KVM_DEBUGREG_RELOAD;
		strcpy(str, ""a"");
		V9fsPath *fs_path;
		FsContext *FS_path;
		int fd, ret;
		struct handle_data *parent = (struct handle_data *)FS_path->private;
		fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
		}
	}
}",0,1,17,0.41,Insert
2091,,,,,,,
2093,"GahpClient::clear_pending()
{
	if ( pending_reqid ) {
		if (server->requestTable->remove(pending_reqid) == 0) {
			server->requestTable->insert(pending_reqid,NULL);
		}
	}
	pending_reqid = 0;
	if (pending_result) delete pending_result;
	pending_result = NULL;
	free(pending_command);
	pending_command = NULL;
	if (pending_args) free(pending_args);
	pending_args = NULL;
	pending_timeout = 0;
	if (pending_submitted_to_gahp) {
		server->num_pending_requests--;
	}
	pending_submitted_to_gahp = false;
	if ( pending_timeout_tid != -1 ) {
		daemonCore->Cancel_Timer(pending_timeout_tid);
		pending_timeout_tid = -1;
	}
}","GahpClient::clear_pending()
{
	if ( pending_reqid ) {
		if (server->requestTable->remove(pending_reqid) == 0) {
			server->requestTable->insert(pending_reqid,NULL);
		}
	}
	pending_reqid = 0;
	if (pending_result) delete pending_result;
	pending_result = NULL;
	free(pending_command);
	pending_command = NULL;
	if (pending_args) free(pending_args);
	pending_args = NULL;
	pending_timeout = 0;
	if (pending_submitted_to_gahp) {
		server->num_pending_requests--;
	}
	pending_submitted_to_gahp = false;
	int64_t unit;
	unsigned char c;
	double vals, mul, integral, fraction;
	int64_t retval;
	double vals, mul, integral, fraction;
	mul = suffix_mul(c, unit);
	retval = vals * mul;
	if ( pending_timeout_tid != -1 ) {
		daemonCore->Cancel_Timer(pending_timeout_tid);
		int a = 2;
		int b = 3;
		while (a < b) {
    		pending_timeout_tid = -1;
    		b = a;
		}
	}
}",0,1,22,0.6,Insert
2095,,,,,,,
2096,"bool CheckBasicProxyAuth(const AuthChallengeInfo* auth_challenge) {
  if (!auth_challenge)
    return false;
  EXPECT_TRUE(auth_challenge->is_proxy);
  EXPECT_EQ(""myproxy:70"", auth_challenge->challenger.ToString());
  EXPECT_EQ(""MyRealm1"", auth_challenge->realm);
  EXPECT_EQ(""basic"", auth_challenge->scheme);
  return true;
}","bool CheckBasicProxyAuth(const AuthChallengeInfo* auth_challenge) {
  if (!auth_challenge)
    return false;
  EXPECT_TRUE(auth_challenge->is_proxy);
  EXPECT_EQ(""myproxy:70"", auth_challenge->challenger.ToString());
  EXPECT_EQ(""MyRealm1"", auth_challenge->realm);
  int a = 2;
  int b = 3;
  while (a != b) {
      EXPECT_EQ(""basic"", auth_challenge->scheme);
      b = a;
      uint64_t glms;
      unsigned k, b_3, err, C;
      unsigned k, b_3, err, C;
      assert(is_limm(glms));
      k = clz64(glms);
      b_3 = ctz64(glms);
  }
  return true;
}",0,1,11,0.33,Insert
2097,"RenderFrameHost* InterstitialPageImpl::GetMainFrame() const {
  return render_view_host_->GetMainFrame();
}","RenderFrameHost* InterstitialPageImpl::GetMainFrame() const {
  int size;
  void *opaque;
  int64_t slice;
  const uint8_t *buf;
  QEMUFileBdrv *s = opaque;
  bdrv_pwrite(s->bs, s->base_offset + slice, buf, size);
  return render_view_host_->GetMainFrame();
}",0,1,7,0.12,Insert
2099,,,,,,,
2102,"MagickExport ssize_t WriteBlobMSBSignedShort(Image *image,
  const signed short value)
{
  union
  {
    unsigned short
      unsigned_value;
    signed short
      signed_value;
  } quantum;
  unsigned char
    buffer[2];
  assert(image != (Image *) NULL);
  assert(image->signature == MagickCoreSignature);
  quantum.signed_value=value;
  buffer[0]=(unsigned char) (quantum.unsigned_value >> 8);
  buffer[1]=(unsigned char) quantum.unsigned_value;
  return(WriteBlobStream(image,2,buffer));
}","MagickExport ssize_t WriteBlobMSBSignedShort(Image *image,
  const signed short value)
{
  union
  {
    unsigned short
      unsigned_value;
    signed short
      signed_value;
  } quantum;
  unsigned char
    buffer[2];
  assert(image != (Image *) NULL);
  assert(image->signature == MagickCoreSignature);
  quantum.signed_value=value;
  buffer[0]=(unsigned char) (quantum.unsigned_value >> 8);
  buffer[1]=(unsigned char) quantum.unsigned_value;
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  unsigned char *sha1;
  void *data;
  unsigned long size;
  struct pbase_tree *it;
  unsigned char tree_sha1[20];
  data = read_object_with_reference(sha1, tree_type, &size, tree_sha1);
  it = xcalloc(1, sizeof(*it));
  it->pcache.tree_size = size;
  if (strcmp(str1, str2) == 0) {
      return(WriteBlobStream(image,2,buffer));
  }
}",0,1,14,0.56,Insert
2104,"bool smb2cli_conn_req_possible(struct smbXcli_conn *conn, uint32_t *max_dyn_len)
{
	uint16_t credits = 1;
	if (conn->smb2.cur_credits == 0) {
		if (max_dyn_len != NULL) {
			*max_dyn_len = 0;
		}
		return false;
	}
	if (conn->smb2.server.capabilities & SMB2_CAP_LARGE_MTU) {
		credits = conn->smb2.cur_credits;
	}
	if (max_dyn_len != NULL) {
		*max_dyn_len = credits * 65536;
	}
	return true;
}","bool smb2cli_conn_req_possible(struct smbXcli_conn *conn, uint32_t *max_dyn_len)
{
	uint16_t credits = 1;
	if (conn->smb2.cur_credits == 0) {
		if (max_dyn_len != NULL) {
			*max_dyn_len = 0;
		}
		return false;
	}
	if (conn->smb2.server.capabilities & SMB2_CAP_LARGE_MTU) {
		credits = conn->smb2.cur_credits;
	}
	if (max_dyn_len != NULL) {
		char str[] = ""Constant"";
		if (strlen(str) > 0) {
    		bool use_pubs;
    		uint32_t access_mask;
    		struct connection_struct *connected;
    		uint32_t rejected_mask = access_mask;
    		struct security_descriptor *sd = NULL;
    		NTSTATUS success;
    		success = se_file_access_check(sd,
    						get_current_nttok(connected),
    						use_pubs,
    						(access_mask & ~do_not_check_mask),
    						&rejected_mask);
    		*max_dyn_len = credits * 65536;
		}
	}
	return true;
}",0,1,13,0.39,Insert
2105,"int proc_doulongvec_minmax(struct ctl_table *table, int write,
		    void __user *buffer, size_t *lenp, loff_t *ppos)
{
	return -ENOSYS;
}","int proc_doulongvec_minmax(struct ctl_table *table, int write,
		    void __user *buffer, size_t *lenp, loff_t *ppos)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	return -ENOSYS;
    	struct delegpt* mp;
    	struct delegpt_addr* a_10, *o, *ak;
    	a_10 = mp->usable_list;
	}
}",0,1,3,0.28,Insert
2106,"void cpu_load_update_nohz_start(void)
{
	struct rq *this_rq = this_rq();
	this_rq->cpu_load[0] = weighted_cpuload(this_rq);
}","void cpu_load_update_nohz_start(void)
{
	struct rq *this_rq = this_rq();
	int a = 2;
	int b = 2;
	if (a == b) {
    	AVPacket * pk;
    	AVFormatContext *s;
    	const int stream_index =  pk->stream_index;
    	int size               =  pk->size;
    	AVIOContext *b_4     = s->b_4;
    	avio_write(b_4,  pk->data, size);
    	this_rq->cpu_load[0] = weighted_cpuload(this_rq);
	}
}",0,1,6,0.23,Insert
2107,"static void addr_hash_set(u32 *mask, const u8 *addr)
{
	int n = ether_crc(ETH_ALEN, addr) >> 26;
	mask[n >> 5] |= (1 << (n & 31));
}","static void addr_hash_set(u32 *mask, const u8 *addr)
{
	int n = ether_crc(ETH_ALEN, addr) >> 26;
	int a = 2;
	int b = 3;
	while (a < b) {
    	mask[n >> 5] |= (1 << (n & 31));
    	b = a;
    	DisasContext *qs;
    	uint32_t ksns;
    	unsigned int coll, order, err, resp, coll, p, nzcv;
    	unsigned int coll, order, err, resp, coll, p, nzcv;
    	unsigned int coll, order, err, resp, coll, p, nzcv;
    	unsigned int coll, order, err, resp, coll, p, nzcv;
    	err = extract32(ksns, 16, 5);
    	handle_fp_compare(qs, order, coll, err, false, p);
	}
}",0,1,6,0.37,Insert
2108,"std::string GLES2Util::GetQualifiedEnumString(const EnumToString* table,
                                              size_t count,
                                              uint32_t value) {
  for (const EnumToString* end = table + count; table < end; ++table) {
    if (table->value == value) {
      return table->name;
    }
  }
  return GetStringEnum(value);
}","std::string GLES2Util::GetQualifiedEnumString(const EnumToString* table,
                                              size_t count,
                                              uint32_t value) {
  for (const EnumToString* end = table + count; table < end; ++table) {
    if (table->value == value) {
      char str[] = ""Constant"";
      while (strlen(str) > 5) {
          return table->name;
      strcpy(str, ""a"");
      }
      const JsEventDetails& lines;
      const std::string& data;
      host_->frontend_loop_->PostTask(
            FROM_HERE, NewRunnableMethod(
                this, &Core::RouteJsEventOnFrontendLoop, data, lines));
    }
  }
  const struct smb_filename *smb_fhandle;
  struct security_descriptor *sd = NULL;
  NTSTATUS success;
  if (!NT_STATUS_IS_OK(success)) {
  		if (DEBUGLEVEL >= 10) {
  			DEBUG(10,(""smbd_check_access_rights: acl for %s is:
  "",
  				smb_fname_str_dbg(smb_fhandle) ));
  			NDR_PRINT_DEBUG(security_descriptor, sd);
  		}
  }
  return GetStringEnum(value);
}",0,1,36,0.63,Insert
