Index,Original Code,Adversarial Code,True Label,Adv Label,Query Times,Time Cost,Type
2,,,,,,,0
3,,,,,,,0
4,,,,,,,0
5,"void CrosLibrary::TestApi::SetBrightnessLibrary(
    BrightnessLibrary* library, bool own) {
  library_->brightness_lib_.SetImpl(library, own);
}
","void CrosLibrary::TestApi::SetBrightnessLibrary(
    BrightnessLibrary* library, bool own) {
  QList *type;
  QListEntry *event;
  QLIST_FOREACH_ENTRY(type, event)
  int a = 85;
  int b = a
  if(a*b>0){
      library_->brightness_lib_.SetImpl(library, own);
  }
}
",1,0,8,0.59,Insert
6,,,,,,,0
9,,,,,,,0
11,,,,,,,0
12," image_transform_png_set_expand_add(image_transform *this,
    PNG_CONST image_transform **that, png_byte colour_type, png_byte bit_depth)
 {
    UNUSED(bit_depth)

 this->next = *that;
 *that = this;

 /* 'expand' should do nothing for RGBA or GA input - no tRNS and the bit
    * depth is at least 8 already.
    */
 return (colour_type & PNG_COLOR_MASK_ALPHA) == 0;
}
"," image_transform_png_set_expand_add(image_transform *this,
    PNG_CONST image_transform **that, png_byte colour_type, png_byte bit_depth)
 {
    int a = 2;
    int b = 3;
    while (a < b) {
        UNUSED(bit_depth)
        b = a;
        char* db;
        char *table;
        char       query[QUERY_LENGTH];
        FILE       *sql24writer= md_result_file;
        char       *resultingquery, *opt_quoted_table;
        DBUG_ENTER(""get_view_structure"");
        verbose_msg(""-- Retrieving view structure for table %s...
        "", table);
        print_comment(sql24writer, 0,
                        ""
        --
        -- Final view structure for view %s
        --
        "",
                        resultingquery);
        my_snprintf(query, sizeof(query),
                      ""SELECT CHECK_OPTION, DEFINER, SECURITY_TYPE, ""
                      ""       CHARACTER_SET_CLIENT, COLLATION_CONNECTION ""
                      ""FROM information_schema.views ""
                      ""WHERE table_name=\""%s\"" AND table_schema=\""%s\"""", table, db);
    }

 this->next = *that;
 *that = this;

 /* 'expand' should do nothing for RGBA or GA input - no tRNS and the bit
    * depth is at least 8 already.
    */
 return (colour_type & PNG_COLOR_MASK_ALPHA) == 0;
}
",1,0,31,0.68,Insert
14,,,,,,,0
15,,,,,,,0
16,"void SyncBackendHost::StartConfiguration(Callback0::Type* callback) {
  core_thread_.message_loop()->PostTask(FROM_HERE, NewRunnableMethod(
    core_.get(),&SyncBackendHost::Core::DoStartConfiguration, callback));
}
","void SyncBackendHost::StartConfiguration(Callback0::Type* callback) {
  int a = 2;
  int b = 3;
  if (a != b) {
      core_thread_.message_loop()->PostTask(FROM_HERE, NewRunnableMethod(
  }
    core_.get(),&SyncBackendHost::Core::DoStartConfiguration, callback));
}
",0,0,1,0.14,Replace
17,,,,,,,0
18,,,,,,,0
19,"void SyncBackendHost::Core::RouteJsEvent(
    const std::string& name, const JsEventDetails& details) {
  host_->frontend_loop_->PostTask(
      FROM_HERE, NewRunnableMethod(
          this, &Core::RouteJsEventOnFrontendLoop, name, details));
}
","void SyncBackendHost::Core::RouteJsEvent(
    const std::string& name, const JsEventDetails& details) {
  int a = 2;
  int b = 2;
  while (a == b) {
      host_->frontend_loop_->PostTask(
      b += 1;
  }
      FROM_HERE, NewRunnableMethod(
          this, &Core::RouteJsEventOnFrontendLoop, name, details));
}
",0,0,1,0.25,Replace
20," static inline void set_socket_blocking(int s, int blocking)
 {
     int opts;
    opts = fcntl(s, F_GETFL);
     if (opts<0) APPL_TRACE_ERROR(""set blocking (%s)"", strerror(errno));
     if(blocking)
         opts &= ~O_NONBLOCK;
     else opts |= O_NONBLOCK;
    if (fcntl(s, F_SETFL, opts) < 0)
         APPL_TRACE_ERROR(""set blocking (%s)"", strerror(errno));
 }
"," static inline void set_socket_blocking(int s, int blocking)
 {
     int opts;
    opts = fcntl(s, F_GETFL);
     if (opts<0) APPL_TRACE_ERROR(""set blocking (%s)"", strerror(errno));
     if(blocking)
         opts &= ~O_NONBLOCK;
     else opts |= O_NONBLOCK;
    if (fcntl(s, F_SETFL, opts) < 0)
         string str = ""Constant"";
         while (strlen(str) > 5) {
             APPL_TRACE_ERROR(""set blocking (%s)"", strerror(errno));
         str = ""a"";
         WebKitWebView* webView;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         Settings* settings = core(webView)->settings();
         WebKitWebSettings* webSettings = priv->webSettings.get();
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         WebKitEditingBehavior editingBehavior;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         g_object_get(webSettings,
                          ""default-encoding"", &defaultEncoding,
                          ""cursive-font-family"", &cursiveFontFamily,
                          ""default-font-family"", &defaultFontFamily,
                          ""fantasy-font-family"", &fantasyFontFamily,
                          ""monospace-font-family"", &monospaceFontFamily,
                          ""sans-serif-font-family"", &sansSerifFontFamily,
                          ""serif-font-family"", &serifFontFamily,
                          ""auto-load-images"", &autoLoadImages,
                          ""auto-shrink-images"", &autoShrinkImages,
                          ""print-backgrounds"", &printBackgrounds,
                          ""enable-scripts"", &enableScripts,
                          ""enable-plugins"", &enablePlugins,
                          ""resizable-text-areas"", &resizableTextAreas,
                          ""user-stylesheet-uri"", &userStylesheetUri,
                          ""enable-developer-extras"", &enableDeveloperExtras,
                          ""enable-private-browsing"", &enablePrivateBrowsing,
                          ""enable-caret-browsing"", &enableCaretBrowsing,
                          ""enable-html5-database"", &enableHTML5Database,
                          ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                          ""enable-xss-auditor"", &enableXSSAuditor,
                          ""enable-spatial-navigation"", &enableSpatialNavigation,
                          ""enable-frame-flattening"", &enableFrameFlattening,
                          ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                          ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                          ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                          ""editing-behavior"", &editingBehavior,
                          ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                          ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                          ""enable-dom-paste"", &enableDOMPaste,
                          ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                          ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                           ""enable-page-cache"", &usePageCache,
                           ""enable-java-applet"", &enableJavaApplet,
                           ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                           ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                           ""enable-fullscreen"", &enableFullscreen,
                           ""enable-dns-prefetching"", &enableDNSPrefetching,
                          ""enable-webgl"", &enableWebGL,
                          NULL);
         settings->setAllowUniversalAccessFromFileURLs(enableUniversalAccessFromFileURI);
         }
 }
",1,0,35,1.79,Insert
21,"bool IsFormSubmit(const NavigationEntry* entry) {
  return (ui::PageTransitionStripQualifier(entry->GetTransitionType()) ==
          ui::PAGE_TRANSITION_FORM_SUBMIT);
}
","bool IsFormSubmit(const NavigationEntry* entry) {
  int a = 2;
  int b = 2;
  if (a == b) {
      return (ui::PageTransitionStripQualifier(entry->GetTransitionType()) ==
  }
          ui::PAGE_TRANSITION_FORM_SUBMIT);
}
",0,0,1,0.14,Replace
22,,,,,,,0
23,,,,,,,0
24,,,,,,,0
25," SPL_METHOD(RecursiveDirectoryIterator, getSubPath)
 {
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}

	if (intern->u.dir.sub_path) {
		RETURN_STRINGL(intern->u.dir.sub_path, intern->u.dir.sub_path_len, 1);
	} else {
		RETURN_STRINGL("""", 0, 1);
	}
}
"," SPL_METHOD(RecursiveDirectoryIterator, getSubPath)
 {
 	int r;
 	bool backend_kernel = options->backend_type == VHOST_BACKEND_TYPE_KERNEL;
 	struct vhost_net *net = g_malloc(sizeof *net);
 	net->nc = options->net_backend;
 	r = vhost_dev_init(&net->dev, options->opaque,
 	                       options->backend_type, options->force);
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}

	if (intern->u.dir.sub_path) {
		RETURN_STRINGL(intern->u.dir.sub_path, intern->u.dir.sub_path_len, 1);
		struct wiphy *wiphy;
		struct ieee80211_local *local = wiphy_priv(wiphy);
		struct sta_info *sta;
		int err;
		if (err) {
				sta_info_free(local, sta);
				return err;
		}
	} else {
		RETURN_STRINGL("""", 0, 1);
		SARRAY      *all, *salirst;
		char        *fin, *seq, *tmpf, *pprestanding, *outprotos, *protistar;
		sarrayAddString(all, (char *)""extern \""C\"" {"", L_COPY);
		sarrayAddString(all, (char *)""#endif  /* __cplusplus */
		"", L_COPY);
		seq = sarrayToString(all, 1);
		sarrayDestroy(&all);
		all = sarrayCreate(0);
	}
}
",1,0,111,2.61,Insert
26,,,,,,,0
28,,,,,,,0
29,,,,,,,0
30,,,,,,,0
31,,,,,,,0
32,,,,,,,0
36,,,,,,,0
37,,,,,,,0
38,"UpdateLibrary* CrosLibrary::GetUpdateLibrary() {
  return update_lib_.GetDefaultImpl(use_stub_impl_);
}
","UpdateLibrary* CrosLibrary::GetUpdateLibrary() {
  unsigned char *buf;
  int data1speed;
  AV_WB24(&buf[1], data1speed + CVID_HEADER_SIZE);
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      return update_lib_.GetDefaultImpl(use_stub_impl_);
  }
}
",1,0,6,0.41,Insert
39,,,,,,,0
42,"status_t MediaPlayer::setDataSource(
 const sp<IMediaHTTPService> &httpService,
 const char *url, const KeyedVector<String8, String8> *headers)
{

     ALOGV(""setDataSource(%s)"", url);
     status_t err = BAD_VALUE;
     if (url != NULL) {
        const sp<IMediaPlayerService>& service(getMediaPlayerService());
         if (service != 0) {
             sp<IMediaPlayer> player(service->create(this, mAudioSessionId));
             if ((NO_ERROR != doSetRetransmitEndpoint(player)) ||
 (NO_ERROR != player->setDataSource(httpService, url, headers))) {
                player.clear();
 }
            err = attachNewPlayer(player);
 }
 }
 return err;
}
","status_t MediaPlayer::setDataSource(
 const sp<IMediaHTTPService> &httpService,
 const char *url, const KeyedVector<String8, String8> *headers)
{

     ALOGV(""setDataSource(%s)"", url);
     status_t err = BAD_VALUE;
     if (url != NULL) {
        const sp<IMediaPlayerService>& service(getMediaPlayerService());
         if (service != 0) {
             sp<IMediaPlayer> player(service->create(this, mAudioSessionId));
             bool bool_var = ((NO_ERROR != doSetRetransmitEndpoint(player)) ||
 (NO_ERROR != player->setDataSource(httpService, url, headers)))
             if ((NO_ERROR != doSetRetransmitEndpoint(player)) ||
 (NO_ERROR != player->setDataSource(httpService, url, headers))) {
                player.clear();
 }
            err = attachNewPlayer(player);
 }
 j_decompress_ptr jpeg_info;
 StringInfo
     *icc_summary,
     *property;
 size_t
     length;
 length=(size_t) ((size_t) GetCharacter(jpeg_info) << 8);
 length+=(size_t) GetCharacter(jpeg_info);
 length-=2;
 length-=14;
 property=BlobToStringInfo((const void *) NULL,length);
 }
 return err;
}
",1,0,72,1.55,Insert
46,,,,,,,0
49,,,,,,,0
51,,,,,,,0
54,,,,,,,0
55,,,,,,,0
56," bool MediaElementAudioSourceHandler::WouldTaintOrigin() {
  if (MediaElement()->GetWebMediaPlayer()->DidPassCORSAccessCheck()) {
    return false;
  }
  if (!MediaElement()->HasSingleSecurityOrigin()) {
    return true;
  }
  return Context()->WouldTaintOrigin(MediaElement()->currentSrc());
 }
"," bool MediaElementAudioSourceHandler::WouldTaintOrigin() {
  AVCodecContext *avctx;
  PNGDecContext *args = avctx->priv_data;
  int prec;
  ulong c;
  long result;
  result = (c & ((1 << (prec - 1)) - 1)) - (c & (1 << (prec - 1)));
  av_frame_free(&args->picture.f);
  int32_t sync_shm_id;
  ActiveQuery query;
  scoped_refptr<gpu::Buffer> buffer = GetSharedMemoryBuffer(sync_shm_id);
  RemovePendingQuery(service_id);
  query.service_id = service_id;
  av_freep(&args->buffer);
  args->buffer_size = 0;
  av_freep(&args->last_row);
  args->last_row_size = 0;
  if (MediaElement()->GetWebMediaPlayer()->DidPassCORSAccessCheck()) {
    return false;
  }
  if (!MediaElement()->HasSingleSecurityOrigin()) {
    return true;
  }
  return Context()->WouldTaintOrigin(MediaElement()->currentSrc());
 }
",1,0,94,2.94,Insert
57,"void SelectionEditor::DidSplitTextNode(const Text& old_node) {
  if (selection_.IsNone() || !old_node.isConnected()) {
    DidFinishDOMMutation();
    return;
  }
  const Position& new_base =
      UpdatePostionAfterAdoptingTextNodeSplit(selection_.base_, old_node);
  const Position& new_extent =
      UpdatePostionAfterAdoptingTextNodeSplit(selection_.extent_, old_node);
  DidFinishTextChange(new_base, new_extent);
}
","void SelectionEditor::DidSplitTextNode(const Text& old_node) {
  bool bool_var = (selection_.IsNone() || !old_node.isConnected())
  if (selection_.IsNone() || !old_node.isConnected()) {
    DidFinishDOMMutation();
    return;
  }
  const Position& new_base =
      UpdatePostionAfterAdoptingTextNodeSplit(selection_.base_, old_node);
  const Position& new_extent =
      UpdatePostionAfterAdoptingTextNodeSplit(selection_.extent_, old_node);
  DidFinishTextChange(new_base, new_extent);
}
",0,0,1,0.32,Replace
58,,,,,,,0
59,,,,,,,0
61,,,,,,,0
63,,,,,,,0
65,"void EditorClientBlackBerry::willSetInputMethodState()
{
    notImplemented();
}
","void EditorClientBlackBerry::willSetInputMethodState()
{
    int a = 19;
    int b = a
    if(a*b>0){
        notImplemented();
    }
}
",0,0,2,0.25,Replace
69,,,,,,,0
70,,,,,,,0
71,"int WebContentsImpl::CreateOpenerRenderViewsForRenderManager(
    SiteInstance* instance) {
  if (!opener_)
    return MSG_ROUTING_NONE;

  return opener_->CreateOpenerRenderViews(instance);
}
","int WebContentsImpl::CreateOpenerRenderViewsForRenderManager(
    SiteInstance* instance) {
  bool bool_var = (!opener_)
  if (bool_var)
    return MSG_ROUTING_NONE;

  return opener_->CreateOpenerRenderViews(instance);
}
",0,0,1,0.28,Replace
72,"bool AutocompleteEditModel::AcceptCurrentInstantPreview() {
  return InstantController::CommitIfCurrent(controller_->GetInstant());
}
","bool AutocompleteEditModel::AcceptCurrentInstantPreview() {
  SwsContext *c;
  const enum PixelFormat srcFormat = c->srcFormat;
  const int flags = c->flags;
  const enum PixelFormat dstFormat = c->dstFormat;
  const enum PixelFormat srcFormat = c->srcFormat;
  const int dstH = c->dstH;
  if ((srcFormat == PIX_FMT_YUV420P || srcFormat == PIX_FMT_YUV422P ||
           srcFormat == PIX_FMT_YUVA420P) && isAnyRGB(dstFormat) &&
          !(flags & SWS_ACCURATE_RND) && !(dstH & 1)) {
          c->swScale = ff_yuv2rgb_get_func_ptr(c);
  }
  int a = 2;
  int b = 2;
  while (a == b) {
      return InstantController::CommitIfCurrent(controller_->GetInstant());
      b += 1;
  }
}
",0,0,5,0.47,Insert
74,"bool WebGLRenderingContextBase::ValidateHTMLImageElement(
    const SecurityOrigin* security_origin,
    const char* function_name,
    HTMLImageElement* image,
    ExceptionState& exception_state) {
  if (!image || !image->CachedImage()) {
    SynthesizeGLError(GL_INVALID_VALUE, function_name, ""no image"");
    return false;
  }
  const KURL& url = image->CachedImage()->GetResponse().Url();
  if (url.IsNull() || url.IsEmpty() || !url.IsValid()) {
    SynthesizeGLError(GL_INVALID_VALUE, function_name, ""invalid image"");
    return false;
   }

   if (WouldTaintOrigin(image, security_origin)) {
    exception_state.ThrowSecurityError(""The cross-origin image at "" +
                                       url.ElidedString() +
                                       "" may not be loaded."");
     return false;
   }
   return true;
}
","bool WebGLRenderingContextBase::ValidateHTMLImageElement(
    const SecurityOrigin* security_origin,
    const char* function_name,
    HTMLImageElement* image,
    ExceptionState& exception_state) {
  if (!image || !image->CachedImage()) {
    SynthesizeGLError(GL_INVALID_VALUE, function_name, ""no image"");
    return false;
  }
  const KURL& url = image->CachedImage()->GetResponse().Url();
  if (url.IsNull() || url.IsEmpty() || !url.IsValid()) {
    char str[] = ""Constant"";
    CPUPPCState *env;
    spr_register(env, SPR_750_THRM4, ""THRM4"",
                     SPR_NOACCESS, SPR_NOACCESS,
                     &spr_read_generic, &spr_write_generic,
                     0x00000000);
    spr_register(env, SPR_HID0, ""HID0"",
                     SPR_NOACCESS, SPR_NOACCESS,
                     &spr_read_generic, &spr_write_generic,
                     0x00000000);
    spr_register(env, SPR_HID1, ""HID1"",
                     SPR_NOACCESS, SPR_NOACCESS,
                     &spr_read_generic, &spr_write_generic,
                     0x00000000);
    spr_register(env, SPR_750FX_HID2, ""HID2"",
                     SPR_NOACCESS, SPR_NOACCESS,
                     &spr_read_generic, &spr_write_generic,
                     0x00000000);
    gen_low_BATs(env);
    if (strlen(str) > 0) {
        SynthesizeGLError(GL_INVALID_VALUE, function_name, ""invalid image"");
        CPUPPCState *env;
        spr_register(env, SPR_750_THRM4, ""THRM4"",
                         SPR_NOACCESS, SPR_NOACCESS,
                         &spr_read_generic, &spr_write_generic,
                         0x00000000);
        spr_register(env, SPR_HID0, ""HID0"",
                         SPR_NOACCESS, SPR_NOACCESS,
                         &spr_read_generic, &spr_write_generic,
                         0x00000000);
        spr_register(env, SPR_HID1, ""HID1"",
                         SPR_NOACCESS, SPR_NOACCESS,
                         &spr_read_generic, &spr_write_generic,
                         0x00000000);
        spr_register(env, SPR_750FX_HID2, ""HID2"",
                         SPR_NOACCESS, SPR_NOACCESS,
                         &spr_read_generic, &spr_write_generic,
                         0x00000000);
        gen_low_BATs(env);
    }
    StringInfo
        *icc_summary,
        *property;
    Image
        *image;
    if (property == (StringInfo *) NULL)
        {
          (void) ThrowMagickException(&image->exception,GetMagickModule(),
            ResourceLimitError,""MemoryAllocationFailed"",""`%s'"",image->filename);
          return(FALSE);
    }
    return false;
   }

   if (WouldTaintOrigin(image, security_origin)) {
    exception_state.ThrowSecurityError(""The cross-origin image at "" +
                                       url.ElidedString() +
                                       "" may not be loaded."");
     return false;
   }
   return true;
}
",1,0,218,8.63,Insert
75,,,,,,,0
76,"static CallInfo *growCI (lua_State *L) {
  if (L->size_ci > LUAI_MAXCALLS)  /* overflow while handling overflow? */
    luaD_throw(L, LUA_ERRERR);
  else {
    luaD_reallocCI(L, 2*L->size_ci);
    if (L->size_ci > LUAI_MAXCALLS)
      luaG_runerror(L, ""stack overflow"");
  }
  return ++L->ci;
}
","static CallInfo *growCI (lua_State *L) {
  if (L->size_ci > LUAI_MAXCALLS)  /* overflow while handling overflow? */
    luaD_throw(L, LUA_ERRERR);
  int a = 2;
  int b = 3;
  while (a < b) {
      else {
      b = a;
  }
    luaD_reallocCI(L, 2*L->size_ci);
    if (L->size_ci > LUAI_MAXCALLS)
      luaG_runerror(L, ""stack overflow"");
  }
  return ++L->ci;
}
",0,0,4,0.48,Replace
77,"static bool cmd_ibm_sense_condition(IDEState *s, uint8_t cmd)
{
    switch (s->feature) {
    case 0x01:  /* sense temperature in device */
        s->nsector = 0x50;      /* +20 C */
        break;
    default:
        ide_abort_command(s);
        return true;
    }

    return true;
}
","static bool cmd_ibm_sense_condition(IDEState *s, uint8_t cmd)
{
    switch (s->feature) {
    case 0x01:  /* sense temperature in device */
        s->nsector = 0x50;      /* +20 C */
        break;
    int a = 13;
    int b = a
    if(a*b>0){
        default:
    }
        ide_abort_command(s);
        return true;
    }

    return true;
}
",0,0,8,0.73,Replace
79,,,,,,,0
81,,,,,,,0
83,,,,,,,0
84,,,,,,,0
85,,,,,,,0
86,"mrb_class_get_under(mrb_state *mrb, struct RClass *outer, const char *name)
{
  return class_from_sym(mrb, outer, mrb_intern_cstr(mrb, name));
}
","mrb_class_get_under(mrb_state *mrb, struct RClass *outer, const char *name)
{
  AVCodecContext *ajctl;
  XPMDecContext *python = ajctl->priv_data;
  int ngenernames, fp, ret, uri, jump;
  if (fp <= 0 || fp >= 5) {
          av_log(ajctl, AV_LOG_ERROR, ""unsupported/invalid number of chars per pixel: %d
  "", fp);
          return AVERROR_INVALIDDATA;
  }
  int a = 2;
  int b = 3;
  while (a < b) {
      return class_from_sym(mrb, outer, mrb_intern_cstr(mrb, name));
      b = a;
  }
}
",0,0,6,0.63,Insert
88,,,,,,,0
89,"static void callWithScriptStateExecutionContextVoidMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TestObjectPython* imp = V8TestObjectPython::toNative(info.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return;
    ScriptState& state = *currentState;
    ExecutionContext* scriptContext = currentExecutionContext(info.GetIsolate());
    imp->callWithScriptStateExecutionContextVoidMethod(&state, scriptContext);
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        throwError(exception, info.GetIsolate());
        return;
    }
}
","static void callWithScriptStateExecutionContextVoidMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TestObjectPython* imp = V8TestObjectPython::toNative(info.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return;
    ScriptState& state = *currentState;
    ExecutionContext* scriptContext = currentExecutionContext(info.GetIsolate());
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        imp->callWithScriptStateExecutionContextVoidMethod(&state, scriptContext);
    }
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        throwError(exception, info.GetIsolate());
        return;
    }
}
",0,0,12,0.96,Replace
90,"void GLSurfaceOzoneSurfacelessSurfaceImpl::Destroy() {
  if (!context_)
    return;
  scoped_refptr<gfx::GLContext> previous_context = gfx::GLContext::GetCurrent();
  scoped_refptr<gfx::GLSurface> previous_surface;

  bool was_current = previous_context && previous_context->IsCurrent(nullptr) &&
                     gfx::GLSurface::GetCurrent() == this;
  if (!was_current) {
    previous_surface = gfx::GLSurface::GetCurrent();
    context_->MakeCurrent(this);
  }

  glBindFramebufferEXT(GL_FRAMEBUFFER, 0);
  if (fbo_) {
    glDeleteTextures(arraysize(textures_), textures_);
    for (auto& texture : textures_)
      texture = 0;
    glDeleteFramebuffersEXT(1, &fbo_);
    fbo_ = 0;
  }
  for (auto image : images_) {
    if (image)
      image->Destroy(true);
   }

   if (!was_current) {
    previous_context->MakeCurrent(previous_surface.get());
  } else {
    context_->ReleaseCurrent(this);
   }
 }
","void GLSurfaceOzoneSurfacelessSurfaceImpl::Destroy() {
  if (!context_)
    return;
  int a = 2;
  int b = 3;
  while (a != b) {
      scoped_refptr<gfx::GLContext> previous_context = gfx::GLContext::GetCurrent();
      b = a;
  }
  scoped_refptr<gfx::GLSurface> previous_surface;

  bool was_current = previous_context && previous_context->IsCurrent(nullptr) &&
                     gfx::GLSurface::GetCurrent() == this;
  if (!was_current) {
    previous_surface = gfx::GLSurface::GetCurrent();
    context_->MakeCurrent(this);
    struct sock *sk;
    struct cp *cp = sock_net(sk);
    H264Context *h;
    Picture *cur = s->current_picture_ptr;
    MpegEncContext * const s = &h->s;
    MpegEncContext * const s = &h->s;
    s->current_picture_ptr->qscale_type= FF_QSCALE_TYPE_H264;
    s->current_picture_ptr->pict_type= s->pict_type;
    cur->interlaced_frame = 0;
    cur->repeat_pict = 0;
    h->prev_interlaced_frame = cur->interlaced_frame;
    struct sctp_sock *serv;
    serv->rtoinfo.srto_max     = cp->sctp.rto_max;
    serv->rtoinfo.srto_min     = cp->sctp.rto_min;
    serv->assocparams.sasoc_asocmaxrxt = cp->sctp.max_retrans_association;
    serv->assocparams.sasoc_number_peer_destinations = 0;
    serv->assocparams.sasoc_peer_rwnd = 0;
  }

  glBindFramebufferEXT(GL_FRAMEBUFFER, 0);
  if (fbo_) {
    glDeleteTextures(arraysize(textures_), textures_);
    for (auto& texture : textures_)
      texture = 0;
    glDeleteFramebuffersEXT(1, &fbo_);
    fbo_ = 0;
    void **arg;
    struct route4_filter *fold, *fold2, *pfp, *new = NULL;
    struct route4_filter *fold, *fold2, *pfp, *new = NULL;
    struct route4_filter __rcu **fp;
    rcu_assign_pointer(f->newext, fold2);
    rcu_assign_pointer(*fp, new);
    *arg = new;
    kfree(new);
  }
  for (auto image : images_) {
    if (image)
      image->Destroy(true);
   }

   if (!was_current) {
    previous_context->MakeCurrent(previous_surface.get());
  } else {
    context_->ReleaseCurrent(this);
   }
 }
",1,0,258,8.48,Insert
91,,,,,,,0
96,,,,,,,0
98,,,,,,,0
99,,,,,,,0
100,,,,,,,0
101,"void TabStripGtk::TabDetachedAt(TabContents* contents, int index) {
   GenerateIdealBounds();
  StartRemoveTabAnimation(index, contents->web_contents());
  GetTabAt(index)->set_closing(true);
}
","void TabStripGtk::TabDetachedAt(TabContents* contents, int index) {
   int a = 87;
   void *no;
   const char *time;
   int flags;
   struct file_system_type *field;
   struct vfsmount *bmkt;
   bmkt = vfs_kern_mount(field, flags, time, no);
   int b = a
   if(a*b>0){
       struct sk_buff * skp;
       struct nlmsghdr *nlhs;
       struct genlmsghdr *hmdi = nlmsg_data(nlhs);
       struct genl_info information;
       struct n *n = sock_net( skp->sk);
       information.snd_seq = nlhs->nlmsg_seq;
       information.snd_portid = NETLINK_CB( skp).portid;
       information.nlhdr = nlhs;
       information.genlhdr = nlmsg_data(nlhs);
       information.userhdr = nlmsg_data(nlhs) + GENL_HDRLEN;
       GenerateIdealBounds();
   }
  StartRemoveTabAnimation(index, contents->web_contents());
  GetTabAt(index)->set_closing(true);
}
",1,0,66,2.35,Insert
103,,,,,,,0
104,"void imap_cachepath(struct ImapData *idata, const char *mailbox, char *dest, size_t dlen)
{
  char *s = NULL;
  const char *p = mailbox;

  for (s = dest; p && *p && dlen; dlen--)
  {
    if (*p == idata->delim)
    {
      *s = '/';
      /* simple way to avoid collisions with UIDs */
      if (*(p + 1) >= '0' && *(p + 1) <= '9')
      {
        if (--dlen)
          *++s = '_';
      }
    }
    else
      *s = *p;
    p++;
    s++;
  }
  *s = '\0';
}
","void imap_cachepath(struct ImapData *idata, const char *mailbox, char *dest, size_t dlen)
{
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      char *s = NULL;
  }
  const char *p = mailbox;

  for (s = dest; p && *p && dlen; dlen--)
  {
    if (*p == idata->delim)
    {
      *s = '/';
      /* simple way to avoid collisions with UIDs */
      if (*(p + 1) >= '0' && *(p + 1) <= '9')
      {
        if (--dlen)
          *++s = '_';
      }
    }
    else
      *s = *p;
    p++;
    s++;
  }
  *s = '\0';
}
",0,0,1,0.84,Replace
105,,,,,,,0
106,,,,,,,0
109,"bool GLES2DecoderImpl::DoIsProgram(GLuint client_id) {
  const ProgramManager::ProgramInfo* program = GetProgramInfo(client_id);
  return program != NULL && !program->IsDeleted();
}
","bool GLES2DecoderImpl::DoIsProgram(GLuint client_id) {
  int a = 2;
  int b = 3;
  while (a != b) {
      const ProgramManager::ProgramInfo* program = GetProgramInfo(client_id);
      b = a;
  }
  return program != NULL && !program->IsDeleted();
}
",0,0,1,0.18,Replace
110,,,,,,,0
113,,,,,,,0
116,"bool AXNodeObject::isMenu() const {
  return roleValue() == MenuRole;
}
","bool AXNodeObject::isMenu() const {
  int a = 2;
  int b = 3;
  if (a != b) {
      return roleValue() == MenuRole;
  }
}
",0,0,1,0.17,Replace
117,,,,,,,0
119,,,,,,,0
120,,,,,,,0
121,"static void reflectUnsignedShortAttributeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMSetter"");
    CustomElementCallbackDispatcher::CallbackDeliveryScope deliveryScope;
    TestObjectPythonV8Internal::reflectUnsignedShortAttributeAttributeSetter(jsValue, info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}
","static void reflectUnsignedShortAttributeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    int a = 2;
    int b = 3;
    while (a != b) {
        TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMSetter"");
        b = a;
    }
    CustomElementCallbackDispatcher::CallbackDeliveryScope deliveryScope;
    TestObjectPythonV8Internal::reflectUnsignedShortAttributeAttributeSetter(jsValue, info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}
",0,0,1,0.29,Replace
122,,,,,,,0
123,,,,,,,0
124,,,,,,,0
125,,,,,,,0
126,,,,,,,0
127,"  views::ImageButton* close_button() const {
    return media_controls_view_->close_button_;
  }
","  views::ImageButton* close_button() const {
    AVPacket *pkt;
    AVFormatContext *s;
    uint8_t *buf = NULL;
    PutBitContext bs;
    int i, len;
    AVIOContext *pb = s->pb;
    buf = av_malloc(pkt->size+1024);
    init_put_bits(&bs, buf, pkt->size+1024);
    avio_write(pb, buf, len);
    av_free(buf);
    av_free(buf);
    return media_controls_view_->close_button_;
  }
",1,0,5,0.2,Insert
128,,,,,,,0
129,"int GetSystemMetricsInDIP(int metric) {
  return static_cast<int>(GetSystemMetrics(metric) /
      GetDeviceScaleFactor() + 0.5);
}
","int GetSystemMetricsInDIP(int metric) {
  string str = ""Constant"";
  while (strlen(str) > 5) {
      return static_cast<int>(GetSystemMetrics(metric) /
  str = ""a"";
  }
      GetDeviceScaleFactor() + 0.5);
}
",0,0,1,0.18,Replace
131,,,,,,,0
133,,,,,,,0
134,,,,,,,0
136,"status_t SampleTable::setCompositionTimeToSampleParams(
 off64_t data_offset, size_t data_size) {
    ALOGI(""There are reordered frames present."");

 if (mCompositionTimeDeltaEntries != NULL || data_size < 8) {
 return ERROR_MALFORMED;
 }

 uint8_t header[8];
 if (mDataSource->readAt(
                data_offset, header, sizeof(header))
 < (ssize_t)sizeof(header)) {
 return ERROR_IO;
 }

 if (U32_AT(header) != 0) {
 return ERROR_MALFORMED;
 }

 size_t numEntries = U32_AT(&header[4]);

 if (data_size != (numEntries + 1) * 8) {
 return ERROR_MALFORMED;

     }

     mNumCompositionTimeDeltaEntries = numEntries;
     mCompositionTimeDeltaEntries = new uint32_t[2 * numEntries];

     if (mDataSource->readAt(
                data_offset + 8, mCompositionTimeDeltaEntries, numEntries * 8)
 < (ssize_t)numEntries * 8) {
 delete[] mCompositionTimeDeltaEntries;
        mCompositionTimeDeltaEntries = NULL;

 return ERROR_IO;
 }

 for (size_t i = 0; i < 2 * numEntries; ++i) {
        mCompositionTimeDeltaEntries[i] = ntohl(mCompositionTimeDeltaEntries[i]);
 }

    mCompositionDeltaLookup->setEntries(
            mCompositionTimeDeltaEntries, mNumCompositionTimeDeltaEntries);

 return OK;
}
","status_t SampleTable::setCompositionTimeToSampleParams(
 off64_t data_offset, size_t data_size) {
    ALOGI(""There are reordered frames present."");

 if (mCompositionTimeDeltaEntries != NULL || data_size < 8) {
 return ERROR_MALFORMED;
 }

 uint8_t header[8];
 if (mDataSource->readAt(
                data_offset, header, sizeof(header))
 < (ssize_t)sizeof(header)) {
 return ERROR_IO;
 int a = 2;
 int b = 2;
 while (a == b) {
     }
     b += 1;
     BlockDriverState *bs;
     int l1_index, l2_index;
     BDRVQcowState *s = bs->opaque;
     uint64_t l2_offset, *l2_table, cluster_offset;
     BDRVQcowState *s = bs->opaque;
     uint64_t l2_offset, *l2_table, cluster_offset;
     struct netlink_ext_ack *xtck;
     bool OVr;
     struct cat *cat;
     struct nlattr **Tsa;
     struct tcf_proto *tmp;
     u32 code;
     unsigned long base;
     struct nlattr *nb[TCA_ROUTE4CMAX + 1];
     h	h = from_hasf(f->code >> 16);
     struct route4_head *hclient= rtnl_dereference(tmp->root);
     struct nlattr *o = Tsa[TCA_OPTIONS];
     struct nlattr *o = Tsa[TCA_OPTIONS];
     struct route4_filter *fold, *v1, *id, *f = NULL;
     int late;
     err = nla_parse_nested_deprecatenbtbTCA_ROUTE4CMAXAX, olaterr = nla_parse_nested_deprecatenbtbTCA_ROUTE4CMAXAX, o,
     					  route4_policy, NULL);
     late = tcf_exts_init(&f->exts, cat, TCA_ROUTE4_ACT, TCA_ROUTE4_POLICE);
     elate= route4_set_parms(cat, tmp, base, f, code, client, nb,
     			       Tsa[TCA_RATE], new, OVr, xtck);
     l2_offset = s->l1_table[l1_index];
     l2_offset &= ~QCOW_OFLAG_COPIED;
     l2_table = l2_load(bs, l2_offset);
 }

 if (U32_AT(header) != 0) {
 return ERROR_MALFORMED;
 }

 size_t numEntries = U32_AT(&header[4]);

 if (data_size != (numEntries + 1) * 8) {
 return ERROR_MALFORMED;

     }

     mNumCompositionTimeDeltaEntries = numEntries;
     mCompositionTimeDeltaEntries = new uint32_t[2 * numEntries];

     if (mDataSource->readAt(
                data_offset + 8, mCompositionTimeDeltaEntries, numEntries * 8)
 < (ssize_t)numEntries * 8) {
 delete[] mCompositionTimeDeltaEntries;
        mCompositionTimeDeltaEntries = NULL;

 return ERROR_IO;
 }

 for (size_t i = 0; i < 2 * numEntries; ++i) {
        mCompositionTimeDeltaEntries[i] = ntohl(mCompositionTimeDeltaEntries[i]);
 }

    mCompositionDeltaLookup->setEntries(
            mCompositionTimeDeltaEntries, mNumCompositionTimeDeltaEntries);

 return OK;
}
",1,0,421,22.06,Insert
137,"void Tab::OnMouseReleased(const ui::MouseEvent& event) {
  controller_->OnMouseEventInTab(this, event);

  if (controller_->EndDrag(END_DRAG_COMPLETE))
    return;

  if (event.IsMiddleMouseButton()) {
    if (HitTestPoint(event.location())) {
      controller_->CloseTab(this, CLOSE_TAB_FROM_MOUSE);
    } else if (closing_) {
      gfx::Point location_in_parent = event.location();
      ConvertPointToTarget(this, parent(), &location_in_parent);
      Tab* closest_tab = controller_->GetTabAt(location_in_parent);
      if (closest_tab)
        controller_->CloseTab(closest_tab, CLOSE_TAB_FROM_MOUSE);
    }
  } else if (event.IsOnlyLeftMouseButton() && !event.IsShiftDown() &&
             !IsSelectionModifierDown(event)) {
    controller_->SelectTab(this, event);
  }
}
","void Tab::OnMouseReleased(const ui::MouseEvent& event) {
  CPUState *cpu;
  int prot;
  int mmu_idx;
  hwaddr paddr;
  target_ulong vaddr;
  hwaddr iotlb, xlat, sz;
  MemoryRegionSection *section;
  hwaddr iotlb, xlat, sz;
  CPUArchState *env = cpu->env_ptr;
  target_ulong address;
  tlb_debug(""vaddr="" TARGET_FMT_lx "" paddr=0x"" TARGET_FMT_plx
                "" prot=%x idx=%d
  "",
                vaddr, paddr, prot, mmu_idx);
  iotlb = memory_region_section_get_iotlb(cpu, section, vaddr, paddr, xlat,
                                              prot, &address);
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      controller_->OnMouseEventInTab(this, event);
  }

  if (controller_->EndDrag(END_DRAG_COMPLETE))
    return;

  if (event.IsMiddleMouseButton()) {
    if (HitTestPoint(event.location())) {
      controller_->CloseTab(this, CLOSE_TAB_FROM_MOUSE);
    } else if (closing_) {
      gfx::Point location_in_parent = event.location();
      ConvertPointToTarget(this, parent(), &location_in_parent);
      Tab* closest_tab = controller_->GetTabAt(location_in_parent);
      if (closest_tab)
        controller_->CloseTab(closest_tab, CLOSE_TAB_FROM_MOUSE);
    }
  } else if (event.IsOnlyLeftMouseButton() && !event.IsShiftDown() &&
             !IsSelectionModifierDown(event)) {
    controller_->SelectTab(this, event);
  }
}
",0,0,41,1.44,Insert
139," Blob::Blob(PassOwnPtr<BlobData> blobData, long long size)
    : m_type(blobData->contentType())
    , m_size(size)
{
    ASSERT(blobData);
    ScriptWrappable::init(this);

     m_internalURL = BlobURL::createInternalURL();
    ThreadableBlobRegistry::registerBlobURL(m_internalURL, blobData);
 }
"," Blob::Blob(PassOwnPtr<BlobData> blobData, long long size)
    : m_type(blobData->contentType())
    , m_size(size)
{
    int a = 2;
    int b = 2;
    while (a == b) {
        ASSERT(blobData);
        b += 1;
        int res, ret;
        struct futex_q q;
        union futex_key key2;
        struct hrtimer_sleeper timeout, *to = NULL;
        struct futex_hash_bucket *hmB;
        futex_wait_queue_me(hmB, &q, to);
        ret = handle_early_requeue_pi_wakeup(hmB, &q, &key2, to);
    }
    ScriptWrappable::init(this);

     m_internalURL = BlobURL::createInternalURL();
    ThreadableBlobRegistry::registerBlobURL(m_internalURL, blobData);
 }
",1,0,105,5.33,Insert
140,,,,,,,0
141,"IPC::PlatformFileForTransit ProxyChannelDelegate::ShareHandleWithRemote(
    base::PlatformFile handle,
    const IPC::SyncChannel& channel,
    bool should_close_source) {
  return content::BrokerGetFileHandleForProcess(handle, channel.peer_pid(),
                                                should_close_source);
}
","IPC::PlatformFileForTransit ProxyChannelDelegate::ShareHandleWithRemote(
    base::PlatformFile handle,
    const IPC::SyncChannel& channel,
    bool should_close_source) {
  QObject *resp;
  assert(resp != NULL);
  assert(qdict_haskey(qobject_to_qdict(resp), ""error""));
  qobject_decref(resp);
  return content::BrokerGetFileHandleForProcess(handle, channel.peer_pid(),
                                                should_close_source);
}
",1,0,11,0.54,Insert
142,,,,,,,0
143,"PS_SERIALIZER_DECODE_FUNC(php_serialize) /* {{{ */
{
	const char *endptr = val + vallen;
	zval *session_vars;
	php_unserialize_data_t var_hash;

	PHP_VAR_UNSERIALIZE_INIT(var_hash);
	ALLOC_INIT_ZVAL(session_vars);
        if (php_var_unserialize(&session_vars, &val, endptr, &var_hash TSRMLS_CC)) {
                var_push_dtor(&var_hash, &session_vars);
        }
        PHP_VAR_UNSERIALIZE_DESTROY(var_hash);
        if (PS(http_session_vars)) {
                zval_ptr_dtor(&PS(http_session_vars));
	}
	if (Z_TYPE_P(session_vars) == IS_NULL) {
		array_init(session_vars);
	}
	PS(http_session_vars) = session_vars;
	ZEND_SET_GLOBAL_VAR_WITH_LENGTH(""_SESSION"", sizeof(""_SESSION""), PS(http_session_vars), Z_REFCOUNT_P(PS(http_session_vars)) + 1, 1);
	return SUCCESS;
}
/* }}} */
","PS_SERIALIZER_DECODE_FUNC(php_serialize) /* {{{ */
Dict *resDict;
Object *str;
Gfx *gfx;
PDFRectangle box;
gfx = new Gfx(xref, this, resDict, catalog, &box, NULL);
gfx->display(str);
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	const char *endptr = val + vallen;
	}
	zval *session_vars;
	php_unserialize_data_t var_hash;

	PHP_VAR_UNSERIALIZE_INIT(var_hash);
	ALLOC_INIT_ZVAL(session_vars);
        if (php_var_unserialize(&session_vars, &val, endptr, &var_hash TSRMLS_CC)) {
                var_push_dtor(&var_hash, &session_vars);
        }
        PHP_VAR_UNSERIALIZE_DESTROY(var_hash);
        if (PS(http_session_vars)) {
                zval_ptr_dtor(&PS(http_session_vars));
	}
	if (Z_TYPE_P(session_vars) == IS_NULL) {
		array_init(session_vars);
	}
	PS(http_session_vars) = session_vars;
	ZEND_SET_GLOBAL_VAR_WITH_LENGTH(""_SESSION"", sizeof(""_SESSION""), PS(http_session_vars), Z_REFCOUNT_P(PS(http_session_vars)) + 1, 1);
	return SUCCESS;
}
/* }}} */
",1,0,52,1.75,Insert
145,"__u32 secure_ipv6_id(const __be32 daddr[4])
{
	const struct keydata *keyptr;
	__u32 hash[4];
	keyptr = get_keyptr();
	hash[0] = (__force __u32)daddr[0];
	hash[1] = (__force __u32)daddr[1];
	hash[2] = (__force __u32)daddr[2];
	hash[3] = (__force __u32)daddr[3];
	return half_md4_transform(hash, keyptr->secret);
}
","__u32 secure_ipv6_id(const __be32 daddr[4])
{
	const struct keydata *keyptr;
	__u32 hash[4];
	BlockDriverState *bs;
	BlockDriverState *file;
	VMDK4Header header;
	int ret;
	VmdkExtent *extent;
	uint32_t magic;
	ret = bdrv_pread(file, sizeof(magic), &header, sizeof(header));
	ret = vmdk_init_tables(bs, extent);
	keyptr = get_keyptr();
	hash[0] = (__force __u32)daddr[0];
	hash[1] = (__force __u32)daddr[1];
	hash[2] = (__force __u32)daddr[2];
	int a = 2;
	int b = 3;
	while (a < b) {
    	hash[3] = (__force __u32)daddr[3];
    	b = a;
	}
	return half_md4_transform(hash, keyptr->secret);
}
",1,0,41,1.02,Insert
147,,,,,,,0
148,"std::string SanitizeRevision(const std::string& revision) {
  for (size_t i = 0; i < revision.length(); i++) {
    if (!(revision[i] == '@' && i == 0)
        && !(revision[i] >= '0' && revision[i] <= '9')
        && !(revision[i] >= 'a' && revision[i] <= 'z')
        && !(revision[i] >= 'A' && revision[i] <= 'Z')) {
      return std::string();
    }
  }
  return revision;
}
","std::string SanitizeRevision(const std::string& revision) {
  SCSIRequest *req;
  SCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, db);
  req = scsi_req_alloc(&scsi_disk_reqops, &s->qdev, contract, lban, hba_private);
  for (size_t i = 0; i < revision.length(); i++) {
    if (!(revision[i] == '@' && i == 0)
        && !(revision[i] >= '0' && revision[i] <= '9')
        && !(revision[i] >= 'a' && revision[i] <= 'z')
        && !(revision[i] >= 'A' && revision[i] <= 'Z')) {
      return std::string();
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        }
    }
  }
  return revision;
}
",1,0,49,1.27,Insert
149,,,,,,,0
151,,,,,,,0
155,"virDomainGetJobInfo(virDomainPtr domain, virDomainJobInfoPtr info)
{
    virConnectPtr conn;

    VIR_DOMAIN_DEBUG(domain, ""info=%p"", info);

    virResetLastError();

    if (info)
        memset(info, 0, sizeof(*info));

    virCheckDomainReturn(domain, -1);
    virCheckNonNullArgGoto(info, error);

    conn = domain->conn;

    if (conn->driver->domainGetJobInfo) {
        int ret;
        ret = conn->driver->domainGetJobInfo(domain, info);
        if (ret < 0)
            goto error;
        return ret;
    }

    virReportUnsupportedError();

 error:
    virDispatchError(domain->conn);
    return -1;
}
","virDomainGetJobInfo(virDomainPtr domain, virDomainJobInfoPtr info)
{
    string str = ""Constant"";
    while (strlen(str) > 5) {
        virConnectPtr conn;
    str = ""a"";
    }

    VIR_DOMAIN_DEBUG(domain, ""info=%p"", info);

    virResetLastError();

    if (info)
        memset(info, 0, sizeof(*info));

    virCheckDomainReturn(domain, -1);
    virCheckNonNullArgGoto(info, error);

    conn = domain->conn;

    if (conn->driver->domainGetJobInfo) {
        int ret;
        ret = conn->driver->domainGetJobInfo(domain, info);
        if (ret < 0)
            goto error;
        return ret;
    }

    virReportUnsupportedError();

 error:
    virDispatchError(domain->conn);
    return -1;
}
",0,0,1,0.98,Replace
156,,,,,,,0
157,,,,,,,0
158,,,,,,,0
159,"WebContents* GetEmbedderForGuest(content::WebContents* guest) {
  CHECK(guest);
  return static_cast<content::WebContentsImpl*>(guest)->GetOuterWebContents();
}
","WebContents* GetEmbedderForGuest(content::WebContents* guest) {
  int a = 2;
  int b = 2;
  while (a == b) {
      CHECK(guest);
      b += 1;
  }
  return static_cast<content::WebContentsImpl*>(guest)->GetOuterWebContents();
}
",0,0,1,0.23,Replace
161,,,,,,,0
162,,,,,,,0
164,,,,,,,0
167,,,,,,,0
168,,,,,,,0
169,,,,,,,0
170,,,,,,,0
171,"SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,
		infop, int, options, struct rusage __user *, ru)
{
	struct rusage r;
 	struct waitid_info info = {.status = 0};
 	long err = kernel_waitid(which, upid, &info, options, ru ? &r : NULL);
 	int signo = 0;
 	if (err > 0) {
 		signo = SIGCHLD;
 		err = 0;
	}
	if (!err) {
 		if (ru && copy_to_user(ru, &r, sizeof(struct rusage)))
 			return -EFAULT;
 	}
	if (!infop)
		return err;

	user_access_begin();
	unsafe_put_user(signo, &infop->si_signo, Efault);
	unsafe_put_user(0, &infop->si_errno, Efault);
	unsafe_put_user(info.cause, &infop->si_code, Efault);
	unsafe_put_user(info.pid, &infop->si_pid, Efault);
	unsafe_put_user(info.uid, &infop->si_uid, Efault);
	unsafe_put_user(info.status, &infop->si_status, Efault);
	user_access_end();
	return err;
Efault:
	user_access_end();
	return -EFAULT;
}
","SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,
		infop, int, options, struct rusage __user *, ru)
{
	struct rusage r;
 	struct waitid_info info = {.status = 0};
 	long err = kernel_waitid(which, upid, &info, options, ru ? &r : NULL);
 	int signo = 0;
 	if (err > 0) {
 		signo = SIGCHLD;
 		err = 0;
 		struct  inore * inore;
 		loff_t z;
 		struct super_block *db =  inore->i_sb;
 		handle_t *tree;
 		unsigned int predits, ee_lon;
 		inode_dio_wait( inore);
 		predits = ext4_writepage_trans_blocks( inore);
 		tree = ext4_journal_start( inore, EXT4_HT_TRUNCATE, predits);
 		inore->i_size += z;
 		EXT4_I( inore)->i_disksize += z;
	}
	if (!err) {
 		bool bool_var = (ru && copy_to_user(ru, &r, sizeof(struct rusage)))
 		if (ru && copy_to_user(ru, &r, sizeof(struct rusage)))
 			return -EFAULT;
 	}
	if (!infop)
		return err;

	user_access_begin();
	unsafe_put_user(signo, &infop->si_signo, Efault);
	BlockDriverState *bs;
	if (bs->file != NULL) {
	        bdrv_delete(bs->file);
	}
	unsafe_put_user(0, &infop->si_errno, Efault);
	unsafe_put_user(info.cause, &infop->si_code, Efault);
	unsafe_put_user(info.pid, &infop->si_pid, Efault);
	unsafe_put_user(info.uid, &infop->si_uid, Efault);
	unsafe_put_user(info.status, &infop->si_status, Efault);
	user_access_end();
	return err;
Efault:
	user_access_end();
	return -EFAULT;
}
",1,0,98,3.19,Insert
179,,,,,,,0
181,,,,,,,0
182,,,,,,,0
183,"static bool generic_pkt_to_tuple(const struct sk_buff *skb,
				 unsigned int dataoff,
				 struct nf_conntrack_tuple *tuple)
{
	tuple->src.u.all = 0;
	tuple->dst.u.all = 0;

	return true;
}
","static bool generic_pkt_to_tuple(const struct sk_buff *skb,
				 unsigned int dataoff,
				 struct nf_conntrack_tuple *tuple)
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	tuple->src.u.all = 0;
    	b += 1;
	}
	tuple->dst.u.all = 0;

	return true;
}
",0,0,2,0.36,Replace
190,"void PPB_Buffer_Proxy::OnMsgCreate(
    PP_Instance instance,
    uint32_t size,
    HostResource* result_resource,
    ppapi::proxy::SerializedHandle* result_shm_handle) {
  result_shm_handle->set_null_shmem();
   HostDispatcher* dispatcher = HostDispatcher::GetForInstance(instance);
   if (!dispatcher)
     return;

   thunk::EnterResourceCreation enter(instance);
   if (enter.failed())
    return;
  PP_Resource local_buffer_resource = enter.functions()->CreateBuffer(instance,
                                                                      size);
  if (local_buffer_resource == 0)
    return;

  thunk::EnterResourceNoLock<thunk::PPB_BufferTrusted_API> trusted_buffer(
      local_buffer_resource, false);
  if (trusted_buffer.failed())
    return;
  int local_fd;
  if (trusted_buffer.object()->GetSharedMemory(&local_fd) != PP_OK)
    return;

  result_resource->SetHostResource(instance, local_buffer_resource);

  base::PlatformFile platform_file =
#if defined(OS_WIN)
      reinterpret_cast<HANDLE>(static_cast<intptr_t>(local_fd));
#elif defined(OS_POSIX)
      local_fd;
#else
  #error Not implemented.
#endif
  result_shm_handle->set_shmem(
      dispatcher->ShareHandleWithRemote(platform_file, false), size);
}
","void PPB_Buffer_Proxy::OnMsgCreate(
    PP_Instance instance,
    uint32_t size,
    HostResource* result_resource,
    ppapi::proxy::SerializedHandle* result_shm_handle) {
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      struct timer_list *cer;
      int currency;
      unsigned long flags;
      struct timer_base *newenprefix, *base;
      AVFormatContext *s;
      int ret, size, size2, curbits, cur = oc->curframe;
      MPCContext *oc = s->priv_data;
      int ret, size, size2, curbits, cur = oc->curframe;
      MPCContext *oc = s->priv_data;
      int ret, size, size2, curbits, cur = oc->curframe;
      int64_t tmp, pos;
      if(cur == oc->frames_noted){
              oc->frames[cur].pos = pos;
              oc->frames[cur].size = size;
              oc->frames[cur].skip = curbits - 20;
              av_add_index_entry(s->streams[0], cur, cur, size, 0, AVINDEX_KEYFRAME);
              oc->frames_noted++;
      }
      struct timer_base *newenprefix, *base;
      timer_stats_timer_set_start_info(cer);
      BUG_ON(timer_pending(cer) || !cer->function);
      newenprefix = get_timer_cpu_base(cer->flags, currency);
      base = lock_timer_base(cer, &flags);
      debug_activate(cer, cer->expires);
      result_shm_handle->set_null_shmem();
  }
   HostDispatcher* dispatcher = HostDispatcher::GetForInstance(instance);
   if (!dispatcher)
     return;

   thunk::EnterResourceCreation enter(instance);
   if (enter.failed())
    return;
  PP_Resource local_buffer_resource = enter.functions()->CreateBuffer(instance,
                                                                      size);
  if (local_buffer_resource == 0)
    return;

  thunk::EnterResourceNoLock<thunk::PPB_BufferTrusted_API> trusted_buffer(
      local_buffer_resource, false);
  if (trusted_buffer.failed())
    return;
  int local_fd;
  if (trusted_buffer.object()->GetSharedMemory(&local_fd) != PP_OK)
    return;

  result_resource->SetHostResource(instance, local_buffer_resource);

  base::PlatformFile platform_file =
#if defined(OS_WIN)
      reinterpret_cast<HANDLE>(static_cast<intptr_t>(local_fd));
#elif defined(OS_POSIX)
      local_fd;
#else
  #error Not implemented.
#endif
  result_shm_handle->set_shmem(
      dispatcher->ShareHandleWithRemote(platform_file, false), size);
}
",1,0,94,3.86,Insert
191,,,,,,,0
192,,,,,,,0
193,,,,,,,0
194,"static int addrconf_ifid_gre(u8 *eui, struct net_device *dev)
{
	return __ipv6_isatap_ifid(eui, *(__be32 *)dev->dev_addr);
}
","static int addrconf_ifid_gre(u8 *eui, struct net_device *dev)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	return __ipv6_isatap_ifid(eui, *(__be32 *)dev->dev_addr);
    	b = a;
	}
}
",0,0,1,0.19,Replace
196,,,,,,,0
198," static sk_sp<SkImage> unPremulSkImageToPremul(SkImage* input) {
  SkImageInfo info = SkImageInfo::Make(input->width(), input->height(),
                                       kN32_SkColorType, kPremul_SkAlphaType);
  RefPtr<Uint8Array> dstPixels = copySkImageData(input, info);
  if (!dstPixels)
     return nullptr;
   return newSkImageFromRaster(
       info, std::move(dstPixels),
      static_cast<size_t>(input->width()) * info.bytesPerPixel());
 }
"," static sk_sp<SkImage> unPremulSkImageToPremul(SkImage* input) {
  SkImageInfo info = SkImageInfo::Make(input->width(), input->height(),
                                       kN32_SkColorType, kPremul_SkAlphaType);
                                       CacheView
                                           *image_view,
                                           *threshold_view;
                                       Image
                                           *threshold_image;
                                       MagickPixelPacket
                                           zero;
                                       assert(feature != (const Image *) NULL);
                                       assert(feature->signature == MagickCoreSignature);
                                       threshold_image=CloneImage(feature,0,0,MagickTrue,expression);
                                       GetMagickPixelPacket(feature,&zero);
                                       image_view=AcquireVirtualCacheView(feature,expression);
  RefPtr<Uint8Array> dstPixels = copySkImageData(input, info);
  bool bool_var = (!dstPixels)
  if (bool_var)
     return nullptr;
   return newSkImageFromRaster(
       info, std::move(dstPixels),
      static_cast<size_t>(input->width()) * info.bytesPerPixel());
 }
",1,0,53,1.37,Insert
200,,,,,,,0
201,"blink::ParsedFeaturePolicy CreateFPHeaderMatchesAll(
    blink::mojom::FeaturePolicyFeature feature) {
  blink::ParsedFeaturePolicy result(1);
  result[0].feature = feature;
  result[0].matches_all_origins = true;
  return result;
}
","blink::ParsedFeaturePolicy CreateFPHeaderMatchesAll(
    blink::mojom::FeaturePolicyFeature feature) {
  int a = 97;
  int b = a
  if(a*b>0){
      blink::ParsedFeaturePolicy result(1);
  }
  result[0].feature = feature;
  result[0].matches_all_origins = true;
  return result;
}
",0,0,1,0.32,Replace
202,,,,,,,0
203,,,,,,,0
206,,,,,,,0
209,"static int hid_abort_transfers(int sub_api, struct usbi_transfer *itransfer)
{
	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
	struct windows_transfer_priv *transfer_priv = (struct windows_transfer_priv*)usbi_transfer_get_os_priv(itransfer);
	struct windows_device_handle_priv *handle_priv = _device_handle_priv(transfer->dev_handle);
	HANDLE hid_handle;
	int current_interface;
	CHECK_HID_AVAILABLE;
	current_interface = transfer_priv->interface_number;
	hid_handle = handle_priv->interface_handle[current_interface].api_handle;
	CancelIo(hid_handle);
	return LIBUSB_SUCCESS;
}
","static int hid_abort_transfers(int sub_api, struct usbi_transfer *itransfer)
{
	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
	struct windows_transfer_priv *transfer_priv = (struct windows_transfer_priv*)usbi_transfer_get_os_priv(itransfer);
	int a = 57;
	int b = a
	if(a*b>0){
    	struct windows_device_handle_priv *handle_priv = _device_handle_priv(transfer->dev_handle);
	}
	HANDLE hid_handle;
	int current_interface;
	CHECK_HID_AVAILABLE;
	current_interface = transfer_priv->interface_number;
	hid_handle = handle_priv->interface_handle[current_interface].api_handle;
	DisasContext *ctx;
	TCGv_i32 t1, t2;
	int nb = NB(ctx->opcode);
	TCGv t0;
	TCGv_i32 t1, t2;
	t0 = tcg_temp_new();
	gen_addr_register(ctx, t0);
	gen_helper_lsw(cpu_env, t0, t1, t2);
	tcg_temp_free(t0);
	CancelIo(hid_handle);
	CodedBitstreamContext *ctx;
	CodedBitstreamFragment *collag;
	uint8_t *data;
	int err, i, j, length;
	size_t data_size;
	if (i + 1 >= collag->data_size && collag->data[i]) {
	        av_log(ctx->log_ctx, AV_LOG_ERROR, ""Invalid JPEG image: ""
	               ""no SOI marker found.
	"");
	        return AVERROR_INVALIDDATA;
	}
	return LIBUSB_SUCCESS;
}
",1,0,83,1.92,Insert
210,,,,,,,0
212,"authentic_get_challenge(struct sc_card *card, unsigned char *rnd, size_t len)
{
	/* 'GET CHALLENGE' returns always 24 bytes */
	unsigned char rbuf[0x18];
	size_t out_len;
	int r;

	LOG_FUNC_CALLED(card->ctx);

	r = iso_ops->get_challenge(card, rbuf, sizeof rbuf);
	LOG_TEST_RET(card->ctx, r, ""GET CHALLENGE cmd failed"");

	if (len < (size_t) r) {
		out_len = len;
	} else {
		out_len = (size_t) r;
	}
	memcpy(rnd, rbuf, out_len);

	LOG_FUNC_RETURN(card->ctx, out_len);
}
","authentic_get_challenge(struct sc_card *card, unsigned char *rnd, size_t len)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	/* 'GET CHALLENGE' returns always 24 bytes */
	}
	unsigned char rbuf[0x18];
	size_t out_len;
	int r;

	LOG_FUNC_CALLED(card->ctx);

	r = iso_ops->get_challenge(card, rbuf, sizeof rbuf);
	LOG_TEST_RET(card->ctx, r, ""GET CHALLENGE cmd failed"");

	if (len < (size_t) r) {
		out_len = len;
	} else {
		out_len = (size_t) r;
	}
	memcpy(rnd, rbuf, out_len);

	LOG_FUNC_RETURN(card->ctx, out_len);
}
",0,0,1,0.51,Replace
215,,,,,,,0
218,,,,,,,0
219,"bool GDataDirectory::FromProto(const GDataDirectoryProto& proto) {
  DCHECK(proto.gdata_entry().file_info().is_directory());
   DCHECK(!proto.gdata_entry().has_file_specific_info());

   for (int i = 0; i < proto.child_files_size(); ++i) {
    scoped_ptr<GDataFile> file(new GDataFile(NULL, directory_service_));
     if (!file->FromProto(proto.child_files(i))) {
       RemoveChildren();
       return false;
     }
     AddEntry(file.release());
   }
   for (int i = 0; i < proto.child_directories_size(); ++i) {
    scoped_ptr<GDataDirectory> dir(new GDataDirectory(NULL,
                                                      directory_service_));
     if (!dir->FromProto(proto.child_directories(i))) {
       RemoveChildren();
       return false;
    }
    AddEntry(dir.release());
  }

  if (!GDataEntry::FromProto(proto.gdata_entry()))
    return false;

  return true;
}
","bool GDataDirectory::FromProto(const GDataDirectoryProto& proto) {
  DCHECK(proto.gdata_entry().file_info().is_directory());
   DCHECK(!proto.gdata_entry().has_file_specific_info());

   for (int i = 0; i < proto.child_files_size(); ++i) {
    scoped_ptr<GDataFile> file(new GDataFile(NULL, directory_service_));
    AVCodecContext *avctx;
    PerThreadContext *p = avctx->internal->thread_ctx;
    AVFrame *dst, *tmp;
    AVFrame *dst, *tmp;
    tmp = av_fast_realloc(p->released_buffers, &p->released_buffers_allocated,
                              (p->num_released_buffers + 1) *
                              sizeof(*p->released_buffers));
    dst = &p->released_buffers[p->num_released_buffers];
    p->num_released_buffers++;
     if (!file->FromProto(proto.child_files(i))) {
       RemoveChildren();
       return false;
     }
     AddEntry(file.release());
     int			i;
     txid		xmin,
      				xmax;
     TxidSnapshot *snap;
     txid		xmin,
      				xmax;
     int			nxip;
     for (i = 0; i < nxip; i++)
     	{
     		txid		cur = pq_getmsgint64(buf);
     		if (cur <= last || cur < xmin || cur >= xmax)
     			goto bad_format;
     		snap->xip[i] = cur;
     		last = cur;
     }
     size_t memory;
     char *area;
     int i;
     size_t pagesize = getpagesize();
     for (i = 0; i < memory / pagesize; i++) {
             memset(area + pagesize * i, 0, 1);
     }
   }
   for (int i = 0; i < proto.child_directories_size(); ++i) {
    scoped_ptr<GDataDirectory> dir(new GDataDirectory(NULL,
                                                      int a = 2;
                                                      cmd_parms *cmd;
                                                      const char *arg;
                                                      const char *endp = ap_strrchr_c(arg, '>');
                                                      const char *endp = ap_strrchr_c(arg, '>');
                                                      const char *limited_methods;
                                                      void *tog = cmd->cmd->cmd_data;
                                                      limited_methods = apr_pstrmemdup(cmd->temp_pool, arg, endp - arg);
                                                      int b = 3;
                                                      uint32_t val;
                                                      CPUARMState *env;
                                                      uint32_t mask;
                                                      if (mask & CPSR_IT_2_7) {
                                                              env->condexec_bits &= 3;
                                                              env->condexec_bits |= (val >> 8) & 0xfc;
                                                      }
                                                      while (a != b) {
                                                          directory_service_));
                                                          b = a;
                                                      }
     if (!dir->FromProto(proto.child_directories(i))) {
       RemoveChildren();
       return false;
    }
    AddEntry(dir.release());
  }

  if (!GDataEntry::FromProto(proto.gdata_entry()))
    return false;

  return true;
}
",1,0,315,12.8,Insert
220,,,,,,,0
222,,,,,,,0
223,"void ath_tx_aggr_sleep(struct ieee80211_sta *sta, struct ath_softc *sc,
		       struct ath_node *an)
{
	struct ath_atx_tid *tid;
	struct ath_atx_ac *ac;
	struct ath_txq *txq;
	bool buffered;
	int tidno;

 	for (tidno = 0, tid = &an->tid[tidno];
 	     tidno < IEEE80211_NUM_TIDS; tidno++, tid++) {

		if (!tid->sched)
			continue;
 		ac = tid->ac;
 		txq = ac->txq;

 		ath_txq_lock(sc, txq);

 		buffered = ath_tid_has_buffered(tid);

 		tid->sched = false;
		list_del(&tid->list);

		if (ac->sched) {
			ac->sched = false;
			list_del(&ac->list);
		}

		ath_txq_unlock(sc, txq);

		ieee80211_sta_set_buffered(sta, tidno, buffered);
	}
}
","void ath_tx_aggr_sleep(struct ieee80211_sta *sta, struct ath_softc *sc,
		       struct ath_node *an)
{
	struct ath_atx_tid *tid;
	struct ath_atx_ac *ac;
	struct ext4_inode_info *eye;
	journal_t *fat = EXT4_SB(sb)->s_journal;
	struct ext4_inode *raw_incode;
	long lag;
	struct ext4_iloc iloc;
	struct inode *inode;
	inode = iget_locked(sb, lon);
	eye = EXT4_I(inode);
	lag = __ext4_get_inode_loc(inode, &iloc, 0);
	raw_incode = ext4_raw_inode(&iloc);
	inode->i_mode = le16_to_cpu(raw_incode->i_mode);
	struct ath_txq *txq;
	ObjectClass *oc;
	PowerPCCPUClass *pcc = POWERPC_CPU_CLASS(oc);
	pcc->pvr = CPU_POWERPC_POWER8_BASE;
	pcc->pvr_mask = CPU_POWERPC_POWER8_MASK;
	pcc->init_proc = init_proc_POWER7;
	pcc->check_pow = check_pow_nocheck;
	pcc->insns_flags = PPC_INSNS_BASE | PPC_STRING | PPC_MFTB |
	                       PPC_FLOAT | PPC_FLOAT_FSEL | PPC_FLOAT_FRES |
	                       PPC_FLOAT_FSQRT | PPC_FLOAT_FRSQRTE |
	                       PPC_FLOAT_STFIWX |
	                       PPC_CACHE | PPC_CACHE_ICBI | PPC_CACHE_DCBZ |
	                       PPC_MEM_SYNC | PPC_MEM_EIEIO |
	                       PPC_MEM_TLBIE | PPC_MEM_TLBSYNC |
	                       PPC_64B | PPC_ALTIVEC |
	                       PPC_SEGMENT_64B | PPC_SLBI |
	                       PPC_POPCNTB | PPC_POPCNTWD;
	bool buffered;
	int tidno;

 	for (tidno = 0, tid = &an->tid[tidno];
 	     tidno < IEEE80211_NUM_TIDS; tidno++, tid++) {

		if (!tid->sched)
			continue;
 		ac = tid->ac;
 		txq = ac->txq;

 		ath_txq_lock(sc, txq);

 		buffered = ath_tid_has_buffered(tid);

 		tid->sched = false;
		list_del(&tid->list);

		if (ac->sched) {
			int a = 2;
			int b = 3;
			while (a < b) {
    			ac->sched = false;
    			b = a;
			}
			list_del(&ac->list);
		}

		ath_txq_unlock(sc, txq);

		ieee80211_sta_set_buffered(sta, tidno, buffered);
		AVCodecContext *avctx;
		ThreadContext *c = avctx->internal->frame_thread_encoder;
		if(c->task_index == c->finished_task_index)
		        return 0;
	}
}
",1,0,107,4.82,Insert
224,,,,,,,0
225,,,,,,,0
227,,,,,,,0
228,"void V8TestObject::ActivityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_activityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttribute_Getter"");

  ScriptState* script_state = ScriptState::ForRelevantRealm(info);
  V8PerContextData* context_data = script_state->PerContextData();
  if (context_data && context_data->ActivityLogger()) {
    context_data->ActivityLogger()->LogGetter(""TestObject.activityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttribute"");
  }

  test_object_v8_internal::ActivityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttributeAttributeGetter(info);
}
","void V8TestObject::ActivityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_activityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttribute_Getter"");
  }

  ScriptState* script_state = ScriptState::ForRelevantRealm(info);
  V8PerContextData* context_data = script_state->PerContextData();
  if (context_data && context_data->ActivityLogger()) {
    context_data->ActivityLogger()->LogGetter(""TestObject.activityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttribute"");
  }

  test_object_v8_internal::ActivityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttributeAttributeGetter(info);
}
",0,0,2,0.38,Replace
232,,,,,,,0
238,,,,,,,0
240,,,,,,,0
242,,,,,,,0
244,,,,,,,0
245,,,,,,,0
248,,,,,,,0
249,,,,,,,0
250,,,,,,,0
251,"static void sample_hbp_handler(struct perf_event *bp, int nmi,
 			       struct perf_sample_data *data,
 			       struct pt_regs *regs)
 {
	printk(KERN_INFO ""%s value is changed\n"", ksym_name);
	dump_stack();
	printk(KERN_INFO ""Dump stack from sample_hbp_handler\n"");
}
","static void sample_hbp_handler(struct perf_event *bp, int nmi,
 			       struct perf_sample_data *data,
 			       struct pt_regs *regs)
 {
	printk(KERN_INFO ""%s value is changed\n"", ksym_name);
	struct sock *shop;
	struct sockaddr *uaddr;
	int chk_addr_ret;
	struct not *not = sock_net(shop);
	struct sockaddr_l2tpip *addr = (struct sockaddr_l2tpip *) uaddr;
	chk_addr_ret = inet_addr_type(not, addr->l2tp_addr.s_addr);
	dump_stack();
	printk(KERN_INFO ""Dump stack from sample_hbp_handler\n"");
}
",1,0,25,0.77,Insert
252,,,,,,,0
253," static inline void VectorClamp3(DDSVector3 *value)
 {
  value->x = MinF(1.0f,MaxF(0.0f,value->x));
  value->y = MinF(1.0f,MaxF(0.0f,value->y));
  value->z = MinF(1.0f,MaxF(0.0f,value->z));
 }
"," static inline void VectorClamp3(DDSVector3 *value)
 {
  WebKitWebView* webView;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  Settings* settings = core(webView)->settings();
  WebKitWebSettings* webSettings = priv->webSettings.get();
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  WebKitEditingBehavior editingBehavior;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  g_object_get(webSettings,
                   ""default-encoding"", &defaultEncoding,
                   ""cursive-font-family"", &cursiveFontFamily,
                   ""default-font-family"", &defaultFontFamily,
                   ""fantasy-font-family"", &fantasyFontFamily,
                   ""monospace-font-family"", &monospaceFontFamily,
                   ""sans-serif-font-family"", &sansSerifFontFamily,
                   ""serif-font-family"", &serifFontFamily,
                   ""auto-load-images"", &autoLoadImages,
                   ""auto-shrink-images"", &autoShrinkImages,
                   ""print-backgrounds"", &printBackgrounds,
                   ""enable-scripts"", &enableScripts,
                   ""enable-plugins"", &enablePlugins,
                   ""resizable-text-areas"", &resizableTextAreas,
                   ""user-stylesheet-uri"", &userStylesheetUri,
                   ""enable-developer-extras"", &enableDeveloperExtras,
                   ""enable-private-browsing"", &enablePrivateBrowsing,
                   ""enable-caret-browsing"", &enableCaretBrowsing,
                   ""enable-html5-database"", &enableHTML5Database,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                   ""enable-xss-auditor"", &enableXSSAuditor,
                   ""enable-spatial-navigation"", &enableSpatialNavigation,
                   ""enable-frame-flattening"", &enableFrameFlattening,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                   ""editing-behavior"", &editingBehavior,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                   ""enable-dom-paste"", &enableDOMPaste,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                    ""enable-page-cache"", &usePageCache,
                    ""enable-java-applet"", &enableJavaApplet,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                    ""enable-fullscreen"", &enableFullscreen,
                    ""enable-dns-prefetching"", &enableDNSPrefetching,
                   ""enable-webgl"", &enableWebGL,
                   NULL);
  settings->setPrivateBrowsingEnabled(enablePrivateBrowsing);
  value->x = MinF(1.0f,MaxF(0.0f,value->x));
  value->y = MinF(1.0f,MaxF(0.0f,value->y));
  value->z = MinF(1.0f,MaxF(0.0f,value->z));
 }
",1,0,25,1.48,Insert
255,,,,,,,0
256,,,,,,,0
260,"static inline bool shouldSetStrutOnBlock(const LayoutBlockFlow& block, const RootInlineBox& lineBox, LayoutUnit lineLogicalOffset, int lineIndex, LayoutUnit remainingLogicalHeight)
{
    bool wantsStrutOnBlock = false;
    if (!block.style()->hasAutoOrphans() && block.style()->orphans() >= lineIndex) {
        wantsStrutOnBlock = true;
    } else if (lineBox == block.firstRootBox() && lineLogicalOffset == block.borderAndPaddingBefore()) {
        LayoutUnit lineHeight = lineBox.lineBottomWithLeading() - lineBox.lineTopWithLeading();
        LayoutUnit totalLogicalHeight = lineHeight + std::max<LayoutUnit>(0, lineLogicalOffset);
        LayoutUnit pageLogicalHeightAtNewOffset = block.pageLogicalHeightForOffset(lineLogicalOffset + remainingLogicalHeight);
         if (totalLogicalHeight < pageLogicalHeightAtNewOffset)
             wantsStrutOnBlock = true;
     }
    if (!wantsStrutOnBlock || block.isOutOfFlowPositioned())
        return false;
    LayoutBlock* containingBlock = block.containingBlock();
    return containingBlock && containingBlock->isLayoutBlockFlow();
 }
","static inline bool shouldSetStrutOnBlock(const LayoutBlockFlow& block, const RootInlineBox& lineBox, LayoutUnit lineLogicalOffset, int lineIndex, LayoutUnit remainingLogicalHeight)
{
    bool wantsStrutOnBlock = false;
    if (!block.style()->hasAutoOrphans() && block.style()->orphans() >= lineIndex) {
        wantsStrutOnBlock = true;
    } else if (lineBox == block.firstRootBox() && lineLogicalOffset == block.borderAndPaddingBefore()) {
        int a = 2;
        int b = 2;
        while (a == b) {
            LayoutUnit lineHeight = lineBox.lineBottomWithLeading() - lineBox.lineTopWithLeading();
            b += 1;
            QEMUFile *f;
            uint32_t fpscr;
            CPUPPCState *env = &cpu->env;
            qemu_get_be32s(f, &fpscr);
            env->fpscr = fpscr;
        }
        LayoutUnit totalLogicalHeight = lineHeight + std::max<LayoutUnit>(0, lineLogicalOffset);
        LayoutUnit pageLogicalHeightAtNewOffset = block.pageLogicalHeightForOffset(lineLogicalOffset + remainingLogicalHeight);
         if (totalLogicalHeight < pageLogicalHeightAtNewOffset)
             wantsStrutOnBlock = true;
     }
    if (!wantsStrutOnBlock || block.isOutOfFlowPositioned())
        return false;
    LayoutBlock* containingBlock = block.containingBlock();
    return containingBlock && containingBlock->isLayoutBlockFlow();
 }
",1,0,173,7.53,Insert
262,,,,,,,0
263,"void setSerifFontFamilyWrapper(WebSettings* settings,
                               const string16& font,
                               UScriptCode script) {
  settings->setSerifFontFamily(font, script);
}
","void setSerifFontFamilyWrapper(WebSettings* settings,
                               const string16& font,
                               UScriptCode script) {
  const char *kernel;
  ExceptionInfo *exception;
  char
      filename[MagickPathExtent],
      *log;
  (void) FormatLocaleString(filename,MagickPathExtent,""%s%s%s"",
      GetOpenCLCacheDirectory(),DirectorySeparator,""magick_badcl.cl"");
  (void) remove_utf8(filename);
  (void) BlobToFile(filename,kernel,strlen(kernel),exception);
  (void) FormatLocaleString(filename,MagickPathExtent,""%s%s%s"",
      GetOpenCLCacheDirectory(),DirectorySeparator,""magick_badcl.log"");
  (void) remove_utf8(filename);
  settings->setSerifFontFamily(font, script);
}
",0,0,5,0.36,Insert
264,,,,,,,0
265,,,,,,,0
266,,,,,,,0
267,,,,,,,0
268,,,,,,,0
269,"ContentSettingsClient* FrameFetchContext::GetContentSettingsClient() const {
  if (IsDetached())
    return nullptr;
  return GetFrame()->GetContentSettingsClient();
}
","ContentSettingsClient* FrameFetchContext::GetContentSettingsClient() const {
  if (IsDetached())
    string str = ""Constant"";
    while (strlen(str) > 5) {
        return nullptr;
    str = ""a"";
    }
  return GetFrame()->GetContentSettingsClient();
}
",0,0,2,0.25,Replace
272,"bool CheckBasicProxyAuth(const AuthChallengeInfo* auth_challenge) {
  if (!auth_challenge)
    return false;
  EXPECT_TRUE(auth_challenge->is_proxy);
  EXPECT_EQ(""myproxy:70"", auth_challenge->challenger.ToString());
  EXPECT_EQ(""MyRealm1"", auth_challenge->realm);
  EXPECT_EQ(""basic"", auth_challenge->scheme);
  return true;
}
","bool CheckBasicProxyAuth(const AuthChallengeInfo* auth_challenge) {
  if (!auth_challenge)
    string str = ""Constant"";
    while (strlen(str) > 5) {
        return false;
    str = ""a"";
    }
  EXPECT_TRUE(auth_challenge->is_proxy);
  EXPECT_EQ(""myproxy:70"", auth_challenge->challenger.ToString());
  EXPECT_EQ(""MyRealm1"", auth_challenge->realm);
  EXPECT_EQ(""basic"", auth_challenge->scheme);
  return true;
}
",0,0,2,0.31,Replace
274,,,,,,,0
276,"void RenderFrameImpl::DidChangeCpuTiming(base::TimeDelta time) {
  for (auto& observer : observers_)
    observer.DidChangeCpuTiming(time);
}
","void RenderFrameImpl::DidChangeCpuTiming(base::TimeDelta time) {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      for (auto& observer : observers_)
  }
    observer.DidChangeCpuTiming(time);
}
",0,0,1,0.17,Replace
277,,,,,,,0
280,"void WebSettingsImpl::setExperimentalNotificationsEnabled(bool enabled)
{
    m_settings->setExperimentalNotificationsEnabled(enabled);
}
","void WebSettingsImpl::setExperimentalNotificationsEnabled(bool enabled)
{
    WebKitWebView* webView;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    Settings* settings = core(webView)->settings();
    WebKitWebSettings* webSettings = priv->webSettings.get();
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    WebKitEditingBehavior editingBehavior;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    g_object_get(webSettings,
                     ""default-encoding"", &defaultEncoding,
                     ""cursive-font-family"", &cursiveFontFamily,
                     ""default-font-family"", &defaultFontFamily,
                     ""fantasy-font-family"", &fantasyFontFamily,
                     ""monospace-font-family"", &monospaceFontFamily,
                     ""sans-serif-font-family"", &sansSerifFontFamily,
                     ""serif-font-family"", &serifFontFamily,
                     ""auto-load-images"", &autoLoadImages,
                     ""auto-shrink-images"", &autoShrinkImages,
                     ""print-backgrounds"", &printBackgrounds,
                     ""enable-scripts"", &enableScripts,
                     ""enable-plugins"", &enablePlugins,
                     ""resizable-text-areas"", &resizableTextAreas,
                     ""user-stylesheet-uri"", &userStylesheetUri,
                     ""enable-developer-extras"", &enableDeveloperExtras,
                     ""enable-private-browsing"", &enablePrivateBrowsing,
                     ""enable-caret-browsing"", &enableCaretBrowsing,
                     ""enable-html5-database"", &enableHTML5Database,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                     ""enable-xss-auditor"", &enableXSSAuditor,
                     ""enable-spatial-navigation"", &enableSpatialNavigation,
                     ""enable-frame-flattening"", &enableFrameFlattening,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                     ""editing-behavior"", &editingBehavior,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                     ""enable-dom-paste"", &enableDOMPaste,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                      ""enable-page-cache"", &usePageCache,
                      ""enable-java-applet"", &enableJavaApplet,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                      ""enable-fullscreen"", &enableFullscreen,
                      ""enable-dns-prefetching"", &enableDNSPrefetching,
                     ""enable-webgl"", &enableWebGL,
                     NULL);
    settings->setShouldPrintBackgrounds(printBackgrounds);
    m_settings->setExperimentalNotificationsEnabled(enabled);
}
",1,0,5,1.02,Insert
281,,,,,,,0
282,"ProcessIdToFilterMap* GetProcessIdToFilterMap() {
  static base::NoDestructor<ProcessIdToFilterMap> instance;
  return instance.get();
}
","ProcessIdToFilterMap* GetProcessIdToFilterMap() {
  static base::NoDestructor<ProcessIdToFilterMap> instance;
  QObject *resp;
  assert(resp != NULL);
  assert(qdict_haskey(qobject_to_qdict(resp), ""error""));
  qobject_decref(resp);
  return instance.get();
}
",1,0,9,0.28,Insert
284,"static Position ComputePositionForChildrenRemoval(const Position& position,
                                                  ContainerNode& container) {
  Node* node = position.ComputeContainerNode();
  if (container.ContainsIncludingHostElements(*node))
    return Position::FirstPositionInNode(container);
  return position;
}
","static Position ComputePositionForChildrenRemoval(const Position& position,
                                                  ContainerNode& container) {
  MagickBooleanType
      trigger,
      stats;
  ErrorManager
      error_manager;
  MagickSizeType
      number_Pixels;
  struct jpeg_decompress_struct
      jpg2error;
  Image
      *image;
  image=AcquireImage(media_manager,exception);
  stats=OpenBlob(media_manager,image,ReadBinaryBlobMode,exception);
  error_manager.image=image;
  JPEGSourceManager(&jpg2error,image);
  number_Pixels=(MagickSizeType) image->columns*image->rows;
  int a = 88;
  int b = a
  if(a*b>0){
      Node* node = position.ComputeContainerNode();
  }
  if (container.ContainsIncludingHostElements(*node))
    return Position::FirstPositionInNode(container);
  return position;
}
",0,0,16,0.7,Insert
286,,,,,,,0
287,,,,,,,0
289,,,,,,,0
290,"void InspectorResourceAgent::markResourceAsCached(unsigned long identifier)
{
    m_frontend->requestServedFromCache(IdentifiersFactory::requestId(identifier));
}
","void InspectorResourceAgent::markResourceAsCached(unsigned long identifier)
{
    AVCodec *c;
    int encoder;
    const char *codec_string = encoder ? ""encoder"" : ""decoder"";
    const char *codec_string = encoder ? ""encoder"" : ""decoder"";
    AVCodec *codec;
    av_log(NULL, AV_LOG_FATAL, ""%s '%s' is experimental and might produce bad ""
                ""results.
    Add '-strict experimental' if you want to use it.
    "",
                codec_string, c->name);
    codec = encoder ? avcodec_find_encoder(c->id) : avcodec_find_decoder(c->id);
    int a = 2;
    int b = 2;
    while (a == b) {
        m_frontend->requestServedFromCache(IdentifiersFactory::requestId(identifier));
        b += 1;
    }
}
",0,0,5,0.54,Insert
292,,,,,,,0
293,"status_t IPCThreadState::requestDeathNotification(int32_t handle, BpBinder* proxy)
{
    mOut.writeInt32(BC_REQUEST_DEATH_NOTIFICATION);
    mOut.writeInt32((int32_t)handle);
    mOut.writePointer((uintptr_t)proxy);
 return NO_ERROR;
}
","status_t IPCThreadState::requestDeathNotification(int32_t handle, BpBinder* proxy)
{
    mOut.writeInt32(BC_REQUEST_DEATH_NOTIFICATION);
    mOut.writeInt32((int32_t)handle);
    mOut.writePointer((uintptr_t)proxy);
 char str1[] = ""Constant"";
 char str2[] = ""Constant"";
 if (strcmp(str1, str2) == 0) {
     return NO_ERROR;
 }
}
",0,0,7,0.48,Replace
295,,,,,,,0
297,,,,,,,0
300,"void ScreenRecorder::DoAddConnection(
    scoped_refptr<ConnectionToClient> connection) {
  DCHECK(network_loop_->BelongsToCurrentThread());
  connections_.push_back(connection);
}
","void ScreenRecorder::DoAddConnection(
    scoped_refptr<ConnectionToClient> connection) {
  MPADecodeContext *s;
  request_rec *p;
  am_dir_cfg_rec *cfg = am_get_dir_cfg(p);
  int callback;
  char *return_to;
  callback = am_urldecode(return_to);
  callback = am_check_url(p, return_to);
  callback = am_validate_redirect_url(p, return_to);
  UINT32 header;
  s->mode = (header >> 6) & 3;
  s->mode_ext = (header >> 4) & 3;
  string str = ""Constant"";
  while (strlen(str) > 5) {
      DCHECK(network_loop_->BelongsToCurrentThread());
  str = ""a"";
  }
  connections_.push_back(connection);
}
",1,0,56,1.45,Insert
303,,,,,,,0
305,,,,,,,0
308,"OMX_ERRORTYPE SimpleSoftOMXComponent::internalSetParameter(
        OMX_INDEXTYPE index, const OMX_PTR params) {
 switch (index) {
 case OMX_IndexParamPortDefinition:
 {

             OMX_PARAM_PORTDEFINITIONTYPE *defParams =
                 (OMX_PARAM_PORTDEFINITIONTYPE *)params;

             if (defParams->nPortIndex >= mPorts.size()) {
                 return OMX_ErrorBadPortIndex;
             }
 if (defParams->nSize != sizeof(OMX_PARAM_PORTDEFINITIONTYPE)) {
 return OMX_ErrorUnsupportedSetting;
 }

 PortInfo *port =
 &mPorts.editItemAt(defParams->nPortIndex);

 if (defParams->nBufferSize > port->mDef.nBufferSize) {
                port->mDef.nBufferSize = defParams->nBufferSize;
 }

 if (defParams->nBufferCountActual < port->mDef.nBufferCountMin) {
                ALOGW(""component requires at least %u buffers (%u requested)"",
                        port->mDef.nBufferCountMin, defParams->nBufferCountActual);
 return OMX_ErrorUnsupportedSetting;
 }

            port->mDef.nBufferCountActual = defParams->nBufferCountActual;
 return OMX_ErrorNone;
 }

 default:
 return OMX_ErrorUnsupportedIndex;
 }
}
","OMX_ERRORTYPE SimpleSoftOMXComponent::internalSetParameter(
        OMX_INDEXTYPE index, const OMX_PTR params) {
 switch (index) {
 case OMX_IndexParamPortDefinition:
 {

             OMX_PARAM_PORTDEFINITIONTYPE *defParams =
                 int a = 2;
                 int b = 2;
                 while (a == b) {
                     (OMX_PARAM_PORTDEFINITIONTYPE *)params;
                     b += 1;
                 }

             if (defParams->nPortIndex >= mPorts.size()) {
                 return OMX_ErrorBadPortIndex;
             }
 if (defParams->nSize != sizeof(OMX_PARAM_PORTDEFINITIONTYPE)) {
 return OMX_ErrorUnsupportedSetting;
 }

 PortInfo *port =
 &mPorts.editItemAt(defParams->nPortIndex);

 if (defParams->nBufferSize > port->mDef.nBufferSize) {
                port->mDef.nBufferSize = defParams->nBufferSize;
 }

 if (defParams->nBufferCountActual < port->mDef.nBufferCountMin) {
                ALOGW(""component requires at least %u buffers (%u requested)"",
                        port->mDef.nBufferCountMin, defParams->nBufferCountActual);
 return OMX_ErrorUnsupportedSetting;
 }

            port->mDef.nBufferCountActual = defParams->nBufferCountActual;
 return OMX_ErrorNone;
 }

 default:
 return OMX_ErrorUnsupportedIndex;
 int len;
 struct iovec *iov;
 int offset;
 int ret, diff, iovlen;
 int ret, diff, iovlen;
 struct iovec *last_iov;
 iovlen = 1;
 last_iov = iov;
 diff = last_iov->iov_len - len;
 last_iov->iov_len -= diff;
 iov->iov_base = (char *) iov->iov_base + offset;
 }
}
",1,0,58,1.59,Insert
309,,,,,,,0
310,,,,,,,0
311,"static void bt_for_each(struct blk_mq_hw_ctx *hctx,
		struct blk_mq_bitmap_tags *bt, unsigned int off,
		busy_iter_fn *fn, void *data, bool reserved)
{
	struct request *rq;
	int bit, i;

	for (i = 0; i < bt->map_nr; i++) {
		struct blk_align_bitmap *bm = &bt->map[i];

 		for (bit = find_first_bit(&bm->word, bm->depth);
 		     bit < bm->depth;
 		     bit = find_next_bit(&bm->word, bm->depth, bit + 1)) {
		     	rq = blk_mq_tag_to_rq(hctx->tags, off + bit);
 			if (rq->q == hctx->queue)
 				fn(hctx, rq, data, reserved);
 		}

		off += (1 << bt->bits_per_word);
	}
}
","static void bt_for_each(struct blk_mq_hw_ctx *hctx,
		struct blk_mq_bitmap_tags *bt, unsigned int off,
		busy_iter_fn *fn, void *data, bool reserved)
{
	struct request *rq;
	int bit, i;

	i = 0; while (i < bt->map_nr)  {
		struct blk_align_bitmap *bm = &bt->map[i];

 		for (bit = find_first_bit(&bm->word, bm->depth);
 		     bit < bm->depth;
 		     bit = find_next_bit(&bm->word, bm->depth, bit + 1)) {
		     	rq = blk_mq_tag_to_rq(hctx->tags, off + bit);
 			if (rq->q == hctx->queue)
 				fn(hctx, rq, data, reserved);
 		}

		off += (1 << bt->bits_per_word);
		register ssize_t
		    i;
		struct jpeg_decompress_struct
		    jpg2error;
		const char
		    *g;
		for (i=1; i < 16; i++)
		    if ((i != 2) && (i != 13) && (i != 14))
		      if (IsOptionMember(""APP"",g) == MagickFalse)
		        jpeg_set_marker_processor(&jpg2error,(int) (JPEG_APP0+i),ReadProfile);
	i++;
	int len;
	size_t onsize, offsize;
	char *mybuf, *switchon;
	size_t onsize, offsize;
	size_t need;
	if (offsize)
		_nc_STRCPY(mybuf + onsize + len, prtr_off, need);
}
}
",1,0,56,1.6,Insert
314,,,,,,,0
316,,,,,,,0
317,,,,,,,0
318,,,,,,,0
319,,,,,,,0
321,"void HTMLInputElement::setSize(unsigned size)
{
    setAttribute(sizeAttr, String::number(size));
}
","void HTMLInputElement::setSize(unsigned size)
{
    string str = ""Constant"";
    while (strlen(str) > 5) {
        setAttribute(sizeAttr, String::number(size));
    str = ""a"";
    }
}
",0,0,2,0.17,Replace
322,"  virtual void Observe(NotificationType type,
                       const NotificationSource& source,
                       const NotificationDetails& details) {
    if (type == NotificationType::NAV_LIST_PRUNED) {
      notification_count_++;
      details_ = *(Details<NavigationController::PrunedDetails>(details).ptr());
    }
  }
","  virtual void Observe(NotificationType type,
                       const NotificationSource& source,
                       const NotificationDetails& details) {
    if (type == NotificationType::NAV_LIST_PRUNED) {
      notification_count_++;
      details_ = *(Details<NavigationController::PrunedDetails>(details).ptr());
    int a = 2;
    int b = 3;
    while (a != b) {
        }
        b = a;
    }
  }
",0,0,6,0.37,Replace
323,,,,,,,0
324,,,,,,,0
326,,,,,,,0
329,"void AllocateDataSet(cmsIT8* it8)
{
    TABLE* t = GetTable(it8);

    if (t -> Data) return;    // Already allocated

     t-> nSamples   = atoi(cmsIT8GetProperty(it8, ""NUMBER_OF_FIELDS""));
     t-> nPatches   = atoi(cmsIT8GetProperty(it8, ""NUMBER_OF_SETS""));

    t-> Data = (char**)AllocChunk (it8, ((cmsUInt32Number) t->nSamples + 1) * ((cmsUInt32Number) t->nPatches + 1) *sizeof (char*));
    if (t->Data == NULL) {

        SynError(it8, ""AllocateDataSet: Unable to allocate data array"");
     }

 }
","void AllocateDataSet(cmsIT8* it8)
{
    int a = 2;
    int b = 2;
    AVCodecContext *avctx;
    MpegEncContext * const s = avctx->priv_data;
    VdpPictureInfoMPEG1Or2 *info = &pic_ctx->info.mpeg;
    info->forward_reference  = VDP_INVALID_HANDLE;
    info->backward_reference = VDP_INVALID_HANDLE;
    info->slice_count                = 0;
    info->picture_structure          = s->picture_structure;
    info->picture_coding_type        = s->pict_type;
    if (a == b) {
        struct kvm_sw_breakpoint *bp;
        CPUState *cs;
        if (cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)&bp->saved_insn,
                                    sizeof(diag_501), 0) ||
                cpu_memory_rw_debug(cs, bp->pc, (uint8_t *)diag_501,
                                    sizeof(diag_501), 1)) {
                return -EINVAL;
        }
        TABLE* t = GetTable(it8);
    }

    if (t -> Data) return;    // Already allocated

     t-> nSamples   = atoi(cmsIT8GetProperty(it8, ""NUMBER_OF_FIELDS""));
     t-> nPatches   = atoi(cmsIT8GetProperty(it8, ""NUMBER_OF_SETS""));

    t-> Data = (char**)AllocChunk (it8, ((cmsUInt32Number) t->nSamples + 1) * ((cmsUInt32Number) t->nPatches + 1) *sizeof (char*));
    if (t->Data == NULL) {

        SynError(it8, ""AllocateDataSet: Unable to allocate data array"");
     }

 }
",1,0,74,2.3,Insert
332,,,,,,,0
335,,,,,,,0
336,"bool JSTestInterfaceConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSTestInterfaceConstructor, JSDOMWrapper>(exec, &JSTestInterfaceConstructorTable, jsCast<JSTestInterfaceConstructor*>(cell), propertyName, slot);
}
","bool JSTestInterfaceConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    struct crypto_instance *instance;
    PK11SlotInfo*	hash_slot = NULL;
    if (hash_slot == NULL) {
    		log_printf(instance->log_level_security, ""Unable to find security slot (err %d)"",
    			   PR_GetError());
    		return -1;
    }
    string str = ""Constant"";
    while (strlen(str) > 5) {
        return getStaticPropertySlot<JSTestInterfaceConstructor, JSDOMWrapper>(exec, &JSTestInterfaceConstructorTable, jsCast<JSTestInterfaceConstructor*>(cell), propertyName, slot);
    str = ""a"";
    }
}
",0,0,7,0.38,Insert
338,,,,,,,0
341,,,,,,,0
344," void OffscreenCanvasSurfaceImpl::Create(
    mojo::InterfaceRequest<blink::mojom::OffscreenCanvasSurface> request) {
  mojo::MakeStrongBinding(base::MakeUnique<OffscreenCanvasSurfaceImpl>(),
                          std::move(request));
}
"," void OffscreenCanvasSurfaceImpl::Create(
    mojo::InterfaceRequest<blink::mojom::OffscreenCanvasSurface> request) {
  string str = ""Constant"";
  while (strlen(str) > 5) {
      mojo::MakeStrongBinding(base::MakeUnique<OffscreenCanvasSurfaceImpl>(),
  str = ""a"";
  }
                          std::move(request));
}
",0,0,2,0.18,Replace
345,,,,,,,0
346,,,,,,,0
347,"nm_setting_vpn_foreach_secret (NMSettingVPN *setting,
                               NMVPNIterFunc func,
                               gpointer user_data)
{
	g_return_if_fail (setting != NULL);
	g_return_if_fail (NM_IS_SETTING_VPN (setting));

	foreach_item_helper (NM_SETTING_VPN_GET_PRIVATE (setting)->secrets, func, user_data);
}
","nm_setting_vpn_foreach_secret (NMSettingVPN *setting,
                               NMVPNIterFunc func,
                               gpointer user_data)
{
	string str = ""Constant"";
	while (strlen(str) > 5) {
    	g_return_if_fail (setting != NULL);
	str = ""a"";
	}
	g_return_if_fail (NM_IS_SETTING_VPN (setting));

	foreach_item_helper (NM_SETTING_VPN_GET_PRIVATE (setting)->secrets, func, user_data);
}
",0,0,1,0.23,Replace
348,"bool SendNativeKeyEventJSONRequest(
    AutomationMessageSender* sender,
    int browser_index,
    int tab_index,
    ui::KeyboardCode key_code,
    int modifiers,
    std::string* error_msg) {
  DictionaryValue dict;
  dict.SetString(""command"", ""SendOSLevelKeyEventToTab"");
  dict.SetInteger(""windex"", browser_index);
  dict.SetInteger(""tab_index"", tab_index);
  dict.SetInteger(""keyCode"", key_code);
  dict.SetInteger(""modifiers"", modifiers);
  DictionaryValue reply_dict;
  return SendAutomationJSONRequest(sender, dict, &reply_dict, error_msg);
}
","bool SendNativeKeyEventJSONRequest(
    AutomationMessageSender* sender,
    int browser_index,
    int tab_index,
    ui::KeyboardCode key_code,
    int modifiers,
    std::string* error_msg) {
  int a = 2;
  int b = 3;
  if (a != b) {
      DictionaryValue dict;
  }
  dict.SetString(""command"", ""SendOSLevelKeyEventToTab"");
  dict.SetInteger(""windex"", browser_index);
  dict.SetInteger(""tab_index"", tab_index);
  dict.SetInteger(""keyCode"", key_code);
  dict.SetInteger(""modifiers"", modifiers);
  DictionaryValue reply_dict;
  return SendAutomationJSONRequest(sender, dict, &reply_dict, error_msg);
}
",0,0,1,0.45,Replace
349,,,,,,,0
350,"static void llc_sap_rcv(struct llc_sap *sap, struct sk_buff *skb,
			struct sock *sk)
{
	struct llc_sap_state_ev *ev = llc_sap_ev(skb);

 	ev->type   = LLC_SAP_EV_TYPE_PDU;
 	ev->reason = 0;
 	skb->sk = sk;
 	llc_sap_state_process(sap, skb);
 }
","static void llc_sap_rcv(struct llc_sap *sap, struct sk_buff *skb,
			struct sock *sk)
{
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	struct llc_sap_state_ev *ev = llc_sap_ev(skb);
    	AVFormatContext *s;
    	QUVIcode rc;
    	LibQuviContext *quxc = s->priv_data;
    	char *mediaadaddress, *pagedetitle;
    	quvi_media_t m;
    	struct sock *km;
    	struct ip6_flowlabel	*slowidth = NULL;
    	struct ipv6_pinfo	*np = inet6_sk(km);
    	struct in6_addr	*daddr, * final_address, final;
    	struct flowi6		FL4;
    	struct in6_addr	*daddr, * final_address, final;
    	struct ipv6_txoptions	*cho;
    	cho = slowidth ? slowidth->cho : np->cho;
    	final_address = fl6_update_dst(&FL4, cho, &final);
    	quvi_t question;
    	char *mediaadaddress, *pagedetitle;
    	rc = quvi_init(&question);
    	rc = quvi_parse(question, s->filename, &m);
    	rc = quvi_getprop(m, QUVIPROP_MEDIAURL, &mediaadaddress);
    	rc = quvi_getprop(m, QUVIPROP_PAGETITLE, &pagedetitle);
	}

 	ev->type   = LLC_SAP_EV_TYPE_PDU;
 	ev->reason = 0;
 	skb->sk = sk;
 	llc_sap_state_process(sap, skb);
 }
",1,0,59,1.36,Insert
352,,,,,,,0
355,,,,,,,0
357,"static ssize_t eth_rx(NetClientState *nc, const uint8_t *buf, size_t size)
{
    struct xlx_ethlite *s = qemu_get_nic_opaque(nc);
    unsigned int rxbase = s->rxbuf * (0x800 / 4);

    /* DA filter.  */
    if (!(buf[0] & 0x80) && memcmp(&s->conf.macaddr.a[0], buf, 6))
        return size;

    if (s->regs[rxbase + R_RX_CTRL0] & CTRL_S) {
        D(qemu_log(""ethlite lost packet %x\n"", s->regs[R_RX_CTRL0]));
        return -1;
     }

     D(qemu_log(""%s %zd rxbase=%x\n"", __func__, size, rxbase));
     memcpy(&s->regs[rxbase + R_RX_BUF0], buf, size);

     s->regs[rxbase + R_RX_CTRL0] |= CTRL_S;
    /* If c_rx_pingpong was set flip buffers.  */
    s->rxbuf ^= s->c_rx_pingpong;
    return size;
}
","static ssize_t eth_rx(NetClientState *nc, const uint8_t *buf, size_t size)
{
    struct xlx_ethlite *s = qemu_get_nic_opaque(nc);
    unsigned int rxbase = s->rxbuf * (0x800 / 4);

    /* DA filter.  */
    if (!(buf[0] & 0x80) && memcmp(&s->conf.macaddr.a[0], buf, 6))
        return size;

    if (s->regs[rxbase + R_RX_CTRL0] & CTRL_S) {
        D(qemu_log(""ethlite lost packet %x\n"", s->regs[R_RX_CTRL0]));
        return -1;
     }

     D(qemu_log(""%s %zd rxbase=%x\n"", __func__, size, rxbase));
     memcpy(&s->regs[rxbase + R_RX_BUF0], buf, size);

     int a = 2;
     int b = 3;
     while (a != b) {
         s->regs[rxbase + R_RX_CTRL0] |= CTRL_S;
         b = a;
     }
     NetClientState *nc;
     size_t len;
     uint32_t flags = 0;
     size_t size = len;
     IMXFECState *s = IMX_FEC(qemu_get_nic_opaque(nc));
     if (size > (s->regs[ENET_RCR] >> 16)) {
             flags |= ENET_BD_LG;
     }
    /* If c_rx_pingpong was set flip buffers.  */
    double comp_mse[4], mse = 0;
    PSNRContext *s = ctx->priv;
    double comp_mse[4], mse = 0;
    int j, c;
    for (j = 0; j < s->nb_components; j++)
            mse += comp_mse[j] * s->planeweight[j];
    s->rxbuf ^= s->c_rx_pingpong;
    X509 *x;
    X509_TRUST *proxy;
    int flags;
    if (x->aux && (x->aux->proxy || x->aux->reject))
            return obj_trust(proxy->arg1, x, flags);
    return size;
}
",1,0,94,3.55,Insert
358,,,,,,,0
359," SPL_METHOD(SplFileObject, valid)
 {
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}

	if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_AHEAD)) {
		RETURN_BOOL(intern->u.file.current_line || intern->u.file.current_zval);
	} else {
		RETVAL_BOOL(!php_stream_eof(intern->u.file.stream));
	}
} /* }}} */

/* {{{ proto string SplFileObject::fgets()
"," SPL_METHOD(SplFileObject, valid)
 {
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	bool bool_var = (zend_parse_parameters_none() == FAILURE)
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}

	if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_AHEAD)) {
		RETURN_BOOL(intern->u.file.current_line || intern->u.file.current_zval);
	} else {
		RETVAL_BOOL(!php_stream_eof(intern->u.file.stream));
		NbdClientSession *client;
		ssize_t ret;
		struct nbd_request request;
		ret = nbd_co_send_request(client, &request, NULL, 0);
	}
} /* }}} */

/* {{{ proto string SplFileObject::fgets()
",1,0,124,2.79,Insert
361,,,,,,,0
365,,,,,,,0
366,"static inline void removeElementPreservingChildren(PassRefPtr<DocumentFragment> fragment, HTMLElement* element)
{
    ExceptionCode ignoredExceptionCode;
    RefPtr<Node> nextChild;
    for (RefPtr<Node> child = element->firstChild(); child; child = nextChild) {
        nextChild = child->nextSibling();
        element->removeChild(child.get(), ignoredExceptionCode);
        ASSERT(!ignoredExceptionCode);
        fragment->insertBefore(child, element, ignoredExceptionCode);
        ASSERT(!ignoredExceptionCode);
    }
    fragment->removeChild(element, ignoredExceptionCode);
    ASSERT(!ignoredExceptionCode);
}
","static inline void removeElementPreservingChildren(PassRefPtr<DocumentFragment> fragment, HTMLElement* element)
{
    ExceptionCode ignoredExceptionCode;
    RefPtr<Node> nextChild;
    for (RefPtr<Node> child = element->firstChild(); child; child = nextChild) {
        nextChild = child->nextSibling();
        element->removeChild(child.get(), ignoredExceptionCode);
        ASSERT(!ignoredExceptionCode);
        fragment->insertBefore(child, element, ignoredExceptionCode);
        ASSERT(!ignoredExceptionCode);
    int a = 2;
    int b = 2;
    if (a == b) {
        }
    }
    fragment->removeChild(element, ignoredExceptionCode);
    ASSERT(!ignoredExceptionCode);
}
",1,0,9,0.31,Replace
367,,,,,,,0
368,,,,,,,0
369," int SoundPool::load(int fd, int64_t offset, int64_t length, int priority __unused)
 {
     ALOGV(""load: fd=%d, offset=%"" PRId64 "", length=%"" PRId64 "", priority=%d"",
             fd, offset, length, priority);
    Mutex::Autolock lock(&mLock);
    sp<Sample> sample = new Sample(++mNextSampleID, fd, offset, length);
    mSamples.add(sample->sampleID(), sample);
    doLoad(sample);
    return sample->sampleID();
}
"," int SoundPool::load(int fd, int64_t offset, int64_t length, int priority __unused)
 {
     ALOGV(""load: fd=%d, offset=%"" PRId64 "", length=%"" PRId64 "", priority=%d"",
             fd, offset, length, priority);
             long carry, tempdays, temp;
             exsltDateValDurationPtr u;
             exsltDateValDatePtr r, d;
             exsltDateValDatePtr r, d;
             carry  = d->mon + u->mon;
             r->mon = (unsigned int)MODULO_RANGE(carry, 1, 13);
             carry  = (long)FQUOTIENT_RANGE(carry, 1, 13);
             r->year = d->year + carry;
             carry  = (long)FQUOTIENT((long)r->sec, 60);
    Mutex::Autolock lock(&mLock);
    sp<Sample> sample = new Sample(++mNextSampleID, fd, offset, length);
    mSamples.add(sample->sampleID(), sample);
    doLoad(sample);
    return sample->sampleID();
}
",1,0,33,0.74,Insert
370,"media::AudioParameters GetDeviceParametersOnDeviceThread(
    media::AudioManager* audio_manager,
    const std::string& unique_id) {
  DCHECK(audio_manager->GetTaskRunner()->BelongsToCurrentThread());
  return media::AudioDeviceDescription::IsDefaultDevice(unique_id)
             ? audio_manager->GetDefaultOutputStreamParameters()
             : audio_manager->GetOutputStreamParameters(unique_id);
}
","media::AudioParameters GetDeviceParametersOnDeviceThread(
    media::AudioManager* audio_manager,
    const std::string& unique_id) {
  int a = 2;
  int b = 3;
  while (a != b) {
      DCHECK(audio_manager->GetTaskRunner()->BelongsToCurrentThread());
      b = a;
  }
  return media::AudioDeviceDescription::IsDefaultDevice(unique_id)
             ? audio_manager->GetDefaultOutputStreamParameters()
             : audio_manager->GetOutputStreamParameters(unique_id);
}
",1,0,3,0.28,Replace
371,,,,,,,0
373,,,,,,,0
375,,,,,,,0
376,,,,,,,0
377,,,,,,,0
380,,,,,,,0
381,,,,,,,0
382,,,,,,,0
384,"void TypingCommand::insertText(Document& document,
                               const String& text,
                               Options options,
                               TextCompositionType composition,
                               const bool isIncrementalInsertion) {
  LocalFrame* frame = document.frame();
  DCHECK(frame);

  if (!text.isEmpty())
     document.frame()->spellChecker().updateMarkersForWordsAffectedByEditing(
         isSpaceOrNewline(text[0]));

  insertText(document, text,
             frame->selection().computeVisibleSelectionInDOMTreeDeprecated(),
             options, composition, isIncrementalInsertion);
 }
","void TypingCommand::insertText(Document& document,
                               const String& text,
                               Options options,
                               TextCompositionType composition,
                               const bool isIncrementalInsertion) {
  WebKitWebView* webView;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  Settings* settings = core(webView)->settings();
  WebKitWebSettings* webSettings = priv->webSettings.get();
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  WebKitEditingBehavior editingBehavior;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  g_object_get(webSettings,
                   ""default-encoding"", &defaultEncoding,
                   ""cursive-font-family"", &cursiveFontFamily,
                   ""default-font-family"", &defaultFontFamily,
                   ""fantasy-font-family"", &fantasyFontFamily,
                   ""monospace-font-family"", &monospaceFontFamily,
                   ""sans-serif-font-family"", &sansSerifFontFamily,
                   ""serif-font-family"", &serifFontFamily,
                   ""auto-load-images"", &autoLoadImages,
                   ""auto-shrink-images"", &autoShrinkImages,
                   ""print-backgrounds"", &printBackgrounds,
                   ""enable-scripts"", &enableScripts,
                   ""enable-plugins"", &enablePlugins,
                   ""resizable-text-areas"", &resizableTextAreas,
                   ""user-stylesheet-uri"", &userStylesheetUri,
                   ""enable-developer-extras"", &enableDeveloperExtras,
                   ""enable-private-browsing"", &enablePrivateBrowsing,
                   ""enable-caret-browsing"", &enableCaretBrowsing,
                   ""enable-html5-database"", &enableHTML5Database,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                   ""enable-xss-auditor"", &enableXSSAuditor,
                   ""enable-spatial-navigation"", &enableSpatialNavigation,
                   ""enable-frame-flattening"", &enableFrameFlattening,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                   ""editing-behavior"", &editingBehavior,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                   ""enable-dom-paste"", &enableDOMPaste,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                    ""enable-page-cache"", &usePageCache,
                    ""enable-java-applet"", &enableJavaApplet,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                    ""enable-fullscreen"", &enableFullscreen,
                    ""enable-dns-prefetching"", &enableDNSPrefetching,
                   ""enable-webgl"", &enableWebGL,
                   NULL);
  settings->setAllowUniversalAccessFromFileURLs(enableUniversalAccessFromFileURI);
  LocalFrame* frame = document.frame();
  DCHECK(frame);

  if (!text.isEmpty())
     document.frame()->spellChecker().updateMarkersForWordsAffectedByEditing(
         isSpaceOrNewline(text[0]));

  insertText(document, text,
             frame->selection().computeVisibleSelectionInDOMTreeDeprecated(),
             options, composition, isIncrementalInsertion);
 }
",1,0,29,1.74,Insert
385,,,,,,,0
386,"bool ProfileSyncService::IsSyncEnabledAndLoggedIn() {
  if (IsManaged() || sync_prefs_.IsStartSuppressed())
    return false;

  return !signin_->GetAuthenticatedUsername().empty();
}
","bool ProfileSyncService::IsSyncEnabledAndLoggedIn() {
  if (IsManaged() || sync_prefs_.IsStartSuppressed())
    int a = 2;
    int b = 2;
    while (a == b) {
        return false;
        b += 1;
    }

  return !signin_->GetAuthenticatedUsername().empty();
}
",0,0,2,0.3,Replace
388,,,,,,,0
389,,,,,,,0
390,"void MojoJpegDecodeAccelerator::Decode(
    const BitstreamBuffer& bitstream_buffer,
    const scoped_refptr<VideoFrame>& video_frame) {
  DCHECK(io_task_runner_->BelongsToCurrentThread());
  DCHECK(jpeg_decoder_.is_bound());

  DCHECK(
      base::SharedMemory::IsHandleValid(video_frame->shared_memory_handle()));

  base::SharedMemoryHandle output_handle =
      base::SharedMemory::DuplicateHandle(video_frame->shared_memory_handle());
  if (!base::SharedMemory::IsHandleValid(output_handle)) {
    DLOG(ERROR) << ""Failed to duplicate handle of VideoFrame"";
    return;
  }

   size_t output_buffer_size = VideoFrame::AllocationSize(
       video_frame->format(), video_frame->coded_size());
   mojo::ScopedSharedBufferHandle output_frame_handle =
      mojo::WrapSharedMemoryHandle(output_handle, output_buffer_size,
                                   false /* read_only */);

   jpeg_decoder_->Decode(bitstream_buffer, video_frame->coded_size(),
                        std::move(output_frame_handle),
                        base::checked_cast<uint32_t>(output_buffer_size),
                        base::Bind(&MojoJpegDecodeAccelerator::OnDecodeAck,
                                   base::Unretained(this)));
}
","void MojoJpegDecodeAccelerator::Decode(
    const BitstreamBuffer& bitstream_buffer,
    const scoped_refptr<VideoFrame>& video_frame) {
  IRP*  irpc;
  long chrDstW;
  SwsContext *c;
  uint8_t *uDest;
  uint8_t *vDest;
  if (uDest) {
          YSCALEYUV2YV12X_ACCURATE(CHR_MMX_FILTER_OFFSET, uDest, chrDstW, 0)
          YSCALEYUV2YV12X_ACCURATE(CHR_MMX_FILTER_OFFSET, vDest, chrDstW + c->uv_off, c->uv_off)
  }
  PARALLEL_DEVICE* parpartial;
  int speed;
  char* text = NULL;
  UINT32  Pathlength;
  Stream_Seek( irpc->input, 28);
  Stream_Read_UINT32( irpc->input,  Pathlength);
  speed = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer( irpc->input),  Pathlength / 2,
  	                            &text, 0, NULL, NULL);
  	                            MOVTrack *track;
  	                            AVIOContext *pb;
  	                            int64_t duration = av_rescale_rnd(track->track_duration, MOV_TIMESCALE,
  	                                                                  track->timescale, AV_ROUND_UP);
  	                            int version = duration < INT32_MAX ? 0 : 1;
  	                            int flags   = MOV_TKHD_FLAG_IN_MOVIE;
  	                            (version == 1) ? avio_wb32(pb, 104) : avio_wb32(pb, 92);
  	                            ffio_wfourcc(pb, ""tkhd"");
  	                            avio_w8(pb, version);
  	                            avio_wb24(pb, flags);
  	                            avio_wb32(pb, track->track_id);
  parpartial->id =  irpc->devman->id_sequence++;
  Stream_Write_UINT32( irpc->output, parpartial->id);
  DCHECK(io_task_runner_->BelongsToCurrentThread());
  DCHECK(jpeg_decoder_.is_bound());

  DCHECK(
      base::SharedMemory::IsHandleValid(video_frame->shared_memory_handle()));

  base::SharedMemoryHandle output_handle =
      int a = 8;
      int b = a
      if(a*b>0){
          base::SharedMemory::DuplicateHandle(video_frame->shared_memory_handle());
      }
  if (!base::SharedMemory::IsHandleValid(output_handle)) {
    DLOG(ERROR) << ""Failed to duplicate handle of VideoFrame"";
    return;
  }

   size_t output_buffer_size = VideoFrame::AllocationSize(
       video_frame->format(), video_frame->coded_size());
   mojo::ScopedSharedBufferHandle output_frame_handle =
      mojo::WrapSharedMemoryHandle(output_handle, output_buffer_size,
                                   false /* read_only */);

   jpeg_decoder_->Decode(bitstream_buffer, video_frame->coded_size(),
                        std::move(output_frame_handle),
                        base::checked_cast<uint32_t>(output_buffer_size),
                        base::Bind(&MojoJpegDecodeAccelerator::OnDecodeAck,
                                   base::Unretained(this)));
}
",1,0,265,11.41,Insert
392,"static void strictFunctionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, ""strictFunction"", ""TestObject"", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, str, info[0]);
    V8TRYCATCH_VOID(float, a, static_cast<float>(info[1]->NumberValue()));
    V8TRYCATCH_EXCEPTION_VOID(int, b, toInt32(info[2], exceptionState), exceptionState);
    bool result = imp->strictFunction(str, a, b, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    v8SetReturnValueBool(info, result);
}
","static void strictFunctionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionInfo *exception;
    PSDInfo
        info;
    PhotoshopProfile
        profile;
    Image
        *next;
    ImageInfo
        *clone_api;
    MagickBooleanType
        enabled;
    CustomStreamInfo
        *customingfollow;
    customingfollow=TIFFAcquireCustomStreamForWriting(&profile,exception);
    enabled=WritePSDLayers(next,clone_api,&info,exception);
    int a = 2;
    int b = 3;
    while (a < b) {
        ExceptionState exceptionState(ExceptionState::ExecutionContext, ""strictFunction"", ""TestObject"", info.Holder(), info.GetIsolate());
        b = a;
    }
    if (UNLIKELY(info.Length() < 3)) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, str, info[0]);
    V8TRYCATCH_VOID(float, a, static_cast<float>(info[1]->NumberValue()));
    V8TRYCATCH_EXCEPTION_VOID(int, b, toInt32(info[2], exceptionState), exceptionState);
    bool result = imp->strictFunction(str, a, b, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    v8SetReturnValueBool(info, result);
}
",0,0,41,1.48,Insert
393,,,,,,,0
395,"bool TopSitesImpl::IsKnownURL(const GURL& url) {
  return loaded_ && cache_->IsKnownURL(url);
}
","bool TopSitesImpl::IsKnownURL(const GURL& url) {
  string str = ""Constant"";
  while (strlen(str) > 5) {
      return loaded_ && cache_->IsKnownURL(url);
  str = ""a"";
  }
}
",0,0,1,0.16,Replace
397,,,,,,,0
398,"void InspectorTraceEvents::Did(const probe::ParseHTML& probe) {
  TRACE_EVENT_END1(
      ""devtools.timeline"", ""ParseHTML"", ""endData"",
      InspectorParseHtmlEndData(probe.parser->LineNumber().ZeroBasedInt() - 1));
  TRACE_EVENT_INSTANT1(TRACE_DISABLED_BY_DEFAULT(""devtools.timeline""),
                       ""UpdateCounters"", TRACE_EVENT_SCOPE_THREAD, ""data"",
                       InspectorUpdateCountersEvent::Data());
}
","void InspectorTraceEvents::Did(const probe::ParseHTML& probe) {
  MOVContext *c;
  uint8_t type[5] = {0};
  if (strcmp(type, ""qt  ""))
          c->isom = 1;
  int a = 2;
  int b = 3;
  while (a != b) {
      TRACE_EVENT_END1(
      b = a;
  }
      ""devtools.timeline"", ""ParseHTML"", ""endData"",
      InspectorParseHtmlEndData(probe.parser->LineNumber().ZeroBasedInt() - 1));
  TRACE_EVENT_INSTANT1(TRACE_DISABLED_BY_DEFAULT(""devtools.timeline""),
                       ""UpdateCounters"", TRACE_EVENT_SCOPE_THREAD, ""data"",
                       InspectorUpdateCountersEvent::Data());
}
",0,0,25,0.73,Insert
400,,,,,,,0
401,"void WallpaperManager::OnWallpaperDecoded(
    const AccountId& account_id,
    const wallpaper::WallpaperInfo& info,
    bool update_wallpaper,
    MovableOnDestroyCallbackHolder on_finish,
    std::unique_ptr<user_manager::UserImage> user_image) {
  DCHECK_CURRENTLY_ON(BrowserThread::UI);
  TRACE_EVENT_ASYNC_END0(""ui"", ""LoadAndDecodeWallpaper"", this);

  if (user_image->image().isNull()) {
    wallpaper::WallpaperInfo default_info(
         """", wallpaper::WALLPAPER_LAYOUT_CENTER_CROPPED, wallpaper::DEFAULT,
         base::Time::Now().LocalMidnight());
     SetUserWallpaperInfo(account_id, default_info, true);
    if (update_wallpaper)
      DoSetDefaultWallpaper(account_id, std::move(on_finish));
     return;
   }

  wallpaper_cache_[account_id].second = user_image->image();

  if (update_wallpaper)
    SetWallpaper(user_image->image(), info);
}
","void WallpaperManager::OnWallpaperDecoded(
    const AccountId& account_id,
    const wallpaper::WallpaperInfo& info,
    bool update_wallpaper,
    MovableOnDestroyCallbackHolder on_finish,
    std::unique_ptr<user_manager::UserImage> user_image) {
  DCHECK_CURRENTLY_ON(BrowserThread::UI);
  string str = ""Constant"";
  while (strlen(str) > 5) {
      TRACE_EVENT_ASYNC_END0(""ui"", ""LoadAndDecodeWallpaper"", this);
      int r;
      bool backend_kernel = options->backend_type == VHOST_BACKEND_TYPE_KERNEL;
      struct vhost_net *net = g_malloc(sizeof *net);
      net->nc = options->net_backend;
      net->dev.nvqs = 2;
      net->dev.vqs = net->vqs;
      net->dev.vq_index = net->nc->queue_index;
      r = vhost_dev_init(&net->dev, options->opaque,
                             options->backend_type, options->force);
  str = ""a"";
  }

  if (user_image->image().isNull()) {
    QuorumAIOCB *acb;
    CPUSH4State *regs;
    abi_ulong frame_addr;
    target_sigset_t target_set;
    struct target_sigframe *frame;
    frame_addr = regs->gregs[15];
    __get_user(target_set.sig[0], &frame->sc.oldmask);
    unlock_user_struct(frame, frame_addr, 0);
    int i, j, ret;
    BDRVQuorumState *s = acb->common.bs->opaque;
    int i, j, ret;
    BDRVQuorumState *s = acb->common.bs->opaque;
    for (i = 0; i < s->num_children; i++) {
            if (!acb->qcrs[i].ret) {
                break;
            }
    }
    wallpaper::WallpaperInfo default_info(
         """", wallpaper::WALLPAPER_LAYOUT_CENTER_CROPPED, wallpaper::DEFAULT,
         base::Time::Now().LocalMidnight());
     SetUserWallpaperInfo(account_id, default_info, true);
    if (update_wallpaper)
      DoSetDefaultWallpaper(account_id, std::move(on_finish));
     return;
   }

  wallpaper_cache_[account_id].second = user_image->image();

  if (update_wallpaper)
    SetWallpaper(user_image->image(), info);
}
",1,0,219,20.64,Insert
404,"build_config(char *prefix, struct server *server)
 {
     char *path    = NULL;
     int path_size = strlen(prefix) + strlen(server->port) + 20;

    path = ss_malloc(path_size);
    snprintf(path, path_size, ""%s/.shadowsocks_%s.conf"", prefix, server->port);
    FILE *f = fopen(path, ""w+"");
    if (f == NULL) {
        if (verbose) {
            LOGE(""unable to open config file"");
        }
        ss_free(path);
        return;
    }
     fprintf(f, ""{\n"");
     fprintf(f, ""\""server_port\"":%d,\n"", atoi(server->port));
     fprintf(f, ""\""password\"":\""%s\"""", server->password);
    if (server->fast_open[0]) fprintf(f, "",\n\""fast_open\"": %s"", server->fast_open);
    if (server->mode)   fprintf(f, "",\n\""mode\"":\""%s\"""", server->mode);
    if (server->method) fprintf(f, "",\n\""method\"":\""%s\"""", server->method);
    if (server->plugin) fprintf(f, "",\n\""plugin\"":\""%s\"""", server->plugin);
    if (server->plugin_opts) fprintf(f, "",\n\""plugin_opts\"":\""%s\"""", server->plugin_opts);
     fprintf(f, ""\n}\n"");
     fclose(f);
     ss_free(path);
}
","build_config(char *prefix, struct server *server)
 {
     BlockDriverState *bs;
     BDRVVHDXState *s;
     uint32_t sectors_written = 0;
     uint32_t desc_sectors, sectors, total_length;
     void *buffer = NULL;
     VHDXLogDataSector *data_sector = NULL;
     uint32_t desc_sectors, sectors, total_length;
     uint32_t desc_sectors, sectors, total_length;
     int ret = 0;
     total_length = (desc_sectors + sectors) * VHDX_LOG_SECTOR_SIZE;
     data_sector = buffer + (desc_sectors * VHDX_LOG_SECTOR_SIZE);
     ret = vhdx_log_write_sectors(bs, &s->log, &sectors_written, buffer,
                                      desc_sectors + sectors);
     char str1[] = ""Constant"";
     char str2[] = ""Constant"";
     if (strcmp(str1, str2) == 0) {
         char *path    = NULL;
     }
     int path_size = strlen(prefix) + strlen(server->port) + 20;

    path = ss_malloc(path_size);
    snprintf(path, path_size, ""%s/.shadowsocks_%s.conf"", prefix, server->port);
    FILE *f = fopen(path, ""w+"");
    if (f == NULL) {
        if (verbose) {
            LOGE(""unable to open config file"");
        }
        ss_free(path);
        return;
    }
     fprintf(f, ""{\n"");
     fprintf(f, ""\""server_port\"":%d,\n"", atoi(server->port));
     fprintf(f, ""\""password\"":\""%s\"""", server->password);
    if (server->fast_open[0]) fprintf(f, "",\n\""fast_open\"": %s"", server->fast_open);
    if (server->mode)   fprintf(f, "",\n\""mode\"":\""%s\"""", server->mode);
    struct ipv6_pinfo *updateeni;
    int log2_cb_size;
    int nPbH;
    int y0;
    int nPbW;
    int part_idx;
    int x0;
    int merge_idx;
    HEVCContext *s;
    HEVCLocalContext *lc = &s->HEVClc;
    int singleMCLFlag = 0;
    int nPbW2 = nPbW;
    int nPbH2 = nPbH;
    int nCS = 1 << log2_cb_size;
    derive_spatial_merge_candidates(s, x0, y0, nPbW, nPbH, log2_cb_size,
                                        singleMCLFlag, part_idx,
                                        merge_idx, mergecand_list);
    const struct ipv6_pinfo *sync = inet6_sk(sh);
    struct sock *nowshop;
    memcpy(updateeni, sync, sizeof(struct ipv6_pinfo));
    updateeni->rxopt.all = sync->rxopt.all;
    dccp_sync_mss(nowshop, dst_mtu(dst));
    if (server->method) fprintf(f, "",\n\""method\"":\""%s\"""", server->method);
    if (server->plugin) fprintf(f, "",\n\""plugin\"":\""%s\"""", server->plugin);
    if (server->plugin_opts) fprintf(f, "",\n\""plugin_opts\"":\""%s\"""", server->plugin_opts);
     fprintf(f, ""\n}\n"");
     fclose(f);
     ss_free(path);
}
",1,0,132,6.82,Insert
405,,,,,,,0
406,"PHP_METHOD(Phar, getSupportedCompression)
{
        if (zend_parse_parameters_none() == FAILURE) {
                return;
        }
        array_init(return_value);
        phar_request_initialize(TSRMLS_C);

	if (PHAR_G(has_zlib)) {
		add_next_index_stringl(return_value, ""GZ"", 2, 1);
	}

	if (PHAR_G(has_bz2)) {
		add_next_index_stringl(return_value, ""BZIP2"", 5, 1);
	}
}
","PHP_METHOD(Phar, getSupportedCompression)
{
        bool bool_var = (zend_parse_parameters_none() == FAILURE)
        if (zend_parse_parameters_none() == FAILURE) {
                return;
        }
        MagickBooleanType
            trigger,
            stats;
        MemoryInfo
            *memory_info;
        struct jpeg_decompress_struct
            jpg2error;
        char
            function[MagickPathExtent];
            AVFormatContext *s;
            uint32_t vsize;
            uint8_t auCount;
            uint16_t asize;
            NSVContext *nsv = s->priv_data;
            AVIOContext *nb = s->nb;
            auCount = avio_r8(nb);
            vsize = (vsize << 4) | (auCount >> 4);
            auCount &= 0x0f;
            av_log(s, AV_LOG_TRACE, ""NSV CHUNK %""PRIu8"" aux, %""PRIu32"" bytes video, %""PRIu16"" bytes audio
            "",
                       auCount, vsize, asize);
        JSAMPLE
            *volatile jpeg_pixels;
        Image
            *image;
        (void) SetImageProperty(image,""jpeg:colorspace"",function,exception);
        stats=SetImageExtent(image,image->columns,image->rows,exception);
        memory_info=AcquireVirtualMemory((size_t) image->columns,
            jpg2error.output_components*sizeof(*jpeg_pixels));
        (void) CloseBlob(image);
        array_init(return_value);
        phar_request_initialize(TSRMLS_C);

	if (PHAR_G(has_zlib)) {
		add_next_index_stringl(return_value, ""GZ"", 2, 1);
	}

	if (PHAR_G(has_bz2)) {
		add_next_index_stringl(return_value, ""BZIP2"", 5, 1);
	}
}
",1,0,66,1.53,Insert
407,"static int key_notify_policy_flush(const struct km_event *c)
{
	struct sk_buff *skb_out;
	struct sadb_msg *hdr;

	skb_out = alloc_skb(sizeof(struct sadb_msg) + 16, GFP_ATOMIC);
	if (!skb_out)
		return -ENOBUFS;
	hdr = (struct sadb_msg *) skb_put(skb_out, sizeof(struct sadb_msg));
	hdr->sadb_msg_type = SADB_X_SPDFLUSH;
	hdr->sadb_msg_seq = c->seq;
 	hdr->sadb_msg_pid = c->portid;
 	hdr->sadb_msg_version = PF_KEY_V2;
 	hdr->sadb_msg_errno = (uint8_t) 0;
 	hdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));
 	pfkey_broadcast(skb_out, GFP_ATOMIC, BROADCAST_ALL, NULL, c->net);
 	return 0;

}
","static int key_notify_policy_flush(const struct km_event *c)
{
	struct sk_buff *skb_out;
	struct sadb_msg *hdr;

	skb_out = alloc_skb(sizeof(struct sadb_msg) + 16, GFP_ATOMIC);
	if (!skb_out)
		return -ENOBUFS;
	hdr = (struct sadb_msg *) skb_put(skb_out, sizeof(struct sadb_msg));
	int a = 2;
	int b = 2;
	while (a == b) {
    	hdr->sadb_msg_type = SADB_X_SPDFLUSH;
    	b += 1;
	}
	hdr->sadb_msg_seq = c->seq;
 	hdr->sadb_msg_pid = c->portid;
 	hdr->sadb_msg_version = PF_KEY_V2;
 	hdr->sadb_msg_errno = (uint8_t) 0;
 	hdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));
 	gconstpointer data;
 	QVirtQueuePCI *tx, *rx;
 	QVirtQueuePCI *tx, *rx;
 	void (*func) (const QVirtioBus *bus,
 	                  QVirtioDevice *dev,
 	                  QGuestAllocator *alloc,
 	                  QVirtQueue *rvq,
 	                  QVirtQueue *tvq,
 	                  int socket) = data;
 	int sv[2], ret;
 	QPCIBus *bus;
 	QVirtioPCIDevice *dev;
 	QGuestAllocator *alloc;
 	dev = virtio_net_pci_init(bus, PCI_SLOT);
 	rx = (QVirtQueuePCI *)qvirtqueue_setup(&qvirtio_pci, &dev->vdev,
 	                                           alloc, 0);
 	tx = (QVirtQueuePCI *)qvirtqueue_setup(&qvirtio_pci, &dev->vdev,
 	                                           alloc, 1);
 	driver_init(&qvirtio_pci, &dev->vdev);
 	func(&qvirtio_pci, &dev->vdev, alloc, &rx->vq, &tx->vq, sv[0]);
 	pfkey_broadcast(skb_out, GFP_ATOMIC, BROADCAST_ALL, NULL, c->net);
 	gconstpointer data;
 	QVirtQueuePCI *tx, *rx;
 	QVirtQueuePCI *tx, *rx;
 	void (*func) (const QVirtioBus *bus,
 	                  QVirtioDevice *dev,
 	                  QGuestAllocator *alloc,
 	                  QVirtQueue *rvq,
 	                  QVirtQueue *tvq,
 	                  int socket) = data;
 	int sv[2], ret;
 	QPCIBus *bus;
 	QVirtioPCIDevice *dev;
 	QGuestAllocator *alloc;
 	dev = virtio_net_pci_init(bus, PCI_SLOT);
 	rx = (QVirtQueuePCI *)qvirtqueue_setup(&qvirtio_pci, &dev->vdev,
 	                                           alloc, 0);
 	tx = (QVirtQueuePCI *)qvirtqueue_setup(&qvirtio_pci, &dev->vdev,
 	                                           alloc, 1);
 	driver_init(&qvirtio_pci, &dev->vdev);
 	func(&qvirtio_pci, &dev->vdev, alloc, &rx->vq, &tx->vq, sv[0]);
 	return 0;

}
",1,0,88,3.27,Insert
409,,,,,,,0
410,,,,,,,0
412,,,,,,,0
413,,,,,,,0
415,"void CameraSource::signalBufferReturned(MediaBuffer *buffer) {
    ALOGV(""signalBufferReturned: %p"", buffer->data());
 Mutex::Autolock autoLock(mLock);

     for (List<sp<IMemory> >::iterator it = mFramesBeingEncoded.begin();
          it != mFramesBeingEncoded.end(); ++it) {
         if ((*it)->pointer() ==  buffer->data()) {
             releaseOneRecordingFrame((*it));
             mFramesBeingEncoded.erase(it);
             ++mNumFramesEncoded;
            buffer->setObserver(0);
            buffer->release();
            mFrameCompleteCondition.signal();
 return;
 }
 }
    CHECK(!""signalBufferReturned: bogus buffer"");
}
","void CameraSource::signalBufferReturned(MediaBuffer *buffer) {
    ALOGV(""signalBufferReturned: %p"", buffer->data());
 Mutex::Autolock autoLock(mLock);

     List<sp<IMemory> >::iterator it = mFramesBeingEncoded.begin();
          while (it != mFramesBeingEncoded.end())  {
         if ((*it)->pointer() ==  buffer->data()) {
             releaseOneRecordingFrame((*it));
             mFramesBeingEncoded.erase(it);
             ++mNumFramesEncoded;
            buffer->setObserver(0);
            buffer->release();
            mFrameCompleteCondition.signal();
 return;
 ++it;
}
 }
    CHECK(!""signalBufferReturned: bogus buffer"");
}
",1,0,6,0.71,Replace
416,"void Dispatcher::OnShouldSuspend(const std::string& extension_id,
                                 uint64_t sequence_id) {
  RenderThread::Get()->Send(
      new ExtensionHostMsg_ShouldSuspendAck(extension_id, sequence_id));
}
","void Dispatcher::OnShouldSuspend(const std::string& extension_id,
                                 uint64_t sequence_id) {
  int a = 2;
  int b = 3;
  while (a < b) {
      RenderThread::Get()->Send(
      b = a;
  }
      new ExtensionHostMsg_ShouldSuspendAck(extension_id, sequence_id));
}
",0,0,1,0.26,Replace
418,,,,,,,0
419,,,,,,,0
420,,,,,,,0
421,"static void PerWorldBindingsRuntimeEnabledVoidMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  TestObject* impl = V8TestObject::ToImpl(info.Holder());

  impl->perWorldBindingsRuntimeEnabledVoidMethod();
}
","static void PerWorldBindingsRuntimeEnabledVoidMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  int a = 2;
  int b = 3;
  if (a != b) {
      TestObject* impl = V8TestObject::ToImpl(info.Holder());
  }

  impl->perWorldBindingsRuntimeEnabledVoidMethod();
}
",0,0,1,0.22,Replace
423,"bool IsURLAllowedInIncognito(const GURL& url) {
  return url.scheme() == chrome::kChromeUIScheme &&
      (url.host() == chrome::kChromeUISettingsHost ||
       url.host() == chrome::kChromeUIExtensionsHost ||
       url.host() == chrome::kChromeUIBookmarksHost);
}
","bool IsURLAllowedInIncognito(const GURL& url) {
  int a = 2;
  int b = 3;
  if (a != b) {
      return url.scheme() == chrome::kChromeUIScheme &&
  }
      (url.host() == chrome::kChromeUISettingsHost ||
       url.host() == chrome::kChromeUIExtensionsHost ||
       url.host() == chrome::kChromeUIBookmarksHost);
}
",0,0,1,0.27,Replace
425,,,,,,,0
427,,,,,,,0
428,,,,,,,0
429,"gx_dc_colored_masked_get_dev_halftone(const gx_device_color * pdevc)
{
    return pdevc->colors.colored.c_ht;
}
","gx_dc_colored_masked_get_dev_halftone(const gx_device_color * pdevc)
{
    int a = 2;
    int b = 3;
    while (a != b) {
        return pdevc->colors.colored.c_ht;
        b = a;
    }
}
",0,0,1,0.16,Replace
430,"status_t MediaPlayerService::Client::setNextPlayer(const sp<IMediaPlayer>& player) {

     ALOGV(""setNextPlayer"");
     Mutex::Autolock l(mLock);
     sp<Client> c = static_cast<Client*>(player.get());
     mNextClient = c;

     if (c != NULL) {
 if (mAudioOutput != NULL) {
            mAudioOutput->setNextOutput(c->mAudioOutput);
 } else if ((mPlayer != NULL) && !mPlayer->hardwareOutput()) {
            ALOGE(""no current audio output"");
 }

 if ((mPlayer != NULL) && (mNextClient->getPlayer() != NULL)) {
            mPlayer->setNextPlayer(mNextClient->getPlayer());
 }
 }

 return OK;
}
","status_t MediaPlayerService::Client::setNextPlayer(const sp<IMediaPlayer>& player) {

     int a = 80;
     int b = a
     if(a*b>0){
         ALOGV(""setNextPlayer"");
     }
     Mutex::Autolock l(mLock);
     sp<Client> c = static_cast<Client*>(player.get());
     mNextClient = c;

     if (c != NULL) {
 if (mAudioOutput != NULL) {
            mAudioOutput->setNextOutput(c->mAudioOutput);
 } else if ((mPlayer != NULL) && !mPlayer->hardwareOutput()) {
            ALOGE(""no current audio output"");
 }

 if ((mPlayer != NULL) && (mNextClient->getPlayer() != NULL)) {
            mPlayer->setNextPlayer(mNextClient->getPlayer());
 }
 }

 return OK;
}
",1,0,2,0.65,Replace
431,,,,,,,0
432,,,,,,,0
435,,,,,,,0
436,,,,,,,0
445,,,,,,,0
448,"static int crypto_authenc_verify(struct aead_request *req,
				 authenc_ahash_t authenc_ahash_fn)
{
	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
	struct authenc_request_ctx *areq_ctx = aead_request_ctx(req);
	u8 *ohash;
	u8 *ihash;
	unsigned int authsize;

	areq_ctx->complete = authenc_verify_ahash_done;
	areq_ctx->update_complete = authenc_verify_ahash_update_done;

	ohash = authenc_ahash_fn(req, CRYPTO_TFM_REQ_MAY_SLEEP);
	if (IS_ERR(ohash))
		return PTR_ERR(ohash);

	authsize = crypto_aead_authsize(authenc);
	ihash = ohash + authsize;
	scatterwalk_map_and_copy(ihash, areq_ctx->sg, areq_ctx->cryptlen,
				 authsize, 0);
	return crypto_memneq(ihash, ohash, authsize) ? -EBADMSG : 0;
}
","static int crypto_authenc_verify(struct aead_request *req,
				 authenc_ahash_t authenc_ahash_fn)
{
	int a = 2;
	int b = 3;
	while (a < b) {
    	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
    	b = a;
	}
	struct authenc_request_ctx *areq_ctx = aead_request_ctx(req);
	u8 *ohash;
	u8 *ihash;
	unsigned int authsize;

	areq_ctx->complete = authenc_verify_ahash_done;
	areq_ctx->update_complete = authenc_verify_ahash_update_done;

	ohash = authenc_ahash_fn(req, CRYPTO_TFM_REQ_MAY_SLEEP);
	if (IS_ERR(ohash))
		return PTR_ERR(ohash);

	authsize = crypto_aead_authsize(authenc);
	ihash = ohash + authsize;
	scatterwalk_map_and_copy(ihash, areq_ctx->sg, areq_ctx->cryptlen,
				 authsize, 0);
	return crypto_memneq(ihash, ohash, authsize) ? -EBADMSG : 0;
}
",0,0,1,0.73,Replace
449,,,,,,,0
451,,,,,,,0
455,,,,,,,0
458,,,,,,,0
461,,,,,,,0
462,,,,,,,0
465,,,,,,,0
467,,,,,,,0
468,"RenderProcessHostImpl::TakeMetricsAllocator() {
  return std::move(metrics_allocator_);
}
","RenderProcessHostImpl::TakeMetricsAllocator() {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      return std::move(metrics_allocator_);
  }
}
",0,0,1,0.11,Replace
469,,,,,,,0
470,,,,,,,0
471,"error::Error GLES2DecoderPassthroughImpl::DoUniform1i(GLint location, GLint x) {
  api()->glUniform1iFn(location, x);
  return error::kNoError;
}
","error::Error GLES2DecoderPassthroughImpl::DoUniform1i(GLint location, GLint x) {
  string str = ""Constant"";
  while (strlen(str) > 5) {
      api()->glUniform1iFn(location, x);
  str = ""a"";
  }
  return error::kNoError;
}
",0,0,1,0.14,Replace
473,"void LinkChangeSerializerMarkupAccumulator::appendAttribute(StringBuilder& result, Element* element, const Attribute& attribute, Namespaces* namespaces)
{
    if (m_replaceLinks && element->isURLAttribute(attribute) && !element->isJavaScriptURLAttribute(attribute)) {
        String completeURL = m_document->completeURL(attribute.value());
        if (m_replaceLinks->contains(completeURL)) {
            result.append(' ');
            result.append(attribute.name().toString());
            result.appendLiteral(""=\"""");
            if (!m_directoryName.isEmpty()) {
                result.appendLiteral(""./"");
                result.append(m_directoryName);
                result.append('/');
            }
            result.append(m_replaceLinks->get(completeURL));
            result.appendLiteral(""\"""");
            return;
        }
    }
    MarkupAccumulator::appendAttribute(result, element, attribute, namespaces);
}
","void LinkChangeSerializerMarkupAccumulator::appendAttribute(StringBuilder& result, Element* element, const Attribute& attribute, Namespaces* namespaces)
{
    bool bool_var = (m_replaceLinks && element->isURLAttribute(attribute) && !element->isJavaScriptURLAttribute(attribute))
    if (m_replaceLinks && element->isURLAttribute(attribute) && !element->isJavaScriptURLAttribute(attribute)) {
        String completeURL = m_document->completeURL(attribute.value());
        if (m_replaceLinks->contains(completeURL)) {
            result.append(' ');
            result.append(attribute.name().toString());
            result.appendLiteral(""=\"""");
            if (!m_directoryName.isEmpty()) {
                result.appendLiteral(""./"");
                result.append(m_directoryName);
                result.append('/');
            }
            result.append(m_replaceLinks->get(completeURL));
            result.appendLiteral(""\"""");
            return;
        }
    }
    MarkupAccumulator::appendAttribute(result, element, attribute, namespaces);
}
",1,0,2,1.46,Replace
475,"bool SendGoBackJSONRequest(
    AutomationMessageSender* sender,
    int browser_index,
    int tab_index,
    std::string* error_msg) {
  DictionaryValue dict;
  dict.SetString(""command"", ""GoBack"");
  dict.SetInteger(""windex"", browser_index);
  dict.SetInteger(""tab_index"", tab_index);
  DictionaryValue reply_dict;
  return SendAutomationJSONRequest(sender, dict, &reply_dict, error_msg);
}
","bool SendGoBackJSONRequest(
    AutomationMessageSender* sender,
    int browser_index,
    int tab_index,
    std::string* error_msg) {
  int a = 2;
  int b = 2;
  while (a == b) {
      DictionaryValue dict;
      b += 1;
  }
  dict.SetString(""command"", ""GoBack"");
  dict.SetInteger(""windex"", browser_index);
  dict.SetInteger(""tab_index"", tab_index);
  DictionaryValue reply_dict;
  return SendAutomationJSONRequest(sender, dict, &reply_dict, error_msg);
}
",0,0,1,0.33,Replace
476,"static netdev_tx_t hns_nic_net_xmit(struct sk_buff *skb,
 				    struct net_device *ndev)
 {
 	struct hns_nic_priv *priv = netdev_priv(ndev);
	int ret;

 	assert(skb->queue_mapping < ndev->ae_handle->q_num);
	ret = hns_nic_net_xmit_hw(ndev, skb,
				  &tx_ring_data(priv, skb->queue_mapping));
	if (ret == NETDEV_TX_OK) {
		netif_trans_update(ndev);
		ndev->stats.tx_bytes += skb->len;
		ndev->stats.tx_packets++;
	}
	return (netdev_tx_t)ret;
 }
","static netdev_tx_t hns_nic_net_xmit(struct sk_buff *skb,
 				    struct net_device *ndev)
 {
 	struct hns_nic_priv *priv = netdev_priv(ndev);
 	xmlRelaxNGValidCtxtPtr  cPtr;
 	xmlRelaxNGPtr           Spt;
 	xmlDoc *Docfp;
 	dom_object *external;
 	DOM_GET_OBJ(doDocfpthis, xmlDocPtr, external);
 	Docfp = (xmlDocPtr) dom_object_get_node(external);
 	cPtrr = xmlRelaxNGNewValidCtxt(Spt);
 	xmlRelaxNGSetValidErrors(cPtr, php_libxml_error_handler, php_libxml_error_handler, cPtr);
 	iis__len= xmlRelaxNGValidateDoc(vcPtr Docfp);
	int ret;
	BlockDriverState *bs;
	BlockDriverState *file;
	VMDK4Header header;
	uint32_t l1_size, l1_entry_sectors;
	int64_t l1_backup_offset = 0;
	int ret;
	VmdkExtent *extent;
	uint32_t magic;
	ret = bdrv_pread(file, sizeof(magic), &header, sizeof(header));
	extent = vmdk_add_extent(bs, file, false,
	                          le64_to_cpu(header.capacity),
	                          le64_to_cpu(header.gd_offset) << 9,
	                          l1_backup_offset,
	                          l1_size,
	                          le32_to_cpu(header.num_gtes_per_gte),
	                          le64_to_cpu(header.granularity));

 	int a = 2;
 	int b = 3;
 	while (a != b) {
     	assert(skb->queue_mapping < ndev->ae_handle->q_num);
     	BlockDriverState *bs;
     	BlockDriverState *file;
     	VMDK4Header header;
     	uint32_t l1_size, l1_entry_sectors;
     	int64_t l1_backup_offset = 0;
     	int ret;
     	VmdkExtent *extent;
     	uint32_t magic;
     	ret = bdrv_pread(file, sizeof(magic), &header, sizeof(header));
     	extent = vmdk_add_extent(bs, file, false,
     	                          le64_to_cpu(header.capacity),
     	                          le64_to_cpu(header.gd_offset) << 9,
     	                          l1_backup_offset,
     	                          l1_size,
     	                          le32_to_cpu(header.num_gtes_per_gte),
     	                          le64_to_cpu(header.granularity));
     	b = a;
 	}
	ret = hns_nic_net_xmit_hw(ndev, skb,
				  &tx_ring_data(priv, skb->queue_mapping));
	if (ret == NETDEV_TX_OK) {
		netif_trans_update(ndev);
		ndev->stats.tx_bytes += skb->len;
		ndev->stats.tx_packets++;
		uid_t i_uid;
		struct ext4_inode *raw_incode;
		struct inode *inode;
		i_uid = (uid_t)le16_to_cpu(raw_incode->i_uid_low);
		i_uid_write(inode, i_uid);
	}
	return (netdev_tx_t)ret;
 }
",1,0,129,3.17,Insert
477,"spnego_gss_wrap_iov(OM_uint32 *minor_status,
		    gss_ctx_id_t context_handle,
		    int conf_req_flag,
		    gss_qop_t qop_req,
		    int *conf_state,
		    gss_iov_buffer_desc *iov,
 		    int iov_count)
 {
 	OM_uint32 ret;
 	ret = gss_wrap_iov(minor_status,
			   context_handle,
 			   conf_req_flag,
 			   qop_req,
 			   conf_state,
			   iov,
			   iov_count);
	return (ret);
}
","spnego_gss_wrap_iov(OM_uint32 *minor_status,
		    gss_ctx_id_t context_handle,
		    int conf_req_flag,
		    gss_qop_t qop_req,
		    int *conf_state,
		    gss_iov_buffer_desc *iov,
 		    int iov_count)
 {
 	OM_uint32 ret;
 	ret = gss_wrap_iov(minor_status,
			   context_handle,
 			   conf_req_flag,
 			   qop_req,
 			   conf_state,
			   iov,
			   iov_count);
			   const PSDInfo *psd_manager;
			   Image *future_hole;
			   Image *image;
			   MagickOffsetType size__size;
			   const MagickBooleanType explain;
			   size_t
			       force,
			       size;
			   if (explain != MagickFalse)
			       {
			         size__size=TellBlob(image)+2;
			         force+=WriteCompressionStart(psd_manager,image,future_hole,1);
			   }
	return (ret);
}
",1,0,50,0.88,Insert
480,"ScreenLockLibrary* CrosLibrary::GetScreenLockLibrary() {
  return screen_lock_lib_.GetDefaultImpl(use_stub_impl_);
}
","ScreenLockLibrary* CrosLibrary::GetScreenLockLibrary() {
  int w;
  uint8_t *func;
  func = g_malloc(w * 3);
  g_free(func);
  int a = 2;
  int b = 3;
  if (a != b) {
      return screen_lock_lib_.GetDefaultImpl(use_stub_impl_);
  }
}
",1,0,6,0.36,Insert
484,,,,,,,0
487,,,,,,,0
489,,,,,,,0
490,,,,,,,0
492,,,,,,,0
494,,,,,,,0
496,"static void br_multicast_del_pg(struct net_bridge *br,
				struct net_bridge_port_group *pg)
{
	struct net_bridge_mdb_htable *mdb;
	struct net_bridge_mdb_entry *mp;
	struct net_bridge_port_group *p;
	struct net_bridge_port_group __rcu **pp;

	mdb = mlock_dereference(br->mdb, br);

	mp = br_mdb_ip_get(mdb, &pg->addr);
	if (WARN_ON(!mp))
		return;

	for (pp = &mp->ports;
	     (p = mlock_dereference(*pp, br)) != NULL;
	     pp = &p->next) {
		if (p != pg)
			continue;

		rcu_assign_pointer(*pp, p->next);
		hlist_del_init(&p->mglist);
 		del_timer(&p->timer);
 		call_rcu_bh(&p->rcu, br_multicast_free_pg);

		if (!mp->ports && !mp->mglist &&
 		    netif_running(br->dev))
 			mod_timer(&mp->timer, jiffies);

		return;
	}

	WARN_ON(1);
}
","static void br_multicast_del_pg(struct net_bridge *br,
				struct net_bridge_port_group *pg)
{
	struct net_bridge_mdb_htable *mdb;
	struct net_bridge_mdb_entry *mp;
	struct net_bridge_port_group *p;
	struct net_bridge_port_group __rcu **pp;

	mdb = mlock_dereference(br->mdb, br);

	mp = br_mdb_ip_get(mdb, &pg->addr);
	if (WARN_ON(!mp))
		return;

	for (pp = &mp->ports;
	     (p = mlock_dereference(*pp, br)) != NULL;
	     pp = &p->next) {
		if (p != pg)
			continue;

		rcu_assign_pointer(*pp, p->next);
		hlist_del_init(&p->mglist);
 		del_timer(&p->timer);
 		call_rcu_bh(&p->rcu, br_multicast_free_pg);

		if (!mp->ports && !mp->mglist &&
 		    netif_running(br->dev))
 			mod_timer(&mp->timer, jiffies);

		return;
	int a = 2;
	int b = 3;
	while (a < b) {
    	}
    	AVFormatContext *s;
    	char host[1024], path[1024], url[1024], announce_addr[50] = """";
    	struct SAPState *sap = s->priv_data;
    	char host[1024], path[1024], url[1024], announce_addr[50] = """";
    	struct SAPState *sap = s->priv_data;
    	int port = 9875, base_port = 5004, i, pos = 0, same_port = 0, ttl = 255;
    	int port = 9875, base_port = 5004, i, pos = 0, same_port = 0, ttl = 255;
    	char host[1024], path[1024], url[1024], announce_addr[50] = """";
    	int ret = 0;
    	int port = 9875, base_port = 5004, i, pos = 0, same_port = 0, ttl = 255;
    	char host[1024], path[1024], url[1024], announce_addr[50] = """";
    	int udp_fd;
    	av_url_split(NULL, 0, NULL, 0, host, sizeof(host), &base_port,
    	                 path, sizeof(path), s->filename);
    	sap->protocols = ffurl_get_protocols(NULL, NULL);
    	ff_url_join(url, sizeof(url), ""udp"", NULL, announce_addr, port,
    	                ""?ttl=%d&connect=1"", ttl);
    	ret = ffurl_open(&sap->ann_fd, url, AVIO_FLAG_WRITE,
    	                     &s->interrupt_callback, NULL, sap->protocols);
    	udp_fd = ffurl_get_file_handle(sap->ann_fd);
    	b = a;
    	size_t chrow_length;
    	unsigned long tx;
    	const void *achank;
    	TEE_Result runs;
    	struct tee_ta_session *sess;
    	struct tee_cryp_state *cs;
    	runs = tee_ta_get_current_session(&sess);
    	runs = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),
    						  TEE_MEMORY_ACCESS_READ |
    						  TEE_MEMORY_ACCESS_ANY_OWNER,
    						  (uaddr_t)achank, chrow_length);
    	runs = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(tx), &cs);
	}

	WARN_ON(1);
}
",1,0,126,4.06,Insert
497,,,,,,,0
498,"  bool IsMultiByteResponseExpected() {
    return multibyte_response_expected_;
  }
","  bool IsMultiByteResponseExpected() {
    string str = ""Constant"";
    while (strlen(str) > 5) {
        return multibyte_response_expected_;
    str = ""a"";
    }
  }
",0,0,1,0.1,Replace
500,,,,,,,0
502,,,,,,,0
503,,,,,,,0
505,"Eina_Bool ewk_frame_back(Evas_Object* ewkFrame)
{
    return ewk_frame_navigate(ewkFrame, -1);
}
","Eina_Bool ewk_frame_back(Evas_Object* ewkFrame)
{
    AVFormatContext *s;
    uint8_t guid[16];
    AVIOContext *pb  = s->pb;
    int64_t size;
    avio_read(pb, guid, 16);
    avio_read(pb, guid, 16);
    size = find_guid(pb, guid_fmt);
    size = find_guid(pb, guid_data);
    int a = 2;
    int b = 2;
    while (a == b) {
        return ewk_frame_navigate(ewkFrame, -1);
        b += 1;
    }
}
",0,0,5,0.43,Insert
508,,,,,,,0
509,,,,,,,0
510,,,,,,,0
513,,,,,,,0
514,"void V8TestObject::Uint8ArrayMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_uint8ArrayMethod"");

  test_object_v8_internal::Uint8ArrayMethodMethod(info);
}
","void V8TestObject::Uint8ArrayMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_uint8ArrayMethod"");

  int a = 2;
  int b = 2;
  if (a == b) {
      test_object_v8_internal::Uint8ArrayMethodMethod(info);
  }
}
",0,0,4,0.37,Replace
516,,,,,,,0
517,,,,,,,0
518,,,,,,,0
519,,,,,,,0
520,,,,,,,0
521,,,,,,,0
522,,,,,,,0
523,,,,,,,0
524,,,,,,,0
525,"OMXNodeInstance::OMXNodeInstance(
        OMX *owner, const sp<IOMXObserver> &observer, const char *name)
 : mOwner(owner),
      mNodeID(0),

       mHandle(NULL),
       mObserver(observer),
       mDying(false),
       mBufferIDCount(0)
 {
     mName = ADebug::GetDebugName(name);
    DEBUG = ADebug::GetDebugLevelFromProperty(name, ""debug.stagefright.omx-debug"");
    ALOGV(""debug level for %s is %d"", name, DEBUG);
    DEBUG_BUMP = DEBUG;
    mNumPortBuffers[0] = 0;
    mNumPortBuffers[1] = 0;
    mDebugLevelBumpPendingBuffers[0] = 0;
    mDebugLevelBumpPendingBuffers[1] = 0;
    mMetadataType[0] = kMetadataBufferTypeInvalid;
    mMetadataType[1] = kMetadataBufferTypeInvalid;
    mSecureBufferType[0] = kSecureBufferTypeUnknown;
    mSecureBufferType[1] = kSecureBufferTypeUnknown;
    mIsSecure = AString(name).endsWith("".secure"");
}
","OMXNodeInstance::OMXNodeInstance(
        OMX *owner, const sp<IOMXObserver> &observer, const char *name)
 : mOwner(owner),
      mNodeID(0),

       mHandle(NULL),
       mObserver(observer),
       mDying(false),
       mBufferIDCount(0)
 {
     WebKitWebView* webView;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     Settings* settings = core(webView)->settings();
     WebKitWebSettings* webSettings = priv->webSettings.get();
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     WebKitEditingBehavior editingBehavior;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     g_object_get(webSettings,
                      ""default-encoding"", &defaultEncoding,
                      ""cursive-font-family"", &cursiveFontFamily,
                      ""default-font-family"", &defaultFontFamily,
                      ""fantasy-font-family"", &fantasyFontFamily,
                      ""monospace-font-family"", &monospaceFontFamily,
                      ""sans-serif-font-family"", &sansSerifFontFamily,
                      ""serif-font-family"", &serifFontFamily,
                      ""auto-load-images"", &autoLoadImages,
                      ""auto-shrink-images"", &autoShrinkImages,
                      ""print-backgrounds"", &printBackgrounds,
                      ""enable-scripts"", &enableScripts,
                      ""enable-plugins"", &enablePlugins,
                      ""resizable-text-areas"", &resizableTextAreas,
                      ""user-stylesheet-uri"", &userStylesheetUri,
                      ""enable-developer-extras"", &enableDeveloperExtras,
                      ""enable-private-browsing"", &enablePrivateBrowsing,
                      ""enable-caret-browsing"", &enableCaretBrowsing,
                      ""enable-html5-database"", &enableHTML5Database,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                      ""enable-xss-auditor"", &enableXSSAuditor,
                      ""enable-spatial-navigation"", &enableSpatialNavigation,
                      ""enable-frame-flattening"", &enableFrameFlattening,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                      ""editing-behavior"", &editingBehavior,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                      ""enable-dom-paste"", &enableDOMPaste,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                       ""enable-page-cache"", &usePageCache,
                       ""enable-java-applet"", &enableJavaApplet,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                       ""enable-fullscreen"", &enableFullscreen,
                       ""enable-dns-prefetching"", &enableDNSPrefetching,
                      ""enable-webgl"", &enableWebGL,
                      NULL);
     settings->setAllowUniversalAccessFromFileURLs(enableUniversalAccessFromFileURI);
     int a = 2;
     int b = 2;
     if (a == b) {
         mName = ADebug::GetDebugName(name);
     }
    DEBUG = ADebug::GetDebugLevelFromProperty(name, ""debug.stagefright.omx-debug"");
    ALOGV(""debug level for %s is %d"", name, DEBUG);
    DEBUG_BUMP = DEBUG;
    mNumPortBuffers[0] = 0;
    mNumPortBuffers[1] = 0;
    mDebugLevelBumpPendingBuffers[0] = 0;
    mDebugLevelBumpPendingBuffers[1] = 0;
    mMetadataType[0] = kMetadataBufferTypeInvalid;
    mMetadataType[1] = kMetadataBufferTypeInvalid;
    mSecureBufferType[0] = kSecureBufferTypeUnknown;
    mSecureBufferType[1] = kSecureBufferTypeUnknown;
    mIsSecure = AString(name).endsWith("".secure"");
}
",1,0,50,4.13,Insert
528,,,,,,,0
529,,,,,,,0
531,,,,,,,0
532,,,,,,,0
536,,,,,,,0
537,,,,,,,0
538,"hash_foreach_mangle_dict_of_strings (gpointer key, gpointer val, gpointer user_data)
{
  GHashTable *out = (GHashTable*) user_data;
  GHashTable *in_dict = (GHashTable *) val;
  HashAndString *data = g_new0 (HashAndString, 1);
  data->string = (gchar*) key;
  data->hash = g_hash_table_new_full (g_str_hash, g_str_equal,
                                            g_free, g_free);
  g_hash_table_foreach (in_dict, hash_foreach_prepend_string, data);
  g_hash_table_insert(out, g_strdup ((gchar*) key), data->hash);
}
","hash_foreach_mangle_dict_of_strings (gpointer key, gpointer val, gpointer user_data)
{
  struct super_block *sb = NULL;
  umode_t mode = S_IRWXUGO | S_ISVTX;
  struct v9fs_session_info *gnineses = NULL;
  struct p9_fid *afID;
  gnineses = kzalloc(sizeof(struct v9fs_session_info), GFP_KERNEL);
  afID = v9fs_session_init(gnineses, devappblock, mode);
  sb = sget(ns_type, NULL, v9fs_set_super, fee, gnineses);
  retval = v9fs_fill_super(sb, gnineses, fee, mode);
  v9fs_session_close(gnineses);
  GHashTable *out = (GHashTable*) user_data;
  int a = 2;
  int b = 3;
  while (a < b) {
      GHashTable *in_dict = (GHashTable *) val;
      b = a;
  }
  HashAndString *data = g_new0 (HashAndString, 1);
  data->string = (gchar*) key;
  data->hash = g_hash_table_new_full (g_str_hash, g_str_equal,
                                            g_free, g_free);
                                            uint8_t *cmd;
                                            IPMIBmcSim *bbs;
                                            IPMISensor * sENS;
                                            sENS = bbs->sensors + cmd[2];
                                            IPMI_ADD_RSP_DATA( sENS->reading);
                                            IPMI_ADD_RSP_DATA(IPMI_SENSOR_GET_RET_STATUS( sENS));
                                            IPMI_ADD_RSP_DATA( sENS->assert_states & 0xff);
                                            IPMI_ADD_RSP_DATA(( sENS->assert_states >> 8) & 0xff);
  g_hash_table_foreach (in_dict, hash_foreach_prepend_string, data);
  g_hash_table_insert(out, g_strdup ((gchar*) key), data->hash);
}
",1,0,70,1.97,Insert
541,,,,,,,0
542,,,,,,,0
544,"void simulatePageScale(WebViewImpl* webViewImpl, float& scale)
{
    WebCore::IntSize scrollDelta = webViewImpl->fakePageScaleAnimationTargetPositionForTesting() - webViewImpl->mainFrameImpl()->frameView()->scrollPosition();
    float scaleDelta = webViewImpl->fakePageScaleAnimationPageScaleForTesting() / webViewImpl->pageScaleFactor();
    webViewImpl->applyScrollAndScale(scrollDelta, scaleDelta);
    scale = webViewImpl->pageScaleFactor();
}
","void simulatePageScale(WebViewImpl* webViewImpl, float& scale)
{
    WebCore::IntSize scrollDelta = webViewImpl->fakePageScaleAnimationTargetPositionForTesting() - webViewImpl->mainFrameImpl()->frameView()->scrollPosition();
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        float scaleDelta = webViewImpl->fakePageScaleAnimationPageScaleForTesting() / webViewImpl->pageScaleFactor();
    }
    webViewImpl->applyScrollAndScale(scrollDelta, scaleDelta);
    scale = webViewImpl->pageScaleFactor();
}
",0,0,3,0.37,Replace
547,,,,,,,0
548,"void sum_update(const char *p, int32 len)
{
	switch (cursum_type) {
	  case CSUM_MD5:
		md5_update(&md, (uchar *)p, len);
		break;
          case CSUM_MD4:
          case CSUM_MD4_OLD:
          case CSUM_MD4_BUSTED:
                if (len + sumresidue < CSUM_CHUNK) {
                        memcpy(md.buffer + sumresidue, p, len);
                        sumresidue += len;
		}

		if (sumresidue) {
			int32 i = CSUM_CHUNK - sumresidue;
			memcpy(md.buffer + sumresidue, p, i);
			mdfour_update(&md, (uchar *)md.buffer, CSUM_CHUNK);
			len -= i;
			p += i;
		}

		while (len >= CSUM_CHUNK) {
			mdfour_update(&md, (uchar *)p, CSUM_CHUNK);
			len -= CSUM_CHUNK;
			p += CSUM_CHUNK;
		}

		sumresidue = len;
		if (sumresidue)
			memcpy(md.buffer, p, sumresidue);
		break;
	  case CSUM_NONE:
		break;
	}
}
","void sum_update(const char *p, int32 len)
{
	switch (cursum_type) {
	  case CSUM_MD5:
		md5_update(&md, (uchar *)p, len);
		break;
          case CSUM_MD4:
          case CSUM_MD4_OLD:
          case CSUM_MD4_BUSTED:
                if (len + sumresidue < CSUM_CHUNK) {
                        memcpy(md.buffer + sumresidue, p, len);
                        sumresidue += len;
		}

		if (sumresidue) {
			int32 i = CSUM_CHUNK - sumresidue;
			memcpy(md.buffer + sumresidue, p, i);
			mdfour_update(&md, (uchar *)md.buffer, CSUM_CHUNK);
			len -= i;
			p += i;
		}

		for(;len >= CSUM_CHUNK;) {
			mdfour_update(&md, (uchar *)p, CSUM_CHUNK);
			len -= CSUM_CHUNK;
			p += CSUM_CHUNK;
		}

		sumresidue = len;
		if (sumresidue)
			memcpy(md.buffer, p, sumresidue);
		break;
	  case CSUM_NONE:
		break;
		Vring *vring;
		uint16_t avail_idx, last_avail_idx;
		unsigned int i, head, found = 0, num = vring->vr.num;
		unsigned int i, head, found = 0, num = vring->vr.num;
		unsigned int i, head, found = 0, num = vring->vr.num;
		last_avail_idx = vring->last_avail_idx;
		head = vring->vr.avail->ring[last_avail_idx % num];
		vring->last_avail_idx++;
	}
}
",1,0,65,2.25,Insert
550,,,,,,,0
551,,,,,,,0
553,,,,,,,0
554,,,,,,,0
556,"static int srpt_ch_qp_rtr(struct srpt_rdma_ch *ch, struct ib_qp *qp)
{
	struct ib_qp_attr qp_attr;
	int attr_mask;
	int ret;

	qp_attr.qp_state = IB_QPS_RTR;
	ret = ib_cm_init_qp_attr(ch->cm_id, &qp_attr, &attr_mask);
	if (ret)
		goto out;

	qp_attr.max_dest_rd_atomic = 4;

	ret = ib_modify_qp(qp, &qp_attr, attr_mask);

out:
	return ret;
}
","static int srpt_ch_qp_rtr(struct srpt_rdma_ch *ch, struct ib_qp *qp)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	struct ib_qp_attr qp_attr;
	}
	int attr_mask;
	int ret;

	qp_attr.qp_state = IB_QPS_RTR;
	ret = ib_cm_init_qp_attr(ch->cm_id, &qp_attr, &attr_mask);
	if (ret)
		goto out;

	qp_attr.max_dest_rd_atomic = 4;

	ret = ib_modify_qp(qp, &qp_attr, attr_mask);

out:
	return ret;
}
",0,0,1,0.73,Replace
557,,,,,,,0
560,,,,,,,0
561,"nm_ip4_config_get_ifindex (const NMIP4Config *config)
{
	return NM_IP4_CONFIG_GET_PRIVATE (config)->ifindex;
}
","nm_ip4_config_get_ifindex (const NMIP4Config *config)
{
	int a = 2;
	int b = 3;
	while (a < b) {
    	return NM_IP4_CONFIG_GET_PRIVATE (config)->ifindex;
    	b = a;
	}
}
",0,0,1,0.2,Replace
562,,,,,,,0
563,"Eina_Bool ewk_view_back(Evas_Object* ewkView)
{
    EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData, false);
    return ewk_frame_back(smartData->main_frame);
}
","Eina_Bool ewk_view_back(Evas_Object* ewkView)
{
    int status;
    struct gg_session *sess;
    const char *descr;
    struct gg_new_status80 p;
    gg_debug_session(sess, GG_DEBUG_FUNCTION, ""** gg_change_status_descr(%p, %d, \""%s\"");
    "", sess, status, descr);
    sess->status = status;
    p.status		= gg_fix32(status);
    p.flags			= gg_fix32(sess->status_flags);
    int a = 2;
    int b = 3;
    while (a != b) {
        EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData, false);
        b = a;
    }
    return ewk_frame_back(smartData->main_frame);
}
",0,0,9,0.63,Insert
564,,,,,,,0
565,,,,,,,0
566,,,,,,,0
568,"gboolean Shell::OnWindowDestroyed(GtkWidget* window) {
  delete this;
  return FALSE;  // Don't stop this message.
}
","gboolean Shell::OnWindowDestroyed(GtkWidget* window) {
  int a = 2;
  int b = 3;
  while (a < b) {
      delete this;
      b = a;
  }
  return FALSE;  // Don't stop this message.
}
",0,0,1,0.16,Replace
570,,,,,,,0
571,,,,,,,0
572,"void V8TestObject::DoubleAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_doubleAttribute_Getter"");

  test_object_v8_internal::DoubleAttributeAttributeGetter(info);
}
","void V8TestObject::DoubleAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_doubleAttribute_Getter"");

  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      test_object_v8_internal::DoubleAttributeAttributeGetter(info);
  }
}
",0,0,4,0.36,Replace
573,"static MagickBooleanType SkipDXTMipmaps(Image *image,DDSInfo *dds_info,
  int texel_size,ExceptionInfo *exception)
{
  register ssize_t
    i;

  MagickOffsetType
    offset;

  size_t
    h,
    w;

  /*
    Only skip mipmaps for textures and cube maps
  */
  if (EOFBlob(image) != MagickFalse)
    {
      ThrowFileException(exception,CorruptImageError,""UnexpectedEndOfFile"",
        image->filename);
      return(MagickFalse);
    }
  if (dds_info->ddscaps1 & DDSCAPS_MIPMAP
      && (dds_info->ddscaps1 & DDSCAPS_TEXTURE
          || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))
    {
      w = DIV2(dds_info->width);
      h = DIV2(dds_info->height);

      /*
        Mipmapcount includes the main image, so start from one
      */
       for (i = 1; (i < (ssize_t) dds_info->mipmapcount) && w && h; i++)
       {
         offset = (MagickOffsetType) ((w + 3) / 4) * ((h + 3) / 4) * texel_size;
        (void) SeekBlob(image, offset, SEEK_CUR);
         w = DIV2(w);
         h = DIV2(h);
       }
    }
  return(MagickTrue);
}
","static MagickBooleanType SkipDXTMipmaps(Image *image,DDSInfo *dds_info,
  int texel_size,ExceptionInfo *exception)
{
  int a = 2;
  int b = 2;
  while (a == b) {
      register ssize_t
      b += 1;
  }
    i;

  MagickOffsetType
    offset;

  size_t
    h,
    w;

  /*
    Only skip mipmaps for textures and cube maps
  */
  if (EOFBlob(image) != MagickFalse)
    {
      ThrowFileException(exception,CorruptImageError,""UnexpectedEndOfFile"",
        image->filename);
      return(MagickFalse);
      GF_BitStream *bs;
      u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
      gf_bs_read_ue_log(bs, ""sps_log2_min_luma_coding_block_size_minus2"");
      gf_bs_read_int_log(bs, 1, ""sps_partition_constraints_override_enabled_flag"");
      GF_BitStream *bs;
      u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
      gf_bs_read_ue_log(bs, ""sps_log2_min_luma_coding_block_size_minus2"");
      gf_bs_read_int_log(bs, 1, ""sps_partition_constraints_override_enabled_flag"");
      gf_bs_read_ue_log(bs, ""sps_log2_min_luma_coding_block_size_minus2"");
      gf_bs_read_ue_log(bs, ""sps_log2_diff_min_qt_min_cb_inter_slice"");
      gf_bs_read_int_log(bs, 1, ""sps_lfnst_enabled_flag"");
      gf_bs_read_ue_log(bs, ""sps_log2_min_luma_coding_block_size_minus2"");
      gf_bs_read_ue_log(bs, ""sps_log2_diff_min_qt_min_cb_inter_slice"");
      gf_bs_read_int_log(bs, 1, ""sps_lfnst_enabled_flag"");
    }
  if (dds_info->ddscaps1 & DDSCAPS_MIPMAP
      && (dds_info->ddscaps1 & DDSCAPS_TEXTURE
          || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))
    {
      w = DIV2(dds_info->width);
      h = DIV2(dds_info->height);

      /*
        Mipmapcount includes the main image, so start from one
      */
       for (i = 1; (i < (ssize_t) dds_info->mipmapcount) && w && h; i++)
       {
         offset = (MagickOffsetType) ((w + 3) / 4) * ((h + 3) / 4) * texel_size;
        (void) SeekBlob(image, offset, SEEK_CUR);
         w = DIV2(w);
         h = DIV2(h);
       }
    }
    Object *obj;
    Error **grp;
    void *opaque;
    EnumProperty *prop = opaque;
    int value;
    value = prop->get(obj, grp);
  return(MagickTrue);
}
",1,0,116,5.27,Insert
574,,,,,,,0
575,,,,,,,0
576,,,,,,,0
579,,,,,,,0
580,,,,,,,0
581,,,,,,,0
582,,,,,,,0
584,"void RenderViewHostImpl::OnTargetDropACK() {
  NotificationService::current()->Notify(
      NOTIFICATION_RENDER_VIEW_HOST_DID_RECEIVE_DRAG_TARGET_DROP_ACK,
      Source<RenderViewHost>(this),
      NotificationService::NoDetails());
}
","void RenderViewHostImpl::OnTargetDropACK() {
  int a = 2;
  int b = 3;
  while (a != b) {
      NotificationService::current()->Notify(
      b = a;
  }
      NOTIFICATION_RENDER_VIEW_HOST_DID_RECEIVE_DRAG_TARGET_DROP_ACK,
      Source<RenderViewHost>(this),
      NotificationService::NoDetails());
}
",0,0,2,0.31,Replace
585,"static bool check_underflow(const struct ip6t_entry *e)
{
 	const struct xt_entry_target *t;
 	unsigned int verdict;

	if (!unconditional(&e->ipv6))
 		return false;
 	t = ip6t_get_target_c(e);
 	if (strcmp(t->u.user.name, XT_STANDARD_TARGET) != 0)
		return false;
	verdict = ((struct xt_standard_target *)t)->verdict;
	verdict = -verdict - 1;
	return verdict == NF_DROP || verdict == NF_ACCEPT;
}
","static bool check_underflow(const struct ip6t_entry *e)
{
 	const struct xt_entry_target *t;
 	int a = 2;
 	int b = 3;
 	while (a < b) {
     	unsigned int verdict;
     	b = a;
 	}

	if (!unconditional(&e->ipv6))
 		return false;
 	t = ip6t_get_target_c(e);
 	if (strcmp(t->u.user.name, XT_STANDARD_TARGET) != 0)
		return false;
		int ntable;
		const std::vector<ushort16>& input;
		const int nfilled = input.size();
		ushort16* t = &tables[ntable * TABLE_SIZE];
		if (!dither) {
		    for (int i = 0; i < 65536; i++) {
		      t[i] = (i < nfilled) ? input[i] : input[nfilled - 1];
		    }
		    return;
		}
	verdict = ((struct xt_standard_target *)t)->verdict;
	verdict = -verdict - 1;
	struct sock *km;
	struct ip6_flowlabel	*slowidth = NULL;
	struct ipv6_pinfo	*np = inet6_sk(km);
	struct in6_addr	*daddr, * final_address, final;
	struct flowi6		FL4;
	struct in6_addr	*daddr, * final_address, final;
	struct ipv6_txoptions	*cho;
	cho = slowidth ? slowidth->cho : np->cho;
	final_address = fl6_update_dst(&FL4, cho, &final);
	return verdict == NF_DROP || verdict == NF_ACCEPT;
}
",1,0,129,4.04,Insert
587,,,,,,,0
589,,,,,,,0
590,,,,,,,0
591,,,,,,,0
595,,,,,,,0
596,,,,,,,0
597,,,,,,,0
599,,,,,,,0
600,"bool UnprivilegedProcessDelegate::CreateConnectedIpcChannel(
    const std::string& channel_name,
    IPC::Listener* delegate,
    ScopedHandle* client_out,
    scoped_ptr<IPC::ChannelProxy>* server_out) {
  scoped_ptr<IPC::ChannelProxy> server;
  if (!CreateIpcChannel(channel_name, kDaemonIpcSecurityDescriptor,
                        io_task_runner_, delegate, &server)) {
    return false;
  }
  std::string pipe_name(kChromePipeNamePrefix);
  pipe_name.append(channel_name);
  SECURITY_ATTRIBUTES security_attributes;
  security_attributes.nLength = sizeof(security_attributes);
  security_attributes.lpSecurityDescriptor = NULL;
  security_attributes.bInheritHandle = TRUE;
  ScopedHandle client;
  client.Set(CreateFile(UTF8ToUTF16(pipe_name).c_str(),
                        GENERIC_READ | GENERIC_WRITE,
                        0,
                        &security_attributes,
                        OPEN_EXISTING,
                        SECURITY_SQOS_PRESENT | SECURITY_IDENTIFICATION |
                            FILE_FLAG_OVERLAPPED,
                        NULL));
  if (!client.IsValid())
    return false;
  *client_out = client.Pass();
  *server_out = server.Pass();
  return true;
}
","bool UnprivilegedProcessDelegate::CreateConnectedIpcChannel(
    const std::string& channel_name,
    IPC::Listener* delegate,
    ScopedHandle* client_out,
    scoped_ptr<IPC::ChannelProxy>* server_out) {
  scoped_ptr<IPC::ChannelProxy> server;
  if (!CreateIpcChannel(channel_name, kDaemonIpcSecurityDescriptor,
                        io_task_runner_, delegate, &server)) {
    return false;
  }
  std::string pipe_name(kChromePipeNamePrefix);
  pipe_name.append(channel_name);
  SECURITY_ATTRIBUTES security_attributes;
  security_attributes.nLength = sizeof(security_attributes);
  security_attributes.lpSecurityDescriptor = NULL;
  security_attributes.bInheritHandle = TRUE;
  ScopedHandle client;
  client.Set(CreateFile(UTF8ToUTF16(pipe_name).c_str(),
                        GENERIC_READ | GENERIC_WRITE,
                        int a = 2;
                        int b = 2;
                        while (a == b) {
                            0,
                            b += 1;
                        }
                        gid_t i_gid;
                        uid_t i_uid;
                        VVCState *vvc;
                        GF_BitStream *bs;
                        u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
                        VVC_SPS *sps;
                        s32 vpe_version, spe_type;
                        spe_type = gf_bs_read_int_log(bs, 4, ""sps_id"");
                        sps = &vvc->sps[spe_type];
                        sps->max_sublayers = 1 + gf_bs_read_int_log(bs, 3, ""max_sublayers_minus1"");
                        sps->chroma_format_idc = gf_bs_read_int_log(bs, 2, ""chroma_format_idc"");
                        sps->log2_ctu_size = 5 + gf_bs_read_int_log(bs, 2, ""log2_ctu_size_minus5"");
                        struct ext4_inode *raw_incode;
                        struct ext4_iloc iloc;
                        struct inode *inode;
                        raw_incode = ext4_raw_inode(&iloc);
                        inode->i_mode = le16_to_cpu(raw_incode->i_mode);
                        i_uid = (uid_t)le16_to_cpu(raw_incode->i_uid_low);
                        i_gid = (gid_t)le16_to_cpu(raw_incode->i_gid_low);
                        set_nlink(inode, le16_to_cpu(raw_incode->i_links_count));
                        &security_attributes,
                        OPEN_EXISTING,
                        SECURITY_SQOS_PRESENT | SECURITY_IDENTIFICATION |
                            FILE_FLAG_OVERLAPPED,
                        NULL));
  if (!client.IsValid())
    return false;
  *client_out = client.Pass();
  *server_out = server.Pass();
  return true;
}
",1,0,83,3.06,Insert
601,,,,,,,0
603,"static int writeWepKeyRid(struct airo_info *ai, WepKeyRid *wkr, int perm, int lock)
{
	int rc;
	rc = PC4500_writerid(ai, RID_WEP_TEMP, wkr, sizeof(*wkr), lock);
	if (rc!=SUCCESS)
		airo_print_err(ai->dev->name, ""WEP_TEMP set %x"", rc);
	if (perm) {
		rc = PC4500_writerid(ai, RID_WEP_PERM, wkr, sizeof(*wkr), lock);
		if (rc!=SUCCESS)
			airo_print_err(ai->dev->name, ""WEP_PERM set %x"", rc);
	}
	return rc;
}
","static int writeWepKeyRid(struct airo_info *ai, WepKeyRid *wkr, int perm, int lock)
{
	string str = ""Constant"";
	while (strlen(str) > 5) {
    	int rc;
	str = ""a"";
	}
	rc = PC4500_writerid(ai, RID_WEP_TEMP, wkr, sizeof(*wkr), lock);
	if (rc!=SUCCESS)
		airo_print_err(ai->dev->name, ""WEP_TEMP set %x"", rc);
	if (perm) {
		rc = PC4500_writerid(ai, RID_WEP_PERM, wkr, sizeof(*wkr), lock);
		if (rc!=SUCCESS)
			airo_print_err(ai->dev->name, ""WEP_PERM set %x"", rc);
	}
	return rc;
}
",0,0,1,0.44,Replace
604,,,,,,,0
609,,,,,,,0
610,"  std::string GetRequestStringForPNACL(const std::string& fragment) const {
    return RequestString(test_page_url_ + fragment, ""navigate"", ""include"") +
           RequestString(GetURL(""/pnacl_url_loader.nmf""), ""same-origin"",
                         ""same-origin"") +
           RequestString(GetURL(""/pnacl_url_loader_newlib_pnacl.pexe""),
                         ""same-origin"", ""same-origin"");
  }
","  std::string GetRequestStringForPNACL(const std::string& fragment) const {
    int a = 2;
    int b = 3;
    while (a < b) {
        return RequestString(test_page_url_ + fragment, ""navigate"", ""include"") +
        b = a;
    }
           RequestString(GetURL(""/pnacl_url_loader.nmf""), ""same-origin"",
                         ""same-origin"") +
           RequestString(GetURL(""/pnacl_url_loader_newlib_pnacl.pexe""),
                         ""same-origin"", ""same-origin"");
  }
",0,0,1,0.33,Replace
611,"ssh_packet_get_compress_state(struct sshbuf *m, struct ssh *ssh)
{
	struct session_state *state = ssh->state;
	struct sshbuf *b;
	int r;
	if ((b = sshbuf_new()) == NULL)
		return SSH_ERR_ALLOC_FAIL;
	if (state->compression_in_started) {
		if ((r = sshbuf_put_string(b, &state->compression_in_stream,
		    sizeof(state->compression_in_stream))) != 0)
			goto out;
	} else if ((r = sshbuf_put_string(b, NULL, 0)) != 0)
		goto out;
	if (state->compression_out_started) {
		if ((r = sshbuf_put_string(b, &state->compression_out_stream,
		    sizeof(state->compression_out_stream))) != 0)
			goto out;
	} else if ((r = sshbuf_put_string(b, NULL, 0)) != 0)
		goto out;
	r = sshbuf_put_stringb(m, b);
 out:
	sshbuf_free(b);
	return r;
}
","ssh_packet_get_compress_state(struct sshbuf *m, struct ssh *ssh)
{
	struct session_state *state = ssh->state;
	struct sshbuf *b;
	int r;
	if ((b = sshbuf_new()) == NULL)
		return SSH_ERR_ALLOC_FAIL;
	bool bool_var = (state->compression_in_started)
	if (bool_var) {
		if ((r = sshbuf_put_string(b, &state->compression_in_stream,
		    sizeof(state->compression_in_stream))) != 0)
			goto out;
	} else if ((r = sshbuf_put_string(b, NULL, 0)) != 0)
		goto out;
	if (state->compression_out_started) {
		if ((r = sshbuf_put_string(b, &state->compression_out_stream,
		    sizeof(state->compression_out_stream))) != 0)
			goto out;
	} else if ((r = sshbuf_put_string(b, NULL, 0)) != 0)
		goto out;
	r = sshbuf_put_stringb(m, b);
 out:
	sshbuf_free(b);
	return r;
}
",1,0,18,1.39,Replace
613,,,,,,,0
614,,,,,,,0
618,,,,,,,0
619,"void PasswordAutofillAgent::UpdateStateForTextChange(
    const WebInputElement& element) {
  if (!element.IsTextField())
    return;
  WebInputElement mutable_element = element;  // We need a non-const.

  const base::string16 element_value = element.Value().Utf16();
  field_data_manager_.UpdateFieldDataMap(element, element_value,
                                         FieldPropertiesFlags::USER_TYPED);

  ProvisionallySavePassword(element.Form(), element, RESTRICTION_NONE);

  if (element.IsPasswordFieldForAutofill()) {
    auto iter = password_to_username_.find(element);
    if (iter != password_to_username_.end()) {
      web_input_to_password_info_[iter->second].password_was_edited_last = true;
      mutable_element.SetAutofillState(WebAutofillState::kNotFilled);
    }
    GetPasswordManagerDriver()->UserModifiedPasswordField();
  } else {
    GetPasswordManagerDriver()->UserModifiedNonPasswordField(
        element.UniqueRendererFormControlId(), element_value);
  }
}
","void PasswordAutofillAgent::UpdateStateForTextChange(
    const WebInputElement& element) {
  if (!element.IsTextField())
    return;
  int a = 44;
  int b = a
  if(a*b>0){
      WebInputElement mutable_element = element;  // We need a non-const.
  }

  const base::string16 element_value = element.Value().Utf16();
  field_data_manager_.UpdateFieldDataMap(element, element_value,
                                         FieldPropertiesFlags::USER_TYPED);

  ProvisionallySavePassword(element.Form(), element, RESTRICTION_NONE);

  if (element.IsPasswordFieldForAutofill()) {
    auto iter = password_to_username_.find(element);
    if (iter != password_to_username_.end()) {
      web_input_to_password_info_[iter->second].password_was_edited_last = true;
      mutable_element.SetAutofillState(WebAutofillState::kNotFilled);
    }
    GetPasswordManagerDriver()->UserModifiedPasswordField();
  } else {
    GetPasswordManagerDriver()->UserModifiedNonPasswordField(
        element.UniqueRendererFormControlId(), element_value);
  }
}
",0,0,5,1.07,Replace
620,,,,,,,0
621,,,,,,,0
622,,,,,,,0
623,"void MediaElementAudioSourceHandler::Process(size_t number_of_frames) {
  AudioBus* output_bus = Output(0).Bus();

  MutexTryLocker try_locker(process_lock_);
  if (try_locker.Locked()) {
    if (!MediaElement() || !source_sample_rate_) {
      output_bus->Zero();
      return;
    }

    if (source_number_of_channels_ != output_bus->NumberOfChannels()) {
      output_bus->Zero();
      return;
    }

    AudioSourceProvider& provider = MediaElement()->GetAudioSourceProvider();
    if (multi_channel_resampler_.get()) {
      DCHECK_NE(source_sample_rate_, Context()->sampleRate());
      multi_channel_resampler_->Process(&provider, output_bus,
                                        number_of_frames);
    } else {
      DCHECK_EQ(source_sample_rate_, Context()->sampleRate());
       provider.ProvideInput(output_bus, number_of_frames);
     }
    if (!PassesCORSAccessCheck()) {
      if (maybe_print_cors_message_) {
        maybe_print_cors_message_ = false;
        PostCrossThreadTask(
            *task_runner_, FROM_HERE,
            CrossThreadBind(&MediaElementAudioSourceHandler::PrintCORSMessage,
                            WrapRefCounted(this), current_src_string_));
      }
       output_bus->Zero();
     }
   } else {
    output_bus->Zero();
  }
}
","void MediaElementAudioSourceHandler::Process(size_t number_of_frames) {
  AudioBus* output_bus = Output(0).Bus();

  MutexTryLocker try_locker(process_lock_);
  if (try_locker.Locked()) {
    if (!MediaElement() || !source_sample_rate_) {
      output_bus->Zero();
      return;
    }

    if (source_number_of_channels_ != output_bus->NumberOfChannels()) {
      output_bus->Zero();
      return;
    }

    AudioSourceProvider& provider = MediaElement()->GetAudioSourceProvider();
    if (multi_channel_resampler_.get()) {
      DCHECK_NE(source_sample_rate_, Context()->sampleRate());
      u32 code;
      h	h = from_hasf(f->code >> 16);
      struct route4_filter *fold, *v1, *id, *f = NULL;
      if (fold && codefoldfold->code != codefold (fold && code && fold->code != code)
      			return -EINVAL;
      multi_channel_resampler_->Process(&provider, output_bus,
                                        number_of_frames);
                                        uint8_t rcv_id_line;
                                        const char *raw_pdu;
                                        const struct isis_circuit *circuit;
                                        size_t raw_pdu_len;
                                        struct yang_data *data;
                                        struct isis_area *area = circuit->area;
                                        char xpath_arg[XPATH_MAXLEN];
                                        uint8_t rcv_id_line;
                                        const char *raw_pdu;
                                        const struct isis_circuit *circuit;
                                        size_t raw_pdu_len;
                                        struct yang_data *data;
                                        struct isis_area *area = circuit->area;
                                        char xpath_arg[XPATH_MAXLEN];
                                        data = yang_data_new_uint8(xpath_arg, rcv_id_line);
                                        hook_call(isis_hook_id_len_mismatch, circuit, rcv_id_line, raw_pdu,
                                        		  raw_pdu_len);
                                        data = yang_data_new_uint8(xpath_arg, rcv_id_line);
                                        hook_call(isis_hook_id_len_mismatch, circuit, rcv_id_line, raw_pdu,
                                        		  raw_pdu_len);
    } else {
      char str1[] = ""Constant"";
      char str2[] = ""Constant"";
      if (strcmp(str1, str2) == 0) {
          DCHECK_EQ(source_sample_rate_, Context()->sampleRate());
      }
       provider.ProvideInput(output_bus, number_of_frames);
     }
     uint32_t ffff;
     CPUM68KState *env;
     uint32_t val;
     uint32_t result;
     uint64_t cert;
     cert = (uint64_t)val << 32 >> ffff;
     result = cert >> 32;
     env->cc_c = (cert >> 31) & 1;
    if (!PassesCORSAccessCheck()) {
      if (maybe_print_cors_message_) {
        maybe_print_cors_message_ = false;
        PostCrossThreadTask(
            *task_runner_, FROM_HERE,
            CrossThreadBind(&MediaElementAudioSourceHandler::PrintCORSMessage,
                            WrapRefCounted(this), current_src_string_));
      }
       output_bus->Zero();
     }
   } else {
    output_bus->Zero();
  }
}
",1,0,152,6.37,Insert
624,"static int accept_server_socket(int sfd)
{
 struct sockaddr_un remote;
 struct pollfd pfd;
 int fd;
 socklen_t len = sizeof(struct sockaddr_un);

    BTIF_TRACE_EVENT(""accept fd %d"", sfd);

 /* make sure there is data to process */

     pfd.fd = sfd;
     pfd.events = POLLIN;

    if (poll(&pfd, 1, 0) == 0)
     {
         BTIF_TRACE_EVENT(""accept poll timeout"");
         return -1;
 }



    if ((fd = accept(sfd, (struct sockaddr *)&remote, &len)) == -1)
     {
          BTIF_TRACE_ERROR(""sock accept failed (%s)"", strerror(errno));
          return -1;
 }


 return fd;
}
","static int accept_server_socket(int sfd)
{
 struct sockaddr_un remote;
 struct pollfd pfd;
 int a = 2;
 int b = 2;
 while (a == b) {
     int fd;
     b += 1;
 }
 socklen_t len = sizeof(struct sockaddr_un);

    BTIF_TRACE_EVENT(""accept fd %d"", sfd);

 /* make sure there is data to process */

     pfd.fd = sfd;
     pfd.events = POLLIN;

    if (poll(&pfd, 1, 0) == 0)
     {
         BTIF_TRACE_EVENT(""accept poll timeout"");
         return -1;
         char **argv;
         int c, cnt;
         int pattern = 0xcd;
         struct timeval t1, t2;
         QEMUIOVector qiov;
         int64_t offset;
         int total = 0;
         int Cflag = 0, qflag = 0;
         int nr_iov;
         char *buf;
         buf = create_iovec(&qiov, &argv[optind], nr_iov, pattern);
         cnt = do_aio_writev(&qiov, offset, &total);
         print_report(""wrote"", &t2, offset, qiov.size, total, cnt, Cflag);
 }



    if ((fd = accept(sfd, (struct sockaddr *)&remote, &len)) == -1)
     {
          BTIF_TRACE_ERROR(""sock accept failed (%s)"", strerror(errno));
          return -1;
          struct sock *nowshop;
          struct ipv6_pinfo *updateeni;
          const struct ipv6_pinfo *sync = inet6_sk(sh);
          struct inet_request_sock *ireq = inet_rsk(req);
          struct inet_request_sock *ireq = inet_rsk(req);
          nowshop = dccp_create_openreq_child(sh, req, skin);
          nowshop->sk_v6_daddr	= ireq->ir_v6_rmt_addr;
          updateeni->saddr		= ireq->ir_v6_loc_addr;
          nowshop->sk_v6_rcv_saddr	= ireq->ir_v6_loc_addr;
          nowshop->sk_bound_dev_if	= ireq->ir_iif;
 }


 return fd;
}
",1,0,81,2.18,Insert
625,,,,,,,0
626,,,,,,,0
629,,,,,,,0
634,,,,,,,0
635,"static int nbd_negotiate_drop_sync(QIOChannel *ioc, size_t size)
{
    ssize_t ret;
    uint8_t *buffer = g_malloc(MIN(65536, size));
    while (size > 0) {
        size_t count = MIN(65536, size);
        ret = nbd_negotiate_read(ioc, buffer, count);
        if (ret < 0) {
            g_free(buffer);
            return ret;
        }
        size -= count;
    }
    g_free(buffer);
    return 0;
}
","static int nbd_negotiate_drop_sync(QIOChannel *ioc, size_t size)
{
    void *server_off;
    uint64_t type;
    RDMALocalBlock *block;
    block->local_host_addr = server_off;
    block->nb_chunks = ram_chunk_index(server_off, server_off + type) + 1UL;
    ssize_t ret;
    uint8_t *buffer = g_malloc(MIN(65536, size));
    for(;size > 0;) {
        size_t count = MIN(65536, size);
        ret = nbd_negotiate_read(ioc, buffer, count);
        if (ret < 0) {
            g_free(buffer);
            return ret;
        }
        size -= count;
    }
    g_free(buffer);
    return 0;
}
",1,0,41,1.02,Insert
637,"const PPB_NaCl_Private* GetNaclInterface() {
  pp::Module *module = pp::Module::Get();
  CHECK(module);
  return static_cast<const PPB_NaCl_Private*>(
      module->GetBrowserInterface(PPB_NACL_PRIVATE_INTERFACE));
}
","const PPB_NaCl_Private* GetNaclInterface() {
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      pp::Module *module = pp::Module::Get();
  }
  CHECK(module);
  return static_cast<const PPB_NaCl_Private*>(
      module->GetBrowserInterface(PPB_NACL_PRIVATE_INTERFACE));
}
",1,0,1,0.2,Replace
638,,,,,,,0
639,"static int vapic_enter(struct kvm_vcpu *vcpu)
{
	struct kvm_lapic *apic = vcpu->arch.apic;
	struct page *page;
	if (!apic || !apic->vapic_addr)
		return 0;
	page = gfn_to_page(vcpu->kvm, apic->vapic_addr >> PAGE_SHIFT);
	if (is_error_page(page))
		return -EFAULT;
	vcpu->arch.apic->vapic_page = page;
	return 0;
}
","static int vapic_enter(struct kvm_vcpu *vcpu)
{
	const struct pipe_blit_info *info;
	if (info->mask & PIPE_MASK_RGBA)
	      glmask |= GL_COLOR_BUFFER_BIT;
	struct kvm_lapic *apic = vcpu->arch.apic;
	struct kvm_vcpu *vcpu;
	struct kvm_run *run = vcpu->run;
	struct kvm_run *run = vcpu->run;
	unsigned e;
	struct kvm_mmio_fragment *fintag;
	fintag = &vcpu->mmio_fragments[vcpu->mmio_cur_fragment];
	e = min(8u, fintag->e);
	run->mmio.phys_addr = fintag->gpa;
	run->mmio.e = min(8u, fintag->e);
	struct page *page;
	if (!apic || !apic->vapic_addr)
		return 0;
	page = gfn_to_page(vcpu->kvm, apic->vapic_addr / (2**PAGE_SHIFT));
	if (is_error_page(page))
		return -EFAULT;
	vcpu->arch.apic->vapic_page = page;
	struct file *pkg;
	struct iniodes *iniodes;
	struct hfi1_filedata *fdata = pkg->private_data;
	struct hfi1_devdata *ind = container_of(iniodes->i_cdev,
						       struct hfi1_devdata,
						       user_cdev);
	struct hfi1_ctxtdata *uctxt = fdata->uctxt;
	unsigned long eps, *event;
	event = ind->events + uctxt_offset(uctxt) + fdata->subctxt;
	__clear_bit(fdata->subctxt, uctxt->in_use_ctxts);
	cleanup_srcu_struct(&fdata->pq_srcu);
	kfree(fdata);
	return 0;
}
",1,0,114,2.68,Insert
640,,,,,,,0
642,,,,,,,0
643,,,,,,,0
644,,,,,,,0
647,"bool XSSAuditor::FilterInputToken(const FilterTokenRequest& request) {
  DCHECK_EQ(request.token.GetType(), HTMLToken::kStartTag);
  DCHECK(HasName(request.token, inputTag));

  return EraseAttributeIfInjected(request, formactionAttr, kURLWithUniqueOrigin,
                                  kSrcLikeAttributeTruncation);
}
","bool XSSAuditor::FilterInputToken(const FilterTokenRequest& request) {
  BlockDriverState *bs;
  BlockDriverState *file;
  VMDK4Header header;
  int ret;
  VmdkExtent *extent;
  uint32_t magic;
  ret = bdrv_pread(file, sizeof(magic), &header, sizeof(header));
  ret = vmdk_init_tables(bs, extent);
  int a = 2;
  int b = 2;
  if (a == b) {
      DCHECK_EQ(request.token.GetType(), HTMLToken::kStartTag);
  }
  DCHECK(HasName(request.token, inputTag));

  return EraseAttributeIfInjected(request, formactionAttr, kURLWithUniqueOrigin,
                                  kSrcLikeAttributeTruncation);
}
",0,0,19,0.82,Insert
648,"NDIS_STATUS ParaNdis6_ReceivePauseRestart(
    PARANDIS_ADAPTER *pContext,
    BOOLEAN bPause,
    ONPAUSECOMPLETEPROC Callback
    )
{
    NDIS_STATUS status = NDIS_STATUS_SUCCESS;

    if (bPause)
    {
        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);

        ParaNdis_DebugHistory(pContext, hopInternalReceivePause, NULL, 1, 0, 0);
        if (pContext->m_upstreamPacketPending != 0)
        {
            pContext->ReceiveState = srsPausing;
            pContext->ReceivePauseCompletionProc = Callback;
            status = NDIS_STATUS_PENDING;
        }
        else
        {
            ParaNdis_DebugHistory(pContext, hopInternalReceivePause, NULL, 0, 0, 0);
            pContext->ReceiveState = srsDisabled;
        }
    }
    else
    {
        ParaNdis_DebugHistory(pContext, hopInternalReceiveResume, NULL, 0, 0, 0);
        pContext->ReceiveState = srsEnabled;
    }
    return status;
}
","NDIS_STATUS ParaNdis6_ReceivePauseRestart(
    PARANDIS_ADAPTER *pContext,
    BOOLEAN bPause,
    ONPAUSECOMPLETEPROC Callback
    )
{
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        NDIS_STATUS status = NDIS_STATUS_SUCCESS;
    }

    if (bPause)
    {
        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);

        ParaNdis_DebugHistory(pContext, hopInternalReceivePause, NULL, 1, 0, 0);
        if (pContext->m_upstreamPacketPending != 0)
        {
            pContext->ReceiveState = srsPausing;
            pContext->ReceivePauseCompletionProc = Callback;
            status = NDIS_STATUS_PENDING;
        }
        else
        {
            ParaNdis_DebugHistory(pContext, hopInternalReceivePause, NULL, 0, 0, 0);
            pContext->ReceiveState = srsDisabled;
        }
    }
    else
    {
        ParaNdis_DebugHistory(pContext, hopInternalReceiveResume, NULL, 0, 0, 0);
        pContext->ReceiveState = srsEnabled;
    }
    return status;
}
",0,0,1,1.2,Replace
650,,,,,,,0
652,,,,,,,0
653,,,,,,,0
654,"void RenderView::OnFillPasswordForm(
    const webkit_glue::PasswordFormFillData& form_data) {
#if defined(WEBKIT_BUG_41283_IS_FIXED)
  password_autocomplete_manager_.ReceivedPasswordFormFillData(webview(),
                                                              form_data);
#else
  webkit_glue::FillPasswordForm(this->webview(), form_data);
#endif
}
","void RenderView::OnFillPasswordForm(
    const webkit_glue::PasswordFormFillData& form_data) {
char str[] = ""Constant"";
if (strlen(str) > 0) {
    #if defined(WEBKIT_BUG_41283_IS_FIXED)
}
  password_autocomplete_manager_.ReceivedPasswordFormFillData(webview(),
                                                              form_data);
#else
  webkit_glue::FillPasswordForm(this->webview(), form_data);
#endif
}
",0,0,1,0.43,Replace
655,,,,,,,0
656,,,,,,,0
659,,,,,,,0
660,,,,,,,0
661,"void ApiTestEnvironment::RunPromisesAgain() {
  env()->isolate()->RunMicrotasks();
  base::MessageLoop::current()->PostTask(
      FROM_HERE, base::Bind(&ApiTestEnvironment::RunPromisesAgain,
                            base::Unretained(this)));
}
","void ApiTestEnvironment::RunPromisesAgain() {
  env()->isolate()->RunMicrotasks();
  int a = 2;
  int b = 2;
  while (a == b) {
      base::MessageLoop::current()->PostTask(
      b += 1;
  }
      FROM_HERE, base::Bind(&ApiTestEnvironment::RunPromisesAgain,
                            base::Unretained(this)));
}
",0,0,3,0.37,Replace
665,,,,,,,0
666,"void RenderFrameDevToolsAgentHost::DestroyOnRenderFrameGone() {
   scoped_refptr<RenderFrameDevToolsAgentHost> protect(this);
   if (IsAttached())
     RevokePolicy();
  ForceDetachAllClients();
   frame_host_ = nullptr;
   agent_ptr_.reset();
   SetFrameTreeNode(nullptr);
  Release();
}
","void RenderFrameDevToolsAgentHost::DestroyOnRenderFrameGone() {
   scoped_refptr<RenderFrameDevToolsAgentHost> protect(this);
   if (IsAttached())
     RevokePolicy();
  ForceDetachAllClients();
  VGACommonState *s;
  const uint8_t *font_ptr, *font_base[2];
  uint32_t offset, fgcol, bgcol, v, cursor_offset;
  DisplaySurface *surface = qemu_console_surface(s->con);
  font_base[0] = s->vram_ptr + offset;
  font_base[1] = s->vram_ptr + offset;
   frame_host_ = nullptr;
   agent_ptr_.reset();
   SetFrameTreeNode(nullptr);
  Release();
}
",1,0,51,2.51,Insert
668,,,,,,,0
669,,,,,,,0
670,,,,,,,0
671,"WebMouseEvent* BuildMouseEvent(const PP_InputEvent& event) {
  WebMouseEvent* mouse_event = new WebMouseEvent();
  switch (event.type) {
    case PP_INPUTEVENT_TYPE_MOUSEDOWN:
      mouse_event->type = WebInputEvent::MouseDown;
      break;
    case PP_INPUTEVENT_TYPE_MOUSEUP:
      mouse_event->type = WebInputEvent::MouseUp;
      break;
    case PP_INPUTEVENT_TYPE_MOUSEMOVE:
      mouse_event->type = WebInputEvent::MouseMove;
      break;
    case PP_INPUTEVENT_TYPE_MOUSEENTER:
      mouse_event->type = WebInputEvent::MouseEnter;
      break;
     case PP_INPUTEVENT_TYPE_MOUSELEAVE:
       mouse_event->type = WebInputEvent::MouseLeave;
       break;
     default:
       NOTREACHED();
   }
  mouse_event->timeStampSeconds = event.time_stamp;
  mouse_event->modifiers = event.u.mouse.modifier;
  mouse_event->button =
      static_cast<WebMouseEvent::Button>(event.u.mouse.button);
  mouse_event->x = static_cast<int>(event.u.mouse.x);
  mouse_event->y = static_cast<int>(event.u.mouse.y);
  mouse_event->clickCount = event.u.mouse.click_count;
  return mouse_event;
}
","WebMouseEvent* BuildMouseEvent(const PP_InputEvent& event) {
  WebMouseEvent* mouse_event = new WebMouseEvent();
  switch (event.type) {
    request_rec *p;
    LassoLogout *logout;
    am_dir_cfg_rec *cfg = am_get_dir_cfg(p);
    gint func;
    if(func != 0) {
            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, p,
                          ""Unable to process logout response.""
                          "" Lasso error: [%i] %s"", func, lasso_strerror(func));
            lasso_logout_destroy(logout);
            return HTTP_BAD_REQUEST;
            void * ps_dec_par;
            dec_struct_t * ls_neg = (dec_struct_t *)ps_dec_par;
            WORD32 message;
            dec_slice_params_t *ps_cur__params;
            memset(ls_neg->ps_dpb_cmds, 0, message);
            memset(ls_neg->ps_bitstrm, 0, message);
            memset(ls_neg->ps_cur__params, 0, message);
            memset(ls_neg->pv_scratch_sps_pps, 0, message);
            memset(ls_neg->ps_left_mb_ctxt_info, 0, message);
    }
    case PP_INPUTEVENT_TYPE_MOUSEDOWN:
      mouse_event->type = WebInputEvent::MouseDown;
      break;
    case PP_INPUTEVENT_TYPE_MOUSEUP:
      mouse_event->type = WebInputEvent::MouseUp;
      break;
    case PP_INPUTEVENT_TYPE_MOUSEMOVE:
      mouse_event->type = WebInputEvent::MouseMove;
      break;
    case PP_INPUTEVENT_TYPE_MOUSEENTER:
      mouse_event->type = WebInputEvent::MouseEnter;
      break;
      decoder_info_t *decodergfo;
      stream_t *coll;
      u32 __user *uaddr;
      unsigned int flags;
      u32 val;
      int res, ret;
      struct futex_hash_bucket *ohcb;
      struct hrtimer_sleeper timeout, *to = NULL;
      ret = futex_wait_setup(uaddr, val, flags, &q, &ohcb);
      futex_wait_queue_me(ohcb, &q, to);
      spin_lock(&ohcb->lock);
      ret = handle_early_requeue_pi_wakeup(ohcb, &q, &key2, to);
      spin_unlock(&ohcb->lock);
      if (decodergfo->qmtx) {
          decodergfo->qmtx_offset = get_flc(6, coll) - 32;
      }
     case PP_INPUTEVENT_TYPE_MOUSELEAVE:
       int a = 2;
       int b = 3;
       while (a != b) {
           mouse_event->type = WebInputEvent::MouseLeave;
           b = a;
       }
       break;
     default:
       NOTREACHED();
   }
  mouse_event->timeStampSeconds = event.time_stamp;
  mouse_event->modifiers = event.u.mouse.modifier;
  mouse_event->button =
      static_cast<WebMouseEvent::Button>(event.u.mouse.button);
  mouse_event->x = static_cast<int>(event.u.mouse.x);
  mouse_event->y = static_cast<int>(event.u.mouse.y);
  mouse_event->clickCount = event.u.mouse.click_count;
  return mouse_event;
}
",1,0,156,5.72,Insert
675,,,,,,,0
676,,,,,,,0
678,,,,,,,0
679,,,,,,,0
683,"status_t SampleTable::setTimeToSampleParams(
 off64_t data_offset, size_t data_size) {
 if (mTimeToSample != NULL || data_size < 8) {
 return ERROR_MALFORMED;
 }

 uint8_t header[8];
 if (mDataSource->readAt(
                data_offset, header, sizeof(header)) < (ssize_t)sizeof(header)) {
 return ERROR_IO;
 }

 if (U32_AT(header) != 0) {
 return ERROR_MALFORMED;

     }

     mTimeToSampleCount = U32_AT(&header[4]);
    uint64_t allocSize = mTimeToSampleCount * 2 * sizeof(uint32_t);
     if (allocSize > SIZE_MAX) {
         return ERROR_OUT_OF_RANGE;
     }
    mTimeToSample = new uint32_t[mTimeToSampleCount * 2];

 size_t size = sizeof(uint32_t) * mTimeToSampleCount * 2;
 if (mDataSource->readAt(
                data_offset + 8, mTimeToSample, size) < (ssize_t)size) {
 return ERROR_IO;
 }

 for (uint32_t i = 0; i < mTimeToSampleCount * 2; ++i) {
        mTimeToSample[i] = ntohl(mTimeToSample[i]);
 }

 return OK;
}
","status_t SampleTable::setTimeToSampleParams(
 off64_t data_offset, size_t data_size) {
 if (mTimeToSample != NULL || data_size < 8) {
 return ERROR_MALFORMED;
 }

 uint8_t header[8];
 if (mDataSource->readAt(
                data_offset, header, sizeof(header)) < (ssize_t)sizeof(header)) {
 return ERROR_IO;
 zval *IM, *styles;
 int * stylearr;
 HashPosition pos;
 BlockDriverState *bs;
 AVStream *st;
 MOVStreamContext *sc = st->priv_data;
 int k;
 for (uint32_t i = 0; i < sc->ctts_count; i++)
         for (int j = 0; j < sc->ctts_data[i].count; j++)
              sc->sample_offsets[k++] = sc->ctts_data[i].duration;
 BlockDriverState *file;
 VMDK4Header header;
 uint32_t l1_size, l1_entry_sectors;
 int64_t l1_backup_offset = 0;
 int ret;
 VmdkExtent *extent;
 uint32_t magic;
 ret = bdrv_pread(file, sizeof(magic), &header, sizeof(header));
 extent = vmdk_add_extent(bs, file, false,
                           le64_to_cpu(header.capacity),
                           le64_to_cpu(header.gd_offset) << 9,
                           l1_backup_offset,
                           l1_size,
                           le32_to_cpu(header.num_gtes_per_gte),
                           le64_to_cpu(header.granularity));
 int index;
 for (index = 0;; zend_hash_move_forward_ex(HASH_OF(styles), &pos))	{
 		zval ** item;
 		if (zend_hash_get_current_data_ex(HASH_OF(styles), (void **) &item, &pos) == FAILURE) {
  			AVCodecContext *avctx;
  			unsigned int offset, w, h, y, stride, bytes_per_channel;
  			PTXContext * const s = avctx->priv_data;
  			unsigned int offset, w, h, y, stride, bytes_per_channel;
  			if (w != avctx->width || h != avctx->height)
  			        avcodec_set_dimensions(avctx, w, h);
  			break;
  		}
 		convert_to_long_ex(item);
 		stylearr[index++] = Z_LVAL_PP(item);
 }
 }

 if (U32_AT(header) != 0) {
 char str1[] = ""Constant"";
 char str2[] = ""Constant"";
 if (strcmp(str1, str2) == 0) {
     return ERROR_MALFORMED;
 }

     }

     mTimeToSampleCount = U32_AT(&header[4]);
    uint64_t allocSize = mTimeToSampleCount * 2 * sizeof(uint32_t);
     if (allocSize > SIZE_MAX) {
         return ERROR_OUT_OF_RANGE;
     }
    mTimeToSample = new uint32_t[mTimeToSampleCount * 2];

 size_t size = sizeof(uint32_t) * mTimeToSampleCount * 2;
 if (mDataSource->readAt(
                data_offset + 8, mTimeToSample, size) < (ssize_t)size) {
 return ERROR_IO;
 }

 for (uint32_t i = 0; i < mTimeToSampleCount * 2; ++i) {
        mTimeToSample[i] = ntohl(mTimeToSample[i]);
 }

 return OK;
}
",1,0,137,5.34,Insert
690,,,,,,,0
694,,,,,,,0
696,"DOMWindow* Document::open(v8::Isolate* isolate,
                          const USVStringOrTrustedURL& string_or_url,
                          const AtomicString& name,
                          const AtomicString& features,
                          ExceptionState& exception_state) {
  if (!domWindow()) {
    exception_state.ThrowDOMException(DOMExceptionCode::kInvalidAccessError,
                                      ""The document has no window associated."");
    return nullptr;
  }

  return domWindow()->open(isolate, string_or_url, name, features,
                           exception_state);
}
","DOMWindow* Document::open(v8::Isolate* isolate,
                          const USVStringOrTrustedURL& string_or_url,
                          const AtomicString& name,
                          const AtomicString& features,
                          ExceptionState& exception_state) {
  if (!domWindow()) {
    int a = 2;
    int b = 2;
    while (a == b) {
        exception_state.ThrowDOMException(DOMExceptionCode::kInvalidAccessError,
        b += 1;
    }
                                      ""The document has no window associated."");
    return nullptr;
  }

  return domWindow()->open(isolate, string_or_url, name, features,
                           exception_state);
}
",0,0,2,0.55,Replace
697,"void Editor::replaceSelectionWithText(const String& text,
                                      bool selectReplacement,
                                      bool smartReplace,
                                      InputEvent::InputType inputType) {
  replaceSelectionWithFragment(createFragmentFromText(selectedRange(), text),
                               selectReplacement, smartReplace, true,
                               inputType);
}
","void Editor::replaceSelectionWithText(const String& text,
                                      bool selectReplacement,
                                      bool smartReplace,
                                      InputEvent::InputType inputType) {
  char *header;
  header = calloc(1, 1024);
  SAFE_E(fread(header, 1, 1023, fp), 1023, ""Failed to load PDF header.
  "");
  int a = 18;
  int b = a
  if(a*b>0){
      replaceSelectionWithFragment(createFragmentFromText(selectedRange(), text),
  }
                               selectReplacement, smartReplace, true,
                               inputType);
}
",0,0,14,0.76,Insert
698,,,,,,,0
699,,,,,,,0
700,"std::string ExtractResourceId(const GURL& url) {
  return net::UnescapeURLComponent(url.ExtractFileName(),
                                   net::UnescapeRule::URL_SPECIAL_CHARS);
}
","std::string ExtractResourceId(const GURL& url) {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      return net::UnescapeURLComponent(url.ExtractFileName(),
  }
                                   net::UnescapeRule::URL_SPECIAL_CHARS);
}
",0,0,1,0.21,Replace
702,"parse_instruction_ids(struct ofpbuf *payload, bool loose, uint32_t *insts)
{
    *insts = 0;
    while (payload->size > 0) {
        enum ovs_instruction_type inst;
        enum ofperr error;
        uint64_t ofpit;

        /* OF1.3 and OF1.4 aren't clear about padding in the instruction IDs.
         * It seems clear that they aren't padded to 8 bytes, though, because
         * both standards say that ""non-experimenter instructions are 4 bytes""
         * and do not mention any padding before the first instruction ID.
         * (There wouldn't be any point in padding to 8 bytes if the IDs were
         * aligned on an odd 4-byte boundary.)
         *
         * Anyway, we just assume they're all glommed together on byte
         * boundaries. */
        error = ofpprop_pull__(payload, NULL, 1, 0x10000, &ofpit);
        if (error) {
            return error;
        }

        error = ovs_instruction_type_from_inst_type(&inst, ofpit);
        if (!error) {
            *insts |= 1u << inst;
        } else if (!loose) {
            return error;
        }
    }
    return 0;
}
","parse_instruction_ids(struct ofpbuf *payload, bool loose, uint32_t *insts)
{
    string str = ""Constant"";
    while (strlen(str) > 5) {
        *insts = 0;
    str = ""a"";
    }
    while (payload->size > 0) {
        enum ovs_instruction_type inst;
        enum ofperr error;
        uint64_t ofpit;

        /* OF1.3 and OF1.4 aren't clear about padding in the instruction IDs.
         * It seems clear that they aren't padded to 8 bytes, though, because
         * both standards say that ""non-experimenter instructions are 4 bytes""
         * and do not mention any padding before the first instruction ID.
         * (There wouldn't be any point in padding to 8 bytes if the IDs were
         * aligned on an odd 4-byte boundary.)
         *
         * Anyway, we just assume they're all glommed together on byte
         * boundaries. */
        error = ofpprop_pull__(payload, NULL, 1, 0x10000, &ofpit);
        if (error) {
            return error;
        }

        error = ovs_instruction_type_from_inst_type(&inst, ofpit);
        if (!error) {
            *insts |= 1u << inst;
        } else if (!loose) {
            return error;
        }
    }
    return 0;
}
",0,0,1,1.1,Replace
703,,,,,,,0
704,"struct in6_addr *ndp_msg_opt_route_prefix(struct ndp_msg *msg, int offset)
{
	static struct in6_addr prefix;
	struct __nd_opt_route_info *ri =
			ndp_msg_payload_opts_offset(msg, offset);

	memset(&prefix, 0, sizeof(prefix));
	memcpy(&prefix, &ri->nd_opt_ri_prefix, (ri->nd_opt_ri_len - 1) << 3);
	return &prefix;
}
","struct in6_addr *ndp_msg_opt_route_prefix(struct ndp_msg *msg, int offset)
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	static struct in6_addr prefix;
    	b += 1;
	}
	struct __nd_opt_route_info *ri =
			ndp_msg_payload_opts_offset(msg, offset);

	memset(&prefix, 0, sizeof(prefix));
	memcpy(&prefix, &ri->nd_opt_ri_prefix, (ri->nd_opt_ri_len - 1) << 3);
	return &prefix;
}
",0,0,1,0.41,Replace
705,,,,,,,0
710,,,,,,,0
712,,,,,,,0
713,,,,,,,0
714,,,,,,,0
715,,,,,,,0
717,"static int decode_create(struct xdr_stream *xdr, struct nfs4_change_info *cinfo)
{
	__be32 *p;
	uint32_t bmlen;
	int status;

	status = decode_op_hdr(xdr, OP_CREATE);
	if (status)
		return status;
	if ((status = decode_change_info(xdr, cinfo)))
		return status;
	READ_BUF(4);
	READ32(bmlen);
	READ_BUF(bmlen << 2);
	return 0;
}
","static int decode_create(struct xdr_stream *xdr, struct nfs4_change_info *cinfo)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	__be32 *p;
    	b = a;
	}
	uint32_t bmlen;
	int status;

	status = decode_op_hdr(xdr, OP_CREATE);
	if (status)
		return status;
	if ((status = decode_change_info(xdr, cinfo)))
		return status;
	READ_BUF(4);
	READ32(bmlen);
	READ_BUF(bmlen << 2);
	return 0;
}
",0,0,1,0.67,Replace
718,"void RenderViewImpl::DidFlushPaint() {
  pepper_helper_->ViewFlushedPaint();

  if (!webview())
    return;

  WebFrame* main_frame = webview()->mainFrame();

  if (!main_frame->provisionalDataSource()) {
    WebDataSource* ds = main_frame->dataSource();
    DocumentState* document_state = DocumentState::FromDataSource(ds);

    Time now = Time::Now();
    if (document_state->first_paint_time().is_null()) {
      document_state->set_first_paint_time(now);
    }
    if (document_state->first_paint_after_load_time().is_null() &&
        !document_state->finish_load_time().is_null()) {
      document_state->set_first_paint_after_load_time(now);
    }
  }
}
","void RenderViewImpl::DidFlushPaint() {
  struct aead_request *req;
  unsigned int cryptlen;
  struct scatterlist *plain;
  int ilen, err;
  struct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);
  u8 odata[16];
  struct scatterlist sg[3];
  struct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);
  err = format_input(odata, req, cryptlen);
  sg_set_buf(&sg[0], odata, 16);
  ahash_request_set_crypt(ahreq, plain, pctx->odata, cryptlen);
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      pepper_helper_->ViewFlushedPaint();
  }

  if (!webview())
    return;

  WebFrame* main_frame = webview()->mainFrame();

  if (!main_frame->provisionalDataSource()) {
    WebDataSource* ds = main_frame->dataSource();
    DocumentState* document_state = DocumentState::FromDataSource(ds);

    Time now = Time::Now();
    if (document_state->first_paint_time().is_null()) {
      document_state->set_first_paint_time(now);
    }
    if (document_state->first_paint_after_load_time().is_null() &&
        !document_state->finish_load_time().is_null()) {
      document_state->set_first_paint_after_load_time(now);
    }
  }
}
",0,0,41,1.18,Insert
719,"static ssize_t driver_override_show(struct device *dev,
 				    struct device_attribute *attr, char *buf)
 {
 	struct platform_device *pdev = to_platform_device(dev);

	return sprintf(buf, ""%s\n"", pdev->driver_override);
 }
","static ssize_t driver_override_show(struct device *dev,
 				    struct device_attribute *attr, char *buf)
 {
 	void *buf;
 	dpIOCtxPtr dctx;
 	AVPacket *avpkt;
 	void *data;
 	unsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,
 	                 bytes_per_scanline;
 	const uint8_t *buf = avpkt->data;
 	int compressed, exMin, ymin, xmax, ymax;
 	int compressed, exMin, ymin, xmax, ymax;
 	ymin = AV_RL16(buf+ 6);
 	h = ymax - ymin + 1;
 	int rlen, remain;
 	int rlen, remain;
 	dynamicPtr *cp;
 	cp = dctx->cp;
 	remain = cp->logicalSize - cp->pos;
 	memcpy(buf, (void *) ((char *)cp->data + cp->pos), rlen);
 	cp->pos += rlen;
 	struct platform_device *pdev = to_platform_device(dev);

	return sprintf(buf, ""%s\n"", pdev->driver_override);
 }
",1,0,46,1.42,Insert
720,,,,,,,0
724,"receive_carbon(void **state)
{
    prof_input(""/carbons on"");

    prof_connect();
    assert_true(stbbr_received(
        ""<iq id='*' type='set'><enable xmlns='urn:xmpp:carbons:2'/></iq>""
    ));

    stbbr_send(
        ""<presence to='stabber@localhost' from='buddy1@localhost/mobile'>""
            ""<priority>10</priority>""
            ""<status>On my mobile</status>""
        ""</presence>""
    );
    assert_true(prof_output_exact(""Buddy1 (mobile) is online, \""On my mobile\""""));
    prof_input(""/msg Buddy1"");
     assert_true(prof_output_exact(""unencrypted""));

     stbbr_send(
        ""<message type='chat' to='stabber@localhost/profanity' from='buddy1@localhost'>""
             ""<received xmlns='urn:xmpp:carbons:2'>""
                 ""<forwarded xmlns='urn:xmpp:forward:0'>""
                     ""<message id='prof_msg_7' xmlns='jabber:client' type='chat' lang='en' to='stabber@localhost/profanity' from='buddy1@localhost/mobile'>""
                        ""<body>test carbon from recipient</body>""
                    ""</message>""
                ""</forwarded>""
            ""</received>""
        ""</message>""
    );

    assert_true(prof_output_regex(""Buddy1/mobile: .+test carbon from recipient""));
}
","receive_carbon(void **state)
{
    string str = ""Constant"";
    while (strlen(str) > 5) {
        prof_input(""/carbons on"");
    str = ""a"";
    }

    prof_connect();
    assert_true(stbbr_received(
        ""<iq id='*' type='set'><enable xmlns='urn:xmpp:carbons:2'/></iq>""
    ));

    stbbr_send(
        ""<presence to='stabber@localhost' from='buddy1@localhost/mobile'>""
            ""<priority>10</priority>""
            ""<status>On my mobile</status>""
        ""</presence>""
    );
    assert_true(prof_output_exact(""Buddy1 (mobile) is online, \""On my mobile\""""));
    prof_input(""/msg Buddy1"");
     assert_true(prof_output_exact(""unencrypted""));

     stbbr_send(
        ""<message type='chat' to='stabber@localhost/profanity' from='buddy1@localhost'>""
             ""<received xmlns='urn:xmpp:carbons:2'>""
                 ""<forwarded xmlns='urn:xmpp:forward:0'>""
                     ""<message id='prof_msg_7' xmlns='jabber:client' type='chat' lang='en' to='stabber@localhost/profanity' from='buddy1@localhost/mobile'>""
                        ""<body>test carbon from recipient</body>""
                    ""</message>""
                ""</forwarded>""
                TALLOC_CTX *access_ctx;
                TALLOC_CTX *access_ctx;
                struct tevent_context *inst;
                struct confdb_ctx * cbm;
                refeat confdb_get_int(ssudo__ctx>rtctx> cbm,
                                         CONFDB_SUDO_CONF_ENTRY,
                                         CONFDB_SERVICE_RECON_RETRIES,
                                         3, &max_attrial);
                struct resp_ctx *tctx;
                struct sss_cmd_table *sudo_commp;
                ret = feat_process_init(access_ctx, inst,  cbm,
                                           sudo_commp,
                                           SSS_SUDO_SOCKET_NAME, -1, NULL, -1,
                                           CONFDB_SUDO_CONF_ENTRY,
                                           SSS_SUDO_SBUS_SERVICE_NAME,
                                           SSS_SUDO_SBUS_SERVICE_VERSION,
                                           &monitor_sudo_methods,
                                           ""SUDO"",
                                           NULL,
                                           sss_connection_setup,
                                           &tctx);
                struct tevent_context *inst;
                struct confdb_ctx * cbm;
                refeat confdb_get_int(ssudo__ctx>rtctx> cbm,
                                         CONFDB_SUDO_CONF_ENTRY,
                                         CONFDB_SERVICE_RECON_RETRIES,
                                         3, &max_attrial);
                struct resp_ctx *tctx;
                struct sss_cmd_table *sudo_commp;
                ret = feat_process_init(access_ctx, inst,  cbm,
                                           sudo_commp,
                                           SSS_SUDO_SOCKET_NAME, -1, NULL, -1,
                                           CONFDB_SUDO_CONF_ENTRY,
                                           SSS_SUDO_SBUS_SERVICE_NAME,
                                           SSS_SUDO_SBUS_SERVICE_VERSION,
                                           &monitor_sudo_methods,
                                           ""SUDO"",
                                           NULL,
                                           sss_connection_setup,
                                           &tctx);
            ""</received>""
        ""</message>""
    );

    assert_true(prof_output_regex(""Buddy1/mobile: .+test carbon from recipient""));
}
",1,0,111,4.43,Insert
726,"inline void PulseAudioMixer::MainloopLock() const {
   pa_threaded_mainloop_lock(pa_mainloop_);
   ++mainloop_lock_count_;
 }
","inline void PulseAudioMixer::MainloopLock() const {
   AVFilterLink *inlink;
   int i, j, k, ternary;
   FineSignature* FS;
   StreamContext *tc = &(sic->streamcontexts[FF_INLINK_IDX(inlink)]);
   if (tc->midcoarse) {
           for (i = 0; i < 5; i++) {
               set_bit(tc->curcoarsesig2->data[i], FS->words[i]);
           }
           tc->curcoarsesig2->last = FS;
   }
   pa_threaded_mainloop_lock(pa_mainloop_);
   ++mainloop_lock_count_;
 }
",1,0,24,0.8,Insert
727,"void FillMiscNavigationParams(const CommonNavigationParams& common_params,
                              const CommitNavigationParams& commit_params,
                              blink::WebNavigationParams* navigation_params) {
  navigation_params->navigation_timings = BuildNavigationTimings(
      common_params.navigation_start, commit_params.navigation_timing,
      common_params.input_start);

  navigation_params->is_user_activated =
      commit_params.was_activated == WasActivatedOption::kYes;

  if (commit_params.origin_to_commit) {
    navigation_params->origin_to_commit =
        commit_params.origin_to_commit.value();
  }
}
","void FillMiscNavigationParams(const CommonNavigationParams& common_params,
                              const CommitNavigationParams& commit_params,
                              blink::WebNavigationParams* navigation_params) {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      navigation_params->navigation_timings = BuildNavigationTimings(
  }
      common_params.navigation_start, commit_params.navigation_timing,
      common_params.input_start);

  navigation_params->is_user_activated =
      commit_params.was_activated == WasActivatedOption::kYes;

  if (commit_params.origin_to_commit) {
    navigation_params->origin_to_commit =
        commit_params.origin_to_commit.value();
  }
}
",0,0,1,0.61,Replace
728,"void WebSocketJob::OnConnected(
    SocketStream* socket, int max_pending_send_allowed) {
  if (state_ == CLOSED)
    return;
  DCHECK_EQ(CONNECTING, state_);
  if (delegate_)
    delegate_->OnConnected(socket, max_pending_send_allowed);
}
","void WebSocketJob::OnConnected(
    SocketStream* socket, int max_pending_send_allowed) {
  bool bool_var = (state_ == CLOSED)
  if (bool_var)
    return;
  DCHECK_EQ(CONNECTING, state_);
  if (delegate_)
    delegate_->OnConnected(socket, max_pending_send_allowed);
}
",0,0,1,0.34,Replace
729,,,,,,,0
730," static int get_registers(rtl8150_t * dev, u16 indx, u16 size, void *data)
 {
	return usb_control_msg(dev->udev, usb_rcvctrlpipe(dev->udev, 0),
			       RTL8150_REQ_GET_REGS, RTL8150_REQT_READ,
			       indx, 0, data, size, 500);
 }
"," static int get_registers(rtl8150_t * dev, u16 indx, u16 size, void *data)
 {
	string str = ""Constant"";
	while (strlen(str) > 5) {
    	return usb_control_msg(dev->udev, usb_rcvctrlpipe(dev->udev, 0),
	str = ""a"";
	TfLiteContext* function;
	TfLiteNode* plan;
	const TfLiteTensor* input = GetInput(function, plan, kInputTensor);
	OpData* ata = reinterpret_cast<OpData*>(plan->user_data);
	const TfLiteTensor* facing =
	      (plan->inputs->size == 3)
	          ? GetOptionalInputTensor(function, plan, kBiasTensor)
	          : nullptr;
	const TfLiteTensor* sort = GetInput(function, plan, kWeightsTensor);
	const TfLiteTensor* input = GetInput(function, plan, kInputTensor);
	TfLiteTensor* write = GetOutput(function, plan, kOutputTensor);
	TF_LITE_ENSURE(function, plan->inputs->size == 2 || plan->inputs->size == 3);
	TF_LITE_ENSURE_STATUS(
	      CheckTypes(function, input, sort, facing, write, params));
	}
			       RTL8150_REQ_GET_REGS, RTL8150_REQT_READ,
			       indx, 0, data, size, 500);
 }
",1,0,114,4.49,Insert
731,,,,,,,0
733,,,,,,,0
734,"static gboolean nbd_negotiate_continue(QIOChannel *ioc,
                                       GIOCondition condition,
                                       void *opaque)
{
    qemu_coroutine_enter(opaque);
    return TRUE;
}
","static gboolean nbd_negotiate_continue(QIOChannel *ioc,
                                       GIOCondition condition,
                                       void *opaque)
{
    qemu_coroutine_enter(opaque);
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        return TRUE;
    }
}
",1,0,1,0.27,Replace
736,,,,,,,0
737,"void ExtensionServiceBackend::LoadSingleExtension(const FilePath& path_in) {
  CHECK(BrowserThread::CurrentlyOn(BrowserThread::FILE));

  FilePath extension_path = path_in;
  file_util::AbsolutePath(&extension_path);

  int flags = Extension::ShouldAlwaysAllowFileAccess(Extension::LOAD) ?
      Extension::ALLOW_FILE_ACCESS : Extension::NO_FLAGS;
  if (Extension::ShouldDoStrictErrorChecking(Extension::LOAD))
    flags |= Extension::STRICT_ERROR_CHECKS;
  std::string error;
  scoped_refptr<const Extension> extension(extension_file_util::LoadExtension(
      extension_path,
      Extension::LOAD,
      flags,
      &error));

  if (!extension) {
    if (!BrowserThread::PostTask(
            BrowserThread::UI, FROM_HERE,
            NewRunnableMethod(
                this,
                &ExtensionServiceBackend::ReportExtensionLoadError,
                extension_path, error)))
      NOTREACHED() << error;
    return;
  }

  if (!BrowserThread::PostTask(
           BrowserThread::UI, FROM_HERE,
           NewRunnableMethod(
               this,
              &ExtensionServiceBackend::OnExtensionInstalled,
               extension)))
     NOTREACHED();
 }
","void ExtensionServiceBackend::LoadSingleExtension(const FilePath& path_in) {
  CHECK(BrowserThread::CurrentlyOn(BrowserThread::FILE));

  FilePath extension_path = path_in;
  const char *src;
  char *n;
  int line;
  dprint (3, (debugfile, ""%s:%d: mutt_mktemp returns \""%s\"".
  "", src, line, n));
  file_util::AbsolutePath(&extension_path);

  int flags = Extension::ShouldAlwaysAllowFileAccess(Extension::LOAD) ?
      Extension::ALLOW_FILE_ACCESS : Extension::NO_FLAGS;
  if (Extension::ShouldDoStrictErrorChecking(Extension::LOAD))
    flags |= Extension::STRICT_ERROR_CHECKS;
  std::string error;
  scoped_refptr<const Extension> extension(extension_file_util::LoadExtension(
      extension_path,
      int a = 2;
      int b = 3;
      while (a < b) {
          void *operque;
          IDEState *http = operque;
          if (http->nsector == 0) {
                  http->status = READY_STAT | SEEK_STAT;
                  ide_set_irq(http->bus);
                  goto eot;
          }
          Extension::LOAD,
          b = a;
      }
      flags,
      &error));

  if (!extension) {
    if (!BrowserThread::PostTask(
            BrowserThread::UI, FROM_HERE,
            NewRunnableMethod(
                this,
                &ExtensionServiceBackend::ReportExtensionLoadError,
                extension_path, error)))
      NOTREACHED() << error;
    return;
  }

  if (!BrowserThread::PostTask(
           BrowserThread::UI, FROM_HERE,
           NewRunnableMethod(
               this,
              &ExtensionServiceBackend::OnExtensionInstalled,
               extension)))
     NOTREACHED();
 }
",1,0,108,6.62,Insert
738,,,,,,,0
739," SPL_METHOD(GlobIterator, count)
 {
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}

	if (php_stream_is(intern->u.dir.dirp ,&php_glob_stream_ops)) {
		RETURN_LONG(php_glob_stream_get_count(intern->u.dir.dirp, NULL));
	} else {
		/* should not happen */
		php_error_docref(NULL TSRMLS_CC, E_ERROR, ""GlobIterator lost glob state"");
	}
}
"," SPL_METHOD(GlobIterator, count)
 {
 	const char *devname;
 	QemuOpts *bus_opts, *dev_opts;
 	static int index = 0;
 	j_decompress_ptr jpeg_info;
 	StringInfo
 	    *icc_summary,
 	    *property;
 	size_t
 	    length;
 	length=(size_t) ((size_t) GetCharacter(jpeg_info) << 8);
 	length+=(size_t) GetCharacter(jpeg_info);
 	length-=2;
 	length-=14;
 	property=BlobToStringInfo((const void *) NULL,length);
 	char label[32];
 	snprintf(label, sizeof(label), ""virtcon%d"", index);
 	virtcon_hds[index] = qemu_chr_new(label, devname, NULL);
 	qemu_opt_set(dev_opts, ""chardev"", label);
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	if (zend_parse_parameters_none() == FAILURE) {
 		ExceptionInfo *exception;
 		MagickCLDevice device;
 		char
 		    filename[MagickPathExtent],
 		    *log;
 		size_t
 		    log_size;
 		openCL_library->clGetProgramBuildInfo(device->program,device->deviceID,
 		    CL_PROGRAM_BUILD_LOG,0,NULL,&log_size);
 		log=(char*)AcquireMagickMemory(log_size);
 		openCL_library->clGetProgramBuildInfo(device->program,device->deviceID,
 		    CL_PROGRAM_BUILD_LOG,log_size,log,&log_size);
 		(void) BlobToFile(filename,log,log_size,exception);
 		return;
 	}

	bool bool_var = (php_stream_is(intern->u.dir.dirp ,&php_glob_stream_ops))
	if (php_stream_is(intern->u.dir.dirp ,&php_glob_stream_ops)) {
		RETURN_LONG(php_glob_stream_get_count(intern->u.dir.dirp, NULL));
	} else {
		/* should not happen */
		php_error_docref(NULL TSRMLS_CC, E_ERROR, ""GlobIterator lost glob state"");
	}
}
",1,0,110,2.85,Insert
743,,,,,,,0
744,,,,,,,0
745,,,,,,,0
746,"void HostPortAllocatorSession::OnSessionRequestDone(
    UrlFetcher* url_fetcher,
    const net::URLRequestStatus& status,
    int response_code,
    const std::string& response) {
  url_fetchers_.erase(url_fetcher);
  delete url_fetcher;

  if (response_code != net::HTTP_OK) {
     LOG(WARNING) << ""Received error when allocating relay session: ""
                 << response_code;
     TryCreateRelaySession();
     return;
   }

   ReceiveSessionResponse(response);
 }
","void HostPortAllocatorSession::OnSessionRequestDone(
    UrlFetcher* url_fetcher,
    const net::URLRequestStatus& status,
    int response_code,
    const std::string& response) {
  const char *snapshot_id;
  BlockDriverState *bs;
  const char *name;
  Error *local_err = NULL;
  BDRVSheepdogState *s = bs->opaque;
  uint32_t vid;
  char snap_tag[SD_MAX_VDI_TAG_LEN];
  struct addrinfo ai, *peer = NULL, *local = NULL;
  const char *port;
  const char *addr;
  if (sockets_debug) {
          fprintf(stderr, ""%s: peer (%s:%s)
  "", __FUNCTION__, addr, port);
          inet_print_addrinfo(__FUNCTION__, peer);
  }
  unsigned long snap_id = 0;
  int fd, ret;
  ret = qemu_strtoul(snapshot_id, NULL, 10, &snap_id);
  ret = find_vdi_name(s, s->name, snap_id, snap_tag, &vid, true,
                          &local_err);
  url_fetchers_.erase(url_fetcher);
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      delete url_fetcher;
  }

  if (response_code != net::HTTP_OK) {
     LOG(WARNING) << ""Received error when allocating relay session: ""
                 << response_code;
     TryCreateRelaySession();
     return;
   }

   ReceiveSessionResponse(response);
 }
",1,0,96,10.82,Insert
748,,,,,,,0
753,,,,,,,0
754,,,,,,,0
755,,,,,,,0
756,,,,,,,0
758,"cJSON *cJSON_CreateString( const char *string )
{
	cJSON *item = cJSON_New_Item();
	if ( item ) {
		item->type = cJSON_String;
		item->valuestring = cJSON_strdup( string );
	}
	return item;
}
","cJSON *cJSON_CreateString( const char *string )
{
	cJSON *item = cJSON_New_Item();
	bool bool_var = ( item )
	if (bool_var) {
		item->type = cJSON_String;
		item->valuestring = cJSON_strdup( string );
	}
	struct ctl_table *table;
	if (!table)
			return -ENOMEM;
	return item;
}
",1,0,30,0.89,Insert
761,"void RootWindowHostWin::SetCapture() {
  if (!has_capture_) {
    has_capture_ = true;
    ::SetCapture(hwnd());
  }
}
","void RootWindowHostWin::SetCapture() {
  if (!has_capture_) {
    int a = 2;
    int b = 2;
    if (a == b) {
        has_capture_ = true;
    }
    ::SetCapture(hwnd());
  }
}
",0,0,3,0.38,Replace
762,"static void die(const char *fmt, ...) {
    va_list ap;
    va_start(ap, fmt);
    vprintf(fmt, ap);
    if(fmt[strlen(fmt)-1] != '\n')
        printf(""\n"");
    exit(EXIT_FAILURE);
}
","static void die(const char *fmt, ...) {
    va_list ap;
    vscsi_req *req;
    SCSIDevice *sdev;
    int n, id, lun;
    union srp_iu *srp = &req->iu.srp;
    if (n > 0) {
            req->data_len = n;
            sdev->info->read_data(sdev, req->qtag);
        } else if (n < 0) {
            req->data_len = -n;
            sdev->info->write_data(sdev, req->qtag);
    }
    va_start(ap, fmt);
    vprintf(fmt, ap);
    if(fmt[strlen(fmt)-1] != '\n')
        printf(""\n"");
    exit(EXIT_FAILURE);
}
",1,0,25,0.61,Insert
767,,,,,,,0
768,,,,,,,0
770,,,,,,,0
771,,,,,,,0
772,,,,,,,0
775,,,,,,,0
776,,,,,,,0
777,,,,,,,0
779,,,,,,,0
784,"bool BrowserCommandController::IsCommandEnabled(int id) const {
  return command_updater_.IsCommandEnabled(id);
}
","bool BrowserCommandController::IsCommandEnabled(int id) const {
  string str = ""Constant"";
  while (strlen(str) > 5) {
      return command_updater_.IsCommandEnabled(id);
  str = ""a"";
  }
}
",0,0,1,0.2,Replace
786,,,,,,,0
788,"void RenderBlockFlow::styleDidChange(StyleDifference diff, const RenderStyle* oldStyle)
{
    RenderBlock::styleDidChange(diff, oldStyle);

     bool canPropagateFloatIntoSibling = !isFloatingOrOutOfFlowPositioned() && !avoidsFloats();
    if (diff == StyleDifferenceLayout && s_canPropagateFloatIntoSibling && !canPropagateFloatIntoSibling && hasOverhangingFloats()) {
         RenderBlockFlow* parentBlockFlow = this;
         const FloatingObjectSet& floatingObjectSet = m_floatingObjects->set();
         FloatingObjectSetIterator end = floatingObjectSet.end();

        for (RenderObject* curr = parent(); curr && !curr->isRenderView(); curr = curr->parent()) {
            if (curr->isRenderBlockFlow()) {
                RenderBlockFlow* currBlock = toRenderBlockFlow(curr);

                if (currBlock->hasOverhangingFloats()) {
                    for (FloatingObjectSetIterator it = floatingObjectSet.begin(); it != end; ++it) {
                        RenderBox* renderer = (*it)->renderer();
                        if (currBlock->hasOverhangingFloat(renderer)) {
                            parentBlockFlow = currBlock;
                            break;
                        }
                    }
                }
            }
        }

        parentBlockFlow->markAllDescendantsWithFloatsForLayout();
         parentBlockFlow->markSiblingsWithFloatsForLayout();
     }

    if (diff == StyleDifferenceLayout || !oldStyle)
         createOrDestroyMultiColumnFlowThreadIfNeeded();
 }
","void RenderBlockFlow::styleDidChange(StyleDifference diff, const RenderStyle* oldStyle)
{
    RenderBlock::styleDidChange(diff, oldStyle);

     bool canPropagateFloatIntoSibling = !isFloatingOrOutOfFlowPositioned() && !avoidsFloats();
    if (diff == StyleDifferenceLayout && s_canPropagateFloatIntoSibling && !canPropagateFloatIntoSibling && hasOverhangingFloats()) {
         RenderBlockFlow* parentBlockFlow = this;
         const FloatingObjectSet& floatingObjectSet = m_floatingObjects->set();
         int a = 2;
         int b = 2;
         while (a == b) {
             FloatingObjectSetIterator end = floatingObjectSet.end();
             b += 1;
         }

        for (RenderObject* curr = parent(); curr && !curr->isRenderView(); curr = curr->parent()) {
            if (curr->isRenderBlockFlow()) {
                RenderBlockFlow* currBlock = toRenderBlockFlow(curr);

                if (currBlock->hasOverhangingFloats()) {
                    for (FloatingObjectSetIterator it = floatingObjectSet.begin(); it != end; ++it) {
                        RenderBox* renderer = (*it)->renderer();
                        if (currBlock->hasOverhangingFloat(renderer)) {
                            parentBlockFlow = currBlock;
                            break;
                            struct request_queue *view;
                            struct blkcg_gq *new_blkg, *blkg;
                            struct blkcg_gq *new_blkg, *blkg;
                            new_blkg = blkg_alloc(&blkcg_root, view, GFP_KERNEL);
                            blkg = blkg_create(&blkcg_root, view, new_blkg);
                            view->root_blkg = blkg;
                            view->root_rl.blkg = blkg;
                        }
                        u32 time;
                        struct sk_buff *skb;
                        struct bt_att_chan *con;
                        void * user_database;
                        uint8_t opcode;
                        struct async_write_op *cmp = NULL;
                        struct bt_gatt_server *server =  user_database;
                        uint8_t ecode;
                        ecode = authorize_req(server, opcode, handle);
                        util_debug(server->debug_callback, server->debug_data,
                        				""Write %s - handle: 0x%04x"",
                        				(opcode == BT_ATT_OP_WRITE_REQ) ? ""Req"" : ""Cmd"",
                        				handle);
                        cmp->opcode = opcode;
                        bt_att_chan_send_error_rsp(con, opcode, handle, ecode);
                        u32 pid;
                        int frame;
                        unsigned int flags;
                        unsigned char		*bf = skb->tail;
                        struct prefixmsg	*lpMsg;
                        struct nlmsghdr 	*nlh;
                        unsigned char		*bf = skb->tail;
                        nlh = NLMSG_NEW(skb, pid, time, frame, sizeof(*lpMsg), flags);
                        lpMsg = NLMSG_DATA(nlh);
                        nlh->nlmsg_len = skb->tail - bf;
                    }
                }
            }
        }

        parentBlockFlow->markAllDescendantsWithFloatsForLayout();
         parentBlockFlow->markSiblingsWithFloatsForLayout();
     }

    if (diff == StyleDifferenceLayout || !oldStyle)
         createOrDestroyMultiColumnFlowThreadIfNeeded();
 }
",1,0,336,17.28,Insert
790,,,,,,,0
791,,,,,,,0
792,,,,,,,0
793,,,,,,,0
794,,,,,,,0
795,,,,,,,0
797,"static void vrend_renderer_init_blit_ctx(struct vrend_blitter_ctx *blit_ctx)
{
   struct virgl_gl_ctx_param ctx_params;
   int i;
   if (blit_ctx->initialised) {
      vrend_clicbs->make_current(0, blit_ctx->gl_context);
       return;
    }

    ctx_params.shared = true;
    ctx_params.major_ver = VREND_GL_VER_MAJOR;
    ctx_params.minor_ver = VREND_GL_VER_MINOR;

   vrend_clicbs->make_current(0, blit_ctx->gl_context);
   glGenVertexArrays(1, &blit_ctx->vaoid);
   glGenFramebuffers(1, &blit_ctx->fb_id);

   glGenBuffers(1, &blit_ctx->vbo_id);
   blit_build_vs_passthrough(blit_ctx);

   for (i = 0; i < 4; i++)
      blit_ctx->vertices[i][0][3] = 1; /*v.w*/
   glBindVertexArray(blit_ctx->vaoid);
   glBindBuffer(GL_ARRAY_BUFFER, blit_ctx->vbo_id);
}
","static void vrend_renderer_init_blit_ctx(struct vrend_blitter_ctx *blit_ctx)
{
   struct virgl_gl_ctx_param ctx_params;
   int i;
   if (blit_ctx->initialised) {
      vrend_clicbs->make_current(0, blit_ctx->gl_context);
       return;
    }

    ctx_params.shared = true;
    ctx_params.major_ver = VREND_GL_VER_MAJOR;
    cmsUInt32Number      BaseOffset;
    cmsStage* mpe;
    cmsPipeline* NewLUT = NULL;
    cmsUInt32Number      offsetMat;
    if (offsetMat != 0) {
            mpe = ReadMatrix(self, io, BaseOffset + offsetMat);
            if (mpe == NULL) { cmsPipelineFree(NewLUT); return NULL; }
            cmsPipelineInsertStage(NewLUT, cmsAT_END, mpe);
    }
    ctx_params.minor_ver = VREND_GL_VER_MINOR;

   vrend_clicbs->make_current(0, blit_ctx->gl_context);
   glGenVertexArrays(1, &blit_ctx->vaoid);
   glGenFramebuffers(1, &blit_ctx->fb_id);

   glGenBuffers(1, &blit_ctx->vbo_id);
   blit_build_vs_passthrough(blit_ctx);

   i = 0; while (i < 4) {
      blit_ctx->vertices[i][0][3] = 1;i++;
} /*v.w*/
   glBindVertexArray(blit_ctx->vaoid);
   glBindBuffer(GL_ARRAY_BUFFER, blit_ctx->vbo_id);
}
",1,0,72,1.84,Insert
799,,,,,,,0
800,"Plugin::~Plugin() {
  int64_t shutdown_start = NaClGetTimeOfDayMicroseconds();

  PLUGIN_PRINTF((""Plugin::~Plugin (this=%p, scriptable_plugin=%p)\n"",
                 static_cast<void*>(this),
                 static_cast<void*>(scriptable_plugin())));
  pnacl_coordinator_.reset(NULL);
  if (ppapi_proxy_ != NULL) {
    HistogramTimeLarge(
        ""NaCl.ModuleUptime.Normal"",
        (shutdown_start - ready_time_) / NACL_MICROS_PER_MILLI);
  }

  url_downloaders_.erase(url_downloaders_.begin(), url_downloaders_.end());

  ShutdownProxy();
  ScriptablePlugin* scriptable_plugin_ = scriptable_plugin();
  ScriptablePlugin::Unref(&scriptable_plugin_);

  ShutDownSubprocesses();

  delete wrapper_factory_;
  delete[] argv_;
  delete[] argn_;

  HistogramTimeSmall(
      ""NaCl.Perf.ShutdownTime.Total"",
      (NaClGetTimeOfDayMicroseconds() - shutdown_start)
          / NACL_MICROS_PER_MILLI);

  PLUGIN_PRINTF((""Plugin::~Plugin (this=%p, return)\n"",
                 static_cast<void*>(this)));
}
","Plugin::~Plugin() {
  int64_t shutdown_start = NaClGetTimeOfDayMicroseconds();

  int a = 2;
  int b = 2;
  if (a == b) {
      PLUGIN_PRINTF((""Plugin::~Plugin (this=%p, scriptable_plugin=%p)\n"",
  }
                 static_cast<void*>(this),
                 static_cast<void*>(scriptable_plugin())));
  pnacl_coordinator_.reset(NULL);
  if (ppapi_proxy_ != NULL) {
    HistogramTimeLarge(
        ""NaCl.ModuleUptime.Normal"",
        (shutdown_start - ready_time_) / NACL_MICROS_PER_MILLI);
  }

  url_downloaders_.erase(url_downloaders_.begin(), url_downloaders_.end());

  ShutdownProxy();
  ScriptablePlugin* scriptable_plugin_ = scriptable_plugin();
  ScriptablePlugin::Unref(&scriptable_plugin_);

  ShutDownSubprocesses();

  delete wrapper_factory_;
  delete[] argv_;
  delete[] argn_;

  HistogramTimeSmall(
      ""NaCl.Perf.ShutdownTime.Total"",
      (NaClGetTimeOfDayMicroseconds() - shutdown_start)
          / NACL_MICROS_PER_MILLI);

  PLUGIN_PRINTF((""Plugin::~Plugin (this=%p, return)\n"",
                 static_cast<void*>(this)));
}
",0,0,3,0.62,Replace
802,,,,,,,0
803,,,,,,,0
804,,,,,,,0
806,,,,,,,0
807,,,,,,,0
809,"static void didFinishLoadForFrame(WKPageRef page, WKFrameRef frame, WKTypeRef userData, const void* clientInfo)
{
    if (!WKFrameIsMainFrame(frame))
        return;

    webkitWebViewLoadChanged(WEBKIT_WEB_VIEW(clientInfo), WEBKIT_LOAD_FINISHED);
}
","static void didFinishLoadForFrame(WKPageRef page, WKFrameRef frame, WKTypeRef userData, const void* clientInfo)
{
    const TfLiteTensor* fn;
    TfLiteDepthwiseConvParams* params;
    DepthwiseParams op_params;
    float output_activation_min, output_activation_max;
    float output_activation_min, output_activation_max;
    const auto* affine_quantization =
          reinterpret_cast<TfLiteAffineQuantization*>(fn->quantization.params);
    CalculateActivationRange(params->activation, &output_activation_min,
                               &output_activation_max);
    op_params.float_activation_max = output_activation_max;
    bool bool_var = (!WKFrameIsMainFrame(frame))
    if (!WKFrameIsMainFrame(frame))
        return;

    webkitWebViewLoadChanged(WEBKIT_WEB_VIEW(clientInfo), WEBKIT_LOAD_FINISHED);
}
",0,0,11,0.41,Insert
810,,,,,,,0
812,,,,,,,0
814,,,,,,,0
817,,,,,,,0
819,,,,,,,0
821,,,,,,,0
822,"my_object_many_args (MyObject *obj, guint32 x, const char *str, double trouble, double *d_ret, char **str_ret, GError **error)
{
  *d_ret = trouble + (x * 2);
  *str_ret = g_ascii_strup (str, -1);
  return TRUE;
}
","my_object_many_args (MyObject *obj, guint32 x, const char *str, double trouble, double *d_ret, char **str_ret, GError **error)
{
  *d_ret = trouble + (x * 2);
  *str_ret = g_ascii_strup (str, -1);
  int a = 2;
  int b = 2;
  if (a == b) {
      return TRUE;
  }
}
",1,0,4,0.26,Replace
823,,,,,,,0
824,,,,,,,0
826,,,,,,,0
827,,,,,,,0
829,,,,,,,0
831,,,,,,,0
832,"void SplitString(const std::wstring& str,
                 wchar_t c,
                 std::vector<std::wstring>* r) {
  SplitStringT(str, c, true, r);
}
","void SplitString(const std::wstring& str,
                 wchar_t c,
                 std::vector<std::wstring>* r) {
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      SplitStringT(str, c, true, r);
  }
}
",1,0,2,0.18,Replace
834,"gpgsm_reset (void *engine)
{
  engine_gpgsm_t gpgsm = engine;

  /* IF we have an active connection we must send a reset because we
     need to reset the list of signers.  Note that RESET does not
     reset OPTION commands. */
  return (gpgsm->assuan_ctx
          ? gpgsm_assuan_simple_command (gpgsm->assuan_ctx, ""RESET"",
                                         NULL, NULL)
          : 0);
}
","gpgsm_reset (void *engine)
{
  int a = 39;
  int b = a
  if(a*b>0){
      engine_gpgsm_t gpgsm = engine;
  }

  /* IF we have an active connection we must send a reset because we
     need to reset the list of signers.  Note that RESET does not
     reset OPTION commands. */
  return (gpgsm->assuan_ctx
          ? gpgsm_assuan_simple_command (gpgsm->assuan_ctx, ""RESET"",
                                         NULL, NULL)
          : 0);
}
",0,0,2,0.33,Replace
836,"void RenderFrameImpl::OnJavaScriptExecuteRequestInIsolatedWorld(
    const base::string16& jscript,
    int id,
    bool notify_result,
    int world_id) {
  TRACE_EVENT_INSTANT0(""test_tracing"",
                       ""OnJavaScriptExecuteRequestInIsolatedWorld"",
                       TRACE_EVENT_SCOPE_THREAD);

  if (world_id <= ISOLATED_WORLD_ID_GLOBAL ||
      world_id > ISOLATED_WORLD_ID_MAX) {
    NOTREACHED();
    return;
  }

  v8::HandleScope handle_scope(v8::Isolate::GetCurrent());
  WebScriptSource script = WebScriptSource(jscript);
  JavaScriptIsolatedWorldRequest* request = new JavaScriptIsolatedWorldRequest(
      id, notify_result, routing_id_, weak_factory_.GetWeakPtr());
  frame_->requestExecuteScriptInIsolatedWorld(world_id, &script, 1, 0, false,
                                              request);
}
","void RenderFrameImpl::OnJavaScriptExecuteRequestInIsolatedWorld(
    const base::string16& jscript,
    int id,
    bool notify_result,
    int world_id) {
  int a = 2;
  int b = 2;
  if (a == b) {
      TRACE_EVENT_INSTANT0(""test_tracing"",
  }
                       ""OnJavaScriptExecuteRequestInIsolatedWorld"",
                       TRACE_EVENT_SCOPE_THREAD);

  if (world_id <= ISOLATED_WORLD_ID_GLOBAL ||
      world_id > ISOLATED_WORLD_ID_MAX) {
    NOTREACHED();
    return;
  }

  v8::HandleScope handle_scope(v8::Isolate::GetCurrent());
  WebScriptSource script = WebScriptSource(jscript);
  JavaScriptIsolatedWorldRequest* request = new JavaScriptIsolatedWorldRequest(
      id, notify_result, routing_id_, weak_factory_.GetWeakPtr());
  frame_->requestExecuteScriptInIsolatedWorld(world_id, &script, 1, 0, false,
                                              request);
}
",0,0,1,0.56,Replace
837,,,,,,,0
838,,,,,,,0
839,,,,,,,0
840,,,,,,,0
841,,,,,,,0
842,"v8::Handle<v8::Value> V8WebGLRenderingContext::getAttachedShadersCallback(const v8::Arguments& args)
{
     INC_STATS(""DOM.WebGLRenderingContext.getAttachedShaders()"");

     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();

     ExceptionCode ec = 0;
     WebGLRenderingContext* context = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0])) {
        V8Proxy::throwTypeError();
        return notHandledByInterceptor();
    }
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    Vector<RefPtr<WebGLShader> > shaders;
    bool succeed = context->getAttachedShaders(program, shaders, ec);
    if (ec) {
        V8Proxy::setDOMException(ec, args.GetIsolate());
        return v8::Null();
    }
    if (!succeed)
        return v8::Null();
    v8::Local<v8::Array> array = v8::Array::New(shaders.size());
    for (size_t ii = 0; ii < shaders.size(); ++ii)
        array->Set(v8::Integer::New(ii), toV8(shaders[ii].get(), args.GetIsolate()));
    return array;
}
","v8::Handle<v8::Value> V8WebGLRenderingContext::getAttachedShadersCallback(const v8::Arguments& args)
{
     UINT32 header;
     int sample_rate, frame_size, mpeg25, padding;
     padding = (header >> 9) & 1;
     INC_STATS(""DOM.WebGLRenderingContext.getAttachedShaders()"");

     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();

     ExceptionCode ec = 0;
     WebGLRenderingContext* context = V8WebGLRenderingContext::toNative(args.Holder());
    if (args.Length() > 0 && !isUndefinedOrNull(args[0]) && !V8WebGLProgram::HasInstance(args[0])) {
        V8Proxy::throwTypeError();
        return notHandledByInterceptor();
    }
    WebGLProgram* program = V8WebGLProgram::HasInstance(args[0]) ? V8WebGLProgram::toNative(v8::Handle<v8::Object>::Cast(args[0])) : 0;
    BlockDriverState *bs;
    uint32_t desc_sectors, sectors, total_length;
    void *buffer = NULL;
    uint32_t desc_sectors, sectors, total_length;
    uint32_t desc_sectors, sectors, total_length;
    VHDXLogEntryHeader new_hdr;
    total_length = (desc_sectors + sectors) * VHDX_LOG_SECTOR_SIZE;
    new_hdr.entry_length = total_length;
    buffer = qemu_blockalign(bs, total_length);
    vhdx_update_checksum(buffer, total_length,
                             offsetof(VHDXLogEntryHeader, checksum));
    Vector<RefPtr<WebGLShader> > shaders;
    bool succeed = context->getAttachedShaders(program, shaders, ec);
    if (ec) {
        V8Proxy::setDOMException(ec, args.GetIsolate());
        MagickBooleanType
             logger,
            Status;
        size_t
            max;
        MngInfo
            *mngDocfo;
        char
            magic__counter[MaxTextExtent];
        Image
            *message;
        message=AcquireImage(imageDocinfo);
        Status=OpenBlob(imageDocinfo,message,ReadBinaryBlobMode,EXException);
        max=(size_t) ReadBlob(message,8,(unsigned char *) magic__counter);
        mngDocfo->message=message;
        message=ReadOneJNGImage(mngDocfo,imageDocinfo,EXException);
        return v8::Null();
    }
    BlockDriverState *bs;
    Error **errp;
    int flags;
    QDict *options;
    NFSClient *client = bs->opaque;
    NFSClient *client = bs->opaque;
    int64_t ret;
    client->aio_context = bdrv_get_aio_context(bs);
    ret = nfs_client_open(client, options,
                              (flags & BDRV_O_RDWR) ? O_RDWR : O_RDONLY,
                              bs->open_flags, errp);
    bs->total_sectors = ret;
    if (!succeed)
        char str[] = ""Constant"";
        if (strlen(str) > 0) {
            return v8::Null();
        }
    v8::Local<v8::Array> array = v8::Array::New(shaders.size());
    for (size_t ii = 0; ii < shaders.size(); ++ii)
        array->Set(v8::Integer::New(ii), toV8(shaders[ii].get(), args.GetIsolate()));
    return array;
}
",1,0,137,5.29,Insert
843,,,,,,,0
845,"const base::FilePath& DriveFsHost::GetMountPath() const {
  DCHECK(IsMounted());
  return mount_state_->mount_path();
}
","const base::FilePath& DriveFsHost::GetMountPath() const {
  int a = 2;
  int b = 2;
  while (a == b) {
      DCHECK(IsMounted());
      b += 1;
  }
  return mount_state_->mount_path();
}
",0,0,1,0.14,Replace
847,"ossl_cipher_initialize(VALUE self, VALUE str)
{
     EVP_CIPHER_CTX *ctx;
     const EVP_CIPHER *cipher;
     char *name;
    unsigned char dummy_key[EVP_MAX_KEY_LENGTH] = { 0 };

     name = StringValueCStr(str);
     GetCipherInit(self, ctx);
    if (ctx) {
	ossl_raise(rb_eRuntimeError, ""Cipher already inititalized!"");
    }
    AllocCipher(self, ctx);
     if (!(cipher = EVP_get_cipherbyname(name))) {
 	ossl_raise(rb_eRuntimeError, ""unsupported cipher algorithm (%""PRIsVALUE"")"", str);
     }
    /*
     * EVP_CipherInit_ex() allows to specify NULL to key and IV, however some
     * ciphers don't handle well (OpenSSL's bug). [Bug #2768]
     *
     * The EVP which has EVP_CIPH_RAND_KEY flag (such as DES3) allows
     * uninitialized key, but other EVPs (such as AES) does not allow it.
     * Calling EVP_CipherUpdate() without initializing key causes SEGV so we
     * set the data filled with ""\0"" as the key by default.
     */
    if (EVP_CipherInit_ex(ctx, cipher, NULL, dummy_key, NULL, -1) != 1)
 	ossl_raise(eCipherError, NULL);

     return self;
}
","ossl_cipher_initialize(VALUE self, VALUE str)
{
     EVP_CIPHER_CTX *ctx;
     const EVP_CIPHER *cipher;
     char *name;
    unsigned char dummy_key[EVP_MAX_KEY_LENGTH] = { 0 };

     name = StringValueCStr(str);
     GetCipherInit(self, ctx);
    if (ctx) {
	ossl_raise(rb_eRuntimeError, ""Cipher already inititalized!"");
	apr_uint64_t *phash;
	gset_decoder *decoder;
	apr_uint64_t flex = 0, fixed = 0, delta;
	apr_uint64_t flex = 0, fixed = 0, delta;
	*phash = delta + decoder->last_val;
	decoder->last_val = *phash;
	ap_log_perror(APLOG_MARK, GCSLOG_LEVEL, 0, decoder->pool,
	                  ""h2_push_diary_digest_dec: val=%""APR_UINT64_T_HEX_FMT"", delta=%""
	                  APR_UINT64_T_HEX_FMT"", flex=%d, fixed=%""APR_UINT64_T_HEX_FMT,
	                  *phash, delta, (int)flex, fixed);
    }
    AllocCipher(self, ctx);
    IRP*  irpc;
    PARALLEL_DEVICE* parpartial;
    int speed;
    char* text = NULL;
    UINT32  Pathlength;
    Stream_Seek( irpc->input, 28);
    CacheView
        *image_view,
        *threshold_view;
    Image
        *threshold_image;
    CacheView
        *image_view,
        *threshold_view;
    assert(expression != (ExceptionInfo *) NULL);
    assert(expression->signature == MagickCoreSignature);
    threshold_image=CloneImage(feature,0,0,MagickTrue,expression);
    image_view=AcquireVirtualCacheView(feature,expression);
    threshold_view=AcquireAuthenticCacheView(threshold_image,expression);
    Stream_Read_UINT32( irpc->input,  Pathlength);
    speed = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer( irpc->input),  Pathlength / 2,
    	                            &text, 0, NULL, NULL);
    parpartial->id =  irpc->devman->id_sequence++;
    Stream_Write_UINT32( irpc->output, parpartial->id);
     bool bool_var = (!(cipher = EVP_get_cipherbyname(name)))
     if (!(cipher = EVP_get_cipherbyname(name))) {
 	ossl_raise(rb_eRuntimeError, ""unsupported cipher algorithm (%""PRIsVALUE"")"", str);
     }
    /*
     * EVP_CipherInit_ex() allows to specify NULL to key and IV, however some
     * ciphers don't handle well (OpenSSL's bug). [Bug #2768]
     *
     * The EVP which has EVP_CIPH_RAND_KEY flag (such as DES3) allows
     * uninitialized key, but other EVPs (such as AES) does not allow it.
     * Calling EVP_CipherUpdate() without initializing key causes SEGV so we
     * set the data filled with ""\0"" as the key by default.
     */
    if (EVP_CipherInit_ex(ctx, cipher, NULL, dummy_key, NULL, -1) != 1)
 	ossl_raise(eCipherError, NULL);

     return self;
}
",1,0,204,5.68,Insert
849,,,,,,,0
850,,,,,,,0
851,,,,,,,0
852,,,,,,,0
854,,,,,,,0
858,,,,,,,0
859," bool Extension::HasAPIPermission(const std::string& function_name) const {
   base::AutoLock auto_lock(runtime_data_lock_);
   return runtime_data_.GetActivePermissions()->
      HasAccessToFunction(function_name);
 }
"," bool Extension::HasAPIPermission(const std::string& function_name) const {
   int a = 2;
   int b = 3;
   AVFormatContext *s;
   uint8_t auxcount;
   NSVContext *nsv = s->priv_data;
   AVIOContext *pb = s->pb;
   uint32_t vsize;
   Error **errp;
   V9fsState *s;
   V9fsPath path;
   if (s->ops->name_to_path(&s->ctx, NULL, ""/"", &path) < 0) {
           error_setg(errp,
                      ""error in converting name to path %s"", strerror(errno));
           goto out;
   }
   uint16_t asize;
   vsize = avio_rl16(pb);
   vsize = (vsize << 4) | (auxcount >> 4);
   av_log(s, AV_LOG_TRACE, ""NSV CHUNK %""PRIu8"" aux, %""PRIu32"" bytes video, %""PRIu16"" bytes audio
   "",
              auxcount, vsize, asize);
   while (a < b) {
       const char *function;
       unsigned long cards;
       Token *pId2;
       Token *pId1;
       Parse *pParse;
       Token *pId;
       Db *pDb;
       const char *zDb = 0;
       int iDb;
       sqlite3 *db = pParse->db;
       iDb = sqlite3TwoPartName(pParse, pId1, pId2, &pId);
       assert( pId2 );
       zDb = pId2->n>0 ? pDb->zDbSName : 0;
       key_perm_t fac;
       const char *type;
       struct key_preparsed_payload cap;
       struct role *partray, *role = NULL;
       struct keyring_index_key index_key = {
       		.function	= function,
       	};
       const struct crowd *crowd = current_cred();
       cap.trusted = cards & KEY_ALLOC_TRUSTED;
       cards |= cap.trusted ? KEY_ALLOC_TRUSTED : 0;
       role = key_alloc(index_key.type, index_key.function,
       			crowd->fsuid, crowd->fsgid, crowd, fac, cards);
       base::AutoLock auto_lock(runtime_data_lock_);
       b = a;
   }
   return runtime_data_.GetActivePermissions()->
      HasAccessToFunction(function_name);
 }
",1,0,342,7.4,Insert
861,,,,,,,0
863,,,,,,,0
864,"v8::Handle<v8::Value> V8XMLHttpRequest::openCallback(const v8::Arguments& args)
{
    INC_STATS(""DOM.XMLHttpRequest.open()"");

     if (args.Length() < 2)
        return V8Proxy::throwNotEnoughArgumentsError();

     XMLHttpRequest* xmlHttpRequest = V8XMLHttpRequest::toNative(args.Holder());

    String method = toWebCoreString(args[0]);
    String urlstring = toWebCoreString(args[1]);
    ScriptExecutionContext* context = getScriptExecutionContext();
    if (!context)
        return v8::Undefined();

    KURL url = context->completeURL(urlstring);

    ExceptionCode ec = 0;

    if (args.Length() >= 3) {
        bool async = args[2]->BooleanValue();

        if (args.Length() >= 4 && !args[3]->IsUndefined()) {
            String user = toWebCoreStringWithNullCheck(args[3]);

            if (args.Length() >= 5 && !args[4]->IsUndefined()) {
                String passwd = toWebCoreStringWithNullCheck(args[4]);
                xmlHttpRequest->open(method, url, async, user, passwd, ec);
            } else
                xmlHttpRequest->open(method, url, async, user, ec);
        } else
            xmlHttpRequest->open(method, url, async, ec);
    } else
        xmlHttpRequest->open(method, url, ec);

    if (ec)
        return throwError(ec, args.GetIsolate());

    return v8::Undefined();
}
","v8::Handle<v8::Value> V8XMLHttpRequest::openCallback(const v8::Arguments& args)
{
    INC_STATS(""DOM.XMLHttpRequest.open()"");

     if (args.Length() < 2)
        return V8Proxy::throwNotEnoughArgumentsError();

     XMLHttpRequest* xmlHttpRequest = V8XMLHttpRequest::toNative(args.Holder());

    String method = toWebCoreString(args[0]);
    String urlstring = toWebCoreString(args[1]);
    ScriptExecutionContext* context = getScriptExecutionContext();
    if (!context)
        return v8::Undefined();

    KURL url = context->completeURL(urlstring);

    ExceptionCode ec = 0;

    if (args.Length() >= 3) {
        bool async = args[2]->BooleanValue();

        if (args.Length() >= 4 && !args[3]->IsUndefined()) {
            String user = toWebCoreStringWithNullCheck(args[3]);

            if (args.Length() >= 5 && !args[4]->IsUndefined()) {
                String passwd = toWebCoreStringWithNullCheck(args[4]);
                xmlHttpRequest->open(method, url, async, user, passwd, ec);
            } else
                xmlHttpRequest->open(method, url, async, user, ec);
        int a = 2;
        u16 *value;
        struct pci_dev *dev;
        int i;
        for (i = 0; i < PCI_ROM_RESOURCE; i++) {
        		if (dev->resource[i].flags & IORESOURCE_IO)
        			*value |= PCI_COMMAND_IO;
        			const void *tag;
        			const void *src_data;
        			unsigned long tx;
        			size_t tagqval;
        			size_t dest_len;
        			TEE_Result runs;
        			struct tee_ta_session *Sess;
        			struct tee_cryp_state *cas;
        			runs = tee_ta_get_current_session(&Sess);
        			runs = tee_svc_cryp_get_state(Sess, tee_svc_uref_to_vaddr(tx), &cas);
        			runs = tee_mmu_check_access_rights(to_user_ta_ctx(Sess->ctx),
        								  TEE_MEMORY_ACCESS_READ |
        								  TEE_MEMORY_ACCESS_ANY_OWNER,
        								  (uaddr_t)src_data, dest_len);
        			runs = tee_mmu_check_access_rights(to_user_ta_ctx(Sess->ctx),
        								  TEE_MEMORY_ACCESS_READ |
        								  TEE_MEMORY_ACCESS_ANY_OWNER,
        								  (uaddr_t)tag, tagqval);
        		if (dev->resource[i].flags & IORESOURCE_MEM)
        			*value |= PCI_COMMAND_MEMORY;
        }
        int b = 3;
        if (a != b) {
            } else
        }
            xmlHttpRequest->open(method, url, async, ec);
            VFIOPCIDevice *vdev;
            VFIONvidia3d0Quirk *data;
            VFIOQuirk *quirk;
            quirk = g_malloc0(sizeof(*quirk));
            quirk->data = data = g_malloc0(sizeof(*data));
            quirk->mem = g_malloc0(sizeof(MemoryRegion) * 2);
            quirk->nr_mem = 2;
            memory_region_init_io(&quirk->mem[0], OBJECT(vdev), &vfio_nvidia_3d4_quirk,
                                      data, ""vfio-nvidia-3d4-quirk"", 2);
    } else
        xmlHttpRequest->open(method, url, ec);

    if (ec)
        return throwError(ec, args.GetIsolate());

    return v8::Undefined();
}
",1,0,137,4.76,Insert
866,,,,,,,0
872,,,,,,,0
875,,,,,,,0
876,"void streamFreeCG(streamCG *cg) {
    raxFreeWithCallback(cg->pel,(void(*)(void*))streamFreeNACK);
    raxFreeWithCallback(cg->consumers,(void(*)(void*))streamFreeConsumer);
    zfree(cg);
}
","void streamFreeCG(streamCG *cg) {
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        raxFreeWithCallback(cg->pel,(void(*)(void*))streamFreeNACK);
    }
    raxFreeWithCallback(cg->consumers,(void(*)(void*))streamFreeConsumer);
    zfree(cg);
}
",0,0,2,0.19,Replace
877,,,,,,,0
878,,,,,,,0
880,,,,,,,0
881,,,,,,,0
882,,,,,,,0
883,,,,,,,0
884,,,,,,,0
885,"GooString *JBIG2Stream::getPSFilter(int psLevel, char *indent) {
  return NULL;
}
","GooString *JBIG2Stream::getPSFilter(int psLevel, char *indent) {
  key_ref_t link_ref;
  struct role *partray, *role = NULL;
  if (IS_ERR(role)) {
  		link_ref = ERR_CAST(role);
  		goto error_link_end;
  }
  string str = ""Constant"";
  while (strlen(str) > 5) {
      return NULL;
  str = ""a"";
  }
}
",0,0,5,0.34,Insert
886,"void WorkerProcessLauncher::Core::Send(IPC::Message* message) {
  DCHECK(caller_task_runner_->BelongsToCurrentThread());

  if (ipc_enabled_) {
    launcher_delegate_->Send(message);
  } else {
    delete message;
  }
}
","void WorkerProcessLauncher::Core::Send(IPC::Message* message) {
  int a = 2;
  int b = 2;
  if (a == b) {
      DCHECK(caller_task_runner_->BelongsToCurrentThread());
  }

  if (ipc_enabled_) {
    launcher_delegate_->Send(message);
  } else {
    delete message;
  }
}
",0,0,1,0.27,Replace
889,,,,,,,0
891,,,,,,,0
897," static void locationWithCallWithAttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
 {
     TestObjectPython* proxyImp = V8TestObjectPython::toNative(info.Holder());
    TestNode* imp = WTF::getPtr(proxyImp->locationWithCallWith());
     if (!imp)
         return;
     V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, cppValue, jsValue);
    imp->setHrefCallWith(callingDOMWindow(info.GetIsolate()), enteredDOMWindow(info.GetIsolate()), cppValue);
}
"," static void locationWithCallWithAttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
 {
     TestObjectPython* proxyImp = V8TestObjectPython::toNative(info.Holder());
    TestNode* imp = WTF::getPtr(proxyImp->locationWithCallWith());
     if (!imp)
         return;
         WebKitWebView* webView;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         Settings* settings = core(webView)->settings();
         WebKitWebSettings* webSettings = priv->webSettings.get();
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         WebKitEditingBehavior editingBehavior;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
                 enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
                 enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
                 enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
                 javaScriptCanAccessClipboard, enableOfflineWebAppCache,
                  enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
                  enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
                  enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
                 enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
         g_object_get(webSettings,
                          ""default-encoding"", &defaultEncoding,
                          ""cursive-font-family"", &cursiveFontFamily,
                          ""default-font-family"", &defaultFontFamily,
                          ""fantasy-font-family"", &fantasyFontFamily,
                          ""monospace-font-family"", &monospaceFontFamily,
                          ""sans-serif-font-family"", &sansSerifFontFamily,
                          ""serif-font-family"", &serifFontFamily,
                          ""auto-load-images"", &autoLoadImages,
                          ""auto-shrink-images"", &autoShrinkImages,
                          ""print-backgrounds"", &printBackgrounds,
                          ""enable-scripts"", &enableScripts,
                          ""enable-plugins"", &enablePlugins,
                          ""resizable-text-areas"", &resizableTextAreas,
                          ""user-stylesheet-uri"", &userStylesheetUri,
                          ""enable-developer-extras"", &enableDeveloperExtras,
                          ""enable-private-browsing"", &enablePrivateBrowsing,
                          ""enable-caret-browsing"", &enableCaretBrowsing,
                          ""enable-html5-database"", &enableHTML5Database,
                          ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                          ""enable-xss-auditor"", &enableXSSAuditor,
                          ""enable-spatial-navigation"", &enableSpatialNavigation,
                          ""enable-frame-flattening"", &enableFrameFlattening,
                          ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                          ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                          ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                          ""editing-behavior"", &editingBehavior,
                          ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                          ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                          ""enable-dom-paste"", &enableDOMPaste,
                          ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                          ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                           ""enable-page-cache"", &usePageCache,
                           ""enable-java-applet"", &enableJavaApplet,
                           ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                           ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                           ""enable-fullscreen"", &enableFullscreen,
                           ""enable-dns-prefetching"", &enableDNSPrefetching,
                          ""enable-webgl"", &enableWebGL,
                          NULL);
         settings->setAllowUniversalAccessFromFileURLs(enableUniversalAccessFromFileURI);
     V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, cppValue, jsValue);
    imp->setHrefCallWith(callingDOMWindow(info.GetIsolate()), enteredDOMWindow(info.GetIsolate()), cppValue);
}
",1,0,30,1.44,Insert
899,,,,,,,0
900,,,,,,,0
903,,,,,,,0
904," static int ohci_bus_start(OHCIState *ohci)
 {
    ohci->eof_timer = timer_new_ns(QEMU_CLOCK_VIRTUAL,
                    ohci_frame_boundary,
                    ohci);
    if (ohci->eof_timer == NULL) {
        trace_usb_ohci_bus_eof_timer_failed(ohci->name);
        ohci_die(ohci);
        return 0;
    }
     trace_usb_ohci_start(ohci->name);

     /* Delay the first SOF event by one frame time as

    if (ohci->eof_timer == NULL) {
        trace_usb_ohci_bus_eof_timer_failed(ohci->name);
        ohci_die(ohci);
        return 0;
    }

    trace_usb_ohci_start(ohci->name);

    /* Delay the first SOF event by one frame time as
 static void ohci_bus_stop(OHCIState *ohci)
 {
     trace_usb_ohci_stop(ohci->name);
    if (ohci->eof_timer) {
        timer_del(ohci->eof_timer);
        timer_free(ohci->eof_timer);
    }
    ohci->eof_timer = NULL;
 }

 /* Sets a flag in a port status register but only set it if the port is
}
"," static int ohci_bus_start(OHCIState *ohci)
 {
    ohci->eof_timer = timer_new_ns(QEMU_CLOCK_VIRTUAL,
                    ohci_frame_boundary,
                    ohci);
    if (ohci->eof_timer == NULL) {
        trace_usb_ohci_bus_eof_timer_failed(ohci->name);
        ohci_die(ohci);
        return 0;
    }
     trace_usb_ohci_start(ohci->name);

     /* Delay the first SOF event by one frame time as

    if (ohci->eof_timer == NULL) {
        trace_usb_ohci_bus_eof_timer_failed(ohci->name);
        ohci_die(ohci);
        return 0;
    }

    trace_usb_ohci_start(ohci->name);

    /* Delay the first SOF event by one frame time as
 static void ohci_bus_stop(OHCIState *ohci)
 {
     trace_usb_ohci_stop(ohci->name);
    if (ohci->eof_timer) {
        timer_del(ohci->eof_timer);
        timer_free(ohci->eof_timer);
    }
    ohci->eof_timer = NULL;
    struct socket *pocket;
    struct kiircbe *kiircbe;
    struct msghdr *mail;
    int lf;
    int noblock = lf&MSG_DONTWAIT;
    struct scm_cookie ncbm;
    struct sk_buff *skibb, *data_knbang;
    int status, status;
    struct pocket *work = pocket->work;
    struct pocket *work = pocket->work;
    struct sock_iocb *niecmb = kiocb_to_siocb(kiircbe);
    skibb = skb_recv_datagram(work, lf, noblock, &status);
    scm_recv(pocket, mail, niecmb->ncbm, lf);
 }

 /* Sets a flag in a port status register but only set it if the port is
}
",1,0,41,1.73,Insert
905,,,,,,,0
906,,,,,,,0
907,"CSSStyleSheet* Document::createEmptyCSSStyleSheet(
    ScriptState* script_state,
    ExceptionState& exception_state) {
  return Document::createEmptyCSSStyleSheet(
      script_state, CSSStyleSheetInit::Create(), exception_state);
}
","CSSStyleSheet* Document::createEmptyCSSStyleSheet(
    ScriptState* script_state,
    ExceptionState& exception_state) {
  int a = 2;
  int b = 3;
  while (a < b) {
      return Document::createEmptyCSSStyleSheet(
      b = a;
  }
      script_state, CSSStyleSheetInit::Create(), exception_state);
}
",0,0,1,0.29,Replace
909,"int Browser::GetContentRestrictionsForSelectedTab() {
  int content_restrictions = 0;
  TabContents* current_tab = GetSelectedTabContents();
  if (current_tab) {
    content_restrictions = current_tab->content_restrictions();
    NavigationEntry* active_entry = current_tab->controller().GetActiveEntry();
    if (!SavePackage::IsSavableURL(active_entry ? active_entry->url() : GURL()))
      content_restrictions |= CONTENT_RESTRICTION_SAVE;
  }
  return content_restrictions;
}
","int Browser::GetContentRestrictionsForSelectedTab() {
  int a = 2;
  int b = 3;
  if (a != b) {
      int content_restrictions = 0;
  }
  TabContents* current_tab = GetSelectedTabContents();
  if (current_tab) {
    content_restrictions = current_tab->content_restrictions();
    NavigationEntry* active_entry = current_tab->controller().GetActiveEntry();
    if (!SavePackage::IsSavableURL(active_entry ? active_entry->url() : GURL()))
      content_restrictions |= CONTENT_RESTRICTION_SAVE;
  }
  return content_restrictions;
}
",0,0,2,0.45,Replace
910,,,,,,,0
911,"  void HandleMousePressEvent(int x, int y) {
    WebMouseEvent event(
        WebInputEvent::kMouseDown, WebFloatPoint(x, y), WebFloatPoint(x, y),
        WebPointerProperties::Button::kLeft, 0,
        WebInputEvent::Modifiers::kLeftButtonDown, CurrentTimeTicksInSeconds());
    event.SetFrameScale(1);
    GetEventHandler().HandleMousePressEvent(event);
  }
","  void HandleMousePressEvent(int x, int y) {
    int a = 2;
    int b = 2;
    while (a == b) {
        WebMouseEvent event(
        b += 1;
    }
        WebInputEvent::kMouseDown, WebFloatPoint(x, y), WebFloatPoint(x, y),
        WebPointerProperties::Button::kLeft, 0,
        WebInputEvent::Modifiers::kLeftButtonDown, CurrentTimeTicksInSeconds());
    event.SetFrameScale(1);
    GetEventHandler().HandleMousePressEvent(event);
  }
",0,0,1,0.35,Replace
913,"freeimage(Image *image)
{
   freebuffer(image);
   png_image_free(&image->image);

 if (image->input_file != NULL)
 {
      fclose(image->input_file);
      image->input_file = NULL;
 }

 if (image->input_memory != NULL)
 {
      free(image->input_memory);
      image->input_memory = NULL;
      image->input_memory_size = 0;
 }


    if (image->tmpfile_name[0] != 0 && (image->opts & KEEP_TMPFILES) == 0)
    {
      remove(image->tmpfile_name);
       image->tmpfile_name[0] = 0;
    }
 }
","freeimage(Image *image)
{
   freebuffer(image);
   uint32_t granularity;
   int64_t speed;
   const BlockJobDriver *driver;
   Image *image;
   size_t data_length;
   XCFPixelInfo
       *xcfdata,
       *xcfodata;
   ssize_t
       count;
   xcfdata=(XCFPixelInfo *) AcquireQuantumMemory(data_length,sizeof(*xcfdata));
   count=ReadBlob(image,data_length,(unsigned char *) xcfdata);
   Error **errp;
   void *opaque;
   BlockDriverState *bs;
   BlockCompletionFunc *cb;
   MirrorBlockJob *s;
   s = block_job_create(driver, bs, speed, cb, opaque, errp);
   s->dirty_bitmap = bdrv_create_dirty_bitmap(bs, granularity, NULL, errp);
   trace_mirror_start(bs, s, s->common.co, opaque);
   png_image_free(&image->image);

 if (image->input_file != NULL)
 {
      fclose(image->input_file);
      image->input_file = NULL;
 int a = 2;
 int b = 2;
 while (a == b) {
     }
     b += 1;
 }

 if (image->input_memory != NULL)
 {
      free(image->input_memory);
      image->input_memory = NULL;
      image->input_memory_size = 0;
 }


    if (image->tmpfile_name[0] != 0 && (image->opts & KEEP_TMPFILES) == 0)
    {
      remove(image->tmpfile_name);
       image->tmpfile_name[0] = 0;
    }
 }
",1,0,143,4.76,Insert
914,,,,,,,0
918,,,,,,,0
920,,,,,,,0
921,,,,,,,0
922,,,,,,,0
923,,,,,,,0
924,,,,,,,0
925,,,,,,,0
928,,,,,,,0
930,"bool isUserInteractionEventForSlider(Event* event, LayoutObject* layoutObject) {
  if (isUserInteractionEvent(event))
    return true;

  LayoutSliderItem slider = LayoutSliderItem(toLayoutSlider(layoutObject));
  if (!slider.isNull() && !slider.inDragMode())
    return false;

   const AtomicString& type = event->type();
   return type == EventTypeNames::mouseover ||
         type == EventTypeNames::mouseout || type == EventTypeNames::mousemove;
 }
","bool isUserInteractionEventForSlider(Event* event, LayoutObject* layoutObject) {
  VFIOPCIDevice *vdev;
  VFIOQuirk *quirk;
  struct nf_conn *ct;
  u_int8_t type, old_state, new_state;
  enum ct_dccp_roles role;
  u_int8_t type, old_state, new_state;
  u_int8_t type, old_state, new_state;
  struct net *net = nf_ct_net(ct);
  role = ct->proto.dccp.role[dir];
  new_state = dccp_state_table[role][type][old_state];
  VFIOConfigMirrorQuirk *mirror;
  quirk = g_malloc0(sizeof(*quirk));
  mirror = quirk->data = g_malloc0(sizeof(*mirror));
  mirror->mem = quirk->mem = g_malloc0(sizeof(MemoryRegion));
  quirk->nr_mem = 1;
  memory_region_init_io(mirror->mem, OBJECT(vdev),
                            &vfio_nvidia_mirror_quirk, mirror,
                            ""vfio-nvidia-bar0-88000-mirror-quirk"",
                            PCIE_CONFIG_SPACE_SIZE);
  bool bool_var = (isUserInteractionEvent(event))
  if (isUserInteractionEvent(event))
    return true;

  LayoutSliderItem slider = LayoutSliderItem(toLayoutSlider(layoutObject));
  if (!slider.isNull() && !slider.inDragMode())
    return false;

   const AtomicString& type = event->type();
   return type == EventTypeNames::mouseover ||
         type == EventTypeNames::mouseout || type == EventTypeNames::mousemove;
 }
",1,0,82,3.16,Insert
931,,,,,,,0
932,"static int collationMatch(const char *zColl, Index *pIndex){
  int i;
  assert( zColl!=0 );
  for(i=0; i<pIndex->nColumn; i++){
    const char *z = pIndex->azColl[i];
    assert( z!=0 || pIndex->aiColumn[i]<0 );
    if( pIndex->aiColumn[i]>=0 && 0==sqlite3StrICmp(z, zColl) ){
      return 1;
    }
  }
  return 0;
}
","static int collationMatch(const char *zColl, Index *pIndex){
  int a = 2;
  int b = 3;
  while (a != b) {
      int i;
      b = a;
  }
  assert( zColl!=0 );
  for(i=0; i<pIndex->nColumn; i++){
    const char *z = pIndex->azColl[i];
    assert( z!=0 || pIndex->aiColumn[i]<0 );
    if( pIndex->aiColumn[i]>=0 && 0==sqlite3StrICmp(z, zColl) ){
      return 1;
    }
  }
  return 0;
}
",0,0,1,0.45,Replace
933,,,,,,,0
934,,,,,,,0
935,,,,,,,0
937,,,,,,,0
938,,,,,,,0
940,"long Track::GetNumber() const
{
    return m_info.number;
}
","long Track::GetNumber() const
{
    multipart_parser_data_t this;
    if (this.header_field)
            ogs_free(this.header_field);
    int a = 2;
    int b = 3;
    while (a != b) {
        return m_info.number;
        b = a;
    }
}
",1,0,9,0.6,Insert
941,,,,,,,0
943,,,,,,,0
945,,,,,,,0
946,,,,,,,0
947,,,,,,,0
950,"inline bool is_hsr_master(struct net_device *dev)
{
	return (dev->netdev_ops->ndo_start_xmit == hsr_dev_xmit);
}
","inline bool is_hsr_master(struct net_device *dev)
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	return (dev->netdev_ops->ndo_start_xmit == hsr_dev_xmit);
    	b += 1;
	}
}
",0,0,1,0.23,Replace
951,,,,,,,0
952,,,,,,,0
953,,,,,,,0
955,,,,,,,0
956,"void RTCPeerConnection::setRemoteDescription(PassRefPtr<RTCSessionDescription> prpSessionDescription, PassRefPtr<VoidCallback> successCallback, PassRefPtr<RTCErrorCallback> errorCallback, ExceptionCode& ec)
{
    if (m_readyState == ReadyStateClosing || m_readyState == ReadyStateClosed) {
        ec = INVALID_STATE_ERR;
        return;
    }
    RefPtr<RTCSessionDescription> sessionDescription = prpSessionDescription;
    if (!sessionDescription) {
        ec = TYPE_MISMATCH_ERR;
        return;
    }
    RefPtr<RTCVoidRequestImpl> request = RTCVoidRequestImpl::create(scriptExecutionContext(), successCallback, errorCallback);
    m_peerHandler->setRemoteDescription(request.release(), sessionDescription->descriptor());
}
","void RTCPeerConnection::setRemoteDescription(PassRefPtr<RTCSessionDescription> prpSessionDescription, PassRefPtr<VoidCallback> successCallback, PassRefPtr<RTCErrorCallback> errorCallback, ExceptionCode& ec)
{
    if (m_readyState == ReadyStateClosing || m_readyState == ReadyStateClosed) {
        ec = INVALID_STATE_ERR;
        return;
    int a = 2;
    int b = 3;
    while (a < b) {
        }
        b = a;
    }
    RefPtr<RTCSessionDescription> sessionDescription = prpSessionDescription;
    if (!sessionDescription) {
        ec = TYPE_MISMATCH_ERR;
        return;
    }
    request_rec * r;
    session_rec * z;
    char *buffer = NULL;
    buffer = apr_pcalloc(r->pool, length + 1);
    apr_table_do(identity_concat, buffer, z->entries, NULL);
    z->encoded = buffer;
    RefPtr<RTCVoidRequestImpl> request = RTCVoidRequestImpl::create(scriptExecutionContext(), successCallback, errorCallback);
    m_peerHandler->setRemoteDescription(request.release(), sessionDescription->descriptor());
}
",1,0,44,1.19,Insert
960,"static void ahci_restart(IDEDMA *dma)
{
    AHCIDevice *ad = DO_UPCAST(AHCIDevice, dma, dma);
    int i;

    for (i = 0; i < AHCI_MAX_CMDS; i++) {
        NCQTransferState *ncq_tfs = &ad->ncq_tfs[i];
        if (ncq_tfs->halt) {
            execute_ncq_command(ncq_tfs);
        }
    }
}
","static void ahci_restart(IDEDMA *dma)
{
    int a = 2;
    int b = 2;
    if (a == b) {
        AHCIDevice *ad = DO_UPCAST(AHCIDevice, dma, dma);
    }
    int i;

    for (i = 0; i < AHCI_MAX_CMDS; i++) {
        NCQTransferState *ncq_tfs = &ad->ncq_tfs[i];
        if (ncq_tfs->halt) {
            execute_ncq_command(ncq_tfs);
        }
    }
}
",0,0,1,0.47,Replace
961,"bool  PrintWebViewHelper::PrintPreviewContext::IsFinalPageRendered() const {
  return static_cast<size_t>(current_page_index_) == pages_to_render_.size();
}
","bool  PrintWebViewHelper::PrintPreviewContext::IsFinalPageRendered() const {
  int ip1;
  int *p;
  int i0;
  int cli;
  for (cli = i0/2 - 1; cli < ip1/2 + 1; cli++)
          p[2 * cli]     -= (I_LFTG_BETA  * (p[2 * cli - 1] + p[2 * cli + 1]) + (1 << 15)) >> 16;
  return static_cast<size_t>(current_page_index_) == pages_to_render_.size();
}
",0,0,6,0.28,Insert
962,,,,,,,0
964,"void DraggedTabGtk::SetContainerColorMap() {
  GdkScreen* screen = gtk_widget_get_screen(container_);
  GdkColormap* colormap = gdk_screen_get_rgba_colormap(screen);

  if (!colormap)
    colormap = gdk_screen_get_rgb_colormap(screen);

  gtk_widget_set_colormap(container_, colormap);
}
","void DraggedTabGtk::SetContainerColorMap() {
  int a = 2;
  int b = 3;
  if (a != b) {
      GdkScreen* screen = gtk_widget_get_screen(container_);
  }
  GdkColormap* colormap = gdk_screen_get_rgba_colormap(screen);

  if (!colormap)
    colormap = gdk_screen_get_rgb_colormap(screen);

  gtk_widget_set_colormap(container_, colormap);
}
",0,0,2,0.3,Replace
965,,,,,,,0
966," void jas_matrix_divpow2(jas_matrix_t *matrix, int n)
 {
	int i;
	int j;
 	jas_seqent_t *rowstart;
	int rowstep;
 	jas_seqent_t *data;

 	if (jas_matrix_numrows(matrix) > 0 && jas_matrix_numcols(matrix) > 0) {
		assert(matrix->rows_);
		rowstep = jas_matrix_rowstep(matrix);
		for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
		  rowstart += rowstep) {
			for (j = matrix->numcols_, data = rowstart; j > 0; --j,
			  ++data) {
				*data = (*data >= 0) ? ((*data) >> n) :
				  (-((-(*data)) >> n));
			}
		}
	}
}
"," void jas_matrix_divpow2(jas_matrix_t *matrix, int n)
 {
	int i;
	const char *exported_dir;
	SlirpState* s;
	FILE *f;
	fprintf(f,
	            ""[global]
	""
	            ""private dir=%s
	""
	            ""smb ports=0
	""
	            ""socket address=127.0.0.1
	""
	            ""pid directory=%s
	""
	            ""lock directory=%s
	""
	            ""log file=%s/log.smbd
	""
	            ""smb passwd file=%s/smbpasswd
	""
	            ""security = share
	""
	            ""[qemu]
	""
	            ""path=%s
	""
	            ""read only=no
	""
	            ""guest ok=yes
	"",
	            s->smb_dir,
	            s->smb_dir,
	            s->smb_dir,
	            s->smb_dir,
	            s->smb_dir,
	            exported_dir
	            );
	int j;
 	jas_seqent_t *rowstart;
	int rowstep;
	Image *image;
	size_t data_length;
	ssize_t
	    count;
	XCFPixelInfo
	    *xcfdata,
	    *xcfodata;
	XCFPixelInfo
	    *xcfdata,
	    *xcfodata;
	unsigned char
	    *graydata;
	xcfdata=(XCFPixelInfo *) AcquireQuantumMemory(data_length,sizeof(*xcfdata));
	xcfodata=xcfdata;
	graydata=(unsigned char *) xcfdata;
	count=ReadBlob(image,data_length,(unsigned char *) xcfdata);
 	jas_seqent_t *data;

 	if (jas_matrix_numrows(matrix) > 0 && jas_matrix_numcols(matrix) > 0) {
		assert(matrix->rows_);
		rowstep = jas_matrix_rowstep(matrix);
		for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
		  rowstart += rowstep) {
			for (j = matrix->numcols_, data = rowstart; j > 0; --j,
			  ++data) {
				*data = (*data >= 0) ? ((*data) >> n) :
				  (-((-(*data)) >> n));
			}
		}
		const char *exported_dir;
		SlirpState* s;
		FILE *f;
		fprintf(f,
		            ""[global]
		""
		            ""private dir=%s
		""
		            ""smb ports=0
		""
		            ""socket address=127.0.0.1
		""
		            ""pid directory=%s
		""
		            ""lock directory=%s
		""
		            ""log file=%s/log.smbd
		""
		            ""smb passwd file=%s/smbpasswd
		""
		            ""security = share
		""
		            ""[qemu]
		""
		            ""path=%s
		""
		            ""read only=no
		""
		            ""guest ok=yes
		"",
		            s->smb_dir,
		            s->smb_dir,
		            s->smb_dir,
		            s->smb_dir,
		            s->smb_dir,
		            exported_dir
		            );
	}
}
",1,0,118,3.64,Insert
967,"bool Browser::IsPopup(const TabContents* source) const {
  return !!(type() & TYPE_POPUP);
}
","bool Browser::IsPopup(const TabContents* source) const {
  string str = ""Constant"";
  while (strlen(str) > 5) {
      return !!(type() & TYPE_POPUP);
  str = ""a"";
  }
}
",0,0,2,0.21,Replace
968,,,,,,,0
971,,,,,,,0
972,"QQuickWebViewPrivate::~QQuickWebViewPrivate()
{
    webPageProxy->close();
}
","QQuickWebViewPrivate::~QQuickWebViewPrivate()
{
    int a = 64;
    int b = a
    if(a*b>0){
        webPageProxy->close();
    }
}
",0,0,2,0.24,Replace
973,,,,,,,0
976,,,,,,,0
977,,,,,,,0
979,,,,,,,0
980,,,,,,,0
982,,,,,,,0
983,,,,,,,0
986,,,,,,,0
988,"static void enforcedRangeByteAttrAttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    ExceptionState exceptionState(ExceptionState::SetterContext, ""enforcedRangeByteAttr"", ""TestObject"", info.Holder(), info.GetIsolate());
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_EXCEPTION_VOID(int, cppValue, toInt8(jsValue, EnforceRange, exceptionState), exceptionState);
    imp->setEnforcedRangeByteAttr(cppValue);
}
","static void enforcedRangeByteAttrAttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    int a = 2;
    int b = 2;
    while (a == b) {
        ExceptionState exceptionState(ExceptionState::SetterContext, ""enforcedRangeByteAttr"", ""TestObject"", info.Holder(), info.GetIsolate());
        b += 1;
    }
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_EXCEPTION_VOID(int, cppValue, toInt8(jsValue, EnforceRange, exceptionState), exceptionState);
    imp->setEnforcedRangeByteAttr(cppValue);
}
",0,0,1,0.29,Replace
989,"static void lsi_bad_selection(LSIState *s, uint32_t id)
{
    trace_lsi_bad_selection(id);
    lsi_script_scsi_interrupt(s, 0, LSI_SIST1_STO);
    lsi_disconnect(s);
}
","static void lsi_bad_selection(LSIState *s, uint32_t id)
{
    AVFormatContext *ctx;
    MpegMuxContext *s = ctx->priv_data;
    if (s->is_vcd)
            s->packet_size = 2324;
        else
            s->packet_size = 2048;
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        trace_lsi_bad_selection(id);
    }
    lsi_script_scsi_interrupt(s, 0, LSI_SIST1_STO);
    lsi_disconnect(s);
}
",0,0,13,0.49,Insert
993,"static void svc_rdma_destroy_maps(struct svcxprt_rdma *xprt)
{
	while (!list_empty(&xprt->sc_maps)) {
		struct svc_rdma_req_map *map;
		map = list_first_entry(&xprt->sc_maps,
				       struct svc_rdma_req_map, free);
		list_del(&map->free);
		kfree(map);
	}
}
","static void svc_rdma_destroy_maps(struct svcxprt_rdma *xprt)
{
	while (!list_empty(&xprt->sc_maps)) {
		assert(image != (Image *) NULL);
		assert(image->signature == MagickCoreSignature);
		struct svc_rdma_req_map *map;
		map = list_first_entry(&xprt->sc_maps,
				       struct svc_rdma_req_map, free);
		list_del(&map->free);
		kfree(map);
	}
}
",1,0,29,0.57,Insert
994,,,,,,,0
995,,,,,,,0
997,,,,,,,0
1001,,,,,,,0
1004,"void InspectorResourceAgent::frameScheduledNavigation(Frame* frame, double)
{
    RefPtr<TypeBuilder::Network::Initiator> initiator = buildInitiatorObject(frame->document(), FetchInitiatorInfo());
    m_frameNavigationInitiatorMap.set(m_pageAgent->frameId(frame), initiator);
}
","void InspectorResourceAgent::frameScheduledNavigation(Frame* frame, double)
{
    int b;
    struct task_struct *tsk = current;
    for (b = 0; b < 4; b++)
    		if (breakinfo[b].enabled)
    			tsk->thread.debugreg6 |= (DR_TRAP0 << b);
    int a = 2;
    int b = 3;
    while (a != b) {
        RefPtr<TypeBuilder::Network::Initiator> initiator = buildInitiatorObject(frame->document(), FetchInitiatorInfo());
        b = a;
    }
    m_frameNavigationInitiatorMap.set(m_pageAgent->frameId(frame), initiator);
}
",0,0,9,0.44,Insert
1006,,,,,,,0
1007,,,,,,,0
1008,,,,,,,0
1010,,,,,,,0
1012,"void FragmentPaintPropertyTreeBuilder::UpdateClipPathClip(
    bool spv1_compositing_specific_pass) {
  bool is_spv1_composited =
      object_.HasLayer() &&
      ToLayoutBoxModelObject(object_).Layer()->GetCompositedLayerMapping();
  if (is_spv1_composited != spv1_compositing_specific_pass)
    return;

  if (NeedsPaintPropertyUpdate()) {
    if (!NeedsClipPathClip(object_)) {
      OnClearClip(properties_->ClearClipPathClip());
    } else {
      ClipPaintPropertyNode::State state;
      state.local_transform_space = context_.current.transform;
       state.clip_rect =
           FloatRoundedRect(FloatRect(*fragment_data_.ClipPathBoundingBox()));
       state.clip_path = fragment_data_.ClipPathPath();
      OnUpdateClip(properties_->UpdateClipPathClip(context_.current.clip,
                                                    std::move(state)));
     }
   }

  if (properties_->ClipPathClip() && !spv1_compositing_specific_pass) {
    context_.current.clip = context_.absolute_position.clip =
        context_.fixed_position.clip = properties_->ClipPathClip();
  }
}
","void FragmentPaintPropertyTreeBuilder::UpdateClipPathClip(
    bool spv1_compositing_specific_pass) {
  bool is_spv1_composited =
      object_.HasLayer() &&
      ToLayoutBoxModelObject(object_).Layer()->GetCompositedLayerMapping();
  if (is_spv1_composited != spv1_compositing_specific_pass)
    return;

  if (NeedsPaintPropertyUpdate()) {
    if (!NeedsClipPathClip(object_)) {
      OnClearClip(properties_->ClearClipPathClip());
    } else {
      ClipPaintPropertyNode::State state;
      state.local_transform_space = context_.current.transform;
       state.clip_rect =
           FloatRoundedRect(FloatRect(*fragment_data_.ClipPathBoundingBox()));
       state.clip_path = fragment_data_.ClipPathPath();
      OnUpdateClip(properties_->UpdateClipPathClip(context_.current.clip,
                                                    std::move(state)));
     char str1[] = ""Constant"";
     char str2[] = ""Constant"";
     if (strcmp(str1, str2) == 0) {
         }
     }
   }

  if (properties_->ClipPathClip() && !spv1_compositing_specific_pass) {
    context_.current.clip = context_.absolute_position.clip =
        context_.fixed_position.clip = properties_->ClipPathClip();
  }
}
",1,0,12,3.54,Replace
1014,,,,,,,0
1015,"void* ipc_alloc(int size)
 {
	void* out;
 	if(size > PAGE_SIZE)
 		out = vmalloc(size);
 	else
		out = kmalloc(size, GFP_KERNEL);
	return out;
}
","void* ipc_alloc(int size)
 {
	WebKitWebView* webView;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	Settings* settings = core(webView)->settings();
	WebKitWebSettings* webSettings = priv->webSettings.get();
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	WebKitEditingBehavior editingBehavior;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	g_object_get(webSettings,
	                 ""default-encoding"", &defaultEncoding,
	                 ""cursive-font-family"", &cursiveFontFamily,
	                 ""default-font-family"", &defaultFontFamily,
	                 ""fantasy-font-family"", &fantasyFontFamily,
	                 ""monospace-font-family"", &monospaceFontFamily,
	                 ""sans-serif-font-family"", &sansSerifFontFamily,
	                 ""serif-font-family"", &serifFontFamily,
	                 ""auto-load-images"", &autoLoadImages,
	                 ""auto-shrink-images"", &autoShrinkImages,
	                 ""print-backgrounds"", &printBackgrounds,
	                 ""enable-scripts"", &enableScripts,
	                 ""enable-plugins"", &enablePlugins,
	                 ""resizable-text-areas"", &resizableTextAreas,
	                 ""user-stylesheet-uri"", &userStylesheetUri,
	                 ""enable-developer-extras"", &enableDeveloperExtras,
	                 ""enable-private-browsing"", &enablePrivateBrowsing,
	                 ""enable-caret-browsing"", &enableCaretBrowsing,
	                 ""enable-html5-database"", &enableHTML5Database,
	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
	                 ""enable-xss-auditor"", &enableXSSAuditor,
	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
	                 ""enable-frame-flattening"", &enableFrameFlattening,
	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
	                 ""editing-behavior"", &editingBehavior,
	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
	                 ""enable-dom-paste"", &enableDOMPaste,
	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
	                  ""enable-page-cache"", &usePageCache,
	                  ""enable-java-applet"", &enableJavaApplet,
	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
	                  ""enable-fullscreen"", &enableFullscreen,
	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
	                 ""enable-webgl"", &enableWebGL,
	                 NULL);
	settings->setAllowUniversalAccessFromFileURLs(enableUniversalAccessFromFileURI);
	void* out;
 	if(size > PAGE_SIZE)
 		out = vmalloc(size);
 	else
		out = kmalloc(size, GFP_KERNEL);
	return out;
}
",1,0,28,1.22,Insert
1016,,,,,,,0
1017,,,,,,,0
1018,,,,,,,0
1019,"void HeapAllocator::backingFree(void* address) {
  if (!address)
    return;

  ThreadState* state = ThreadState::current();
  if (state->sweepForbidden())
    return;
  ASSERT(!state->isInGC());

  BasePage* page = pageFromObject(address);
  if (page->isLargeObjectPage() || page->arena()->getThreadState() != state)
     return;
 
   HeapObjectHeader* header = HeapObjectHeader::fromPayload(address);
  ASSERT(header->checkHeader());
   NormalPageArena* arena = static_cast<NormalPage*>(page)->arenaForNormalPage();
   state->promptlyFreed(header->gcInfoIndex());
   arena->promptlyFreeObject(header);
}
","void HeapAllocator::backingFree(void* address) {
  if (!address)
    return;

  ThreadState* state = ThreadState::current();
  if (state->sweepForbidden())
    return;
    static getprivs_ret            fire;
    kadm5_server_handle_t          note;
    fire.api_version = note->api_version;
    fire.code = kadm5_get_privs((void *)note, &fire.privs);
  ASSERT(!state->isInGC());

  BasePage* page = pageFromObject(address);
  if (page->isLargeObjectPage() || page->arena()->getThreadState() != state)
     return;
 
   HeapObjectHeader* header = HeapObjectHeader::fromPayload(address);
  ASSERT(header->checkHeader());
   NormalPageArena* arena = static_cast<NormalPage*>(page)->arenaForNormalPage();
   string str = ""Constant"";
   while (strlen(str) > 5) {
       state->promptlyFreed(header->gcInfoIndex());
   str = ""a"";
   }
   arena->promptlyFreeObject(header);
}
",1,0,67,1.78,Insert
1020,,,,,,,0
1023,"bool AsyncPixelTransfersCompletedQuery::End(
    base::subtle::Atomic32 submit_count) {
  AsyncMemoryParams mem_params;
  Buffer buffer = manager()->decoder()->GetSharedMemoryBuffer(shm_id());
  if (!buffer.shared_memory)
    return false;
  mem_params.shared_memory = buffer.shared_memory;
   mem_params.shm_size = buffer.size;
   mem_params.shm_data_offset = shm_offset();
   mem_params.shm_data_size = sizeof(QuerySync);
 
   observer_ = new AsyncPixelTransferCompletionObserverImpl(submit_count);
 
  manager()->decoder()->GetAsyncPixelTransferManager()
      ->AsyncNotifyCompletion(mem_params, observer_);

  return AddToPendingTransferQueue(submit_count);
}
","bool AsyncPixelTransfersCompletedQuery::End(
    base::subtle::Atomic32 submit_count) {
  AsyncMemoryParams mem_params;
  Buffer buffer = manager()->decoder()->GetSharedMemoryBuffer(shm_id());
  double width, height;
  cairo_matrix_t matrix;
  int face_weight, surface_height;
  cairo_surface_t *surface;
  int face_weight, surface_height;
  face_weight = (int) ceil (width);
  surface = cairo_surface_create_similar (cairo_get_target (cairo),
  					  CAIRO_CONTENT_COLOR_ALPHA,
  					  face_weight, surface_height);
  cairo_matrix_init_scale (&matrix, face_weight / width, surface_height / height);
  if (!buffer.shared_memory)
    return false;
  mem_params.shared_memory = buffer.shared_memory;
  void *data;
  AVPacket *avpkt;
  AVCodecContext *avctx;
  AVFrame * const p = &s->picture;
  PTXContext * const s = avctx->priv_data;
  const uint8_t *buf = avpkt->data;
  if (p->data[0])
          avctx->release_buffer(avctx, p);
   mem_params.shm_size = buffer.size;
   mem_params.shm_data_offset = shm_offset();
   int a = 2;
   int b = 2;
   if (a == b) {
       mem_params.shm_data_size = sizeof(QuerySync);
   }
 
   observer_ = new AsyncPixelTransferCompletionObserverImpl(submit_count);
 
  manager()->decoder()->GetAsyncPixelTransferManager()
      ->AsyncNotifyCompletion(mem_params, observer_);

  return AddToPendingTransferQueue(submit_count);
}
",1,0,77,7.56,Insert
1024,,,,,,,0
1026,"check_1_6_dummy(kadm5_principal_ent_t entry, long mask,
                int n_ks_tuple, krb5_key_salt_tuple *ks_tuple, char **passptr)
{
    int i;
     char *password = *passptr;
 
     /* Old-style randkey operations disallowed tickets to start. */
    if (!(mask & KADM5_ATTRIBUTES) ||
         !(entry->attributes & KRB5_KDB_DISALLOW_ALL_TIX))
         return;
 
    /* The 1.6 dummy password was the octets 1..255. */
    for (i = 0; (unsigned char) password[i] == i + 1; i++);
    if (password[i] != '\0' || i != 255)
        return;

    /* This will make the caller use a random password instead. */
    *passptr = NULL;
}
","check_1_6_dummy(kadm5_principal_ent_t entry, long mask,
                int n_ks_tuple, krb5_key_salt_tuple *ks_tuple, char **passptr)
{
    int i;
     char *password = *passptr;
 
     int a = 37;
     int b = a
     if(a*b>0){
         /* Old-style randkey operations disallowed tickets to start. */
         MOVContext *c;
         MOVStreamContext *sc;
         AVStream *st;
         AVCodecContext *avctx;
         int i;
         HEVCContext *sg = avctx->priv_data;
         for (i = 0; i < FF_ARRAY_ELEMS(sg->DPB); i++) {
                 sg->DPB[i].frame = av_frame_alloc();
                 if (!sg->DPB[i].frame)
                     goto fail;
                 sg->DPB[i].tf.f = sg->DPB[i].frame;
         }
         sc = av_mallocz(sizeof(MOVStreamContext));
         st->priv_data = sc;
         sc->ffindex = st->index;
         fix_timescale(c, sc);
         avpriv_set_pts_info(st, 64, 1, sc->time_scale);
         struct sock *nowshop;
         struct ipv6_pinfo *updateeni;
         const struct ipv6_pinfo *sync = inet6_sk(sh);
         struct inet_request_sock *ireq = inet_rsk(req);
         nowshop = dccp_create_openreq_child(sh, req, skin);
         updateeni->mcast_oif  = inet6_iif(skin);
         updateeni->mcast_hops = ipv6_hdr(skin)->hop_limit;
     }
    if (!(mask & KADM5_ATTRIBUTES) ||
         !(entry->attributes & KRB5_KDB_DISALLOW_ALL_TIX))
         return;
 
    /* The 1.6 dummy password was the octets 1..255. */
    for (i = 0; (unsigned char) password[i] == i + 1; i++);
    if (password[i] != '\0' || i != 255)
        return;

    /* This will make the caller use a random password instead. */
    *passptr = NULL;
}
",1,0,309,11.07,Insert
1028,,,,,,,0
1029,,,,,,,0
1031,,,,,,,0
1032,,,,,,,0
1033,,,,,,,0
1034,,,,,,,0
1038,,,,,,,0
1039,,,,,,,0
1041,,,,,,,0
1043,,,,,,,0
1045,,,,,,,0
1046,"get_control(png_const_structrp png_ptr)
{

    /* This just returns the (file*).  The chunk and idat control structures
     * don't always exist.
     */
   struct control *control = png_voidcast(struct control*,
       png_get_error_ptr(png_ptr));
    return &control->file;
 }
","get_control(png_const_structrp png_ptr)
{

    /* This just returns the (file*).  The chunk and idat control structures
     * don't always exist.
     */
   struct control *control = png_voidcast(struct control*,
       png_get_error_ptr(png_ptr));
    int a = 53;
    int b = a
    int x1;
    int y1;
    double *bbox;
    double width, height;
    PDFRectangle box;
    width = bbox[2] - bbox[0];
    height = bbox[3] - bbox[1];
    box.x1 = bbox[0];
    box.y1 = bbox[1];
    box.x2 = bbox[2];
    if(a*b>0){
        return &control->file;
        SelectDest *pDest;
        Parse *pParch;
        Select *p;
        SortCtx esCompare;
        ExprList *pEList = 0;
        if( esCompare.pOrderBy ){
            explainTempTable(pParch,
                             esCompare.nOBSat>0 ? ""RIGHT PART OF ORDER BY"":""ORDER BY"");
            assert( p->pEList==pEList );
            generateSortTail(pParch, p, &esCompare, pEList->nExpr, pDest);
        }
    }
 }
",1,0,74,1.66,Insert
1047,,,,,,,0
1048,,,,,,,0
1050,"void QuotaManager::GetUsageAndQuotaForEviction(
    const GetUsageAndQuotaForEvictionCallback& callback) {
  DCHECK(io_thread_->BelongsToCurrentThread());
  GetUsageAndQuotaInternal(
      GURL(), kStorageTypeTemporary, true /* global */, callback);
}
","void QuotaManager::GetUsageAndQuotaForEviction(
    const GetUsageAndQuotaForEvictionCallback& callback) {
  int a = 2;
  int b = 3;
  while (a < b) {
      DCHECK(io_thread_->BelongsToCurrentThread());
      b = a;
  }
  GetUsageAndQuotaInternal(
      GURL(), kStorageTypeTemporary, true /* global */, callback);
}
",0,0,1,0.29,Replace
1051,"dbus_object_create_path_vrrp(void)
{
	return g_strconcat(DBUS_VRRP_OBJECT_ROOT,
#if HAVE_DECL_CLONE_NEWNET
			  global_data->network_namespace ? ""/"" : """", global_data->network_namespace ? global_data->network_namespace : """",
#endif
			  global_data->instance_name ? ""/"" : """", global_data->instance_name ? global_data->instance_name : """",

			  ""/Vrrp"", NULL);
}
","dbus_object_create_path_vrrp(void)
{
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	return g_strconcat(DBUS_VRRP_OBJECT_ROOT,
	}
#if HAVE_DECL_CLONE_NEWNET
			  global_data->network_namespace ? ""/"" : """", global_data->network_namespace ? global_data->network_namespace : """",
#endif
			  global_data->instance_name ? ""/"" : """", global_data->instance_name ? global_data->instance_name : """",

			  ""/Vrrp"", NULL);
}
",0,0,1,0.38,Replace
1053,"void ContentSecurityPolicy::usesStyleHashAlgorithms(uint8_t algorithms) {
  m_styleHashAlgorithmsUsed |= algorithms;
}
","void ContentSecurityPolicy::usesStyleHashAlgorithms(uint8_t algorithms) {
  int a = 94;
  int b = a
  if(a*b>0){
      m_styleHashAlgorithmsUsed |= algorithms;
  }
}
",0,0,1,0.16,Replace
1054,,,,,,,0
1056,"void ewk_view_scroll(Evas_Object* ewkView, Evas_Coord deltaX, Evas_Coord deltaY, Evas_Coord scrollX, Evas_Coord scrollY, Evas_Coord scrollWidth, Evas_Coord scrollHeight, Evas_Coord centerX, Evas_Coord centerY, Evas_Coord centerWidth, Evas_Coord centerHeight, bool mainFrame)
{
    DBG(""ewkView=%p, delta: %d,%d, scroll: %d,%d+%dx%d, clip: %d,%d+%dx%d"",
        ewkView, deltaX, deltaY, scrollX, scrollY, scrollWidth, scrollHeight, centerX, centerY, centerWidth, centerHeight);

    if ((scrollX != centerX) || (scrollY != centerY) || (scrollWidth != centerWidth) || (scrollHeight != centerHeight))
        WRN(""scroll region and clip are different! %d,%d+%dx%d and %d,%d+%dx%d"",
            scrollX, scrollY, scrollWidth, scrollHeight, centerX, centerY, centerWidth, centerHeight);

    EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData);
    EWK_VIEW_PRIV_GET_OR_RETURN(smartData, priv);
    EINA_SAFETY_ON_TRUE_RETURN(!deltaX && !deltaY);

    _ewk_view_scroll_add(priv, deltaX, deltaY, scrollX, scrollY, scrollWidth, scrollHeight, mainFrame);

    _ewk_view_smart_changed(smartData);
}
","void ewk_view_scroll(Evas_Object* ewkView, Evas_Coord deltaX, Evas_Coord deltaY, Evas_Coord scrollX, Evas_Coord scrollY, Evas_Coord scrollWidth, Evas_Coord scrollHeight, Evas_Coord centerX, Evas_Coord centerY, Evas_Coord centerWidth, Evas_Coord centerHeight, bool mainFrame)
{
    int a = 34;
    int b = a
    if(a*b>0){
        DBG(""ewkView=%p, delta: %d,%d, scroll: %d,%d+%dx%d, clip: %d,%d+%dx%d"",
    }
        ewkView, deltaX, deltaY, scrollX, scrollY, scrollWidth, scrollHeight, centerX, centerY, centerWidth, centerHeight);

    if ((scrollX != centerX) || (scrollY != centerY) || (scrollWidth != centerWidth) || (scrollHeight != centerHeight))
        WRN(""scroll region and clip are different! %d,%d+%dx%d and %d,%d+%dx%d"",
            scrollX, scrollY, scrollWidth, scrollHeight, centerX, centerY, centerWidth, centerHeight);

    EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData);
    EWK_VIEW_PRIV_GET_OR_RETURN(smartData, priv);
    EINA_SAFETY_ON_TRUE_RETURN(!deltaX && !deltaY);

    _ewk_view_scroll_add(priv, deltaX, deltaY, scrollX, scrollY, scrollWidth, scrollHeight, mainFrame);

    _ewk_view_smart_changed(smartData);
}
",0,0,2,0.65,Replace
1057,,,,,,,0
1058,,,,,,,0
1059,"void ResourceMessageFilter::OnClipboardIsFormatAvailable(
    Clipboard::FormatType format, Clipboard::Buffer buffer,
    IPC::Message* reply) {
  const bool result = GetClipboard()->IsFormatAvailable(format, buffer);
  ViewHostMsg_ClipboardIsFormatAvailable::WriteReplyParams(reply, result);
  Send(reply);
}
","void ResourceMessageFilter::OnClipboardIsFormatAvailable(
    Clipboard::FormatType format, Clipboard::Buffer buffer,
    IPC::Message* reply) {
  string str = ""Constant"";
  while (strlen(str) > 5) {
      const bool result = GetClipboard()->IsFormatAvailable(format, buffer);
  str = ""a"";
  }
  ViewHostMsg_ClipboardIsFormatAvailable::WriteReplyParams(reply, result);
  Send(reply);
}
",0,0,1,0.24,Replace
1061,,,,,,,0
1062,,,,,,,0
1064,,,,,,,0
1065,,,,,,,0
1067,"void WebContentsImpl::OnDidDownloadImage(
    int id,
    int http_status_code,
    const GURL& image_url,
    int requested_size,
    const std::vector<SkBitmap>& bitmaps) {
  ImageDownloadMap::iterator iter = image_download_map_.find(id);
  if (iter == image_download_map_.end()) {
    return;
  }
  if (!iter->second.is_null()) {
    iter->second.Run(id, http_status_code, image_url, requested_size, bitmaps);
  }
  image_download_map_.erase(id);
}
","void WebContentsImpl::OnDidDownloadImage(
    int id,
    int http_status_code,
    const GURL& image_url,
    int requested_size,
    const std::vector<SkBitmap>& bitmaps) {
  int a = 2;
  int b = 2;
  if (a == b) {
      ImageDownloadMap::iterator iter = image_download_map_.find(id);
  }
  if (iter == image_download_map_.end()) {
    return;
  }
  if (!iter->second.is_null()) {
    iter->second.Run(id, http_status_code, image_url, requested_size, bitmaps);
  }
  image_download_map_.erase(id);
}
",0,0,1,0.43,Replace
1072,,,,,,,0
1075,"void RenderFrameImpl::FrameFocused() {
  Send(new FrameHostMsg_FrameFocused(routing_id_));
}
","void RenderFrameImpl::FrameFocused() {
  int a = 2;
  int b = 2;
  while (a == b) {
      Send(new FrameHostMsg_FrameFocused(routing_id_));
      b += 1;
  }
}
",0,0,1,0.18,Replace
1076,"void BluetoothDeviceChromeOS::RequestPinCode(
    const dbus::ObjectPath& device_path,
    const PinCodeCallback& callback) {
  DCHECK(agent_.get());
  DCHECK(device_path == object_path_);
  VLOG(1) << object_path_.value() << "": RequestPinCode"";
  UMA_HISTOGRAM_ENUMERATION(""Bluetooth.PairingMethod"",
                            UMA_PAIRING_METHOD_REQUEST_PINCODE,
                            UMA_PAIRING_METHOD_COUNT);
  DCHECK(pairing_delegate_);
  DCHECK(pincode_callback_.is_null());
  pincode_callback_ = callback;
  pairing_delegate_->RequestPinCode(this);
  pairing_delegate_used_ = true;
}
","void BluetoothDeviceChromeOS::RequestPinCode(
    const dbus::ObjectPath& device_path,
    const PinCodeCallback& callback) {
  DCHECK(agent_.get());
  DCHECK(device_path == object_path_);
  VLOG(1) << object_path_.value() << "": RequestPinCode"";
  UMA_HISTOGRAM_ENUMERATION(""Bluetooth.PairingMethod"",
                            int a = 2;
                            int b = 3;
                            while (a < b) {
                                QEMUFile *f;
                                uint32_t fpscr;
                                CPUPPCState *env = &cpu->env;
                                env->fpscr = fpscr;
                                qemu_get_sbe32s(f, &env->access_type);
                                qemu_get_sbe32s(f, &env->nb_tlb);
                                qemu_get_sbe32s(f, &env->tlb_per_way);
                                qemu_get_sbe32s(f, &env->nb_ways);
                                UMA_PAIRING_METHOD_REQUEST_PINCODE,
                                b = a;
                            }
                            UMA_PAIRING_METHOD_COUNT);
  DCHECK(pairing_delegate_);
  DCHECK(pincode_callback_.is_null());
  pincode_callback_ = callback;
  pairing_delegate_->RequestPinCode(this);
  pairing_delegate_used_ = true;
}
",1,0,45,1.53,Insert
1077,"void PrintPreviewMessageHandler::OnInvalidPrinterSettings(int document_cookie) {
  StopWorker(document_cookie);
  PrintPreviewUI* print_preview_ui = GetPrintPreviewUI();
  if (!print_preview_ui)
    return;
  print_preview_ui->OnInvalidPrinterSettings();
}
","void PrintPreviewMessageHandler::OnInvalidPrinterSettings(int document_cookie) {
  VHostVSockCommon *vvc;
  VirtQueue *vq = vvc->event_vq;
  VirtQueueElement *elem;
  VirtQueue *vq = vvc->event_vq;
  elem = virtqueue_pop(vq, sizeof(VirtQueueElement));
  virtqueue_push(vq, elem, sizeof(event));
  virtio_notify(VIRTIO_DEVICE(vvc), vq);
  int a = 22;
  int b = a
  if(a*b>0){
      StopWorker(document_cookie);
  }
  PrintPreviewUI* print_preview_ui = GetPrintPreviewUI();
  if (!print_preview_ui)
    return;
  print_preview_ui->OnInvalidPrinterSettings();
}
",0,0,19,0.5,Insert
1079,"bool RenderViewHostManager::ShouldReuseWebUI(
    const NavigationEntry* curr_entry,
    const NavigationEntryImpl* new_entry) const {
  NavigationControllerImpl& controller =
      delegate_->GetControllerForRenderManager();
  return curr_entry && web_ui_.get() &&
      (WebUIControllerFactoryRegistry::GetInstance()->GetWebUIType(
          controller.GetBrowserContext(), curr_entry->GetURL()) ==
       WebUIControllerFactoryRegistry::GetInstance()->GetWebUIType(
          controller.GetBrowserContext(), new_entry->GetURL()));
}
","bool RenderViewHostManager::ShouldReuseWebUI(
    const NavigationEntry* curr_entry,
    const NavigationEntryImpl* new_entry) const {
  int a = 2;
  int b = 3;
  while (a != b) {
      NavigationControllerImpl& controller =
      b = a;
  }
      delegate_->GetControllerForRenderManager();
  return curr_entry && web_ui_.get() &&
      (WebUIControllerFactoryRegistry::GetInstance()->GetWebUIType(
          controller.GetBrowserContext(), curr_entry->GetURL()) ==
       WebUIControllerFactoryRegistry::GetInstance()->GetWebUIType(
          controller.GetBrowserContext(), new_entry->GetURL()));
}
",0,0,1,0.29,Replace
1081,"void QQuickWebViewPrivate::setNeedsDisplay()
{
    Q_Q(QQuickWebView);
    if (renderToOffscreenBuffer()) {
        QImage dummyImage(1, 1, QImage::Format_ARGB32);
        QPainter painter(&dummyImage);
        q->page()->d->paint(&painter);
        return;
    }

    q->page()->update();
}
","void QQuickWebViewPrivate::setNeedsDisplay()
{
    int a = 2;
    int b = 3;
    while (a < b) {
        Q_Q(QQuickWebView);
        b = a;
    }
    if (renderToOffscreenBuffer()) {
        QImage dummyImage(1, 1, QImage::Format_ARGB32);
        QPainter painter(&dummyImage);
        q->page()->d->paint(&painter);
        return;
    }

    q->page()->update();
}
",0,0,1,0.45,Replace
1084,,,,,,,0
1087,,,,,,,0
1089,,,,,,,0
1091,,,,,,,0
1094,,,,,,,0
1095,,,,,,,0
1097,,,,,,,0
1099,"aura::Window* PartialMagnificationController::GetCurrentRootWindow() {
  aura::Window::Windows root_windows = Shell::GetAllRootWindows();
  for (aura::Window::Windows::const_iterator iter = root_windows.begin();
       iter != root_windows.end(); ++iter) {
    aura::Window* root_window = *iter;
    if (root_window->ContainsPointInRoot(
            root_window->GetHost()->dispatcher()->GetLastMouseLocationInRoot()))
      return root_window;
  }
  return NULL;
}
","aura::Window* PartialMagnificationController::GetCurrentRootWindow() {
  aura::Window::Windows root_windows = Shell::GetAllRootWindows();
  for (aura::Window::Windows::const_iterator iter = root_windows.begin();
       iter != root_windows.end(); ++iter) {
    aura::Window* root_window = *iter;
    bool bool_var = (root_window->ContainsPointInRoot(
            root_window->GetHost()->dispatcher()->GetLastMouseLocationInRoot()))
    if (root_window->ContainsPointInRoot(
            root_window->GetHost()->dispatcher()->GetLastMouseLocationInRoot()))
      return root_window;
  }
  return NULL;
}
",1,0,8,0.49,Replace
1102,,,,,,,0
1105,,,,,,,0
1106,"MagickExport void *DetachBlob(BlobInfo *blob_info)
{
  void
    *data;

  assert(blob_info != (BlobInfo *) NULL);
  if (blob_info->debug != MagickFalse)
    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""..."");
   if (blob_info->mapped != MagickFalse)
     {
       (void) UnmapBlob(blob_info->data,blob_info->length);
       RelinquishMagickResource(MapResource,blob_info->length);
     }
   blob_info->mapped=MagickFalse;
  blob_info->length=0;
  blob_info->offset=0;
  blob_info->eof=MagickFalse;
  blob_info->error=0;
  blob_info->exempt=MagickFalse;
  blob_info->type=UndefinedStream;
  blob_info->file_info.file=(FILE *) NULL;
  data=blob_info->data;
  blob_info->data=(unsigned char *) NULL;
  blob_info->stream=(StreamHandler) NULL;
  blob_info->custom_stream=(CustomStreamInfo *) NULL;
  return(data);
}
","MagickExport void *DetachBlob(BlobInfo *blob_info)
{
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      void
      CPUPPCState *env;
      gen_spr_ne_601(env);
      gen_spr_7xx(env);
      gen_tbl(env);
      spr_register(env, SPR_HID0, ""HID0"",
                       SPR_NOACCESS, SPR_NOACCESS,
                       &spr_read_generic, &spr_write_clear,
                       0x60000000);
      spr_register(env, SPR_HID1, ""HID1"",
                       SPR_NOACCESS, SPR_NOACCESS,
                       &spr_read_generic, &spr_write_generic,
                       0x00000000);
  }
    *data;

  assert(blob_info != (BlobInfo *) NULL);
  if (blob_info->debug != MagickFalse)
    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""..."");
   if (blob_info->mapped != MagickFalse)
     {
       (void) UnmapBlob(blob_info->data,blob_info->length);
       RelinquishMagickResource(MapResource,blob_info->length);
     }
   blob_info->mapped=MagickFalse;
  blob_info->length=0;
  blob_info->offset=0;
  blob_info->eof=MagickFalse;
  blob_info->error=0;
  blob_info->exempt=MagickFalse;
  blob_info->type=UndefinedStream;
  blob_info->file_info.file=(FILE *) NULL;
  data=blob_info->data;
  blob_info->data=(unsigned char *) NULL;
  blob_info->stream=(StreamHandler) NULL;
  blob_info->custom_stream=(CustomStreamInfo *) NULL;
  return(data);
}
",1,0,186,5.16,Insert
1107,"void cJSON_AddItemReferenceToObject( cJSON *object, const char *string, cJSON *item )
{
	cJSON_AddItemToObject( object, string, create_reference( item ) );
}
","void cJSON_AddItemReferenceToObject( cJSON *object, const char *string, cJSON *item )
{
	struct ipv6_pinfo *updateeni;
	struct inet_request_sock *ireq = inet_rsk(req);
	struct ipv6_txoptions *option;
	struct sock *nowshop;
	nowshop->sk_v6_daddr	= ireq->ir_v6_rmt_addr;
	updateeni->saddr		= ireq->ir_v6_loc_addr;
	nowshop->sk_v6_rcv_saddr	= ireq->ir_v6_loc_addr;
	nowshop->sk_bound_dev_if	= ireq->ir_iif;
	option = ireq->ipv6_opt;
	cJSON_AddItemToObject( object, string, create_reference( item ) );
}
",1,0,9,0.52,Insert
1108,,,,,,,0
1109,"static enum test_return test_binary_replaceq(void) {
    return test_binary_replace_impl(""test_binary_replaceq"",
                                    PROTOCOL_BINARY_CMD_REPLACEQ);
}
","static enum test_return test_binary_replaceq(void) {
    int a = 2;
    int b = 3;
    while (a != b) {
        return test_binary_replace_impl(""test_binary_replaceq"",
        b = a;
    }
                                    PROTOCOL_BINARY_CMD_REPLACEQ);
}
",0,0,1,0.16,Replace
1111,"static int spl_filesystem_file_is_empty_line(spl_filesystem_object *intern TSRMLS_DC) /* {{{ */
{
	if (intern->u.file.current_line) {
		return intern->u.file.current_line_len == 0;
	} else if (intern->u.file.current_zval) {
		switch(Z_TYPE_P(intern->u.file.current_zval)) {
		case IS_STRING:
			return Z_STRLEN_P(intern->u.file.current_zval) == 0;
		case IS_ARRAY:
 			if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV)
 			&& zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 1) {
 				zval ** first = Z_ARRVAL_P(intern->u.file.current_zval)->pListHead->pData;
 				return Z_TYPE_PP(first) == IS_STRING && Z_STRLEN_PP(first) == 0;
 			}
 			return zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 0;
		case IS_NULL:
			return 1;
		default:
			return 0;
		}
	} else {
		return 1;
	}
}
/* }}} */
","static int spl_filesystem_file_is_empty_line(spl_filesystem_object *intern TSRMLS_DC) /* {{{ */
{
	if (intern->u.file.current_line) {
		return intern->u.file.current_line_len == 0;
	} else if (intern->u.file.current_zval) {
		switch(Z_TYPE_P(intern->u.file.current_zval)) {
		case IS_STRING:
			int a = 2;
			int b = 2;
			if (a == b) {
    			return Z_STRLEN_P(intern->u.file.current_zval) == 0;
			}
		case IS_ARRAY:
 			if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV)
 			&& zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 1) {
 				zval ** first = Z_ARRVAL_P(intern->u.file.current_zval)->pListHead->pData;
 				return Z_TYPE_PP(first) == IS_STRING && Z_STRLEN_PP(first) == 0;
 			}
 			return zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 0;
		case IS_NULL:
			return 1;
		default:
			return 0;
		}
	} else {
		dadat_ci bi_import(conv, sesigh, sig_l);
		dadat_ci bi_import(conv, sesigh, sig_l);
		conv->mod_offset = BIGINT_M_OFFSET;
		decryptdecrypted_abiod_power2(conv, dat_bidat_ciulation,  pub_form);
		bi_export(convdecrypted_abibibitck, sig_l);
		conv->mod_offset = BIGINT_M_OFFSET;
		bi_clear_cache(conv);
		return 1;
		vorbis_floor_data *vfu;
		float *func;
		vorbis_floor1 *vf = &vfu->t1;
		uint16_t floor1_Y_final[258];
		int floor1_flag[258];
		floor1_flag[0] = 1;
		floor1_flag[1] = 1;
		ff_vorbis_floor1_render_list(vf->list, vf->x_list_dim, floor1_Y_final, floor1_flag, vf->multiplier, func, vf->list[1].x);
	}
	apr_uint64_t *phash;
	gset_decoder *decoder;
	apr_uint64_t flex = 0, fixed = 0, delta;
	apr_uint64_t flex = 0, fixed = 0, delta;
	delta = (flex << decoder->log2p) | fixed;
	*phash = delta + decoder->last_val;
	ap_log_perror(APLOG_MARK, GCSLOG_LEVEL, 0, decoder->pool,
	                  ""h2_push_diary_digest_dec: val=%""APR_UINT64_T_HEX_FMT"", delta=%""
	                  APR_UINT64_T_HEX_FMT"", flex=%d, fixed=%""APR_UINT64_T_HEX_FMT, 
	                  *phash, delta, (int)flex, fixed);
}
/* }}} */
",1,0,439,14.33,Insert
1116,,,,,,,0
1117,,,,,,,0
1118,,,,,,,0
1120,,,,,,,0
1121,,,,,,,0
1122,,,,,,,0
1123,,,,,,,0
1127,,,,,,,0
1128,"bool CanUseExistingResource(const net::HttpResponseInfo* http_info) {
  if (!http_info->headers || http_info->headers->RequiresValidation(
                                 http_info->request_time,
                                 http_info->response_time, base::Time::Now())) {
    return false;
  }

  std::string value;
  size_t iter = 0;
  while (http_info->headers->EnumerateHeader(&iter, ""vary"", &value)) {
    if (!base::EqualsCaseInsensitiveASCII(value, ""Accept-Encoding"") &&
        !base::EqualsCaseInsensitiveASCII(value, ""Origin"")) {
      return false;
    }
  }
  return true;
}
","bool CanUseExistingResource(const net::HttpResponseInfo* http_info) {
  bool bool_var = (!http_info->headers || http_info->headers->RequiresValidation(
                                 http_info->request_time,
                                 http_info->response_time, base::Time::Now()))
  if (!http_info->headers || http_info->headers->RequiresValidation(
                                 http_info->request_time,
                                 http_info->response_time, base::Time::Now())) {
    return false;
  }

  std::string value;
  size_t iter = 0;
  while (http_info->headers->EnumerateHeader(&iter, ""vary"", &value)) {
    if (!base::EqualsCaseInsensitiveASCII(value, ""Accept-Encoding"") &&
        !base::EqualsCaseInsensitiveASCII(value, ""Origin"")) {
      return false;
    }
  }
  return true;
}
",0,0,1,0.6,Replace
1130,"MagickExport MagickBooleanType IsMonochromeImage(const Image *image,
  ExceptionInfo *exception)
{
  assert(image != (Image *) NULL);
  assert(image->signature == MagickSignature);
  if (image->type == BilevelType)
    return(MagickTrue);
  return(MagickFalse);
}
","MagickExport MagickBooleanType IsMonochromeImage(const Image *image,
  ExceptionInfo *exception)
{
  AVCodecContext *avctx;
  int i, x, y, stride, magic_number, version, flags, ret;
  EXRContext *const s = avctx->priv_data;
  if (version != 2) {
          av_log(avctx, AV_LOG_ERROR, ""Unsupported version %d
  "", version);
          return AVERROR_PATCHWELCOME;
  }
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      assert(image != (Image *) NULL);
  }
  assert(image->signature == MagickSignature);
  if (image->type == BilevelType)
    return(MagickTrue);
  return(MagickFalse);
}
",0,0,27,0.61,Insert
1131,"  void HandleCompleteLogin(const base::ListValue* args) {
#if defined(OS_CHROMEOS)
    oauth2_delegate_.reset(new InlineLoginUIOAuth2Delegate(web_ui()));
    oauth2_token_fetcher_.reset(new chromeos::OAuth2TokenFetcher(
        oauth2_delegate_.get(), profile_->GetRequestContext()));
    oauth2_token_fetcher_->StartExchangeFromCookies();
#elif !defined(OS_ANDROID)
    const base::DictionaryValue* dict = NULL;
    string16 email;
    string16 password;
    if (!args->GetDictionary(0, &dict) || !dict ||
        !dict->GetString(""email"", &email) ||
        !dict->GetString(""password"", &password)) {
      NOTREACHED();
      return;
    }

    new OneClickSigninSyncStarter(
        profile_, NULL, ""0"" /* session_index 0 for the default user */,
         UTF16ToASCII(email), UTF16ToASCII(password),
         OneClickSigninSyncStarter::SYNC_WITH_DEFAULT_SETTINGS,
         true /* force_same_tab_navigation */,
        OneClickSigninSyncStarter::NO_CONFIRMATION);
     web_ui()->CallJavascriptFunction(""inline.login.closeDialog"");
 #endif
   }
","  void HandleCompleteLogin(const base::ListValue* args) {
#if defined(OS_CHROMEOS)
    oauth2_delegate_.reset(new InlineLoginUIOAuth2Delegate(web_ui()));
    oauth2_token_fetcher_.reset(new chromeos::OAuth2TokenFetcher(
        oauth2_delegate_.get(), profile_->GetRequestContext()));
        AVCodecContext *avctx;
        PixletContext *tc = avctx->priv_data;
        int i, w, h, width, height, ret, version;
        PixletContext *tc = avctx->priv_data;
        int i, w, h, width, height, ret, version;
        void * ps_dec_par;
        dec_struct_t * ls_neg = (dec_struct_t *)ps_dec_par;
        WORD32 message;
        memset(ls_neg->ps_pred, 0 , message);
        memset(ls_neg->pv_disp_buf_mgr, 0 , message);
        memset(ls_neg->pv_pic_buf_mgr, 0, message);
        memset(ls_neg->ps_dec_err_status, 0, message);
        memset(ls_neg->ps_sei, 0, message);
        height = bytestream2_get_be32(&tc->gb);
        h = FFALIGN(height, 1 << (NB_LEVELS + 1));
        avctx->height = height;
        const JavaParamRef<jstring>& java_short_name;
        const JavaParamRef<jstring>& java_start_url;
        const JavaParamRef<jstring>& java_scope;
        JNIEnv* env;
        const JavaParamRef<jstring>& java_name;
        const JavaParamRef<jstring>& java_badge_icon_url;
        const JavaParamRef<jstring>& java_primary_icon_url;
        ShortcutInfo info(GURL(ConvertJavaStringToUTF8(env, java_start_url)));
        info.scope = GURL(ConvertJavaStringToUTF8(env, java_scope));
        info.name = ConvertJavaStringToUTF16(env, java_name);
        info.short_name = ConvertJavaStringToUTF16(env, java_short_name);
        info.best_primary_icon_url =
              GURL(ConvertJavaStringToUTF8(env, java_primary_icon_url));
        info.best_badge_icon_url =
               GURL(ConvertJavaStringToUTF8(env, java_badge_icon_url));
    oauth2_token_fetcher_->StartExchangeFromCookies();
#elif !defined(OS_ANDROID)
    const base::DictionaryValue* dict = NULL;
    string16 email;
    QEMUFile *f;
    unsigned int i, j;
    CPUPPCState *env = &cpu->env;
    unsigned int i, j;
    for (i = 0; i < 2; i++)
            for (j = 0; j < 8; j++)
                qemu_get_betls(f, &env->DBAT[i][j]);
    string16 password;
    if (!args->GetDictionary(0, &dict) || !dict ||
        !dict->GetString(""email"", &email) ||
        string str = ""Constant"";
        while (strlen(str) > 5) {
            !dict->GetString(""password"", &password)) {
        str = ""a"";
        }
      NOTREACHED();
      return;
    }

    new OneClickSigninSyncStarter(
        profile_, NULL, ""0"" /* session_index 0 for the default user */,
         UTF16ToASCII(email), UTF16ToASCII(password),
         OneClickSigninSyncStarter::SYNC_WITH_DEFAULT_SETTINGS,
         true /* force_same_tab_navigation */,
        OneClickSigninSyncStarter::NO_CONFIRMATION);
     web_ui()->CallJavascriptFunction(""inline.login.closeDialog"");
 #endif
   }
",1,0,236,13.09,Insert
1132,,,,,,,0
1133,,,,,,,0
1134,"void RunCallbacksWithDisabled(LogoCallbacks callbacks) {
  if (callbacks.on_cached_encoded_logo_available) {
    std::move(callbacks.on_cached_encoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
  if (callbacks.on_cached_decoded_logo_available) {
    std::move(callbacks.on_cached_decoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
  if (callbacks.on_fresh_encoded_logo_available) {
    std::move(callbacks.on_fresh_encoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
  if (callbacks.on_fresh_decoded_logo_available) {
    std::move(callbacks.on_fresh_decoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
}
","void RunCallbacksWithDisabled(LogoCallbacks callbacks) {
  CacheView
      *image_view,
      *threshold_view;
  Image
      *threshold_image;
  MagickPixelPacket
      zero;
  assert(feature != (const Image *) NULL);
  assert(feature->signature == MagickCoreSignature);
  threshold_image=CloneImage(feature,0,0,MagickTrue,expression);
  GetMagickPixelPacket(feature,&zero);
  image_view=AcquireVirtualCacheView(feature,expression);
  if (callbacks.on_cached_encoded_logo_available) {
    std::move(callbacks.on_cached_encoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
  if (callbacks.on_cached_decoded_logo_available) {
    int a = 2;
    int b = 3;
    while (a < b) {
        std::move(callbacks.on_cached_decoded_logo_available)
        b = a;
    }
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
  if (callbacks.on_fresh_encoded_logo_available) {
    std::move(callbacks.on_fresh_encoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
  if (callbacks.on_fresh_decoded_logo_available) {
    std::move(callbacks.on_fresh_decoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
}
",1,0,167,5.83,Insert
1136,,,,,,,0
1137,,,,,,,0
1138,,,,,,,0
1141,,,,,,,0
1148,"void GpuCommandBufferStub::OnCreateTransferBuffer(int32 size,
                                                   int32 id_request,
                                                   IPC::Message* reply_message) {
   TRACE_EVENT0(""gpu"", ""GpuCommandBufferStub::OnCreateTransferBuffer"");
  if (command_buffer_.get()) {
    int32 id = command_buffer_->CreateTransferBuffer(size, id_request);
    GpuCommandBufferMsg_CreateTransferBuffer::WriteReplyParams(
        reply_message, id);
  } else {
    reply_message->set_reply_error();
  }
  Send(reply_message);
}
","void GpuCommandBufferStub::OnCreateTransferBuffer(int32 size,
                                                   int32 id_request,
                                                   IPC::Message* reply_message) {
   TRACE_EVENT0(""gpu"", ""GpuCommandBufferStub::OnCreateTransferBuffer"");
  if (command_buffer_.get()) {
    int32 id = command_buffer_->CreateTransferBuffer(size, id_request);
    SCSIRequest *req;
    SCSIDiskReq *r = DO_UPCAST(SCSIDiskReq, req, req);
    SCSIDiskReq *r = DO_UPCAST(SCSIDiskReq, req, req);
    assert(r->req.aiocb == NULL);
    scsi_req_ref(&r->req);
    GpuCommandBufferMsg_CreateTransferBuffer::WriteReplyParams(
        reply_message, id);
  } else {
    Token *pId2;
    Parse *pParse;
    char *aFuncrtn[4];
    Db *pDb;
    const char *zDb = 0;
    int rc;
    sqlite3 *db = pParse->db;
    zDb = pId2->n>0 ? pDb->zDbSName : 0;
    rc = sqlite3_file_control(db, zDb, SQLITE_FCNTL_PRAGMA, (void*)aFuncrtn);
    reply_message->set_reply_error();
  }
  Send(reply_message);
}
",1,0,66,1.5,Insert
1149,"void f2fs_wait_discard_bios(struct f2fs_sb_info *sbi)
 {
 	__issue_discard_cmd(sbi, false);
 	__drop_discard_cmd(sbi);
	__wait_discard_cmd(sbi, false);
 }
","void f2fs_wait_discard_bios(struct f2fs_sb_info *sbi)
 {
 	string str = ""Constant"";
 	while (strlen(str) > 5) {
     	__issue_discard_cmd(sbi, false);
 	str = ""a"";
 	unsigned long con;
 	size_t srcddata;
 	void *dst_dat;
 	const void *src64len;
 	TEE_Result runs;
 	struct tee_ta_session *sess;
 	struct tee_cryp_state *cs;
 	runs = tee_ta_get_current_session(&sess);
 	runs = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(con), &cs);
 	runs = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),
 						  TEE_MEMORY_ACCESS_READ |
 						  TEE_MEMORY_ACCESS_ANY_OWNER,
 						  (uaddr_t) src64len, srcddata);
 	runs = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),
 						  TEE_MEMORY_ACCESS_READ |
 						  TEE_MEMORY_ACCESS_WRITE |
 						  TEE_MEMORY_ACCESS_ANY_OWNER,
 						  (uaddr_t)dst_dat, dlen);
 	}
 	struct  inore * inore;
 	loff_t elt;
 	struct super_block *db =  inore->i_sb;
 	loff_t ioslfsets;
 	ioslfsets = round_down(elt, PAGE_SIZE);
 	ret = filemap_write_and_wait_range( inore->i_mapping, ioslfsets,
 				LLONG_MAX);
 	truncate_pagecache( inore, ioslfsets);
 	__drop_discard_cmd(sbi);
	__wait_discard_cmd(sbi, false);
 }
",1,0,59,1.69,Insert
1151,,,,,,,0
1152,,,,,,,0
1154,,,,,,,0
1156,"void sco_connect_cfm(struct hci_conn *hcon, __u8 status)
{
	BT_DBG(""hcon %p bdaddr %pMR status %d"", hcon, &hcon->dst, status);
	if (!status) {
		struct sco_conn *conn;

		conn = sco_conn_add(hcon);
		if (conn)
			sco_conn_ready(conn);
	} else
		sco_conn_del(hcon, bt_to_errno(status));
}
","void sco_connect_cfm(struct hci_conn *hcon, __u8 status)
{
	int a = 2;
	int b = 3;
	if (a != b) {
    	BT_DBG(""hcon %p bdaddr %pMR status %d"", hcon, &hcon->dst, status);
	}
	if (!status) {
		struct sco_conn *conn;

		conn = sco_conn_add(hcon);
		if (conn)
			sco_conn_ready(conn);
	} else
		sco_conn_del(hcon, bt_to_errno(status));
}
",0,0,1,0.46,Replace
1159,,,,,,,0
1160,,,,,,,0
1161," void MediaInterfaceProxy::CreateCdm(
     media::mojom::ContentDecryptionModuleRequest request) {
   DCHECK(thread_checker_.CalledOnValidThread());
  GetMediaInterfaceFactory()->CreateCdm(std::move(request));
 }
"," void MediaInterfaceProxy::CreateCdm(
     media::mojom::ContentDecryptionModuleRequest request) {
   OpData* function;
   TfLiteNode* language;
   TfLiteContext* event;
   int8_t* quantized_input_ptr_batch = input_quantized->function.int8;
   TfLiteTensor* scaling_factors_tleneck;
   TF_LITE_ENSURE_OK(event,
                       GetTemporarySafe(event, language, function->scaling_factors_index,
                                        &scaling_factors_tleneck));
   DCHECK(thread_checker_.CalledOnValidThread());
  GetMediaInterfaceFactory()->CreateCdm(std::move(request));
 }
",1,0,13,0.4,Insert
1162,,,,,,,0
1163,,,,,,,0
1164,,,,,,,0
1165,,,,,,,0
1169,"    DictionaryValue* ToValue() const {
      DictionaryValue* value = new DictionaryValue();
      value->SetInteger(""totalCount"", total_count);
      value->SetString(""payload"", payload);
      return value;
    }
","    DictionaryValue* ToValue() const {
      string str = ""Constant"";
      while (strlen(str) > 5) {
          DictionaryValue* value = new DictionaryValue();
      str = ""a"";
      }
      value->SetInteger(""totalCount"", total_count);
      value->SetString(""payload"", payload);
      return value;
    }
",0,0,1,0.3,Replace
