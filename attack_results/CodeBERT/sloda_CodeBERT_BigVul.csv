Index,Original Code,Adversarial Code,True Label,Adv Label,Query Times,Time Cost,Attack Type
2,"void RenderFrameImpl::OnCopyToFindPboard() {
  if (frame_->HasSelection()) {
    if (!clipboard_host_) {
      auto* platform = RenderThreadImpl::current_blink_platform_impl();
      platform->GetConnector()->BindInterface(platform->GetBrowserServiceName(),
                                              &clipboard_host_);
    }
    base::string16 selection = frame_->SelectionAsText().Utf16();
    clipboard_host_->WriteStringToFindPboard(selection);
  }
}","void RenderFrameImpl::OnCopyToFindPboard() {
  if (frame_->HasSelection()) {
    if (!clipboard_host_) {
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      const char
          *attribute,
          *content;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      description=GetXMLTreeChild(table_iterator,""description"");
      levels=GetXMLTreeChild(table_iterator,""levels"");
      attribute=GetXMLTreeAttribute(table_iterator,""slot"");
      auto* platform = RenderThreadImpl::current_blink_platform_impl();
      platform->GetConnector()->BindInterface(platform->GetBrowserServiceName(),
                                              &clipboard_host_);
    }
    base::string16 selection = frame_->SelectionAsText().Utf16();
    int a = 2;
    int b = 3;
    if (a != b) {
        clipboard_host_->WriteStringToFindPboard(selection);
    }
  }
}",0,1,6,0.3,Insert
9,"bool TopSitesImpl::IsKnownURL(const GURL& url) {
  return loaded_ && cache_->IsKnownURL(url);
}","bool TopSitesImpl::IsKnownURL(const GURL& url) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return loaded_ && cache_->IsKnownURL(url);
  strcpy(str, ""a"");
  struct shash_desc *ref;
  void *img;
  struct sha256_state *ssrx = shash_desc_ctx(ref);
  memcpy(img, ssrx, sizeof(*ssrx));
  }
}",0,1,3,0.2,Insert
11,"		void CWebServer::Cmd_GetAuth(WebEmSession & session, const request& req, Json::Value &root)
		{
			root[""status""] = ""OK"";
			root[""title""] = ""GetAuth"";
			if (session.rights != -1)
			{
				root[""version""] = szAppVersion;
			}
			root[""user""] = session.username;
			root[""rights""] = session.rights;
		}","		void CWebServer::Cmd_GetAuth(WebEmSession & session, const request& req, Json::Value &root)
		{
			root[""status""] = ""OK"";
			char str1[] = ""Constant"";
			char str2[] = ""Constant"";
			if (strcmp(str1, str2) == 0) {
    			root[""title""] = ""GetAuth"";
			}
			XMLTreeInfo
			    *description,
			    *levels,
			    *quantization_tables,
			    *table_iterator;
			XMLTreeInfo
			    *description,
			    *levels,
			    *quantization_tables,
			    *table_iterator;
			const char
			    *attribute,
			    *content;
			XMLTreeInfo
			    *description,
			    *levels,
			    *quantization_tables,
			    *table_iterator;
			description=GetXMLTreeChild(table_iterator,""description"");
			levels=GetXMLTreeChild(table_iterator,""levels"");
			attribute=GetXMLTreeAttribute(table_iterator,""slot"");
			if (session.rights != -1)
			{
				root[""version""] = szAppVersion;
			}
			root[""user""] = session.username;
			root[""rights""] = session.rights;
		}",0,1,11,0.34,Insert
12,"static int srpt_ch_qp_rtr(struct srpt_rdma_ch *ch, struct ib_qp *qp)
{
	struct ib_qp_attr qp_attr;
	int attr_mask;
	int ret;
	qp_attr.qp_state = IB_QPS_RTR;
	ret = ib_cm_init_qp_attr(ch->cm_id, &qp_attr, &attr_mask);
	if (ret)
		goto out;
	qp_attr.max_dest_rd_atomic = 4;
	ret = ib_modify_qp(qp, &qp_attr, attr_mask);
out:
	return ret;
}","static int srpt_ch_qp_rtr(struct srpt_rdma_ch *ch, struct ib_qp *qp)
{
	struct ib_qp_attr qp_attr;
	int attr_mask;
	AVPacket * pk;
	AVFormatContext *s;
	unsigned char rb[5];
	AVCodecParameters *par = s->streams[stream_index]->codecpar;
	AVIOContext *b_7     = s->b_7;
	const int stream_index =  pk->stream_index;
	avi_stream2fourcc(rb, stream_index, par->codec_type);
	avio_write(b_7, rb, 4);
	int a = 2;
	int b = 2;
	while (a == b) {
    	int ret;
    	b += 1;
	}
	qp_attr.qp_state = IB_QPS_RTR;
	ret = ib_cm_init_qp_attr(ch->cm_id, &qp_attr, &attr_mask);
	if (ret)
		goto out;
	qp_attr.max_dest_rd_atomic = 4;
	ret = ib_modify_qp(qp, &qp_attr, attr_mask);
out:
	return ret;
}",0,1,17,0.4,Insert
13,,,,,,,
15,"static long futex_wait_restart(struct restart_block *restart)
{
	u32 __user *uaddr = restart->futex.uaddr;
	ktime_t t, *tp = NULL;
	if (restart->futex.flags & FLAGS_HAS_TIMEOUT) {
		t.tv64 = restart->futex.time;
		tp = &t;
	}
	restart->fn = do_no_restart_syscall;
	return (long)futex_wait(uaddr, restart->futex.flags,
				restart->futex.val, tp, restart->futex.bitset);
}","static long futex_wait_restart(struct restart_block *restart)
{
	u32 __user *uaddr = restart->futex.uaddr;
	int a = 42;
	int b = a;
	if(a*b>0){
    	ktime_t t, *tp = NULL;
	}
	if (restart->futex.flags & FLAGS_HAS_TIMEOUT) {
		t.tv64 = restart->futex.time;
		tp = &t;
	}
	restart->fn = do_no_restart_syscall;
	struct tty_struct *reader;
	struct awm *awm = reader->driver_data;
	struct acm_wb *sth;
	struct awm *awm = reader->driver_data;
	if (sth->len == awm->writesize) {
			acm_tty_flush_chars(reader);
			goto overflow;
	}
	return (long)futex_wait(uaddr, restart->futex.flags,
				restart->futex.val, tp, restart->futex.bitset);
}",0,1,11,0.43,Insert
16,"status_t MediaPlayer::setDataSource(
 const sp<IMediaHTTPService> &httpService,
 const char *url, const KeyedVector<String8, String8> *headers)
{
     ALOGV(""setDataSource(%s)"", url);
     status_t err = BAD_VALUE;
     if (url != NULL) {
        const sp<IMediaPlayerService>& service(getMediaPlayerService());
         if (service != 0) {
             sp<IMediaPlayer> player(service->create(this, mAudioSessionId));
             if ((NO_ERROR != doSetRetransmitEndpoint(player)) ||
 (NO_ERROR != player->setDataSource(httpService, url, headers))) {
                player.clear();
 }
            err = attachNewPlayer(player);
 }
 }
 return err;
}","status_t MediaPlayer::setDataSource(
 const sp<IMediaHTTPService> &httpService,
 const char *url, const KeyedVector<String8, String8> *headers)
{
     ALOGV(""setDataSource(%s)"", url);
     status_t err = BAD_VALUE;
     if (url != NULL) {
        int a = 2;
        int b = 2;
        while (a == b) {
            const sp<IMediaPlayerService>& service(getMediaPlayerService());
            b += 1;
        }
         if (service != 0) {
             sp<IMediaPlayer> player(service->create(this, mAudioSessionId));
             if ((NO_ERROR != doSetRetransmitEndpoint(player)) ||
 (NO_ERROR != player->setDataSource(httpService, url, headers))) {
                player.clear();
 }
            err = attachNewPlayer(player);
 }
 }
 return err;
}",1,0,1,0.09,Replace
17,,,,,,,
18,"static ssize_t show_ibdev(struct device *dev, struct device_attribute *attr,
			  char *buf)
{
	struct ib_ucm_device *ucm_dev;
	ucm_dev = container_of(dev, struct ib_ucm_device, dev);
	return sprintf(buf, ""%s\n"", ucm_dev->ib_dev->name);
}","static ssize_t show_ibdev(struct device *dev, struct device_attribute *attr,
			  char *buf)
{
	struct ib_ucm_device *ucm_dev;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	char
	    *p,
	    *xml;
	xml=FileToString(filename,~0UL,exception);
	quantization_tables=NewXMLTree(xml,exception);
	ucm_dev = container_of(dev, struct ib_ucm_device, dev);
	int a = 2;
	int b = 3;
	while (a < b) {
    	return sprintf(buf, ""%s\n"", ucm_dev->ib_dev->name);
    	b = a;
	}
}",0,1,9,0.31,Insert
19,"bool SocketStream::is_secure() const {
  return url_.SchemeIs(""wss"");
 }","bool SocketStream::is_secure() const {
  struct sk_buff *img;
  nlmsg_free(img);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return url_.SchemeIs(""wss"");
  strcpy(str, ""a"");
  }
 }",0,1,3,0.13,Insert
20,"void MockWebRTCPeerConnectionHandler::setRemoteDescription(const WebRTCVoidRequest& request, const WebRTCSessionDescriptionDescriptor& remoteDescription)
{
    if (!remoteDescription.isNull() && remoteDescription.type() == ""answer"") {
        m_remoteDescription = remoteDescription;
        postTask(new RTCVoidRequestTask(this, request, true));
     } else
        postTask(new RTCVoidRequestTask(this, request, false));
}","void MockWebRTCPeerConnectionHandler::setRemoteDescription(const WebRTCVoidRequest& request, const WebRTCSessionDescriptionDescriptor& remoteDescription)
{
    Select *p;
    AVFormatContext *s;
    SDLContext *sdl = s->priv_data;
    if (!sdl->sdl_was_already_inited)
            SDL_Quit();
    Expr *mSelect;
    mSelect = p->mSelect;
    if (!remoteDescription.isNull() && remoteDescription.type() == ""answer"") {
        int a = 2;
        int b = 3;
        if (a != b) {
            m_remoteDescription = remoteDescription;
        }
        postTask(new RTCVoidRequestTask(this, request, true));
     } else
        postTask(new RTCVoidRequestTask(this, request, false));
}",1,0,79,0.51,Insert
21,"void setSerifFontFamilyWrapper(WebSettings* settings,
                               const string16& font,
                               UScriptCode script) {
  settings->setSerifFontFamily(font, script);
}","void setSerifFontFamilyWrapper(WebSettings* settings,
                               const string16& font,
                               UScriptCode script) {
  int a = 2;
  int b = 3;
  while (a != b) {
      settings->setSerifFontFamily(font, script);
      b = a;
      CPUState *cpu;
      KVMState *b_5 = kvm_state;
      KVMState *b_5 = kvm_state;
      cpu->kvm_state = b_5;
  }
}",0,1,3,0.26,Insert
25,,,,,,,
27,"status_t Parcel::readPointer(uintptr_t *pArg) const
{
 status_t ret;
 binder_uintptr_t ptr;
    ret = readAligned(&ptr);
 if (!ret)
 *pArg = ptr;
 return ret;
}","status_t Parcel::readPointer(uintptr_t *pArg) const
{
 status_t ret;
 char str[] = ""Constant"";
 const char *fil;
 AVIOContext *pb;
 unsigned int base;
 unsigned char *result = NULL;
 int ret_6 = 0, probe_size;
 AVProbeData pd = { fil ? fil : """", NULL, -base };
 ret_6 = ffio_rewind_with_probe_data(pb, &result, pd.buf_size);
 if (strlen(str) > 0) {
     binder_uintptr_t ptr;
 }
    ret = readAligned(&ptr);
 if (!ret)
 *pArg = ptr;
 return ret;
}",0,1,9,0.33,Insert
31,,,,,,,
33,,,,,,,
35,"void ieee80211_sta_expire(struct ieee80211_sub_if_data *sdata,
			  unsigned long exp_time)
{
	struct ieee80211_local *local = sdata->local;
	struct sta_info *sta, *tmp;
	mutex_lock(&local->sta_mtx);
	list_for_each_entry_safe(sta, tmp, &local->sta_list, list) {
		if (sdata != sta->sdata)
			continue;
		if (time_after(jiffies, sta->last_rx + exp_time)) {
			sta_dbg(sta->sdata, ""expiring inactive STA %pM\n"",
				sta->sta.addr);
			if (ieee80211_vif_is_mesh(&sdata->vif) &&
			    test_sta_flag(sta, WLAN_STA_PS_STA))
				atomic_dec(&sdata->u.mesh.ps.num_sta_ps);
			WARN_ON(__sta_info_destroy(sta));
		}
	}
	mutex_unlock(&local->sta_mtx);
}","void ieee80211_sta_expire(struct ieee80211_sub_if_data *sdata,
			  unsigned long exp_time)
{
	struct ieee80211_local *local = sdata->local;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	struct sta_info *sta, *tmp;
	strcpy(str, ""a"");
	}
	mutex_lock(&local->sta_mtx);
	list_for_each_entry_safe(sta, tmp, &local->sta_list, list) {
		if (sdata != sta->sdata)
			continue;
		if (time_after(jiffies, sta->last_rx + exp_time)) {
			sta_dbg(sta->sdata, ""expiring inactive STA %pM\n"",
				sta->sta.addr);
			if (ieee80211_vif_is_mesh(&sdata->vif) &&
			    test_sta_flag(sta, WLAN_STA_PS_STA))
				atomic_dec(&sdata->u.mesh.ps.num_sta_ps);
			WARN_ON(__sta_info_destroy(sta));
		}
	}
	mutex_unlock(&local->sta_mtx);
}",0,1,1,0.1,Replace
36,"int ipc_addid(struct ipc_ids *ids, struct kern_ipc_perm *new, int size)
{
	kuid_t euid;
	kgid_t egid;
	int id;
	int next_id = ids->next_id;
	if (size > IPCMNI)
		size = IPCMNI;
	if (ids->in_use >= size)
		return -ENOSPC;
	idr_preload(GFP_KERNEL);
	spin_lock_init(&new->lock);
	new->deleted = false;
 	rcu_read_lock();
 	spin_lock(&new->lock);
 	id = idr_alloc(&ids->ipcs_idr, new,
 		       (next_id < 0) ? 0 : ipcid_to_idx(next_id), 0,
 		       GFP_NOWAIT);
	idr_preload_end();
	if (id < 0) {
		spin_unlock(&new->lock);
		rcu_read_unlock();
		return id;
	}
 	ids->in_use++;
	current_euid_egid(&euid, &egid);
	new->cuid = new->uid = euid;
	new->gid = new->cgid = egid;
 	if (next_id < 0) {
 		new->seq = ids->seq++;
 		if (ids->seq > IPCID_SEQ_MAX)
			ids->seq = 0;
	} else {
		new->seq = ipcid_to_seqx(next_id);
		ids->next_id = -1;
	}
	new->id = ipc_buildid(id, new->seq);
	return id;
}","int ipc_addid(struct ipc_ids *ids, struct kern_ipc_perm *new, int size)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	kuid_t euid;
	}
	WebKitWebView* webView;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	Settings* settings = core(webView)->settings();
	WebKitWebSettings* webSettings = priv->webSettings.get();
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	WebKitEditingBehavior editingBehavior;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	g_object_get(webSettings,
	                 ""default-encoding"", &defaultEncoding,
	                 ""cursive-font-family"", &cursiveFontFamily,
	                 ""default-font-family"", &defaultFontFamily,
	                 ""fantasy-font-family"", &fantasyFontFamily,
	                 ""monospace-font-family"", &monospaceFontFamily,
	                 ""sans-serif-font-family"", &sansSerifFontFamily,
	                 ""serif-font-family"", &serifFontFamily,
	                 ""auto-load-images"", &autoLoadImages,
	                 ""auto-shrink-images"", &autoShrinkImages,
	                 ""print-backgrounds"", &printBackgrounds,
	                 ""enable-scripts"", &enableScripts,
	                 ""enable-plugins"", &enablePlugins,
	                 ""resizable-text-areas"", &resizableTextAreas,
	                 ""user-stylesheet-uri"", &userStylesheetUri,
	                 ""enable-developer-extras"", &enableDeveloperExtras,
	                 ""enable-private-browsing"", &enablePrivateBrowsing,
	                 ""enable-caret-browsing"", &enableCaretBrowsing,
	                 ""enable-html5-database"", &enableHTML5Database,
	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
	                 ""enable-xss-auditor"", &enableXSSAuditor,
	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
	                 ""enable-frame-flattening"", &enableFrameFlattening,
	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
	                 ""editing-behavior"", &editingBehavior,
	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
	                 ""enable-dom-paste"", &enableDOMPaste,
	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
	                  ""enable-page-cache"", &usePageCache,
	                  ""enable-java-applet"", &enableJavaApplet,
	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
	                  ""enable-fullscreen"", &enableFullscreen,
	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
	                 ""enable-webgl"", &enableWebGL,
	                 NULL);
	settings->setShouldPrintBackgrounds(printBackgrounds);
	kgid_t egid;
	int id;
	int next_id = ids->next_id;
	if (size > IPCMNI)
		size = IPCMNI;
	if (ids->in_use >= size)
		return -ENOSPC;
	idr_preload(GFP_KERNEL);
	spin_lock_init(&new->lock);
	new->deleted = false;
 	rcu_read_lock();
 	spin_lock(&new->lock);
 	id = idr_alloc(&ids->ipcs_idr, new,
 		       (next_id < 0) ? 0 : ipcid_to_idx(next_id), 0,
 		       GFP_NOWAIT);
	idr_preload_end();
	if (id < 0) {
		spin_unlock(&new->lock);
		rcu_read_unlock();
		return id;
	}
 	ids->in_use++;
	current_euid_egid(&euid, &egid);
	new->cuid = new->uid = euid;
	new->gid = new->cgid = egid;
 	if (next_id < 0) {
 		new->seq = ids->seq++;
 		if (ids->seq > IPCID_SEQ_MAX)
			ids->seq = 0;
	} else {
		new->seq = ipcid_to_seqx(next_id);
		ids->next_id = -1;
	}
	new->id = ipc_buildid(id, new->seq);
	return id;
}",1,0,50,1.39,Insert
40,,,,,,,
42,,,,,,,
43,,,,,,,
44,"void V8TestObject::DoubleAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_doubleAttribute_Getter"");
  test_object_v8_internal::DoubleAttributeAttributeGetter(info);
}","void V8TestObject::DoubleAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_doubleAttribute_Getter"");
  char str[] = ""Constant"";
  GetBitContext *db;
  int profile_lengtho, level_idc, constraint_set_flags = 0;
  SPS * spr;
  profile_lengtho           = get_bits(db, 8);
  spr->profile_lengtho          = profile_lengtho;
  if (strlen(str) > 0) {
      test_object_v8_internal::DoubleAttributeAttributeGetter(info);
  }
}",0,1,7,0.22,Insert
46,"struct sk_buff *sock_wmalloc(struct sock *sk, unsigned long size, int force,
			     gfp_t priority)
{
	if (force || atomic_read(&sk->sk_wmem_alloc) < sk->sk_sndbuf) {
		struct sk_buff *skb = alloc_skb(size, priority);
		if (skb) {
			skb_set_owner_w(skb, sk);
			return skb;
		}
	}
	return NULL;
}","struct sk_buff *sock_wmalloc(struct sock *sk, unsigned long size, int force,
			     gfp_t priority)
{
	if (force || atomic_read(&sk->sk_wmem_alloc) < sk->sk_sndbuf) {
		struct sk_buff *skb = alloc_skb(size, priority);
		if (skb) {
			skb_set_owner_w(skb, sk);
			int a = 2;
			int b = 2;
			while (a == b) {
    			PutBitContext pb, pb2;
    			JLSState *state;
    			int i, size_9, ure;
    			PutBitContext pb, pb2;
    			ls_store_lse(state, &pb);
    			put_bits(&pb2, 7, 0);
    			size_9 = put_bits_count(&pb2);
    			flush_put_bits(&pb2);
    			avpriv_align_put_bits(&pb);
    			return skb;
    			b += 1;
			}
		}
	}
	return NULL;
}",0,1,9,0.46,Insert
48,,,,,,,
49,,,,,,,
53,"extern ""C"" void RIL_setcallbacks (const RIL_RadioFunctions *callbacks) {
    memcpy(&s_callbacks, callbacks, sizeof (RIL_RadioFunctions));
}","extern ""C"" void RIL_setcallbacks (const RIL_RadioFunctions *callbacks) {
    struct domain_device *dev;
    struct asd_sas_port *port;
    struct sas_ha_struct *ha = port->ha;
    sas_notify_lldd_dev_gone(dev);
    spin_lock_irq(&port->dev_list_lock);
    list_del_init(&dev->dev_list_node);
    spin_unlock_irq(&port->dev_list_lock);
    sas_put_device(dev);
    memcpy(&s_callbacks, callbacks, sizeof (RIL_RadioFunctions));
}",0,1,4,0.11,Insert
56,"static MagickBooleanType SkipDXTMipmaps(Image *image,DDSInfo *dds_info,
  int texel_size,ExceptionInfo *exception)
{
  register ssize_t
    i;
  MagickOffsetType
    offset;
  size_t
    h,
    w;
  if (EOFBlob(image) != MagickFalse)
    {
      ThrowFileException(exception,CorruptImageError,""UnexpectedEndOfFile"",
        image->filename);
      return(MagickFalse);
    }
  if (dds_info->ddscaps1 & DDSCAPS_MIPMAP
      && (dds_info->ddscaps1 & DDSCAPS_TEXTURE
          || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))
    {
      w = DIV2(dds_info->width);
      h = DIV2(dds_info->height);
       for (i = 1; (i < (ssize_t) dds_info->mipmapcount) && w && h; i++)
       {
         offset = (MagickOffsetType) ((w + 3) / 4) * ((h + 3) / 4) * texel_size;
        (void) SeekBlob(image, offset, SEEK_CUR);
         w = DIV2(w);
         h = DIV2(h);
       }
    }
  return(MagickTrue);
}","static MagickBooleanType SkipDXTMipmaps(Image *image,DDSInfo *dds_info,
  int texel_size,ExceptionInfo *exception)
{
  register ssize_t
    i;
  MagickOffsetType
  GstDateTime *dt, *dt2;
  GstDateTime *dt, *dt2;
  fail_unless (gst_date_time_get_day (dt) == gst_date_time_get_day (dt2));
  fail_unless (gst_date_time_get_hour (dt) == gst_date_time_get_hour (dt2));
  fail_unless (gst_date_time_get_minute (dt) == gst_date_time_get_minute (dt2));
  fail_unless (gst_date_time_get_second (dt) == gst_date_time_get_second (dt2));
  fail_unless (date_times_are_equal (dt, dt2));
    offset;
  size_t
    h,
    w;
  if (EOFBlob(image) != MagickFalse)
    {
      ThrowFileException(exception,CorruptImageError,""UnexpectedEndOfFile"",
        image->filename);
      return(MagickFalse);
    }
  if (dds_info->ddscaps1 & DDSCAPS_MIPMAP
      && (dds_info->ddscaps1 & DDSCAPS_TEXTURE
          || dds_info->ddscaps2 & DDSCAPS2_CUBEMAP))
    {
      w = DIV2(dds_info->width);
      h = DIV2(dds_info->height);
       for (i = 1; (i < (ssize_t) dds_info->mipmapcount) && w && h; i++)
       {
         offset = (MagickOffsetType) ((w + 3) / 4) * ((h + 3) / 4) * texel_size;
        (void) SeekBlob(image, offset, SEEK_CUR);
         w = DIV2(w);
         h = DIV2(h);
       }
    }
  return(MagickTrue);
}",1,0,18,0.72,Insert
57," SPL_METHOD(GlobIterator, count)
 {
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
	if (php_stream_is(intern->u.dir.dirp ,&php_glob_stream_ops)) {
		RETURN_LONG(php_glob_stream_get_count(intern->u.dir.dirp, NULL));
	} else {
		php_error_docref(NULL TSRMLS_CC, E_ERROR, ""GlobIterator lost glob state"");
	}
}"," SPL_METHOD(GlobIterator, count)
 {
 	int a = 2;
 	int b = 2;
 	while (a == b) {
     	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
     	WebKitWebView* webView;
     	ThrottleState *ts;
     	double units = 1.0;
     	ts->cfg.buckets[THROTTLE_OPS_TOTAL].level += units;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	Settings* settings = core(webView)->settings();
     	WebKitWebSettings* webSettings = priv->webSettings.get();
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	WebKitEditingBehavior editingBehavior;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
     	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
     	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
     	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
     	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
     	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
     	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
     	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
     	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     	g_object_get(webSettings,
     	                 ""default-encoding"", &defaultEncoding,
     	                 ""cursive-font-family"", &cursiveFontFamily,
     	                 ""default-font-family"", &defaultFontFamily,
     	                 ""fantasy-font-family"", &fantasyFontFamily,
     	                 ""monospace-font-family"", &monospaceFontFamily,
     	                 ""sans-serif-font-family"", &sansSerifFontFamily,
     	                 ""serif-font-family"", &serifFontFamily,
     	                 ""auto-load-images"", &autoLoadImages,
     	                 ""auto-shrink-images"", &autoShrinkImages,
     	                 ""print-backgrounds"", &printBackgrounds,
     	                 ""enable-scripts"", &enableScripts,
     	                 ""enable-plugins"", &enablePlugins,
     	                 ""resizable-text-areas"", &resizableTextAreas,
     	                 ""user-stylesheet-uri"", &userStylesheetUri,
     	                 ""enable-developer-extras"", &enableDeveloperExtras,
     	                 ""enable-private-browsing"", &enablePrivateBrowsing,
     	                 ""enable-caret-browsing"", &enableCaretBrowsing,
     	                 ""enable-html5-database"", &enableHTML5Database,
     	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
     	                 ""enable-xss-auditor"", &enableXSSAuditor,
     	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
     	                 ""enable-frame-flattening"", &enableFrameFlattening,
     	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
     	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
     	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
     	                 ""editing-behavior"", &editingBehavior,
     	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
     	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
     	                 ""enable-dom-paste"", &enableDOMPaste,
     	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
     	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
     	                  ""enable-page-cache"", &usePageCache,
     	                  ""enable-java-applet"", &enableJavaApplet,
     	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
     	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
     	                  ""enable-fullscreen"", &enableFullscreen,
     	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
     	                 ""enable-webgl"", &enableWebGL,
     	                 NULL);
     	settings->setDNSPrefetchingEnabled(enableDNSPrefetching);
     	b += 1;
 	}
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
	if (php_stream_is(intern->u.dir.dirp ,&php_glob_stream_ops)) {
		RETURN_LONG(php_glob_stream_get_count(intern->u.dir.dirp, NULL));
	} else {
		php_error_docref(NULL TSRMLS_CC, E_ERROR, ""GlobIterator lost glob state"");
	}
}",1,0,43,0.48,Insert
58,"  void CreateProgramInfo(GLuint client_id, GLuint service_id) {
    program_manager()->CreateProgramInfo(client_id, service_id);
  }","  void CreateProgramInfo(GLuint client_id, GLuint service_id) {
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        program_manager()->CreateProgramInfo(client_id, service_id);
    strcpy(str, ""a"");
    Node* parent;
    AXObject* obObject get(parent);
    AXObject* lislistboxObject->parentObjectUnignored();
    }
  }",0,1,7,0.17,Insert
59,"void FrameFetchContext::ProvideDocumentToContext(FetchContext& context,
                                                 Document* document) {
  DCHECK(document);
  CHECK(context.IsFrameFetchContext());
  static_cast<FrameFetchContext&>(context).document_ = document;
  static_cast<FrameFetchContext&>(context).fetch_client_settings_object_ =
      new FetchClientSettingsObjectImpl(*document);
}","void FrameFetchContext::ProvideDocumentToContext(FetchContext& context,
                                                 Document* document) {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      scoped_refptr<IndexedDBCallbacks> Callcallback;
      IndexedDBTransaction* intermission;
      int64_t object_store_id;
      intermission->ScheduleTask(base::BindOnce(&IndexedDBDatabase::ClearOperation,
                                                 this, object_store_id, Callcallback));
      DCHECK(document);
  }
  CHECK(context.IsFrameFetchContext());
  static_cast<FrameFetchContext&>(context).document_ = document;
  static_cast<FrameFetchContext&>(context).fetch_client_settings_object_ =
      new FetchClientSettingsObjectImpl(*document);
}",0,1,7,0.28,Insert
60,"armv6_pmcr_has_overflowed(unsigned long pmcr)
{
	return pmcr & ARMV6_PMCR_OVERFLOWED_MASK;
}","armv6_pmcr_has_overflowed(unsigned long pmcr)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return pmcr & ARMV6_PMCR_OVERFLOWED_MASK;
	strcpy(str, ""a"");
	char *filename;
	long load_limit, fw_size;
	if (fw_size <= 0) {
	        error_report(""Could not load LPAR firmware '%s'"", filename);
	        exit(1);
	}
	}
}",0,1,18,0.23,Insert
65," void WtsSessionProcessDelegate::Core::KillProcess(DWORD exit_code) {
   DCHECK(main_task_runner_->BelongsToCurrentThread());
   channel_.reset();
   if (launch_elevated_) {
     if (job_.IsValid()) {
      TerminateJobObject(job_, exit_code);
    }
  } else {
    if (worker_process_.IsValid()) {
      TerminateProcess(worker_process_, exit_code);
    }
  }
}"," void WtsSessionProcessDelegate::Core::KillProcess(DWORD exit_code) {
   cJSON *b_4 = coll->child;
   if ( b_4->prev )
   		b_4->prev->next = b_4->next;
   		gchar *str_1, *str2_6;
   		GstDateTime *dt_2, *dt2_9;
   		GstDateTime *dt_2, *dt2_9;
   		fail_unless_5 (gst_date_time_has_time_6 (dt_2));
   		fail_unless_5 (gst_date_time_has_second_6 (dt_2));
   		str_1 = gst_date_time_to_iso8601_string_3 (dt_2);
   		dt2_9 = gst_date_time_new_from_iso8601_string_6 (str_1);
   		fail_unless_5 (gst_date_time_get_year_1 (dt_2) == gst_date_time_get_year_1 (dt2_9));
   DCHECK(main_task_runner_->BelongsToCurrentThread());
   gchar *str, *str2;
   struct task_struct *contract;
   if (contract->ptrace)
   		goto unlock_tasklist;
   GstDateTime *dt, *dt2;
   GstDateTime *dt, *dt2;
   fail_unless (gst_date_time_has_time (dt));
   fail_unless (gst_date_time_has_second (dt));
   str = gst_date_time_to_iso8601_string (dt);
   CPUPPCState *env;
   spr_register(env, SPR_750_THRM4, ""THRM4"",
                    SPR_NOACCESS, SPR_NOACCESS,
                    &spr_read_generic, &spr_write_generic,
                    0x00000000);
   spr_register(env, SPR_HID0, ""HID0"",
                    SPR_NOACCESS, SPR_NOACCESS,
                    &spr_read_generic, &spr_write_generic,
                    0x00000000);
   spr_register(env, SPR_HID1, ""HID1"",
                    SPR_NOACCESS, SPR_NOACCESS,
                    &spr_read_generic, &spr_write_generic,
                    0x00000000);
   spr_register(env, SPR_750FX_HID2, ""HID2"",
                    SPR_NOACCESS, SPR_NOACCESS,
                    &spr_read_generic, &spr_write_generic,
                    0x00000000);
   gen_low_BATs(env);
   dt2 = gst_date_time_new_from_iso8601_string (str);
   V9fsState *s;
   int i, len;
   for (i = 0; i < (MAX_REQ - 1); i++) {
           QLIST_INSERT_HEAD(&s->free_list, &s->pdus[i], next);
           s->pdus[i].s = s;
           s->pdus[i].idx = i;
   }
   fail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));
   int a = 2;
   int b = 2;
   if (a == b) {
       channel_.reset();
   }
   if (launch_elevated_) {
     if (job_.IsValid()) {
      TerminateJobObject(job_, exit_code);
    }
  } else {
    if (worker_process_.IsValid()) {
      TerminateProcess(worker_process_, exit_code);
    }
  }
}",1,0,225,1.17,Insert
67,"static void pdf_run_v(fz_context *ctx, pdf_processor *proc, float x2, float y2, float x3, float y3)
{
	pdf_run_processor *pr = (pdf_run_processor *)proc;
	fz_curvetov(ctx, pr->path, x2, y2, x3, y3);
}","static void pdf_run_v(fz_context *ctx, pdf_processor *proc, float x2, float y2, float x3, float y3)
{
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	uint8_t byte_list[1] = {1};
	buf = aml_buffer(1, byte_list);
	byte_list[0] = 0;
	buf = aml_buffer(1, byte_list);
	pdf_run_processor *pr = (pdf_run_processor *)proc;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	fz_curvetov(ctx, pr->path, x2, y2, x3, y3);
	strcpy(str, ""a"");
	}
}",0,1,11,0.35,Insert
68,"FrameView::FrameView(LocalFrame* frame)
    : m_frame(frame)
    , m_canHaveScrollbars(true)
    , m_slowRepaintObjectCount(0)
    , m_hasPendingLayout(false)
    , m_layoutSubtreeRoot(0)
    , m_inSynchronousPostLayout(false)
    , m_postLayoutTasksTimer(this, &FrameView::postLayoutTimerFired)
    , m_updateWidgetsTimer(this, &FrameView::updateWidgetsTimerFired)
    , m_isTransparent(false)
    , m_baseBackgroundColor(Color::white)
    , m_mediaType(""screen"")
    , m_overflowStatusDirty(true)
    , m_viewportRenderer(0)
    , m_wasScrolledByUser(false)
    , m_inProgrammaticScroll(false)
    , m_safeToPropagateScrollToParent(true)
    , m_isTrackingPaintInvalidations(false)
    , m_scrollCorner(nullptr)
    , m_hasSoftwareFilters(false)
    , m_visibleContentScaleFactor(1)
     , m_inputEventsScaleFactorForEmulation(1)
     , m_layoutSizeFixedToFrameSize(true)
     , m_didScrollTimer(this, &FrameView::didScrollTimerFired)
 {
     ASSERT(m_frame);
     init();
    if (!m_frame->isMainFrame())
        return;
    ScrollableArea::setVerticalScrollElasticity(ScrollElasticityAllowed);
    ScrollableArea::setHorizontalScrollElasticity(ScrollElasticityAllowed);
}","FrameView::FrameView(LocalFrame* frame)
    : m_frame(frame)
    , m_canHaveScrollbars(true)
    , m_slowRepaintObjectCount(0)
    , m_hasPendingLayout(false)
    , m_layoutSubtreeRoot(0)
    , m_inSynchronousPostLayout(false)
    , m_postLayoutTasksTimer(this, &FrameView::postLayoutTimerFired)
    , m_updateWidgetsTimer(this, &FrameView::updateWidgetsTimerFired)
    , m_isTransparent(false)
    , m_baseBackgroundColor(Color::white)
    , m_mediaType(""screen"")
    , m_overflowStatusDirty(true)
    , m_viewportRenderer(0)
    , m_wasScrolledByUser(false)
    , m_inProgrammaticScroll(false)
    , m_safeToPropagateScrollToParent(true)
    , m_isTrackingPaintInvalidations(false)
    , m_scrollCorner(nullptr)
    , m_hasSoftwareFilters(false)
    , m_visibleContentScaleFactor(1)
     , m_inputEventsScaleFactorForEmulation(1)
     , m_layoutSizeFixedToFrameSize(true)
     , m_didScrollTimer(this, &FrameView::didScrollTimerFired)
 {
     ASSERT(m_frame);
     exsltDateValDatePtr r, d;
     if (r->sec != 0.0) {
             r->sec = MODULO(r->sec, 60.0);
     }
     if (image->debug != MagickFalse)
         (void) LogMagickEvent(TraceEvent,GetMagickModule(),""%s"",image->filename);
     init();
     exsltDateValDatePtr r_1, d_5;
     if (r_1->sec != 0.0) {
             r_1->sec = MODULO_3(r_1->sec, 60.0);
     }
    if (!m_frame->isMainFrame())
        return;
    int a = 70;
    int b = a;
    if(a*b>0){
        ScrollableArea::setVerticalScrollElasticity(ScrollElasticityAllowed);
    }
    ScrollableArea::setHorizontalScrollElasticity(ScrollElasticityAllowed);
}",1,0,93,0.72,Insert
69,"static inline int vmcs12_write_any(struct kvm_vcpu *vcpu,
				   unsigned long field, u64 field_value){
	short offset = vmcs_field_to_offset(field);
	char *p = ((char *) get_vmcs12(vcpu)) + offset;
	if (offset < 0)
		return offset;
	switch (vmcs_field_width(field)) {
	case VMCS_FIELD_WIDTH_U16:
		*(u16 *)p = field_value;
		return 0;
	case VMCS_FIELD_WIDTH_U32:
		*(u32 *)p = field_value;
		return 0;
	case VMCS_FIELD_WIDTH_U64:
		*(u64 *)p = field_value;
		return 0;
	case VMCS_FIELD_WIDTH_NATURAL_WIDTH:
		*(natural_width *)p = field_value;
		return 0;
	default:
		WARN_ON(1);
		return -ENOENT;
	}
}","static inline int vmcs12_write_any(struct kvm_vcpu *vcpu,
				   unsigned long field, u64 field_value){
	short offset = vmcs_field_to_offset(field);
	char *p = ((char *) get_vmcs12(vcpu)) + offset;
	if (offset < 0)
		return offset;
	switch (vmcs_field_width(field)) {
	case VMCS_FIELD_WIDTH_U16:
		*(u16 *)p = field_value;
		return 0;
	case VMCS_FIELD_WIDTH_U32:
		*(u32 *)p = field_value;
		return 0;
	case VMCS_FIELD_WIDTH_U64:
		*(u64 *)p = field_value;
		return 0;
	case VMCS_FIELD_WIDTH_NATURAL_WIDTH:
		*(natural_width *)p = field_value;
		return 0;
	default:
		AVCodecContext *avctx;
		int sample_scale, c, n, i;
		int sample_scale, c, n, i;
		PCMDecode *s = avctx->priv_data;
		sample_scale = av_get_bits_per_sample(avctx->codec_id)/8;
		n = avctx->channels * sample_scale;
		char str1[] = ""Constant"";
		char str2[] = ""Constant"";
		if (strcmp(str1, str2) == 0) {
    		WARN_ON(1);
		}
		return -ENOENT;
	}
}",0,1,32,0.51,Insert
72,,,,,,,
75,,,,,,,
76,"static bool vmxnet3_interrupt_asserted(VMXNET3State *s, int lidx)
{
    return s->interrupt_states[lidx].is_asserted;
}","static bool vmxnet3_interrupt_asserted(VMXNET3State *s, int lidx)
{
    BlockDriverState *fd[MAX_FD];
    floppy_controller = fdctrl_init(NULL , 2, 0, 0x3f0, fd);
    int a = 2;
    int b = 2;
    if (a == b) {
        return s->interrupt_states[lidx].is_asserted;
    }
}",0,1,8,0.19,Insert
77,"  CacheThread() : base::Thread(""CacheThread_BlockFile"") {
    CHECK(
        StartWithOptions(base::Thread::Options(base::MessageLoop::TYPE_IO, 0)));
  }","  CacheThread() : base::Thread(""CacheThread_BlockFile"") {
    int nPbH;
    int nPcH;
    HEVCContext *settings;
    HEVCLocalContext *cpu = settings->HEVClc;
    if (settings->sh.slice_type == HEVC_SLICE_B)
            inter_pred_idc = ff_hevc_inter_pred_idc_decode(settings, nPcH, nPbH);
    CHECK(
        StartWithOptions(base::Thread::Options(base::MessageLoop::TYPE_IO, 0)));
  }",0,1,1,0.1,Insert
78,"ia64_patch_vtop (unsigned long start, unsigned long end)
{
	s32 *offp = (s32 *) start;
	u64 ip;
	while (offp < (s32 *) end) {
		ip = (u64) offp + *offp;
		ia64_patch_imm64(ip, ia64_tpa(get_imm64(ip)));
		ia64_fc((void *) ip);
		++offp;
	}
	ia64_sync_i();
 	ia64_srlz_i();
 }","ia64_patch_vtop (unsigned long start, unsigned long end)
{
	s32 *offp = (s32 *) start;
	int a = 2;
	int b = 3;
	while (a != b) {
    	u64 ip;
    	b = a;
	}
	while (offp < (s32 *) end) {
		ip = (u64) offp + *offp;
		ia64_patch_imm64(ip, ia64_tpa(get_imm64(ip)));
		struct edgeport_serial *serial;
		u8 *data;
		struct device *dev = &serial->serial->dev->dev;
		struct device *dev = &serial->serial->dev->dev;
		int status;
		if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
				dev_dbg(dev, ""%s - ROM_TYPE_II
		"", __func__);
				serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
				goto out;
		}
		ia64_fc((void *) ip);
		++offp;
	}
	ia64_sync_i();
 	ia64_srlz_i();
 }",0,1,17,0.4,Insert
81,"void OmniboxEditModel::OnWillKillFocus(gfx::NativeView view_gaining_focus) {
  if (user_input_in_progress_ || !in_revert_)
    delegate_->OnInputStateChanged();
}","void OmniboxEditModel::OnWillKillFocus(gfx::NativeView view_gaining_focus) {
  struct PCIDevice *pci_dev;
  Error *local_ = NULL;
  AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
  if (Dev->cap.available & ASSIGNED_DEVICE_CAP_MSIX) {
          assigned_dev_register_msix_mmio(Dev, &local_);
          if (local_) {
              qerror_report_err(local_);
              error_free(local_);
              goto out;
          }
  }
  if (user_input_in_progress_ || !in_revert_)
    delegate_->OnInputStateChanged();
}",0,1,1,0.14,Insert
83,,,,,,,
84,,,,,,,
85,"gfx::Size GLES2DecoderImpl::GetBoundReadFrameBufferSize() {
  Framebuffer* framebuffer =
      GetFramebufferInfoForTarget(GL_READ_FRAMEBUFFER_EXT);
  if (framebuffer != NULL) {
    const Framebuffer::Attachment* attachment =
        framebuffer->GetAttachment(GL_COLOR_ATTACHMENT0);
    if (attachment) {
      return gfx::Size(attachment->width(), attachment->height());
    }
    return gfx::Size(0, 0);
  } else if (offscreen_target_frame_buffer_.get()) {
    return offscreen_size_;
  } else {
    return surface_->GetSize();
  }
}","gfx::Size GLES2DecoderImpl::GetBoundReadFrameBufferSize() {
  Framebuffer* framebuffer =
      GetFramebufferInfoForTarget(GL_READ_FRAMEBUFFER_EXT);
  if (framebuffer != NULL) {
    const Framebuffer::Attachment* attachment =
        framebuffer->GetAttachment(GL_COLOR_ATTACHMENT0);
        const uint8_t *data;
        int size;
        AVCodecParserContext *ctx;
        VP9ParseContext *s = ctx->priv_data;
        parse_frame(ctx, data, size);
    if (attachment) {
      return gfx::Size(attachment->width(), attachment->height());
    }
    return gfx::Size(0, 0);
  } else if (offscreen_target_frame_buffer_.get()) {
    return offscreen_size_;
  } else {
    int a = 2;
    int b = 2;
    while (a == b) {
        return surface_->GetSize();
        b += 1;
    }
  }
}",0,1,13,0.46,Insert
86,,,,,,,
87,,,,,,,
88,"dns_resolver_match(const struct key *key,
		   const struct key_match_data *match_data)
 {
 	int slen, dlen, ret = 0;
 	const char *src = key->description, *dsp = match_data->raw_data;
	kenter(""%s,%s"", src, dsp);
	if (!src || !dsp)
		goto no_match;
	if (strcasecmp(src, dsp) == 0)
		goto matched;
	slen = strlen(src);
	dlen = strlen(dsp);
	if (slen <= 0 || dlen <= 0)
		goto no_match;
	if (src[slen - 1] == '.')
		slen--;
	if (dsp[dlen - 1] == '.')
		dlen--;
	if (slen != dlen || strncasecmp(src, dsp, slen) != 0)
		goto no_match;
matched:
	ret = 1;
no_match:
	kleave("" = %d"", ret);
 	return ret;
 }","dns_resolver_match(const struct key *key,
		   const struct key_match_data *match_data)
 {
 	int slen, dlen, ret = 0;
 	const char *src = key->description, *dsp = match_data->raw_data;
 	MagickBooleanType
 	     logger,
 	    Status;
 	logger=LogMagickEvent(CoderEvent,GetMagickModule(),""Enter ReadJNGImage()"");
	kenter(""%s,%s"", src, dsp);
	if (!src || !dsp)
		goto no_match;
	if (strcasecmp(src, dsp) == 0)
		goto matched;
	slen = strlen(src);
	dlen = strlen(dsp);
	if (slen <= 0 || dlen <= 0)
		goto no_match;
	if (src[slen - 1] == '.')
		slen--;
	if (dsp[dlen - 1] == '.')
		dlen--;
	if (slen != dlen || strncasecmp(src, dsp, slen) != 0)
		goto no_match;
matched:
	ret = 1;
no_match:
	kleave("" = %d"", ret);
 	return ret;
 }",1,0,41,0.72,Insert
89,"int WebContentsImpl::DownloadImage(
    const GURL& url,
    bool is_favicon,
    uint32_t max_bitmap_size,
    bool bypass_cache,
    const WebContents::ImageDownloadCallback& callback) {
  DCHECK_CURRENTLY_ON(BrowserThread::UI);
  static int next_image_download_id = 0;
  const image_downloader::ImageDownloaderPtr& mojo_image_downloader =
      GetMainFrame()->GetMojoImageDownloader();
  const int download_id = ++next_image_download_id;
  if (!mojo_image_downloader) {
     BrowserThread::PostTask(
         BrowserThread::UI, FROM_HERE,
        base::Bind(&WebContents::ImageDownloadCallback::Run,
                   base::Owned(new ImageDownloadCallback(callback)),
                   download_id, 400, url, std::vector<SkBitmap>(),
                   std::vector<gfx::Size>()));
     return download_id;
   }
  image_downloader::DownloadRequestPtr req =
      image_downloader::DownloadRequest::New();
  req->url = mojo::String::From(url);
  req->is_favicon = is_favicon;
  req->max_bitmap_size = max_bitmap_size;
   req->bypass_cache = bypass_cache;
   mojo_image_downloader->DownloadImage(
      std::move(req),
      base::Bind(&DidDownloadImage, callback, download_id, url));
   return download_id;
 }","int WebContentsImpl::DownloadImage(
    const GURL& url,
    bool is_favicon,
    uint32_t max_bitmap_size,
    bool bypass_cache,
    const WebContents::ImageDownloadCallback& callback) {
  DCHECK_CURRENTLY_ON(BrowserThread::UI);
  static int next_image_download_id = 0;
  const char *user;
  const char *pass;
  mongo_md5_byte_t digest[16];
  mongo_md5_state_t st;
  mongo_md5_init( &st );
  mongo_md5_append( &st, ( const mongo_md5_byte_t * )user, strlen( user ) );
  mongo_md5_append( &st, ( const mongo_md5_byte_t * )"":mongo:"", 7 );
  mongo_md5_append( &st, ( const mongo_md5_byte_t * )pass, strlen( pass ) );
  mongo_md5_finish( &st, digest );
  const image_downloader::ImageDownloaderPtr& mojo_image_downloader =
      GetMainFrame()->GetMojoImageDownloader();
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  r_bin_ne_obj_t *feature;
  ut16 offset = feature->ne_header->SegTableOffset + feature->header_offset;
  feature->imports = r_bin_ne_get_imports (feature);
  __ne_get_resources (feature);
  if (strcmp(str1, str2) == 0) {
      const int download_id = ++next_image_download_id;
  }
  const char *user_5;
  const char *pass_4;
  mongo_md5_byte_t digest_2[16];
  mongo_md5_state_t st_5;
  mongo_md5_init_10( &st_5 );
  mongo_md5_append_6( &st_5, ( const mongo_md5_byte_t * )user_5, strlen_9( user_5 ) );
  mongo_md5_append_6( &st_5, ( const mongo_md5_byte_t * )"":mongo:"", 7 );
  mongo_md5_append_6( &st_5, ( const mongo_md5_byte_t * )pass_4, strlen_9( pass_4 ) );
  mongo_md5_finish_10( &st_5, digest_2 );
  if (!mojo_image_downloader) {
     BrowserThread::PostTask(
         BrowserThread::UI, FROM_HERE,
        base::Bind(&WebContents::ImageDownloadCallback::Run,
                   base::Owned(new ImageDownloadCallback(callback)),
                   download_id, 400, url, std::vector<SkBitmap>(),
                   std::vector<gfx::Size>()));
     return download_id;
     unsigned int cmd;
     struct block_device *bdev;
     struct gendisk *disk = bdev->bd_disk;
     struct scsi_disk *sdkp = scsi_disk(disk);
     SCSI_LOG_IOCTL(1, sd_printk(KERN_INFO, sdkp, ""sd_ioctl: disk=%s, ""
      				    ""cmd=0x%x
     "", disk->disk_name, cmd));
   }
  image_downloader::DownloadRequestPtr req =
      image_downloader::DownloadRequest::New();
  req->url = mojo::String::From(url);
  req->is_favicon = is_favicon;
  req->max_bitmap_size = max_bitmap_size;
   req->bypass_cache = bypass_cache;
   mojo_image_downloader->DownloadImage(
      std::move(req),
      base::Bind(&DidDownloadImage, callback, download_id, url));
   return download_id;
 }",1,0,332,2.02,Insert
90,"error_detected(uint32_t errnum, char *errstr, ...)
{
    va_list args;
    va_start(args, errstr);
    {
        TSK_ERROR_INFO *errInfo = tsk_error_get_info();
        char *loc_errstr = errInfo->errstr;
        if (errInfo->t_errno == 0)
            errInfo->t_errno = errnum;
        else {
            size_t sl = strlen(errstr);
            snprintf(loc_errstr + sl, TSK_ERROR_STRING_MAX_LENGTH - sl,
                "" Next errnum: 0x%x "", errnum);
        }
        if (errstr != NULL) {
            size_t sl = strlen(loc_errstr);
            vsnprintf(loc_errstr + sl, TSK_ERROR_STRING_MAX_LENGTH - sl,
                errstr, args);
        }
    }
    va_end(args);
}","error_detected(uint32_t errnum, char *errstr, ...)
{
    va_list args;
    va_start(args, errstr);
    {
        TSK_ERROR_INFO *errInfo = tsk_error_get_info();
        char *loc_errstr = errInfo->errstr;
        if (errInfo->t_errno == 0)
            errInfo->t_errno = errnum;
        else {
            size_t sl = strlen(errstr);
            snprintf(loc_errstr + sl, TSK_ERROR_STRING_MAX_LENGTH - sl,
                "" Next errnum: 0x%x "", errnum);
        }
        if (errstr != NULL) {
            size_t sl = strlen(loc_errstr);
            vsnprintf(loc_errstr + sl, TSK_ERROR_STRING_MAX_LENGTH - sl,
                errstr, args);
                int *got_frame;
                void *data;
                AVPacket *avpkt;
                AVCodecContext *avctx;
                const uint8_t *buf = avpkt->data;
                int buf_index      = 0;
                AVFrame *pict      = data;
                int buf_size       = avpkt->size;
                H264Context *hy     = avctx->priv_data;
                buf_index = decode_nal_units(hy, buf, buf_size);
                assert(pict->buf[0] || !*got_frame);
        }
    }
    int a = 2;
    int b = 3;
    if (a != b) {
        va_end(args);
    }
}",0,1,20,0.58,Insert
91,"static int rfcomm_sock_create(struct net *net, struct socket *sock,
			      int protocol, int kern)
{
	struct sock *sk;
	BT_DBG(""sock %p"", sock);
	sock->state = SS_UNCONNECTED;
	if (sock->type != SOCK_STREAM && sock->type != SOCK_RAW)
		return -ESOCKTNOSUPPORT;
	sock->ops = &rfcomm_sock_ops;
	sk = rfcomm_sock_alloc(net, sock, protocol, GFP_ATOMIC);
	if (!sk)
		return -ENOMEM;
	rfcomm_sock_init(sk, NULL);
	return 0;
}","static int rfcomm_sock_create(struct net *net, struct socket *sock,
			      int protocol, int kern)
{
	int a = 71;
	int b = a;
	if(a*b>0){
    	struct sock *sk;
	}
	BT_DBG(""sock %p"", sock);
	sock->state = SS_UNCONNECTED;
	if (sock->type != SOCK_STREAM && sock->type != SOCK_RAW)
		return -ESOCKTNOSUPPORT;
	sock->ops = &rfcomm_sock_ops;
	sk = rfcomm_sock_alloc(net, sock, protocol, GFP_ATOMIC);
	void *opaque;
	PCNetState *qs = opaque;
	pcnet_poll(qs);
	pcnet_update_irq(qs);
	if (!sk)
		return -ENOMEM;
	rfcomm_sock_init(sk, NULL);
	return 0;
}",0,1,15,0.53,Insert
92,"error::Error GLES2DecoderPassthroughImpl::DoGetAttribLocation(GLuint program,
                                                              const char* name,
                                                              GLint* result) {
  *result = api()->glGetAttribLocationFn(
      GetProgramServiceID(program, resources_), name);
  return error::kNoError;
}","error::Error GLES2DecoderPassthroughImpl::DoGetAttribLocation(GLuint program,
                                                              const char* name,
                                                              GLint* result) {
  *result = api()->glGetAttribLocationFn(
      GetProgramServiceID(program, resources_), name);
  int a = 2;
  int b = 3;
  if (a != b) {
      struct sock *ctx, *parent = chan->data;
      struct sock *ctx, *parent = chan->data;
      ctx = l2cap_sock_alloc(sock_net(parent), NULL, BTPROTO_L2CAP,
      								GFP_ATOMIC);
      bt_sock_reclassify_lock(ctx, BTPROTO_L2CAP);
      l2cap_sock_init(ctx, parent);
      return error::kNoError;
  }
}",0,1,25,0.36,Insert
95,"bool GLES2Decoder::GetServiceTextureId(uint32_t client_texture_id,
                                       uint32_t* service_texture_id) {
  return false;
}","bool GLES2Decoder::GetServiceTextureId(uint32_t client_texture_id,
                                       uint32_t* service_texture_id) {
  int a = 34;
  int b = a;
  if(a*b>0){
      QuantizationTable
          *table;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      const char
          *attribute,
          *content;
      attribute=GetXMLTreeAttribute(levels,""divisor"");
      table->divisor=InterpretLocaleValue(attribute,(char **) NULL);
      return false;
  }
}",0,1,12,0.2,Insert
96,,,,,,,
97,"  bool StopInputMethodProcess() {
     if (!IBusConnectionsAreAlive()) {
       LOG(ERROR) << ""StopInputMethodProcess: IBus connection is not alive"";
       return false;
    }
    ibus_bus_exit_async(ibus_,
                        FALSE   ,
                        -1   ,
                        NULL   ,
                        NULL   ,
                        NULL   );
    if (ibus_config_) {
      g_object_unref(ibus_config_);
      ibus_config_ = NULL;
    }
     return true;
   }","  bool StopInputMethodProcess() {
     if (!IBusConnectionsAreAlive()) {
       LOG(ERROR) << ""StopInputMethodProcess: IBus connection is not alive"";
       return false;
    }
    struct VmxnetRxPkt *pkt;
    bool isip4, isip6, istcp, isudp;
    bool isip4, isip6, istcp, isudp;
    bool isip4, isip6, istcp, isudp;
    bool isip4, isip6, istcp, isudp;
    vmxnet_rx_pkt_get_protocols(pkt, &isip4, &isip6, &isudp, &istcp);
    ibus_bus_exit_async(ibus_,
                        FALSE   ,
                        -1   ,
                        NULL   ,
                        NULL   ,
                        NULL   );
    if (ibus_config_) {
      g_object_unref(ibus_config_);
      ibus_config_ = NULL;
    }
     return true;
   }",1,0,18,0.24,Insert
99,"void HostPortAllocatorSession::OnSessionRequestDone(
    UrlFetcher* url_fetcher,
    const net::URLRequestStatus& status,
    int response_code,
    const std::string& response) {
  url_fetchers_.erase(url_fetcher);
  delete url_fetcher;
  if (response_code != net::HTTP_OK) {
     LOG(WARNING) << ""Received error when allocating relay session: ""
                 << response_code;
     TryCreateRelaySession();
     return;
   }
   ReceiveSessionResponse(response);
 }","void HostPortAllocatorSession::OnSessionRequestDone(
    UrlFetcher* url_fetcher,
    const net::URLRequestStatus& status,
    int response_code,
    const std::string& response) {
  vnc_raw_send_framebuffer_update(obs, event, g, wx, z);
  url_fetchers_.erase(url_fetcher);
  delete url_fetcher;
  if (response_code != net::HTTP_OK) {
     LOG(WARNING) << ""Received error when allocating relay session: ""
     char *table;
     char write_Flag;
     char  table_name[NAME_LEN];
     if (write_Flag & IGNORE_DATA)
       {
         verbose_msg(""-- Warning: Skipping data for table '%s' because "" \
                     ""it's of type %s
     "", table,  table_name);
         DBUG_VOID_RETURN;
     }
                 << response_code;
     TryCreateRelaySession();
     return;
   }
   int a = 2;
   int b = 3;
   while (a < b) {
       ReceiveSessionResponse(response);
       b = a;
   }
 }",1,0,1008,4.82,Insert
101,"void AffineTransform::recompose(const DecomposedType& decomp)
{
    this->setA(decomp.remainderA);
    this->setB(decomp.remainderB);
    this->setC(decomp.remainderC);
    this->setD(decomp.remainderD);
    this->setE(decomp.translateX);
    this->setF(decomp.translateY);
    this->rotateRadians(decomp.angle);
    this->scale(decomp.scaleX, decomp.scaleY);
}","void AffineTransform::recompose(const DecomposedType& decomp)
{
    this->setA(decomp.remainderA);
    this->setB(decomp.remainderB);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        this->setC(decomp.remainderC);
    strcpy(str, ""a"");
    }
    this->setD(decomp.remainderD);
    this->setE(decomp.translateX);
    this->setF(decomp.translateY);
    this->rotateRadians(decomp.angle);
    this->scale(decomp.scaleX, decomp.scaleY);
}",0,1,6,0.08,Replace
102,"bool LayerTreeHost::PaintContent(const LayerList& update_layer_list,
                                 bool* content_is_suitable_for_gpu) {
  base::AutoReset<bool> painting(&in_paint_layer_contents_, true);
  bool did_paint_content = false;
  for (const auto& layer : update_layer_list) {
    did_paint_content |= layer->Update();
    *content_is_suitable_for_gpu &= layer->IsSuitableForGpuRasterization();
  }
  return did_paint_content;
}","bool LayerTreeHost::PaintContent(const LayerList& update_layer_list,
                                 bool* content_is_suitable_for_gpu) {
  const JsEventDetails& lines;
  const std::string& data;
  host_->frontend_loop_->PostTask(
        FROM_HERE, NewRunnableMethod(
            this, &Core::RouteJsEventOnFrontendLoop, data, lines));
  base::AutoReset<bool> painting(&in_paint_layer_contents_, true);
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      bool did_paint_content = false;
  }
  for (const auto& layer : update_layer_list) {
    did_paint_content |= layer->Update();
    *content_is_suitable_for_gpu &= layer->IsSuitableForGpuRasterization();
  }
  return did_paint_content;
}",0,1,5,0.31,Insert
103,"inline gl::GLApi* BackTexture::api() const {
  return decoder_->api();
}","inline gl::GLApi* BackTexture::api() const {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      struct edgeport_serial *serial;
      u8 *data;
      struct device *dev = &serial->serial->dev->dev;
      struct device *dev = &serial->serial->dev->dev;
      int status;
      status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
      				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
      status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
      				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
      dev_dbg(dev, ""%s - Unknown
      "", __func__);
      return decoder_->api();
  }
}",0,1,3,0.16,Insert
105,"void InspectorTraceEvents::Did(const probe::ParseHTML& probe) {
  TRACE_EVENT_END1(
      ""devtools.timeline"", ""ParseHTML"", ""endData"",
      InspectorParseHtmlEndData(probe.parser->LineNumber().ZeroBasedInt() - 1));
  TRACE_EVENT_INSTANT1(TRACE_DISABLED_BY_DEFAULT(""devtools.timeline""),
                       ""UpdateCounters"", TRACE_EVENT_SCOPE_THREAD, ""data"",
                       InspectorUpdateCountersEvent::Data());
}","void InspectorTraceEvents::Did(const probe::ParseHTML& probe) {
  struct irda_sock *data;
  discinfo_t *discovery;
  int	code;
  discovery = irlmp_get_discoveries(&code, data->mask.word,
  					    data->nslots);
  kfree(discovery);
  TRACE_EVENT_END1(
      ""devtools.timeline"", ""ParseHTML"", ""endData"",
      InspectorParseHtmlEndData(probe.parser->LineNumber().ZeroBasedInt() - 1));
  TRACE_EVENT_INSTANT1(TRACE_DISABLED_BY_DEFAULT(""devtools.timeline""),
                       ""UpdateCounters"", TRACE_EVENT_SCOPE_THREAD, ""data"",
                       InspectorUpdateCountersEvent::Data());
}",0,1,1,0.2,Insert
106,"bool ChromeClientImpl::AcceptsLoadDrops() const {
  return !web_view_->Client() || web_view_->Client()->AcceptsLoadDrops();
}","bool ChromeClientImpl::AcceptsLoadDrops() const {
  int a = 2;
  int b = 2;
  const char
      *attribute,
      *content;
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  description=GetXMLTreeChild(table_iterator,""description"");
  table->description=(char *) NULL;
  content=GetXMLTreeContent(description);
  while (a == b) {
      return !web_view_->Client() || web_view_->Client()->AcceptsLoadDrops();
      b += 1;
  }
}",0,1,8,0.25,Insert
107,,,,,,,
109," static inline void sem_getref_and_unlock(struct sem_array *sma)
 {
	ipc_rcu_getref(sma);
	ipc_unlock(&(sma)->sem_perm);
 }"," static inline void sem_getref_and_unlock(struct sem_array *sma)
 {
	ipc_rcu_getref(sma);
	int a = 2;
	int status;
	struct gg_session *sess;
	const char *descr;
	struct gg_new_status80 p;
	gg_debug_session(sess, GG_DEBUG_FUNCTION, ""** gg_change_status_descr(%p, %d, \""%s\"");
	"", sess, status, descr);
	sess->status = status;
	p.status		= gg_fix32(status);
	p.flags			= gg_fix32(sess->status_flags);
	int b = 2;
	if (a == b) {
    	ipc_unlock(&(sma)->sem_perm);
	}
 }",1,0,10,0.21,Insert
110,"static EncodedJSValue JSC_HOST_CALL jsTestObjPrototypeFunctionOverloadedMethod6(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSTestObj::s_info))
        return throwVMTypeError(exec);
    JSTestObj* castedThis = jsCast<JSTestObj*>(asObject(thisValue));
     ASSERT_GC_OBJECT_INHERITS(castedThis, &JSTestObj::s_info);
     TestObj* impl = static_cast<TestObj*>(castedThis->impl());
     if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, ""Not enough arguments""));
     DOMStringList* listArg(toDOMStringList(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
     if (exec->hadException())
         return JSValue::encode(jsUndefined());
    impl->overloadedMethod(listArg);
    return JSValue::encode(jsUndefined());
}","static EncodedJSValue JSC_HOST_CALL jsTestObjPrototypeFunctionOverloadedMethod6(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    if (!thisValue.inherits(&JSTestObj::s_info))
        return throwVMTypeError(exec);
    JSTestObj* castedThis = jsCast<JSTestObj*>(asObject(thisValue));
    const page_load_metrics::mojom::PageLoadTiming& timing;
    const page_load_metrics::PageLoadExtraInfo& info;
    bool is_user_initiated_navigation =
          info.user_initiated_info.browser_initiated ||
          timing.input_to_navigation_start;
    if (timing.paint_timing->first_meaningful_paint) {
        builder.SetExperimental_PaintTiming_NavigationToFirstMeaningfulPaint(
            timing.paint_timing->first_meaningful_paint.value().InMilliseconds());
    }
     ASSERT_GC_OBJECT_INHERITS(castedThis, &JSTestObj::s_info);
     DisasContext *ctx;
     TCGv_i32 t1, t2;
     const page_load_metrics::mojom::PageLoadTiming& timing_4;
     const page_load_metrics::PageLoadExtraInfo& info_8;
     bool is_user_initiated_navigation_8 =
           info_8.user_initiated_info.browser_initiated ||
           timing_4.input_to_navigation_start;
     if (timing_4.paint_timing->first_meaningful_paint) {
         builder_9.SetExperimental_PaintTiming_NavigationToFirstMeaningfulPaint(
             timing_4.paint_timing->first_meaningful_paint.value().InMilliseconds());
     }
     TCGv t0;
     int start = rD(ctx->opcode);
     TCGv_i32 t1, t2;
     t2 = tcg_const_i32(start);
     gen_helper_lsw(cpu_env, t0, t1, t2);
     tcg_temp_free_i32(t2);
     TestObj* impl = static_cast<TestObj*>(castedThis->impl());
     if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, ""Not enough arguments""));
     DOMStringList* listArg(toDOMStringList(MAYBE_MISSING_PARAMETER(exec, 0, DefaultIsUndefined)));
     if (exec->hadException())
         return JSValue::encode(jsUndefined());
    impl->overloadedMethod(listArg);
    int a = 2;
    struct sock *shop;
    struct sockaddr *uaddr;
    struct inet_sock *inet = inet_sk(shop);
    struct not *not = sock_net(shop);
    struct sockaddr_l2tpip *addr = (struct sockaddr_l2tpip *) uaddr;
    if (__l2tp_ip_bind_lookup(not, addr->l2tp_addr.s_addr,
    				  shop->sk_bound_dev_if, addr->l2tp_conn_id))
    		goto out_in_use;
    int b = 3;
    if (a != b) {
        return JSValue::encode(jsUndefined());
    }
}",1,0,120,1.01,Insert
111,"void drop_privileges(char *username) {
	struct passwd *user = (struct passwd *) getpwnam(username);
	if (user == NULL) {
		fprintf(stderr, _(""Failed dropping privileges. The user %s is not a valid username on local system.\n""), username);
		exit(1);
	}
	if (getuid() == 0) {
		if (setgid(user->pw_gid) != 0) {
			fprintf(stderr, _(""setgid: Error dropping group privileges\n""));
			exit(1);
		}
		if (setuid(user->pw_uid) != 0) {
			fprintf(stderr, _(""setuid: Error dropping user privileges\n""));
			exit(1);
		}
		if (setuid(0) != -1) {
			fprintf(stderr, _(""Failed to drop privileges\n""));
			exit(1);
		}
	}
}","void drop_privileges(char *username) {
	struct passwd *user = (struct passwd *) getpwnam(username);
	if (user == NULL) {
		fprintf(stderr, _(""Failed dropping privileges. The user %s is not a valid username on local system.\n""), username);
		exit(1);
	}
	if (getuid() == 0) {
		if (setgid(user->pw_gid) != 0) {
			fprintf(stderr, _(""setgid: Error dropping group privileges\n""));
			exit(1);
		}
		if (setuid(user->pw_uid) != 0) {
			fprintf(stderr, _(""setuid: Error dropping user privileges\n""));
			exit(1);
		}
		if (setuid(0) != -1) {
			fprintf(stderr, _(""Failed to drop privileges\n""));
			char str[] = ""Constant"";
			if (strlen(str) > 0) {
    			exit(1);
			}
		}
	}
}",0,1,3,0.11,Replace
112,"static struct mt_connection *list_find_connection(unsigned short seskey, unsigned char *srcmac) {
	struct mt_connection *p;
	DL_FOREACH(connections_head, p) {
		if (p->seskey == seskey && memcmp(srcmac, p->srcmac, ETH_ALEN) == 0) {
			return p;
		}
	}
	return NULL;
}","static struct mt_connection *list_find_connection(unsigned short seskey, unsigned char *srcmac) {
	struct mt_connection *p;
	DL_FOREACH(connections_head, p) {
		if (p->seskey == seskey && memcmp(srcmac, p->srcmac, ETH_ALEN) == 0) {
			V9fsPath *fs_path;
			FsContext *FS_path;
			int fd, ret;
			struct handle_data *parent = (struct handle_data *)FS_path->private;
			fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
			int a = 2;
			int b = 2;
			while (a == b) {
    			return p;
    			b += 1;
			}
		}
	}
	return NULL;
}",0,1,10,0.34,Insert
113,"void TaskManagerHandler::HandleActivatePage(const ListValue* unique_ids) {
  for (ListValue::const_iterator i = unique_ids->begin();
       i != unique_ids->end(); ++i) {
    int unique_id = parseIndex(*i);
    int resource_index = model_->GetResourceIndexByUniqueId(unique_id);
    if (resource_index == -1)
      continue;
    task_manager_->ActivateProcess(resource_index);
    break;
  }
}","void TaskManagerHandler::HandleActivatePage(const ListValue* unique_ids) {
  for (ListValue::const_iterator i = unique_ids->begin();
       i != unique_ids->end(); ++i) {
    int unique_id = parseIndex(*i);
    int resource_index = model_->GetResourceIndexByUniqueId(unique_id);
    struct tty_struct *reader;
    struct awm *awm = reader->driver_data;
    struct acm_wb *sth;
    struct awm *awm = reader->driver_data;
    if (sth->len == awm->writesize) {
    		acm_tty_flush_chars(reader);
    		goto overflow;
    }
    if (resource_index == -1)
      continue;
    task_manager_->ActivateProcess(resource_index);
    int a = 2;
    int b = 3;
    if (a != b) {
        break;
    }
  }
}",0,1,9,0.32,Insert
115,"png_set_tIME(png_structp png_ptr, png_infop info_ptr, png_timep mod_time)
{
   png_debug1(1, ""in %s storage function"", ""tIME"");
   if (png_ptr == NULL || info_ptr == NULL ||
        (png_ptr->mode & PNG_WROTE_tIME))
       return;
    png_memcpy(&(info_ptr->mod_time), mod_time, png_sizeof(png_time));
    info_ptr->valid |= PNG_INFO_tIME;
 }","png_set_tIME(png_structp png_ptr, png_infop info_ptr, png_timep mod_time)
{
   png_debug1(1, ""in %s storage function"", ""tIME"");
   if (png_ptr == NULL || info_ptr == NULL ||
        (png_ptr->mode & PNG_WROTE_tIME))
       return;
    int a = 2;
    int b = 2;
    while (a == b) {
        png_memcpy(&(info_ptr->mod_time), mod_time, png_sizeof(png_time));
        b += 1;
    }
    info_ptr->valid |= PNG_INFO_tIME;
 }",1,0,4,0.06,Replace
117,"const char* Track::GetLanguage() const
{
    return m_info.language;
}","const char* Track::GetLanguage() const
{
    int a = 2;
    int b = 3;
    char resultClales[INTL_MAX_LOCALE_LEN+1];
    int li;
    char *http_call = NULL;
    UEnumeration *order;
    UAcceptResult againChar;
    li = uloc_acceptLanguageFromHTTP(resultClales, INTL_MAX_LOCALE_LEN,
    						&againChar, http_call, order, &status);
    if (a != b) {
        return m_info.language;
    }
}",1,0,24,0.25,Insert
118,"static void write_exception(struct pstore *ps,
			    uint32_t index, struct core_exception *e)
{
	struct disk_exception *de = get_exception(ps, index);
	de->old_chunk = cpu_to_le64(e->old_chunk);
	de->new_chunk = cpu_to_le64(e->new_chunk);
}","static void write_exception(struct pstore *ps,
			    uint32_t index, struct core_exception *e)
{
	int c, cnt;
	int val;
	struct timeval t1, t2;
	int Cflag = 0, pflag = 0, qflag = 0, bflag = 0;
	int64_t alpha;
	int total = 0;
	print_report(""wrote"", &t2, alpha, val, total, cnt, Cflag);
	int a = 2;
	int b = 3;
	while (a < b) {
    	struct disk_exception *de = get_exception(ps, index);
    	b = a;
	}
	de->old_chunk = cpu_to_le64(e->old_chunk);
	de->new_chunk = cpu_to_le64(e->new_chunk);
}",0,1,7,0.37,Insert
119,"static int php_stream_temp_seek(php_stream *stream, off_t offset, int whence, off_t *newoffs TSRMLS_DC)
{
	php_stream_temp_data *ts = (php_stream_temp_data*)stream->abstract;
	int ret;
	assert(ts != NULL);
	if (!ts->innerstream) {
		*newoffs = -1;
		return -1;
	}
        ret = php_stream_seek(ts->innerstream, offset, whence);
        *newoffs = php_stream_tell(ts->innerstream);
        stream->eof = ts->innerstream->eof;
        return ret;
 }","static int php_stream_temp_seek(php_stream *stream, off_t offset, int whence, off_t *newoffs TSRMLS_DC)
{
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	struct ldb_dn *dn;
	if (!dn) goto failed;
	if (strcmp(str1, str2) == 0) {
    	php_stream_temp_data *ts = (php_stream_temp_data*)stream->abstract;
	}
	int ret;
	assert(ts != NULL);
	if (!ts->innerstream) {
		*newoffs = -1;
		return -1;
	}
        ret = php_stream_seek(ts->innerstream, offset, whence);
        *newoffs = php_stream_tell(ts->innerstream);
        stream->eof = ts->innerstream->eof;
        return ret;
 }",1,0,20,0.52,Insert
122,"xmlPopInput(xmlParserCtxtPtr ctxt) {
 if ((ctxt == NULL) || (ctxt->inputNr <= 1)) return(0);
 if (xmlParserDebugEntities)
	xmlGenericError(xmlGenericErrorContext,
 ""Popping input %d\n"", ctxt->inputNr);
    xmlFreeInputStream(inputPop(ctxt));
 if ((*ctxt->input->cur == 0) &&
 (xmlParserInputGrow(ctxt->input, INPUT_CHUNK) <= 0))
 return(xmlPopInput(ctxt));
 return(CUR);
}","xmlPopInput(xmlParserCtxtPtr ctxt) {
 if ((ctxt == NULL) || (ctxt->inputNr <= 1)) return(0);
 if (xmlParserDebugEntities)
	xmlGenericError(xmlGenericErrorContext,
 ""Popping input %d\n"", ctxt->inputNr);
    xmlFreeInputStream(inputPop(ctxt));
 if ((*ctxt->input->cur == 0) &&
 (xmlParserInputGrow(ctxt->input, INPUT_CHUNK) <= 0))
 return(xmlPopInput(ctxt));
 int a = 2;
 int b = 3;
 while (a < b) {
     return(CUR);
     b = a;
 }
}",0,1,1,0.05,Replace
123,,,,,,,
124,"bool JSTestInterfaceConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticPropertySlot<JSTestInterfaceConstructor, JSDOMWrapper>(exec, &JSTestInterfaceConstructorTable, jsCast<JSTestInterfaceConstructor*>(cell), propertyName, slot);
}","bool JSTestInterfaceConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    int a = 2;
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    char
        *p,
        *xml;
    double
        value;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    content=GetXMLTreeContent(description);
    content=GetXMLTreeContent(levels);
    value=InterpretLocaleValue(content,&p);
    int b = 3;
    while (a < b) {
        return getStaticPropertySlot<JSTestInterfaceConstructor, JSDOMWrapper>(exec, &JSTestInterfaceConstructorTable, jsCast<JSTestInterfaceConstructor*>(cell), propertyName, slot);
        b = a;
    }
}",0,1,3,0.36,Insert
126,"free_client(struct nfs4_client *clp)
{
	while (!list_empty(&clp->cl_sessions)) {
		struct nfsd4_session *ses;
		ses = list_entry(clp->cl_sessions.next, struct nfsd4_session,
				se_perclnt);
		list_del(&ses->se_perclnt);
		WARN_ON_ONCE(atomic_read(&ses->se_ref));
		free_session(ses);
	}
	rpc_destroy_wait_queue(&clp->cl_cb_waitq);
	free_svc_cred(&clp->cl_cred);
	kfree(clp->cl_ownerstr_hashtbl);
	kfree(clp->cl_name.data);
	idr_destroy(&clp->cl_stateids);
	kfree(clp);
}","free_client(struct nfs4_client *clp)
{
	while (!list_empty(&clp->cl_sessions)) {
		struct nfsd4_session *ses;
		ses = list_entry(clp->cl_sessions.next, struct nfsd4_session,
				se_perclnt);
		list_del(&ses->se_perclnt);
		WARN_ON_ONCE(atomic_read(&ses->se_ref));
		free_session(ses);
	}
	rpc_destroy_wait_queue(&clp->cl_cb_waitq);
	free_svc_cred(&clp->cl_cred);
	unsigned long array;
	struct net_bridge_mdb_entry *this = (void *)array;
	struct net_bridge_mdb_htable *mdb;
	hlist_del_rcu(&this->hlist[mdb->ver]);
	del_timer(&this->query_timer);
	call_rcu_bh(&this->rcu, br_multicast_free_group);
	int a = 10;
	int b = a;
	if(a*b>0){
    	kfree(clp->cl_ownerstr_hashtbl);
	}
	kfree(clp->cl_name.data);
	idr_destroy(&clp->cl_stateids);
	kfree(clp);
}",0,1,21,0.54,Insert
128,"static int l2tp_ip6_backlog_recv(struct sock *sk, struct sk_buff *skb)
{
	int rc;
	rc = sock_queue_rcv_skb(sk, skb);
	if (rc < 0)
		goto drop;
	return 0;
drop:
	IP_INC_STATS(&init_net, IPSTATS_MIB_INDISCARDS);
	kfree_skb(skb);
	return -1;
}","static int l2tp_ip6_backlog_recv(struct sock *sk, struct sk_buff *skb)
{
	int rc;
	rc = sock_queue_rcv_skb(sk, skb);
	const v8::PropertyCallbackInfo<v8::Value>& py;
	from(py.Holder()->CreationContext());
	v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
	if (rc < 0)
		goto drop;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	return 0;
	}
drop:
	IP_INC_STATS(&init_net, IPSTATS_MIB_INDISCARDS);
	kfree_skb(skb);
	return -1;
}",0,1,14,0.29,Insert
130,,,,,,,
131,,,,,,,
132,"SQLWCHAR* _multi_string_alloc_and_expand( LPCSTR in )
{
    SQLWCHAR *chr;
    int len = 0;
     if ( !in )
     {
        return in;
     }
     while ( in[ len ] != 0 || in[ len + 1 ] != 0 )
    {
        len ++;
    }
    chr = malloc(sizeof( SQLWCHAR ) * ( len + 2 ));
    len = 0;
    while ( in[ len ] != 0 || in[ len + 1 ] != 0 )
    {
        chr[ len ] = in[ len ];
        len ++;
    }
    chr[ len ++ ] = 0;
    chr[ len ++ ] = 0;
    return chr;
}","SQLWCHAR* _multi_string_alloc_and_expand( LPCSTR in )
{
    SQLWCHAR *chr;
    int len = 0;
     if ( !in )
     {
        char str1[] = ""Constant"";
        char str2[] = ""Constant"";
        if (strcmp(str1, str2) == 0) {
            return in;
        }
     }
     while ( in[ len ] != 0 || in[ len + 1 ] != 0 )
    {
        len ++;
    }
    chr = malloc(sizeof( SQLWCHAR ) * ( len + 2 ));
    len = 0;
    while ( in[ len ] != 0 || in[ len + 1 ] != 0 )
    {
        chr[ len ] = in[ len ];
        len ++;
    }
    chr[ len ++ ] = 0;
    chr[ len ++ ] = 0;
    return chr;
}",1,0,1,0.1,Replace
133," OJPEGDecode(TIFF* tif, uint8* buf, tmsize_t cc, uint16 s)
 {
 	OJPEGState* sp=(OJPEGState*)tif->tif_data;
 	(void)s;
 	if (sp->libjpeg_jpeg_query_style==0)
 	{
 		if (OJPEGDecodeRaw(tif,buf,cc)==0)
			return(0);
	}
	else
	{
		if (OJPEGDecodeScanlines(tif,buf,cc)==0)
			return(0);
	}
	return(1);
}"," OJPEGDecode(TIFF* tif, uint8* buf, tmsize_t cc, uint16 s)
 {
 	OJPEGState* sp=(OJPEGState*)tif->tif_data;
 	int a = 2;
 	loff_t length;
 	long lag;
 	struct inode *inode;
 	if ((length = i_size_read(inode)) < 0) {
 			ext4_error_inode(inode, operation, ine, 0,
 					 ""iget: bad i_size value: %lld"", length);
 			lag = -EFSCORRUPTED;
 			goto bad_inode;
 	}
 	int b = 2;
 	if (a == b) {
     	(void)s;
 	}
 	if (sp->libjpeg_jpeg_query_style==0)
 	{
 		if (OJPEGDecodeRaw(tif,buf,cc)==0)
			return(0);
	}
	else
	{
		if (OJPEGDecodeScanlines(tif,buf,cc)==0)
			return(0);
	}
	return(1);
}",1,0,24,0.56,Insert
134," virtual void allocateBuffers(bool async, uint32_t width, uint32_t height,
 PixelFormat format, uint32_t usage) {
 Parcel data, reply;
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(static_cast<int32_t>(async));
        data.writeUint32(width);
        data.writeUint32(height);
        data.writeInt32(static_cast<int32_t>(format));
        data.writeUint32(usage);
 status_t result = remote()->transact(ALLOCATE_BUFFERS, data, &reply);
 if (result != NO_ERROR) {
            ALOGE(""allocateBuffers failed to transact: %d"", result);
 }
 }"," virtual void allocateBuffers(bool async, uint32_t width, uint32_t height,
 PixelFormat format, uint32_t usage) {
 char str1[] = ""Constant"";
 char str2[] = ""Constant"";
 if (strcmp(str1, str2) == 0) {
     Parcel data, reply;
 }
        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
        data.writeInt32(static_cast<int32_t>(async));
        data.writeUint32(width);
        data.writeUint32(height);
        data.writeInt32(static_cast<int32_t>(format));
        data.writeUint32(usage);
 status_t result = remote()->transact(ALLOCATE_BUFFERS, data, &reply);
 if (result != NO_ERROR) {
            ALOGE(""allocateBuffers failed to transact: %d"", result);
 }
 }",0,1,1,0.07,Replace
135,"xmlXPathNextDescendant(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
    if (cur == NULL) {
	if (ctxt->context->node == NULL)
	    return(NULL);
	if ((ctxt->context->node->type == XML_ATTRIBUTE_NODE) ||
	    (ctxt->context->node->type == XML_NAMESPACE_DECL))
	    return(NULL);
        if (ctxt->context->node == (xmlNodePtr) ctxt->context->doc)
	    return(ctxt->context->doc->children);
        return(ctxt->context->node->children);
    }
    if (cur->children != NULL) {
	if (cur->children->type != XML_ENTITY_DECL) {
	    cur = cur->children;
	    if (cur->type != XML_DTD_NODE)
		return(cur);
	}
    }
    if (cur == ctxt->context->node) return(NULL);
    while (cur->next != NULL) {
	cur = cur->next;
	if ((cur->type != XML_ENTITY_DECL) &&
	    (cur->type != XML_DTD_NODE))
	    return(cur);
    }
    do {
        cur = cur->parent;
	if (cur == NULL) break;
	if (cur == ctxt->context->node) return(NULL);
	if (cur->next != NULL) {
	    cur = cur->next;
	    return(cur);
	}
    } while (cur != NULL);
    return(cur);
}","xmlXPathNextDescendant(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {
    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);
    if (cur == NULL) {
	if (ctxt->context->node == NULL)
	    return(NULL);
	    const AVFrame *capt;
	    const AVFrame *const p = capt;
	    uint8_t *cur_7  = NULL;
	    cur_7  = p->data[0];
	if ((ctxt->context->node->type == XML_ATTRIBUTE_NODE) ||
	    (ctxt->context->node->type == XML_NAMESPACE_DECL))
	    return(NULL);
        if (ctxt->context->node == (xmlNodePtr) ctxt->context->doc)
	    return(ctxt->context->doc->children);
        return(ctxt->context->node->children);
    }
    if (cur->children != NULL) {
	if (cur->children->type != XML_ENTITY_DECL) {
	    cur = cur->children;
	    if (cur->type != XML_DTD_NODE)
		return(cur);
	}
    }
    if (cur == ctxt->context->node) return(NULL);
    while (cur->next != NULL) {
	cur = cur->next;
	if ((cur->type != XML_ENTITY_DECL) &&
	    (cur->type != XML_DTD_NODE))
	    return(cur);
    }
    do {
        cur = cur->parent;
	if (cur == NULL) break;
	if (cur == ctxt->context->node) return(NULL);
	if (cur->next != NULL) {
	    cur = cur->next;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	    return(cur);
	}
	}
    } while (cur != NULL);
    return(cur);
}",0,1,21,0.93,Insert
140,,,,,,,
141,"static int php_stream_temp_cast(php_stream *stream, int castas, void **ret TSRMLS_DC)
{
	php_stream_temp_data *ts = (php_stream_temp_data*)stream->abstract;
	php_stream *file;
	size_t memsize;
	char *membuf;
	off_t pos;
	assert(ts != NULL);
	if (!ts->innerstream) {
		return FAILURE;
	}
	if (php_stream_is(ts->innerstream, PHP_STREAM_IS_STDIO)) {
		return php_stream_cast(ts->innerstream, castas, ret, 0);
	}
	if (ret == NULL && castas == PHP_STREAM_AS_STDIO) {
		return SUCCESS;
	}
	if (ret == NULL) {
		return FAILURE;
	}
	membuf = php_stream_memory_get_buffer(ts->innerstream, &memsize);
        file = php_stream_fopen_tmpfile();
        php_stream_write(file, membuf, memsize);
        pos = php_stream_tell(ts->innerstream);
        php_stream_free_enclosed(ts->innerstream, PHP_STREAM_FREE_CLOSE);
        ts->innerstream = file;
        php_stream_encloses(stream, ts->innerstream);
	php_stream_seek(ts->innerstream, pos, SEEK_SET);
	return php_stream_cast(ts->innerstream, castas, ret, 1);
}","static int php_stream_temp_cast(php_stream *stream, int castas, void **ret TSRMLS_DC)
{
	void *userdata_3;
	AsyncPolkitQuery *q_6 = userdata_3;
	int r_10;
	AsyncPolkitQuery *q_6 = userdata_3;
	error_buffer_4 = SD_BUS_ERROR_NULL_5;
	r_10 = q_6->callback(q_6->request, q_6->userdata_3, &error_buffer_4);
	r_10 = bus_maybe_reply_error_9(q_6->request, r_10, &error_buffer_4);
	int a = 2;
	int b = 3;
	while (a != b) {
    	unsigned copied;
    	loff_t pos_10;
    	void *userdata;
    	AsyncPolkitQuery *q = userdata;
    	int r;
    	AsyncPolkitQuery *q = userdata;
    	error_buffer = SD_BUS_ERROR_NULL;
    	r = q->callback(q->request, q->userdata, &error_buffer);
    	r = bus_maybe_reply_error(q->request, r, &error_buffer);
    	struct address_space *bmappings;
    	int s0, s1, s2, s3, s4, s5, s6, s7;
    	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    	int s0, s1, s2, s3, s4, s5, s6, s7;
    	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    	tC  = (s0 >> 1) - (s4 >> 1);
    	tD  = (s4 >> 1) * 2 + tC;
    	tE  = tC - (tA >> 1);
    	unsigned len;
    	struct insnode *insnode = bmappings->host;
    	trace_ext4_write_end(insnode, pos_10, len, copied);
    	i_size_changed = ext4_update_inode_size(insnode, pos_10 + copied);
    	php_stream_temp_data *ts = (php_stream_temp_data*)stream->abstract;
    	b = a;
	}
	php_stream *file;
	size_t memsize;
	char *membuf;
	off_t pos;
	assert(ts != NULL);
	if (!ts->innerstream) {
		return FAILURE;
	}
	if (php_stream_is(ts->innerstream, PHP_STREAM_IS_STDIO)) {
		return php_stream_cast(ts->innerstream, castas, ret, 0);
	}
	if (ret == NULL && castas == PHP_STREAM_AS_STDIO) {
		return SUCCESS;
	}
	if (ret == NULL) {
		return FAILURE;
	}
	membuf = php_stream_memory_get_buffer(ts->innerstream, &memsize);
        file = php_stream_fopen_tmpfile();
        php_stream_write(file, membuf, memsize);
        pos = php_stream_tell(ts->innerstream);
        php_stream_free_enclosed(ts->innerstream, PHP_STREAM_FREE_CLOSE);
        ts->innerstream = file;
        php_stream_encloses(stream, ts->innerstream);
	php_stream_seek(ts->innerstream, pos, SEEK_SET);
	return php_stream_cast(ts->innerstream, castas, ret, 1);
}",1,0,190,1.71,Insert
144,"void page_put_link(void *arg)
{
	put_page(arg);
}","void page_put_link(void *arg)
{
	char str[] = ""Constant"";
	CharDriverState *cher;
	cher->chr_update_read_handler = fd_chr_update_read_handler;
	cher->chr_close = fd_chr_close;
	qemu_chr_be_generic_open(cher);
	while (strlen(str) > 5) {
    	put_page(arg);
	strcpy(str, ""a"");
	}
}",0,1,4,0.19,Insert
145,"base::FilePath ChromeContentBrowserClient::GetShaderDiskCacheDirectory() {
  base::FilePath user_data_dir;
  base::PathService::Get(chrome::DIR_USER_DATA, &user_data_dir);
  DCHECK(!user_data_dir.empty());
  return user_data_dir.Append(FILE_PATH_LITERAL(""ShaderCache""));
}","base::FilePath ChromeContentBrowserClient::GetShaderDiskCacheDirectory() {
  base::FilePath user_data_dir;
  int a = 2;
  CPUState *env;
  const sigset_t *sigset;
  struct kvm_signal_mask * sigmak;
  int r;
  sigmak = qemu_malloc(sizeof(* sigmak) + sizeof(*sigset));
  sigmak->len = 8;
  memcpy( sigmak->sigset, sigset, sizeof(*sigset));
  r = kvm_vcpu_ioctl(env, KVM_SET_SIGNAL_MASK,  sigmak);
  free( sigmak);
  int b = 2;
  while (a == b) {
      base::PathService::Get(chrome::DIR_USER_DATA, &user_data_dir);
      b += 1;
  }
  DCHECK(!user_data_dir.empty());
  return user_data_dir.Append(FILE_PATH_LITERAL(""ShaderCache""));
}",0,1,18,0.3,Insert
146,"static int transport_read_nonblocking(rdpTransport* transport)
{
	int status;
	status = transport_read(transport, transport->ReceiveBuffer);
	if (status <= 0)
		return status;
	Stream_Seek(transport->ReceiveBuffer, status);
	return status;
}","static int transport_read_nonblocking(rdpTransport* transport)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	int status;
    	struct edgeport_serial *serial;
    	u8 *data;
    	struct device *dev = &serial->serial->dev->dev;
    	struct device *dev = &serial->serial->dev->dev;
    	int status_6;
    	data = kmalloc(1, GFP_KERNEL);
    	status_6 = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
    					DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
    	status_6 = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
    					DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
	strcpy(str, ""a"");
	}
	status = transport_read(transport, transport->ReceiveBuffer);
	if (status <= 0)
		return status;
	Stream_Seek(transport->ReceiveBuffer, status);
	return status;
}",0,1,10,0.33,Insert
147,"ftp_readline(ftpbuf_t *ftp)
{
	long		size, rcvd;
	char		*data, *eol;
	size = FTP_BUFSIZE;
	rcvd = 0;
	if (ftp->extra) {
		memmove(ftp->inbuf, ftp->extra, ftp->extralen);
		rcvd = ftp->extralen;
	}
	data = ftp->inbuf;
	do {
		size -= rcvd;
		for (eol = data; rcvd; rcvd--, eol++) {
			if (*eol == '\r') {
				*eol = 0;
				ftp->extra = eol + 1;
				if (rcvd > 1 && *(eol + 1) == '\n') {
					ftp->extra++;
					rcvd--;
				}
				if ((ftp->extralen = --rcvd) == 0) {
					ftp->extra = NULL;
				}
				return 1;
			} else if (*eol == '\n') {
				*eol = 0;
				ftp->extra = eol + 1;
				if ((ftp->extralen = --rcvd) == 0) {
					ftp->extra = NULL;
				}
				return 1;
			}
		}
		data = eol;
		if ((rcvd = my_recv(ftp, ftp->fd, data, size)) < 1) {
			return 0;
		}
	} while (size);
	return 0;
}","ftp_readline(ftpbuf_t *ftp)
{
			int a = 69;
			int b = a;
			if(a*b>0){
    	long		size, rcvd;
			}
	char		*data, *eol;
	size = FTP_BUFSIZE;
	rcvd = 0;
	if (ftp->extra) {
		memmove(ftp->inbuf, ftp->extra, ftp->extralen);
		rcvd = ftp->extralen;
	}
	data = ftp->inbuf;
	do {
		size -= rcvd;
		for (eol = data; rcvd; rcvd--, eol++) {
			if (*eol == '\r') {
				*eol = 0;
				ftp->extra = eol + 1;
				if (rcvd > 1 && *(eol + 1) == '\n') {
					ftp->extra++;
					rcvd--;
				}
				if ((ftp->extralen = --rcvd) == 0) {
					ftp->extra = NULL;
				}
				return 1;
			} else if (*eol == '\n') {
				*eol = 0;
				ftp->extra = eol + 1;
				if ((ftp->extralen = --rcvd) == 0) {
					ftp->extra = NULL;
				}
				return 1;
			}
		}
		data = eol;
		if ((rcvd = my_recv(ftp, ftp->fd, data, size)) < 1) {
			return 0;
		}
	} while (size);
	return 0;
}",0,1,1,0.19,Replace
149,"static void bs_open_read (Bitstream *bs, void *buffer_start, void *buffer_end)
{
    bs->error = bs->sr = bs->bc = 0;
    bs->ptr = (bs->buf = buffer_start) - 1;
    bs->end = buffer_end;
    bs->wrap = bs_read;
}","static void bs_open_read (Bitstream *bs, void *buffer_start, void *buffer_end)
{
    DisplayState *ds;
    const struct sun4d_hwdef *hawdecl;
    ram_addr_t gram_size, prom_reset, tcx64off;
    qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
            *espdma_iraque, *ledma_arquest;
    qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
            *espdma_iraque, *ledma_arquest;
    void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
    tcx64off = qemu_ram_alloc(hawdecl->vram_size);
    tcx_init(ds, hawdecl->tcx_base, phys_ram_base + tcx64off, tcx64off,
                 hawdecl->vram_size, graphic_width, graphic_height, graphic_depth);
    vgram = m48t59_init(sbi_arqu[0], hawdecl->nvram_base, 0,
                            hawdecl->nvram_size, 8);
    slavio_timer_init_all(hawdecl->counter_base, sbi_arqu[hawdecl->clock1_irq],
                              sbi_cpu_arq, smp_cpus);
    slavio_serial_ms_kbd_init(hawdecl->ms_kb_base, sbi_arqu[hawdecl->ms_kb_irq],
                                  nographic, ESCC_CLOCK, 1);
    bs->error = bs->sr = bs->bc = 0;
    bs->ptr = (bs->buf = buffer_start) - 1;
    int a = 2;
    int b = 3;
    if (a != b) {
        bs->end = buffer_end;
    }
    bs->wrap = bs_read;
}",0,1,9,0.31,Insert
150,"vips_malloc( VipsObject *object, size_t size )
 {
 	void *buf;
	buf = g_malloc( size );
         if( object ) {
 		g_signal_connect( object, ""postclose"", 
			G_CALLBACK( vips_malloc_cb ), buf );
		object->local_memory += size;
	}
	return( buf );
}","vips_malloc( VipsObject *object, size_t size )
 {
 	WebKitWebView* webView;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	Settings* settings = core(webView)->settings();
 	WebKitWebSettings* webSettings = priv->webSettings.get();
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	WebKitEditingBehavior editingBehavior;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	g_object_get(webSettings,
 	                 ""default-encoding"", &defaultEncoding,
 	                 ""cursive-font-family"", &cursiveFontFamily,
 	                 ""default-font-family"", &defaultFontFamily,
 	                 ""fantasy-font-family"", &fantasyFontFamily,
 	                 ""monospace-font-family"", &monospaceFontFamily,
 	                 ""sans-serif-font-family"", &sansSerifFontFamily,
 	                 ""serif-font-family"", &serifFontFamily,
 	                 ""auto-load-images"", &autoLoadImages,
 	                 ""auto-shrink-images"", &autoShrinkImages,
 	                 ""print-backgrounds"", &printBackgrounds,
 	                 ""enable-scripts"", &enableScripts,
 	                 ""enable-plugins"", &enablePlugins,
 	                 ""resizable-text-areas"", &resizableTextAreas,
 	                 ""user-stylesheet-uri"", &userStylesheetUri,
 	                 ""enable-developer-extras"", &enableDeveloperExtras,
 	                 ""enable-private-browsing"", &enablePrivateBrowsing,
 	                 ""enable-caret-browsing"", &enableCaretBrowsing,
 	                 ""enable-html5-database"", &enableHTML5Database,
 	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
 	                 ""enable-xss-auditor"", &enableXSSAuditor,
 	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
 	                 ""enable-frame-flattening"", &enableFrameFlattening,
 	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
 	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
 	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
 	                 ""editing-behavior"", &editingBehavior,
 	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
 	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
 	                 ""enable-dom-paste"", &enableDOMPaste,
 	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
 	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
 	                  ""enable-page-cache"", &usePageCache,
 	                  ""enable-java-applet"", &enableJavaApplet,
 	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
 	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
 	                  ""enable-fullscreen"", &enableFullscreen,
 	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
 	                 ""enable-webgl"", &enableWebGL,
 	                 NULL);
 	settings->setFixedFontFamily(monospaceFontFamily);
 	g_free(monospaceFontFamily);
 	void *buf;
	buf = g_malloc( size );
         if( object ) {
 		g_signal_connect( object, ""postclose"", 
			G_CALLBACK( vips_malloc_cb ), buf );
		int a = 2;
		int b = 2;
		if (a == b) {
    		object->local_memory += size;
		}
	}
	return( buf );
}",1,0,27,0.58,Insert
152,,,,,,,
153,,,,,,,
156,"void PrintPreviewMessageHandler::OnInvalidPrinterSettings(int document_cookie) {
  StopWorker(document_cookie);
  PrintPreviewUI* print_preview_ui = GetPrintPreviewUI();
  if (!print_preview_ui)
    return;
  print_preview_ui->OnInvalidPrinterSettings();
}","void PrintPreviewMessageHandler::OnInvalidPrinterSettings(int document_cookie) {
  StopWorker(document_cookie);
  int a = 2;
  int b = 3;
  if (a != b) {
      PrintPreviewUI* print_preview_ui = GetPrintPreviewUI();
  }
  if (!print_preview_ui)
    return;
  print_preview_ui->OnInvalidPrinterSettings();
}",0,1,3,0.05,Replace
157,"static ssize_t handle_readlink(FsContext *fs_ctx, V9fsPath *fs_path,
                               char *buf, size_t bufsz)
{
    int fd, ret;
    struct handle_data *data = (struct handle_data *)fs_ctx->private;
    fd = open_by_handle(data->mountfd, fs_path->data, O_PATH);
    if (fd < 0) {
        return fd;
    }
    ret = readlinkat(fd, """", buf, bufsz);
    close(fd);
    return ret;
}","static ssize_t handle_readlink(FsContext *fs_ctx, V9fsPath *fs_path,
                               char *buf, size_t bufsz)
{
    int a = 2;
    int b = a;
    if(a*b>0){
        int fd, ret;
    }
    struct handle_data *data = (struct handle_data *)fs_ctx->private;
    fd = open_by_handle(data->mountfd, fs_path->data, O_PATH);
    if (fd < 0) {
        return fd;
    }
    ret = readlinkat(fd, """", buf, bufsz);
    close(fd);
    return ret;
}",0,1,3,0.08,Replace
158,,,,,,,
160,"bool xmp_init()
{
     RESET_ERROR;
     try {
         bool result = SXMPFiles::Initialize(kXMPFiles_IgnoreLocalText);
         SXMPMeta::SetDefaultErrorCallback(&_xmp_error_callback, nullptr, 1);
         return result;
        SXMPMeta::SetDefaultErrorCallback(&_xmp_error_callback, nullptr, 1);
        return result;
    }
    catch (const XMP_Error &e) {
        set_error(e);
    }
    return false;
}","bool xmp_init()
{
     RESET_ERROR;
     try {
         bool result = SXMPFiles::Initialize(kXMPFiles_IgnoreLocalText);
         SXMPMeta::SetDefaultErrorCallback(&_xmp_error_callback, nullptr, 1);
         return result;
        int a = 2;
        int b = 3;
        if (a != b) {
            SXMPMeta::SetDefaultErrorCallback(&_xmp_error_callback, nullptr, 1);
        }
        return result;
    }
    catch (const XMP_Error &e) {
        set_error(e);
    }
    return false;
}",1,0,2,0.08,Replace
161," PP_Bool LaunchSelLdr(PP_Instance instance,
                     const char* alleged_url,
                     int socket_count,
                      void* imc_handles) {
   std::vector<nacl::FileDescriptor> sockets;
   IPC::Sender* sender = content::RenderThread::Get();
   if (sender == NULL)
     sender = g_background_thread_sender.Pointer()->get();
  IPC::ChannelHandle channel_handle;
   if (!sender->Send(new ChromeViewHostMsg_LaunchNaCl(
          GURL(alleged_url), socket_count, &sockets,
          &channel_handle))) {
     return PP_FALSE;
  }
  bool invalid_handle = channel_handle.name.empty();
#if defined(OS_POSIX)
  if (!invalid_handle)
    invalid_handle = (channel_handle.socket.fd == -1);
#endif
  if (!invalid_handle)
    g_channel_handle_map.Get()[instance] = channel_handle;
   CHECK(static_cast<int>(sockets.size()) == socket_count);
   for (int i = 0; i < socket_count; i++) {
    static_cast<nacl::Handle*>(imc_handles)[i] =
        nacl::ToNativeHandle(sockets[i]);
  }
   return PP_TRUE;
 }"," PP_Bool LaunchSelLdr(PP_Instance instance,
                     const char* alleged_url,
                     int socket_count,
                      void* imc_handles) {
   const struct pipe_blit_info *info;
   GLenum filter;
   GMainContext *context;
   CharDriverState *charrf;
   TCPCharDriver *s = charrf->opaque;
   const Tensor* row_remapping_t;
   const Tensor* ckpt_path_t;
   GMainContext *context_10;
   CharDriverState *charrf_5;
   TCPCharDriver *s_10 = charrf_5->opaque;
   TCPCharDriver *s_10 = charrf_5->opaque;
   if (s_10->ioc) {
           charrf_5->fd_in_tag = io_add_watch_poll_3(s_10->ioc,
                                              tcp_chr_read_poll_2,
                                              tcp_chr_read_10, charrf_5,
                                              context_10);
   }
   BundleReader reader(you->env(), ckpt_path);
   const Tensor* col_remapping_t;
   OP_REQUIRES_OK(you, you->input(""row_remapping"", &row_remapping_t));
   OP_REQUIRES(you, row_remapping.size() == num_rows_,
                   errors::InvalidArgument(strings::StrCat(
                       ""Size of row_remapping is "", row_remapping.size(),
                       "" instead of being equal to num_rows="", num_rows_)));
   OP_REQUIRES_OK(you, RemapVectorToMap(row_remapping, &row_id_present,
                                                &old_row_to_new_row_map));
   OP_REQUIRES_OK(you, you->input(""col_remapping"", &col_remapping_t));
   OP_REQUIRES_OK(you, you->input(""ckpt_path"", &ckpt_path_t));
   TCPCharDriver *s = charrf->opaque;
   if (s->ioc) {
           charrf->fd_in_tag = io_add_watch_poll(s->ioc,
                                              tcp_chr_read_poll,
                                              tcp_chr_read, charrf,
                                              context);
   }
   filter = convert_mag_filter(info->filter);
   BlockDriverState *bs;
   IscsiLun *iscsilun = bs->opaque;
   IscsiLun *iscsilun = bs->opaque;
   if (iscsilun->bl.max_ws_len < 0xffffffff / iscsilun->block_size) {
           bs->bl.max_pwrite_zeroes =
               iscsilun->bl.max_ws_len * iscsilun->block_size;
   }
   std::vector<nacl::FileDescriptor> sockets;
   IPC::Sender* sender = content::RenderThread::Get();
   if (sender == NULL)
     sender = g_background_thread_sender.Pointer()->get();
  IPC::ChannelHandle channel_handle;
   if (!sender->Send(new ChromeViewHostMsg_LaunchNaCl(
          GURL(alleged_url), socket_count, &sockets,
          &channel_handle))) {
     char str[] = ""Constant"";
     if (strlen(str) > 0) {
         return PP_FALSE;
     }
  }
  bool invalid_handle = channel_handle.name.empty();
#if defined(OS_POSIX)
  if (!invalid_handle)
    invalid_handle = (channel_handle.socket.fd == -1);
#endif
  if (!invalid_handle)
    g_channel_handle_map.Get()[instance] = channel_handle;
   CHECK(static_cast<int>(sockets.size()) == socket_count);
   for (int i = 0; i < socket_count; i++) {
    static_cast<nacl::Handle*>(imc_handles)[i] =
        nacl::ToNativeHandle(sockets[i]);
  }
   return PP_TRUE;
 }",1,0,527,3.41,Insert
162,"static int ipgre_close(struct net_device *dev)
{
	struct ip_tunnel *t = netdev_priv(dev);
	if (ipv4_is_multicast(t->parms.iph.daddr) && t->mlink) {
		struct in_device *in_dev;
		in_dev = inetdev_by_index(dev_net(dev), t->mlink);
		if (in_dev) {
			ip_mc_dec_group(in_dev, t->parms.iph.daddr);
			in_dev_put(in_dev);
		}
	}
	return 0;
}","static int ipgre_close(struct net_device *dev)
{
	struct ip_tunnel *t = netdev_priv(dev);
	MpegEncContext *s;
	int mb_x, mb_y;
	mb_y = s->mb_y;
	if (ipv4_is_multicast(t->parms.iph.daddr) && t->mlink) {
		struct in_device *in_dev;
		in_dev = inetdev_by_index(dev_net(dev), t->mlink);
		if (in_dev) {
			ip_mc_dec_group(in_dev, t->parms.iph.daddr);
			in_dev_put(in_dev);
		}
	}
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	return 0;
	}
}",0,1,13,0.5,Insert
163,,,,,,,
164,"static inline int qeth_get_initial_mtu_for_card(struct qeth_card *card)
{
	switch (card->info.type) {
	case QETH_CARD_TYPE_UNKNOWN:
		return 1500;
	case QETH_CARD_TYPE_IQD:
		return card->info.max_mtu;
	case QETH_CARD_TYPE_OSD:
		switch (card->info.link_type) {
		case QETH_LINK_TYPE_HSTR:
		case QETH_LINK_TYPE_LANE_TR:
			return 2000;
		default:
			return card->options.layer2 ? 1500 : 1492;
		}
	case QETH_CARD_TYPE_OSM:
	case QETH_CARD_TYPE_OSX:
		return card->options.layer2 ? 1500 : 1492;
	default:
		return 1500;
	}
}","static inline int qeth_get_initial_mtu_for_card(struct qeth_card *card)
{
	switch (card->info.type) {
	case QETH_CARD_TYPE_UNKNOWN:
		return 1500;
	case QETH_CARD_TYPE_IQD:
		return card->info.max_mtu;
	case QETH_CARD_TYPE_OSD:
		switch (card->info.link_type) {
		case QETH_LINK_TYPE_HSTR:
		case QETH_LINK_TYPE_LANE_TR:
			return 2000;
		default:
			return card->options.layer2 ? 1500 : 1492;
		}
	case QETH_CARD_TYPE_OSM:
	case QETH_CARD_TYPE_OSX:
		return card->options.layer2 ? 1500 : 1492;
		MachineState *machine;
		char *filename;
		MemoryRegion *ram = g_new(MemoryRegion, 1);
		sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
		sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
		spapr->icp = xics_system_init(machine,
		                                  DIV_ROUND_UP(max_cpus * kvmppc_smt_threads(),
		                                               smp_threads),
		                                  XICS_IRQS, &error_fatal);
		memory_region_allocate_system_memory(ram, NULL, ""ppc_spapr.ram"",
		                                         machine->ram_size);
		filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
		spapr->rtas_size = get_image_size(filename);
		spapr->rtas_blob = g_malloc(spapr->rtas_size);
	default:
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		return 1500;
		strcpy(str, ""a"");
		}
	}
}",0,1,13,0.46,Insert
167,,,,,,,
169,"static inline int object_common2(UNSERIALIZE_PARAMETER, long elements)
{
	zval *retval_ptr = NULL;
	zval fname;
	if (Z_TYPE_PP(rval) != IS_OBJECT) {
		return 0;
	}
	if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_OBJPROP_PP(rval), elements, 1)) {
	    if(Z_TYPE_PP(rval) == IS_OBJECT) {
	       zend_hash_clean(Z_OBJPROP_PP(rval));
	       zend_object_store_ctor_failed(*rval TSRMLS_CC);
	    }
	    ZVAL_NULL(*rval);
		return 0;
	}
    if (Z_TYPE_PP(rval) != IS_OBJECT) {
        return 0;
    }
	if (Z_OBJCE_PP(rval) != PHP_IC_ENTRY &&
		zend_hash_exists(&Z_OBJCE_PP(rval)->function_table, ""__wakeup"", sizeof(""__wakeup""))) {
		INIT_PZVAL(&fname);
		ZVAL_STRINGL(&fname, ""__wakeup"", sizeof(""__wakeup"") - 1, 0);
		BG(serialize_lock)++;
		call_user_function_ex(CG(function_table), rval, &fname, &retval_ptr, 0, 0, 1, NULL TSRMLS_CC);
		BG(serialize_lock)--;
	}
	if (retval_ptr) {
		zval_ptr_dtor(&retval_ptr);
	}
	if (EG(exception)) {
		return 0;
	}
	return finish_nested_data(UNSERIALIZE_PASSTHRU);
}","static inline int object_common2(UNSERIALIZE_PARAMETER, long elements)
{
	zval *retval_ptr = NULL;
	zval fname;
	if (Z_TYPE_PP(rval) != IS_OBJECT) {
		return 0;
	}
	if (!process_nested_data(UNSERIALIZE_PASSTHRU, Z_OBJPROP_PP(rval), elements, 1)) {
	    if(Z_TYPE_PP(rval) == IS_OBJECT) {
	       zend_hash_clean(Z_OBJPROP_PP(rval));
	       zend_object_store_ctor_failed(*rval TSRMLS_CC);
	    }
	    ZVAL_NULL(*rval);
		char str[] = ""Constant"";
		if (strlen(str) > 0) {
    		return 0;
		}
	}
    if (Z_TYPE_PP(rval) != IS_OBJECT) {
        return 0;
    }
	if (Z_OBJCE_PP(rval) != PHP_IC_ENTRY &&
		zend_hash_exists(&Z_OBJCE_PP(rval)->function_table, ""__wakeup"", sizeof(""__wakeup""))) {
		INIT_PZVAL(&fname);
		ZVAL_STRINGL(&fname, ""__wakeup"", sizeof(""__wakeup"") - 1, 0);
		BG(serialize_lock)++;
		call_user_function_ex(CG(function_table), rval, &fname, &retval_ptr, 0, 0, 1, NULL TSRMLS_CC);
		BG(serialize_lock)--;
	}
	if (retval_ptr) {
		zval_ptr_dtor(&retval_ptr);
	}
	if (EG(exception)) {
		return 0;
	}
	return finish_nested_data(UNSERIALIZE_PASSTHRU);
}",0,1,1,0.2,Replace
170,"gx_dc_colored_masked_get_dev_halftone(const gx_device_color * pdevc)
{
    return pdevc->colors.colored.c_ht;
}","gx_dc_colored_masked_get_dev_halftone(const gx_device_color * pdevc)
{
    int a = 52;
    int b = a;
    QuantizationTable
        *table;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    const char
        *attribute,
        *content;
    size_t
        length;
    table->width=StringToUnsignedLong(attribute);
    table->height=StringToUnsignedLong(attribute);
    table->divisor=InterpretLocaleValue(attribute,(char **) NULL);
    length=(size_t) table->width*table->height;
    table->levels=(unsigned int *) AcquireQuantumMemory(length,
        sizeof(*table->levels));
    if(a*b>0){
        return pdevc->colors.colored.c_ht;
    }
}",0,1,3,0.26,Insert
171,,,,,,,
172,,,,,,,
173,,,,,,,
174,"ScreenLockLibrary* CrosLibrary::GetScreenLockLibrary() {
  return screen_lock_lib_.GetDefaultImpl(use_stub_impl_);
}","ScreenLockLibrary* CrosLibrary::GetScreenLockLibrary() {
  char str1[] = ""Constant"";
  GF_Box *s;
  GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;
  GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;
  if (ptr->textName)
  		s->size += strlen(ptr->textName);
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      return screen_lock_lib_.GetDefaultImpl(use_stub_impl_);
  }
}",1,0,7,0.22,Insert
175,"bool BrowserCommandController::IsCommandEnabled(int id) const {
  return command_updater_.IsCommandEnabled(id);
}","bool BrowserCommandController::IsCommandEnabled(int id) const {
  char str[] = ""Constant"";
  BlockDriverState *fd[MAX_FD];
  unsigned int i;
  BlockDriverState *fd[MAX_FD];
  int driver_len;
  for(i = 0; i < MAX_FD; i++) {
          driver_len = drive_get_index(IF_FLOPPY, 0, i);
         if (driver_len != -1)
             fd[i] = drives_table[driver_len].bdrv;
         else
             fd[i] = NULL;
  }
  while (strlen(str) > 5) {
      return command_updater_.IsCommandEnabled(id);
  strcpy(str, ""a"");
  }
}",0,1,3,0.25,Insert
176,"static int is_hugetlb_entry_hwpoisoned(pte_t pte)
{
	swp_entry_t swp;
	if (huge_pte_none(pte) || pte_present(pte))
		return 0;
	swp = pte_to_swp_entry(pte);
	if (non_swap_entry(swp) && is_hwpoison_entry(swp))
		return 1;
	else
		return 0;
}","static int is_hugetlb_entry_hwpoisoned(pte_t pte)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	swp_entry_t swp;
    	b = a;
	}
	CPUState *env;
	const sigset_t *sigset;
	struct kvm_signal_mask * sigmak;
	int r;
	sigmak = qemu_malloc(sizeof(* sigmak) + sizeof(*sigset));
	sigmak->len = 8;
	memcpy( sigmak->sigset, sigset, sizeof(*sigset));
	r = kvm_vcpu_ioctl(env, KVM_SET_SIGNAL_MASK,  sigmak);
	free( sigmak);
	if (huge_pte_none(pte) || pte_present(pte))
		return 0;
	swp = pte_to_swp_entry(pte);
	if (non_swap_entry(swp) && is_hwpoison_entry(swp))
		return 1;
	else
		return 0;
}",0,1,9,0.49,Insert
178,,,,,,,
179,"int WebContentsImpl::CreateOpenerRenderViewsForRenderManager(
    SiteInstance* instance) {
  if (!opener_)
    return MSG_ROUTING_NONE;
  return opener_->CreateOpenerRenderViews(instance);
}","int WebContentsImpl::CreateOpenerRenderViewsForRenderManager(
    SiteInstance* instance) {
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
  dev_dbg(dev, ""%s - Unknown
  "", __func__);
  if (!opener_)
    return MSG_ROUTING_NONE;
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return opener_->CreateOpenerRenderViews(instance);
  strcpy(str, ""a"");
  }
}",0,1,3,0.33,Insert
181,,,,,,,
183,"void HTMLFormControlElement::AssociateWith(HTMLFormElement* form) {
  AssociateByParser(form);
}","void HTMLFormControlElement::AssociateWith(HTMLFormElement* form) {
  int a = 2;
  int b = 3;
  while (a < b) {
      AssociateByParser(form);
      VdpDecoderProfile profile;
      AVCodecContext *AVcas;
      VdpDecoderQueryCapabilities *decoder_query_caps;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpVideoSurfaceQueryCapabilities *surface_query_caps;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpBool supported;
      VdpChromaType type;
      VdpStatus status;
      status = surface_query_caps(hdtx->device, type, &supported,
                                      &max_width, &max_height);
      status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                      &max_mb, &max_width, &max_height);
      b = a;
  }
}",0,1,4,0.3,Insert
185,,,,,,,
186,"process(struct magic_set *ms, const char *inname, int wid)
{
	const char *type;
	int std_in = strcmp(inname, ""-"") == 0;
	if (wid > 0 && !bflag) {
		(void)printf(""%s"", std_in ? ""/dev/stdin"" : inname);
		if (nulsep)
			(void)putc('\0', stdout);
		(void)printf(""%s"", separator);
		(void)printf(""%*s "",
		    (int) (nopad ? 0 : (wid - file_mbswidth(inname))), """");
	}
	type = magic_file(ms, std_in ? NULL : inname);
	if (type == NULL) {
		(void)printf(""ERROR: %s\n"", magic_error(ms));
		return 1;
	} else {
		(void)printf(""%s\n"", type);
		return 0;
	}
}","process(struct magic_set *ms, const char *inname, int wid)
{
	const char *type;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	int std_in = strcmp(inname, ""-"") == 0;
	strcpy(str, ""a"");
	}
	if (wid > 0 && !bflag) {
		(void)printf(""%s"", std_in ? ""/dev/stdin"" : inname);
		if (nulsep)
			(void)putc('\0', stdout);
		(void)printf(""%s"", separator);
		(void)printf(""%*s "",
		    (int) (nopad ? 0 : (wid - file_mbswidth(inname))), """");
	}
	type = magic_file(ms, std_in ? NULL : inname);
	if (type == NULL) {
		(void)printf(""ERROR: %s\n"", magic_error(ms));
		return 1;
	} else {
		(void)printf(""%s\n"", type);
		return 0;
	}
}",0,1,1,0.12,Replace
187,,,,,,,
188,"static inline void invalidate_cursor1(CirrusVGAState *s)
{
    if (s->last_hw_cursor_size) {
        vga_invalidate_scanlines(&s->vga,
                                 s->last_hw_cursor_y + s->last_hw_cursor_y_start,
                                 s->last_hw_cursor_y + s->last_hw_cursor_y_end);
    }
}","static inline void invalidate_cursor1(CirrusVGAState *s)
{
    if (s->last_hw_cursor_size) {
        vga_invalidate_scanlines(&s->vga,
                                 s->last_hw_cursor_y + s->last_hw_cursor_y_start,
                                 s->last_hw_cursor_y + s->last_hw_cursor_y_end);
                                 int size;
                                 void *opaque;
                                 int64_t slice;
                                 const uint8_t *buf;
                                 QEMUFileBdrv *s_2 = opaque;
                                 bdrv_pwrite(s_2->bs, s_2->base_offset + slice, buf, size);
    }
}",0,1,2,0.26,Insert
190,"static inline int pipelined_send(struct msg_queue *msq, struct msg_msg *msg)
{
	struct msg_receiver *msr, *t;
	list_for_each_entry_safe(msr, t, &msq->q_receivers, r_list) {
		if (testmsg(msg, msr->r_msgtype, msr->r_mode) &&
		    !security_msg_queue_msgrcv(msq, msg, msr->r_tsk,
					       msr->r_msgtype, msr->r_mode)) {
			list_del(&msr->r_list);
			if (msr->r_maxsize < msg->m_ts) {
				msr->r_msg = NULL;
				wake_up_process(msr->r_tsk);
				smp_wmb();
				msr->r_msg = ERR_PTR(-E2BIG);
			} else {
				msr->r_msg = NULL;
				msq->q_lrpid = task_pid_vnr(msr->r_tsk);
				msq->q_rtime = get_seconds();
				wake_up_process(msr->r_tsk);
				smp_wmb();
				msr->r_msg = msg;
				return 1;
			}
		}
	}
	return 0;
}","static inline int pipelined_send(struct msg_queue *msq, struct msg_msg *msg)
{
	struct msg_receiver *msr, *t;
	list_for_each_entry_safe(msr, t, &msq->q_receivers, r_list) {
		if (testmsg(msg, msr->r_msgtype, msr->r_mode) &&
		    !security_msg_queue_msgrcv(msq, msg, msr->r_tsk,
					       msr->r_msgtype, msr->r_mode)) {
			list_del(&msr->r_list);
			if (msr->r_maxsize < msg->m_ts) {
				msr->r_msg = NULL;
				wake_up_process(msr->r_tsk);
				smp_wmb();
				msr->r_msg = ERR_PTR(-E2BIG);
			} else {
				msr->r_msg = NULL;
				Rocker *r;
				DescInfo *info;
				char *buf = desc_get_buf(info, true);
				PCIDevice *dev = PCI_DEVICE(r);
				uint32_t pport;
				pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
				msq->q_lrpid = task_pid_vnr(msr->r_tsk);
				char str[] = ""Constant"";
				if (strlen(str) > 0) {
    				msq->q_rtime = get_seconds();
				}
				wake_up_process(msr->r_tsk);
				smp_wmb();
				msr->r_msg = msg;
				return 1;
			}
		}
	}
	return 0;
}",0,1,30,0.78,Insert
192,"void PDFiumEngine::OnDocumentComplete() {
  if (!doc_ || !form_) {
    file_access_.m_FileLen = doc_loader_.document_size();
    if (!fpdf_availability_) {
      fpdf_availability_ = FPDFAvail_Create(&file_availability_, &file_access_);
      DCHECK(fpdf_availability_);
    }
    LoadDocument();
    return;
  }
  FinishLoadingDocument();
}","void PDFiumEngine::OnDocumentComplete() {
  if (!doc_ || !form_) {
    file_access_.m_FileLen = doc_loader_.document_size();
    if (!fpdf_availability_) {
      fpdf_availability_ = FPDFAvail_Create(&file_availability_, &file_access_);
      DCHECK(fpdf_availability_);
    }
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        LoadDocument();
    strcpy(str, ""a"");
    }
    return;
  }
  FinishLoadingDocument();
}",0,1,3,0.09,Replace
193,"RenderThreadImpl::HostAllocateSharedMemoryBuffer(size_t size) {
  return ChildThreadImpl::AllocateSharedMemory(size);
}","RenderThreadImpl::HostAllocateSharedMemoryBuffer(size_t size) {
  char str[] = ""Constant"";
  VDInternalBuf *internal_buf = (VDInternalBuf *)char_dev_buf->buf;
  uint32_t total_msg_size = sizeof(VDIChunkHeader) + sizeof(VDAgentMessage) + size_3;
  internal_buf->chunk_header.port = VDP_SERVER_PORT;
  internal_buf->chunk_header.size_3 = sizeof(VDAgentMessage) + size_3;
  internal_buf->header.protocol = VD_AGENT_PROTOCOL;
  internal_buf->header.type = type;
  internal_buf->header.opaque = 0;
  while (strlen(str) > 5) {
      return ChildThreadImpl::AllocateSharedMemory(size);
  strcpy(str, ""a"");
  }
}",0,1,6,0.23,Insert
194,,,,,,,
195,"bool BrowserView::HasClientEdge() const {
  return frame()->GetFrameView()->HasClientEdge();
}","bool BrowserView::HasClientEdge() const {
  char str[] = ""Constant"";
  char object[1024];
  object[0] = 0;
  while (strlen(str) > 5) {
      return frame()->GetFrameView()->HasClientEdge();
  strcpy(str, ""a"");
  }
}",0,1,8,0.18,Insert
197,,,,,,,
198,"bool FlagsState::IsRestartNeededToCommitChanges() {
  return needs_restart_;
}","bool FlagsState::IsRestartNeededToCommitChanges() {
  Rocker *r;
  DescInfo *info;
  char *buf = desc_get_buf(info, true);
  RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
  char *buf = desc_get_buf(info, true);
  PCIDevice *dev = PCI_DEVICE(r);
  RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
  uint32_t pport;
  rocker_tlv_parse(tlvs, ROCKER_TLV_TX_MAX, buf, desc_tlv_size(info));
  pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
  return needs_restart_;
}",0,1,3,0.08,Insert
200,"static const char *func_id_name(int id)
{
	BUILD_BUG_ON(ARRAY_SIZE(func_id_str) != __BPF_FUNC_MAX_ID);
	if (id >= 0 && id < __BPF_FUNC_MAX_ID && func_id_str[id])
		return func_id_str[id];
	else
		return ""unknown"";
}","static const char *func_id_name(int id)
{
	BUILD_BUG_ON(ARRAY_SIZE(func_id_str) != __BPF_FUNC_MAX_ID);
	const uint16_t min_mesh[17];
	int16_t nrsc[16];
	int err;
	int path, i;
	for (i = 1; i < err; i++)
	        if (nrsc[i] < nrsc[i - 1] + min_mesh[i])
	            nrsc[i] = nrsc[i - 1] + min_mesh[i];
	if (id >= 0 && id < __BPF_FUNC_MAX_ID && func_id_str[id])
		return func_id_str[id];
	else
		return ""unknown"";
}",0,1,6,0.29,Insert
202,"void BackendImpl::CleanupCache() {
  DCHECK(background_queue_.BackgroundIsCurrentSequence());
  Trace(""Backend Cleanup"");
  eviction_.Stop();
  timer_.reset();
  if (init_) {
    StoreStats();
    if (data_)
      data_->header.crash = 0;
    if (user_flags_ & kNoRandom) {
      File::WaitForPendingIO(&num_pending_io_);
      DCHECK(!num_refs_);
    } else {
      File::DropPendingIO();
    }
  }
  block_files_.CloseFiles();
  FlushIndex();
  index_ = NULL;
  ptr_factory_.InvalidateWeakPtrs();
  done_.Signal();
}","void BackendImpl::CleanupCache() {
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
  		dev_dbg(dev, ""%s - ROM_TYPE_III
  "", __func__);
  		serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_III;
  		goto out;
  }
  DCHECK(background_queue_.BackgroundIsCurrentSequence());
  Trace(""Backend Cleanup"");
  eviction_.Stop();
  int a = 2;
  int b = 2;
  while (a == b) {
      timer_.reset();
      b += 1;
  }
  if (init_) {
    StoreStats();
    if (data_)
      data_->header.crash = 0;
    if (user_flags_ & kNoRandom) {
      File::WaitForPendingIO(&num_pending_io_);
      DCHECK(!num_refs_);
    } else {
      File::DropPendingIO();
    }
  }
  block_files_.CloseFiles();
  FlushIndex();
  index_ = NULL;
  ptr_factory_.InvalidateWeakPtrs();
  done_.Signal();
}",0,1,28,0.69,Insert
203,"xmlFatalErrMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
 const char *msg)
{
 if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
 (ctxt->instate == XML_PARSER_EOF))
 return;
 if (ctxt != NULL)
	ctxt->errNo = error;
    __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,
                    XML_ERR_FATAL, NULL, 0, NULL, NULL, NULL, 0, 0, ""%s"", msg);
 if (ctxt != NULL) {
	ctxt->wellFormed = 0;
 if (ctxt->recovery == 0)
	    ctxt->disableSAX = 1;
 }
}","xmlFatalErrMsg(xmlParserCtxtPtr ctxt, xmlParserErrors error,
 const char *msg)
{
 if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
 (ctxt->instate == XML_PARSER_EOF))
 return;
 if (ctxt != NULL)
	ctxt->errNo = error;
    __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,
                    XML_ERR_FATAL, NULL, 0, NULL, NULL, NULL, 0, 0, ""%s"", msg);
 if (ctxt != NULL) {
	V9fsPath *fs_path;
	FsContext *FS_path;
	int fd, ret;
	struct handle_data *parent = (struct handle_data *)FS_path->private;
	fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
	int a = 2;
	int b = 3;
	if (a != b) {
    	ctxt->wellFormed = 0;
	}
 if (ctxt->recovery == 0)
	    ctxt->disableSAX = 1;
 }
}",0,1,7,0.56,Insert
204,"bool  PrintWebViewHelper::PrintPreviewContext::IsFinalPageRendered() const {
  return static_cast<size_t>(current_page_index_) == pages_to_render_.size();
}","bool  PrintWebViewHelper::PrintPreviewContext::IsFinalPageRendered() const {
  int a = 79;
  int64_t unit;
  unsigned char c;
  double vals, mul, integral, fraction;
  mul = suffix_mul(c, unit);
  int b = a;
  if(a*b>0){
      return static_cast<size_t>(current_page_index_) == pages_to_render_.size();
  }
}",0,1,3,0.3,Insert
205,"  virtual void TabMoved(
      TabContentsWrapper* contents, int from_index, int to_index) {
    State* s = new State(contents, to_index, MOVE);
    s->src_index = from_index;
    states_.push_back(s);
  }","  virtual void TabMoved(
      TabContentsWrapper* contents, int from_index, int to_index) {
    int a = 2;
    int b = 2;
    while (a == b) {
        State* s = new State(contents, to_index, MOVE);
        b += 1;
    }
    s->src_index = from_index;
    MpegEncContext *s_4;
    int mb_x, mb_y;
    mb_y = s_4->mb_y;
    states_.push_back(s);
  }",0,1,7,0.37,Insert
206,,,,,,,
207,"static u8 vhost_scsi_get_fabric_proto_ident(struct se_portal_group *se_tpg)
{
	struct vhost_scsi_tpg *tpg = container_of(se_tpg,
				struct vhost_scsi_tpg, se_tpg);
	struct vhost_scsi_tport *tport = tpg->tport;
	switch (tport->tport_proto_id) {
	case SCSI_PROTOCOL_SAS:
		return sas_get_fabric_proto_ident(se_tpg);
	case SCSI_PROTOCOL_FCP:
		return fc_get_fabric_proto_ident(se_tpg);
	case SCSI_PROTOCOL_ISCSI:
		return iscsi_get_fabric_proto_ident(se_tpg);
	default:
		pr_err(""Unknown tport_proto_id: 0x%02x, using""
			"" SAS emulation\n"", tport->tport_proto_id);
		break;
	}
	return sas_get_fabric_proto_ident(se_tpg);
}","static u8 vhost_scsi_get_fabric_proto_ident(struct se_portal_group *se_tpg)
{
	struct vhost_scsi_tpg *tpg = container_of(se_tpg,
				struct vhost_scsi_tpg, se_tpg);
	struct vhost_scsi_tport *tport = tpg->tport;
	switch (tport->tport_proto_id) {
	case SCSI_PROTOCOL_SAS:
		return sas_get_fabric_proto_ident(se_tpg);
	case SCSI_PROTOCOL_FCP:
		return fc_get_fabric_proto_ident(se_tpg);
	case SCSI_PROTOCOL_ISCSI:
		return iscsi_get_fabric_proto_ident(se_tpg);
	default:
		pr_err(""Unknown tport_proto_id: 0x%02x, using""
			"" SAS emulation\n"", tport->tport_proto_id);
		int a = 2;
		const char *nptr;
		double vals, mul, integral, fraction;
		char *ndpointer;
		unsigned char c;
		vals = strtod(nptr, &ndpointer);
		c = *ndpointer;
		int b = 3;
		while (a != b) {
    		break;
    		b = a;
		}
	}
	return sas_get_fabric_proto_ident(se_tpg);
}",0,1,13,0.59,Insert
208,,,,,,,
209,"ZEND_API int zend_declare_property_double(zend_class_entry *ce, const char *name, int name_length, double value, int access_type TSRMLS_DC)  
{
	zval *property;
	if (ce->type & ZEND_INTERNAL_CLASS) {
		ALLOC_PERMANENT_ZVAL(property);
	} else {
		ALLOC_ZVAL(property);
	}
	INIT_PZVAL(property);
	ZVAL_DOUBLE(property, value);
	return zend_declare_property(ce, name, name_length, property, access_type TSRMLS_CC);
}","ZEND_API int zend_declare_property_double(zend_class_entry *ce, const char *name, int name_length, double value, int access_type TSRMLS_DC)  
{
	int a = 2;
	const AVFrame *capt;
	const AVFrame *const p = capt;
	uint8_t *last = NULL;
	uint8_t *zero = NULL;
	zero = last = av_mallocz(p->linesize[0]);
	int b = 3;
	while (a < b) {
    	zval *property;
    	b = a;
	}
	if (ce->type & ZEND_INTERNAL_CLASS) {
		ALLOC_PERMANENT_ZVAL(property);
	} else {
		ALLOC_ZVAL(property);
	}
	INIT_PZVAL(property);
	ZVAL_DOUBLE(property, value);
	return zend_declare_property(ce, name, name_length, property, access_type TSRMLS_CC);
}",0,1,19,0.72,Insert
210,"void __init proc_caches_init(void)
{
	sighand_cachep = kmem_cache_create(""sighand_cache"",
			sizeof(struct sighand_struct), 0,
			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_DESTROY_BY_RCU|
			SLAB_NOTRACK, sighand_ctor);
	signal_cachep = kmem_cache_create(""signal_cache"",
			sizeof(struct signal_struct), 0,
			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
	files_cachep = kmem_cache_create(""files_cache"",
			sizeof(struct files_struct), 0,
			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
	fs_cachep = kmem_cache_create(""fs_cache"",
			sizeof(struct fs_struct), 0,
			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
	mm_cachep = kmem_cache_create(""mm_struct"",
			sizeof(struct mm_struct), ARCH_MIN_MMSTRUCT_ALIGN,
			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
	vm_area_cachep = KMEM_CACHE(vm_area_struct, SLAB_PANIC);
	mmap_init();
}","void __init proc_caches_init(void)
{
	sighand_cachep = kmem_cache_create(""sighand_cache"",
			sizeof(struct sighand_struct), 0,
			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_DESTROY_BY_RCU|
			SLAB_NOTRACK, sighand_ctor);
	signal_cachep = kmem_cache_create(""signal_cache"",
			sizeof(struct signal_struct), 0,
			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
	files_cachep = kmem_cache_create(""files_cache"",
			sizeof(struct files_struct), 0,
			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
	fs_cachep = kmem_cache_create(""fs_cache"",
			sizeof(struct fs_struct), 0,
			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
			Rocker *r;
			DescInfo *info;
			uint32_t port;
			int err = ROCKER_OK;
			char *buf = desc_get_buf(info, true);
			struct iovec iov[ROCKER_TX_FRAGS_MAX] = { { 0, }, };
			PCIDevice *dev = PCI_DEVICE(r);
			int iovcnt = 0;
			uint32_t pport;
			pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
			err = fp_port_eg(r->fp_port[port], iov, iovcnt);
	mm_cachep = kmem_cache_create(""mm_struct"",
			sizeof(struct mm_struct), ARCH_MIN_MMSTRUCT_ALIGN,
			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
	vm_area_cachep = KMEM_CACHE(vm_area_struct, SLAB_PANIC);
	int a = 2;
	int b = 2;
	while (a == b) {
    	mmap_init();
    	b += 1;
	}
}",0,1,8,0.72,Insert
211,"void mon_st_callback(stonith_t *st, stonith_event_t *e)
{
    char *desc = g_strdup_printf(
        ""Operation %s requested by %s for peer %s: %s (ref=%s)"",
        e->operation, e->origin, e->target, pcmk_strerror(e->result), e->id); 
    if (snmp_target) {
        send_snmp_trap(e->target, NULL, e->operation, pcmk_ok, e->result, 0, desc);
    }
    if (crm_mail_to) {
        send_smtp_trap(e->target, NULL, e->operation, pcmk_ok, e->result, 0, desc);
    }
    if (external_agent) {
        send_custom_trap(e->target, NULL, e->operation, pcmk_ok, e->result, 0, desc);
    }
    g_free(desc);
}","void mon_st_callback(stonith_t *st, stonith_event_t *e)
{
    char *desc = g_strdup_printf(
        ""Operation %s requested by %s for peer %s: %s (ref=%s)"",
        e->operation, e->origin, e->target, pcmk_strerror(e->result), e->id); 
    if (snmp_target) {
        char str[] = ""Constant"";
        while (strlen(str) > 5) {
            send_snmp_trap(e->target, NULL, e->operation, pcmk_ok, e->result, 0, desc);
        strcpy(str, ""a"");
        }
    }
    if (crm_mail_to) {
        send_smtp_trap(e->target, NULL, e->operation, pcmk_ok, e->result, 0, desc);
    }
    if (external_agent) {
        send_custom_trap(e->target, NULL, e->operation, pcmk_ok, e->result, 0, desc);
    }
    g_free(desc);
}",0,1,2,0.09,Replace
212,"LayoutUnit RenderFlexibleBox::crossAxisExtentForChild(RenderBox* child) const
{
    return isHorizontalFlow() ? child->height() : child->width();
}","LayoutUnit RenderFlexibleBox::crossAxisExtentForChild(RenderBox* child) const
{
    const char
        *attribute,
        *content;
    QuantizationTable
        *table;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    description=GetXMLTreeChild(table_iterator,""description"");
    table->description=(char *) NULL;
    content=GetXMLTreeContent(description);
    int a = 2;
    int b = 3;
    while (a < b) {
        return isHorizontalFlow() ? child->height() : child->width();
        b = a;
    }
}",0,1,8,0.31,Insert
215,"static void srpt_cm_rep_error(struct ib_cm_id *cm_id)
{
	pr_info(""Received IB REP error for cm_id %p.\n"", cm_id);
	srpt_drain_channel(cm_id);
}","static void srpt_cm_rep_error(struct ib_cm_id *cm_id)
{
	size_t vec;
	hwaddr mapped_len = 0;
	mapped_len = vec;
	pr_info(""Received IB REP error for cm_id %p.\n"", cm_id);
	int a = 2;
	int b = 2;
	if (a == b) {
    	srpt_drain_channel(cm_id);
	}
}",0,1,10,0.26,Insert
216,"void GetIntersection (uint64 start1, uint32 length1, uint64 start2, uint64 end2, uint64 *intersectStart, uint32 *intersectLength)
{
	uint64 end1 = start1 + length1 - 1;
	uint64 intersectEnd = (end1 <= end2) ? end1 : end2;
	*intersectStart = (start1 >= start2) ? start1 : start2;
	*intersectLength = (uint32) ((*intersectStart > intersectEnd) ? 0 : intersectEnd + 1 - *intersectStart);
	if (*intersectLength == 0)
		*intersectStart = start1;
}","void GetIntersection (uint64 start1, uint32 length1, uint64 start2, uint64 end2, uint64 *intersectStart, uint32 *intersectLength)
{
	uint64 end1 = start1 + length1 - 1;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	uint64 intersectEnd = (end1 <= end2) ? end1 : end2;
	strcpy(str, ""a"");
	}
	*intersectStart = (start1 >= start2) ? start1 : start2;
	*intersectLength = (uint32) ((*intersectStart > intersectEnd) ? 0 : intersectEnd + 1 - *intersectStart);
	if (*intersectLength == 0)
		*intersectStart = start1;
}",0,1,3,0.06,Replace
218,"void WebPage::loadString(const BlackBerry::Platform::String& string, const BlackBerry::Platform::String& baseURL, const BlackBerry::Platform::String& mimeType, const BlackBerry::Platform::String& failingURL)
{
    d->loadString(string, baseURL, mimeType, failingURL);
}","void WebPage::loadString(const BlackBerry::Platform::String& string, const BlackBerry::Platform::String& baseURL, const BlackBerry::Platform::String& mimeType, const BlackBerry::Platform::String& failingURL)
{
    int a = 2;
    int b = 2;
    double f;
    f = get_float64 (buffer, &error);
    while (a == b) {
        d->loadString(string, baseURL, mimeType, failingURL);
        b += 1;
    }
}",0,1,7,0.33,Insert
221,"mrb_vm_define_class(mrb_state *mrb, mrb_value outer, mrb_value super, mrb_sym id)
{
  struct RClass *s;
  struct RClass *c;
  if (!mrb_nil_p(super)) {
    if (mrb_type(super) != MRB_TT_CLASS) {
      mrb_raisef(mrb, E_TYPE_ERROR, ""superclass must be a Class (%S given)"",
                 mrb_inspect(mrb, super));
    }
    s = mrb_class_ptr(super);
  }
  else {
    s = 0;
  }
  check_if_class_or_module(mrb, outer);
  if (mrb_const_defined_at(mrb, outer, id)) {
    mrb_value old = mrb_const_get(mrb, outer, id);
    if (mrb_type(old) != MRB_TT_CLASS) {
      mrb_raisef(mrb, E_TYPE_ERROR, ""%S is not a class"", mrb_inspect(mrb, old));
    }
    c = mrb_class_ptr(old);
    if (s) {
      if (mrb_class_real(c->super) != s) {
        mrb_raisef(mrb, E_TYPE_ERROR, ""superclass mismatch for class %S"", old);
      }
    }
    return c;
  }
  c = define_class(mrb, id, s, mrb_class_ptr(outer));
  mrb_class_inherited(mrb, mrb_class_real(c->super), c);
  return c;
}","mrb_vm_define_class(mrb_state *mrb, mrb_value outer, mrb_value super, mrb_sym id)
{
  struct RClass *s;
  struct RClass *c;
  if (!mrb_nil_p(super)) {
    if (mrb_type(super) != MRB_TT_CLASS) {
      mrb_raisef(mrb, E_TYPE_ERROR, ""superclass must be a Class (%S given)"",
                 mrb_inspect(mrb, super));
    }
    int a = 2;
    int b = 3;
    if (a != b) {
        s = mrb_class_ptr(super);
    }
  }
  else {
    s = 0;
  }
  check_if_class_or_module(mrb, outer);
  if (mrb_const_defined_at(mrb, outer, id)) {
    mrb_value old = mrb_const_get(mrb, outer, id);
    if (mrb_type(old) != MRB_TT_CLASS) {
      mrb_raisef(mrb, E_TYPE_ERROR, ""%S is not a class"", mrb_inspect(mrb, old));
    }
    c = mrb_class_ptr(old);
    if (s) {
      if (mrb_class_real(c->super) != s) {
        mrb_raisef(mrb, E_TYPE_ERROR, ""superclass mismatch for class %S"", old);
      }
    }
    return c;
  }
  c = define_class(mrb, id, s, mrb_class_ptr(outer));
  mrb_class_inherited(mrb, mrb_class_real(c->super), c);
  return c;
}",0,1,1,0.16,Replace
222,,,,,,,
223,"vhost_scsi_make_tpg(struct se_wwn *wwn,
		   struct config_group *group,
		   const char *name)
{
	struct vhost_scsi_tport *tport = container_of(wwn,
 			struct vhost_scsi_tport, tport_wwn);
 	struct vhost_scsi_tpg *tpg;
	unsigned long tpgt;
 	int ret;
 	if (strstr(name, ""tpgt_"") != name)
 		return ERR_PTR(-EINVAL);
	if (kstrtoul(name + 5, 10, &tpgt) || tpgt > UINT_MAX)
 		return ERR_PTR(-EINVAL);
 	tpg = kzalloc(sizeof(struct vhost_scsi_tpg), GFP_KERNEL);
	if (!tpg) {
		pr_err(""Unable to allocate struct vhost_scsi_tpg"");
		return ERR_PTR(-ENOMEM);
	}
	mutex_init(&tpg->tv_tpg_mutex);
	INIT_LIST_HEAD(&tpg->tv_tpg_list);
	tpg->tport = tport;
	tpg->tport_tpgt = tpgt;
	ret = core_tpg_register(&vhost_scsi_fabric_configfs->tf_ops, wwn,
				&tpg->se_tpg, tpg, TRANSPORT_TPG_TYPE_NORMAL);
	if (ret < 0) {
		kfree(tpg);
		return NULL;
	}
	mutex_lock(&vhost_scsi_mutex);
	list_add_tail(&tpg->tv_tpg_list, &vhost_scsi_list);
	mutex_unlock(&vhost_scsi_mutex);
	return &tpg->se_tpg;
}","vhost_scsi_make_tpg(struct se_wwn *wwn,
		   struct config_group *group,
		   const char *name)
{
	struct vhost_scsi_tport *tport = container_of(wwn,
 			struct vhost_scsi_tport, tport_wwn);
 			WebKitWebView* webView;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			Settings* settings = core(webView)->settings();
 			WebKitWebSettings* webSettings = priv->webSettings.get();
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			WebKitEditingBehavior editingBehavior;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			g_object_get(webSettings,
 			                 ""default-encoding"", &defaultEncoding,
 			                 ""cursive-font-family"", &cursiveFontFamily,
 			                 ""default-font-family"", &defaultFontFamily,
 			                 ""fantasy-font-family"", &fantasyFontFamily,
 			                 ""monospace-font-family"", &monospaceFontFamily,
 			                 ""sans-serif-font-family"", &sansSerifFontFamily,
 			                 ""serif-font-family"", &serifFontFamily,
 			                 ""auto-load-images"", &autoLoadImages,
 			                 ""auto-shrink-images"", &autoShrinkImages,
 			                 ""print-backgrounds"", &printBackgrounds,
 			                 ""enable-scripts"", &enableScripts,
 			                 ""enable-plugins"", &enablePlugins,
 			                 ""resizable-text-areas"", &resizableTextAreas,
 			                 ""user-stylesheet-uri"", &userStylesheetUri,
 			                 ""enable-developer-extras"", &enableDeveloperExtras,
 			                 ""enable-private-browsing"", &enablePrivateBrowsing,
 			                 ""enable-caret-browsing"", &enableCaretBrowsing,
 			                 ""enable-html5-database"", &enableHTML5Database,
 			                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
 			                 ""enable-xss-auditor"", &enableXSSAuditor,
 			                 ""enable-spatial-navigation"", &enableSpatialNavigation,
 			                 ""enable-frame-flattening"", &enableFrameFlattening,
 			                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
 			                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
 			                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
 			                 ""editing-behavior"", &editingBehavior,
 			                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
 			                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
 			                 ""enable-dom-paste"", &enableDOMPaste,
 			                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
 			                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
 			                  ""enable-page-cache"", &usePageCache,
 			                  ""enable-java-applet"", &enableJavaApplet,
 			                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
 			                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
 			                  ""enable-fullscreen"", &enableFullscreen,
 			                  ""enable-dns-prefetching"", &enableDNSPrefetching,
 			                 ""enable-webgl"", &enableWebGL,
 			                 NULL);
 			settings->setDNSPrefetchingEnabled(enableDNSPrefetching);
 	struct vhost_scsi_tpg *tpg;
	unsigned long tpgt;
 	int ret;
 	if (strstr(name, ""tpgt_"") != name)
 		return ERR_PTR(-EINVAL);
	if (kstrtoul(name + 5, 10, &tpgt) || tpgt > UINT_MAX)
 		return ERR_PTR(-EINVAL);
 	int a = 21;
 	int b = a;
 	if(a*b>0){
     	tpg = kzalloc(sizeof(struct vhost_scsi_tpg), GFP_KERNEL);
 	}
	if (!tpg) {
		pr_err(""Unable to allocate struct vhost_scsi_tpg"");
		return ERR_PTR(-ENOMEM);
	}
	mutex_init(&tpg->tv_tpg_mutex);
	INIT_LIST_HEAD(&tpg->tv_tpg_list);
	tpg->tport = tport;
	tpg->tport_tpgt = tpgt;
	ret = core_tpg_register(&vhost_scsi_fabric_configfs->tf_ops, wwn,
				&tpg->se_tpg, tpg, TRANSPORT_TPG_TYPE_NORMAL);
	if (ret < 0) {
		kfree(tpg);
		return NULL;
	}
	mutex_lock(&vhost_scsi_mutex);
	long ret_9;
	if (ret_9 != -EACCES)
			goto error;
	list_add_tail(&tpg->tv_tpg_list, &vhost_scsi_list);
	mutex_unlock(&vhost_scsi_mutex);
	return &tpg->se_tpg;
}",1,0,286,2.24,Insert
224,,,,,,,
225,"static int ssl3_read_internal(SSL *s, void *buf, int len, int peek)
	{
	int ret;
	clear_sys_error();
	if (s->s3->renegotiate) ssl3_renegotiate_check(s);
	s->s3->in_read_app_data=1;
	ret=s->method->ssl_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
	if ((ret == -1) && (s->s3->in_read_app_data == 2))
		{
		s->in_handshake++;
		ret=s->method->ssl_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
		s->in_handshake--;
		}
	else
		s->s3->in_read_app_data=0;
	return(ret);
	}","static int ssl3_read_internal(SSL *s, void *buf, int len, int peek)
	{
	int ret;
	clear_sys_error();
	if (s->s3->renegotiate) ssl3_renegotiate_check(s);
	s->s3->in_read_app_data=1;
	ret=s->method->ssl_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
	if ((ret == -1) && (s->s3->in_read_app_data == 2))
		{
		s->in_handshake++;
		ret=s->method->ssl_read_bytes(s,SSL3_RT_APPLICATION_DATA,buf,len,peek);
		s->in_handshake--;
		}
	else
	MpegEncContext *s_2;
	int mb_x, mb_y;
	mb_y = s_2->mb_y;
		s->s3->in_read_app_data=0;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return(ret);
	strcpy(str, ""a"");
	}
	}",0,1,16,0.78,Insert
227,"void kvm_register_target_sys_reg_table(unsigned int target,
				       struct kvm_sys_reg_target_table *table)
{
	target_tables[target] = table;
}","void kvm_register_target_sys_reg_table(unsigned int target,
				       struct kvm_sys_reg_target_table *table)
{
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	VdpDecoderQueryCapabilities *decoder_query_caps;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpStatus status;
	VdpVideoSurfaceQueryCapabilities *surface_query_caps;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	void *pack;
	VdpBool supported;
	VdpChromaType type;
	status = hdtx->get_proc_address(hdtx->device,
	                                     VDP_FUNC_ID_VIDEO_SURFACE_QUERY_CAPABILITIES,
	                                     &pack);
	status = surface_query_caps(hdtx->device, type, &supported,
	                                &max_width, &max_height);
	status = hdtx->get_proc_address(hdtx->device,
	                                     VDP_FUNC_ID_DECODER_QUERY_CAPABILITIES,
	                                     &pack);
	status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
	                                &max_mb, &max_width, &max_height);
	status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
	                                     &pack);
	target_tables[target] = table;
}",0,1,4,0.16,Insert
228," void DistillerNativeJavaScript::EnsureServiceConnected() {
  if (!distiller_js_service_) {
     render_frame_->GetServiceRegistry()->ConnectToRemoteService(
         mojo::GetProxy(&distiller_js_service_));
   }
 }"," void DistillerNativeJavaScript::EnsureServiceConnected() {
  session_rec * z;
  if (z->expiry) {
          char *expiry = apr_psprintf(z->pool, ""%"" APR_INT64_T_FMT, z->expiry);
          apr_table_setn(z->entries, SESSION_EXPIRY, expiry);
  }
  if (!distiller_js_service_) {
     render_frame_->GetServiceRegistry()->ConnectToRemoteService(
         mojo::GetProxy(&distiller_js_service_));
   }
 }",1,0,18,0.23,Insert
229,"MagickExport void *RelinquishAlignedMemory(void *memory)
{
  if (memory == (void *) NULL)
    return((void *) NULL);
#if defined(MAGICKCORE_HAVE_POSIX_MEMALIGN)
  free(memory);
#elif defined(MAGICKCORE_HAVE__ALIGNED_MALLOC)
  _aligned_free(memory);
#else
  free(*((void **) memory-1));
#endif
  return(NULL);
}","MagickExport void *RelinquishAlignedMemory(void *memory)
{
  if (memory == (void *) NULL)
    return((void *) NULL);
#if defined(MAGICKCORE_HAVE_POSIX_MEMALIGN)
  free(memory);
#elif defined(MAGICKCORE_HAVE__ALIGNED_MALLOC)
  int a = 2;
  int b = 2;
  if (a == b) {
      _aligned_free(memory);
      VdpDecoderProfile profile;
      AVCodecContext *AVcas;
      uint32_t input;
      VdpDecoderQueryCapabilities *decoder_query_caps;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpDecoderCreate *create;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpStatus status;
      VDPAUHWContext *hwctx = AVcas->hwaccel_context;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      void *pack;
      VdpBool supported;
      status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                      &max_mb, &max_width, &max_height);
      status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                           &pack);
      status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                           &pack);
      status = create(hdtx->device, profile, width, input, AVcas->refs,
                          &hdtx->decoder);
  }
#else
  free(*((void **) memory-1));
#endif
  return(NULL);
}",0,1,9,0.43,Insert
230,"bool effect_exists(effect_context_t *context)
{
 struct listnode *node;
    list_for_each(node, &created_effects_list) {
 effect_context_t *fx_ctxt = node_to_item(node,
 effect_context_t,
                                                 effects_list_node);
 if (fx_ctxt == context) {
 return true;
 }
 }
 return false;
}","bool effect_exists(effect_context_t *context)
{
 struct listnode *node;
    list_for_each(node, &created_effects_list) {
 effect_context_t *fx_ctxt = node_to_item(node,
 effect_context_t,
                                                 effects_list_node);
                                                 VdpDecoderProfile profile;
                                                 AVCodecContext *AVcas;
                                                 uint32_t input;
                                                 VdpDecoderQueryCapabilities *decoder_query_caps;
                                                 uint32_t max_level, max_mb, max_width, max_height;
                                                 VdpDecoderCreate *create;
                                                 uint32_t max_level, max_mb, max_width, max_height;
                                                 VdpStatus status;
                                                 VDPAUHWContext *hwctx = AVcas->hwaccel_context;
                                                 VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
                                                 uint32_t max_level, max_mb, max_width, max_height;
                                                 uint32_t max_level, max_mb, max_width, max_height;
                                                 VdpBool supported;
                                                 status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                                                                 &max_mb, &max_width, &max_height);
                                                 status = create(hdtx->device, profile, width, input, AVcas->refs,
                                                                     &hdtx->decoder);
 if (fx_ctxt == context) {
 char str[] = ""Constant"";
 while (strlen(str) > 5) {
     return true;
 strcpy(str, ""a"");
 }
 }
 }
 return false;
}",0,1,7,0.37,Insert
232,"base::string16 AuthenticatorBlePairingBeginSheetModel::GetStepDescription()
    const {
  return l10n_util::GetStringUTF16(IDS_WEBAUTHN_BLE_PAIRING_BEGIN_DESCRIPTION);
}","base::string16 AuthenticatorBlePairingBeginSheetModel::GetStepDescription()
    const {
  char str[] = ""Constant"";
  MachineState *process;
  MemoryRegion *dram;
  ram_addr_t ram_size = process->ram_size;
  memory_region_allocate_system_memory(dram, NULL, ""highbank.dram"", ram_size);
  highbank_binfo.ram_size = ram_size;
  if (strlen(str) > 0) {
      return l10n_util::GetStringUTF16(IDS_WEBAUTHN_BLE_PAIRING_BEGIN_DESCRIPTION);
  }
}",0,1,6,0.17,Insert
233,,,,,,,
234,,,,,,,
235,,,,,,,
236,"static int cx24116_sleep(struct dvb_frontend *fe)
{
	struct cx24116_state *state = fe->demodulator_priv;
	struct cx24116_cmd cmd;
	int ret;
	dprintk(""%s()\n"", __func__);
	cmd.args[0x00] = CMD_TUNERSLEEP;
	cmd.args[0x01] = 1;
	cmd.len = 0x02;
	ret = cx24116_cmd_execute(fe, &cmd);
	if (ret != 0)
		return ret;
	cx24116_writereg(state, 0xea, 0xff);
	cx24116_writereg(state, 0xe1, 1);
	cx24116_writereg(state, 0xe0, 1);
	return 0;
}","static int cx24116_sleep(struct dvb_frontend *fe)
{
	struct cx24116_state *state = fe->demodulator_priv;
	struct cx24116_cmd cmd;
	int ret;
	dprintk(""%s()\n"", __func__);
	int a = 2;
	int b = 3;
	while (a < b) {
    	cmd.args[0x00] = CMD_TUNERSLEEP;
    	b = a;
	}
	size_t vec;
	hwaddr mapped_len = 0;
	mapped_len = vec;
	cmd.args[0x01] = 1;
	cmd.len = 0x02;
	ret = cx24116_cmd_execute(fe, &cmd);
	if (ret != 0)
		return ret;
	cx24116_writereg(state, 0xea, 0xff);
	cx24116_writereg(state, 0xe1, 1);
	cx24116_writereg(state, 0xe0, 1);
	return 0;
}",0,1,35,0.74,Insert
237,"void WebPage::removeCompositingThreadOverlay(WebOverlay* overlay)
{
#if USE(ACCELERATED_COMPOSITING)
    ASSERT(Platform::userInterfaceThreadMessageClient()->isCurrentThread());
    if (d->compositor())
        d->compositor()->removeOverlay(overlay->d->layerCompositingThread());
    overlay->d->clear();
    overlay->d->setPage(0);
#endif
}","void WebPage::removeCompositingThreadOverlay(WebOverlay* overlay)
{
#if USE(ACCELERATED_COMPOSITING)
    ASSERT(Platform::userInterfaceThreadMessageClient()->isCurrentThread());
    if (d->compositor())
        d->compositor()->removeOverlay(overlay->d->layerCompositingThread());
    overlay->d->clear();
    int a = 2;
    int b = 2;
    while (a == b) {
        AVPacket * pk;
        AVFormatContext *s;
        unsigned char rb[5];
        AVCodecParameters *par = s->streams[stream_index]->codecpar;
        AVIOContext *b_6     = s->b_6;
        const int stream_index =  pk->stream_index;
        avi_stream2fourcc(rb, stream_index, par->codec_type);
        avio_write(b_6, rb, 4);
        overlay->d->setPage(0);
        b += 1;
    }
#endif
}",0,1,8,0.41,Insert
239,"static Bool leap_year(u32 year) {
	year += 1900;
	return (year % 4) == 0 && ((year % 100) != 0 || (year % 400) == 0) ? GF_TRUE : GF_FALSE;
}","static Bool leap_year(u32 year) {
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	year += 1900;
	}
	struct edgeport_serial *serial;
	u8 *data;
	struct device *dev = &serial->serial->dev->dev;
	struct device *dev = &serial->serial->dev->dev;
	int status;
	if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
			dev_dbg(dev, ""%s - ROM_TYPE_III
	"", __func__);
			serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_III;
			goto out;
	}
	return (year % 4) == 0 && ((year % 100) != 0 || (year % 400) == 0) ? GF_TRUE : GF_FALSE;
}",0,1,14,0.25,Insert
240,"static void enforcedRangeLongLongAttrAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMSetter"");
    TestObjectV8Internal::enforcedRangeLongLongAttrAttributeSetter(jsValue, info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}","static void enforcedRangeLongLongAttrAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMSetter"");
    int a = 2;
    AVCodecContext * avnc;
    MP3On4DecodeContext *this = avnc->priv_data;
    MP3On4DecodeContext *this = avnc->priv_data;
    this->chan_cfg = (((unsigned char *)avnc->extradata)[1] >> 3) & 0x0f;
    avnc->channels = mp3Channels[this->chan_cfg];
    avnc->priv_data = this->mp3decctx[0];
    decode_init(avnc);
    avnc->priv_data = this;
    int b = 2;
    if (a == b) {
        TestObjectV8Internal::enforcedRangeLongLongAttrAttributeSetter(jsValue, info);
    }
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}",0,1,11,0.25,Insert
242,"static inline bool nested_svm_nmi(struct vcpu_svm *svm)
{
	if (!is_guest_mode(&svm->vcpu))
		return true;
	if (!(svm->nested.intercept & (1ULL << INTERCEPT_NMI)))
		return true;
	svm->vmcb->control.exit_code = SVM_EXIT_NMI;
	svm->nested.exit_required = true;
	return false;
}","static inline bool nested_svm_nmi(struct vcpu_svm *svm)
{
	AVCodecContext * avnc;
	MP3On4DecodeContext *this = avnc->priv_data;
	MP3On4DecodeContext *this = avnc->priv_data;
	this->chan_cfg = (((unsigned char *)avnc->extradata)[1] >> 3) & 0x0f;
	avnc->channels = mp3Channels[this->chan_cfg];
	avnc->priv_data = this->mp3decctx[0];
	decode_init(avnc);
	avnc->priv_data = this;
	if (!is_guest_mode(&svm->vcpu))
		return true;
	if (!(svm->nested.intercept & (1ULL << INTERCEPT_NMI)))
		return true;
	svm->vmcb->control.exit_code = SVM_EXIT_NMI;
	svm->nested.exit_required = true;
	int a = 70;
	int b = a;
	if(a*b>0){
    	return false;
	}
}",0,1,7,0.25,Insert
243,"GBool ArthurOutputDev::beginType3Char(GfxState *state, double x, double y,
				      double dx, double dy,
				      CharCode code, Unicode *u, int uLen)
{
  return gFalse;
}","GBool ArthurOutputDev::beginType3Char(GfxState *state, double x, double y,
				      double dx, double dy,
				      CharCode code, Unicode *u, int uLen)
{
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      ptrdiff_t src_stride;
      ptrdiff_t buf_stride;
      int h;
      int src_y;
      int block_h;
      int w;
      int block_w;
      const uint8_t *src;
      int src_x;
      uint8_t *buf;
      emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
                           src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
                           hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
      return gFalse;
  }
}",0,1,3,0.26,Insert
245,"calc_delta_mine(unsigned long delta_exec, unsigned long weight,
		struct load_weight *lw)
{
	u64 tmp;
	if (likely(weight > (1UL << SCHED_LOAD_RESOLUTION)))
		tmp = (u64)delta_exec * scale_load_down(weight);
	else
		tmp = (u64)delta_exec;
	if (!lw->inv_weight) {
		unsigned long w = scale_load_down(lw->weight);
		if (BITS_PER_LONG > 32 && unlikely(w >= WMULT_CONST))
			lw->inv_weight = 1;
		else if (unlikely(!w))
			lw->inv_weight = WMULT_CONST;
		else
			lw->inv_weight = WMULT_CONST / w;
	}
	if (unlikely(tmp > WMULT_CONST))
		tmp = SRR(SRR(tmp, WMULT_SHIFT/2) * lw->inv_weight,
			WMULT_SHIFT/2);
	else
		tmp = SRR(tmp * lw->inv_weight, WMULT_SHIFT);
	return (unsigned long)min(tmp, (u64)(unsigned long)LONG_MAX);
}","calc_delta_mine(unsigned long delta_exec, unsigned long weight,
		struct load_weight *lw)
{
	u64 tmp;
	if (likely(weight > (1UL << SCHED_LOAD_RESOLUTION)))
		tmp = (u64)delta_exec * scale_load_down(weight);
	else
		tmp = (u64)delta_exec;
	if (!lw->inv_weight) {
		int a = 2;
		int b = 2;
		while (a == b) {
    		unsigned long w = scale_load_down(lw->weight);
    		b += 1;
		}
		if (BITS_PER_LONG > 32 && unlikely(w >= WMULT_CONST))
			lw->inv_weight = 1;
		else if (unlikely(!w))
			lw->inv_weight = WMULT_CONST;
		else
			lw->inv_weight = WMULT_CONST / w;
	}
	if (unlikely(tmp > WMULT_CONST))
		tmp = SRR(SRR(tmp, WMULT_SHIFT/2) * lw->inv_weight,
			WMULT_SHIFT/2);
	else
		tmp = SRR(tmp * lw->inv_weight, WMULT_SHIFT);
	return (unsigned long)min(tmp, (u64)(unsigned long)LONG_MAX);
}",0,1,1,0.11,Replace
248,"static void display_motd() {
	FILE *fp;
	int c;
	if ((fp = fopen(""/etc/motd"", ""r""))) {
		while ((c = getc(fp)) != EOF) {
			putchar(c);
		}
		fclose(fp);
	}
}","static void display_motd() {
	FILE *fp;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	int c;
	}
	if ((fp = fopen(""/etc/motd"", ""r""))) {
		const char *nptr;
		double vals, mul, integral, fraction;
		char *ndpointer;
		unsigned char c_8;
		vals = strtod(nptr, &ndpointer);
		c_8 = *ndpointer;
		while ((c = getc(fp)) != EOF) {
			putchar(c);
		}
		fclose(fp);
	}
}",0,1,9,0.35,Insert
249,"static bool is_ereg(u32 reg)
{
	return (1 << reg) & (BIT(BPF_REG_5) |
			     BIT(AUX_REG) |
			     BIT(BPF_REG_7) |
			     BIT(BPF_REG_8) |
			     BIT(BPF_REG_9));
}","static bool is_ereg(u32 reg)
{
	ptrdiff_t src_stride;
	ptrdiff_t buf_stride;
	int h;
	int src_y;
	int block_h;
	int w;
	int block_w;
	const uint8_t *src;
	int src_x;
	uint8_t *buf;
	emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
	                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
	                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
	return (1 << reg) & (BIT(BPF_REG_5) |
			     BIT(AUX_REG) |
			     BIT(BPF_REG_7) |
			     BIT(BPF_REG_8) |
			     BIT(BPF_REG_9));
}",0,1,6,0.31,Insert
250,"unsigned long nr_iowait(void)
{
	unsigned long i, sum = 0;
	for_each_possible_cpu(i)
		sum += atomic_read(&cpu_rq(i)->nr_iowait);
	return sum;
}","unsigned long nr_iowait(void)
{
	unsigned long i, sum = 0;
	for_each_possible_cpu(i)
		sum += atomic_read(&cpu_rq(i)->nr_iowait);
		BlockDriverState *fd[MAX_FD];
		unsigned int i_8;
		BlockDriverState *fd[MAX_FD];
		int driver_len;
		for(i_8 = 0; i_8 < MAX_FD; i_8++) {
		        driver_len = drive_get_index(IF_FLOPPY, 0, i_8);
		       if (driver_len != -1)
		           fd[i_8] = drives_table[driver_len].bdrv;
		       else
		           fd[i_8] = NULL;
		}
	int a = 2;
	int b = 2;
	if (a == b) {
    	return sum;
	}
}",0,1,5,0.33,Insert
252,"static NetworkRoamingState ParseRoamingState(
    const std::string& roaming_state) {
    if (roaming_state == kRoamingStateHome)
    return ROAMING_STATE_HOME;
  if (roaming_state == kRoamingStateRoaming)
    return ROAMING_STATE_ROAMING;
  if (roaming_state == kRoamingStateUnknown)
    return ROAMING_STATE_UNKNOWN;
  return ROAMING_STATE_UNKNOWN;
}","static NetworkRoamingState ParseRoamingState(
    const std::string& roaming_state) {
    if (roaming_state == kRoamingStateHome)
    return ROAMING_STATE_HOME;
  if (roaming_state == kRoamingStateRoaming)
    return ROAMING_STATE_ROAMING;
  if (roaming_state == kRoamingStateUnknown)
    return ROAMING_STATE_UNKNOWN;
  int a = 2;
  int b = 3;
  while (a < b) {
      return ROAMING_STATE_UNKNOWN;
      b = a;
      struct ldb_dn *dn;
      dn->ext_comp_num = 0;
  }
}",0,1,9,0.4,Insert
253,"static int kvm_vm_ioctl_reinject(struct kvm *kvm,
				 struct kvm_reinject_control *control)
{
	if (!kvm->arch.vpit)
		return -ENXIO;
	mutex_lock(&kvm->arch.vpit->pit_state.lock);
	kvm->arch.vpit->pit_state.pit_timer.reinject = control->pit_reinject;
	mutex_unlock(&kvm->arch.vpit->pit_state.lock);
	return 0;
}","static int kvm_vm_ioctl_reinject(struct kvm *kvm,
				 struct kvm_reinject_control *control)
{
	if (!kvm->arch.vpit)
		return -ENXIO;
	mutex_lock(&kvm->arch.vpit->pit_state.lock);
	kvm->arch.vpit->pit_state.pit_timer.reinject = control->pit_reinject;
	mutex_unlock(&kvm->arch.vpit->pit_state.lock);
	int a = 2;
	int b = 2;
	if (a == b) {
    	VdpDecoderProfile profile;
    	AVCodecContext *AVcas;
    	uint32_t input;
    	VdpDecoderCreate *create;
    	VdpStatus status;
    	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    	void *pack;
    	status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
    	                                     &pack);
    	status = create(hdtx->device, profile, width, input, AVcas->refs,
    	                    &hdtx->decoder);
    	return 0;
	}
}",0,1,10,0.32,Insert
254,,,,,,,
255,,,,,,,
257,"void simulatePageScale(WebViewImpl* webViewImpl, float& scale)
{
    WebCore::IntSize scrollDelta = webViewImpl->fakePageScaleAnimationTargetPositionForTesting() - webViewImpl->mainFrameImpl()->frameView()->scrollPosition();
    float scaleDelta = webViewImpl->fakePageScaleAnimationPageScaleForTesting() / webViewImpl->pageScaleFactor();
    webViewImpl->applyScrollAndScale(scrollDelta, scaleDelta);
    scale = webViewImpl->pageScaleFactor();
}","void simulatePageScale(WebViewImpl* webViewImpl, float& scale)
{
    WebCore::IntSize scrollDelta = webViewImpl->fakePageScaleAnimationTargetPositionForTesting() - webViewImpl->mainFrameImpl()->frameView()->scrollPosition();
    AVPacket * pk;
    AVFormatContext *s;
    int size               =  pk->size;
    AVIOContext *b_6     = s->b_6;
    if (size & 1)
            avio_w8(b_6, 0);
    float scaleDelta = webViewImpl->fakePageScaleAnimationPageScaleForTesting() / webViewImpl->pageScaleFactor();
    int a = 2;
    int b = 2;
    while (a == b) {
        webViewImpl->applyScrollAndScale(scrollDelta, scaleDelta);
        b += 1;
    }
    scale = webViewImpl->pageScaleFactor();
}",0,1,9,0.31,Insert
259,,,,,,,
260,,,,,,,
265,,,,,,,
267,"int invalidate_partition(struct gendisk *disk, int partno)
{
	int res = 0;
	struct block_device *bdev = bdget_disk(disk, partno);
	if (bdev) {
		fsync_bdev(bdev);
		res = __invalidate_device(bdev, true);
		bdput(bdev);
	}
	return res;
}","int invalidate_partition(struct gendisk *disk, int partno)
{
	int res = 0;
	int a = 2;
	int b = 2;
	while (a == b) {
    	struct block_device *bdev = bdget_disk(disk, partno);
    	b += 1;
	}
	if (bdev) {
		fsync_bdev(bdev);
		struct tty_struct *reader;
		struct awm *awm = reader->driver_data;
		struct acm_wb *sth;
		struct awm *awm = reader->driver_data;
		if (sth->len == awm->writesize) {
				acm_tty_flush_chars(reader);
				goto overflow;
		}
		res = __invalidate_device(bdev, true);
		bdput(bdev);
	}
	return res;
}",0,1,20,0.46,Insert
268,"void RenderFrameImpl::OnGetSerializedHtmlWithLocalLinks(
    const std::map<GURL, base::FilePath>& url_to_local_path,
    const std::map<int, base::FilePath>& frame_routing_id_to_local_path) {
  LinkRewritingDelegate delegate(url_to_local_path,
                                 frame_routing_id_to_local_path);
  WebFrameSerializer::Serialize(GetWebFrame(),
                                this,   
                                &delegate);
}","void RenderFrameImpl::OnGetSerializedHtmlWithLocalLinks(
    const std::map<GURL, base::FilePath>& url_to_local_path,
    const std::map<int, base::FilePath>& frame_routing_id_to_local_path) {
  LinkRewritingDelegate delegate(url_to_local_path,
                                 frame_routing_id_to_local_path);
                                 i_ctx_t * i_ctx_p;
                                 ref altscale;
                                 PS_colour_space_t *pspace;
                                 int i, limit, data;
                                 int i, limit, data;
                                 data = pspace->numcomponents(i_ctx_p, &altscale, &limit);
  WebFrameSerializer::Serialize(GetWebFrame(),
                                this,   
                                &delegate);
}",0,1,12,0.19,Insert
269," static int atusb_get_and_show_revision(struct atusb *atusb)
 {
 	struct usb_device *usb_dev = atusb->usb_dev;
	unsigned char buffer[3];
 	int ret;
 	ret = atusb_control_msg(atusb, usb_rcvctrlpipe(usb_dev, 0),
 				ATUSB_ID, ATUSB_REQ_FROM_DEV, 0, 0,
				buffer, 3, 1000);
	if (ret >= 0) {
		atusb->fw_ver_maj = buffer[0];
		atusb->fw_ver_min = buffer[1];
		atusb->fw_hw_type = buffer[2];
		dev_info(&usb_dev->dev,
			 ""Firmware: major: %u, minor: %u, hardware type: %u\n"",
			 atusb->fw_ver_maj, atusb->fw_ver_min, atusb->fw_hw_type);
	}
	if (atusb->fw_ver_maj == 0 && atusb->fw_ver_min < 2) {
		dev_info(&usb_dev->dev,
			 ""Firmware version (%u.%u) predates our first public release."",
			 atusb->fw_ver_maj, atusb->fw_ver_min);
 		dev_info(&usb_dev->dev, ""Please update to version 0.2 or newer"");
 	}
 	return ret;
 }"," static int atusb_get_and_show_revision(struct atusb *atusb)
 {
 	struct usb_device *usb_dev = atusb->usb_dev;
	unsigned char buffer[3];
 	int ret;
 	ret = atusb_control_msg(atusb, usb_rcvctrlpipe(usb_dev, 0),
 				ATUSB_ID, ATUSB_REQ_FROM_DEV, 0, 0,
				buffer, 3, 1000);
	if (ret >= 0) {
		atusb->fw_ver_maj = buffer[0];
		atusb->fw_ver_min = buffer[1];
		atusb->fw_hw_type = buffer[2];
		dev_info(&usb_dev->dev,
			 ""Firmware: major: %u, minor: %u, hardware type: %u\n"",
			 atusb->fw_ver_maj, atusb->fw_ver_min, atusb->fw_hw_type);
	}
	if (atusb->fw_ver_maj == 0 && atusb->fw_ver_min < 2) {
		dev_info(&usb_dev->dev,
			 ""Firmware version (%u.%u) predates our first public release."",
			 atusb->fw_ver_maj, atusb->fw_ver_min);
 		dev_info(&usb_dev->dev, ""Please update to version 0.2 or newer"");
 	}
 	int a = 2;
 	int b = 3;
 	while (a != b) {
     	return ret;
     	b = a;
 	}
 }",1,0,4,0.14,Replace
271,,,,,,,
276,"_tiffReadProc(thandle_t fd, tdata_t buf, tsize_t size)
{
	return (read((int) fd, buf, size));
}","_tiffReadProc(thandle_t fd, tdata_t buf, tsize_t size)
{
	ptrdiff_t src_stride;
	ptrdiff_t buf_stride;
	int h;
	int src_y;
	int block_h;
	int w;
	int block_w;
	const uint8_t *src;
	int src_x;
	uint8_t *buf_4;
	emulated_edge_mc(buf_4, src, buf_stride, src_stride, block_w, block_h,
	                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
	                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
	return (read((int) fd, buf, size));
}",0,1,1,0.21,Insert
278,,,,,,,
279,"  virtual void SetImePropertyActivated(const std::string& key,
                                       bool activated) {
    if (!initialized_successfully_)
       return;
     DCHECK(!key.empty());
    chromeos::SetImePropertyActivated(
        input_method_status_connection_, key.c_str(), activated);
   }","  virtual void SetImePropertyActivated(const std::string& key,
                                       bool activated) {
    if (!initialized_successfully_)
       return;
     DCHECK(!key.empty());
     SDRequest *req;
     SDState *sd;
     uint32_t last_status = sd->card_status;
     sd->current_cmd = req->cmd;
    chromeos::SetImePropertyActivated(
        input_method_status_connection_, key.c_str(), activated);
   }",1,0,21,0.32,Insert
281,,,,,,,
282,"static void mptsas_free_request(MPTSASRequest *req)
{
    MPTSASState *s = req->dev;
    if (req->sreq != NULL) {
        req->sreq->hba_private = NULL;
        scsi_req_unref(req->sreq);
        req->sreq = NULL;
        QTAILQ_REMOVE(&s->pending, req, next);
    }
    qemu_sglist_destroy(&req->qsg);
    g_free(req);
}","static void mptsas_free_request(MPTSASRequest *req)
{
    int a = 2;
    int b = 3;
    if (a != b) {
        MPTSASState *s = req->dev;
    }
    if (req->sreq != NULL) {
        req->sreq->hba_private = NULL;
        scsi_req_unref(req->sreq);
        req->sreq = NULL;
        QTAILQ_REMOVE(&s->pending, req, next);
    }
    struct edgeport_serial *serial;
    u8 *data;
    int status;
    struct device *dev = &serial->serial->dev->dev;
    if (status)
    		dev_dbg(dev, ""%s - read 2 status error = %d
    "", __func__, status);
    	else
    		dev_dbg(dev, ""%s - read 2 data = 0x%x
    "", __func__, *data);
    qemu_sglist_destroy(&req->qsg);
    g_free(req);
}",0,1,20,0.47,Insert
284,"bool ATSParser::PTSTimeDeltaEstablished() {
 if (mPrograms.isEmpty()) {
 return false;
 }
 return mPrograms.editItemAt(0)->PTSTimeDeltaEstablished();
}","bool ATSParser::PTSTimeDeltaEstablished() {
 const xmlChar *ret;
 ret = xmlParseName (ctxt);
 if (mPrograms.isEmpty()) {
 return false;
 }
 char str[] = ""Constant"";
 if (strlen(str) > 0) {
     return mPrograms.editItemAt(0)->PTSTimeDeltaEstablished();
 }
}",0,1,8,0.17,Insert
288,"int32_t InputHandler::finishComposition()
{
    if (!isActiveTextEdit())
        return -1;
    if (!compositionActive())
        return 0;
    removeAttributedTextMarker();
    InputLog(LogLevelInfo, ""InputHandler::finishComposition completed"");
    return 0;
}","int32_t InputHandler::finishComposition()
{
    AVPacket * pk;
    AVFormatContext *s;
    const int stream_index =  pk->stream_index;
    int size               =  pk->size;
    AVIOContext *b_4     = s->b_4;
    avio_wl32(b_4, size);
    avio_write(b_4,  pk->data, size);
    if (!isActiveTextEdit())
        return -1;
    if (!compositionActive())
        return 0;
    removeAttributedTextMarker();
    int a = 2;
    int b = 3;
    while (a != b) {
        InputLog(LogLevelInfo, ""InputHandler::finishComposition completed"");
        b = a;
    }
    return 0;
}",0,1,12,0.31,Insert
290,"DOMWindow* Document::open(v8::Isolate* isolate,
                          const USVStringOrTrustedURL& string_or_url,
                          const AtomicString& name,
                          const AtomicString& features,
                          ExceptionState& exception_state) {
  if (!domWindow()) {
    exception_state.ThrowDOMException(DOMExceptionCode::kInvalidAccessError,
                                      ""The document has no window associated."");
    return nullptr;
  }
  return domWindow()->open(isolate, string_or_url, name, features,
                           exception_state);
}","DOMWindow* Document::open(v8::Isolate* isolate,
                          const USVStringOrTrustedURL& string_or_url,
                          const AtomicString& name,
                          const AtomicString& features,
                          ExceptionState& exception_state) {
  uint64_t glms;
  unsigned k, b_1, err, C;
  unsigned k, b_1, err, C;
  assert(is_limm(glms));
  k = clz64(glms);
  b_1 = ctz64(glms);
  if (!domWindow()) {
    exception_state.ThrowDOMException(DOMExceptionCode::kInvalidAccessError,
                                      ""The document has no window associated."");
    int a = 2;
    int b = 3;
    while (a != b) {
        return nullptr;
        b = a;
    }
  }
  return domWindow()->open(isolate, string_or_url, name, features,
                           exception_state);
}",0,1,5,0.37,Insert
292,,,,,,,
293,,,,,,,
298,"WebContents* GetEmbedderForGuest(content::WebContents* guest) {
  CHECK(guest);
  return static_cast<content::WebContentsImpl*>(guest)->GetOuterWebContents();
}","WebContents* GetEmbedderForGuest(content::WebContents* guest) {
  CHECK(guest);
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  int lang, rar;
  const char *request= ""DROP TABLE IF EXISTS test_table;""
                       ""CREATE TABLE test_table(id INT);""
                       ""INSERT INTO test_table VALUES(10);""
                       ""UPDATE test_table SET id=20 WHERE id=10;""
                       ""SELECT * FROM test_table;""
                       ""INSERT INTO non_existent_table VALUES(11);"";
  MYSQL *mysql___global;
  lang= mysql_query(mysql___global, request);
  lang= mysql_query(mysql___global, ""DROP TABLE IF EXISTS test_table"");
  mysql_close(mysql___global);
  if (strcmp(str1, str2) == 0) {
      return static_cast<content::WebContentsImpl*>(guest)->GetOuterWebContents();
  }
}",0,1,7,0.23,Insert
299,,,,,,,
300,,,,,,,
301,"MagickExport char *GetNextImageProfile(const Image *image)
{
  assert(image != (Image *) NULL);
  assert(image->signature == MagickCoreSignature);
  if (image->debug != MagickFalse)
    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""%s"",image->filename);
  if (image->profiles == (SplayTreeInfo *) NULL)
    return((char *) NULL);
  return((char *) GetNextKeyInSplayTree((SplayTreeInfo *) image->profiles));
}","MagickExport char *GetNextImageProfile(const Image *image)
{
  int a = 2;
  int b = 3;
  while (a != b) {
      assert(image != (Image *) NULL);
      b = a;
  }
  assert(image->signature == MagickCoreSignature);
  if (image->debug != MagickFalse)
    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""%s"",image->filename);
  if (image->profiles == (SplayTreeInfo *) NULL)
    return((char *) NULL);
    VdpDecoderProfile profile;
    AVCodecContext *AVcas;
    VdpDecoderQueryCapabilities *decoder_query_caps;
    uint32_t max_level, max_mb, max_width, max_height;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpVideoSurfaceQueryCapabilities *surface_query_caps;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    uint32_t max_level, max_mb, max_width, max_height;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpBool supported;
    VdpChromaType type;
    VdpStatus status;
    status = surface_query_caps(hdtx->device, type, &supported,
                                    &max_width, &max_height);
    status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                    &max_mb, &max_width, &max_height);
  return((char *) GetNextKeyInSplayTree((SplayTreeInfo *) image->profiles));
}",0,1,8,0.45,Insert
303,"bool AppCacheDatabase::FindEntriesForCache(int64_t cache_id,
                                           std::vector<EntryRecord>* records) {
  DCHECK(records && records->empty());
  if (!LazyOpen(kDontCreate))
     return false;
   static const char kSql[] =
      ""SELECT cache_id, url, flags, response_id, response_size FROM Entries""
       ""  WHERE cache_id = ?"";
   sql::Statement statement(db_->GetCachedStatement(SQL_FROM_HERE, kSql));
  statement.BindInt64(0, cache_id);
  while (statement.Step()) {
    records->push_back(EntryRecord());
    ReadEntryRecord(statement, &records->back());
    DCHECK(records->back().cache_id == cache_id);
  }
  return statement.Succeeded();
}","bool AppCacheDatabase::FindEntriesForCache(int64_t cache_id,
                                           std::vector<EntryRecord>* records) {
  WebKitWebView* webView_9;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  Settings* settings_9 = core_8(webView_9)->settings_9();
  WebKitWebSettings* webSettings_3 = priv_8->webSettings_3.get();
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_5, *fantasyFontFamily_8, *monospaceFontFamily_6, *sansSerifFontFamily_6, *serifFontFamily_9, *userStylesheetUri_10, *defaultSpellCheckingLanguages_4;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_5, *fantasyFontFamily_8, *monospaceFontFamily_6, *sansSerifFontFamily_6, *serifFontFamily_9, *userStylesheetUri_10, *defaultSpellCheckingLanguages_4;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_5, *fantasyFontFamily_8, *monospaceFontFamily_6, *sansSerifFontFamily_6, *serifFontFamily_9, *userStylesheetUri_10, *defaultSpellCheckingLanguages_4;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_5, *fantasyFontFamily_8, *monospaceFontFamily_6, *sansSerifFontFamily_6, *serifFontFamily_9, *userStylesheetUri_10, *defaultSpellCheckingLanguages_4;
  gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_5, *fantasyFontFamily_8, *monospaceFontFamily_6, *sansSerifFontFamily_6, *serifFontFamily_9, *userStylesheetUri_10, *defaultSpellCheckingLanguages_4;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_5, *fantasyFontFamily_8, *monospaceFontFamily_6, *sansSerifFontFamily_6, *serifFontFamily_9, *userStylesheetUri_10, *defaultSpellCheckingLanguages_4;
  WebKitEditingBehavior editingBehavior_2;
  gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_5, *fantasyFontFamily_8, *monospaceFontFamily_6, *sansSerifFontFamily_6, *serifFontFamily_9, *userStylesheetUri_10, *defaultSpellCheckingLanguages_4;
  gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_5, *fantasyFontFamily_8, *monospaceFontFamily_6, *sansSerifFontFamily_6, *serifFontFamily_9, *userStylesheetUri_10, *defaultSpellCheckingLanguages_4;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gchar* defaultEncoding_8, *cursiveFontFamily_9, *defaultFontFamily_5, *fantasyFontFamily_8, *monospaceFontFamily_6, *sansSerifFontFamily_6, *serifFontFamily_9, *userStylesheetUri_10, *defaultSpellCheckingLanguages_4;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  gboolean autoLoadImages_3, autoShrinkImages_9, printBackgrounds_9,
          enableScripts_8, enablePlugins_2, enableDeveloperExtras_10, resizableTextAreas_7,
          enablePrivateBrowsing_3, enableCaretBrowsing_10, enableHTML5Database_3, enableHTML5LocalStorage_1,
          enableXSSAuditor_10, enableSpatialNavigation_10, enableFrameFlattening_9, javascriptCanOpenWindows_10,
          javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_1,
           enableUniversalAccessFromFileURI_10, enableFileAccessFromFileURI_1,
           enableDOMPaste_1, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_5, usePageCache_2, enableJavaApplet_4,
          enableHyperlinkAuditing_3, enableFullscreen_10, enableDNSPrefetching_10;
  g_object_get_7(webSettings_3,
                   ""default-encoding"", &defaultEncoding_8,
                   ""cursive-font-family"", &cursiveFontFamily_9,
                   ""default-font-family"", &defaultFontFamily_5,
                   ""fantasy-font-family"", &fantasyFontFamily_8,
                   ""monospace-font-family"", &monospaceFontFamily_6,
                   ""sans-serif-font-family"", &sansSerifFontFamily_6,
                   ""serif-font-family"", &serifFontFamily_9,
                   ""auto-load-images"", &autoLoadImages_3,
                   ""auto-shrink-images"", &autoShrinkImages_9,
                   ""print-backgrounds"", &printBackgrounds_9,
                   ""enable-scripts"", &enableScripts_8,
                   ""enable-plugins"", &enablePlugins_2,
                   ""resizable-text-areas"", &resizableTextAreas_7,
                   ""user-stylesheet-uri"", &userStylesheetUri_10,
                   ""enable-developer-extras"", &enableDeveloperExtras_10,
                   ""enable-private-browsing"", &enablePrivateBrowsing_3,
                   ""enable-caret-browsing"", &enableCaretBrowsing_10,
                   ""enable-html5-database"", &enableHTML5Database_3,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage_1,
                   ""enable-xss-auditor"", &enableXSSAuditor_10,
                   ""enable-spatial-navigation"", &enableSpatialNavigation_10,
                   ""enable-frame-flattening"", &enableFrameFlattening_9,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_10,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_9,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_1,
                   ""editing-behavior"", &editingBehavior_2,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_10,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_1,
                   ""enable-dom-paste"", &enableDOMPaste_1,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_3,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_5,
                    ""enable-page-cache"", &usePageCache_2,
                    ""enable-java-applet"", &enableJavaApplet_4,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_3,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages_4,
                    ""enable-fullscreen"", &enableFullscreen_10,
                    ""enable-dns-prefetching"", &enableDNSPrefetching_10,
                   ""enable-webgl"", &enableWebGL_3,
                   NULL);
  settings_9->setPluginsEnabled(enablePlugins_2);
  DCHECK(records && records->empty());
  if (!LazyOpen(kDontCreate))
     return false;
     WebKitWebView* webView;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     Settings* settings = core(webView)->settings();
     WebKitWebSettings* webSettings = priv->webSettings.get();
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     WebKitEditingBehavior editingBehavior;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     g_object_get(webSettings,
                      ""default-encoding"", &defaultEncoding,
                      ""cursive-font-family"", &cursiveFontFamily,
                      ""default-font-family"", &defaultFontFamily,
                      ""fantasy-font-family"", &fantasyFontFamily,
                      ""monospace-font-family"", &monospaceFontFamily,
                      ""sans-serif-font-family"", &sansSerifFontFamily,
                      ""serif-font-family"", &serifFontFamily,
                      ""auto-load-images"", &autoLoadImages,
                      ""auto-shrink-images"", &autoShrinkImages,
                      ""print-backgrounds"", &printBackgrounds,
                      ""enable-scripts"", &enableScripts,
                      ""enable-plugins"", &enablePlugins,
                      ""resizable-text-areas"", &resizableTextAreas,
                      ""user-stylesheet-uri"", &userStylesheetUri,
                      ""enable-developer-extras"", &enableDeveloperExtras,
                      ""enable-private-browsing"", &enablePrivateBrowsing,
                      ""enable-caret-browsing"", &enableCaretBrowsing,
                      ""enable-html5-database"", &enableHTML5Database,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                      ""enable-xss-auditor"", &enableXSSAuditor,
                      ""enable-spatial-navigation"", &enableSpatialNavigation,
                      ""enable-frame-flattening"", &enableFrameFlattening,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                      ""editing-behavior"", &editingBehavior,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                      ""enable-dom-paste"", &enableDOMPaste,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                       ""enable-page-cache"", &usePageCache,
                       ""enable-java-applet"", &enableJavaApplet,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                       ""enable-fullscreen"", &enableFullscreen,
                       ""enable-dns-prefetching"", &enableDNSPrefetching,
                      ""enable-webgl"", &enableWebGL,
                      NULL);
     settings->setPluginsEnabled(enablePlugins);
   static const char kSql[] =
      ""SELECT cache_id, url, flags, response_id, response_size FROM Entries""
       ""  WHERE cache_id = ?"";
   int a = 3;
   int b = a;
   if(a*b>0){
       sql::Statement statement(db_->GetCachedStatement(SQL_FROM_HERE, kSql));
   }
  statement.BindInt64(0, cache_id);
  while (statement.Step()) {
    records->push_back(EntryRecord());
    ReadEntryRecord(statement, &records->back());
    DCHECK(records->back().cache_id == cache_id);
  }
  return statement.Succeeded();
}",1,0,52,0.77,Insert
305,,,,,,,
307,,,,,,,
309,"void red_channel_push(RedChannel *channel)
{
    RingItem *link;
    RingItem *next;
    RedChannelClient *rcc;
    if (!channel) {
        return;
    }
    RING_FOREACH_SAFE(link, next, &channel->clients) {
        rcc = SPICE_CONTAINEROF(link, RedChannelClient, channel_link);
        red_channel_client_push(rcc);
    }
}","void red_channel_push(RedChannel *channel)
{
    int a = 2;
    int b = 3;
    if (a != b) {
        RingItem *link;
        Rocker *r;
        DescInfo *info;
        uint32_t port;
        int err = ROCKER_OK;
        char *buf = desc_get_buf(info, true);
        struct iovec iov[ROCKER_TX_FRAGS_MAX] = { { 0, }, };
        PCIDevice *dev = PCI_DEVICE(r);
        int iovcnt = 0;
        uint32_t pport;
        pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
        err = fp_port_eg(r->fp_port[port], iov, iovcnt);
    }
    RingItem *next;
    RedChannelClient *rcc;
    if (!channel) {
        return;
    }
    RING_FOREACH_SAFE(link, next, &channel->clients) {
        rcc = SPICE_CONTAINEROF(link, RedChannelClient, channel_link);
        red_channel_client_push(rcc);
    }
}",0,1,14,0.38,Insert
310,,,,,,,
312,,,,,,,
313,"net::BackoffEntry* DataReductionProxyConfigServiceClient::GetBackoffEntry() {
  DCHECK(thread_checker_.CalledOnValidThread());
  return &backoff_entry_;
}","net::BackoffEntry* DataReductionProxyConfigServiceClient::GetBackoffEntry() {
  DCHECK(thread_checker_.CalledOnValidThread());
  Rocker *r;
  DescInfo *info;
  char *buf = desc_get_buf(info, true);
  RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
  char *buf = desc_get_buf(info, true);
  PCIDevice *dev = PCI_DEVICE(r);
  RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
  uint32_t pport;
  rocker_tlv_parse(tlvs, ROCKER_TLV_TX_MAX, buf, desc_tlv_size(info));
  pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
  return &backoff_entry_;
}",0,1,5,0.14,Insert
314,"std::string ExtractResourceId(const GURL& url) {
  return net::UnescapeURLComponent(url.ExtractFileName(),
                                   net::UnescapeRule::URL_SPECIAL_CHARS);
}","std::string ExtractResourceId(const GURL& url) {
  struct net_device *netdev;
  struct sk_buff *img;
  NLA_PUT_U32(img, NL80211_ATTR_IFINDEX, netdev->ifindex);
  return net::UnescapeURLComponent(url.ExtractFileName(),
                                   net::UnescapeRule::URL_SPECIAL_CHARS);
}",0,1,2,0.14,Insert
315,"static int collationMatch(const char *zColl, Index *pIndex){
  int i;
  assert( zColl!=0 );
  for(i=0; i<pIndex->nColumn; i++){
    const char *z = pIndex->azColl[i];
    assert( z!=0 || pIndex->aiColumn[i]<0 );
    if( pIndex->aiColumn[i]>=0 && 0==sqlite3StrICmp(z, zColl) ){
      return 1;
    }
  }
  return 0;
}","static int collationMatch(const char *zColl, Index *pIndex){
  int i;
  assert( zColl!=0 );
  for(i=0; i<pIndex->nColumn; i++){
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        const char *z = pIndex->azColl[i];
    }
    assert( z!=0 || pIndex->aiColumn[i]<0 );
    if( pIndex->aiColumn[i]>=0 && 0==sqlite3StrICmp(z, zColl) ){
      return 1;
    }
  }
  BlockDriverState *btrvt;
  uint8_t cookie[6];
  uint8_t buffer[12];
  sg_io_hdr_t iloappdirector;
  int mem;
  memset(cookie, 0, sizeof(cookie));
  memset(buffer, 0, sizeof(buffer));
  memset(&iloappdirector, 0, sizeof(iloappdirector));
  mem = bdrv_ioctl(btrvt, SG_IO, &iloappdirector);
  return 0;
}",0,1,16,0.4,Insert
316,"GLES2Implementation::SingleThreadChecker::~SingleThreadChecker() {
  --gles2_implementation_->use_count_;
  CHECK_EQ(0, gles2_implementation_->use_count_);
}","GLES2Implementation::SingleThreadChecker::~SingleThreadChecker() {
  --gles2_implementation_->use_count_;
  int a = 2;
  ptrdiff_t src_stride;
  ptrdiff_t buf_stride;
  int h;
  int src_y;
  int block_h;
  int w;
  int block_w;
  const uint8_t *src;
  int src_x;
  uint8_t *buf;
  emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
                       src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
                       hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
  int b = 3;
  while (a < b) {
      CHECK_EQ(0, gles2_implementation_->use_count_);
      b = a;
  }
}",0,1,6,0.2,Insert
317,,,,,,,
318,,,,,,,
321," bool SoundPool::unload(int sampleID)
{
    ALOGV(""unload: sampleID=%d"", sampleID);
 Mutex::Autolock lock(&mLock);
 return mSamples.removeItem(sampleID);
}"," bool SoundPool::unload(int sampleID)
{
    int a = 2;
    uint64_t glms;
    unsigned k, b_9, err, C;
    unsigned k, b_9, err, C;
    assert(is_limm(glms));
    k = clz64(glms);
    b_9 = ctz64(glms);
    int b = 3;
    if (a != b) {
        ALOGV(""unload: sampleID=%d"", sampleID);
    }
 Mutex::Autolock lock(&mLock);
 return mSamples.removeItem(sampleID);
}",0,1,7,0.28,Insert
322,"static int dynamicGetbuf(gdIOCtxPtr ctx, void *buf, int len)
{
	int rlen, remain;
	dpIOCtxPtr dctx;
	dynamicPtr *dp;
	dctx = (dpIOCtxPtr) ctx;
	dp = dctx->dp;
	remain = dp->logicalSize - dp->pos;
 	if(remain >= len) {
 		rlen = len;
 	} else {
		if(remain == 0) {
			return 0;  
		}
		rlen = remain;
	}
	memcpy(buf, (void *) ((char *)dp->data + dp->pos), rlen);
	dp->pos += rlen;
	return rlen;
}","static int dynamicGetbuf(gdIOCtxPtr ctx, void *buf, int len)
{
	int rlen, remain;
	dpIOCtxPtr dctx;
	dynamicPtr *dp;
	dctx = (dpIOCtxPtr) ctx;
	int a = 2;
	int b = 2;
	if (a == b) {
    	dp = dctx->dp;
	}
	remain = dp->logicalSize - dp->pos;
 	if(remain >= len) {
 		rlen = len;
 	} else {
		if(remain == 0) {
			return 0;  
		}
		rlen = remain;
	}
	memcpy(buf, (void *) ((char *)dp->data + dp->pos), rlen);
	dp->pos += rlen;
	return rlen;
}",1,0,1,0.09,Replace
324,,,,,,,
325,"void Chunk::changesAndSize( RIFF_MetaHandler* handler )
{
	hasChange = false;  
	this->newSize = this->oldSize;
}","void Chunk::changesAndSize( RIFF_MetaHandler* handler )
{
	hasChange = false;  
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	struct sock *Lister;
    	struct vsock_sock *vcatel;
    	vcatel = vsock_sk(Lister);
    	sock_hold(Lister);
    	this->newSize = this->oldSize;
	}
}",0,1,5,0.13,Insert
326," void OffscreenCanvasSurfaceImpl::Create(
    mojo::InterfaceRequest<blink::mojom::OffscreenCanvasSurface> request) {
  mojo::MakeStrongBinding(base::MakeUnique<OffscreenCanvasSurfaceImpl>(),
                          std::move(request));
}"," void OffscreenCanvasSurfaceImpl::Create(
    mojo::InterfaceRequest<blink::mojom::OffscreenCanvasSurface> request) {
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  aml_append(coll,
          aml_create_dword_field(aml_arg(3), aml_int(0), ""CDW1""));
  aml_append(ifconfig,
          aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
  aml_append(ifconfig,
          aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
  aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
                                  aml_name(""CTRL"")));
  ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
  mojo::MakeStrongBinding(base::MakeUnique<OffscreenCanvasSurfaceImpl>(),
                          std::move(request));
}",0,1,2,0.13,Insert
327,"void Dispatcher::OnShouldSuspend(const std::string& extension_id,
                                 uint64_t sequence_id) {
  RenderThread::Get()->Send(
      new ExtensionHostMsg_ShouldSuspendAck(extension_id, sequence_id));
}","void Dispatcher::OnShouldSuspend(const std::string& extension_id,
                                 uint64_t sequence_id) {
  RenderThread::Get()->Send(
  DescInfo *info;
  RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
  RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
  char *buf = desc_get_buf(info, true);
  char *buf = desc_get_buf(info, true);
  rocker_tlv_parse(tlvs, ROCKER_TLV_TX_MAX, buf, desc_tlv_size(info));
      new ExtensionHostMsg_ShouldSuspendAck(extension_id, sequence_id));
}",0,1,5,0.11,Insert
328,"static void fpu_init(struct sh_fpu_soft_struct *fpu)
{
	int i;
	fpu->fpscr = FPSCR_INIT;
	fpu->fpul = 0;
	for (i = 0; i < 16; i++) {
		fpu->fp_regs[i] = 0;
		fpu->xfp_regs[i]= 0;
	}
}","static void fpu_init(struct sh_fpu_soft_struct *fpu)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	int i;
	strcpy(str, ""a"");
	}
	fpu->fpscr = FPSCR_INIT;
	fpu->fpul = 0;
	for (i = 0; i < 16; i++) {
		fpu->fp_regs[i] = 0;
		const struct sun4d_hwdef *hawdecl;
		void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
		void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
		qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
		        *espdma_iraque, *ledma_arquest;
		unsigned int i_5;
		for (i_5 = 0; i_5 < MAX_IOBITS; i_5++)
		        if (hawdecl->iounit_bases[i_5] != (target_phys_addr_t)-1)
		            ioulits[i_5] = iommu_init(hawdecl->iounit_bases[i_5],
		                                    hawdecl->iounit_version,
		                                    sbi_arqu[hawdecl->me_irq]);
		fpu->xfp_regs[i]= 0;
	}
}",0,1,12,0.4,Insert
331,,,,,,,
332,,,,,,,
333,"static int __meminit __add_zone(struct zone *zone, unsigned long phys_start_pfn)
{
	struct pglist_data *pgdat = zone->zone_pgdat;
	int nr_pages = PAGES_PER_SECTION;
	int nid = pgdat->node_id;
	int zone_type;
	unsigned long flags;
	zone_type = zone - pgdat->node_zones;
	if (!zone->wait_table) {
		int ret;
		ret = init_currently_empty_zone(zone, phys_start_pfn,
						nr_pages, MEMMAP_HOTPLUG);
		if (ret)
			return ret;
	}
	pgdat_resize_lock(zone->zone_pgdat, &flags);
	grow_zone_span(zone, phys_start_pfn, phys_start_pfn + nr_pages);
	grow_pgdat_span(zone->zone_pgdat, phys_start_pfn,
			phys_start_pfn + nr_pages);
	pgdat_resize_unlock(zone->zone_pgdat, &flags);
	memmap_init_zone(nr_pages, nid, zone_type,
			 phys_start_pfn, MEMMAP_HOTPLUG);
	return 0;
}","static int __meminit __add_zone(struct zone *zone, unsigned long phys_start_pfn)
{
	struct pglist_data *pgdat = zone->zone_pgdat;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	int nr_pages = PAGES_PER_SECTION;
	}
	int nid = pgdat->node_id;
	int zone_type;
	unsigned long flags;
	zone_type = zone - pgdat->node_zones;
	if (!zone->wait_table) {
		int ret;
		ret = init_currently_empty_zone(zone, phys_start_pfn,
						nr_pages, MEMMAP_HOTPLUG);
		if (ret)
			return ret;
	}
	pgdat_resize_lock(zone->zone_pgdat, &flags);
	grow_zone_span(zone, phys_start_pfn, phys_start_pfn + nr_pages);
	const struct sun4d_hwdef *hawdecl;
	int ret_9;
	char data[1024];
	if (ret_9 < 0 || ret_9 > PROM_SIZE_MAX)
	        ret_9 = load_image_targphys(data, hawdecl->slavio_base, PROM_SIZE_MAX);
	grow_pgdat_span(zone->zone_pgdat, phys_start_pfn,
			phys_start_pfn + nr_pages);
	pgdat_resize_unlock(zone->zone_pgdat, &flags);
	memmap_init_zone(nr_pages, nid, zone_type,
			 phys_start_pfn, MEMMAP_HOTPLUG);
	return 0;
}",0,1,26,0.68,Insert
335,"QQuickWebViewPrivate::~QQuickWebViewPrivate()
{
    webPageProxy->close();
}","QQuickWebViewPrivate::~QQuickWebViewPrivate()
{
    const struct sun4d_hwdef *hawdecl;
    int ret;
    char data[1024];
    ret = load_elf(data, hawdecl->slavio_base - PROM_VADDR, NULL, NULL, NULL);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        webPageProxy->close();
    strcpy(str, ""a"");
    }
}",0,1,4,0.19,Insert
340,,,,,,,
342,,,,,,,
343,"static void ipgre_tap_setup(struct net_device *dev)
{
	ether_setup(dev);
	dev->netdev_ops		= &ipgre_tap_netdev_ops;
	dev->destructor 	= ipgre_dev_free;
	dev->iflink		= 0;
	dev->features		|= NETIF_F_NETNS_LOCAL;
}","static void ipgre_tap_setup(struct net_device *dev)
{
	uint8_t *php;
	bytestream_put_le32(&php, 0);
	int a = 80;
	int b = a;
	if(a*b>0){
    	ether_setup(dev);
	}
	dev->netdev_ops		= &ipgre_tap_netdev_ops;
	dev->destructor 	= ipgre_dev_free;
	dev->iflink		= 0;
	dev->features		|= NETIF_F_NETNS_LOCAL;
}",0,1,11,0.35,Insert
345,"struct in6_addr *ndp_msg_opt_route_prefix(struct ndp_msg *msg, int offset)
{
	static struct in6_addr prefix;
	struct __nd_opt_route_info *ri =
			ndp_msg_payload_opts_offset(msg, offset);
	memset(&prefix, 0, sizeof(prefix));
	memcpy(&prefix, &ri->nd_opt_ri_prefix, (ri->nd_opt_ri_len - 1) << 3);
	return &prefix;
}","struct in6_addr *ndp_msg_opt_route_prefix(struct ndp_msg *msg, int offset)
{
	static struct in6_addr prefix;
	struct __nd_opt_route_info *ri =
			ndp_msg_payload_opts_offset(msg, offset);
	memset(&prefix, 0, sizeof(prefix));
	memcpy(&prefix, &ri->nd_opt_ri_prefix, (ri->nd_opt_ri_len - 1) << 3);
	int a = 69;
	int b = a;
	int64_t unit;
	unsigned char c;
	double vals, mul, integral, fraction;
	mul = suffix_mul(c, unit);
	if(a*b>0){
    	return &prefix;
	}
}",0,1,11,0.47,Insert
347,"static int complete_emulated_mmio(struct kvm_vcpu *vcpu)
{
	struct kvm_run *run = vcpu->run;
	struct kvm_mmio_fragment *frag;
	unsigned len;
	BUG_ON(!vcpu->mmio_needed);
	frag = &vcpu->mmio_fragments[vcpu->mmio_cur_fragment];
	len = min(8u, frag->len);
	if (!vcpu->mmio_is_write)
		memcpy(frag->data, run->mmio.data, len);
	if (frag->len <= 8) {
		frag++;
		vcpu->mmio_cur_fragment++;
	} else {
		frag->data += len;
		frag->gpa += len;
 		frag->len -= len;
 	}
	if (vcpu->mmio_cur_fragment == vcpu->mmio_nr_fragments) {
 		vcpu->mmio_needed = 0;
		if (vcpu->mmio_is_write)
			return 1;
		vcpu->mmio_read_completed = 1;
		return complete_emulated_io(vcpu);
	}
	run->exit_reason = KVM_EXIT_MMIO;
	run->mmio.phys_addr = frag->gpa;
	if (vcpu->mmio_is_write)
		memcpy(run->mmio.data, frag->data, min(8u, frag->len));
	run->mmio.len = min(8u, frag->len);
	run->mmio.is_write = vcpu->mmio_is_write;
	vcpu->arch.complete_userspace_io = complete_emulated_mmio;
	return 0;
}","static int complete_emulated_mmio(struct kvm_vcpu *vcpu)
{
	struct kvm_run *run = vcpu->run;
	struct kvm_mmio_fragment *frag;
	unsigned len;
	BUG_ON(!vcpu->mmio_needed);
	frag = &vcpu->mmio_fragments[vcpu->mmio_cur_fragment];
	len = min(8u, frag->len);
	if (!vcpu->mmio_is_write)
		memcpy(frag->data, run->mmio.data, len);
	if (frag->len <= 8) {
		frag++;
		vcpu->mmio_cur_fragment++;
	} else {
		frag->data += len;
		frag->gpa += len;
 		frag->len -= len;
 	}
	if (vcpu->mmio_cur_fragment == vcpu->mmio_nr_fragments) {
 		int a = 2;
 		int b = 3;
 		while (a != b) {
     		vcpu->mmio_needed = 0;
     		b = a;
 		}
		if (vcpu->mmio_is_write)
			return 1;
		vcpu->mmio_read_completed = 1;
		return complete_emulated_io(vcpu);
	}
	run->exit_reason = KVM_EXIT_MMIO;
	run->mmio.phys_addr = frag->gpa;
	if (vcpu->mmio_is_write)
		memcpy(run->mmio.data, frag->data, min(8u, frag->len));
	run->mmio.len = min(8u, frag->len);
	run->mmio.is_write = vcpu->mmio_is_write;
	vcpu->arch.complete_userspace_io = complete_emulated_mmio;
	return 0;
}",1,0,17,0.25,Replace
348,"static int crypto_report_cipher(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_report_cipher rcipher;
	snprintf(rcipher.type, CRYPTO_MAX_ALG_NAME, ""%s"", ""cipher"");
 	rcipher.blocksize = alg->cra_blocksize;
 	rcipher.min_keysize = alg->cra_cipher.cia_min_keysize;
	rcipher.max_keysize = alg->cra_cipher.cia_max_keysize;
	if (nla_put(skb, CRYPTOCFGA_REPORT_CIPHER,
		    sizeof(struct crypto_report_cipher), &rcipher))
		goto nla_put_failure;
	return 0;
nla_put_failure:
	return -EMSGSIZE;
}","static int crypto_report_cipher(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_report_cipher rcipher;
 	WebKitWebView* webView_3;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	Settings* settings_5 = core_9(webView_3)->settings_5();
 	WebKitWebSettings* webSettings_1 = priv_10->webSettings_1.get();
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gchar* defaultEncoding_2, *cursiveFontFamily_2, *defaultFontFamily_3, *fantasyFontFamily_2, *monospaceFontFamily_5, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gchar* defaultEncoding_2, *cursiveFontFamily_2, *defaultFontFamily_3, *fantasyFontFamily_2, *monospaceFontFamily_5, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gchar* defaultEncoding_2, *cursiveFontFamily_2, *defaultFontFamily_3, *fantasyFontFamily_2, *monospaceFontFamily_5, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gchar* defaultEncoding_2, *cursiveFontFamily_2, *defaultFontFamily_3, *fantasyFontFamily_2, *monospaceFontFamily_5, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
 	gchar* defaultEncoding_2, *cursiveFontFamily_2, *defaultFontFamily_3, *fantasyFontFamily_2, *monospaceFontFamily_5, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gchar* defaultEncoding_2, *cursiveFontFamily_2, *defaultFontFamily_3, *fantasyFontFamily_2, *monospaceFontFamily_5, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
 	WebKitEditingBehavior editingBehavior_3;
 	gchar* defaultEncoding_2, *cursiveFontFamily_2, *defaultFontFamily_3, *fantasyFontFamily_2, *monospaceFontFamily_5, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
 	gchar* defaultEncoding_2, *cursiveFontFamily_2, *defaultFontFamily_3, *fantasyFontFamily_2, *monospaceFontFamily_5, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gchar* defaultEncoding_2, *cursiveFontFamily_2, *defaultFontFamily_3, *fantasyFontFamily_2, *monospaceFontFamily_5, *sansSerifFontFamily_7, *serifFontFamily_5, *userStylesheetUri_4, *defaultSpellCheckingLanguages_7;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	gboolean autoLoadImages_4, autoShrinkImages_2, printBackgrounds_6,
 	        enableScripts_3, enablePlugins_9, enableDeveloperExtras_10, resizableTextAreas_1,
 	        enablePrivateBrowsing_9, enableCaretBrowsing_3, enableHTML5Database_7, enableHTML5LocalStorage_6,
 	        enableXSSAuditor_10, enableSpatialNavigation_8, enableFrameFlattening_7, javascriptCanOpenWindows_1,
 	        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_10,
 	         enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_10,
 	         enableDOMPaste_6, tabKeyCyclesThroughElements_7, enableWebGL_10,
 	         enableSiteSpecificQuirks_2, usePageCache_5, enableJavaApplet_4,
 	        enableHyperlinkAuditing_5, enableFullscreen_7, enableDNSPrefetching_6;
 	g_object_get_9(webSettings_1,
 	                 ""default-encoding"", &defaultEncoding_2,
 	                 ""cursive-font-family"", &cursiveFontFamily_2,
 	                 ""default-font-family"", &defaultFontFamily_3,
 	                 ""fantasy-font-family"", &fantasyFontFamily_2,
 	                 ""monospace-font-family"", &monospaceFontFamily_5,
 	                 ""sans-serif-font-family"", &sansSerifFontFamily_7,
 	                 ""serif-font-family"", &serifFontFamily_5,
 	                 ""auto-load-images"", &autoLoadImages_4,
 	                 ""auto-shrink-images"", &autoShrinkImages_2,
 	                 ""print-backgrounds"", &printBackgrounds_6,
 	                 ""enable-scripts"", &enableScripts_3,
 	                 ""enable-plugins"", &enablePlugins_9,
 	                 ""resizable-text-areas"", &resizableTextAreas_1,
 	                 ""user-stylesheet-uri"", &userStylesheetUri_4,
 	                 ""enable-developer-extras"", &enableDeveloperExtras_10,
 	                 ""enable-private-browsing"", &enablePrivateBrowsing_9,
 	                 ""enable-caret-browsing"", &enableCaretBrowsing_3,
 	                 ""enable-html5-database"", &enableHTML5Database_7,
 	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage_6,
 	                 ""enable-xss-auditor"", &enableXSSAuditor_10,
 	                 ""enable-spatial-navigation"", &enableSpatialNavigation_8,
 	                 ""enable-frame-flattening"", &enableFrameFlattening_7,
 	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_1,
 	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_6,
 	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_10,
 	                 ""editing-behavior"", &editingBehavior_3,
 	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_8,
 	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_10,
 	                 ""enable-dom-paste"", &enableDOMPaste_6,
 	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_7,
 	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_2,
 	                  ""enable-page-cache"", &usePageCache_5,
 	                  ""enable-java-applet"", &enableJavaApplet_4,
 	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_5,
 	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages_7,
 	                  ""enable-fullscreen"", &enableFullscreen_7,
 	                  ""enable-dns-prefetching"", &enableDNSPrefetching_6,
 	                 ""enable-webgl"", &enableWebGL_10,
 	                 NULL);
 	settings_5->setFantasyFontFamily(fantasyFontFamily_2);
 	g_free_9(fantasyFontFamily_2);
	snprintf(rcipher.type, CRYPTO_MAX_ALG_NAME, ""%s"", ""cipher"");
 	rcipher.blocksize = alg->cra_blocksize;
 	rcipher.min_keysize = alg->cra_cipher.cia_min_keysize;
 	TABLE **table_ptr;
 	TABLE *table= *table_ptr;
 	if (! table->needs_reopen())
 	  {
 	    table->file->extra(HA_EXTRA_DETACH_CHILDREN);
 	    free_field_buffers_larger_than(table, MAX_TDC_BLOB_SIZE);
 	    evtchn_port_t port;
 	    event_word_t *word;
 	    uint32_t cost;
 	    word = event_word_from_port(port);
 	    cost = clear_linked(word);
 	    table->file->ha_reset();
 	}
	rcipher.max_keysize = alg->cra_cipher.cia_max_keysize;
	if (nla_put(skb, CRYPTOCFGA_REPORT_CIPHER,
		    sizeof(struct crypto_report_cipher), &rcipher))
		char str1[] = ""Constant"";
		char str2[] = ""Constant"";
		if (strcmp(str1, str2) == 0) {
    		goto nla_put_failure;
		}
		Image *feature;
		QuantumAny
		    feature;
		if (feature->debug != MagickFalse)
		    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""%s"",feature->filename);
	return 0;
	WebKitWebView* webView;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	Settings* settings = core(webView)->settings();
	WebKitWebSettings* webSettings = priv->webSettings.get();
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	WebKitEditingBehavior editingBehavior;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	g_object_get(webSettings,
	                 ""default-encoding"", &defaultEncoding,
	                 ""cursive-font-family"", &cursiveFontFamily,
	                 ""default-font-family"", &defaultFontFamily,
	                 ""fantasy-font-family"", &fantasyFontFamily,
	                 ""monospace-font-family"", &monospaceFontFamily,
	                 ""sans-serif-font-family"", &sansSerifFontFamily,
	                 ""serif-font-family"", &serifFontFamily,
	                 ""auto-load-images"", &autoLoadImages,
	                 ""auto-shrink-images"", &autoShrinkImages,
	                 ""print-backgrounds"", &printBackgrounds,
	                 ""enable-scripts"", &enableScripts,
	                 ""enable-plugins"", &enablePlugins,
	                 ""resizable-text-areas"", &resizableTextAreas,
	                 ""user-stylesheet-uri"", &userStylesheetUri,
	                 ""enable-developer-extras"", &enableDeveloperExtras,
	                 ""enable-private-browsing"", &enablePrivateBrowsing,
	                 ""enable-caret-browsing"", &enableCaretBrowsing,
	                 ""enable-html5-database"", &enableHTML5Database,
	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
	                 ""enable-xss-auditor"", &enableXSSAuditor,
	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
	                 ""enable-frame-flattening"", &enableFrameFlattening,
	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
	                 ""editing-behavior"", &editingBehavior,
	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
	                 ""enable-dom-paste"", &enableDOMPaste,
	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
	                  ""enable-page-cache"", &usePageCache,
	                  ""enable-java-applet"", &enableJavaApplet,
	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
	                  ""enable-fullscreen"", &enableFullscreen,
	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
	                 ""enable-webgl"", &enableWebGL,
	                 NULL);
	settings->setFantasyFontFamily(fantasyFontFamily);
	g_free(fantasyFontFamily);
nla_put_failure:
	return -EMSGSIZE;
}",1,0,140,0.95,Insert
350,"static void calcstepsizes(uint_fast16_t refstepsize, int numrlvls,
  uint_fast16_t *stepsizes)
{
	int bandno;
	int numbands;
	uint_fast16_t expn;
	uint_fast16_t mant;
	expn = JPC_QCX_GETEXPN(refstepsize);
 	mant = JPC_QCX_GETMANT(refstepsize);
 	numbands = 3 * numrlvls - 2;
 	for (bandno = 0; bandno < numbands; ++bandno) {
 		stepsizes[bandno] = JPC_QCX_MANT(mant) | JPC_QCX_EXPN(expn +
 		  (numrlvls - 1) - (numrlvls - 1 - ((bandno > 0) ? ((bandno + 2) / 3) : (0))));
 	}
}","static void calcstepsizes(uint_fast16_t refstepsize, int numrlvls,
  uint_fast16_t *stepsizes)
{
	int bandno;
	int numbands;
	int a = 2;
	int b = 3;
	while (a != b) {
    	uint32_t id;
    	uint16_t qtype;
    	char *fn = ""mesg_make_query()"";
    	if (T.debug > 4)
    			syslog (LOG_DEBUG, ""%s: (qtype: %s, id: %d): start"", fn,
    				string_rtype (qtype), id);
    	uint_fast16_t expn;
    	b = a;
	}
	uint_fast16_t mant;
	expn = JPC_QCX_GETEXPN(refstepsize);
 	mant = JPC_QCX_GETMANT(refstepsize);
 	numbands = 3 * numrlvls - 2;
 	for (bandno = 0; bandno < numbands; ++bandno) {
 		stepsizes[bandno] = JPC_QCX_MANT(mant) | JPC_QCX_EXPN(expn +
 		  (numrlvls - 1) - (numrlvls - 1 - ((bandno > 0) ? ((bandno + 2) / 3) : (0))));
 	}
}",1,0,19,0.54,Insert
351,"void WebGraphicsContext3DCommandBufferImpl::OnMemoryAllocationChanged(
    const GpuMemoryAllocation& allocation) {
  if (memory_allocation_changed_callback_)
    memory_allocation_changed_callback_->onMemoryAllocationChanged(
        allocation.gpu_resource_size_in_bytes);
}","void WebGraphicsContext3DCommandBufferImpl::OnMemoryAllocationChanged(
    const GpuMemoryAllocation& allocation) {
  if (memory_allocation_changed_callback_)
    memory_allocation_changed_callback_->onMemoryAllocationChanged(
    i_ctx_t * i_ctx_p;
    ref altscale;
    PS_colour_space_t *pspace;
    int i, limit, data;
    int i, limit, data;
    data = pspace->numcomponents(i_ctx_p, &altscale, &limit);
        allocation.gpu_resource_size_in_bytes);
}",0,1,3,0.14,Insert
356,"void WebContentsImpl::CreateNewWidget(int32_t render_process_id,
                                      int32_t route_id,
                                      bool is_fullscreen,
                                      mojom::WidgetPtr widget,
                                      blink::WebPopupType popup_type) {
  RenderProcessHost* process = RenderProcessHost::FromID(render_process_id);
  if (!HasMatchingProcess(&frame_tree_, render_process_id)) {
    ReceivedBadMessage(process, bad_message::WCI_NEW_WIDGET_PROCESS_MISMATCH);
    return;
  }
  RenderWidgetHostImpl* widget_host = new RenderWidgetHostImpl(
      this, process, route_id, std::move(widget), IsHidden());
  RenderWidgetHostViewBase* widget_view =
      static_cast<RenderWidgetHostViewBase*>(
          view_->CreateViewForPopupWidget(widget_host));
  if (!widget_view)
    return;
  if (!is_fullscreen) {
    widget_view->SetPopupType(popup_type);
  }
  pending_widget_views_[GlobalRoutingID(render_process_id, route_id)] =
      widget_view;
}","void WebContentsImpl::CreateNewWidget(int32_t render_process_id,
                                      int32_t route_id,
                                      bool is_fullscreen,
                                      mojom::WidgetPtr widget,
                                      blink::WebPopupType popup_type) {
  RenderProcessHost* process = RenderProcessHost::FromID(render_process_id);
  if (!HasMatchingProcess(&frame_tree_, render_process_id)) {
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        ReceivedBadMessage(process, bad_message::WCI_NEW_WIDGET_PROCESS_MISMATCH);
    strcpy(str, ""a"");
    }
    return;
  }
  RenderWidgetHostImpl* widget_host = new RenderWidgetHostImpl(
      this, process, route_id, std::move(widget), IsHidden());
  RenderWidgetHostViewBase* widget_view =
      static_cast<RenderWidgetHostViewBase*>(
          view_->CreateViewForPopupWidget(widget_host));
  if (!widget_view)
    return;
  if (!is_fullscreen) {
    widget_view->SetPopupType(popup_type);
  }
  pending_widget_views_[GlobalRoutingID(render_process_id, route_id)] =
      widget_view;
}",0,1,4,0.11,Replace
358,"vrrp_state_handler(vector_t *strvec)
{
	char *str = strvec_slot(strvec, 1);
	vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);
	if (!strcmp(str, ""MASTER""))
		vrrp->wantstate = VRRP_STATE_MAST;
	else if (!strcmp(str, ""BACKUP""))
	{
		if (vrrp->wantstate == VRRP_STATE_MAST)
			report_config_error(CONFIG_GENERAL_ERROR, ""(%s) state previously set as MASTER - ignoring BACKUP"", vrrp->iname);
		else
			vrrp->wantstate = VRRP_STATE_BACK;
	}
	else {
		report_config_error(CONFIG_GENERAL_ERROR,""(%s) unknown state '%s', defaulting to BACKUP"", vrrp->iname, str);
		vrrp->wantstate = VRRP_STATE_BACK;
	}
}","vrrp_state_handler(vector_t *strvec)
{
	char str_1[] = ""Constant"";
	if (strlen(str_1) > 0) {
    	char *str = strvec_slot(strvec, 1);
	}
	vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);
	if (!strcmp(str, ""MASTER""))
		vrrp->wantstate = VRRP_STATE_MAST;
	else if (!strcmp(str, ""BACKUP""))
	{
		if (vrrp->wantstate == VRRP_STATE_MAST)
			report_config_error(CONFIG_GENERAL_ERROR, ""(%s) state previously set as MASTER - ignoring BACKUP"", vrrp->iname);
		else
			vrrp->wantstate = VRRP_STATE_BACK;
	}
	else {
		report_config_error(CONFIG_GENERAL_ERROR,""(%s) unknown state '%s', defaulting to BACKUP"", vrrp->iname, str);
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		char
		    *p,
		    *xml;
		xml=FileToString(filename,~0UL,exception);
		quantization_tables=NewXMLTree(xml,exception);
		vrrp->wantstate = VRRP_STATE_BACK;
	}
}",0,1,20,0.49,Insert
360,"void Editor::pasteAsPlainText(EditorCommandSource source) {
  if (tryDHTMLPaste(PlainTextOnly))
    return;
  if (!canPaste())
    return;
  spellChecker().updateMarkersForWordsAffectedByEditing(false);
  pasteAsPlainTextWithPasteboard(Pasteboard::generalPasteboard());
}","void Editor::pasteAsPlainText(EditorCommandSource source) {
  mmu_ctx_t *exec;
  int target_width_bytes;
  if (target_width_bytes != TARGET_PAGE_BITS) {
          exec->raddr |= (exec->eaddr & ((1 << target_width_bytes) - 1))
                        & TARGET_PAGE_MASK;
  }
  if (tryDHTMLPaste(PlainTextOnly))
    return;
  if (!canPaste())
    return;
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      spellChecker().updateMarkersForWordsAffectedByEditing(false);
  strcpy(str, ""a"");
  }
  pasteAsPlainTextWithPasteboard(Pasteboard::generalPasteboard());
}",0,1,3,0.23,Insert
361,,,,,,,
362,,,,,,,
363,"AP_DECLARE(int) ap_some_auth_required(request_rec *r)
{
    if (ap__authz_ap_some_auth_required) {
        return ap__authz_ap_some_auth_required(r);
    }
    else
        return 0;
}","AP_DECLARE(int) ap_some_auth_required(request_rec *r)
{
    if (ap__authz_ap_some_auth_required) {
        int a = 2;
        int b = 3;
        Rocker *r_7;
        DescInfo *info;
        uint32_t port;
        int err = ROCKER_OK;
        char *buf = desc_get_buf(info, true);
        struct iovec iov[ROCKER_TX_FRAGS_MAX] = { { 0, }, };
        PCIDevice *dev = PCI_DEVICE(r_7);
        int iovcnt = 0;
        uint32_t pport;
        pport = rocker_get_pport_by_tx_ring(r_7, desc_get_ring(info));
        err = fp_port_eg(r_7->fp_port[port], iov, iovcnt);
        while (a < b) {
            return ap__authz_ap_some_auth_required(r);
            b = a;
        }
    }
    else
        return 0;
}",0,1,6,0.28,Insert
364,"void acpi_os_printf(const char *fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	acpi_os_vprintf(fmt, args);
	va_end(args);
}","void acpi_os_printf(const char *fmt, ...)
{
	int a = 2;
	int b = 3;
	while (a < b) {
    	int nb_oargs;
    	int nb_iargs;
    	const TCGArg * const args_4;
    	int rules, nb_regs, ini;
    	tcg_insn_unit *func_addr;
    	func_addr = (tcg_insn_unit *)(intptr_t)args_4[nb_oargs + nb_iargs];
    	rules = args_4[nb_oargs + nb_iargs + 1];
    	va_list args;
    	b = a;
	}
	va_start(args, fmt);
	acpi_os_vprintf(fmt, args);
	va_end(args);
}",0,1,9,0.37,Insert
368,"bool RenderViewHostManager::ShouldReuseWebUI(
    const NavigationEntry* curr_entry,
    const NavigationEntryImpl* new_entry) const {
  NavigationControllerImpl& controller =
      delegate_->GetControllerForRenderManager();
  return curr_entry && web_ui_.get() &&
      (WebUIControllerFactoryRegistry::GetInstance()->GetWebUIType(
          controller.GetBrowserContext(), curr_entry->GetURL()) ==
       WebUIControllerFactoryRegistry::GetInstance()->GetWebUIType(
          controller.GetBrowserContext(), new_entry->GetURL()));
}","bool RenderViewHostManager::ShouldReuseWebUI(
    const NavigationEntry* curr_entry,
    const NavigationEntryImpl* new_entry) const {
  NavigationControllerImpl& controller =
      delegate_->GetControllerForRenderManager();
  return curr_entry && web_ui_.get() &&
      (WebUIControllerFactoryRegistry::GetInstance()->GetWebUIType(
          controller.GetBrowserContext(), curr_entry->GetURL()) ==
          Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
          Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
          ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
          aml_append(ifconfig,
                  aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
          aml_append(ifconfig,
                  aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
          aml_append(ifconfig, aml_store(aml_name(""CDW2""), aml_name(""SUPP"")));
          aml_append(ifconfig, aml_store(aml_name(""CDW3""), aml_name(""CTRL"")));
       WebUIControllerFactoryRegistry::GetInstance()->GetWebUIType(
          controller.GetBrowserContext(), new_entry->GetURL()));
}",0,1,1,0.24,Insert
370,"char *path_name(const struct name_path *path, const char *name)
{
	const struct name_path *p;
	char *n, *m;
	int nlen = strlen(name);
	int len = nlen + 1;
	for (p = path; p; p = p->up) {
		if (p->elem_len)
			len += p->elem_len + 1;
 	}
 	n = xmalloc(len);
 	m = n + len - (nlen + 1);
	strcpy(m, name);
 	for (p = path; p; p = p->up) {
 		if (p->elem_len) {
 			m -= p->elem_len + 1;
			memcpy(m, p->elem, p->elem_len);
			m[p->elem_len] = '/';
		}
	}
	return n;
}","char *path_name(const struct name_path *path, const char *name)
{
	const uint8_t *quant_10;
	int16_t *blks_1;
	int t0_1, t1_4, t2_9, t3_10, t4_5, t5_1, t6_7, t7_5, t8_6, t9_6, tA_9, tB_3, tC_5, tD_7, tE_4, tF_4;
	int t0_1, t1_4, t2_9, t3_10, t4_5, t5_1, t6_7, t7_5, t8_6, t9_6, tA_9, tB_3, tC_5, tD_7, tE_4, tF_4;
	int s0_5, s1_2, s2_8, s3_9, s4_10, s5_6, s6_5, s7_6;
	int s0_5, s1_2, s2_8, s3_9, s4_10, s5_6, s6_5, s7_6;
	s6_5 = (int) blks_1[6 * 8] * quant_10[6 * 8];
	tA_9  = (s2_8 * 8867 - s6_5 * 21407) >> 14;
	tB_3  = (s6_5 * 8867 + s2_8 * 21407) >> 14;
	const struct name_path *p;
	char *n, *m;
	uint8_t rae;
	NvmeCtrl *n_3;
	if (!rae) {
	        nvme_clear_events(n_3, NVME_AER_TYPE_NOTICE);
	        int prefilter;
	        double vec_freq[13];
	        int n_6 = 6;
	        for (int k = 0; k < prefilter; ++k)
	                coeff_blur121(vec_freq, --n_6);
	}
	int nlen = strlen(name);
	int len = nlen + 1;
	for (p = path; p; p = p->up) {
		if (p->elem_len)
			len += p->elem_len + 1;
 	}
 	int a = 2;
 	int b = 3;
 	while (a != b) {
     	n = xmalloc(len);
     	b = a;
 	}
 	AVCodecContext *avctx;
 	int i;
 	const uint8_t *quant;
 	int16_t *blks;
 	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
 	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
 	int s0, s1, s2, s3, s4, s5, s6, s7;
 	int s0, s1, s2, s3, s4, s5, s6, s7;
 	s2 = (int) blks[2 * 8] * quant[2 * 8];
 	tA  = (s2 * 8867 - s6 * 21407) >> 14;
 	tB  = (s6 * 8867 + s2 * 21407) >> 14;
 	Vp3DecodeContext *s = avctx->priv_data;
 	for (i = 0; i < 16; i++) {
 	        free_vlc(&s->dc_vlc[i]);
 	        free_vlc(&s->ac_vlc_1[i]);
 	        free_vlc(&s->ac_vlc_2[i]);
 	        free_vlc(&s->ac_vlc_3[i]);
 	        free_vlc(&s->ac_vlc_4[i]);
 	}
 	m = n + len - (nlen + 1);
	strcpy(m, name);
 	for (p = path; p; p = p->up) {
 		if (p->elem_len) {
 			m -= p->elem_len + 1;
			memcpy(m, p->elem, p->elem_len);
			m[p->elem_len] = '/';
		}
	}
	return n;
}",1,0,564,3.33,Insert
371,"static int ssh_channelcmp(void *av, void *bv)
{
    struct ssh_channel *a = (struct ssh_channel *) av;
    struct ssh_channel *b = (struct ssh_channel *) bv;
    if (a->localid < b->localid)
	return -1;
    if (a->localid > b->localid)
	return +1;
    return 0;
}","static int ssh_channelcmp(void *av, void *bv)
{
    struct ssh_channel *a = (struct ssh_channel *) av;
    struct ssh_channel *b = (struct ssh_channel *) bv;
    if (a->localid < b->localid)
	return -1;
	struct sk_buff *skb;
	struct sock *sk;
	struct tcp_sock *tp = tcp_sk(sk);
	u32 length, end64seq;
	struct tcp_sock *tp = tcp_sk(sk);
	u32 length, end64seq;
	SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
	"",
			   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
	length = TCP_SKB_CB(skb)->length;
    if (a->localid > b->localid)
	return +1;
    int a_1 = 2;
    int b_1 = 3;
    if (a_1 != b_1) {
        return 0;
    }
}",0,1,9,0.29,Insert
373,"cJSON *cJSON_DetachItemFromArray( cJSON *array, int which )
{
	cJSON *c = array->child;
	while ( c && which > 0 ) {
		c = c->next;
		--which;
	}
	if ( ! c )
		return 0;
	if ( c->prev )
		c->prev->next = c->next;
	if ( c->next ) c->next->prev = c->prev;
	if ( c == array->child )
		array->child = c->next;
	c->prev = c->next = 0;
	return c;
}","cJSON *cJSON_DetachItemFromArray( cJSON *array, int which )
{
	GF_DOMEventTarget *event_target;
	while (gf_list_count(event_target->listeners)) {
			GF_Node *n = (GF_Node *)gf_list_get(event_target->listeners, 0);
			gf_dom_listener_del(n, event_target);
	}
	cJSON *c = array->child;
	while ( c && which > 0 ) {
		c = c->next;
		--which;
	}
	if ( ! c )
		return 0;
	if ( c->prev )
		c->prev->next = c->next;
	if ( c->next ) c->next->prev = c->prev;
	if ( c == array->child )
		array->child = c->next;
	int a = 2;
	int b = 3;
	while (a != b) {
    	c->prev = c->next = 0;
    	b = a;
	}
	return c;
}",1,0,28,0.78,Insert
377,"void WebContentsImpl::OnDidDownloadImage(
    int id,
    int http_status_code,
    const GURL& image_url,
    int requested_size,
    const std::vector<SkBitmap>& bitmaps) {
  ImageDownloadMap::iterator iter = image_download_map_.find(id);
  if (iter == image_download_map_.end()) {
    return;
  }
  if (!iter->second.is_null()) {
    iter->second.Run(id, http_status_code, image_url, requested_size, bitmaps);
  }
  image_download_map_.erase(id);
}","void WebContentsImpl::OnDidDownloadImage(
    int id,
    int http_status_code,
    const GURL& image_url,
    int requested_size,
    const std::vector<SkBitmap>& bitmaps) {
  int fd;
  if (lseek(fd, 512, SEEK_SET) < 0) {
          goto fail;
  }
  ImageDownloadMap::iterator iter = image_download_map_.find(id);
  if (iter == image_download_map_.end()) {
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        return;
    }
  }
  if (!iter->second.is_null()) {
    iter->second.Run(id, http_status_code, image_url, requested_size, bitmaps);
  }
  image_download_map_.erase(id);
}",0,1,17,0.49,Insert
381,"void Segment::PreloadCluster(Cluster* pCluster, ptrdiff_t idx)
{
    assert(pCluster);
    assert(pCluster->m_index < 0);
    assert(idx >= m_clusterCount);
    const long count = m_clusterCount + m_clusterPreloadCount;
    long& size = m_clusterSize;
    assert(size >= count);
    if (count >= size)
    {
        const long n = (size <= 0) ? 2048 : 2*size;
        Cluster** const qq = new Cluster*[n];
        Cluster** q = qq;
        Cluster** p = m_clusters;
        Cluster** const pp = p + count;
        while (p != pp)
            *q++ = *p++;
        delete[] m_clusters;
        m_clusters = qq;
        size = n;
    }
     assert(m_clusters);
    Cluster** const p = m_clusters + idx;
    Cluster** q = m_clusters + count;
    assert(q >= p);
     assert(q < (m_clusters + size));
    while (q > p)
    {
        Cluster** const qq = q - 1;
        assert((*qq)->m_index < 0);
        *q = *qq;
        q = qq;
     }
    m_clusters[idx] = pCluster;
    ++m_clusterPreloadCount;
 }","void Segment::PreloadCluster(Cluster* pCluster, ptrdiff_t idx)
{
    int s0_2, s1_9, s2_2, s3_8, s4_6, s5_4, s6_9, s7_3;
    int t0_9, t1_4, t2_1, t3_7, t4_7, t5_3, t6_2, t7_10, t8_1, t9_2, tA_1, tB_4, tC_2, tD_6, tE_3, tF_6;
    int t0_9, t1_4, t2_1, t3_7, t4_7, t5_3, t6_2, t7_10, t8_1, t9_2, tA_1, tB_4, tC_2, tD_6, tE_3, tF_6;
    int s0_2, s1_9, s2_2, s3_8, s4_6, s5_4, s6_9, s7_3;
    int t0_9, t1_4, t2_1, t3_7, t4_7, t5_3, t6_2, t7_10, t8_1, t9_2, tA_1, tB_4, tC_2, tD_6, tE_3, tF_6;
    int t0_9, t1_4, t2_1, t3_7, t4_7, t5_3, t6_2, t7_10, t8_1, t9_2, tA_1, tB_4, tC_2, tD_6, tE_3, tF_6;
    tC_2  = (s0_2 >> 1) - (s4_6 >> 1);
    tD_6  = (s4_6 >> 1) * 2 + tC_2;
    tE_3  = tC_2 - (tA_1 >> 1);
    assert(pCluster);
    assert(pCluster->m_index < 0);
    void *result;
    result = (ptr_t)GC_alloc_large(ADD_SLOP(lb), k, IGNORE_OFF_PAGE);
    assert(idx >= m_clusterCount);
    const long count = m_clusterCount + m_clusterPreloadCount;
    int s0, s1, s2, s3, s4, s5, s6, s7;
    int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    int s0, s1, s2, s3, s4, s5, s6, s7;
    int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    tC  = (s0 >> 1) - (s4 >> 1);
    tD  = (s4 >> 1) * 2 + tC;
    tE  = tC - (tA >> 1);
    int a = 2;
    int b = 3;
    if (a != b) {
        const char *p_9;
        QemuOpts *opts;
        if (strstart(filename, ""mon:"", &p_9)) {
                filename = p_9;
                qemu_opt_set(opts, ""mux"", ""on"");
                if (strcmp(filename, ""stdio"") == 0) {
                    qemu_opt_set(opts, ""signal"", ""off"");
                }
        }
        long& size = m_clusterSize;
    }
    assert(size >= count);
    if (count >= size)
    {
        const long n = (size <= 0) ? 2048 : 2*size;
        Cluster** const qq = new Cluster*[n];
        Cluster** q = qq;
        Cluster** p = m_clusters;
        Cluster** const pp = p + count;
        while (p != pp)
            *q++ = *p++;
        delete[] m_clusters;
        m_clusters = qq;
        size = n;
    }
     assert(m_clusters);
    Cluster** const p = m_clusters + idx;
    Cluster** q = m_clusters + count;
    assert(q >= p);
     assert(q < (m_clusters + size));
    while (q > p)
    {
        Cluster** const qq = q - 1;
        assert((*qq)->m_index < 0);
        *q = *qq;
        q = qq;
     }
    m_clusters[idx] = pCluster;
    ++m_clusterPreloadCount;
 }",1,0,868,5.26,Insert
382,,,,,,,
383,"AtomicString GetInputModeAttribute(Element* element) {
  if (!element)
    return AtomicString();
  bool query_attribute = false;
  if (isHTMLInputElement(*element)) {
    query_attribute = toHTMLInputElement(*element).SupportsInputModeAttribute();
  } else if (isHTMLTextAreaElement(*element)) {
    query_attribute = true;
  } else {
    element->GetDocument().UpdateStyleAndLayoutTree();
    if (HasEditableStyle(*element))
      query_attribute = true;
  }
  if (!query_attribute)
    return AtomicString();
  return element->FastGetAttribute(HTMLNames::inputmodeAttr).DeprecatedLower();
}","AtomicString GetInputModeAttribute(Element* element) {
  if (!element)
    return AtomicString();
  bool query_attribute = false;
  if (isHTMLInputElement(*element)) {
    int a = 2;
    int b = 3;
    while (a < b) {
        query_attribute = toHTMLInputElement(*element).SupportsInputModeAttribute();
        b = a;
    }
  } else if (isHTMLTextAreaElement(*element)) {
    query_attribute = true;
  } else {
    element->GetDocument().UpdateStyleAndLayoutTree();
    unsigned long array;
    struct net_bridge_mdb_entry *this = (void *)array;
    struct net_bridge *bridge = this->bridge;
    if (!netif_running(bridge->dev) || timer_pending(&this->timer))
    		goto out;
    if (HasEditableStyle(*element))
      query_attribute = true;
  }
  if (!query_attribute)
    return AtomicString();
  return element->FastGetAttribute(HTMLNames::inputmodeAttr).DeprecatedLower();
}",0,1,16,0.49,Insert
384,"void HTMLMediaElement::setPlaybackRate(double rate,
                                       ExceptionState& exception_state) {
  BLINK_MEDIA_LOG << ""setPlaybackRate("" << (void*)this << "", "" << rate << "")"";
  if (GetLoadType() == WebMediaPlayer::kLoadTypeMediaStream)
    return;
  if (rate != 0.0 && (rate < kMinRate || rate > kMaxRate)) {
    UseCounter::Count(GetDocument(),
                      WebFeature::kHTMLMediaElementMediaPlaybackRateOutOfRange);
    exception_state.ThrowDOMException(
        DOMExceptionCode::kNotSupportedError,
        ""The provided playback rate ("" + String::Number(rate) +
            "") is not in the "" + ""supported playback range."");
    return;
  }
  if (playback_rate_ != rate) {
    playback_rate_ = rate;
    ScheduleEvent(event_type_names::kRatechange);
  }
  UpdatePlaybackRate();
}","void HTMLMediaElement::setPlaybackRate(double rate,
                                       ExceptionState& exception_state) {
  BLINK_MEDIA_LOG << ""setPlaybackRate("" << (void*)this << "", "" << rate << "")"";
  if (GetLoadType() == WebMediaPlayer::kLoadTypeMediaStream)
    return;
  if (rate != 0.0 && (rate < kMinRate || rate > kMaxRate)) {
    UseCounter::Count(GetDocument(),
                      WebFeature::kHTMLMediaElementMediaPlaybackRateOutOfRange);
                      const uint8_t *data;
                      int size;
                      AVCodecParserContext *ctx;
                      VP9ParseContext *s = ctx->priv_data;
                      parse_frame(ctx, data, size);
    exception_state.ThrowDOMException(
        DOMExceptionCode::kNotSupportedError,
        ""The provided playback rate ("" + String::Number(rate) +
            "") is not in the "" + ""supported playback range."");
    int a = 2;
    int b = 3;
    if (a != b) {
        return;
    }
  }
  if (playback_rate_ != rate) {
    playback_rate_ = rate;
    ScheduleEvent(event_type_names::kRatechange);
  }
  UpdatePlaybackRate();
}",0,1,11,0.6,Insert
385," void PrintWebViewHelper::OnPrintForSystemDialog() {
   blink::WebLocalFrame* frame = print_preview_context_.source_frame();
   if (!frame) {
     NOTREACHED();
    return;
  }
  Print(frame, print_preview_context_.source_node(), false);
}"," void PrintWebViewHelper::OnPrintForSystemDialog() {
   int a = 2;
   int b = 3;
   if (a != b) {
       blink::WebLocalFrame* frame = print_preview_context_.source_frame();
   }
   struct sk_buff * skp;
   struct genl_family *feature;
   const struct genl_ops *opens;
   struct sk_buff * skp_1;
   struct genl_family *feature_5;
   const struct genl_ops *opens_9;
   struct n_10 *n_10 = sock_net_9( skp_1->sk);
   struct genl_info information_5;
   if (feature_5->post_doit)
   		feature_5->post_doit(opens_9,  skp_1, &information_5);
   struct n *n = sock_net( skp->sk);
   struct genl_info information;
   if (feature->post_doit)
   		feature->post_doit(opens,  skp, &information);
   if (!frame) {
     NOTREACHED();
    return;
  }
  Print(frame, print_preview_context_.source_node(), false);
}",1,0,51,0.49,Insert
386,,,,,,,
387,"static void RelinquishZIPMemory(voidpf context,voidpf memory)
{
  (void) context;
  memory=RelinquishMagickMemory(memory);
}","static void RelinquishZIPMemory(voidpf context,voidpf memory)
{
  char cont[DESC_SIZE + 1];
  cont[DESC_SIZE] = '\0';
  int a = 2;
  int b = 2;
  if (a == b) {
      (void) context;
  }
  memory=RelinquishMagickMemory(memory);
}",0,1,5,0.21,Insert
389,"static int sapi_fcgi_read_post(char *buffer, uint count_bytes TSRMLS_DC)
{
	uint read_bytes = 0;
	int tmp_read_bytes;
	fcgi_request *request = (fcgi_request*) SG(server_context);
	count_bytes = MIN(count_bytes, (uint) SG(request_info).content_length - SG(read_post_bytes));
	while (read_bytes < count_bytes) {
		tmp_read_bytes = fcgi_read(request, buffer + read_bytes, count_bytes - read_bytes);
		if (tmp_read_bytes <= 0) {
			break;
		}
		read_bytes += tmp_read_bytes;
	}
	return read_bytes;
}","static int sapi_fcgi_read_post(char *buffer, uint count_bytes TSRMLS_DC)
{
	uint read_bytes = 0;
	int tmp_read_bytes;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	fcgi_request *request = (fcgi_request*) SG(server_context);
	strcpy(str, ""a"");
	}
	count_bytes = MIN(count_bytes, (uint) SG(request_info).content_length - SG(read_post_bytes));
	while (read_bytes < count_bytes) {
		tmp_read_bytes = fcgi_read(request, buffer + read_bytes, count_bytes - read_bytes);
		if (tmp_read_bytes <= 0) {
			break;
		}
		hwaddr array;
		PowerPCCPU *cpu;
		uint64_t request_4;
		target_ulong pte_index;
		CPUPPCState *viron = &cpu->viron;
		CPUPPCState *viron = &cpu->viron;
		pte_index = (array & viron->htab_mask) * HPTES_PER_GROUP;
		request_4 = ppc_hash64_start_access(cpu, pte_index);
		read_bytes += tmp_read_bytes;
	}
	return read_bytes;
}",0,1,17,0.49,Insert
393,"inline void DialogHandler::dialogCreated(DOMWindow* dialogFrame)
{
    m_dialogContext = dialogFrame->frame() ? dialogFrame->frame()->script()->currentWorldContext() : v8::Local<v8::Context>();
    if (m_dialogContext.IsEmpty())
        return;
    if (m_dialogArguments.IsEmpty())
        return;
    v8::Context::Scope scope(m_dialogContext);
    m_dialogContext->Global()->Set(v8::String::NewSymbol(""dialogArguments""), m_dialogArguments);
}","inline void DialogHandler::dialogCreated(DOMWindow* dialogFrame)
{
    m_dialogContext = dialogFrame->frame() ? dialogFrame->frame()->script()->currentWorldContext() : v8::Local<v8::Context>();
    if (m_dialogContext.IsEmpty())
        return;
    if (m_dialogArguments.IsEmpty())
        return;
    v8::Context::Scope scope(m_dialogContext);
    int a = 2;
    int b = 3;
    while (a != b) {
        m_dialogContext->Global()->Set(v8::String::NewSymbol(""dialogArguments""), m_dialogArguments);
        AVPacket * pk;
        AVFormatContext *s;
        unsigned char rb[5];
        AVCodecParameters *par = s->streams[stream_index]->codecpar;
        AVIOContext *b_6     = s->b_6;
        const int stream_index =  pk->stream_index;
        avi_stream2fourcc(rb, stream_index, par->codec_type);
        avio_write(b_6, rb, 4);
        b = a;
    }
}",0,1,8,0.35,Insert
394,"bool AsyncPixelTransfersCompletedQuery::End(
    base::subtle::Atomic32 submit_count) {
  AsyncMemoryParams mem_params;
  Buffer buffer = manager()->decoder()->GetSharedMemoryBuffer(shm_id());
  if (!buffer.shared_memory)
    return false;
  mem_params.shared_memory = buffer.shared_memory;
   mem_params.shm_size = buffer.size;
   mem_params.shm_data_offset = shm_offset();
   mem_params.shm_data_size = sizeof(QuerySync);
   observer_ = new AsyncPixelTransferCompletionObserverImpl(submit_count);
  manager()->decoder()->GetAsyncPixelTransferManager()
      ->AsyncNotifyCompletion(mem_params, observer_);
  return AddToPendingTransferQueue(submit_count);
}","bool AsyncPixelTransfersCompletedQuery::End(
    base::subtle::Atomic32 submit_count) {
  WebKitWebView* webView;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  Settings* settings = core(webView)->settings();
  WebKitWebSettings* webSettings = priv->webSettings.get();
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  WebKitEditingBehavior editingBehavior;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  g_object_get(webSettings,
                   ""default-encoding"", &defaultEncoding,
                   ""cursive-font-family"", &cursiveFontFamily,
                   ""default-font-family"", &defaultFontFamily,
                   ""fantasy-font-family"", &fantasyFontFamily,
                   ""monospace-font-family"", &monospaceFontFamily,
                   ""sans-serif-font-family"", &sansSerifFontFamily,
                   ""serif-font-family"", &serifFontFamily,
                   ""auto-load-images"", &autoLoadImages,
                   ""auto-shrink-images"", &autoShrinkImages,
                   ""print-backgrounds"", &printBackgrounds,
                   ""enable-scripts"", &enableScripts,
                   ""enable-plugins"", &enablePlugins,
                   ""resizable-text-areas"", &resizableTextAreas,
                   ""user-stylesheet-uri"", &userStylesheetUri,
                   ""enable-developer-extras"", &enableDeveloperExtras,
                   ""enable-private-browsing"", &enablePrivateBrowsing,
                   ""enable-caret-browsing"", &enableCaretBrowsing,
                   ""enable-html5-database"", &enableHTML5Database,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                   ""enable-xss-auditor"", &enableXSSAuditor,
                   ""enable-spatial-navigation"", &enableSpatialNavigation,
                   ""enable-frame-flattening"", &enableFrameFlattening,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                   ""editing-behavior"", &editingBehavior,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                   ""enable-dom-paste"", &enableDOMPaste,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                    ""enable-page-cache"", &usePageCache,
                    ""enable-java-applet"", &enableJavaApplet,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                    ""enable-fullscreen"", &enableFullscreen,
                    ""enable-dns-prefetching"", &enableDNSPrefetching,
                   ""enable-webgl"", &enableWebGL,
                   NULL);
  settings->setLoadsImagesAutomatically(autoLoadImages);
  AsyncMemoryParams mem_params;
  Buffer buffer = manager()->decoder()->GetSharedMemoryBuffer(shm_id());
  if (!buffer.shared_memory)
    return false;
  mem_params.shared_memory = buffer.shared_memory;
   mem_params.shm_size = buffer.size;
   SCSIRequest *req;
   SCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, db);
   req = scsi_req_alloc(&scsi_disk_reqops, &s->qdev, contract, lban, hba_private);
   mem_params.shm_data_offset = shm_offset();
   char str1[] = ""Constant"";
   char str2[] = ""Constant"";
   if (strcmp(str1, str2) == 0) {
       mem_params.shm_data_size = sizeof(QuerySync);
   }
   observer_ = new AsyncPixelTransferCompletionObserverImpl(submit_count);
  manager()->decoder()->GetAsyncPixelTransferManager()
      ->AsyncNotifyCompletion(mem_params, observer_);
  return AddToPendingTransferQueue(submit_count);
}",1,0,49,0.55,Insert
396,"void mp_encode_lua_table_as_map(lua_State *L, mp_buf *buf, int level) {
    size_t len = 0;
     lua_pushnil(L);
     while(lua_next(L,-2)) {
         lua_pop(L,1);  
        len++;
    }
    mp_encode_map(L,buf,len);
    lua_pushnil(L);
    while(lua_next(L,-2)) {
        lua_pushvalue(L,-2);  
        mp_encode_lua_type(L,buf,level+1);  
        mp_encode_lua_type(L,buf,level+1);  
    }
}","void mp_encode_lua_table_as_map(lua_State *L, mp_buf *buf, int level) {
    size_t len = 0;
     lua_pushnil(L);
     SSL *changes;
     BUF_MEM *CB;
     if (changes->info_callback != NULL)
     		CB=changes->info_callback;
     	else if (changes->ctx->info_callback != NULL)
     		CB=changes->ctx->info_callback;
     while(lua_next(L,-2)) {
         VGACommonState *s;
         int cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;
         DisplaySurface *surface = qemu_console_surface(s->con);
         int cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;
         int cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;
         vga_get_text_resolution(s, &width, &height, &cw, &cheight);
         lua_pop(L,1);  
        len++;
    }
    mp_encode_map(L,buf,len);
    lua_pushnil(L);
    while(lua_next(L,-2)) {
        lua_pushvalue(L,-2);  
        int a = 2;
        int b = 3;
        while (a != b) {
            mp_encode_lua_type(L,buf,level+1);  
            b = a;
        }
        mp_encode_lua_type(L,buf,level+1);  
    }
}",1,0,72,0.82,Insert
397,"int fastcall __lock_page_killable(struct page *page)
{
	DEFINE_WAIT_BIT(wait, &page->flags, PG_locked);
	return __wait_on_bit_lock(page_waitqueue(page), &wait,
					sync_page_killable, TASK_KILLABLE);
}","int fastcall __lock_page_killable(struct page *page)
{
	int a = 2;
	AVCodecContext * avnc;
	MP3On4DecodeContext *this = avnc->priv_data;
	MP3On4DecodeContext *this = avnc->priv_data;
	this->chan_cfg = (((unsigned char *)avnc->extradata)[1] >> 3) & 0x0f;
	avnc->channels = mp3Channels[this->chan_cfg];
	avnc->priv_data = this->mp3decctx[0];
	decode_init(avnc);
	avnc->priv_data = this;
	int b = 2;
	if (a == b) {
    	DEFINE_WAIT_BIT(wait, &page->flags, PG_locked);
	}
	return __wait_on_bit_lock(page_waitqueue(page), &wait,
					sync_page_killable, TASK_KILLABLE);
}",0,1,8,0.36,Insert
398,"void LargeObjectPage::RemoveFromHeap() {
  static_cast<LargeObjectArena*>(Arena())->FreeLargeObjectPage(this);
}","void LargeObjectPage::RemoveFromHeap() {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      static_cast<LargeObjectArena*>(Arena())->FreeLargeObjectPage(this);
  strcpy(str, ""a"");
  CharDriverState *cher;
  cher->chr_update_read_handler = fd_chr_update_read_handler;
  cher->chr_close = fd_chr_close;
  qemu_chr_be_generic_open(cher);
  }
}",0,1,3,0.16,Insert
399,,,,,,,
400,,,,,,,
402,"xfs_attr_refillstate(xfs_da_state_t *state)
{
	xfs_da_state_path_t *path;
	xfs_da_state_blk_t *blk;
	int level, error;
	trace_xfs_attr_refillstate(state->args);
	path = &state->path;
	ASSERT((path->active >= 0) && (path->active < XFS_DA_NODE_MAXDEPTH));
	for (blk = path->blk, level = 0; level < path->active; blk++, level++) {
		if (blk->disk_blkno) {
			error = xfs_da3_node_read(state->args->trans,
						state->args->dp,
						blk->blkno, blk->disk_blkno,
						&blk->bp, XFS_ATTR_FORK);
			if (error)
				return error;
		} else {
			blk->bp = NULL;
		}
	}
	path = &state->altpath;
	ASSERT((path->active >= 0) && (path->active < XFS_DA_NODE_MAXDEPTH));
	for (blk = path->blk, level = 0; level < path->active; blk++, level++) {
		if (blk->disk_blkno) {
			error = xfs_da3_node_read(state->args->trans,
						state->args->dp,
						blk->blkno, blk->disk_blkno,
						&blk->bp, XFS_ATTR_FORK);
			if (error)
				return error;
		} else {
			blk->bp = NULL;
		}
	}
	return 0;
}","xfs_attr_refillstate(xfs_da_state_t *state)
{
	xfs_da_state_path_t *path;
	xfs_da_state_blk_t *blk;
	int level, error;
	trace_xfs_attr_refillstate(state->args);
	path = &state->path;
	ASSERT((path->active >= 0) && (path->active < XFS_DA_NODE_MAXDEPTH));
	for (blk = path->blk, level = 0; level < path->active; blk++, level++) {
		if (blk->disk_blkno) {
			error = xfs_da3_node_read(state->args->trans,
						state->args->dp,
						blk->blkno, blk->disk_blkno,
						&blk->bp, XFS_ATTR_FORK);
			if (error)
				return error;
		} else {
			blk->bp = NULL;
		}
	}
	path = &state->altpath;
	ASSERT((path->active >= 0) && (path->active < XFS_DA_NODE_MAXDEPTH));
	for (blk = path->blk, level = 0; level < path->active; blk++, level++) {
		if (blk->disk_blkno) {
			register ssize_t
			    i;
			QuantizationTable
			    *table;
			ssize_t
			    j;
			XMLTreeInfo
			    *description,
			    *levels,
			    *quantization_tables,
			    *table_iterator;
			for (j=i; j < 64; j++)
			    table->levels[j]=table->levels[j-1];
			error = xfs_da3_node_read(state->args->trans,
						state->args->dp,
						blk->blkno, blk->disk_blkno,
						&blk->bp, XFS_ATTR_FORK);
			if (error)
				return error;
		} else {
			int a = 2;
			int b = 3;
			if (a != b) {
    			blk->bp = NULL;
			}
		}
	}
	return 0;
}",0,1,21,1.38,Insert
404,"void InspectorResourceAgent::frameScheduledNavigation(Frame* frame, double)
{
    RefPtr<TypeBuilder::Network::Initiator> initiator = buildInitiatorObject(frame->document(), FetchInitiatorInfo());
    m_frameNavigationInitiatorMap.set(m_pageAgent->frameId(frame), initiator);
}","void InspectorResourceAgent::frameScheduledNavigation(Frame* frame, double)
{
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    QuantizationTable
        *table;
    size_t
        length;
    length=(size_t) table->width*table->height;
    table->levels=(unsigned int *) AcquireQuantumMemory(length,
        sizeof(*table->levels));
    RefPtr<TypeBuilder::Network::Initiator> initiator = buildInitiatorObject(frame->document(), FetchInitiatorInfo());
    int a = 26;
    int b = a;
    if(a*b>0){
        m_frameNavigationInitiatorMap.set(m_pageAgent->frameId(frame), initiator);
    }
}",0,1,4,0.31,Insert
405,"void Editor::RevealSelectionAfterEditingOperation(
    const ScrollAlignment& alignment,
    RevealExtentOption reveal_extent_option) {
  if (prevent_reveal_selection_)
    return;
  if (!GetFrame().Selection().IsAvailable())
    return;
   GetFrame().Selection().RevealSelection(alignment, reveal_extent_option);
 }","void Editor::RevealSelectionAfterEditingOperation(
    const ScrollAlignment& alignment,
    RevealExtentOption reveal_extent_option) {
  if (prevent_reveal_selection_)
    return;
    QuantizationTable
        *table;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    levels=GetXMLTreeChild(table_iterator,""levels"");
    table->levels=(unsigned int *) NULL;
    attribute=GetXMLTreeAttribute(levels,""width"");
    attribute=GetXMLTreeAttribute(levels,""height"");
    attribute=GetXMLTreeAttribute(levels,""divisor"");
  if (!GetFrame().Selection().IsAvailable())
    return;
   int a = 16;
   int b = a;
   if(a*b>0){
       GetFrame().Selection().RevealSelection(alignment, reveal_extent_option);
   }
 }",0,1,5,0.3,Insert
406,"get_caller_uid (GDBusMethodInvocation *context, gint *uid)
 {
        PolkitSubject *subject;
        PolkitSubject *process;
        subject = polkit_system_bus_name_new (g_dbus_method_invocation_get_sender (context));
        process = polkit_system_bus_name_get_process_sync (POLKIT_SYSTEM_BUS_NAME (subject), NULL, NULL);
        if (!process) {
                g_object_unref (subject);
                 return FALSE;
         }
        *uid = polkit_unix_process_get_uid (POLKIT_UNIX_PROCESS (process));
        g_object_unref (subject);
        g_object_unref (process);
         return TRUE;
 }","get_caller_uid (GDBusMethodInvocation *context, gint *uid)
 {
        PolkitSubject *subject;
        char str[] = ""Constant"";
        if (strlen(str) > 0) {
            PolkitSubject *process;
        }
        subject = polkit_system_bus_name_new (g_dbus_method_invocation_get_sender (context));
        process = polkit_system_bus_name_get_process_sync (POLKIT_SYSTEM_BUS_NAME (subject), NULL, NULL);
        if (!process) {
                g_object_unref (subject);
                 return FALSE;
         }
        *uid = polkit_unix_process_get_uid (POLKIT_UNIX_PROCESS (process));
        g_object_unref (subject);
        g_object_unref (process);
         return TRUE;
 }",1,0,3,0.09,Replace
408,"pdf14_forward_device_procs(gx_device * dev)
{
    gx_device_forward * pdev = (gx_device_forward *)dev;
    memset(&(pdev->procs), 0, size_of(pdev->procs));
    gx_device_forward_fill_in_procs(pdev);
    set_dev_proc(dev, close_device, gx_forward_close_device);
    set_dev_proc(dev, fill_rectangle, gx_forward_fill_rectangle);
    set_dev_proc(dev, fill_rectangle_hl_color, gx_forward_fill_rectangle_hl_color);
    set_dev_proc(dev, tile_rectangle, gx_forward_tile_rectangle);
    set_dev_proc(dev, copy_mono, gx_forward_copy_mono);
    set_dev_proc(dev, copy_color, gx_forward_copy_color);
    set_dev_proc(dev, get_page_device, gx_forward_get_page_device);
    set_dev_proc(dev, strip_tile_rectangle, gx_forward_strip_tile_rectangle);
    set_dev_proc(dev, copy_alpha, gx_forward_copy_alpha);
    set_dev_proc(dev, get_profile, gx_forward_get_profile);
    set_dev_proc(dev, set_graphics_type_tag, gx_forward_set_graphics_type_tag);
    set_dev_proc(dev, open_device, pdf14_forward_open_device);
    set_dev_proc(dev, put_params, pdf14_forward_put_params);
}","pdf14_forward_device_procs(gx_device * dev)
{
    gx_device_forward * pdev = (gx_device_forward *)dev;
    memset(&(pdev->procs), 0, size_of(pdev->procs));
    gx_device_forward_fill_in_procs(pdev);
    int a = 2;
    int b = 3;
    if (a != b) {
        set_dev_proc(dev, close_device, gx_forward_close_device);
    }
    set_dev_proc(dev, fill_rectangle, gx_forward_fill_rectangle);
    set_dev_proc(dev, fill_rectangle_hl_color, gx_forward_fill_rectangle_hl_color);
    set_dev_proc(dev, tile_rectangle, gx_forward_tile_rectangle);
    set_dev_proc(dev, copy_mono, gx_forward_copy_mono);
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    char
        *p,
        *xml;
    xml=FileToString(filename,~0UL,exception);
    quantization_tables=NewXMLTree(xml,exception);
    set_dev_proc(dev, copy_color, gx_forward_copy_color);
    set_dev_proc(dev, get_page_device, gx_forward_get_page_device);
    set_dev_proc(dev, strip_tile_rectangle, gx_forward_strip_tile_rectangle);
    set_dev_proc(dev, copy_alpha, gx_forward_copy_alpha);
    set_dev_proc(dev, get_profile, gx_forward_get_profile);
    set_dev_proc(dev, set_graphics_type_tag, gx_forward_set_graphics_type_tag);
    set_dev_proc(dev, open_device, pdf14_forward_open_device);
    set_dev_proc(dev, put_params, pdf14_forward_put_params);
}",0,1,33,0.86,Insert
409,,,,,,,
411,,,,,,,
413,"onig_free_body(regex_t* reg)
{
  if (IS_NOT_NULL(reg)) {
    ops_free(reg);
    if (IS_NOT_NULL(reg->string_pool)) {
      xfree(reg->string_pool);
      reg->string_pool_end = reg->string_pool = 0;
    }
    if (IS_NOT_NULL(reg->exact))            xfree(reg->exact);
    if (IS_NOT_NULL(reg->repeat_range))     xfree(reg->repeat_range);
    if (IS_NOT_NULL(reg->extp)) {
      free_regex_ext(reg->extp);
      reg->extp = 0;
    }
    onig_names_free(reg);
  }
}","onig_free_body(regex_t* reg)
{
  if (IS_NOT_NULL(reg)) {
    int a = 2;
    int b = 3;
    while (a != b) {
        ops_free(reg);
        b = a;
    }
    if (IS_NOT_NULL(reg->string_pool)) {
      xfree(reg->string_pool);
      reg->string_pool_end = reg->string_pool = 0;
    }
    if (IS_NOT_NULL(reg->exact))            xfree(reg->exact);
    if (IS_NOT_NULL(reg->repeat_range))     xfree(reg->repeat_range);
    if (IS_NOT_NULL(reg->extp)) {
      free_regex_ext(reg->extp);
      AVPacket * pk;
      AVFormatContext *s;
      const int stream_index =  pk->stream_index;
      int size               =  pk->size;
      AVIOContext *b_9     = s->b_9;
      avio_write(b_9,  pk->data, size);
      reg->extp = 0;
    }
    onig_names_free(reg);
  }
}",0,1,14,0.55,Insert
414,,,,,,,
415,"scoped_refptr<PrintBackend> PrintBackend::CreateInstance(
    const base::DictionaryValue* print_backend_settings) {
  return new PrintBackendWin;
}","scoped_refptr<PrintBackend> PrintBackend::CreateInstance(
    const base::DictionaryValue* print_backend_settings) {
  int a = 57;
  int b = a;
  if(a*b>0){
      AVCodecContext * avnc;
      MP3On4DecodeContext *this = avnc->priv_data;
      MP3On4DecodeContext *this = avnc->priv_data;
      avnc->priv_data = this;
      this->mp3decctx[0]->adu_mode = 1;
      return new PrintBackendWin;
  }
}",0,1,3,0.15,Insert
417,,,,,,,
419,,,,,,,
420,,,,,,,
421,"map_id_range_down_base(unsigned extents, struct uid_gid_map *map, u32 id, u32 count)
{
	unsigned idx;
	u32 first, last, id2;
	id2 = id + count - 1;
	for (idx = 0; idx < extents; idx++) {
		first = map->extent[idx].first;
		last = first + map->extent[idx].count - 1;
		if (id >= first && id <= last &&
		    (id2 >= first && id2 <= last))
			return &map->extent[idx];
	}
	return NULL;
}","map_id_range_down_base(unsigned extents, struct uid_gid_map *map, u32 id, u32 count)
{
	register ssize_t
	    i;
	QuantizationTable
	    *table;
	ssize_t
	    j;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	for (j=i; j < 64; j++)
	    table->levels[j]=table->levels[j-1];
	unsigned idx;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	u32 first, last, id2;
	}
	id2 = id + count - 1;
	for (idx = 0; idx < extents; idx++) {
		first = map->extent[idx].first;
		last = first + map->extent[idx].count - 1;
		if (id >= first && id <= last &&
		    (id2 >= first && id2 <= last))
			return &map->extent[idx];
	}
	return NULL;
}",0,1,13,0.63,Insert
424,,,,,,,
426,"static inline void fixup_objfreelist_debug(struct kmem_cache *cachep,
						void **list)
{
#if DEBUG
	void *next = *list;
	void *objp;
	while (next) {
		objp = next - obj_offset(cachep);
		next = *(void **)next;
		poison_obj(cachep, objp, POISON_FREE);
	}
#endif
}","static inline void fixup_objfreelist_debug(struct kmem_cache *cachep,
						void **list)
{
#if DEBUG
	void *next = *list;
	const char *nptr;
	char *ndpointer;
	double vals, mul, integral, fraction;
	double vals, mul, integral, fraction;
	double vals, mul, integral, fraction;
	int64_t retval;
	double vals, mul, integral, fraction;
	vals = strtod(nptr, &ndpointer);
	fraction = modf(vals, &integral);
	retval = vals * mul;
	int a = 2;
	int b = 2;
	if (a == b) {
    	void *objp;
	}
	while (next) {
		objp = next - obj_offset(cachep);
		next = *(void **)next;
		poison_obj(cachep, objp, POISON_FREE);
	}
#endif
}",0,1,14,0.43,Insert
427,"bool isUserInteractionEventForSlider(Event* event, LayoutObject* layoutObject) {
  if (isUserInteractionEvent(event))
    return true;
  LayoutSliderItem slider = LayoutSliderItem(toLayoutSlider(layoutObject));
  if (!slider.isNull() && !slider.inDragMode())
    return false;
   const AtomicString& type = event->type();
   return type == EventTypeNames::mouseover ||
         type == EventTypeNames::mouseout || type == EventTypeNames::mousemove;
 }","bool isUserInteractionEventForSlider(Event* event, LayoutObject* layoutObject) {
  if (isUserInteractionEvent(event))
    return true;
  LayoutSliderItem slider = LayoutSliderItem(toLayoutSlider(layoutObject));
  if (!slider.isNull() && !slider.inDragMode())
    return false;
   int a = 2;
   int b = 3;
   while (a < b) {
       const AtomicString& type = event->type();
       b = a;
   }
   return type == EventTypeNames::mouseover ||
         type == EventTypeNames::mouseout || type == EventTypeNames::mousemove;
 }",1,0,2,0.05,Replace
431,"static void picolcd_remove(struct hid_device *hdev)
{
	struct picolcd_data *data = hid_get_drvdata(hdev);
	unsigned long flags;
	dbg_hid(PICOLCD_NAME "" hardware remove...\n"");
	spin_lock_irqsave(&data->lock, flags);
	data->status |= PICOLCD_FAILED;
	spin_unlock_irqrestore(&data->lock, flags);
	picolcd_exit_devfs(data);
	device_remove_file(&hdev->dev, &dev_attr_operation_mode);
	device_remove_file(&hdev->dev, &dev_attr_operation_mode_delay);
	hid_hw_close(hdev);
	hid_hw_stop(hdev);
	spin_lock_irqsave(&data->lock, flags);
	if (data->pending)
		complete(&data->pending->ready);
	spin_unlock_irqrestore(&data->lock, flags);
	picolcd_exit_leds(data);
	picolcd_exit_backlight(data);
	picolcd_exit_lcd(data);
	picolcd_exit_framebuffer(data);
	picolcd_exit_cir(data);
	picolcd_exit_keys(data);
	hid_set_drvdata(hdev, NULL);
	mutex_destroy(&data->mutex);
	kfree(data);
}","static void picolcd_remove(struct hid_device *hdev)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	struct picolcd_data *data = hid_get_drvdata(hdev);
	strcpy(str, ""a"");
	}
	unsigned long flags;
	dbg_hid(PICOLCD_NAME "" hardware remove...\n"");
	spin_lock_irqsave(&data->lock, flags);
	data->status |= PICOLCD_FAILED;
	spin_unlock_irqrestore(&data->lock, flags);
	picolcd_exit_devfs(data);
	device_remove_file(&hdev->dev, &dev_attr_operation_mode);
	device_remove_file(&hdev->dev, &dev_attr_operation_mode_delay);
	hid_hw_close(hdev);
	hid_hw_stop(hdev);
	spin_lock_irqsave(&data->lock, flags);
	if (data->pending)
		complete(&data->pending->ready);
	spin_unlock_irqrestore(&data->lock, flags);
	picolcd_exit_leds(data);
	picolcd_exit_backlight(data);
	picolcd_exit_lcd(data);
	picolcd_exit_framebuffer(data);
	picolcd_exit_cir(data);
	picolcd_exit_keys(data);
	hid_set_drvdata(hdev, NULL);
	mutex_destroy(&data->mutex);
	kfree(data);
}",0,1,1,0.12,Replace
432,"void SyncBackendHost::HandleConnectionStatusChangeOnFrontendLoop(
    sync_api::ConnectionStatus status) {
  if (!frontend_)
    return;
  DCHECK_EQ(MessageLoop::current(), frontend_loop_);
  frontend_->OnConnectionStatusChange(status);
}","void SyncBackendHost::HandleConnectionStatusChangeOnFrontendLoop(
    sync_api::ConnectionStatus status) {
  if (!frontend_)
    return;
    Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
    Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
    GInt = aml_touuid(""33DB4D5B-1FF7-401C-9657-7441C03DD766"");
    ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
    GInt = aml_touuid(""E5C937D0-3553-4D7A-9117-EA4D19C3434D"");
    ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      DCHECK_EQ(MessageLoop::current(), frontend_loop_);
  strcpy(str, ""a"");
  }
  frontend_->OnConnectionStatusChange(status);
}",0,1,5,0.32,Insert
434,,,,,,,
437,"void exit_creds(struct task_struct *tsk)
{
	struct cred *cred;
	kdebug(""exit_creds(%u,%p,%p,{%d,%d})"", tsk->pid, tsk->real_cred, tsk->cred,
	       atomic_read(&tsk->cred->usage),
	       read_cred_subscribers(tsk->cred));
	cred = (struct cred *) tsk->real_cred;
	tsk->real_cred = NULL;
	validate_creds(cred);
	alter_cred_subscribers(cred, -1);
	put_cred(cred);
	cred = (struct cred *) tsk->cred;
	tsk->cred = NULL;
	validate_creds(cred);
	alter_cred_subscribers(cred, -1);
	put_cred(cred);
	cred = (struct cred *) tsk->replacement_session_keyring;
	if (cred) {
		tsk->replacement_session_keyring = NULL;
		validate_creds(cred);
		put_cred(cred);
	}
}","void exit_creds(struct task_struct *tsk)
{
	struct cred *cred;
	kdebug(""exit_creds(%u,%p,%p,{%d,%d})"", tsk->pid, tsk->real_cred, tsk->cred,
	       atomic_read(&tsk->cred->usage),
	       read_cred_subscribers(tsk->cred));
	cred = (struct cred *) tsk->real_cred;
	tsk->real_cred = NULL;
	validate_creds(cred);
	alter_cred_subscribers(cred, -1);
	put_cred(cred);
	cred = (struct cred *) tsk->cred;
	tsk->cred = NULL;
	validate_creds(cred);
	alter_cred_subscribers(cred, -1);
	put_cred(cred);
	cred = (struct cred *) tsk->replacement_session_keyring;
	if (cred) {
		tsk->replacement_session_keyring = NULL;
		validate_creds(cred);
		Image *image;
		const LayerInfo* layer_info;
		const size_t url;
		MagickOffsetType
		    offset;
		MagickStatusType
		    status;
		if (status == MagickFalse)
		    SeekBlob(image,offset+layer_info->channel_info[url].size-2,SEEK_SET);
		int a = 2;
		int b = 2;
		if (a == b) {
    		put_cred(cred);
		}
	}
}",0,1,31,0.71,Insert
439,"void br_netfilter_rtable_init(struct net_bridge *br)
{
	struct rtable *rt = &br->fake_rtable;
	atomic_set(&rt->dst.__refcnt, 1);
	rt->dst.dev = br->dev;
	rt->dst.path = &rt->dst;
	dst_metric_set(&rt->dst, RTAX_MTU, 1500);
	rt->dst.flags	= DST_NOXFRM;
	rt->dst.ops = &fake_dst_ops;
}","void br_netfilter_rtable_init(struct net_bridge *br)
{
	int a = 2;
	int b = 3;
	while (a < b) {
    	struct rtable *rt = &br->fake_rtable;
    	b = a;
    	int i, qa;
    	qa = libusb_init(&ctx);
	}
	atomic_set(&rt->dst.__refcnt, 1);
	rt->dst.dev = br->dev;
	rt->dst.path = &rt->dst;
	dst_metric_set(&rt->dst, RTAX_MTU, 1500);
	rt->dst.flags	= DST_NOXFRM;
	rt->dst.ops = &fake_dst_ops;
}",0,1,15,0.53,Insert
441,"void RenderFrameHostImpl::OnJavaScriptExecuteResponse(
    int id, const base::ListValue& result) {
  const base::Value* result_value;
  if (!result.Get(0, &result_value)) {
    NOTREACHED() << ""Got bad arguments for OnJavaScriptExecuteResponse"";
    return;
  }
  auto it = javascript_callbacks_.find(id);
  if (it != javascript_callbacks_.end()) {
    it->second.Run(result_value);
    javascript_callbacks_.erase(it);
  } else {
    NOTREACHED() << ""Received script response for unknown request"";
  }
}","void RenderFrameHostImpl::OnJavaScriptExecuteResponse(
    int id, const base::ListValue& result) {
  int a = 2;
  int b = 3;
  while (a != b) {
      const base::Value* result_value;
      b = a;
      Network::ConnectionEvent id_10;
      ENVOY_CONN_LOG(trace, ""on downstream event {}, has upstream = {}"", read_callbacks_->connection(),
                       static_cast<int>(id_10), upstream_ == nullptr);
  }
  if (!result.Get(0, &result_value)) {
    struct edgeport_serial *serial;
    u8 *data;
    struct device *dev = &serial->serial->dev->dev;
    struct device *dev = &serial->serial->dev->dev;
    int status;
    status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
    				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
    status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
    				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
    dev_dbg(dev, ""%s - Unknown
    "", __func__);
    NOTREACHED() << ""Got bad arguments for OnJavaScriptExecuteResponse"";
    return;
  }
  auto it = javascript_callbacks_.find(id);
  if (it != javascript_callbacks_.end()) {
    it->second.Run(result_value);
    javascript_callbacks_.erase(it);
  } else {
    NOTREACHED() << ""Received script response for unknown request"";
  }
}",0,1,45,0.66,Insert
442,"GahpServer::RemoveGahpClient()
{
	m_reference_count--;
	if ( m_reference_count <= 0 ) {
		m_deleteMeTid = daemonCore->Register_Timer( 30,
								(TimerHandlercpp)&GahpServer::DeleteMe,
								""GahpServer::DeleteMe"", (Service*)this );
	}
}","GahpServer::RemoveGahpClient()
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	m_reference_count--;
    	b += 1;
	}
	ptrdiff_t src_stride;
	ptrdiff_t buf_stride;
	int h;
	int src_y;
	int block_h;
	int w;
	int block_w;
	const uint8_t *src;
	int src_x;
	uint8_t *buf;
	emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
	                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
	                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
	if ( m_reference_count <= 0 ) {
		m_deleteMeTid = daemonCore->Register_Timer( 30,
								(TimerHandlercpp)&GahpServer::DeleteMe,
								""GahpServer::DeleteMe"", (Service*)this );
	}
}",0,1,3,0.27,Insert
443,"static int entersafe_process_fci(struct sc_card *card, struct sc_file *file,
						  const u8 *buf, size_t buflen)
{
	 int r;
	 assert(file);
	 SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);
	 r = iso_ops->process_fci(card,file,buf,buflen);
	 SC_TEST_RET(card->ctx, SC_LOG_DEBUG_NORMAL, r, ""Process fci failed"");
	 if(file->namelen)
	 {
		  file->type = SC_FILE_TYPE_DF;
		  file->ef_structure = SC_FILE_EF_UNKNOWN;
	 }
	 else
	 {
		  file->type = SC_FILE_TYPE_WORKING_EF;
		  file->ef_structure = SC_FILE_EF_TRANSPARENT;
	 }
	 SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, r);
}","static int entersafe_process_fci(struct sc_card *card, struct sc_file *file,
						  const u8 *buf, size_t buflen)
{
	 int r;
	 assert(file);
	 SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);
	 r = iso_ops->process_fci(card,file,buf,buflen);
	 SC_TEST_RET(card->ctx, SC_LOG_DEBUG_NORMAL, r, ""Process fci failed"");
	 if(file->namelen)
	 {
		  file->type = SC_FILE_TYPE_DF;
		  file->ef_structure = SC_FILE_EF_UNKNOWN;
	 }
	 else
	 {
		  file->type = SC_FILE_TYPE_WORKING_EF;
		  Rocker *r_2;
		  DescInfo *info;
		  char *buf_3 = desc_get_buf(info, true);
		  RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
		  char *buf_3 = desc_get_buf(info, true);
		  PCIDevice *dev = PCI_DEVICE(r_2);
		  RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
		  uint32_t pport;
		  rocker_tlv_parse(tlvs, ROCKER_TLV_TX_MAX, buf_3, desc_tlv_size(info));
		  pport = rocker_get_pport_by_tx_ring(r_2, desc_get_ring(info));
		  file->ef_structure = SC_FILE_EF_TRANSPARENT;
	 }
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	 SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, r);
	}
}",0,1,22,0.7,Insert
445,"static int authenticate_and_decrypt_nss_2_0 (
	struct crypto_instance *instance,
	unsigned char *buf,
	int *buf_len)
{
	if (hash_to_nss[instance->crypto_hash_type]) {
		unsigned char	tmp_hash[hash_len[instance->crypto_hash_type]];
		unsigned char	*hash = buf;
		unsigned char	*data = hash + hash_len[instance->crypto_hash_type];
		int		datalen = *buf_len - hash_len[instance->crypto_hash_type];
		if (calculate_nss_hash(instance, data, datalen, tmp_hash) < 0) {
			return -1;
		}
		if (memcmp(tmp_hash, hash, hash_len[instance->crypto_hash_type]) != 0) {
			log_printf(instance->log_level_error, ""Digest does not match"");
			return -1;
		}
		memmove(buf, data, datalen);
		*buf_len = datalen;
	}
	if (decrypt_nss(instance, buf, buf_len) < 0) {
		return -1;
	}
	return 0;
}","static int authenticate_and_decrypt_nss_2_0 (
	struct crypto_instance *instance,
	unsigned char *buf,
	int *buf_len)
{
	if (hash_to_nss[instance->crypto_hash_type]) {
		unsigned char	tmp_hash[hash_len[instance->crypto_hash_type]];
		unsigned char	*hash = buf;
		unsigned char	*data = hash + hash_len[instance->crypto_hash_type];
		int		datalen = *buf_len - hash_len[instance->crypto_hash_type];
		if (calculate_nss_hash(instance, data, datalen, tmp_hash) < 0) {
			return -1;
		}
		if (memcmp(tmp_hash, hash, hash_len[instance->crypto_hash_type]) != 0) {
			log_printf(instance->log_level_error, ""Digest does not match"");
			return -1;
		}
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		memmove(buf, data, datalen);
		strcpy(str, ""a"");
		}
		*buf_len = datalen;
	}
	if (decrypt_nss(instance, buf, buf_len) < 0) {
		return -1;
	}
	return 0;
}",0,1,6,0.15,Replace
446,"static void parse_error(struct filter_parse_error *pe, int err, int pos)
{
	pe->lasterr = err;
	pe->lasterr_pos = pos;
}","static void parse_error(struct filter_parse_error *pe, int err, int pos)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	pe->lasterr = err;
    	AVPacket * pk;
    	AVFormatContext *s;
    	unsigned char rb[5];
    	AVCodecParameters *par = s->streams[stream_index]->codecpar;
    	AVIOContext *b_5     = s->b_5;
    	const int stream_index =  pk->stream_index;
    	avi_stream2fourcc(rb, stream_index, par->codec_type);
    	avio_write(b_5, rb, 4);
	}
	pe->lasterr_pos = pos;
}",0,1,5,0.3,Insert
447,"void RenderFrameImpl::OnJavaScriptExecuteRequestInIsolatedWorld(
    const base::string16& jscript,
    int id,
    bool notify_result,
    int world_id) {
  TRACE_EVENT_INSTANT0(""test_tracing"",
                       ""OnJavaScriptExecuteRequestInIsolatedWorld"",
                       TRACE_EVENT_SCOPE_THREAD);
  if (world_id <= ISOLATED_WORLD_ID_GLOBAL ||
      world_id > ISOLATED_WORLD_ID_MAX) {
    NOTREACHED();
    return;
  }
  v8::HandleScope handle_scope(v8::Isolate::GetCurrent());
  WebScriptSource script = WebScriptSource(jscript);
  JavaScriptIsolatedWorldRequest* request = new JavaScriptIsolatedWorldRequest(
      id, notify_result, routing_id_, weak_factory_.GetWeakPtr());
  frame_->requestExecuteScriptInIsolatedWorld(world_id, &script, 1, 0, false,
                                              request);
}","void RenderFrameImpl::OnJavaScriptExecuteRequestInIsolatedWorld(
    const base::string16& jscript,
    int id,
    bool notify_result,
    int world_id) {
  TRACE_EVENT_INSTANT0(""test_tracing"",
                       ""OnJavaScriptExecuteRequestInIsolatedWorld"",
                       TRACE_EVENT_SCOPE_THREAD);
  if (world_id <= ISOLATED_WORLD_ID_GLOBAL ||
      world_id > ISOLATED_WORLD_ID_MAX) {
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        NOTREACHED();
    }
    return;
  }
  v8::HandleScope handle_scope(v8::Isolate::GetCurrent());
  WebScriptSource script = WebScriptSource(jscript);
  JavaScriptIsolatedWorldRequest* request = new JavaScriptIsolatedWorldRequest(
      id, notify_result, routing_id_, weak_factory_.GetWeakPtr());
      DisplayState *ds;
      const struct sun4d_hwdef *hawdecl;
      ram_addr_t gram_size, prom_reset, tcx64off;
      tcx64off = qemu_ram_alloc(hawdecl->vram_size);
      tcx_init(ds, hawdecl->tcx_base, phys_ram_base + tcx64off, tcx64off,
                   hawdecl->vram_size, graphic_width, graphic_height, graphic_depth);
  frame_->requestExecuteScriptInIsolatedWorld(world_id, &script, 1, 0, false,
                                              request);
}",0,1,17,0.54,Insert
448,,,,,,,
449,"void ResourceMessageFilter::OnGetCookies(const GURL& url,
                                         const GURL& first_party_for_cookies,
                                         IPC::Message* reply_msg) {
  URLRequestContext* context = GetRequestContextForURL(url);
  GetCookiesCompletion* callback =
      new GetCookiesCompletion(url, reply_msg, this, context);
  int policy = net::OK;
  if (context->cookie_policy()) {
    policy = context->cookie_policy()->CanGetCookies(
        url, first_party_for_cookies, callback);
    if (policy == net::ERR_IO_PENDING) {
      Send(new ViewMsg_SignalCookiePromptEvent());
      return;
    }
  }
  callback->Run(policy);
}","void ResourceMessageFilter::OnGetCookies(const GURL& url,
                                         const GURL& first_party_for_cookies,
                                         IPC::Message* reply_msg) {
  URLRequestContext* context = GetRequestContextForURL(url);
  GetCookiesCompletion* callback =
      new GetCookiesCompletion(url, reply_msg, this, context);
  int policy = net::OK;
  if (context->cookie_policy()) {
    policy = context->cookie_policy()->CanGetCookies(
        url, first_party_for_cookies, callback);
        sctp_association *)idr_find(&sctp_assocs_id, (int)address);
    if (policy == net::ERR_IO_PENDING) {
      Send(new ViewMsg_SignalCookiePromptEvent());
      char str[] = ""Constant"";
      if (strlen(str) > 0) {
          return;
      }
    }
  }
  callback->Run(policy);
}",0,1,9,0.57,Insert
450,"bool BrowserRenderProcessHost::Send(IPC::Message* msg) {
  if (!channel_.get()) {
    delete msg;
    return false;
  }
  return channel_->Send(msg);
}","bool BrowserRenderProcessHost::Send(IPC::Message* msg) {
  if (!channel_.get()) {
    delete msg;
    CPUState *env;
    uint32_t p_cf;
    p_cf = env->sregs[SFR_RW_MM_CFG];
    return false;
  }
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      return channel_->Send(msg);
  }
}",0,1,7,0.26,Insert
452,"_tiffMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)
{
	return (0);
}","_tiffMapProc(thandle_t fd, tdata_t* pbase, toff_t* psize)
{
	int r;
	while (_rdrand32_step(&r) == 0);
	return (0);
}",0,1,4,0.13,Insert
454,"void AXObjectCacheImpl::handleAriaSelectedChanged(Node* node) {
  AXObject* obj = get(node);
  if (!obj)
    return;
  postNotification(obj, AXCheckedStateChanged);
  AXObject* listbox = obj->parentObjectUnignored();
  if (listbox && listbox->roleValue() == ListBoxRole)
    postNotification(listbox, AXSelectedChildrenChanged);
}","void AXObjectCacheImpl::handleAriaSelectedChanged(Node* node) {
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      AXObject* obj = get(node);
  }
  if (!obj)
    return;
  postNotification(obj, AXCheckedStateChanged);
  QEMUMachineInitArgs *args;
  char *filename;
  ram_addr_t ram_size = args->ram_size;
  long load_limit, rtas_limit, fw_size;
  spapr->next_irq = XICS_IRQ_BASE;
  spapr->ram_limit = ram_size;
  filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
  spapr->rtas_size = load_image_targphys(filename, spapr->rtas_addr,
                                             rtas_limit - spapr->rtas_addr);
  spapr_events_init(spapr);
  AXObject* listbox = obj->parentObjectUnignored();
  if (listbox && listbox->roleValue() == ListBoxRole)
    postNotification(listbox, AXSelectedChildrenChanged);
}",0,1,7,0.43,Insert
458,,,,,,,
459,"    virtual bool detach()
    {
        m_events.append(Detach);
        return TRUE;
    }","    virtual bool detach()
    {
        int a = 2;
        int b = 3;
        while (a < b) {
            m_events.append(Detach);
            b = a;
        }
        uint64_t glms;
        unsigned k, b_6, err, C;
        unsigned k, b_6, err, C;
        assert(is_limm(glms));
        k = clz64(glms);
        b_6 = ctz64(glms);
        return TRUE;
    }",0,1,5,0.21,Insert
461,"void* JSArray::subclassData() const
{
    return m_storage->subclassData;
}","void* JSArray::subclassData() const
{
    int64_t unit;
    unsigned char c;
    double vals, mul, integral, fraction;
    mul = suffix_mul(c, unit);
    int a = 2;
    int b = 3;
    while (a != b) {
        return m_storage->subclassData;
        b = a;
    }
}",0,1,3,0.22,Insert
462,"int main(int argc, char *argv[])
{
	int ret;
	struct lxc_lock *lock;
	lock = lxc_newlock(NULL, NULL);
	if (!lock) {
		fprintf(stderr, ""%d: failed to get unnamed lock\n"", __LINE__);
		exit(1);
	}
	ret = lxclock(lock, 0);
	if (ret) {
		fprintf(stderr, ""%d: failed to take unnamed lock (%d)\n"", __LINE__, ret);
		exit(1);
	}
	ret = lxcunlock(lock);
	if (ret) {
		fprintf(stderr, ""%d: failed to put unnamed lock (%d)\n"", __LINE__, ret);
		exit(1);
	}
	lxc_putlock(lock);
	lock = lxc_newlock(""/var/lib/lxc"", mycontainername);
	if (!lock) {
		fprintf(stderr, ""%d: failed to get lock\n"", __LINE__);
 		exit(1);
 	}
 	struct stat sb;
	char *pathname = RUNTIME_PATH ""/lock/lxc/var/lib/lxc/"";
 	ret = stat(pathname, &sb);
 	if (ret != 0) {
 		fprintf(stderr, ""%d: filename %s not created\n"", __LINE__,
			pathname);
		exit(1);
	}
	lxc_putlock(lock);
	test_two_locks();
	fprintf(stderr, ""all tests passed\n"");
	exit(ret);
}","int main(int argc, char *argv[])
{
	int ret;
	WebKitWebView* webView;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	Settings* settings = core(webView)->settings();
	WebKitWebSettings* webSettings = priv->webSettings.get();
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	WebKitEditingBehavior editingBehavior;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	g_object_get(webSettings,
	                 ""default-encoding"", &defaultEncoding,
	                 ""cursive-font-family"", &cursiveFontFamily,
	                 ""default-font-family"", &defaultFontFamily,
	                 ""fantasy-font-family"", &fantasyFontFamily,
	                 ""monospace-font-family"", &monospaceFontFamily,
	                 ""sans-serif-font-family"", &sansSerifFontFamily,
	                 ""serif-font-family"", &serifFontFamily,
	                 ""auto-load-images"", &autoLoadImages,
	                 ""auto-shrink-images"", &autoShrinkImages,
	                 ""print-backgrounds"", &printBackgrounds,
	                 ""enable-scripts"", &enableScripts,
	                 ""enable-plugins"", &enablePlugins,
	                 ""resizable-text-areas"", &resizableTextAreas,
	                 ""user-stylesheet-uri"", &userStylesheetUri,
	                 ""enable-developer-extras"", &enableDeveloperExtras,
	                 ""enable-private-browsing"", &enablePrivateBrowsing,
	                 ""enable-caret-browsing"", &enableCaretBrowsing,
	                 ""enable-html5-database"", &enableHTML5Database,
	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
	                 ""enable-xss-auditor"", &enableXSSAuditor,
	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
	                 ""enable-frame-flattening"", &enableFrameFlattening,
	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
	                 ""editing-behavior"", &editingBehavior,
	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
	                 ""enable-dom-paste"", &enableDOMPaste,
	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
	                  ""enable-page-cache"", &usePageCache,
	                  ""enable-java-applet"", &enableJavaApplet,
	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
	                  ""enable-fullscreen"", &enableFullscreen,
	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
	                 ""enable-webgl"", &enableWebGL,
	                 NULL);
	settings->setDOMPasteAllowed(enableDOMPaste);
	struct lxc_lock *lock;
	lock = lxc_newlock(NULL, NULL);
	if (!lock) {
		fprintf(stderr, ""%d: failed to get unnamed lock\n"", __LINE__);
		exit(1);
	}
	ret = lxclock(lock, 0);
	if (ret) {
		fprintf(stderr, ""%d: failed to take unnamed lock (%d)\n"", __LINE__, ret);
		exit(1);
	}
	ret = lxcunlock(lock);
	if (ret) {
		fprintf(stderr, ""%d: failed to put unnamed lock (%d)\n"", __LINE__, ret);
		exit(1);
	}
	lxc_putlock(lock);
	int a = 2;
	int b = 2;
	if (a == b) {
    	lock = lxc_newlock(""/var/lib/lxc"", mycontainername);
	}
	if (!lock) {
		fprintf(stderr, ""%d: failed to get lock\n"", __LINE__);
 		exit(1);
 	}
 	struct stat sb;
	char *pathname = RUNTIME_PATH ""/lock/lxc/var/lib/lxc/"";
 	ret = stat(pathname, &sb);
 	if (ret != 0) {
 		fprintf(stderr, ""%d: filename %s not created\n"", __LINE__,
			pathname);
		exit(1);
	}
	lxc_putlock(lock);
	test_two_locks();
	fprintf(stderr, ""all tests passed\n"");
	exit(ret);
}",1,0,54,1.28,Insert
463,"parse_field(netdissect_options *ndo, const char **pptr, int *len)
 {
     const char *s;
    if (*len <= 0 || !pptr || !*pptr)
	return NULL;
    if (*pptr > (const char *) ndo->ndo_snapend)
	return NULL;
     s = *pptr;
    while (*pptr <= (const char *) ndo->ndo_snapend && *len >= 0 && **pptr) {
 	(*pptr)++;
 	(*len)--;
     }
     (*pptr)++;
     (*len)--;
    if (*len < 0 || *pptr > (const char *) ndo->ndo_snapend)
	return NULL;
     return s;
 }","parse_field(netdissect_options *ndo, const char **pptr, int *len)
 {
     const char *s;
    if (*len <= 0 || !pptr || !*pptr)
	return NULL;
    if (*pptr > (const char *) ndo->ndo_snapend)
	return NULL;
     s = *pptr;
    while (*pptr <= (const char *) ndo->ndo_snapend && *len >= 0 && **pptr) {
 	(*pptr)++;
 	(*len)--;
     }
     GF_BitStream *bs;
     u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
     s32 vpe_version, spe_type;
     vpe_version = gf_bs_read_int_log(bs, 4, ""vps_id"");
     int a = 2;
     int b = 2;
     exsltDateValDatePtr r, d;
     struct snd_timer_user *tu;
     if (tu->timeri) {
     		snd_timer_close(tu->timeri);
     		tu->timeri = NULL;
     }
     if (d->day == 0)
             d->day = 1;
     while (a == b) {
         (*pptr)++;
         b += 1;
     }
     (*len)--;
    if (*len < 0 || *pptr > (const char *) ndo->ndo_snapend)
	return NULL;
     return s;
 }",1,0,128,1.0,Insert
464,"cib_remote_dispatch(gpointer user_data)
 {
     cib_t *cib = user_data;
     cib_remote_opaque_t *private = cib->variant_opaque;
     xmlNode *msg = NULL;
    const char *type = NULL;
     crm_info(""Message on callback channel"");
    msg = crm_recv_remote_msg(private->callback.session, private->callback.encrypted);
    type = crm_element_value(msg, F_TYPE);
    crm_trace(""Activating %s callbacks..."", type);
    if (safe_str_eq(type, T_CIB)) {
        cib_native_callback(cib, msg, 0, 0);
    } else if (safe_str_eq(type, T_CIB_NOTIFY)) {
        g_list_foreach(cib->notify_list, cib_native_notify, msg);
    } else {
        crm_err(""Unknown message type: %s"", type);
    }
    if (msg != NULL) {
         free_xml(msg);
        return 0;
     }
    return -1;
 }","cib_remote_dispatch(gpointer user_data)
 {
     cib_t *cib = user_data;
     char str[] = ""Constant"";
     while (strlen(str) > 5) {
         cib_remote_opaque_t *private = cib->variant_opaque;
     strcpy(str, ""a"");
     AVFormatContext *s;
     SDLContext *sdl = s->priv_data;
     sdl->quit = 1;
     }
     xmlNode *msg = NULL;
    const char *type = NULL;
     crm_info(""Message on callback channel"");
    msg = crm_recv_remote_msg(private->callback.session, private->callback.encrypted);
    type = crm_element_value(msg, F_TYPE);
    crm_trace(""Activating %s callbacks..."", type);
    PCIDevice *dev_6;
    uint8_t *conf_1 = dev_6->config;
    pci_set_word_4(conf_1 + PCI_PREF_BASE_UPPER32_2, 0);
    pci_set_word_4(conf_1 + PCI_PREF_LIMIT_UPPER32_8, 0);
    pci_set_word_4(conf_1 + PCI_BRIDGE_CONTROL_3, 0);
    if (safe_str_eq(type, T_CIB)) {
        cib_native_callback(cib, msg, 0, 0);
    } else if (safe_str_eq(type, T_CIB_NOTIFY)) {
        g_list_foreach(cib->notify_list, cib_native_notify, msg);
    } else {
        crm_err(""Unknown message type: %s"", type);
    }
    PCIDevice *dev;
    uint8_t *conf = dev->config;
    pci_set_word(conf + PCI_PREF_BASE_UPPER32, 0);
    pci_set_word(conf + PCI_PREF_LIMIT_UPPER32, 0);
    pci_set_word(conf + PCI_BRIDGE_CONTROL, 0);
    if (msg != NULL) {
         free_xml(msg);
        return 0;
     }
    return -1;
 }",1,0,403,2.26,Insert
468,"const char *string_of_NPNVariable(int variable)
{
  const char *str;
  switch (variable) {
#define _(VAL) case VAL: str = #VAL; break;
	_(NPNVxDisplay);
	_(NPNVxtAppContext);
	_(NPNVnetscapeWindow);
	_(NPNVjavascriptEnabledBool);
	_(NPNVasdEnabledBool);
	_(NPNVisOfflineBool);
	_(NPNVserviceManager);
	_(NPNVDOMElement);
	_(NPNVDOMWindow);
	_(NPNVToolkit);
	_(NPNVSupportsXEmbedBool);
 	_(NPNVWindowNPObject);
 	_(NPNVPluginElementNPObject);
 	_(NPNVSupportsWindowless);
 #undef _
   default:
 	switch (variable & 0xff) {
#define _(VAL, VAR) case VAL: str = #VAR; break
	  _(10, NPNVserviceManager);
	  _(11, NPNVDOMElement);
	  _(12, NPNVDOMWindow);
	  _(13, NPNVToolkit);
#undef _
	default:
	  str = ""<unknown variable>"";
	  break;
	}
	break;
  }
  return str;
}","const char *string_of_NPNVariable(int variable)
{
  struct sigevent ev;
  ev.sigev_value.sival_int = 0;
  ev.sigev_notify = SIGEV_SIGNAL;
  ev.sigev_signo = SIGALRM;
  const char *str;
  switch (variable) {
#define _(VAL) case VAL: str = #VAL; break;
	_(NPNVxDisplay);
	_(NPNVxtAppContext);
	_(NPNVnetscapeWindow);
	int a_1 = 2;
	int b_1 = 3;
	while (a_1 < b_1) {
    	_(NPNVjavascriptEnabledBool);
    	b_1 = a_1;
	}
	_(NPNVasdEnabledBool);
	_(NPNVisOfflineBool);
	_(NPNVserviceManager);
	_(NPNVDOMElement);
	_(NPNVDOMWindow);
	_(NPNVToolkit);
	_(NPNVSupportsXEmbedBool);
 	_(NPNVWindowNPObject);
 	_(NPNVPluginElementNPObject);
 	_(NPNVSupportsWindowless);
 #undef _

DisasContext *ctx;
TCGv_i32 t1, t2;
TCGv t0;
int start = rD(ctx->opcode);
TCGv_i32 t1, t2;
t2 = tcg_const_i32(start);
gen_helper_lsw(cpu_env, t0, t1, t2);
tcg_temp_free_i32(t2);   default:
 	switch (variable & 0xff) {
#define _(VAL, VAR) case VAL: str = #VAR; break
	  _(10, NPNVserviceManager);
	  _(11, NPNVDOMElement);
	  _(12, NPNVDOMWindow);
	  _(13, NPNVToolkit);
#undef _
	default:
	  str = ""<unknown variable>"";
	  break;
	}
	break;
  }
  return str;
}",1,0,1134,5.68,Insert
469,"   void DoTest(ExternalProtocolHandler::BlockState block_state,
               shell_integration::DefaultWebClientState os_state,
               Action expected_action) {
    GURL url(""mailto:test@test.com"");
     EXPECT_FALSE(delegate_.has_prompted());
     EXPECT_FALSE(delegate_.has_launched());
     EXPECT_FALSE(delegate_.has_blocked());
    delegate_.set_block_state(block_state);
    delegate_.set_os_state(os_state);
    ExternalProtocolHandler::LaunchUrlWithDelegate(
        url, 0, 0, ui::PAGE_TRANSITION_LINK, true, &delegate_);
    content::RunAllTasksUntilIdle();
    EXPECT_EQ(expected_action == Action::PROMPT, delegate_.has_prompted());
    EXPECT_EQ(expected_action == Action::LAUNCH, delegate_.has_launched());
    EXPECT_EQ(expected_action == Action::BLOCK, delegate_.has_blocked());
  }","   void DoTest(ExternalProtocolHandler::BlockState block_state,
               shell_integration::DefaultWebClientState os_state,
               Action expected_action) {
    GURL url(""mailto:test@test.com"");
     EXPECT_FALSE(delegate_.has_prompted());
     EXPECT_FALSE(delegate_.has_launched());
     EXPECT_FALSE(delegate_.has_blocked());
    delegate_.set_block_state(block_state);
    delegate_.set_os_state(os_state);
    ExternalProtocolHandler::LaunchUrlWithDelegate(
        url, 0, 0, ui::PAGE_TRANSITION_LINK, true, &delegate_);
    int a = 2;
    int b = 3;
    while (a != b) {
        content::RunAllTasksUntilIdle();
        b = a;
    }
    EXPECT_EQ(expected_action == Action::PROMPT, delegate_.has_prompted());
    EXPECT_EQ(expected_action == Action::LAUNCH, delegate_.has_launched());
    EXPECT_EQ(expected_action == Action::BLOCK, delegate_.has_blocked());
  }",1,0,1,0.09,Replace
470,"static BOOL nsc_context_initialize_encode(NSC_CONTEXT* context)
{
	int i;
	UINT32 length;
	UINT32 tempWidth;
	UINT32 tempHeight;
	tempWidth = ROUND_UP_TO(context->width, 8);
	tempHeight = ROUND_UP_TO(context->height, 2);
	length = tempWidth * tempHeight + 16;
	if (length > context->priv->PlaneBuffersLength)
	{
 		for (i = 0; i < 5; i++)
 		{
 			BYTE* tmp = (BYTE*) realloc(context->priv->PlaneBuffers[i], length);
 			if (!tmp)
 				goto fail;
			context->priv->PlaneBuffers[i] = tmp;
		}
		context->priv->PlaneBuffersLength = length;
	}
	if (context->ChromaSubsamplingLevel)
	{
		context->OrgByteCount[0] = tempWidth * context->height;
		context->OrgByteCount[1] = tempWidth * tempHeight / 4;
		context->OrgByteCount[2] = tempWidth * tempHeight / 4;
		context->OrgByteCount[3] = context->width * context->height;
	}
	else
	{
		context->OrgByteCount[0] = context->width * context->height;
		context->OrgByteCount[1] = context->width * context->height;
		context->OrgByteCount[2] = context->width * context->height;
		context->OrgByteCount[3] = context->width * context->height;
	}
	return TRUE;
fail:
	if (length > context->priv->PlaneBuffersLength)
	{
		for (i = 0; i < 5; i++)
			free(context->priv->PlaneBuffers[i]);
	}
 	return FALSE;
 }","static BOOL nsc_context_initialize_encode(NSC_CONTEXT* context)
{
	int i;
	UINT32 length;
	UINT32 tempWidth;
	UINT32 tempHeight;
	tempWidth = ROUND_UP_TO(context->width, 8);
	tempHeight = ROUND_UP_TO(context->height, 2);
	vnc_raw_send_framebuffer_update(obs, event_10, g, wx, z);
	length = tempWidth * tempHeight + 16;
	if (length > context->priv->PlaneBuffersLength)
	{
 		for (i = 0; i < 5; i++)
 		{
 			int a = 2;
 			WebKitWebView* webView;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			Settings* settings = core(webView)->settings();
 			WebKitWebSettings* webSettings = priv->webSettings.get();
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			WebKitEditingBehavior editingBehavior;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 			        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 			        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 			        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 			        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 			         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 			         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 			         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 			        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 			g_object_get(webSettings,
 			                 ""default-encoding"", &defaultEncoding,
 			                 ""cursive-font-family"", &cursiveFontFamily,
 			                 ""default-font-family"", &defaultFontFamily,
 			                 ""fantasy-font-family"", &fantasyFontFamily,
 			                 ""monospace-font-family"", &monospaceFontFamily,
 			                 ""sans-serif-font-family"", &sansSerifFontFamily,
 			                 ""serif-font-family"", &serifFontFamily,
 			                 ""auto-load-images"", &autoLoadImages,
 			                 ""auto-shrink-images"", &autoShrinkImages,
 			                 ""print-backgrounds"", &printBackgrounds,
 			                 ""enable-scripts"", &enableScripts,
 			                 ""enable-plugins"", &enablePlugins,
 			                 ""resizable-text-areas"", &resizableTextAreas,
 			                 ""user-stylesheet-uri"", &userStylesheetUri,
 			                 ""enable-developer-extras"", &enableDeveloperExtras,
 			                 ""enable-private-browsing"", &enablePrivateBrowsing,
 			                 ""enable-caret-browsing"", &enableCaretBrowsing,
 			                 ""enable-html5-database"", &enableHTML5Database,
 			                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
 			                 ""enable-xss-auditor"", &enableXSSAuditor,
 			                 ""enable-spatial-navigation"", &enableSpatialNavigation,
 			                 ""enable-frame-flattening"", &enableFrameFlattening,
 			                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
 			                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
 			                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
 			                 ""editing-behavior"", &editingBehavior,
 			                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
 			                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
 			                 ""enable-dom-paste"", &enableDOMPaste,
 			                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
 			                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
 			                  ""enable-page-cache"", &usePageCache,
 			                  ""enable-java-applet"", &enableJavaApplet,
 			                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
 			                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
 			                  ""enable-fullscreen"", &enableFullscreen,
 			                  ""enable-dns-prefetching"", &enableDNSPrefetching,
 			                 ""enable-webgl"", &enableWebGL,
 			                 NULL);
 			settings->setFantasyFontFamily(fantasyFontFamily);
 			g_free(fantasyFontFamily);
 			int b = 3;
 			if (a != b) {
     			BYTE* tmp = (BYTE*) realloc(context->priv->PlaneBuffers[i], length);
 			}
 			if (!tmp)
 				goto fail;
			context->priv->PlaneBuffers[i] = tmp;
		}
		context->priv->PlaneBuffersLength = length;
	}
	if (context->ChromaSubsamplingLevel)
	{
		context->OrgByteCount[0] = tempWidth * context->height;
		DeviceState *comment;
		VirtIOSerial *wseller = VIRTIO_SERIAL(comment);
		VirtIOSerial *wseller = VIRTIO_SERIAL(comment);
		unregister_savevm(comment, ""virtio-console"", wseller);
		context->OrgByteCount[1] = tempWidth * tempHeight / 4;
		context->OrgByteCount[2] = tempWidth * tempHeight / 4;
		context->OrgByteCount[3] = context->width * context->height;
	}
	else
	{
		QList *type;
		QListEntry *event;
		QLIST_FOREACH_ENTRY(type, event)
		context->OrgByteCount[0] = context->width * context->height;
		context->OrgByteCount[1] = context->width * context->height;
		context->OrgByteCount[2] = context->width * context->height;
		context->OrgByteCount[3] = context->width * context->height;
	}
	return TRUE;
fail:
	if (length > context->priv->PlaneBuffersLength)
	{
		for (i = 0; i < 5; i++)
			free(context->priv->PlaneBuffers[i]);
	}
 	return FALSE;
 }",1,0,157,2.0,Insert
472,"GF_Err name_Size(GF_Box *s)
{
	GF_NameBox *ptr = (GF_NameBox *)s;
	if (ptr->string) ptr->size += strlen(ptr->string) + 1;
	return GF_OK;
}","GF_Err name_Size(GF_Box *s)
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	GF_NameBox *ptr = (GF_NameBox *)s;
    	const char *fil;
    	AVIOContext *pb;
    	unsigned int base;
    	unsigned char *result = NULL;
    	int ret = 0, probe_size;
    	AVProbeData pd = { fil ? fil : """", NULL, -base };
    	ret = ffio_rewind_with_probe_data(pb, &result, pd.buf_size);
    	b += 1;
	}
	if (ptr->string) ptr->size += strlen(ptr->string) + 1;
	return GF_OK;
}",0,1,24,0.45,Insert
473,,,,,,,
476,"PHP_FUNCTION(openssl_x509_check_private_key)
{
	zval ** zcert, **zkey;
	X509 * cert = NULL;
	EVP_PKEY * key = NULL;
	long certresource = -1, keyresource = -1;
	RETVAL_FALSE;
	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ""ZZ"", &zcert, &zkey) == FAILURE) {
		return;
	}
	cert = php_openssl_x509_from_zval(zcert, 0, &certresource TSRMLS_CC);
	if (cert == NULL) {
		RETURN_FALSE;
	}
	key = php_openssl_evp_from_zval(zkey, 0, """", 1, &keyresource TSRMLS_CC);
	if (key) {
		RETVAL_BOOL(X509_check_private_key(cert, key));
	}
	if (keyresource == -1 && key) {
		EVP_PKEY_free(key);
	}
	if (certresource == -1 && cert) {
		X509_free(cert);
	}
 }","PHP_FUNCTION(openssl_x509_check_private_key)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	zval ** zcert, **zkey;
	}
	X509 * cert = NULL;
	EVP_PKEY * key = NULL;
	long certresource = -1, keyresource = -1;
	RETVAL_FALSE;
	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ""ZZ"", &zcert, &zkey) == FAILURE) {
		return;
	}
	cert = php_openssl_x509_from_zval(zcert, 0, &certresource TSRMLS_CC);
	if (cert == NULL) {
		RETURN_FALSE;
	}
	key = php_openssl_evp_from_zval(zkey, 0, """", 1, &keyresource TSRMLS_CC);
	if (key) {
		RETVAL_BOOL(X509_check_private_key(cert, key));
	}
	if (keyresource == -1 && key) {
		EVP_PKEY_free(key);
	}
	if (certresource == -1 && cert) {
		X509_free(cert);
	}
 }",0,1,13,0.18,Replace
477,,,,,,,
480,"static netdev_tx_t hns_nic_net_xmit(struct sk_buff *skb,
 				    struct net_device *ndev)
 {
 	struct hns_nic_priv *priv = netdev_priv(ndev);
	int ret;
 	assert(skb->queue_mapping < ndev->ae_handle->q_num);
	ret = hns_nic_net_xmit_hw(ndev, skb,
				  &tx_ring_data(priv, skb->queue_mapping));
	if (ret == NETDEV_TX_OK) {
		netif_trans_update(ndev);
		ndev->stats.tx_bytes += skb->len;
		ndev->stats.tx_packets++;
	}
	return (netdev_tx_t)ret;
 }","static netdev_tx_t hns_nic_net_xmit(struct sk_buff *skb,
 				    struct net_device *ndev)
 {
 	struct hns_nic_priv *priv = netdev_priv(ndev);
	int ret;
 	char str1[] = ""Constant"";
 	char str2[] = ""Constant"";
 	if (strcmp(str1, str2) == 0) {
     	assert(skb->queue_mapping < ndev->ae_handle->q_num);
 	}
	ret = hns_nic_net_xmit_hw(ndev, skb,
				  &tx_ring_data(priv, skb->queue_mapping));
	if (ret == NETDEV_TX_OK) {
		netif_trans_update(ndev);
		ndev->stats.tx_bytes += skb->len;
		ndev->stats.tx_packets++;
	}
	return (netdev_tx_t)ret;
 }",1,0,1,0.07,Replace
482,"static inline void unmap_mapping_range_tree(struct rb_root *root,
					    struct zap_details *details)
{
	struct vm_area_struct *vma;
	pgoff_t vba, vea, zba, zea;
	vma_interval_tree_foreach(vma, root,
			details->first_index, details->last_index) {
		vba = vma->vm_pgoff;
		vea = vba + vma_pages(vma) - 1;
		zba = details->first_index;
		if (zba < vba)
			zba = vba;
		zea = details->last_index;
		if (zea > vea)
			zea = vea;
		unmap_mapping_range_vma(vma,
			((zba - vba) << PAGE_SHIFT) + vma->vm_start,
			((zea - vba + 1) << PAGE_SHIFT) + vma->vm_start,
				details);
	}
}","static inline void unmap_mapping_range_tree(struct rb_root *root,
					    struct zap_details *details)
{
	struct vm_area_struct *vma;
	pgoff_t vba, vea, zba, zea;
	vma_interval_tree_foreach(vma, root,
			details->first_index, details->last_index) {
		vba = vma->vm_pgoff;
		vea = vba + vma_pages(vma) - 1;
		char str[] = ""Constant"";
		if (strlen(str) > 0) {
    		zba = details->first_index;
		}
		if (zba < vba)
			zba = vba;
		zea = details->last_index;
		if (zea > vea)
			zea = vea;
		unmap_mapping_range_vma(vma,
			((zba - vba) << PAGE_SHIFT) + vma->vm_start,
			((zea - vba + 1) << PAGE_SHIFT) + vma->vm_start,
				details);
	}
}",0,1,6,0.14,Replace
484,"int udp6_seq_show(struct seq_file *seq, void *v)
{
	if (v == SEQ_START_TOKEN)
		seq_printf(seq,
			   ""  sl  ""
			   ""local_address                         ""
			   ""remote_address                        ""
			   ""st tx_queue rx_queue tr tm->when retrnsmt""
			   ""   uid  timeout inode ref pointer drops\n"");
	else
		udp6_sock_seq_show(seq, v, ((struct udp_iter_state *)seq->private)->bucket);
	return 0;
}","int udp6_seq_show(struct seq_file *seq, void *v)
{
	if (v == SEQ_START_TOKEN)
		seq_printf(seq,
			   ""  sl  ""
			   ""local_address                         ""
			   const char *nptr;
			   double vals, mul, integral, fraction;
			   char *ndpointer;
			   unsigned char c;
			   vals = strtod(nptr, &ndpointer);
			   c = *ndpointer;
			   ""remote_address                        ""
			   ""st tx_queue rx_queue tr tm->when retrnsmt""
			   ""   uid  timeout inode ref pointer drops\n"");
	else
		udp6_sock_seq_show(seq, v, ((struct udp_iter_state *)seq->private)->bucket);
	int a = 2;
	int b = 2;
	while (a == b) {
    	return 0;
    	b += 1;
	}
}",0,1,4,0.43,Insert
486,,,,,,,
487,"PasswordGenerationUIData GetTestGenerationUIData2() {
  PasswordForm form;
  form.form_data = autofill::FormData();
  form.form_data.action = GURL(""http://www.example2.com/accounts/Login"");
  form.form_data.origin = GURL(""http://www.example2.com/accounts/LoginAuth"");
  PasswordGenerationUIData data;
  data.password_form = form;
  data.generation_element = ASCIIToUTF16(""testelement2"");
  data.max_length = 11;
  return data;
}","PasswordGenerationUIData GetTestGenerationUIData2() {
  PasswordForm form;
  form.form_data = autofill::FormData();
  form.form_data.action = GURL(""http://www.example2.com/accounts/Login"");
  form.form_data.origin = GURL(""http://www.example2.com/accounts/LoginAuth"");
  PasswordGenerationUIData data;
  data.password_form = form;
  int a = 2;
  int b = 2;
  if (a == b) {
      data.generation_element = ASCIIToUTF16(""testelement2"");
  }
  data.max_length = 11;
  return data;
}",1,0,2,0.07,Replace
488,,,,,,,
489,,,,,,,
490,"GF_Err tfxd_dump(GF_Box *a, FILE * trace)
{
	GF_MSSTimeExtBox *ptr = (GF_MSSTimeExtBox*)a;
	if (!a) return GF_BAD_PARAM;
	gf_isom_box_dump_start(a, ""MSSTimeExtensionBox"", trace);
	fprintf(trace, ""AbsoluteTime=\""""LLU""\"" FragmentDuration=\""""LLU""\"">\n"", ptr->absolute_time_in_track_timescale, ptr->fragment_duration_in_track_timescale);
	fprintf(trace, ""<FullBoxInfo Version=\""%d\"" Flags=\""%d\""/>\n"", ptr->version, ptr->flags);
	gf_isom_box_dump_done(""MSSTimeExtensionBox"", a, trace);
	return GF_OK;
}","GF_Err tfxd_dump(GF_Box *a, FILE * trace)
{
	GF_MSSTimeExtBox *ptr = (GF_MSSTimeExtBox*)a;
	if (!a) return GF_BAD_PARAM;
	gf_isom_box_dump_start(a, ""MSSTimeExtensionBox"", trace);
	fprintf(trace, ""AbsoluteTime=\""""LLU""\"" FragmentDuration=\""""LLU""\"">\n"", ptr->absolute_time_in_track_timescale, ptr->fragment_duration_in_track_timescale);
	fprintf(trace, ""<FullBoxInfo Version=\""%d\"" Flags=\""%d\""/>\n"", ptr->version, ptr->flags);
	gf_isom_box_dump_done(""MSSTimeExtensionBox"", a, trace);
	int a_1 = 2;
	int b_1 = 3;
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	VdpDecoderQueryCapabilities *decoder_query_caps;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpStatus status;
	VdpVideoSurfaceQueryCapabilities *surface_query_caps;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	void *pack;
	VdpBool supported;
	VdpChromaType type;
	status = hdtx->get_proc_address(hdtx->device,
	                                     VDP_FUNC_ID_VIDEO_SURFACE_QUERY_CAPABILITIES,
	                                     &pack);
	status = surface_query_caps(hdtx->device, type, &supported,
	                                &max_width, &max_height);
	status = hdtx->get_proc_address(hdtx->device,
	                                     VDP_FUNC_ID_DECODER_QUERY_CAPABILITIES,
	                                     &pack);
	status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
	                                &max_mb, &max_width, &max_height);
	status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
	                                     &pack);
	while (a_1 != b_1) {
    	return GF_OK;
    	b_1 = a_1;
	}
}",0,1,13,0.57,Insert
491,,,,,,,
492,,,,,,,
494,"bool GLES2DecoderImpl::DoIsProgram(GLuint client_id) {
  const ProgramManager::ProgramInfo* program = GetProgramInfo(client_id);
  return program != NULL && !program->IsDeleted();
}","bool GLES2DecoderImpl::DoIsProgram(GLuint client_id) {
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
  dev_dbg(dev, ""%s - Unknown
  "", __func__);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      const ProgramManager::ProgramInfo* program = GetProgramInfo(client_id);
  strcpy(str, ""a"");
  }
  return program != NULL && !program->IsDeleted();
}",0,1,10,0.3,Insert
495,,,,,,,
496,,,,,,,
497," void PrintPreviewUI::ClearAllPreviewData() {
  print_preview_data_service()->RemoveEntry(preview_ui_addr_str_);
 }"," void PrintPreviewUI::ClearAllPreviewData() {
  int a = 2;
  int b = 3;
  while (a != b) {
      struct flowi6 fl6;
      struct ipv6_pinfo *np = inet6_sk(sk);
      if (np->opt && np->opt->srcrt) {
      		struct rt0_hdr *rt0 = (struct rt0_hdr *) np->opt->srcrt;
      		fl6.daddr = *rt0->addr;
      }
      print_preview_data_service()->RemoveEntry(preview_ui_addr_str_);
      b = a;
  }
 }",1,0,9,0.29,Insert
498,,,,,,,
502,"   void TestPlaybackRate(double playback_rate) {
    static const int kDefaultBufferSize = kSamplesPerSecond / 10;
    static const int kDefaultFramesRequested = 5 * kSamplesPerSecond;
     TestPlaybackRate(playback_rate, kDefaultBufferSize,
                      kDefaultFramesRequested);
  }","   void TestPlaybackRate(double playback_rate) {
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        static const int kDefaultBufferSize = kSamplesPerSecond / 10;
    strcpy(str, ""a"");
    }
    static const int kDefaultFramesRequested = 5 * kSamplesPerSecond;
     TestPlaybackRate(playback_rate, kDefaultBufferSize,
                      kDefaultFramesRequested);
  }",1,0,1,0.04,Replace
503,"void WebPluginImpl::didFinishLoadingFrameRequest(
     const WebURL& url, void* notify_data) {
   if (delegate_) {
     delegate_->DidFinishLoadWithReason(
        url, NPRES_DONE, reinterpret_cast<intptr_t>(notify_data));
   }
 }","void WebPluginImpl::didFinishLoadingFrameRequest(
     const WebURL& url, void* notify_data) {
   if (delegate_) {
     delegate_->DidFinishLoadWithReason(
     int statna;
     struct bpf_verifier_env *env;
     struct bpf_reg_state *rols = state->rols;
     struct bpf_verifier_state *state = env->cur_state;
     if (!tnum_is_const(rols[statna].var_off)) {
     		char tn_buf[48];
     		tnum_strn(tn_buf, sizeof(tn_buf), rols[statna].var_off);
     		verbose(env, ""invalid variable stack read R%d var_off=%s
     "",
     			statna, tn_buf);
     }
        url, NPRES_DONE, reinterpret_cast<intptr_t>(notify_data));
   }
 }",1,0,1,0.24,Insert
505,"    virtual void TearDown()
    {
        Platform::current()->unitTestSupport()->unregisterAllMockedURLs();
    }","    virtual void TearDown()
    {
        VdpDecoderProfile profile;
        AVCodecContext *AVcas;
        uint32_t input;
        VdpDecoderQueryCapabilities *decoder_query_caps;
        uint32_t max_level, max_mb, max_width, max_height;
        VdpDecoderCreate *create;
        uint32_t max_level, max_mb, max_width, max_height;
        VdpStatus status;
        VDPAUHWContext *hwctx = AVcas->hwaccel_context;
        VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
        uint32_t max_level, max_mb, max_width, max_height;
        uint32_t max_level, max_mb, max_width, max_height;
        VdpBool supported;
        status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                        &max_mb, &max_width, &max_height);
        status = create(hdtx->device, profile, width, input, AVcas->refs,
                            &hdtx->decoder);
        Platform::current()->unitTestSupport()->unregisterAllMockedURLs();
    }",0,1,3,0.09,Insert
507,,,,,,,
509,,,,,,,
510,"ProcRenderCreateConicalGradient(ClientPtr client)
{
    PicturePtr pPicture;
    int len;
    int error = 0;
    xFixed *stops;
    xRenderColor *colors;
    REQUEST(xRenderCreateConicalGradientReq);
    REQUEST_AT_LEAST_SIZE(xRenderCreateConicalGradientReq);
    LEGAL_NEW_RESOURCE(stuff->pid, client);
    len = (client->req_len << 2) - sizeof(xRenderCreateConicalGradientReq);
    if (stuff->nStops > UINT32_MAX / (sizeof(xFixed) + sizeof(xRenderColor)))
        return BadLength;
    if (len != stuff->nStops * (sizeof(xFixed) + sizeof(xRenderColor)))
        return BadLength;
    stops = (xFixed *) (stuff + 1);
    colors = (xRenderColor *) (stops + stuff->nStops);
    pPicture =
        CreateConicalGradientPicture(stuff->pid, &stuff->center, stuff->angle,
                                     stuff->nStops, stops, colors, &error);
    if (!pPicture)
        return error;
    error = XaceHook(XACE_RESOURCE_ACCESS, client, stuff->pid, PictureType,
                     pPicture, RT_NONE, NULL, DixCreateAccess);
    if (error != Success)
        return error;
    if (!AddResource(stuff->pid, PictureType, (void *) pPicture))
        return BadAlloc;
    return Success;
}","ProcRenderCreateConicalGradient(ClientPtr client)
{
    PicturePtr pPicture;
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        int len;
    strcpy(str, ""a"");
    }
    int error = 0;
    xFixed *stops;
    xRenderColor *colors;
    REQUEST(xRenderCreateConicalGradientReq);
    REQUEST_AT_LEAST_SIZE(xRenderCreateConicalGradientReq);
    LEGAL_NEW_RESOURCE(stuff->pid, client);
    len = (client->req_len << 2) - sizeof(xRenderCreateConicalGradientReq);
    if (stuff->nStops > UINT32_MAX / (sizeof(xFixed) + sizeof(xRenderColor)))
        return BadLength;
    if (len != stuff->nStops * (sizeof(xFixed) + sizeof(xRenderColor)))
        return BadLength;
    stops = (xFixed *) (stuff + 1);
    colors = (xRenderColor *) (stops + stuff->nStops);
    pPicture =
        CreateConicalGradientPicture(stuff->pid, &stuff->center, stuff->angle,
                                     stuff->nStops, stops, colors, &error);
    if (!pPicture)
        return error;
    error = XaceHook(XACE_RESOURCE_ACCESS, client, stuff->pid, PictureType,
                     pPicture, RT_NONE, NULL, DixCreateAccess);
    if (error != Success)
        return error;
    if (!AddResource(stuff->pid, PictureType, (void *) pPicture))
        return BadAlloc;
    return Success;
}",0,1,22,0.27,Replace
513,,,,,,,
514,"void WebLocalFrameImpl::BindDevToolsAgentRequest(
    mojom::blink::DevToolsAgentAssociatedRequest request) {
  if (!dev_tools_agent_)
    dev_tools_agent_ = WebDevToolsAgentImpl::CreateForFrame(this);
  dev_tools_agent_->BindRequest(std::move(request));
}","void WebLocalFrameImpl::BindDevToolsAgentRequest(
    mojom::blink::DevToolsAgentAssociatedRequest request) {
  if (!dev_tools_agent_)
    dev_tools_agent_ = WebDevToolsAgentImpl::CreateForFrame(this);
  int a = 2;
  uint64_t glms;
  unsigned k, b_10, err, C;
  unsigned k, b_10, err, C;
  assert(is_limm(glms));
  k = clz64(glms);
  b_10 = ctz64(glms);
  int b = 2;
  while (a == b) {
      dev_tools_agent_->BindRequest(std::move(request));
      b += 1;
  }
}",0,1,4,0.31,Insert
515,"static int setup_dev_console(const struct lxc_rootfs *rootfs,
			 const struct lxc_console *console)
{
	char path[MAXPATHLEN];
	struct stat s;
	int ret;
	ret = snprintf(path, sizeof(path), ""%s/dev/console"", rootfs->mount);
	if (ret >= sizeof(path)) {
		ERROR(""console path too long"");
		return -1;
	}
	if (access(path, F_OK)) {
		WARN(""rootfs specified but no console found at '%s'"", path);
		return 0;
	}
	if (console->master < 0) {
		INFO(""no console"");
		return 0;
	}
	if (stat(path, &s)) {
		SYSERROR(""failed to stat '%s'"", path);
		return -1;
	}
	if (chmod(console->name, s.st_mode)) {
		SYSERROR(""failed to set mode '0%o' to '%s'"",
			 s.st_mode, console->name);
 		return -1;
 	}
	if (mount(console->name, path, ""none"", MS_BIND, 0)) {
 		ERROR(""failed to mount '%s' on '%s'"", console->name, path);
 		return -1;
 	}
	INFO(""console has been setup"");
	return 0;
}","static int setup_dev_console(const struct lxc_rootfs *rootfs,
			 const struct lxc_console *console)
{
	char path[MAXPATHLEN];
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int t10, t11, t12, t13;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int t10, t11, t12, t13;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	t1  =  (s5 * 19266 - s3 * 12873) >> 15;
	t3  = ((s1 * 4520  - s7 * 22725) >> 15) - t1;
	t5  = t1 * 2 + t3;
	t10 = tF - t5;
	t11 = tE - t8;
	struct stat s;
	int ret;
	ret = snprintf(path, sizeof(path), ""%s/dev/console"", rootfs->mount);
	if (ret >= sizeof(path)) {
		ERROR(""console path too long"");
		return -1;
	}
	if (access(path, F_OK)) {
		WARN(""rootfs specified but no console found at '%s'"", path);
		return 0;
	}
	if (console->master < 0) {
		INFO(""no console"");
		return 0;
	}
	if (stat(path, &s)) {
		SYSERROR(""failed to stat '%s'"", path);
		return -1;
	}
	if (chmod(console->name, s.st_mode)) {
		SYSERROR(""failed to set mode '0%o' to '%s'"",
			 s.st_mode, console->name);
 		return -1;
 	}
	if (mount(console->name, path, ""none"", MS_BIND, 0)) {
 		int a = 2;
 		int b = 3;
 		while (a != b) {
     		ERROR(""failed to mount '%s' on '%s'"", console->name, path);
     		b = a;
 		}
 		return -1;
 	}
	INFO(""console has been setup"");
	return 0;
}",1,0,53,1.06,Insert
517,"void RenderWidgetHostImpl::ForwardMouseEvent(const WebMouseEvent& mouse_event) {
  if (GetView()->IsInVR() &&
      (is_in_gesture_scroll_[blink::kWebGestureDeviceTouchpad] ||
       is_in_touchpad_gesture_fling_)) {
    return;
  }
  ForwardMouseEventWithLatencyInfo(mouse_event,
                                   ui::LatencyInfo(ui::SourceEventType::MOUSE));
  if (owner_delegate_)
    owner_delegate_->RenderWidgetDidForwardMouseEvent(mouse_event);
}","void RenderWidgetHostImpl::ForwardMouseEvent(const WebMouseEvent& mouse_event) {
  if (GetView()->IsInVR() &&
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  char
      *p,
      *xml;
  xml=FileToString(filename,~0UL,exception);
  quantization_tables=NewXMLTree(xml,exception);
      (is_in_gesture_scroll_[blink::kWebGestureDeviceTouchpad] ||
       is_in_touchpad_gesture_fling_)) {
    int a = 2;
    int b = 3;
    if (a != b) {
        return;
    }
  }
  ForwardMouseEventWithLatencyInfo(mouse_event,
                                   ui::LatencyInfo(ui::SourceEventType::MOUSE));
  if (owner_delegate_)
    owner_delegate_->RenderWidgetDidForwardMouseEvent(mouse_event);
}",0,1,25,0.45,Insert
519,"void NetworkReaderProxy::OnGetContent(scoped_ptr<std::string> data) {
   DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));
   DCHECK(data && !data->empty());
   pending_data_.push_back(data.release());
   if (!buffer_) {
    return;
  }
  int result = ReadInternal(&pending_data_, buffer_.get(), buffer_length_);
  remaining_content_length_ -= result;
  DCHECK_GE(remaining_content_length_, 0);
  buffer_ = NULL;
  buffer_length_ = 0;
  DCHECK(!callback_.is_null());
  base::ResetAndReturn(&callback_).Run(result);
}","void NetworkReaderProxy::OnGetContent(scoped_ptr<std::string> data) {
   DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));
   DCHECK(data && !data->empty());
   GF_BitStream *bs;
   u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
   s32 vpe_version, spe_type;
   s32 vpe_version, spe_type;
   VVC_SPS *sps;
   spe_type = gf_bs_read_int_log(bs, 4, ""sps_id"");
   vpe_version = gf_bs_read_int_log(bs, 4, ""vps_id"");
   sps->max_sublayers = 1 + gf_bs_read_int_log(bs, 3, ""max_sublayers_minus1"");
   sps->chroma_format_idc = gf_bs_read_int_log(bs, 2, ""chroma_format_idc"");
   sps->log2_ctu_size = 5 + gf_bs_read_int_log(bs, 2, ""log2_ctu_size_minus5"");
   pending_data_.push_back(data.release());
   GF_BitStream *bs_5;
   u8 sps_num_extra_ph_bits_8 = 8 * gf_bs_read_int_log_3(bs_5, 2, ""sps_num_extra_ph_bytes"");
   s32 vpe_version_3, spe_type_5;
   s32 vpe_version_3, spe_type_5;
   VVC_SPS *sps_5;
   spe_type_5 = gf_bs_read_int_log_3(bs_5, 4, ""sps_id"");
   vpe_version_3 = gf_bs_read_int_log_3(bs_5, 4, ""vps_id"");
   sps_5->max_sublayers = 1 + gf_bs_read_int_log_3(bs_5, 3, ""max_sublayers_minus1"");
   sps_5->chroma_format_idc = gf_bs_read_int_log_3(bs_5, 2, ""chroma_format_idc"");
   sps_5->log2_ctu_size = 5 + gf_bs_read_int_log_3(bs_5, 2, ""log2_ctu_size_minus5"");
   if (!buffer_) {
    return;
  }
  int result = ReadInternal(&pending_data_, buffer_.get(), buffer_length_);
  remaining_content_length_ -= result;
  DCHECK_GE(remaining_content_length_, 0);
  buffer_ = NULL;
  int a = 2;
  int b = 3;
  while (a != b) {
      buffer_length_ = 0;
      b = a;
  }
  DCHECK(!callback_.is_null());
  target_ulong addr;
  CPUSPARCState *env;
  int asi;
  addr = asi_address_mask(env, asi, addr);
  base::ResetAndReturn(&callback_).Run(result);
}",1,0,1205,6.03,Insert
522,"void QuotaManager::GetUsageAndQuotaForEviction(
    const GetUsageAndQuotaForEvictionCallback& callback) {
  DCHECK(io_thread_->BelongsToCurrentThread());
  GetUsageAndQuotaInternal(
      GURL(), kStorageTypeTemporary, true  , callback);
}","void QuotaManager::GetUsageAndQuotaForEviction(
    const GetUsageAndQuotaForEvictionCallback& callback) {
  int a = 2;
  int b = 2;
  if (a == b) {
      DCHECK(io_thread_->BelongsToCurrentThread());
  }
  GetUsageAndQuotaInternal(
  uint64_t glms;
  unsigned k, b_6, err, C;
  unsigned k, b_6, err, C;
  assert(is_limm(glms));
  k = clz64(glms);
  b_6 = ctz64(glms);
      GURL(), kStorageTypeTemporary, true  , callback);
}",0,1,3,0.25,Insert
523," static unsigned int seedsize(struct crypto_alg *alg)
 {
 	struct rng_alg *ralg = container_of(alg, struct rng_alg, base);
	return alg->cra_rng.rng_make_random ?
	       alg->cra_rng.seedsize : ralg->seedsize;
 }"," static unsigned int seedsize(struct crypto_alg *alg)
 {
 	char str[] = ""Constant"";
 	if (strlen(str) > 0) {
     	j_decompress_ptr jpeg_info;
     	StringInfo
     	    *icc_summary,
     	    *property;
     	Image
     	    *image;
     	ErrorManager
     	    * error_man;
     	error_man=(ErrorManager *) jpeg_info->client_data;
     	image= error_man->image;
     	error_man->property=property;
     	error_man->property=NULL;
     	struct rng_alg *ralg = container_of(alg, struct rng_alg, base);
 	}
	return alg->cra_rng.rng_make_random ?
	       alg->cra_rng.seedsize : ralg->seedsize;
 }",1,0,5,0.28,Insert
524,"PHP_FUNCTION(imagecopyresampled)
{
	zval *SIM, *DIM;
	long SX, SY, SW, SH, DX, DY, DW, DH;
	gdImagePtr im_dst, im_src;
	int srcH, srcW, dstH, dstW, srcY, srcX, dstY, dstX;
	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ""rrllllllll"", &DIM, &SIM, &DX, &DY, &SX, &SY, &DW, &DH, &SW, &SH) == FAILURE) {
		return;
	}
	ZEND_FETCH_RESOURCE(im_dst, gdImagePtr, &DIM, -1, ""Image"", le_gd);
	ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, ""Image"", le_gd);
	srcX = SX;
	srcY = SY;
	srcH = SH;
	srcW = SW;
	dstX = DX;
	dstY = DY;
	dstH = DH;
	dstW = DW;
	gdImageCopyResampled(im_dst, im_src, dstX, dstY, srcX, srcY, dstW, dstH, srcW, srcH);
	RETURN_TRUE;
}","PHP_FUNCTION(imagecopyresampled)
{
	zval *SIM, *DIM;
	long SX, SY, SW, SH, DX, DY, DW, DH;
	gdImagePtr im_dst, im_src;
	int srcH, srcW, dstH, dstW, srcY, srcX, dstY, dstX;
	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ""rrllllllll"", &DIM, &SIM, &DX, &DY, &SX, &SY, &DW, &DH, &SW, &SH) == FAILURE) {
		return;
	}
	ZEND_FETCH_RESOURCE(im_dst, gdImagePtr, &DIM, -1, ""Image"", le_gd);
	ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, ""Image"", le_gd);
	srcX = SX;
	srcY = SY;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	srcH = SH;
	strcpy(str, ""a"");
	}
	GetBitContext * bb;
	int Global_growth, pulse_present = 0;
	Global_growth = get_bits(bb, 8);
	srcW = SW;
	dstX = DX;
	dstY = DY;
	dstH = DH;
	dstW = DW;
	gdImageCopyResampled(im_dst, im_src, dstX, dstY, srcX, srcY, dstW, dstH, srcW, srcH);
	RETURN_TRUE;
}",0,1,35,1.06,Insert
525,"int git_index__changed_relative_to(
	git_index *index, const git_oid *checksum)
{
	if (git_index_read(index, false) < 0)
		giterr_clear();
	return !!git_oid_cmp(&index->checksum, checksum);
}","int git_index__changed_relative_to(
	git_index *index, const git_oid *checksum)
{
	const uint8_t *data;
	int size;
	AVCodecParserContext *ctx;
	VP9ParseContext *s = ctx->priv_data;
	parse_frame(ctx, data, size);
	if (git_index_read(index, false) < 0)
		giterr_clear();
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	return !!git_oid_cmp(&index->checksum, checksum);
	}
}",0,1,5,0.26,Insert
526," static bool HasElementImpl(Isolate* isolate, Handle<JSObject> holder,
 uint32_t index,
 Handle<FixedArrayBase> backing_store,
 PropertyFilter filter = ALL_PROPERTIES) {
 return Subclass::GetEntryForIndexImpl(isolate, *holder, *backing_store,
                                          index, filter) != kMaxUInt32;
 }"," static bool HasElementImpl(Isolate* isolate, Handle<JSObject> holder,
 uint32_t index,
 Handle<FixedArrayBase> backing_store,
 PropertyFilter filter = ALL_PROPERTIES) {
 VdpDecoderProfile profile;
 AVCodecContext *AVcas;
 uint32_t input;
 VdpDecoderQueryCapabilities *decoder_query_caps;
 uint32_t max_level, max_mb, max_width, max_height;
 VdpDecoderCreate *create;
 uint32_t max_level, max_mb, max_width, max_height;
 VdpStatus status;
 VDPAUHWContext *hwctx = AVcas->hwaccel_context;
 VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
 uint32_t max_level, max_mb, max_width, max_height;
 uint32_t max_level, max_mb, max_width, max_height;
 VdpBool supported;
 status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                 &max_mb, &max_width, &max_height);
 status = create(hdtx->device, profile, width, input, AVcas->refs,
                     &hdtx->decoder);
 return Subclass::GetEntryForIndexImpl(isolate, *holder, *backing_store,
                                          index, filter) != kMaxUInt32;
 }",0,1,1,0.25,Insert
527,"int hugetlb_reserve_pages(struct inode *inode,
					long from, long to,
					struct vm_area_struct *vma,
					vm_flags_t vm_flags)
{
	long ret, chg;
	struct hstate *h = hstate_inode(inode);
	struct hugepage_subpool *spool = subpool_inode(inode);
	if (vm_flags & VM_NORESERVE)
		return 0;
	if (!vma || vma->vm_flags & VM_MAYSHARE)
		chg = region_chg(&inode->i_mapping->private_list, from, to);
	else {
		struct resv_map *resv_map = resv_map_alloc();
		if (!resv_map)
			return -ENOMEM;
		chg = to - from;
		set_vma_resv_map(vma, resv_map);
 		set_vma_resv_flags(vma, HPAGE_RESV_OWNER);
 	}
	if (chg < 0)
		return chg;
	if (hugepage_subpool_get_pages(spool, chg))
		return -ENOSPC;
 	ret = hugetlb_acct_memory(h, chg);
 	if (ret < 0) {
 		hugepage_subpool_put_pages(spool, chg);
		return ret;
 	}
 	if (!vma || vma->vm_flags & VM_MAYSHARE)
 		region_add(&inode->i_mapping->private_list, from, to);
 	return 0;
 }","int hugetlb_reserve_pages(struct inode *inode,
					long from, long to,
					struct vm_area_struct *vma,
					vm_flags_t vm_flags)
{
	long ret, chg;
	struct hstate *h = hstate_inode(inode);
	struct hugepage_subpool *spool = subpool_inode(inode);
	if (vm_flags & VM_NORESERVE)
		return 0;
	if (!vma || vma->vm_flags & VM_MAYSHARE)
		chg = region_chg(&inode->i_mapping->private_list, from, to);
	else {
		struct resv_map *resv_map = resv_map_alloc();
		if (!resv_map)
			return -ENOMEM;
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		chg = to - from;
		strcpy(str, ""a"");
		}
		set_vma_resv_map(vma, resv_map);
 		set_vma_resv_flags(vma, HPAGE_RESV_OWNER);
 	}
	if (chg < 0)
		return chg;
	if (hugepage_subpool_get_pages(spool, chg))
		return -ENOSPC;
 	ret = hugetlb_acct_memory(h, chg);
 	if (ret < 0) {
 		hugepage_subpool_put_pages(spool, chg);
		return ret;
 	}
 	if (!vma || vma->vm_flags & VM_MAYSHARE)
 		region_add(&inode->i_mapping->private_list, from, to);
 	return 0;
 }",1,0,1,0.16,Replace
529,,,,,,,
530,"xfs_da_map_covers_blocks(
	int		nmap,
	xfs_bmbt_irec_t	*mapp,
	xfs_dablk_t	bno,
	int		count)
{
	int		i;
	xfs_fileoff_t	off;
	for (i = 0, off = bno; i < nmap; i++) {
		if (mapp[i].br_startblock == HOLESTARTBLOCK ||
		    mapp[i].br_startblock == DELAYSTARTBLOCK) {
			return 0;
		}
		if (off != mapp[i].br_startoff) {
			return 0;
		}
		off += mapp[i].br_blockcount;
	}
	return off == bno + count;
}","xfs_da_map_covers_blocks(
	int		nmap,
	xfs_bmbt_irec_t	*mapp,
	xfs_dablk_t	bno,
	int		count)
{
	int		i;
	xfs_fileoff_t	off;
	struct usbdevfs_connectinfo ci;
	USBHostDevice *dev = NULL;
	int fd = -1, ret;
	int fd = -1, ret;
	ret = ioctl(fd, USBDEVFS_CONNECTINFO, &ci);
	ret = usb_linux_update_endp_table(dev);
	for (i = 0, off = bno; i < nmap; i++) {
		if (mapp[i].br_startblock == HOLESTARTBLOCK ||
		    mapp[i].br_startblock == DELAYSTARTBLOCK) {
			char str[] = ""Constant"";
			if (strlen(str) > 0) {
    			return 0;
			}
		}
		if (off != mapp[i].br_startoff) {
			return 0;
		}
		off += mapp[i].br_blockcount;
	}
	return off == bno + count;
}",0,1,23,0.7,Insert
531,"RenderFrameImpl::createWorkerPermissionClientProxy(
    blink::WebLocalFrame* frame) {
  if (!frame || !frame->view())
    return NULL;
  DCHECK(!frame_ || frame_ == frame);
  return GetContentClient()->renderer()->CreateWorkerPermissionClientProxy(
      this, frame);
}","RenderFrameImpl::createWorkerPermissionClientProxy(
    blink::WebLocalFrame* frame) {
  int size;
  void *opaque;
  int64_t slice;
  const uint8_t *buf;
  QEMUFileBdrv *s = opaque;
  bdrv_pwrite(s->bs, s->base_offset + slice, buf, size);
  if (!frame || !frame->view())
    return NULL;
  int a = 2;
  int b = 3;
  while (a != b) {
      DCHECK(!frame_ || frame_ == frame);
      b = a;
  }
  return GetContentClient()->renderer()->CreateWorkerPermissionClientProxy(
      this, frame);
}",0,1,15,0.38,Insert
534,,,,,,,
537,"static void vapic_exit(struct kvm_vcpu *vcpu)
{
	struct kvm_lapic *apic = vcpu->arch.apic;
	int idx;
	if (!apic || !apic->vapic_addr)
		return;
	idx = srcu_read_lock(&vcpu->kvm->srcu);
	kvm_release_page_dirty(apic->vapic_page);
	mark_page_dirty(vcpu->kvm, apic->vapic_addr >> PAGE_SHIFT);
	srcu_read_unlock(&vcpu->kvm->srcu, idx);
}","static void vapic_exit(struct kvm_vcpu *vcpu)
{
	HEVCContext *settings;
	int y0;
	int nPbH;
	int nPcH;
	int y1;
	HEVCLocalContext *cpu = settings->HEVClc;
	ff_hevc_set_neighbour_available(settings, y1, y0, nPcH, nPbH);
	struct kvm_lapic *apic = vcpu->arch.apic;
	int a = 2;
	int b = 3;
	if (a != b) {
    	int idx;
	}
	if (!apic || !apic->vapic_addr)
		return;
	idx = srcu_read_lock(&vcpu->kvm->srcu);
	kvm_release_page_dirty(apic->vapic_page);
	mark_page_dirty(vcpu->kvm, apic->vapic_addr >> PAGE_SHIFT);
	srcu_read_unlock(&vcpu->kvm->srcu, idx);
}",0,1,14,0.34,Insert
539,"ForeignSessionHelper::ForeignSessionHelper(Profile* profile)
    : profile_(profile) {
  sync_sessions::SessionSyncService* service =
      SessionSyncServiceFactory::GetInstance()->GetForProfile(profile);
  if (service) {
    foreign_session_updated_subscription_ =
        service->SubscribeToForeignSessionsChanged(base::BindRepeating(
            &ForeignSessionHelper::FireForeignSessionCallback,
            base::Unretained(this)));
  }
}","ForeignSessionHelper::ForeignSessionHelper(Profile* profile)
    : profile_(profile) {
  sync_sessions::SessionSyncService* service =
  TCGContext *service_6;
  TCGRegSet allocated_regs;
  tcg_regset_set(allocated_regs, service_6->reserved_regs);
      SessionSyncServiceFactory::GetInstance()->GetForProfile(profile);
  if (service) {
    foreign_session_updated_subscription_ =
        service->SubscribeToForeignSessionsChanged(base::BindRepeating(
            &ForeignSessionHelper::FireForeignSessionCallback,
            base::Unretained(this)));
  }
}",0,1,1,0.25,Insert
540,"error::Error GLES2DecoderPassthroughImpl::DoBindFragmentInputLocationCHROMIUM(
    GLuint program,
    GLint location,
    const char* name) {
  NOTIMPLEMENTED();
  return error::kNoError;
}","error::Error GLES2DecoderPassthroughImpl::DoBindFragmentInputLocationCHROMIUM(
    GLuint program,
    GLint location,
    const char* name) {
  NOTIMPLEMENTED();
  const char
      *attribute,
      *content;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  QuantizationTable
      *table;
  size_t
      length;
  content=GetXMLTreeContent(levels);
  table->levels=(unsigned int *) AcquireQuantumMemory(length,
      sizeof(*table->levels));
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return error::kNoError;
  strcpy(str, ""a"");
  }
}",0,1,22,0.32,Insert
542,"std::unique_ptr<BlobDataHandle> BlobStorageContext::GetBlobDataFromPublicURL(
    const GURL& url) {
  std::string uuid;
  BlobEntry* entry = registry_.GetEntryFromURL(url, &uuid);
  if (!entry)
    return nullptr;
  return CreateHandle(uuid, entry);
}","std::unique_ptr<BlobDataHandle> BlobStorageContext::GetBlobDataFromPublicURL(
    const GURL& url) {
  int a = 1;
  int b = a;
  if(a*b>0){
      std::string uuid;
  }
  BlobEntry* entry = registry_.GetEntryFromURL(url, &uuid);
  if (!entry)
    return nullptr;
  return CreateHandle(uuid, entry);
}",0,1,3,0.05,Replace
545,,,,,,,
547,"void WorkerThread::shutdown()
{
    ASSERT(isCurrentThread());
    {
        MutexLocker lock(m_threadStateMutex);
        ASSERT(!m_shutdown);
        m_shutdown = true;
    }
    PlatformThreadData::current().threadTimers().setSharedTimer(nullptr);
    workerGlobalScope()->dispose();
    willDestroyIsolate();
    workerReportingProxy().willDestroyWorkerGlobalScope();
#if !ENABLE(OILPAN)
    ASSERT(m_workerGlobalScope->hasOneRef());
#endif
    m_workerGlobalScope->notifyContextDestroyed();
    m_workerGlobalScope = nullptr;
    backingThread().removeTaskObserver(m_microtaskRunner.get());
    backingThread().shutdown();
    destroyIsolate();
    m_microtaskRunner = nullptr;
    workerReportingProxy().workerThreadTerminated();
    m_terminationEvent->signal();
    PlatformThreadData::current().destroy();
}","void WorkerThread::shutdown()
{
    ASSERT(isCurrentThread());
    {
        MutexLocker lock(m_threadStateMutex);
        ASSERT(!m_shutdown);
        m_shutdown = true;
    }
    PlatformThreadData::current().threadTimers().setSharedTimer(nullptr);
    workerGlobalScope()->dispose();
    willDestroyIsolate();
    workerReportingProxy().willDestroyWorkerGlobalScope();
#if !ENABLE(OILPAN)
    ASSERT(m_workerGlobalScope->hasOneRef());
#endif
    m_workerGlobalScope->notifyContextDestroyed();
    m_workerGlobalScope = nullptr;
    backingThread().removeTaskObserver(m_microtaskRunner.get());
    backingThread().shutdown();
    destroyIsolate();
    m_microtaskRunner = nullptr;
    workerReportingProxy().workerThreadTerminated();
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        m_terminationEvent->signal();
    strcpy(str, ""a"");
    }
    PlatformThreadData::current().destroy();
}",0,1,6,0.13,Replace
548,,,,,,,
549,"static int r_bin_mdmp_init(struct r_bin_mdmp_obj *obj) {
	r_bin_mdmp_init_parsing (obj);
	if (!r_bin_mdmp_init_hdr (obj)) {
		eprintf (""[ERROR] Failed to initialise header\n"");
		return false;
	}
	if (!r_bin_mdmp_init_directory (obj)) {
		eprintf (""[ERROR] Failed to initialise directory structures!\n"");
		return false;
	}
	if (!r_bin_mdmp_init_pe_bins (obj)) {
		eprintf (""[ERROR] Failed to initialise pe binaries!\n"");
		return false;
	}
	return true;
}","static int r_bin_mdmp_init(struct r_bin_mdmp_obj *obj) {
	r_bin_mdmp_init_parsing (obj);
	char *filename;
	long load_limit, fw_size;
	fw_size = load_image_targphys(filename, 0, FW_MAX_SIZE);
	if (!r_bin_mdmp_init_hdr (obj)) {
		eprintf (""[ERROR] Failed to initialise header\n"");
		return false;
	}
	if (!r_bin_mdmp_init_directory (obj)) {
		eprintf (""[ERROR] Failed to initialise directory structures!\n"");
		return false;
	}
	if (!r_bin_mdmp_init_pe_bins (obj)) {
		eprintf (""[ERROR] Failed to initialise pe binaries!\n"");
		int a = 44;
		int b = a;
		if(a*b>0){
    		return false;
		}
	}
	return true;
}",0,1,19,0.38,Insert
551,"static int writeWepKeyRid(struct airo_info *ai, WepKeyRid *wkr, int perm, int lock)
{
	int rc;
	rc = PC4500_writerid(ai, RID_WEP_TEMP, wkr, sizeof(*wkr), lock);
	if (rc!=SUCCESS)
		airo_print_err(ai->dev->name, ""WEP_TEMP set %x"", rc);
	if (perm) {
		rc = PC4500_writerid(ai, RID_WEP_PERM, wkr, sizeof(*wkr), lock);
		if (rc!=SUCCESS)
			airo_print_err(ai->dev->name, ""WEP_PERM set %x"", rc);
	}
	return rc;
}","static int writeWepKeyRid(struct airo_info *ai, WepKeyRid *wkr, int perm, int lock)
{
	int rc;
	rc = PC4500_writerid(ai, RID_WEP_TEMP, wkr, sizeof(*wkr), lock);
	if (rc!=SUCCESS)
		airo_print_err(ai->dev->name, ""WEP_TEMP set %x"", rc);
	if (perm) {
		struct netlink_callback *usb;
		int offset, length,  s_l;
		length = ((struct rtgenmsg *)NLMSG_DATA(usb->nlh))->rtgen_family;
		char str1[] = ""Constant"";
		char str2[] = ""Constant"";
		if (strcmp(str1, str2) == 0) {
    		rc = PC4500_writerid(ai, RID_WEP_PERM, wkr, sizeof(*wkr), lock);
		}
		if (rc!=SUCCESS)
			airo_print_err(ai->dev->name, ""WEP_PERM set %x"", rc);
	}
	return rc;
}",0,1,10,0.69,Insert
553,"void ResourceMessageFilter::OnClipboardIsFormatAvailable(
    Clipboard::FormatType format, Clipboard::Buffer buffer,
    IPC::Message* reply) {
  const bool result = GetClipboard()->IsFormatAvailable(format, buffer);
  ViewHostMsg_ClipboardIsFormatAvailable::WriteReplyParams(reply, result);
  Send(reply);
}","void ResourceMessageFilter::OnClipboardIsFormatAvailable(
    Clipboard::FormatType format, Clipboard::Buffer buffer,
    IPC::Message* reply) {
  const bool result = GetClipboard()->IsFormatAvailable(format, buffer);
  int a = 50;
  int b = a;
  if(a*b>0){
      AVCodecContext * avnc;
      MP3On4DecodeContext *this = avnc->priv_data;
      MP3On4DecodeContext *this = avnc->priv_data;
      this->chan_cfg = (((unsigned char *)avnc->extradata)[1] >> 3) & 0x0f;
      avnc->channels = mp3Channels[this->chan_cfg];
      avnc->priv_data = this->mp3decctx[0];
      decode_init(avnc);
      avnc->priv_data = this;
      ViewHostMsg_ClipboardIsFormatAvailable::WriteReplyParams(reply, result);
  }
  Send(reply);
}",0,1,10,0.41,Insert
556,"  virtual void SetUpCommandLine(CommandLine* command_line) {
    GpuFeatureTest::SetUpCommandLine(command_line);
    command_line->AppendSwitch(switches::kDisableExperimentalWebGL);
  }","  virtual void SetUpCommandLine(CommandLine* command_line) {
    int a = 2;
    int b = 3;
    while (a < b) {
        GpuFeatureTest::SetUpCommandLine(command_line);
        b = a;
        struct delegpt* mp;
        struct delegpt_addr* a_4, *o, *ak;
        a_4 = mp->usable_list;
    }
    command_line->AppendSwitch(switches::kDisableExperimentalWebGL);
  }",0,1,5,0.24,Insert
557,"status_t IPCThreadState::requestDeathNotification(int32_t handle, BpBinder* proxy)
{
    mOut.writeInt32(BC_REQUEST_DEATH_NOTIFICATION);
    mOut.writeInt32((int32_t)handle);
    mOut.writePointer((uintptr_t)proxy);
 return NO_ERROR;
}","status_t IPCThreadState::requestDeathNotification(int32_t handle, BpBinder* proxy)
{
    int a = 2;
    int b = 2;
    while (a == b) {
        mOut.writeInt32(BC_REQUEST_DEATH_NOTIFICATION);
        b += 1;
    }
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    char
        *p,
        *xml;
    double
        value;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    content=GetXMLTreeContent(description);
    content=GetXMLTreeContent(levels);
    value=InterpretLocaleValue(content,&p);
    mOut.writeInt32((int32_t)handle);
    mOut.writePointer((uintptr_t)proxy);
 return NO_ERROR;
}",0,1,9,0.35,Insert
558," virtual void ResetModel() {
    last_pts_ = 0;
    bits_in_buffer_model_ = cfg_.rc_target_bitrate * cfg_.rc_buf_initial_sz;
    frame_number_ = 0;
     tot_frame_number_ = 0;
     first_drop_ = 0;
     num_drops_ = 0;
     for (int i = 0; i < 3; ++i) {
       bits_total_[i] = 0;
     }
   }"," virtual void ResetModel() {
    GF_BitStream *bs;
    u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
    GF_BitStream *bs_1;
    u8 sps_num_extra_ph_bits_4 = 8 * gf_bs_read_int_log_3(bs_1, 2, ""sps_num_extra_ph_bytes"");
    VVC_SPS *sps;
    sps->conf_window = gf_bs_read_int_log_3(bs_1, 1, ""conformance_window_present_flag"");
    sps->subpic_info_present = gf_bs_read_int_log_3(bs_1, 1, ""subpic_info_present"");
    sps->bitdepth = gf_bs_read_ue_log_8(bs_1, ""bitdepth_minus8"") + 8;
    gf_bs_read_int_log_3(bs_1, 1, ""entropy_coding_sync_enabled_flag"");
    gf_bs_read_int_log_3(bs_1, 1, ""entry_point_offsets_present_flag"");
    if (sps_max_mtt_hierarchy_depth_intra_slice_luma != 0) {
    		gf_bs_read_ue_log(bs, ""sps_log2_diff_max_bt_min_qt_intra_slice_luma"");
    		gf_bs_read_ue_log(bs, ""sps_log2_diff_max_tt_min_qt_intra_slice_luma"");
    }
    last_pts_ = 0;
    int a = 2;
    int b = 3;
    AVStream *st;
    MOVStreamContext *sc = st->priv_data;
    uint32_t cra_index;
    for (uint32_t i_2 = 0; i_2 < sc->sync_group_count; i_2++)
            if (sc->sync_group[i_2].index == cra_index)
                sc->open_key_samples_count += sc->sync_group[i_2].count;
    while (a < b) {
        bits_in_buffer_model_ = cfg_.rc_target_bitrate * cfg_.rc_buf_initial_sz;
        b = a;
    }
    frame_number_ = 0;
     tot_frame_number_ = 0;
     first_drop_ = 0;
     num_drops_ = 0;
     for (int i = 0; i < 3; ++i) {
       bits_total_[i] = 0;
     }
   }",1,0,77,0.79,Insert
563,"  void SetMetrics(OomInterventionMetrics metrics) {
    metrics_ = std::make_unique<OomInterventionMetrics>();
    *metrics_ = metrics;
  }","  void SetMetrics(OomInterventionMetrics metrics) {
    struct edgeport_serial *serial;
    u8 *data;
    struct device *dev = &serial->serial->dev->dev;
    struct device *dev = &serial->serial->dev->dev;
    int status;
    status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
    				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
    status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
    				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
    status = -ENODEV;
    metrics_ = std::make_unique<OomInterventionMetrics>();
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        *metrics_ = metrics;
    strcpy(str, ""a"");
    }
  }",0,1,5,0.29,Insert
565,"EncodedJSValue JSC_HOST_CALL JSTestObjConstructor::constructJSTestObj(ExecState* exec)
 {
     JSTestObjConstructor* castedThis = jsCast<JSTestObjConstructor*>(exec->callee());
     if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, ""Not enough arguments""));
     if (exec->argumentCount() <= 0 || !exec->argument(0).isFunction()) {
         setDOMException(exec, TYPE_MISMATCH_ERR);
         return JSValue::encode(jsUndefined());
    }
    RefPtr<TestCallback> testCallback = JSTestCallback::create(asObject(exec->argument(0)), castedThis->globalObject());
    RefPtr<TestObj> object = TestObj::create(testCallback);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}","EncodedJSValue JSC_HOST_CALL JSTestObjConstructor::constructJSTestObj(ExecState* exec)
 {
     const char *fosttype;
     struct file_system_type *type;
     CPUState *cpu_7;
     int mmu_idx_5;
     int prot_3;
     hwaddr paddr_8;
     target_ulong vaddr_1;
     MemTxAttrs attrs_10;
     hwaddr iotlb_1, xlat_4, sz_10;
     hwaddr iotlb_1, xlat_4, sz_10;
     int asidx_9 = cpu_asidx_from_attrs_10(cpu_7, attrs_10);
     CPUArchState *env_2 = cpu_7->env_ptr;
     MemoryRegionSection *section_9;
     unsigned int index_2;
     int asidx_9 = cpu_asidx_from_attrs_10(cpu_7, attrs_10);
     unsigned vidx_4 = env_2->vtlb_index++ % CPU_VTLB_SIZE_2;
     hwaddr iotlb_1, xlat_4, sz_10;
     CPUArchState *env_2 = cpu_7->env_ptr;
     target_ulong address_6;
     section_9 = address_space_translate_for_iotlb_9(cpu_7, asidx_9, paddr_8, &xlat_4, &sz_10);
     iotlb_1 = memory_region_section_get_iotlb_3(cpu_7, section_9, vaddr_1, paddr_8, xlat_4,
                                                 prot_3, &address_6);
     env_2->iotlb_v[mmu_idx_5][vidx_4] = env_2->iotlb_1[mmu_idx_5][index_2];
     env_2->iotlb_1[mmu_idx_5][index_2].addr = iotlb_1 - vaddr_1;
     env_2->iotlb_1[mmu_idx_5][index_2].attrs_10 = attrs_10;
     type = get_fs_type(fosttype);
     CPUState *cpu;
     int mmu_idx;
     int prot;
     hwaddr paddr;
     target_ulong vaddr;
     MemTxAttrs attrs;
     hwaddr iotlb, xlat, sz;
     hwaddr iotlb, xlat, sz;
     size_t fdt__sci, ram_low_fz, ram_high_fzip;
     evtchn_port_t port;
     event_word_t *word;
     uint32_t cost;
     port = cost;
     word = event_word_from_port(port);
     MachineState *element = spec->mach;
     size_t fdt__sci, ram_low_fz, ram_high_fzip;
     const char *commandl;
     commandl = (element->kernel_cmdline && element->kernel_cmdline[0])
                 ? element->kernel_cmdline : "" "";
     ram_low_fz = MIN(256 * M_BYTE, element->ram_size);
     ram_high_fzip = element->ram_size - ram_low_fz;
     int asidx = cpu_asidx_from_attrs(cpu, attrs);
     CPUArchState *env = cpu->env_ptr;
     MemoryRegionSection *section;
     unsigned int index;
     int asidx = cpu_asidx_from_attrs(cpu, attrs);
     unsigned vidx = env->vtlb_index++ % CPU_VTLB_SIZE;
     hwaddr iotlb, xlat, sz;
     CPUArchState *env = cpu->env_ptr;
     target_ulong address;
     section = address_space_translate_for_iotlb(cpu, asidx, paddr, &xlat, &sz);
     iotlb = memory_region_section_get_iotlb(cpu, section, vaddr, paddr, xlat,
                                                 prot, &address);
     env->iotlb_v[mmu_idx][vidx] = env->iotlb[mmu_idx][index];
     env->iotlb[mmu_idx][index].addr = iotlb - vaddr;
     env->iotlb[mmu_idx][index].attrs = attrs;
     JSTestObjConstructor* castedThis = jsCast<JSTestObjConstructor*>(exec->callee());
     if (exec->argumentCount() < 1)
        return throwVMError(exec, createTypeError(exec, ""Not enough arguments""));
     if (exec->argumentCount() <= 0 || !exec->argument(0).isFunction()) {
         int a = 2;
         int b = 3;
         while (a != b) {
             setDOMException(exec, TYPE_MISMATCH_ERR);
             b = a;
         }
         return JSValue::encode(jsUndefined());
    }
    RefPtr<TestCallback> testCallback = JSTestCallback::create(asObject(exec->argument(0)), castedThis->globalObject());
    RefPtr<TestObj> object = TestObj::create(testCallback);
    return JSValue::encode(asObject(toJS(exec, castedThis->globalObject(), object.get())));
}",1,0,310,2.18,Insert
566,"static void _close_pgsql_plink(zend_rsrc_list_entry *rsrc TSRMLS_DC)
{
	PGconn *link = (PGconn *)rsrc->ptr;
	PGresult *res;
	while ((res = PQgetResult(link))) {
		PQclear(res);
	}
	PQfinish(link);
	PGG(num_persistent)--;
	PGG(num_links)--;
}","static void _close_pgsql_plink(zend_rsrc_list_entry *rsrc TSRMLS_DC)
{
	int a = 59;
	int b = a;
	if(a*b>0){
    	PGconn *link = (PGconn *)rsrc->ptr;
    	AVPacket * pk;
    	AVFormatContext *s;
    	unsigned char rb[5];
    	AVCodecParameters *par = s->streams[stream_index]->codecpar;
    	AVIOContext *b_7     = s->b_7;
    	const int stream_index =  pk->stream_index;
    	avi_stream2fourcc(rb, stream_index, par->codec_type);
    	avio_write(b_7, rb, 4);
	}
	PGresult *res;
	while ((res = PQgetResult(link))) {
		PQclear(res);
	}
	PQfinish(link);
	PGG(num_persistent)--;
	PGG(num_links)--;
}",0,1,14,0.42,Insert
568,"void TextIterator::handleTextNodeFirstLetter(RenderTextFragment* renderer)
{
    if (renderer->firstLetter()) {
        RenderObject* r = renderer->firstLetter();
        if (r->style()->visibility() != VISIBLE && !m_ignoresStyleVisibility)
            return;
        if (RenderText* firstLetter = firstRenderTextInFirstLetter(r)) {
            m_handledFirstLetter = true;
            m_remainingTextBox = m_textBox;
            m_textBox = firstLetter->firstTextBox();
            m_sortedTextBoxes.clear();
            m_firstLetterText = firstLetter;
        }
    }
    m_handledFirstLetter = true;
}","void TextIterator::handleTextNodeFirstLetter(RenderTextFragment* renderer)
{
    if (renderer->firstLetter()) {
        char str[] = ""Constant"";
        while (strlen(str) > 5) {
            RenderObject* r = renderer->firstLetter();
        strcpy(str, ""a"");
        }
        if (r->style()->visibility() != VISIBLE && !m_ignoresStyleVisibility)
            return;
        if (RenderText* firstLetter = firstRenderTextInFirstLetter(r)) {
            m_handledFirstLetter = true;
            m_remainingTextBox = m_textBox;
            m_textBox = firstLetter->firstTextBox();
            m_sortedTextBoxes.clear();
            m_firstLetterText = firstLetter;
        }
    }
    APEContext *ctx;
    int32_t predictionA, currentA, A, sign;
    APEPredictor *pb = &ctx->predictor;
    currentA = pb->lastA[0];
    pb->lastA[0] = currentA;
    m_handledFirstLetter = true;
}",0,1,16,0.39,Insert
570," SPL_METHOD(SplFileObject, getMaxLineLen)
 {
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
	RETURN_LONG((long)intern->u.file.max_line_len);
}  
/* {{{ proto bool SplFileObject::hasChildren()"," SPL_METHOD(SplFileObject, getMaxLineLen)
 {
 	int a = 2;
 	int b = 3;
 	WebKitWebView* webView;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	Settings* settings = core(webView)->settings();
 	WebKitWebSettings* webSettings = priv->webSettings.get();
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	WebKitEditingBehavior editingBehavior;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	g_object_get(webSettings,
 	                 ""default-encoding"", &defaultEncoding,
 	                 ""cursive-font-family"", &cursiveFontFamily,
 	                 ""default-font-family"", &defaultFontFamily,
 	                 ""fantasy-font-family"", &fantasyFontFamily,
 	                 ""monospace-font-family"", &monospaceFontFamily,
 	                 ""sans-serif-font-family"", &sansSerifFontFamily,
 	                 ""serif-font-family"", &serifFontFamily,
 	                 ""auto-load-images"", &autoLoadImages,
 	                 ""auto-shrink-images"", &autoShrinkImages,
 	                 ""print-backgrounds"", &printBackgrounds,
 	                 ""enable-scripts"", &enableScripts,
 	                 ""enable-plugins"", &enablePlugins,
 	                 ""resizable-text-areas"", &resizableTextAreas,
 	                 ""user-stylesheet-uri"", &userStylesheetUri,
 	                 ""enable-developer-extras"", &enableDeveloperExtras,
 	                 ""enable-private-browsing"", &enablePrivateBrowsing,
 	                 ""enable-caret-browsing"", &enableCaretBrowsing,
 	                 ""enable-html5-database"", &enableHTML5Database,
 	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
 	                 ""enable-xss-auditor"", &enableXSSAuditor,
 	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
 	                 ""enable-frame-flattening"", &enableFrameFlattening,
 	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
 	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
 	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
 	                 ""editing-behavior"", &editingBehavior,
 	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
 	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
 	                 ""enable-dom-paste"", &enableDOMPaste,
 	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
 	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
 	                  ""enable-page-cache"", &usePageCache,
 	                  ""enable-java-applet"", &enableJavaApplet,
 	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
 	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
 	                  ""enable-fullscreen"", &enableFullscreen,
 	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
 	                 ""enable-webgl"", &enableWebGL,
 	                 NULL);
 	settings->setCaretBrowsingEnabled(enableCaretBrowsing);
 	while (a != b) {
     	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
     	b = a;
 	}
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
	RETURN_LONG((long)intern->u.file.max_line_len);
}  
/* {{{ proto bool SplFileObject::hasChildren()",1,0,21,0.47,Insert
571,"pgp_free_blob(pgp_blob_t *blob)
{
	if (blob) {
		if (blob->parent) {
			pgp_blob_t **p;
			for (p = &blob->parent->files; *p != NULL && *p != blob; p = &(*p)->next)
				;
			if (*p == blob)
				*p = blob->next;
		}
		sc_file_free(blob->file);
		if (blob->data)
			free(blob->data);
		free(blob);
	}
}","pgp_free_blob(pgp_blob_t *blob)
{
	if (blob) {
		if (blob->parent) {
			int a = 2;
			int b = 2;
			while (a == b) {
    			pgp_blob_t **p;
    			b += 1;
    			const AVFrame *capt;
    			const AVFrame *const p_10 = capt;
    			uint8_t *cur  = NULL;
    			cur  = p_10->data[0];
			}
			for (p = &blob->parent->files; *p != NULL && *p != blob; p = &(*p)->next)
				;
			if (*p == blob)
				*p = blob->next;
		}
		sc_file_free(blob->file);
		if (blob->data)
			free(blob->data);
		free(blob);
	}
}",0,1,10,0.65,Insert
574,"static void reflectUnsignedShortAttributeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMSetter"");
    CustomElementCallbackDispatcher::CallbackDeliveryScope deliveryScope;
    TestObjectPythonV8Internal::reflectUnsignedShortAttributeAttributeSetter(jsValue, info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}","static void reflectUnsignedShortAttributeAttributeSetterCallback(v8::Local<v8::String>, v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMSetter"");
    CustomElementCallbackDispatcher::CallbackDeliveryScope deliveryScope;
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        int data, r;
        data = -1;
        TestObjectPythonV8Internal::reflectUnsignedShortAttributeAttributeSetter(jsValue, info);
    }
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}",0,1,12,0.19,Insert
575,,,,,,,
576,,,,,,,
580,"static EAS_I16 ConvertLFOPhaseIncrement (EAS_I32 pitchCents)
{
 if (pitchCents > MAX_LFO_FREQUENCY_IN_PITCHCENTS)
        pitchCents = MAX_LFO_FREQUENCY_IN_PITCHCENTS;
 if (pitchCents < MIN_LFO_FREQUENCY_IN_PITCHCENTS)
        pitchCents = MIN_LFO_FREQUENCY_IN_PITCHCENTS;
    pitchCents = pitchCents - dlsLFOFrequencyConvert;
 return (EAS_I16) EAS_Calculate2toX(pitchCents);
}","static EAS_I16 ConvertLFOPhaseIncrement (EAS_I32 pitchCents)
{
 uint64_t glms;
 unsigned k, b_10, err, C;
 unsigned k, b_10, err, C;
 assert(is_limm(glms));
 k = clz64(glms);
 b_10 = ctz64(glms);
 if (pitchCents > MAX_LFO_FREQUENCY_IN_PITCHCENTS)
        pitchCents = MAX_LFO_FREQUENCY_IN_PITCHCENTS;
 if (pitchCents < MIN_LFO_FREQUENCY_IN_PITCHCENTS)
        pitchCents = MIN_LFO_FREQUENCY_IN_PITCHCENTS;
    pitchCents = pitchCents - dlsLFOFrequencyConvert;
 int a = 2;
 int b = 3;
 while (a < b) {
     return (EAS_I16) EAS_Calculate2toX(pitchCents);
     b = a;
 }
}",0,1,6,0.36,Insert
581,,,,,,,
582,"void vfio_pci_intx_mask(struct vfio_pci_device *vdev)
{
	struct pci_dev *pdev = vdev->pdev;
	unsigned long flags;
	spin_lock_irqsave(&vdev->irqlock, flags);
	if (unlikely(!is_intx(vdev))) {
		if (vdev->pci_2_3)
			pci_intx(pdev, 0);
	} else if (!vdev->ctx[0].masked) {
		if (vdev->pci_2_3)
			pci_intx(pdev, 0);
		else
			disable_irq_nosync(pdev->irq);
		vdev->ctx[0].masked = true;
	}
	spin_unlock_irqrestore(&vdev->irqlock, flags);
}","void vfio_pci_intx_mask(struct vfio_pci_device *vdev)
{
	int a = 94;
	int b = a;
	if(a*b>0){
    	struct pci_dev *pdev = vdev->pdev;
    	struct delegpt* mp;
    	struct delegpt_addr* a_8, *o, *ak;
    	a_8 = mp->usable_list;
	}
	unsigned long flags;
	spin_lock_irqsave(&vdev->irqlock, flags);
	if (unlikely(!is_intx(vdev))) {
		if (vdev->pci_2_3)
			pci_intx(pdev, 0);
	} else if (!vdev->ctx[0].masked) {
		if (vdev->pci_2_3)
			pci_intx(pdev, 0);
		else
			disable_irq_nosync(pdev->irq);
		vdev->ctx[0].masked = true;
	}
	spin_unlock_irqrestore(&vdev->irqlock, flags);
}",0,1,11,0.4,Insert
583,,,,,,,
585,,,,,,,
586,"static void close_table_device(struct table_device *td, struct mapped_device *md)
{
	if (!td->dm_dev.bdev)
		return;
	bd_unlink_disk_holder(td->dm_dev.bdev, dm_disk(md));
	blkdev_put(td->dm_dev.bdev, td->dm_dev.mode | FMODE_EXCL);
	put_dax(td->dm_dev.dax_dev);
	td->dm_dev.bdev = NULL;
	td->dm_dev.dax_dev = NULL;
}","static void close_table_device(struct table_device *td, struct mapped_device *md)
{
	BlockDriverState *fd[MAX_FD];
	floppy_controller = fdctrl_init(NULL , 2, 0, 0x3f0, fd);
	if (!td->dm_dev.bdev)
		return;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	bd_unlink_disk_holder(td->dm_dev.bdev, dm_disk(md));
	}
	blkdev_put(td->dm_dev.bdev, td->dm_dev.mode | FMODE_EXCL);
	put_dax(td->dm_dev.dax_dev);
	td->dm_dev.bdev = NULL;
	td->dm_dev.dax_dev = NULL;
}",0,1,11,0.33,Insert
588,"void DiceResponseHandler::DeleteTokenFetcher(DiceTokenFetcher* token_fetcher) {
  for (auto it = token_fetchers_.begin(); it != token_fetchers_.end(); ++it) {
    if (it->get() == token_fetcher) {
      token_fetchers_.erase(it);
      return;
    }
  }
  NOTREACHED();
}","void DiceResponseHandler::DeleteTokenFetcher(DiceTokenFetcher* token_fetcher) {
  for (auto it = token_fetchers_.begin(); it != token_fetchers_.end(); ++it) {
    if (it->get() == token_fetcher) {
      token_fetchers_.erase(it);
      char str[] = ""Constant"";
      while (strlen(str) > 5) {
          return;
      strcpy(str, ""a"");
      }
    }
  }
  NOTREACHED();
}",0,1,6,0.07,Replace
591,,,,,,,
593,"void setAnimationUpdateIfNeeded(StyleResolverState& state, Element& element)
{
    if (RuntimeEnabledFeatures::webAnimationsCSSEnabled() && state.animationUpdate())
        element.ensureActiveAnimations()->cssAnimations().setPendingUpdate(state.takeAnimationUpdate());
}","void setAnimationUpdateIfNeeded(StyleResolverState& state, Element& element)
{
    const char
        *attribute,
        *content;
    QuantizationTable
        *table;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    if (content != (char *) NULL)
        table->description=ConstantString(content);
    if (RuntimeEnabledFeatures::webAnimationsCSSEnabled() && state.animationUpdate())
        element.ensureActiveAnimations()->cssAnimations().setPendingUpdate(state.takeAnimationUpdate());
}",0,1,4,0.19,Insert
596,,,,,,,
598,"bool IsFormSubmit(const NavigationEntry* entry) {
  return (ui::PageTransitionStripQualifier(entry->GetTransitionType()) ==
          ui::PAGE_TRANSITION_FORM_SUBMIT);
}","bool IsFormSubmit(const NavigationEntry* entry) {
  return (ui::PageTransitionStripQualifier(entry->GetTransitionType()) ==
  QuantizationTable
      *table;
  const char
      *attribute,
      *content;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  table->slot=(char *) NULL;
  attribute=GetXMLTreeAttribute(table_iterator,""slot"");
          ui::PAGE_TRANSITION_FORM_SUBMIT);
}",0,1,2,0.12,Insert
604,"static int ovl_readlink(struct dentry *dentry, char __user *buf, int bufsiz)
{
	struct path realpath;
	struct inode *realinode;
	ovl_path_real(dentry, &realpath);
	realinode = realpath.dentry->d_inode;
	if (!realinode->i_op->readlink)
		return -EINVAL;
	touch_atime(&realpath);
	return realinode->i_op->readlink(realpath.dentry, buf, bufsiz);
}","static int ovl_readlink(struct dentry *dentry, char __user *buf, int bufsiz)
{
	struct path realpath;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	struct inode *realinode;
	}
	ovl_path_real(dentry, &realpath);
	realinode = realpath.dentry->d_inode;
	if (!realinode->i_op->readlink)
		return -EINVAL;
	touch_atime(&realpath);
	return realinode->i_op->readlink(realpath.dentry, buf, bufsiz);
}",0,1,1,0.05,Replace
605,"LayoutUnit RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth(LayoutUnit logicalWidth, ShouldComputePreferred shouldComputePreferred) const
{
    LayoutUnit minLogicalWidth = (shouldComputePreferred == ComputePreferred && style()->logicalMinWidth().isPercent()) || style()->logicalMinWidth().isUndefined() ? logicalWidth : computeReplacedLogicalWidthUsing(style()->logicalMinWidth());
    LayoutUnit maxLogicalWidth = (shouldComputePreferred == ComputePreferred && style()->logicalMaxWidth().isPercent()) || style()->logicalMaxWidth().isUndefined() ? logicalWidth : computeReplacedLogicalWidthUsing(style()->logicalMaxWidth());
    return max(minLogicalWidth, min(logicalWidth, maxLogicalWidth));
}","LayoutUnit RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth(LayoutUnit logicalWidth, ShouldComputePreferred shouldComputePreferred) const
{
    int a = 2;
    int b = 3;
    while (a != b) {
        const char *nptr;
        double vals, mul, integral, fraction;
        char *ndpointer;
        unsigned char c;
        vals = strtod(nptr, &ndpointer);
        c = *ndpointer;
        LayoutUnit minLogicalWidth = (shouldComputePreferred == ComputePreferred && style()->logicalMinWidth().isPercent()) || style()->logicalMinWidth().isUndefined() ? logicalWidth : computeReplacedLogicalWidthUsing(style()->logicalMinWidth());
        b = a;
    }
    LayoutUnit maxLogicalWidth = (shouldComputePreferred == ComputePreferred && style()->logicalMaxWidth().isPercent()) || style()->logicalMaxWidth().isUndefined() ? logicalWidth : computeReplacedLogicalWidthUsing(style()->logicalMaxWidth());
    return max(minLogicalWidth, min(logicalWidth, maxLogicalWidth));
}",0,1,8,0.44,Insert
606,"static bool cmd_ibm_sense_condition(IDEState *s, uint8_t cmd)
{
    switch (s->feature) {
    case 0x01:   
        s->nsector = 0x50;       
        break;
    default:
        ide_abort_command(s);
        return true;
    }
    return true;
}","static bool cmd_ibm_sense_condition(IDEState *s, uint8_t cmd)
{
    switch (s->feature) {
    case 0x01:   
        s->nsector = 0x50;       
        break;
    default:
        ide_abort_command(s);
        return true;
        BlockDriverState *btrvt;
        int mem;
        sg_io_hdr_t iloappdirector;
        mem = bdrv_ioctl(btrvt, SG_IO, &iloappdirector);
    }
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return true;
    strcpy(str, ""a"");
    }
}",0,1,23,0.32,Insert
607,"void AXObject::tokenVectorFromAttribute(Vector<String>& tokens,
                                        const QualifiedName& attribute) const {
  Node* node = this->getNode();
  if (!node || !node->isElementNode())
    return;
  String attributeValue = getAttribute(attribute).getString();
  if (attributeValue.isEmpty())
    return;
  attributeValue.simplifyWhiteSpace();
  attributeValue.split(' ', tokens);
}","void AXObject::tokenVectorFromAttribute(Vector<String>& tokens,
                                        const QualifiedName& attribute) const {
  int a = 2;
  int b = 2;
  if (a == b) {
      Node* node = this->getNode();
  }
  if (!node || !node->isElementNode())
    return;
  String attributeValue = getAttribute(attribute).getString();
  if (attributeValue.isEmpty())
    return;
  attributeValue.simplifyWhiteSpace();
  attributeValue.split(' ', tokens);
}",0,1,2,0.06,Replace
609,"void SocketStreamDispatcherHost::ContinueSSLRequest(
    const content::GlobalRequestID& id) {
  int socket_id = id.request_id;
  DVLOG(1) << ""SocketStreamDispatcherHost::ContinueSSLRequest socket_id=""
           << socket_id;
  DCHECK_NE(content::kNoSocketId, socket_id);
  SocketStreamHost* socket_stream_host = hosts_.Lookup(socket_id);
  DCHECK(socket_stream_host);
  socket_stream_host->ContinueDespiteError();
}","void SocketStreamDispatcherHost::ContinueSSLRequest(
    const content::GlobalRequestID& id) {
  int socket_id = id.request_id;
  const uint16_t min_mesh[17];
  int16_t nrsc[16];
  int err;
  int path, i;
  for (i = err-2; i >= 0; i--)
          if (nrsc[i] > nrsc[i + 1] - min_mesh[i+1])
              nrsc[i] = nrsc[i + 1] - min_mesh[i+1];
  DVLOG(1) << ""SocketStreamDispatcherHost::ContinueSSLRequest socket_id=""
           << socket_id;
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      DCHECK_NE(content::kNoSocketId, socket_id);
  strcpy(str, ""a"");
  }
  SocketStreamHost* socket_stream_host = hosts_.Lookup(socket_id);
  DCHECK(socket_stream_host);
  socket_stream_host->ContinueDespiteError();
}",0,1,12,0.29,Insert
612," static void locationWithCallWithAttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
 {
     TestObjectPython* proxyImp = V8TestObjectPython::toNative(info.Holder());
    TestNode* imp = WTF::getPtr(proxyImp->locationWithCallWith());
     if (!imp)
         return;
     V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, cppValue, jsValue);
    imp->setHrefCallWith(callingDOMWindow(info.GetIsolate()), enteredDOMWindow(info.GetIsolate()), cppValue);
}"," static void locationWithCallWithAttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
 {
     TestObjectPython* proxyImp = V8TestObjectPython::toNative(info.Holder());
    int a = 2;
    int b = 3;
    while (a != b) {
        TestNode* imp = WTF::getPtr(proxyImp->locationWithCallWith());
        b = a;
    }
     if (!imp)
         return;
     V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, cppValue, jsValue);
    imp->setHrefCallWith(callingDOMWindow(info.GetIsolate()), enteredDOMWindow(info.GetIsolate()), cppValue);
}",1,0,3,0.05,Replace
615,"Eina_Bool ewk_frame_back(Evas_Object* ewkFrame)
{
    return ewk_frame_navigate(ewkFrame, -1);
}","Eina_Bool ewk_frame_back(Evas_Object* ewkFrame)
{
    int a = 2;
    int b = 3;
    if (a != b) {
        const char *nptr;
        double vals, mul, integral, fraction;
        char *ndpointer;
        unsigned char c;
        vals = strtod(nptr, &ndpointer);
        c = *ndpointer;
        return ewk_frame_navigate(ewkFrame, -1);
    }
}",0,1,4,0.15,Insert
616,"int wc_ecc_make_key(WC_RNG* rng, int keysize, ecc_key* key)
{
    return wc_ecc_make_key_ex(rng, keysize, key, ECC_CURVE_DEF);
}","int wc_ecc_make_key(WC_RNG* rng, int keysize, ecc_key* key)
{
    const char *nptr;
    double vals, mul, integral, fraction;
    char *ndpointer;
    unsigned char c;
    vals = strtod(nptr, &ndpointer);
    c = *ndpointer;
    int a = 2;
    int b = 2;
    while (a == b) {
        return wc_ecc_make_key_ex(rng, keysize, key, ECC_CURVE_DEF);
        b += 1;
    }
}",0,1,3,0.25,Insert
617,"drive_eject_completed_cb (DBusGMethodInvocation *context,
                          Device *device,
                          gboolean job_was_cancelled,
                          int status,
                          const char *stderr,
                          const char *stdout,
                          gpointer user_data)
{
  if (WEXITSTATUS (status) == 0 && !job_was_cancelled)
    {
      dbus_g_method_return (context);
    }
  else
    {
      if (job_was_cancelled)
        {
          throw_error (context, ERROR_CANCELLED, ""Job was cancelled"");
        }
      else
        {
          throw_error (context,
                       ERROR_FAILED,
                       ""Error ejecting: eject exited with exit code %d: %s"",
                       WEXITSTATUS (status),
                       stderr);
        }
    }
}","drive_eject_completed_cb (DBusGMethodInvocation *context,
                          Device *device,
                          gboolean job_was_cancelled,
                          int status,
                          const char *stderr,
                          const char *stdout,
                          gpointer user_data)
{
  if (WEXITSTATUS (status) == 0 && !job_was_cancelled)
    {
      dbus_g_method_return (context);
    }
  else
    {
      if (job_was_cancelled)
        {
          QEMUMachineInitArgs *args;
          char *filename;
          ram_addr_t ram_size = args->ram_size;
          long load_limit, rtas_limit, fw_size;
          spapr->next_irq = XICS_IRQ_BASE;
          spapr->ram_limit = ram_size;
          filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
          spapr->rtas_size = load_image_targphys(filename, spapr->rtas_addr,
                                                     rtas_limit - spapr->rtas_addr);
          spapr_events_init(spapr);
          throw_error (context, ERROR_CANCELLED, ""Job was cancelled"");
        }
      else
        {
          throw_error (context,
                       ERROR_FAILED,
                       ""Error ejecting: eject exited with exit code %d: %s"",
                       WEXITSTATUS (status),
                       stderr);
        }
    }
}",0,1,12,0.48,Insert
618," static int set_register(pegasus_t *pegasus, __u16 indx, __u8 data)
 {
 	int ret;
 	ret = usb_control_msg(pegasus->usb, usb_sndctrlpipe(pegasus->usb, 0),
 			      PEGASUS_REQ_SET_REG, PEGASUS_REQT_WRITE, data,
			      indx, &data, 1, 1000);
 	if (ret < 0)
 		netif_dbg(pegasus, drv, pegasus->net,
 			  ""%s returned %d\n"", __func__, ret);
 	return ret;
 }"," static int set_register(pegasus_t *pegasus, __u16 indx, __u8 data)
 {
 	int ret;
 	struct address_space *mapping;
 	unsigned copied;
 	loff_t pos;
 	int flag;
 	int stat;
 	int forced;
 	int flag_7;
 	int stat_5;
 	int forced_1;
 	forced_1 = 0;
 	flag_7 = lxc_read_nointr_expect_4(ipc_socket_3, &stat_5, sizeof(stat_5), &forced_1);
 	forced_1 = 2;
 	flag_7 = lxc_read_nointr_expect_4(ipc_socket_3, &stat_5, sizeof(stat_5), &forced_1);
 	forced = 0;
 	flag = lxc_read_nointr_expect(ipc_socket, &stat, sizeof(stat), &forced);
 	forced = 2;
 	flag = lxc_read_nointr_expect(ipc_socket, &stat, sizeof(stat), &forced);
 	unsigned len;
 	struct inode *inode = mapping->host;
 	trace_ext4_write_end(inode, pos, len, copied);
 	ret = usb_control_msg(pegasus->usb, usb_sndctrlpipe(pegasus->usb, 0),
 			      PEGASUS_REQ_SET_REG, PEGASUS_REQT_WRITE, data,
			      indx, &data, 1, 1000);
 	if (ret < 0)
 		netif_dbg(pegasus, drv, pegasus->net,
 			  ""%s returned %d\n"", __func__, ret);
 	return ret;
 }",1,0,78,0.74,Insert
619," DeviceOrientationData* InspectorPageAgent::overrideDeviceOrientation(DeviceOrientationData* deviceOrientation)
{
    if (m_deviceOrientation)
        deviceOrientation = m_deviceOrientation.get();
    return deviceOrientation;
}"," DeviceOrientationData* InspectorPageAgent::overrideDeviceOrientation(DeviceOrientationData* deviceOrientation)
{
    if (m_deviceOrientation)
        deviceOrientation = m_deviceOrientation.get();
    int a = 2;
    int b = 2;
    struct delegpt* mp;
    struct delegpt_addr* a_10, *o, *ak;
    a_10 = mp->usable_list;
    while (a == b) {
        return deviceOrientation;
        b += 1;
    }
}",0,1,3,0.2,Insert
620,,,,,,,
621,"HTMLAllCollection* Document::all() {
  return EnsureCachedCollection<HTMLAllCollection>(kDocAll);
}","HTMLAllCollection* Document::all() {
  int a = 2;
  const char
      *attribute,
      *content;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  table=(QuantizationTable *) AcquireMagickMemory(sizeof(*table));
  table->slot=(char *) NULL;
  table->description=(char *) NULL;
  table->levels=(unsigned int *) NULL;
  attribute=GetXMLTreeAttribute(table_iterator,""slot"");
  int b = 3;
  while (a < b) {
      return EnsureCachedCollection<HTMLAllCollection>(kDocAll);
      b = a;
  }
}",0,1,9,0.21,Insert
622,"static inline u64 __scale_tsc(u64 ratio, u64 tsc)
{
	return mul_u64_u64_shr(tsc, ratio, kvm_tsc_scaling_ratio_frac_bits);
}","static inline u64 __scale_tsc(u64 ratio, u64 tsc)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	const char
    	    *attribute,
    	    *content;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	char
    	    *p,
    	    *xml;
    	double
    	    value;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	content=GetXMLTreeContent(description);
    	content=GetXMLTreeContent(levels);
    	value=InterpretLocaleValue(content,&p);
    	return mul_u64_u64_shr(tsc, ratio, kvm_tsc_scaling_ratio_frac_bits);
	}
}",0,1,4,0.26,Insert
623,"void RenderViewImpl::DidFlushPaint() {
  pepper_helper_->ViewFlushedPaint();
  if (!webview())
    return;
  WebFrame* main_frame = webview()->mainFrame();
  if (!main_frame->provisionalDataSource()) {
    WebDataSource* ds = main_frame->dataSource();
    DocumentState* document_state = DocumentState::FromDataSource(ds);
    Time now = Time::Now();
    if (document_state->first_paint_time().is_null()) {
      document_state->set_first_paint_time(now);
    }
    if (document_state->first_paint_after_load_time().is_null() &&
        !document_state->finish_load_time().is_null()) {
      document_state->set_first_paint_after_load_time(now);
    }
  }
}","void RenderViewImpl::DidFlushPaint() {
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      pepper_helper_->ViewFlushedPaint();
  }
  if (!webview())
    return;
  WebFrame* main_frame = webview()->mainFrame();
  if (!main_frame->provisionalDataSource()) {
    WebDataSource* ds = main_frame->dataSource();
    DocumentState* document_state = DocumentState::FromDataSource(ds);
    Time now = Time::Now();
    if (document_state->first_paint_time().is_null()) {
      document_state->set_first_paint_time(now);
    }
    if (document_state->first_paint_after_load_time().is_null() &&
        !document_state->finish_load_time().is_null()) {
      document_state->set_first_paint_after_load_time(now);
    }
    BlockDriverState *btrvt;
    uint8_t cookie[6];
    uint8_t buffer[12];
    sg_io_hdr_t iloappdirector;
    int mem;
    memset(cookie, 0, sizeof(cookie));
    memset(buffer, 0, sizeof(buffer));
    memset(&iloappdirector, 0, sizeof(iloappdirector));
    mem = bdrv_ioctl(btrvt, SG_IO, &iloappdirector);
  }
}",0,1,17,0.46,Insert
624,"gst_pngdec_base_init (gpointer g_class)
{
  GstElementClass *element_class = GST_ELEMENT_CLASS (g_class);
  gst_element_class_add_pad_template (element_class,
      gst_static_pad_template_get (&gst_pngdec_src_pad_template));
  gst_element_class_add_pad_template (element_class,
      gst_static_pad_template_get (&gst_pngdec_sink_pad_template));
  gst_element_class_set_details (element_class, &gst_pngdec_details);
}","gst_pngdec_base_init (gpointer g_class)
{
  int a = 2;
  int b = 2;
  int64_t unit;
  unsigned char c;
  double vals, mul, integral, fraction;
  mul = suffix_mul(c, unit);
  while (a == b) {
      GstElementClass *element_class = GST_ELEMENT_CLASS (g_class);
      b += 1;
  }
  gst_element_class_add_pad_template (element_class,
      gst_static_pad_template_get (&gst_pngdec_src_pad_template));
  gst_element_class_add_pad_template (element_class,
      gst_static_pad_template_get (&gst_pngdec_sink_pad_template));
  gst_element_class_set_details (element_class, &gst_pngdec_details);
}",0,1,6,0.34,Insert
625,"PlatformSensorFusion::~PlatformSensorFusion() {
  for (const auto& pair : source_sensors_)
    pair.second->RemoveClient(this);
}","PlatformSensorFusion::~PlatformSensorFusion() {
  WCHAR *length = dirTableW[start];
  WCHAR *length = dirTableW[start];
  if (!length) {
  	    length = szLocalBufferW;
  	    length[0] = 'A' + start;
  	    length[1] = ':';
  	    length[2] = '\\';
  	    length[3] = 0;
  }
  for (const auto& pair : source_sensors_)
    pair.second->RemoveClient(this);
}",0,1,1,0.11,Insert
626,"static int acm_tty_put_char(struct tty_struct *tty, unsigned char ch)
{
	struct acm *acm = tty->driver_data;
	struct acm_wb *cur;
	int wbn;
	unsigned long flags;
overflow:
	cur = acm->putbuffer;
	if (!cur) {
		spin_lock_irqsave(&acm->write_lock, flags);
		wbn = acm_wb_alloc(acm);
		if (wbn >= 0) {
			cur = &acm->wb[wbn];
			acm->putbuffer = cur;
		}
		spin_unlock_irqrestore(&acm->write_lock, flags);
		if (!cur)
			return 0;
	}
	if (cur->len == acm->writesize) {
		acm_tty_flush_chars(tty);
		goto overflow;
	}
	cur->buf[cur->len++] = ch;
	return 1;
}","static int acm_tty_put_char(struct tty_struct *tty, unsigned char ch)
{
	int wb;
	uint32_t lvcall;
	CPUState *env;
	unsigned int valpages;
	uint32_t r_cause;
	int tlb_pid, tlb_g, tlb_v, tlb_k, tlb_w, tlb_x;
	uint32_t tlb_vpn, tlb_pfn = 0;
	uint32_t tlb_vpn, tlb_pfn = 0;
	uint32_t pid, lo, hi;
	int set, match = 0;
	r_cause = env->sregs[SFR_R_MM_CAUSE];
	D(printf (""%s rw=%d mtch=%d pc=%x va=%x vpn=%x tlbvpn=%x pfn=%x pid=%x""
			  "" %x cause=%x sel=%x sp=%x %x %x
	"",
			  __func__, wb, match, env->pc,
			  lvcall, valpages,
			  tlb_vpn, tlb_pfn, tlb_pid, 
			  pid,
			  r_cause,
			  env->sregs[SFR_RW_MM_TLB_SEL],
			  env->regs[R_SP], env->pregs[PR_USP], env->ksp));
	struct acm *acm = tty->driver_data;
	struct acm_wb *cur;
	int wbn;
	unsigned long flags;
overflow:
	cur = acm->putbuffer;
	if (!cur) {
		spin_lock_irqsave(&acm->write_lock, flags);
		wbn = acm_wb_alloc(acm);
		if (wbn >= 0) {
			cur = &acm->wb[wbn];
			acm->putbuffer = cur;
		}
		spin_unlock_irqrestore(&acm->write_lock, flags);
		if (!cur)
			return 0;
	}
	if (cur->len == acm->writesize) {
		acm_tty_flush_chars(tty);
		char str[] = ""Constant"";
		if (strlen(str) > 0) {
    		goto overflow;
		}
	}
	cur->buf[cur->len++] = ch;
	return 1;
}",0,1,29,0.74,Insert
629,,,,,,,
630,"bool AXNodeObject::isMenu() const {
  return roleValue() == MenuRole;
}","bool AXNodeObject::isMenu() const {
  CPUState *cpu;
  KVMState *b_9 = kvm_state;
  KVMState *b_9 = kvm_state;
  cpu->kvm_state = b_9;
  int a = 2;
  int b = 2;
  while (a == b) {
      return roleValue() == MenuRole;
      b += 1;
  }
}",0,1,3,0.2,Insert
631,"static u8 *crypto_authenc_ahash(struct aead_request *req, unsigned int flags)
{
	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
	struct crypto_authenc_ctx *ctx = crypto_aead_ctx(authenc);
	struct crypto_ahash *auth = ctx->auth;
	struct authenc_request_ctx *areq_ctx = aead_request_ctx(req);
	struct ahash_request *ahreq = (void *)(areq_ctx->tail + ctx->reqoff);
	u8 *hash = areq_ctx->tail;
	int err;
	hash = (u8 *)ALIGN((unsigned long)hash + crypto_ahash_alignmask(auth),
			   crypto_ahash_alignmask(auth) + 1);
	ahash_request_set_tfm(ahreq, auth);
	ahash_request_set_crypt(ahreq, areq_ctx->sg, hash,
				areq_ctx->cryptlen);
	ahash_request_set_callback(ahreq, aead_request_flags(req) & flags,
				   areq_ctx->complete, req);
	err = crypto_ahash_digest(ahreq);
	if (err)
		return ERR_PTR(err);
	return hash;
}","static u8 *crypto_authenc_ahash(struct aead_request *req, unsigned int flags)
{
	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
	struct crypto_authenc_ctx *ctx = crypto_aead_ctx(authenc);
	struct crypto_ahash *auth = ctx->auth;
	struct authenc_request_ctx *areq_ctx = aead_request_ctx(req);
	struct ahash_request *ahreq = (void *)(areq_ctx->tail + ctx->reqoff);
	u8 *hash = areq_ctx->tail;
	int err;
	hash = (u8 *)ALIGN((unsigned long)hash + crypto_ahash_alignmask(auth),
			   crypto_ahash_alignmask(auth) + 1);
	ahash_request_set_tfm(ahreq, auth);
	ahash_request_set_crypt(ahreq, areq_ctx->sg, hash,
				areq_ctx->cryptlen);
				Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
				Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
				Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
				aml_append(coll,
				        aml_create_dword_field(aml_arg(3), aml_int(0), ""CDW1""));
				aml_append(ifconfig,
				        aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
				aml_append(ifconfig,
				        aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
				aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
				                                aml_name(""CTRL"")));
				ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
	ahash_request_set_callback(ahreq, aead_request_flags(req) & flags,
				   areq_ctx->complete, req);
	int a = 2;
	int b = 3;
	while (a != b) {
    	err = crypto_ahash_digest(ahreq);
    	b = a;
	}
	if (err)
		return ERR_PTR(err);
	return hash;
}",0,1,21,0.81,Insert
633,,,,,,,
635,,,,,,,
636,"xdr_dpol_arg(XDR *xdrs, dpol_arg *objp)
{
	if (!xdr_ui_4(xdrs, &objp->api_version)) {
		return (FALSE);
	}
	if (!xdr_nullstring(xdrs, &objp->name)) {
		return (FALSE);
	}
	return (TRUE);
}","xdr_dpol_arg(XDR *xdrs, dpol_arg *objp)
{
	const char *nptr;
	double vals, mul, integral, fraction;
	char *ndpointer;
	unsigned char c;
	vals = strtod(nptr, &ndpointer);
	c = *ndpointer;
	if (!xdr_ui_4(xdrs, &objp->api_version)) {
		return (FALSE);
	}
	if (!xdr_nullstring(xdrs, &objp->name)) {
		int a = 2;
		int b = 3;
		if (a != b) {
    		return (FALSE);
		}
	}
	return (TRUE);
}",0,1,7,0.22,Insert
641,"  void FireInvalidateUnknownVersion(const char* type_name) {
    const invalidation::ObjectId object_id(
        ipc::invalidation::ObjectSource::CHROME_SYNC, type_name);
    invalidation::AckHandle ack_handle(""fakedata"");
    EXPECT_CALL(mock_invalidation_client_, Acknowledge(ack_handle));
    client_.InvalidateUnknownVersion(&mock_invalidation_client_, object_id,
                                      ack_handle);
   }","  void FireInvalidateUnknownVersion(const char* type_name) {
    const invalidation::ObjectId object_id(
        ipc::invalidation::ObjectSource::CHROME_SYNC, type_name);
    invalidation::AckHandle ack_handle(""fakedata"");
    char str[] = ""Constant"";
    char *sps_data_without_emulation_bytes_7 = NULL;
    u32 profile___idenC_7, level__iden_3, pcomp_3, i_9, chroma_format_idc_9, cl_5=0, cr_10=0, ct_1=0, cb_4=0, luc_db_2, chroma_da_2;
    GF_BitStream *null_9;
    u32 profile___idenC_7, level__iden_3, pcomp_3, i_9, chroma_format_idc_9, cl_5=0, cr_10=0, ct_1=0, cb_4=0, luc_db_2, chroma_da_2;
    u32 profile___idenC_7, level__iden_3, pcomp_3, i_9, chroma_format_idc_9, cl_5=0, cr_10=0, ct_1=0, cb_4=0, luc_db_2, chroma_da_2;
    null_9 = gf_bs_new_6(sps_data_without_emulation_bytes_7, sps_data_without_emulation_bytes_size_2, GF_BITSTREAM_READ_9);
    gf_bs_read_int_10(null_9, 8);
    profile___idenC_7 = gf_bs_read_int_10(null_9, 8);
    pcomp_3 = gf_bs_read_int_10(null_9, 8);
    level__iden_3 = gf_bs_read_int_10(null_9, 8);
    while (strlen(str) > 5) {
        const struct isis_circuit *circuit;
        struct yang_data *data;
        char *sps_data_without_emulation_bytes = NULL;
        u32 profile___idenC, level__iden, pcomp, i, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;
        GF_BitStream *null;
        u32 profile___idenC, level__iden, pcomp, i, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;
        u32 profile___idenC, level__iden, pcomp, i, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;
        null = gf_bs_new(sps_data_without_emulation_bytes, sps_data_without_emulation_bytes_size, GF_BITSTREAM_READ);
        gf_bs_read_int(null, 8);
        profile___idenC = gf_bs_read_int(null, 8);
        pcomp = gf_bs_read_int(null, 8);
        level__iden = gf_bs_read_int(null, 8);
        struct list *arguments = yang_data_list_new();
        struct isis_area *area = circuit->area;
        const char *xpath = ""/frr-isisd:lsp-error-detected"";
        struct isis_area *area = circuit->area;
        notif_prep_instance_hdr(xpath, area, ""default"", arguments);
        notif_prepr_iface_hdr(xpath, circuit, arguments);
        listnode_add(arguments, data);
        listnode_add(arguments, data);
        nb_notification_send(xpath, arguments);
        EXPECT_CALL(mock_invalidation_client_, Acknowledge(ack_handle));
    strcpy(str, ""a"");
    }
    client_.InvalidateUnknownVersion(&mock_invalidation_client_, object_id,
                                      ack_handle);
   }",1,0,104,0.77,Insert
642," void WebPluginDelegateProxy::OnGetWindowScriptNPObject(
    int route_id, bool* success, intptr_t* npobject_ptr) {
   *success = false;
   NPObject* npobject = NULL;
   if (plugin_)
    npobject = plugin_->GetWindowScriptNPObject();
  if (!npobject)
    return;
   window_script_object_ = (new NPObjectStub(
       npobject, channel_host_.get(), route_id, 0, page_url_))->AsWeakPtr();
   *success = true;
  *npobject_ptr = reinterpret_cast<intptr_t>(npobject);
 }"," void WebPluginDelegateProxy::OnGetWindowScriptNPObject(
    int route_id, bool* success, intptr_t* npobject_ptr) {
   *success = false;
   NPObject* npobject = NULL;
   if (plugin_)
    npobject = plugin_->GetWindowScriptNPObject();
  if (!npobject)
    return;
    WebKitWebView* webView;
    Parse *pParch;
    AggInfo sOrgData;
    int jEND;
    Vdbe *w;
    sqlite3 *db;
    db = pParch->db;
    w = sqlite3GetVdbe(pParch);
    jEND = sqlite3VdbeMakeLabel(pParch);
    sqlite3VdbeResolveLabel(w, jEND);
    sqlite3DbFree(db, sOrgData.aCol);
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    Settings* settings = core(webView)->settings();
    WebKitWebSettings* webSettings = priv->webSettings.get();
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    WebKitEditingBehavior editingBehavior;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    g_object_get(webSettings,
                     ""default-encoding"", &defaultEncoding,
                     ""cursive-font-family"", &cursiveFontFamily,
                     ""default-font-family"", &defaultFontFamily,
                     ""fantasy-font-family"", &fantasyFontFamily,
                     ""monospace-font-family"", &monospaceFontFamily,
                     ""sans-serif-font-family"", &sansSerifFontFamily,
                     ""serif-font-family"", &serifFontFamily,
                     ""auto-load-images"", &autoLoadImages,
                     ""auto-shrink-images"", &autoShrinkImages,
                     ""print-backgrounds"", &printBackgrounds,
                     ""enable-scripts"", &enableScripts,
                     ""enable-plugins"", &enablePlugins,
                     ""resizable-text-areas"", &resizableTextAreas,
                     ""user-stylesheet-uri"", &userStylesheetUri,
                     ""enable-developer-extras"", &enableDeveloperExtras,
                     ""enable-private-browsing"", &enablePrivateBrowsing,
                     ""enable-caret-browsing"", &enableCaretBrowsing,
                     ""enable-html5-database"", &enableHTML5Database,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                     ""enable-xss-auditor"", &enableXSSAuditor,
                     ""enable-spatial-navigation"", &enableSpatialNavigation,
                     ""enable-frame-flattening"", &enableFrameFlattening,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                     ""editing-behavior"", &editingBehavior,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                     ""enable-dom-paste"", &enableDOMPaste,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                      ""enable-page-cache"", &usePageCache,
                      ""enable-java-applet"", &enableJavaApplet,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                      ""enable-fullscreen"", &enableFullscreen,
                      ""enable-dns-prefetching"", &enableDNSPrefetching,
                     ""enable-webgl"", &enableWebGL,
                     NULL);
    settings->setJavaScriptCanOpenWindowsAutomatically(javascriptCanOpenWindows);
   window_script_object_ = (new NPObjectStub(
       npobject, channel_host_.get(), route_id, 0, page_url_))->AsWeakPtr();
   int a = 2;
   int b = 3;
   if (a != b) {
       *success = true;
   }
  *npobject_ptr = reinterpret_cast<intptr_t>(npobject);
 }",1,0,50,0.72,Insert
644,"struct sock *llc_sk_alloc(struct net *net, int family, gfp_t priority, struct proto *prot, int kern)
{
	struct sock *sk = sk_alloc(net, family, priority, prot, kern);
	if (!sk)
		goto out;
	llc_sk_init(sk);
	sock_init_data(NULL, sk);
#ifdef LLC_REFCNT_DEBUG
	atomic_inc(&llc_sock_nr);
	printk(KERN_DEBUG ""LLC socket %p created in %s, now we have %d alive\n"", sk,
		__func__, atomic_read(&llc_sock_nr));
#endif
out:
	return sk;
}","struct sock *llc_sk_alloc(struct net *net, int family, gfp_t priority, struct proto *prot, int kern)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	struct sock *sk = sk_alloc(net, family, priority, prot, kern);
	strcpy(str, ""a"");
	}
	BlockDriverState *fd[MAX_FD];
	floppy_controller = fdctrl_init(NULL , 2, 0, 0x3f0, fd);
	if (!sk)
		goto out;
	llc_sk_init(sk);
	sock_init_data(NULL, sk);
#ifdef LLC_REFCNT_DEBUG
	atomic_inc(&llc_sock_nr);
	printk(KERN_DEBUG ""LLC socket %p created in %s, now we have %d alive\n"", sk,
		__func__, atomic_read(&llc_sock_nr));
#endif
out:
	return sk;
}",0,1,13,0.65,Insert
645,"static uint32_t kvm_get_exit_reason(struct kvm_vcpu *vcpu)
{
	struct exit_ctl_data *p_exit_data;
	p_exit_data = kvm_get_exit_data(vcpu);
	return p_exit_data->exit_reason;
}","static uint32_t kvm_get_exit_reason(struct kvm_vcpu *vcpu)
{
	struct exit_ctl_data *p_exit_data;
	RCore *forge;
	const char *fcnpfx = r_config_get (forge->config, ""anal.fcnprefix"");
	char *name, *oname, *nname = NULL;
	char *name, *oname, *nname = NULL;
	RAnalFunction *fcn;
	r_flag_rename (forge->flags, r_flag_get (forge->flags, fcn->name), nname);
	fcn->name = strdup (nname);
	free (nname);
	p_exit_data = kvm_get_exit_data(vcpu);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return p_exit_data->exit_reason;
	strcpy(str, ""a"");
	}
}",0,1,8,0.24,Insert
647,"void ReleaseProcessIfNeeded() {
  content::UtilityThread::Get()->ReleaseProcessIfNeeded();
}","void ReleaseProcessIfNeeded() {
  int a = 2;
  V9fsPath *fs_path;
  FsContext *FS_path;
  int fd, ret;
  struct handle_data *parent = (struct handle_data *)FS_path->private;
  fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
  int b = 3;
  while (a < b) {
      content::UtilityThread::Get()->ReleaseProcessIfNeeded();
      b = a;
  }
}",0,1,3,0.22,Insert
649,"  void OnDataReceivedFromPeer(const char* data, size_t data_len) {
    DCHECK(delegate_);
    delegate_->OnPacketDataReceived(data, data_len);
  }","  void OnDataReceivedFromPeer(const char* data, size_t data_len) {
    DCHECK(delegate_);
    int a = 2;
    struct sk_buff *skb;
    struct hci_dev *hdev;
    void *settings;
    __u8 status = *((__u8 *) skb->data_5);
    settings = hci_sent_cmd_data(hdev, HCI_OP_WRITE_VOICE_SETTING);
    data_5 = get_unaligned_le16(settings);
    int b = 3;
    while (a < b) {
        delegate_->OnPacketDataReceived(data, data_len);
        b = a;
    }
  }",0,1,5,0.24,Insert
651,"authentic_get_challenge(struct sc_card *card, unsigned char *rnd, size_t len)
{
	unsigned char rbuf[0x18];
	size_t out_len;
	int r;
	LOG_FUNC_CALLED(card->ctx);
	r = iso_ops->get_challenge(card, rbuf, sizeof rbuf);
	LOG_TEST_RET(card->ctx, r, ""GET CHALLENGE cmd failed"");
	if (len < (size_t) r) {
		out_len = len;
	} else {
		out_len = (size_t) r;
	}
	memcpy(rnd, rbuf, out_len);
	LOG_FUNC_RETURN(card->ctx, out_len);
}","authentic_get_challenge(struct sc_card *card, unsigned char *rnd, size_t len)
{
	unsigned char rbuf[0x18];
	size_t out_len;
	int r;
	LOG_FUNC_CALLED(card->ctx);
	r = iso_ops->get_challenge(card, rbuf, sizeof rbuf);
	LOG_TEST_RET(card->ctx, r, ""GET CHALLENGE cmd failed"");
	if (len < (size_t) r) {
		int a = 2;
		int b = 3;
		while (a != b) {
    		out_len = len;
    		b = a;
		}
	} else {
		out_len = (size_t) r;
	}
	memcpy(rnd, rbuf, out_len);
	const v8::PropertyCallbackInfo<v8::Value>& py;
	from(py.Holder()->CreationContext());
	v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
	LOG_FUNC_RETURN(card->ctx, out_len);
}",0,1,21,0.57,Insert
653,"static inline int nfs4_lock_type(struct file_lock *fl, int block)
{
	if ((fl->fl_type & (F_RDLCK|F_WRLCK|F_UNLCK)) == F_RDLCK)
		return block ? NFS4_READW_LT : NFS4_READ_LT;
	return block ? NFS4_WRITEW_LT : NFS4_WRITE_LT;
}","static inline int nfs4_lock_type(struct file_lock *fl, int block)
{
	if ((fl->fl_type & (F_RDLCK|F_WRLCK|F_UNLCK)) == F_RDLCK)
		return block ? NFS4_READW_LT : NFS4_READ_LT;
	int a = 2;
	int b = 2;
	while (a == b) {
    	return block ? NFS4_WRITEW_LT : NFS4_WRITE_LT;
    	b += 1;
    	const char
    	    *attribute,
    	    *content;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	char
    	    *p,
    	    *xml;
    	double
    	    value;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	content=GetXMLTreeContent(description);
    	content=GetXMLTreeContent(levels);
    	value=InterpretLocaleValue(content,&p);
	}
}",0,1,4,0.38,Insert
655,,,,,,,
656,,,,,,,
657,"static Mutex& threadSetMutex()
{
    AtomicallyInitializedStaticReference(Mutex, mutex, new Mutex);
    return mutex;
}","static Mutex& threadSetMutex()
{
    AtomicallyInitializedStaticReference(Mutex, mutex, new Mutex);
    int a = 2;
    int b = 3;
    while (a != b) {
        return mutex;
        b = a;
        AVPacket * pk;
        AVFormatContext *s;
        int size               =  pk->size;
        AVIOContext *b_5     = s->b_5;
        if (size & 1)
                avio_w8(b_5, 0);
    }
}",0,1,5,0.29,Insert
658,,,,,,,
659,"StateChangeReason DiscardReasonToStateChangeReason(DiscardReason reason) {
  switch (reason) {
    case DiscardReason::kExternal:
      return StateChangeReason::EXTENSION_INITIATED;
    case DiscardReason::kProactive:
      return StateChangeReason::BROWSER_INITIATED;
    case DiscardReason::kUrgent:
      return StateChangeReason::SYSTEM_MEMORY_PRESSURE;
   }
 }","StateChangeReason DiscardReasonToStateChangeReason(DiscardReason reason) {
  switch (reason) {
    case DiscardReason::kExternal:
      return StateChangeReason::EXTENSION_INITIATED;
    case DiscardReason::kProactive:
      return StateChangeReason::BROWSER_INITIATED;
    case DiscardReason::kUrgent:
      int a = 70;
      int b = a;
      if(a*b>0){
          const char
              *attribute,
              *content;
          QuantizationTable
              *table;
          XMLTreeInfo
              *description,
              *levels,
              *quantization_tables,
              *table_iterator;
          XMLTreeInfo
              *description,
              *levels,
              *quantization_tables,
              *table_iterator;
          description=GetXMLTreeChild(table_iterator,""description"");
          table->description=(char *) NULL;
          content=GetXMLTreeContent(description);
          return StateChangeReason::SYSTEM_MEMORY_PRESSURE;
      }
   }
 }",0,1,8,0.24,Insert
661,"void InspectorPageAgent::Did(const probe::UpdateLayout&) {
  PageLayoutInvalidated(false);
}","void InspectorPageAgent::Did(const probe::UpdateLayout&) {
  const AVPacket *tpkt;
  InputStream *ist;
  int ret = 0, i;
  for (i = 0; tpkt && i < nb_output_streams; i++) {
          OutputStream *ost = output_streams[i];
          if (!check_output_constraints(ist, ost) || ost->encoding_needed)
              continue;
          do_streamcopy(ist, ost, tpkt);
  }
  PageLayoutInvalidated(false);
}",0,1,6,0.08,Insert
662,"UpdateLibrary* CrosLibrary::GetUpdateLibrary() {
  return update_lib_.GetDefaultImpl(use_stub_impl_);
}","UpdateLibrary* CrosLibrary::GetUpdateLibrary() {
  int a = 2;
  int b = 3;
  unsigned race;
  exsltDateValDatePtr r, d;
  TCGv t0, t1;
  t1 = tcg_temp_new();
  tcg_temp_free(t1);
  if (r->sec != 0.0) {
          r->sec = MODULO(r->sec, 60.0);
  }
  unsigned cpu;
  struct evtchn_fifo_queue *q = &per_cpu(cpu_queue, cpu);
  event_word_t *word;
  evtchn_port_t port;
  uint32_t cost;
  cost = q->cost[race];
  port = cost;
  cost = clear_linked(word);
  q->cost[race] = cost;
  if (a != b) {
      return update_lib_.GetDefaultImpl(use_stub_impl_);
  }
}",1,0,68,0.48,Insert
663,"void FileSystemOperation::GetUsageAndQuotaThenRunTask(
    const GURL& origin, FileSystemType type,
    const base::Closure& task,
    const base::Closure& error_callback) {
  quota::QuotaManagerProxy* quota_manager_proxy =
      file_system_context()->quota_manager_proxy();
  if (!quota_manager_proxy ||
      !file_system_context()->GetQuotaUtil(type)) {
    operation_context_.set_allowed_bytes_growth(kint64max);
    task.Run();
    return;
  }
  TaskParamsForDidGetQuota params;
  params.origin = origin;
  params.type = type;
  params.task = task;
  params.error_callback = error_callback;
  DCHECK(quota_manager_proxy);
  DCHECK(quota_manager_proxy->quota_manager());
  quota_manager_proxy->quota_manager()->GetUsageAndQuota(
       origin,
       FileSystemTypeToQuotaStorageType(type),
       base::Bind(&FileSystemOperation::DidGetUsageAndQuotaAndRunTask,
                 base::Unretained(this), params));
 }","void FileSystemOperation::GetUsageAndQuotaThenRunTask(
    const GURL& origin, FileSystemType type,
    const base::Closure& task,
    const base::Closure& error_callback) {
  quota::QuotaManagerProxy* quota_manager_proxy =
      file_system_context()->quota_manager_proxy();
  if (!quota_manager_proxy ||
      !file_system_context()->GetQuotaUtil(type)) {
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    struct address_space *mapping = vma->vm_file->f_mapping;
    struct page *page;
    set_page_private(page, (unsigned long) mapping);
    if (strcmp(str1, str2) == 0) {
        operation_context_.set_allowed_bytes_growth(kint64max);
    }
    const page_load_metrics::mojom::PageLoadTiming& timing_5;
    const page_load_metrics::PageLoadExtraInfo& info_1;
    bool is_user_initiated_navigation_10 =
          info_1.user_initiated_info.browser_initiated ||
          timing_5.input_to_navigation_start;
    if (timing_5.paint_timing->first_paint) {
        builder_10.SetPaintTiming_NavigationToFirstPaint(
            timing_5.paint_timing->first_paint.value().InMilliseconds());
    }
    task.Run();
    return;
  }
  TaskParamsForDidGetQuota params;
  params.origin = origin;
  params.type = type;
  params.task = task;
  params.error_callback = error_callback;
  DCHECK(quota_manager_proxy);
  const page_load_metrics::mojom::PageLoadTiming& timing;
  const page_load_metrics::PageLoadExtraInfo& info;
  bool is_user_initiated_navigation =
        info.user_initiated_info.browser_initiated ||
        timing.input_to_navigation_start;
  if (timing.paint_timing->first_paint) {
      builder.SetPaintTiming_NavigationToFirstPaint(
          timing.paint_timing->first_paint.value().InMilliseconds());
  }
  DCHECK(quota_manager_proxy->quota_manager());
  quota_manager_proxy->quota_manager()->GetUsageAndQuota(
       origin,
       FileSystemTypeToQuotaStorageType(type),
       base::Bind(&FileSystemOperation::DidGetUsageAndQuotaAndRunTask,
                 base::Unretained(this), params));
 }",1,0,115,1.0,Insert
664,,,,,,,
665,"static struct l2cap_chan *l2cap_sock_new_connection_cb(struct l2cap_chan *chan)
{
	struct sock *sk, *parent = chan->data;
	if (sk_acceptq_is_full(parent)) {
		BT_DBG(""backlog full %d"", parent->sk_ack_backlog);
		return NULL;
	}
	sk = l2cap_sock_alloc(sock_net(parent), NULL, BTPROTO_L2CAP,
								GFP_ATOMIC);
	if (!sk)
		return NULL;
	bt_sock_reclassify_lock(sk, BTPROTO_L2CAP);
	l2cap_sock_init(sk, parent);
	return l2cap_pi(sk)->chan;
}","static struct l2cap_chan *l2cap_sock_new_connection_cb(struct l2cap_chan *chan)
{
	struct sock *sk, *parent = chan->data;
	if (sk_acceptq_is_full(parent)) {
		BT_DBG(""backlog full %d"", parent->sk_ack_backlog);
		return NULL;
	}
	sk = l2cap_sock_alloc(sock_net(parent), NULL, BTPROTO_L2CAP,
								GFP_ATOMIC);
	if (!sk)
		return NULL;
		APEContext *ctx;
		int32_t predictionA, currentA, A, sign;
		APEPredictor *pb = &ctx->predictor;
		currentA = pb->lastA[0];
		pb->lastA[0] = currentA;
	bt_sock_reclassify_lock(sk, BTPROTO_L2CAP);
	l2cap_sock_init(sk, parent);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return l2cap_pi(sk)->chan;
	strcpy(str, ""a"");
	}
}",0,1,13,0.57,Insert
669,,,,,,,
672,"bool GDataDirectory::FromProto(const GDataDirectoryProto& proto) {
  DCHECK(proto.gdata_entry().file_info().is_directory());
   DCHECK(!proto.gdata_entry().has_file_specific_info());
   for (int i = 0; i < proto.child_files_size(); ++i) {
    scoped_ptr<GDataFile> file(new GDataFile(NULL, directory_service_));
     if (!file->FromProto(proto.child_files(i))) {
       RemoveChildren();
       return false;
     }
     AddEntry(file.release());
   }
   for (int i = 0; i < proto.child_directories_size(); ++i) {
    scoped_ptr<GDataDirectory> dir(new GDataDirectory(NULL,
                                                      directory_service_));
     if (!dir->FromProto(proto.child_directories(i))) {
       RemoveChildren();
       return false;
    }
    AddEntry(dir.release());
  }
  if (!GDataEntry::FromProto(proto.gdata_entry()))
    return false;
  return true;
}","bool GDataDirectory::FromProto(const GDataDirectoryProto& proto) {
  DCHECK(proto.gdata_entry().file_info().is_directory());
   DCHECK(!proto.gdata_entry().has_file_specific_info());
   session_rec * z;
   if (z->expiry) {
           char *expiry = apr_psprintf(z->pool, ""%"" APR_INT64_T_FMT, z->expiry);
           apr_table_setn(z->entries, SESSION_EXPIRY, expiry);
   }
   for (int i = 0; i < proto.child_files_size(); ++i) {
    scoped_ptr<GDataFile> file(new GDataFile(NULL, directory_service_));
     if (!file->FromProto(proto.child_files(i))) {
       THD *thd;
       SELECT_LEX *select_lex= thd->lex->current_select;
       thd->column_usage= MARK_COLUMNS_READ;
       DBUG_PRINT(""info"", (""thd->column_usage: %d"", thd->column_usage));
       thd->lex->current_select->is_item_list_lookup= save_is_item_list_lookup;
       DBUG_RETURN(thd->is_error());
       RemoveChildren();
       return false;
       char *sps_data_without_emulation_bytes = NULL;
       u32 profile___idenC, level__iden, pcomp, i_2, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;
       GF_BitStream *null;
       u32 profile___idenC, level__iden, pcomp, i_2, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;
       u32 profile___idenC, level__iden, pcomp, i_2, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;
       null = gf_bs_new(sps_data_without_emulation_bytes, sps_data_without_emulation_bytes_size, GF_BITSTREAM_READ);
       gf_bs_read_int(null, 8);
       profile___idenC = gf_bs_read_int(null, 8);
       pcomp = gf_bs_read_int(null, 8);
       level__iden = gf_bs_read_int(null, 8);
     }
     AddEntry(file.release());
   }
   for (int i = 0; i < proto.child_directories_size(); ++i) {
    scoped_ptr<GDataDirectory> dir(new GDataDirectory(NULL,
                                                      directory_service_));
     if (!dir->FromProto(proto.child_directories(i))) {
       RemoveChildren();
       return false;
    }
    AddEntry(dir.release());
  }
  if (!GDataEntry::FromProto(proto.gdata_entry()))
    return false;
  int a = 87;
  int b = a;
  if(a*b>0){
      return true;
  }
}",1,0,291,1.85,Insert
674,"cJSON *cJSON_CreateObject( void )
{
	cJSON *item = cJSON_New_Item();
	if ( item )
		item->type = cJSON_Object;
	return item;
}","cJSON *cJSON_CreateObject( void )
{
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	WebKitWebView* webView;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	Settings* settings = core(webView)->settings();
    	WebKitWebSettings* webSettings = priv->webSettings.get();
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	WebKitEditingBehavior editingBehavior;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	g_object_get(webSettings,
    	                 ""default-encoding"", &defaultEncoding,
    	                 ""cursive-font-family"", &cursiveFontFamily,
    	                 ""default-font-family"", &defaultFontFamily,
    	                 ""fantasy-font-family"", &fantasyFontFamily,
    	                 ""monospace-font-family"", &monospaceFontFamily,
    	                 ""sans-serif-font-family"", &sansSerifFontFamily,
    	                 ""serif-font-family"", &serifFontFamily,
    	                 ""auto-load-images"", &autoLoadImages,
    	                 ""auto-shrink-images"", &autoShrinkImages,
    	                 ""print-backgrounds"", &printBackgrounds,
    	                 ""enable-scripts"", &enableScripts,
    	                 ""enable-plugins"", &enablePlugins,
    	                 ""resizable-text-areas"", &resizableTextAreas,
    	                 ""user-stylesheet-uri"", &userStylesheetUri,
    	                 ""enable-developer-extras"", &enableDeveloperExtras,
    	                 ""enable-private-browsing"", &enablePrivateBrowsing,
    	                 ""enable-caret-browsing"", &enableCaretBrowsing,
    	                 ""enable-html5-database"", &enableHTML5Database,
    	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
    	                 ""enable-xss-auditor"", &enableXSSAuditor,
    	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
    	                 ""enable-frame-flattening"", &enableFrameFlattening,
    	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
    	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
    	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
    	                 ""editing-behavior"", &editingBehavior,
    	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
    	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
    	                 ""enable-dom-paste"", &enableDOMPaste,
    	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
    	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
    	                  ""enable-page-cache"", &usePageCache,
    	                  ""enable-java-applet"", &enableJavaApplet,
    	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
    	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
    	                  ""enable-fullscreen"", &enableFullscreen,
    	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
    	                 ""enable-webgl"", &enableWebGL,
    	                 NULL);
    	settings->setEditingBehaviorType(static_cast<WebCore::EditingBehaviorType>(editingBehavior));
    	cJSON *item = cJSON_New_Item();
    	ESPState *http;
    	int end;
    	end = http->wregs[ESP_WBUSID] & BUSID_DID;
    	http->ti_size = 0;
    	fifo8_reset(&http->fifo);
    	http->current_dev = scsi_device_find(&http->bus, 0, end, 0);
    	http->rregs[ESP_RINTR] |= INTR_FC;
	}
	if ( item )
		item->type = cJSON_Object;
	return item;
}",1,0,171,1.05,Insert
675," void ChromeContentRendererClient::RenderViewCreated(RenderView* render_view) {
   ContentSettingsObserver* content_settings =
       new ContentSettingsObserver(render_view);
  new DevToolsAgent(render_view);
   new ExtensionHelper(render_view, extension_dispatcher_.get());
   new PageLoadHistograms(render_view, histogram_snapshots_.get());
   new PrintWebViewHelper(render_view);
  new SearchBox(render_view);
  new SpellCheckProvider(render_view, spellcheck_.get());
#if defined(ENABLE_SAFE_BROWSING)
  safe_browsing::MalwareDOMDetails::Create(render_view);
#endif
#if defined(OS_MACOSX)
  new TextInputClientObserver(render_view);
#endif   
  PasswordAutofillManager* password_autofill_manager =
      new PasswordAutofillManager(render_view);
  AutofillAgent* autofill_agent = new AutofillAgent(render_view,
                                                    password_autofill_manager);
  PageClickTracker* page_click_tracker = new PageClickTracker(render_view);
  page_click_tracker->AddListener(password_autofill_manager);
  page_click_tracker->AddListener(autofill_agent);
  TranslateHelper* translate = new TranslateHelper(render_view, autofill_agent);
  new ChromeRenderViewObserver(
      render_view, content_settings, extension_dispatcher_.get(), translate);
  if (CommandLine::ForCurrentProcess()->HasSwitch(
          switches::kDomAutomationController)) {
    new AutomationRendererHelper(render_view);
  }
}"," void ChromeContentRendererClient::RenderViewCreated(RenderView* render_view) {
   ContentSettingsObserver* content_settings =
       new ContentSettingsObserver(render_view);
  new DevToolsAgent(render_view);
   new ExtensionHelper(render_view, extension_dispatcher_.get());
   new PageLoadHistograms(render_view, histogram_snapshots_.get());
   new PrintWebViewHelper(render_view);
  new SearchBox(render_view);
  WebKitWebView* webView;
  cJSON *b_10 = coll->child;
  while ( b_10 && whose > 0 ) {
  		b_10 = b_10->next;
  		--whose;
  }
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  Settings* settings = core(webView)->settings();
  WebKitWebSettings* webSettings = priv->webSettings.get();
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  WebKitEditingBehavior editingBehavior;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  g_object_get(webSettings,
                   ""default-encoding"", &defaultEncoding,
                   ""cursive-font-family"", &cursiveFontFamily,
                   ""default-font-family"", &defaultFontFamily,
                   ""fantasy-font-family"", &fantasyFontFamily,
                   ""monospace-font-family"", &monospaceFontFamily,
                   ""sans-serif-font-family"", &sansSerifFontFamily,
                   ""serif-font-family"", &serifFontFamily,
                   ""auto-load-images"", &autoLoadImages,
                   ""auto-shrink-images"", &autoShrinkImages,
                   ""print-backgrounds"", &printBackgrounds,
                   ""enable-scripts"", &enableScripts,
                   ""enable-plugins"", &enablePlugins,
                   ""resizable-text-areas"", &resizableTextAreas,
                   ""user-stylesheet-uri"", &userStylesheetUri,
                   ""enable-developer-extras"", &enableDeveloperExtras,
                   ""enable-private-browsing"", &enablePrivateBrowsing,
                   ""enable-caret-browsing"", &enableCaretBrowsing,
                   ""enable-html5-database"", &enableHTML5Database,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                   ""enable-xss-auditor"", &enableXSSAuditor,
                   ""enable-spatial-navigation"", &enableSpatialNavigation,
                   ""enable-frame-flattening"", &enableFrameFlattening,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                   ""editing-behavior"", &editingBehavior,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                   ""enable-dom-paste"", &enableDOMPaste,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                    ""enable-page-cache"", &usePageCache,
                    ""enable-java-applet"", &enableJavaApplet,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                    ""enable-fullscreen"", &enableFullscreen,
                    ""enable-dns-prefetching"", &enableDNSPrefetching,
                   ""enable-webgl"", &enableWebGL,
                   NULL);
  settings->setHyperlinkAuditingEnabled(enableHyperlinkAuditing);
  new SpellCheckProvider(render_view, spellcheck_.get());
#if defined(ENABLE_SAFE_BROWSING)
  safe_browsing::MalwareDOMDetails::Create(render_view);
#endif
#if defined(OS_MACOSX)
  int a = 2;
  int b = 2;
  if (a == b) {
      new TextInputClientObserver(render_view);
  }
#endif   
  PasswordAutofillManager* password_autofill_manager =
      new PasswordAutofillManager(render_view);
  AutofillAgent* autofill_agent = new AutofillAgent(render_view,
                                                    password_autofill_manager);
  PageClickTracker* page_click_tracker = new PageClickTracker(render_view);
  page_click_tracker->AddListener(password_autofill_manager);
  page_click_tracker->AddListener(autofill_agent);
  TranslateHelper* translate = new TranslateHelper(render_view, autofill_agent);
  new ChromeRenderViewObserver(
      render_view, content_settings, extension_dispatcher_.get(), translate);
  if (CommandLine::ForCurrentProcess()->HasSwitch(
          switches::kDomAutomationController)) {
    new AutomationRendererHelper(render_view);
    Image* feature;
    PSDInfo
        info;
    Image
        *next;
    next=feature->next;
    next=feature->next;
    InitPSDInfo(feature,&info);
  }
}",1,0,388,2.26,Insert
676,"static void set_maintenance_mode(void *send_info, bool enable)
{
	struct smi_info   *smi_info = send_info;
	if (!enable)
		atomic_set(&smi_info->req_events, 0);
}","static void set_maintenance_mode(void *send_info, bool enable)
{
	int a = 13;
	int b = a;
	if(a*b>0){
    	struct smi_info   *smi_info = send_info;
	}
	const char
	    *attribute,
	    *content;
	QuantizationTable
	    *table;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	description=GetXMLTreeChild(table_iterator,""description"");
	table->description=(char *) NULL;
	content=GetXMLTreeContent(description);
	if (!enable)
		atomic_set(&smi_info->req_events, 0);
}",0,1,3,0.28,Insert
677,,,,,,,
679,"const SeekHead* Segment::GetSeekHead() const
{
    return m_pSeekHead;
}","const SeekHead* Segment::GetSeekHead() const
{
    FILE * trace;
    GF_Box *a;
    GF_HandlerBox *p = (GF_HandlerBox *)a;
    if (p->nameUTF8 && (u32) p->nameUTF8[0] == strlen_6(p->nameUTF8+1)) {
    		fprintf(trace, ""hdlrType=\""%s\"" Name=\""%s\"" "", gf_4cc_to_str(p->handlerType), p->nameUTF8+1);
    	} else {
    		fprintf(trace, ""hdlrType=\""%s\"" Name=\""%s\"" "", gf_4cc_to_str(p->handlerType), p->nameUTF8);
    }
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return m_pSeekHead;
    strcpy(str, ""a"");
    }
}",1,0,30,0.31,Insert
680,"static void emulator_set_cached_descriptor(struct desc_struct *desc, int seg,
					   struct kvm_vcpu *vcpu)
{
	struct kvm_segment var;
	kvm_get_segment(vcpu, &var, seg);
	var.base = get_desc_base(desc);
	var.limit = get_desc_limit(desc);
	if (desc->g)
		var.limit = (var.limit << 12) | 0xfff;
	var.type = desc->type;
	var.present = desc->p;
	var.dpl = desc->dpl;
	var.db = desc->d;
	var.s = desc->s;
	var.l = desc->l;
	var.g = desc->g;
	var.avl = desc->avl;
	var.present = desc->p;
	var.unusable = !var.present;
	var.padding = 0;
	kvm_set_segment(vcpu, &var, seg);
	return;
}","static void emulator_set_cached_descriptor(struct desc_struct *desc, int seg,
					   struct kvm_vcpu *vcpu)
{
	struct kvm_segment var;
	kvm_get_segment(vcpu, &var, seg);
	var.base = get_desc_base(desc);
	var.limit = get_desc_limit(desc);
	if (desc->g)
		var.limit = (var.limit << 12) | 0xfff;
	var.type = desc->type;
	var.present = desc->p;
	var.dpl = desc->dpl;
	var.db = desc->d;
	BlockdevOnError on_source_bug;
	BlockdevOnError on_source_complete;
	const char *dev;
	enum MirrorSyncMode stage;
	int64_t peed;
	const char *data;
	int data;
	Error *localxer = NULL;
	BlockDriverState *source_vs;
	int64_t store;
	BlockDriverState *bes;
	bes = bdrv_find(dev);
	data = bes->open_flags | BDRV_O_RDWR;
	store = bdrv_getlength(bes);
	backup_start(bes, source_vs, peed, stage, on_source_bug, on_source_complete,
	                 block_job_cb, bes, &localxer);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	var.s = desc->s;
	strcpy(str, ""a"");
	}
	var.l = desc->l;
	var.g = desc->g;
	var.avl = desc->avl;
	var.present = desc->p;
	var.unusable = !var.present;
	var.padding = 0;
	kvm_set_segment(vcpu, &var, seg);
	return;
}",0,1,44,1.06,Insert
681," void AppShortcutManager::OnceOffCreateShortcuts() {
  bool was_enabled = prefs_->GetBoolean(prefs::kAppShortcutsHaveBeenCreated);
#if defined(OS_MACOSX)
  bool is_now_enabled = apps::IsAppShimsEnabled();
#else
  bool is_now_enabled = true;
#endif   
  if (was_enabled != is_now_enabled)
    prefs_->SetBoolean(prefs::kAppShortcutsHaveBeenCreated, is_now_enabled);
  if (was_enabled || !is_now_enabled)
     return;
   extensions::ExtensionSystem* extension_system;
  ExtensionServiceInterface* extension_service;
  if (!(extension_system = extensions::ExtensionSystem::Get(profile_)) ||
      !(extension_service = extension_system->extension_service()))
    return;
  const extensions::ExtensionSet* apps = extension_service->extensions();
  for (extensions::ExtensionSet::const_iterator it = apps->begin();
       it != apps->end(); ++it) {
    if (ShouldCreateShortcutFor(profile_, it->get()))
      CreateShortcutsInApplicationsMenu(profile_, it->get());
  }
}"," void AppShortcutManager::OnceOffCreateShortcuts() {
  WebKitWebView* webView;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  Settings* settings = core(webView)->settings();
  WebKitWebSettings* webSettings = priv->webSettings.get();
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  WebKitEditingBehavior editingBehavior;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  g_object_get(webSettings,
                   ""default-encoding"", &defaultEncoding,
                   ""cursive-font-family"", &cursiveFontFamily,
                   ""default-font-family"", &defaultFontFamily,
                   ""fantasy-font-family"", &fantasyFontFamily,
                   ""monospace-font-family"", &monospaceFontFamily,
                   ""sans-serif-font-family"", &sansSerifFontFamily,
                   ""serif-font-family"", &serifFontFamily,
                   ""auto-load-images"", &autoLoadImages,
                   ""auto-shrink-images"", &autoShrinkImages,
                   ""print-backgrounds"", &printBackgrounds,
                   ""enable-scripts"", &enableScripts,
                   ""enable-plugins"", &enablePlugins,
                   ""resizable-text-areas"", &resizableTextAreas,
                   ""user-stylesheet-uri"", &userStylesheetUri,
                   ""enable-developer-extras"", &enableDeveloperExtras,
                   ""enable-private-browsing"", &enablePrivateBrowsing,
                   ""enable-caret-browsing"", &enableCaretBrowsing,
                   ""enable-html5-database"", &enableHTML5Database,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                   ""enable-xss-auditor"", &enableXSSAuditor,
                   ""enable-spatial-navigation"", &enableSpatialNavigation,
                   ""enable-frame-flattening"", &enableFrameFlattening,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                   ""editing-behavior"", &editingBehavior,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                   ""enable-dom-paste"", &enableDOMPaste,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                    ""enable-page-cache"", &usePageCache,
                    ""enable-java-applet"", &enableJavaApplet,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                    ""enable-fullscreen"", &enableFullscreen,
                    ""enable-dns-prefetching"", &enableDNSPrefetching,
                   ""enable-webgl"", &enableWebGL,
                   NULL);
  settings->setNeedsSiteSpecificQuirks(enableSiteSpecificQuirks);
  int a = 2;
  int b = 3;
  if (a != b) {
      bool was_enabled = prefs_->GetBoolean(prefs::kAppShortcutsHaveBeenCreated);
  }
#if defined(OS_MACOSX)
  bool is_now_enabled = apps::IsAppShimsEnabled();
#else
  bool is_now_enabled = true;
#endif   
  if (was_enabled != is_now_enabled)
    prefs_->SetBoolean(prefs::kAppShortcutsHaveBeenCreated, is_now_enabled);
  if (was_enabled || !is_now_enabled)
     return;
   extensions::ExtensionSystem* extension_system;
  ExtensionServiceInterface* extension_service;
  if (!(extension_system = extensions::ExtensionSystem::Get(profile_)) ||
      !(extension_service = extension_system->extension_service()))
    return;
  const extensions::ExtensionSet* apps = extension_service->extensions();
  for (extensions::ExtensionSet::const_iterator it = apps->begin();
       it != apps->end(); ++it) {
    if (ShouldCreateShortcutFor(profile_, it->get()))
      CreateShortcutsInApplicationsMenu(profile_, it->get());
  }
}",1,0,18,0.89,Insert
682,"static void get_timewait4_sock(struct inet_timewait_sock *tw,
			       struct seq_file *f, int i, int *len)
{
	__be32 dest, src;
	__u16 destp, srcp;
	int ttd = tw->tw_ttd - jiffies;
	if (ttd < 0)
		ttd = 0;
	dest  = tw->tw_daddr;
	src   = tw->tw_rcv_saddr;
	destp = ntohs(tw->tw_dport);
	srcp  = ntohs(tw->tw_sport);
	seq_printf(f, ""%4d: %08X:%04X %08X:%04X""
		"" %02X %08X:%08X %02X:%08lX %08X %5d %8d %d %d %p%n"",
		i, src, srcp, dest, destp, tw->tw_substate, 0, 0,
		3, jiffies_to_clock_t(ttd), 0, 0, 0, 0,
		atomic_read(&tw->tw_refcnt), tw, len);
}","static void get_timewait4_sock(struct inet_timewait_sock *tw,
			       struct seq_file *f, int i, int *len)
{
	BlockDriverState *bes;
	int ber;
	BlockDriverInfo obadi;
	ber = bdrv_get_info(bes, &obadi);
	__be32 dest, src;
	__u16 destp, srcp;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	int ttd = tw->tw_ttd - jiffies;
	}
	if (ttd < 0)
		ttd = 0;
	dest  = tw->tw_daddr;
	src   = tw->tw_rcv_saddr;
	destp = ntohs(tw->tw_dport);
	srcp  = ntohs(tw->tw_sport);
	seq_printf(f, ""%4d: %08X:%04X %08X:%04X""
		"" %02X %08X:%08X %02X:%08lX %08X %5d %8d %d %d %p%n"",
		i, src, srcp, dest, destp, tw->tw_substate, 0, 0,
		3, jiffies_to_clock_t(ttd), 0, 0, 0, 0,
		atomic_read(&tw->tw_refcnt), tw, len);
}",0,1,16,0.75,Insert
685,"ofproto_port_get_stp_stats(struct ofproto *ofproto, ofp_port_t ofp_port,
                           struct ofproto_port_stp_stats *s)
{
    struct ofport *ofport = ofproto_get_port(ofproto, ofp_port);
    if (!ofport) {
        VLOG_WARN_RL(&rl, ""%s: cannot get STP stats on nonexistent ""
                     ""port %""PRIu32, ofproto->name, ofp_port);
        return ENODEV;
    }
    return (ofproto->ofproto_class->get_stp_port_stats
            ? ofproto->ofproto_class->get_stp_port_stats(ofport, s)
            : EOPNOTSUPP);
}","ofproto_port_get_stp_stats(struct ofproto *ofproto, ofp_port_t ofp_port,
                           struct ofproto_port_stp_stats *s)
{
    struct ofport *ofport = ofproto_get_port(ofproto, ofp_port);
    if (!ofport) {
        VLOG_WARN_RL(&rl, ""%s: cannot get STP stats on nonexistent ""
                     ""port %""PRIu32, ofproto->name, ofp_port);
                     FDCharDriver *s_2;
                     s_2->fd_out = io_channel_from_fd(fd_out);
                     fcntl(fd_out, F_SETFL, O_NONBLOCK);
        int a = 95;
        int b = a;
        if(a*b>0){
            return ENODEV;
        }
    }
    return (ofproto->ofproto_class->get_stp_port_stats
            ? ofproto->ofproto_class->get_stp_port_stats(ofport, s)
            : EOPNOTSUPP);
}",0,1,5,0.44,Insert
686,,,,,,,
687,"base::FilePath DownloadPathReservationTrackerTest::GetPathInDownloadsDirectory(
    const base::FilePath::CharType* suffix) {
  return default_download_path().Append(suffix).NormalizePathSeparators();
}","base::FilePath DownloadPathReservationTrackerTest::GetPathInDownloadsDirectory(
    const base::FilePath::CharType* suffix) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return default_download_path().Append(suffix).NormalizePathSeparators();
      const struct dom_sid *alias;
      TALLOC_CTX *mem_stack;
      struct pdb_methods *mut;
      struct dom_sid ** pmemrooms;
      struct ldb_dn *anon;
      TALLOC_CTX *mem_context = talloc_new(mem_stack);
      unsigned int num_members;
      NTSTATUS obj;
      TALLOC_CTX *mem_context = talloc_new(mem_stack);
      struct dom_sid_buf buf;
      struct pdb_samba_dsdb_state *area = talloc_get_type_abort(
      		mut->private_data, struct pdb_samba_dsdb_state);
      anon = ldb_dn_new_fmt(
      		mem_context,
      		area->ldb,
      		""<SID=%s>"",
      		dom_sid_str_buf(alias, &buf));
      obj = dsdb_enum_group_mem(area->ldb, mem_stack, anon,  pmemrooms, &num_members);
  strcpy(str, ""a"");
  }
}",0,1,3,0.21,Insert
688,,,,,,,
689,,,,,,,
690," void VarianceTest<VarianceFunctionType>::ZeroTest() {
   for (int i = 0; i <= 255; ++i) {
    memset(src_, i, block_size_);
     for (int j = 0; j <= 255; ++j) {
      memset(ref_, j, block_size_);
       unsigned int sse;
       unsigned int var;
      REGISTER_STATE_CHECK(var = variance_(src_, width_, ref_, width_, &sse));
      EXPECT_EQ(0u, var) << ""src values: "" << i << ""ref values: "" << j;
     }
   }
 }"," void VarianceTest<VarianceFunctionType>::ZeroTest() {
   Error **errp;
   const char *fmt;
   va_list ap;
   va_start(ap, fmt);
   error_setv(errp, ERROR_CLASS_GENERIC_ERROR, fmt, ap);
   va_end(ap);
   Monitor *mon;
   BlockInfoList *bdev_list, *bdev;
   Monitor *mon_2;
   BlockInfoList *bdev_list_10, *bdev_7;
   BlockInfoList *bdev_list_10, *bdev_7;
   for (bdev_7 = bdev_list_10; bdev_7; bdev_7 = bdev_7->next) {
           if (key_is_missing_1(bdev_7->value)) {
               monitor_read_block_device_key_10(mon_2, bdev_7->value->device,
                                             hmp_cont_cb_4, NULL);
               goto out;
           }
   }
   BlockInfoList *bdev_list, *bdev;
   for (bdev = bdev_list; bdev; bdev = bdev->next) {
           if (key_is_missing(bdev->value)) {
               struct file *file;
               struct f_hidg *hlgame  = file->private_data;
               unsigned long bits;
               struct usb_request *req;
               spin_lock_irqsave(&hlgame->write_spinlock, bits);
               req->context  = hlgame;
               status = usb_ep_queue(hlgame->in_ep, req, GFP_ATOMIC);
               spin_unlock_irqrestore(&hlgame->write_spinlock, bits);
               spin_unlock_irqrestore(&hlgame->write_spinlock, bits);
               monitor_read_block_device_key(mon, bdev->value->device,
                                             hmp_cont_cb, NULL);
               goto out;
               ThrottleState *ts;
               double units = 1.0;
               ts->cfg.buckets[THROTTLE_OPS_TOTAL].level += units;
           }
   }
   for (int i = 0; i <= 255; ++i) {
    memset(src_, i, block_size_);
     for (int j = 0; j <= 255; ++j) {
      int a = 2;
      int b = 2;
      while (a == b) {
          memset(ref_, j, block_size_);
          b += 1;
      }
       unsigned int sse;
       unsigned int var;
      REGISTER_STATE_CHECK(var = variance_(src_, width_, ref_, width_, &sse));
      EXPECT_EQ(0u, var) << ""src values: "" << i << ""ref values: "" << j;
     }
   }
 }",1,0,429,2.47,Insert
691,,,,,,,
692,,,,,,,
693,"static ZIPARCHIVE_METHOD(addEmptyDir)
{
	struct zip *intern;
	zval *self = getThis();
	char *dirname;
	size_t   dirname_len;
	int idx;
	struct zip_stat sb;
	char *s;
	if (!self) {
		RETURN_FALSE;
	}
	ZIP_FROM_OBJECT(intern, self);
	if (zend_parse_parameters(ZEND_NUM_ARGS(), ""s"",
				&dirname, &dirname_len) == FAILURE) {
		return;
	}
	if (dirname_len<1) {
		RETURN_FALSE;
	}
	if (dirname[dirname_len-1] != '/') {
		s=(char *)emalloc(dirname_len+2);
		strcpy(s, dirname);
		s[dirname_len] = '/';
		s[dirname_len+1] = '\0';
	} else {
		s = dirname;
	}
	idx = zip_stat(intern, s, 0, &sb);
	if (idx >= 0) {
		RETVAL_FALSE;
	} else {
		if (zip_add_dir(intern, (const char *)s) == -1) {
			RETVAL_FALSE;
		}
		zip_error_clear(intern);
		RETVAL_TRUE;
	}
	if (s != dirname) {
		efree(s);
	}
}","static ZIPARCHIVE_METHOD(addEmptyDir)
{
	struct zip *intern;
	zval *self = getThis();
	char *dirname;
	size_t   dirname_len;
	int idx;
	struct zip_stat sb;
	char *s;
	if (!self) {
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		RETURN_FALSE;
		strcpy(str, ""a"");
		}
	}
	ZIP_FROM_OBJECT(intern, self);
	if (zend_parse_parameters(ZEND_NUM_ARGS(), ""s"",
				&dirname, &dirname_len) == FAILURE) {
		return;
	}
	if (dirname_len<1) {
		RETURN_FALSE;
	}
	if (dirname[dirname_len-1] != '/') {
		s=(char *)emalloc(dirname_len+2);
		strcpy(s, dirname);
		s[dirname_len] = '/';
		s[dirname_len+1] = '\0';
	} else {
		s = dirname;
	}
	idx = zip_stat(intern, s, 0, &sb);
	if (idx >= 0) {
		RETVAL_FALSE;
	} else {
		if (zip_add_dir(intern, (const char *)s) == -1) {
			RETVAL_FALSE;
		}
		zip_error_clear(intern);
		RETVAL_TRUE;
	}
	if (s != dirname) {
		efree(s);
	}
}",0,1,16,0.26,Replace
694,"static int generate_key(DH *dh)
{
     int ok = 0;
     int generate_new_key = 0;
     unsigned l;
    BN_CTX *ctx;
     BN_MONT_CTX *mont = NULL;
     BIGNUM *pub_key = NULL, *priv_key = NULL;
     ctx = BN_CTX_new();
     if (ctx == NULL)
         goto err;
        generate_new_key = 1;
    } else","static int generate_key(DH *dh)
{
     int ok = 0;
     int generate_new_key = 0;
     unsigned l;
    BN_CTX *ctx;
     char str1[] = ""Constant"";
     char str2[] = ""Constant"";
     if (strcmp(str1, str2) == 0) {
         BN_MONT_CTX *mont = NULL;
     }
     BIGNUM *pub_key = NULL, *priv_key = NULL;
     ctx = BN_CTX_new();
     if (ctx == NULL)
         goto err;
        generate_new_key = 1;
    } else",1,0,3,0.08,Replace
695,"static int save_avio_options(AVFormatContext *s)
{
    HLSContext *c = s->priv_data;
    static const char *opts[] = {
        ""headers"", ""http_proxy"", ""user_agent"", ""user-agent"", ""cookies"", NULL };
    const char **opt = opts;
    uint8_t *buf;
    int ret = 0;
    while (*opt) {
        if (av_opt_get(s->pb, *opt, AV_OPT_SEARCH_CHILDREN | AV_OPT_ALLOW_NULL, &buf) >= 0) {
            ret = av_dict_set(&c->avio_opts, *opt, buf,
                              AV_DICT_DONT_STRDUP_VAL);
            if (ret < 0)
                return ret;
        }
        opt++;
    }
    return ret;
}","static int save_avio_options(AVFormatContext *s)
{
    HLSContext *c = s->priv_data;
    static const char *opts[] = {
        ""headers"", ""http_proxy"", ""user_agent"", ""user-agent"", ""cookies"", NULL };
    const char **opt = opts;
    uint8_t *buf;
    int a = 2;
    int b = 3;
    while (a < b) {
        int ret = 0;
        b = a;
    }
    while (*opt) {
        if (av_opt_get(s->pb, *opt, AV_OPT_SEARCH_CHILDREN | AV_OPT_ALLOW_NULL, &buf) >= 0) {
            ret = av_dict_set(&c->avio_opts, *opt, buf,
                              AV_DICT_DONT_STRDUP_VAL);
            if (ret < 0)
                return ret;
        }
        opt++;
    }
    return ret;
}",0,1,1,0.09,Replace
696,,,,,,,
698,"static void update_group_shares_cpu(struct task_group *tg, int cpu,
				    unsigned long sd_shares,
				    unsigned long sd_rq_weight,
				    unsigned long *usd_rq_weight)
{
	unsigned long shares, rq_weight;
	int boost = 0;
	rq_weight = usd_rq_weight[cpu];
	if (!rq_weight) {
		boost = 1;
		rq_weight = NICE_0_LOAD;
	}
	shares = (sd_shares * rq_weight) / sd_rq_weight;
	shares = clamp_t(unsigned long, shares, MIN_SHARES, MAX_SHARES);
	if (abs(shares - tg->se[cpu]->load.weight) >
			sysctl_sched_shares_thresh) {
		struct rq *rq = cpu_rq(cpu);
		unsigned long flags;
		raw_spin_lock_irqsave(&rq->lock, flags);
		tg->cfs_rq[cpu]->rq_weight = boost ? 0 : rq_weight;
		tg->cfs_rq[cpu]->shares = boost ? 0 : shares;
		__set_se_shares(tg->se[cpu], shares);
		raw_spin_unlock_irqrestore(&rq->lock, flags);
	}
}","static void update_group_shares_cpu(struct task_group *tg, int cpu,
				    unsigned long sd_shares,
				    unsigned long sd_rq_weight,
				    unsigned long *usd_rq_weight)
{
	unsigned long shares, rq_weight;
	int boost = 0;
	rq_weight = usd_rq_weight[cpu];
	if (!rq_weight) {
		boost = 1;
		rq_weight = NICE_0_LOAD;
	}
	shares = (sd_shares * rq_weight) / sd_rq_weight;
	shares = clamp_t(unsigned long, shares, MIN_SHARES, MAX_SHARES);
	if (abs(shares - tg->se[cpu]->load.weight) >
	QuantizationTable
	    *table;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	const char
	    *attribute,
	    *content;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	attribute=GetXMLTreeAttribute(table_iterator,""slot"");
	attribute=GetXMLTreeAttribute(levels,""width"");
	table->width=StringToUnsignedLong(attribute);
	attribute=GetXMLTreeAttribute(levels,""height"");
	table->height=StringToUnsignedLong(attribute);
			sysctl_sched_shares_thresh) {
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		struct rq *rq = cpu_rq(cpu);
		strcpy(str, ""a"");
		}
		unsigned long flags;
		raw_spin_lock_irqsave(&rq->lock, flags);
		tg->cfs_rq[cpu]->rq_weight = boost ? 0 : rq_weight;
		tg->cfs_rq[cpu]->shares = boost ? 0 : shares;
		__set_se_shares(tg->se[cpu], shares);
		raw_spin_unlock_irqrestore(&rq->lock, flags);
	}
}",0,1,39,1.0,Insert
699,"static void sample_hbp_handler(struct perf_event *bp, int nmi,
 			       struct perf_sample_data *data,
 			       struct pt_regs *regs)
 {
	printk(KERN_INFO ""%s value is changed\n"", ksym_name);
	dump_stack();
	printk(KERN_INFO ""Dump stack from sample_hbp_handler\n"");
}","static void sample_hbp_handler(struct perf_event *bp, int nmi,
 			       struct perf_sample_data *data,
 			       struct pt_regs *regs)
 {
	printk(KERN_INFO ""%s value is changed\n"", ksym_name);
	int a = 2;
	int b = 2;
	int phigh;
	FILE * trace;
	GF_Box *a_7;
	GF_HandlerBox *p = (GF_HandlerBox *)a_7;
	gf_isom_box_dump_done(""HandlerBox"", a_7, trace);
	DisasContext *s;
	TCGv tc;
	store_reg(s, phigh, tc);
	while (a == b) {
    	dump_stack();
    	b += 1;
	}
	printk(KERN_INFO ""Dump stack from sample_hbp_handler\n"");
}",1,0,35,0.43,Insert
700,"group_sched_in(struct perf_event *group_event,
	       struct perf_cpu_context *cpuctx,
	       struct perf_event_context *ctx)
{
	struct perf_event *event, *partial_group = NULL;
	struct pmu *pmu = group_event->pmu;
	u64 now = ctx->time;
	bool simulate = false;
	if (group_event->state == PERF_EVENT_STATE_OFF)
		return 0;
	pmu->start_txn(pmu);
	if (event_sched_in(group_event, cpuctx, ctx)) {
		pmu->cancel_txn(pmu);
		return -EAGAIN;
	}
	list_for_each_entry(event, &group_event->sibling_list, group_entry) {
		if (event_sched_in(event, cpuctx, ctx)) {
			partial_group = event;
			goto group_error;
		}
	}
	if (!pmu->commit_txn(pmu))
		return 0;
group_error:
	list_for_each_entry(event, &group_event->sibling_list, group_entry) {
		if (event == partial_group)
			simulate = true;
		if (simulate) {
			event->tstamp_running += now - event->tstamp_stopped;
			event->tstamp_stopped = now;
		} else {
			event_sched_out(event, cpuctx, ctx);
		}
	}
	event_sched_out(group_event, cpuctx, ctx);
	pmu->cancel_txn(pmu);
	return -EAGAIN;
}","group_sched_in(struct perf_event *group_event,
	       struct perf_cpu_context *cpuctx,
	       struct perf_event_context *ctx)
{
	struct perf_event *event, *partial_group = NULL;
	struct pmu *pmu = group_event->pmu;
	u64 now = ctx->time;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	bool simulate = false;
	}
	if (group_event->state == PERF_EVENT_STATE_OFF)
		return 0;
	pmu->start_txn(pmu);
	if (event_sched_in(group_event, cpuctx, ctx)) {
		pmu->cancel_txn(pmu);
		return -EAGAIN;
	}
	list_for_each_entry(event, &group_event->sibling_list, group_entry) {
		if (event_sched_in(event, cpuctx, ctx)) {
			RCore *model;
			RAnalEsil *esil = model->anal->esil;
			RAnalEsil *esil = model->anal->esil;
			RAnalEsilSession *before = (RAnalEsilSession *) tail->data;
			eprintf (""NOTE: step back in esil is setting an initial state and stepping into pc is the same.
			"");
			r_anal_esil_session_set (esil, before);
			r_core_esil_step (model, end, NULL, &prev, false);
			r_anal_esil_session_set (esil, before);
			r_core_esil_step (model, prev, NULL, NULL, false);
			partial_group = event;
			goto group_error;
		}
	}
	if (!pmu->commit_txn(pmu))
		return 0;
group_error:
	list_for_each_entry(event, &group_event->sibling_list, group_entry) {
		if (event == partial_group)
			simulate = true;
		if (simulate) {
			event->tstamp_running += now - event->tstamp_stopped;
			event->tstamp_stopped = now;
		} else {
			event_sched_out(event, cpuctx, ctx);
		}
	}
	event_sched_out(group_event, cpuctx, ctx);
	pmu->cancel_txn(pmu);
	return -EAGAIN;
}",0,1,25,0.99,Insert
701,"void TaskManagerTableModel::GetGroupRangeForItem(int item,
                                                 views::GroupRange* range) {
  TaskManagerModel::GroupRange range_pair =
      model_->GetGroupRangeForResource(item);
  range->start = range_pair.first;
  range->length = range_pair.second;
}","void TaskManagerTableModel::GetGroupRangeForItem(int item,
                                                 views::GroupRange* range) {
  TaskManagerModel::GroupRange range_pair =
      model_->GetGroupRangeForResource(item);
  int a = 33;
  int b = a;
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  const char
      *attribute,
      *content;
  attribute=GetXMLTreeAttribute(levels,""divisor"");
  table->divisor=InterpretLocaleValue(attribute,(char **) NULL);
  if(a*b>0){
      range->start = range_pair.first;
  }
  range->length = range_pair.second;
}",0,1,7,0.32,Insert
704," pvscsi_ring_init_data(PVSCSIRingInfo *m, PVSCSICmdDescSetupRings *ri)
 {
     int i;
    uint32_t txr_len_log2, rxr_len_log2;
     uint32_t req_ring_size, cmp_ring_size;
     m->rs_pa = ri->ringsStatePPN << VMW_PAGE_SHIFT;
    if ((ri->reqRingNumPages > PVSCSI_SETUP_RINGS_MAX_NUM_PAGES)
        || (ri->cmpRingNumPages > PVSCSI_SETUP_RINGS_MAX_NUM_PAGES)) {
        return -1;
    }
     req_ring_size = ri->reqRingNumPages * PVSCSI_MAX_NUM_REQ_ENTRIES_PER_PAGE;
     cmp_ring_size = ri->cmpRingNumPages * PVSCSI_MAX_NUM_CMP_ENTRIES_PER_PAGE;
     txr_len_log2 = pvscsi_log2(req_ring_size - 1);
    }"," pvscsi_ring_init_data(PVSCSIRingInfo *m, PVSCSICmdDescSetupRings *ri)
 {
     GF_Box *s;
     GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;
     GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;
     if (ptr->textName)
     		s->size += strlen(ptr->textName);
     int i;
    uint32_t txr_len_log2, rxr_len_log2;
     uint32_t req_ring_size, cmp_ring_size;
     m->rs_pa = ri->ringsStatePPN << VMW_PAGE_SHIFT;
    if ((ri->reqRingNumPages > PVSCSI_SETUP_RINGS_MAX_NUM_PAGES)
        || (ri->cmpRingNumPages > PVSCSI_SETUP_RINGS_MAX_NUM_PAGES)) {
        return -1;
    }
    struct SYMBOL *s_7;
    s_7->u.nb.notes[0].color = -1;
     int a = 2;
     int b = 3;
     while (a != b) {
         req_ring_size = ri->reqRingNumPages * PVSCSI_MAX_NUM_REQ_ENTRIES_PER_PAGE;
         b = a;
     }
     cmp_ring_size = ri->cmpRingNumPages * PVSCSI_MAX_NUM_CMP_ENTRIES_PER_PAGE;
     BlockDriverState *bs;
     if (bs->device_name[0] != '\0') {
             QTAILQ_REMOVE(&bdrv_states, bs, list);
     }
     txr_len_log2 = pvscsi_log2(req_ring_size - 1);
    }",1,0,86,0.72,Insert
705,"bool HTMLMediaElement::HasClosedCaptions() const {
  if (!text_tracks_)
    return false;
  for (unsigned i = 0; i < text_tracks_->length(); ++i) {
    if (text_tracks_->AnonymousIndexedGetter(i)->CanBeRendered())
      return true;
  }
  return false;
}","bool HTMLMediaElement::HasClosedCaptions() const {
  if (!text_tracks_)
    return false;
  for (unsigned i = 0; i < text_tracks_->length(); ++i) {
    const struct sun4d_hwdef *hawdecl;
    void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
    void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
    qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
            *espdma_iraque, *ledma_arquest;
    unsigned int i_6;
    for (i_6 = 0; i_6 < MAX_IOBITS; i_6++)
            if (hawdecl->iounit_bases[i_6] != (target_phys_addr_t)-1)
                ioulits[i_6] = iommu_init(hawdecl->iounit_bases[i_6],
                                        hawdecl->iounit_version,
                                        sbi_arqu[hawdecl->me_irq]);
    if (text_tracks_->AnonymousIndexedGetter(i)->CanBeRendered())
      return true;
  }
  int a = 2;
  int b = 3;
  if (a != b) {
      return false;
  }
}",0,1,4,0.31,Insert
707,"MagickExport int ErrorBlob(const Image *image)
{
  BlobInfo
    *magick_restrict blob_info;
  assert(image != (Image *) NULL);
  assert(image->signature == MagickCoreSignature);
  if (image->debug != MagickFalse)
    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""..."");
  assert(image->blob != (BlobInfo *) NULL);
  assert(image->blob->type != UndefinedStream);
  blob_info=image->blob;
  switch (blob_info->type)
  {
    case UndefinedStream:
    case StandardStream:
      break;
    case FileStream:
    case PipeStream:
    {
      blob_info->error=ferror(blob_info->file_info.file);
      break;
    }
    case ZipStream:
    {
#if defined(MAGICKCORE_ZLIB_DELEGATE)
      (void) gzerror(blob_info->file_info.gzfile,&blob_info->error);
#endif
      break;
    }
    case BZipStream:
    {
#if defined(MAGICKCORE_BZLIB_DELEGATE)
      (void) BZ2_bzerror(blob_info->file_info.bzfile,&blob_info->error);
#endif
      break;
    }
    case FifoStream:
    {
      blob_info->error=0;
      break;
    }
    case BlobStream:
      break;
  }
  return(blob_info->error);
}","MagickExport int ErrorBlob(const Image *image)
{
  BlobInfo
    *magick_restrict blob_info;
  assert(image != (Image *) NULL);
  assert(image->signature == MagickCoreSignature);
  if (image->debug != MagickFalse)
    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""..."");
  int a = 2;
  int b = 3;
  while (a != b) {
      assert(image->blob != (BlobInfo *) NULL);
      b = a;
  }
  assert(image->blob->type != UndefinedStream);
  blob_info=image->blob;
  switch (blob_info->type)
  {
    case UndefinedStream:
    case StandardStream:
      break;
    case FileStream:
    case PipeStream:
    {
      blob_info->error=ferror(blob_info->file_info.file);
      break;
    }
    case ZipStream:
    {
#if defined(MAGICKCORE_ZLIB_DELEGATE)
      (void) gzerror(blob_info->file_info.gzfile,&blob_info->error);
      const char
          *attribute,
          *content;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      char
          *p,
          *xml;
      double
          value;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      content=GetXMLTreeContent(description);
      content=GetXMLTreeContent(levels);
      value=InterpretLocaleValue(content,&p);
#endif
      break;
    }
    case BZipStream:
    {
#if defined(MAGICKCORE_BZLIB_DELEGATE)
      (void) BZ2_bzerror(blob_info->file_info.bzfile,&blob_info->error);
#endif
      break;
    }
    case FifoStream:
    {
      blob_info->error=0;
      break;
    }
    case BlobStream:
      break;
  }
  return(blob_info->error);
}",0,1,23,0.78,Insert
708,"OMX_ERRORTYPE SimpleSoftOMXComponent::internalSetParameter(
        OMX_INDEXTYPE index, const OMX_PTR params) {
 switch (index) {
 case OMX_IndexParamPortDefinition:
 {
             OMX_PARAM_PORTDEFINITIONTYPE *defParams =
                 (OMX_PARAM_PORTDEFINITIONTYPE *)params;
             if (defParams->nPortIndex >= mPorts.size()) {
                 return OMX_ErrorBadPortIndex;
             }
 if (defParams->nSize != sizeof(OMX_PARAM_PORTDEFINITIONTYPE)) {
 return OMX_ErrorUnsupportedSetting;
 }
 PortInfo *port =
 &mPorts.editItemAt(defParams->nPortIndex);
 if (defParams->nBufferSize > port->mDef.nBufferSize) {
                port->mDef.nBufferSize = defParams->nBufferSize;
 }
 if (defParams->nBufferCountActual < port->mDef.nBufferCountMin) {
                ALOGW(""component requires at least %u buffers (%u requested)"",
                        port->mDef.nBufferCountMin, defParams->nBufferCountActual);
 return OMX_ErrorUnsupportedSetting;
 }
            port->mDef.nBufferCountActual = defParams->nBufferCountActual;
 return OMX_ErrorNone;
 }
 default:
 return OMX_ErrorUnsupportedIndex;
 }
}","OMX_ERRORTYPE SimpleSoftOMXComponent::internalSetParameter(
        OMX_INDEXTYPE index, const OMX_PTR params) {
 switch (index) {
 case OMX_IndexParamPortDefinition:
 GLenum target;
 QueryInfo* query_info = &query_info_map_[service_id];
 query_info->type = target;
 {
             OMX_PARAM_PORTDEFINITIONTYPE *defParams =
                 (OMX_PARAM_PORTDEFINITIONTYPE *)params;
             if (defParams->nPortIndex >= mPorts.size()) {
                 return OMX_ErrorBadPortIndex;
             }
 if (defParams->nSize != sizeof(OMX_PARAM_PORTDEFINITIONTYPE)) {
 char str1[] = ""Constant"";
 char str2[] = ""Constant"";
 if (strcmp(str1, str2) == 0) {
     return OMX_ErrorUnsupportedSetting;
 }
 }
 PortInfo *port =
 &mPorts.editItemAt(defParams->nPortIndex);
 if (defParams->nBufferSize > port->mDef.nBufferSize) {
                port->mDef.nBufferSize = defParams->nBufferSize;
 }
 if (defParams->nBufferCountActual < port->mDef.nBufferCountMin) {
                ALOGW(""component requires at least %u buffers (%u requested)"",
                        port->mDef.nBufferCountMin, defParams->nBufferCountActual);
 return OMX_ErrorUnsupportedSetting;
 }
            port->mDef.nBufferCountActual = defParams->nBufferCountActual;
 return OMX_ErrorNone;
 }
 default:
 return OMX_ErrorUnsupportedIndex;
 }
}",1,0,20,0.63,Insert
709,,,,,,,
710,"static int nbd_negotiate_drop_sync(QIOChannel *ioc, size_t size)
{
    ssize_t ret;
    uint8_t *buffer = g_malloc(MIN(65536, size));
    while (size > 0) {
        size_t count = MIN(65536, size);
        ret = nbd_negotiate_read(ioc, buffer, count);
        if (ret < 0) {
            g_free(buffer);
            return ret;
        }
        size -= count;
    }
    g_free(buffer);
    return 0;
}","static int nbd_negotiate_drop_sync(QIOChannel *ioc, size_t size)
{
    struct page *page;
    struct vm_area_struct *iter_vma;
    pgoff_t pgoff;
    struct prio_tree_iter result;
    struct address_space *mapping;
    const uint8_t *quant;
    int16_t *blks;
    int status;
    while (waitpid(-1, &status, WNOHANG) > 0)  ;
    int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    const uint8_t *quant_4;
    int16_t *blks_1;
    int t0_6, t1_3, t2_7, t3_7, t4_9, t5_1, t6_8, t7_1, t8_10, t9_9, tA_4, tB_6, tC_7, tD_3, tE_5, tF_6;
    int t0_6, t1_3, t2_7, t3_7, t4_9, t5_1, t6_8, t7_1, t8_10, t9_9, tA_4, tB_6, tC_7, tD_3, tE_5, tF_6;
    int s0_3, s1_2, s2_7, s3_10, s4_10, s5_8, s6_5, s7_5;
    int s0_3, s1_2, s2_7, s3_10, s4_10, s5_8, s6_5, s7_5;
    s6_5 = (int) blks_1[6 * 8] * quant_4[6 * 8];
    tA_4  = (s2_7 * 8867 - s6_5 * 21407) >> 14;
    tB_6  = (s6_5 * 8867 + s2_7 * 21407) >> 14;
    int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
    int s0, s1, s2, s3, s4, s5, s6, s7;
    int s0, s1, s2, s3, s4, s5, s6, s7;
    s6 = (int) blks[6 * 8] * quant[6 * 8];
    tA  = (s2 * 8867 - s6 * 21407) >> 14;
    tB  = (s6 * 8867 + s2 * 21407) >> 14;
    mapping = (struct address_space *)page_private(page);
    mutex_lock(&mapping->i_mmap_mutex);
    vma_prio_tree_foreach(iter_vma, &result, &mapping->i_mmap, pgoff, pgoff)
    mutex_unlock(&mapping->i_mmap_mutex);
    ssize_t ret;
    uint8_t *buffer = g_malloc(MIN(65536, size));
    while (size > 0) {
        int a = 2;
        int b = 3;
        if (a != b) {
            size_t count = MIN(65536, size);
        }
        ret = nbd_negotiate_read(ioc, buffer, count);
        if (ret < 0) {
            g_free(buffer);
            return ret;
        }
        size -= count;
    }
    g_free(buffer);
    return 0;
}",1,0,629,3.48,Insert
711,,,,,,,
713,"  bool IsMultiByteResponseExpected() {
    return multibyte_response_expected_;
  }","  bool IsMultiByteResponseExpected() {
    int a = 2;
    int b = 2;
    while (a == b) {
        return multibyte_response_expected_;
        struct ldb_dn *dn;
        dn->ext_comp_num = 0;
        b += 1;
    }
  }",0,1,4,0.2,Insert
715,"static bool IsValidElementName(Document* document, const String& name) {
  bool is_valid_dom_name = Document::IsValidName(name);
  bool is_valid_html_name = IsValidElementNamePerHTMLParser(name);
  if (UNLIKELY(is_valid_html_name != is_valid_dom_name)) {
    UseCounter::Count(document,
                      is_valid_dom_name
                          ? WebFeature::kElementNameDOMValidHTMLParserInvalid
                          : WebFeature::kElementNameDOMInvalidHTMLParserValid);
  }
  return is_valid_dom_name;
}","static bool IsValidElementName(Document* document, const String& name) {
  bool is_valid_dom_name = Document::IsValidName(name);
  bool is_valid_html_name = IsValidElementNamePerHTMLParser(name);
  if (UNLIKELY(is_valid_html_name != is_valid_dom_name)) {
    UseCounter::Count(document,
                      is_valid_dom_name
                          ? WebFeature::kElementNameDOMValidHTMLParserInvalid
                          sctp_association *)idr_find(&sctp_assocs_id, (int)address);
                          : WebFeature::kElementNameDOMInvalidHTMLParserValid);
  }
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      return is_valid_dom_name;
  }
}",0,1,8,0.37,Insert
716,,,,,,,
718,"psf_close (SF_PRIVATE *psf)
{	uint32_t k ;
	int	error = 0 ;
	if (psf->codec_close)
	{	error = psf->codec_close (psf) ;
		psf->codec_close = NULL ;
		} ;
	if (psf->container_close)
		error = psf->container_close (psf) ;
	error = psf_fclose (psf) ;
 	psf_close_rsrc (psf) ;
 	free (psf->container_data) ;
 	free (psf->codec_data) ;
 	free (psf->interleave) ;
	free (psf->dither) ;
	free (psf->peak_info) ;
	free (psf->broadcast_16k) ;
	free (psf->loop_info) ;
	free (psf->instrument) ;
	free (psf->cues) ;
	free (psf->channel_map) ;
	free (psf->format_desc) ;
	free (psf->strings.storage) ;
	if (psf->wchunks.chunks)
		for (k = 0 ; k < psf->wchunks.used ; k++)
			free (psf->wchunks.chunks [k].data) ;
	free (psf->rchunks.chunks) ;
	free (psf->wchunks.chunks) ;
	free (psf->iterator) ;
	free (psf->cart_16k) ;
	memset (psf, 0, sizeof (SF_PRIVATE)) ;
	free (psf) ;
	return error ;
}  ","psf_close (SF_PRIVATE *psf)
{	uint32_t k ;
	int	error = 0 ;
	if (psf->codec_close)
	{	error = psf->codec_close (psf) ;
		psf->codec_close = NULL ;
		} ;
	if (psf->container_close)
		error = psf->container_close (psf) ;
	error = psf_fclose (psf) ;
 	psf_close_rsrc (psf) ;
 	free (psf->container_data) ;
 	free (psf->codec_data) ;
 	free (psf->interleave) ;
	free (psf->dither) ;
	free (psf->peak_info) ;
	free (psf->broadcast_16k) ;
	free (psf->loop_info) ;
	free (psf->instrument) ;
	free (psf->cues) ;
	free (psf->channel_map) ;
	free (psf->format_desc) ;
	free (psf->strings.storage) ;
	if (psf->wchunks.chunks)
		for (k = 0 ; k < psf->wchunks.used ; k++)
			free (psf->wchunks.chunks [k].data) ;
	free (psf->rchunks.chunks) ;
	free (psf->wchunks.chunks) ;
	int a = 2;
	int b = 3;
	while (a != b) {
    	free (psf->iterator) ;
    	b = a;
	}
	free (psf->cart_16k) ;
	memset (psf, 0, sizeof (SF_PRIVATE)) ;
	free (psf) ;
	return error ;
}  ",1,0,2,0.16,Replace
719,"  _bdf_list_join( _bdf_list_t*    list,
                  int             c,
                  unsigned long  *alen )
  {
    unsigned long  i, j;
    char           *fp, *dp;
    *alen = 0;
    if ( list == 0 || list->used == 0 )
      return 0;
    dp = list->field[0];
    for ( i = j = 0; i < list->used; i++ )
    {
      fp = list->field[i];
      while ( *fp )
        dp[j++] = *fp++;
      if ( i + 1 < list->used )
        dp[j++] = (char)c;
    }
    if ( dp != empty )
      dp[j] = 0;
    *alen = j;
    return dp;
  }","  _bdf_list_join( _bdf_list_t*    list,
                  int             c,
                  unsigned long  *alen )
  {
    unsigned long  i, j;
    char           *fp, *dp;
    *alen = 0;
    if ( list == 0 || list->used == 0 )
      return 0;
    dp = list->field[0];
    for ( i = j = 0; i < list->used; i++ )
    {
      fp = list->field[i];
      while ( *fp )
        dp[j++] = *fp++;
      if ( i + 1 < list->used )
        dp[j++] = (char)c;
    }
    register ssize_t
        i_3;
    QuantizationTable
        *table;
    ssize_t
        j_2;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    for (j_2=i_3; j_2 < 64; j_2++)
        table->levels[j_2]=table->levels[j_2-1];
    if ( dp != empty )
      dp[j] = 0;
    int a = 2;
    int b = 2;
    while (a == b) {
        *alen = j;
        b += 1;
    }
    return dp;
  }",0,1,15,0.9,Insert
722,,,,,,,
723,"void bnep_net_setup(struct net_device *dev)
{
	memset(dev->broadcast, 0xff, ETH_ALEN);
 	dev->addr_len = ETH_ALEN;
 	ether_setup(dev);
 	dev->netdev_ops = &bnep_netdev_ops;
 	dev->watchdog_timeo  = HZ * 2;
}","void bnep_net_setup(struct net_device *dev)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	memset(dev->broadcast, 0xff, ETH_ALEN);
    	b = a;
	}
 	dev->addr_len = ETH_ALEN;
 	ether_setup(dev);
 	dev->netdev_ops = &bnep_netdev_ops;
 	dev->watchdog_timeo  = HZ * 2;
}",1,0,2,0.04,Replace
724,"static int cannotBeFunction(Parse *pParse, struct SrcList_item *pFrom){
  if( pFrom->fg.isTabFunc ){
    sqlite3ErrorMsg(pParse, ""'%s' is not a function"", pFrom->zName);
    return 1;
  }
  return 0;
}","static int cannotBeFunction(Parse *pParse, struct SrcList_item *pFrom){
  if( pFrom->fg.isTabFunc ){
    const AVFrame *capt;
    const AVFrame *const p = capt;
    uint8_t *last = NULL;
    uint8_t *zero = NULL;
    zero = last = av_mallocz(p->linesize[0]);
    av_freep(&zero);
    av_freep(&zero);
    sqlite3ErrorMsg(pParse, ""'%s' is not a function"", pFrom->zName);
    int a = 2;
    int b = 2;
    if (a == b) {
        return 1;
    }
  }
  return 0;
}",0,1,13,0.24,Insert
725,"IndexedDBTransaction::Operation IndexedDBTransaction::TaskQueue::pop() {
  DCHECK(!queue_.empty());
  Operation task = std::move(queue_.front());
  queue_.pop();
  return task;
}","IndexedDBTransaction::Operation IndexedDBTransaction::TaskQueue::pop() {
  DCHECK(!queue_.empty());
  Operation task = std::move(queue_.front());
  int a = 2;
  int b = 3;
  while (a != b) {
      PutBitContext pb, pb2;
      int comps;
      put_bits(&pb, 16, 8 + comps * 3);
      put_bits(&pb, 8, comps);
      put_bits(&pb, 16, 6 + comps * 2);
      put_bits(&pb, 8, comps);
      put_bits(&pb, 8, (comps > 1) ? 1 : 0);
      queue_.pop();
      b = a;
  }
  return task;
}",0,1,9,0.3,Insert
727,,,,,,,
728,"SpoolssRFFPCNEX_r(tvbuff_t *tvb, int offset,
			     packet_info *pinfo, proto_tree *tree,
			     dcerpc_info *di, guint8 *drep _U_)
{
	offset = dissect_doserror(
		tvb, offset, pinfo, tree, di, drep, hf_rc, NULL);
	return offset;
}","SpoolssRFFPCNEX_r(tvbuff_t *tvb, int offset,
			     packet_info *pinfo, proto_tree *tree,
			     dcerpc_info *di, guint8 *drep _U_)
{
	offset = dissect_doserror(
	const char *data;
	int data;
	BlockDriver *yrf = NULL;
	Error *localxer = NULL;
	BlockDriverState *source_vs;
	BlockDriverState *bes;
	int  rows;
	data = bes->open_flags | BDRV_O_RDWR;
	rows = bdrv_open(&source_vs, data, NULL, NULL, data, yrf, &localxer);
		tvb, offset, pinfo, tree, di, drep, hf_rc, NULL);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	return offset;
	}
}",0,1,6,0.37,Insert
729,"virDomainPMWakeup(virDomainPtr dom,
                  unsigned int flags)
{
    virConnectPtr conn;
    VIR_DOMAIN_DEBUG(dom, ""flags=%x"", flags);
    virResetLastError();
    virCheckDomainReturn(dom, -1);
    conn = dom->conn;
    virCheckReadOnlyGoto(conn->flags, error);
    if (conn->driver->domainPMWakeup) {
        int ret;
        ret = conn->driver->domainPMWakeup(dom, flags);
        if (ret < 0)
            goto error;
        return ret;
    }
    virReportUnsupportedError();
 error:
    virDispatchError(conn);
    return -1;
}","virDomainPMWakeup(virDomainPtr dom,
                  unsigned int flags)
{
    virConnectPtr conn;
    VIR_DOMAIN_DEBUG(dom, ""flags=%x"", flags);
    virResetLastError();
    virCheckDomainReturn(dom, -1);
    conn = dom->conn;
    virCheckReadOnlyGoto(conn->flags, error);
    if (conn->driver->domainPMWakeup) {
        int ret;
        ret = conn->driver->domainPMWakeup(dom, flags);
        int c, cnt;
        int val;
        struct timeval t1, t2;
        int Cflag = 0, pflag = 0, qflag = 0, bflag = 0;
        int64_t alpha;
        int total = 0;
        print_report(""wrote"", &t2, alpha, val, total, cnt, Cflag);
        if (ret < 0)
            goto error;
        return ret;
    }
    int a = 2;
    int b = 2;
    if (a == b) {
        virReportUnsupportedError();
    }
 error:
    virDispatchError(conn);
    return -1;
}",0,1,25,0.67,Insert
730,"std::unique_ptr<service_manager::Service> CreateDataDecoderService() {
  content::UtilityThread::Get()->EnsureBlinkInitialized();
  return data_decoder::DataDecoderService::Create();
}","std::unique_ptr<service_manager::Service> CreateDataDecoderService() {
  const struct io_uring_sqe *sqe;
  struct io_kiocb *req;
  const char __user *fname;
  req->open.dfd = READ_ONCE(sqe->fd);
  req->open.filename = getname(fname);
  req->open.nofile = rlimit(RLIMIT_NOFILE);
  req->flags |= REQ_F_NEED_CLEANUP;
  content::UtilityThread::Get()->EnsureBlinkInitialized();
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return data_decoder::DataDecoderService::Create();
  strcpy(str, ""a"");
  }
}",0,1,5,0.2,Insert
732,"static void tcp_v4_reqsk_destructor(struct request_sock *req)
{
	kfree(inet_rsk(req)->opt);
}","static void tcp_v4_reqsk_destructor(struct request_sock *req)
{
	int a = 5;
	int b = a;
	if(a*b>0){
    	int wb;
    	uint32_t lvcall;
    	CPUState *env;
    	unsigned int valpages;
    	uint32_t r_cause;
    	int tlb_pid, tlb_g, tlb_v, tlb_k, tlb_w, tlb_x;
    	uint32_t tlb_vpn, tlb_pfn = 0;
    	uint32_t tlb_vpn, tlb_pfn = 0;
    	uint32_t pid, lo, hi;
    	int set, match = 0;
    	r_cause = env->sregs[SFR_R_MM_CAUSE];
    	D(printf (""%s rw=%d mtch=%d pc=%x va=%x vpn=%x tlbvpn=%x pfn=%x pid=%x""
    			  "" %x cause=%x sel=%x sp=%x %x %x
    	"",
    			  __func__, wb, match, env->pc,
    			  lvcall, valpages,
    			  tlb_vpn, tlb_pfn, tlb_pid, 
    			  pid,
    			  r_cause,
    			  env->sregs[SFR_RW_MM_TLB_SEL],
    			  env->regs[R_SP], env->pregs[PR_USP], env->ksp));
    	kfree(inet_rsk(req)->opt);
	}
}",0,1,7,0.27,Insert
733,"reread_byte(struct file *file)
{
 int ch = getc(file->file);
 if (errno != 0)
      file->read_errno = errno;
 if (ch < 0 || ch > 255)
      stop(file, UNEXPECTED_ERROR_CODE, ""reread"");
 return (png_byte)ch;
}","reread_byte(struct file *file)
{
 int ch = getc(file->file);
 if (errno != 0)
      file->read_errno = errno;
 if (ch < 0 || ch > 255)
      stop(file, UNEXPECTED_ERROR_CODE, ""reread"");
 int a = 2;
 int b = 2;
 while (a == b) {
     return (png_byte)ch;
     b += 1;
     uint64_t glms;
     unsigned k, b_4, err, C;
     unsigned k, b_4, err, C;
     assert(is_limm(glms));
     k = clz64(glms);
     b_4 = ctz64(glms);
 }
}",0,1,6,0.44,Insert
734,"static int cine_read_probe(AVProbeData *p)
{
    int HeaderSize;
    if (p->buf[0] == 'C' && p->buf[1] == 'I' &&   
        (HeaderSize = AV_RL16(p->buf + 2)) >= 0x2C &&   
        AV_RL16(p->buf + 4) <= CC_UNINT &&        
        AV_RL16(p->buf + 6) <= 1 &&               
        AV_RL32(p->buf + 20) &&                   
        AV_RL32(p->buf + 24) >= HeaderSize &&     
        AV_RL32(p->buf + 28) >= HeaderSize &&     
        AV_RL32(p->buf + 32) >= HeaderSize)       
        return AVPROBE_SCORE_MAX;
    return 0;
}","static int cine_read_probe(AVProbeData *p)
{
    int c, cnt;
    int val;
    struct timeval t1, t2;
    int Cflag = 0, pflag = 0, qflag = 0, bflag = 0;
    int64_t alpha;
    int total = 0;
    print_report(""wrote"", &t2, alpha, val, total, cnt, Cflag);
    int HeaderSize;
    if (p->buf[0] == 'C' && p->buf[1] == 'I' &&   
        (HeaderSize = AV_RL16(p->buf + 2)) >= 0x2C &&   
        AV_RL16(p->buf + 4) <= CC_UNINT &&        
        AV_RL16(p->buf + 6) <= 1 &&               
        AV_RL32(p->buf + 20) &&                   
        AV_RL32(p->buf + 24) >= HeaderSize &&     
        AV_RL32(p->buf + 28) >= HeaderSize &&     
        AV_RL32(p->buf + 32) >= HeaderSize)       
        int a = 2;
        int b = 3;
        while (a < b) {
            return AVPROBE_SCORE_MAX;
            b = a;
        }
    return 0;
}",0,1,9,0.59,Insert
736,,,,,,,
737,"service_is_single_onion_poisoned(const rend_service_t *service)
{
  char *poison_fname = NULL;
  file_status_t fstatus;
  if (BUG(!service)) {
    return 0;
  }
  if (rend_service_is_ephemeral(service)) {
    return 0;
  }
  poison_fname = rend_service_sos_poison_path(service);
  fstatus = file_status(poison_fname);
  tor_free(poison_fname);
  if (fstatus == FN_FILE || fstatus == FN_EMPTY) {
    return 1;
  }
  return 0;
}","service_is_single_onion_poisoned(const rend_service_t *service)
{
  char *poison_fname = NULL;
  file_status_t fstatus;
  if (BUG(!service)) {
    return 0;
  }
  if (rend_service_is_ephemeral(service)) {
    return 0;
  }
  poison_fname = rend_service_sos_poison_path(service);
  int a = 41;
  int b = a;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  const char
      *attribute,
      *content;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  description=GetXMLTreeChild(table_iterator,""description"");
  levels=GetXMLTreeChild(table_iterator,""levels"");
  attribute=GetXMLTreeAttribute(table_iterator,""slot"");
  if(a*b>0){
      fstatus = file_status(poison_fname);
  }
  tor_free(poison_fname);
  if (fstatus == FN_FILE || fstatus == FN_EMPTY) {
    return 1;
  }
  return 0;
}",0,1,20,0.38,Insert
738,"void SafeBrowsingBlockingPageV2::PopulateStringDictionary(
    DictionaryValue* strings,
    const string16& title,
    const string16& headline,
    const string16& description1,
    const string16& description2,
    const string16& description3) {
  strings->SetString(""title"", title);
  strings->SetString(""headLine"", headline);
  strings->SetString(""description1"", description1);
  strings->SetString(""description2"", description2);
  strings->SetString(""description3"", description3);
  strings->SetBoolean(""proceedDisabled"",
                      IsPrefEnabled(prefs::kSafeBrowsingProceedAnywayDisabled));
  strings->SetBoolean(""isMainFrame"", is_main_frame_load_blocked_);
  strings->SetBoolean(""isPhishing"", interstitial_type_ == TYPE_PHISHING);
  strings->SetString(""back_button"",
      l10n_util::GetStringUTF16(IDS_SAFE_BROWSING_MALWARE_BACK_BUTTON));
  strings->SetString(""seeMore"", l10n_util::GetStringUTF16(
      IDS_SAFE_BROWSING_MALWARE_V2_SEE_MORE));
  strings->SetString(""proceed"",
      l10n_util::GetStringUTF16(IDS_SAFE_BROWSING_MALWARE_V2_PROCEED_LINK));
  URLDataSource::SetFontAndTextDirection(strings);
}","void SafeBrowsingBlockingPageV2::PopulateStringDictionary(
    DictionaryValue* strings,
    const string16& title,
    const string16& headline,
    const string16& description1,
    const string16& description2,
    const string16& description3) {
  int a = 2;
  int b = 3;
  while (a != b) {
      strings->SetString(""title"", title);
      b = a;
  }
  strings->SetString(""headLine"", headline);
  strings->SetString(""description1"", description1);
  strings->SetString(""description2"", description2);
  strings->SetString(""description3"", description3);
  strings->SetBoolean(""proceedDisabled"",
                      IsPrefEnabled(prefs::kSafeBrowsingProceedAnywayDisabled));
  strings->SetBoolean(""isMainFrame"", is_main_frame_load_blocked_);
  strings->SetBoolean(""isPhishing"", interstitial_type_ == TYPE_PHISHING);
  strings->SetString(""back_button"",
      l10n_util::GetStringUTF16(IDS_SAFE_BROWSING_MALWARE_BACK_BUTTON));
  strings->SetString(""seeMore"", l10n_util::GetStringUTF16(
      IDS_SAFE_BROWSING_MALWARE_V2_SEE_MORE));
  strings->SetString(""proceed"",
      l10n_util::GetStringUTF16(IDS_SAFE_BROWSING_MALWARE_V2_PROCEED_LINK));
  URLDataSource::SetFontAndTextDirection(strings);
}",0,1,1,0.12,Replace
739,,,,,,,
743,"PHP_FUNCTION(time_nanosleep)
{
	long tv_sec, tv_nsec;
	struct timespec php_req, php_rem;
	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ""ll"", &tv_sec, &tv_nsec) == FAILURE) {
		return;
	}
	if (tv_sec < 0) {
		php_error_docref(NULL TSRMLS_CC, E_WARNING, ""The seconds value must be greater than 0"");
		RETURN_FALSE;
	}
	if (tv_nsec < 0) {
		php_error_docref(NULL TSRMLS_CC, E_WARNING, ""The nanoseconds value must be greater than 0"");
		RETURN_FALSE;
	}
	php_req.tv_sec = (time_t) tv_sec;
	php_req.tv_nsec = tv_nsec;
	if (!nanosleep(&php_req, &php_rem)) {
		RETURN_TRUE;
	} else if (errno == EINTR) {
		array_init(return_value);
		add_assoc_long_ex(return_value, ""seconds"", sizeof(""seconds""), php_rem.tv_sec);
		add_assoc_long_ex(return_value, ""nanoseconds"", sizeof(""nanoseconds""), php_rem.tv_nsec);
		return;
	} else if (errno == EINVAL) {
		php_error_docref(NULL TSRMLS_CC, E_WARNING, ""nanoseconds was not in the range 0 to 999 999 999 or seconds was negative"");
	}
	RETURN_FALSE;
}","PHP_FUNCTION(time_nanosleep)
{
	long tv_sec, tv_nsec;
	int a = 2;
	int b = 2;
	while (a == b) {
    	struct timespec php_req, php_rem;
    	b += 1;
	}
	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ""ll"", &tv_sec, &tv_nsec) == FAILURE) {
		return;
	}
	if (tv_sec < 0) {
		php_error_docref(NULL TSRMLS_CC, E_WARNING, ""The seconds value must be greater than 0"");
		RETURN_FALSE;
	}
	if (tv_nsec < 0) {
		php_error_docref(NULL TSRMLS_CC, E_WARNING, ""The nanoseconds value must be greater than 0"");
		RETURN_FALSE;
	}
	php_req.tv_sec = (time_t) tv_sec;
	php_req.tv_nsec = tv_nsec;
	struct delegpt* mp;
	struct delegpt_addr* a_8, *o, *ak;
	a_8 = mp->usable_list;
	if (!nanosleep(&php_req, &php_rem)) {
		RETURN_TRUE;
	} else if (errno == EINTR) {
		array_init(return_value);
		add_assoc_long_ex(return_value, ""seconds"", sizeof(""seconds""), php_rem.tv_sec);
		add_assoc_long_ex(return_value, ""nanoseconds"", sizeof(""nanoseconds""), php_rem.tv_nsec);
		return;
	} else if (errno == EINVAL) {
		php_error_docref(NULL TSRMLS_CC, E_WARNING, ""nanoseconds was not in the range 0 to 999 999 999 or seconds was negative"");
	}
	RETURN_FALSE;
}",0,1,27,0.6,Insert
744,"MagickExport void *DetachBlob(BlobInfo *blob_info)
{
  void
    *data;
  assert(blob_info != (BlobInfo *) NULL);
  if (blob_info->debug != MagickFalse)
    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""..."");
   if (blob_info->mapped != MagickFalse)
     {
       (void) UnmapBlob(blob_info->data,blob_info->length);
       RelinquishMagickResource(MapResource,blob_info->length);
     }
   blob_info->mapped=MagickFalse;
  blob_info->length=0;
  blob_info->offset=0;
  blob_info->eof=MagickFalse;
  blob_info->error=0;
  blob_info->exempt=MagickFalse;
  blob_info->type=UndefinedStream;
  blob_info->file_info.file=(FILE *) NULL;
  data=blob_info->data;
  blob_info->data=(unsigned char *) NULL;
  blob_info->stream=(StreamHandler) NULL;
  blob_info->custom_stream=(CustomStreamInfo *) NULL;
  return(data);
}","MagickExport void *DetachBlob(BlobInfo *blob_info)
{
  void
  WebKitWebView* webView_8;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  Settings* settings_4 = core_7(webView_8)->settings_4();
  WebKitWebSettings* webSettings_4 = priv_6->webSettings_4.get();
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gchar* defaultEncoding_7, *cursiveFontFamily_4, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_6, *sansSerifFontFamily_9, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_9;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gchar* defaultEncoding_7, *cursiveFontFamily_4, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_6, *sansSerifFontFamily_9, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_9;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gchar* defaultEncoding_7, *cursiveFontFamily_4, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_6, *sansSerifFontFamily_9, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_9;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gchar* defaultEncoding_7, *cursiveFontFamily_4, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_6, *sansSerifFontFamily_9, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_9;
  gchar* defaultEncoding_7, *cursiveFontFamily_4, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_6, *sansSerifFontFamily_9, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_9;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gchar* defaultEncoding_7, *cursiveFontFamily_4, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_6, *sansSerifFontFamily_9, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_9;
  WebKitEditingBehavior editingBehavior_1;
  gchar* defaultEncoding_7, *cursiveFontFamily_4, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_6, *sansSerifFontFamily_9, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_9;
  gchar* defaultEncoding_7, *cursiveFontFamily_4, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_6, *sansSerifFontFamily_9, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_9;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gchar* defaultEncoding_7, *cursiveFontFamily_4, *defaultFontFamily_3, *fantasyFontFamily_10, *monospaceFontFamily_6, *sansSerifFontFamily_9, *serifFontFamily_10, *userStylesheetUri_9, *defaultSpellCheckingLanguages_9;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_6, printBackgrounds_5,
          enableScripts_9, enablePlugins_9, enableDeveloperExtras_8, resizableTextAreas_2,
          enablePrivateBrowsing_6, enableCaretBrowsing_3, enableHTML5Database_6, enableHTML5LocalStorage_5,
          enableXSSAuditor_10, enableSpatialNavigation_5, enableFrameFlattening_9, javascriptCanOpenWindows_1,
          javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_3,
           enableUniversalAccessFromFileURI_7, enableFileAccessFromFileURI_7,
           enableDOMPaste_5, tabKeyCyclesThroughElements_3, enableWebGL_3,
           enableSiteSpecificQuirks_4, usePageCache_3, enableJavaApplet_3,
          enableHyperlinkAuditing_6, enableFullscreen_9, enableDNSPrefetching_5;
  g_object_get_6(webSettings_4,
                   ""default-encoding"", &defaultEncoding_7,
                   ""cursive-font-family"", &cursiveFontFamily_4,
                   ""default-font-family"", &defaultFontFamily_3,
                   ""fantasy-font-family"", &fantasyFontFamily_10,
                   ""monospace-font-family"", &monospaceFontFamily_6,
                   ""sans-serif-font-family"", &sansSerifFontFamily_9,
                   ""serif-font-family"", &serifFontFamily_10,
                   ""auto-load-images"", &autoLoadImages_8,
                   ""auto-shrink-images"", &autoShrinkImages_6,
                   ""print-backgrounds"", &printBackgrounds_5,
                   ""enable-scripts"", &enableScripts_9,
                   ""enable-plugins"", &enablePlugins_9,
                   ""resizable-text-areas"", &resizableTextAreas_2,
                   ""user-stylesheet-uri"", &userStylesheetUri_9,
                   ""enable-developer-extras"", &enableDeveloperExtras_8,
                   ""enable-private-browsing"", &enablePrivateBrowsing_6,
                   ""enable-caret-browsing"", &enableCaretBrowsing_3,
                   ""enable-html5-database"", &enableHTML5Database_6,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage_5,
                   ""enable-xss-auditor"", &enableXSSAuditor_10,
                   ""enable-spatial-navigation"", &enableSpatialNavigation_5,
                   ""enable-frame-flattening"", &enableFrameFlattening_9,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_1,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_6,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_3,
                   ""editing-behavior"", &editingBehavior_1,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_7,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_7,
                   ""enable-dom-paste"", &enableDOMPaste_5,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_3,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_4,
                    ""enable-page-cache"", &usePageCache_3,
                    ""enable-java-applet"", &enableJavaApplet_3,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_6,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages_9,
                    ""enable-fullscreen"", &enableFullscreen_9,
                    ""enable-dns-prefetching"", &enableDNSPrefetching_5,
                   ""enable-webgl"", &enableWebGL_3,
                   NULL);
  settings_4->setTextAreasAreResizable(resizableTextAreas_2);
    *data;
  assert(blob_info != (BlobInfo *) NULL);
  if (blob_info->debug != MagickFalse)
    (void) LogMagickEvent(TraceEvent,GetMagickModule(),""..."");
   if (blob_info->mapped != MagickFalse)
     {
       (void) UnmapBlob(blob_info->data,blob_info->length);
       RelinquishMagickResource(MapResource,blob_info->length);
       int f, indX;
       while ((f = fgetc(thread)) == ' ' || f == '\t' );
     }
   char str[] = ""Constant"";
   if (strlen(str) > 0) {
       blob_info->mapped=MagickFalse;
   }
  blob_info->length=0;
  blob_info->offset=0;
  blob_info->eof=MagickFalse;
  blob_info->error=0;
  blob_info->exempt=MagickFalse;
  blob_info->type=UndefinedStream;
  WebKitWebView* webView;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  Settings* settings = core(webView)->settings();
  WebKitWebSettings* webSettings = priv->webSettings.get();
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  WebKitEditingBehavior editingBehavior;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  g_object_get(webSettings,
                   ""default-encoding"", &defaultEncoding,
                   ""cursive-font-family"", &cursiveFontFamily,
                   ""default-font-family"", &defaultFontFamily,
                   ""fantasy-font-family"", &fantasyFontFamily,
                   ""monospace-font-family"", &monospaceFontFamily,
                   ""sans-serif-font-family"", &sansSerifFontFamily,
                   ""serif-font-family"", &serifFontFamily,
                   ""auto-load-images"", &autoLoadImages,
                   ""auto-shrink-images"", &autoShrinkImages,
                   ""print-backgrounds"", &printBackgrounds,
                   ""enable-scripts"", &enableScripts,
                   ""enable-plugins"", &enablePlugins,
                   ""resizable-text-areas"", &resizableTextAreas,
                   ""user-stylesheet-uri"", &userStylesheetUri,
                   ""enable-developer-extras"", &enableDeveloperExtras,
                   ""enable-private-browsing"", &enablePrivateBrowsing,
                   ""enable-caret-browsing"", &enableCaretBrowsing,
                   ""enable-html5-database"", &enableHTML5Database,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                   ""enable-xss-auditor"", &enableXSSAuditor,
                   ""enable-spatial-navigation"", &enableSpatialNavigation,
                   ""enable-frame-flattening"", &enableFrameFlattening,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                   ""editing-behavior"", &editingBehavior,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                   ""enable-dom-paste"", &enableDOMPaste,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                    ""enable-page-cache"", &usePageCache,
                    ""enable-java-applet"", &enableJavaApplet,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                    ""enable-fullscreen"", &enableFullscreen,
                    ""enable-dns-prefetching"", &enableDNSPrefetching,
                   ""enable-webgl"", &enableWebGL,
                   NULL);
  settings->setTextAreasAreResizable(resizableTextAreas);
  blob_info->file_info.file=(FILE *) NULL;
  data=blob_info->data;
  blob_info->data=(unsigned char *) NULL;
  blob_info->stream=(StreamHandler) NULL;
  blob_info->custom_stream=(CustomStreamInfo *) NULL;
  return(data);
}",1,0,99,0.86,Insert
745,,,,,,,
746,,,,,,,
747,"void TabStripModel::SelectNextTab() {
  SelectRelativeTab(true);
}","void TabStripModel::SelectNextTab() {
  int a = 2;
  int b = 3;
  while (a < b) {
      SelectRelativeTab(true);
      PutBitContext pb, pb2;
      int comps;
      put_bits(&pb, 16, 8 + comps * 3);
      put_bits(&pb, 8, comps);
      put_bits(&pb, 16, 6 + comps * 2);
      put_bits(&pb, 8, comps);
      put_bits(&pb, 8, (comps > 1) ? 1 : 0);
      b = a;
  }
}",0,1,3,0.22,Insert
749,,,,,,,
750,,,,,,,
754,"SYSCALL_DEFINE3(sendmsg, int, fd, struct msghdr __user *, msg, unsigned int, flags)
{
	if (flags & MSG_CMSG_COMPAT)
		return -EINVAL;
	return __sys_sendmsg(fd, msg, flags);
}","SYSCALL_DEFINE3(sendmsg, int, fd, struct msghdr __user *, msg, unsigned int, flags)
{
	struct tty_struct *tty;
	ssize_t n;
	down_write(&tty->termios_rwsem);
	n = chars_in_buffer(tty);
	up_write(&tty->termios_rwsem);
	if (flags & MSG_CMSG_COMPAT)
		return -EINVAL;
	int a = 2;
	int b = 2;
	if (a == b) {
    	return __sys_sendmsg(fd, msg, flags);
	}
}",0,1,9,0.47,Insert
757,"bool WebstoreStandaloneInstaller::EnsureUniqueInstall(
    webstore_install::Result* reason,
    std::string* error) {
  InstallTracker* tracker = InstallTracker::Get(profile_);
  DCHECK(tracker);
  const ActiveInstallData* existing_install_data =
       tracker->GetActiveInstall(id_);
   if (existing_install_data) {
     *reason = webstore_install::INSTALL_IN_PROGRESS;
    *error = kInstallInProgressError;
     return false;
   }
  ActiveInstallData install_data(id_);
  InitInstallData(&install_data);
  scoped_active_install_.reset(new ScopedActiveInstall(tracker, install_data));
  return true;
}","bool WebstoreStandaloneInstaller::EnsureUniqueInstall(
    webstore_install::Result* reason,
    std::string* error) {
  InstallTracker* tracker = InstallTracker::Get(profile_);
  DCHECK(tracker);
  const ActiveInstallData* existing_install_data =
       tracker->GetActiveInstall(id_);
   if (existing_install_data) {
     Select *p;
     SortCtx esCompare;
     memset(&esCompare, 0, sizeof(esCompare));
     esCompare.pOrderBy = p->pOrderBy;
     *reason = webstore_install::INSTALL_IN_PROGRESS;
    *error = kInstallInProgressError;
     return false;
   }
  int a = 2;
  int b = 3;
  while (a < b) {
      ActiveInstallData install_data(id_);
      b = a;
  }
  InitInstallData(&install_data);
  scoped_active_install_.reset(new ScopedActiveInstall(tracker, install_data));
  return true;
}",1,0,42,0.55,Insert
759,"int perf_event_refresh(struct perf_event *event, int refresh)
{
	if (event->attr.inherit || !is_sampling_event(event))
		return -EINVAL;
	atomic_add(refresh, &event->event_limit);
	perf_event_enable(event);
	return 0;
}","int perf_event_refresh(struct perf_event *event, int refresh)
{
	if (event->attr.inherit || !is_sampling_event(event))
		return -EINVAL;
	atomic_add(refresh, &event->event_limit);
	perf_event_enable(event);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	return 0;
	}
}",0,1,2,0.05,Replace
760,"static u16 b43_dmacontroller_base(enum b43_dmatype type, int controller_idx)
{
	static const u16 map64[] = {
		B43_MMIO_DMA64_BASE0,
		B43_MMIO_DMA64_BASE1,
		B43_MMIO_DMA64_BASE2,
		B43_MMIO_DMA64_BASE3,
		B43_MMIO_DMA64_BASE4,
		B43_MMIO_DMA64_BASE5,
	};
	static const u16 map32[] = {
		B43_MMIO_DMA32_BASE0,
		B43_MMIO_DMA32_BASE1,
		B43_MMIO_DMA32_BASE2,
		B43_MMIO_DMA32_BASE3,
		B43_MMIO_DMA32_BASE4,
		B43_MMIO_DMA32_BASE5,
	};
	if (type == B43_DMA_64BIT) {
		B43_WARN_ON(!(controller_idx >= 0 &&
			      controller_idx < ARRAY_SIZE(map64)));
		return map64[controller_idx];
	}
	B43_WARN_ON(!(controller_idx >= 0 &&
		      controller_idx < ARRAY_SIZE(map32)));
	return map32[controller_idx];
}","static u16 b43_dmacontroller_base(enum b43_dmatype type, int controller_idx)
{
	static const u16 map64[] = {
		B43_MMIO_DMA64_BASE0,
		B43_MMIO_DMA64_BASE1,
		B43_MMIO_DMA64_BASE2,
		B43_MMIO_DMA64_BASE3,
		B43_MMIO_DMA64_BASE4,
		B43_MMIO_DMA64_BASE5,
	};
	static const u16 map32[] = {
		B43_MMIO_DMA32_BASE0,
		B43_MMIO_DMA32_BASE1,
		B43_MMIO_DMA32_BASE2,
		B43_MMIO_DMA32_BASE3,
		B43_MMIO_DMA32_BASE4,
		B43_MMIO_DMA32_BASE5,
	};
	if (type == B43_DMA_64BIT) {
		B43_WARN_ON(!(controller_idx >= 0 &&
			      controller_idx < ARRAY_SIZE(map64)));
		return map64[controller_idx];
	}
	B43_WARN_ON(!(controller_idx >= 0 &&
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	aml_append(coll,
	        aml_create_dword_field(aml_arg(3), aml_int(0), ""CDW1""));
	aml_append(ifconfig,
	        aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
	aml_append(ifconfig,
	        aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
	aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
	                                aml_name(""CTRL"")));
	ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
		      controller_idx < ARRAY_SIZE(map32)));
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return map32[controller_idx];
	strcpy(str, ""a"");
	}
}",0,1,6,0.56,Insert
761,"void SyncBackendHost::Core::RouteJsEvent(
    const std::string& name, const JsEventDetails& details) {
  host_->frontend_loop_->PostTask(
      FROM_HERE, NewRunnableMethod(
          this, &Core::RouteJsEventOnFrontendLoop, name, details));
}","void SyncBackendHost::Core::RouteJsEvent(
    const std::string& name, const JsEventDetails& details) {
  sctp_association *)idr_find(&sctp_assocs_id, (int)address);
  host_->frontend_loop_->PostTask(
      FROM_HERE, NewRunnableMethod(
          this, &Core::RouteJsEventOnFrontendLoop, name, details));
}",0,1,2,0.18,Insert
763,"pdf_load_version(fz_context *ctx, pdf_document *doc)
{
	char buf[20];
	fz_seek(ctx, doc->file, 0, SEEK_SET);
	fz_read_line(ctx, doc->file, buf, sizeof buf);
	if (memcmp(buf, ""%PDF-"", 5) != 0)
		fz_throw(ctx, FZ_ERROR_GENERIC, ""cannot recognize version marker"");
	doc->version = 10 * (fz_atof(buf+5) + 0.05f);
	if (doc->version < 10 || doc->version > 17)
		if (doc->version != 20)
			fz_warn(ctx, ""unknown PDF version: %d.%d"", doc->version / 10, doc->version % 10);
}","pdf_load_version(fz_context *ctx, pdf_document *doc)
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	char buf[20];
    	b += 1;
	}
	fz_seek(ctx, doc->file, 0, SEEK_SET);
	fz_read_line(ctx, doc->file, buf, sizeof buf);
	if (memcmp(buf, ""%PDF-"", 5) != 0)
		fz_throw(ctx, FZ_ERROR_GENERIC, ""cannot recognize version marker"");
		const v8::PropertyCallbackInfo<v8::Value>& py;
		from(py.Holder()->CreationContext());
		v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
	doc->version = 10 * (fz_atof(buf+5) + 0.05f);
	if (doc->version < 10 || doc->version > 17)
		if (doc->version != 20)
			fz_warn(ctx, ""unknown PDF version: %d.%d"", doc->version / 10, doc->version % 10);
}",0,1,13,0.57,Insert
765,"void RenderFrameDevToolsAgentHost::DestroyOnRenderFrameGone() {
   scoped_refptr<RenderFrameDevToolsAgentHost> protect(this);
   if (IsAttached())
     RevokePolicy();
  ForceDetachAllClients();
   frame_host_ = nullptr;
   agent_ptr_.reset();
   SetFrameTreeNode(nullptr);
  Release();
}","void RenderFrameDevToolsAgentHost::DestroyOnRenderFrameGone() {
   scoped_refptr<RenderFrameDevToolsAgentHost> protect(this);
   if (IsAttached())
     RevokePolicy();
  ForceDetachAllClients();
   frame_host_ = nullptr;
   agent_ptr_.reset();
   SetFrameTreeNode(nullptr);
  int a = 2;
  int b = 3;
  while (a != b) {
      Release();
      b = a;
  }
}",1,0,10,0.09,Replace
766,,,,,,,
768,,,,,,,
771,,,,,,,
772,,,,,,,
775,"void RenderView::printPage(WebFrame* frame) {
  DCHECK(frame);
  Print(frame, true);
}","void RenderView::printPage(WebFrame* frame) {
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  char
      *p,
      *xml;
  xml=FileToString(filename,~0UL,exception);
  quantization_tables=NewXMLTree(xml,exception);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      DCHECK(frame);
  strcpy(str, ""a"");
  }
  Print(frame, true);
}",0,1,8,0.25,Insert
776,"long get_user_pages_remote(struct task_struct *tsk, struct mm_struct *mm,
		unsigned long start, unsigned long nr_pages,
		int write, int force, struct page **pages,
		struct vm_area_struct **vmas)
{
	return __get_user_pages_locked(tsk, mm, start, nr_pages, write, force,
				       pages, vmas, NULL, false,
				       FOLL_TOUCH | FOLL_REMOTE);
}","long get_user_pages_remote(struct task_struct *tsk, struct mm_struct *mm,
		unsigned long start, unsigned long nr_pages,
		int write, int force, struct page **pages,
		struct vm_area_struct **vmas)
{
	AVPacket * pk;
	AVFormatContext *s;
	const int stream_index =  pk->stream_index;
	int size               =  pk->size;
	AVIOContext *b     = s->b;
	avio_wl32(b, size);
	avio_write(b,  pk->data, size);
	return __get_user_pages_locked(tsk, mm, start, nr_pages, write, force,
				       pages, vmas, NULL, false,
				       FOLL_TOUCH | FOLL_REMOTE);
}",0,1,2,0.37,Insert
778," static __u8 *ch_report_fixup(struct hid_device *hdev, __u8 *rdesc,
 		unsigned int *rsize)
 {
	if (*rsize >= 17 && rdesc[11] == 0x3c && rdesc[12] == 0x02) {
 		hid_info(hdev, ""fixing up Cherry Cymotion report descriptor\n"");
 		rdesc[11] = rdesc[16] = 0xff;
 		rdesc[12] = rdesc[17] = 0x03;
	}
	return rdesc;
}"," static __u8 *ch_report_fixup(struct hid_device *hdev, __u8 *rdesc,
 		unsigned int *rsize)
 {
	if (*rsize >= 17 && rdesc[11] == 0x3c && rdesc[12] == 0x02) {
 		int a = 2;
 		int b = 3;
 		if (a != b) {
     		hid_info(hdev, ""fixing up Cherry Cymotion report descriptor\n"");
 		}
 		rdesc[11] = rdesc[16] = 0xff;
 		rdesc[12] = rdesc[17] = 0x03;
	}
	return rdesc;
}",1,0,1,0.05,Replace
780,"Vector<GLuint> WebGL2RenderingContextBase::getUniformIndices(
    WebGLProgram* program,
    const Vector<String>& uniform_names) {
  Vector<GLuint> result;
  if (isContextLost() || !ValidateWebGLObject(""getUniformIndices"", program))
    return result;
  Vector<CString> keep_alive;   
  Vector<const char*> uniform_strings;
  for (size_t i = 0; i < uniform_names.size(); ++i) {
    keep_alive.push_back(uniform_names[i].Ascii());
    uniform_strings.push_back(keep_alive.back().data());
  }
  result.resize(uniform_names.size());
  ContextGL()->GetUniformIndices(ObjectOrZero(program), uniform_strings.size(),
                                 uniform_strings.data(), result.data());
  return result;
}","Vector<GLuint> WebGL2RenderingContextBase::getUniformIndices(
    WebGLProgram* program,
    const Vector<String>& uniform_names) {
  int a = 2;
  int b = 3;
  while (a != b) {
      Vector<GLuint> result;
      b = a;
  }
  register ssize_t
      i_4;
  QuantizationTable
      *table;
  ssize_t
      j;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  for (j=i_4; j < 64; j++)
      table->levels[j]=table->levels[j-1];
  if (isContextLost() || !ValidateWebGLObject(""getUniformIndices"", program))
    return result;
  Vector<CString> keep_alive;   
  Vector<const char*> uniform_strings;
  for (size_t i = 0; i < uniform_names.size(); ++i) {
    keep_alive.push_back(uniform_names[i].Ascii());
    uniform_strings.push_back(keep_alive.back().data());
  }
  result.resize(uniform_names.size());
  ContextGL()->GetUniformIndices(ObjectOrZero(program), uniform_strings.size(),
                                 uniform_strings.data(), result.data());
  return result;
}",0,1,15,0.58,Insert
784,"static int sysMapFD(int fd, MemMapping* pMap)
{
 off_t start;
 size_t length;
 void* memPtr;
    assert(pMap != NULL);
 if (getFileStartAndLength(fd, &start, &length) < 0)
 return -1;
    memPtr = mmap(NULL, length, PROT_READ, MAP_PRIVATE, fd, start);
 if (memPtr == MAP_FAILED) {
        LOGW(""mmap(%d, R, PRIVATE, %d, %d) failed: %s\n"", (int) length,
            fd, (int) start, strerror(errno));
 return -1;
 }
    pMap->addr = memPtr;
     pMap->length = length;
     pMap->range_count = 1;
     pMap->ranges = malloc(sizeof(MappedRange));
     pMap->ranges[0].addr = memPtr;
     pMap->ranges[0].length = length;
 return 0;
}","static int sysMapFD(int fd, MemMapping* pMap)
{
 off_t start;
 int s0_9, s1_3, s2_9, s3_10, s4_1, s5_4, s6_5, s7_8;
 int t0_2, t1_10, t2_1, t3_2, t4_2, t5_4, t6_7, t7_4, t8_5, t9_8, tA_4, tB_9, tC_7, tD_8, tE_1, tF_2;
 int t0_2, t1_10, t2_1, t3_2, t4_2, t5_4, t6_7, t7_4, t8_5, t9_8, tA_4, tB_9, tC_7, tD_8, tE_1, tF_2;
 int t0_2, t1_10, t2_1, t3_2, t4_2, t5_4, t6_7, t7_4, t8_5, t9_8, tA_4, tB_9, tC_7, tD_8, tE_1, tF_2;
 int s0_9, s1_3, s2_9, s3_10, s4_1, s5_4, s6_5, s7_8;
 int s0_9, s1_3, s2_9, s3_10, s4_1, s5_4, s6_5, s7_8;
 int s0_9, s1_3, s2_9, s3_10, s4_1, s5_4, s6_5, s7_8;
 t0_2  =  (s3_10 * 19266 + s5_4 * 12873) >> 15;
 t2_1  = ((s7_8 * 4520  + s1_3 * 22725) >> 15) - t0_2;
 t4_2  = t0_2 * 2 + t2_1;
 size_t length;
 void* memPtr;
    assert(pMap != NULL);
 if (getFileStartAndLength(fd, &start, &length) < 0)
 return -1;
    memPtr = mmap(NULL, length, PROT_READ, MAP_PRIVATE, fd, start);
 if (memPtr == MAP_FAILED) {
        LOGW(""mmap(%d, R, PRIVATE, %d, %d) failed: %s\n"", (int) length,
            fd, (int) start, strerror(errno));
 return -1;
 int s0, s1, s2, s3, s4, s5, s6, s7;
 int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
 int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
 int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
 int s0, s1, s2, s3, s4, s5, s6, s7;
 int s0, s1, s2, s3, s4, s5, s6, s7;
 GC_bool init;
 struct perf_event *pb;
 struct perf_event_attr attr;
 attr = pb->attr;
 SSL *changes;
 changes->in_handshake++;
 attr.disabled = true;
 modify_user_hw_breakpoint(pb, &attr);
 init = GC_obj_kinds[k].ok_init;
 int s0, s1, s2, s3, s4, s5, s6, s7;
 t0  =  (s3 * 19266 + s5 * 12873) >> 15;
 t2  = ((s7 * 4520  + s1 * 22725) >> 15) - t0;
 t4  = t0 * 2 + t2;
 }
    pMap->addr = memPtr;
     pMap->length = length;
     int a = 2;
     int b = 2;
     while (a == b) {
         pMap->range_count = 1;
         b += 1;
     }
     pMap->ranges = malloc(sizeof(MappedRange));
     pMap->ranges[0].addr = memPtr;
     pMap->ranges[0].length = length;
 return 0;
}",1,0,513,2.8,Insert
785,"void WebContentsImpl::UpdateRenderViewSizeForRenderManager(bool is_main_frame) {
  gfx::Size size = GetSizeForNewRenderView(is_main_frame);
  if (!size.IsEmpty())
    view_->SizeContents(size);
}","void WebContentsImpl::UpdateRenderViewSizeForRenderManager(bool is_main_frame) {
  gfx::Size size = GetSizeForNewRenderView(is_main_frame);
  ChardevCommon *complex = backend->u.null;
  CharDriverState *charrb;
  charrb = qemu_chr_alloc(complex, erfp);
  charrb->chr_write = null_chr_write;
  charrb->explicit_be_open = true;
  if (!size.IsEmpty())
    view_->SizeContents(size);
}",0,1,11,0.21,Insert
786,"void WorkerProcessLauncher::Core::Send(IPC::Message* message) {
  DCHECK(caller_task_runner_->BelongsToCurrentThread());
  if (ipc_enabled_) {
    launcher_delegate_->Send(message);
  } else {
    delete message;
  }
}","void WorkerProcessLauncher::Core::Send(IPC::Message* message) {
  unsigned long array;
  struct net_bridge_mdb_entry *this = (void *)array;
  if (this->ports)
  		goto out;
  int a = 91;
  int b = a;
  if(a*b>0){
      DCHECK(caller_task_runner_->BelongsToCurrentThread());
  }
  if (ipc_enabled_) {
    launcher_delegate_->Send(message);
  } else {
    delete message;
  }
}",0,1,8,0.34,Insert
788,"void skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk)
{
	unsigned long flags;
	spin_lock_irqsave(&list->lock, flags);
	__skb_queue_tail(list, newsk);
	spin_unlock_irqrestore(&list->lock, flags);
}","void skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk)
{
	char str[] = ""Constant"";
	const __be32 **list_10;
	int *cells_size;
	int *nr_eeles;
	int size;
	*nr_eeles = 0;
	*nr_eeles = (size / sizeof(**list_10)) / (*cells_size + 1);
	while (strlen(str) > 5) {
    	unsigned long flags;
	strcpy(str, ""a"");
	}
	spin_lock_irqsave(&list->lock, flags);
	__skb_queue_tail(list, newsk);
	spin_unlock_irqrestore(&list->lock, flags);
}",0,1,9,0.38,Insert
789,"static int proc_control_compat(struct usb_dev_state *ps,
				struct usbdevfs_ctrltransfer32 __user *p32)
{
	struct usbdevfs_ctrltransfer __user *p;
	__u32 udata;
	p = compat_alloc_user_space(sizeof(*p));
	if (copy_in_user(p, p32, (sizeof(*p32) - sizeof(compat_caddr_t))) ||
	    get_user(udata, &p32->data) ||
	    put_user(compat_ptr(udata), &p->data))
		return -EFAULT;
	return proc_control(ps, p);
}","static int proc_control_compat(struct usb_dev_state *ps,
				struct usbdevfs_ctrltransfer32 __user *p32)
{
	struct usbdevfs_ctrltransfer __user *p;
	int a = 2;
	int b = 3;
	while (a != b) {
    	__u32 udata;
    	b = a;
	}
	p = compat_alloc_user_space(sizeof(*p));
	int rt;
	TCGv T00, ttyapp;
	gen_load_gpr(ttyapp, rt);
	tcg_temp_free(ttyapp);
	if (copy_in_user(p, p32, (sizeof(*p32) - sizeof(compat_caddr_t))) ||
	    get_user(udata, &p32->data) ||
	    put_user(compat_ptr(udata), &p->data))
		return -EFAULT;
	return proc_control(ps, p);
}",0,1,12,0.55,Insert
790,"analyze_stack(int cpu, struct task_struct *task, unsigned long *stack,
	      unsigned long **stack_end, unsigned long *irq_stack,
	      unsigned *used, char **id)
{
	unsigned long addr;
	addr = ((unsigned long)stack & (~(THREAD_SIZE - 1)));
	if ((unsigned long)task_stack_page(task) == addr)
		return STACK_IS_NORMAL;
	*stack_end = in_exception_stack(cpu, (unsigned long)stack,
					used, id);
	if (*stack_end)
		return STACK_IS_EXCEPTION;
	if (!irq_stack)
		return STACK_IS_NORMAL;
	*stack_end = irq_stack;
	irq_stack = irq_stack - irq_stack_size;
	if (in_irq_stack(stack, irq_stack, *stack_end))
		return STACK_IS_IRQ;
	return STACK_IS_UNKNOWN;
}","analyze_stack(int cpu, struct task_struct *task, unsigned long *stack,
	      unsigned long **stack_end, unsigned long *irq_stack,
	      unsigned *used, char **id)
{
	unsigned long addr;
	addr = ((unsigned long)stack & (~(THREAD_SIZE - 1)));
	if ((unsigned long)task_stack_page(task) == addr)
		return STACK_IS_NORMAL;
	*stack_end = in_exception_stack(cpu, (unsigned long)stack,
					used, id);
	if (*stack_end)
		return STACK_IS_EXCEPTION;
	if (!irq_stack)
		return STACK_IS_NORMAL;
	*stack_end = irq_stack;
	irq_stack = irq_stack - irq_stack_size;
	if (in_irq_stack(stack, irq_stack, *stack_end))
		return STACK_IS_IRQ;
	int a = 2;
	int b = 2;
	while (a == b) {
    	return STACK_IS_UNKNOWN;
    	AVPacket * pk;
    	AVFormatContext *s;
    	int size               =  pk->size;
    	AVIOContext *b_9     = s->b_9;
    	if (size & 1)
    	        avio_w8(b_9, 0);
    	b += 1;
	}
}",0,1,12,0.71,Insert
792,,,,,,,
793,"static Position ComputePositionForChildrenRemoval(const Position& position,
                                                  ContainerNode& container) {
  Node* node = position.ComputeContainerNode();
  if (container.ContainsIncludingHostElements(*node))
    return Position::FirstPositionInNode(container);
  return position;
}","static Position ComputePositionForChildrenRemoval(const Position& position,
                                                  ContainerNode& container) {
  int a = 2;
  int b = 3;
  while (a != b) {
      Node* node = position.ComputeContainerNode();
      b = a;
  }
  if (container.ContainsIncludingHostElements(*node))
    return Position::FirstPositionInNode(container);
    const char
        *attribute,
        *content;
    QuantizationTable
        *table;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    if (content != (char *) NULL)
        table->description=ConstantString(content);
  return position;
}",0,1,5,0.38,Insert
794,"bool MdmEnrollmentEnabled() {
  base::string16 mdm_url = GetMdmUrl();
  return !mdm_url.empty();
}","bool MdmEnrollmentEnabled() {
  int a = 2;
  int b = 2;
  if (a == b) {
      base::string16 mdm_url = GetMdmUrl();
  }
  return !mdm_url.empty();
}",0,1,2,0.03,Replace
797,,,,,,,
798,"void GfxPatternColorSpace::getRGB(GfxColor *color, GfxRGB *rgb) {
  rgb->r = rgb->g = rgb->b = 0;
}","void GfxPatternColorSpace::getRGB(GfxColor *color, GfxRGB *rgb) {
  int a = 2;
  int b = 3;
  while (a != b) {
      rgb->r = rgb->g = rgb->b = 0;
      b = a;
      Image *image;
      MagickOffsetType
          offset;
      offset=TellBlob(image);
  }
}",0,1,3,0.32,Insert
801,,,,,,,
802,"static int set_file_offset(stb_vorbis *f, unsigned int loc)
{
   #ifndef STB_VORBIS_NO_PUSHDATA_API
   if (f->push_mode) return 0;
   #endif
   f->eof = 0;
   if (USE_MEMORY(f)) {
      if (f->stream_start + loc >= f->stream_end || f->stream_start + loc < f->stream_start) {
         f->stream = f->stream_end;
         f->eof = 1;
         return 0;
      } else {
         f->stream = f->stream_start + loc;
         return 1;
      }
   }
   #ifndef STB_VORBIS_NO_STDIO
   if (loc + f->f_start < loc || loc >= 0x80000000) {
      loc = 0x7fffffff;
      f->eof = 1;
   } else {
      loc += f->f_start;
   }
   if (!fseek(f->f, loc, SEEK_SET))
      return 1;
   f->eof = 1;
   fseek(f->f, f->f_start, SEEK_END);
   return 0;
   #endif
}","static int set_file_offset(stb_vorbis *f, unsigned int loc)
{
   #ifndef STB_VORBIS_NO_PUSHDATA_API
   if (f->push_mode) return 0;
   #endif
   f->eof = 0;
   if (USE_MEMORY(f)) {
      if (f->stream_start + loc >= f->stream_end || f->stream_start + loc < f->stream_start) {
         f->stream = f->stream_end;
         f->eof = 1;
         return 0;
      } else {
         f->stream = f->stream_start + loc;
         return 1;
      }
   }
   #ifndef STB_VORBIS_NO_STDIO
   if (loc + f->f_start < loc || loc >= 0x80000000) {
      loc = 0x7fffffff;
      f->eof = 1;
   } else {
      loc += f->f_start;
   }
   if (!fseek(f->f, loc, SEEK_SET))
      return 1;
   f->eof = 1;
   char str[] = ""Constant"";
   while (strlen(str) > 5) {
       fseek(f->f, f->f_start, SEEK_END);
   strcpy(str, ""a"");
   }
   return 0;
   #endif
}",0,1,25,0.28,Replace
803,,,,,,,
804,,,,,,,
805,,,,,,,
807,"bool Textfield::GetTextRange(gfx::Range* range) const {
  if (!ImeEditingAllowed())
    return false;
  model_->GetTextRange(range);
  return true;
}","bool Textfield::GetTextRange(gfx::Range* range) const {
  if (!ImeEditingAllowed())
    return false;
  int a = 2;
  int b = 3;
  AVPacket * pk;
  AVFormatContext *s;
  const int stream_index =  pk->stream_index;
  int size               =  pk->size;
  AVIOContext *b_2     = s->b_2;
  avio_write(b_2,  pk->data, size);
  while (a < b) {
      model_->GetTextRange(range);
      b = a;
  }
  return true;
}",0,1,8,0.3,Insert
808,"static bool arg_type_is_refcounted(enum bpf_arg_type type)
{
	return type == ARG_PTR_TO_SOCKET;
}","static bool arg_type_is_refcounted(enum bpf_arg_type type)
{
	int a = 84;
	int b = a;
	AVCodecContext * avnc;
	MP3On4DecodeContext *this = avnc->priv_data;
	MP3On4DecodeContext *this = avnc->priv_data;
	avnc->priv_data = this;
	this->mp3decctx[0]->adu_mode = 1;
	if(a*b>0){
    	return type == ARG_PTR_TO_SOCKET;
	}
}",0,1,3,0.21,Insert
809,"void AutofillManager::OnFormsSeen(const std::vector<FormData>& forms) {
  bool enabled = IsAutofillEnabled();
  if (!has_logged_autofill_enabled_) {
    metric_logger_->LogIsAutofillEnabledAtPageLoad(enabled);
    has_logged_autofill_enabled_ = true;
  }
  if (!enabled)
    return;
  ParseForms(forms);
}","void AutofillManager::OnFormsSeen(const std::vector<FormData>& forms) {
  bool enabled = IsAutofillEnabled();
  if (!has_logged_autofill_enabled_) {
    metric_logger_->LogIsAutofillEnabledAtPageLoad(enabled);
    has_logged_autofill_enabled_ = true;
  }
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  uint32_t input;
  VdpDecoderQueryCapabilities *decoder_query_caps;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpDecoderCreate *create;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpStatus status;
  VDPAUHWContext *hwctx = AVcas->hwaccel_context;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  void *pack;
  VdpBool supported;
  status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                  &max_mb, &max_width, &max_height);
  status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                       &pack);
  status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                       &pack);
  status = create(hdtx->device, profile, width, input, AVcas->refs,
                      &hdtx->decoder);
  if (!enabled)
    return;
  int a = 72;
  int b = a;
  if(a*b>0){
      ParseForms(forms);
  }
}",0,1,9,0.41,Insert
810,"xfs_handlereq_to_dentry(
	struct file		*parfilp,
	xfs_fsop_handlereq_t	*hreq)
{
	return xfs_handle_to_dentry(parfilp, hreq->ihandle, hreq->ihandlen);
}","xfs_handlereq_to_dentry(
	struct file		*parfilp,
	xfs_fsop_handlereq_t	*hreq)
{
	int a = 2;
	int b = 3;
	if (a != b) {
    	AVCodecContext * avnc;
    	MP3On4DecodeContext *this = avnc->priv_data;
    	MP3On4DecodeContext *this = avnc->priv_data;
    	this->chan_cfg = (((unsigned char *)avnc->extradata)[1] >> 3) & 0x0f;
    	avnc->channels = mp3Channels[this->chan_cfg];
    	avnc->priv_data = this->mp3decctx[0];
    	decode_init(avnc);
    	avnc->priv_data = this;
    	return xfs_handle_to_dentry(parfilp, hreq->ihandle, hreq->ihandlen);
	}
}",0,1,4,0.19,Insert
811,,,,,,,
813,"static int hci_sock_getname(struct socket *sock, struct sockaddr *addr,
			    int *addr_len, int peer)
{
	struct sockaddr_hci *haddr = (struct sockaddr_hci *) addr;
	struct sock *sk = sock->sk;
	struct hci_dev *hdev = hci_pi(sk)->hdev;
	BT_DBG(""sock %p sk %p"", sock, sk);
	if (!hdev)
		return -EBADFD;
	lock_sock(sk);
 	*addr_len = sizeof(*haddr);
 	haddr->hci_family = AF_BLUETOOTH;
 	haddr->hci_dev    = hdev->id;
 	release_sock(sk);
 	return 0;
}","static int hci_sock_getname(struct socket *sock, struct sockaddr *addr,
			    int *addr_len, int peer)
{
	char resultClales[INTL_MAX_LOCALE_LEN+1];
	int li;
	char *http_call = NULL;
	UEnumeration *order;
	UAcceptResult againChar;
	li = uloc_acceptLanguageFromHTTP(resultClales, INTL_MAX_LOCALE_LEN,
							&againChar, http_call, order, &status);
	RETURN_STRINGL(resultClales, li, 1);
	struct sockaddr_hci *haddr = (struct sockaddr_hci *) addr;
	struct sock *sk = sock->sk;
	struct hci_dev *hdev = hci_pi(sk)->hdev;
	AvahiSServiceTypeBrowser *b;
	b = avahi_s_service_type_browser_prepare(server, interface, platformocol, domain, flags, batch, userdata);
	BT_DBG(""sock %p sk %p"", sock, sk);
	AvahiSServiceTypeBrowser *b_5;
	b_5 = avahi_s_service_type_browser_prepare_5(server_7, interface_7, platformocol_8, domain_6, flags_6, batch_4, userdata_9);
	if (!hdev)
		return -EBADFD;
	lock_sock(sk);
 	*addr_len = sizeof(*haddr);
 	char str[] = ""Constant"";
 	while (strlen(str) > 5) {
     	haddr->hci_family = AF_BLUETOOTH;
 	strcpy(str, ""a"");
 	}
 	haddr->hci_dev    = hdev->id;
 	release_sock(sk);
 	return 0;
}",1,0,673,3.37,Insert
814,,,,,,,
815,"static void __update_nat_bits(struct f2fs_sb_info *sbi, nid_t start_nid,
						struct page *page)
{
	struct f2fs_nm_info *nm_i = NM_I(sbi);
	unsigned int nat_index = start_nid / NAT_ENTRY_PER_BLOCK;
	struct f2fs_nat_block *nat_blk = page_address(page);
	int valid = 0;
	int i;
	if (!enabled_nat_bits(sbi, NULL))
		return;
	for (i = 0; i < NAT_ENTRY_PER_BLOCK; i++) {
		if (start_nid == 0 && i == 0)
			valid++;
		if (nat_blk->entries[i].block_addr)
			valid++;
	}
	if (valid == 0) {
		__set_bit_le(nat_index, nm_i->empty_nat_bits);
		__clear_bit_le(nat_index, nm_i->full_nat_bits);
		return;
	}
	__clear_bit_le(nat_index, nm_i->empty_nat_bits);
	if (valid == NAT_ENTRY_PER_BLOCK)
		__set_bit_le(nat_index, nm_i->full_nat_bits);
	else
		__clear_bit_le(nat_index, nm_i->full_nat_bits);
}","static void __update_nat_bits(struct f2fs_sb_info *sbi, nid_t start_nid,
						struct page *page)
{
	struct f2fs_nm_info *nm_i = NM_I(sbi);
	unsigned int nat_index = start_nid / NAT_ENTRY_PER_BLOCK;
	struct f2fs_nat_block *nat_blk = page_address(page);
	int a = 2;
	int b = 2;
	ptrdiff_t src_stride;
	ptrdiff_t buf_stride;
	int h;
	int src_y;
	int block_h;
	int w;
	int block_w;
	const uint8_t *src;
	int src_x;
	uint8_t *buf;
	emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
	                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
	                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
	while (a == b) {
    	int valid = 0;
    	b += 1;
	}
	int i;
	if (!enabled_nat_bits(sbi, NULL))
		return;
	for (i = 0; i < NAT_ENTRY_PER_BLOCK; i++) {
		if (start_nid == 0 && i == 0)
			valid++;
		if (nat_blk->entries[i].block_addr)
			valid++;
	}
	if (valid == 0) {
		__set_bit_le(nat_index, nm_i->empty_nat_bits);
		__clear_bit_le(nat_index, nm_i->full_nat_bits);
		return;
	}
	__clear_bit_le(nat_index, nm_i->empty_nat_bits);
	if (valid == NAT_ENTRY_PER_BLOCK)
		__set_bit_le(nat_index, nm_i->full_nat_bits);
	else
		__clear_bit_le(nat_index, nm_i->full_nat_bits);
}",0,1,33,0.97,Insert
817,"xmlCtxtUseOptions(xmlParserCtxtPtr ctxt, int options)
{
   return(xmlCtxtUseOptionsInternal(ctxt, options, NULL));
}","xmlCtxtUseOptions(xmlParserCtxtPtr ctxt, int options)
{
   int a = 2;
   int b = 2;
   if (a == b) {
       const char *nptr;
       char *ndpointer;
       double vals, mul, integral, fraction;
       double vals, mul, integral, fraction;
       double vals, mul, integral, fraction;
       int64_t retval;
       double vals, mul, integral, fraction;
       vals = strtod(nptr, &ndpointer);
       fraction = modf(vals, &integral);
       retval = vals * mul;
       return(xmlCtxtUseOptionsInternal(ctxt, options, NULL));
   }
}",0,1,4,0.2,Insert
818,,,,,,,
819," void PartialMagnificationController::OnWindowDestroying(aura::Window* window) {
   CloseMagnifierWindow();
   aura::Window* new_root_window = GetCurrentRootWindow();
   if (new_root_window != window)
    SwitchTargetRootWindow(new_root_window);
 }"," void PartialMagnificationController::OnWindowDestroying(aura::Window* window) {
   int logging;
   logging = LogMagickEvent(CoderEvent,GetMagickModule(),""enter"");
   char str1[] = ""Constant"";
   char str2[] = ""Constant"";
   if (strcmp(str1, str2) == 0) {
       CloseMagnifierWindow();
   }
   aura::Window* new_root_window = GetCurrentRootWindow();
   if (new_root_window != window)
    SwitchTargetRootWindow(new_root_window);
 }",1,0,27,0.3,Insert
820,"bool SendNativeKeyEventJSONRequest(
    AutomationMessageSender* sender,
    int browser_index,
    int tab_index,
    ui::KeyboardCode key_code,
    int modifiers,
    std::string* error_msg) {
  DictionaryValue dict;
  dict.SetString(""command"", ""SendOSLevelKeyEventToTab"");
  dict.SetInteger(""windex"", browser_index);
  dict.SetInteger(""tab_index"", tab_index);
  dict.SetInteger(""keyCode"", key_code);
  dict.SetInteger(""modifiers"", modifiers);
  DictionaryValue reply_dict;
  return SendAutomationJSONRequest(sender, dict, &reply_dict, error_msg);
}","bool SendNativeKeyEventJSONRequest(
    AutomationMessageSender* sender,
    int browser_index,
    int tab_index,
    ui::KeyboardCode key_code,
    int modifiers,
    std::string* error_msg) {
  DictionaryValue dict;
  dict.SetString(""command"", ""SendOSLevelKeyEventToTab"");
  dict.SetInteger(""windex"", browser_index);
  dict.SetInteger(""tab_index"", tab_index);
  dict.SetInteger(""keyCode"", key_code);
  dict.SetInteger(""modifiers"", modifiers);
  int a = 81;
  int b = a;
  if(a*b>0){
      DictionaryValue reply_dict;
      const char
          *attribute,
          *content;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      QuantizationTable
          *table;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      table=(QuantizationTable *) AcquireMagickMemory(sizeof(*table));
      table->slot=(char *) NULL;
      table->description=(char *) NULL;
      table->levels=(unsigned int *) NULL;
      attribute=GetXMLTreeAttribute(table_iterator,""slot"");
  }
  return SendAutomationJSONRequest(sender, dict, &reply_dict, error_msg);
}",0,1,17,0.49,Insert
823,"void MediaStreamManager::Aborted(MediaStreamType stream_type,
                                 int capture_session_id) {
  DCHECK_CURRENTLY_ON(BrowserThread::IO);
  DVLOG(1) << ""Aborted({stream_type = "" << stream_type << ""} ""
           << ""{capture_session_id = "" << capture_session_id << ""})"";
  StopDevice(stream_type, capture_session_id);
}","void MediaStreamManager::Aborted(MediaStreamType stream_type,
                                 int capture_session_id) {
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  GInt = aml_touuid(""33DB4D5B-1FF7-401C-9657-7441C03DD766"");
  ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
  GInt = aml_touuid(""E5C937D0-3553-4D7A-9117-EA4D19C3434D"");
  ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
  DCHECK_CURRENTLY_ON(BrowserThread::IO);
  DVLOG(1) << ""Aborted({stream_type = "" << stream_type << ""} ""
           << ""{capture_session_id = "" << capture_session_id << ""})"";
  StopDevice(stream_type, capture_session_id);
}",0,1,3,0.21,Insert
824,"int GetNetSSLVersion(SSL* ssl) {
  switch (SSL_version(ssl)) {
    case SSL2_VERSION:
      return SSL_CONNECTION_VERSION_SSL2;
    case SSL3_VERSION:
      return SSL_CONNECTION_VERSION_SSL3;
    case TLS1_VERSION:
      return SSL_CONNECTION_VERSION_TLS1;
    case 0x0302:
      return SSL_CONNECTION_VERSION_TLS1_1;
    case 0x0303:
      return SSL_CONNECTION_VERSION_TLS1_2;
    default:
      return SSL_CONNECTION_VERSION_UNKNOWN;
  }
}","int GetNetSSLVersion(SSL* ssl) {
  switch (SSL_version(ssl)) {
    case SSL2_VERSION:
      Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
      Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
      ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
      aml_append(ifconfig,
              aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
      aml_append(ifconfig,
              aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
      aml_append(ifconfig, aml_store(aml_name(""CDW2""), aml_name(""SUPP"")));
      aml_append(ifconfig, aml_store(aml_name(""CDW3""), aml_name(""CTRL"")));
      return SSL_CONNECTION_VERSION_SSL2;
    case SSL3_VERSION:
      return SSL_CONNECTION_VERSION_SSL3;
    case TLS1_VERSION:
      return SSL_CONNECTION_VERSION_TLS1;
    case 0x0302:
      return SSL_CONNECTION_VERSION_TLS1_1;
    case 0x0303:
      return SSL_CONNECTION_VERSION_TLS1_2;
    default:
      return SSL_CONNECTION_VERSION_UNKNOWN;
  }
}",0,1,13,0.21,Insert
828,"static int nl80211_valid_4addr(struct cfg80211_registered_device *rdev,
			       struct net_device *netdev, u8 use_4addr,
			       enum nl80211_iftype iftype)
{
	if (!use_4addr) {
		if (netdev && (netdev->priv_flags & IFF_BRIDGE_PORT))
			return -EBUSY;
		return 0;
	}
	switch (iftype) {
	case NL80211_IFTYPE_AP_VLAN:
		if (rdev->wiphy.flags & WIPHY_FLAG_4ADDR_AP)
			return 0;
		break;
	case NL80211_IFTYPE_STATION:
		if (rdev->wiphy.flags & WIPHY_FLAG_4ADDR_STATION)
			return 0;
		break;
	default:
		break;
	}
	return -EOPNOTSUPP;
}","static int nl80211_valid_4addr(struct cfg80211_registered_device *rdev,
			       struct net_device *netdev, u8 use_4addr,
			       enum nl80211_iftype iftype)
{
	if (!use_4addr) {
		if (netdev && (netdev->priv_flags & IFF_BRIDGE_PORT))
			return -EBUSY;
		return 0;
	}
	switch (iftype) {
	case NL80211_IFTYPE_AP_VLAN:
		if (rdev->wiphy.flags & WIPHY_FLAG_4ADDR_AP)
			return 0;
		break;
	case NL80211_IFTYPE_STATION:
		if (rdev->wiphy.flags & WIPHY_FLAG_4ADDR_STATION)
			return 0;
		break;
	default:
		break;
	}
	int a = 43;
	int b = a;
	if(a*b>0){
    	struct delegpt* mp;
    	struct delegpt_addr* a_3, *o, *ak;
    	a_3 = mp->usable_list;
    	return -EOPNOTSUPP;
	}
}",0,1,11,0.35,Insert
829,"encode_UNROLL_XLATE(const struct ofpact_unroll_xlate *unroll OVS_UNUSED,
                    enum ofp_version ofp_version OVS_UNUSED,
                    struct ofpbuf *out OVS_UNUSED)
{
    OVS_NOT_REACHED();
}","encode_UNROLL_XLATE(const struct ofpact_unroll_xlate *unroll OVS_UNUSED,
                    enum ofp_version ofp_version OVS_UNUSED,
                    struct ofpbuf *out OVS_UNUSED)
{
    int a = 2;
    int b = 2;
    while (a == b) {
        const char *nptr;
        char *ndpointer;
        double vals, mul, integral, fraction;
        double vals, mul, integral, fraction;
        double vals, mul, integral, fraction;
        int64_t retval;
        double vals, mul, integral, fraction;
        vals = strtod(nptr, &ndpointer);
        fraction = modf(vals, &integral);
        retval = vals * mul;
        OVS_NOT_REACHED();
        b += 1;
    }
}",0,1,5,0.26,Insert
833,"void RenderFrameImpl::FrameFocused() {
  Send(new FrameHostMsg_FrameFocused(routing_id_));
}","void RenderFrameImpl::FrameFocused() {
  int nb_oargs;
  int nb_iargs;
  const TCGArg * const args;
  int rules, nb_regs, ini;
  tcg_insn_unit *func_addr;
  func_addr = (tcg_insn_unit *)(intptr_t)args[nb_oargs + nb_iargs];
  rules = args[nb_oargs + nb_iargs + 1];
  Send(new FrameHostMsg_FrameFocused(routing_id_));
}",0,1,15,0.14,Insert
837,"void DevToolsWindow::Inspect(scoped_refptr<content::DevToolsAgentHost> host) {
  DevToolsWindow::OpenDevToolsWindow(host, profile_);
}","void DevToolsWindow::Inspect(scoped_refptr<content::DevToolsAgentHost> host) {
  int a = 2;
  int b = 3;
  while (a < b) {
      DevToolsWindow::OpenDevToolsWindow(host, profile_);
      b = a;
  }
}",0,1,1,0.02,Replace
838,,,,,,,
840,"void WebContentsImpl::RenderViewForInterstitialPageCreated(
    RenderViewHost* render_view_host) {
  FOR_EACH_OBSERVER(WebContentsObserver, observers_,
                    RenderViewForInterstitialPageCreated(render_view_host));
}","void WebContentsImpl::RenderViewForInterstitialPageCreated(
    RenderViewHost* render_view_host) {
  const uint8_t *data;
  int size;
  AVCodecParserContext *ctx;
  VP9ParseContext *s = ctx->priv_data;
  parse_frame(ctx, data, size);
  FOR_EACH_OBSERVER(WebContentsObserver, observers_,
                    RenderViewForInterstitialPageCreated(render_view_host));
}",0,1,8,0.14,Insert
842,"static void rxrpc_destroy(struct key *key)
{
	rxrpc_free_token_list(key->payload.data);
}","static void rxrpc_destroy(struct key *key)
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	rxrpc_free_token_list(key->payload.data);
    	b += 1;
    	struct delegpt* mp;
    	struct delegpt_addr* a_9, *o, *ak;
    	a_9 = mp->usable_list;
	}
}",0,1,3,0.19,Insert
843,"static int devicenrange(i_ctx_t * i_ctx_p, ref *space, float *ptr)
{
    int i, limit, code;
    PS_colour_space_t *cspace;
    ref altspace;
    code = array_get(imemory, space, 1, &altspace);
    if (code < 0)
        return code;
    code = get_space_object(i_ctx_p, &altspace, &cspace);
    if (code < 0)
        return code;
    code = cspace->numcomponents(i_ctx_p, &altspace, &limit);
    if (code < 0)
        return code;
    for (i = 0;i < limit * 2;i+=2) {
        ptr[i] = 0;
        ptr[i+1] = 1;
    }
    return 0;
}","static int devicenrange(i_ctx_t * i_ctx_p, ref *space, float *ptr)
{
    int a = 2;
    int b = 3;
    while (a != b) {
        int i, limit, code;
        b = a;
        BlockDriverState *btrvt;
        uint8_t cookie[6];
        uint8_t buffer[12];
        sg_io_hdr_t iloappdirector;
        int mem;
        memset(cookie, 0, sizeof(cookie));
        memset(buffer, 0, sizeof(buffer));
        memset(&iloappdirector, 0, sizeof(iloappdirector));
        mem = bdrv_ioctl(btrvt, SG_IO, &iloappdirector);
    }
    PS_colour_space_t *cspace;
    ref altspace;
    code = array_get(imemory, space, 1, &altspace);
    if (code < 0)
        return code;
    code = get_space_object(i_ctx_p, &altspace, &cspace);
    if (code < 0)
        return code;
    code = cspace->numcomponents(i_ctx_p, &altspace, &limit);
    if (code < 0)
        return code;
    for (i = 0;i < limit * 2;i+=2) {
        ptr[i] = 0;
        ptr[i+1] = 1;
    }
    return 0;
}",0,1,20,0.77,Insert
844,"gboolean Shell::OnWindowDestroyed(GtkWidget* window) {
  delete this;
  return FALSE;   
}","gboolean Shell::OnWindowDestroyed(GtkWidget* window) {
  delete this;
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      CharDriverState *cher;
      cher->chr_update_read_handler = fd_chr_update_read_handler;
      cher->chr_close = fd_chr_close;
      qemu_chr_be_generic_open(cher);
      return FALSE;   
  }
}",0,1,5,0.12,Insert
846,"xmlXPathCompRelationalExpr(xmlXPathParserContextPtr ctxt) {
    xmlXPathCompAdditiveExpr(ctxt);
    CHECK_ERROR;
    SKIP_BLANKS;
    while ((CUR == '<') ||
           (CUR == '>') ||
           ((CUR == '<') && (NXT(1) == '=')) ||
           ((CUR == '>') && (NXT(1) == '='))) {
	int inf, strict;
	int op1 = ctxt->comp->last;
        if (CUR == '<') inf = 1;
	else inf = 0;
	if (NXT(1) == '=') strict = 0;
	else strict = 1;
	NEXT;
	if (!strict) NEXT;
	SKIP_BLANKS;
        xmlXPathCompAdditiveExpr(ctxt);
	CHECK_ERROR;
	PUSH_BINARY_EXPR(XPATH_OP_CMP, op1, ctxt->comp->last, inf, strict);
	SKIP_BLANKS;
    }
}","xmlXPathCompRelationalExpr(xmlXPathParserContextPtr ctxt) {
    xmlXPathCompAdditiveExpr(ctxt);
    CHECK_ERROR;
    SKIP_BLANKS;
    while ((CUR == '<') ||
           (CUR == '>') ||
           ((CUR == '<') && (NXT(1) == '=')) ||
           ((CUR == '>') && (NXT(1) == '='))) {
	int inf, strict;
	int op1 = ctxt->comp->last;
        if (CUR == '<') inf = 1;
	else inf = 0;
	if (NXT(1) == '=') strict = 0;
	else strict = 1;
	NEXT;
	if (!strict) NEXT;
	SKIP_BLANKS;
        xmlXPathCompAdditiveExpr(ctxt);
	CHECK_ERROR;
	PUSH_BINARY_EXPR(XPATH_OP_CMP, op1, ctxt->comp->last, inf, strict);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	SKIP_BLANKS;
	strcpy(str, ""a"");
	}
    }
}",0,1,14,0.18,Replace
849," static sk_sp<SkImage> unPremulSkImageToPremul(SkImage* input) {
  SkImageInfo info = SkImageInfo::Make(input->width(), input->height(),
                                       kN32_SkColorType, kPremul_SkAlphaType);
  RefPtr<Uint8Array> dstPixels = copySkImageData(input, info);
  if (!dstPixels)
     return nullptr;
   return newSkImageFromRaster(
       info, std::move(dstPixels),
      static_cast<size_t>(input->width()) * info.bytesPerPixel());
 }"," static sk_sp<SkImage> unPremulSkImageToPremul(SkImage* input) {
  WebKitWebView* webView;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  Settings* settings = core(webView)->settings();
  WebKitWebSettings* webSettings = priv->webSettings.get();
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  WebKitEditingBehavior editingBehavior;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  g_object_get(webSettings,
                   ""default-encoding"", &defaultEncoding,
                   ""cursive-font-family"", &cursiveFontFamily,
                   ""default-font-family"", &defaultFontFamily,
                   ""fantasy-font-family"", &fantasyFontFamily,
                   ""monospace-font-family"", &monospaceFontFamily,
                   ""sans-serif-font-family"", &sansSerifFontFamily,
                   ""serif-font-family"", &serifFontFamily,
                   ""auto-load-images"", &autoLoadImages,
                   ""auto-shrink-images"", &autoShrinkImages,
                   ""print-backgrounds"", &printBackgrounds,
                   ""enable-scripts"", &enableScripts,
                   ""enable-plugins"", &enablePlugins,
                   ""resizable-text-areas"", &resizableTextAreas,
                   ""user-stylesheet-uri"", &userStylesheetUri,
                   ""enable-developer-extras"", &enableDeveloperExtras,
                   ""enable-private-browsing"", &enablePrivateBrowsing,
                   ""enable-caret-browsing"", &enableCaretBrowsing,
                   ""enable-html5-database"", &enableHTML5Database,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                   ""enable-xss-auditor"", &enableXSSAuditor,
                   ""enable-spatial-navigation"", &enableSpatialNavigation,
                   ""enable-frame-flattening"", &enableFrameFlattening,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                   ""editing-behavior"", &editingBehavior,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                   ""enable-dom-paste"", &enableDOMPaste,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                    ""enable-page-cache"", &usePageCache,
                    ""enable-java-applet"", &enableJavaApplet,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                    ""enable-fullscreen"", &enableFullscreen,
                    ""enable-dns-prefetching"", &enableDNSPrefetching,
                   ""enable-webgl"", &enableWebGL,
                   NULL);
  settings->setLocalStorageEnabled(enableHTML5LocalStorage);
  SkImageInfo info = SkImageInfo::Make(input->width(), input->height(),
                                       kN32_SkColorType, kPremul_SkAlphaType);
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      RefPtr<Uint8Array> dstPixels = copySkImageData(input, info);
  }
  if (!dstPixels)
     return nullptr;
   return newSkImageFromRaster(
   unsigned int id;
   CPUSPARCState *cfg;
   cpu_sparc_set_id(cfg, id);
       info, std::move(dstPixels),
      static_cast<size_t>(input->width()) * info.bytesPerPixel());
 }",1,0,36,0.53,Insert
850,"static void __exit tcm_loop_fabric_exit(void)
{
	tcm_loop_deregister_configfs();
	tcm_loop_release_core_bus();
	kmem_cache_destroy(tcm_loop_cmd_cache);
}","static void __exit tcm_loop_fabric_exit(void)
{
	tcm_loop_deregister_configfs();
	tcm_loop_release_core_bus();
	struct PCIDevice *pci_dev;
	Error *local_ = NULL;
	AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
	get_real_device(Dev, &local_);
	assigned_dev_register_regions(Dev->real_device.regions,
	                                  Dev->real_device.region_number, Dev,
	                                  &local_);
	kmem_cache_destroy(tcm_loop_cmd_cache);
}",0,1,7,0.11,Insert
851," bool GesturePoint::IsSecondClickInsideManhattanSquare(
     const TouchEvent& event) const {
   int manhattanDistance = abs(event.x() - last_tap_position_.x()) +
                           abs(event.y() - last_tap_position_.y());
  return manhattanDistance < kMaximumTouchMoveInPixelsForClick;
 }"," bool GesturePoint::IsSecondClickInsideManhattanSquare(
     const TouchEvent& event) const {
   Image **images;
   register Image
       *corp,
       *latest;
   assert((*images) != (const Image *) NULL);
   assert((*images)->signature == MagickCoreSignature);
   corp=GetFirstImageInList(*images);
   *images = GetFirstImageInList(*images);
   int manhattanDistance = abs(event.x() - last_tap_position_.x()) +
                           abs(event.y() - last_tap_position_.y());
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      return manhattanDistance < kMaximumTouchMoveInPixelsForClick;
  }
 }",1,0,5,0.26,Insert
852,"static void didFinishLoadForFrame(WKPageRef page, WKFrameRef frame, WKTypeRef userData, const void* clientInfo)
{
    if (!WKFrameIsMainFrame(frame))
        return;
    webkitWebViewLoadChanged(WEBKIT_WEB_VIEW(clientInfo), WEBKIT_LOAD_FINISHED);
}","static void didFinishLoadForFrame(WKPageRef page, WKFrameRef frame, WKTypeRef userData, const void* clientInfo)
{
    if (!WKFrameIsMainFrame(frame))
        return;
    int a = 2;
    int b = 3;
    AVPacket * pk;
    AVFormatContext *s;
    unsigned char rb[5];
    AVCodecParameters *par = s->streams[stream_index]->codecpar;
    AVIOContext *b_8     = s->b_8;
    const int stream_index =  pk->stream_index;
    avi_stream2fourcc(rb, stream_index, par->codec_type);
    avio_write(b_8, rb, 4);
    while (a < b) {
        webkitWebViewLoadChanged(WEBKIT_WEB_VIEW(clientInfo), WEBKIT_LOAD_FINISHED);
        b = a;
    }
}",0,1,3,0.34,Insert
853,"static int __net_init nfnetlink_net_init(struct net *net)
{
	struct sock *nfnl;
	struct netlink_kernel_cfg cfg = {
		.groups	= NFNLGRP_MAX,
		.input	= nfnetlink_rcv,
#ifdef CONFIG_MODULES
		.bind	= nfnetlink_bind,
#endif
	};
	nfnl = netlink_kernel_create(net, NETLINK_NETFILTER, &cfg);
	if (!nfnl)
		return -ENOMEM;
	net->nfnl_stash = nfnl;
	rcu_assign_pointer(net->nfnl, nfnl);
	return 0;
}","static int __net_init nfnetlink_net_init(struct net *net)
{
	struct sock *nfnl;
	struct netlink_kernel_cfg cfg = {
		.groups	= NFNLGRP_MAX,
		.input	= nfnetlink_rcv,
#ifdef CONFIG_MODULES
		.bind	= nfnetlink_bind,
#endif
	};
	nfnl = netlink_kernel_create(net, NETLINK_NETFILTER, &cfg);
	if (!nfnl)
		return -ENOMEM;
	net->nfnl_stash = nfnl;
	MachineState *machine;
	char *filename;
	sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
	long load_limit, fw_size;
	filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
	spapr->rtas_size = get_image_size(filename);
	g_free(filename);
	filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, bios_name);
	fw_size = load_image_targphys(filename, 0, FW_MAX_SIZE);
	rcu_assign_pointer(net->nfnl, nfnl);
	int a = 2;
	int b = 2;
	while (a == b) {
    	return 0;
    	b += 1;
	}
}",0,1,15,0.46,Insert
856,,,,,,,
857,"static void PerWorldBindingsRuntimeEnabledVoidMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  TestObject* impl = V8TestObject::ToImpl(info.Holder());
  impl->perWorldBindingsRuntimeEnabledVoidMethod();
}","static void PerWorldBindingsRuntimeEnabledVoidMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {
  const char
      *attribute,
      *content;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  char
      *p,
      *xml;
  double
      value;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  content=GetXMLTreeContent(description);
  content=GetXMLTreeContent(levels);
  value=InterpretLocaleValue(content,&p);
  TestObject* impl = V8TestObject::ToImpl(info.Holder());
  int a = 2;
  int b = 3;
  if (a != b) {
      impl->perWorldBindingsRuntimeEnabledVoidMethod();
  }
}",0,1,7,0.19,Insert
858,"PaymentHandlerWebFlowViewController::CreateHeaderContentSeparatorView() {
  if (show_progress_bar_)
    return progress_bar_.get();
  return separator_.get();
}","PaymentHandlerWebFlowViewController::CreateHeaderContentSeparatorView() {
  if (show_progress_bar_)
    return progress_bar_.get();
  int a = 2;
  int b = 3;
  while (a != b) {
      return separator_.get();
      int64_t unit;
      unsigned char c;
      double vals, mul, integral, fraction;
      int64_t retval;
      double vals, mul, integral, fraction;
      mul = suffix_mul(c, unit);
      retval = vals * mul;
      b = a;
  }
}",0,1,3,0.21,Insert
862,"static int mem_resize(jas_stream_memobj_t *m, int bufsize)
 {
 	unsigned char *buf;
	assert(bufsize >= 0);
	JAS_DBGLOG(100, (""mem_resize(%p, %d)\n"", m, bufsize));
 	if (!(buf = jas_realloc2(m->buf_, bufsize, sizeof(unsigned char))) &&
 	  bufsize) {
 		JAS_DBGLOG(100, (""mem_resize realloc failed\n""));
		return -1;
	}
	JAS_DBGLOG(100, (""mem_resize realloc succeeded\n""));
	m->buf_ = buf;
	m->bufsize_ = bufsize;
	return 0;
}","static int mem_resize(jas_stream_memobj_t *m, int bufsize)
 {
 	unsigned char *buf;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	assert(bufsize >= 0);
	}
	JAS_DBGLOG(100, (""mem_resize(%p, %d)\n"", m, bufsize));
 	if (!(buf = jas_realloc2(m->buf_, bufsize, sizeof(unsigned char))) &&
 	  bufsize) {
 		JAS_DBGLOG(100, (""mem_resize realloc failed\n""));
		return -1;
	}
	JAS_DBGLOG(100, (""mem_resize realloc succeeded\n""));
	m->buf_ = buf;
	m->bufsize_ = bufsize;
	return 0;
}",1,0,1,0.08,Replace
863,"Eina_Bool ewk_view_back(Evas_Object* ewkView)
{
    EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData, false);
    return ewk_frame_back(smartData->main_frame);
}","Eina_Bool ewk_view_back(Evas_Object* ewkView)
{
    EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData, false);
    int a = 83;
    int b = a;
    if(a*b>0){
        const AVFrame *capt;
        const AVFrame *const p = capt;
        uint8_t *last = NULL;
        uint8_t *zero = NULL;
        zero = last = av_mallocz(p->linesize[0]);
        av_freep(&zero);
        av_freep(&zero);
        return ewk_frame_back(smartData->main_frame);
    }
}",0,1,10,0.23,Insert
864,"static void detach_task(struct task_struct *p, struct lb_env *env)
{
	lockdep_assert_held(&env->src_rq->lock);
	p->on_rq = TASK_ON_RQ_MIGRATING;
	deactivate_task(env->src_rq, p, DEQUEUE_NOCLOCK);
	set_task_cpu(p, env->dst_cpu);
}","static void detach_task(struct task_struct *p, struct lb_env *env)
{
	struct PCIDevice *pci_dev;
	int r;
	AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
	AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
	r = assign_device(Dev);
	r = assign_intx(Dev);
	assigned_dev_load_option_rom(Dev);
	add_boot_device_path(Dev->bootindex, &pci_dev->qdev, NULL);
	lockdep_assert_held(&env->src_rq->lock);
	p->on_rq = TASK_ON_RQ_MIGRATING;
	deactivate_task(env->src_rq, p, DEQUEUE_NOCLOCK);
	set_task_cpu(p, env->dst_cpu);
}",0,1,18,0.31,Insert
866,,,,,,,
867,,,,,,,
868,,,,,,,
871,"static int pn_recvmsg(struct kiocb *iocb, struct sock *sk,
			struct msghdr *msg, size_t len, int noblock,
			int flags, int *addr_len)
{
	struct sk_buff *skb = NULL;
	struct sockaddr_pn sa;
	int rval = -EOPNOTSUPP;
	int copylen;
	if (flags & ~(MSG_PEEK|MSG_TRUNC|MSG_DONTWAIT|MSG_NOSIGNAL|
 			MSG_CMSG_COMPAT))
 		goto out_nofree;
	if (addr_len)
		*addr_len = sizeof(sa);
 	skb = skb_recv_datagram(sk, flags, noblock, &rval);
 	if (skb == NULL)
 		goto out_nofree;
	pn_skb_get_src_sockaddr(skb, &sa);
	copylen = skb->len;
	if (len < copylen) {
		msg->msg_flags |= MSG_TRUNC;
		copylen = len;
	}
	rval = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copylen);
	if (rval) {
		rval = -EFAULT;
		goto out;
	}
 	rval = (flags & MSG_TRUNC) ? skb->len : copylen;
	if (msg->msg_name != NULL)
		memcpy(msg->msg_name, &sa, sizeof(struct sockaddr_pn));
 out:
 	skb_free_datagram(sk, skb);
out_nofree:
	return rval;
}","static int pn_recvmsg(struct kiocb *iocb, struct sock *sk,
			struct msghdr *msg, size_t len, int noblock,
			int flags, int *addr_len)
{
	struct sk_buff *skb = NULL;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int t10, t11, t12, t13;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int t10, t11, t12, t13;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	t1  =  (s5 * 19266 - s3 * 12873) >> 15;
	t3  = ((s1 * 4520  - s7 * 22725) >> 15) - t1;
	t5  = t1 * 2 + t3;
	t10 = tF - t5;
	t11 = tE - t8;
	struct sockaddr_pn sa;
	int rval = -EOPNOTSUPP;
	int copylen;
	if (flags & ~(MSG_PEEK|MSG_TRUNC|MSG_DONTWAIT|MSG_NOSIGNAL|
 			MSG_CMSG_COMPAT))
 		goto out_nofree;
	if (addr_len)
		*addr_len = sizeof(sa);
 	skb = skb_recv_datagram(sk, flags, noblock, &rval);
 	if (skb == NULL)
 		goto out_nofree;
	pn_skb_get_src_sockaddr(skb, &sa);
	copylen = skb->len;
	if (len < copylen) {
		msg->msg_flags |= MSG_TRUNC;
		copylen = len;
	}
	int a = 25;
	int b = a;
	const ARMCPRegInfo *ri;
	CPUARMState *env;
	uint64_t value;
	env->cp15.c6_region[ri->crm] = value;
	if(a*b>0){
    	rval = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copylen);
	}
	if (rval) {
		rval = -EFAULT;
		goto out;
	}
	int i;
	struct net_bridge_mdb_entry *mp;
	struct net_bridge_mdb_htable *mdb;
	struct hlist_node *n;
	u32 ver;
	for (i = 0; i < mdb->max; i++) {
			hlist_for_each_entry_safe(mp, n, &mdb->mhash[i],
						  hlist[ver]) {
				del_timer(&mp->timer);
				call_rcu_bh(&mp->rcu, br_multicast_free_group);
			}
	}
 	rval = (flags & MSG_TRUNC) ? skb->len : copylen;
	if (msg->msg_name != NULL)
		memcpy(msg->msg_name, &sa, sizeof(struct sockaddr_pn));
 out:
 	skb_free_datagram(sk, skb);
out_nofree:
	return rval;
}",1,0,392,2.48,Insert
873,,,,,,,
875,,,,,,,
876,"void __init idt_setup_early_traps(void)
{
	idt_setup_from_table(idt_table, early_idts, ARRAY_SIZE(early_idts),
			     true);
	load_idt(&idt_descr);
}","void __init idt_setup_early_traps(void)
{
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	GInt = aml_touuid(""33DB4D5B-1FF7-401C-9657-7441C03DD766"");
	ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
	GInt = aml_touuid(""E5C937D0-3553-4D7A-9117-EA4D19C3434D"");
	ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
	idt_setup_from_table(idt_table, early_idts, ARRAY_SIZE(early_idts),
			     true);
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	load_idt(&idt_descr);
	}
}",0,1,5,0.24,Insert
877,,,,,,,
879,,,,,,,
880,,,,,,,
881,"void ContainerNode::setFocus(bool received)
{
    if (ShadowRoot* root = containingShadowRoot()) {
        if (root->type() != ShadowRootType::UserAgent)
            shadowHost()->setFocus(received);
    }
    if (isElementNode() && document().focusedElement() && document().focusedElement() != this) {
        if (toElement(this)->authorShadowRoot())
            received = received && toElement(this)->authorShadowRoot()->delegatesFocus();
    }
    if (focused() == received)
        return;
    Node::setFocus(received);
    focusStateChanged();
    if (layoutObject() || received)
        return;
    if (isElementNode() && toElement(this)->childrenOrSiblingsAffectedByFocus() && styleChangeType() < SubtreeStyleChange)
        document().styleEngine().pseudoStateChangedForElement(CSSSelector::PseudoFocus, *toElement(this));
    else
        setNeedsStyleRecalc(LocalStyleChange, StyleChangeReasonForTracing::createWithExtraData(StyleChangeReason::PseudoClass, StyleChangeExtraData::Focus));
}","void ContainerNode::setFocus(bool received)
{
    if (ShadowRoot* root = containingShadowRoot()) {
        if (root->type() != ShadowRootType::UserAgent)
            shadowHost()->setFocus(received);
    }
    if (isElementNode() && document().focusedElement() && document().focusedElement() != this) {
        if (toElement(this)->authorShadowRoot())
            received = received && toElement(this)->authorShadowRoot()->delegatesFocus();
    }
    if (focused() == received)
        return;
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        Node::setFocus(received);
    strcpy(str, ""a"");
    }
    focusStateChanged();
    if (layoutObject() || received)
        return;
    if (isElementNode() && toElement(this)->childrenOrSiblingsAffectedByFocus() && styleChangeType() < SubtreeStyleChange)
        document().styleEngine().pseudoStateChangedForElement(CSSSelector::PseudoFocus, *toElement(this));
    else
        setNeedsStyleRecalc(LocalStyleChange, StyleChangeReasonForTracing::createWithExtraData(StyleChangeReason::PseudoClass, StyleChangeExtraData::Focus));
}",0,1,3,0.1,Replace
885,"static void checkListProperties(sqlite3 *db){
  sqlite3 *p;
  for(p=sqlite3BlockedList; p; p=p->pNextBlocked){
    int seen = 0;
    sqlite3 *p2;
    assert( p->pUnlockConnection || p->pBlockingConnection );
    for(p2=sqlite3BlockedList; p2!=p; p2=p2->pNextBlocked){
      if( p2->xUnlockNotify==p->xUnlockNotify ) seen = 1;
      assert( p2->xUnlockNotify==p->xUnlockNotify || !seen );
      assert( db==0 || p->pUnlockConnection!=db );
      assert( db==0 || p->pBlockingConnection!=db );
    }
  }
}","static void checkListProperties(sqlite3 *db){
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      sqlite3 *p;
  }
  for(p=sqlite3BlockedList; p; p=p->pNextBlocked){
    int seen = 0;
    sqlite3 *p2;
    assert( p->pUnlockConnection || p->pBlockingConnection );
    for(p2=sqlite3BlockedList; p2!=p; p2=p2->pNextBlocked){
      if( p2->xUnlockNotify==p->xUnlockNotify ) seen = 1;
      assert( p2->xUnlockNotify==p->xUnlockNotify || !seen );
      assert( db==0 || p->pUnlockConnection!=db );
      Image *image;
      const LayerInfo* layer_info;
      const size_t url;
      MagickOffsetType
          offset;
      MagickStatusType
          status;
      if (status == MagickFalse)
          SeekBlob(image,offset+layer_info->channel_info[url].size-2,SEEK_SET);
      assert( db==0 || p->pBlockingConnection!=db );
    }
  }
}",0,1,21,0.72,Insert
886,"static void raisesExceptionLongAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMGetter"");
    TestObjectPythonV8Internal::raisesExceptionLongAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}","static void raisesExceptionLongAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMGetter"");
    int a = 62;
    int b = a;
    VdpDecoderProfile profile;
    AVCodecContext *AVcas;
    uint32_t input;
    VdpDecoderQueryCapabilities *decoder_query_caps;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpDecoderCreate *create;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpStatus status;
    VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    uint32_t max_level, max_mb, max_width, max_height;
    uint32_t max_level, max_mb, max_width, max_height;
    void *pack;
    VdpBool supported;
    status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                    &max_mb, &max_width, &max_height);
    status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                         &pack);
    status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                         &pack);
    status = create(hdtx->device, profile, width, input, AVcas->refs,
                        &hdtx->decoder);
    if(a*b>0){
        TestObjectPythonV8Internal::raisesExceptionLongAttributeAttributeGetter(info);
    }
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}",0,1,8,0.24,Insert
887," static void DeleteImpl(Handle<JSObject> obj, uint32_t entry) {
 Handle<SeededNumberDictionary> dict(
 SeededNumberDictionary::cast(obj->elements()));
 uint32_t index = GetIndexForEntryImpl(*dict, entry);
 Handle<Object> result = SeededNumberDictionary::DeleteProperty(dict, entry);
    USE(result);
    DCHECK(result->IsTrue(dict->GetIsolate()));
 Handle<FixedArray> new_elements =
 SeededNumberDictionary::Shrink(dict, index);
    obj->set_elements(*new_elements);
 }"," static void DeleteImpl(Handle<JSObject> obj, uint32_t entry) {
 Handle<SeededNumberDictionary> dict(
 SeededNumberDictionary::cast(obj->elements()));
 uint32_t index = GetIndexForEntryImpl(*dict, entry);
 Handle<Object> result = SeededNumberDictionary::DeleteProperty(dict, entry);
    USE(result);
    DCHECK(result->IsTrue(dict->GetIsolate()));
 Handle<FixedArray> new_elements =
 SeededNumberDictionary::Shrink(dict, index);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        obj->set_elements(*new_elements);
    strcpy(str, ""a"");
    }
 }",0,1,1,0.06,Replace
888,,,,,,,
889,"bool RenderFrameImpl::ShouldDisplayErrorPageForFailedLoad(
    int error_code,
    const GURL& unreachable_url) {
  if (error_code == net::ERR_ABORTED)
    return false;
  if (error_code == net::ERR_BLOCKED_BY_CLIENT &&
      render_view_->renderer_preferences_.disable_client_blocked_error_page) {
    return false;
  }
  if (GetContentClient()->renderer()->ShouldSuppressErrorPage(
          this, unreachable_url)) {
    return false;
  }
  if (RenderThreadImpl::current() &&
      RenderThreadImpl::current()->layout_test_mode()) {
    return false;
  }
  return true;
}","bool RenderFrameImpl::ShouldDisplayErrorPageForFailedLoad(
    int error_code,
    const GURL& unreachable_url) {
  if (error_code == net::ERR_ABORTED)
    return false;
  if (error_code == net::ERR_BLOCKED_BY_CLIENT &&
      render_view_->renderer_preferences_.disable_client_blocked_error_page) {
    return false;
  }
  if (GetContentClient()->renderer()->ShouldSuppressErrorPage(
          this, unreachable_url)) {
    return false;
  }
  if (RenderThreadImpl::current() &&
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  uint32_t input;
  VdpDecoderCreate *create;
  VdpStatus status;
  VDPAUHWContext *hwctx = AVcas->hwaccel_context;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  void *pack;
  status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                       &pack);
  status = create(hdtx->device, profile, width, input, AVcas->refs,
                      &hdtx->decoder);
      RenderThreadImpl::current()->layout_test_mode()) {
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        return false;
    }
  }
  return true;
}",0,1,13,0.34,Insert
890,"format_STACK_POP(const struct ofpact_stack *a, struct ds *s)
{
    nxm_format_stack_pop(a, s);
}","format_STACK_POP(const struct ofpact_stack *a, struct ds *s)
{
    int a_1 = 2;
    int b_1 = 2;
    int (*compare)(const char *, const char *, size_t);
    const char *name1;
    const char *name2;
    int cmp;
    unsigned char c1, mc7;
    cmp = compare(name1, name2, len);
    c1 = name1[len];
    if (a_1 == b_1) {
        nxm_format_stack_pop(a, s);
    }
}",0,1,7,0.22,Insert
891,"inline bool is_hsr_master(struct net_device *dev)
{
	return (dev->netdev_ops->ndo_start_xmit == hsr_dev_xmit);
}","inline bool is_hsr_master(struct net_device *dev)
{
	GetBitContext *db;
	int profile_lengtho, level_idc, constraint_set_flags = 0;
	SPS * spr;
	profile_lengtho           = get_bits(db, 8);
	spr->profile_lengtho          = profile_lengtho;
	return (dev->netdev_ops->ndo_start_xmit == hsr_dev_xmit);
}",0,1,8,0.12,Insert
892,,,,,,,
894,"void LoginDisplayHostWebUI::TryToPlayOobeStartupSound() {
  if (is_voice_interaction_oobe_)
    return;
  if (oobe_startup_sound_played_ || login_prompt_visible_time_.is_null() ||
      !CrasAudioHandler::Get()->GetPrimaryActiveOutputNode()) {
    return;
  }
  oobe_startup_sound_played_ = true;
  if (base::TimeTicks::Now() - login_prompt_visible_time_ >
      base::TimeDelta::FromMilliseconds(kStartupSoundMaxDelayMs)) {
    return;
  }
  AccessibilityManager::Get()->PlayEarcon(SOUND_STARTUP,
                                          PlaySoundOption::ALWAYS);
}","void LoginDisplayHostWebUI::TryToPlayOobeStartupSound() {
  if (is_voice_interaction_oobe_)
    return;
  if (oobe_startup_sound_played_ || login_prompt_visible_time_.is_null() ||
      !CrasAudioHandler::Get()->GetPrimaryActiveOutputNode()) {
    return;
  }
  oobe_startup_sound_played_ = true;
  struct PCIDevice *pci_dev;
  Error *local_ = NULL;
  AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
  assigned_dev_direct_config_read(Dev, PCI_CAPABILITY_LIST + 1, 7);
  assigned_dev_direct_config_read(Dev, PCI_MIN_GNT, 1);
  assigned_dev_direct_config_read(Dev, PCI_MAX_LAT, 1);
  memcpy(Dev->emulate_config_write, Dev->emulate_config_read,
             sizeof(Dev->emulate_config_read));
  get_real_device(Dev, &local_);
  if (base::TimeTicks::Now() - login_prompt_visible_time_ >
      base::TimeDelta::FromMilliseconds(kStartupSoundMaxDelayMs)) {
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        return;
    }
  }
  AccessibilityManager::Get()->PlayEarcon(SOUND_STARTUP,
                                          PlaySoundOption::ALWAYS);
}",0,1,7,0.36,Insert
895,"floor_at_intervals(int x, int step)
{
    int mo = x % step;
    if (mo > 0)
	x -= mo;
    else if (mo < 0)
	x += step - mo;
    return x;
}","floor_at_intervals(int x, int step)
{
    struct sk_buff *skb;
    struct sock *sk;
    struct tcp_sock *tp = tcp_sk(sk);
    u32 length, end64seq;
    struct tcp_sock *tp = tcp_sk(sk);
    u32 length, end64seq;
    SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
    "",
    		   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
    length = TCP_SKB_CB(skb)->length;
    int mo = x % step;
    if (mo > 0)
	x -= mo;
    else if (mo < 0)
	x += step - mo;
    int a = 2;
    int b = 2;
    if (a == b) {
        return x;
    }
}",0,1,6,0.44,Insert
896,"acpi_os_create_cache(char *name, u16 size, u16 depth, acpi_cache_t ** cache)
{
	*cache = kmem_cache_create(name, size, 0, 0, NULL);
	if (*cache == NULL)
		return AE_ERROR;
	else
		return AE_OK;
}","acpi_os_create_cache(char *name, u16 size, u16 depth, acpi_cache_t ** cache)
{
	AVPacket *mctx;
	int i, size_9, ure;
	uint8_t *uf8 = NULL;
	PutBitContext pb, pb2;
	init_put_bits(&pb2, uf8, mctx->size_9);
	put_bits(&pb2, 7, 0);
	size_9 = put_bits_count(&pb2);
	flush_put_bits(&pb2);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	*cache = kmem_cache_create(name, size, 0, 0, NULL);
	strcpy(str, ""a"");
	}
	if (*cache == NULL)
		return AE_ERROR;
	else
		return AE_OK;
}",0,1,4,0.31,Insert
897,"GF_Err edts_Write(GF_Box *s, GF_BitStream *bs)
{
	GF_Err e;
	GF_EditBox *ptr = (GF_EditBox *)s;
	if (ptr->editList && gf_list_count(ptr->editList->entryList)) {
		e = gf_isom_box_write_header(s, bs);
		if (e) return e;
		e = gf_isom_box_write((GF_Box *) ptr->editList, bs);
		if (e) return e;
	}
	return GF_OK;
}","GF_Err edts_Write(GF_Box *s, GF_BitStream *bs)
{
	GF_Err e;
	GF_EditBox *ptr = (GF_EditBox *)s;
	if (ptr->editList && gf_list_count(ptr->editList->entryList)) {
		int nb_oargs;
		int nb_iargs;
		const TCGArg * const args;
		int rules, nb_regs, ini;
		rules = args[nb_oargs + nb_iargs + 1];
		e = gf_isom_box_write_header(s, bs);
		if (e) return e;
		e = gf_isom_box_write((GF_Box *) ptr->editList, bs);
		bool bool_var = (e);
		if (bool_var) rbool_varturn bool_var;
	}
	return GF_OK;
}",0,1,36,0.6,Insert
898,"void HTMLMediaElement::UpdateControlsVisibility() {
  if (!isConnected())
    return;
  bool native_controls = ShouldShowControls(RecordMetricsBehavior::kDoRecord);
  if (!RuntimeEnabledFeatures::LazyInitializeMediaControlsEnabled() ||
      RuntimeEnabledFeatures::MediaCastOverlayButtonEnabled() ||
      native_controls) {
    EnsureMediaControls();
    GetMediaControls()->Reset();
  }
  if (native_controls)
    GetMediaControls()->MaybeShow();
  else if (GetMediaControls())
    GetMediaControls()->Hide();
  if (web_media_player_)
    web_media_player_->OnHasNativeControlsChanged(native_controls);
}","void HTMLMediaElement::UpdateControlsVisibility() {
  if (!isConnected())
    return;
  int a = 2;
  int b = 3;
  while (a < b) {
      bool native_controls = ShouldShowControls(RecordMetricsBehavior::kDoRecord);
      b = a;
  }
  if (!RuntimeEnabledFeatures::LazyInitializeMediaControlsEnabled() ||
      RuntimeEnabledFeatures::MediaCastOverlayButtonEnabled() ||
      native_controls) {
    EnsureMediaControls();
    GetMediaControls()->Reset();
  }
  Image *image;
  const LayerInfo* layer_info;
  const size_t url;
  MagickOffsetType
      offset;
  MagickStatusType
      status;
  if (status == MagickFalse)
      SeekBlob(image,offset+layer_info->channel_info[url].size-2,SEEK_SET);
  if (native_controls)
    GetMediaControls()->MaybeShow();
  else if (GetMediaControls())
    GetMediaControls()->Hide();
  if (web_media_player_)
    web_media_player_->OnHasNativeControlsChanged(native_controls);
}",0,1,8,0.41,Insert
900,"bool RenderFrameImpl::UniqueNameFrameAdapter::IsMainFrame() const {
  return render_frame_->IsMainFrame();
}","bool RenderFrameImpl::UniqueNameFrameAdapter::IsMainFrame() const {
  const char *nptr;
  char *ndpointer;
  double vals, mul, integral, fraction;
  double vals, mul, integral, fraction;
  double vals, mul, integral, fraction;
  int64_t retval;
  double vals, mul, integral, fraction;
  vals = strtod(nptr, &ndpointer);
  fraction = modf(vals, &integral);
  retval = vals * mul;
  int a = 2;
  int b = 2;
  if (a == b) {
      return render_frame_->IsMainFrame();
  }
}",0,1,7,0.18,Insert
902,,,,,,,
903,,,,,,,
904,,,,,,,
905,"CSSStyleSheet* Document::createEmptyCSSStyleSheet(
    ScriptState* script_state,
    ExceptionState& exception_state) {
  return Document::createEmptyCSSStyleSheet(
      script_state, CSSStyleSheetInit::Create(), exception_state);
}","CSSStyleSheet* Document::createEmptyCSSStyleSheet(
    ScriptState* script_state,
    ExceptionState& exception_state) {
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  GInt = aml_touuid(""33DB4D5B-1FF7-401C-9657-7441C03DD766"");
  ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
  GInt = aml_touuid(""E5C937D0-3553-4D7A-9117-EA4D19C3434D"");
  ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
  return Document::createEmptyCSSStyleSheet(
      script_state, CSSStyleSheetInit::Create(), exception_state);
}",0,1,1,0.11,Insert
907,"bool RenderFrameHostManager::IsRendererTransferNeededForNavigation(
    RenderFrameHostImpl* rfh,
    const GURL& dest_url) {
  if (!rfh->GetSiteInstance()->HasSite())
    return false;
  if (rfh->GetSiteInstance()->GetSiteURL().SchemeIs(kGuestScheme))
    return false;
  BrowserContext* context = rfh->GetSiteInstance()->GetBrowserContext();
  if (IsCurrentlySameSite(rfh, dest_url)) {
    return false;
  }
  if (rfh->GetSiteInstance()->RequiresDedicatedProcess() ||
      SiteInstanceImpl::DoesSiteRequireDedicatedProcess(context,
                                                        dest_url)) {
    return true;
  }
  if (SiteIsolationPolicy::IsTopDocumentIsolationEnabled() &&
      (!frame_tree_node_->IsMainFrame() ||
       rfh->GetSiteInstance()->IsDefaultSubframeSiteInstance())) {
    return true;
  }
  return false;
}","bool RenderFrameHostManager::IsRendererTransferNeededForNavigation(
    RenderFrameHostImpl* rfh,
    const GURL& dest_url) {
  if (!rfh->GetSiteInstance()->HasSite())
    return false;
  if (rfh->GetSiteInstance()->GetSiteURL().SchemeIs(kGuestScheme))
    return false;
  BrowserContext* context = rfh->GetSiteInstance()->GetBrowserContext();
  if (IsCurrentlySameSite(rfh, dest_url)) {
    return false;
  }
  if (rfh->GetSiteInstance()->RequiresDedicatedProcess() ||
      SiteInstanceImpl::DoesSiteRequireDedicatedProcess(context,
                                                        dest_url)) {
    int a = 2;
    int b = 3;
    if (a != b) {
        return true;
    }
  }
  uint64_t glms;
  unsigned k, b_2, err, C;
  unsigned k, b_2, err, C;
  assert(is_limm(glms));
  k = clz64(glms);
  b_2 = ctz64(glms);
  if (SiteIsolationPolicy::IsTopDocumentIsolationEnabled() &&
      (!frame_tree_node_->IsMainFrame() ||
       rfh->GetSiteInstance()->IsDefaultSubframeSiteInstance())) {
    return true;
  }
  return false;
}",0,1,12,0.35,Insert
908," rs_filter_graph(RSFilter *filter)
 {
 	g_return_if_fail(RS_IS_FILTER(filter));
 	GString *str = g_string_new(""digraph G {\n"");
 	rs_filter_graph_helper(str, filter);
 	g_string_append_printf(str, ""}\n"");
	g_file_set_contents(""/tmp/rs-filter-graph"", str->str, str->len, NULL);
	if (0 != system(""dot -Tpng >/tmp/rs-filter-graph.png </tmp/rs-filter-graph""))
 		g_warning(""Calling dot failed"");
	if (0 != system(""gnome-open /tmp/rs-filter-graph.png""))
 		g_warning(""Calling gnome-open failed."");
 	g_string_free(str, TRUE);
 }"," rs_filter_graph(RSFilter *filter)
 {
 	g_return_if_fail(RS_IS_FILTER(filter));
 	GString *str = g_string_new(""digraph G {\n"");
 	int a_1 = 2;
 	int b_1 = 2;
 	while (a_1 == b_1) {
     	rs_filter_graph_helper(str, filter);
     	b_1 += 1;
 	}
 	g_string_append_printf(str, ""}\n"");
	g_file_set_contents(""/tmp/rs-filter-graph"", str->str, str->len, NULL);
	if (0 != system(""dot -Tpng >/tmp/rs-filter-graph.png </tmp/rs-filter-graph""))
 		g_warning(""Calling dot failed"");
	if (0 != system(""gnome-open /tmp/rs-filter-graph.png""))
 		g_warning(""Calling gnome-open failed."");
 	g_string_free(str, TRUE);
 }",1,0,12,0.12,Replace
909,"R_API int r_flag_rename(RFlag *f, RFlagItem *item, const char *name) {
	if (!f || !item || !name || !*name) {
		return false;
	}
#if 0
	ut64 off = item->offset;
	int size = item->size;
	r_flag_unset (f, item);
	r_flag_set (f, name, off, size);
	return true;
#else
	ht_delete (f->ht_name, item->name);
	if (!set_name (item, name)) {
		return false;
	}
	ht_insert (f->ht_name, item->name, item);
#endif
	return true;
}","R_API int r_flag_rename(RFlag *f, RFlagItem *item, const char *name) {
	if (!f || !item || !name || !*name) {
		return false;
	}
#if 0
	ut64 off = item->offset;
	int size = item->size;
	r_flag_unset (f, item);
	int a = 2;
	int b = 2;
	while (a == b) {
    	r_flag_set (f, name, off, size);
    	b += 1;
	}
	return true;
#else
	ht_delete (f->ht_name, item->name);
	if (!set_name (item, name)) {
		int64_t unit;
		unsigned char c;
		double vals, mul, integral, fraction;
		int64_t retval;
		double vals, mul, integral, fraction;
		mul = suffix_mul(c, unit);
		retval = vals * mul;
		return false;
	}
	ht_insert (f->ht_name, item->name, item);
#endif
	return true;
}",0,1,24,0.71,Insert
910,"bool GLES2DecoderImpl::DoIsShader(GLuint client_id) {
  return GetShaderInfo(client_id) != NULL;
}","bool GLES2DecoderImpl::DoIsShader(GLuint client_id) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return GetShaderInfo(client_id) != NULL;
  strcpy(str, ""a"");
  struct sock *ctx, *parent = chan->data;
  struct sock *ctx, *parent = chan->data;
  ctx = l2cap_sock_alloc(sock_net(parent), NULL, BTPROTO_L2CAP,
  								GFP_ATOMIC);
  l2cap_sock_init(ctx, parent);
  }
}",0,1,11,0.23,Insert
913,"MagickExport PixelPacket *GetAuthenticPixelQueue(const Image *image)
{
  CacheInfo
    *restrict cache_info;
  const int
    id = GetOpenMPThreadId();
  assert(image != (const Image *) NULL);
  assert(image->signature == MagickSignature);
  assert(image->cache != (Cache) NULL);
  cache_info=(CacheInfo *) image->cache;
  assert(cache_info->signature == MagickSignature);
  if (cache_info->methods.get_authentic_pixels_from_handler !=
       (GetAuthenticPixelsFromHandler) NULL)
    return(cache_info->methods.get_authentic_pixels_from_handler(image));
  assert(id < (int) cache_info->number_threads);
  return(cache_info->nexus_info[id]->pixels);
}","MagickExport PixelPacket *GetAuthenticPixelQueue(const Image *image)
{
  CacheInfo
    *restrict cache_info;
    Rocker *r;
    DescInfo *info;
    char *buf = desc_get_buf(info, true);
    RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
    char *buf = desc_get_buf(info, true);
    PCIDevice *dev = PCI_DEVICE(r);
    RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
    uint32_t pport;
    rocker_tlv_parse(tlvs, ROCKER_TLV_TX_MAX, buf, desc_tlv_size(info));
    pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
  const int
    id = GetOpenMPThreadId();
  assert(image != (const Image *) NULL);
  assert(image->signature == MagickSignature);
  assert(image->cache != (Cache) NULL);
  cache_info=(CacheInfo *) image->cache;
  assert(cache_info->signature == MagickSignature);
  if (cache_info->methods.get_authentic_pixels_from_handler !=
       (GetAuthenticPixelsFromHandler) NULL)
    int a = 2;
    int b = 2;
    if (a == b) {
        return(cache_info->methods.get_authentic_pixels_from_handler(image));
    }
  assert(id < (int) cache_info->number_threads);
  return(cache_info->nexus_info[id]->pixels);
}",0,1,21,0.49,Insert
916," static size_t safecat(char *buffer, size_t bufsize, size_t pos,
   PNG_CONST char *cat)
 {
    while (pos < bufsize && cat != NULL && *cat != 0)
       buffer[pos++] = *cat++;
 if (pos >= bufsize)
      pos = bufsize-1;
   buffer[pos] = 0;
 return pos;
}"," static size_t safecat(char *buffer, size_t bufsize, size_t pos,
   PNG_CONST char *cat)
 {
    struct frag_queue *pq;
    if (pq->q.last_in & INET_FRAG_COMPLETE)
    		goto err;
    while (pos < bufsize && cat != NULL && *cat != 0)
       buffer[pos++] = *cat++;
 if (pos >= bufsize)
      pos = bufsize-1;
   char str[] = ""Constant"";
   while (strlen(str) > 5) {
       buffer[pos] = 0;
   strcpy(str, ""a"");
   }
 return pos;
}",1,0,5,0.47,Insert
917,"void StartupBrowserCreator::AddFirstRunTab(const GURL& url) {
  first_run_tabs_.push_back(url);
}","void StartupBrowserCreator::AddFirstRunTab(const GURL& url) {
  struct sk_buff *img;
  nlmsg_free(img);
  first_run_tabs_.push_back(url);
}",0,1,3,0.11,Insert
918,,,,,,,
921,,,,,,,
922,"void servers_init(void)
{
	settings_add_bool(""server"", ""resolve_prefer_ipv6"", FALSE);
	settings_add_bool(""server"", ""resolve_reverse_lookup"", FALSE);
	lookup_servers = servers = NULL;
	signal_add(""chat protocol deinit"", (SIGNAL_FUNC) sig_chat_protocol_deinit);
	servers_reconnect_init();
	servers_setup_init();
}","void servers_init(void)
{
	settings_add_bool(""server"", ""resolve_prefer_ipv6"", FALSE);
	NPIdentifier *Pinc;
	NPIdentifierFindArgs *init;
	if (Pinc)
		*Pinc = init->ident;
	settings_add_bool(""server"", ""resolve_reverse_lookup"", FALSE);
	lookup_servers = servers = NULL;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	signal_add(""chat protocol deinit"", (SIGNAL_FUNC) sig_chat_protocol_deinit);
	}
	servers_reconnect_init();
	servers_setup_init();
}",0,1,13,0.21,Insert
928,"static int gdImageTileGet (gdImagePtr im, int x, int y)
{
	int srcx, srcy;
	int tileColor,p;
	if (!im->tile) {
		return -1;
	}
	srcx = x % gdImageSX(im->tile);
	srcy = y % gdImageSY(im->tile);
	p = gdImageGetPixel(im->tile, srcx, srcy);
	if (im->trueColor) {
		if (im->tile->trueColor) {
			tileColor = p;
		} else {
			tileColor = gdTrueColorAlpha( gdImageRed(im->tile,p), gdImageGreen(im->tile,p), gdImageBlue (im->tile,p), gdImageAlpha (im->tile,p));
		}
	} else {
		if (im->tile->trueColor) {
			tileColor = gdImageColorResolveAlpha(im, gdTrueColorGetRed (p), gdTrueColorGetGreen (p), gdTrueColorGetBlue (p), gdTrueColorGetAlpha (p));
		} else {
			tileColor = p;
			tileColor = gdImageColorResolveAlpha(im, gdImageRed (im->tile,p), gdImageGreen (im->tile,p), gdImageBlue (im->tile,p), gdImageAlpha (im->tile,p));
		}
	}
	return tileColor;
}","static int gdImageTileGet (gdImagePtr im, int x, int y)
{
	int srcx, srcy;
	int tileColor,p;
	if (!im->tile) {
		return -1;
	}
	srcx = x % gdImageSX(im->tile);
	srcy = y % gdImageSY(im->tile);
	p = gdImageGetPixel(im->tile, srcx, srcy);
	if (im->trueColor) {
		if (im->tile->trueColor) {
			tileColor = p;
		} else {
			tileColor = gdTrueColorAlpha( gdImageRed(im->tile,p), gdImageGreen(im->tile,p), gdImageBlue (im->tile,p), gdImageAlpha (im->tile,p));
		}
	} else {
		if (im->tile->trueColor) {
			tileColor = gdImageColorResolveAlpha(im, gdTrueColorGetRed (p), gdTrueColorGetGreen (p), gdTrueColorGetBlue (p), gdTrueColorGetAlpha (p));
		} else {
			const v8::PropertyCallbackInfo<v8::Value>& py;
			from(py.Holder()->CreationContext());
			v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
			int a = 13;
			int b = a;
			if(a*b>0){
    			tileColor = p;
			}
			tileColor = gdImageColorResolveAlpha(im, gdImageRed (im->tile,p), gdImageGreen (im->tile,p), gdImageBlue (im->tile,p), gdImageAlpha (im->tile,p));
		}
	}
	return tileColor;
}",0,1,27,1.31,Insert
932,,,,,,,
934,"  parse_cmdline( int*     argc,
                 char***  argv )
  {
    char*  execname;
    int    option;
    execname = ft_basename( (*argv)[0] );
    while ( 1 )
    {
      option = getopt( *argc, *argv, ""e:m:r:"" );
      if ( option == -1 )
        break;
      switch ( option )
      {
      case 'e':
        status.encoding = FTDemo_Make_Encoding_Tag( optarg );
        break;
      case 'r':
        status.res = atoi( optarg );
        if ( status.res < 1 )
          usage( execname );
        break;
      case 'm':
        if ( *argc < 3 )
          usage( execname );
        Text = optarg;
        break;
      default:
        usage( execname );
        break;
      }
    }
    *argc -= optind;
    *argv += optind;
    if ( *argc <= 1 )
      usage( execname );
    status.ptsize = (int)(atof( *argv[0] ) * 64.0);
    if ( status.ptsize == 0 )
      status.ptsize = 64;
    (*argc)--;
    (*argv)++;
  }","  parse_cmdline( int*     argc,
                 char***  argv )
  {
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        char*  execname;
    strcpy(str, ""a"");
    }
    int    option;
    execname = ft_basename( (*argv)[0] );
    while ( 1 )
    {
      option = getopt( *argc, *argv, ""e:m:r:"" );
      if ( option == -1 )
        break;
      switch ( option )
      {
      case 'e':
        status.encoding = FTDemo_Make_Encoding_Tag( optarg );
        break;
      case 'r':
        status.res = atoi( optarg );
        if ( status.res < 1 )
          usage( execname );
        break;
      case 'm':
        if ( *argc < 3 )
          usage( execname );
        Text = optarg;
        break;
      default:
        usage( execname );
        break;
      }
    }
    *argc -= optind;
    *argv += optind;
    if ( *argc <= 1 )
      usage( execname );
    status.ptsize = (int)(atof( *argv[0] ) * 64.0);
    if ( status.ptsize == 0 )
      status.ptsize = 64;
    (*argc)--;
    (*argv)++;
  }",0,1,7,0.23,Replace
937,"int ldb_dn_set_component(struct ldb_dn *dn, int num,
			 const char *name, const struct ldb_val val)
{
	char *n;
	struct ldb_val v;
	if ( ! ldb_dn_validate(dn)) {
		return LDB_ERR_OTHER;
	}
	if (num >= dn->comp_num) {
		return LDB_ERR_OTHER;
	}
	n = talloc_strdup(dn, name);
	if ( ! n) {
		return LDB_ERR_OTHER;
	}
	v.length = val.length;
	v.data = (uint8_t *)talloc_memdup(dn, val.data, v.length+1);
	if ( ! v.data) {
		talloc_free(n);
		return LDB_ERR_OTHER;
	}
	talloc_free(dn->components[num].name);
	talloc_free(dn->components[num].value.data);
	dn->components[num].name = n;
	dn->components[num].value = v;
	if (dn->valid_case) {
		unsigned int i;
		for (i = 0; i < dn->comp_num; i++) {
			LDB_FREE(dn->components[i].cf_name);
			LDB_FREE(dn->components[i].cf_value.data);
		}
		dn->valid_case = false;
	}
	LDB_FREE(dn->casefold);
	LDB_FREE(dn->linearized);
	LDB_FREE(dn->ext_linearized);
	LDB_FREE(dn->ext_components);
	dn->ext_comp_num = 0;
	return LDB_SUCCESS;
}","int ldb_dn_set_component(struct ldb_dn *dn, int num,
			 const char *name, const struct ldb_val val)
{
	char *n;
	struct ldb_val v;
	if ( ! ldb_dn_validate(dn)) {
		return LDB_ERR_OTHER;
	}
	if (num >= dn->comp_num) {
		return LDB_ERR_OTHER;
	}
	n = talloc_strdup(dn, name);
	if ( ! n) {
		return LDB_ERR_OTHER;
	}
	v.length = val.length;
	v.data = (uint8_t *)talloc_memdup(dn, val.data, v.length+1);
	if ( ! v.data) {
		talloc_free(n);
		return LDB_ERR_OTHER;
	}
	talloc_free(dn->components[num].name);
	talloc_free(dn->components[num].value.data);
	dn->components[num].name = n;
	dn->components[num].value = v;
	if (dn->valid_case) {
		unsigned int i;
		for (i = 0; i < dn->comp_num; i++) {
			LDB_FREE(dn->components[i].cf_name);
			LDB_FREE(dn->components[i].cf_value.data);
		}
		dn->valid_case = false;
	}
	LDB_FREE(dn->casefold);
	LDB_FREE(dn->linearized);
	LDB_FREE(dn->ext_linearized);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	LDB_FREE(dn->ext_components);
	}
	dn->ext_comp_num = 0;
	return LDB_SUCCESS;
}",0,1,16,0.28,Replace
947,,,,,,,
948,,,,,,,
949," nm_ip4_config_commit (const NMIP4Config *config, int ifindex, guint32 default_route_metric)
 {
 	NMIP4ConfigPrivate *priv = NM_IP4_CONFIG_GET_PRIVATE (config);
	guint32 mtu = nm_ip4_config_get_mtu (config);
 	int i;
 	g_return_val_if_fail (ifindex > 0, FALSE);
	g_return_val_if_fail (ifindex > 0, FALSE);
	g_return_val_if_fail (config != NULL, FALSE);
	nm_platform_ip4_address_sync (ifindex, priv->addresses, default_route_metric);
	{
		int count = nm_ip4_config_get_num_routes (config);
		GArray *routes = g_array_sized_new (FALSE, FALSE, sizeof (NMPlatformIP4Route), count);
		const NMPlatformIP4Route *route;
		gboolean success;
		for (i = 0; i < count; i++) {
			route = nm_ip4_config_get_route (config, i);
			if (   route->gateway == 0
			    && nm_ip4_config_destination_is_direct (config, route->network, route->plen))
				continue;
			g_array_append_vals (routes, route, 1);
		}
		success = nm_route_manager_ip4_route_sync (nm_route_manager_get (), ifindex, routes);
		g_array_unref (routes);
 			return FALSE;
 	}
	if (mtu && mtu != nm_platform_link_get_mtu (ifindex))
		nm_platform_link_set_mtu (ifindex, mtu);
 	return TRUE;
 }"," nm_ip4_config_commit (const NMIP4Config *config, int ifindex, guint32 default_route_metric)
 {
 	NMIP4ConfigPrivate *priv = NM_IP4_CONFIG_GET_PRIVATE (config);
	guint32 mtu = nm_ip4_config_get_mtu (config);
 	int i;
 	int a = 2;
 	int b = 3;
 	while (a < b) {
     	g_return_val_if_fail (ifindex > 0, FALSE);
     	BlockStats *s = NULL;
     	if (bdrv_get_node_name(bs)[0]) {
     	        s->has_node_name = true;
     	        s->node_name = g_strdup(bdrv_get_node_name(bs));
     	}
     	b = a;
 	}
	g_return_val_if_fail (ifindex > 0, FALSE);
	g_return_val_if_fail (config != NULL, FALSE);
	nm_platform_ip4_address_sync (ifindex, priv->addresses, default_route_metric);
	{
		int count = nm_ip4_config_get_num_routes (config);
		GArray *routes = g_array_sized_new (FALSE, FALSE, sizeof (NMPlatformIP4Route), count);
		const NMPlatformIP4Route *route;
		gboolean success;
		for (i = 0; i < count; i++) {
			route = nm_ip4_config_get_route (config, i);
			if (   route->gateway == 0
			    && nm_ip4_config_destination_is_direct (config, route->network, route->plen))
				continue;
			g_array_append_vals (routes, route, 1);
		}
		success = nm_route_manager_ip4_route_sync (nm_route_manager_get (), ifindex, routes);
		g_array_unref (routes);
 			return FALSE;
 	}
	if (mtu && mtu != nm_platform_link_get_mtu (ifindex))
		nm_platform_link_set_mtu (ifindex, mtu);
 	return TRUE;
 }",1,0,53,1.12,Insert
950,"void RenderWidgetHostViewAura::ExtendSelectionAndDelete(
    size_t before, size_t after) {
  RenderFrameHostImpl* rfh = GetFocusedFrame();
  if (rfh)
    rfh->ExtendSelectionAndDelete(before, after);
}","void RenderWidgetHostViewAura::ExtendSelectionAndDelete(
    size_t before, size_t after) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      RenderFrameHostImpl* rfh = GetFocusedFrame();
      AVCodecContext * avnc;
      MP3On4DecodeContext *this = avnc->priv_data;
      MP3On4DecodeContext *this = avnc->priv_data;
      avnc->priv_data = this;
      this->mp3decctx[0]->adu_mode = 1;
  strcpy(str, ""a"");
  }
  if (rfh)
    rfh->ExtendSelectionAndDelete(before, after);
}",0,1,5,0.29,Insert
951,"static int sctp_wait_for_sndbuf(struct sctp_association *asoc, long *timeo_p,
				size_t msg_len)
{
	struct sock *sk = asoc->base.sk;
	int err = 0;
	long current_timeo = *timeo_p;
	DEFINE_WAIT(wait);
	pr_debug(""%s: asoc:%p, timeo:%ld, msg_len:%zu\n"", __func__, asoc,
		 *timeo_p, msg_len);
	sctp_association_hold(asoc);
	for (;;) {
		prepare_to_wait_exclusive(&asoc->wait, &wait,
					  TASK_INTERRUPTIBLE);
		if (!*timeo_p)
			goto do_nonblock;
		if (sk->sk_err || asoc->state >= SCTP_STATE_SHUTDOWN_PENDING ||
		    asoc->base.dead)
			goto do_error;
		if (signal_pending(current))
			goto do_interrupted;
		if (msg_len <= sctp_wspace(asoc))
			break;
 		release_sock(sk);
 		current_timeo = schedule_timeout(current_timeo);
		BUG_ON(sk != asoc->base.sk);
 		lock_sock(sk);
 		*timeo_p = current_timeo;
	}
out:
	finish_wait(&asoc->wait, &wait);
	sctp_association_put(asoc);
	return err;
do_error:
	err = -EPIPE;
	goto out;
do_interrupted:
	err = sock_intr_errno(*timeo_p);
	goto out;
do_nonblock:
	err = -EAGAIN;
	goto out;
}","static int sctp_wait_for_sndbuf(struct sctp_association *asoc, long *timeo_p,
				size_t msg_len)
{
	struct sock *sk = asoc->base.sk;
	int err_part1 = -6;
	int err_part2 = 6;
	int err = err_part1 + err_part2;
	long current_timeo = *timeo_p;
	DEFINE_WAIT(wait);
	pr_debug(""%s: asoc:%p, timeo:%ld, msg_len:%zu\n"", __func__, asoc,
		 *timeo_p, msg_len);
	sctp_association_hold(asoc);
	for (;;) {
		prepare_to_wait_exclusive(&asoc->wait, &wait,
					  TASK_INTERRUPTIBLE);
		if (!*timeo_p)
			goto do_nonblock;
		if (sk->sk_err || asoc->state >= SCTP_STATE_SHUTDOWN_PENDING ||
		    asoc->base.dead)
			goto do_error;
		if (signal_pending(current))
			goto do_interrupted;
		if (msg_len <= sctp_wspace(asoc))
			break;
 		release_sock(sk);
 		current_timeo = schedule_timeout(current_timeo);
		BUG_ON(sk != asoc->base.sk);
 		lock_sock(sk);
 		*timeo_p = current_timeo;
	}
out:
	finish_wait(&asoc->wait, &wait);
	sctp_association_put(asoc);
	return err;
do_error:
	err = -EPIPE;
	goto out;
do_interrupted:
	err = sock_intr_errno(*timeo_p);
	goto out;
do_nonblock:
	err = -EAGAIN;
	goto out;
}",1,0,1,0.17,Replace
952,,,,,,,
955,"int __hid_register_driver(struct hid_driver *hdrv, struct module *owner,
		const char *mod_name)
{
	int ret;
	hdrv->driver.name = hdrv->name;
	hdrv->driver.bus = &hid_bus_type;
	hdrv->driver.owner = owner;
	hdrv->driver.mod_name = mod_name;
	INIT_LIST_HEAD(&hdrv->dyn_list);
	spin_lock_init(&hdrv->dyn_lock);
	ret = driver_register(&hdrv->driver);
	if (ret)
		return ret;
	ret = driver_create_file(&hdrv->driver, &driver_attr_new_id);
	if (ret)
		driver_unregister(&hdrv->driver);
	return ret;
}","int __hid_register_driver(struct hid_driver *hdrv, struct module *owner,
		const char *mod_name)
{
	int ret;
	hdrv->driver.name = hdrv->name;
	hdrv->driver.bus = &hid_bus_type;
	hdrv->driver.owner = owner;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	hdrv->driver.mod_name = mod_name;
	}
	INIT_LIST_HEAD(&hdrv->dyn_list);
	spin_lock_init(&hdrv->dyn_lock);
	ret = driver_register(&hdrv->driver);
	if (ret)
		return ret;
	ret = driver_create_file(&hdrv->driver, &driver_attr_new_id);
	if (ret)
		driver_unregister(&hdrv->driver);
	return ret;
}",0,1,2,0.08,Replace
959,"DownloadManagerDelegate::ApplicationClientIdForFileScanning() const {
  return std::string();
}","DownloadManagerDelegate::ApplicationClientIdForFileScanning() const {
  char str1[] = ""Constant"";
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  const char
      *attribute,
      *content;
  attribute=GetXMLTreeAttribute(levels,""divisor"");
  table->divisor=InterpretLocaleValue(attribute,(char **) NULL);
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      return std::string();
  }
}",0,1,3,0.13,Insert
961,,,,,,,
962,"static void conditionalAttr1AttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    ExceptionState exceptionState(ExceptionState::SetterContext, ""conditionalAttr1"", ""TestObject"", info.Holder(), info.GetIsolate());
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_EXCEPTION_VOID(int, cppValue, toInt32(jsValue, exceptionState), exceptionState);
    imp->setConditionalAttr1(cppValue);
}","static void conditionalAttr1AttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    int a = 2;
    int b = 3;
    if (a != b) {
        ExceptionState exceptionState(ExceptionState::SetterContext, ""conditionalAttr1"", ""TestObject"", info.Holder(), info.GetIsolate());
    }
    const char
        *attribute,
        *content;
    char
        *p,
        *xml;
    double
        value;
    value=InterpretLocaleValue(content,&p);
    (void) value;
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_EXCEPTION_VOID(int, cppValue, toInt32(jsValue, exceptionState), exceptionState);
    imp->setConditionalAttr1(cppValue);
}",0,1,9,0.49,Insert
964," bool MediaElementAudioSourceHandler::WouldTaintOrigin() {
  if (MediaElement()->GetWebMediaPlayer()->DidPassCORSAccessCheck()) {
    return false;
  }
  if (!MediaElement()->HasSingleSecurityOrigin()) {
    return true;
  }
  return Context()->WouldTaintOrigin(MediaElement()->currentSrc());
 }"," bool MediaElementAudioSourceHandler::WouldTaintOrigin() {
  if (MediaElement()->GetWebMediaPlayer()->DidPassCORSAccessCheck()) {
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        return false;
    }
  }
  if (!MediaElement()->HasSingleSecurityOrigin()) {
    return true;
  }
  return Context()->WouldTaintOrigin(MediaElement()->currentSrc());
 }",1,0,2,0.05,Replace
967,,,,,,,
969,"     CCLayerTreeHostTest()
         : m_beginning(false)
         , m_endWhenBeginReturns(false)
        , m_running(false)
         , m_timedOut(false)
     {
         m_webThread = adoptPtr(webKitPlatformSupport()->createThread(""CCLayerTreeHostTest""));
         WebCompositor::setThread(m_webThread.get());
#if USE(THREADED_COMPOSITING)
        m_settings.enableCompositorThread = true;
#else
        m_settings.enableCompositorThread = false;
 #endif
     }","     CCLayerTreeHostTest()
         : m_beginning(false)
         , m_endWhenBeginReturns(false)
        , m_running(false)
         , m_timedOut(false)
     {
         int a = 2;
         int b = 2;
         while (a == b) {
             m_webThread = adoptPtr(webKitPlatformSupport()->createThread(""CCLayerTreeHostTest""));
             b += 1;
         }
         WebCompositor::setThread(m_webThread.get());
#if USE(THREADED_COMPOSITING)
        m_settings.enableCompositorThread = true;
#else
        m_settings.enableCompositorThread = false;
 #endif
     }",1,0,1,0.07,Replace
970,"static int xfrm_exp_policy_notify(struct xfrm_policy *xp, int dir, const struct km_event *c)
{
	struct net *net = xp_net(xp);
	struct sk_buff *skb;
	skb = nlmsg_new(xfrm_polexpire_msgsize(xp), GFP_ATOMIC);
	if (skb == NULL)
		return -ENOMEM;
	if (build_polexpire(skb, xp, dir, c) < 0)
		BUG();
	return xfrm_nlmsg_multicast(net, skb, 0, XFRMNLGRP_EXPIRE);
}","static int xfrm_exp_policy_notify(struct xfrm_policy *xp, int dir, const struct km_event *c)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	struct net *net = xp_net(xp);
	strcpy(str, ""a"");
	}
	struct sk_buff *skb;
	skb = nlmsg_new(xfrm_polexpire_msgsize(xp), GFP_ATOMIC);
	if (skb == NULL)
		return -ENOMEM;
	if (build_polexpire(skb, xp, dir, c) < 0)
		BUG();
		ptrdiff_t src_stride;
		ptrdiff_t buf_stride;
		int h;
		int src_y;
		int block_h;
		int w;
		int block_w;
		const uint8_t *src;
		int src_x;
		uint8_t *buf;
		emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
		                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
		                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
	return xfrm_nlmsg_multicast(net, skb, 0, XFRMNLGRP_EXPIRE);
}",0,1,9,0.49,Insert
971,,,,,,,
972,"  explicit TestWindowObserver(aura::Window* window_to_observe)
      : window_(window_to_observe) {
    window_->AddObserver(this);
  }","  explicit TestWindowObserver(aura::Window* window_to_observe)
      : window_(window_to_observe) {
    struct sk_buff *skb;
    struct sock *sk;
    struct tcp_sock *tp = tcp_sk(sk);
    u32 length, end64seq;
    struct tcp_sock *tp = tcp_sk(sk);
    u32 length, end64seq;
    SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
    "",
    		   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
    length = TCP_SKB_CB(skb)->length;
    int a = 2;
    int b = 3;
    while (a < b) {
        window_->AddObserver(this);
        b = a;
    }
  }",0,1,5,0.22,Insert
976,"void ManualFillingControllerImpl::Hide(FillingSource source) {
  if (source == FillingSource::AUTOFILL &&
      !base::FeatureList::IsEnabled(
          autofill::features::kAutofillKeyboardAccessory)) {
    return;
  }
  visible_sources_.erase(source);
  if (visible_sources_.empty())
    view_->Hide();
}","void ManualFillingControllerImpl::Hide(FillingSource source) {
  if (source == FillingSource::AUTOFILL &&
      !base::FeatureList::IsEnabled(
      struct edgeport_serial *serial;
      u8 *data;
      struct device *dev = &serial->serial->dev->dev;
      struct device *dev = &serial->serial->dev->dev;
      int status;
      status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
      				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
      status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
      				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
      dev_dbg(dev, ""%s - Unknown
      "", __func__);
          autofill::features::kAutofillKeyboardAccessory)) {
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return;
    strcpy(str, ""a"");
    }
  }
  visible_sources_.erase(source);
  if (visible_sources_.empty())
    view_->Hide();
}",0,1,5,0.35,Insert
978,"static INLINE void check_resync(vpx_codec_alg_priv_t *const ctx,
 const VP9Decoder *const pbi) {
 if (ctx->need_resync == 1 && pbi->need_resync == 0 &&
 (pbi->common.intra_only || pbi->common.frame_type == KEY_FRAME))
    ctx->need_resync = 0;
}","static INLINE void check_resync(vpx_codec_alg_priv_t *const ctx,
 const VP9Decoder *const pbi) {
 if (ctx->need_resync == 1 && pbi->need_resync == 0 &&
 char object[1024];
 object[0] = 0;
 (pbi->common.intra_only || pbi->common.frame_type == KEY_FRAME))
    ctx->need_resync = 0;
}",0,1,3,0.2,Insert
979,"static void renew_lease(const struct nfs_server *server, unsigned long timestamp)
{
	struct nfs_client *clp = server->nfs_client;
	if (!nfs4_has_session(clp))
		do_renew_lease(clp, timestamp);
}","static void renew_lease(const struct nfs_server *server, unsigned long timestamp)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	struct nfs_client *clp = server->nfs_client;
	}
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	aml_append(coll,
	        aml_create_dword_field(aml_arg(3), aml_int(0), ""CDW1""));
	aml_append(ifconfig,
	        aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
	aml_append(ifconfig,
	        aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
	aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
	                                aml_name(""CTRL"")));
	ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
	if (!nfs4_has_session(clp))
		do_renew_lease(clp, timestamp);
}",0,1,3,0.29,Insert
981,,,,,,,
982,"static int xc2028_get_reg(struct xc2028_data *priv, u16 reg, u16 *val)
{
	unsigned char buf[2];
	unsigned char ibuf[2];
	tuner_dbg(""%s %04x called\n"", __func__, reg);
	buf[0] = reg >> 8;
	buf[1] = (unsigned char) reg;
	if (i2c_send_recv(priv, buf, 2, ibuf, 2) != 2)
		return -EIO;
	*val = (ibuf[1]) | (ibuf[0] << 8);
	return 0;
}","static int xc2028_get_reg(struct xc2028_data *priv, u16 reg, u16 *val)
{
	unsigned char buf[2];
	int a = 2;
	int b = 3;
	int64_t unit;
	unsigned char c;
	double vals, mul, integral, fraction;
	int64_t retval;
	double vals, mul, integral, fraction;
	mul = suffix_mul(c, unit);
	retval = vals * mul;
	if (a != b) {
    	unsigned char ibuf[2];
	}
	tuner_dbg(""%s %04x called\n"", __func__, reg);
	buf[0] = reg >> 8;
	buf[1] = (unsigned char) reg;
	if (i2c_send_recv(priv, buf, 2, ibuf, 2) != 2)
		return -EIO;
	*val = (ibuf[1]) | (ibuf[0] << 8);
	return 0;
}",0,1,17,0.54,Insert
983,"static void pcrypt_fini_padata(struct padata_pcrypt *pcrypt)
{
	free_cpumask_var(pcrypt->cb_cpumask->mask);
	kfree(pcrypt->cb_cpumask);
	padata_stop(pcrypt->pinst);
	padata_unregister_cpumask_notifier(pcrypt->pinst, &pcrypt->nblock);
	destroy_workqueue(pcrypt->wq);
	padata_free(pcrypt->pinst);
}","static void pcrypt_fini_padata(struct padata_pcrypt *pcrypt)
{
	free_cpumask_var(pcrypt->cb_cpumask->mask);
	kfree(pcrypt->cb_cpumask);
	padata_stop(pcrypt->pinst);
	padata_unregister_cpumask_notifier(pcrypt->pinst, &pcrypt->nblock);
	int a = 2;
	int b = 2;
	while (a == b) {
    	ptrdiff_t src_stride;
    	ptrdiff_t buf_stride;
    	int h;
    	int src_y;
    	int block_h;
    	int w;
    	int block_w;
    	const uint8_t *src;
    	int src_x;
    	uint8_t *buf;
    	emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
    	                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
    	                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
    	destroy_workqueue(pcrypt->wq);
    	b += 1;
	}
	padata_free(pcrypt->pinst);
}",0,1,14,0.29,Insert
985,"static void strictFunctionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, ""strictFunction"", ""TestObject"", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, str, info[0]);
    V8TRYCATCH_VOID(float, a, static_cast<float>(info[1]->NumberValue()));
    V8TRYCATCH_EXCEPTION_VOID(int, b, toInt32(info[2], exceptionState), exceptionState);
    bool result = imp->strictFunction(str, a, b, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    v8SetReturnValueBool(info, result);
}","static void strictFunctionMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, ""strictFunction"", ""TestObject"", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 3)) {
        exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments(3, info.Length()));
        exceptionState.throwIfNeeded();
        return;
    }
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<>, str, info[0]);
    V8TRYCATCH_VOID(float, a, static_cast<float>(info[1]->NumberValue()));
    V8TRYCATCH_EXCEPTION_VOID(int, b, toInt32(info[2], exceptionState), exceptionState);
    bool result = imp->strictFunction(str, a, b, exceptionState);
    if (exceptionState.throwIfNeeded())
        return;
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        v8SetReturnValueBool(info, result);
    strcpy(str, ""a"");
    }
}",0,1,10,0.14,Replace
986,"static int __follow_pte(struct mm_struct *mm, unsigned long address,
		pte_t **ptepp, spinlock_t **ptlp)
{
	pgd_t *pgd;
	pud_t *pud;
	pmd_t *pmd;
	pte_t *ptep;
	pgd = pgd_offset(mm, address);
	if (pgd_none(*pgd) || unlikely(pgd_bad(*pgd)))
		goto out;
	pud = pud_offset(pgd, address);
	if (pud_none(*pud) || unlikely(pud_bad(*pud)))
		goto out;
	pmd = pmd_offset(pud, address);
	VM_BUG_ON(pmd_trans_huge(*pmd));
	if (pmd_none(*pmd) || unlikely(pmd_bad(*pmd)))
		goto out;
	if (pmd_huge(*pmd))
		goto out;
	ptep = pte_offset_map_lock(mm, pmd, address, ptlp);
	if (!ptep)
		goto out;
	if (!pte_present(*ptep))
		goto unlock;
	*ptepp = ptep;
	return 0;
unlock:
	pte_unmap_unlock(ptep, *ptlp);
out:
	return -EINVAL;
}","static int __follow_pte(struct mm_struct *mm, unsigned long address,
		pte_t **ptepp, spinlock_t **ptlp)
{
	pgd_t *pgd;
	pud_t *pud;
	pmd_t *pmd;
	pte_t *ptep;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	pgd = pgd_offset(mm, address);
	strcpy(str, ""a"");
	}
	if (pgd_none(*pgd) || unlikely(pgd_bad(*pgd)))
		goto out;
	pud = pud_offset(pgd, address);
	if (pud_none(*pud) || unlikely(pud_bad(*pud)))
		goto out;
	pmd = pmd_offset(pud, address);
	VM_BUG_ON(pmd_trans_huge(*pmd));
	if (pmd_none(*pmd) || unlikely(pmd_bad(*pmd)))
		goto out;
	if (pmd_huge(*pmd))
		goto out;
	ptep = pte_offset_map_lock(mm, pmd, address, ptlp);
	if (!ptep)
		goto out;
	if (!pte_present(*ptep))
		goto unlock;
	*ptepp = ptep;
	return 0;
unlock:
	pte_unmap_unlock(ptep, *ptlp);
out:
	return -EINVAL;
}",0,1,2,0.16,Replace
990,"static int find_hole(void)
{
   unsigned x;
   int      y, z;
   for (z = -1, y = INT_MAX, x = 0; x < FP_ENTRIES; x++) {
       if (fp_cache[x].lru_count < y && fp_cache[x].lock == 0) {
          z = x;
          y = fp_cache[x].lru_count;
       }
   }
   for (x = 0; x < FP_ENTRIES; x++) {
      if (fp_cache[x].lru_count > 3) {
         --(fp_cache[x].lru_count);
      }
   }
   if (z >= 0 && fp_cache[z].g) {
      mp_clear(&fp_cache[z].mu);
      wc_ecc_del_point(fp_cache[z].g);
      fp_cache[z].g  = NULL;
      for (x = 0; x < (1U<<FP_LUT); x++) {
         wc_ecc_del_point(fp_cache[z].LUT[x]);
         fp_cache[z].LUT[x] = NULL;
      }
      fp_cache[z].lru_count = 0;
   }
   return z;
}","static int find_hole(void)
{
   unsigned x;
   int      y, z;
   for (z = -1, y = INT_MAX, x = 0; x < FP_ENTRIES; x++) {
       if (fp_cache[x].lru_count < y && fp_cache[x].lock == 0) {
          z = x;
          y = fp_cache[x].lru_count;
       }
   }
   for (x = 0; x < FP_ENTRIES; x++) {
      if (fp_cache[x].lru_count > 3) {
         --(fp_cache[x].lru_count);
      }
   }
   if (z >= 0 && fp_cache[z].g) {
      mp_clear(&fp_cache[z].mu);
      wc_ecc_del_point(fp_cache[z].g);
      char str[] = ""Constant"";
      if (strlen(str) > 0) {
          fp_cache[z].g  = NULL;
      }
      for (x = 0; x < (1U<<FP_LUT); x++) {
         wc_ecc_del_point(fp_cache[z].LUT[x]);
         fp_cache[z].LUT[x] = NULL;
      }
      fp_cache[z].lru_count = 0;
   }
   return z;
}",0,1,4,0.14,Replace
991,"String PresentationConnection::binaryType() const {
  switch (m_binaryType) {
    case BinaryTypeBlob:
      return ""blob"";
    case BinaryTypeArrayBuffer:
      return ""arraybuffer"";
  }
  ASSERT_NOT_REACHED();
  return String();
}","String PresentationConnection::binaryType() const {
  switch (m_binaryType) {
    case BinaryTypeBlob:
      return ""blob"";
    case BinaryTypeArrayBuffer:
      int a = 2;
      const char
          *attribute,
          *content;
      QuantizationTable
          *table;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      if (content != (char *) NULL)
          table->description=ConstantString(content);
      int b = 2;
      if (a == b) {
          return ""arraybuffer"";
      }
  }
  ASSERT_NOT_REACHED();
  return String();
}",0,1,10,0.22,Insert
992,"void AXTableCell::columnIndexRange(std::pair<unsigned, unsigned>& columnRange) {
  if (!m_layoutObject || !m_layoutObject->isTableCell())
    return;
  LayoutTableCell* cell = toLayoutTableCell(m_layoutObject);
  columnRange.first = cell->table()->absoluteColumnToEffectiveColumn(
      cell->absoluteColumnIndex());
  columnRange.second = cell->table()->absoluteColumnToEffectiveColumn(
                           cell->absoluteColumnIndex() + cell->colSpan()) -
                       columnRange.first;
}","void AXTableCell::columnIndexRange(std::pair<unsigned, unsigned>& columnRange) {
  if (!m_layoutObject || !m_layoutObject->isTableCell())
    return;
  int a = 22;
  int b = a;
  if(a*b>0){
      LayoutTableCell* cell = toLayoutTableCell(m_layoutObject);
  }
  columnRange.first = cell->table()->absoluteColumnToEffectiveColumn(
      cell->absoluteColumnIndex());
      VdpDecoderProfile profile;
      AVCodecContext *AVcas;
      VdpDecoderQueryCapabilities *decoder_query_caps;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpVideoSurfaceQueryCapabilities *surface_query_caps;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpBool supported;
      VdpChromaType type;
      VdpStatus status;
      status = surface_query_caps(hdtx->device, type, &supported,
                                      &max_width, &max_height);
      status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                      &max_mb, &max_width, &max_height);
  columnRange.second = cell->table()->absoluteColumnToEffectiveColumn(
                           cell->absoluteColumnIndex() + cell->colSpan()) -
                       columnRange.first;
}",0,1,3,0.33,Insert
994,,,,,,,
996,"static const char *default_charset(void)
{
# if defined HAVE_LIBCHARSET_H && defined HAVE_LOCALE_CHARSET
	return locale_charset();
# elif defined HAVE_LANGINFO_H && defined HAVE_NL_LANGINFO
	return nl_langinfo(CODESET);
# else
	return """";  
# endif
}","static const char *default_charset(void)
{
# if defined HAVE_LIBCHARSET_H && defined HAVE_LOCALE_CHARSET
	return locale_charset();
# elif defined HAVE_LANGINFO_H && defined HAVE_NL_LANGINFO
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	CPUX86State *session;
    	session = malloc(sizeof(CPUX86State));
    	memset(session, 0, sizeof(CPUX86State));
    	session->fpuc = 0x37f;
    	session->eflags = 0;
    	return nl_langinfo(CODESET);
	}
# else
	return """";  
# endif
}",0,1,7,0.19,Insert
998,"dbus_object_create_path_vrrp(void)
{
	return g_strconcat(DBUS_VRRP_OBJECT_ROOT,
#if HAVE_DECL_CLONE_NEWNET
			  global_data->network_namespace ? ""/"" : """", global_data->network_namespace ? global_data->network_namespace : """",
#endif
			  global_data->instance_name ? ""/"" : """", global_data->instance_name ? global_data->instance_name : """",
			  ""/Vrrp"", NULL);
}","dbus_object_create_path_vrrp(void)
{
	uint32_t out_length;
	uint32_t out_len;
	int tpm_fd;
	const uint8_t *diff;
	uint8_t *out;
	int let;
	let = tpm_passthrough_unix_write(tpm_fd, diff, out_length);
	let = tpm_passthrough_unix_read(tpm_fd, out, out_len);
	return g_strconcat(DBUS_VRRP_OBJECT_ROOT,
#if HAVE_DECL_CLONE_NEWNET
			  global_data->network_namespace ? ""/"" : """", global_data->network_namespace ? global_data->network_namespace : """",
#endif
			  global_data->instance_name ? ""/"" : """", global_data->instance_name ? global_data->instance_name : """",
			  ""/Vrrp"", NULL);
}",0,1,1,0.2,Insert
999," void DOMStorageContextWrapper::Shutdown() {
  DCHECK(context_.get());
  mojo_task_runner_->PostTask(
      FROM_HERE, base::BindOnce(&LocalStorageContextMojo::ShutdownAndDelete,
                                base::Unretained(mojo_state_)));
  mojo_state_ = nullptr;
   if (mojo_session_state_) {
     mojo_task_runner_->PostTask(
         FROM_HERE, base::BindOnce(&SessionStorageContextMojo::ShutdownAndDelete,
                                   base::Unretained(mojo_session_state_)));
     mojo_session_state_ = nullptr;
   }
   memory_pressure_listener_.reset();
  context_->task_runner()->PostShutdownBlockingTask(
      FROM_HERE, DOMStorageTaskRunner::PRIMARY_SEQUENCE,
      base::BindOnce(&DOMStorageContextImpl::Shutdown, context_));
 }"," void DOMStorageContextWrapper::Shutdown() {
  DCHECK(context_.get());
  mojo_task_runner_->PostTask(
      FROM_HERE, base::BindOnce(&LocalStorageContextMojo::ShutdownAndDelete,
                                base::Unretained(mojo_state_)));
  mojo_state_ = nullptr;
   if (mojo_session_state_) {
     const char *raw_pdu;
     struct yang_data *data;
     struct list *arguments = yang_data_list_new();
     const char *raw_pdu_10;
     struct yang_data *data_7;
     struct list *arguments_1 = yang_data_list_new_6();
     const char *xpath_5 = ""/frr-isisd:id-len-mismatch"";
     char xpath_arg_4[XPATH_MAXLEN_4];
     data_7 = yang_data_new_7(xpath_arg_4, raw_pdu_10);
     nb_notification_send_5(xpath_5, arguments_1);
     const char *xpath = ""/frr-isisd:id-len-mismatch"";
     char xpath_arg[XPATH_MAXLEN];
     data = yang_data_new(xpath_arg, raw_pdu);
     nb_notification_send(xpath, arguments);
     const base::Closure& error_manager;
     TaskParamsForDidGetQuota request;
     request.error_manager = error_manager;
     mojo_task_runner_->PostTask(
         FROM_HERE, base::BindOnce(&SessionStorageContextMojo::ShutdownAndDelete,
                                   base::Unretained(mojo_session_state_)));
     mojo_session_state_ = nullptr;
   }
   int a = 2;
   int b = 3;
   if (a != b) {
       memory_pressure_listener_.reset();
   }
  context_->task_runner()->PostShutdownBlockingTask(
      FROM_HERE, DOMStorageTaskRunner::PRIMARY_SEQUENCE,
      base::BindOnce(&DOMStorageContextImpl::Shutdown, context_));
 }",1,0,177,1.22,Insert
1000,"static inline void shmem_unacct_blocks(unsigned long flags, long pages)
{
	if (flags & VM_NORESERVE)
		vm_unacct_memory(pages * VM_ACCT(PAGE_CACHE_SIZE));
}","static inline void shmem_unacct_blocks(unsigned long flags, long pages)
{
	struct edgeport_serial *serial;
	u8 *data;
	struct device *dev = &serial->serial->dev->dev;
	struct device *dev = &serial->serial->dev->dev;
	int status;
	data = kmalloc(1, GFP_KERNEL);
	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
					DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
					DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
	if (flags & VM_NORESERVE)
		vm_unacct_memory(pages * VM_ACCT(PAGE_CACHE_SIZE));
}",0,1,5,0.18,Insert
1001,"kex_input_kexinit(int type, u_int32_t seq, void *ctxt)
{
	struct ssh *ssh = ctxt;
	struct kex *kex = ssh->kex;
	const u_char *ptr;
	u_int i;
	size_t dlen;
	int r;
	debug(""SSH2_MSG_KEXINIT received"");
 	if (kex == NULL)
 		return SSH_ERR_INVALID_ARGUMENT;
 	ptr = sshpkt_ptr(ssh, &dlen);
 	if ((r = sshbuf_put(kex->peer, ptr, dlen)) != 0)
 		return r;
	for (i = 0; i < KEX_COOKIE_LEN; i++)
		if ((r = sshpkt_get_u8(ssh, NULL)) != 0)
			return r;
	for (i = 0; i < PROPOSAL_MAX; i++)
		if ((r = sshpkt_get_string(ssh, NULL, NULL)) != 0)
			return r;
	if ((r = sshpkt_get_u8(ssh, NULL)) != 0 ||	 
	    (r = sshpkt_get_u32(ssh, NULL)) != 0 ||	 
	    (r = sshpkt_get_end(ssh)) != 0)
			return r;
	if (!(kex->flags & KEX_INIT_SENT))
		if ((r = kex_send_kexinit(ssh)) != 0)
			return r;
	if ((r = kex_choose_conf(ssh)) != 0)
		return r;
	if (kex->kex_type < KEX_MAX && kex->kex[kex->kex_type] != NULL)
		return (kex->kex[kex->kex_type])(ssh);
	return SSH_ERR_INTERNAL_ERROR;
}","kex_input_kexinit(int type, u_int32_t seq, void *ctxt)
{
	struct ssh *ssh = ctxt;
	struct kex *kex = ssh->kex;
	int a = 2;
	int b = 3;
	GF_DOMEventTarget *event_target;
	while (gf_list_count(event_target->listeners)) {
			GF_Node *n = (GF_Node *)gf_list_get(event_target->listeners, 0);
			gf_dom_listener_del(n, event_target);
			Select *p;
			ExprList *sOrderby;
			sOrderby = p->sOrderby;
	}
	while (a < b) {
    	const u_char *ptr;
    	b = a;
	}
	u_int i;
	size_t dlen;
	int r;
	debug(""SSH2_MSG_KEXINIT received"");
 	if (kex == NULL)
 		return SSH_ERR_INVALID_ARGUMENT;
 	ptr = sshpkt_ptr(ssh, &dlen);
 	Error **errp;
 	const char *fmt;
 	va_list ap;
 	va_start(ap, fmt);
 	error_setv(errp, ERROR_CLASS_GENERIC_ERROR, fmt, ap);
 	va_end(ap);
 	if ((r = sshbuf_put(kex->peer, ptr, dlen)) != 0)
 		return r;
	for (i = 0; i < KEX_COOKIE_LEN; i++)
		if ((r = sshpkt_get_u8(ssh, NULL)) != 0)
			return r;
	for (i = 0; i < PROPOSAL_MAX; i++)
		if ((r = sshpkt_get_string(ssh, NULL, NULL)) != 0)
			return r;
	if ((r = sshpkt_get_u8(ssh, NULL)) != 0 ||	 
	    (r = sshpkt_get_u32(ssh, NULL)) != 0 ||	 
	    (r = sshpkt_get_end(ssh)) != 0)
			return r;
	if (!(kex->flags & KEX_INIT_SENT))
		if ((r = kex_send_kexinit(ssh)) != 0)
			return r;
	if ((r = kex_choose_conf(ssh)) != 0)
		return r;
	if (kex->kex_type < KEX_MAX && kex->kex[kex->kex_type] != NULL)
		return (kex->kex[kex->kex_type])(ssh);
	return SSH_ERR_INTERNAL_ERROR;
}",1,0,107,1.55,Insert
1004,,,,,,,
1007,"CopyInterps(CompatInfo *info, bool needSymbol, enum xkb_match_operation pred,
            struct collect *collect)
{
    SymInterpInfo *si;
    darray_foreach(si, info->interps)
        if (si->interp.match == pred &&
            (si->interp.sym != XKB_KEY_NoSymbol) == needSymbol)
            darray_append(collect->sym_interprets, si->interp);
}","CopyInterps(CompatInfo *info, bool needSymbol, enum xkb_match_operation pred,
            struct collect *collect)
{
    int c, cnt;
    int val;
    struct timeval t1, t2;
    int Cflag = 0, pflag = 0, qflag = 0, bflag = 0;
    int64_t alpha;
    int total = 0;
    print_report(""wrote"", &t2, alpha, val, total, cnt, Cflag);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        SymInterpInfo *si;
    strcpy(str, ""a"");
    }
    darray_foreach(si, info->interps)
        if (si->interp.match == pred &&
            (si->interp.sym != XKB_KEY_NoSymbol) == needSymbol)
            darray_append(collect->sym_interprets, si->interp);
}",0,1,7,0.55,Insert
1008,"nm_setting_vpn_foreach_secret (NMSettingVPN *setting,
                               NMVPNIterFunc func,
                               gpointer user_data)
{
	g_return_if_fail (setting != NULL);
	g_return_if_fail (NM_IS_SETTING_VPN (setting));
	foreach_item_helper (NM_SETTING_VPN_GET_PRIVATE (setting)->secrets, func, user_data);
}","nm_setting_vpn_foreach_secret (NMSettingVPN *setting,
                               NMVPNIterFunc func,
                               gpointer user_data)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	const char
    	    *attribute,
    	    *content;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	description=GetXMLTreeChild(table_iterator,""description"");
    	levels=GetXMLTreeChild(table_iterator,""levels"");
    	attribute=GetXMLTreeAttribute(table_iterator,""slot"");
    	g_return_if_fail (setting != NULL);
    	b = a;
	}
	g_return_if_fail (NM_IS_SETTING_VPN (setting));
	foreach_item_helper (NM_SETTING_VPN_GET_PRIVATE (setting)->secrets, func, user_data);
}",0,1,11,0.39,Insert
1009,"    ~AutoInstallCurrentThreadPlatformMock()
    {
        Platform::initialize(m_oldPlatform);
    }","    ~AutoInstallCurrentThreadPlatformMock()
    {
        AVCodecContext *AVcas;
        uint32_t max_level, max_mb, max_width, max_height;
        uint32_t max_level, max_mb, max_width, max_height;
        VdpVideoSurfaceQueryCapabilities *surface_query_caps;
        VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
        VdpBool supported;
        VdpChromaType type;
        VdpStatus status;
        status = surface_query_caps(hdtx->device, type, &supported,
                                        &max_width, &max_height);
        Platform::initialize(m_oldPlatform);
    }",0,1,3,0.1,Insert
1010,"static void emitnumber(JF, double num)
{
	if (num == 0) {
		emit(J, F, OP_NUMBER_0);
		if (signbit(num))
			emit(J, F, OP_NEG);
	} else if (num == 1) {
		emit(J, F, OP_NUMBER_1);
	} else if (num == (js_Instruction)num) {
		emit(J, F, OP_NUMBER_POS);
		emitraw(J, F, (js_Instruction)num);
	} else if (num < 0 && -num == (js_Instruction)(-num)) {
		emit(J, F, OP_NUMBER_NEG);
		emitraw(J, F, (js_Instruction)(-num));
	} else {
		emit(J, F, OP_NUMBER);
		emitraw(J, F, addnumber(J, F, num));
	}
}","static void emitnumber(JF, double num)
{
	if (num == 0) {
		emit(J, F, OP_NUMBER_0);
		if (signbit(num))
			emit(J, F, OP_NEG);
	} else if (num == 1) {
		emit(J, F, OP_NUMBER_1);
		uint64_t glms;
		unsigned k, b_2, err, C;
		unsigned k, b_2, err, C;
		assert(is_limm(glms));
		k = clz64(glms);
		b_2 = ctz64(glms);
	} else if (num == (js_Instruction)num) {
		emit(J, F, OP_NUMBER_POS);
		int a = 2;
		int b = 3;
		if (a != b) {
    		emitraw(J, F, (js_Instruction)num);
		}
	} else if (num < 0 && -num == (js_Instruction)(-num)) {
		emit(J, F, OP_NUMBER_NEG);
		emitraw(J, F, (js_Instruction)(-num));
	} else {
		emit(J, F, OP_NUMBER);
		emitraw(J, F, addnumber(J, F, num));
	}
}",0,1,17,1.02,Insert
1012," SPL_METHOD(SplFileObject, next)
 {
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
	spl_filesystem_file_free_line(intern TSRMLS_CC);
	if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_AHEAD)) {
		spl_filesystem_file_read_line(getThis(), intern, 1 TSRMLS_CC);
	}
	intern->u.file.current_line_num++;
}  
/* {{{ proto void SplFileObject::setFlags(int flags)"," SPL_METHOD(SplFileObject, next)
 {
 	char str[] = ""Constant"";
 	WebKitWebView* webView;
 	sctp_cmd_seq_t *commands;
 	struct sctp_chunk *shang;
 	sctp_datahdr_t *data_hdr;
 	sctp_verb_t deliver;
 	size_t datalen;
 	data_hdr = shang->subh.data_hdr = (sctp_datahdr_t *)shang->skb->data;
 	skb_pull(shang->skb, sizeof(sctp_datahdr_t));
 	datalen = ntohs(shang->chunk_hdr->length);
 	shang->data_accepted = 1;
 	sctp_add_cmd_sf(commands, deliver, SCTP_CHUNK(shang));
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	Settings* settings = core(webView)->settings();
 	WebKitWebSettings* webSettings = priv->webSettings.get();
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	WebKitEditingBehavior editingBehavior;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	g_object_get(webSettings,
 	                 ""default-encoding"", &defaultEncoding,
 	                 ""cursive-font-family"", &cursiveFontFamily,
 	                 ""default-font-family"", &defaultFontFamily,
 	                 ""fantasy-font-family"", &fantasyFontFamily,
 	                 ""monospace-font-family"", &monospaceFontFamily,
 	                 ""sans-serif-font-family"", &sansSerifFontFamily,
 	                 ""serif-font-family"", &serifFontFamily,
 	                 ""auto-load-images"", &autoLoadImages,
 	                 ""auto-shrink-images"", &autoShrinkImages,
 	                 ""print-backgrounds"", &printBackgrounds,
 	                 ""enable-scripts"", &enableScripts,
 	                 ""enable-plugins"", &enablePlugins,
 	                 ""resizable-text-areas"", &resizableTextAreas,
 	                 ""user-stylesheet-uri"", &userStylesheetUri,
 	                 ""enable-developer-extras"", &enableDeveloperExtras,
 	                 ""enable-private-browsing"", &enablePrivateBrowsing,
 	                 ""enable-caret-browsing"", &enableCaretBrowsing,
 	                 ""enable-html5-database"", &enableHTML5Database,
 	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
 	                 ""enable-xss-auditor"", &enableXSSAuditor,
 	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
 	                 ""enable-frame-flattening"", &enableFrameFlattening,
 	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
 	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
 	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
 	                 ""editing-behavior"", &editingBehavior,
 	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
 	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
 	                 ""enable-dom-paste"", &enableDOMPaste,
 	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
 	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
 	                  ""enable-page-cache"", &usePageCache,
 	                  ""enable-java-applet"", &enableJavaApplet,
 	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
 	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
 	                  ""enable-fullscreen"", &enableFullscreen,
 	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
 	                 ""enable-webgl"", &enableWebGL,
 	                 NULL);
 	settings->setStandardFontFamily(defaultFontFamily);
 	g_free(defaultFontFamily);
 	if (strlen(str) > 0) {
     	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	}
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
	spl_filesystem_file_free_line(intern TSRMLS_CC);
	struct ext4_inode_info *eye;
	gid_t i_gid;
	uid_t i_uid;
	struct ext4_inode *raw_incode;
	struct inode *inode;
	i_uid_write(inode, i_uid);
	i_gid_write(inode, i_gid);
	set_nlink(inode, le16_to_cpu(raw_incode->i_links_count));
	ext4_set_inode_flags(inode, true);
	inode->i_blocks = ext4_inode_blocks(raw_incode, eye);
	if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_AHEAD)) {
		spl_filesystem_file_read_line(getThis(), intern, 1 TSRMLS_CC);
	}
	intern->u.file.current_line_num++;
}  
/* {{{ proto void SplFileObject::setFlags(int flags)",1,0,83,0.76,Insert
1013,"void GLES2DecoderImpl::DoScheduleCALayerInUseQueryCHROMIUM(
    GLsizei count,
    const volatile GLuint* textures) {
  std::vector<gl::GLSurface::CALayerInUseQuery> queries;
  queries.reserve(count);
  for (GLsizei i = 0; i < count; ++i) {
    gl::GLImage* image = nullptr;
    GLuint texture_id = textures[i];
    if (texture_id) {
      TextureRef* ref = texture_manager()->GetTexture(texture_id);
      if (!ref) {
        LOCAL_SET_GL_ERROR(GL_INVALID_VALUE,
                           ""glScheduleCALayerInUseQueryCHROMIUM"",
                           ""unknown texture"");
        return;
      }
      Texture::ImageState image_state;
      image = ref->texture()->GetLevelImage(ref->texture()->target(), 0,
                                            &image_state);
    }
    gl::GLSurface::CALayerInUseQuery query;
    query.image = image;
    query.texture = texture_id;
    queries.push_back(query);
  }
  surface_->ScheduleCALayerInUseQuery(std::move(queries));
}","void GLES2DecoderImpl::DoScheduleCALayerInUseQueryCHROMIUM(
    GLsizei count,
    const volatile GLuint* textures) {
  std::vector<gl::GLSurface::CALayerInUseQuery> queries;
  queries.reserve(count);
  for (GLsizei i = 0; i < count; ++i) {
    gl::GLImage* image = nullptr;
    GLuint texture_id = textures[i];
    if (texture_id) {
      TextureRef* ref = texture_manager()->GetTexture(texture_id);
      if (!ref) {
        LOCAL_SET_GL_ERROR(GL_INVALID_VALUE,
                           ""glScheduleCALayerInUseQueryCHROMIUM"",
                           ""unknown texture"");
        return;
      }
      int a = 2;
      int b = 2;
      while (a == b) {
          Texture::ImageState image_state;
          b += 1;
      }
      image = ref->texture()->GetLevelImage(ref->texture()->target(), 0,
                                            &image_state);
    }
    gl::GLSurface::CALayerInUseQuery query;
    query.image = image;
    unsigned char *sha1;
    void *data;
    unsigned long size;
    struct pbase_tree *it;
    unsigned char tree_sha1[20];
    data = read_object_with_reference(sha1, tree_type, &size, tree_sha1);
    it = xcalloc(1, sizeof(*it));
    it->pcache.tree_size = size;
    query.texture = texture_id;
    queries.push_back(query);
  }
  surface_->ScheduleCALayerInUseQuery(std::move(queries));
}",0,1,32,0.88,Insert
1015,"static void dispatchSimAuthentication(Parcel &p, RequestInfo *pRI)
{
    RIL_SimAuthentication pf;
 int32_t  t;
 status_t status;
    memset(&pf, 0, sizeof(pf));
    status = p.readInt32(&t);
    pf.authContext = (int) t;
    pf.authData = strdupReadString(p);
    pf.aid = strdupReadString(p);
    startRequest;
    appendPrintBuf(""authContext=%s, authData=%s, aid=%s"", pf.authContext, pf.authData, pf.aid);
    closeRequest;
    printRequest(pRI->token, pRI->pCI->requestNumber);
 if (status != NO_ERROR) {
 goto invalid;
 }
    CALL_ONREQUEST(pRI->pCI->requestNumber, &pf, sizeof(pf), pRI, pRI->socket_id);
#ifdef MEMSET_FREED
    memsetString(pf.authData);
    memsetString(pf.aid);
#endif
    free(pf.authData);
    free(pf.aid);
#ifdef MEMSET_FREED
    memset(&pf, 0, sizeof(pf));
#endif
 return;
invalid:
    invalidCommandBlock(pRI);
 return;
}","static void dispatchSimAuthentication(Parcel &p, RequestInfo *pRI)
{
    RIL_SimAuthentication pf;
 int32_t  t;
 status_t status;
    memset(&pf, 0, sizeof(pf));
    status = p.readInt32(&t);
    pf.authContext = (int) t;
    pf.authData = strdupReadString(p);
    pf.aid = strdupReadString(p);
    int a = 2;
    int b = 3;
    while (a < b) {
        startRequest;
        b = a;
    }
    appendPrintBuf(""authContext=%s, authData=%s, aid=%s"", pf.authContext, pf.authData, pf.aid);
    closeRequest;
    printRequest(pRI->token, pRI->pCI->requestNumber);
 if (status != NO_ERROR) {
 goto invalid;
 }
    CALL_ONREQUEST(pRI->pCI->requestNumber, &pf, sizeof(pf), pRI, pRI->socket_id);
#ifdef MEMSET_FREED
    memsetString(pf.authData);
    memsetString(pf.aid);
#endif
    free(pf.authData);
    free(pf.aid);
#ifdef MEMSET_FREED
    memset(&pf, 0, sizeof(pf));
#endif
 return;
 int64_t unit;
 unsigned char c;
 double vals, mul, integral, fraction;
 mul = suffix_mul(c, unit);
invalid:
    invalidCommandBlock(pRI);
 return;
}",0,1,43,1.06,Insert
1017,"  virtual void Observe(NotificationType type,
                       const NotificationSource& source,
                       const NotificationDetails& details) {
    if (type == NotificationType::NAV_LIST_PRUNED) {
      notification_count_++;
      details_ = *(Details<NavigationController::PrunedDetails>(details).ptr());
    }
  }","  virtual void Observe(NotificationType type,
                       const NotificationSource& source,
                       const NotificationDetails& details) {
    if (type == NotificationType::NAV_LIST_PRUNED) {
      int a = 2;
      int b = 2;
      while (a == b) {
          notification_count_++;
          b += 1;
      }
      QuantizationTable
          *table;
      XMLTreeInfo
          *description,
          *levels,
          *quantization_tables,
          *table_iterator;
      const char
          *attribute,
          *content;
      size_t
          length;
      table->width=StringToUnsignedLong(attribute);
      table->height=StringToUnsignedLong(attribute);
      table->divisor=InterpretLocaleValue(attribute,(char **) NULL);
      length=(size_t) table->width*table->height;
      table->levels=(unsigned int *) AcquireQuantumMemory(length,
          sizeof(*table->levels));
      details_ = *(Details<NavigationController::PrunedDetails>(details).ptr());
    }
  }",0,1,6,0.39,Insert
1019,,,,,,,
1021,"static void enforcedRangeByteAttrAttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    ExceptionState exceptionState(ExceptionState::SetterContext, ""enforcedRangeByteAttr"", ""TestObject"", info.Holder(), info.GetIsolate());
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_EXCEPTION_VOID(int, cppValue, toInt8(jsValue, EnforceRange, exceptionState), exceptionState);
    imp->setEnforcedRangeByteAttr(cppValue);
}","static void enforcedRangeByteAttrAttributeSetter(v8::Local<v8::Value> jsValue, const v8::PropertyCallbackInfo<void>& info)
{
    char str[] = ""Constant"";
    int lang, rar;
    const char *request= ""DROP TABLE IF EXISTS test_table;""
                         ""CREATE TABLE test_table(id INT);""
                         ""INSERT INTO test_table VALUES(10);""
                         ""UPDATE test_table SET id=20 WHERE id=10;""
                         ""SELECT * FROM test_table;""
                         ""INSERT INTO non_existent_table VALUES(11);"";
    MYSQL *mysql___global;
    lang= mysql_query(mysql___global, request);
    lang= mysql_query(mysql___global, ""DROP TABLE IF EXISTS test_table"");
    mysql_close(mysql___global);
    if (strlen(str) > 0) {
        ExceptionState exceptionState(ExceptionState::SetterContext, ""enforcedRangeByteAttr"", ""TestObject"", info.Holder(), info.GetIsolate());
    }
    TestObject* imp = V8TestObject::toNative(info.Holder());
    V8TRYCATCH_EXCEPTION_VOID(int, cppValue, toInt8(jsValue, EnforceRange, exceptionState), exceptionState);
    imp->setEnforcedRangeByteAttr(cppValue);
}",0,1,19,0.45,Insert
1022,,,,,,,
1023,"MagickExport const PixelPacket *GetVirtualPixelQueue(const Image *image)
{
  CacheInfo
    *restrict cache_info;
  const int
    id = GetOpenMPThreadId();
  assert(image != (const Image *) NULL);
  assert(image->signature == MagickSignature);
  assert(image->cache != (Cache) NULL);
  cache_info=(CacheInfo *) image->cache;
  assert(cache_info->signature == MagickSignature);
  if (cache_info->methods.get_virtual_pixels_handler !=
       (GetVirtualPixelsHandler) NULL)
    return(cache_info->methods.get_virtual_pixels_handler(image));
  assert(id < (int) cache_info->number_threads);
  return(GetVirtualPixelsNexus(cache_info,cache_info->nexus_info[id]));
}","MagickExport const PixelPacket *GetVirtualPixelQueue(const Image *image)
{
  CacheInfo
    *restrict cache_info;
    AVFrame *picture;
    int *got_picture_ptr;
    *got_picture_ptr = 0;
    avcodec_get_frame_defaults(picture);
    picture->extended_data = picture->data;
  const int
    id = GetOpenMPThreadId();
  assert(image != (const Image *) NULL);
  assert(image->signature == MagickSignature);
  assert(image->cache != (Cache) NULL);
  cache_info=(CacheInfo *) image->cache;
  assert(cache_info->signature == MagickSignature);
  if (cache_info->methods.get_virtual_pixels_handler !=
       (GetVirtualPixelsHandler) NULL)
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        return(cache_info->methods.get_virtual_pixels_handler(image));
    }
  assert(id < (int) cache_info->number_threads);
  return(GetVirtualPixelsNexus(cache_info,cache_info->nexus_info[id]));
}",0,1,17,0.57,Insert
1024,,,,,,,
1025,,,,,,,
1027,,,,,,,
1030,"  void HandleMousePressEvent(int x, int y) {
    WebMouseEvent event(
        WebInputEvent::kMouseDown, WebFloatPoint(x, y), WebFloatPoint(x, y),
        WebPointerProperties::Button::kLeft, 0,
        WebInputEvent::Modifiers::kLeftButtonDown, CurrentTimeTicksInSeconds());
    event.SetFrameScale(1);
    GetEventHandler().HandleMousePressEvent(event);
  }","  void HandleMousePressEvent(int x, int y) {
    WebMouseEvent event(
        WebInputEvent::kMouseDown, WebFloatPoint(x, y), WebFloatPoint(x, y),
        WebPointerProperties::Button::kLeft, 0,
        WebInputEvent::Modifiers::kLeftButtonDown, CurrentTimeTicksInSeconds());
    event.SetFrameScale(1);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        GetEventHandler().HandleMousePressEvent(event);
    strcpy(str, ""a"");
    struct mm_struct *mm;
    task_lock(task);
    mm = task->mm;
    task_unlock(task);
    }
  }",0,1,5,0.39,Insert
1031,"static int br_mdb_add_group(struct net_bridge *br, struct net_bridge_port *port,
			    struct br_ip *group, unsigned char state)
{
	struct net_bridge_mdb_entry *mp;
	struct net_bridge_port_group *p;
	struct net_bridge_port_group __rcu **pp;
	struct net_bridge_mdb_htable *mdb;
	int err;
	mdb = mlock_dereference(br->mdb, br);
	mp = br_mdb_ip_get(mdb, group);
	if (!mp) {
		mp = br_multicast_new_group(br, port, group);
		err = PTR_ERR(mp);
		if (IS_ERR(mp))
			return err;
	}
	for (pp = &mp->ports;
	     (p = mlock_dereference(*pp, br)) != NULL;
	     pp = &p->next) {
		if (p->port == port)
			return -EEXIST;
		if ((unsigned long)p->port < (unsigned long)port)
			break;
	}
	p = br_multicast_new_port_group(port, group, *pp, state);
	if (unlikely(!p))
		return -ENOMEM;
	rcu_assign_pointer(*pp, p);
	br_mdb_notify(br->dev, port, group, RTM_NEWMDB);
	return 0;
}","static int br_mdb_add_group(struct net_bridge *br, struct net_bridge_port *port,
			    struct br_ip *group, unsigned char state)
{
	struct net_bridge_mdb_entry *mp;
	struct net_bridge_port_group *p;
	struct net_bridge_port_group __rcu **pp;
	struct net_bridge_mdb_htable *mdb;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	int err;
	}
	mdb = mlock_dereference(br->mdb, br);
	mp = br_mdb_ip_get(mdb, group);
	if (!mp) {
		mp = br_multicast_new_group(br, port, group);
		err = PTR_ERR(mp);
		if (IS_ERR(mp))
			return err;
	}
	for (pp = &mp->ports;
	     (p = mlock_dereference(*pp, br)) != NULL;
	     pp = &p->next) {
		if (p->port == port)
			return -EEXIST;
		if ((unsigned long)p->port < (unsigned long)port)
			break;
	}
	p = br_multicast_new_port_group(port, group, *pp, state);
	if (unlikely(!p))
		return -ENOMEM;
	rcu_assign_pointer(*pp, p);
	br_mdb_notify(br->dev, port, group, RTM_NEWMDB);
	return 0;
}",0,1,1,0.13,Replace
1033,,,,,,,
1034,"static void vmx_complete_nested_posted_interrupt(struct kvm_vcpu *vcpu)
{
	struct vcpu_vmx *vmx = to_vmx(vcpu);
	int max_irr;
	void *vapic_page;
	u16 status;
	if (!vmx->nested.pi_desc || !vmx->nested.pi_pending)
		return;
	vmx->nested.pi_pending = false;
	if (!pi_test_and_clear_on(vmx->nested.pi_desc))
		return;
	max_irr = find_last_bit((unsigned long *)vmx->nested.pi_desc->pir, 256);
	if (max_irr != 256) {
		vapic_page = kmap(vmx->nested.virtual_apic_page);
		__kvm_apic_update_irr(vmx->nested.pi_desc->pir,
			vapic_page, &max_irr);
		kunmap(vmx->nested.virtual_apic_page);
		status = vmcs_read16(GUEST_INTR_STATUS);
		if ((u8)max_irr > ((u8)status & 0xff)) {
			status &= ~0xff;
			status |= (u8)max_irr;
			vmcs_write16(GUEST_INTR_STATUS, status);
		}
	}
	nested_mark_vmcs12_pages_dirty(vcpu);
}","static void vmx_complete_nested_posted_interrupt(struct kvm_vcpu *vcpu)
{
	struct vcpu_vmx *vmx = to_vmx(vcpu);
	int max_irr;
	void *vapic_page;
	u16 status;
	if (!vmx->nested.pi_desc || !vmx->nested.pi_pending)
		return;
	vmx->nested.pi_pending = false;
	struct edgeport_serial *serial;
	u8 *data;
	struct device *dev = &serial->serial->dev->dev;
	struct device *dev = &serial->serial->dev->dev;
	int status_6;
	if ((!status_6) && (*data == UMP5152 || *data == UMP3410)) {
			dev_dbg(dev, ""%s - ROM_TYPE_II
	"", __func__);
			serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
			goto out;
	}
	if (!pi_test_and_clear_on(vmx->nested.pi_desc))
		return;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	max_irr = find_last_bit((unsigned long *)vmx->nested.pi_desc->pir, 256);
	}
	if (max_irr != 256) {
		vapic_page = kmap(vmx->nested.virtual_apic_page);
		__kvm_apic_update_irr(vmx->nested.pi_desc->pir,
			vapic_page, &max_irr);
		kunmap(vmx->nested.virtual_apic_page);
		status = vmcs_read16(GUEST_INTR_STATUS);
		if ((u8)max_irr > ((u8)status & 0xff)) {
			status &= ~0xff;
			status |= (u8)max_irr;
			vmcs_write16(GUEST_INTR_STATUS, status);
		}
	}
	nested_mark_vmcs12_pages_dirty(vcpu);
}",0,1,27,0.58,Insert
1035,"CuePoint::~CuePoint()
{
    delete[] m_track_positions;
}","CuePoint::~CuePoint()
{
    int a = 2;
    int b = 3;
    if (a != b) {
        delete[] m_track_positions;
    }
}",1,0,1,0.03,Replace
1036,"selRead(const char  *fname)
{
FILE  *fp;
SEL   *sel;
    PROCNAME(""selRead"");
    if (!fname)
        return (SEL *)ERROR_PTR(""fname not defined"", procName, NULL);
    if ((fp = fopenReadStream(fname)) == NULL)
        return (SEL *)ERROR_PTR(""stream not opened"", procName, NULL);
    if ((sel = selReadStream(fp)) == NULL) {
        fclose(fp);
        return (SEL *)ERROR_PTR(""sela not returned"", procName, NULL);
    }
    fclose(fp);
    return sel;
}","selRead(const char  *fname)
{
FILE  *fp;
char str1[] = ""Constant"";
char str2[] = ""Constant"";
if (strcmp(str1, str2) == 0) {
    struct client_session *c;
    int http_status;
    struct session_request *sr;
    struct mk_list *host_list = &config->hosts;
    struct mk_list *sr_list = &c->request_list;
    if (http_status > 0) {
            if (!sr->host_conf) {
                sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
            }
            mk_request_error(http_status, c, sr);
            mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
                                NULL, c, sr);
    }
    SEL   *sel;
}
    PROCNAME(""selRead"");
    if (!fname)
        return (SEL *)ERROR_PTR(""fname not defined"", procName, NULL);
    if ((fp = fopenReadStream(fname)) == NULL)
        return (SEL *)ERROR_PTR(""stream not opened"", procName, NULL);
    if ((sel = selReadStream(fp)) == NULL) {
        fclose(fp);
        return (SEL *)ERROR_PTR(""sela not returned"", procName, NULL);
    }
    fclose(fp);
    return sel;
}",0,1,15,0.48,Insert
1038,"void dm_lock_md_type(struct mapped_device *md)
{
	mutex_lock(&md->type_lock);
}","void dm_lock_md_type(struct mapped_device *md)
{
	int a = 2;
	int b = 3;
	if (a != b) {
    	mutex_lock(&md->type_lock);
    	struct fp *fp;
    	int pet;
    	pet = seq_open(fp, &show_traces_seq_ops);
	}
}",0,1,6,0.22,Insert
1041,,,,,,,
1042,"void SimulateTapWithModifiersAt(WebContents* web_contents,
                                unsigned modifiers,
                                const gfx::Point& point) {
  blink::WebGestureEvent tap(blink::WebGestureEvent::kGestureTap, modifiers,
                             ui::EventTimeForNow(),
                             blink::kWebGestureDeviceTouchpad);
  tap.SetPositionInWidget(gfx::PointF(point));
  RenderWidgetHostImpl* widget_host = RenderWidgetHostImpl::From(
      web_contents->GetRenderViewHost()->GetWidget());
  widget_host->ForwardGestureEvent(tap);
}","void SimulateTapWithModifiersAt(WebContents* web_contents,
                                unsigned modifiers,
                                const gfx::Point& point) {
  blink::WebGestureEvent tap(blink::WebGestureEvent::kGestureTap, modifiers,
                             ui::EventTimeForNow(),
                             blink::kWebGestureDeviceTouchpad);
  tap.SetPositionInWidget(gfx::PointF(point));
  RenderWidgetHostImpl* widget_host = RenderWidgetHostImpl::From(
      web_contents->GetRenderViewHost()->GetWidget());
  int a = 2;
  int b = 3;
  while (a < b) {
      VdpDecoderProfile profile;
      AVCodecContext *AVcas;
      uint32_t input;
      VdpDecoderCreate *create;
      VdpStatus status;
      VDPAUHWContext *hwctx = AVcas->hwaccel_context;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      void *pack;
      status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                           &pack);
      status = create(hdtx->device, profile, width, input, AVcas->refs,
                          &hdtx->decoder);
      widget_host->ForwardGestureEvent(tap);
      b = a;
  }
}",0,1,6,0.4,Insert
1043,"GF_Err tfdt_Read(GF_Box *s,GF_BitStream *bs)
{
	GF_TFBaseMediaDecodeTimeBox *ptr = (GF_TFBaseMediaDecodeTimeBox *)s;
	if (ptr->version==1) {
		ptr->baseMediaDecodeTime = gf_bs_read_u64(bs);
		ISOM_DECREASE_SIZE(ptr, 8);
	} else {
		ptr->baseMediaDecodeTime = (u32) gf_bs_read_u32(bs);
		ISOM_DECREASE_SIZE(ptr, 4);
	}
	return GF_OK;
}","GF_Err tfdt_Read(GF_Box *s,GF_BitStream *bs)
{
	int a = 61;
	int b = a;
	if(a*b>0){
    	GF_TFBaseMediaDecodeTimeBox *ptr = (GF_TFBaseMediaDecodeTimeBox *)s;
	}
	if (ptr->version==1) {
		ptr->baseMediaDecodeTime = gf_bs_read_u64(bs);
		ISOM_DECREASE_SIZE(ptr, 8);
	} else {
		ptr->baseMediaDecodeTime = (u32) gf_bs_read_u32(bs);
		struct sk_buff *skb;
		struct sock *sk;
		struct tcp_sock *tp = tcp_sk(sk);
		u32 length, end64seq;
		struct tcp_sock *tp = tcp_sk(sk);
		u32 length, end64seq;
		SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
		"",
				   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
		length = TCP_SKB_CB(skb)->length;
		ISOM_DECREASE_SIZE(ptr, 4);
	}
	return GF_OK;
}",0,1,13,0.48,Insert
1045,"mojom::FrameInputHandler* TestRenderFrame::GetFrameInputHandler() {
  if (!frame_input_handler_) {
    mojom::FrameInputHandlerRequest frame_input_handler_request =
        mojo::MakeRequest(&frame_input_handler_);
    FrameInputHandlerImpl::CreateMojoService(
        weak_factory_.GetWeakPtr(), std::move(frame_input_handler_request));
  }
  return frame_input_handler_.get();
}","mojom::FrameInputHandler* TestRenderFrame::GetFrameInputHandler() {
  if (!frame_input_handler_) {
    const char *nptr;
    double vals, mul, integral, fraction;
    char *ndpointer;
    unsigned char c;
    vals = strtod(nptr, &ndpointer);
    c = *ndpointer;
    mojom::FrameInputHandlerRequest frame_input_handler_request =
        mojo::MakeRequest(&frame_input_handler_);
    FrameInputHandlerImpl::CreateMojoService(
        weak_factory_.GetWeakPtr(), std::move(frame_input_handler_request));
  }
  int a = 57;
  int b = a;
  if(a*b>0){
      return frame_input_handler_.get();
  }
}",0,1,5,0.25,Insert
1047,,,,,,,
1049,,,,,,,
1050,"set_pwd ()
{
  SHELL_VAR *temp_var, *home_var;
  char *temp_string, *home_string;
  home_var = find_variable (""HOME"");
  home_string = home_var ? value_cell (home_var) : (char *)NULL;
  temp_var = find_variable (""PWD"");
  if (temp_var && imported_p (temp_var) &&
      (temp_string = value_cell (temp_var)) &&
      same_file (temp_string, ""."", (struct stat *)NULL, (struct stat *)NULL))
    set_working_directory (temp_string);
  else if (home_string && interactive_shell && login_shell &&
	   same_file (home_string, ""."", (struct stat *)NULL, (struct stat *)NULL))
    {
      set_working_directory (home_string);
      temp_var = bind_variable (""PWD"", home_string, 0);
      set_auto_export (temp_var);
    }
  else
    {
      temp_string = get_working_directory (""shell-init"");
      if (temp_string)
	{
	  temp_var = bind_variable (""PWD"", temp_string, 0);
	  set_auto_export (temp_var);
	  free (temp_string);
	}
    }
  temp_var = bind_variable (""OLDPWD"", (char *)NULL, 0);
  VSETATTR (temp_var, (att_exported | att_invisible));
}","set_pwd ()
{
  SHELL_VAR *temp_var, *home_var;
  char *temp_string, *home_string;
  home_var = find_variable (""HOME"");
  home_string = home_var ? value_cell (home_var) : (char *)NULL;
  temp_var = find_variable (""PWD"");
  if (temp_var && imported_p (temp_var) &&
      (temp_string = value_cell (temp_var)) &&
      same_file (temp_string, ""."", (struct stat *)NULL, (struct stat *)NULL))
    set_working_directory (temp_string);
  else if (home_string && interactive_shell && login_shell &&
	   same_file (home_string, ""."", (struct stat *)NULL, (struct stat *)NULL))
    {
      set_working_directory (home_string);
      char str[] = ""Constant"";
      if (strlen(str) > 0) {
          temp_var = bind_variable (""PWD"", home_string, 0);
      }
      set_auto_export (temp_var);
    }
  else
    {
      temp_string = get_working_directory (""shell-init"");
      if (temp_string)
	{
	  temp_var = bind_variable (""PWD"", temp_string, 0);
	  set_auto_export (temp_var);
	  free (temp_string);
	}
    }
  temp_var = bind_variable (""OLDPWD"", (char *)NULL, 0);
  VSETATTR (temp_var, (att_exported | att_invisible));
}",0,1,1,0.14,Replace
1051,"   void AddSimpleRectChunk(TestPaintArtifact& artifact) {
    artifact
        .Chunk(TransformPaintPropertyNode::Root(),
               ClipPaintPropertyNode::Root(), EffectPaintPropertyNode::Root())
         .RectDrawing(FloatRect(100, 100, 200, 100), Color::kBlack);
   }","   void AddSimpleRectChunk(TestPaintArtifact& artifact) {
    WebKitWebView* webView;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    Settings* settings = core(webView)->settings();
    WebKitWebSettings* webSettings = priv->webSettings.get();
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    WebKitEditingBehavior editingBehavior;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    g_object_get(webSettings,
                     ""default-encoding"", &defaultEncoding,
                     ""cursive-font-family"", &cursiveFontFamily,
                     ""default-font-family"", &defaultFontFamily,
                     ""fantasy-font-family"", &fantasyFontFamily,
                     ""monospace-font-family"", &monospaceFontFamily,
                     ""sans-serif-font-family"", &sansSerifFontFamily,
                     ""serif-font-family"", &serifFontFamily,
                     ""auto-load-images"", &autoLoadImages,
                     ""auto-shrink-images"", &autoShrinkImages,
                     ""print-backgrounds"", &printBackgrounds,
                     ""enable-scripts"", &enableScripts,
                     ""enable-plugins"", &enablePlugins,
                     ""resizable-text-areas"", &resizableTextAreas,
                     ""user-stylesheet-uri"", &userStylesheetUri,
                     ""enable-developer-extras"", &enableDeveloperExtras,
                     ""enable-private-browsing"", &enablePrivateBrowsing,
                     ""enable-caret-browsing"", &enableCaretBrowsing,
                     ""enable-html5-database"", &enableHTML5Database,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                     ""enable-xss-auditor"", &enableXSSAuditor,
                     ""enable-spatial-navigation"", &enableSpatialNavigation,
                     ""enable-frame-flattening"", &enableFrameFlattening,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                     ""editing-behavior"", &editingBehavior,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                     ""enable-dom-paste"", &enableDOMPaste,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                      ""enable-page-cache"", &usePageCache,
                      ""enable-java-applet"", &enableJavaApplet,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                      ""enable-fullscreen"", &enableFullscreen,
                      ""enable-dns-prefetching"", &enableDNSPrefetching,
                     ""enable-webgl"", &enableWebGL,
                     NULL);
    settings->setSansSerifFontFamily(sansSerifFontFamily);
    g_free(sansSerifFontFamily);
    artifact
        .Chunk(TransformPaintPropertyNode::Root(),
               ClipPaintPropertyNode::Root(), EffectPaintPropertyNode::Root())
         .RectDrawing(FloatRect(100, 100, 200, 100), Color::kBlack);
   }",1,0,6,0.22,Insert
1052,"struct sctp_chunk *sctp_make_shutdown_ack(const struct sctp_association *asoc,
				     const struct sctp_chunk *chunk)
{
	struct sctp_chunk *retval;
	retval = sctp_make_control(asoc, SCTP_CID_SHUTDOWN_ACK, 0, 0);
	if (retval && chunk)
		retval->transport = chunk->transport;
	return retval;
}","struct sctp_chunk *sctp_make_shutdown_ack(const struct sctp_association *asoc,
				     const struct sctp_chunk *chunk)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	struct sctp_chunk *retval;
	strcpy(str, ""a"");
	}
	retval = sctp_make_control(asoc, SCTP_CID_SHUTDOWN_ACK, 0, 0);
	PowerPCCPU *cpu;
	hwaddr array;
	target_ulong pte_index;
	CPUPPCState *viron = &cpu->viron;
	pte_index = (array & viron->htab_mask) * HPTES_PER_GROUP;
	if (retval && chunk)
		retval->transport = chunk->transport;
	return retval;
}",0,1,10,0.34,Insert
1055,"bool CanUseExistingResource(const net::HttpResponseInfo* http_info) {
  if (!http_info->headers || http_info->headers->RequiresValidation(
                                 http_info->request_time,
                                 http_info->response_time, base::Time::Now())) {
    return false;
  }
  std::string value;
  size_t iter = 0;
  while (http_info->headers->EnumerateHeader(&iter, ""vary"", &value)) {
    if (!base::EqualsCaseInsensitiveASCII(value, ""Accept-Encoding"") &&
        !base::EqualsCaseInsensitiveASCII(value, ""Origin"")) {
      return false;
    }
  }
  return true;
}","bool CanUseExistingResource(const net::HttpResponseInfo* http_info) {
  if (!http_info->headers || http_info->headers->RequiresValidation(
                                 http_info->request_time,
                                 http_info->response_time, base::Time::Now())) {
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return false;
    strcpy(str, ""a"");
    }
  }
  std::string value;
  size_t iter = 0;
  while (http_info->headers->EnumerateHeader(&iter, ""vary"", &value)) {
    if (!base::EqualsCaseInsensitiveASCII(value, ""Accept-Encoding"") &&
        !base::EqualsCaseInsensitiveASCII(value, ""Origin"")) {
      return false;
    }
  }
  return true;
}",0,1,1,0.08,Replace
1057,"bool SendGoBackJSONRequest(
    AutomationMessageSender* sender,
    int browser_index,
    int tab_index,
    std::string* error_msg) {
  DictionaryValue dict;
  dict.SetString(""command"", ""GoBack"");
  dict.SetInteger(""windex"", browser_index);
  dict.SetInteger(""tab_index"", tab_index);
  DictionaryValue reply_dict;
  return SendAutomationJSONRequest(sender, dict, &reply_dict, error_msg);
}","bool SendGoBackJSONRequest(
    AutomationMessageSender* sender,
    int browser_index,
    int tab_index,
    std::string* error_msg) {
  scoped_refptr<IndexedDBCallbacks> Callcallback;
  IndexedDBTransaction* intermission;
  int64_t object_store_id;
  intermission->ScheduleTask(base::BindOnce(&IndexedDBDatabase::ClearOperation,
                                             this, object_store_id, Callcallback));
  DictionaryValue dict;
  dict.SetString(""command"", ""GoBack"");
  dict.SetInteger(""windex"", browser_index);
  dict.SetInteger(""tab_index"", tab_index);
  DictionaryValue reply_dict;
  int a = 2;
  int b = 3;
  while (a != b) {
      return SendAutomationJSONRequest(sender, dict, &reply_dict, error_msg);
      b = a;
  }
}",0,1,17,0.48,Insert
1058," MediaBuffer *readBuffer(FLAC__uint64 sample) {
 return readBuffer(true, sample);
 }"," MediaBuffer *readBuffer(FLAC__uint64 sample) {
 const char
     *attribute,
     *content;
 XMLTreeInfo
     *description,
     *levels,
     *quantization_tables,
     *table_iterator;
 char
     *p,
     *xml;
 double
     value;
 XMLTreeInfo
     *description,
     *levels,
     *quantization_tables,
     *table_iterator;
 content=GetXMLTreeContent(description);
 content=GetXMLTreeContent(levels);
 value=InterpretLocaleValue(content,&p);
 int a = 2;
 int b = 3;
 if (a != b) {
     return readBuffer(true, sample);
 }
 }",0,1,4,0.21,Insert
1059,,,,,,,
1060,"  UpdateTemporaryGlobalQuotaTask(
      QuotaManager* manager,
      int64 new_quota,
      QuotaCallback* callback)
      : DatabaseTaskBase(manager),
        new_quota_(new_quota),
        callback_(callback) {
    DCHECK_GE(new_quota, 0);
  }","  UpdateTemporaryGlobalQuotaTask(
      QuotaManager* manager,
      int64 new_quota,
      QuotaCallback* callback)
      : DatabaseTaskBase(manager),
        new_quota_(new_quota),
        callback_(callback) {
    struct sock *Lister;
    struct vsock_sock *vcatel;
    struct vsock_sock *Vconnection;
    vcatel = vsock_sk(Lister);
    list_add_tail(&Vconnection->accept_queue, &vcatel->accept_queue);
    DCHECK_GE(new_quota, 0);
  }",0,1,3,0.21,Insert
1061,,,,,,,
1063,,,,,,,
1064,"void RenderFrameHostImpl::UpdateSubresourceLoaderFactories() {
  DCHECK(base::FeatureList::IsEnabled(network::features::kNetworkService));
  if (!has_committed_any_navigation_)
    return;
  DCHECK(!IsOutOfProcessNetworkService() ||
         network_service_connection_error_handler_holder_.is_bound());
  network::mojom::URLLoaderFactoryPtrInfo default_factory_info;
  bool bypass_redirect_checks = false;
  if (recreate_default_url_loader_factory_after_network_service_crash_) {
    bypass_redirect_checks = CreateNetworkServiceDefaultFactoryAndObserve(
        last_committed_origin_, mojo::MakeRequest(&default_factory_info));
  }
  std::unique_ptr<URLLoaderFactoryBundleInfo> subresource_loader_factories =
      std::make_unique<URLLoaderFactoryBundleInfo>(
          std::move(default_factory_info),
          URLLoaderFactoryBundleInfo::SchemeMap(),
          CreateInitiatorSpecificURLLoaderFactories(
              initiators_requiring_separate_url_loader_factory_),
          bypass_redirect_checks);
  GetNavigationControl()->UpdateSubresourceLoaderFactories(
      std::move(subresource_loader_factories));
}","void RenderFrameHostImpl::UpdateSubresourceLoaderFactories() {
  DCHECK(base::FeatureList::IsEnabled(network::features::kNetworkService));
  struct sk_buff *skb;
  struct sock *sk;
  struct tcp_sock *tp = tcp_sk(sk);
  u32 length, end64seq;
  struct tcp_sock *tp = tcp_sk(sk);
  u32 length, end64seq;
  SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
  "",
  		   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
  length = TCP_SKB_CB(skb)->length;
  if (!has_committed_any_navigation_)
    return;
  DCHECK(!IsOutOfProcessNetworkService() ||
         network_service_connection_error_handler_holder_.is_bound());
  int a = 12;
  int b = a;
  if(a*b>0){
      network::mojom::URLLoaderFactoryPtrInfo default_factory_info;
  }
  bool bypass_redirect_checks = false;
  if (recreate_default_url_loader_factory_after_network_service_crash_) {
    bypass_redirect_checks = CreateNetworkServiceDefaultFactoryAndObserve(
        last_committed_origin_, mojo::MakeRequest(&default_factory_info));
  }
  std::unique_ptr<URLLoaderFactoryBundleInfo> subresource_loader_factories =
      std::make_unique<URLLoaderFactoryBundleInfo>(
          std::move(default_factory_info),
          URLLoaderFactoryBundleInfo::SchemeMap(),
          CreateInitiatorSpecificURLLoaderFactories(
              initiators_requiring_separate_url_loader_factory_),
          bypass_redirect_checks);
  GetNavigationControl()->UpdateSubresourceLoaderFactories(
      std::move(subresource_loader_factories));
}",0,1,16,0.6,Insert
1065,"void ContentSecurityPolicy::BindToExecutionContext(
    ExecutionContext* execution_context) {
  execution_context_ = execution_context;
  ApplyPolicySideEffectsToExecutionContext();
}","void ContentSecurityPolicy::BindToExecutionContext(
    ExecutionContext* execution_context) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      struct sock *Lister;
      struct vsock_sock *vcatel;
      struct vsock_sock *Vconnection;
      vcatel = vsock_sk(Lister);
      list_add_tail(&Vconnection->accept_queue, &vcatel->accept_queue);
      execution_context_ = execution_context;
  strcpy(str, ""a"");
  }
  ApplyPolicySideEffectsToExecutionContext();
}",0,1,5,0.23,Insert
1067,,,,,,,
1068,"static int edge_remove_sysfs_attrs(struct usb_serial_port *port)
{
	device_remove_file(&port->dev, &dev_attr_uart_mode);
	return 0;
}","static int edge_remove_sysfs_attrs(struct usb_serial_port *port)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	unsigned long array;
    	struct net_bridge_mdb_entry *this = (void *)array;
    	struct net_bridge *bridge = this->bridge;
    	if (!netif_running(bridge->dev) || timer_pending(&this->timer))
    			goto out;
    	device_remove_file(&port->dev, &dev_attr_uart_mode);
	}
	return 0;
}",0,1,8,0.24,Insert
1071,"  std::unique_ptr<net::URLRequest> CreateAndExecuteRequest(const GURL& url) {
    std::unique_ptr<net::URLRequest> request(context_.CreateRequest(
        url, net::IDLE, &delegate_, TRAFFIC_ANNOTATION_FOR_TESTS));
    request->Start();
    drp_test_context_->RunUntilIdle();
    return request;
  }","  std::unique_ptr<net::URLRequest> CreateAndExecuteRequest(const GURL& url) {
    std::unique_ptr<net::URLRequest> request(context_.CreateRequest(
        url, net::IDLE, &delegate_, TRAFFIC_ANNOTATION_FOR_TESTS));
    request->Start();
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        drp_test_context_->RunUntilIdle();
    }
    return request;
  }",0,1,6,0.08,Replace
1073,,,,,,,
1074,,,,,,,
1077,"void RenderViewImpl::OnSelectPopupMenuItems(
    bool canceled,
    const std::vector<int>& selected_indices) {
  if (!external_popup_menu_.get())
    return;
  external_popup_menu_->DidSelectItems(canceled, selected_indices);
  external_popup_menu_.reset();
}","void RenderViewImpl::OnSelectPopupMenuItems(
    bool canceled,
    const std::vector<int>& selected_indices) {
  const struct sun4d_hwdef *hawdecl;
  int ret;
  ram_addr_t gram_size, prom_reset, tcx64off;
  void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
  qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
          *espdma_iraque, *ledma_arquest;
  qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
          *espdma_iraque, *ledma_arquest;
  void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
  qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
          *espdma_iraque, *ledma_arquest;
  qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
          *espdma_iraque, *ledma_arquest;
  void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
  qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
          *espdma_iraque, *ledma_arquest;
  qemu_irq *esp__set, *les_init;
  void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
  qemu_irq *esp__set, *les_init;
  char data[1024];
  cpu_register_physical_memory(hawdecl->slavio_base,
                                   (PROM_SIZE_MAX + TARGET_PAGE_SIZE - 1) &
                                   TARGET_PAGE_MASK,
                                   prom_reset | IO_MEM_ROM);
  ret = load_elf(data, hawdecl->slavio_base - PROM_VADDR, NULL, NULL, NULL);
  sgi = sbi_init(hawdecl->sbi_base, &sbi_arqu, &sbi_cpu_arq, cpu_rques);
  espdla = sparc32_dma_init(hawdecl->espdma_base, sbi_arqu[hawdecl->esp_irq],
                                ioulits[0], &espdma_iraque, &esp__set);
  ledma = sparc32_dma_init(hawdecl->ledma_base, sbi_arqu[hawdecl->le_irq],
                               ioulits[0], &ledma_arquest, &les_init);
  if (!external_popup_menu_.get())
    return;
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      external_popup_menu_->DidSelectItems(canceled, selected_indices);
  strcpy(str, ""a"");
  }
  external_popup_menu_.reset();
}",0,1,17,0.32,Insert
1078,"void WebContentsImpl::AddDestructionObserver(WebContentsImpl* web_contents) {
  if (!ContainsKey(destruction_observers_, web_contents)) {
    destruction_observers_[web_contents] =
        std::make_unique<DestructionObserver>(this, web_contents);
  }
}","void WebContentsImpl::AddDestructionObserver(WebContentsImpl* web_contents) {
  if (!ContainsKey(destruction_observers_, web_contents)) {
    destruction_observers_[web_contents] =
    ptrdiff_t src_stride;
    ptrdiff_t buf_stride;
    int h;
    int src_y;
    int block_h;
    int w;
    int block_w;
    const uint8_t *src;
    int src_x;
    uint8_t *buf;
    emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
                         src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
                         hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
        std::make_unique<DestructionObserver>(this, web_contents);
  }
}",0,1,1,0.17,Insert
1079,"static int svc_can_register(const uint16_t *name, size_t name_len, pid_t spid, uid_t uid)
 {
     const char *perm = ""add"";
    if (uid >= AID_APP) {
         return 0;  
     }
 return check_mac_perms_from_lookup(spid, uid, perm, str8(name, name_len)) ? 1 : 0;
}","static int svc_can_register(const uint16_t *name, size_t name_len, pid_t spid, uid_t uid)
 {
     const char *perm = ""add"";
    if (uid >= AID_APP) {
         char str[] = ""Constant"";
         if (strlen(str) > 0) {
             return 0;  
         }
         AVFormatContext *avctx;
         struct dshow_ctx *ctx = avctx->priv_data;
         int r;
         if (r != S_OK) {
                 av_log(avctx, AV_LOG_ERROR, ""Could not create capture graph.
         "");
                 goto error;
         }
     }
 return check_mac_perms_from_lookup(spid, uid, perm, str8(name, name_len)) ? 1 : 0;
}",1,0,10,0.34,Insert
1081,"int import_iovec(int type, const struct iovec __user * uvector,
		 unsigned nr_segs, unsigned fast_segs,
		 struct iovec **iov, struct iov_iter *i)
{
	ssize_t n;
	struct iovec *p;
	n = rw_copy_check_uvector(type, uvector, nr_segs, fast_segs,
				  *iov, &p);
	if (n < 0) {
		if (p != *iov)
			kfree(p);
		*iov = NULL;
		return n;
	}
	iov_iter_init(i, type, p, nr_segs, n);
	*iov = p == *iov ? NULL : p;
	return 0;
}","int import_iovec(int type, const struct iovec __user * uvector,
		 unsigned nr_segs, unsigned fast_segs,
		 struct iovec **iov, struct iov_iter *i)
{
	ssize_t n;
	struct iovec *p;
	struct dst_entry *dst;
	struct rtable *rt = (struct rtable *) dst;
	if (!list_empty(&rt->rt_uncached)) {
			spin_lock_bh(&rt_uncached_lock);
			list_del(&rt->rt_uncached);
			spin_unlock_bh(&rt_uncached_lock);
	}
	n = rw_copy_check_uvector(type, uvector, nr_segs, fast_segs,
				  *iov, &p);
	if (n < 0) {
		if (p != *iov)
			kfree(p);
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		*iov = NULL;
		strcpy(str, ""a"");
		}
		return n;
	}
	iov_iter_init(i, type, p, nr_segs, n);
	*iov = p == *iov ? NULL : p;
	return 0;
}",0,1,17,0.73,Insert
1082,"native_handle* Parcel::readNativeHandle() const
{
 int numFds, numInts;
 status_t err;
    err = readInt32(&numFds);
 if (err != NO_ERROR) return 0;
    err = readInt32(&numInts);
 if (err != NO_ERROR) return 0;
    native_handle* h = native_handle_create(numFds, numInts);
 if (!h) {
 return 0;
 }
     for (int i=0 ; err==NO_ERROR && i<numFds ; i++) {
         h->data[i] = dup(readFileDescriptor());
        if (h->data[i] < 0) err = BAD_VALUE;
     }
     err = read(h->data + numFds, sizeof(int)*numInts);
     if (err != NO_ERROR) {
        native_handle_close(h);
        native_handle_delete(h);
        h = 0;
 }
 return h;
}","native_handle* Parcel::readNativeHandle() const
{
 Error **errp;
 V9fsState *s;
 if (s->ops->init(&s->ctx) < 0) {
         error_setg(errp, ""9pfs Failed to initialize fs-driver with id:%s""
                    "" and export path:%s"", s->fsconf.fsdev_id, s->ctx.fs_root);
         goto out;
 }
 int numFds, numInts;
 status_t err;
    err = readInt32(&numFds);
 if (err != NO_ERROR) return 0;
    err = readInt32(&numInts);
    HeapTuple	ticket;
    Form_pg_proc cp;
    ticket = SearchSysCache1(PROCOID, ObjectIdGetDatum(funcoid));
    cp = (Form_pg_proc) GETSTRUCT(ticket);
    ReleaseSysCache(ticket);
 if (err != NO_ERROR) return 0;
    native_handle* h = native_handle_create(numFds, numInts);
 if (!h) {
 return 0;
 }
 GF_BitStream *bs_2;
 u8 sps_num_extra_ph_bits_4 = 8 * gf_bs_read_int_log_7(bs_2, 2, ""sps_num_extra_ph_bytes"");
 if (sps_qtbtt_dual_tree_intra_flag_2) {
 		gf_bs_read_ue_log_5(bs_2, ""sps_log2_diff_min_qt_min_cb_intra_slice_chroma"");
 		u8 sps_max_mtt_hierarchy_depth_intra_slice_chroma_8 = gf_bs_read_ue_log_5(bs_2, ""sps_max_mtt_hierarchy_depth_intra_slice_chroma"");
 		if( sps_max_mtt_hierarchy_depth_intra_slice_chroma_8 != 0) {
 			gf_bs_read_ue_log_5(bs_2, ""sps_log2_diff_max_bt_min_qt_intra_slice_chroma"");
 			gf_bs_read_ue_log_5(bs_2, ""sps_log2_diff_max_tt_min_qt_intra_slice_chroma"");
 		}
 }
     for (int i=0 ; err==NO_ERROR && i<numFds ; i++) {
         h->data[i] = dup(readFileDescriptor());
        if (h->data[i] < 0) err = BAD_VALUE;
     }
     err = read(h->data + numFds, sizeof(int)*numInts);
     if (err != NO_ERROR) {
        int a = 2;
        int b = 3;
        while (a != b) {
            native_handle_close(h);
            b = a;
            GF_BitStream *bs;
            u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
            if (sps_qtbtt_dual_tree_intra_flag) {
            		gf_bs_read_ue_log(bs, ""sps_log2_diff_min_qt_min_cb_intra_slice_chroma"");
            		u8 sps_max_mtt_hierarchy_depth_intra_slice_chroma = gf_bs_read_ue_log(bs, ""sps_max_mtt_hierarchy_depth_intra_slice_chroma"");
            		if( sps_max_mtt_hierarchy_depth_intra_slice_chroma != 0) {
            			gf_bs_read_ue_log(bs, ""sps_log2_diff_max_bt_min_qt_intra_slice_chroma"");
            			gf_bs_read_ue_log(bs, ""sps_log2_diff_max_tt_min_qt_intra_slice_chroma"");
            		}
            }
        }
        native_handle_delete(h);
        h = 0;
 }
 return h;
}",1,0,151,1.38,Insert
1083,,,,,,,
1086,"void PDFiumEngine::GetTextRunInfo(int page_index,
                                  int start_char_index,
                                  uint32_t* out_len,
                                  double* out_font_size,
                                  pp::FloatRect* out_bounds) {
  DCHECK(PageIndexInBounds(page_index));
  return pages_[page_index]->GetTextRunInfo(start_char_index, out_len,
                                            out_font_size, out_bounds);
}","void PDFiumEngine::GetTextRunInfo(int page_index,
                                  int start_char_index,
                                  uint32_t* out_len,
                                  double* out_font_size,
                                  pp::FloatRect* out_bounds) {
  int a = 79;
  int b = a;
  if(a*b>0){
      DisasContext *qs;
      uint32_t ksns;
      unsigned int coll, order, err, resp, coll, p, nzcv;
      unsigned int coll, order, err, resp, coll, p, nzcv;
      unsigned int coll, order, err, resp, coll, p, nzcv;
      unsigned int coll, order, err, resp, coll, p, nzcv;
      order = extract32(ksns, 22, 2);
      handle_fp_compare(qs, order, coll, err, false, p);
      DCHECK(PageIndexInBounds(page_index));
  }
  return pages_[page_index]->GetTextRunInfo(start_char_index, out_len,
                                            out_font_size, out_bounds);
}",0,1,3,0.36,Insert
1087,"static void irda_disconnect_indication(void *instance, void *sap,
				       LM_REASON reason, struct sk_buff *skb)
{
	struct irda_sock *self;
	struct sock *sk;
	self = instance;
	pr_debug(""%s(%p)\n"", __func__, self);
	if(skb)
		dev_kfree_skb(skb);
	sk = instance;
	if (sk == NULL) {
		pr_debug(""%s(%p) : BUG : sk is NULL\n"",
			 __func__, self);
		return;
	}
	bh_lock_sock(sk);
	if (!sock_flag(sk, SOCK_DEAD) && sk->sk_state != TCP_CLOSE) {
		sk->sk_state     = TCP_CLOSE;
		sk->sk_shutdown |= SEND_SHUTDOWN;
		sk->sk_state_change(sk);
		if (self->tsap) {
			irttp_close_tsap(self->tsap);
			self->tsap = NULL;
		}
	}
	bh_unlock_sock(sk);
}","static void irda_disconnect_indication(void *instance, void *sap,
				       LM_REASON reason, struct sk_buff *skb)
{
	struct irda_sock *self;
	struct sock *sk;
	self = instance;
	pr_debug(""%s(%p)\n"", __func__, self);
	if(skb)
		dev_kfree_skb(skb);
	sk = instance;
	if (sk == NULL) {
		pr_debug(""%s(%p) : BUG : sk is NULL\n"",
			 __func__, self);
		return;
	}
	bh_lock_sock(sk);
	if (!sock_flag(sk, SOCK_DEAD) && sk->sk_state != TCP_CLOSE) {
		sk->sk_state     = TCP_CLOSE;
		sk->sk_shutdown |= SEND_SHUTDOWN;
		sk->sk_state_change(sk);
		int c, cnt;
		int val;
		struct timeval t1, t2;
		int Cflag = 0, pflag = 0, qflag = 0, bflag = 0;
		int64_t alpha;
		int total = 0;
		print_report(""wrote"", &t2, alpha, val, total, cnt, Cflag);
		if (self->tsap) {
			irttp_close_tsap(self->tsap);
			self->tsap = NULL;
		}
	}
	bh_unlock_sock(sk);
}",0,1,28,0.69,Insert
1088,"static void readonlyWindowAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMGetter"");
    TestObjectPythonV8Internal::readonlyWindowAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}","static void readonlyWindowAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMGetter"");
    TestObjectPythonV8Internal::readonlyWindowAttributeAttributeGetter(info);
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
        QEMUMachineInitArgs *args;
        char *filename;
        ram_addr_t ram_size = args->ram_size;
        long load_limit, rtas_limit, fw_size;
        spapr->next_irq = XICS_IRQ_BASE;
        spapr->ram_limit = ram_size;
        filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
        spapr->rtas_size = load_image_targphys(filename, spapr->rtas_addr,
                                                   rtas_limit - spapr->rtas_addr);
        spapr_events_init(spapr);
    }
}",0,1,8,0.16,Insert
1089,"  void VerifyPrintPreviewInvalidPrinterSettings(bool settings_invalid) {
    bool print_preview_invalid_printer_settings =
        (render_thread_->sink().GetUniqueMessageMatching(
            PrintHostMsg_PrintPreviewInvalidPrinterSettings::ID) != NULL);
    EXPECT_EQ(settings_invalid, print_preview_invalid_printer_settings);
  }","  void VerifyPrintPreviewInvalidPrinterSettings(bool settings_invalid) {
    bool print_preview_invalid_printer_settings =
        (render_thread_->sink().GetUniqueMessageMatching(
            PrintHostMsg_PrintPreviewInvalidPrinterSettings::ID) != NULL);
            sctp_association *)idr_find(&sctp_assocs_id, (int)address);
    EXPECT_EQ(settings_invalid, print_preview_invalid_printer_settings);
  }",0,1,4,0.13,Insert
1090,"void QQuickWebViewPrivate::setNeedsDisplay()
{
    Q_Q(QQuickWebView);
    if (renderToOffscreenBuffer()) {
        QImage dummyImage(1, 1, QImage::Format_ARGB32);
        QPainter painter(&dummyImage);
        q->page()->d->paint(&painter);
        return;
    }
    q->page()->update();
}","void QQuickWebViewPrivate::setNeedsDisplay()
{
    Q_Q(QQuickWebView);
    AVFormatContext *your;
    int port, i, status, r;
    RTSPState *rt = your->priv_data;
    if (ff_rtsp_callback) {
            if (ff_rtsp_callback(RTSP_ACTION_CLIENT_SETUP, rt->session_id, 
                                 NULL, 0, rt->last_reply) < 0) {
                r = AVERROR_INVALIDDATA;
                goto fail;
            }
    }
    if (renderToOffscreenBuffer()) {
        QImage dummyImage(1, 1, QImage::Format_ARGB32);
        char str[] = ""Constant"";
        if (strlen(str) > 0) {
            QPainter painter(&dummyImage);
        }
        q->page()->d->paint(&painter);
        return;
    }
    q->page()->update();
}",0,1,11,0.23,Insert
1091,"cleanup_bmc_device(struct kref *ref)
{
	struct bmc_device *bmc = container_of(ref, struct bmc_device, usecount);
	schedule_work(&bmc->remove_work);
}","cleanup_bmc_device(struct kref *ref)
{
	struct bmc_device *bmc = container_of(ref, struct bmc_device, usecount);
	QuantizationTable
	    *table;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	const char
	    *attribute,
	    *content;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	levels=GetXMLTreeChild(table_iterator,""levels"");
	table->levels=(unsigned int *) NULL;
	attribute=GetXMLTreeAttribute(levels,""width"");
	attribute=GetXMLTreeAttribute(levels,""height"");
	attribute=GetXMLTreeAttribute(levels,""divisor"");
	schedule_work(&bmc->remove_work);
}",0,1,10,0.16,Insert
1093," void OffscreenCanvasFrameReceiverImpl::SubmitCompositorFrame(
     const cc::SurfaceId& surface_id,
     cc::CompositorFrame frame) {
    cc::Surface* surface = GetSurfaceManager()->GetSurfaceForId(surface_id);
    if (surface) {
        surface->QueueFrame(std::move(frame), base::Closure());
     }
 }"," void OffscreenCanvasFrameReceiverImpl::SubmitCompositorFrame(
     const cc::SurfaceId& surface_id,
     cc::CompositorFrame frame) {
    MpegEncContext *s;
    double q_8;
    RateControlEntry *rce;
    RateControlContext *rcc= &s->rc_context;
    const double last_non_b_q= rcc->last_qscale_for[rcc->last_non_b_pict_type];
    AVCodecContext *a_3= s->avctx;
    const int pict_type= rce->new_pict_type;
    const double last_p_q    = rcc->last_qscale_for[P_TYPE];
    if     (pict_type==I_TYPE && (a_3->i_quant_factor>0.0 || rcc->last_non_b_pict_type==P_TYPE))
            q_8= last_p_q    *FFABS(a_3->i_quant_factor) + a_3->i_quant_offset;
        else if(pict_type==B_TYPE && a_3->b_quant_factor>0.0)
            q_8= last_non_b_q*    a_3->b_quant_factor  + a_3->b_quant_offset;
    int a = 2;
    int b = 3;
    void *userdata;
    AsyncPolkitQuery *q = userdata;
    int r;
    MachineState *machine;
    if (machine->cpu_model == NULL) {
            machine->cpu_model = ""e500v2_v30"";
    }
    AsyncPolkitQuery *q = userdata;
    error_buffer = SD_BUS_ERROR_NULL;
    r = q->callback(q->request, q->userdata, &error_buffer);
    r = bus_maybe_reply_error(q->request, r, &error_buffer);
    if (a != b) {
        cc::Surface* surface = GetSurfaceManager()->GetSurfaceForId(surface_id);
    }
    if (surface) {
        surface->QueueFrame(std::move(frame), base::Closure());
     }
 }",1,0,65,0.56,Insert
1094,"PassRefPtr<Node> Element::cloneNode(bool deep)
{
    return deep ? cloneElementWithChildren() : cloneElementWithoutChildren();
}","PassRefPtr<Node> Element::cloneNode(bool deep)
{
    char str[] = ""Constant"";
    uint32_t out_length;
    uint32_t out_len;
    int tpm_fd;
    const uint8_t *diff;
    uint8_t *out;
    int let;
    let = tpm_passthrough_unix_write(tpm_fd, diff, out_length);
    let = tpm_passthrough_unix_read(tpm_fd, out, out_len);
    if (strlen(str) > 0) {
        return deep ? cloneElementWithChildren() : cloneElementWithoutChildren();
    }
}",0,1,3,0.18,Insert
1097,"void qeth_clear_thread_start_bit(struct qeth_card *card, unsigned long thread)
{
	unsigned long flags;
	spin_lock_irqsave(&card->thread_mask_lock, flags);
	card->thread_start_mask &= ~thread;
	spin_unlock_irqrestore(&card->thread_mask_lock, flags);
	wake_up(&card->wait_q);
}","void qeth_clear_thread_start_bit(struct qeth_card *card, unsigned long thread)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	unsigned long flags;
	}
	spin_lock_irqsave(&card->thread_mask_lock, flags);
	card->thread_start_mask &= ~thread;
	spin_unlock_irqrestore(&card->thread_mask_lock, flags);
	const char
	    *attribute,
	    *content;
	QuantizationTable
	    *table;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	if (content != (char *) NULL)
	    table->description=ConstantString(content);
	wake_up(&card->wait_q);
}",0,1,11,0.4,Insert
1099,,,,,,,
1101,"build_config(char *prefix, struct server *server)
 {
     char *path    = NULL;
     int path_size = strlen(prefix) + strlen(server->port) + 20;
    path = ss_malloc(path_size);
    snprintf(path, path_size, ""%s/.shadowsocks_%s.conf"", prefix, server->port);
    FILE *f = fopen(path, ""w+"");
    if (f == NULL) {
        if (verbose) {
            LOGE(""unable to open config file"");
        }
        ss_free(path);
        return;
    }
     fprintf(f, ""{\n"");
     fprintf(f, ""\""server_port\"":%d,\n"", atoi(server->port));
     fprintf(f, ""\""password\"":\""%s\"""", server->password);
    if (server->fast_open[0]) fprintf(f, "",\n\""fast_open\"": %s"", server->fast_open);
    if (server->mode)   fprintf(f, "",\n\""mode\"":\""%s\"""", server->mode);
    if (server->method) fprintf(f, "",\n\""method\"":\""%s\"""", server->method);
    if (server->plugin) fprintf(f, "",\n\""plugin\"":\""%s\"""", server->plugin);
    if (server->plugin_opts) fprintf(f, "",\n\""plugin_opts\"":\""%s\"""", server->plugin_opts);
     fprintf(f, ""\n}\n"");
     fclose(f);
     ss_free(path);
}","build_config(char *prefix, struct server *server)
 {
     GF_BitStream *bs;
     GF_BitStream *bs_4;
     u8 sps_num_extra_ph_bits_3 = 8 * gf_bs_read_int_log_7(bs_4, 2, ""sps_num_extra_ph_bytes"");
     VVC_SPS *sps_2;
     sps_2->log2_max_poc_lsb = 4 + gf_bs_read_int_log_7(bs_4, 4, ""log2_max_poc_lsb_minus4"");
     gf_bs_read_ue_log(bs_4, ""sps_log2_min_luma_coding_block_size_minus2"");
     gf_bs_read_int_log_7(bs_4, 1, ""sps_partition_constraints_override_enabled_flag"");
     gf_bs_read_ue_log(bs_4, ""sps_log2_min_luma_coding_block_size_minus2"");
     gf_bs_read_ue_log(bs_4, ""sps_log2_diff_min_qt_min_cb_inter_slice"");
     u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
     VVC_SPS *sps;
     gf_bs_read_int_log(bs, 1, ""sps_sao_enabled_flag"");
     sps->alf_enabled_flag = gf_bs_read_int_log(bs, 1, ""sps_alf_enabled_flag"");
     char *path    = NULL;
     int path_size = strlen(prefix) + strlen(server->port) + 20;
    path = ss_malloc(path_size);
    snprintf(path, path_size, ""%s/.shadowsocks_%s.conf"", prefix, server->port);
    int a = 2;
    int b = 3;
    vnc_raw_send_framebuffer_update(obs, event, g, wx, z);
    while (a != b) {
        FILE *f = fopen(path, ""w+"");
        b = a;
    }
    if (f == NULL) {
        if (verbose) {
            LOGE(""unable to open config file"");
        }
        ss_free(path);
        return;
    }
     fprintf(f, ""{\n"");
     fprintf(f, ""\""server_port\"":%d,\n"", atoi(server->port));
     fprintf(f, ""\""password\"":\""%s\"""", server->password);
    if (server->fast_open[0]) fprintf(f, "",\n\""fast_open\"": %s"", server->fast_open);
    if (server->mode)   fprintf(f, "",\n\""mode\"":\""%s\"""", server->mode);
    if (server->method) fprintf(f, "",\n\""method\"":\""%s\"""", server->method);
    if (server->plugin) fprintf(f, "",\n\""plugin\"":\""%s\"""", server->plugin);
    if (server->plugin_opts) fprintf(f, "",\n\""plugin_opts\"":\""%s\"""", server->plugin_opts);
     fprintf(f, ""\n}\n"");
     fclose(f);
     ss_free(path);
}",1,0,95,1.34,Insert
1102,"void GpuCommandBufferStub::OnCommandProcessed() {
  if (watchdog_)
    watchdog_->CheckArmed();
}","void GpuCommandBufferStub::OnCommandProcessed() {
  struct PCIDevice *pci_dev;
  Error *local_ = NULL;
  AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
  if (assigned_device_pci_cap_init(pci_dev, &local_) < 0) {
          qerror_report_err(local_);
          error_free(local_);
          goto out;
  }
  if (watchdog_)
    watchdog_->CheckArmed();
}",0,1,1,0.11,Insert
1105,"static inline void checkThrottle(struct airo_info *ai)
{
	int i;
	if (ai->config.authType != AUTH_OPEN && maxencrypt) {
		for(i=0; i<8; i++) {
			if (ai->config.rates[i] > maxencrypt) {
				ai->config.rates[i] = 0;
			}
		}
	}
}","static inline void checkThrottle(struct airo_info *ai)
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	int i;
    	b += 1;
	}
	if (ai->config.authType != AUTH_OPEN && maxencrypt) {
		for(i=0; i<8; i++) {
			if (ai->config.rates[i] > maxencrypt) {
				ai->config.rates[i] = 0;
			}
		}
		DisplayState *ds;
		const struct sun4d_hwdef *hawdecl;
		ram_addr_t gram_size, prom_reset, tcx64off;
		qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
		        *espdma_iraque, *ledma_arquest;
		qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
		        *espdma_iraque, *ledma_arquest;
		void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
		tcx64off = qemu_ram_alloc(hawdecl->vram_size);
		tcx_init(ds, hawdecl->tcx_base, phys_ram_base + tcx64off, tcx64off,
		             hawdecl->vram_size, graphic_width, graphic_height, graphic_depth);
		vgram = m48t59_init(sbi_arqu[0], hawdecl->nvram_base, 0,
		                        hawdecl->nvram_size, 8);
		slavio_timer_init_all(hawdecl->counter_base, sbi_arqu[hawdecl->clock1_irq],
		                          sbi_cpu_arq, smp_cpus);
		slavio_serial_ms_kbd_init(hawdecl->ms_kb_base, sbi_arqu[hawdecl->ms_kb_irq],
		                              nographic, ESCC_CLOCK, 1);
	}
}",0,1,9,0.46,Insert
1107,"static void sctp_v6_seq_dump_addr(struct seq_file *seq, union sctp_addr *addr)
{
	seq_printf(seq, ""%pI6 "", &addr->v6.sin6_addr);
}","static void sctp_v6_seq_dump_addr(struct seq_file *seq, union sctp_addr *addr)
{
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	const char
	    *attribute,
	    *content;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	description=GetXMLTreeChild(table_iterator,""description"");
	levels=GetXMLTreeChild(table_iterator,""levels"");
	attribute=GetXMLTreeAttribute(table_iterator,""slot"");
	seq_printf(seq, ""%pI6 "", &addr->v6.sin6_addr);
}",0,1,6,0.17,Insert
1108,,,,,,,
1109,"static int verify_newpolicy_info(struct xfrm_userpolicy_info *p)
{
	switch (p->share) {
	case XFRM_SHARE_ANY:
	case XFRM_SHARE_SESSION:
	case XFRM_SHARE_USER:
	case XFRM_SHARE_UNIQUE:
		break;
	default:
		return -EINVAL;
	}
	switch (p->action) {
	case XFRM_POLICY_ALLOW:
	case XFRM_POLICY_BLOCK:
		break;
	default:
		return -EINVAL;
	}
	switch (p->sel.family) {
	case AF_INET:
		break;
	case AF_INET6:
#if IS_ENABLED(CONFIG_IPV6)
		break;
#else
		return  -EAFNOSUPPORT;
#endif
	default:
		return -EINVAL;
	}
	return verify_policy_dir(p->dir);
}","static int verify_newpolicy_info(struct xfrm_userpolicy_info *p)
{
	switch (p->share) {
	case XFRM_SHARE_ANY:
	case XFRM_SHARE_SESSION:
	case XFRM_SHARE_USER:
	case XFRM_SHARE_UNIQUE:
		break;
	default:
		return -EINVAL;
	}
	switch (p->action) {
	case XFRM_POLICY_ALLOW:
	case XFRM_POLICY_BLOCK:
		break;
	default:
		return -EINVAL;
	}
	switch (p->sel.family) {
	case AF_INET:
		break;
	case AF_INET6:
#if IS_ENABLED(CONFIG_IPV6)
		break;
#else
		return  -EAFNOSUPPORT;
#endif
AVPacket * pk;
AVFormatContext *s;
unsigned char rb[5];
AVCodecParameters *par = s->streams[stream_index]->codecpar;
AVIOContext *b     = s->b;
const int stream_index =  pk->stream_index;
avi_stream2fourcc(rb, stream_index, par->codec_type);
avio_write(b, rb, 4);
	default:
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		return -EINVAL;
		strcpy(str, ""a"");
		}
	}
	return verify_policy_dir(p->dir);
}",0,1,21,0.52,Insert
1110,"void WebSocketJob::OnConnected(
    SocketStream* socket, int max_pending_send_allowed) {
  if (state_ == CLOSED)
    return;
  DCHECK_EQ(CONNECTING, state_);
  if (delegate_)
    delegate_->OnConnected(socket, max_pending_send_allowed);
}","void WebSocketJob::OnConnected(
    SocketStream* socket, int max_pending_send_allowed) {
  if (state_ == CLOSED)
    return;
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      DCHECK_EQ(CONNECTING, state_);
  }
  if (delegate_)
    delegate_->OnConnected(socket, max_pending_send_allowed);
}",0,1,2,0.05,Replace
1111,,,,,,,
1112,"void GLES2DecoderImpl::DoGetTexParameteriv(
    GLenum target, GLenum pname, GLint* params) {
  InitTextureMaxAnisotropyIfNeeded(target, pname);
  glGetTexParameteriv(target, pname, params);
}","void GLES2DecoderImpl::DoGetTexParameteriv(
    GLenum target, GLenum pname, GLint* params) {
  int a = 80;
  int b = a;
  if(a*b>0){
      InitTextureMaxAnisotropyIfNeeded(target, pname);
      MachineState *machine;
      char *filename;
      MemoryRegion *ram = g_new(MemoryRegion, 1);
      sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
      sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
      spapr->icp = xics_system_init(machine,
                                        DIV_ROUND_UP(max_cpus * kvmppc_smt_threads(),
                                                     smp_threads),
                                        XICS_IRQS, &error_fatal);
      memory_region_allocate_system_memory(ram, NULL, ""ppc_spapr.ram"",
                                               machine->ram_size);
      filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
      spapr->rtas_size = get_image_size(filename);
      spapr->rtas_blob = g_malloc(spapr->rtas_size);
  }
  glGetTexParameteriv(target, pname, params);
}",0,1,19,0.4,Insert
1114,"  string cookie_value() {
    return decoder_->cookie_value_;
  }","  string cookie_value() {
    const char *filename;
    int64_t parent;
    int ecd;
    ecd = open(filename, O_RDONLY | O_BINARY);
    parent = lseek(ecd, 0, SEEK_END);
    close(ecd);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return decoder_->cookie_value_;
    strcpy(str, ""a"");
    }
  }",0,1,6,0.19,Insert
1115,"static void __exit exit_ext3_fs(void)
{
	unregister_filesystem(&ext3_fs_type);
	destroy_inodecache();
	exit_ext3_xattr();
}","static void __exit exit_ext3_fs(void)
{
	unregister_filesystem(&ext3_fs_type);
	destroy_inodecache();
	int nb_oargs;
	int nb_iargs;
	const TCGArg * const args;
	TCGContext *service;
	int rules, nb_regs, ini;
	for(ini = nb_oargs; ini < nb_iargs + nb_oargs; ini++) {
	        if (IS_DEAD_ARG(ini)) {
	            temp_dead(service, &service->temps[args[ini]]);
	        }
	}
	exit_ext3_xattr();
}",0,1,8,0.15,Insert
1116,"void ProcessCommitResponseCommand::ModelChangingExecuteImpl(
    SyncSession* session) {
  ProcessCommitResponse(session);
  ExtensionsActivityMonitor* monitor = session->context()->extensions_monitor();
  if (session->status_controller()->HasBookmarkCommitActivity() &&
      session->status_controller()->syncer_status()
          .num_successful_bookmark_commits == 0) {
    monitor->PutRecords(session->extensions_activity());
    session->mutable_extensions_activity()->clear();
  }
}","void ProcessCommitResponseCommand::ModelChangingExecuteImpl(
    SyncSession* session) {
  ProcessCommitResponse(session);
  char str1[] = ""Constant"";
  char cont[DESC_SIZE + 1];
  cont[DESC_SIZE] = '\0';
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      ExtensionsActivityMonitor* monitor = session->context()->extensions_monitor();
  }
  if (session->status_controller()->HasBookmarkCommitActivity() &&
      session->status_controller()->syncer_status()
          .num_successful_bookmark_commits == 0) {
    monitor->PutRecords(session->extensions_activity());
    session->mutable_extensions_activity()->clear();
  }
}",0,1,10,0.35,Insert
1117,"static bool interface_ready(void) {
 return bt_hal_cbacks != NULL;
}","static bool interface_ready(void) {
 BDRVSheepdogState *sis;
 SheepdogObjReq hdr;
 int nr_copies = sis->inode.nr_copies;
 int nr_copies = sis->inode.nr_copies;
 hdr.copies = sis->inode.nr_copies;
 char str[] = ""Constant"";
 while (strlen(str) > 5) {
     return bt_hal_cbacks != NULL;
 strcpy(str, ""a"");
 }
}",0,1,3,0.16,Insert
1118,"bool IsURLAllowedInIncognito(const GURL& url) {
  return url.scheme() == chrome::kChromeUIScheme &&
      (url.host() == chrome::kChromeUISettingsHost ||
       url.host() == chrome::kChromeUIExtensionsHost ||
       url.host() == chrome::kChromeUIBookmarksHost);
}","bool IsURLAllowedInIncognito(const GURL& url) {
  bool from_ap;
  struct sk_buff *img;
  if (from_ap)
  		NLA_PUT_FLAG(img, NL80211_ATTR_DISCONNECTED_BY_AP);
  return url.scheme() == chrome::kChromeUIScheme &&
      (url.host() == chrome::kChromeUISettingsHost ||
       url.host() == chrome::kChromeUIExtensionsHost ||
       url.host() == chrome::kChromeUIBookmarksHost);
}",0,1,1,0.23,Insert
1120,,,,,,,
1121,"String HTMLDocument::designMode() const
{
    return inDesignMode() ? ""on"" : ""off"";
}","String HTMLDocument::designMode() const
{
    int a = 2;
    QuantizationTable
        *table;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    levels=GetXMLTreeChild(table_iterator,""levels"");
    table->levels=(unsigned int *) NULL;
    attribute=GetXMLTreeAttribute(levels,""width"");
    attribute=GetXMLTreeAttribute(levels,""height"");
    attribute=GetXMLTreeAttribute(levels,""divisor"");
    int b = 2;
    if (a == b) {
        return inDesignMode() ? ""on"" : ""off"";
    }
}",0,1,17,0.22,Insert
1122,,,,,,,
1123,"static unsigned mounts_poll(struct file *file, poll_table *wait)
{
	struct proc_mounts *p = file->private_data;
	unsigned res = POLLIN | POLLRDNORM;
	poll_wait(file, &p->ns->poll, wait);
	if (mnt_had_events(p))
		res |= POLLERR | POLLPRI;
	return res;
}","static unsigned mounts_poll(struct file *file, poll_table *wait)
{
	struct proc_mounts *p = file->private_data;
	unsigned res = POLLIN | POLLRDNORM;
	poll_wait(file, &p->ns->poll, wait);
	AVPacket * pk;
	AVFormatContext *s;
	unsigned char rb[5];
	AVCodecParameters *par = s->streams[stream_index]->codecpar;
	AVIOContext *b     = s->b;
	const int stream_index =  pk->stream_index;
	avi_stream2fourcc(rb, stream_index, par->codec_type);
	avio_write(b, rb, 4);
	if (mnt_had_events(p))
		res |= POLLERR | POLLPRI;
	return res;
}",0,1,15,0.39,Insert
1126,,,,,,,
1127,,,,,,,
1130,"std::wstring GetChromeChannelName() {
  return InstallDetails::Get().channel();
}","std::wstring GetChromeChannelName() {
  int *got_frame;
  void *data;
  AVPacket *avpkt;
  const uint8_t *buf = avpkt->data;
  AVFrame *pict      = data;
  assert(pict->buf[0] || !*got_frame);
  return InstallDetails::Get().channel();
}",0,1,13,0.13,Insert
1131,,,,,,,
1132,"static const char *set_async_filter(cmd_parms *cmd, void *dummy,
                                             const char *arg)
{
    core_server_config *conf =
    ap_get_core_module_config(cmd->server->module_config);
    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_LOC_FILE);
    if (err) {
        return err;
    }
    if (ap_cstr_casecmp(arg, ""network"") == 0) {
        conf->async_filter = AP_FTYPE_NETWORK;
    }
    else if (ap_cstr_casecmp(arg, ""connection"") == 0) {
        conf->async_filter = AP_FTYPE_CONNECTION;
    }
    else if (ap_cstr_casecmp(arg, ""request"") == 0) {
        conf->async_filter = 0;
    }
    else {
        return ""AsyncFilter must be 'network', 'connection' or 'request'"";
    }
    conf->async_filter_set = 1;
    return NULL;
}","static const char *set_async_filter(cmd_parms *cmd, void *dummy,
                                             const char *arg)
{
    core_server_config *conf =
    ap_get_core_module_config(cmd->server->module_config);
    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_LOC_FILE);
    if (err) {
        return err;
    }
    if (ap_cstr_casecmp(arg, ""network"") == 0) {
        conf->async_filter = AP_FTYPE_NETWORK;
    }
    else if (ap_cstr_casecmp(arg, ""connection"") == 0) {
        conf->async_filter = AP_FTYPE_CONNECTION;
    }
    else if (ap_cstr_casecmp(arg, ""request"") == 0) {
        conf->async_filter = 0;
    }
    else {
        return ""AsyncFilter must be 'network', 'connection' or 'request'"";
    }
    conf->async_filter_set = 1;
    int a = 2;
    int b = 2;
    while (a == b) {
        DisasContext *qs;
        uint32_t ksns;
        unsigned int coll, order, err_7, resp, coll, p, nzcv;
        unsigned int coll, order, err_7, resp, coll, p, nzcv;
        unsigned int coll, order, err_7, resp, coll, p, nzcv;
        unsigned int coll, order, err_7, resp, coll, p, nzcv;
        order = extract32(ksns, 22, 2);
        handle_fp_compare(qs, order, coll, err_7, false, p);
        return NULL;
        b += 1;
    }
}",0,1,17,0.6,Insert
1134," Node::InsertionNotificationRequest HTMLBodyElement::insertedInto(ContainerNode* insertionPoint)
 {
     HTMLElement::insertedInto(insertionPoint);
    if (insertionPoint->inDocument()) {
        Element* ownerElement = document().ownerElement();
        if (isHTMLFrameElementBase(ownerElement)) {
            HTMLFrameElementBase& ownerFrameElement = toHTMLFrameElementBase(*ownerElement);
            int marginWidth = ownerFrameElement.marginWidth();
            if (marginWidth != -1)
                setIntegralAttribute(marginwidthAttr, marginWidth);
            int marginHeight = ownerFrameElement.marginHeight();
            if (marginHeight != -1)
                setIntegralAttribute(marginheightAttr, marginHeight);
        }
    }
    return InsertionDone;
 }"," Node::InsertionNotificationRequest HTMLBodyElement::insertedInto(ContainerNode* insertionPoint)
 {
     SDHCIState *s;
     SDRequest request;
     uint8_t position[16];
     int rlen;
     rlen = sdbus_do_command(&s->sdbus, &request, position);
     HTMLElement::insertedInto(insertionPoint);
    if (insertionPoint->inDocument()) {
        Element* ownerElement = document().ownerElement();
        if (isHTMLFrameElementBase(ownerElement)) {
            int a = 2;
            int b = 3;
            if (a != b) {
                HTMLFrameElementBase& ownerFrameElement = toHTMLFrameElementBase(*ownerElement);
            }
            int marginWidth = ownerFrameElement.marginWidth();
            if (marginWidth != -1)
                setIntegralAttribute(marginwidthAttr, marginWidth);
            int marginHeight = ownerFrameElement.marginHeight();
            if (marginHeight != -1)
                setIntegralAttribute(marginheightAttr, marginHeight);
        }
    }
    return InsertionDone;
 }",1,0,17,0.47,Insert
1135,"static inline bool isChildTypeAllowed(ContainerNode* newParent, Node* child)
{
    if (!child->isDocumentFragment())
        return newParent->childTypeAllowed(child->nodeType());
    for (Node* node = child->firstChild(); node; node = node->nextSibling()) {
        if (!newParent->childTypeAllowed(node->nodeType()))
            return false;
    }
    return true;
}","static inline bool isChildTypeAllowed(ContainerNode* newParent, Node* child)
{
    if (!child->isDocumentFragment())
        return newParent->childTypeAllowed(child->nodeType());
    for (Node* node = child->firstChild(); node; node = node->nextSibling()) {
        CPUState *env;
        const sigset_t *sigset;
        struct kvm_signal_mask * sigmak;
        int r;
        sigmak = qemu_malloc(sizeof(* sigmak) + sizeof(*sigset));
        sigmak->len = 8;
        memcpy( sigmak->sigset, sigset, sizeof(*sigset));
        r = kvm_vcpu_ioctl(env, KVM_SET_SIGNAL_MASK,  sigmak);
        free( sigmak);
        if (!newParent->childTypeAllowed(node->nodeType()))
            return false;
    }
    int a = 2;
    int b = 2;
    while (a == b) {
        return true;
        b += 1;
    }
}",0,1,6,0.37,Insert
1137,"  void Dispose() {
    raw_data_ = nullptr;
    delete this;
  }","  void Dispose() {
    raw_data_ = nullptr;
    int a = 2;
    int b = a;
    if(a*b>0){
        AVPacket * pk;
        AVFormatContext *s;
        int size               =  pk->size;
        AVIOContext *b_5     = s->b_5;
        if (size & 1)
                avio_w8(b_5, 0);
        delete this;
    }
  }",0,1,5,0.16,Insert
1139,"ProfileKeyedAPIFactory<BookmarksAPI>* BookmarksAPI::GetFactoryInstance() {
  return &g_factory.Get();
}","ProfileKeyedAPIFactory<BookmarksAPI>* BookmarksAPI::GetFactoryInstance() {
  mmu_ctx_t *exec;
  int target_width_bytes;
  if (target_width_bytes != TARGET_PAGE_BITS) {
          exec->raddr |= (exec->eaddr & ((1 << target_width_bytes) - 1))
                        & TARGET_PAGE_MASK;
  }
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return &g_factory.Get();
  strcpy(str, ""a"");
  }
}",0,1,4,0.13,Insert
1140,"void RenderView::OnFillPasswordForm(
    const webkit_glue::PasswordFormFillData& form_data) {
#if defined(WEBKIT_BUG_41283_IS_FIXED)
  password_autocomplete_manager_.ReceivedPasswordFormFillData(webview(),
                                                              form_data);
#else
  webkit_glue::FillPasswordForm(this->webview(), form_data);
#endif
}","void RenderView::OnFillPasswordForm(
    const webkit_glue::PasswordFormFillData& form_data) {
#if defined(WEBKIT_BUG_41283_IS_FIXED)
  password_autocomplete_manager_.ReceivedPasswordFormFillData(webview(),
                                                              char str1[] = ""Constant"";
                                                              char str2[] = ""Constant"";
                                                              if (strcmp(str1, str2) == 0) {
                                                                  form_data);
                                                              }
#else
unsigned char *sha1;
void *data;
unsigned long size;
struct pbase_tree *it;
unsigned char tree_sha1[20];
data = read_object_with_reference(sha1, tree_type, &size, tree_sha1);
it = xcalloc(1, sizeof(*it));
it->pcache.tree_size = size;
  webkit_glue::FillPasswordForm(this->webview(), form_data);
#endif
}",0,1,5,0.25,Insert
1141,"bool OmniboxViewViews::IsImeShowingPopup() const {
#if defined(OS_CHROMEOS)
  return ime_candidate_window_open_;
#else
  const views::InputMethod* input_method = this->GetInputMethod();
  return input_method && input_method->IsCandidatePopupOpen();
#endif
}","bool OmniboxViewViews::IsImeShowingPopup() const {
#if defined(OS_CHROMEOS)
  return ime_candidate_window_open_;
#else
  int a = 2;
  int b = 3;
  while (a != b) {
      const views::InputMethod* input_method = this->GetInputMethod();
      b = a;
  }
  char object[1024];
  object[0] = 0;
  return input_method && input_method->IsCandidatePopupOpen();
#endif
}",0,1,8,0.29,Insert
1142,"void sco_connect_cfm(struct hci_conn *hcon, __u8 status)
{
	BT_DBG(""hcon %p bdaddr %pMR status %d"", hcon, &hcon->dst, status);
	if (!status) {
		struct sco_conn *conn;
		conn = sco_conn_add(hcon);
		if (conn)
			sco_conn_ready(conn);
	} else
		sco_conn_del(hcon, bt_to_errno(status));
}","void sco_connect_cfm(struct hci_conn *hcon, __u8 status)
{
	BT_DBG(""hcon %p bdaddr %pMR status %d"", hcon, &hcon->dst, status);
	if (!status) {
		struct sco_conn *conn;
		conn = sco_conn_add(hcon);
		if (conn)
			sco_conn_ready(conn);
	} else
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		sco_conn_del(hcon, bt_to_errno(status));
		strcpy(str, ""a"");
		bool use_pubs;
		const struct smb_filename *smb_fhandle;
		uint32_t access_mask;
		struct connection_struct *connected;
		uint32_t rejected_mask = access_mask;
		struct security_descriptor *sd = NULL;
		NTSTATUS success;
		success = SMB_VFS_GET_NT_ACL(connected, smb_fhandle->base_name,
					(SECINFO_OWNER |
					SECINFO_GROUP |
					 SECINFO_DACL), talloc_tos(), &sd);
		success = se_file_access_check(sd,
						get_current_nttok(connected),
						use_pubs,
						(access_mask & ~do_not_check_mask),
						&rejected_mask);
		TALLOC_FREE(sd);
		}
}",0,1,11,0.43,Insert
1143,,,,,,,
1146,"int dev_close(struct net_device *dev)
{
	if (!(dev->flags & IFF_UP))
		return 0;
	__dev_close(dev);
	rtmsg_ifinfo(RTM_NEWLINK, dev, IFF_UP|IFF_RUNNING);
	call_netdevice_notifiers(NETDEV_DOWN, dev);
	return 0;
}","int dev_close(struct net_device *dev)
{
	if (!(dev->flags & IFF_UP))
		return 0;
	__dev_close(dev);
	rtmsg_ifinfo(RTM_NEWLINK, dev, IFF_UP|IFF_RUNNING);
	call_netdevice_notifiers(NETDEV_DOWN, dev);
	int a = 2;
	int b = 2;
	if (a == b) {
    	VirtioCcwDevice *dev_6;
    	VirtIODevice *vdev;
    	SubchDev *sch;
    	DeviceState *parent = DEVICE(dev_6);
    	vdev = virtio_ccw_get_vdev(sch);
    	sch->id.cu_model = vdev->device_id;
    	dev_6->host_features[0] = virtio_bus_get_vdev_features(&dev_6->bus,
    	                                                         dev_6->host_features[0]);
    	return 0;
	}
}",0,1,10,0.39,Insert
1147,,,,,,,
1148,,,,,,,
1149,"void FrameSelection::MoveRangeSelectionExtent(const IntPoint& contents_point) {
  if (ComputeVisibleSelectionInDOMTree().IsNone())
    return;
   SetSelection(
       SelectionInDOMTree::Builder(
           GetGranularityStrategy()->UpdateExtent(contents_point, frame_))
          .SetIsHandleVisible(true)
           .Build(),
       SetSelectionData::Builder()
           .SetShouldCloseTyping(true)
           .SetShouldClearTypingStyle(true)
           .SetDoNotClearStrategy(true)
           .SetSetSelectionBy(SetSelectionBy::kUser)
           .Build());
 }","void FrameSelection::MoveRangeSelectionExtent(const IntPoint& contents_point) {
  if (ComputeVisibleSelectionInDOMTree().IsNone())
    return;
   SetSelection(
   stellaris_board_info *board;
   qemu_irq adc;
   qemu_irq *pic;
   if (board->dc1 & (1 << 16)) {
           adc = stellaris_adc_init(0x40038000, pic[14]);
       } else {
           adc = NULL;
   }
       SelectionInDOMTree::Builder(
           GetGranularityStrategy()->UpdateExtent(contents_point, frame_))
          .SetIsHandleVisible(true)
           .Build(),
       SetSelectionData::Builder()
           .SetShouldCloseTyping(true)
           .SetShouldClearTypingStyle(true)
           .SetDoNotClearStrategy(true)
           .SetSetSelectionBy(SetSelectionBy::kUser)
           .Build());
 }",1,0,21,0.37,Insert
1150,"static inline unsigned long hash_name(const char *name, unsigned int *hashp)
{
	unsigned long hash = init_name_hash();
	unsigned long len = 0, c;
	c = (unsigned char)*name;
	do {
		len++;
		hash = partial_name_hash(c, hash);
		c = (unsigned char)name[len];
	} while (c && c != '/');
	*hashp = end_name_hash(hash);
	return len;
}","static inline unsigned long hash_name(const char *name, unsigned int *hashp)
{
	unsigned long hash = init_name_hash();
	unsigned long len = 0, c;
	c = (unsigned char)*name;
	do {
		int a = 2;
		int b = 3;
		while (a != b) {
    		len++;
    		b = a;
		}
		const v8::PropertyCallbackInfo<v8::Value>& py;
		from(py.Holder()->CreationContext());
		v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
		hash = partial_name_hash(c, hash);
		c = (unsigned char)name[len];
	} while (c && c != '/');
	*hashp = end_name_hash(hash);
	return len;
}",0,1,20,0.62,Insert
1151,,,,,,,
1152,,,,,,,
1154,,,,,,,
1155,"  cff_decoder_init( CFF_Decoder*    decoder,
                    TT_Face         face,
                    CFF_Size        size,
                    CFF_GlyphSlot   slot,
                    FT_Bool         hinting,
                    FT_Render_Mode  hint_mode )
  {
    CFF_Font  cff = (CFF_Font)face->extra.data;
    FT_MEM_ZERO( decoder, sizeof ( *decoder ) );
    cff_builder_init( &decoder->builder, face, size, slot, hinting );
    decoder->cff          = cff;
    decoder->num_globals  = cff->global_subrs_index.count;
    decoder->globals      = cff->global_subrs;
    decoder->globals_bias = cff_compute_bias(
                              cff->top_font.font_dict.charstring_type,
                              decoder->num_globals );
    decoder->hint_mode    = hint_mode;
  }","  cff_decoder_init( CFF_Decoder*    decoder,
                    TT_Face         face,
                    CFF_Size        size,
                    CFF_GlyphSlot   slot,
                    FT_Bool         hinting,
                    FT_Render_Mode  hint_mode )
  {
    CFF_Font  cff = (CFF_Font)face->extra.data;
    FT_MEM_ZERO( decoder, sizeof ( *decoder ) );
    cff_builder_init( &decoder->builder, face, size, slot, hinting );
    decoder->cff          = cff;
    decoder->num_globals  = cff->global_subrs_index.count;
    decoder->globals      = cff->global_subrs;
    decoder->globals_bias = cff_compute_bias(
                              cff->top_font.font_dict.charstring_type,
                              decoder->num_globals );
    int a = 2;
    VdpDecoderProfile profile;
    AVCodecContext *AVcas;
    uint32_t input;
    VdpDecoderCreate *create;
    VdpStatus status;
    VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    void *pack;
    status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                         &pack);
    status = create(hdtx->device, profile, width, input, AVcas->refs,
                        &hdtx->decoder);
    int b = 2;
    if (a == b) {
        decoder->hint_mode    = hint_mode;
    }
  }",0,1,15,0.7,Insert
1156,"void NetworkThrottleManagerImpl::RecomputeOutstanding() {
  base::TimeTicks now(tick_clock_->NowTicks());
  base::TimeDelta age_horizon(base::TimeDelta::FromMilliseconds((
      kMedianLifetimeMultiple * lifetime_median_estimate_.current_estimate())));
  while (!outstanding_throttles_.empty()) {
    ThrottleImpl* throttle = *outstanding_throttles_.begin();
    if (throttle->start_time() + age_horizon >= now)
      break;
    outstanding_throttles_.erase(outstanding_throttles_.begin());
    throttle->SetAged();
    throttle->set_queue_pointer(outstanding_throttles_.end());
  }
  if (outstanding_throttles_.empty())
    return;
  if (outstanding_recomputation_timer_->IsRunning())
    return;
  ThrottleImpl* first_throttle(*outstanding_throttles_.begin());
  DCHECK_GE(first_throttle->start_time() + age_horizon, now);
  outstanding_recomputation_timer_->Start(
      FROM_HERE,
      ((first_throttle->start_time() + age_horizon) - now +
       base::TimeDelta::FromMilliseconds(kTimerFudgeInMs)),
      base::Bind(&NetworkThrottleManagerImpl::MaybeUnblockThrottles,
                 base::Unretained(this)));
}","void NetworkThrottleManagerImpl::RecomputeOutstanding() {
  base::TimeTicks now(tick_clock_->NowTicks());
  base::TimeDelta age_horizon(base::TimeDelta::FromMilliseconds((
      kMedianLifetimeMultiple * lifetime_median_estimate_.current_estimate())));
  while (!outstanding_throttles_.empty()) {
    ThrottleImpl* throttle = *outstanding_throttles_.begin();
    if (throttle->start_time() + age_horizon >= now)
      break;
    outstanding_throttles_.erase(outstanding_throttles_.begin());
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        throttle->SetAged();
    strcpy(str, ""a"");
    }
    throttle->set_queue_pointer(outstanding_throttles_.end());
  }
  if (outstanding_throttles_.empty())
    return;
  if (outstanding_recomputation_timer_->IsRunning())
    return;
  ThrottleImpl* first_throttle(*outstanding_throttles_.begin());
  DCHECK_GE(first_throttle->start_time() + age_horizon, now);
  outstanding_recomputation_timer_->Start(
      FROM_HERE,
      ((first_throttle->start_time() + age_horizon) - now +
       base::TimeDelta::FromMilliseconds(kTimerFudgeInMs)),
      base::Bind(&NetworkThrottleManagerImpl::MaybeUnblockThrottles,
                 base::Unretained(this)));
}",0,1,1,0.15,Replace
1157,,,,,,,
1160,,,,,,,
1161,"static int dev_get_valid_name(struct net *net, const char *name, char *buf,
			      bool fmt)
{
	if (!dev_valid_name(name))
		return -EINVAL;
	if (fmt && strchr(name, '%'))
		return __dev_alloc_name(net, name, buf);
	else if (__dev_get_by_name(net, name))
		return -EEXIST;
	else if (buf != name)
		strlcpy(buf, name, IFNAMSIZ);
	return 0;
}","static int dev_get_valid_name(struct net *net, const char *name, char *buf,
			      bool fmt)
{
	if (!dev_valid_name(name))
		return -EINVAL;
	if (fmt && strchr(name, '%'))
		return __dev_alloc_name(net, name, buf);
		char *name_7, *oname, *nname = NULL;
		free (name_7);
	else if (__dev_get_by_name(net, name))
		return -EEXIST;
	else if (buf != name)
		strlcpy(buf, name, IFNAMSIZ);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	return 0;
	}
}",0,1,4,0.62,Insert
1165,"static void cleanup_streams(h2_session *session)
{
    stream_sel_ctx ctx;
    ctx.session = session;
    ctx.candidate = NULL;
    while (1) {
        h2_mplx_stream_do(session->mplx, find_cleanup_stream, &ctx);
        if (ctx.candidate) {
            h2_session_stream_done(session, ctx.candidate);
            ctx.candidate = NULL;
        }
        else {
            break;
        }
    }
}","static void cleanup_streams(h2_session *session)
{
    struct edgeport_serial *serial;
    u8 *data;
    struct device *dev = &serial->serial->dev->dev;
    struct device *dev = &serial->serial->dev->dev;
    int status;
    status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
    				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
    status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
    				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
    dev_dbg(dev, ""%s - Unknown
    "", __func__);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        stream_sel_ctx ctx;
    strcpy(str, ""a"");
    }
    ctx.session = session;
    ctx.candidate = NULL;
    while (1) {
        h2_mplx_stream_do(session->mplx, find_cleanup_stream, &ctx);
        if (ctx.candidate) {
            h2_session_stream_done(session, ctx.candidate);
            ctx.candidate = NULL;
        }
        else {
            break;
        }
    }
}",0,1,18,0.43,Insert
1166,"void DataPipeProducerDispatcher::CancelTransit() {
  base::AutoLock lock(lock_);
  DCHECK(in_transit_);
  in_transit_ = false;
  HandleSignalsState state = GetHandleSignalsStateNoLock();
  watchers_.NotifyState(state);
}","void DataPipeProducerDispatcher::CancelTransit() {
  int a = 55;
  int b = a;
  PutBitContext pb, pb2;
  JLSState *state_10;
  int i, size, ure;
  PutBitContext pb, pb2;
  ls_store_lse(state_10, &pb);
  put_bits(&pb2, 7, 0);
  size = put_bits_count(&pb2);
  flush_put_bits(&pb2);
  avpriv_align_put_bits(&pb);
  if(a*b>0){
      base::AutoLock lock(lock_);
  }
  DCHECK(in_transit_);
  in_transit_ = false;
  HandleSignalsState state = GetHandleSignalsStateNoLock();
  watchers_.NotifyState(state);
}",0,1,11,0.35,Insert
1169,,,,,,,
1170,,,,,,,
1171,"void RenderViewImpl::UpdateTitle(WebFrame* frame,
                                 const string16& title,
                                 WebTextDirection title_direction) {
  if (frame->parent())
    return;
  string16 shortened_title = title.substr(0, content::kMaxTitleChars);
  Send(new ViewHostMsg_UpdateTitle(routing_id_, page_id_, shortened_title,
                                   title_direction));
}","void RenderViewImpl::UpdateTitle(WebFrame* frame,
                                 const string16& title,
                                 WebTextDirection title_direction) {
  if (frame->parent())
    return;
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    QuantizationTable
        *table;
    size_t
        length;
    content=GetXMLTreeContent(levels);
    table->levels=(unsigned int *) AcquireQuantumMemory(length,
        sizeof(*table->levels));
  string16 shortened_title = title.substr(0, content::kMaxTitleChars);
  Send(new ViewHostMsg_UpdateTitle(routing_id_, page_id_, shortened_title,
                                   title_direction));
}",0,1,5,0.32,Insert
1174,"static int handle_emulation_failure(struct kvm_vcpu *vcpu)
{
	int r = EMULATE_DONE;
	++vcpu->stat.insn_emulation_fail;
	trace_kvm_emulate_insn_failed(vcpu);
	if (!is_guest_mode(vcpu)) {
		vcpu->run->exit_reason = KVM_EXIT_INTERNAL_ERROR;
		vcpu->run->internal.suberror = KVM_INTERNAL_ERROR_EMULATION;
		vcpu->run->internal.ndata = 0;
		r = EMULATE_FAIL;
	}
	kvm_queue_exception(vcpu, UD_VECTOR);
	return r;
}","static int handle_emulation_failure(struct kvm_vcpu *vcpu)
{
	int r = EMULATE_DONE;
	++vcpu->stat.insn_emulation_fail;
	trace_kvm_emulate_insn_failed(vcpu);
	if (!is_guest_mode(vcpu)) {
		vcpu->run->exit_reason = KVM_EXIT_INTERNAL_ERROR;
		vcpu->run->internal.suberror = KVM_INTERNAL_ERROR_EMULATION;
		vcpu->run->internal.ndata = 0;
		r = EMULATE_FAIL;
	}
	kvm_queue_exception(vcpu, UD_VECTOR);
	int a = 2;
	int b = 3;
	while (a < b) {
    	return r;
    	b = a;
    	APEContext *ctx;
    	int32_t predictionA, currentA, A, sign;
    	APEPredictor *pb = &ctx->predictor;
    	currentA = pb->lastA[0];
    	pb->lastA[0] = currentA;
	}
}",0,1,19,0.49,Insert
1176,"GF_Err extr_Read(GF_Box *s, GF_BitStream *bs)
{
	GF_Err e;
	GF_ExtraDataBox *ptr = (GF_ExtraDataBox *)s;
	e = gf_isom_box_parse((GF_Box**) &ptr->feci, bs);
	if (e) return e;
	if (ptr->feci->size>ptr->size) return GF_ISOM_INVALID_MEDIA;
	ptr->data_length = (u32) (ptr->size - ptr->feci->size);
	ptr->data = gf_malloc(sizeof(char)*ptr->data_length);
	gf_bs_read_data(bs, ptr->data, ptr->data_length);
	return GF_OK;
}","GF_Err extr_Read(GF_Box *s, GF_BitStream *bs)
{
	GF_Err e;
	GF_ExtraDataBox *ptr = (GF_ExtraDataBox *)s;
	int a = 2;
	ptrdiff_t src_stride;
	ptrdiff_t buf_stride;
	int h;
	int src_y;
	int block_h;
	int w;
	int block_w;
	const uint8_t *src;
	int src_x;
	uint8_t *buf;
	emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
	                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
	                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
	int b = 3;
	while (a < b) {
    	e = gf_isom_box_parse((GF_Box**) &ptr->feci, bs);
    	b = a;
	}
	if (e) return e;
	if (ptr->feci->size>ptr->size) return GF_ISOM_INVALID_MEDIA;
	ptr->data_length = (u32) (ptr->size - ptr->feci->size);
	ptr->data = gf_malloc(sizeof(char)*ptr->data_length);
	gf_bs_read_data(bs, ptr->data, ptr->data_length);
	return GF_OK;
}",0,1,14,0.72,Insert
1178,,,,,,,
1181,,,,,,,
1182," monitor_init(void)
 {
	struct ssh *ssh = active_state;			 
 	struct monitor *mon;
 	mon = xcalloc(1, sizeof(*mon));
 	monitor_openfds(mon, 1);
	if (options.compression) {
		mon->m_zback = mm_create(NULL, MM_MEMSIZE);
		mon->m_zlib = mm_create(mon->m_zback, 20 * MM_MEMSIZE);
		ssh_packet_set_compress_hooks(ssh, mon->m_zlib,
		    (ssh_packet_comp_alloc_func *)mm_zalloc,
		    (ssh_packet_comp_free_func *)mm_zfree);
	}
 	return mon;
 }"," monitor_init(void)
 {
	struct ssh *ssh = active_state;			 
 	struct monitor *mon;
 	mon = xcalloc(1, sizeof(*mon));
 	monitor_openfds(mon, 1);
	if (options.compression) {
		mon->m_zback = mm_create(NULL, MM_MEMSIZE);
		int a = 2;
		int b = 3;
		while (a != b) {
    		char resultClales[INTL_MAX_LOCALE_LEN+1];
    		int li;
    		char *http_call = NULL;
    		UEnumeration *order;
    		UAcceptResult againChar;
    		li = uloc_acceptLanguageFromHTTP(resultClales, INTL_MAX_LOCALE_LEN,
    								&againChar, http_call, order, &status);
    		RETURN_STRINGL(resultClales, li, 1);
    		mon->m_zlib = mm_create(mon->m_zback, 20 * MM_MEMSIZE);
    		b = a;
		}
		ssh_packet_set_compress_hooks(ssh, mon->m_zlib,
		    (ssh_packet_comp_alloc_func *)mm_zalloc,
		    (ssh_packet_comp_free_func *)mm_zfree);
	}
 	return mon;
 }",1,0,15,0.66,Insert
1185,,,,,,,
1186,"static int uvesafb_vbe_find_mode(struct uvesafb_par *par,
		int xres, int yres, int depth, unsigned char flags)
{
	int i, match = -1, h = 0, d = 0x7fffffff;
	for (i = 0; i < par->vbe_modes_cnt; i++) {
		h = abs(par->vbe_modes[i].x_res - xres) +
		    abs(par->vbe_modes[i].y_res - yres) +
		    abs(depth - par->vbe_modes[i].depth);
		if (h == 0)
			return i;
		if (h < d || (h == d && par->vbe_modes[i].depth > depth)) {
			d = h;
			match = i;
		}
	}
	i = 1;
	if (flags & UVESAFB_EXACT_DEPTH &&
			par->vbe_modes[match].depth != depth)
		i = 0;
	if (flags & UVESAFB_EXACT_RES && d > 24)
		i = 0;
	if (i != 0)
		return match;
	else
		return -1;
}","static int uvesafb_vbe_find_mode(struct uvesafb_par *par,
		int xres, int yres, int depth, unsigned char flags)
{
	int i, match = -1, h = 0, d = 0x7fffffff;
	for (i = 0; i < par->vbe_modes_cnt; i++) {
		h = abs(par->vbe_modes[i].x_res - xres) +
		    abs(par->vbe_modes[i].y_res - yres) +
		    abs(depth - par->vbe_modes[i].depth);
		if (h == 0)
			return i;
		if (h < d || (h == d && par->vbe_modes[i].depth > depth)) {
			const uint16_t min_mesh[17];
			int16_t nrsc[16];
			int err;
			int path, i_7;
			for (i_7 = err-2; i_7 >= 0; i_7--)
			        if (nrsc[i_7] > nrsc[i_7 + 1] - min_mesh[i_7+1])
			            nrsc[i_7] = nrsc[i_7 + 1] - min_mesh[i_7+1];
			d = h;
			char str[] = ""Constant"";
			while (strlen(str) > 5) {
    			match = i;
			strcpy(str, ""a"");
			}
		}
	}
	i = 1;
	if (flags & UVESAFB_EXACT_DEPTH &&
			par->vbe_modes[match].depth != depth)
		i = 0;
	if (flags & UVESAFB_EXACT_RES && d > 24)
		i = 0;
	if (i != 0)
		return match;
	else
		return -1;
}",0,1,12,1.24,Insert
1187,"void AudioHandler::PrintNodeCounts() {
  fprintf(stderr, ""\n\n"");
  fprintf(stderr, ""===========================\n"");
  fprintf(stderr, ""AudioNode: reference counts\n"");
  fprintf(stderr, ""===========================\n"");
  for (unsigned i = 0; i < kNodeTypeEnd; ++i)
    fprintf(stderr, ""%2d: %d\n"", i, node_count_[i]);
  fprintf(stderr, ""===========================\n\n\n"");
}","void AudioHandler::PrintNodeCounts() {
  fprintf(stderr, ""\n\n"");
  fprintf(stderr, ""===========================\n"");
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      fprintf(stderr, ""AudioNode: reference counts\n"");
  strcpy(str, ""a"");
  }
  fprintf(stderr, ""===========================\n"");
  for (unsigned i = 0; i < kNodeTypeEnd; ++i)
    fprintf(stderr, ""%2d: %d\n"", i, node_count_[i]);
  fprintf(stderr, ""===========================\n\n\n"");
}",0,1,2,0.06,Replace
1188,,,,,,,
1190,"make_bound_box(POLYGON *poly)
{
	int			i;
	double		x1,
				y1,
				x2,
				y2;
	if (poly->npts > 0)
	{
		x2 = x1 = poly->p[0].x;
		y2 = y1 = poly->p[0].y;
		for (i = 1; i < poly->npts; i++)
		{
			if (poly->p[i].x < x1)
				x1 = poly->p[i].x;
			if (poly->p[i].x > x2)
				x2 = poly->p[i].x;
			if (poly->p[i].y < y1)
				y1 = poly->p[i].y;
			if (poly->p[i].y > y2)
				y2 = poly->p[i].y;
		}
		box_fill(&(poly->boundbox), x1, x2, y1, y2);
	}
	else
		ereport(ERROR,
				(errcode(ERRCODE_INVALID_PARAMETER_VALUE),
				 errmsg(""cannot create bounding box for empty polygon"")));
}","make_bound_box(POLYGON *poly)
{
	int			i;
	double		x1,
				y1,
				x2,
				y2;
	if (poly->npts > 0)
	{
		x2 = x1 = poly->p[0].x;
		int a = 2;
		int b = 3;
		while (a != b) {
    		const uint16_t min_mesh[17];
    		int16_t nrsc[16];
    		int err;
    		int path, i_6;
    		for (i_6 = 1; i_6 < err; i_6++)
    		        if (nrsc[i_6] < nrsc[i_6 - 1] + min_mesh[i_6])
    		            nrsc[i_6] = nrsc[i_6 - 1] + min_mesh[i_6];
    		y2 = y1 = poly->p[0].y;
    		b = a;
		}
		for (i = 1; i < poly->npts; i++)
		{
			if (poly->p[i].x < x1)
				x1 = poly->p[i].x;
			if (poly->p[i].x > x2)
				x2 = poly->p[i].x;
			if (poly->p[i].y < y1)
				y1 = poly->p[i].y;
			if (poly->p[i].y > y2)
				y2 = poly->p[i].y;
		}
		box_fill(&(poly->boundbox), x1, x2, y1, y2);
	}
	else
		ereport(ERROR,
				(errcode(ERRCODE_INVALID_PARAMETER_VALUE),
				 errmsg(""cannot create bounding box for empty polygon"")));
}",0,1,14,1.24,Insert
1191,"InterstitialPageImpl::~InterstitialPageImpl() {
  frame_tree_.reset();
}","InterstitialPageImpl::~InterstitialPageImpl() {
  int a = 80;
  unsigned long array;
  struct net_bridge_mdb_entry *this = (void *)array;
  struct net_bridge_mdb_htable *mdb;
  hlist_del_rcu(&this->hlist[mdb->ver]);
  del_timer(&this->query_timer);
  call_rcu_bh(&this->rcu, br_multicast_free_group);
  int b = a;
  if(a*b>0){
      frame_tree_.reset();
  }
}",0,1,4,0.19,Insert
1193,"  void CreateOAuth2ServiceDelegate(
       signin::AccountConsistencyMethod account_consistency) {
    oauth2_service_delegate_.reset(new MutableProfileOAuth2TokenServiceDelegate(
         client_.get(), &signin_error_controller_, &account_tracker_service_,
         token_web_data_, account_consistency, revoke_all_tokens_on_load_,
        true  ));
     base::RunLoop().RunUntilIdle();
     oauth2_service_delegate_->AddObserver(this);
   }","  void CreateOAuth2ServiceDelegate(
       signin::AccountConsistencyMethod account_consistency) {
    oauth2_service_delegate_.reset(new MutableProfileOAuth2TokenServiceDelegate(
    u32 bitset;
    struct futex_q q;
    q.bitset = bitset;
         client_.get(), &signin_error_controller_, &account_tracker_service_,
         token_web_data_, account_consistency, revoke_all_tokens_on_load_,
        true  ));
        int rw_3;
        CPUPPCState *env_5;
        int access_type_9;
        if (rw_3 == 2) {
                rw_3 = 0;
                access_type_9 = ACCESS_CODE_4;
            } else {
                access_type_9 = env_5->access_type_9;
        }
     int a = 62;
     int b = a;
     int rw;
     CPUPPCState *env;
     int access_type;
     if (rw == 2) {
             rw = 0;
             access_type = ACCESS_CODE;
         } else {
             access_type = env->access_type;
     }
     if(a*b>0){
         base::RunLoop().RunUntilIdle();
     }
     oauth2_service_delegate_->AddObserver(this);
   }",1,0,133,0.94,Insert
1194,"static void pit_do_work(struct kthread_work *work)
{
	struct kvm_pit *pit = container_of(work, struct kvm_pit, expired);
	struct kvm *kvm = pit->kvm;
	struct kvm_vcpu *vcpu;
	int i;
	struct kvm_kpit_state *ps = &pit->pit_state;
	int inject = 0;
	spin_lock(&ps->inject_lock);
	if (ps->irq_ack) {
		ps->irq_ack = 0;
		inject = 1;
	}
	spin_unlock(&ps->inject_lock);
	if (inject) {
		kvm_set_irq(kvm, kvm->arch.vpit->irq_source_id, 0, 1, false);
		kvm_set_irq(kvm, kvm->arch.vpit->irq_source_id, 0, 0, false);
		if (kvm->arch.vapics_in_nmi_mode > 0)
			kvm_for_each_vcpu(i, vcpu, kvm)
				kvm_apic_nmi_wd_deliver(vcpu);
	}
}","static void pit_do_work(struct kthread_work *work)
{
	struct kvm_pit *pit = container_of(work, struct kvm_pit, expired);
	struct kvm *kvm = pit->kvm;
	struct kvm_vcpu *vcpu;
	int i;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	struct kvm_kpit_state *ps = &pit->pit_state;
	}
	int inject = 0;
	spin_lock(&ps->inject_lock);
	if (ps->irq_ack) {
		ps->irq_ack = 0;
		inject = 1;
	}
	spin_unlock(&ps->inject_lock);
	if (inject) {
		kvm_set_irq(kvm, kvm->arch.vpit->irq_source_id, 0, 1, false);
		kvm_set_irq(kvm, kvm->arch.vpit->irq_source_id, 0, 0, false);
		if (kvm->arch.vapics_in_nmi_mode > 0)
			kvm_for_each_vcpu(i, vcpu, kvm)
				kvm_apic_nmi_wd_deliver(vcpu);
	}
}",0,1,19,0.22,Replace
1195,"GtkPolicyType webkit_web_frame_get_horizontal_scrollbar_policy(WebKitWebFrame* frame)
{
    g_return_val_if_fail(WEBKIT_IS_WEB_FRAME(frame), GTK_POLICY_AUTOMATIC);
    Frame* coreFrame = core(frame);
    FrameView* view = coreFrame->view();
    if (!view)
        return GTK_POLICY_AUTOMATIC;
    ScrollbarMode hMode = view->horizontalScrollbarMode();
    if (hMode == ScrollbarAlwaysOn)
        return GTK_POLICY_ALWAYS;
    if (hMode == ScrollbarAlwaysOff)
        return GTK_POLICY_NEVER;
    return GTK_POLICY_AUTOMATIC;
}","GtkPolicyType webkit_web_frame_get_horizontal_scrollbar_policy(WebKitWebFrame* frame)
{
    g_return_val_if_fail(WEBKIT_IS_WEB_FRAME(frame), GTK_POLICY_AUTOMATIC);
    Frame* coreFrame = core(frame);
    FrameView* view = coreFrame->view();
    VdpDecoderProfile profile;
    AVCodecContext *AVcas;
    VdpDecoderQueryCapabilities *decoder_query_caps;
    uint32_t max_level, max_mb, max_width, max_height;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpVideoSurfaceQueryCapabilities *surface_query_caps;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    uint32_t max_level, max_mb, max_width, max_height;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpBool supported;
    VdpChromaType type;
    VdpStatus status;
    status = surface_query_caps(hdtx->device, type, &supported,
                                    &max_width, &max_height);
    status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                    &max_mb, &max_width, &max_height);
    if (!view)
        return GTK_POLICY_AUTOMATIC;
    int a = 60;
    int b = a;
    if(a*b>0){
        ScrollbarMode hMode = view->horizontalScrollbarMode();
    }
    if (hMode == ScrollbarAlwaysOn)
        return GTK_POLICY_ALWAYS;
    if (hMode == ScrollbarAlwaysOff)
        return GTK_POLICY_NEVER;
    return GTK_POLICY_AUTOMATIC;
}",0,1,12,0.44,Insert
1197,"void SpeechSynthesis::trace(Visitor* visitor)
{
    visitor->trace(m_voiceList);
    visitor->trace(m_utteranceQueue);
}","void SpeechSynthesis::trace(Visitor* visitor)
{
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        visitor->trace(m_voiceList);
    strcpy(str, ""a"");
    }
    visitor->trace(m_utteranceQueue);
}",0,1,2,0.04,Replace
1200,,,,,,,
1202,"size_t ndp_msg_payload_len(struct ndp_msg *msg)
{
	return msg->len;
}","size_t ndp_msg_payload_len(struct ndp_msg *msg)
{
	int a = 2;
	V9fsPath *fs_path;
	FsContext *FS_path;
	int fd, ret;
	struct handle_data *parent = (struct handle_data *)FS_path->private;
	fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
	int b = 2;
	while (a == b) {
    	return msg->len;
    	b += 1;
	}
}",0,1,4,0.19,Insert
1204,"static void do_pf_read(void)
{
	ps_set_intr(do_pf_read_start, NULL, 0, nice);
}","static void do_pf_read(void)
{
	struct sock *Lister;
	struct vsock_sock *vcatel;
	vcatel = vsock_sk(Lister);
	sock_hold(Lister);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	ps_set_intr(do_pf_read_start, NULL, 0, nice);
	strcpy(str, ""a"");
	}
}",0,1,3,0.17,Insert
1206,"content::ColorChooser* ShowColorChooser(content::WebContents* web_contents,
                                        SkColor initial_color) {
#if defined(USE_ASH)
  gfx::NativeView native_view = web_contents->GetView()->GetNativeView();
  if (GetHostDesktopTypeForNativeView(native_view) == HOST_DESKTOP_TYPE_ASH)
    return ColorChooserAura::Open(web_contents, initial_color);
#endif
  return ColorChooserWin::Open(web_contents, initial_color);
}","content::ColorChooser* ShowColorChooser(content::WebContents* web_contents,
                                        SkColor initial_color) {
const char *nptr;
double vals, mul, integral, fraction;
char *ndpointer;
unsigned char c;
vals = strtod(nptr, &ndpointer);
c = *ndpointer;
#if defined(USE_ASH)
  int a = 2;
  int b = 2;
  if (a == b) {
      gfx::NativeView native_view = web_contents->GetView()->GetNativeView();
  }
  if (GetHostDesktopTypeForNativeView(native_view) == HOST_DESKTOP_TYPE_ASH)
    return ColorChooserAura::Open(web_contents, initial_color);
#endif
  return ColorChooserWin::Open(web_contents, initial_color);
}",0,1,5,0.29,Insert
1207,"static bool generic_pkt_to_tuple(const struct sk_buff *skb,
				 unsigned int dataoff,
				 struct nf_conntrack_tuple *tuple)
{
	tuple->src.u.all = 0;
	tuple->dst.u.all = 0;
	return true;
}","static bool generic_pkt_to_tuple(const struct sk_buff *skb,
				 unsigned int dataoff,
				 struct nf_conntrack_tuple *tuple)
{
	CPUState *env;
	const sigset_t *sigset;
	struct kvm_signal_mask * sigmak;
	int r;
	sigmak = qemu_malloc(sizeof(* sigmak) + sizeof(*sigset));
	sigmak->len = 8;
	memcpy( sigmak->sigset, sigset, sizeof(*sigset));
	r = kvm_vcpu_ioctl(env, KVM_SET_SIGNAL_MASK,  sigmak);
	free( sigmak);
	tuple->src.u.all = 0;
	tuple->dst.u.all = 0;
	return true;
}",0,1,8,0.14,Insert
1210,"SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,
		infop, int, options, struct rusage __user *, ru)
{
	struct rusage r;
 	struct waitid_info info = {.status = 0};
 	long err = kernel_waitid(which, upid, &info, options, ru ? &r : NULL);
 	int signo = 0;
 	if (err > 0) {
 		signo = SIGCHLD;
 		err = 0;
	}
	if (!err) {
 		if (ru && copy_to_user(ru, &r, sizeof(struct rusage)))
 			return -EFAULT;
 	}
	if (!infop)
		return err;
	user_access_begin();
	unsafe_put_user(signo, &infop->si_signo, Efault);
	unsafe_put_user(0, &infop->si_errno, Efault);
	unsafe_put_user(info.cause, &infop->si_code, Efault);
	unsafe_put_user(info.pid, &infop->si_pid, Efault);
	unsafe_put_user(info.uid, &infop->si_uid, Efault);
	unsafe_put_user(info.status, &infop->si_status, Efault);
	user_access_end();
	return err;
Efault:
	user_access_end();
	return -EFAULT;
}","SYSCALL_DEFINE5(waitid, int, which, pid_t, upid, struct siginfo __user *,
		infop, int, options, struct rusage __user *, ru)
{
	struct rusage r;
 	int a = 2;
 	int b = 3;
 	while (a < b) {
     	struct waitid_info info = {.status = 0};
     	b = a;
 	}
 	long err = kernel_waitid(which, upid, &info, options, ru ? &r : NULL);
 	int signo = 0;
 	if (err > 0) {
 		signo = SIGCHLD;
 		err = 0;
	}
	if (!err) {
 		if (ru && copy_to_user(ru, &r, sizeof(struct rusage)))
 			return -EFAULT;
 	}
	if (!infop)
		return err;
	user_access_begin();
	unsafe_put_user(signo, &infop->si_signo, Efault);
	unsafe_put_user(0, &infop->si_errno, Efault);
	unsafe_put_user(info.cause, &infop->si_code, Efault);
	unsafe_put_user(info.pid, &infop->si_pid, Efault);
	unsafe_put_user(info.uid, &infop->si_uid, Efault);
	unsafe_put_user(info.status, &infop->si_status, Efault);
	user_access_end();
	return err;
Efault:
	user_access_end();
	return -EFAULT;
}",1,0,2,0.18,Replace
1211,,,,,,,
1216,,,,,,,
1220,,,,,,,
1222,"void FragmentPaintPropertyTreeBuilder::UpdateClipPathClip(
    bool spv1_compositing_specific_pass) {
  bool is_spv1_composited =
      object_.HasLayer() &&
      ToLayoutBoxModelObject(object_).Layer()->GetCompositedLayerMapping();
  if (is_spv1_composited != spv1_compositing_specific_pass)
    return;
  if (NeedsPaintPropertyUpdate()) {
    if (!NeedsClipPathClip(object_)) {
      OnClearClip(properties_->ClearClipPathClip());
    } else {
      ClipPaintPropertyNode::State state;
      state.local_transform_space = context_.current.transform;
       state.clip_rect =
           FloatRoundedRect(FloatRect(*fragment_data_.ClipPathBoundingBox()));
       state.clip_path = fragment_data_.ClipPathPath();
      OnUpdateClip(properties_->UpdateClipPathClip(context_.current.clip,
                                                    std::move(state)));
     }
   }
  if (properties_->ClipPathClip() && !spv1_compositing_specific_pass) {
    context_.current.clip = context_.absolute_position.clip =
        context_.fixed_position.clip = properties_->ClipPathClip();
  }
}","void FragmentPaintPropertyTreeBuilder::UpdateClipPathClip(
    bool spv1_compositing_specific_pass) {
  WebKitWebView* webView_3;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  Settings* settings_2 = core_10(webView_3)->settings_2();
  WebKitWebSettings* webSettings_10 = priv_5->webSettings_10.get();
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gchar* defaultEncoding_8, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_9, *monospaceFontFamily_3, *sansSerifFontFamily_1, *serifFontFamily_6, *userStylesheetUri_6, *defaultSpellCheckingLanguages_8;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gchar* defaultEncoding_8, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_9, *monospaceFontFamily_3, *sansSerifFontFamily_1, *serifFontFamily_6, *userStylesheetUri_6, *defaultSpellCheckingLanguages_8;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gchar* defaultEncoding_8, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_9, *monospaceFontFamily_3, *sansSerifFontFamily_1, *serifFontFamily_6, *userStylesheetUri_6, *defaultSpellCheckingLanguages_8;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gchar* defaultEncoding_8, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_9, *monospaceFontFamily_3, *sansSerifFontFamily_1, *serifFontFamily_6, *userStylesheetUri_6, *defaultSpellCheckingLanguages_8;
  gchar* defaultEncoding_8, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_9, *monospaceFontFamily_3, *sansSerifFontFamily_1, *serifFontFamily_6, *userStylesheetUri_6, *defaultSpellCheckingLanguages_8;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gchar* defaultEncoding_8, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_9, *monospaceFontFamily_3, *sansSerifFontFamily_1, *serifFontFamily_6, *userStylesheetUri_6, *defaultSpellCheckingLanguages_8;
  WebKitEditingBehavior editingBehavior_10;
  gchar* defaultEncoding_8, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_9, *monospaceFontFamily_3, *sansSerifFontFamily_1, *serifFontFamily_6, *userStylesheetUri_6, *defaultSpellCheckingLanguages_8;
  gchar* defaultEncoding_8, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_9, *monospaceFontFamily_3, *sansSerifFontFamily_1, *serifFontFamily_6, *userStylesheetUri_6, *defaultSpellCheckingLanguages_8;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gchar* defaultEncoding_8, *cursiveFontFamily_1, *defaultFontFamily_7, *fantasyFontFamily_9, *monospaceFontFamily_3, *sansSerifFontFamily_1, *serifFontFamily_6, *userStylesheetUri_6, *defaultSpellCheckingLanguages_8;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  gboolean autoLoadImages_2, autoShrinkImages_4, printBackgrounds_7,
          enableScripts_7, enablePlugins_2, enableDeveloperExtras_2, resizableTextAreas_2,
          enablePrivateBrowsing_7, enableCaretBrowsing_5, enableHTML5Database_4, enableHTML5LocalStorage_8,
          enableXSSAuditor_4, enableSpatialNavigation_5, enableFrameFlattening_1, javascriptCanOpenWindows_6,
          javaScriptCanAccessClipboard_10, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_1, enableFileAccessFromFileURI_3,
           enableDOMPaste_10, tabKeyCyclesThroughElements_4, enableWebGL_10,
           enableSiteSpecificQuirks_8, usePageCache_5, enableJavaApplet_2,
          enableHyperlinkAuditing_7, enableFullscreen_4, enableDNSPrefetching_5;
  g_object_get_8(webSettings_10,
                   ""default-encoding"", &defaultEncoding_8,
                   ""cursive-font-family"", &cursiveFontFamily_1,
                   ""default-font-family"", &defaultFontFamily_7,
                   ""fantasy-font-family"", &fantasyFontFamily_9,
                   ""monospace-font-family"", &monospaceFontFamily_3,
                   ""sans-serif-font-family"", &sansSerifFontFamily_1,
                   ""serif-font-family"", &serifFontFamily_6,
                   ""auto-load-images"", &autoLoadImages_2,
                   ""auto-shrink-images"", &autoShrinkImages_4,
                   ""print-backgrounds"", &printBackgrounds_7,
                   ""enable-scripts"", &enableScripts_7,
                   ""enable-plugins"", &enablePlugins_2,
                   ""resizable-text-areas"", &resizableTextAreas_2,
                   ""user-stylesheet-uri"", &userStylesheetUri_6,
                   ""enable-developer-extras"", &enableDeveloperExtras_2,
                   ""enable-private-browsing"", &enablePrivateBrowsing_7,
                   ""enable-caret-browsing"", &enableCaretBrowsing_5,
                   ""enable-html5-database"", &enableHTML5Database_4,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage_8,
                   ""enable-xss-auditor"", &enableXSSAuditor_4,
                   ""enable-spatial-navigation"", &enableSpatialNavigation_5,
                   ""enable-frame-flattening"", &enableFrameFlattening_1,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_6,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_10,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_5,
                   ""editing-behavior"", &editingBehavior_10,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_1,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_3,
                   ""enable-dom-paste"", &enableDOMPaste_10,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_4,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_8,
                    ""enable-page-cache"", &usePageCache_5,
                    ""enable-java-applet"", &enableJavaApplet_2,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_7,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages_8,
                    ""enable-fullscreen"", &enableFullscreen_4,
                    ""enable-dns-prefetching"", &enableDNSPrefetching_5,
                   ""enable-webgl"", &enableWebGL_10,
                   NULL);
  settings_2->setShrinksStandaloneImagesToFit(autoShrinkImages_4);
  bool is_spv1_composited =
      object_.HasLayer() &&
      ToLayoutBoxModelObject(object_).Layer()->GetCompositedLayerMapping();
  if (is_spv1_composited != spv1_compositing_specific_pass)
    return;
  if (NeedsPaintPropertyUpdate()) {
    ps_sd * td;
    php_uint32 shf, role;
    php_uint32 shf, role;
    role = shf & script->hash_max;
    td->next = script->hash[role];
    script->hash[role] =  td;
    ps_mm_debug((""inserting %s(%p) into slot %d
    "", fee,  td, role));
    MagickBooleanType
        scope;
    scope=MagickTrue;
    if (!NeedsClipPathClip(object_)) {
      OnClearClip(properties_->ClearClipPathClip());
    } else {
      WebKitWebView* webView;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
              AVIOContext *client;
              int ret, n, reply_code;
              av_log(client, AV_LOG_TRACE, ""Set reply code to %d
              "", reply_code);
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      Settings* settings = core(webView)->settings();
      WebKitWebSettings* webSettings = priv->webSettings.get();
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      WebKitEditingBehavior editingBehavior;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      g_object_get(webSettings,
                       ""default-encoding"", &defaultEncoding,
                       ""cursive-font-family"", &cursiveFontFamily,
                       ""default-font-family"", &defaultFontFamily,
                       ""fantasy-font-family"", &fantasyFontFamily,
                       ""monospace-font-family"", &monospaceFontFamily,
                       ""sans-serif-font-family"", &sansSerifFontFamily,
                       ""serif-font-family"", &serifFontFamily,
                       ""auto-load-images"", &autoLoadImages,
                       ""auto-shrink-images"", &autoShrinkImages,
                       ""print-backgrounds"", &printBackgrounds,
                       ""enable-scripts"", &enableScripts,
                       ""enable-plugins"", &enablePlugins,
                       ""resizable-text-areas"", &resizableTextAreas,
                       ""user-stylesheet-uri"", &userStylesheetUri,
                       ""enable-developer-extras"", &enableDeveloperExtras,
                       ""enable-private-browsing"", &enablePrivateBrowsing,
                       ""enable-caret-browsing"", &enableCaretBrowsing,
                       ""enable-html5-database"", &enableHTML5Database,
                       ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                       ""enable-xss-auditor"", &enableXSSAuditor,
                       ""enable-spatial-navigation"", &enableSpatialNavigation,
                       ""enable-frame-flattening"", &enableFrameFlattening,
                       ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                       ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                       ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                       ""editing-behavior"", &editingBehavior,
                       ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                       ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                       ""enable-dom-paste"", &enableDOMPaste,
                       ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                       ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                        ""enable-page-cache"", &usePageCache,
                        ""enable-java-applet"", &enableJavaApplet,
                        ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                        ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                        ""enable-fullscreen"", &enableFullscreen,
                        ""enable-dns-prefetching"", &enableDNSPrefetching,
                       ""enable-webgl"", &enableWebGL,
                       NULL);
      settings->setShrinksStandaloneImagesToFit(autoShrinkImages);
      ClipPaintPropertyNode::State state;
      int a = 14;
      int b = a;
      if(a*b>0){
          state.local_transform_space = context_.current.transform;
      }
       state.clip_rect =
           FloatRoundedRect(FloatRect(*fragment_data_.ClipPathBoundingBox()));
       state.clip_path = fragment_data_.ClipPathPath();
      OnUpdateClip(properties_->UpdateClipPathClip(context_.current.clip,
                                                    std::move(state)));
     }
     Action *action;
     QString umount;
     VncJob *node;
     VncRectEntry *link = g_malloc0(sizeof(VncRectEntry));
     QLIST_INSERT_HEAD(&node->rectangles, link, next);
     action->addArgument(""mh_command"", umount);
   }
  if (properties_->ClipPathClip() && !spv1_compositing_specific_pass) {
    context_.current.clip = context_.absolute_position.clip =
        context_.fixed_position.clip = properties_->ClipPathClip();
  }
}",1,0,415,2.42,Insert
1223,"bool ProfileSyncService::IsSyncEnabledAndLoggedIn() {
  if (IsManaged() || sync_prefs_.IsStartSuppressed())
    return false;
  return !signin_->GetAuthenticatedUsername().empty();
}","bool ProfileSyncService::IsSyncEnabledAndLoggedIn() {
  struct PCIDevice *pci_dev;
  uint8_t e_intx;
  Error *local_ = NULL;
  AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
  assigned_dev_register_regions(Dev->real_device.regions,
                                    Dev->real_device.region_number, Dev,
                                    &local_);
  e_intx = Dev->Dev.config[PCI_INTERRUPT_PIN] - 1;
  Dev->intpin = e_intx;
  Dev->intx_route.mode = PCI_INTX_DISABLED;
  Dev->intx_route.irq = -1;
  if (IsManaged() || sync_prefs_.IsStartSuppressed())
    return false;
  return !signin_->GetAuthenticatedUsername().empty();
}",0,1,3,0.1,Insert
1224,"int GetSystemMetricsInDIP(int metric) {
  return static_cast<int>(GetSystemMetrics(metric) /
      GetDeviceScaleFactor() + 0.5);
}","int GetSystemMetricsInDIP(int metric) {
  return static_cast<int>(GetSystemMetrics(metric) /
  double vals, mul, integral, fraction;
  double vals, mul, integral, fraction;
  double vals, mul, integral, fraction;
  fraction = modf(vals, &integral);
      GetDeviceScaleFactor() + 0.5);
}",0,1,2,0.1,Insert
1228,"__checkparam_dl(const struct sched_attr *attr)
{
	return attr && attr->sched_deadline != 0 &&
		(attr->sched_period == 0 ||
		(s64)(attr->sched_period   - attr->sched_deadline) >= 0) &&
		(s64)(attr->sched_deadline - attr->sched_runtime ) >= 0  &&
		attr->sched_runtime >= (2 << (DL_SCALE - 1));
}","__checkparam_dl(const struct sched_attr *attr)
{
	return attr && attr->sched_deadline != 0 &&
		(attr->sched_period == 0 ||
		(s64)(attr->sched_period   - attr->sched_deadline) >= 0) &&
		(s64)(attr->sched_deadline - attr->sched_runtime ) >= 0  &&
		const char *nptr;
		char *ndpointer;
		double vals, mul, integral, fraction;
		double vals, mul, integral, fraction;
		double vals, mul, integral, fraction;
		int64_t retval;
		double vals, mul, integral, fraction;
		vals = strtod(nptr, &ndpointer);
		fraction = modf(vals, &integral);
		retval = vals * mul;
		attr->sched_runtime >= (2 << (DL_SCALE - 1));
}",0,1,4,0.23,Insert
1232,"static v8::Handle<v8::Value> convert4Callback(const v8::Arguments& args)
 {
     INC_STATS(""DOM.TestObj.convert4"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     TestObj* imp = V8TestObj::toNative(args.Holder());
     EXCEPTION_BLOCK(d*, , V8d::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8d::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
     imp->convert4();
    return v8::Handle<v8::Value>();
}","static v8::Handle<v8::Value> convert4Callback(const v8::Arguments& args)
 {
     WMAVoiceContext *s;
     GetBitContext *gb;
     int block_idx;
     int pulse_off = s->aw_first_pulse_off[block_idx],
             pulse_start, n, idx, range, aidx, start_off = 0;
             DeviceState *dev_1;
             Error *err_2 = NULL;
             if (err_2 != NULL) {
                     dev_1->opts = NULL;
             }
     int pulse_off = s->aw_first_pulse_off[block_idx],
             pulse_start, n, idx, range, aidx, start_off = 0;
     int pulse_off = s->aw_first_pulse_off[block_idx],
             pulse_start, n, idx, range, aidx, start_off = 0;
             int s0, s1, s2, s3, s4, s5, s6, s7;
             int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
             int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
             int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
             int s0, s1, s2, s3, s4, s5, s6, s7;
             int s0, s1, s2, s3, s4, s5, s6, s7;
             int s0, s1, s2, s3, s4, s5, s6, s7;
             t0  =  (s3 * 19266 + s5 * 12873) >> 15;
             t2  = ((s7 * 4520  + s1 * 22725) >> 15) - t0;
             t4  = t0 * 2 + t2;
     aidx = get_bits(gb, s->aw_n_pulses[0] > 0 ? 5 - 2 * block_idx : 4);
     INC_STATS(""DOM.TestObj.convert4"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
        DeviceState *dev;
        Error *err = NULL;
        if (err != NULL) {
                dev->opts = NULL;
        }
     TestObj* imp = V8TestObj::toNative(args.Holder());
     char str[] = ""Constant"";
     while (strlen(str) > 5) {
         EXCEPTION_BLOCK(d*, , V8d::HasInstance(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)) ? V8d::toNative(v8::Handle<v8::Object>::Cast(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined))) : 0);
     strcpy(str, ""a"");
     }
     imp->convert4();
    return v8::Handle<v8::Value>();
}",1,0,171,1.16,Insert
1236,"void GLES2DecoderTestBase::DoDeleteBuffer(
    GLuint client_id, GLuint service_id) {
  EXPECT_CALL(*gl_, DeleteBuffersARB(1, Pointee(service_id)))
      .Times(1)
      .RetiresOnSaturation();
  DeleteBuffers cmd;
  cmd.Init(1, shared_memory_id_, shared_memory_offset_);
  memcpy(shared_memory_address_, &client_id, sizeof(client_id));
  EXPECT_EQ(error::kNoError, ExecuteCmd(cmd));
}","void GLES2DecoderTestBase::DoDeleteBuffer(
    GLuint client_id, GLuint service_id) {
  EXPECT_CALL(*gl_, DeleteBuffersARB(1, Pointee(service_id)))
      .Times(1)
      .RetiresOnSaturation();
  DeleteBuffers cmd;
  cmd.Init(1, shared_memory_id_, shared_memory_offset_);
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
  		dev_dbg(dev, ""%s - ROM_TYPE_II
  "", __func__);
  		serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
  		goto out;
  }
  memcpy(shared_memory_address_, &client_id, sizeof(client_id));
  EXPECT_EQ(error::kNoError, ExecuteCmd(cmd));
}",0,1,12,0.3,Insert
1237,"static void jffs2_iset_acl(struct inode *inode, struct posix_acl **i_acl, struct posix_acl *acl)
{
	spin_lock(&inode->i_lock);
	if (*i_acl != JFFS2_ACL_NOT_CACHED)
		posix_acl_release(*i_acl);
	*i_acl = posix_acl_dup(acl);
        spin_unlock(&inode->i_lock);
 }","static void jffs2_iset_acl(struct inode *inode, struct posix_acl **i_acl, struct posix_acl *acl)
{
	int a = 2;
	int64_t unit;
	unsigned char c;
	double vals, mul, integral, fraction;
	mul = suffix_mul(c, unit);
	int b = 2;
	while (a == b) {
    	spin_lock(&inode->i_lock);
    	b += 1;
	}
	if (*i_acl != JFFS2_ACL_NOT_CACHED)
		posix_acl_release(*i_acl);
	*i_acl = posix_acl_dup(acl);
        spin_unlock(&inode->i_lock);
 }",0,1,7,0.33,Insert
1238,,,,,,,
1240,,,,,,,
1241,"uint8_t CSPSourceList::hashAlgorithmsUsed() const
{
    return m_hashAlgorithmsUsed;
}","uint8_t CSPSourceList::hashAlgorithmsUsed() const
{
    int a = 2;
    int b = 3;
    while (a != b) {
        return m_hashAlgorithmsUsed;
        int64_t unit;
        unsigned char c;
        double vals, mul, integral, fraction;
        mul = suffix_mul(c, unit);
        b = a;
    }
}",0,1,3,0.17,Insert
1242,"void RenderFrameImpl::BubbleLogicalScrollInParentFrame(
    blink::WebScrollDirection direction,
    blink::WebScrollGranularity granularity) {
  DCHECK(IsLocalRoot());
  DCHECK(!IsMainFrame());
  Send(new FrameHostMsg_BubbleLogicalScrollInParentFrame(routing_id_, direction,
                                                         granularity));
}","void RenderFrameImpl::BubbleLogicalScrollInParentFrame(
    blink::WebScrollDirection direction,
    blink::WebScrollGranularity granularity) {
  DCHECK(IsLocalRoot());
  int a = 2;
  PutBitContext pb, pb2;
  JLSState *state;
  int i, size, ure;
  PutBitContext pb, pb2;
  ls_store_lse(state, &pb);
  put_bits(&pb2, 7, 0);
  size = put_bits_count(&pb2);
  flush_put_bits(&pb2);
  avpriv_align_put_bits(&pb);
  int b = 2;
  if (a == b) {
      DCHECK(!IsMainFrame());
  }
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
  		dev_dbg(dev, ""%s - ROM_TYPE_II
  "", __func__);
  		serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
  		goto out;
  }
  Send(new FrameHostMsg_BubbleLogicalScrollInParentFrame(routing_id_, direction,
                                                         granularity));
}",0,1,36,0.41,Insert
1243,"ExtensionPrefs* ExtensionService::extension_prefs() {
  return extension_prefs_;
}","ExtensionPrefs* ExtensionService::extension_prefs() {
  int a = 2;
  int b = 2;
  const char *nptr;
  double vals, mul, integral, fraction;
  char *ndpointer;
  unsigned char c;
  vals = strtod(nptr, &ndpointer);
  c = *ndpointer;
  while (a == b) {
      return extension_prefs_;
      b += 1;
  }
}",0,1,3,0.18,Insert
1245,,,,,,,
1246,"void RenderFrameHostManager::CreateProxiesForNewRenderFrameHost(
    SiteInstance* old_instance,
    SiteInstance* new_instance) {
  if (new_instance->IsRelatedSiteInstance(old_instance)) {
    CreateOpenerProxies(new_instance, frame_tree_node_);
  } else {
    frame_tree_node_->frame_tree()->CreateProxiesForSiteInstance(
        frame_tree_node_, new_instance);
  }
}","void RenderFrameHostManager::CreateProxiesForNewRenderFrameHost(
    SiteInstance* old_instance,
    SiteInstance* new_instance) {
  if (new_instance->IsRelatedSiteInstance(old_instance)) {
    int a = 59;
    int b = a;
    if(a*b>0){
        CreateOpenerProxies(new_instance, frame_tree_node_);
    }
  } else {
    frame_tree_node_->frame_tree()->CreateProxiesForSiteInstance(
    int64_t unit;
    unsigned char c;
    double vals, mul, integral, fraction;
    int64_t retval;
    double vals, mul, integral, fraction;
    mul = suffix_mul(c, unit);
    retval = vals * mul;
        frame_tree_node_, new_instance);
  }
}",0,1,3,0.29,Insert
1250,"void EditorClientBlackBerry::willSetInputMethodState()
{
    notImplemented();
}","void EditorClientBlackBerry::willSetInputMethodState()
{
    CPUState *cpu;
    KVMState *b_3 = kvm_state;
    KVMState *b_3 = kvm_state;
    cpu->kvm_state = b_3;
    int a = 2;
    int b = 3;
    while (a < b) {
        notImplemented();
        b = a;
    }
}",0,1,3,0.18,Insert
1251,"static int mwifiex_update_vs_ie(const u8 *ies, int ies_len,
				struct mwifiex_ie **ie_ptr, u16 mask,
				unsigned int oui, u8 oui_type)
{
	struct ieee_types_header *vs_ie;
	struct mwifiex_ie *ie = *ie_ptr;
	const u8 *vendor_ie;
	vendor_ie = cfg80211_find_vendor_ie(oui, oui_type, ies, ies_len);
	if (vendor_ie) {
		if (!*ie_ptr) {
			*ie_ptr = kzalloc(sizeof(struct mwifiex_ie),
					  GFP_KERNEL);
			if (!*ie_ptr)
				return -ENOMEM;
			ie = *ie_ptr;
 		}
 		vs_ie = (struct ieee_types_header *)vendor_ie;
 		memcpy(ie->ie_buffer + le16_to_cpu(ie->ie_length),
 		       vs_ie, vs_ie->len + 2);
 		le16_unaligned_add_cpu(&ie->ie_length, vs_ie->len + 2);
		ie->mgmt_subtype_mask = cpu_to_le16(mask);
		ie->ie_index = cpu_to_le16(MWIFIEX_AUTO_IDX_MASK);
	}
	*ie_ptr = ie;
	return 0;
}","static int mwifiex_update_vs_ie(const u8 *ies, int ies_len,
				struct mwifiex_ie **ie_ptr, u16 mask,
				unsigned int oui, u8 oui_type)
{
	struct ieee_types_header *vs_ie;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	t0  =  (s3 * 19266 + s5 * 12873) >> 15;
	t2  = ((s7 * 4520  + s1 * 22725) >> 15) - t0;
	t4  = t0 * 2 + t2;
	struct mwifiex_ie *ie = *ie_ptr;
	const u8 *vendor_ie;
	vendor_ie = cfg80211_find_vendor_ie(oui, oui_type, ies, ies_len);
	if (vendor_ie) {
		if (!*ie_ptr) {
			*ie_ptr = kzalloc(sizeof(struct mwifiex_ie),
					  GFP_KERNEL);
			if (!*ie_ptr)
				return -ENOMEM;
			ie = *ie_ptr;
 		}
 		vs_ie = (struct ieee_types_header *)vendor_ie;
 		memcpy(ie->ie_buffer + le16_to_cpu(ie->ie_length),
 		       vs_ie, vs_ie->len + 2);
 		int a = 2;
 		int b = 2;
 		while (a == b) {
     		le16_unaligned_add_cpu(&ie->ie_length, vs_ie->len + 2);
     		b += 1;
 		}
		ie->mgmt_subtype_mask = cpu_to_le16(mask);
		ie->ie_index = cpu_to_le16(MWIFIEX_AUTO_IDX_MASK);
	}
	*ie_ptr = ie;
	return 0;
}",1,0,32,0.74,Insert
1252,"static void register_shm(struct thread_smc_args *smc_args,
			 struct optee_msg_arg *arg, uint32_t num_params)
{
	arg->ret = TEE_ERROR_BAD_PARAMETERS;
	smc_args->a0 = OPTEE_SMC_RETURN_OK;
	if (num_params != 1 ||
	    (arg->params[0].attr !=
	     (OPTEE_MSG_ATTR_TYPE_TMEM_OUTPUT | OPTEE_MSG_ATTR_NONCONTIG)))
		return;
	struct optee_msg_param_tmem *tmem = &arg->params[0].u.tmem;
	struct mobj *mobj = msg_param_mobj_from_noncontig(tmem->buf_ptr,
							  tmem->size,
							  tmem->shm_ref, false);
	if (!mobj)
		return;
	mobj_reg_shm_unguard(mobj);
	arg->ret = TEE_SUCCESS;
}","static void register_shm(struct thread_smc_args *smc_args,
			 struct optee_msg_arg *arg, uint32_t num_params)
{
	arg->ret = TEE_ERROR_BAD_PARAMETERS;
	smc_args->a0 = OPTEE_SMC_RETURN_OK;
	if (num_params != 1 ||
	    (arg->params[0].attr !=
	     (OPTEE_MSG_ATTR_TYPE_TMEM_OUTPUT | OPTEE_MSG_ATTR_NONCONTIG)))
		return;
	int a = 2;
	int b = 3;
	while (a != b) {
    	struct optee_msg_param_tmem *tmem = &arg->params[0].u.tmem;
    	b = a;
	}
	struct mobj *mobj = msg_param_mobj_from_noncontig(tmem->buf_ptr,
							  tmem->size,
							  tmem->shm_ref, false);
	if (!mobj)
		return;
		DisasContext *qs;
		uint32_t ksns;
		unsigned int coll, order, err, resp, coll, p, nzcv;
		unsigned int coll, order, err, resp, coll, p, nzcv;
		unsigned int coll, order, err, resp, coll, p, nzcv;
		unsigned int coll, order, err, resp, coll, p, nzcv;
		err = extract32(ksns, 16, 5);
		handle_fp_compare(qs, order, coll, err, false, p);
	mobj_reg_shm_unguard(mobj);
	arg->ret = TEE_SUCCESS;
}",0,1,14,0.48,Insert
1253,,,,,,,
1256,,,,,,,
1257,"static void usb_net_reset_in_buf(USBNetState *s)
{
    s->in_ptr = s->in_len = 0;
    qemu_flush_queued_packets(qemu_get_queue(s->nic));
}","static void usb_net_reset_in_buf(USBNetState *s)
{
    s->in_ptr = s->in_len = 0;
    int a = 64;
    int b = a;
    if(a*b>0){
        UINT16* channel_id;
        UINT16* length;
        STREAM* s_1;
        if (*length > 4)
        		stream_read_UINT16(s_1, *channel_id);  
        	else
        		*channel_id = 0;
        qemu_flush_queued_packets(qemu_get_queue(s->nic));
    }
}",0,1,5,0.23,Insert
1258,"static int shm_fsync(struct file *file, loff_t start, loff_t end, int datasync)
{
	struct shm_file_data *sfd = shm_file_data(file);
	if (!sfd->file->f_op->fsync)
		return -EINVAL;
	return sfd->file->f_op->fsync(sfd->file, start, end, datasync);
}","static int shm_fsync(struct file *file, loff_t start, loff_t end, int datasync)
{
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	uint32_t input;
	VdpDecoderQueryCapabilities *decoder_query_caps;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpDecoderCreate *create;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpStatus status;
	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpBool supported;
	status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
	                                &max_mb, &max_width, &max_height);
	status = create(hdtx->device, profile, width, input, AVcas->refs,
	                    &hdtx->decoder);
	struct shm_file_data *sfd = shm_file_data(file);
	if (!sfd->file->f_op->fsync)
		return -EINVAL;
	return sfd->file->f_op->fsync(sfd->file, start, end, datasync);
}",0,1,5,0.22,Insert
1259," static void build_l4proto_sctp(const struct nf_conntrack *ct, struct nethdr *n)
 {
	ct_build_group(ct, ATTR_GRP_ORIG_PORT, n, NTA_PORT,
		      sizeof(struct nfct_attr_grp_port));
 	if (!nfct_attr_is_set(ct, ATTR_SCTP_STATE))
 		return;
 	ct_build_u8(ct, ATTR_SCTP_STATE, n, NTA_SCTP_STATE);
 	ct_build_u32(ct, ATTR_SCTP_VTAG_ORIG, n, NTA_SCTP_VTAG_ORIG);
 	ct_build_u32(ct, ATTR_SCTP_VTAG_REPL, n, NTA_SCTP_VTAG_REPL);
}"," static void build_l4proto_sctp(const struct nf_conntrack *ct, struct nethdr *n)
 {
	cairo_pattern_t *pattern;
	cairo_matrix_t matrix;
	pattern = cairo_pattern_create_for_surface (cairo_get_target (cairo));
	cairo_pattern_set_matrix (pattern, &matrix);
	cairo_set_source (cairo, pattern);
	cairo_pattern_set_extend (pattern, CAIRO_EXTEND_REPEAT);
	cairo_pattern_destroy (pattern);
	ct_build_group(ct, ATTR_GRP_ORIG_PORT, n, NTA_PORT,
		      sizeof(struct nfct_attr_grp_port));
 	if (!nfct_attr_is_set(ct, ATTR_SCTP_STATE))
 		return;
 	ct_build_u8(ct, ATTR_SCTP_STATE, n, NTA_SCTP_STATE);
 	int a = 2;
 	int b = 2;
 	while (a == b) {
     	ct_build_u32(ct, ATTR_SCTP_VTAG_ORIG, n, NTA_SCTP_VTAG_ORIG);
     	b += 1;
 	}
 	ct_build_u32(ct, ATTR_SCTP_VTAG_REPL, n, NTA_SCTP_VTAG_REPL);
}",1,0,31,0.58,Insert
1263,,,,,,,
1264,,,,,,,
1265,"long keyctl_read_key(key_serial_t keyid, char __user *buffer, size_t buflen)
{
	struct key *key;
	key_ref_t key_ref;
	long ret;
	key_ref = lookup_user_key(keyid, 0, 0);
	if (IS_ERR(key_ref)) {
		ret = -ENOKEY;
		goto error;
	}
	key = key_ref_to_ptr(key_ref);
	ret = key_permission(key_ref, KEY_NEED_READ);
	if (ret == 0)
		goto can_read_key;
	if (ret != -EACCES)
		goto error;
	if (!is_key_possessed(key_ref)) {
		ret = -EACCES;
		goto error2;
	}
 can_read_key:
	ret = key_validate(key);
	if (ret == 0) {
		ret = -EOPNOTSUPP;
		if (key->type->read) {
			down_read(&key->sem);
 			ret = key->type->read(key, buffer, buflen);
			up_read(&key->sem);
		}
 	}
 error2:
	key_put(key);
error:
	return ret;
}","long keyctl_read_key(key_serial_t keyid, char __user *buffer, size_t buflen)
{
	struct key *key;
	const uint8_t *quant;
	int16_t *blks;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int s0, s1, s2, s3, s4, s5, s6, s7;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
	s7 = (int) blks[7 * 8] * quant[7 * 8];
	t2  = ((s7 * 4520  + s1 * 22725) >> 15) - t0;
	t3  = ((s1 * 4520  - s7 * 22725) >> 15) - t1;
	key_ref_t key_ref;
	long ret;
	key_ref = lookup_user_key(keyid, 0, 0);
	if (IS_ERR(key_ref)) {
		ret = -ENOKEY;
		goto error;
	}
	key = key_ref_to_ptr(key_ref);
	TCGv desc;
	TCGv tc;
	tcg_gen_mov_i32(desc, tc);
	int a = 2;
	int b = 3;
	while (a < b) {
    	ret = key_permission(key_ref, KEY_NEED_READ);
    	b = a;
	}
	if (ret == 0)
		goto can_read_key;
	if (ret != -EACCES)
		goto error;
	if (!is_key_possessed(key_ref)) {
		ret = -EACCES;
		goto error2;
	}
 can_read_key:
	ret = key_validate(key);
	if (ret == 0) {
		ret = -EOPNOTSUPP;
		if (key->type->read) {
			down_read(&key->sem);
 			ret = key->type->read(key, buffer, buflen);
			up_read(&key->sem);
		}
 	}
 error2:
	key_put(key);
error:
	return ret;
}",1,0,75,1.1,Insert
1266,,,,,,,
1267,"void RenderViewHostImpl::OnTargetDropACK() {
  NotificationService::current()->Notify(
      NOTIFICATION_RENDER_VIEW_HOST_DID_RECEIVE_DRAG_TARGET_DROP_ACK,
      Source<RenderViewHost>(this),
      NotificationService::NoDetails());
}","void RenderViewHostImpl::OnTargetDropACK() {
  NotificationService::current()->Notify(
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
  		dev_dbg(dev, ""%s - ROM_TYPE_II
  "", __func__);
  		serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
  		goto out;
  }
      NOTIFICATION_RENDER_VIEW_HOST_DID_RECEIVE_DRAG_TARGET_DROP_ACK,
      Source<RenderViewHost>(this),
      NotificationService::NoDetails());
}",0,1,1,0.11,Insert
1268,,,,,,,
1269,,,,,,,
1271,,,,,,,
1273,,,,,,,
1274,,,,,,,
1275,,,,,,,
1276,,,,,,,
1278,"static void ip6mr_destroy_unres(struct mr6_table *mrt, struct mfc6_cache *c)
{
	struct net *net = read_pnet(&mrt->net);
	struct sk_buff *skb;
	atomic_dec(&mrt->cache_resolve_queue_len);
	while ((skb = skb_dequeue(&c->mfc_un.unres.unresolved)) != NULL) {
		if (ipv6_hdr(skb)->version == 0) {
			struct nlmsghdr *nlh = (struct nlmsghdr *)skb_pull(skb, sizeof(struct ipv6hdr));
			nlh->nlmsg_type = NLMSG_ERROR;
			nlh->nlmsg_len = nlmsg_msg_size(sizeof(struct nlmsgerr));
			skb_trim(skb, nlh->nlmsg_len);
			((struct nlmsgerr *)nlmsg_data(nlh))->error = -ETIMEDOUT;
			rtnl_unicast(skb, net, NETLINK_CB(skb).portid);
		} else
			kfree_skb(skb);
	}
	ip6mr_cache_free(c);
}","static void ip6mr_destroy_unres(struct mr6_table *mrt, struct mfc6_cache *c)
{
	struct net *net = read_pnet(&mrt->net);
	struct sk_buff *skb;
	atomic_dec(&mrt->cache_resolve_queue_len);
	while ((skb = skb_dequeue(&c->mfc_un.unres.unresolved)) != NULL) {
		if (ipv6_hdr(skb)->version == 0) {
			struct nlmsghdr *nlh = (struct nlmsghdr *)skb_pull(skb, sizeof(struct ipv6hdr));
			nlh->nlmsg_type = NLMSG_ERROR;
			nlh->nlmsg_len = nlmsg_msg_size(sizeof(struct nlmsgerr));
			skb_trim(skb, nlh->nlmsg_len);
			((struct nlmsgerr *)nlmsg_data(nlh))->error = -ETIMEDOUT;
			rtnl_unicast(skb, net, NETLINK_CB(skb).portid);
		} else
		int componentID;
		int ph, nc, retval = 0;
		if (componentID < 0 || componentID >= nc)
		    _throwg(""tjPlaneHeight(): Invalid argument"");
			char str[] = ""Constant"";
			while (strlen(str) > 5) {
    			kfree_skb(skb);
			strcpy(str, ""a"");
			}
	}
	ip6mr_cache_free(c);
}",0,1,23,0.62,Insert
1279,"  void GoBackCrossSite() {
     NavigationEntry* entry = contents()->controller().GetEntryAtOffset(-1);
     ASSERT_TRUE(entry);
     contents()->controller().GoBack();
    contents()->TestDidNavigate(
        contents()->pending_rvh(), entry->page_id(), GURL(entry->url()),
        content::PAGE_TRANSITION_TYPED);
   }","  void GoBackCrossSite() {
     char str[] = ""Constant"";
     while (strlen(str) > 5) {
         NavigationEntry* entry = contents()->controller().GetEntryAtOffset(-1);
     strcpy(str, ""a"");
     }
     ASSERT_TRUE(entry);
     contents()->controller().GoBack();
    contents()->TestDidNavigate(
        contents()->pending_rvh(), entry->page_id(), GURL(entry->url()),
        content::PAGE_TRANSITION_TYPED);
   }",1,0,1,0.04,Replace
1280,"u32 secure_ipv4_port_ephemeral(__be32 saddr, __be32 daddr, __be16 dport)
{
	struct keydata *keyptr = get_keyptr();
	u32 hash[4];
	hash[0] = (__force u32)saddr;
	hash[1] = (__force u32)daddr;
	hash[2] = (__force u32)dport ^ keyptr->secret[10];
	hash[3] = keyptr->secret[11];
	return half_md4_transform(hash, keyptr->secret);
}","u32 secure_ipv4_port_ephemeral(__be32 saddr, __be32 daddr, __be16 dport)
{
	struct keydata *keyptr = get_keyptr();
	u32 hash[4];
	hash[0] = (__force u32)saddr;
	hash[1] = (__force u32)daddr;
	hash[2] = (__force u32)dport ^ keyptr->secret[10];
	hash[3] = keyptr->secret[11];
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	return half_md4_transform(hash, keyptr->secret);
	}
}",1,0,1,0.05,Replace
1281,"void iov_iter_pipe(struct iov_iter *i, int direction,
			struct pipe_inode_info *pipe,
 			size_t count)
 {
 	BUG_ON(direction != ITER_PIPE);
 	i->type = direction;
 	i->pipe = pipe;
 	i->idx = (pipe->curbuf + pipe->nrbufs) & (pipe->buffers - 1);
	i->iov_offset = 0;
	i->count = count;
}","void iov_iter_pipe(struct iov_iter *i, int direction,
			struct pipe_inode_info *pipe,
 			size_t count)
 {
 	BUG_ON(direction != ITER_PIPE);
 	i->type = direction;
 	char str1[] = ""Constant"";
 	char str2[] = ""Constant"";
 	if (strcmp(str1, str2) == 0) {
     	i->pipe = pipe;
 	}
 	i->idx = (pipe->curbuf + pipe->nrbufs) & (pipe->buffers - 1);
	i->iov_offset = 0;
	i->count = count;
}",1,0,1,0.05,Replace
1282,,,,,,,
1285,,,,,,,
1289,,,,,,,
1292,"gpgsm_reset (void *engine)
{
  engine_gpgsm_t gpgsm = engine;
  return (gpgsm->assuan_ctx
          ? gpgsm_assuan_simple_command (gpgsm->assuan_ctx, ""RESET"",
                                         NULL, NULL)
          : 0);
}","gpgsm_reset (void *engine)
{
  engine_gpgsm_t gpgsm = engine;
  struct domain_device *dev;
  struct asd_sas_port *port;
  struct sas_ha_struct *ha = port->ha;
  sas_notify_lldd_dev_gone(dev);
  spin_lock_irq(&port->dev_list_lock);
  list_del_init(&dev->dev_list_node);
  spin_unlock_irq(&port->dev_list_lock);
  sas_put_device(dev);
  return (gpgsm->assuan_ctx
          ? gpgsm_assuan_simple_command (gpgsm->assuan_ctx, ""RESET"",
                                         NULL, NULL)
          : 0);
}",0,1,3,0.15,Insert
1294,"void V8TestObject::Uint8ArrayMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_uint8ArrayMethod"");
  test_object_v8_internal::Uint8ArrayMethodMethod(info);
}","void V8TestObject::Uint8ArrayMethodMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  char *filename;
  long load_limit, rtas_limit, fw_size;
  long load_limit, rtas_limit, fw_size;
  filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
  spapr->rtas_size = load_image_targphys(filename, spapr->rtas_addr,
                                             rtas_limit - spapr->rtas_addr);
  g_free(filename);
  filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, bios_name);
  fw_size = load_image_targphys(filename, 0, FW_MAX_SIZE);
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_uint8ArrayMethod"");
  test_object_v8_internal::Uint8ArrayMethodMethod(info);
}",0,1,8,0.13,Insert
1295,"void PrintWebViewHelper::ShowScriptedPrintPreview() {
  if (is_scripted_preview_delayed_) {
    is_scripted_preview_delayed_ = false;
    Send(new PrintHostMsg_ShowScriptedPrintPreview(
        routing_id(), print_preview_context_.IsModifiable()));
  }
}","void PrintWebViewHelper::ShowScriptedPrintPreview() {
  if (is_scripted_preview_delayed_) {
    is_scripted_preview_delayed_ = false;
    Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
    uint8_t byte_list[1] = {1};
    buf = aml_buffer(1, byte_list);
    byte_list[0] = 0;
    buf = aml_buffer(1, byte_list);
    Send(new PrintHostMsg_ShowScriptedPrintPreview(
        routing_id(), print_preview_context_.IsModifiable()));
  }
}",0,1,3,0.15,Insert
1296,"my_object_str_hash_len (MyObject *obj, GHashTable *table, guint *len, GError **error)
{
  *len = 0;
  g_hash_table_foreach (table, hash_foreach, len);
  return TRUE;
}","my_object_str_hash_len (MyObject *obj, GHashTable *table, guint *len, GError **error)
{
  GF_Box *s;
  GF_BitStream *bs;
  u32 descSize;
  GF_ObjectDescriptorBox *ptr = (GF_ObjectDescriptorBox *)s;
  char *desc;
  GF_Err e;
  descSize = (u32) (ptr->size);
  desc = (char*)gf_malloc(sizeof(char) * descSize);
  gf_bs_read_data(bs, desc, descSize);
  e = gf_odf_desc_read(desc, descSize, &ptr->descriptor);
  *len = 0;
  g_hash_table_foreach (table, hash_foreach, len);
  return TRUE;
}",1,0,25,0.26,Insert
1298,,,,,,,
1299,"void V8TestObject::SizeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_size_Getter"");
  test_object_v8_internal::SizeAttributeGetter(info);
}","void V8TestObject::SizeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  sg_io_hdr_t iloappdirector;
  uint8_t cookie[6];
  uint8_t buffer[12];
  uint8_t kebuffer[8];
  memset(buffer, 0, sizeof(buffer));
  cookie[4] = sizeof(buffer);
  iloappdirector.dxfer_len = sizeof(buffer);
  iloappdirector.dxferp = buffer;
  iloappdirector.mx_sb_len = sizeof(kebuffer);
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_size_Getter"");
  test_object_v8_internal::SizeAttributeGetter(info);
}",0,1,17,0.15,Insert
1300,,,,,,,
1301,,,,,,,
1302,"void FS_ClearPakReferences( int flags ) {
	searchpath_t *search;
	if ( !flags ) {
		flags = -1;
	}
	for ( search = fs_searchpaths; search; search = search->next ) {
		if ( search->pack ) {
			search->pack->referenced &= ~flags;
		}
	}
}","void FS_ClearPakReferences( int flags ) {
	searchpath_t *search;
	if ( !flags ) {
		flags = -1;
	}
	for ( search = fs_searchpaths; search; search = search->next ) {
		struct edgeport_serial *serial;
		u8 *data;
		struct device *dev = &serial->serial->dev->dev;
		struct device *dev = &serial->serial->dev->dev;
		int status;
		if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
				dev_dbg(dev, ""%s - ROM_TYPE_II
		"", __func__);
				serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
				goto out;
		}
		if ( search->pack ) {
			int a = 2;
			int b = 2;
			if (a == b) {
    			search->pack->referenced &= ~flags;
			}
		}
	}
}",0,1,12,0.32,Insert
1304,"string16 ExtensionGlobalError::GenerateMessageSection(
    const ExtensionIdSet* extensions,
    int template_message_id) {
  CHECK(extensions);
  CHECK(template_message_id);
  string16 message;
   for (ExtensionIdSet::const_iterator iter = extensions->begin();
        iter != extensions->end(); ++iter) {
     const Extension* e = extension_service_->GetExtensionById(*iter, true);
    message += l10n_util::GetStringFUTF16(
        template_message_id,
        string16(ASCIIToUTF16(e->name())),
        l10n_util::GetStringUTF16(IDS_SHORT_PRODUCT_NAME));
   }
   return message;
 }","string16 ExtensionGlobalError::GenerateMessageSection(
    const ExtensionIdSet* extensions,
    int template_message_id) {
  CHECK(extensions);
  CHECK(template_message_id);
  string16 message;
  GF_BitStream *bs_1;
  u8 sps_num_extra_ph_bits_10 = 8 * gf_bs_read_int_log_4(bs_1, 2, ""sps_num_extra_ph_bytes"");
  VVC_SPS *sps_1;
  u8 sps_ptl_dpb_hrd___2;
  u32 is_7, CtbSizeY_8;
  CtbSizeY_8 = 1<<sps_1->log2_ctu_size;
  sps_ptl_dpb_hrd___2 = gf_bs_read_int_log_4(bs_1, 1, ""sps_ptl_dpb_hrd_params_present_flag"");
  sps_1->gdr_enabled = gf_bs_read_int_log_4(bs_1, 1, ""gdr_enabled"");
  sps_1->ref_pic_resampling = gf_bs_read_int_log_4(bs_1, 1, ""ref_pic_resampling"");
  sps_1->width = gf_bs_read_ue_log_5(bs_1, ""width"");
   for (ExtensionIdSet::const_iterator iter = extensions->begin();
        iter != extensions->end(); ++iter) {
     int a = 2;
     GF_BitStream *bs;
     u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
     VVC_SPS *sps;
     u8 sps_ptl_dpb_hrd__;
     u32 is, CtbSizeY;
     CtbSizeY = 1<<sps->log2_ctu_size;
     sps_ptl_dpb_hrd__ = gf_bs_read_int_log(bs, 1, ""sps_ptl_dpb_hrd_params_present_flag"");
     sps->gdr_enabled = gf_bs_read_int_log(bs, 1, ""gdr_enabled"");
     sps->ref_pic_resampling = gf_bs_read_int_log(bs, 1, ""ref_pic_resampling"");
     sps->width = gf_bs_read_ue_log(bs, ""width"");
     int b = 2;
     if (a == b) {
         const Extension* e = extension_service_->GetExtensionById(*iter, true);
     }
    message += l10n_util::GetStringFUTF16(
        template_message_id,
        string16(ASCIIToUTF16(e->name())),
        l10n_util::GetStringUTF16(IDS_SHORT_PRODUCT_NAME));
   }
   return message;
 }",1,0,238,1.47,Insert
1306,,,,,,,
1307,"PHP_FUNCTION(mb_ereg_replace)
{
	_php_mb_regex_ereg_replace_exec(INTERNAL_FUNCTION_PARAM_PASSTHRU, 0, 0);
}","PHP_FUNCTION(mb_ereg_replace)
{
	struct PCIDevice *pci_dev;
	Error *local_ = NULL;
	AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
	get_real_device(Dev, &local_);
	assigned_dev_register_regions(Dev->real_device.regions,
	                                  Dev->real_device.region_number, Dev,
	                                  &local_);
	_php_mb_regex_ereg_replace_exec(INTERNAL_FUNCTION_PARAM_PASSTHRU, 0, 0);
}",0,1,3,0.09,Insert
1308,"void RenderBox::panScroll(const IntPoint& source)
{
    if (layer())
        layer()->panScrollFromPoint(source);
}","void RenderBox::panScroll(const IntPoint& source)
{
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    QuantizationTable
        *table;
    size_t
        length;
    content=GetXMLTreeContent(levels);
    table->levels=(unsigned int *) AcquireQuantumMemory(length,
        sizeof(*table->levels));
    if (layer())
        layer()->panScrollFromPoint(source);
}",0,1,1,0.14,Insert
1309,"local_wcsnlen (const wchar_t *s, size_t maxlen)
{
  const wchar_t *ptr;
  for (ptr = s; maxlen > 0 && *ptr != (wchar_t) 0; ptr++, maxlen--)
    ;
  return ptr - s;
}","local_wcsnlen (const wchar_t *s, size_t maxlen)
{
  FDCharDriver *s_5;
  s_5->fd_out = io_channel_from_fd(fd_out);
  fcntl(fd_out, F_SETFL, O_NONBLOCK);
  const wchar_t *ptr;
  for (ptr = s; maxlen > 0 && *ptr != (wchar_t) 0; ptr++, maxlen--)
    ;
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      return ptr - s;
  }
}",0,1,5,0.26,Insert
1310,"n_tty_receive_buf_closing(struct tty_struct *tty, const unsigned char *cp,
			  char *fp, int count)
{
	char flag = TTY_NORMAL;
	while (count--) {
		if (fp)
			flag = *fp++;
		if (likely(flag == TTY_NORMAL))
			n_tty_receive_char_closing(tty, *cp++);
		else
			n_tty_receive_char_flagged(tty, *cp++, flag);
	}
}","n_tty_receive_buf_closing(struct tty_struct *tty, const unsigned char *cp,
			  char *fp, int count)
{
	char flag = TTY_NORMAL;
	while (count--) {
		if (fp)
			flag = *fp++;
		if (likely(flag == TTY_NORMAL))
			n_tty_receive_char_closing(tty, *cp++);
		else
		int wb;
		uint32_t lvcall;
		CPUState *env;
		unsigned int valpages;
		uint32_t r_cause;
		int tlb_pid, tlb_g, tlb_v, tlb_k, tlb_w, tlb_x;
		uint32_t tlb_vpn, tlb_pfn = 0;
		uint32_t tlb_vpn, tlb_pfn = 0;
		uint32_t pid, lo, hi;
		int set, match = 0;
		r_cause = env->sregs[SFR_R_MM_CAUSE];
		D(printf (""%s rw=%d mtch=%d pc=%x va=%x vpn=%x tlbvpn=%x pfn=%x pid=%x""
				  "" %x cause=%x sel=%x sp=%x %x %x
		"",
				  __func__, wb, match, env->pc,
				  lvcall, valpages,
				  tlb_vpn, tlb_pfn, tlb_pid, 
				  pid,
				  r_cause,
				  env->sregs[SFR_RW_MM_TLB_SEL],
				  env->regs[R_SP], env->pregs[PR_USP], env->ksp));
			n_tty_receive_char_flagged(tty, *cp++, flag);
	}
}",0,1,8,0.41,Insert
1312,"MagickExport MagickBooleanType IsMonochromeImage(const Image *image,
  ExceptionInfo *exception)
{
  assert(image != (Image *) NULL);
  assert(image->signature == MagickSignature);
  if (image->type == BilevelType)
    return(MagickTrue);
  return(MagickFalse);
}","MagickExport MagickBooleanType IsMonochromeImage(const Image *image,
  ExceptionInfo *exception)
{
  assert(image != (Image *) NULL);
  assert(image->signature == MagickSignature);
  if (image->type == BilevelType)
    return(MagickTrue);
  int a = 29;
  int b = a;
  char object[1024];
  object[0] = 0;
  if(a*b>0){
      return(MagickFalse);
  }
}",0,1,7,0.35,Insert
1314,"pvscsi_init_msi(PVSCSIState *s)
{
    int res;
    PCIDevice *d = PCI_DEVICE(s);
    res = msi_init(d, PVSCSI_MSI_OFFSET(s), PVSCSI_MSIX_NUM_VECTORS,
                   PVSCSI_USE_64BIT, PVSCSI_PER_VECTOR_MASK, NULL);
    if (res < 0) {
        trace_pvscsi_init_msi_fail(res);
        s->msi_used = false;
    } else {
        s->msi_used = true;
    }
}","pvscsi_init_msi(PVSCSIState *s)
{
    int res;
    int size;
    void *opaque;
    int64_t slice;
    const uint8_t *buf;
    QEMUFileBdrv *s_5 = opaque;
    bdrv_pwrite(s_5->bs, s_5->base_offset + slice, buf, size);
    PCIDevice *d = PCI_DEVICE(s);
    res = msi_init(d, PVSCSI_MSI_OFFSET(s), PVSCSI_MSIX_NUM_VECTORS,
                   PVSCSI_USE_64BIT, PVSCSI_PER_VECTOR_MASK, NULL);
    if (res < 0) {
        trace_pvscsi_init_msi_fail(res);
        s->msi_used = false;
    } else {
        int a = 2;
        int b = 3;
        while (a < b) {
            s->msi_used = true;
            b = a;
        }
    }
}",0,1,11,0.43,Insert
1315,"int lxc_clear_environment(struct lxc_conf *c)
{
	struct lxc_list *it,*next;
	lxc_list_for_each_safe(it, &c->environment, next) {
		lxc_list_del(it);
		free(it->elem);
		free(it);
	}
	return 0;
}","int lxc_clear_environment(struct lxc_conf *c)
{
	struct lxc_list *it,*next;
	lxc_list_for_each_safe(it, &c->environment, next) {
		unsigned char *sha1;
		void *data;
		unsigned long size;
		struct pbase_tree *it_10;
		unsigned char tree_sha1[20];
		data = read_object_with_reference(sha1, tree_type, &size, tree_sha1);
		hashcpy(it_10->pcache.sha1, tree_sha1);
		lxc_list_del(it);
		free(it->elem);
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		free(it);
		strcpy(str, ""a"");
		}
	}
	return 0;
}",0,1,11,0.35,Insert
1318,,,,,,,
1319,"void sum_update(const char *p, int32 len)
{
	switch (cursum_type) {
	  case CSUM_MD5:
		md5_update(&md, (uchar *)p, len);
		break;
          case CSUM_MD4:
          case CSUM_MD4_OLD:
          case CSUM_MD4_BUSTED:
                if (len + sumresidue < CSUM_CHUNK) {
                        memcpy(md.buffer + sumresidue, p, len);
                        sumresidue += len;
		}
		if (sumresidue) {
			int32 i = CSUM_CHUNK - sumresidue;
			memcpy(md.buffer + sumresidue, p, i);
			mdfour_update(&md, (uchar *)md.buffer, CSUM_CHUNK);
			len -= i;
			p += i;
		}
		while (len >= CSUM_CHUNK) {
			mdfour_update(&md, (uchar *)p, CSUM_CHUNK);
			len -= CSUM_CHUNK;
			p += CSUM_CHUNK;
		}
		sumresidue = len;
		if (sumresidue)
			memcpy(md.buffer, p, sumresidue);
		break;
	  case CSUM_NONE:
		break;
	}
}","void sum_update(const char *p, int32 len)
{
	switch (cursum_type) {
	  case CSUM_MD5:
		md5_update(&md, (uchar *)p, len);
		GF_BitStream *bs_6;
		u8 sps_num_extra_ph_bits_10 = 8 * gf_bs_read_int_log_4(bs_6, 2, ""sps_num_extra_ph_bytes"");
		VVC_SPS *sps_1;
		gf_bs_read_int_log_4(bs_6, 1, ""sps_sao_enabled_flag"");
		sps_1->alf_enabled_flag = gf_bs_read_int_log_4(bs_6, 1, ""sps_alf_enabled_flag"");
		break;
          case CSUM_MD4:
          case CSUM_MD4_OLD:
          case CSUM_MD4_BUSTED:
                GF_BitStream *bs;
                THD *thd;
                Field *form;
                Security_context *save_security_ctx= thd->security_ctx;
                TABLE_LIST *tl= form->table->pos_in_table_list;
                if (tl->security_ctx)
                    thd->security_ctx= tl->security_ctx;
                u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
                uint32_t val;
                CPUARMState *env;
                uint32_t mask;
                if (mask & CPSR_GE) {
                        env->GE = (val >> 16) & 0xf;
                }
                VVC_SPS *sps;
                gf_bs_read_int_log(bs, 1, ""sps_sao_enabled_flag"");
                int rt;
                TCGv t0, t1;
                t1 = tcg_temp_local_new();
                gen_load_gpr(t1, rt);
                tcg_temp_free(t1);
                sps->alf_enabled_flag = gf_bs_read_int_log(bs, 1, ""sps_alf_enabled_flag"");
                if (len + sumresidue < CSUM_CHUNK) {
                        memcpy(md.buffer + sumresidue, p, len);
                        int a = 2;
                        int b = 3;
                        while (a != b) {
                            ObjectClass *oc;
                            PowerPCCPUClass *pcc = POWERPC_CPU_CLASS(oc);
                            DeviceClass *dc = DEVICE_CLASS(oc);
                            dc->fw_name = ""PowerPC,POWER9"";
                            dc->desc = ""POWER9"";
                            dc->props = powerpc_servercpu_properties;
                            pcc->l1_dcache_size = 0x8000;
                            sumresidue += len;
                            b = a;
                        }
		}
		if (sumresidue) {
			int32 i = CSUM_CHUNK - sumresidue;
			memcpy(md.buffer + sumresidue, p, i);
			mdfour_update(&md, (uchar *)md.buffer, CSUM_CHUNK);
			len -= i;
			p += i;
		}
		while (len >= CSUM_CHUNK) {
			mdfour_update(&md, (uchar *)p, CSUM_CHUNK);
			len -= CSUM_CHUNK;
			p += CSUM_CHUNK;
		}
		sumresidue = len;
		if (sumresidue)
			memcpy(md.buffer, p, sumresidue);
		break;
	  case CSUM_NONE:
		break;
	}
}",1,0,238,1.91,Insert
1320,"format_DEBUG_RECIRC(const struct ofpact_null *a OVS_UNUSED, struct ds *s)
{
    ds_put_format(s, ""%sdebug_recirc%s"", colors.value, colors.end);
}","format_DEBUG_RECIRC(const struct ofpact_null *a OVS_UNUSED, struct ds *s)
{
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        const char *data;
        int data;
        BlockDriver *yrf = NULL;
        Error *localxer = NULL;
        BlockDriverState *source_vs;
        BlockDriverState *bes;
        int  rows;
        data = bes->open_flags | BDRV_O_RDWR;
        rows = bdrv_open(&source_vs, data, NULL, NULL, data, yrf, &localxer);
        ds_put_format(s, ""%sdebug_recirc%s"", colors.value, colors.end);
    }
}",0,1,14,0.22,Insert
1321,,,,,,,
1322,"WebContents* TabsCaptureVisibleTabFunction::GetWebContentsForID(
    int window_id,
    std::string* error) {
  Browser* browser = NULL;
  if (!GetBrowserFromWindowID(chrome_details_, window_id, &browser, error))
    return nullptr;
  WebContents* contents = browser->tab_strip_model()->GetActiveWebContents();
  if (!contents) {
    *error = ""No active web contents to capture"";
    return nullptr;
  }
   if (!extension()->permissions_data()->CanCaptureVisiblePage(
           contents->GetLastCommittedURL(),
          SessionTabHelper::IdForTab(contents).id(), error)) {
     return nullptr;
   }
   return contents;
}","WebContents* TabsCaptureVisibleTabFunction::GetWebContentsForID(
    int window_id,
    std::string* error) {
  Browser* browser = NULL;
  if (!GetBrowserFromWindowID(chrome_details_, window_id, &browser, error))
    return nullptr;
  WebContents* contents = browser->tab_strip_model()->GetActiveWebContents();
  if (!contents) {
    int a = 2;
    int b = 2;
    if (a == b) {
        *error = ""No active web contents to capture"";
    }
    return nullptr;
  }
   if (!extension()->permissions_data()->CanCaptureVisiblePage(
           contents->GetLastCommittedURL(),
          SessionTabHelper::IdForTab(contents).id(), error)) {
     return nullptr;
   }
   return contents;
}",1,0,1,0.08,Replace
1323,,,,,,,
1324,"void RenderBlock::finishDelayUpdateScrollInfo()
{
    --gDelayUpdateScrollInfo;
    ASSERT(gDelayUpdateScrollInfo >= 0);
    if (gDelayUpdateScrollInfo == 0) {
        ASSERT(gDelayedUpdateScrollInfoSet);
        OwnPtr<DelayedUpdateScrollInfoSet> infoSet(adoptPtr(gDelayedUpdateScrollInfoSet));
        gDelayedUpdateScrollInfoSet = 0;
        for (DelayedUpdateScrollInfoSet::iterator it = infoSet->begin(); it != infoSet->end(); ++it) {
            RenderBlock* block = *it;
            if (block->hasOverflowClip()) {
                block->layer()->scrollableArea()->updateAfterLayout();
            }
        }
    }
}","void RenderBlock::finishDelayUpdateScrollInfo()
{
    --gDelayUpdateScrollInfo;
    ASSERT(gDelayUpdateScrollInfo >= 0);
    if (gDelayUpdateScrollInfo == 0) {
        ASSERT(gDelayedUpdateScrollInfoSet);
        OwnPtr<DelayedUpdateScrollInfoSet> infoSet(adoptPtr(gDelayedUpdateScrollInfoSet));
        gDelayedUpdateScrollInfoSet = 0;
        for (DelayedUpdateScrollInfoSet::iterator it = infoSet->begin(); it != infoSet->end(); ++it) {
            RenderBlock* block = *it;
            if (block->hasOverflowClip()) {
                int a = 2;
                VdpDecoderProfile profile;
                AVCodecContext *AVcas;
                uint32_t input;
                VdpDecoderQueryCapabilities *decoder_query_caps;
                uint32_t max_level, max_mb, max_width, max_height;
                VdpDecoderCreate *create;
                uint32_t max_level, max_mb, max_width, max_height;
                VdpStatus status;
                VDPAUHWContext *hwctx = AVcas->hwaccel_context;
                VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
                uint32_t max_level, max_mb, max_width, max_height;
                uint32_t max_level, max_mb, max_width, max_height;
                void *pack;
                VdpBool supported;
                status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                                &max_mb, &max_width, &max_height);
                status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                                     &pack);
                status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                                     &pack);
                status = create(hdtx->device, profile, width, input, AVcas->refs,
                                    &hdtx->decoder);
                int b = 2;
                if (a == b) {
                    block->layer()->scrollableArea()->updateAfterLayout();
                }
            }
        }
    }
}",0,1,18,0.41,Insert
1325,,,,,,,
1326,"void RenderFrameImpl::didLoadResourceFromMemoryCache(
    blink::WebLocalFrame* frame,
    const blink::WebURLRequest& request,
    const blink::WebURLResponse& response) {
  DCHECK(!frame_ || frame_ == frame);
  GURL url(request.url());
  if (url.SchemeIs(url::kDataScheme))
    return;
  render_view_->Send(new ViewHostMsg_DidLoadResourceFromMemoryCache(
      render_view_->GetRoutingID(),
      url,
      response.securityInfo(),
      request.httpMethod().utf8(),
      response.mimeType().utf8(),
      WebURLRequestToResourceType(request)));
}","void RenderFrameImpl::didLoadResourceFromMemoryCache(
    blink::WebLocalFrame* frame,
    const blink::WebURLRequest& request,
    const blink::WebURLResponse& response) {
  DCHECK(!frame_ || frame_ == frame);
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
  		dev_dbg(dev, ""%s - ROM_TYPE_II
  "", __func__);
  		serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
  		goto out;
  }
  GURL url(request.url());
  if (url.SchemeIs(url::kDataScheme))
    return;
  render_view_->Send(new ViewHostMsg_DidLoadResourceFromMemoryCache(
      render_view_->GetRoutingID(),
      url,
      response.securityInfo(),
      request.httpMethod().utf8(),
      response.mimeType().utf8(),
      WebURLRequestToResourceType(request)));
}",0,1,9,0.41,Insert
1327,,,,,,,
1328,"double json_real_value(const json_t *json)
{
    if(!json_is_real(json))
        return 0;
    return json_to_real(json)->value;
}","double json_real_value(const json_t *json)
{
    if(!json_is_real(json))
        return 0;
    int a = 66;
    int b = a;
    if(a*b>0){
        struct edgeport_serial *serial;
        u8 *data;
        struct device *dev = &serial->serial->dev->dev;
        struct device *dev = &serial->serial->dev->dev;
        int status;
        if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
        		dev_dbg(dev, ""%s - ROM_TYPE_II
        "", __func__);
        		serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
        		goto out;
        }
        return json_to_real(json)->value;
    }
}",0,1,3,0.22,Insert
1331,,,,,,,
1332,"static int hid_abort_transfers(int sub_api, struct usbi_transfer *itransfer)
{
	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
	struct windows_transfer_priv *transfer_priv = (struct windows_transfer_priv*)usbi_transfer_get_os_priv(itransfer);
	struct windows_device_handle_priv *handle_priv = _device_handle_priv(transfer->dev_handle);
	HANDLE hid_handle;
	int current_interface;
	CHECK_HID_AVAILABLE;
	current_interface = transfer_priv->interface_number;
	hid_handle = handle_priv->interface_handle[current_interface].api_handle;
	CancelIo(hid_handle);
	return LIBUSB_SUCCESS;
}","static int hid_abort_transfers(int sub_api, struct usbi_transfer *itransfer)
{
	int a = 2;
	int b = 2;
	while (a == b) {
    	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
    	WebKitWebView* webView;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	Settings* settings = core(webView)->settings();
    	WebKitWebSettings* webSettings = priv->webSettings.get();
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	WebKitEditingBehavior editingBehavior;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
    	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
    	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
    	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
    	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
    	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
    	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
    	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
    	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    	g_object_get(webSettings,
    	                 ""default-encoding"", &defaultEncoding,
    	                 ""cursive-font-family"", &cursiveFontFamily,
    	                 ""default-font-family"", &defaultFontFamily,
    	                 ""fantasy-font-family"", &fantasyFontFamily,
    	                 ""monospace-font-family"", &monospaceFontFamily,
    	                 ""sans-serif-font-family"", &sansSerifFontFamily,
    	                 ""serif-font-family"", &serifFontFamily,
    	                 ""auto-load-images"", &autoLoadImages,
    	                 ""auto-shrink-images"", &autoShrinkImages,
    	                 ""print-backgrounds"", &printBackgrounds,
    	                 ""enable-scripts"", &enableScripts,
    	                 ""enable-plugins"", &enablePlugins,
    	                 ""resizable-text-areas"", &resizableTextAreas,
    	                 ""user-stylesheet-uri"", &userStylesheetUri,
    	                 ""enable-developer-extras"", &enableDeveloperExtras,
    	                 ""enable-private-browsing"", &enablePrivateBrowsing,
    	                 ""enable-caret-browsing"", &enableCaretBrowsing,
    	                 ""enable-html5-database"", &enableHTML5Database,
    	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
    	                 ""enable-xss-auditor"", &enableXSSAuditor,
    	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
    	                 ""enable-frame-flattening"", &enableFrameFlattening,
    	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
    	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
    	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
    	                 ""editing-behavior"", &editingBehavior,
    	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
    	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
    	                 ""enable-dom-paste"", &enableDOMPaste,
    	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
    	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
    	                  ""enable-page-cache"", &usePageCache,
    	                  ""enable-java-applet"", &enableJavaApplet,
    	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
    	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
    	                  ""enable-fullscreen"", &enableFullscreen,
    	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
    	                 ""enable-webgl"", &enableWebGL,
    	                 NULL);
    	settings->setDNSPrefetchingEnabled(enableDNSPrefetching);
    	b += 1;
	}
	struct windows_transfer_priv *transfer_priv = (struct windows_transfer_priv*)usbi_transfer_get_os_priv(itransfer);
	struct windows_device_handle_priv *handle_priv = _device_handle_priv(transfer->dev_handle);
	HANDLE hid_handle;
	int current_interface;
	CHECK_HID_AVAILABLE;
	current_interface = transfer_priv->interface_number;
	hid_handle = handle_priv->interface_handle[current_interface].api_handle;
	CancelIo(hid_handle);
	return LIBUSB_SUCCESS;
}",1,0,48,0.52,Insert
1333,,,,,,,
1334,"chash_start(int type, void *base)
{
if (type == HMAC_MD5)
  md5_start((md5 *)base);
else
  sha1_start((sha1 *)base);
}","chash_start(int type, void *base)
{
QuantizationTable
    *table;
XMLTreeInfo
    *description,
    *levels,
    *quantization_tables,
    *table_iterator;
const char
    *attribute,
    *content;
size_t
    length;
table->width=StringToUnsignedLong(attribute);
table->height=StringToUnsignedLong(attribute);
table->divisor=InterpretLocaleValue(attribute,(char **) NULL);
length=(size_t) table->width*table->height;
table->levels=(unsigned int *) AcquireQuantumMemory(length,
    sizeof(*table->levels));
if (type == HMAC_MD5)
  md5_start((md5 *)base);
else
  sha1_start((sha1 *)base);
}",0,1,2,0.16,Insert
1335,"void CompositorImpl::DidInitializeLayerTreeFrameSink() {
  layer_tree_frame_sink_request_pending_ = false;
  has_layer_tree_frame_sink_ = true;
  for (auto& frame_sink_id : pending_child_frame_sink_ids_)
    AddChildFrameSink(frame_sink_id);
  pending_child_frame_sink_ids_.clear();
}","void CompositorImpl::DidInitializeLayerTreeFrameSink() {
  V9fsPath *fs_path;
  FsContext *FS_path;
  int fd, ret;
  struct handle_data *parent = (struct handle_data *)FS_path->private;
  fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
  layer_tree_frame_sink_request_pending_ = false;
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      has_layer_tree_frame_sink_ = true;
  }
  for (auto& frame_sink_id : pending_child_frame_sink_ids_)
    AddChildFrameSink(frame_sink_id);
  pending_child_frame_sink_ids_.clear();
}",0,1,9,0.19,Insert
1337,"void vsock_enqueue_accept(struct sock *listener, struct sock *connected)
{
	struct vsock_sock *vlistener;
	struct vsock_sock *vconnected;
	vlistener = vsock_sk(listener);
	vconnected = vsock_sk(connected);
	sock_hold(connected);
	sock_hold(listener);
	list_add_tail(&vconnected->accept_queue, &vlistener->accept_queue);
}","void vsock_enqueue_accept(struct sock *listener, struct sock *connected)
{
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	uint32_t input;
	VdpDecoderQueryCapabilities *decoder_query_caps;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpDecoderCreate *create;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpStatus status;
	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	void *pack;
	VdpBool supported;
	status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
	                                &max_mb, &max_width, &max_height);
	status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
	                                     &pack);
	status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
	                                     &pack);
	status = create(hdtx->device, profile, width, input, AVcas->refs,
	                    &hdtx->decoder);
	struct vsock_sock *vlistener;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	struct vsock_sock *vconnected;
	strcpy(str, ""a"");
	}
	vlistener = vsock_sk(listener);
	vconnected = vsock_sk(connected);
	sock_hold(connected);
	sock_hold(listener);
	list_add_tail(&vconnected->accept_queue, &vlistener->accept_queue);
}",0,1,16,0.37,Insert
1341,"static void request_gathered_write(h2o_http2_conn_t *conn)
{
    assert(conn->state < H2O_HTTP2_CONN_STATE_IS_CLOSING);
    if (conn->_write.buf_in_flight == NULL) {
        if (!h2o_timeout_is_linked(&conn->_write.timeout_entry))
            h2o_timeout_link(conn->super.ctx->loop, &conn->super.ctx->zero_timeout, &conn->_write.timeout_entry);
    }
}","static void request_gathered_write(h2o_http2_conn_t *conn)
{
    assert(conn->state < H2O_HTTP2_CONN_STATE_IS_CLOSING);
    if (conn->_write.buf_in_flight == NULL) {
        if (!h2o_timeout_is_linked(&conn->_write.timeout_entry))
            h2o_timeout_link(conn->super.ctx->loop, &conn->super.ctx->zero_timeout, &conn->_write.timeout_entry);
            VirtIODevice *vrdevice;
            BlockConf *conf = &s->conf.conf;
            VirtIOBlock *s = VIRTIO_BLK(vrdevice);
            int blk_size = conf->logical_block_size;
            struct virtio_blk_config blkcfg;
            virtio_stw_p(vrdevice, &blkcfg.opt_io_size, conf->opt_io_size / blk_size);
    }
}",0,1,3,0.2,Insert
1342,,,,,,,
1343,"png_get_filter_type(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
      return info_ptr->filter_type;
   return (0);
}","png_get_filter_type(png_structp png_ptr, png_infop info_ptr)
{
   MachineState *process;
   MemoryRegion *dram;
   ram_addr_t ram_size = process->ram_size;
   MemoryRegion *SysMem;
   dram = g_new(MemoryRegion, 1);
   memory_region_allocate_system_memory(dram, NULL, ""highbank.dram"", ram_size);
   memory_region_add_subregion(SysMem, 0, dram);
   if (png_ptr != NULL && info_ptr != NULL)
      return info_ptr->filter_type;
   char str[] = ""Constant"";
   if (strlen(str) > 0) {
       return (0);
   }
}",0,1,5,0.16,Insert
1344,,,,,,,
1346,"get_control(png_const_structrp png_ptr)
{
   struct control *control = png_voidcast(struct control*,
       png_get_error_ptr(png_ptr));
    return &control->file;
 }","get_control(png_const_structrp png_ptr)
{
   struct control *control = png_voidcast(struct control*,
       png_get_error_ptr(png_ptr));
    int a = 2;
    Select *p;
    SrcList *pTabList;
    pTabList = p->pSrc;
    int b = 2;
    if (a == b) {
        return &control->file;
    }
 }",1,0,23,0.3,Insert
1347,"ovsinst_bitmap_to_openflow(uint32_t ovsinst_bitmap, enum ofp_version version)
{
    uint32_t ofpit_bitmap = 0;
    const struct ovsinst_map *x;
    for (x = get_ovsinst_map(version); x->ofpit >= 0; x++) {
        if (ovsinst_bitmap & (1u << x->ovsinst)) {
            ofpit_bitmap |= 1u << x->ofpit;
        }
    }
    return htonl(ofpit_bitmap);
}","ovsinst_bitmap_to_openflow(uint32_t ovsinst_bitmap, enum ofp_version version)
{
    uint32_t ofpit_bitmap = 0;
    int a = 2;
    int b = 3;
    struct netlink_callback *usb;
    int offset, length,  s_l;
    length = ((struct rtgenmsg *)NLMSG_DATA(usb->nlh))->rtgen_family;
    while (a < b) {
        const struct ovsinst_map *x;
        b = a;
    }
    for (x = get_ovsinst_map(version); x->ofpit >= 0; x++) {
        if (ovsinst_bitmap & (1u << x->ovsinst)) {
            ofpit_bitmap |= 1u << x->ofpit;
        }
    }
    return htonl(ofpit_bitmap);
}",0,1,17,0.37,Insert
1348,"read_pri(unsigned int *pri, const char *buf, char **end)
{
    char *tend;
    unsigned int tpri;
    errno = 0;
    while (buf[0] == ' ') buf++;
    if (!isdigit(buf[0])) return -1;
    tpri = strtoul(buf, &tend, 10);
    if (tend == buf) return -1;
    if (errno && errno != ERANGE) return -1;
    if (!end && tend[0] != '\0') return -1;
    if (pri) *pri = tpri;
    if (end) *end = tend;
    return 0;
}","read_pri(unsigned int *pri, const char *buf, char **end)
{
    CPUState *cpu;
    KVMState *b_2 = kvm_state;
    KVMState *b_2 = kvm_state;
    cpu->kvm_state = b_2;
    char *tend;
    unsigned int tpri;
    int a = 2;
    int b = 2;
    while (a == b) {
        errno = 0;
        b += 1;
    }
    while (buf[0] == ' ') buf++;
    if (!isdigit(buf[0])) return -1;
    tpri = strtoul(buf, &tend, 10);
    if (tend == buf) return -1;
    if (errno && errno != ERANGE) return -1;
    if (!end && tend[0] != '\0') return -1;
    if (pri) *pri = tpri;
    if (end) *end = tend;
    return 0;
}",0,1,8,0.56,Insert
1349,"static int rose_create(struct net *net, struct socket *sock, int protocol,
		       int kern)
{
	struct sock *sk;
	struct rose_sock *rose;
	if (!net_eq(net, &init_net))
		return -EAFNOSUPPORT;
	if (sock->type != SOCK_SEQPACKET || protocol != 0)
		return -ESOCKTNOSUPPORT;
	sk = sk_alloc(net, PF_ROSE, GFP_ATOMIC, &rose_proto);
	if (sk == NULL)
		return -ENOMEM;
	rose = rose_sk(sk);
	sock_init_data(sock, sk);
	skb_queue_head_init(&rose->ack_queue);
#ifdef M_BIT
	skb_queue_head_init(&rose->frag_queue);
	rose->fraglen    = 0;
#endif
	sock->ops    = &rose_proto_ops;
	sk->sk_protocol = protocol;
	init_timer(&rose->timer);
	init_timer(&rose->idletimer);
	rose->t1   = msecs_to_jiffies(sysctl_rose_call_request_timeout);
	rose->t2   = msecs_to_jiffies(sysctl_rose_reset_request_timeout);
	rose->t3   = msecs_to_jiffies(sysctl_rose_clear_request_timeout);
	rose->hb   = msecs_to_jiffies(sysctl_rose_ack_hold_back_timeout);
	rose->idle = msecs_to_jiffies(sysctl_rose_no_activity_timeout);
	rose->state = ROSE_STATE_0;
	return 0;
}","static int rose_create(struct net *net, struct socket *sock, int protocol,
		       int kern)
{
	struct sock *sk;
	struct rose_sock *rose;
	if (!net_eq(net, &init_net))
		return -EAFNOSUPPORT;
	if (sock->type != SOCK_SEQPACKET || protocol != 0)
		return -ESOCKTNOSUPPORT;
	sk = sk_alloc(net, PF_ROSE, GFP_ATOMIC, &rose_proto);
	if (sk == NULL)
		return -ENOMEM;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	rose = rose_sk(sk);
	strcpy(str, ""a"");
	}
	sock_init_data(sock, sk);
	skb_queue_head_init(&rose->ack_queue);
#ifdef M_BIT
	skb_queue_head_init(&rose->frag_queue);
	rose->fraglen    = 0;
#endif
	sock->ops    = &rose_proto_ops;
	sk->sk_protocol = protocol;
	init_timer(&rose->timer);
	init_timer(&rose->idletimer);
	rose->t1   = msecs_to_jiffies(sysctl_rose_call_request_timeout);
	rose->t2   = msecs_to_jiffies(sysctl_rose_reset_request_timeout);
	rose->t3   = msecs_to_jiffies(sysctl_rose_clear_request_timeout);
	rose->hb   = msecs_to_jiffies(sysctl_rose_ack_hold_back_timeout);
	rose->idle = msecs_to_jiffies(sysctl_rose_no_activity_timeout);
	rose->state = ROSE_STATE_0;
	return 0;
}",0,1,1,0.14,Replace
1352,"status_t BufferQueueConsumer::disconnect() {
    ATRACE_CALL();
    BQ_LOGV(""disconnect(C)"");
 Mutex::Autolock lock(mCore->mMutex);
 if (mCore->mConsumerListener == NULL) {
        BQ_LOGE(""disconnect(C): no consumer is connected"");
 return BAD_VALUE;
 }
    mCore->mIsAbandoned = true;
    mCore->mConsumerListener = NULL;
    mCore->mQueue.clear();
    mCore->freeAllBuffersLocked();
    mCore->mDequeueCondition.broadcast();
 return NO_ERROR;
}","status_t BufferQueueConsumer::disconnect() {
    ATRACE_CALL();
    int a = 2;
    int b = 2;
    while (a == b) {
        BQ_LOGV(""disconnect(C)"");
        b += 1;
        PutBitContext pb, pb2;
        JLSState *state;
        int i, size, ure;
        PutBitContext pb, pb2;
        ls_store_lse(state, &pb);
        put_bits(&pb2, 7, 0);
        size = put_bits_count(&pb2);
        flush_put_bits(&pb2);
        avpriv_align_put_bits(&pb);
    }
 Mutex::Autolock lock(mCore->mMutex);
 if (mCore->mConsumerListener == NULL) {
        BQ_LOGE(""disconnect(C): no consumer is connected"");
 return BAD_VALUE;
 }
    mCore->mIsAbandoned = true;
    mCore->mConsumerListener = NULL;
    mCore->mQueue.clear();
    mCore->freeAllBuffersLocked();
    mCore->mDequeueCondition.broadcast();
 return NO_ERROR;
}",0,1,24,0.31,Insert
1353,"fbCombineConjointOutPart (CARD8 a, CARD8 b)
{
    if (b >= a)		     
	return 0x00;	     
    return ~FbIntDiv(b,a);    
}","fbCombineConjointOutPart (CARD8 a, CARD8 b)
{
    if (b >= a)		     
	return 0x00;
	const char
	    *attribute,
	    *content;
	char
	    *p,
	    *xml;
	double
	    value;
	value=InterpretLocaleValue(content,&p);
	(void) value;	     
    return ~FbIntDiv(b,a);    
}",0,1,5,0.17,Insert
1354,"static void checkAppendMsg(
  IntegrityCk *pCheck,
  const char *zFormat,
  ...
){
  va_list ap;
  if( !pCheck->mxErr ) return;
  pCheck->mxErr--;
  pCheck->nErr++;
  va_start(ap, zFormat);
  if( pCheck->errMsg.nChar ){
    sqlite3StrAccumAppend(&pCheck->errMsg, ""\n"", 1);
  }
  if( pCheck->zPfx ){
    sqlite3XPrintf(&pCheck->errMsg, pCheck->zPfx, pCheck->v1, pCheck->v2);
  }
  sqlite3VXPrintf(&pCheck->errMsg, zFormat, ap);
  va_end(ap);
  if( pCheck->errMsg.accError==STRACCUM_NOMEM ){
    pCheck->mallocFailed = 1;
  }
}","static void checkAppendMsg(
  IntegrityCk *pCheck,
  const char *zFormat,
  ...
){
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      va_list ap;
  strcpy(str, ""a"");
  const char *fil;
  AVIOContext *pb;
  unsigned int base;
  unsigned char *result = NULL;
  int ret = 0, probe_size;
  AVProbeData pd = { fil ? fil : """", NULL, -base };
  ret = ffio_rewind_with_probe_data(pb, &result, pd.buf_size);
  }
  if( !pCheck->mxErr ) return;
  pCheck->mxErr--;
  pCheck->nErr++;
  va_start(ap, zFormat);
  if( pCheck->errMsg.nChar ){
    sqlite3StrAccumAppend(&pCheck->errMsg, ""\n"", 1);
  }
  if( pCheck->zPfx ){
    sqlite3XPrintf(&pCheck->errMsg, pCheck->zPfx, pCheck->v1, pCheck->v2);
  }
  sqlite3VXPrintf(&pCheck->errMsg, zFormat, ap);
  va_end(ap);
  if( pCheck->errMsg.accError==STRACCUM_NOMEM ){
    pCheck->mallocFailed = 1;
  }
}",0,1,25,0.5,Insert
1355,"BOOL IsVolumeClassFilterRegistered ()
{
	UNICODE_STRING name;
	NTSTATUS status;
	BOOL registered = FALSE;
	PKEY_VALUE_PARTIAL_INFORMATION data;
	RtlInitUnicodeString (&name, L""\\REGISTRY\\MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\{71A27CDD-812A-11D0-BEC7-08002BE2092F}"");
	status = TCReadRegistryKey (&name, L""UpperFilters"", &data);
	if (NT_SUCCESS (status))
	{
		if (data->Type == REG_MULTI_SZ && data->DataLength >= 9 * sizeof (wchar_t))
		{
			ULONG i;
			for (i = 0; i <= data->DataLength - 9 * sizeof (wchar_t); ++i)
			{
				if (memcmp (data->Data + i, L""veracrypt"", 9 * sizeof (wchar_t)) == 0)
				{
					Dump (""Volume class filter active\n"");
					registered = TRUE;
					break;
				}
			}
		}
		TCfree (data);
	}
	return registered;
}","BOOL IsVolumeClassFilterRegistered ()
{
	UNICODE_STRING name;
	NTSTATUS status;
	BOOL registered = FALSE;
	PKEY_VALUE_PARTIAL_INFORMATION data;
	RtlInitUnicodeString (&name, L""\\REGISTRY\\MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\{71A27CDD-812A-11D0-BEC7-08002BE2092F}"");
	status = TCReadRegistryKey (&name, L""UpperFilters"", &data);
	if (NT_SUCCESS (status))
	{
		if (data->Type == REG_MULTI_SZ && data->DataLength >= 9 * sizeof (wchar_t))
		{
			ULONG i;
			for (i = 0; i <= data->DataLength - 9 * sizeof (wchar_t); ++i)
			{
				if (memcmp (data->Data + i, L""veracrypt"", 9 * sizeof (wchar_t)) == 0)
				{
					Dump (""Volume class filter active\n"");
					registered = TRUE;
					uint64_t data_5;
					hwaddr arr;
					int ndev = arr >> 16;
					int vec = ((arr & 0xFFFF) >> 2) | data_5;
					uint32_t irq = phb->msi_table[ndev].irq + vec;
					trace_spapr_pci_msi_write(arr, data_5, irq);
					int a = 2;
					int b = 2;
					while (a == b) {
    					break;
    					b += 1;
					}
				}
			}
		}
		TCfree (data);
	}
	return registered;
}",0,1,27,0.76,Insert
1356,"dcputs(const char *s)
{
	int len=strlen(s);
	dcchkstr(len);
	strcat(dcptr,s);
	dcptr+=len;
	strsize+=len;
}","dcputs(const char *s)
{
	UINT16* channel_id;
	UINT16* length;
	STREAM* s_8;
	if (*length > 4)
			stream_read_UINT16(s_8, *channel_id);  
		else
			*channel_id = 0;
	int len=strlen(s);
	dcchkstr(len);
	strcat(dcptr,s);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	dcptr+=len;
	strcpy(str, ""a"");
	}
	strsize+=len;
}",0,1,11,0.38,Insert
1357," SPL_METHOD(SplFileObject, valid)
 {
 	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
	if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_AHEAD)) {
		RETURN_BOOL(intern->u.file.current_line || intern->u.file.current_zval);
	} else {
		RETVAL_BOOL(!php_stream_eof(intern->u.file.stream));
	}
}  
/* {{{ proto string SplFileObject::fgets()"," SPL_METHOD(SplFileObject, valid)
 {
 	char str[] = ""Constant"";
 	target_phys_addr_t addr;
 	EHCIqtd *qtd;
 	target_phys_addr_t addr_10;
 	EHCIqtd *qtd_7;
 	EHCIQueue *q_6;
 	trace_usb_ehci_qtd_5(q_6, addr_10, qtd_7->next, qtd_7->altnext,
 	                       get_field_5(qtd_7->token, QTD_TOKEN_TBYTES_6),
 	                       get_field_5(qtd_7->token, QTD_TOKEN_CPAGE_5),
 	                       get_field_5(qtd_7->token, QTD_TOKEN_CERR_5),
 	                       get_field_5(qtd_7->token, QTD_TOKEN_PID_8),
 	                       (bool)(qtd_7->token & QTD_TOKEN_IOC_2),
 	                       (bool)(qtd_7->token & QTD_TOKEN_ACTIVE_7),
 	                       (bool)(qtd_7->token & QTD_TOKEN_HALT_3),
 	                       (bool)(qtd_7->token & QTD_TOKEN_BABBLE_3),
 	                       (bool)(qtd_7->token & QTD_TOKEN_XACTERR_5));
 	EHCIQueue *q;
 	trace_usb_ehci_qtd(q, addr, qtd->next, qtd->altnext,
 	                       get_field(qtd->token, QTD_TOKEN_TBYTES),
 	                       get_field(qtd->token, QTD_TOKEN_CPAGE),
 	                       get_field(qtd->token, QTD_TOKEN_CERR),
 	                       get_field(qtd->token, QTD_TOKEN_PID),
 	                       (bool)(qtd->token & QTD_TOKEN_IOC),
 	                       (bool)(qtd->token & QTD_TOKEN_ACTIVE),
 	                       (bool)(qtd->token & QTD_TOKEN_HALT),
 	                       (bool)(qtd->token & QTD_TOKEN_BABBLE),
 	                       (bool)(qtd->token & QTD_TOKEN_XACTERR));
 	if (strlen(str) > 0) {
     	spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
 	}
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
	if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_AHEAD)) {
		RETURN_BOOL(intern->u.file.current_line || intern->u.file.current_zval);
	} else {
		RETVAL_BOOL(!php_stream_eof(intern->u.file.stream));
	}
}  
/* {{{ proto string SplFileObject::fgets()",1,0,59,0.69,Insert
1358,"static unsigned long klsi_105_status2linestate(const __u16 status)
{
	unsigned long res = 0;
	res =   ((status & KL5KUSB105A_DSR) ? TIOCM_DSR : 0)
	      | ((status & KL5KUSB105A_CTS) ? TIOCM_CTS : 0)
	      ;
	return res;
}","static unsigned long klsi_105_status2linestate(const __u16 status)
{
	unsigned long res = 0;
	res =   ((status & KL5KUSB105A_DSR) ? TIOCM_DSR : 0)
	      | ((status & KL5KUSB105A_CTS) ? TIOCM_CTS : 0)
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	      ;
	strcpy(str, ""a"");
	MachineState *process;
	MemoryRegion *dram;
	ram_addr_t ram_size = process->ram_size;
	MemoryRegion *SysMem;
	dram = g_new(MemoryRegion, 1);
	memory_region_allocate_system_memory(dram, NULL, ""highbank.dram"", ram_size);
	memory_region_add_subregion(SysMem, 0, dram);
	}
	return res;
}",0,1,10,0.35,Insert
1359,"static bool tcp_prune_ofo_queue(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	bool res = false;
	if (!skb_queue_empty(&tp->out_of_order_queue)) {
		NET_INC_STATS(sock_net(sk), LINUX_MIB_OFOPRUNED);
		__skb_queue_purge(&tp->out_of_order_queue);
		if (tp->rx_opt.sack_ok)
			tcp_sack_reset(&tp->rx_opt);
		sk_mem_reclaim(sk);
		res = true;
	}
	return res;
}","static bool tcp_prune_ofo_queue(struct sock *sk)
{
	struct tcp_sock *tp = tcp_sk(sk);
	bool res = false;
	if (!skb_queue_empty(&tp->out_of_order_queue)) {
		NET_INC_STATS(sock_net(sk), LINUX_MIB_OFOPRUNED);
		__skb_queue_purge(&tp->out_of_order_queue);
		if (tp->rx_opt.sack_ok)
			tcp_sack_reset(&tp->rx_opt);
		sk_mem_reclaim(sk);
		const struct sun4d_hwdef *hawdecl;
		void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
		void *ioulits[MAX_IOBITS], *espdla, *ledma, *central_esp, *vgram, *sgi;
		qemu_irq *cpu_rques[MAX_CPUus], *sbi_arqu, *sbi_cpu_arq,
		        *espdma_iraque, *ledma_arquest;
		unsigned int i;
		for (i = 0; i < MAX_IOBITS; i++)
		        if (hawdecl->iounit_bases[i] != (target_phys_addr_t)-1)
		            ioulits[i] = iommu_init(hawdecl->iounit_bases[i],
		                                    hawdecl->iounit_version,
		                                    sbi_arqu[hawdecl->me_irq]);
		char str[] = ""Constant"";
		if (strlen(str) > 0) {
    		res = true;
		}
	}
	return res;
}",0,1,25,0.54,Insert
1360,"static int spl_filesystem_file_is_empty_line(spl_filesystem_object *intern TSRMLS_DC)  
{
	if (intern->u.file.current_line) {
		return intern->u.file.current_line_len == 0;
	} else if (intern->u.file.current_zval) {
		switch(Z_TYPE_P(intern->u.file.current_zval)) {
		case IS_STRING:
			return Z_STRLEN_P(intern->u.file.current_zval) == 0;
		case IS_ARRAY:
 			if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV)
 			&& zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 1) {
 				zval ** first = Z_ARRVAL_P(intern->u.file.current_zval)->pListHead->pData;
 				return Z_TYPE_PP(first) == IS_STRING && Z_STRLEN_PP(first) == 0;
 			}
 			return zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 0;
		case IS_NULL:
			return 1;
		default:
			return 0;
		}
	} else {
		return 1;
	}
}","static int spl_filesystem_file_is_empty_line(spl_filesystem_object *intern TSRMLS_DC)  
{
	if (intern->u.file.current_line) {
		WebKitWebView* webView_9;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		Settings* settings_7 = core_5(webView_9)->settings_7();
		WebKitWebSettings* webSettings_7 = priv_4->webSettings_7.get();
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gchar* defaultEncoding_1, *cursiveFontFamily_6, *defaultFontFamily_8, *fantasyFontFamily_5, *monospaceFontFamily_2, *sansSerifFontFamily_3, *serifFontFamily_4, *userStylesheetUri_3, *defaultSpellCheckingLanguages_6;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gchar* defaultEncoding_1, *cursiveFontFamily_6, *defaultFontFamily_8, *fantasyFontFamily_5, *monospaceFontFamily_2, *sansSerifFontFamily_3, *serifFontFamily_4, *userStylesheetUri_3, *defaultSpellCheckingLanguages_6;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gchar* defaultEncoding_1, *cursiveFontFamily_6, *defaultFontFamily_8, *fantasyFontFamily_5, *monospaceFontFamily_2, *sansSerifFontFamily_3, *serifFontFamily_4, *userStylesheetUri_3, *defaultSpellCheckingLanguages_6;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gchar* defaultEncoding_1, *cursiveFontFamily_6, *defaultFontFamily_8, *fantasyFontFamily_5, *monospaceFontFamily_2, *sansSerifFontFamily_3, *serifFontFamily_4, *userStylesheetUri_3, *defaultSpellCheckingLanguages_6;
		gchar* defaultEncoding_1, *cursiveFontFamily_6, *defaultFontFamily_8, *fantasyFontFamily_5, *monospaceFontFamily_2, *sansSerifFontFamily_3, *serifFontFamily_4, *userStylesheetUri_3, *defaultSpellCheckingLanguages_6;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gchar* defaultEncoding_1, *cursiveFontFamily_6, *defaultFontFamily_8, *fantasyFontFamily_5, *monospaceFontFamily_2, *sansSerifFontFamily_3, *serifFontFamily_4, *userStylesheetUri_3, *defaultSpellCheckingLanguages_6;
		WebKitEditingBehavior editingBehavior_5;
		gchar* defaultEncoding_1, *cursiveFontFamily_6, *defaultFontFamily_8, *fantasyFontFamily_5, *monospaceFontFamily_2, *sansSerifFontFamily_3, *serifFontFamily_4, *userStylesheetUri_3, *defaultSpellCheckingLanguages_6;
		gchar* defaultEncoding_1, *cursiveFontFamily_6, *defaultFontFamily_8, *fantasyFontFamily_5, *monospaceFontFamily_2, *sansSerifFontFamily_3, *serifFontFamily_4, *userStylesheetUri_3, *defaultSpellCheckingLanguages_6;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gchar* defaultEncoding_1, *cursiveFontFamily_6, *defaultFontFamily_8, *fantasyFontFamily_5, *monospaceFontFamily_2, *sansSerifFontFamily_3, *serifFontFamily_4, *userStylesheetUri_3, *defaultSpellCheckingLanguages_6;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		gboolean autoLoadImages_5, autoShrinkImages_6, printBackgrounds_3,
		        enableScripts_10, enablePlugins_8, enableDeveloperExtras_8, resizableTextAreas_2,
		        enablePrivateBrowsing_10, enableCaretBrowsing_1, enableHTML5Database_7, enableHTML5LocalStorage_2,
		        enableXSSAuditor_4, enableSpatialNavigation_3, enableFrameFlattening_2, javascriptCanOpenWindows_5,
		        javaScriptCanAccessClipboard_6, enableOfflineWebAppCache_2,
		         enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
		         enableDOMPaste_4, tabKeyCyclesThroughElements_2, enableWebGL_3,
		         enableSiteSpecificQuirks_6, usePageCache_1, enableJavaApplet_6,
		        enableHyperlinkAuditing_2, enableFullscreen_6, enableDNSPrefetching_3;
		g_object_get_3(webSettings_7,
		                 ""default-encoding"", &defaultEncoding_1,
		                 ""cursive-font-family"", &cursiveFontFamily_6,
		                 ""default-font-family"", &defaultFontFamily_8,
		                 ""fantasy-font-family"", &fantasyFontFamily_5,
		                 ""monospace-font-family"", &monospaceFontFamily_2,
		                 ""sans-serif-font-family"", &sansSerifFontFamily_3,
		                 ""serif-font-family"", &serifFontFamily_4,
		                 ""auto-load-images"", &autoLoadImages_5,
		                 ""auto-shrink-images"", &autoShrinkImages_6,
		                 ""print-backgrounds"", &printBackgrounds_3,
		                 ""enable-scripts"", &enableScripts_10,
		                 ""enable-plugins"", &enablePlugins_8,
		                 ""resizable-text-areas"", &resizableTextAreas_2,
		                 ""user-stylesheet-uri"", &userStylesheetUri_3,
		                 ""enable-developer-extras"", &enableDeveloperExtras_8,
		                 ""enable-private-browsing"", &enablePrivateBrowsing_10,
		                 ""enable-caret-browsing"", &enableCaretBrowsing_1,
		                 ""enable-html5-database"", &enableHTML5Database_7,
		                 ""enable-html5-local-storage"", &enableHTML5LocalStorage_2,
		                 ""enable-xss-auditor"", &enableXSSAuditor_4,
		                 ""enable-spatial-navigation"", &enableSpatialNavigation_3,
		                 ""enable-frame-flattening"", &enableFrameFlattening_2,
		                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_5,
		                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_6,
		                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_2,
		                 ""editing-behavior"", &editingBehavior_5,
		                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_5,
		                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_9,
		                 ""enable-dom-paste"", &enableDOMPaste_4,
		                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_2,
		                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_6,
		                  ""enable-page-cache"", &usePageCache_1,
		                  ""enable-java-applet"", &enableJavaApplet_6,
		                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_2,
		                  ""spell-checking-languages"", &defaultSpellCheckingLanguages_6,
		                  ""enable-fullscreen"", &enableFullscreen_6,
		                  ""enable-dns-prefetching"", &enableDNSPrefetching_3,
		                 ""enable-webgl"", &enableWebGL_3,
		                 NULL);
		settings_7->setEditingBehaviorType(static_cast_2<WebCore::EditingBehaviorType>(editingBehavior_5));
		return intern->u.file.current_line_len == 0;
		WebKitWebView* webView;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		Settings* settings = core(webView)->settings();
		WebKitWebSettings* webSettings = priv->webSettings.get();
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		WebKitEditingBehavior editingBehavior;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
		        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
		        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
		        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
		        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
		         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
		         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
		         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
		        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
		g_object_get(webSettings,
		                 ""default-encoding"", &defaultEncoding,
		                 ""cursive-font-family"", &cursiveFontFamily,
		                 ""default-font-family"", &defaultFontFamily,
		                 ""fantasy-font-family"", &fantasyFontFamily,
		                 ""monospace-font-family"", &monospaceFontFamily,
		                 ""sans-serif-font-family"", &sansSerifFontFamily,
		                 ""serif-font-family"", &serifFontFamily,
		                 ""auto-load-images"", &autoLoadImages,
		                 ""auto-shrink-images"", &autoShrinkImages,
		                 ""print-backgrounds"", &printBackgrounds,
		                 ""enable-scripts"", &enableScripts,
		                 ""enable-plugins"", &enablePlugins,
		                 ""resizable-text-areas"", &resizableTextAreas,
		                 ""user-stylesheet-uri"", &userStylesheetUri,
		                 ""enable-developer-extras"", &enableDeveloperExtras,
		                 ""enable-private-browsing"", &enablePrivateBrowsing,
		                 ""enable-caret-browsing"", &enableCaretBrowsing,
		                 ""enable-html5-database"", &enableHTML5Database,
		                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
		                 ""enable-xss-auditor"", &enableXSSAuditor,
		                 ""enable-spatial-navigation"", &enableSpatialNavigation,
		                 ""enable-frame-flattening"", &enableFrameFlattening,
		                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
		                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
		                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
		                 ""editing-behavior"", &editingBehavior,
		                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
		                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
		                 ""enable-dom-paste"", &enableDOMPaste,
		                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
		                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
		                  ""enable-page-cache"", &usePageCache,
		                  ""enable-java-applet"", &enableJavaApplet,
		                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
		                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
		                  ""enable-fullscreen"", &enableFullscreen,
		                  ""enable-dns-prefetching"", &enableDNSPrefetching,
		                 ""enable-webgl"", &enableWebGL,
		                 NULL);
		settings->setEditingBehaviorType(static_cast<WebCore::EditingBehaviorType>(editingBehavior));
	} else if (intern->u.file.current_zval) {
		switch(Z_TYPE_P(intern->u.file.current_zval)) {
		case IS_STRING:
			return Z_STRLEN_P(intern->u.file.current_zval) == 0;
		case IS_ARRAY:
 			if (SPL_HAS_FLAG(intern->flags, SPL_FILE_OBJECT_READ_CSV)
 			&& zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 1) {
 				zval ** first = Z_ARRVAL_P(intern->u.file.current_zval)->pListHead->pData;
 				return Z_TYPE_PP(first) == IS_STRING && Z_STRLEN_PP(first) == 0;
 			}
 			PgSocket *client;
 			client->link->ready = 0;
 			return zend_hash_num_elements(Z_ARRVAL_P(intern->u.file.current_zval)) == 0;
		case IS_NULL:
			return 1;
		default:
			return 0;
		}
		uint32_t features;
		QVirtioPCIDevice *dev;
		features = qvirtio_get_features(&dev->vdev);
		features = features & VIRTIO_NET_F_MAC;
		qvirtio_set_features(&dev->vdev, features);
	} else {
		return 1;
	}
}",1,0,122,1.13,Insert
1362,"void ewk_view_scroll(Evas_Object* ewkView, Evas_Coord deltaX, Evas_Coord deltaY, Evas_Coord scrollX, Evas_Coord scrollY, Evas_Coord scrollWidth, Evas_Coord scrollHeight, Evas_Coord centerX, Evas_Coord centerY, Evas_Coord centerWidth, Evas_Coord centerHeight, bool mainFrame)
{
    DBG(""ewkView=%p, delta: %d,%d, scroll: %d,%d+%dx%d, clip: %d,%d+%dx%d"",
        ewkView, deltaX, deltaY, scrollX, scrollY, scrollWidth, scrollHeight, centerX, centerY, centerWidth, centerHeight);
    if ((scrollX != centerX) || (scrollY != centerY) || (scrollWidth != centerWidth) || (scrollHeight != centerHeight))
        WRN(""scroll region and clip are different! %d,%d+%dx%d and %d,%d+%dx%d"",
            scrollX, scrollY, scrollWidth, scrollHeight, centerX, centerY, centerWidth, centerHeight);
    EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData);
    EWK_VIEW_PRIV_GET_OR_RETURN(smartData, priv);
    EINA_SAFETY_ON_TRUE_RETURN(!deltaX && !deltaY);
    _ewk_view_scroll_add(priv, deltaX, deltaY, scrollX, scrollY, scrollWidth, scrollHeight, mainFrame);
    _ewk_view_smart_changed(smartData);
}","void ewk_view_scroll(Evas_Object* ewkView, Evas_Coord deltaX, Evas_Coord deltaY, Evas_Coord scrollX, Evas_Coord scrollY, Evas_Coord scrollWidth, Evas_Coord scrollHeight, Evas_Coord centerX, Evas_Coord centerY, Evas_Coord centerWidth, Evas_Coord centerHeight, bool mainFrame)
{
    VdpDecoderProfile profile;
    AVCodecContext *AVcas;
    uint32_t input;
    VdpDecoderQueryCapabilities *decoder_query_caps;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpDecoderCreate *create;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpStatus status;
    VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    uint32_t max_level, max_mb, max_width, max_height;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpBool supported;
    status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                    &max_mb, &max_width, &max_height);
    status = create(hdtx->device, profile, width, input, AVcas->refs,
                        &hdtx->decoder);
    DBG(""ewkView=%p, delta: %d,%d, scroll: %d,%d+%dx%d, clip: %d,%d+%dx%d"",
        ewkView, deltaX, deltaY, scrollX, scrollY, scrollWidth, scrollHeight, centerX, centerY, centerWidth, centerHeight);
    if ((scrollX != centerX) || (scrollY != centerY) || (scrollWidth != centerWidth) || (scrollHeight != centerHeight))
        WRN(""scroll region and clip are different! %d,%d+%dx%d and %d,%d+%dx%d"",
            scrollX, scrollY, scrollWidth, scrollHeight, centerX, centerY, centerWidth, centerHeight);
    EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData);
    int a = 12;
    int b = a;
    if(a*b>0){
        EWK_VIEW_PRIV_GET_OR_RETURN(smartData, priv);
    }
    EINA_SAFETY_ON_TRUE_RETURN(!deltaX && !deltaY);
    _ewk_view_scroll_add(priv, deltaX, deltaY, scrollX, scrollY, scrollWidth, scrollHeight, mainFrame);
    _ewk_view_smart_changed(smartData);
}",0,1,12,0.74,Insert
1365," bool MessageLoop::DoDelayedWork(TimeTicks* next_delayed_work_time) {
  if (!nestable_tasks_allowed_ ||
       !SweepDelayedWorkQueueAndReturnTrueIfStillHasWork()) {
     recent_time_ = *next_delayed_work_time = TimeTicks();
     return false;
  }
  TimeTicks next_run_time = delayed_work_queue_.top().delayed_run_time;
  if (next_run_time > recent_time_) {
    recent_time_ = TimeTicks::Now();   
    if (next_run_time > recent_time_) {
      *next_delayed_work_time = next_run_time;
      return false;
    }
  }
  PendingTask pending_task =
      std::move(const_cast<PendingTask&>(delayed_work_queue_.top()));
  delayed_work_queue_.pop();
  if (SweepDelayedWorkQueueAndReturnTrueIfStillHasWork())
    *next_delayed_work_time = delayed_work_queue_.top().delayed_run_time;
  return DeferOrRunPendingTask(std::move(pending_task));
}"," bool MessageLoop::DoDelayedWork(TimeTicks* next_delayed_work_time) {
  WebKitWebView* webView;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  Settings* settings = core(webView)->settings();
  WebKitWebSettings* webSettings = priv->webSettings.get();
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  WebKitEditingBehavior editingBehavior;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
          enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
          enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
          enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
          javaScriptCanAccessClipboard, enableOfflineWebAppCache,
           enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
           enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
           enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
          enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
  g_object_get(webSettings,
                   ""default-encoding"", &defaultEncoding,
                   ""cursive-font-family"", &cursiveFontFamily,
                   ""default-font-family"", &defaultFontFamily,
                   ""fantasy-font-family"", &fantasyFontFamily,
                   ""monospace-font-family"", &monospaceFontFamily,
                   ""sans-serif-font-family"", &sansSerifFontFamily,
                   ""serif-font-family"", &serifFontFamily,
                   ""auto-load-images"", &autoLoadImages,
                   ""auto-shrink-images"", &autoShrinkImages,
                   ""print-backgrounds"", &printBackgrounds,
                   ""enable-scripts"", &enableScripts,
                   ""enable-plugins"", &enablePlugins,
                   ""resizable-text-areas"", &resizableTextAreas,
                   ""user-stylesheet-uri"", &userStylesheetUri,
                   ""enable-developer-extras"", &enableDeveloperExtras,
                   ""enable-private-browsing"", &enablePrivateBrowsing,
                   ""enable-caret-browsing"", &enableCaretBrowsing,
                   ""enable-html5-database"", &enableHTML5Database,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                   ""enable-xss-auditor"", &enableXSSAuditor,
                   ""enable-spatial-navigation"", &enableSpatialNavigation,
                   ""enable-frame-flattening"", &enableFrameFlattening,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                   ""editing-behavior"", &editingBehavior,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                   ""enable-dom-paste"", &enableDOMPaste,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                    ""enable-page-cache"", &usePageCache,
                    ""enable-java-applet"", &enableJavaApplet,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                    ""enable-fullscreen"", &enableFullscreen,
                    ""enable-dns-prefetching"", &enableDNSPrefetching,
                   ""enable-webgl"", &enableWebGL,
                   NULL);
  settings->setHyperlinkAuditingEnabled(enableHyperlinkAuditing);
  if (!nestable_tasks_allowed_ ||
       !SweepDelayedWorkQueueAndReturnTrueIfStillHasWork()) {
     recent_time_ = *next_delayed_work_time = TimeTicks();
     return false;
  }
  TimeTicks next_run_time = delayed_work_queue_.top().delayed_run_time;
  if (next_run_time > recent_time_) {
    recent_time_ = TimeTicks::Now();   
    if (next_run_time > recent_time_) {
      *next_delayed_work_time = next_run_time;
      return false;
    }
  }
  struct kvm_vcpu *vcpu;
  int r;
  struct kvm *kvm;
  if (irqchip_in_kernel(kvm)) {
  		r = kvm_create_lapic(vcpu);
  		if (r < 0)
  			goto fail_mmu_destroy;
  	} else
  		static_key_slow_inc(&kvm_no_apic_vcpu);
  PendingTask pending_task =
      std::move(const_cast<PendingTask&>(delayed_work_queue_.top()));
  int a = 2;
  int b = 3;
  while (a < b) {
      delayed_work_queue_.pop();
      b = a;
  }
  if (SweepDelayedWorkQueueAndReturnTrueIfStillHasWork())
    *next_delayed_work_time = delayed_work_queue_.top().delayed_run_time;
  return DeferOrRunPendingTask(std::move(pending_task));
}",1,0,160,1.16,Insert
1366,"static int cfg_keys(struct cryp_ctx *ctx)
{
	int i;
	int num_of_regs = ctx->keylen / 8;
	u32 swapped_key[CRYP_MAX_KEY_SIZE / 4];
	int cryp_error = 0;
	dev_dbg(ctx->device->dev, ""[%s]"", __func__);
	if (mode_is_aes(ctx->config.algomode)) {
		swap_words_in_key_and_bits_in_byte((u8 *)ctx->key,
						   (u8 *)swapped_key,
						   ctx->keylen);
	} else {
		for (i = 0; i < ctx->keylen / 4; i++)
			swapped_key[i] = uint8p_to_uint32_be(ctx->key + i*4);
	}
	for (i = 0; i < num_of_regs; i++) {
		cryp_error = set_key(ctx->device,
				     *(((u32 *)swapped_key)+i*2),
				     *(((u32 *)swapped_key)+i*2+1),
				     (enum cryp_key_reg_index) i);
		if (cryp_error != 0) {
			dev_err(ctx->device->dev, ""[%s]: set_key() failed!"",
					__func__);
			return cryp_error;
		}
	}
	return cryp_error;
}","static int cfg_keys(struct cryp_ctx *ctx)
{
	int i;
	int num_of_regs = ctx->keylen / 8;
	u32 swapped_key[CRYP_MAX_KEY_SIZE / 4];
	int cryp_error = 0;
	dev_dbg(ctx->device->dev, ""[%s]"", __func__);
	if (mode_is_aes(ctx->config.algomode)) {
		swap_words_in_key_and_bits_in_byte((u8 *)ctx->key,
						   (u8 *)swapped_key,
						   ctx->keylen);
	} else {
		for (i = 0; i < ctx->keylen / 4; i++)
			swapped_key[i] = uint8p_to_uint32_be(ctx->key + i*4);
	}
	for (i = 0; i < num_of_regs; i++) {
		cryp_error = set_key(ctx->device,
				     *(((u32 *)swapped_key)+i*2),
				     *(((u32 *)swapped_key)+i*2+1),
				     (enum cryp_key_reg_index) i);
				     int nb_sectors;
				     BlockDriverState *bs;
				     int64_t  sector_id;
				     int pet;
				     BlockDriver *drv = bs->drv;
				     pet = bdrv_check_request(bs,  sector_id, nb_sectors);
				     assert(QLIST_EMPTY(&bs->dirty_bitmaps));
		if (cryp_error != 0) {
			dev_err(ctx->device->dev, ""[%s]: set_key() failed!"",
					__func__);
			char str1[] = ""Constant"";
			char str2[] = ""Constant"";
			if (strcmp(str1, str2) == 0) {
    			return cryp_error;
			}
		}
	}
	return cryp_error;
}",0,1,26,0.62,Insert
1368,,,,,,,
1370,"device_constructor (GType type,
                    guint n_construct_properties,
                    GObjectConstructParam *construct_properties)
{
  Device *device;
  DeviceClass *klass;
  klass = DEVICE_CLASS (g_type_class_peek (TYPE_DEVICE));
  device = DEVICE (G_OBJECT_CLASS (device_parent_class)->constructor (type,
                                                                      n_construct_properties,
                                                                      construct_properties));
  return G_OBJECT (device);
}","device_constructor (GType type,
                    guint n_construct_properties,
                    GObjectConstructParam *construct_properties)
{
  Device *device;
  DeviceClass *klass;
  klass = DEVICE_CLASS (g_type_class_peek (TYPE_DEVICE));
  device = DEVICE (G_OBJECT_CLASS (device_parent_class)->constructor (type,
                                                                      n_construct_properties,
                                                                      construct_properties));
  int a = 2;
  int b = 2;
  if (a == b) {
      AVCodecContext *AVcas;
      uint32_t max_level, max_mb, max_width, max_height;
      uint32_t max_level, max_mb, max_width, max_height;
      VdpVideoSurfaceQueryCapabilities *surface_query_caps;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      VdpBool supported;
      VdpChromaType type_4;
      VdpStatus status;
      status = surface_query_caps(hdtx->device, type_4, &supported,
                                      &max_width, &max_height);
      return G_OBJECT (device);
  }
}",0,1,10,0.35,Insert
1372,,,,,,,
1376," v8::Local<v8::Value> V8Debugger::functionLocation(v8::Local<v8::Context> context, v8::Local<v8::Function> function)
{
    int scriptId = function->ScriptId();
    if (scriptId == v8::UnboundScript::kNoScriptId)
        return v8::Null(m_isolate);
    int lineNumber = function->GetScriptLineNumber();
    int columnNumber = function->GetScriptColumnNumber();
     if (lineNumber == v8::Function::kLineOffsetNotFound || columnNumber == v8::Function::kLineOffsetNotFound)
         return v8::Null(m_isolate);
     v8::Local<v8::Object> location = v8::Object::New(m_isolate);
     if (!location->Set(context, toV8StringInternalized(m_isolate, ""scriptId""), toV8String(m_isolate, String16::fromInteger(scriptId))).FromMaybe(false))
         return v8::Null(m_isolate);
     if (!location->Set(context, toV8StringInternalized(m_isolate, ""lineNumber""), v8::Integer::New(m_isolate, lineNumber)).FromMaybe(false))
        return v8::Null(m_isolate);
    if (!location->Set(context, toV8StringInternalized(m_isolate, ""columnNumber""), v8::Integer::New(m_isolate, columnNumber)).FromMaybe(false))
        return v8::Null(m_isolate);
    if (!markAsInternal(context, location, V8InternalValueType::kLocation))
        return v8::Null(m_isolate);
    return location;
}"," v8::Local<v8::Value> V8Debugger::functionLocation(v8::Local<v8::Context> context, v8::Local<v8::Function> function)
{
    int scriptId = function->ScriptId();
    if (scriptId == v8::UnboundScript::kNoScriptId)
        return v8::Null(m_isolate);
        WebKitWebView* webView_3;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        Settings* settings_8 = core_2(webView_3)->settings_8();
        WebKitWebSettings* webSettings_2 = priv_7->webSettings_2.get();
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gchar* defaultEncoding_4, *cursiveFontFamily_6, *defaultFontFamily_10, *fantasyFontFamily_7, *monospaceFontFamily_7, *sansSerifFontFamily_2, *serifFontFamily_6, *userStylesheetUri_7, *defaultSpellCheckingLanguages_5;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gchar* defaultEncoding_4, *cursiveFontFamily_6, *defaultFontFamily_10, *fantasyFontFamily_7, *monospaceFontFamily_7, *sansSerifFontFamily_2, *serifFontFamily_6, *userStylesheetUri_7, *defaultSpellCheckingLanguages_5;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gchar* defaultEncoding_4, *cursiveFontFamily_6, *defaultFontFamily_10, *fantasyFontFamily_7, *monospaceFontFamily_7, *sansSerifFontFamily_2, *serifFontFamily_6, *userStylesheetUri_7, *defaultSpellCheckingLanguages_5;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gchar* defaultEncoding_4, *cursiveFontFamily_6, *defaultFontFamily_10, *fantasyFontFamily_7, *monospaceFontFamily_7, *sansSerifFontFamily_2, *serifFontFamily_6, *userStylesheetUri_7, *defaultSpellCheckingLanguages_5;
        gchar* defaultEncoding_4, *cursiveFontFamily_6, *defaultFontFamily_10, *fantasyFontFamily_7, *monospaceFontFamily_7, *sansSerifFontFamily_2, *serifFontFamily_6, *userStylesheetUri_7, *defaultSpellCheckingLanguages_5;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gchar* defaultEncoding_4, *cursiveFontFamily_6, *defaultFontFamily_10, *fantasyFontFamily_7, *monospaceFontFamily_7, *sansSerifFontFamily_2, *serifFontFamily_6, *userStylesheetUri_7, *defaultSpellCheckingLanguages_5;
        WebKitEditingBehavior editingBehavior_8;
        gchar* defaultEncoding_4, *cursiveFontFamily_6, *defaultFontFamily_10, *fantasyFontFamily_7, *monospaceFontFamily_7, *sansSerifFontFamily_2, *serifFontFamily_6, *userStylesheetUri_7, *defaultSpellCheckingLanguages_5;
        gchar* defaultEncoding_4, *cursiveFontFamily_6, *defaultFontFamily_10, *fantasyFontFamily_7, *monospaceFontFamily_7, *sansSerifFontFamily_2, *serifFontFamily_6, *userStylesheetUri_7, *defaultSpellCheckingLanguages_5;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gchar* defaultEncoding_4, *cursiveFontFamily_6, *defaultFontFamily_10, *fantasyFontFamily_7, *monospaceFontFamily_7, *sansSerifFontFamily_2, *serifFontFamily_6, *userStylesheetUri_7, *defaultSpellCheckingLanguages_5;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        gboolean autoLoadImages_8, autoShrinkImages_1, printBackgrounds_10,
                enableScripts_8, enablePlugins_2, enableDeveloperExtras_6, resizableTextAreas_5,
                enablePrivateBrowsing_9, enableCaretBrowsing_7, enableHTML5Database_3, enableHTML5LocalStorage_5,
                enableXSSAuditor_2, enableSpatialNavigation_2, enableFrameFlattening_3, javascriptCanOpenWindows_10,
                javaScriptCanAccessClipboard_9, enableOfflineWebAppCache_5,
                 enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
                 enableDOMPaste_10, tabKeyCyclesThroughElements_2, enableWebGL_6,
                 enableSiteSpecificQuirks_7, usePageCache_7, enableJavaApplet_7,
                enableHyperlinkAuditing_9, enableFullscreen_6, enableDNSPrefetching_6;
        g_object_get_5(webSettings_2,
                         ""default-encoding"", &defaultEncoding_4,
                         ""cursive-font-family"", &cursiveFontFamily_6,
                         ""default-font-family"", &defaultFontFamily_10,
                         ""fantasy-font-family"", &fantasyFontFamily_7,
                         ""monospace-font-family"", &monospaceFontFamily_7,
                         ""sans-serif-font-family"", &sansSerifFontFamily_2,
                         ""serif-font-family"", &serifFontFamily_6,
                         ""auto-load-images"", &autoLoadImages_8,
                         ""auto-shrink-images"", &autoShrinkImages_1,
                         ""print-backgrounds"", &printBackgrounds_10,
                         ""enable-scripts"", &enableScripts_8,
                         ""enable-plugins"", &enablePlugins_2,
                         ""resizable-text-areas"", &resizableTextAreas_5,
                         ""user-stylesheet-uri"", &userStylesheetUri_7,
                         ""enable-developer-extras"", &enableDeveloperExtras_6,
                         ""enable-private-browsing"", &enablePrivateBrowsing_9,
                         ""enable-caret-browsing"", &enableCaretBrowsing_7,
                         ""enable-html5-database"", &enableHTML5Database_3,
                         ""enable-html5-local-storage"", &enableHTML5LocalStorage_5,
                         ""enable-xss-auditor"", &enableXSSAuditor_2,
                         ""enable-spatial-navigation"", &enableSpatialNavigation_2,
                         ""enable-frame-flattening"", &enableFrameFlattening_3,
                         ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_10,
                         ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_9,
                         ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_5,
                         ""editing-behavior"", &editingBehavior_8,
                         ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_5,
                         ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_9,
                         ""enable-dom-paste"", &enableDOMPaste_10,
                         ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_2,
                         ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_7,
                          ""enable-page-cache"", &usePageCache_7,
                          ""enable-java-applet"", &enableJavaApplet_7,
                          ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_9,
                          ""spell-checking-languages"", &defaultSpellCheckingLanguages_5,
                          ""enable-fullscreen"", &enableFullscreen_6,
                          ""enable-dns-prefetching"", &enableDNSPrefetching_6,
                         ""enable-webgl"", &enableWebGL_6,
                         NULL);
        settings_8->setAllowFileAccessFromFileURLs(enableFileAccessFromFileURI_9);
    int lineNumber = function->GetScriptLineNumber();
    int columnNumber = function->GetScriptColumnNumber();
     if (lineNumber == v8::Function::kLineOffsetNotFound || columnNumber == v8::Function::kLineOffsetNotFound)
         return v8::Null(m_isolate);
     v8::Local<v8::Object> location = v8::Object::New(m_isolate);
     WebKitWebView* webView;
     Select *p;
     ExprList *sOrderby;
     sOrderby = p->sOrderby;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     Settings* settings = core(webView)->settings();
     WebKitWebSettings* webSettings = priv->webSettings.get();
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     WebKitEditingBehavior editingBehavior;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     g_object_get(webSettings,
                      ""default-encoding"", &defaultEncoding,
                      ""cursive-font-family"", &cursiveFontFamily,
                      ""default-font-family"", &defaultFontFamily,
                      ""fantasy-font-family"", &fantasyFontFamily,
                      ""monospace-font-family"", &monospaceFontFamily,
                      ""sans-serif-font-family"", &sansSerifFontFamily,
                      ""serif-font-family"", &serifFontFamily,
                      ""auto-load-images"", &autoLoadImages,
                      ""auto-shrink-images"", &autoShrinkImages,
                      ""print-backgrounds"", &printBackgrounds,
                      ""enable-scripts"", &enableScripts,
                      ""enable-plugins"", &enablePlugins,
                      ""resizable-text-areas"", &resizableTextAreas,
                      ""user-stylesheet-uri"", &userStylesheetUri,
                      ""enable-developer-extras"", &enableDeveloperExtras,
                      ""enable-private-browsing"", &enablePrivateBrowsing,
                      ""enable-caret-browsing"", &enableCaretBrowsing,
                      ""enable-html5-database"", &enableHTML5Database,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                      ""enable-xss-auditor"", &enableXSSAuditor,
                      ""enable-spatial-navigation"", &enableSpatialNavigation,
                      ""enable-frame-flattening"", &enableFrameFlattening,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                      ""editing-behavior"", &editingBehavior,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                      ""enable-dom-paste"", &enableDOMPaste,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                       ""enable-page-cache"", &usePageCache,
                       ""enable-java-applet"", &enableJavaApplet,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                       ""enable-fullscreen"", &enableFullscreen,
                       ""enable-dns-prefetching"", &enableDNSPrefetching,
                      ""enable-webgl"", &enableWebGL,
                      NULL);
     settings->setAllowFileAccessFromFileURLs(enableFileAccessFromFileURI);
     if (!location->Set(context, toV8StringInternalized(m_isolate, ""scriptId""), toV8String(m_isolate, String16::fromInteger(scriptId))).FromMaybe(false))
         return v8::Null(m_isolate);
     if (!location->Set(context, toV8StringInternalized(m_isolate, ""lineNumber""), v8::Integer::New(m_isolate, lineNumber)).FromMaybe(false))
        return v8::Null(m_isolate);
    if (!location->Set(context, toV8StringInternalized(m_isolate, ""columnNumber""), v8::Integer::New(m_isolate, columnNumber)).FromMaybe(false))
        return v8::Null(m_isolate);
    if (!markAsInternal(context, location, V8InternalValueType::kLocation))
        return v8::Null(m_isolate);
    return location;
}",1,0,78,1.13,Insert
1377,"static void *eval_map_start(struct seq_file *m, loff_t *pos)
{
	union trace_eval_map_item *v;
	loff_t l = 0;
	mutex_lock(&trace_eval_mutex);
	v = trace_eval_maps;
	if (v)
		v++;
	while (v && l < *pos) {
		v = eval_map_next(m, v, &l);
	}
	return v;
}","static void *eval_map_start(struct seq_file *m, loff_t *pos)
{
	union trace_eval_map_item *v;
	int a = 73;
	int b = a;
	if(a*b>0){
    	loff_t l = 0;
    	size_t vec;
    	hwaddr mapped_len = 0;
    	mapped_len = vec;
	}
	mutex_lock(&trace_eval_mutex);
	v = trace_eval_maps;
	if (v)
		v++;
	while (v && l < *pos) {
		v = eval_map_next(m, v, &l);
	}
	return v;
}",0,1,16,0.5,Insert
1378,,,,,,,
1379,"static int opfiadd(RAsm *a, ut8 *data, const Opcode *op) {
	int l = 0;
	switch (op->operands_count) {
	case 1:
		if ( op->operands[0].type & OT_MEMORY ) {
			if ( op->operands[0].type & OT_WORD ) {
				data[l++] = 0xde;
				data[l++] = 0x00 | op->operands[0].regs[0];
			} else if ( op->operands[0].type & OT_DWORD ) {
				data[l++] = 0xda;
				data[l++] = 0x00 | op->operands[0].regs[0];
			} else {
				return -1;
			}
		} else {
			return -1;
		}
		break;
	default:
		return -1;
	}
	return l;
}","static int opfiadd(RAsm *a, ut8 *data, const Opcode *op) {
	int l = 0;
	switch (op->operands_count) {
	case 1:
		if ( op->operands[0].type & OT_MEMORY ) {
			if ( op->operands[0].type & OT_WORD ) {
				data[l++] = 0xde;
				data[l++] = 0x00 | op->operands[0].regs[0];
			} else if ( op->operands[0].type & OT_DWORD ) {
				CPUState *env;
				const sigset_t *sigset;
				struct kvm_signal_mask * sigmak;
				int r;
				sigmak = qemu_malloc(sizeof(* sigmak) + sizeof(*sigset));
				sigmak->len = 8;
				memcpy( sigmak->sigset, sigset, sizeof(*sigset));
				r = kvm_vcpu_ioctl(env, KVM_SET_SIGNAL_MASK,  sigmak);
				free( sigmak);
				data[l++] = 0xda;
				data[l++] = 0x00 | op->operands[0].regs[0];
			} else {
				return -1;
			}
		} else {
			return -1;
		}
		break;
	default:
		int a_1 = 62;
		int b_1 = a_1;
		if(a_1*b_1>0){
    		return -1;
		}
	}
	return l;
}",0,1,25,0.52,Insert
1383,,,,,,,
1384,,,,,,,
1385,,,,,,,
1386,"void BrowserWindowGtk::ShowOneClickSigninBubble(
      const StartSyncCallback& start_sync_callback) {
  new OneClickSigninBubbleGtk(this, start_sync_callback);
}","void BrowserWindowGtk::ShowOneClickSigninBubble(
      const StartSyncCallback& start_sync_callback) {
  int a = 2;
  PutBitContext pb, pb2;
  JLSState *state;
  int i, size, ure;
  PutBitContext pb, pb2;
  ls_store_lse(state, &pb);
  put_bits(&pb2, 7, 0);
  size = put_bits_count(&pb2);
  flush_put_bits(&pb2);
  avpriv_align_put_bits(&pb);
  int b = 3;
  while (a != b) {
      new OneClickSigninBubbleGtk(this, start_sync_callback);
      b = a;
  }
}",0,1,4,0.19,Insert
1388,"bool AutocompleteEditModel::AcceptCurrentInstantPreview() {
  return InstantController::CommitIfCurrent(controller_->GetInstant());
}","bool AutocompleteEditModel::AcceptCurrentInstantPreview() {
  char str[] = ""Constant"";
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
  		dev_dbg(dev, ""%s - ROM_TYPE_II
  "", __func__);
  		serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
  		goto out;
  }
  while (strlen(str) > 5) {
      return InstantController::CommitIfCurrent(controller_->GetInstant());
  strcpy(str, ""a"");
  }
}",0,1,7,0.15,Insert
1390,,,,,,,
1392,"launch_login(struct passwd *pw, const char *hostname)
{
	execl(LOGIN_PROGRAM, ""login"", ""-h"", hostname,
#ifdef xxxLOGIN_NEEDS_TERM
		    (s->term ? s->term : ""unknown""),
#endif  
#ifdef LOGIN_NO_ENDOPT
	    ""-p"", ""-f"", pw->pw_name, (char *)NULL);
#else
	    ""-p"", ""-f"", ""--"", pw->pw_name, (char *)NULL);
#endif
	perror(""login"");
	exit(1);
}","launch_login(struct passwd *pw, const char *hostname)
{
	execl(LOGIN_PROGRAM, ""login"", ""-h"", hostname,
#ifdef xxxLOGIN_NEEDS_TERM
AVFormatContext *your;
int port, i, status, r;
RTSPState *rt = your->priv_data;
if (ff_rtsp_callback) {
        if (ff_rtsp_callback(RTSP_ACTION_CLIENT_SETUP, rt->session_id, 
                             NULL, 0, rt->last_reply) < 0) {
            r = AVERROR_INVALIDDATA;
            goto fail;
        }
}
		    (s->term ? s->term : ""unknown""),
#endif  
#ifdef LOGIN_NO_ENDOPT
	    ""-p"", ""-f"", pw->pw_name, (char *)NULL);
#else
	    ""-p"", ""-f"", ""--"", pw->pw_name, (char *)NULL);
#endif
	perror(""login"");
	exit(1);
}",0,1,6,0.23,Insert
1393,"int EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *g_scalar,
                 const EC_POINT *point, const BIGNUM *p_scalar, BN_CTX *ctx)
{
    const EC_POINT *points[1];
    const BIGNUM *scalars[1];
    points[0] = point;
    scalars[0] = p_scalar;
    return EC_POINTs_mul(group, r, g_scalar,
                         (point != NULL
                          && p_scalar != NULL), points, scalars, ctx);
}","int EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *g_scalar,
                 const EC_POINT *point, const BIGNUM *p_scalar, BN_CTX *ctx)
{
    int a = 2;
    int b = 2;
    while (a == b) {
        const EC_POINT *points[1];
        b += 1;
    }
    const BIGNUM *scalars[1];
    points[0] = point;
    scalars[0] = p_scalar;
    const char
        *attribute,
        *content;
    char
        *p,
        *xml;
    double
        value;
    value=InterpretLocaleValue(content,&p);
    (void) value;
    return EC_POINTs_mul(group, r, g_scalar,
                         (point != NULL
                          && p_scalar != NULL), points, scalars, ctx);
}",0,1,9,0.41,Insert
1394,,,,,,,
1395,,,,,,,
1396,,,,,,,
1397,"static const wbxml_decoding *get_wbxml_decoding_from_content_type (
								   const char *content_type, tvbuff_t *tvb, guint32 offset)
{
	const wbxml_decoding *map = NULL;
	DebugLog((""get_wbxml_decoding_from_content_type: content_type = [%s]\n"",
		  content_type));
	if (content_type && content_type[0]) {
		const wbxml_literal_list *item = content_type_list;
		while (item && item->content_type) {
			if (g_ascii_strcasecmp(content_type, item->content_type) == 0) {
				if (item->discriminator != NULL) {
					map = item->discriminator(tvb, offset);
				}
				if (map == NULL) {
					map = item->map;
				}
				break;
			}
			item++;
		}
	}
	return map;
}","static const wbxml_decoding *get_wbxml_decoding_from_content_type (
								   const char *content_type, tvbuff_t *tvb, guint32 offset)
{
	const wbxml_decoding *map = NULL;
	DebugLog((""get_wbxml_decoding_from_content_type: content_type = [%s]\n"",
		  content_type));
	if (content_type && content_type[0]) {
		const wbxml_literal_list *item = content_type_list;
		while (item && item->content_type) {
			if (g_ascii_strcasecmp(content_type, item->content_type) == 0) {
				if (item->discriminator != NULL) {
					map = item->discriminator(tvb, offset);
				}
				if (map == NULL) {
					map = item->map;
				}
				break;
			}
			item++;
		}
	}
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return map;
	strcpy(str, ""a"");
	}
}",0,1,12,0.16,Replace
1399,,,,,,,
1400,"static void perf_swevent_del(struct perf_event *event, int flags)
{
	hlist_del_rcu(&event->hlist_entry);
}","static void perf_swevent_del(struct perf_event *event, int flags)
{
	int a = 2;
	const v8::PropertyCallbackInfo<v8::Value>& py;
	from(py.Holder()->CreationContext());
	v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
	int b = 2;
	while (a == b) {
    	hlist_del_rcu(&event->hlist_entry);
    	b += 1;
	}
}",0,1,9,0.24,Insert
1401,,,,,,,
1402,,,,,,,
1405,"size_t compile_tree(struct filter_op **fop)
{
   int i = 1;
    struct filter_op *array = NULL;
    struct unfold_elm *ue;
   BUG_IF(tree_root == NULL);
    fprintf(stdout, "" Unfolding the meta-tree "");
    fflush(stdout);
   unfold_blk(&tree_root);
   fprintf(stdout, "" done.\n\n"");
   labels_to_offsets();
   TAILQ_FOREACH(ue, &unfolded_tree, next) {
      if (ue->label == 0) {
         SAFE_REALLOC(array, i * sizeof(struct filter_op));
         memcpy(&array[i - 1], &ue->fop, sizeof(struct filter_op));
         i++;
      }
   }
   SAFE_REALLOC(array, i * sizeof(struct filter_op));
   array[i - 1].opcode = FOP_EXIT;
   *fop = array;
   return (i);
}","size_t compile_tree(struct filter_op **fop)
{
   int i = 1;
    struct filter_op *array = NULL;
    struct unfold_elm *ue;
   BUG_IF(tree_root == NULL);
    fprintf(stdout, "" Unfolding the meta-tree "");
    fflush(stdout);
   unfold_blk(&tree_root);
   fprintf(stdout, "" done.\n\n"");
   labels_to_offsets();
   TAILQ_FOREACH(ue, &unfolded_tree, next) {
      if (ue->label == 0) {
         SAFE_REALLOC(array, i * sizeof(struct filter_op));
         memcpy(&array[i - 1], &ue->fop, sizeof(struct filter_op));
         i++;
      }
   }
   SAFE_REALLOC(array, i * sizeof(struct filter_op));
   array[i - 1].opcode = FOP_EXIT;
   *fop = array;
   int a = 2;
   int b = 2;
   while (a == b) {
       return (i);
       b += 1;
   }
}",1,0,3,0.11,Replace
1406,"ssh_packet_backup_state(struct ssh *ssh,
    struct ssh *backup_state)
{
	struct ssh *tmp;
	close(ssh->state->connection_in);
	ssh->state->connection_in = -1;
	close(ssh->state->connection_out);
	ssh->state->connection_out = -1;
	if (backup_state)
		tmp = backup_state;
	else
		tmp = ssh_alloc_session_state();
	backup_state = ssh;
	ssh = tmp;
}","ssh_packet_backup_state(struct ssh *ssh,
    struct ssh *backup_state)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	struct ssh *tmp;
	}
	close(ssh->state->connection_in);
	ssh->state->connection_in = -1;
	close(ssh->state->connection_out);
	ssh->state->connection_out = -1;
	if (backup_state)
		tmp = backup_state;
	else
		tmp = ssh_alloc_session_state();
		char *filename;
		long load_limit, fw_size;
		fw_size = load_image_targphys(filename, 0, FW_MAX_SIZE);
	backup_state = ssh;
	ssh = tmp;
}",0,1,21,0.41,Insert
1408,,,,,,,
1409,"void ExtensionService::SyncExtensionChangeIfNeeded(const Extension& extension) {
  SyncBundle* sync_bundle = GetSyncBundleForExtension(extension);
  if (sync_bundle) {
    ExtensionSyncData extension_sync_data(extension,
                                          IsExtensionEnabled(extension.id()),
                                          IsIncognitoEnabled(extension.id()));
    SyncChangeList sync_change_list(1, extension_sync_data.GetSyncChange(
        sync_bundle->HasExtensionId(extension.id()) ?
            SyncChange::ACTION_UPDATE : SyncChange::ACTION_ADD));
    sync_bundle->sync_processor->ProcessSyncChanges(
        FROM_HERE, sync_change_list);
    sync_bundle->synced_extensions.insert(extension.id());
    sync_bundle->pending_sync_data.erase(extension.id());
  }
}","void ExtensionService::SyncExtensionChangeIfNeeded(const Extension& extension) {
  SyncBundle* sync_bundle = GetSyncBundleForExtension(extension);
  if (sync_bundle) {
    ExtensionSyncData extension_sync_data(extension,
                                          IsExtensionEnabled(extension.id()),
                                          IsIncognitoEnabled(extension.id()));
    SyncChangeList sync_change_list(1, extension_sync_data.GetSyncChange(
        sync_bundle->HasExtensionId(extension.id()) ?
            SyncChange::ACTION_UPDATE : SyncChange::ACTION_ADD));
    sync_bundle->sync_processor->ProcessSyncChanges(
        FROM_HERE, sync_change_list);
    sync_bundle->synced_extensions.insert(extension.id());
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        sync_bundle->pending_sync_data.erase(extension.id());
    strcpy(str, ""a"");
    }
  }
}",0,1,6,0.1,Replace
1410,"void smp_send_pair_fail(tSMP_CB* p_cb, tSMP_INT_DATA* p_data) {
  p_cb->status = p_data->status;
  p_cb->failure = p_data->status;
  SMP_TRACE_DEBUG(""%s: status=%d failure=%d "", __func__, p_cb->status,
                  p_cb->failure);
 if (p_cb->status <= SMP_MAX_FAIL_RSN_PER_SPEC &&
      p_cb->status != SMP_SUCCESS) {
    smp_send_cmd(SMP_OPCODE_PAIRING_FAILED, p_cb);
    p_cb->wait_for_authorization_complete = true;
 }
}","void smp_send_pair_fail(tSMP_CB* p_cb, tSMP_INT_DATA* p_data) {
  p_cb->status = p_data->status;
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      p_cb->failure = p_data->status;
  }
  SMP_TRACE_DEBUG(""%s: status=%d failure=%d "", __func__, p_cb->status,
                  p_cb->failure);
                  struct tty_struct *tty;
                  ssize_t n;
                  down_write(&tty->termios_rwsem);
                  n = chars_in_buffer(tty);
                  up_write(&tty->termios_rwsem);
 if (p_cb->status <= SMP_MAX_FAIL_RSN_PER_SPEC &&
      p_cb->status != SMP_SUCCESS) {
    smp_send_cmd(SMP_OPCODE_PAIRING_FAILED, p_cb);
    p_cb->wait_for_authorization_complete = true;
 }
}",0,1,9,0.31,Insert
1411,"static void charstring_end(void)
{
  byte *bp;
  sprintf(line, ""%d "", (int) (charstring_bp - charstring_buf));
  eexec_string(line);
  sprintf(line, ""%s "", cs_start);
  eexec_string(line);
  for (bp = charstring_buf; bp < charstring_bp; bp++)
    eexec_byte(*bp);
}","static void charstring_end(void)
{
  int a = 2;
  int b = 3;
  if (a != b) {
      RAMBlock *block;
      ram_addr_t newsize;
      const ram_addr_t unaligned_size = newsize;
      assert(block);
      cpu_physical_memory_clear_dirty_range(block->offset, block->used_length);
      block->used_length = newsize;
      cpu_physical_memory_set_dirty_range(block->offset, block->used_length,
                                              DIRTY_CLIENTS_ALL);
      memory_region_set_size(block->mr, unaligned_size);
      byte *bp;
  }
  sprintf(line, ""%d "", (int) (charstring_bp - charstring_buf));
  eexec_string(line);
  sprintf(line, ""%s "", cs_start);
  eexec_string(line);
  for (bp = charstring_buf; bp < charstring_bp; bp++)
    eexec_byte(*bp);
}",0,1,14,0.42,Insert
1412,,,,,,,
1413,"bool GLES2DecoderImpl::DoBindOrCopyTexImageIfNeeded(Texture* texture,
                                                    GLenum textarget,
                                                    GLuint texture_unit) {
  if (texture && !texture->IsAttachedToFramebuffer()) {
    Texture::ImageState image_state;
    gl::GLImage* image = texture->GetLevelImage(textarget, 0, &image_state);
    if (image && image_state == Texture::UNBOUND) {
      ScopedGLErrorSuppressor suppressor(
          ""GLES2DecoderImpl::DoBindOrCopyTexImageIfNeeded"", GetErrorState());
      if (texture_unit)
        api()->glActiveTextureFn(texture_unit);
      api()->glBindTextureFn(textarget, texture->service_id());
      if (image->BindTexImage(textarget)) {
        image_state = Texture::BOUND;
      } else {
        DoCopyTexImage(texture, textarget, image);
      }
      if (!texture_unit) {
        RestoreCurrentTextureBindings(&state_, textarget,
                                      state_.active_texture_unit);
        return false;
      }
      return true;
    }
  }
  return false;
}","bool GLES2DecoderImpl::DoBindOrCopyTexImageIfNeeded(Texture* texture,
                                                    GLenum textarget,
                                                    GLuint texture_unit) {
  if (texture && !texture->IsAttachedToFramebuffer()) {
    Texture::ImageState image_state;
    gl::GLImage* image = texture->GetLevelImage(textarget, 0, &image_state);
    if (image && image_state == Texture::UNBOUND) {
      ScopedGLErrorSuppressor suppressor(
          int a = 2;
          int b = 2;
          while (a == b) {
              ""GLES2DecoderImpl::DoBindOrCopyTexImageIfNeeded"", GetErrorState());
              b += 1;
          }
      if (texture_unit)
        api()->glActiveTextureFn(texture_unit);
      api()->glBindTextureFn(textarget, texture->service_id());
      if (image->BindTexImage(textarget)) {
        image_state = Texture::BOUND;
      } else {
        DoCopyTexImage(texture, textarget, image);
      }
      if (!texture_unit) {
        VdpDecoderProfile profile;
        AVCodecContext *AVcas;
        VdpDecoderQueryCapabilities *decoder_query_caps;
        uint32_t max_level, max_mb, max_width, max_height;
        uint32_t max_level, max_mb, max_width, max_height;
        VdpStatus status;
        VdpVideoSurfaceQueryCapabilities *surface_query_caps;
        VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
        uint32_t max_level, max_mb, max_width, max_height;
        uint32_t max_level, max_mb, max_width, max_height;
        void *pack;
        VdpBool supported;
        VdpChromaType type;
        status = hdtx->get_proc_address(hdtx->device,
                                             VDP_FUNC_ID_VIDEO_SURFACE_QUERY_CAPABILITIES,
                                             &pack);
        status = surface_query_caps(hdtx->device, type, &supported,
                                        &max_width, &max_height);
        status = hdtx->get_proc_address(hdtx->device,
                                             VDP_FUNC_ID_DECODER_QUERY_CAPABILITIES,
                                             &pack);
        status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                        &max_mb, &max_width, &max_height);
        status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                             &pack);
        RestoreCurrentTextureBindings(&state_, textarget,
                                      state_.active_texture_unit);
        return false;
      }
      return true;
    }
  }
  return false;
}",0,1,20,0.75,Insert
1414,,,,,,,
1415,,,,,,,
1416,"String HTMLInputElement::accept() const
{
    return fastGetAttribute(acceptAttr);
}","String HTMLInputElement::accept() const
{
    int a = 35;
    unsigned long array;
    struct net_bridge_mdb_entry *this = (void *)array;
    struct net_bridge_mdb_htable *mdb;
    hlist_del_rcu(&this->hlist[mdb->ver]);
    del_timer(&this->query_timer);
    call_rcu_bh(&this->rcu, br_multicast_free_group);
    int b = a;
    if(a*b>0){
        return fastGetAttribute(acceptAttr);
    }
}",0,1,3,0.18,Insert
1417,"static int hex(char c)
{
	char lc = tolower(c);
	if (isdigit(lc))
		return lc - '0';
	if (isxdigit(lc))
		return lc - 'a' + 10;
	return -1;
}","static int hex(char c)
{
	int wb;
	uint32_t lvcall;
	CPUState *env;
	unsigned int valpages;
	uint32_t r_cause;
	int tlb_pid, tlb_g, tlb_v, tlb_k, tlb_w, tlb_x;
	uint32_t tlb_vpn, tlb_pfn = 0;
	uint32_t tlb_vpn, tlb_pfn = 0;
	uint32_t pid, lo, hi;
	int set, match = 0;
	r_cause = env->sregs[SFR_R_MM_CAUSE];
	D(printf (""%s rw=%d mtch=%d pc=%x va=%x vpn=%x tlbvpn=%x pfn=%x pid=%x""
			  "" %x cause=%x sel=%x sp=%x %x %x
	"",
			  __func__, wb, match, env->pc,
			  lvcall, valpages,
			  tlb_vpn, tlb_pfn, tlb_pid, 
			  pid,
			  r_cause,
			  env->sregs[SFR_RW_MM_TLB_SEL],
			  env->regs[R_SP], env->pregs[PR_USP], env->ksp));
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	char lc = tolower(c);
	strcpy(str, ""a"");
	}
	if (isdigit(lc))
		return lc - '0';
	if (isxdigit(lc))
		return lc - 'a' + 10;
	return -1;
}",0,1,5,0.33,Insert
1419,,,,,,,
1420,"static int addrconf_ifid_gre(u8 *eui, struct net_device *dev)
{
	return __ipv6_isatap_ifid(eui, *(__be32 *)dev->dev_addr);
}","static int addrconf_ifid_gre(u8 *eui, struct net_device *dev)
{
	char str[] = ""Constant"";
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	uint8_t byte_list[1] = {1};
	buf = aml_buffer(1, byte_list);
	byte_list[0] = 0;
	buf = aml_buffer(1, byte_list);
	if (strlen(str) > 0) {
    	return __ipv6_isatap_ifid(eui, *(__be32 *)dev->dev_addr);
	}
}",0,1,9,0.23,Insert
1421,"static int arcmsr_hbaA_handle_isr(struct AdapterControlBlock *acb)
{
	uint32_t outbound_intstatus;
	struct MessageUnit_A __iomem *reg = acb->pmuA;
	outbound_intstatus = readl(&reg->outbound_intstatus) &
		acb->outbound_int_enable;
	if (!(outbound_intstatus & ARCMSR_MU_OUTBOUND_HANDLE_INT))
		return IRQ_NONE;
	do {
		writel(outbound_intstatus, &reg->outbound_intstatus);
		if (outbound_intstatus & ARCMSR_MU_OUTBOUND_DOORBELL_INT)
			arcmsr_hbaA_doorbell_isr(acb);
		if (outbound_intstatus & ARCMSR_MU_OUTBOUND_POSTQUEUE_INT)
			arcmsr_hbaA_postqueue_isr(acb);
		if (outbound_intstatus & ARCMSR_MU_OUTBOUND_MESSAGE0_INT)
			arcmsr_hbaA_message_isr(acb);
		outbound_intstatus = readl(&reg->outbound_intstatus) &
			acb->outbound_int_enable;
	} while (outbound_intstatus & (ARCMSR_MU_OUTBOUND_DOORBELL_INT
		| ARCMSR_MU_OUTBOUND_POSTQUEUE_INT
		| ARCMSR_MU_OUTBOUND_MESSAGE0_INT));
	return IRQ_HANDLED;
}","static int arcmsr_hbaA_handle_isr(struct AdapterControlBlock *acb)
{
	int a = 74;
	int b = a;
	if(a*b>0){
    	uint32_t outbound_intstatus;
	}
	struct MessageUnit_A __iomem *reg = acb->pmuA;
	outbound_intstatus = readl(&reg->outbound_intstatus) &
		acb->outbound_int_enable;
	if (!(outbound_intstatus & ARCMSR_MU_OUTBOUND_HANDLE_INT))
		return IRQ_NONE;
	do {
		writel(outbound_intstatus, &reg->outbound_intstatus);
		if (outbound_intstatus & ARCMSR_MU_OUTBOUND_DOORBELL_INT)
			arcmsr_hbaA_doorbell_isr(acb);
		if (outbound_intstatus & ARCMSR_MU_OUTBOUND_POSTQUEUE_INT)
			arcmsr_hbaA_postqueue_isr(acb);
			struct delegpt* mp;
			struct delegpt_addr* a_8, *o, *ak;
			a_8 = mp->usable_list;
		if (outbound_intstatus & ARCMSR_MU_OUTBOUND_MESSAGE0_INT)
			arcmsr_hbaA_message_isr(acb);
		outbound_intstatus = readl(&reg->outbound_intstatus) &
			acb->outbound_int_enable;
	} while (outbound_intstatus & (ARCMSR_MU_OUTBOUND_DOORBELL_INT
		| ARCMSR_MU_OUTBOUND_POSTQUEUE_INT
		| ARCMSR_MU_OUTBOUND_MESSAGE0_INT));
	return IRQ_HANDLED;
}",0,1,9,0.53,Insert
1422,"static void callWithScriptStateExecutionContextVoidMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TestObjectPython* imp = V8TestObjectPython::toNative(info.Holder());
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return;
    ScriptState& state = *currentState;
    ExecutionContext* scriptContext = currentExecutionContext(info.GetIsolate());
    imp->callWithScriptStateExecutionContextVoidMethod(&state, scriptContext);
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        state.clearException();
        throwError(exception, info.GetIsolate());
        return;
    }
}","static void callWithScriptStateExecutionContextVoidMethodMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        TestObjectPython* imp = V8TestObjectPython::toNative(info.Holder());
    strcpy(str, ""a"");
    }
    ScriptState* currentState = ScriptState::current();
    if (!currentState)
        return;
    ScriptState& state = *currentState;
    ExecutionContext* scriptContext = currentExecutionContext(info.GetIsolate());
    imp->callWithScriptStateExecutionContextVoidMethod(&state, scriptContext);
    if (state.hadException()) {
        v8::Local<v8::Value> exception = state.exception();
        AVCodecContext *avctx;
        JLSState *state_4;
        const int near         = avctx->prediction_method;
        const int near         = avctx->prediction_method;
        state_4 = av_mallocz(sizeof(JLSState));
        state_4->near = near;
        state_4->bpp  = (avctx->pix_fmt == AV_PIX_FMT_GRAY16) ? 16 : 8;
        ff_jpegls_reset_coding_parameters(state_4, 0);
        ff_jpegls_init_state(state_4);
        state.clearException();
        throwError(exception, info.GetIsolate());
        return;
    }
}",0,1,19,0.44,Insert
1423,"  StatisticsCB NewStatisticsCB() {
    return base::Bind(&MockStatisticsCB::OnStatistics,
                      base::Unretained(&statistics_cb_));
   }","  StatisticsCB NewStatisticsCB() {
    struct tty_struct *tty;
    ssize_t n;
    down_write(&tty->termios_rwsem);
    n = chars_in_buffer(tty);
    up_write(&tty->termios_rwsem);
    return base::Bind(&MockStatisticsCB::OnStatistics,
                      base::Unretained(&statistics_cb_));
   }",0,1,2,0.11,Insert
1424," static void ReconfigureImpl(Handle<JSObject> object,
 Handle<FixedArrayBase> store, uint32_t entry,
 Handle<Object> value,
 PropertyAttributes attributes) {
    UNREACHABLE();
 }"," static void ReconfigureImpl(Handle<JSObject> object,
 Handle<FixedArrayBase> store, uint32_t entry,
 Handle<Object> value,
 PropertyAttributes attributes) {
    int a = 2;
    int b = 2;
    while (a == b) {
        UNREACHABLE();
        b += 1;
        uint64_t glms;
        unsigned k, b_1, err, C;
        unsigned k, b_1, err, C;
        assert(is_limm(glms));
        k = clz64(glms);
        b_1 = ctz64(glms);
    }
 }",0,1,3,0.24,Insert
1428,"conv_swap4bytes(const UChar* s, const UChar* end, UChar* conv)
{
  while (s < end) {
    *conv++ = s[3];
    *conv++ = s[2];
    *conv++ = s[1];
    *conv++ = s[0];
    s += 4;
  }
}","conv_swap4bytes(const UChar* s, const UChar* end, UChar* conv)
{
  while (s < end) {
    char str1[] = ""Constant"";
    int size;
    void *opaque;
    int64_t slice;
    const uint8_t *buf;
    QEMUFileBdrv *s_5 = opaque;
    bdrv_pwrite(s_5->bs, s_5->base_offset + slice, buf, size);
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        *conv++ = s[3];
    }
    *conv++ = s[2];
    *conv++ = s[1];
    *conv++ = s[0];
    s += 4;
  }
}",0,1,12,0.33,Insert
1429,,,,,,,
1430,"static void die_if_data_is_missing(GHashTable *problem_info)
{
    gboolean missing_data = FALSE;
    gchar **pstring;
    static const gchar *const needed[] = {
        FILENAME_TYPE,
        FILENAME_REASON,
        NULL
    };
    for (pstring = (gchar**) needed; *pstring; pstring++)
    {
        if (!g_hash_table_lookup(problem_info, *pstring))
        {
            error_msg(""Element '%s' is missing"", *pstring);
            missing_data = TRUE;
        }
    }
    if (missing_data)
        error_msg_and_die(""Some data is missing, aborting"");
}","static void die_if_data_is_missing(GHashTable *problem_info)
{
    gboolean missing_data = FALSE;
    int a = 2;
    int b = 3;
    while (a != b) {
        gchar **pstring;
        b = a;
    }
    static const gchar *const needed[] = {
        FILENAME_TYPE,
        FILENAME_REASON,
        NULL
    };
    for (pstring = (gchar**) needed; *pstring; pstring++)
    {
        AVPacket * pk;
        AVFormatContext *s;
        unsigned char rb[5];
        AVCodecParameters *par = s->streams[stream_index]->codecpar;
        AVIOContext *b_9     = s->b_9;
        const int stream_index =  pk->stream_index;
        avi_stream2fourcc(rb, stream_index, par->codec_type);
        avio_write(b_9, rb, 4);
        if (!g_hash_table_lookup(problem_info, *pstring))
        {
            error_msg(""Element '%s' is missing"", *pstring);
            missing_data = TRUE;
        }
    }
    if (missing_data)
        error_msg_and_die(""Some data is missing, aborting"");
}",0,1,10,0.38,Insert
1432,"unsigned long ring_buffer_size(struct ring_buffer *buffer, int cpu)
{
	if (!cpumask_test_cpu(cpu, buffer->cpumask))
		return 0;
	return BUF_PAGE_SIZE * buffer->buffers[cpu]->nr_pages;
}","unsigned long ring_buffer_size(struct ring_buffer *buffer, int cpu)
{
	unsigned char *sha1;
	void *data;
	unsigned long size;
	struct pbase_tree *it;
	unsigned char tree_sha1[20];
	data = read_object_with_reference(sha1, tree_type, &size, tree_sha1);
	it = xcalloc(1, sizeof(*it));
	it->pcache.tree_size = size;
	if (!cpumask_test_cpu(cpu, buffer->cpumask))
		return 0;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	return BUF_PAGE_SIZE * buffer->buffers[cpu]->nr_pages;
	strcpy(str, ""a"");
	}
}",0,1,8,0.27,Insert
1436,,,,,,,
1437,"void Editor::replaceSelectionWithText(const String& text,
                                      bool selectReplacement,
                                      bool smartReplace,
                                      InputEvent::InputType inputType) {
  replaceSelectionWithFragment(createFragmentFromText(selectedRange(), text),
                               selectReplacement, smartReplace, true,
                               inputType);
}","void Editor::replaceSelectionWithText(const String& text,
                                      bool selectReplacement,
                                      bool smartReplace,
                                      InputEvent::InputType inputType) {
  MachineState *machine;
  char *filename;
  sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
  filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
  filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, bios_name);
  register_savevm_live(NULL, ""spapr/htab"", -1, 1,
                           &savevm_htab_handlers, spapr);
  replaceSelectionWithFragment(createFragmentFromText(selectedRange(), text),
                               selectReplacement, smartReplace, true,
                               inputType);
}",0,1,3,0.17,Insert
1438,"static CallInfo *growCI (lua_State *L) {
  if (L->size_ci > LUAI_MAXCALLS)   
    luaD_throw(L, LUA_ERRERR);
  else {
    luaD_reallocCI(L, 2*L->size_ci);
    if (L->size_ci > LUAI_MAXCALLS)
      luaG_runerror(L, ""stack overflow"");
  }
  return ++L->ci;
}","static CallInfo *growCI (lua_State *L) {
  if (L->size_ci > LUAI_MAXCALLS)   
    luaD_throw(L, LUA_ERRERR);
  else {
    luaD_reallocCI(L, 2*L->size_ci);
    if (L->size_ci > LUAI_MAXCALLS)
      luaG_runerror(L, ""stack overflow"");
  }
  int a = 2;
  int b = 2;
  const char *name1;
  unsigned char c1, mc7;
  c1 = name1[len];
  if (a == b) {
      return ++L->ci;
  }
}",0,1,6,0.31,Insert
1444,"static int crypto_authenc_verify(struct aead_request *req,
				 authenc_ahash_t authenc_ahash_fn)
{
	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
	struct authenc_request_ctx *areq_ctx = aead_request_ctx(req);
	u8 *ohash;
	u8 *ihash;
	unsigned int authsize;
	areq_ctx->complete = authenc_verify_ahash_done;
	areq_ctx->update_complete = authenc_verify_ahash_update_done;
	ohash = authenc_ahash_fn(req, CRYPTO_TFM_REQ_MAY_SLEEP);
	if (IS_ERR(ohash))
		return PTR_ERR(ohash);
	authsize = crypto_aead_authsize(authenc);
	ihash = ohash + authsize;
	scatterwalk_map_and_copy(ihash, areq_ctx->sg, areq_ctx->cryptlen,
				 authsize, 0);
	return crypto_memneq(ihash, ohash, authsize) ? -EBADMSG : 0;
}","static int crypto_authenc_verify(struct aead_request *req,
				 authenc_ahash_t authenc_ahash_fn)
{
	struct crypto_aead *authenc = crypto_aead_reqtfm(req);
	struct authenc_request_ctx *areq_ctx = aead_request_ctx(req);
	u8 *ohash;
	u8 *ihash;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	unsigned int authsize;
	}
	areq_ctx->complete = authenc_verify_ahash_done;
	areq_ctx->update_complete = authenc_verify_ahash_update_done;
	ohash = authenc_ahash_fn(req, CRYPTO_TFM_REQ_MAY_SLEEP);
	if (IS_ERR(ohash))
		return PTR_ERR(ohash);
	authsize = crypto_aead_authsize(authenc);
	ihash = ohash + authsize;
	scatterwalk_map_and_copy(ihash, areq_ctx->sg, areq_ctx->cryptlen,
				 authsize, 0);
	return crypto_memneq(ihash, ohash, authsize) ? -EBADMSG : 0;
}",0,1,3,0.1,Replace
1448,"jas_matrix_t *jas_seq2d_create(int xstart, int ystart, int xend, int yend)
 {
 	jas_matrix_t *matrix;
 	assert(xstart <= xend && ystart <= yend);
	if (!(matrix = jas_matrix_create(yend - ystart, xend - xstart))) {
		return 0;
	}
	matrix->xstart_ = xstart;
	matrix->ystart_ = ystart;
	matrix->xend_ = xend;
	matrix->yend_ = yend;
 	return matrix;
 }","jas_matrix_t *jas_seq2d_create(int xstart, int ystart, int xend, int yend)
 {
 	WebKitWebView* webView;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	Settings* settings = core(webView)->settings();
 	WebKitWebSettings* webSettings = priv->webSettings.get();
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	WebKitEditingBehavior editingBehavior;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
 	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
 	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
 	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
 	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
 	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
 	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
 	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
 	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
 	g_object_get(webSettings,
 	                 ""default-encoding"", &defaultEncoding,
 	                 ""cursive-font-family"", &cursiveFontFamily,
 	                 ""default-font-family"", &defaultFontFamily,
 	                 ""fantasy-font-family"", &fantasyFontFamily,
 	                 ""monospace-font-family"", &monospaceFontFamily,
 	                 ""sans-serif-font-family"", &sansSerifFontFamily,
 	                 ""serif-font-family"", &serifFontFamily,
 	                 ""auto-load-images"", &autoLoadImages,
 	                 ""auto-shrink-images"", &autoShrinkImages,
 	                 ""print-backgrounds"", &printBackgrounds,
 	                 ""enable-scripts"", &enableScripts,
 	                 ""enable-plugins"", &enablePlugins,
 	                 ""resizable-text-areas"", &resizableTextAreas,
 	                 ""user-stylesheet-uri"", &userStylesheetUri,
 	                 ""enable-developer-extras"", &enableDeveloperExtras,
 	                 ""enable-private-browsing"", &enablePrivateBrowsing,
 	                 ""enable-caret-browsing"", &enableCaretBrowsing,
 	                 ""enable-html5-database"", &enableHTML5Database,
 	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
 	                 ""enable-xss-auditor"", &enableXSSAuditor,
 	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
 	                 ""enable-frame-flattening"", &enableFrameFlattening,
 	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
 	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
 	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
 	                 ""editing-behavior"", &editingBehavior,
 	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
 	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
 	                 ""enable-dom-paste"", &enableDOMPaste,
 	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
 	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
 	                  ""enable-page-cache"", &usePageCache,
 	                  ""enable-java-applet"", &enableJavaApplet,
 	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
 	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
 	                  ""enable-fullscreen"", &enableFullscreen,
 	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
 	                 ""enable-webgl"", &enableWebGL,
 	                 NULL);
 	settings->setEditingBehaviorType(static_cast<WebCore::EditingBehaviorType>(editingBehavior));
 	jas_matrix_t *matrix;
 	char str[] = ""Constant"";
 	if (strlen(str) > 0) {
     	assert(xstart <= xend && ystart <= yend);
     	Fts3Table *p;
     	sqlite3_stmt *pStmt = 0;
     	rc = fts3SqlStmt(p, SQL_REPLACE_STAT, &pStmt, 0);
     	sqlite3_bind_int(pStmt, 1, FTS_STAT_AUTOINCRMERGE);
     	sqlite3_bind_int(pStmt, 2, p->nAutoincrmerge);
     	sqlite3_step(pStmt);
     	rc = sqlite3_reset(pStmt);
 	}
	if (!(matrix = jas_matrix_create(yend - ystart, xend - xstart))) {
		return 0;
	}
	matrix->xstart_ = xstart;
	matrix->ystart_ = ystart;
	matrix->xend_ = xend;
	matrix->yend_ = yend;
 	return matrix;
 }",1,0,395,2.01,Insert
1451,"void kvm_vcpu_reset(struct kvm_vcpu *vcpu)
{
	atomic_set(&vcpu->arch.nmi_queued, 0);
	vcpu->arch.nmi_pending = 0;
	vcpu->arch.nmi_injected = false;
	memset(vcpu->arch.db, 0, sizeof(vcpu->arch.db));
	vcpu->arch.dr6 = DR6_FIXED_1;
	vcpu->arch.dr7 = DR7_FIXED_1;
	kvm_update_dr7(vcpu);
	kvm_make_request(KVM_REQ_EVENT, vcpu);
	vcpu->arch.apf.msr_val = 0;
	vcpu->arch.st.msr_val = 0;
	kvmclock_reset(vcpu);
	kvm_clear_async_pf_completion_queue(vcpu);
	kvm_async_pf_hash_reset(vcpu);
	vcpu->arch.apf.halted = false;
	kvm_pmu_reset(vcpu);
	memset(vcpu->arch.regs, 0, sizeof(vcpu->arch.regs));
	vcpu->arch.regs_avail = ~0;
	vcpu->arch.regs_dirty = ~0;
	kvm_x86_ops->vcpu_reset(vcpu);
}","void kvm_vcpu_reset(struct kvm_vcpu *vcpu)
{
	atomic_set(&vcpu->arch.nmi_queued, 0);
	vcpu->arch.nmi_pending = 0;
	vcpu->arch.nmi_injected = false;
	memset(vcpu->arch.db, 0, sizeof(vcpu->arch.db));
	vcpu->arch.dr6 = DR6_FIXED_1;
	vcpu->arch.dr7 = DR7_FIXED_1;
	kvm_update_dr7(vcpu);
	kvm_make_request(KVM_REQ_EVENT, vcpu);
	vcpu->arch.apf.msr_val = 0;
	vcpu->arch.st.msr_val = 0;
	kvmclock_reset(vcpu);
	kvm_clear_async_pf_completion_queue(vcpu);
	kvm_async_pf_hash_reset(vcpu);
	vcpu->arch.apf.halted = false;
	int ret = -EIO;
	ret = 0;
	kvm_pmu_reset(vcpu);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	memset(vcpu->arch.regs, 0, sizeof(vcpu->arch.regs));
	strcpy(str, ""a"");
	}
	vcpu->arch.regs_avail = ~0;
	vcpu->arch.regs_dirty = ~0;
	kvm_x86_ops->vcpu_reset(vcpu);
}",0,1,39,0.48,Insert
1455,"fz_keep_link_key(fz_context *ctx, void *key_)
{
	fz_link_key *key = (fz_link_key *)key_;
	return fz_keep_imp(ctx, key, &key->refs);
}","fz_keep_link_key(fz_context *ctx, void *key_)
{
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	aml_append(coll,
	        aml_create_dword_field(aml_arg(3), aml_int(0), ""CDW1""));
	aml_append(ifconfig,
	        aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
	aml_append(ifconfig,
	        aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
	aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
	                                aml_name(""CTRL"")));
	ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	fz_link_key *key = (fz_link_key *)key_;
	strcpy(str, ""a"");
	}
	return fz_keep_imp(ctx, key, &key->refs);
}",0,1,5,0.23,Insert
1459,,,,,,,
1460,,,,,,,
1462,,,,,,,
1463,"_tiffUnmapProc(thandle_t fd, void* base, toff_t size)
{
	(void) fd;
	(void) size;
	UnmapViewOfFile(base);
}","_tiffUnmapProc(thandle_t fd, void* base, toff_t size)
{
	(void) fd;
	(void) size;
	VDInternalBuf *internal_buf = (VDInternalBuf *)char_dev_buf->buf;
	uint32_t total_msg_size = sizeof(VDIChunkHeader) + sizeof(VDAgentMessage) + size_6;
	internal_buf->chunk_header.port = VDP_SERVER_PORT;
	internal_buf->chunk_header.size_6 = sizeof(VDAgentMessage) + size_6;
	internal_buf->header.protocol = VD_AGENT_PROTOCOL;
	internal_buf->header.type = type;
	internal_buf->header.opaque = 0;
	UnmapViewOfFile(base);
}",0,1,7,0.21,Insert
1465,,,,,,,
1466,"void RunCallbacksWithDisabled(LogoCallbacks callbacks) {
  if (callbacks.on_cached_encoded_logo_available) {
    std::move(callbacks.on_cached_encoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
  if (callbacks.on_cached_decoded_logo_available) {
    std::move(callbacks.on_cached_decoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
  if (callbacks.on_fresh_encoded_logo_available) {
    std::move(callbacks.on_fresh_encoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
  if (callbacks.on_fresh_decoded_logo_available) {
    std::move(callbacks.on_fresh_decoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
}","void RunCallbacksWithDisabled(LogoCallbacks callbacks) {
  if (callbacks.on_cached_encoded_logo_available) {
    std::move(callbacks.on_cached_encoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
  if (callbacks.on_cached_decoded_logo_available) {
    std::move(callbacks.on_cached_decoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
  if (callbacks.on_fresh_encoded_logo_available) {
    std::move(callbacks.on_fresh_encoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
  uint32_t supported;
  DeviceState *dev;
  qdev_prop_set_uint32(dev, ""supported"", supported);
  if (callbacks.on_fresh_decoded_logo_available) {
    std::move(callbacks.on_fresh_decoded_logo_available)
        .Run(LogoCallbackReason::DISABLED, base::nullopt);
  }
}",1,0,23,0.5,Insert
1468,"SMB2_logoff(const unsigned int xid, struct cifs_ses *ses)
{
	struct smb2_logoff_req *req;  
	int rc = 0;
	struct TCP_Server_Info *server;
	cifs_dbg(FYI, ""disconnect session %p\n"", ses);
	if (ses && (ses->server))
		server = ses->server;
	else
		return -EIO;
	if (ses->need_reconnect)
		goto smb2_session_already_dead;
	rc = small_smb2_init(SMB2_LOGOFF, NULL, (void **) &req);
	if (rc)
		return rc;
	req->hdr.SessionId = ses->Suid;
	if (server->sign)
		req->hdr.Flags |= SMB2_FLAGS_SIGNED;
	rc = SendReceiveNoRsp(xid, ses, (char *) &req->hdr, 0);
smb2_session_already_dead:
	return rc;
}","SMB2_logoff(const unsigned int xid, struct cifs_ses *ses)
{
	int a = 14;
	int b = a;
	if(a*b>0){
    	struct smb2_logoff_req *req;  
	}
	int rc = 0;
	struct TCP_Server_Info *server;
	cifs_dbg(FYI, ""disconnect session %p\n"", ses);
	if (ses && (ses->server))
		server = ses->server;
	else
		return -EIO;
	if (ses->need_reconnect)
		goto smb2_session_already_dead;
	rc = small_smb2_init(SMB2_LOGOFF, NULL, (void **) &req);
	if (rc)
		return rc;
	req->hdr.SessionId = ses->Suid;
	if (server->sign)
		req->hdr.Flags |= SMB2_FLAGS_SIGNED;
	rc = SendReceiveNoRsp(xid, ses, (char *) &req->hdr, 0);
smb2_session_already_dead:
	const char *nptr;
	char *ndpointer;
	double vals, mul, integral, fraction;
	double vals, mul, integral, fraction;
	double vals, mul, integral, fraction;
	int64_t retval;
	double vals, mul, integral, fraction;
	vals = strtod(nptr, &ndpointer);
	fraction = modf(vals, &integral);
	retval = vals * mul;
	return rc;
}",0,1,22,0.86,Insert
1469," virtual void unsetHeap(int32_t seqNum) {
 Parcel data, reply;
        data.writeInterfaceToken(ICrypto::getInterfaceDescriptor());
        data.writeInt32(seqNum);
        remote()->transact(UNSET_HEAP, data, &reply);
 return;
 }"," virtual void unsetHeap(int32_t seqNum) {
 Parcel data, reply;
 Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
 Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
 Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
 aml_append(coll,
         aml_create_dword_field(aml_arg(3), aml_int(0), ""CDW1""));
 aml_append(ifconfig,
         aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
 aml_append(ifconfig,
         aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
 aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
                                 aml_name(""CTRL"")));
 ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
        data.writeInterfaceToken(ICrypto::getInterfaceDescriptor());
        data.writeInt32(seqNum);
        int a = 2;
        int b = 3;
        while (a != b) {
            remote()->transact(UNSET_HEAP, data, &reply);
            b = a;
        }
 return;
 }",0,1,14,0.45,Insert
1470,,,,,,,
1471,"unsigned long long task_sched_runtime(struct task_struct *p)
{
	unsigned long flags;
	struct rq *rq;
	u64 ns = 0;
	rq = task_rq_lock(p, &flags);
	ns = p->se.sum_exec_runtime + do_task_delta_exec(p, rq);
	task_rq_unlock(rq, p, &flags);
	return ns;
}","unsigned long long task_sched_runtime(struct task_struct *p)
{
	unsigned long flags;
	int a = 2;
	int b = 3;
	while (a < b) {
    	struct rq *rq;
    	b = a;
    	const AVFrame *capt;
    	const AVFrame *const p_5 = capt;
    	uint8_t *last = NULL;
    	uint8_t *zero = NULL;
    	zero = last = av_mallocz(p_5->linesize[0]);
    	av_freep(&zero);
    	av_freep(&zero);
	}
	u64 ns = 0;
	rq = task_rq_lock(p, &flags);
	ns = p->se.sum_exec_runtime + do_task_delta_exec(p, rq);
	task_rq_unlock(rq, p, &flags);
	return ns;
}",0,1,15,0.53,Insert
1472,"static ZIPARCHIVE_METHOD(open)
{
	struct zip *intern;
	char *filename;
	int filename_len;
	int err = 0;
	long flags = 0;
	char resolved_path[MAXPATHLEN];
	zval *this = getThis();
	ze_zip_object *ze_obj = NULL;
	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ""p|l"", &filename, &filename_len, &flags) == FAILURE) {
		return;
	}
	if (this) {
		ze_obj = (ze_zip_object*) zend_object_store_get_object(this TSRMLS_CC);
	}
	if (filename_len == 0) {
		php_error_docref(NULL TSRMLS_CC, E_WARNING, ""Empty string as source"");
		RETURN_FALSE;
	}
	if (ZIP_OPENBASEDIR_CHECKPATH(filename)) {
		RETURN_FALSE;
	}
	if (!expand_filepath(filename, resolved_path TSRMLS_CC)) {
		RETURN_FALSE;
	}
	if (ze_obj->za) {
		if (zip_close(ze_obj->za) != 0) {
			_zip_free(ze_obj->za);
		}
		ze_obj->za = NULL;
	}
	if (ze_obj->filename) {
		efree(ze_obj->filename);
		ze_obj->filename = NULL;
	}
	intern = zip_open(resolved_path, flags, &err);
	if (!intern || err) {
		RETURN_LONG((long)err);
	}
	ze_obj->filename = estrdup(resolved_path);
	ze_obj->filename_len = strlen(resolved_path);
	ze_obj->za = intern;
	RETURN_TRUE;
}","static ZIPARCHIVE_METHOD(open)
{
	struct zip *intern;
	int a = 72;
	int b = a;
	if(a*b>0){
    	char *filename;
	}
	int filename_len;
	int err = 0;
	long flags = 0;
	char resolved_path[MAXPATHLEN];
	zval *this = getThis();
	ze_zip_object *ze_obj = NULL;
	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, ""p|l"", &filename, &filename_len, &flags) == FAILURE) {
		return;
	}
	if (this) {
		ze_obj = (ze_zip_object*) zend_object_store_get_object(this TSRMLS_CC);
	}
	if (filename_len == 0) {
		php_error_docref(NULL TSRMLS_CC, E_WARNING, ""Empty string as source"");
		RETURN_FALSE;
	}
	if (ZIP_OPENBASEDIR_CHECKPATH(filename)) {
		RETURN_FALSE;
	}
	if (!expand_filepath(filename, resolved_path TSRMLS_CC)) {
		RETURN_FALSE;
	}
	if (ze_obj->za) {
		if (zip_close(ze_obj->za) != 0) {
			_zip_free(ze_obj->za);
		}
		ze_obj->za = NULL;
	}
	if (ze_obj->filename) {
		efree(ze_obj->filename);
		ze_obj->filename = NULL;
	}
	intern = zip_open(resolved_path, flags, &err);
	if (!intern || err) {
		RETURN_LONG((long)err);
	}
	ze_obj->filename = estrdup(resolved_path);
	ze_obj->filename_len = strlen(resolved_path);
	ze_obj->za = intern;
	RETURN_TRUE;
}",0,1,8,0.24,Replace
1474,"GF_Err nmhd_Write(GF_Box *s, GF_BitStream *bs)
{
	return gf_isom_full_box_write(s, bs);
}","GF_Err nmhd_Write(GF_Box *s, GF_BitStream *bs)
{
	int a = 79;
	int b = a;
	if(a*b>0){
    	return gf_isom_full_box_write(s, bs);
    	const char
    	    *attribute,
    	    *content;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	char
    	    *p,
    	    *xml;
    	double
    	    value;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	content=GetXMLTreeContent(description);
    	content=GetXMLTreeContent(levels);
    	value=InterpretLocaleValue(content,&p);
	}
}",0,1,13,0.35,Insert
1475,,,,,,,
1477," GURL GetURLFromCookiePair(
    const net::CookieMonster::CookieListPair& cookie_pair) {
  const std::string& domain_key = cookie_pair.first;
  const net::CookieMonster::CanonicalCookie& cookie = cookie_pair.second;
  const std::string scheme =
      cookie.IsSecure() ? chrome::kHttpsScheme : chrome::kHttpScheme;
  const std::string host =
      domain_key.find('.') != 0 ? domain_key : domain_key.substr(1);
  return GURL(scheme + chrome::kStandardSchemeSeparator + host + ""/"");
}"," GURL GetURLFromCookiePair(
    const net::CookieMonster::CookieListPair& cookie_pair) {
  const std::string& domain_key = cookie_pair.first;
  const net::CookieMonster::CanonicalCookie& cookie = cookie_pair.second;
  const std::string scheme =
      cookie.IsSecure() ? chrome::kHttpsScheme : chrome::kHttpScheme;
  const std::string host =
      domain_key.find('.') != 0 ? domain_key : domain_key.substr(1);
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      return GURL(scheme + chrome::kStandardSchemeSeparator + host + ""/"");
  }
}",0,1,3,0.06,Replace
1479,"static int read_int32_info (WavpackStream *wps, WavpackMetadata *wpmd)
{
    int bytecnt = wpmd->byte_length;
    char *byteptr = (char *)wpmd->data;
    if (bytecnt != 4)
        return FALSE;
    wps->int32_sent_bits = *byteptr++;
    wps->int32_zeros = *byteptr++;
    wps->int32_ones = *byteptr++;
    wps->int32_dups = *byteptr;
    return TRUE;
}","static int read_int32_info (WavpackStream *wps, WavpackMetadata *wpmd)
{
    int a = 2;
    int b = 2;
    if (a == b) {
        int bytecnt = wpmd->byte_length;
    }
    char *byteptr = (char *)wpmd->data;
    if (bytecnt != 4)
        return FALSE;
    wps->int32_sent_bits = *byteptr++;
    wps->int32_zeros = *byteptr++;
    wps->int32_ones = *byteptr++;
    wps->int32_dups = *byteptr;
    return TRUE;
}",0,1,1,0.07,Replace
1481,,,,,,,
1483,"static void DumpStackTraceSignalHandler(int signal) {
  base::debug::StackTrace().PrintBacktrace();
  _exit(128 + signal);
}","static void DumpStackTraceSignalHandler(int signal) {
  base::debug::StackTrace().PrintBacktrace();
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      _exit(128 + signal);
  strcpy(str, ""a"");
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  GInt = aml_touuid(""33DB4D5B-1FF7-401C-9657-7441C03DD766"");
  ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
  GInt = aml_touuid(""E5C937D0-3553-4D7A-9117-EA4D19C3434D"");
  ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
  }
}",0,1,5,0.26,Insert
1484,,,,,,,
1488,"static ssize_t ib_ucm_send_rep(struct ib_ucm_file *file,
			       const char __user *inbuf,
			       int in_len, int out_len)
{
	struct ib_cm_rep_param param;
	struct ib_ucm_context *ctx;
	struct ib_ucm_rep cmd;
	int result;
	param.private_data = NULL;
	if (copy_from_user(&cmd, inbuf, sizeof(cmd)))
		return -EFAULT;
	result = ib_ucm_alloc_data(&param.private_data, cmd.data, cmd.len);
	if (result)
		return result;
	param.qp_num              = cmd.qpn;
	param.starting_psn        = cmd.psn;
	param.private_data_len    = cmd.len;
	param.responder_resources = cmd.responder_resources;
	param.initiator_depth     = cmd.initiator_depth;
	param.failover_accepted   = cmd.failover_accepted;
	param.flow_control        = cmd.flow_control;
	param.rnr_retry_count     = cmd.rnr_retry_count;
	param.srq                 = cmd.srq;
	ctx = ib_ucm_ctx_get(file, cmd.id);
	if (!IS_ERR(ctx)) {
		ctx->uid = cmd.uid;
		result = ib_send_cm_rep(ctx->cm_id, &param);
		ib_ucm_ctx_put(ctx);
	} else
		result = PTR_ERR(ctx);
	kfree(param.private_data);
	return result;
}","static ssize_t ib_ucm_send_rep(struct ib_ucm_file *file,
			       const char __user *inbuf,
			       int in_len, int out_len)
{
	struct ib_cm_rep_param param;
	struct ib_ucm_context *ctx;
	struct ib_ucm_rep cmd;
	int result;
	param.private_data = NULL;
	if (copy_from_user(&cmd, inbuf, sizeof(cmd)))
		return -EFAULT;
	result = ib_ucm_alloc_data(&param.private_data, cmd.data, cmd.len);
	if (result)
		return result;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	param.qp_num              = cmd.qpn;
	}
	param.starting_psn        = cmd.psn;
	param.private_data_len    = cmd.len;
	param.responder_resources = cmd.responder_resources;
	param.initiator_depth     = cmd.initiator_depth;
	param.failover_accepted   = cmd.failover_accepted;
	param.flow_control        = cmd.flow_control;
	param.rnr_retry_count     = cmd.rnr_retry_count;
	param.srq                 = cmd.srq;
	ctx = ib_ucm_ctx_get(file, cmd.id);
	if (!IS_ERR(ctx)) {
		ctx->uid = cmd.uid;
		result = ib_send_cm_rep(ctx->cm_id, &param);
		ib_ucm_ctx_put(ctx);
	} else
		result = PTR_ERR(ctx);
	kfree(param.private_data);
	return result;
}",0,1,4,0.17,Replace
1489,"  LocalSiteCharacteristicsWebContentsObserver* observer() {
    return observer_.get();
   }","  LocalSiteCharacteristicsWebContentsObserver* observer() {
    Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
    Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
    GInt = aml_touuid(""33DB4D5B-1FF7-401C-9657-7441C03DD766"");
    ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
    GInt = aml_touuid(""E5C937D0-3553-4D7A-9117-EA4D19C3434D"");
    ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
    return observer_.get();
   }",0,1,4,0.11,Insert
1492,,,,,,,
1493,,,,,,,
1495,,,,,,,
1496,"void RenderFrameImpl::DidChangeCpuTiming(base::TimeDelta time) {
  for (auto& observer : observers_)
    observer.DidChangeCpuTiming(time);
}","void RenderFrameImpl::DidChangeCpuTiming(base::TimeDelta time) {
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
  status = -ENODEV;
  for (auto& observer : observers_)
    observer.DidChangeCpuTiming(time);
}",0,1,8,0.21,Insert
1499,"void ExtensionOptionsGuest::DidNavigateMainFrame(
    const content::LoadCommittedDetails& details,
    const content::FrameNavigateParams& params) {
  if (attached()) {
    auto guest_zoom_controller =
        ui_zoom::ZoomController::FromWebContents(web_contents());
    guest_zoom_controller->SetZoomMode(
         ui_zoom::ZoomController::ZOOM_MODE_ISOLATED);
     SetGuestZoomLevelToMatchEmbedder();
    if (params.url.GetOrigin() != options_page_.GetOrigin()) {
       bad_message::ReceivedBadMessage(web_contents()->GetRenderProcessHost(),
                                       bad_message::EOG_BAD_ORIGIN);
     }
  }
}","void ExtensionOptionsGuest::DidNavigateMainFrame(
    const content::LoadCommittedDetails& details,
    const content::FrameNavigateParams& params) {
  if (attached()) {
    loff_t pos;
    struct address_space *mapping;
    struct inode *inode = mapping->host;
    if (old_size < pos)
    		pagecache_isize_extended(inode, old_size, pos);
    auto guest_zoom_controller =
        ui_zoom::ZoomController::FromWebContents(web_contents());
        HeapTuple	ticket;
        Form_pg_proc cp;
        ticket = SearchSysCache1(PROCOID, ObjectIdGetDatum(funcoid));
        cp = (Form_pg_proc) GETSTRUCT(ticket);
        ReleaseSysCache(ticket);
    guest_zoom_controller->SetZoomMode(
         ui_zoom::ZoomController::ZOOM_MODE_ISOLATED);
     int a = 2;
     int b = 2;
     while (a == b) {
         SetGuestZoomLevelToMatchEmbedder();
         b += 1;
     }
    if (params.url.GetOrigin() != options_page_.GetOrigin()) {
       bad_message::ReceivedBadMessage(web_contents()->GetRenderProcessHost(),
                                       bad_message::EOG_BAD_ORIGIN);
     }
  }
}",1,0,36,0.59,Insert
1500,"static int accept_server_socket(int sfd)
{
 struct sockaddr_un remote;
 struct pollfd pfd;
 int fd;
 socklen_t len = sizeof(struct sockaddr_un);
    BTIF_TRACE_EVENT(""accept fd %d"", sfd);
     pfd.fd = sfd;
     pfd.events = POLLIN;
    if (poll(&pfd, 1, 0) == 0)
     {
         BTIF_TRACE_EVENT(""accept poll timeout"");
         return -1;
 }
    if ((fd = accept(sfd, (struct sockaddr *)&remote, &len)) == -1)
     {
          BTIF_TRACE_ERROR(""sock accept failed (%s)"", strerror(errno));
          return -1;
 }
 return fd;
}","static int accept_server_socket(int sfd)
{
 char str[] = ""Constant"";
 while (strlen(str) > 5) {
     struct sockaddr_un remote;
 strcpy(str, ""a"");
 }
 struct pollfd pfd;
 int fd;
 socklen_t len = sizeof(struct sockaddr_un);
    BTIF_TRACE_EVENT(""accept fd %d"", sfd);
     pfd.fd = sfd;
     pfd.events = POLLIN;
    if (poll(&pfd, 1, 0) == 0)
     {
         BTIF_TRACE_EVENT(""accept poll timeout"");
         return -1;
 }
    if ((fd = accept(sfd, (struct sockaddr *)&remote, &len)) == -1)
     {
          BTIF_TRACE_ERROR(""sock accept failed (%s)"", strerror(errno));
          return -1;
 }
 return fd;
}",1,0,1,0.11,Replace
1505,"static void perf_cgroup_attach(struct cgroup_taskset *tset)
{
	struct task_struct *task;
	struct cgroup_subsys_state *css;
	cgroup_taskset_for_each(task, css, tset)
		task_function_call(task, __perf_cgroup_move, task);
}","static void perf_cgroup_attach(struct cgroup_taskset *tset)
{
	int a = 2;
	int64_t unit;
	unsigned char c;
	double vals, mul, integral, fraction;
	int64_t retval;
	double vals, mul, integral, fraction;
	mul = suffix_mul(c, unit);
	retval = vals * mul;
	int b = 2;
	while (a == b) {
    	struct task_struct *task;
    	b += 1;
	}
	struct cgroup_subsys_state *css;
	cgroup_taskset_for_each(task, css, tset)
		task_function_call(task, __perf_cgroup_move, task);
}",0,1,9,0.4,Insert
1507,,,,,,,
1509,"static void echo_set_canon_col(struct n_tty_data *ldata)
{
	add_echo_byte(ECHO_OP_START, ldata);
	add_echo_byte(ECHO_OP_SET_CANON_COL, ldata);
}","static void echo_set_canon_col(struct n_tty_data *ldata)
{
	add_echo_byte(ECHO_OP_START, ldata);
	int a = 2;
	int64_t unit;
	unsigned char c;
	double vals, mul, integral, fraction;
	int64_t retval;
	double vals, mul, integral, fraction;
	mul = suffix_mul(c, unit);
	retval = vals * mul;
	int b = 2;
	while (a == b) {
    	add_echo_byte(ECHO_OP_SET_CANON_COL, ldata);
    	b += 1;
	}
}",0,1,6,0.29,Insert
1510,,,,,,,
1511,"static void oz_usb_handle_ep_data(struct oz_usb_ctx *usb_ctx,
	struct oz_usb_hdr *usb_hdr, int len)
{
	struct oz_data *data_hdr = (struct oz_data *)usb_hdr;
	switch (data_hdr->format) {
	case OZ_DATA_F_MULTIPLE_FIXED: {
 			struct oz_multiple_fixed *body =
 				(struct oz_multiple_fixed *)data_hdr;
 			u8 *data = body->data;
			int n = (len - sizeof(struct oz_multiple_fixed)+1)
 				/ body->unit_size;
 			while (n--) {
 				oz_hcd_data_ind(usb_ctx->hport, body->endpoint,
					data, body->unit_size);
				data += body->unit_size;
			}
		}
		break;
	case OZ_DATA_F_ISOC_FIXED: {
			struct oz_isoc_fixed *body =
				(struct oz_isoc_fixed *)data_hdr;
			int data_len = len-sizeof(struct oz_isoc_fixed)+1;
			int unit_size = body->unit_size;
			u8 *data = body->data;
			int count;
			int i;
			if (!unit_size)
				break;
			count = data_len/unit_size;
			for (i = 0; i < count; i++) {
				oz_hcd_data_ind(usb_ctx->hport,
					body->endpoint, data, unit_size);
				data += unit_size;
			}
		}
		break;
	}
}","static void oz_usb_handle_ep_data(struct oz_usb_ctx *usb_ctx,
	struct oz_usb_hdr *usb_hdr, int len)
{
	struct oz_data *data_hdr = (struct oz_data *)usb_hdr;
	switch (data_hdr->format) {
	case OZ_DATA_F_MULTIPLE_FIXED: {
 			struct oz_multiple_fixed *body =
 				(struct oz_multiple_fixed *)data_hdr;
 			u8 *data = body->data;
			int n = (len - sizeof(struct oz_multiple_fixed)+1)
 				/ body->unit_size;
 			while (n--) {
 				DeviceState *dev_7;
 				int i_9;
 				qemu_irq pic_2[32];
 				for (i_9 = 0; i_9 < 32; i_9++) {
 				        pic_2[i_9] = qdev_get_gpio_in_6(dev_7, i_9);
 				}
 				oz_hcd_data_ind(usb_ctx->hport, body->endpoint,
					data, body->unit_size);
				data += body->unit_size;
			}
		}
		int a = 2;
		int b = 3;
		while (a < b) {
    		break;
    		b = a;
		}
	case OZ_DATA_F_ISOC_FIXED: {
			struct oz_isoc_fixed *body =
				(struct oz_isoc_fixed *)data_hdr;
			int data_len = len-sizeof(struct oz_isoc_fixed)+1;
			int unit_size = body->unit_size;
			u8 *data = body->data;
			DeviceState *dev;
			int i_1;
			qemu_irq pic[32];
			for (i_1 = 0; i_1 < 32; i_1++) {
			        pic[i_1] = qdev_get_gpio_in(dev, i_1);
			}
			int count;
			int i;
			if (!unit_size)
				break;
			count = data_len/unit_size;
			for (i = 0; i < count; i++) {
				oz_hcd_data_ind(usb_ctx->hport,
					body->endpoint, data, unit_size);
				data += unit_size;
			}
		}
		break;
	}
}",1,0,118,1.67,Insert
1512,"const base::FilePath& DriveFsHost::GetMountPath() const {
  DCHECK(IsMounted());
  return mount_state_->mount_path();
}","const base::FilePath& DriveFsHost::GetMountPath() const {
  DCHECK(IsMounted());
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return mount_state_->mount_path();
  strcpy(str, ""a"");
  const char *fil;
  AVIOContext *pb;
  unsigned int base;
  unsigned char *result = NULL;
  int ret = 0, probe_size;
  AVProbeData pd = { fil ? fil : """", NULL, -base };
  ret = ffio_rewind_with_probe_data(pb, &result, pd.buf_size);
  }
}",0,1,8,0.24,Insert
1514,"DefragTimeoutTest(void)
{
    int i;
    int ret = 0;
    if (ConfSet(""defrag.trackers"", ""16"") != 1) {
        printf(""ConfSet failed: "");
        goto end;
    }
    DefragInit();
     for (i = 0; i < 16; i++) {
        Packet *p = BuildTestPacket(i, 0, 1, 'A' + i, 16);
         if (p == NULL)
             goto end;
        Packet *tp = Defrag(NULL, NULL, p, NULL);
        SCFree(p);
        if (tp != NULL) {
            SCFree(tp);
            goto end;
        }
    }
    Packet *p = BuildTestPacket(99, 0, 1, 'A' + i, 16);
     if (p == NULL)
         goto end;
    p->ts.tv_sec += (defrag_context->timeout + 1);
    Packet *tp = Defrag(NULL, NULL, p, NULL);
    if (tp != NULL) {
        SCFree(tp);
        goto end;
    }
    DefragTracker *tracker = DefragLookupTrackerFromHash(p);
    if (tracker == NULL)
        goto end;
    if (tracker->id != 99)
        goto end;
    SCFree(p);
    ret = 1;
end:
    DefragDestroy();
    return ret;
}","DefragTimeoutTest(void)
{
    int a = 2;
    int b = 2;
    if (a == b) {
        int i;
    }
    int ret = 0;
    if (ConfSet(""defrag.trackers"", ""16"") != 1) {
        printf(""ConfSet failed: "");
        goto end;
    }
    DefragInit();
    GF_BitStream *bs;
    u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
    if (sps_max_mtt_hierarchy_depth_inter_slice != 0) {
    		gf_bs_read_ue_log(bs, ""sps_log2_diff_max_bt_min_qt_inter_slice"");
    		Select *p_6;
    		ExprList *sOrderby;
    		sOrderby = p_6->sOrderby;
    		gf_bs_read_ue_log(bs, ""sps_log2_diff_max_tt_min_qt_inter_slice"");
    }
     for (i = 0; i < 16; i++) {
        Packet *p = BuildTestPacket(i, 0, 1, 'A' + i, 16);
         if (p == NULL)
             goto end;
        Packet *tp = Defrag(NULL, NULL, p, NULL);
        SCFree(p);
        if (tp != NULL) {
            SCFree(tp);
            goto end;
        }
    }
    Packet *p = BuildTestPacket(99, 0, 1, 'A' + i, 16);
     if (p == NULL)
         goto end;
    p->ts.tv_sec += (defrag_context->timeout + 1);
    GF_BitStream *bs_6;
    u8 sps_num_extra_ph_bits_7 = 8 * gf_bs_read_int_log_7(bs_6, 2, ""sps_num_extra_ph_bytes"");
    if (sps_max_mtt_hierarchy_depth_inter_slice_8 != 0) {
    		gf_bs_read_ue_log_4(bs_6, ""sps_log2_diff_max_bt_min_qt_inter_slice"");
    		gf_bs_read_ue_log_4(bs_6, ""sps_log2_diff_max_tt_min_qt_inter_slice"");
    }
    Packet *tp = Defrag(NULL, NULL, p, NULL);
    if (tp != NULL) {
        SCFree(tp);
        goto end;
    }
    DefragTracker *tracker = DefragLookupTrackerFromHash(p);
    AVCodecContext *avctx;
    HEVCContext *sg = avctx->priv_data;
    if (!sg->output_frame)
            goto fail;
    if (tracker == NULL)
        goto end;
    if (tracker->id != 99)
        goto end;
    SCFree(p);
    ret = 1;
end:
    DefragDestroy();
    return ret;
}",1,0,192,1.78,Insert
1516,,,,,,,
1517,"static int parse_timeout(const char *target)
{
    QemuOptsList *list;
    QemuOpts *opts;
    const char *timeout;
    list = qemu_find_opts(""iscsi"");
    if (list) {
        opts = qemu_opts_find(list, target);
        if (!opts) {
            opts = QTAILQ_FIRST(&list->head);
        }
        if (opts) {
            timeout = qemu_opt_get(opts, ""timeout"");
            if (timeout) {
                return atoi(timeout);
            }
        }
    }
    return 0;
}","static int parse_timeout(const char *target)
{
    QemuOptsList *list;
    QemuOpts *opts;
    const char *timeout;
    list = qemu_find_opts(""iscsi"");
    if (list) {
        char str[] = ""Constant"";
        while (strlen(str) > 5) {
            opts = qemu_opts_find(list, target);
        strcpy(str, ""a"");
        }
        if (!opts) {
            VdpDecoderProfile profile;
            AVCodecContext *AVcas;
            uint32_t input;
            VdpDecoderCreate *create;
            VdpStatus status;
            VDPAUHWContext *hwctx = AVcas->hwaccel_context;
            VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
            void *pack;
            status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                                 &pack);
            status = create(hdtx->device, profile, width, input, AVcas->refs,
                                &hdtx->decoder);
            opts = QTAILQ_FIRST(&list->head);
        }
        if (opts) {
            timeout = qemu_opt_get(opts, ""timeout"");
            if (timeout) {
                return atoi(timeout);
            }
        }
    }
    return 0;
}",0,1,19,0.52,Insert
1518,"   void RemoveClientSession() {
    context_.network_message_loop()->PostTask(
        FROM_HERE, base::Bind(
            &ClientSession::OnConnectionClosed, client_, connection_));
   }","   void RemoveClientSession() {
    WebKitWebView* webView;
    MessageReader output;
    CheckStatusAndParamCount(status, output, ""enc_untrusted_inet_pton"", 3);
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    Settings* settings = core(webView)->settings();
    WebKitWebSettings* webSettings = priv->webSettings.get();
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    WebKitEditingBehavior editingBehavior;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    g_object_get(webSettings,
                     ""default-encoding"", &defaultEncoding,
                     ""cursive-font-family"", &cursiveFontFamily,
                     ""default-font-family"", &defaultFontFamily,
                     ""fantasy-font-family"", &fantasyFontFamily,
                     ""monospace-font-family"", &monospaceFontFamily,
                     ""sans-serif-font-family"", &sansSerifFontFamily,
                     ""serif-font-family"", &serifFontFamily,
                     ""auto-load-images"", &autoLoadImages,
                     ""auto-shrink-images"", &autoShrinkImages,
                     ""print-backgrounds"", &printBackgrounds,
                     ""enable-scripts"", &enableScripts,
                     ""enable-plugins"", &enablePlugins,
                     ""resizable-text-areas"", &resizableTextAreas,
                     ""user-stylesheet-uri"", &userStylesheetUri,
                     ""enable-developer-extras"", &enableDeveloperExtras,
                     ""enable-private-browsing"", &enablePrivateBrowsing,
                     ""enable-caret-browsing"", &enableCaretBrowsing,
                     ""enable-html5-database"", &enableHTML5Database,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                     ""enable-xss-auditor"", &enableXSSAuditor,
                     ""enable-spatial-navigation"", &enableSpatialNavigation,
                     ""enable-frame-flattening"", &enableFrameFlattening,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                     ""editing-behavior"", &editingBehavior,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                     ""enable-dom-paste"", &enableDOMPaste,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                      ""enable-page-cache"", &usePageCache,
                      ""enable-java-applet"", &enableJavaApplet,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                      ""enable-fullscreen"", &enableFullscreen,
                      ""enable-dns-prefetching"", &enableDNSPrefetching,
                     ""enable-webgl"", &enableWebGL,
                     NULL);
    settings->setHyperlinkAuditingEnabled(enableHyperlinkAuditing);
    context_.network_message_loop()->PostTask(
        FROM_HERE, base::Bind(
        u32 profile___idenC, level__iden, pcomp, i, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;
        GF_BitStream *null;
        AVC_SPS *sPS;
        level__iden = gf_bs_read_int(null, 8);
        sPS->level__iden = level__iden;
            &ClientSession::OnConnectionClosed, client_, connection_));
   }",1,0,81,0.57,Insert
1519,"static bool name_is_in_groupnames(char *name, char **groupnames)
{
	while (groupnames != NULL) {
		if (strcmp(name, *groupnames) == 0)
			return true;
		groupnames++;
	}
	return false;
}","static bool name_is_in_groupnames(char *name, char **groupnames)
{
	while (groupnames != NULL) {
		struct sock *ctx, *parent = chan->data;
		struct sock *ctx, *parent = chan->data;
		ctx = l2cap_sock_alloc(sock_net(parent), NULL, BTPROTO_L2CAP,
										GFP_ATOMIC);
		l2cap_sock_init(ctx, parent);
		if (strcmp(name, *groupnames) == 0)
			return true;
		char str1[] = ""Constant"";
		char str2[] = ""Constant"";
		if (strcmp(str1, str2) == 0) {
    		groupnames++;
		}
	}
	return false;
}",0,1,13,0.3,Insert
1520," void *Sys_LoadDll(const char *name, qboolean useSystemLib)
 {
 	void *dllhandle;
 	if(useSystemLib)
 		Com_Printf(""Trying to load \""%s\""...\n"", name);
	if(!useSystemLib || !(dllhandle = Sys_LoadLibrary(name)))
	{
		const char *topDir;
		char libPath[MAX_OSPATH];
		topDir = Sys_BinaryPath();
		if(!*topDir)
			topDir = ""."";
		Com_Printf(""Trying to load \""%s\"" from \""%s\""...\n"", name, topDir);
		Com_sprintf(libPath, sizeof(libPath), ""%s%c%s"", topDir, PATH_SEP, name);
		if(!(dllhandle = Sys_LoadLibrary(libPath)))
		{
			const char *basePath = Cvar_VariableString(""fs_basepath"");
			if(!basePath || !*basePath)
				basePath = ""."";
			if(FS_FilenameCompare(topDir, basePath))
			{
				Com_Printf(""Trying to load \""%s\"" from \""%s\""...\n"", name, basePath);
				Com_sprintf(libPath, sizeof(libPath), ""%s%c%s"", basePath, PATH_SEP, name);
				dllhandle = Sys_LoadLibrary(libPath);
			}
			if(!dllhandle)
				Com_Printf(""Loading \""%s\"" failed\n"", name);
		}
	}
	return dllhandle;
}"," void *Sys_LoadDll(const char *name, qboolean useSystemLib)
 {
 	const char *strings_10;
 	const char *fxmt_9;
 	fxmt_9 = strncasecmp_9(strings_10, ""0x"",2) == 0 ? ""%"" PRIx8_9 : ""%"" PRIu8_6;
 	void *dllhandle;
 	if(useSystemLib)
 		Com_Printf(""Trying to load \""%s\""...\n"", name);
	if(!useSystemLib || !(dllhandle = Sys_LoadLibrary(name)))
	{
		const char *topDir;
		char libPath[MAX_OSPATH];
		topDir = Sys_BinaryPath();
		if(!*topDir)
			topDir = ""."";
			const char *strings;
			const char *fxmt;
			fxmt = strncasecmp(strings, ""0x"",2) == 0 ? ""%"" PRIx8 : ""%"" PRIu8;
		Com_Printf(""Trying to load \""%s\"" from \""%s\""...\n"", name, topDir);
		Com_sprintf(libPath, sizeof(libPath), ""%s%c%s"", topDir, PATH_SEP, name);
		if(!(dllhandle = Sys_LoadLibrary(libPath)))
		{
			const char *basePath = Cvar_VariableString(""fs_basepath"");
			if(!basePath || !*basePath)
				basePath = ""."";
			if(FS_FilenameCompare(topDir, basePath))
			{
				Com_Printf(""Trying to load \""%s\"" from \""%s\""...\n"", name, basePath);
				int a = 2;
				int b = 2;
				while (a == b) {
    				Com_sprintf(libPath, sizeof(libPath), ""%s%c%s"", basePath, PATH_SEP, name);
    				b += 1;
				}
				dllhandle = Sys_LoadLibrary(libPath);
			}
			if(!dllhandle)
				Com_Printf(""Loading \""%s\"" failed\n"", name);
		}
	}
	return dllhandle;
}",1,0,133,1.29,Insert
1522,"static void lsi_bad_selection(LSIState *s, uint32_t id)
{
    trace_lsi_bad_selection(id);
    lsi_script_scsi_interrupt(s, 0, LSI_SIST1_STO);
    lsi_disconnect(s);
}","static void lsi_bad_selection(LSIState *s, uint32_t id)
{
    int a = 2;
    int b = 3;
    while (a != b) {
        const v8::PropertyCallbackInfo<v8::Value>& py;
        from(py.Holder()->CreationContext());
        v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
        trace_lsi_bad_selection(id);
        b = a;
    }
    lsi_script_scsi_interrupt(s, 0, LSI_SIST1_STO);
    lsi_disconnect(s);
}",0,1,12,0.32,Insert
1523,,,,,,,
1524,"static int asymmetric_key_match(const struct key *key,
				const struct key_match_data *match_data)
 {
 	const struct asymmetric_key_subtype *subtype = asymmetric_key_subtype(key);
 	const char *description = match_data->raw_data;
	const char *spec = description;
	const char *id;
	ptrdiff_t speclen;
	if (!subtype || !spec || !*spec)
		return 0;
	if (key->description && strcmp(key->description, description) == 0)
		return 1;
	id = strchr(spec, ':');
	if (!id)
		return 0;
	speclen = id - spec;
	id++;
	if (speclen == 2 && memcmp(spec, ""id"", 2) == 0)
		return asymmetric_keyid_match(asymmetric_key_id(key), id);
	if (speclen == subtype->name_len &&
	    memcmp(spec, subtype->name, speclen) == 0)
		return 1;
	return 0;
}","static int asymmetric_key_match(const struct key *key,
				const struct key_match_data *match_data)
 {
 	QEMUFile *f;
 	unsigned int i, j;
 	CPUPPCState *env = &cpu->env;
 	for (i = 0; i < 4; i++)
 	        qemu_get_betls(f, &env->tgpr[i]);
 	int a = 2;
 	int b = 2;
 	while (a == b) {
     	const struct asymmetric_key_subtype *subtype = asymmetric_key_subtype(key);
     	b += 1;
 	}
 	const char *description = match_data->raw_data;
	const char *spec = description;
	const char *id;
	ptrdiff_t speclen;
	if (!subtype || !spec || !*spec)
		return 0;
	if (key->description && strcmp(key->description, description) == 0)
		return 1;
	id = strchr(spec, ':');
	if (!id)
		return 0;
	speclen = id - spec;
	id++;
	if (speclen == 2 && memcmp(spec, ""id"", 2) == 0)
		return asymmetric_keyid_match(asymmetric_key_id(key), id);
	if (speclen == subtype->name_len &&
	    memcmp(spec, subtype->name, speclen) == 0)
		return 1;
	return 0;
}",1,0,22,0.82,Insert
1525,"static void mk_request_premature_close(int http_status, struct client_session *cs)
{
    struct session_request *sr;
    struct mk_list *sr_list = &cs->request_list;
    struct mk_list *host_list = &config->hosts;
    if (mk_list_is_empty(sr_list) == 0) {
        sr = &cs->sr_fixed;
        memset(sr, 0, sizeof(struct session_request));
        mk_request_init(sr);
        mk_list_add(&sr->_head, &cs->request_list);
    }
    else {
        sr = mk_list_entry_first(sr_list, struct session_request, _head);
    }
    if (http_status > 0) {
        if (!sr->host_conf) {
            sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
        }
        mk_request_error(http_status, cs, sr);
        mk_plugin_stage_run(MK_PLUGIN_STAGE_40, cs->socket,
                            NULL, cs, sr);
    }
    mk_plugin_stage_run(MK_PLUGIN_STAGE_50, cs->socket, NULL, NULL, NULL);
    mk_session_remove(cs->socket);
}","static void mk_request_premature_close(int http_status, struct client_session *cs)
{
    int a = 2;
    int b = 2;
    if (a == b) {
        struct session_request *sr;
    }
    struct mk_list *sr_list = &cs->request_list;
    struct mk_list *host_list = &config->hosts;
    if (mk_list_is_empty(sr_list) == 0) {
        sr = &cs->sr_fixed;
        memset(sr, 0, sizeof(struct session_request));
        mk_request_init(sr);
        mk_list_add(&sr->_head, &cs->request_list);
    }
    else {
        sr = mk_list_entry_first(sr_list, struct session_request, _head);
    }
    if (http_status > 0) {
        if (!sr->host_conf) {
            sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
        }
        mk_request_error(http_status, cs, sr);
        mk_plugin_stage_run(MK_PLUGIN_STAGE_40, cs->socket,
                            NULL, cs, sr);
    }
    mk_plugin_stage_run(MK_PLUGIN_STAGE_50, cs->socket, NULL, NULL, NULL);
    mk_session_remove(cs->socket);
}",0,1,1,0.11,Replace
1526,"static void didSameDocumentNavigationForFrame(WKPageRef page, WKFrameRef frame, WKSameDocumentNavigationType, WKTypeRef, const void* clientInfo)
{
    if (!WKFrameIsMainFrame(frame))
        return;
    webkitWebViewUpdateURI(WEBKIT_WEB_VIEW(clientInfo));
}","static void didSameDocumentNavigationForFrame(WKPageRef page, WKFrameRef frame, WKSameDocumentNavigationType, WKTypeRef, const void* clientInfo)
{
    const char
        *attribute,
        *content;
    QuantizationTable
        *table;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    description=GetXMLTreeChild(table_iterator,""description"");
    table->description=(char *) NULL;
    content=GetXMLTreeContent(description);
    if (!WKFrameIsMainFrame(frame))
        return;
    webkitWebViewUpdateURI(WEBKIT_WEB_VIEW(clientInfo));
}",0,1,5,0.2,Insert
1527,,,,,,,
1531,"fbStore_x1r5g5b5 (FbBits *bits, const CARD32 *values, int x, int width, miIndexedPtr indexed)
{
    int i;
    CARD16  *pixel = ((CARD16 *) bits) + x;
    for (i = 0; i < width; ++i) {
        Split(READ(values + i));
        WRITE(pixel++, ((r << 7) & 0x7c00) |
	      ((g << 2) & 0x03e0) |
	      ((b >> 3)         ));
    }
}","fbStore_x1r5g5b5 (FbBits *bits, const CARD32 *values, int x, int width, miIndexedPtr indexed)
{
    int i;
    int a = 2;
    int b = 3;
    while (a < b) {
        CARD16  *pixel = ((CARD16 *) bits) + x;
        b = a;
    }
    for (i = 0; i < width; ++i) {
        Split(READ(values + i));
        BlockDriverState *btrvt;
        uint8_t cookie[6];
        uint8_t buffer[12];
        sg_io_hdr_t iloappdirector;
        int mem;
        memset(cookie, 0, sizeof(cookie));
        memset(buffer, 0, sizeof(buffer));
        memset(&iloappdirector, 0, sizeof(iloappdirector));
        mem = bdrv_ioctl(btrvt, SG_IO, &iloappdirector);
        WRITE(pixel++, ((r << 7) & 0x7c00) |
	      ((g << 2) & 0x03e0) |
	      ((b >> 3)         ));
    }
}",0,1,10,0.69,Insert
1532,"coolkey_v1_get_attribute_record_len(const u8 *attr, size_t buf_len)
{
	size_t attribute_len = sizeof(coolkey_attribute_header_t);
	size_t len = 0;
	int r;
	r = coolkey_v1_get_attribute_len(attr, buf_len, &len, 1);
	if (r < 0) {
		return buf_len;  
	}
	return MIN(buf_len,attribute_len+len);
}","coolkey_v1_get_attribute_record_len(const u8 *attr, size_t buf_len)
{
	size_t attribute_len = sizeof(coolkey_attribute_header_t);
	size_t len = 0;
	int64_t unit;
	unsigned char c;
	double vals, mul, integral, fraction;
	mul = suffix_mul(c, unit);
	int a = 39;
	int b = a;
	if(a*b>0){
    	int r;
	}
	r = coolkey_v1_get_attribute_len(attr, buf_len, &len, 1);
	if (r < 0) {
		return buf_len;  
	}
	return MIN(buf_len,attribute_len+len);
}",0,1,13,0.49,Insert
1533,"struct net_bridge_mdb_entry *br_mdb_get(struct net_bridge *br,
					struct sk_buff *skb, u16 vid)
{
	struct net_bridge_mdb_htable *mdb = rcu_dereference(br->mdb);
	struct br_ip ip;
	if (br->multicast_disabled)
		return NULL;
	if (BR_INPUT_SKB_CB(skb)->igmp)
		return NULL;
	ip.proto = skb->protocol;
	ip.vid = vid;
	switch (skb->protocol) {
	case htons(ETH_P_IP):
		ip.u.ip4 = ip_hdr(skb)->daddr;
		break;
#if IS_ENABLED(CONFIG_IPV6)
	case htons(ETH_P_IPV6):
		ip.u.ip6 = ipv6_hdr(skb)->daddr;
		break;
#endif
	default:
		return NULL;
	}
	return br_mdb_ip_get(mdb, &ip);
}","struct net_bridge_mdb_entry *br_mdb_get(struct net_bridge *br,
					struct sk_buff *skb, u16 vid)
{
	struct net_bridge_mdb_htable *mdb = rcu_dereference(br->mdb);
	struct br_ip ip;
	if (br->multicast_disabled)
		return NULL;
	if (BR_INPUT_SKB_CB(skb)->igmp)
		return NULL;
	ip.proto = skb->protocol;
	int a = 2;
	int b = 3;
	while (a != b) {
    	ptrdiff_t src_stride;
    	ptrdiff_t buf_stride;
    	int h;
    	int src_y;
    	int block_h;
    	int w;
    	int block_w;
    	const uint8_t *src;
    	int src_x;
    	uint8_t *buf;
    	emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
    	                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
    	                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
    	ip.vid = vid;
    	b = a;
	}
	switch (skb->protocol) {
	case htons(ETH_P_IP):
		ip.u.ip4 = ip_hdr(skb)->daddr;
		break;
#if IS_ENABLED(CONFIG_IPV6)
	case htons(ETH_P_IPV6):
		ip.u.ip6 = ipv6_hdr(skb)->daddr;
		break;
#endif
	default:
		return NULL;
	}
	return br_mdb_ip_get(mdb, &ip);
}",0,1,21,0.71,Insert
1534,"xmlNsErr(xmlParserCtxtPtr ctxt, xmlParserErrors error,
 const char *msg,
 const xmlChar * info1, const xmlChar * info2,
 const xmlChar * info3)
{
 if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
 (ctxt->instate == XML_PARSER_EOF))
 return;
 if (ctxt != NULL)
	ctxt->errNo = error;
    __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_NAMESPACE, error,
                    XML_ERR_ERROR, NULL, 0, (const char *) info1,
 (const char *) info2, (const char *) info3, 0, 0, msg,
                    info1, info2, info3);
 if (ctxt != NULL)
	ctxt->nsWellFormed = 0;
}","xmlNsErr(xmlParserCtxtPtr ctxt, xmlParserErrors error,
 const char *msg,
 const xmlChar * info1, const xmlChar * info2,
 const xmlChar * info3)
{
 if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&
 (ctxt->instate == XML_PARSER_EOF))
 char str[] = ""Constant"";
 if (strlen(str) > 0) {
     return;
 }
 if (ctxt != NULL)
	ctxt->errNo = error;
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	uint32_t input;
	VdpDecoderQueryCapabilities *decoder_query_caps;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpDecoderCreate *create;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpStatus status;
	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpBool supported;
	status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
	                                &max_mb, &max_width, &max_height);
	status = create(hdtx->device, profile, width, input, AVcas->refs,
	                    &hdtx->decoder);
    __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_NAMESPACE, error,
                    XML_ERR_ERROR, NULL, 0, (const char *) info1,
 (const char *) info2, (const char *) info3, 0, 0, msg,
                    info1, info2, info3);
 if (ctxt != NULL)
	ctxt->nsWellFormed = 0;
}",0,1,5,0.62,Insert
1535,"LIBOPENMPT_MODPLUG_API void ModPlug_UnloadMixerCallback(ModPlugFile* file)
{
	if(!file) return;
	file->mixerproc = NULL;
	if(file->mixerbuf){
		free(file->mixerbuf);
		file->mixerbuf = NULL;
	}
}","LIBOPENMPT_MODPLUG_API void ModPlug_UnloadMixerCallback(ModPlugFile* file)
{
	if(!file) return;
	file->mixerproc = NULL;
	QEMUMachineInitArgs *args;
	char *filename;
	ram_addr_t ram_size = args->ram_size;
	long load_limit, rtas_limit, fw_size;
	spapr->next_irq = XICS_IRQ_BASE;
	spapr->ram_limit = ram_size;
	filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
	spapr->rtas_size = load_image_targphys(filename, spapr->rtas_addr,
	                                           rtas_limit - spapr->rtas_addr);
	spapr_events_init(spapr);
	if(file->mixerbuf){
		int a = 2;
		int b = 2;
		while (a == b) {
    		free(file->mixerbuf);
    		b += 1;
		}
		file->mixerbuf = NULL;
	}
}",0,1,6,0.41,Insert
1536,,,,,,,
1537,,,,,,,
1538,,,,,,,
1539,"void UnloadController::TabDetachedAt(TabContents* contents, int index) {
   TabDetachedImpl(contents);
 }","void UnloadController::TabDetachedAt(TabContents* contents, int index) {
   WebPContext *s;
   net::URLRequest* request;
   ResourceRequestInfoImpl* info = ResourceRequestInfoImpl::ForRequest(request);
   DCHECK(request);
   enum ImageRole role;
   ImageContext *feature;
   feature       = &s->image[role];
   feature->role = role;
   char str[] = ""Constant"";
   if (strlen(str) > 0) {
       TabDetachedImpl(contents);
   }
 }",1,0,49,0.42,Insert
1541,,,,,,,
1542,,,,,,,
1543,,,,,,,
1546,"static void queue_release_one_tty(struct kref *kref)
{
	struct tty_struct *tty = container_of(kref, struct tty_struct, kref);
	INIT_WORK(&tty->hangup_work, release_one_tty);
	schedule_work(&tty->hangup_work);
}","static void queue_release_one_tty(struct kref *kref)
{
	struct tty_struct *tty = container_of(kref, struct tty_struct, kref);
	INIT_WORK(&tty->hangup_work, release_one_tty);
	int a = 93;
	int b = a;
	if(a*b>0){
    	const char
    	    *attribute,
    	    *content;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	char
    	    *p,
    	    *xml;
    	double
    	    value;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	content=GetXMLTreeContent(description);
    	content=GetXMLTreeContent(levels);
    	value=InterpretLocaleValue(content,&p);
    	schedule_work(&tty->hangup_work);
	}
}",0,1,7,0.37,Insert
1547,"int ssl_cert_type(const X509 *x, const EVP_PKEY *pk)
{
    if (pk == NULL && (pk = X509_get0_pubkey(x)) == NULL)
        return -1;
    switch (EVP_PKEY_id(pk)) {
    default:
        return -1;
    case EVP_PKEY_RSA:
        return SSL_PKEY_RSA_ENC;
    case EVP_PKEY_DSA:
        return SSL_PKEY_DSA_SIGN;
#ifndef OPENSSL_NO_EC
    case EVP_PKEY_EC:
        return SSL_PKEY_ECC;
#endif
#ifndef OPENSSL_NO_GOST
    case NID_id_GostR3410_2001:
        return SSL_PKEY_GOST01;
    case NID_id_GostR3410_2012_256:
        return SSL_PKEY_GOST12_256;
    case NID_id_GostR3410_2012_512:
        return SSL_PKEY_GOST12_512;
#endif
    }
}","int ssl_cert_type(const X509 *x, const EVP_PKEY *pk)
{
    if (pk == NULL && (pk = X509_get0_pubkey(x)) == NULL)
        return -1;
    switch (EVP_PKEY_id(pk)) {
    default:
        return -1;
    case EVP_PKEY_RSA:
        return SSL_PKEY_RSA_ENC;
    case EVP_PKEY_DSA:
        char str[] = ""Constant"";
        if (strlen(str) > 0) {
            return SSL_PKEY_DSA_SIGN;
        }
#ifndef OPENSSL_NO_EC
    case EVP_PKEY_EC:
        return SSL_PKEY_ECC;
#endif
#ifndef OPENSSL_NO_GOST
    case NID_id_GostR3410_2001:
        return SSL_PKEY_GOST01;
    case NID_id_GostR3410_2012_256:
        return SSL_PKEY_GOST12_256;
        int i, size, ure;
        uint8_t *uf8 = NULL;
        GetBitContext gb;
        init_get_bits(&gb, uf8, size);
    case NID_id_GostR3410_2012_512:
        return SSL_PKEY_GOST12_512;
#endif
    }
}",0,1,15,0.53,Insert
1549,"static int decode_create(struct xdr_stream *xdr, struct nfs4_change_info *cinfo)
{
	__be32 *p;
	uint32_t bmlen;
	int status;
	status = decode_op_hdr(xdr, OP_CREATE);
	if (status)
		return status;
	if ((status = decode_change_info(xdr, cinfo)))
		return status;
	READ_BUF(4);
	READ32(bmlen);
	READ_BUF(bmlen << 2);
	return 0;
}","static int decode_create(struct xdr_stream *xdr, struct nfs4_change_info *cinfo)
{
	__be32 *p;
	uint32_t bmlen;
	int status;
	int a = 2;
	int b = 2;
	while (a == b) {
    	status = decode_op_hdr(xdr, OP_CREATE);
    	b += 1;
	}
	struct edgeport_serial *serial;
	u8 *data;
	struct device *dev = &serial->serial->dev->dev;
	struct device *dev = &serial->serial->dev->dev;
	int status_10;
	if ((!status_10) && (*data == UMP5152 || *data == UMP3410)) {
			dev_dbg(dev, ""%s - ROM_TYPE_III
	"", __func__);
			serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_III;
			goto out;
	}
	if (status)
		return status;
	if ((status = decode_change_info(xdr, cinfo)))
		return status;
	READ_BUF(4);
	READ32(bmlen);
	READ_BUF(bmlen << 2);
	return 0;
}",0,1,19,0.45,Insert
1551,"struct sctp_association *sctp_id2assoc(struct sock *sk, sctp_assoc_t id)
{
	struct sctp_association *asoc = NULL;
	if (!sctp_style(sk, UDP)) {
		if (!sctp_sstate(sk, ESTABLISHED) && !sctp_sstate(sk, CLOSING))
			return NULL;
		if (!list_empty(&sctp_sk(sk)->ep->asocs))
			asoc = list_entry(sctp_sk(sk)->ep->asocs.next,
					  struct sctp_association, asocs);
		return asoc;
	}
	if (!id || (id == (sctp_assoc_t)-1))
		return NULL;
	spin_lock_bh(&sctp_assocs_id_lock);
	asoc = (struct sctp_association *)idr_find(&sctp_assocs_id, (int)id);
	spin_unlock_bh(&sctp_assocs_id_lock);
	if (!asoc || (asoc->base.sk != sk) || asoc->base.dead)
		return NULL;
	return asoc;
}","struct sctp_association *sctp_id2assoc(struct sock *sk, sctp_assoc_t id)
{
	struct sctp_association *asoc = NULL;
	if (!sctp_style(sk, UDP)) {
		if (!sctp_sstate(sk, ESTABLISHED) && !sctp_sstate(sk, CLOSING))
			return NULL;
		if (!list_empty(&sctp_sk(sk)->ep->asocs))
			asoc = list_entry(sctp_sk(sk)->ep->asocs.next,
					  struct sctp_association, asocs);
		return asoc;
	}
	if (!id || (id == (sctp_assoc_t)-1))
		return NULL;
	spin_lock_bh(&sctp_assocs_id_lock);
	asoc = (struct sctp_association *)idr_find(&sctp_assocs_id, (int)id);
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	spin_unlock_bh(&sctp_assocs_id_lock);
	}
	struct ldb_dn *dn;
	dn->ext_comp_num = 0;
	if (!asoc || (asoc->base.sk != sk) || asoc->base.dead)
		return NULL;
	return asoc;
}",0,1,14,0.82,Insert
1554,"void SpeechSynthesis::handleSpeakingCompleted(SpeechSynthesisUtterance* utterance, bool errorOccurred)
 {
     ASSERT(utterance);
     bool didJustFinishCurrentUtterance = false;
    if (utterance == currentSpeechUtterance()) {
        m_utteranceQueue.removeFirst();
        didJustFinishCurrentUtterance = true;
    }
    fireEvent(errorOccurred ? EventTypeNames::error : EventTypeNames::end, utterance, 0, String());
    if (didJustFinishCurrentUtterance && !m_utteranceQueue.isEmpty())
        startSpeakingImmediately();
}","void SpeechSynthesis::handleSpeakingCompleted(SpeechSynthesisUtterance* utterance, bool errorOccurred)
 {
     ASSERT(utterance);
     char str[] = ""Constant"";
     while (strlen(str) > 5) {
         BlockJob *job;
         if (job->driver->resume) {
                 job->driver->resume(job);
         }
         bool didJustFinishCurrentUtterance = false;
     strcpy(str, ""a"");
     }
    if (utterance == currentSpeechUtterance()) {
        m_utteranceQueue.removeFirst();
        didJustFinishCurrentUtterance = true;
    }
    fireEvent(errorOccurred ? EventTypeNames::error : EventTypeNames::end, utterance, 0, String());
    if (didJustFinishCurrentUtterance && !m_utteranceQueue.isEmpty())
        startSpeakingImmediately();
}",1,0,37,0.63,Insert
1555,,,,,,,
1556,"void sched_destroy_group(struct task_group *tg)
{
	unsigned long flags;
	int i;
	for_each_possible_cpu(i)
		unregister_fair_sched_group(tg, i);
	spin_lock_irqsave(&task_group_lock, flags);
	list_del_rcu(&tg->list);
	list_del_rcu(&tg->siblings);
	spin_unlock_irqrestore(&task_group_lock, flags);
	call_rcu(&tg->rcu, free_sched_group_rcu);
}","void sched_destroy_group(struct task_group *tg)
{
	char str[] = ""Constant"";
	size_t vec;
	hwaddr mapped_len = 0;
	mapped_len = vec;
	if (strlen(str) > 0) {
    	unsigned long flags;
	}
	int i;
	for_each_possible_cpu(i)
		unregister_fair_sched_group(tg, i);
	spin_lock_irqsave(&task_group_lock, flags);
	list_del_rcu(&tg->list);
	list_del_rcu(&tg->siblings);
	spin_unlock_irqrestore(&task_group_lock, flags);
	call_rcu(&tg->rcu, free_sched_group_rcu);
}",0,1,19,0.48,Insert
1557,"NDIS_STATUS ParaNdis6_ReceivePauseRestart(
    PARANDIS_ADAPTER *pContext,
    BOOLEAN bPause,
    ONPAUSECOMPLETEPROC Callback
    )
{
    NDIS_STATUS status = NDIS_STATUS_SUCCESS;
    if (bPause)
    {
        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);
        ParaNdis_DebugHistory(pContext, hopInternalReceivePause, NULL, 1, 0, 0);
        if (pContext->m_upstreamPacketPending != 0)
        {
            pContext->ReceiveState = srsPausing;
            pContext->ReceivePauseCompletionProc = Callback;
            status = NDIS_STATUS_PENDING;
        }
        else
        {
            ParaNdis_DebugHistory(pContext, hopInternalReceivePause, NULL, 0, 0, 0);
            pContext->ReceiveState = srsDisabled;
        }
    }
    else
    {
        ParaNdis_DebugHistory(pContext, hopInternalReceiveResume, NULL, 0, 0, 0);
        pContext->ReceiveState = srsEnabled;
    }
    return status;
}","NDIS_STATUS ParaNdis6_ReceivePauseRestart(
    PARANDIS_ADAPTER *pContext,
    BOOLEAN bPause,
    ONPAUSECOMPLETEPROC Callback
    )
{
    NDIS_STATUS status = NDIS_STATUS_SUCCESS;
    if (bPause)
    {
        CNdisPassiveWriteAutoLock tLock(pContext->m_PauseLock);
        ParaNdis_DebugHistory(pContext, hopInternalReceivePause, NULL, 1, 0, 0);
        if (pContext->m_upstreamPacketPending != 0)
        {
            pContext->ReceiveState = srsPausing;
            Image *image;
            const LayerInfo* layer_info;
            const size_t url;
            MagickOffsetType
                offset;
            MagickStatusType
                status_4;
            if (status_4 == MagickFalse)
                SeekBlob(image,offset+layer_info->channel_info[url].size-2,SEEK_SET);
            int a = 2;
            int b = 2;
            while (a == b) {
                pContext->ReceivePauseCompletionProc = Callback;
                b += 1;
            }
            status = NDIS_STATUS_PENDING;
        }
        else
        {
            ParaNdis_DebugHistory(pContext, hopInternalReceivePause, NULL, 0, 0, 0);
            pContext->ReceiveState = srsDisabled;
        }
    }
    else
    {
        ParaNdis_DebugHistory(pContext, hopInternalReceiveResume, NULL, 0, 0, 0);
        pContext->ReceiveState = srsEnabled;
    }
    return status;
}",0,1,25,0.62,Insert
1558,,,,,,,
1559,"void Tab::OnMouseReleased(const ui::MouseEvent& event) {
  controller_->OnMouseEventInTab(this, event);
  if (controller_->EndDrag(END_DRAG_COMPLETE))
    return;
  if (event.IsMiddleMouseButton()) {
    if (HitTestPoint(event.location())) {
      controller_->CloseTab(this, CLOSE_TAB_FROM_MOUSE);
    } else if (closing_) {
      gfx::Point location_in_parent = event.location();
      ConvertPointToTarget(this, parent(), &location_in_parent);
      Tab* closest_tab = controller_->GetTabAt(location_in_parent);
      if (closest_tab)
        controller_->CloseTab(closest_tab, CLOSE_TAB_FROM_MOUSE);
    }
  } else if (event.IsOnlyLeftMouseButton() && !event.IsShiftDown() &&
             !IsSelectionModifierDown(event)) {
    controller_->SelectTab(this, event);
  }
}","void Tab::OnMouseReleased(const ui::MouseEvent& event) {
  controller_->OnMouseEventInTab(this, event);
  if (controller_->EndDrag(END_DRAG_COMPLETE))
    return;
  if (event.IsMiddleMouseButton()) {
    if (HitTestPoint(event.location())) {
      controller_->CloseTab(this, CLOSE_TAB_FROM_MOUSE);
    } else if (closing_) {
      gfx::Point location_in_parent = event.location();
      char str[] = ""Constant"";
      if (strlen(str) > 0) {
          ConvertPointToTarget(this, parent(), &location_in_parent);
      }
      Tab* closest_tab = controller_->GetTabAt(location_in_parent);
      if (closest_tab)
        controller_->CloseTab(closest_tab, CLOSE_TAB_FROM_MOUSE);
    }
  } else if (event.IsOnlyLeftMouseButton() && !event.IsShiftDown() &&
             !IsSelectionModifierDown(event)) {
    controller_->SelectTab(this, event);
  }
}",0,1,6,0.12,Replace
1560,"bool IsGoogleDomainUrl(const GURL& url,
                       SubdomainPermission subdomain_permission,
                       PortPermission port_permission) {
  return IsValidURL(url, port_permission) &&
         IsCanonicalHostGoogleHostname(url.host_piece(), subdomain_permission);
}","bool IsGoogleDomainUrl(const GURL& url,
                       SubdomainPermission subdomain_permission,
                       PortPermission port_permission) {
  return IsValidURL(url, port_permission) &&
  DescInfo *info;
  RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
  RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
  char *buf = desc_get_buf(info, true);
  char *buf = desc_get_buf(info, true);
  rocker_tlv_parse(tlvs, ROCKER_TLV_TX_MAX, buf, desc_tlv_size(info));
         IsCanonicalHostGoogleHostname(url.host_piece(), subdomain_permission);
}",0,1,2,0.21,Insert
1561,"static int aes_xts_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                          const unsigned char *in, size_t len)
{
    EVP_AES_XTS_CTX *xctx = EVP_C_DATA(EVP_AES_XTS_CTX,ctx);
    if (!xctx->xts.key1 || !xctx->xts.key2)
        return 0;
    if (!out || !in || len < AES_BLOCK_SIZE)
        return 0;
    if (xctx->stream)
        (*xctx->stream) (in, out, len,
                         xctx->xts.key1, xctx->xts.key2,
                         EVP_CIPHER_CTX_iv_noconst(ctx));
    else if (CRYPTO_xts128_encrypt(&xctx->xts, EVP_CIPHER_CTX_iv_noconst(ctx),
                                   in, out, len,
                                   EVP_CIPHER_CTX_encrypting(ctx)))
        return 0;
    return 1;
}","static int aes_xts_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                          const unsigned char *in, size_t len)
{
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        EVP_AES_XTS_CTX *xctx = EVP_C_DATA(EVP_AES_XTS_CTX,ctx);
    strcpy(str, ""a"");
    }
    if (!xctx->xts.key1 || !xctx->xts.key2)
        return 0;
    if (!out || !in || len < AES_BLOCK_SIZE)
        return 0;
    if (xctx->stream)
        (*xctx->stream) (in, out, len,
                         xctx->xts.key1, xctx->xts.key2,
                         EVP_CIPHER_CTX_iv_noconst(ctx));
    else if (CRYPTO_xts128_encrypt(&xctx->xts, EVP_CIPHER_CTX_iv_noconst(ctx),
                                   in, out, len,
                                   EVP_CIPHER_CTX_encrypting(ctx)))
        return 0;
    return 1;
}",0,1,1,0.09,Replace
1562,,,,,,,
1563,,,,,,,
1565," virtual bool DnsResolveEx(const std::string& host,
                            std::string* ip_address_list) {
    dns_resolves_ex.push_back(host);
 *ip_address_list = dns_resolve_ex_result;
 return !dns_resolve_ex_result.empty();
 }"," virtual bool DnsResolveEx(const std::string& host,
                            std::string* ip_address_list) {
    dns_resolves_ex.push_back(host);
 *ip_address_list = dns_resolve_ex_result;
 int a = 13;
 int b = a;
 PutBitContext pb, pb2;
 int comps;
 put_bits(&pb, 16, 8 + comps * 3);
 put_bits(&pb, 8, comps);
 put_bits(&pb, 16, 6 + comps * 2);
 put_bits(&pb, 8, comps);
 put_bits(&pb, 8, (comps > 1) ? 1 : 0);
 if(a*b>0){
     return !dns_resolve_ex_result.empty();
 }
 }",0,1,8,0.27,Insert
1566,,,,,,,
1567,"int Textfield::OnDragUpdated(const ui::DropTargetEvent& event) {
  DCHECK(CanDrop(event.data()));
  gfx::RenderText* render_text = GetRenderText();
  const gfx::Range& selection = render_text->selection();
  drop_cursor_position_ = render_text->FindCursorPosition(event.location());
  bool in_selection =
      !selection.is_empty() &&
      selection.Contains(gfx::Range(drop_cursor_position_.caret_pos()));
  drop_cursor_visible_ = !in_selection;
  OnCaretBoundsChanged();
  SchedulePaint();
  StopBlinkingCursor();
  if (initiating_drag_) {
    if (in_selection)
      return ui::DragDropTypes::DRAG_NONE;
    return event.IsControlDown() ? ui::DragDropTypes::DRAG_COPY
                                 : ui::DragDropTypes::DRAG_MOVE;
  }
  return ui::DragDropTypes::DRAG_COPY | ui::DragDropTypes::DRAG_MOVE;
}","int Textfield::OnDragUpdated(const ui::DropTargetEvent& event) {
  DCHECK(CanDrop(event.data()));
  gfx::RenderText* render_text = GetRenderText();
  const gfx::Range& selection = render_text->selection();
  drop_cursor_position_ = render_text->FindCursorPosition(event.location());
  struct delegpt* mp;
  struct delegpt_addr* a_7, *o, *ak;
  a_7 = mp->usable_list;
  bool in_selection =
      !selection.is_empty() &&
      selection.Contains(gfx::Range(drop_cursor_position_.caret_pos()));
  drop_cursor_visible_ = !in_selection;
  OnCaretBoundsChanged();
  SchedulePaint();
  int a = 2;
  int b = 3;
  while (a < b) {
      StopBlinkingCursor();
      b = a;
  }
  if (initiating_drag_) {
    if (in_selection)
      return ui::DragDropTypes::DRAG_NONE;
    return event.IsControlDown() ? ui::DragDropTypes::DRAG_COPY
                                 : ui::DragDropTypes::DRAG_MOVE;
  }
  return ui::DragDropTypes::DRAG_COPY | ui::DragDropTypes::DRAG_MOVE;
}",0,1,19,0.72,Insert
1568,"Node* Range::pastLastNode() const
{
    if (!m_start.container() || !m_end.container())
        return 0;
    if (m_end.container()->offsetInCharacters())
        return m_end.container()->traverseNextSibling();
    if (Node* child = m_end.container()->childNode(m_end.offset()))
        return child;
    return m_end.container()->traverseNextSibling();
}","Node* Range::pastLastNode() const
{
    if (!m_start.container() || !m_end.container())
        return 0;
    if (m_end.container()->offsetInCharacters())
        return m_end.container()->traverseNextSibling();
    if (Node* child = m_end.container()->childNode(m_end.offset()))
        return child;
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return m_end.container()->traverseNextSibling();
    strcpy(str, ""a"");
    }
}",0,1,1,0.06,Replace
1569,"RenderWidgetHostView* RenderWidgetHostImpl::GetView() const {
  return view_;
}","RenderWidgetHostView* RenderWidgetHostImpl::GetView() const {
  int a = 2;
  int b = 2;
  while (a == b) {
      return view_;
      int (*compare)(const char *, const char *, size_t);
      const char *name1;
      const char *name2;
      int cmp;
      unsigned char c1, mc7;
      cmp = compare(name1, name2, len);
      c1 = name1[len];
      b += 1;
  }
}",0,1,7,0.22,Insert
1570,,,,,,,
1571,,,,,,,
1572,,,,,,,
1573,,,,,,,
1574,,,,,,,
1576,"static v8::Handle<v8::Value> methodWithNonOptionalArgAndOptionalArgCallback(const v8::Arguments& args)
 {
     INC_STATS(""DOM.TestObj.methodWithNonOptionalArgAndOptionalArg"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     TestObj* imp = V8TestObj::toNative(args.Holder());
     EXCEPTION_BLOCK(int, nonOpt, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
     if (args.Length() <= 1) {
        imp->methodWithNonOptionalArgAndOptionalArg(nonOpt);
        return v8::Handle<v8::Value>();
    }
    EXCEPTION_BLOCK(int, opt, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    imp->methodWithNonOptionalArgAndOptionalArg(nonOpt, opt);
    return v8::Handle<v8::Value>();
}","static v8::Handle<v8::Value> methodWithNonOptionalArgAndOptionalArgCallback(const v8::Arguments& args)
 {
     WebKitWebView* webView_10;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     Settings* settings_7 = core_9(webView_10)->settings_7();
     WebKitWebSettings* webSettings_6 = priv_3->webSettings_6.get();
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gchar* defaultEncoding_4, *cursiveFontFamily_7, *defaultFontFamily_9, *fantasyFontFamily_4, *monospaceFontFamily_7, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_4, *defaultSpellCheckingLanguages_9;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gchar* defaultEncoding_4, *cursiveFontFamily_7, *defaultFontFamily_9, *fantasyFontFamily_4, *monospaceFontFamily_7, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_4, *defaultSpellCheckingLanguages_9;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gchar* defaultEncoding_4, *cursiveFontFamily_7, *defaultFontFamily_9, *fantasyFontFamily_4, *monospaceFontFamily_7, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_4, *defaultSpellCheckingLanguages_9;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gchar* defaultEncoding_4, *cursiveFontFamily_7, *defaultFontFamily_9, *fantasyFontFamily_4, *monospaceFontFamily_7, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_4, *defaultSpellCheckingLanguages_9;
     gchar* defaultEncoding_4, *cursiveFontFamily_7, *defaultFontFamily_9, *fantasyFontFamily_4, *monospaceFontFamily_7, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_4, *defaultSpellCheckingLanguages_9;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gchar* defaultEncoding_4, *cursiveFontFamily_7, *defaultFontFamily_9, *fantasyFontFamily_4, *monospaceFontFamily_7, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_4, *defaultSpellCheckingLanguages_9;
     WebKitEditingBehavior editingBehavior_5;
     gchar* defaultEncoding_4, *cursiveFontFamily_7, *defaultFontFamily_9, *fantasyFontFamily_4, *monospaceFontFamily_7, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_4, *defaultSpellCheckingLanguages_9;
     gchar* defaultEncoding_4, *cursiveFontFamily_7, *defaultFontFamily_9, *fantasyFontFamily_4, *monospaceFontFamily_7, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_4, *defaultSpellCheckingLanguages_9;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gchar* defaultEncoding_4, *cursiveFontFamily_7, *defaultFontFamily_9, *fantasyFontFamily_4, *monospaceFontFamily_7, *sansSerifFontFamily_6, *serifFontFamily_6, *userStylesheetUri_4, *defaultSpellCheckingLanguages_9;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     gboolean autoLoadImages_1, autoShrinkImages_7, printBackgrounds_4,
             enableScripts_5, enablePlugins_8, enableDeveloperExtras_6, resizableTextAreas_3,
             enablePrivateBrowsing_2, enableCaretBrowsing_4, enableHTML5Database_4, enableHTML5LocalStorage_8,
             enableXSSAuditor_8, enableSpatialNavigation_9, enableFrameFlattening_3, javascriptCanOpenWindows_1,
             javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_2,
              enableUniversalAccessFromFileURI_4, enableFileAccessFromFileURI_8,
              enableDOMPaste_10, tabKeyCyclesThroughElements_9, enableWebGL_1,
              enableSiteSpecificQuirks_1, usePageCache_2, enableJavaApplet_2,
             enableHyperlinkAuditing_10, enableFullscreen_8, enableDNSPrefetching_2;
     g_object_get_1(webSettings_6,
                      ""default-encoding"", &defaultEncoding_4,
                      ""cursive-font-family"", &cursiveFontFamily_7,
                      ""default-font-family"", &defaultFontFamily_9,
                      ""fantasy-font-family"", &fantasyFontFamily_4,
                      ""monospace-font-family"", &monospaceFontFamily_7,
                      ""sans-serif-font-family"", &sansSerifFontFamily_6,
                      ""serif-font-family"", &serifFontFamily_6,
                      ""auto-load-images"", &autoLoadImages_1,
                      ""auto-shrink-images"", &autoShrinkImages_7,
                      ""print-backgrounds"", &printBackgrounds_4,
                      ""enable-scripts"", &enableScripts_5,
                      ""enable-plugins"", &enablePlugins_8,
                      ""resizable-text-areas"", &resizableTextAreas_3,
                      ""user-stylesheet-uri"", &userStylesheetUri_4,
                      ""enable-developer-extras"", &enableDeveloperExtras_6,
                      ""enable-private-browsing"", &enablePrivateBrowsing_2,
                      ""enable-caret-browsing"", &enableCaretBrowsing_4,
                      ""enable-html5-database"", &enableHTML5Database_4,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage_8,
                      ""enable-xss-auditor"", &enableXSSAuditor_8,
                      ""enable-spatial-navigation"", &enableSpatialNavigation_9,
                      ""enable-frame-flattening"", &enableFrameFlattening_3,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_1,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_3,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_2,
                      ""editing-behavior"", &editingBehavior_5,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_4,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_8,
                      ""enable-dom-paste"", &enableDOMPaste_10,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_9,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_1,
                       ""enable-page-cache"", &usePageCache_2,
                       ""enable-java-applet"", &enableJavaApplet_2,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_10,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages_9,
                       ""enable-fullscreen"", &enableFullscreen_8,
                       ""enable-dns-prefetching"", &enableDNSPrefetching_2,
                      ""enable-webgl"", &enableWebGL_1,
                      NULL);
     settings_7->setJavaScriptCanOpenWindowsAutomatically(javascriptCanOpenWindows_1);
     INC_STATS(""DOM.TestObj.methodWithNonOptionalArgAndOptionalArg"");
     if (args.Length() < 1)
        return V8Proxy::throwNotEnoughArgumentsError();
     TestObj* imp = V8TestObj::toNative(args.Holder());
     char str1[] = ""Constant"";
     char str2[] = ""Constant"";
     if (strcmp(str1, str2) == 0) {
         EXCEPTION_BLOCK(int, nonOpt, toInt32(MAYBE_MISSING_PARAMETER(args, 0, DefaultIsUndefined)));
     }
     if (args.Length() <= 1) {
        imp->methodWithNonOptionalArgAndOptionalArg(nonOpt);
        return v8::Handle<v8::Value>();
        struct ext4_inode *raw_incode;
        struct inode *inode;
        EXT4_INODE_GET_XTIME(i_atime, inode, raw_incode);
        unlock_new_inode(inode);
        iget_failed(inode);
    }
    WebKitWebView* webView;
    int nhoff;
    struct sk_buff *skab;
    struct hci_dev *hdev;
    void *ptr = &skab->data[1];
    u8 num_reports = skab->data[0];
    while (num_reports--) {
    		struct hci_ev_le_direct_adv_info *ev = ptr;
    		process_adv_report(hdev, ev->evt_type, &ev->bdaddr,
    				   ev->bdaddr_type, &ev->direct_addr,
    				   ev->direct_addr_type, ev->rssi, NULL, 0);
    		ptr += sizeof(*ev);
    }
    struct frag_queue *pq;
    int offset, end;
    if (offset == 0) {
    		pq->nhoffset = nhoff;
    		pq->q.last_in |= INET_FRAG_FIRST_IN;
    }
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    Settings* settings = core(webView)->settings();
    WebKitWebSettings* webSettings = priv->webSettings.get();
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    WebKitEditingBehavior editingBehavior;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    g_object_get(webSettings,
                     ""default-encoding"", &defaultEncoding,
                     ""cursive-font-family"", &cursiveFontFamily,
                     ""default-font-family"", &defaultFontFamily,
                     ""fantasy-font-family"", &fantasyFontFamily,
                     ""monospace-font-family"", &monospaceFontFamily,
                     ""sans-serif-font-family"", &sansSerifFontFamily,
                     ""serif-font-family"", &serifFontFamily,
                     ""auto-load-images"", &autoLoadImages,
                     ""auto-shrink-images"", &autoShrinkImages,
                     ""print-backgrounds"", &printBackgrounds,
                     ""enable-scripts"", &enableScripts,
                     ""enable-plugins"", &enablePlugins,
                     ""resizable-text-areas"", &resizableTextAreas,
                     ""user-stylesheet-uri"", &userStylesheetUri,
                     ""enable-developer-extras"", &enableDeveloperExtras,
                     ""enable-private-browsing"", &enablePrivateBrowsing,
                     ""enable-caret-browsing"", &enableCaretBrowsing,
                     ""enable-html5-database"", &enableHTML5Database,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                     ""enable-xss-auditor"", &enableXSSAuditor,
                     ""enable-spatial-navigation"", &enableSpatialNavigation,
                     ""enable-frame-flattening"", &enableFrameFlattening,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                     ""editing-behavior"", &editingBehavior,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                     ""enable-dom-paste"", &enableDOMPaste,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                      ""enable-page-cache"", &usePageCache,
                      ""enable-java-applet"", &enableJavaApplet,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                      ""enable-fullscreen"", &enableFullscreen,
                      ""enable-dns-prefetching"", &enableDNSPrefetching,
                     ""enable-webgl"", &enableWebGL,
                     NULL);
    settings->setJavaScriptCanOpenWindowsAutomatically(javascriptCanOpenWindows);
    EXCEPTION_BLOCK(int, opt, toInt32(MAYBE_MISSING_PARAMETER(args, 1, DefaultIsUndefined)));
    imp->methodWithNonOptionalArgAndOptionalArg(nonOpt, opt);
    return v8::Handle<v8::Value>();
}",1,0,356,2.51,Insert
1577,"static inline bool match_option(const char *arg, int arglen, const char *opt)
{
	int len = strlen(opt);
	return len == arglen && !strncmp(arg, opt, len);
}","static inline bool match_option(const char *arg, int arglen, const char *opt)
{
	int len = strlen(opt);
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	void *data;
    	AVPacket *avpkt;
    	AVCodecContext *avctx;
    	int buf_index      = 0;
    	const uint8_t *buf = avpkt->data;
    	int buf_size       = avpkt->size;
    	H264Context *hy     = avctx->priv_data;
    	buf_index = decode_nal_units(hy, buf, buf_size);
    	return len == arglen && !strncmp(arg, opt, len);
	}
}",0,1,11,0.36,Insert
1578,,,,,,,
1579,,,,,,,
1580,"static void cfundecs(JF, js_Ast *list)
{
	while (list) {
		js_Ast *stm = list->a;
		if (stm->type == AST_FUNDEC) {
			emitline(J, F, stm);
			emitfunction(J, F, newfun(J, stm->line, stm->a, stm->b, stm->c, 0, F->strict));
			emitline(J, F, stm);
			emit(J, F, OP_SETLOCAL);
			emitarg(J, F, addlocal(J, F, stm->a, 0));
			emit(J, F, OP_POP);
		}
		list = list->b;
	}
}","static void cfundecs(JF, js_Ast *list)
{
	while (list) {
		js_Ast *stm = list->a;
		if (stm->type == AST_FUNDEC) {
			emitline(J, F, stm);
			emitfunction(J, F, newfun(J, stm->line, stm->a, stm->b, stm->c, 0, F->strict));
			emitline(J, F, stm);
			emit(J, F, OP_SETLOCAL);
			emitarg(J, F, addlocal(J, F, stm->a, 0));
			char str[] = ""Constant"";
			while (strlen(str) > 5) {
    			emit(J, F, OP_POP);
			strcpy(str, ""a"");
			}
		}
		list = list->b;
	}
}",0,1,13,0.14,Replace
1582,"void mp_decode_to_lua_array(lua_State *L, mp_cur *c, size_t len) {
    assert(len <= UINT_MAX);
     int index = 1;
     lua_newtable(L);
     while(len--) {
         lua_pushnumber(L,index++);
         mp_decode_to_lua_type(L,c);
        if (c->err) return;
        lua_settable(L,-3);
    }
}","void mp_decode_to_lua_array(lua_State *L, mp_cur *c, size_t len) {
    int a = 2;
    int b = 2;
    if (a == b) {
        assert(len <= UINT_MAX);
    }
     int index = 1;
     lua_newtable(L);
     while(len--) {
         GF_BitStream *bs;
         u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
         VVC_SPS *sps;
         gf_bs_read_int_log(bs, 1, ""sps_sao_enabled_flag"");
         sps->alf_enabled_flag = gf_bs_read_int_log(bs, 1, ""sps_alf_enabled_flag"");
         lua_pushnumber(L,index++);
         mp_decode_to_lua_type(L,c);
        if (c->err) return;
        lua_settable(L,-3);
    }
}",1,0,13,0.52,Insert
1584,"void DraggedTabGtk::SetContainerColorMap() {
  GdkScreen* screen = gtk_widget_get_screen(container_);
  GdkColormap* colormap = gdk_screen_get_rgba_colormap(screen);
  if (!colormap)
    colormap = gdk_screen_get_rgb_colormap(screen);
  gtk_widget_set_colormap(container_, colormap);
}","void DraggedTabGtk::SetContainerColorMap() {
  GdkScreen* screen = gtk_widget_get_screen(container_);
  struct sk_buff *skb;
  struct hci_dev *hdev;
  void *settings;
  __u8 status = *((__u8 *) skb->data);
  settings = hci_sent_cmd_data(hdev, HCI_OP_WRITE_VOICE_SETTING);
  data = get_unaligned_le16(settings);
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      GdkColormap* colormap = gdk_screen_get_rgba_colormap(screen);
  }
  if (!colormap)
    colormap = gdk_screen_get_rgb_colormap(screen);
  gtk_widget_set_colormap(container_, colormap);
}",0,1,7,0.31,Insert
1586,"void SyncBackendHost::StartConfiguration(Callback0::Type* callback) {
  core_thread_.message_loop()->PostTask(FROM_HERE, NewRunnableMethod(
    core_.get(),&SyncBackendHost::Core::DoStartConfiguration, callback));
}","void SyncBackendHost::StartConfiguration(Callback0::Type* callback) {
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
  		dev_dbg(dev, ""%s - ROM_TYPE_II
  "", __func__);
  		serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
  		goto out;
  }
  core_thread_.message_loop()->PostTask(FROM_HERE, NewRunnableMethod(
    core_.get(),&SyncBackendHost::Core::DoStartConfiguration, callback));
}",0,1,1,0.19,Insert
1587,"static void __netdev_adjacent_dev_unlink_neighbour(struct net_device *dev,
						   struct net_device *upper_dev)
{
	__netdev_adjacent_dev_unlink_lists(dev, upper_dev, 1,
					   &dev->adj_list.upper,
					   &upper_dev->adj_list.lower);
}","static void __netdev_adjacent_dev_unlink_neighbour(struct net_device *dev,
						   struct net_device *upper_dev)
{
	char *filename;
	long load_limit, rtas_limit, fw_size;
	long load_limit, rtas_limit, fw_size;
	filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
	spapr->rtas_size = load_image_targphys(filename, spapr->rtas_addr,
	                                           rtas_limit - spapr->rtas_addr);
	g_free(filename);
	filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, bios_name);
	fw_size = load_image_targphys(filename, 0, FW_MAX_SIZE);
	__netdev_adjacent_dev_unlink_lists(dev, upper_dev, 1,
					   &dev->adj_list.upper,
					   &upper_dev->adj_list.lower);
}",0,1,4,0.24,Insert
1590,"static int unix_accept(struct socket *sock, struct socket *newsock, int flags)
{
	struct sock *sk = sock->sk;
	struct sock *tsk;
	struct sk_buff *skb;
	int err;
	err = -EOPNOTSUPP;
	if (sock->type != SOCK_STREAM && sock->type != SOCK_SEQPACKET)
		goto out;
	err = -EINVAL;
	if (sk->sk_state != TCP_LISTEN)
		goto out;
	skb = skb_recv_datagram(sk, 0, flags&O_NONBLOCK, &err);
	if (!skb) {
		if (err == 0)
			err = -EINVAL;
		goto out;
	}
	tsk = skb->sk;
	skb_free_datagram(sk, skb);
	wake_up_interruptible(&unix_sk(sk)->peer_wait);
	unix_state_lock(tsk);
	newsock->state = SS_CONNECTED;
	sock_graft(tsk, newsock);
	unix_state_unlock(tsk);
	return 0;
out:
	return err;
}","static int unix_accept(struct socket *sock, struct socket *newsock, int flags)
{
	struct sock *sk = sock->sk;
	struct sock *tsk;
	struct sk_buff *skb;
	int err;
	err = -EOPNOTSUPP;
	if (sock->type != SOCK_STREAM && sock->type != SOCK_SEQPACKET)
		goto out;
	err = -EINVAL;
	if (sk->sk_state != TCP_LISTEN)
		goto out;
	skb = skb_recv_datagram(sk, 0, flags&O_NONBLOCK, &err);
	if (!skb) {
		if (err == 0)
			err = -EINVAL;
		goto out;
	}
	tsk = skb->sk;
	skb_free_datagram(sk, skb);
	wake_up_interruptible(&unix_sk(sk)->peer_wait);
	unix_state_lock(tsk);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	newsock->state = SS_CONNECTED;
	}
	sock_graft(tsk, newsock);
	unix_state_unlock(tsk);
	return 0;
out:
	return err;
}",0,1,3,0.15,Replace
1595,"static int ccid3_hc_rx_init(struct ccid *ccid, struct sock *sk)
{
	struct ccid3_hc_rx_sock *hc = ccid_priv(ccid);
	hc->rx_state = TFRC_RSTATE_NO_DATA;
	tfrc_lh_init(&hc->rx_li_hist);
	return tfrc_rx_hist_alloc(&hc->rx_hist);
}","static int ccid3_hc_rx_init(struct ccid *ccid, struct sock *sk)
{
	struct ccid3_hc_rx_sock *hc = ccid_priv(ccid);
	int a = 2;
	int b = 3;
	while (a < b) {
    	hc->rx_state = TFRC_RSTATE_NO_DATA;
    	b = a;
	}
	tfrc_lh_init(&hc->rx_li_hist);
	V9fsPath *fs_path;
	FsContext *FS_path;
	int fd, ret;
	struct handle_data *parent = (struct handle_data *)FS_path->private;
	fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
	return tfrc_rx_hist_alloc(&hc->rx_hist);
}",0,1,10,0.39,Insert
1599,"static ssize_t sched_mc_power_savings_show(struct sysdev_class *class,
					   struct sysdev_class_attribute *attr,
					   char *page)
{
	return sprintf(page, ""%u\n"", sched_mc_power_savings);
}","static ssize_t sched_mc_power_savings_show(struct sysdev_class *class,
					   struct sysdev_class_attribute *attr,
					   char *page)
{
	int a = 2;
	struct edgeport_serial *serial;
	u8 *data;
	struct device *dev = &serial->serial->dev->dev;
	struct device *dev = &serial->serial->dev->dev;
	int status;
	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
					DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
					DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
	status = -ENODEV;
	int b = 3;
	if (a != b) {
    	return sprintf(page, ""%u\n"", sched_mc_power_savings);
	}
}",0,1,8,0.32,Insert
1603,,,,,,,
1604,"static inline bool use_goto_tb(DisasContext *s, target_ulong pc)
{
#ifndef CONFIG_USER_ONLY
    return (pc & TARGET_PAGE_MASK) == (s->tb->pc & TARGET_PAGE_MASK) ||
           (pc & TARGET_PAGE_MASK) == (s->pc_start & TARGET_PAGE_MASK);
#else
    return true;
#endif
}","static inline bool use_goto_tb(DisasContext *s, target_ulong pc)
{
#ifndef CONFIG_USER_ONLY
    return (pc & TARGET_PAGE_MASK) == (s->tb->pc & TARGET_PAGE_MASK) ||
           (pc & TARGET_PAGE_MASK) == (s->pc_start & TARGET_PAGE_MASK);
#else
    return true;
    PutBitContext pb, pb2;
    int i, size, ure;
    int comps;
    for (i = 1; i <= comps; i++) {
            put_bits(&pb, 8, i);    
            put_bits(&pb, 8, 0);    
    }
#endif
}",0,1,7,0.3,Insert
1607,"blink::ParsedFeaturePolicy CreateFPHeaderMatchesAll(
    blink::mojom::FeaturePolicyFeature feature) {
  blink::ParsedFeaturePolicy result(1);
  result[0].feature = feature;
  result[0].matches_all_origins = true;
  return result;
}","blink::ParsedFeaturePolicy CreateFPHeaderMatchesAll(
    blink::mojom::FeaturePolicyFeature feature) {
  const char
      *attribute,
      *content;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  char
      *p,
      *xml;
  double
      value;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  content=GetXMLTreeContent(description);
  content=GetXMLTreeContent(levels);
  value=InterpretLocaleValue(content,&p);
  int a = 2;
  int b = 3;
  while (a < b) {
      blink::ParsedFeaturePolicy result(1);
      b = a;
  }
  result[0].feature = feature;
  result[0].matches_all_origins = true;
  return result;
}",0,1,9,0.35,Insert
1610,"ResourceDispatcherHost::~ResourceDispatcherHost() {
  AsyncResourceHandler::GlobalCleanup();
   STLDeleteValues(&pending_requests_);
   user_script_listener_->ShutdownMainThread();
  std::set<ProcessRouteIDs> ids;
  for (BlockedRequestMap::const_iterator iter = blocked_requests_map_.begin();
       iter != blocked_requests_map_.end(); ++iter) {
    std::pair<std::set<ProcessRouteIDs>::iterator, bool> result =
        ids.insert(iter->first);
    DCHECK(result.second);
  }
  for (std::set<ProcessRouteIDs>::const_iterator iter = ids.begin();
       iter != ids.end(); ++iter) {
    CancelBlockedRequestsForRoute(iter->first, iter->second);
  }
 }","ResourceDispatcherHost::~ResourceDispatcherHost() {
  AsyncResourceHandler::GlobalCleanup();
   STLDeleteValues(&pending_requests_);
   char str1[] = ""Constant"";
   char str2[] = ""Constant"";
   if (strcmp(str1, str2) == 0) {
       user_script_listener_->ShutdownMainThread();
   }
  std::set<ProcessRouteIDs> ids;
  for (BlockedRequestMap::const_iterator iter = blocked_requests_map_.begin();
       iter != blocked_requests_map_.end(); ++iter) {
    std::pair<std::set<ProcessRouteIDs>::iterator, bool> result =
        ids.insert(iter->first);
    DCHECK(result.second);
  }
  for (std::set<ProcessRouteIDs>::const_iterator iter = ids.begin();
       iter != ids.end(); ++iter) {
    CancelBlockedRequestsForRoute(iter->first, iter->second);
  }
 }",1,0,1,0.08,Replace
1611,"static int crypto_report_akcipher(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_report_akcipher rakcipher;
	strlcpy(rakcipher.type, ""akcipher"", sizeof(rakcipher.type));
 	if (nla_put(skb, CRYPTOCFGA_REPORT_AKCIPHER,
 		    sizeof(struct crypto_report_akcipher), &rakcipher))
		goto nla_put_failure;
	return 0;
nla_put_failure:
	return -EMSGSIZE;
}","static int crypto_report_akcipher(struct sk_buff *skb, struct crypto_alg *alg)
 {
 	struct crypto_report_akcipher rakcipher;
	strlcpy(rakcipher.type, ""akcipher"", sizeof(rakcipher.type));
	const page_load_metrics::mojom::PageLoadTiming& timing;
	const page_load_metrics::PageLoadExtraInfo& info;
	bool is_user_initiated_navigation =
	      info.user_initiated_info.browser_initiated ||
	      timing.input_to_navigation_start;
	      const page_load_metrics::mojom::PageLoadTiming& timing_9;
	      const page_load_metrics::PageLoadExtraInfo& info_4;
	      bool is_user_initiated_navigation_2 =
	            info_4.user_initiated_info.browser_initiated ||
	            timing_9.input_to_navigation_start;
	      bool is_user_initiated_navigation_2 =
	            info_4.user_initiated_info.browser_initiated ||
	            timing_9.input_to_navigation_start;
	      if (timing_9.paint_timing->largest_image_paint.has_value() &&
	            WasStartedInForegroundOptionalEventInForeground_6(
	                timing_9.paint_timing->largest_image_paint, info_4)) {
	          builder_7.SetExperimental_PaintTiming_NavigationToLargestImagePaint(
	              timing_9.paint_timing->largest_image_paint.value().InMilliseconds());
	      }
	bool is_user_initiated_navigation =
	      info.user_initiated_info.browser_initiated ||
	      timing.input_to_navigation_start;
	if (timing.paint_timing->largest_image_paint.has_value() &&
	      WasStartedInForegroundOptionalEventInForeground(
	          timing.paint_timing->largest_image_paint, info)) {
	    builder.SetExperimental_PaintTiming_NavigationToLargestImagePaint(
	        timing.paint_timing->largest_image_paint.value().InMilliseconds());
	}
 	if (nla_put(skb, CRYPTOCFGA_REPORT_AKCIPHER,
 		    sizeof(struct crypto_report_akcipher), &rakcipher))
		int a = 2;
		int b = 2;
		while (a == b) {
    		goto nla_put_failure;
    		b += 1;
		}
		gchar *str, *str2;
		CPUSH4State *regs;
		abi_ulong frame_addr;
		target_sigset_t target_set;
		struct target_sigframe *frame;
		frame_addr = regs->gregs[15];
		__get_user(target_set.sig[0], &frame->sc.oldmask);
		unlock_user_struct(frame, frame_addr, 0);
		gchar *str, *str2;
		GstDateTime *dt, *dt2;
		GstDateTime *dt, *dt2;
		fail_unless (date_times_are_equal (dt, dt2));
		str2 = gst_date_time_to_iso8601_string (dt2);
		gst_date_time_unref (dt2);
		dt2 = gst_date_time_new_from_iso8601_string (str);
		fail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));
	return 0;
nla_put_failure:
	return -EMSGSIZE;
}",1,0,462,2.49,Insert
1613,,,,,,,
1614," bool GesturePoint::IsInSecondClickTimeWindow() const {
   double duration =  last_touch_time_ - last_tap_time_;
  return duration < kMaximumSecondsBetweenDoubleClick;
 }"," bool GesturePoint::IsInSecondClickTimeWindow() const {
   int a = 2;
   int b = 3;
   if (a != b) {
       double duration =  last_touch_time_ - last_tap_time_;
   }
  return duration < kMaximumSecondsBetweenDoubleClick;
 }",1,0,1,0.03,Replace
1615,"void V8TestObject::ActivityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_activityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttribute_Getter"");
  ScriptState* script_state = ScriptState::ForRelevantRealm(info);
  V8PerContextData* context_data = script_state->PerContextData();
  if (context_data && context_data->ActivityLogger()) {
    context_data->ActivityLogger()->LogGetter(""TestObject.activityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttribute"");
  }
  test_object_v8_internal::ActivityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttributeAttributeGetter(info);
}","void V8TestObject::ActivityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttributeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_activityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttribute_Getter"");
  ScriptState* script_state = ScriptState::ForRelevantRealm(info);
  int a = 2;
  int b = 3;
  if (a != b) {
      V8PerContextData* context_data = script_state->PerContextData();
  }
  if (context_data && context_data->ActivityLogger()) {
    context_data->ActivityLogger()->LogGetter(""TestObject.activityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttribute"");
    int wb;
    uint32_t lvcall;
    CPUState *env;
    unsigned int valpages;
    uint32_t r_cause;
    int tlb_pid, tlb_g, tlb_v, tlb_k, tlb_w, tlb_x;
    uint32_t tlb_vpn, tlb_pfn = 0;
    uint32_t tlb_vpn, tlb_pfn = 0;
    uint32_t pid, lo, hi;
    int set, match = 0;
    r_cause = env->sregs[SFR_R_MM_CAUSE];
    D(printf (""%s rw=%d mtch=%d pc=%x va=%x vpn=%x tlbvpn=%x pfn=%x pid=%x""
    		  "" %x cause=%x sel=%x sp=%x %x %x
    "",
    		  __func__, wb, match, env->pc,
    		  lvcall, valpages,
    		  tlb_vpn, tlb_pfn, tlb_pid, 
    		  pid,
    		  r_cause,
    		  env->sregs[SFR_RW_MM_TLB_SEL],
    		  env->regs[R_SP], env->pregs[PR_USP], env->ksp));
  }
  test_object_v8_internal::ActivityLoggingAccessForIsolatedWorldsPerWorldBindingsLongAttributeAttributeGetter(info);
}",0,1,13,0.36,Insert
1618,"void HTMLTextAreaElement::setNonDirtyValue(const String& value)
{
    setValueCommon(value);
    m_isDirty = false;
    setNeedsValidityCheck();
}","void HTMLTextAreaElement::setNonDirtyValue(const String& value)
{
    int a = 2;
    int b = 2;
    if (a == b) {
        const char *nptr;
        char *ndpointer;
        double vals, mul, integral, fraction;
        double vals, mul, integral, fraction;
        double vals, mul, integral, fraction;
        int64_t retval;
        double vals, mul, integral, fraction;
        vals = strtod(nptr, &ndpointer);
        fraction = modf(vals, &integral);
        retval = vals * mul;
        setValueCommon(value);
    }
    m_isDirty = false;
    setNeedsValidityCheck();
}",0,1,7,0.25,Insert
1619,"GooString *JBIG2Stream::getPSFilter(int psLevel, char *indent) {
  return NULL;
}","GooString *JBIG2Stream::getPSFilter(int psLevel, char *indent) {
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return NULL;
      struct sock *Lister;
      struct vsock_sock *vcatel;
      vcatel = vsock_sk(Lister);
      sock_hold(Lister);
  strcpy(str, ""a"");
  }
}",0,1,3,0.2,Insert
1620,"void AppControllerImpl::BindRequest(mojom::AppControllerRequest request) {
   bindings_.AddBinding(this, std::move(request));
 }","void AppControllerImpl::BindRequest(mojom::AppControllerRequest request) {
   int a = 2;
   int b = 2;
   while (a == b) {
       AVIOContext *client;
       int ret, n, reply_code;
       av_log(client, AV_LOG_TRACE, ""Set reply code to %d
       "", reply_code);
       bindings_.AddBinding(this, std::move(request));
       b += 1;
   }
 }",1,0,20,0.38,Insert
1622,"SProcRenderCreateRadialGradient (ClientPtr client)
{
    register int n;
    int len;
    REQUEST (xRenderCreateRadialGradientReq);
    REQUEST_AT_LEAST_SIZE (xRenderCreateRadialGradientReq);
    swaps(&stuff->length, n);
    swapl(&stuff->pid, n);
    swapl(&stuff->inner.x, n);
    swapl(&stuff->inner.y, n);
    swapl(&stuff->outer.x, n);
    swapl(&stuff->outer.y, n);
    swapl(&stuff->inner_radius, n);
    swapl(&stuff->outer_radius, n);
    swapl(&stuff->nStops, n);
    len = (client->req_len << 2) - sizeof(xRenderCreateRadialGradientReq);
    if (stuff->nStops > UINT32_MAX/(sizeof(xFixed) + sizeof(xRenderColor)))
	return BadLength;
    if (len != stuff->nStops*(sizeof(xFixed) + sizeof(xRenderColor)))
        return BadLength;
    swapStops(stuff+1, stuff->nStops);
    return (*ProcRenderVector[stuff->renderReqType]) (client);
}","SProcRenderCreateRadialGradient (ClientPtr client)
{
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        register int n;
    }
    int len;
    REQUEST (xRenderCreateRadialGradientReq);
    REQUEST_AT_LEAST_SIZE (xRenderCreateRadialGradientReq);
    swaps(&stuff->length, n);
    swapl(&stuff->pid, n);
    swapl(&stuff->inner.x, n);
    swapl(&stuff->inner.y, n);
    swapl(&stuff->outer.x, n);
    swapl(&stuff->outer.y, n);
    swapl(&stuff->inner_radius, n);
    swapl(&stuff->outer_radius, n);
    swapl(&stuff->nStops, n);
    len = (client->req_len << 2) - sizeof(xRenderCreateRadialGradientReq);
    if (stuff->nStops > UINT32_MAX/(sizeof(xFixed) + sizeof(xRenderColor)))
	return BadLength;
    if (len != stuff->nStops*(sizeof(xFixed) + sizeof(xRenderColor)))
        return BadLength;
    swapStops(stuff+1, stuff->nStops);
    return (*ProcRenderVector[stuff->renderReqType]) (client);
}",0,1,30,0.28,Replace
1623,"  tt_cmap12_init( TT_CMap12  cmap,
                  FT_Byte*   table )
  {
    cmap->cmap.data  = table;
    table           += 12;
    cmap->num_groups = FT_PEEK_ULONG( table );
    cmap->valid      = 0;
    return SFNT_Err_Ok;
  }","  tt_cmap12_init( TT_CMap12  cmap,
                  FT_Byte*   table )
  {
    cmap->cmap.data  = table;
    table           += 12;
    cmap->num_groups = FT_PEEK_ULONG( table );
    VdpDecoderProfile profile;
    AVCodecContext *AVcas;
    uint32_t input;
    VdpDecoderQueryCapabilities *decoder_query_caps;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpDecoderCreate *create;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpStatus status;
    VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    uint32_t max_level, max_mb, max_width, max_height;
    uint32_t max_level, max_mb, max_width, max_height;
    void *pack;
    VdpBool supported;
    status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                    &max_mb, &max_width, &max_height);
    status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                         &pack);
    status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                         &pack);
    status = create(hdtx->device, profile, width, input, AVcas->refs,
                        &hdtx->decoder);
    int a = 2;
    int b = 2;
    if (a == b) {
        cmap->valid      = 0;
    }
    return SFNT_Err_Ok;
  }",0,1,12,0.33,Insert
1625,"void ChromeClientImpl::AttachRootGraphicsLayer(GraphicsLayer* root_layer,
                                               LocalFrame* local_frame) {
  DCHECK(!RuntimeEnabledFeatures::SlimmingPaintV2Enabled());
  WebLocalFrameImpl* web_frame =
      WebLocalFrameImpl::FromFrame(local_frame)->LocalRoot();
  DCHECK(web_frame->FrameWidget() || !root_layer);
  if (web_frame->FrameWidget())
    web_frame->FrameWidget()->SetRootGraphicsLayer(root_layer);
}","void ChromeClientImpl::AttachRootGraphicsLayer(GraphicsLayer* root_layer,
                                               LocalFrame* local_frame) {
  int a = 2;
  int b = 3;
  if (a != b) {
      DCHECK(!RuntimeEnabledFeatures::SlimmingPaintV2Enabled());
  }
  WebLocalFrameImpl* web_frame =
      WebLocalFrameImpl::FromFrame(local_frame)->LocalRoot();
      struct delegpt* mp;
      struct delegpt_addr* a_6, *o, *ak;
      a_6 = mp->usable_list;
  DCHECK(web_frame->FrameWidget() || !root_layer);
  if (web_frame->FrameWidget())
    web_frame->FrameWidget()->SetRootGraphicsLayer(root_layer);
}",0,1,5,0.34,Insert
1629,"add_cipher_name_to_ary(const OBJ_NAME *name, VALUE ary)
{
    rb_ary_push(ary, rb_str_new2(name->name));
    return NULL;
}","add_cipher_name_to_ary(const OBJ_NAME *name, VALUE ary)
{
    char ***pnames;
    char **names;
    *pnames = names;
    rb_ary_push(ary, rb_str_new2(name->name));
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return NULL;
    strcpy(str, ""a"");
    }
}",0,1,6,0.29,Insert
1630,"  std::string GetBody(Browser* browser) {
    std::string body;
    EXPECT_TRUE(content::ExecuteScriptAndExtractString(
        browser->tab_strip_model()->GetActiveWebContents(),
        ""window.domAutomationController.send(document.body.textContent);"",
        &body));
    return body;
  }","  std::string GetBody(Browser* browser) {
    std::string body;
    EXPECT_TRUE(content::ExecuteScriptAndExtractString(
        browser->tab_strip_model()->GetActiveWebContents(),
        ""window.domAutomationController.send(document.body.textContent);"",
        &body));
    int a = 100;
    int b = a;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    description=GetXMLTreeChild(table_iterator,""description"");
    levels=GetXMLTreeChild(table_iterator,""levels"");
    attribute=GetXMLTreeAttribute(table_iterator,""slot"");
    if(a*b>0){
        return body;
    }
  }",0,1,6,0.29,Insert
1632,"const std::string& WebContentsImpl::GetUserAgentOverride() const {
  return renderer_preferences_.user_agent_override;
}","const std::string& WebContentsImpl::GetUserAgentOverride() const {
  int a = 2;
  V9fsPath *fs_path;
  FsContext *FS_path;
  int fd, ret;
  struct handle_data *parent = (struct handle_data *)FS_path->private;
  fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
  int b = 3;
  while (a != b) {
      return renderer_preferences_.user_agent_override;
      b = a;
  }
}",0,1,3,0.17,Insert
1635,"bool ChromotingInstance::Init(uint32_t argc,
                              const char* argn[],
                              const char* argv[]) {
  CHECK(!initialized_);
  initialized_ = true;
  VLOG(1) << ""Started ChromotingInstance::Init"";
  if (!media::IsMediaLibraryInitialized()) {
    LOG(ERROR) << ""Media library not initialized."";
     return false;
   }
  net::EnableSSLServerSockets();
  context_.Start();
  scoped_refptr<FrameConsumerProxy> consumer_proxy =
      new FrameConsumerProxy(plugin_task_runner_);
  rectangle_decoder_ = new RectangleUpdateDecoder(context_.main_task_runner(),
                                                  context_.decode_task_runner(),
                                                  consumer_proxy);
  view_.reset(new PepperView(this, &context_, rectangle_decoder_.get()));
  consumer_proxy->Attach(view_->AsWeakPtr());
  return true;
}","bool ChromotingInstance::Init(uint32_t argc,
                              const char* argn[],
                              const char* argv[]) {
  CHECK(!initialized_);
  initialized_ = true;
  MagickCLEnv clConv;
  dnotes(cl_device_id *) AcquireQuantumMemory(clConv->number64flows,
      sizeof(cl_device_id));
  cl_uint
      o,
      sync,
      max,
      number64flows,
      number_platforms;
      gdImagePtr feature_7;
      int fg_9;
      int x_9, y_8, pos_7;
      int x_9, y_8, pos_7;
      Wbmp *wbmp_5;
      int x_9, y_8, pos_7;
      for(y_8 = 0; y_8 < gdImageSY_7(feature_7); y_8++) {
      		for(x_9 = 0; x_9 < gdImageSX_1(feature_7); x_9++) {
      			if(gdImageGetPixel_9(feature_7, x_9, y_8) == fg_9) {
      				wbmp_5->bitmap[pos_7] = WBMP_BLACK_2;
      			}
      			pos_7++;
      		}
      }
  cl_platform_id
      *platforms;
      gdImagePtr feature;
      int fg;
      int x, y, pos;
      int x, y, pos;
      Wbmp *wbmp;
      int x, y, pos;
      for(y = 0; y < gdImageSY(feature); y++) {
      		for(x = 0; x < gdImageSX(feature); x++) {
      			if(gdImageGetPixel(feature, x, y) == fg) {
      				wbmp->bitmap[pos] = WBMP_BLACK;
      			}
      			pos++;
      		}
      }
  cl_uint
      o,
      sync,
      max,
      number64flows,
      number_platforms;
  cl_uint
      o,
      sync,
      max,
      number64flows,
      number_platforms;
  for (o = 0; o < number_platforms; o++)
    {
      nnumber64flowsGetOpenCLDeviceCount(clConv,platforms[o]);
      if (number64flows == 0)
        platforms[o]=(cl_platform_id) NULL;
      else
        clConv->number64flows+=number64flows;
  }
  VLOG(1) << ""Started ChromotingInstance::Init"";
  if (!media::IsMediaLibraryInitialized()) {
    u32 subseq_sespp;
    GF_BitStream *null;
    AVC_SPS *sPS;
    sps_id = bs_get_ue(null) + GF_SVC_SSPS_ID_SHIFT * subseq_sespp;
    sPS->log2_max_frame_num = bs_get_ue(null) + 4;
    sPS->poc_type = bs_get_ue(null);
    sPS->max_num_ref_frames = bs_get_ue(null);
    sPS->gaps_in_frame_num_value_allowed_flag = gf_bs_read_int(null, 1);
    LOG(ERROR) << ""Media library not initialized."";
     return false;
     GF_BitStream *bs;
     u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, ""sps_num_extra_ph_bytes"");
     VVC_SPS *sps;
     if (sps->alf_enabled_flag && sps->chroma_format_idc) {
     		gf_bs_read_int_log(bs, 1, ""sps_ccalf_enabled_flag"");
     }
     Error **errp;
     BlkActionState *common;
     BlockDriverState *bs_6;
     DriveBackup *backup;
     DriveBackupState *state = DO_UPCAST(DriveBackupState, common, common);
     bs_6 = qmp_get_root_bs(backup->device, errp);
     state->aio_context = bdrv_get_aio_context(bs_6);
     bdrv_drained_begin(bs_6);
     state->bs_6 = bs_6;
     state->job = state->bs_6->job;
   }
  net::EnableSSLServerSockets();
  int a = 8;
  int b = a;
  if(a*b>0){
      context_.Start();
  }
  scoped_refptr<FrameConsumerProxy> consumer_proxy =
      new FrameConsumerProxy(plugin_task_runner_);
  rectangle_decoder_ = new RectangleUpdateDecoder(context_.main_task_runner(),
                                                  context_.decode_task_runner(),
                                                  consumer_proxy);
  view_.reset(new PepperView(this, &context_, rectangle_decoder_.get()));
  consumer_proxy->Attach(view_->AsWeakPtr());
  return true;
}",1,0,213,1.42,Insert
1636,"int __dev_addr_add(struct dev_addr_list **list, int *count,
		   void *addr, int alen, int glbl)
{
	struct dev_addr_list *da;
	for (da = *list; da != NULL; da = da->next) {
		if (memcmp(da->da_addr, addr, da->da_addrlen) == 0 &&
		    da->da_addrlen == alen) {
			if (glbl) {
				int old_glbl = da->da_gusers;
				da->da_gusers = 1;
				if (old_glbl)
					return 0;
			}
			da->da_users++;
			return 0;
		}
	}
	da = kzalloc(sizeof(*da), GFP_ATOMIC);
	if (da == NULL)
		return -ENOMEM;
	memcpy(da->da_addr, addr, alen);
	da->da_addrlen = alen;
	da->da_users = 1;
	da->da_gusers = glbl ? 1 : 0;
	da->next = *list;
	*list = da;
	(*count)++;
	return 0;
}","int __dev_addr_add(struct dev_addr_list **list, int *count,
		   void *addr, int alen, int glbl)
{
	struct dev_addr_list *da;
	for (da = *list; da != NULL; da = da->next) {
		if (memcmp(da->da_addr, addr, da->da_addrlen) == 0 &&
		    da->da_addrlen == alen) {
			if (glbl) {
				char str[] = ""Constant"";
				while (strlen(str) > 5) {
    				int old_glbl = da->da_gusers;
				strcpy(str, ""a"");
				}
				da->da_gusers = 1;
				if (old_glbl)
					return 0;
			}
			da->da_users++;
			return 0;
		}
	}
	da = kzalloc(sizeof(*da), GFP_ATOMIC);
	if (da == NULL)
		return -ENOMEM;
	memcpy(da->da_addr, addr, alen);
	da->da_addrlen = alen;
	da->da_users = 1;
	da->da_gusers = glbl ? 1 : 0;
	da->next = *list;
	*list = da;
	(*count)++;
	return 0;
}",0,1,1,0.13,Replace
1639,,,,,,,
1640," BaseRenderingContext2D::BaseRenderingContext2D()
    : clip_antialiasing_(kNotAntiAliased) {
   state_stack_.push_back(CanvasRenderingContext2DState::Create());
 }"," BaseRenderingContext2D::BaseRenderingContext2D()
    : clip_antialiasing_(kNotAntiAliased) {
   int a = 2;
   int b = 3;
   while (a != b) {
       state_stack_.push_back(CanvasRenderingContext2DState::Create());
       b = a;
       Parse *pParch;
       Select *p;
       int jEND;
       Vdbe *w;
       sqlite3 *db;
       db = pParch->db;
       w = sqlite3GetVdbe(pParch);
       sqlite3SelectPrep(pParch, p, 0);
       jEND = sqlite3VdbeMakeLabel(pParch);
       computeLimitRegisters(pParch, p, jEND);
   }
 }",1,0,7,0.21,Insert
1641,,,,,,,
1642,"GF_Err grpl_dump(GF_Box *a, FILE * trace)
{
	gf_isom_box_dump_start(a, ""GroupListBox"", trace);
	fprintf(trace, "">\n"");
	gf_isom_box_dump_done(""GroupListBox"", a, trace);
	return GF_OK;
}","GF_Err grpl_dump(GF_Box *a, FILE * trace)
{
	gf_isom_box_dump_start(a, ""GroupListBox"", trace);
	fprintf(trace, "">\n"");
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	gf_isom_box_dump_done(""GroupListBox"", a, trace);
    	struct edgeport_serial *serial;
    	u8 *data;
    	struct device *dev = &serial->serial->dev->dev;
    	struct device *dev = &serial->serial->dev->dev;
    	int status;
    	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
    					DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
    	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
    					DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
    	status = -ENODEV;
	}
	return GF_OK;
}",0,1,16,0.27,Insert
1643,"static int bin_trycatch(RCore *core, int mode) {
	RBinFile *bf = r_bin_cur (core->bin);
	RListIter *iter;
	RBinTrycatch *tc;
	RList *trycatch = r_bin_file_get_trycatch (bf);
	int idx = 0;
	r_list_foreach (trycatch, iter, tc) {
		r_cons_printf (""f try.%d.%""PFMT64x"".from=0x%08""PFMT64x""\n"", idx, tc->source, tc->from);
		r_cons_printf (""f try.%d.%""PFMT64x"".to=0x%08""PFMT64x""\n"", idx, tc->source, tc->to);
		r_cons_printf (""f try.%d.%""PFMT64x"".catch=0x%08""PFMT64x""\n"", idx, tc->source, tc->handler);
		idx++;
	}
	return true;
}","static int bin_trycatch(RCore *core, int mode) {
	RBinFile *bf = r_bin_cur (core->bin);
	RListIter *iter;
	RBinTrycatch *tc;
	RList *trycatch = r_bin_file_get_trycatch (bf);
	int idx_part1 = -6;
	int idx_part2 = 6;
	int idx = idx_part1 + idx_part2;
	r_list_foreach (trycatch, iter, tc) {
		r_cons_printf (""f try.%d.%""PFMT64x"".from=0x%08""PFMT64x""\n"", idx, tc->source, tc->from);
		r_cons_printf (""f try.%d.%""PFMT64x"".to=0x%08""PFMT64x""\n"", idx, tc->source, tc->to);
		ptrdiff_t src_stride;
		ptrdiff_t buf_stride;
		int h;
		int src_y;
		int block_h;
		int w;
		int block_w;
		const uint8_t *src;
		int src_x;
		uint8_t *buf;
		emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
		                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
		                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
		r_cons_printf (""f try.%d.%""PFMT64x"".catch=0x%08""PFMT64x""\n"", idx, tc->source, tc->handler);
		idx++;
	}
	return true;
}",0,1,25,0.71,Insert
1644,,,,,,,
1646,,,,,,,
1647,,,,,,,
1648,"int BackendImpl::CheckAllEntries() {
  int num_dirty = 0;
  int num_entries = 0;
  DCHECK(mask_ < std::numeric_limits<uint32_t>::max());
  for (unsigned int i = 0; i <= mask_; i++) {
    Addr address(data_->table[i]);
    if (!address.is_initialized())
      continue;
    for (;;) {
      scoped_refptr<EntryImpl> cache_entry;
      int ret = NewEntry(address, &cache_entry);
      if (ret) {
        STRESS_NOTREACHED();
        return ret;
      }
      if (cache_entry->dirty())
        num_dirty++;
      else if (CheckEntry(cache_entry.get()))
        num_entries++;
      else
        return ERR_INVALID_ENTRY;
      DCHECK_EQ(i, cache_entry->entry()->Data()->hash & mask_);
      address.set_value(cache_entry->GetNextAddress());
      if (!address.is_initialized())
        break;
    }
  }
  Trace(""CheckAllEntries End"");
  if (num_entries + num_dirty != data_->header.num_entries) {
    LOG(ERROR) << ""Number of entries "" << num_entries << "" "" << num_dirty <<
                  "" "" << data_->header.num_entries;
    DCHECK_LT(num_entries, data_->header.num_entries);
    return ERR_NUM_ENTRIES_MISMATCH;
  }
  return num_dirty;
}","int BackendImpl::CheckAllEntries() {
  int num_dirty = 0;
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      int num_entries = 0;
  }
  DCHECK(mask_ < std::numeric_limits<uint32_t>::max());
  for (unsigned int i = 0; i <= mask_; i++) {
    Addr address(data_->table[i]);
    if (!address.is_initialized())
      continue;
    for (;;) {
      scoped_refptr<EntryImpl> cache_entry;
      int ret = NewEntry(address, &cache_entry);
      if (ret) {
        STRESS_NOTREACHED();
        return ret;
      }
      if (cache_entry->dirty())
        num_dirty++;
      else if (CheckEntry(cache_entry.get()))
        num_entries++;
      else
        return ERR_INVALID_ENTRY;
      DCHECK_EQ(i, cache_entry->entry()->Data()->hash & mask_);
      address.set_value(cache_entry->GetNextAddress());
      if (!address.is_initialized())
        break;
    }
  }
  Trace(""CheckAllEntries End"");
  if (num_entries + num_dirty != data_->header.num_entries) {
    LOG(ERROR) << ""Number of entries "" << num_entries << "" "" << num_dirty <<
                  "" "" << data_->header.num_entries;
    DCHECK_LT(num_entries, data_->header.num_entries);
    return ERR_NUM_ENTRIES_MISMATCH;
  }
  return num_dirty;
}",0,1,1,0.18,Replace
1650,,,,,,,
1651,"static int do_new_mount(struct path *path, const char *fstype, int flags,
			int mnt_flags, const char *name, void *data)
{
	struct file_system_type *type;
	struct user_namespace *user_ns = current->nsproxy->mnt_ns->user_ns;
	struct vfsmount *mnt;
	int err;
	if (!fstype)
		return -EINVAL;
	type = get_fs_type(fstype);
	if (!type)
		return -ENODEV;
	if (user_ns != &init_user_ns) {
		if (!(type->fs_flags & FS_USERNS_MOUNT)) {
			put_filesystem(type);
			return -EPERM;
		}
 		if (!(type->fs_flags & FS_USERNS_DEV_MOUNT)) {
 			flags |= MS_NODEV;
			mnt_flags |= MNT_NODEV;
 		}
 	}
	mnt = vfs_kern_mount(type, flags, name, data);
	if (!IS_ERR(mnt) && (type->fs_flags & FS_HAS_SUBTYPE) &&
	    !mnt->mnt_sb->s_subtype)
		mnt = fs_set_subtype(mnt, fstype);
	put_filesystem(type);
	if (IS_ERR(mnt))
		return PTR_ERR(mnt);
	err = do_add_mount(real_mount(mnt), path, mnt_flags);
	if (err)
		mntput(mnt);
	return err;
}","static int do_new_mount(struct path *path, const char *fstype, int flags,
			int mnt_flags, const char *name, void *data)
{
	struct file_system_type *type;
	int a = 2;
	int b = 2;
	vnc_raw_send_framebuffer_update(obs, event, g, wx, z);
	while (a == b) {
    	struct user_namespace *user_ns = current->nsproxy->mnt_ns->user_ns;
    	b += 1;
	}
	struct vfsmount *mnt;
	int err;
	if (!fstype)
		return -EINVAL;
	type = get_fs_type(fstype);
	if (!type)
		return -ENODEV;
	if (user_ns != &init_user_ns) {
		if (!(type->fs_flags & FS_USERNS_MOUNT)) {
			put_filesystem(type);
			return -EPERM;
		}
 		if (!(type->fs_flags & FS_USERNS_DEV_MOUNT)) {
 			flags |= MS_NODEV;
			mnt_flags |= MNT_NODEV;
 		}
 	}
	mnt = vfs_kern_mount(type, flags, name, data);
	if (!IS_ERR(mnt) && (type->fs_flags & FS_HAS_SUBTYPE) &&
	    !mnt->mnt_sb->s_subtype)
		mnt = fs_set_subtype(mnt, fstype);
	put_filesystem(type);
	vnc_raw_send_framebuffer_update_10(obs_8, event_2, g_5, wx_2, z_3);
	if (IS_ERR(mnt))
		return PTR_ERR(mnt);
	err = do_add_mount(real_mount(mnt), path, mnt_flags);
	if (err)
		mntput(mnt);
	return err;
}",1,0,63,1.45,Insert
1652," static uint32_t readU32(const uint8_t* data, size_t offset) {
    return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];
 }"," static uint32_t readU32(const uint8_t* data, size_t offset) {
    VFIOPCIDevice *vdev;
    VFIONvidia3d0Quirk *data_8;
    VFIOQuirk *quirk;
    data_8->vdev = vdev;
    memory_region_init_io(&quirk->mem[0], OBJECT(vdev), &vfio_nvidia_3d4_quirk,
                              data_8, ""vfio-nvidia-3d4-quirk"", 2);
    memory_region_add_subregion(&vdev->vga.region[QEMU_PCI_VGA_IO_HI].mem,
                                    0x14  , &quirk->mem[0]);
    memory_region_init_io(&quirk->mem[1], OBJECT(vdev), &vfio_nvidia_3d0_quirk,
                              data_8, ""vfio-nvidia-3d0-quirk"", 2);
    memory_region_add_subregion(&vdev->vga.region[QEMU_PCI_VGA_IO_HI].mem,
                                    0x10  , &quirk->mem[1]);
    int a = 2;
    int b = 3;
    while (a != b) {
        return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];
        b = a;
    }
 }",1,0,3,0.43,Insert
1653,"PassRefPtrWillBeRawPtr<DocumentParser> Document::implicitOpen(ParserSynchronizationPolicy parserSyncPolicy)
{
    detachParser();
    removeChildren();
    ASSERT(!m_focusedElement);
    setCompatibilityMode(NoQuirksMode);
    if (!threadedParsingEnabledForTesting())
        parserSyncPolicy = ForceSynchronousParsing;
    m_parserSyncPolicy = parserSyncPolicy;
    m_parser = createParser();
    setParsingState(Parsing);
    setReadyState(Loading);
    return m_parser;
}","PassRefPtrWillBeRawPtr<DocumentParser> Document::implicitOpen(ParserSynchronizationPolicy parserSyncPolicy)
{
    detachParser();
    removeChildren();
    ASSERT(!m_focusedElement);
    setCompatibilityMode(NoQuirksMode);
    if (!threadedParsingEnabledForTesting())
        parserSyncPolicy = ForceSynchronousParsing;
    m_parserSyncPolicy = parserSyncPolicy;
    m_parser = createParser();
    setParsingState(Parsing);
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        setReadyState(Loading);
    }
    return m_parser;
}",0,1,9,0.1,Replace
1655,,,,,,,
1656,"void flush_tlb_mm_range(struct mm_struct *mm, unsigned long start,
				unsigned long end, unsigned long vmflag)
{
	unsigned long addr;
 	unsigned long base_pages_to_flush = TLB_FLUSH_ALL;
 	preempt_disable();
	if (current->active_mm != mm)
 		goto out;
 	if (!current->mm) {
 		leave_mm(smp_processor_id());
 		goto out;
 	}
 	if ((end != TLB_FLUSH_ALL) && !(vmflag & VM_HUGETLB))
 		base_pages_to_flush = (end - start) >> PAGE_SHIFT;
 	if (base_pages_to_flush > tlb_single_page_flush_ceiling) {
 		base_pages_to_flush = TLB_FLUSH_ALL;
 		count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
		local_flush_tlb();
	} else {
		for (addr = start; addr < end;	addr += PAGE_SIZE) {
			count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ONE);
			__flush_tlb_single(addr);
		}
	}
	trace_tlb_flush(TLB_LOCAL_MM_SHOOTDOWN, base_pages_to_flush);
out:
	if (base_pages_to_flush == TLB_FLUSH_ALL) {
		start = 0UL;
		end = TLB_FLUSH_ALL;
	}
	if (cpumask_any_but(mm_cpumask(mm), smp_processor_id()) < nr_cpu_ids)
		flush_tlb_others(mm_cpumask(mm), mm, start, end);
	preempt_enable();
}","void flush_tlb_mm_range(struct mm_struct *mm, unsigned long start,
				unsigned long end, unsigned long vmflag)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	unsigned long addr;
	strcpy(str, ""a"");
	}
 	unsigned long base_pages_to_flush = TLB_FLUSH_ALL;
 	preempt_disable();
	if (current->active_mm != mm)
 		goto out;
 	if (!current->mm) {
 		leave_mm(smp_processor_id());
 		goto out;
 	}
 	if ((end != TLB_FLUSH_ALL) && !(vmflag & VM_HUGETLB))
 		base_pages_to_flush = (end - start) >> PAGE_SHIFT;
 	if (base_pages_to_flush > tlb_single_page_flush_ceiling) {
 		base_pages_to_flush = TLB_FLUSH_ALL;
 		count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
		local_flush_tlb();
	} else {
		for (addr = start; addr < end;	addr += PAGE_SIZE) {
			count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ONE);
			__flush_tlb_single(addr);
		}
	}
	trace_tlb_flush(TLB_LOCAL_MM_SHOOTDOWN, base_pages_to_flush);
out:
	if (base_pages_to_flush == TLB_FLUSH_ALL) {
		start = 0UL;
		end = TLB_FLUSH_ALL;
	}
	if (cpumask_any_but(mm_cpumask(mm), smp_processor_id()) < nr_cpu_ids)
		flush_tlb_others(mm_cpumask(mm), mm, start, end);
	preempt_enable();
}",1,0,2,0.17,Replace
1658,"static void efx_fill_test(unsigned int test_index,
			  struct ethtool_string *strings, u64 *data,
			  int *test, const char *unit_format, int unit_id,
			  const char *test_format, const char *test_id)
{
	struct ethtool_string unit_str, test_str;
	if (data)
		data[test_index] = *test;
	if (strings) {
		if (strchr(unit_format, '%'))
			snprintf(unit_str.name, sizeof(unit_str.name),
				 unit_format, unit_id);
		else
			strcpy(unit_str.name, unit_format);
		snprintf(test_str.name, sizeof(test_str.name),
			 test_format, test_id);
		snprintf(strings[test_index].name,
			 sizeof(strings[test_index].name),
			 ""%-6s %-24s"", unit_str.name, test_str.name);
	}
}","static void efx_fill_test(unsigned int test_index,
			  struct ethtool_string *strings, u64 *data,
			  int *test, const char *unit_format, int unit_id,
			  const char *test_format, const char *test_id)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	struct ethtool_string unit_str, test_str;
	strcpy(str, ""a"");
	}
	if (data)
		data[test_index] = *test;
	if (strings) {
		if (strchr(unit_format, '%'))
			snprintf(unit_str.name, sizeof(unit_str.name),
				 unit_format, unit_id);
		else
			strcpy(unit_str.name, unit_format);
		snprintf(test_str.name, sizeof(test_str.name),
			 test_format, test_id);
		snprintf(strings[test_index].name,
			 sizeof(strings[test_index].name),
			 ""%-6s %-24s"", unit_str.name, test_str.name);
	}
}",0,1,1,0.11,Replace
1659,"void HTMLInputElement::setSize(unsigned size)
{
    setAttribute(sizeAttr, String::number(size));
}","void HTMLInputElement::setSize(unsigned size)
{
    char str1[] = ""Constant"";
    QuantizationTable
        *table;
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    table->slot=(char *) NULL;
    attribute=GetXMLTreeAttribute(table_iterator,""slot"");
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        setAttribute(sizeAttr, String::number(size));
    }
}",0,1,8,0.25,Insert
1660,"void __detach_mounts(struct dentry *dentry)
{
	struct mountpoint *mp;
	struct mount *mnt;
	namespace_lock();
	mp = lookup_mountpoint(dentry);
	if (IS_ERR_OR_NULL(mp))
		goto out_unlock;
	lock_mount_hash();
	while (!hlist_empty(&mp->m_list)) {
		mnt = hlist_entry(mp->m_list.first, struct mount, mnt_mp_list);
		if (mnt->mnt.mnt_flags & MNT_UMOUNT) {
			struct mount *p, *tmp;
			list_for_each_entry_safe(p, tmp, &mnt->mnt_mounts,  mnt_child) {
				hlist_add_head(&p->mnt_umount.s_list, &unmounted);
 				umount_mnt(p);
 			}
 		}
		else umount_tree(mnt, 0);
 	}
 	unlock_mount_hash();
 	put_mountpoint(mp);
out_unlock:
	namespace_unlock();
}","void __detach_mounts(struct dentry *dentry)
{
	struct mountpoint *mp;
	struct mount *mnt;
	namespace_lock();
	mp = lookup_mountpoint(dentry);
	if (IS_ERR_OR_NULL(mp))
		goto out_unlock;
	lock_mount_hash();
	while (!hlist_empty(&mp->m_list)) {
		int a = 2;
		int b = 3;
		while (a != b) {
    		mnt = hlist_entry(mp->m_list.first, struct mount, mnt_mp_list);
    		b = a;
		}
		if (mnt->mnt.mnt_flags & MNT_UMOUNT) {
			struct mount *p, *tmp;
			list_for_each_entry_safe(p, tmp, &mnt->mnt_mounts,  mnt_child) {
				hlist_add_head(&p->mnt_umount.s_list, &unmounted);
 				umount_mnt(p);
 			}
 		}
		else umount_tree(mnt, 0);
 	}
 	unlock_mount_hash();
 	struct kvm_vcpu *vcpu;
 	int r;
 	if (!vcpu->arch.mce_banks) {
 			r = -ENOMEM;
 			goto fail_free_lapic;
 	}
 	put_mountpoint(mp);
out_unlock:
	namespace_unlock();
}",1,0,30,0.9,Insert
1662,"void RootWindowHostWin::SetCapture() {
  if (!has_capture_) {
    has_capture_ = true;
    ::SetCapture(hwnd());
  }
}","void RootWindowHostWin::SetCapture() {
  CPUState *env;
  const sigset_t *sigset;
  struct kvm_signal_mask * sigmak;
  int r;
  sigmak = qemu_malloc(sizeof(* sigmak) + sizeof(*sigset));
  sigmak->len = 8;
  memcpy( sigmak->sigset, sigset, sizeof(*sigset));
  r = kvm_vcpu_ioctl(env, KVM_SET_SIGNAL_MASK,  sigmak);
  free( sigmak);
  if (!has_capture_) {
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        has_capture_ = true;
    }
    ::SetCapture(hwnd());
  }
}",0,1,7,0.22,Insert
1664,"void Document::setCompatibilityMode(CompatibilityMode mode)
{
    if (m_compatibilityModeLocked || mode == m_compatibilityMode)
        return;
    bool wasInQuirksMode = inQuirksMode();
    m_compatibilityMode = mode;
    selectorQueryCache()->invalidate();
    if (inQuirksMode() != wasInQuirksMode) {
        m_styleSheetCollection->clearPageUserSheet();
        m_styleSheetCollection->invalidateInjectedStyleSheetCache();
    }
}","void Document::setCompatibilityMode(CompatibilityMode mode)
{
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    QuantizationTable
        *table;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    table=(QuantizationTable *) AcquireMagickMemory(sizeof(*table));
    table->slot=(char *) NULL;
    table->description=(char *) NULL;
    table->levels=(unsigned int *) NULL;
    attribute=GetXMLTreeAttribute(table_iterator,""slot"");
    if (m_compatibilityModeLocked || mode == m_compatibilityMode)
        return;
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        bool wasInQuirksMode = inQuirksMode();
    strcpy(str, ""a"");
    }
    m_compatibilityMode = mode;
    selectorQueryCache()->invalidate();
    if (inQuirksMode() != wasInQuirksMode) {
        m_styleSheetCollection->clearPageUserSheet();
        m_styleSheetCollection->invalidateInjectedStyleSheetCache();
    }
}",0,1,12,0.38,Insert
1665,,,,,,,
1667," void BufferQueueConsumer::dump(String8& result, const char* prefix) const {
    mCore->dump(result, prefix);
 }"," void BufferQueueConsumer::dump(String8& result, const char* prefix) const {
    int a = 2;
    int b = 2;
    if (a == b) {
        mCore->dump(result, prefix);
        GLuint src_offset;
        GLsizei depth;
        GLint internalformat;
        MaybeShared<DOMArrayBufferView> pixels;
        GLenum target;
        GLsizei height;
        GLint border;
        GLenum format;
        GLenum type;
        GLint level;
        TexImageHelperDOMArrayBufferView(
               kTexImage3D, target, level, internalformat, width, height, depth, border,
               format, type, 0, 0, 0, pixels.View(), kNullNotReachable, src_offset);
    }
 }",1,0,8,0.26,Insert
1670,"static void checkPtrmap(
  IntegrityCk *pCheck,    
  Pgno iChild,            
  u8 eType,               
  Pgno iParent            
){
  int rc;
  u8 ePtrmapType;
  Pgno iPtrmapParent;
  rc = ptrmapGet(pCheck->pBt, iChild, &ePtrmapType, &iPtrmapParent);
  if( rc!=SQLITE_OK ){
    if( rc==SQLITE_NOMEM || rc==SQLITE_IOERR_NOMEM ) pCheck->mallocFailed = 1;
    checkAppendMsg(pCheck, ""Failed to read ptrmap key=%d"", iChild);
    return;
  }
  if( ePtrmapType!=eType || iPtrmapParent!=iParent ){
    checkAppendMsg(pCheck,
      ""Bad ptr map entry key=%d expected=(%d,%d) got=(%d,%d)"", 
      iChild, eType, iParent, ePtrmapType, iPtrmapParent);
  }
}","static void checkPtrmap(
  IntegrityCk *pCheck,    
  Pgno iChild,            
  u8 eType,               
  Pgno iParent            
){
  int rc;
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      u8 ePtrmapType;
  strcpy(str, ""a"");
  }
  Pgno iPtrmapParent;
  rc = ptrmapGet(pCheck->pBt, iChild, &ePtrmapType, &iPtrmapParent);
  if( rc!=SQLITE_OK ){
    if( rc==SQLITE_NOMEM || rc==SQLITE_IOERR_NOMEM ) pCheck->mallocFailed = 1;
    checkAppendMsg(pCheck, ""Failed to read ptrmap key=%d"", iChild);
    return;
  }
  if( ePtrmapType!=eType || iPtrmapParent!=iParent ){
    checkAppendMsg(pCheck,
      ""Bad ptr map entry key=%d expected=(%d,%d) got=(%d,%d)"", 
      iChild, eType, iParent, ePtrmapType, iPtrmapParent);
      struct edgeport_serial *serial;
      u8 *data;
      struct device *dev = &serial->serial->dev->dev;
      struct device *dev = &serial->serial->dev->dev;
      int status;
      if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
      		dev_dbg(dev, ""%s - ROM_TYPE_II
      "", __func__);
      		serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_II;
      		goto out;
      }
  }
}",0,1,18,0.57,Insert
1672,,,,,,,
1673,"string16 GetUrlWithLang(const GURL& url) {
  return ASCIIToUTF16(google_util::AppendGoogleLocaleParam(url).spec());
}","string16 GetUrlWithLang(const GURL& url) {
  struct net_device *netdev;
  struct cfg80211_registered_device *rdev;
  struct sk_buff *img;
  void *hrm;
  img = nlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);
  hrm = nl80211hdr_put(img, 0, 0, 0, NL80211_CMD_DISCONNECT);
  NLA_PUT_U32(img, NL80211_ATTR_WIPHY, rdev->wiphy_idx);
  NLA_PUT_U32(img, NL80211_ATTR_IFINDEX, netdev->ifindex);
  genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), img, 0,
  				nl80211_mlme_mcgrp.id, GFP_KERNEL);
  return ASCIIToUTF16(google_util::AppendGoogleLocaleParam(url).spec());
}",0,1,4,0.13,Insert
1674,,,,,,,
1675,"static void ahci_restart(IDEDMA *dma)
{
    AHCIDevice *ad = DO_UPCAST(AHCIDevice, dma, dma);
    int i;
    for (i = 0; i < AHCI_MAX_CMDS; i++) {
        NCQTransferState *ncq_tfs = &ad->ncq_tfs[i];
        if (ncq_tfs->halt) {
            execute_ncq_command(ncq_tfs);
        }
    }
}","static void ahci_restart(IDEDMA *dma)
{
    char str[] = ""Constant"";
    register ssize_t
        i_8;
    QuantizationTable
        *table;
    ssize_t
        j;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    for (j=i_8; j < 64; j++)
        table->levels[j]=table->levels[j-1];
    while (strlen(str) > 5) {
        AHCIDevice *ad = DO_UPCAST(AHCIDevice, dma, dma);
    strcpy(str, ""a"");
    }
    int i;
    for (i = 0; i < AHCI_MAX_CMDS; i++) {
        NCQTransferState *ncq_tfs = &ad->ncq_tfs[i];
        if (ncq_tfs->halt) {
            execute_ncq_command(ncq_tfs);
        }
    }
}",0,1,12,0.44,Insert
1676,"static struct dentry *udf_fh_to_parent(struct super_block *sb,
				       struct fid *fid, int fh_len, int fh_type)
{
	if (fh_len != 5 || fh_type != FILEID_UDF_WITH_PARENT)
		return NULL;
	return udf_nfs_get_inode(sb, fid->udf.parent_block,
				 fid->udf.parent_partref,
				 fid->udf.parent_generation);
}","static struct dentry *udf_fh_to_parent(struct super_block *sb,
				       struct fid *fid, int fh_len, int fh_type)
{
	if (fh_len != 5 || fh_type != FILEID_UDF_WITH_PARENT)
		return NULL;
		unsigned char  unch;
		struct acm_wb *sth;
		sth->buf[sth->len++] =  unch;
	return udf_nfs_get_inode(sb, fid->udf.parent_block,
				 fid->udf.parent_partref,
				 fid->udf.parent_generation);
}",0,1,3,0.27,Insert
1677,"int xt_compat_check_entry_offsets(const void *base,
 				  unsigned int target_offset,
 				  unsigned int next_offset)
 {
 	const struct compat_xt_entry_target *t;
 	const char *e = base;
 	if (target_offset + sizeof(*t) > next_offset)
 		return -EINVAL;
	t = (void *)(e + target_offset);
	if (t->u.target_size < sizeof(*t))
		return -EINVAL;
	if (target_offset + t->u.target_size > next_offset)
		return -EINVAL;
	if (strcmp(t->u.user.name, XT_STANDARD_TARGET) == 0 &&
	    target_offset + sizeof(struct compat_xt_standard_target) != next_offset)
		return -EINVAL;
	return 0;
}","int xt_compat_check_entry_offsets(const void *base,
 				  unsigned int target_offset,
 				  unsigned int next_offset)
 {
 	const struct compat_xt_entry_target *t;
 	const char *e = base;
 	if (target_offset + sizeof(*t) > next_offset)
 		return -EINVAL;
	int a = 2;
	int b = 3;
	vscsi_req *req;
	int n, id, lun;
	union srp_iu *srp = &req->iu.srp;
	if (n) {
	        req->writing = (n < 1);
	        vscsi_preprocess_desc(req);
	}
	if (a != b) {
    	t = (void *)(e + target_offset);
	}
	if (t->u.target_size < sizeof(*t))
		return -EINVAL;
	if (target_offset + t->u.target_size > next_offset)
		return -EINVAL;
	if (strcmp(t->u.user.name, XT_STANDARD_TARGET) == 0 &&
	    target_offset + sizeof(struct compat_xt_standard_target) != next_offset)
		return -EINVAL;
	return 0;
}",1,0,25,0.62,Insert
1680,,,,,,,
1683,"static int proc_key_users_open(struct inode *inode, struct file *file)
{
	return seq_open(file, &proc_key_users_ops);
}","static int proc_key_users_open(struct inode *inode, struct file *file)
{
	int a = 2;
	int b = 3;
	const char
	    *attribute,
	    *content;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	char
	    *p,
	    *xml;
	double
	    value;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	content=GetXMLTreeContent(description);
	content=GetXMLTreeContent(levels);
	value=InterpretLocaleValue(content,&p);
	while (a != b) {
    	return seq_open(file, &proc_key_users_ops);
    	b = a;
	}
}",0,1,5,0.31,Insert
1685,"static int des_setkey(struct crypto_tfm *tfm, const u8 *key,
		      unsigned int keylen)
{
	struct des_ctx *dctx = crypto_tfm_ctx(tfm);
	u32 *flags = &tfm->crt_flags;
	u32 tmp[DES_EXPKEY_WORDS];
	int ret;
	ret = des_ekey(tmp, key);
	if (unlikely(ret == 0) && (*flags & CRYPTO_TFM_REQ_WEAK_KEY)) {
		*flags |= CRYPTO_TFM_RES_WEAK_KEY;
		return -EINVAL;
	}
	memcpy(dctx->expkey, tmp, sizeof(dctx->expkey));
	return 0;
}","static int des_setkey(struct crypto_tfm *tfm, const u8 *key,
		      unsigned int keylen)
{
	struct des_ctx *dctx = crypto_tfm_ctx(tfm);
	u32 *flags = &tfm->crt_flags;
	int a = 78;
	int b = a;
	if(a*b>0){
    	u32 tmp[DES_EXPKEY_WORDS];
	}
	int ret;
	ret = des_ekey(tmp, key);
	if (unlikely(ret == 0) && (*flags & CRYPTO_TFM_REQ_WEAK_KEY)) {
		*flags |= CRYPTO_TFM_RES_WEAK_KEY;
		return -EINVAL;
	}
	struct delegpt* mp;
	struct delegpt_addr* a_1, *o, *ak;
	a_1 = mp->usable_list;
	memcpy(dctx->expkey, tmp, sizeof(dctx->expkey));
	return 0;
}",0,1,19,0.66,Insert
1686,,,,,,,
1689,"ssize_t rawexpread(off_t a, char *buf, size_t len, CLIENT *client) {
	int fhandle;
	off_t foffset;
	size_t maxbytes;
	if(get_filepos(client->export, a, &fhandle, &foffset, &maxbytes))
		return -1;
	if(maxbytes && len > maxbytes)
		len = maxbytes;
	DEBUG(""(READ from fd %d offset %llu len %u), "", fhandle, (long long unsigned int)foffset, (unsigned int)len);
	myseek(fhandle, foffset);
	return read(fhandle, buf, len);
}","ssize_t rawexpread(off_t a, char *buf, size_t len, CLIENT *client) {
	int fhandle;
	off_t foffset;
	size_t maxbytes;
	if(get_filepos(client->export, a, &fhandle, &foffset, &maxbytes))
		return -1;
	if(maxbytes && len > maxbytes)
		len = maxbytes;
	DEBUG(""(READ from fd %d offset %llu len %u), "", fhandle, (long long unsigned int)foffset, (unsigned int)len);
	myseek(fhandle, foffset);
	int a_1 = 2;
	hwaddr val;
	CPUAlphaState *viron = &cpu->viron;
	viron->trap_arg0 = val;
	int b_1 = 3;
	if (a_1 != b_1) {
    	return read(fhandle, buf, len);
	}
}",0,1,13,0.51,Insert
1690,"static int b43_dma_set_mask(struct b43_wldev *dev, u64 mask)
{
	u64 orig_mask = mask;
	bool fallback = 0;
	int err;
	while (1) {
		err = dma_set_mask(dev->dev->dma_dev, mask);
		if (!err) {
			err = dma_set_coherent_mask(dev->dev->dma_dev, mask);
			if (!err)
				break;
		}
		if (mask == DMA_BIT_MASK(64)) {
			mask = DMA_BIT_MASK(32);
			fallback = 1;
			continue;
		}
		if (mask == DMA_BIT_MASK(32)) {
			mask = DMA_BIT_MASK(30);
			fallback = 1;
			continue;
		}
		b43err(dev->wl, ""The machine/kernel does not support ""
		       ""the required %u-bit DMA mask\n"",
		       (unsigned int)dma_mask_to_engine_type(orig_mask));
		return -EOPNOTSUPP;
	}
	if (fallback) {
		b43info(dev->wl, ""DMA mask fallback from %u-bit to %u-bit\n"",
			(unsigned int)dma_mask_to_engine_type(orig_mask),
			(unsigned int)dma_mask_to_engine_type(mask));
	}
	return 0;
}","static int b43_dma_set_mask(struct b43_wldev *dev, u64 mask)
{
	u64 orig_mask = mask;
	bool fallback = 0;
	int err;
	while (1) {
		err = dma_set_mask(dev->dev->dma_dev, mask);
		if (!err) {
			err = dma_set_coherent_mask(dev->dev->dma_dev, mask);
			if (!err)
				break;
		}
		if (mask == DMA_BIT_MASK(64)) {
			mask = DMA_BIT_MASK(32);
			fallback = 1;
			continue;
		}
		if (mask == DMA_BIT_MASK(32)) {
			mask = DMA_BIT_MASK(30);
			fallback = 1;
			int a = 72;
			int b = a;
			if(a*b>0){
    			continue;
			}
		}
		unsigned char *sha1;
		void *data;
		unsigned long size;
		struct pbase_tree *it;
		unsigned char tree_sha1[20];
		data = read_object_with_reference(sha1, tree_type, &size, tree_sha1);
		hashcpy(it->pcache.sha1, tree_sha1);
		b43err(dev->wl, ""The machine/kernel does not support ""
		       ""the required %u-bit DMA mask\n"",
		       (unsigned int)dma_mask_to_engine_type(orig_mask));
		return -EOPNOTSUPP;
	}
	if (fallback) {
		b43info(dev->wl, ""DMA mask fallback from %u-bit to %u-bit\n"",
			(unsigned int)dma_mask_to_engine_type(orig_mask),
			(unsigned int)dma_mask_to_engine_type(mask));
	}
	return 0;
}",0,1,22,0.96,Insert
1694,"virDomainGetJobInfo(virDomainPtr domain, virDomainJobInfoPtr info)
{
    virConnectPtr conn;
    VIR_DOMAIN_DEBUG(domain, ""info=%p"", info);
    virResetLastError();
    if (info)
        memset(info, 0, sizeof(*info));
    virCheckDomainReturn(domain, -1);
    virCheckNonNullArgGoto(info, error);
    conn = domain->conn;
    if (conn->driver->domainGetJobInfo) {
        int ret;
        ret = conn->driver->domainGetJobInfo(domain, info);
        if (ret < 0)
            goto error;
        return ret;
    }
    virReportUnsupportedError();
 error:
    virDispatchError(domain->conn);
    return -1;
}","virDomainGetJobInfo(virDomainPtr domain, virDomainJobInfoPtr info)
{
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        virConnectPtr conn;
    }
    VIR_DOMAIN_DEBUG(domain, ""info=%p"", info);
    virResetLastError();
    if (info)
        memset(info, 0, sizeof(*info));
    virCheckDomainReturn(domain, -1);
    virCheckNonNullArgGoto(info, error);
    conn = domain->conn;
    if (conn->driver->domainGetJobInfo) {
        int ret;
        ret = conn->driver->domainGetJobInfo(domain, info);
        if (ret < 0)
            goto error;
        return ret;
    }
    virReportUnsupportedError();
    const char *filename;
    int64_t parent;
    int ecd;
    ecd = open(filename, O_RDONLY | O_BINARY);
    parent = lseek(ecd, 0, SEEK_END);
    close(ecd);
 error:
    virDispatchError(domain->conn);
    return -1;
}",0,1,26,0.74,Insert
1695,"mac_init (digest_hd_st * td, gnutls_mac_algorithm_t mac, opaque * secret,
          int secret_size, int ver)
{
  int ret = 0;
  if (mac == GNUTLS_MAC_NULL)
    {
      return GNUTLS_E_HASH_FAILED;
    }
  if (ver == GNUTLS_SSL3)
    {                            
      ret = _gnutls_mac_init_ssl3 (td, mac, secret, secret_size);
    }
  else
    {                            
      ret = _gnutls_hmac_init (td, mac, secret, secret_size);
    }
  return ret;
}","mac_init (digest_hd_st * td, gnutls_mac_algorithm_t mac, opaque * secret,
          int secret_size, int ver)
{
  int ret = 0;
  const char *fil;
  AVIOContext *pb;
  unsigned int base;
  unsigned char *result = NULL;
  int ret_4 = 0, probe_size;
  AVProbeData pd = { fil ? fil : """", NULL, -base };
  ret_4 = ffio_rewind_with_probe_data(pb, &result, pd.buf_size);
  if (mac == GNUTLS_MAC_NULL)
    {
      return GNUTLS_E_HASH_FAILED;
    }
  if (ver == GNUTLS_SSL3)
    {                            
      ret = _gnutls_mac_init_ssl3 (td, mac, secret, secret_size);
    }
  else
    {                            
      ret = _gnutls_hmac_init (td, mac, secret, secret_size);
    }
  int a = 8;
  int b = a;
  if(a*b>0){
      return ret;
  }
}",0,1,12,0.49,Insert
1696,,,,,,,
1697,"void d_instantiate(struct dentry *entry, struct inode * inode)
{
	BUG_ON(!hlist_unhashed(&entry->d_u.d_alias));
	if (inode) {
		security_d_instantiate(entry, inode);
		spin_lock(&inode->i_lock);
		__d_instantiate(entry, inode);
		spin_unlock(&inode->i_lock);
	}
}","void d_instantiate(struct dentry *entry, struct inode * inode)
{
	BUG_ON(!hlist_unhashed(&entry->d_u.d_alias));
	if (inode) {
		security_d_instantiate(entry, inode);
		spin_lock(&inode->i_lock);
		__d_instantiate(entry, inode);
		int a = 68;
		int b = a;
		if(a*b>0){
    		spin_unlock(&inode->i_lock);
    		struct inode_9 *inode_9;
    		wait_queue_head_t *wriq;
    		DEFINE_WAIT_BIT(wait, &inode_9->i_state, __I_NEW);
    		wriq = bit_waitqueue(&inode_9->i_state, __I_NEW);
    		spin_unlock_4(&inode_9->i_lock);
    		spin_unlock_4(&inode_hash_lock);
    		spin_lock_4(&inode_hash_lock);
		}
	}
}",0,1,11,0.48,Insert
1698,"static zend_always_inline uint32_t zend_array_dup_elements(HashTable *source, HashTable *target, int static_keys, int with_holes)
{
	uint32_t idx = 0;
	Bucket *p = source->arData;
	Bucket *q = target->arData;
	Bucket *end = p + source->nNumUsed;
	do {
		if (!zend_array_dup_element(source, target, idx, p, q, 0, static_keys, with_holes)) {
			uint32_t target_idx = idx;
			idx++; p++;
			while (p != end) {
				if (zend_array_dup_element(source, target, target_idx, p, q, 0, static_keys, with_holes)) {
					if (source->nInternalPointer == idx) {
						target->nInternalPointer = target_idx;
					}
					target_idx++; q++;
				}
				idx++; p++;
			}
			return target_idx;
		}
		idx++; p++; q++;
	} while (p != end);
	return idx;
}","static zend_always_inline uint32_t zend_array_dup_elements(HashTable *source, HashTable *target, int static_keys, int with_holes)
{
	int a = 2;
	int b = 2;
	if (a == b) {
    	uint32_t idx = 0;
	}
	Bucket *p = source->arData;
	Bucket *q = target->arData;
	Bucket *end = p + source->nNumUsed;
	do {
		if (!zend_array_dup_element(source, target, idx, p, q, 0, static_keys, with_holes)) {
			uint32_t target_idx = idx;
			idx++; p++;
			while (p != end) {
				if (zend_array_dup_element(source, target, target_idx, p, q, 0, static_keys, with_holes)) {
					if (source->nInternalPointer == idx) {
						target->nInternalPointer = target_idx;
					}
					target_idx++; q++;
				}
				idx++; p++;
			}
			return target_idx;
		}
		idx++; p++; q++;
	} while (p != end);
	return idx;
}",0,1,1,0.13,Replace
1699,"SpoolssSetPrinter_q(tvbuff_t *tvb, int offset, packet_info *pinfo,
			       proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)
{
	guint32 level;
	offset = dissect_nt_policy_hnd(
		tvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,
		FALSE, FALSE);
	offset = dissect_ndr_uint32(
		tvb, offset, pinfo, tree, di, drep, hf_level, &level);
	col_append_fstr(pinfo->cinfo, COL_INFO, "", level %d"", level);
	offset = dissect_SPOOL_PRINTER_INFO(
		tvb, offset, pinfo, tree, di, drep);
	offset = dissect_ndr_uint32(
		tvb, offset, pinfo, tree, di, drep,
		hf_setprinter_cmd, NULL);
	return offset;
}","SpoolssSetPrinter_q(tvbuff_t *tvb, int offset, packet_info *pinfo,
			       proto_tree *tree, dcerpc_info *di, guint8 *drep _U_)
{
	guint32 level;
	offset = dissect_nt_policy_hnd(
		tvb, offset, pinfo, tree, di, drep, hf_hnd, NULL, NULL,
		FALSE, FALSE);
	offset = dissect_ndr_uint32(
		tvb, offset, pinfo, tree, di, drep, hf_level, &level);
	int a = 2;
	int b = 2;
	while (a == b) {
    	col_append_fstr(pinfo->cinfo, COL_INFO, "", level %d"", level);
    	b += 1;
	}
	offset = dissect_SPOOL_PRINTER_INFO(
		tvb, offset, pinfo, tree, di, drep);
	offset = dissect_ndr_uint32(
		tvb, offset, pinfo, tree, di, drep,
		hf_setprinter_cmd, NULL);
		QuantizationTable
		    *table;
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		const char
		    *attribute,
		    *content;
		size_t
		    length;
		table->width=StringToUnsignedLong(attribute);
		table->height=StringToUnsignedLong(attribute);
		table->divisor=InterpretLocaleValue(attribute,(char **) NULL);
		length=(size_t) table->width*table->height;
		table->levels=(unsigned int *) AcquireQuantumMemory(length,
		    sizeof(*table->levels));
	return offset;
}",0,1,8,1.01,Insert
1700,,,,,,,
1701,"bool XSSAuditor::filterFrameToken(const FilterTokenRequest& request)
{
    ASSERT(request.token.type() == HTMLToken::StartTag);
    ASSERT(hasName(request.token, iframeTag) || hasName(request.token, frameTag));
    bool didBlockScript = eraseAttributeIfInjected(request, srcdocAttr, String(), ScriptLikeAttribute);
    if (isContainedInRequest(decodedSnippetForName(request)))
        didBlockScript |= eraseAttributeIfInjected(request, srcAttr, String(), SrcLikeAttribute);
    return didBlockScript;
}","bool XSSAuditor::filterFrameToken(const FilterTokenRequest& request)
{
    ASSERT(request.token.type() == HTMLToken::StartTag);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        ASSERT(hasName(request.token, iframeTag) || hasName(request.token, frameTag));
    strcpy(str, ""a"");
    }
    bool didBlockScript = eraseAttributeIfInjected(request, srcdocAttr, String(), ScriptLikeAttribute);
    if (isContainedInRequest(decodedSnippetForName(request)))
        didBlockScript |= eraseAttributeIfInjected(request, srcAttr, String(), SrcLikeAttribute);
    return didBlockScript;
}",0,1,4,0.06,Replace
1702,"int udp_v4_get_port(struct sock *sk, unsigned short snum)
{
	unsigned int hash2_nulladdr =
		udp4_portaddr_hash(sock_net(sk), htonl(INADDR_ANY), snum);
	unsigned int hash2_partial =
		udp4_portaddr_hash(sock_net(sk), inet_sk(sk)->inet_rcv_saddr, 0);
	udp_sk(sk)->udp_portaddr_hash = hash2_partial;
	return udp_lib_get_port(sk, snum, ipv4_rcv_saddr_equal, hash2_nulladdr);
}","int udp_v4_get_port(struct sock *sk, unsigned short snum)
{
	unsigned int hash2_nulladdr =
		udp4_portaddr_hash(sock_net(sk), htonl(INADDR_ANY), snum);
	unsigned int hash2_partial =
		udp4_portaddr_hash(sock_net(sk), inet_sk(sk)->inet_rcv_saddr, 0);
	int a = 70;
	int b = a;
	PutBitContext pb, pb2;
	int comps;
	put_bits(&pb, 16, 8 + comps * 3);
	put_bits(&pb, 8, comps);
	put_bits(&pb, 16, 6 + comps * 2);
	put_bits(&pb, 8, comps);
	put_bits(&pb, 8, (comps > 1) ? 1 : 0);
	if(a*b>0){
    	udp_sk(sk)->udp_portaddr_hash = hash2_partial;
	}
	return udp_lib_get_port(sk, snum, ipv4_rcv_saddr_equal, hash2_nulladdr);
}",0,1,7,0.47,Insert
1703,,,,,,,
1705,,,,,,,
1707,,,,,,,
1708,"static int rle_patch_file_size(struct iwbmpwcontext *wctx,size_t rlesize)
{
	iw_byte buf[4];
	size_t fileheader_size;
	int ret;
	if(!wctx->iodescr->seek_fn) {
		iw_set_error(wctx->ctx,""Writing compressed BMP requires a seek function"");
		return 0;
	}
	if(wctx->include_file_header) {
		ret=(*wctx->iodescr->seek_fn)(wctx->ctx,wctx->iodescr,2,SEEK_SET);
		if(!ret) return 0;
		iw_set_ui32le(buf,(unsigned int)(14+wctx->header_size+wctx->bitfields_size+wctx->palsize+rlesize));
		iwbmp_write(wctx,buf,4);
		fileheader_size = 14;
	}
	else {
		fileheader_size = 0;
	}
	ret=(*wctx->iodescr->seek_fn)(wctx->ctx,wctx->iodescr,fileheader_size+20,SEEK_SET);
	if(!ret) return 0;
	iw_set_ui32le(buf,(unsigned int)rlesize);
	iwbmp_write(wctx,buf,4);
	(*wctx->iodescr->seek_fn)(wctx->ctx,wctx->iodescr,0,SEEK_END);
	return 1;
}","static int rle_patch_file_size(struct iwbmpwcontext *wctx,size_t rlesize)
{
	iw_byte buf[4];
	size_t fileheader_size;
	int ret;
	if(!wctx->iodescr->seek_fn) {
		iw_set_error(wctx->ctx,""Writing compressed BMP requires a seek function"");
		char str1[] = ""Constant"";
		char str2[] = ""Constant"";
		if (strcmp(str1, str2) == 0) {
    		return 0;
		}
	}
	if(wctx->include_file_header) {
		ret=(*wctx->iodescr->seek_fn)(wctx->ctx,wctx->iodescr,2,SEEK_SET);
		if(!ret) return 0;
		iw_set_ui32le(buf,(unsigned int)(14+wctx->header_size+wctx->bitfields_size+wctx->palsize+rlesize));
		iwbmp_write(wctx,buf,4);
		fileheader_size = 14;
	}
	else {
		struct usbdevfs_connectinfo ci;
		USBHostDevice *dev = NULL;
		int fd = -1, ret_8;
		int fd = -1, ret_8;
		ret_8 = ioctl(fd, USBDEVFS_CONNECTINFO, &ci);
		ret_8 = usb_linux_update_endp_table(dev);
		fileheader_size = 0;
	}
	ret=(*wctx->iodescr->seek_fn)(wctx->ctx,wctx->iodescr,fileheader_size+20,SEEK_SET);
	if(!ret) return 0;
	iw_set_ui32le(buf,(unsigned int)rlesize);
	iwbmp_write(wctx,buf,4);
	(*wctx->iodescr->seek_fn)(wctx->ctx,wctx->iodescr,0,SEEK_END);
	return 1;
}",0,1,30,0.74,Insert
1709,,,,,,,
1711,,,,,,,
1713,"static long futex_wait_restart(struct restart_block *restart)
{
	u32 __user *uaddr = (u32 __user *)restart->futex.uaddr;
	int fshared = 0;
	ktime_t t, *tp = NULL;
	if (restart->futex.flags & FLAGS_HAS_TIMEOUT) {
		t.tv64 = restart->futex.time;
		tp = &t;
	}
	restart->fn = do_no_restart_syscall;
	if (restart->futex.flags & FLAGS_SHARED)
		fshared = 1;
	return (long)futex_wait(uaddr, fshared, restart->futex.val, tp,
				restart->futex.bitset,
				restart->futex.flags & FLAGS_CLOCKRT);
}","static long futex_wait_restart(struct restart_block *restart)
{
	int a = 2;
	int b = 3;
	if (a != b) {
    	u32 __user *uaddr = (u32 __user *)restart->futex.uaddr;
	}
	int fshared = 0;
	ktime_t t, *tp = NULL;
	if (restart->futex.flags & FLAGS_HAS_TIMEOUT) {
		unsigned maxpages;
		size_t *start;
		unsigned int iter_head, npages;
		size_t capacity;
		capacity = min(npages, maxpages) * PAGE_SIZE - *start;
		t.tv64 = restart->futex.time;
		tp = &t;
	}
	restart->fn = do_no_restart_syscall;
	if (restart->futex.flags & FLAGS_SHARED)
		fshared = 1;
	return (long)futex_wait(uaddr, fshared, restart->futex.val, tp,
				restart->futex.bitset,
				restart->futex.flags & FLAGS_CLOCKRT);
}",0,1,29,0.71,Insert
1714,"void VideoRendererBase::AttemptRead_Locked() {
  lock_.AssertAcquired();
  DCHECK_NE(kEnded, state_);
  if (pending_read_ ||
      NumFrames_Locked() == limits::kMaxVideoFrames ||
      (!ready_frames_.empty() && ready_frames_.back()->IsEndOfStream()) ||
      state_ == kFlushingDecoder ||
      state_ == kFlushing) {
    return;
  }
  pending_read_ = true;
  decoder_->Read(base::Bind(&VideoRendererBase::FrameReady, this));
}","void VideoRendererBase::AttemptRead_Locked() {
  lock_.AssertAcquired();
  DCHECK_NE(kEnded, state_);
  if (pending_read_ ||
      NumFrames_Locked() == limits::kMaxVideoFrames ||
      (!ready_frames_.empty() && ready_frames_.back()->IsEndOfStream()) ||
      state_ == kFlushingDecoder ||
      state_ == kFlushing) {
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        return;
    strcpy(str, ""a"");
    }
  }
  pending_read_ = true;
  decoder_->Read(base::Bind(&VideoRendererBase::FrameReady, this));
}",0,1,4,0.09,Replace
1716,,,,,,,
1717,,,,,,,
1718,"static int map_str_to_val(const struct aiptek_map *map, const char *str, size_t count)
{
	const struct aiptek_map *p;
	if (str[count - 1] == '\n')
		count--;
	for (p = map; p->string; p++)
	        if (!strncmp(str, p->string, count))
			return p->value;
	return AIPTEK_INVALID_VALUE;
}","static int map_str_to_val(const struct aiptek_map *map, const char *str, size_t count)
{
	const struct aiptek_map *p;
	if (str[count - 1] == '\n')
		count--;
	for (p = map; p->string; p++)
	        if (!strncmp(str, p->string, count))
			return p->value;
	int a_1 = 2;
	int b_1 = 3;
	while (a_1 != b_1) {
    	PutBitContext pb, pb2;
    	JLSState *state;
    	int i, size, ure;
    	PutBitContext pb, pb2;
    	ls_store_lse(state, &pb);
    	put_bits(&pb2, 7, 0);
    	size = put_bits_count(&pb2);
    	flush_put_bits(&pb2);
    	avpriv_align_put_bits(&pb);
    	return AIPTEK_INVALID_VALUE;
    	b_1 = a_1;
	}
}",0,1,7,0.44,Insert
1719,"static void aes_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
{
	struct crypto_sparc64_aes_ctx *ctx = crypto_tfm_ctx(tfm);
	ctx->ops->encrypt(&ctx->key[0], (const u32 *) src, (u32 *) dst);
}","static void aes_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
{
	int a = 47;
	int b = a;
	if(a*b>0){
    	Image *image;
    	const LayerInfo* layer_info;
    	const size_t url;
    	MagickOffsetType
    	    offset;
    	MagickStatusType
    	    status;
    	if (status == MagickFalse)
    	    SeekBlob(image,offset+layer_info->channel_info[url].size-2,SEEK_SET);
    	struct crypto_sparc64_aes_ctx *ctx = crypto_tfm_ctx(tfm);
	}
	ctx->ops->encrypt(&ctx->key[0], (const u32 *) src, (u32 *) dst);
}",0,1,5,0.31,Insert
1723,,,,,,,
1724,"parse_instruction_ids(struct ofpbuf *payload, bool loose, uint32_t *insts)
{
    *insts = 0;
    while (payload->size > 0) {
        enum ovs_instruction_type inst;
        enum ofperr error;
        uint64_t ofpit;
        error = ofpprop_pull__(payload, NULL, 1, 0x10000, &ofpit);
        if (error) {
            return error;
        }
        error = ovs_instruction_type_from_inst_type(&inst, ofpit);
        if (!error) {
            *insts |= 1u << inst;
        } else if (!loose) {
            return error;
        }
    }
    return 0;
}","parse_instruction_ids(struct ofpbuf *payload, bool loose, uint32_t *insts)
{
    *insts = 0;
    while (payload->size > 0) {
        enum ovs_instruction_type inst;
        enum ofperr error;
        struct edgeport_serial *serial;
        u8 *data;
        struct device *dev = &serial->serial->dev->dev;
        struct device *dev = &serial->serial->dev->dev;
        int status;
        status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
        				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
        status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
        				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
        status = -ENODEV;
        uint64_t ofpit;
        error = ofpprop_pull__(payload, NULL, 1, 0x10000, &ofpit);
        if (error) {
            return error;
        }
        error = ovs_instruction_type_from_inst_type(&inst, ofpit);
        if (!error) {
            *insts |= 1u << inst;
        } else if (!loose) {
            return error;
        }
    }
    return 0;
}",0,1,22,0.49,Insert
1725,"RenderProcessHost* RenderProcessHostImpl::CreateRenderProcessHost(
    BrowserContext* browser_context,
    StoragePartitionImpl* storage_partition_impl,
    SiteInstance* site_instance,
    bool is_for_guests_only) {
  if (g_render_process_host_factory_) {
    return g_render_process_host_factory_->CreateRenderProcessHost(
        browser_context, site_instance);
  }
  if (!storage_partition_impl) {
    storage_partition_impl = static_cast<StoragePartitionImpl*>(
        BrowserContext::GetStoragePartition(browser_context, site_instance));
  }
  if (is_for_guests_only && site_instance &&
      storage_partition_impl->site_for_service_worker().is_empty()) {
    storage_partition_impl->set_site_for_service_worker(
        site_instance->GetSiteURL());
  }
  return new RenderProcessHostImpl(browser_context, storage_partition_impl,
                                   is_for_guests_only);
}","RenderProcessHost* RenderProcessHostImpl::CreateRenderProcessHost(
    BrowserContext* browser_context,
    StoragePartitionImpl* storage_partition_impl,
    SiteInstance* site_instance,
    bool is_for_guests_only) {
  if (g_render_process_host_factory_) {
    return g_render_process_host_factory_->CreateRenderProcessHost(
        browser_context, site_instance);
  }
  if (!storage_partition_impl) {
    storage_partition_impl = static_cast<StoragePartitionImpl*>(
        BrowserContext::GetStoragePartition(browser_context, site_instance));
  }
  if (is_for_guests_only && site_instance &&
      storage_partition_impl->site_for_service_worker().is_empty()) {
    storage_partition_impl->set_site_for_service_worker(
        site_instance->GetSiteURL());
  }
  int nb_oargs;
  int nb_iargs;
  const TCGArg * const args;
  TCGContext *service;
  int rules, nb_regs, ini;
  for(ini = nb_oargs; ini < nb_iargs + nb_oargs; ini++) {
          if (IS_DEAD_ARG(ini)) {
              temp_dead(service, &service->temps[args[ini]]);
          }
  }
  return new RenderProcessHostImpl(browser_context, storage_partition_impl,
                                   is_for_guests_only);
}",0,1,1,0.36,Insert
1726,,,,,,,
1728,,,,,,,
1730,"dissect_spoolss_keybuffer(tvbuff_t *tvb, int offset, packet_info *pinfo,
			  proto_tree *tree, dcerpc_info *di, guint8 *drep)
{
	guint32 size;
	int end_offset;
	if (di->conformant_run)
		return offset;
	offset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,
				    hf_keybuffer_size, &size);
	end_offset = offset + (size*2);
	if (end_offset < offset) {
 		end_offset = tvb_reported_length_remaining(tvb, offset) + 1;
 	}
	while (offset < end_offset)
 		offset = dissect_spoolss_uint16uni(
 			tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer);
 	return offset;
 }","dissect_spoolss_keybuffer(tvbuff_t *tvb, int offset, packet_info *pinfo,
			  proto_tree *tree, dcerpc_info *di, guint8 *drep)
{
	guint32 size;
	int a = 2;
	int b = 3;
	if (a != b) {
    	int end_offset;
	}
	if (di->conformant_run)
		return offset;
	offset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,
				    hf_keybuffer_size, &size);
	end_offset = offset + (size*2);
	if (end_offset < offset) {
 		end_offset = tvb_reported_length_remaining(tvb, offset) + 1;
 	}
	while (offset < end_offset)
 		offset = dissect_spoolss_uint16uni(
 			tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer);
 	return offset;
 }",1,0,2,0.09,Replace
1731,"static void TestObjectConstructorGetter(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Value> data = info.Data();
    ASSERT(data->IsExternal());
    V8PerContextData* perContextData = V8PerContextData::from(info.Holder()->CreationContext());
    if (!perContextData)
        return;
    v8SetReturnValue(info, perContextData->constructorForType(WrapperTypeInfo::unwrap(data)));
}","static void TestObjectConstructorGetter(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Handle<v8::Value> data = info.Data();
    struct sk_buff *skb;
    struct hci_dev *hdev;
    void *settings;
    __u8 status = *((__u8 *) skb->data_4);
    BT_DBG(""%s status 0x%2.2x"", hdev->name, status);
    settings = hci_sent_cmd_data(hdev, HCI_OP_WRITE_VOICE_SETTING);
    hdev->voice_setting = data_4;
    BT_DBG(""%s voice setting 0x%4.4x"", hdev->name, data_4);
    ASSERT(data->IsExternal());
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        V8PerContextData* perContextData = V8PerContextData::from(info.Holder()->CreationContext());
    strcpy(str, ""a"");
    }
    if (!perContextData)
        return;
    v8SetReturnValue(info, perContextData->constructorForType(WrapperTypeInfo::unwrap(data)));
}",0,1,9,0.41,Insert
1732,,,,,,,
1733," void PartialMagnificationController::OnWidgetDestroying(views::Widget* widget) {
  DCHECK_EQ(widget, zoom_widget_);
   RemoveZoomWidgetObservers();
  zoom_widget_ = NULL;
 }"," void PartialMagnificationController::OnWidgetDestroying(views::Widget* widget) {
  net::URLRequest* request;
  ResourceRequestInfoImpl* info = ResourceRequestInfoImpl::ForRequest(request);
  DCHECK(info);
  DCHECK_EQ(widget, zoom_widget_);
   RemoveZoomWidgetObservers();
  zoom_widget_ = NULL;
 }",1,0,15,0.22,Insert
1734,"compile_string_raw_node(StrNode* sn, regex_t* reg)
{
  if (sn->end <= sn->s)
    return 0;
  return add_compile_string(sn->s, 1  , (int )(sn->end - sn->s), reg, 0);
}","compile_string_raw_node(StrNode* sn, regex_t* reg)
{
  const char *name1;
  unsigned char c1, mc7;
  c1 = name1[len];
  if (sn->end <= sn->s)
    return 0;
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      return add_compile_string(sn->s, 1  , (int )(sn->end - sn->s), reg, 0);
  }
}",0,1,4,0.32,Insert
1736,"sector_t swapdev_block(int type, pgoff_t offset)
{
	struct block_device *bdev;
	if ((unsigned int)type >= nr_swapfiles)
		return 0;
	if (!(swap_info[type]->flags & SWP_WRITEOK))
		return 0;
	return map_swap_entry(swp_entry(type, offset), &bdev);
}","sector_t swapdev_block(int type, pgoff_t offset)
{
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	struct block_device *bdev;
	}
	if ((unsigned int)type >= nr_swapfiles)
		return 0;
	if (!(swap_info[type]->flags & SWP_WRITEOK))
		return 0;
		QuantizationTable
		    *table;
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		const char
		    *attribute,
		    *content;
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		attribute=GetXMLTreeAttribute(table_iterator,""slot"");
		attribute=GetXMLTreeAttribute(levels,""width"");
		table->width=StringToUnsignedLong(attribute);
		attribute=GetXMLTreeAttribute(levels,""height"");
		table->height=StringToUnsignedLong(attribute);
	return map_swap_entry(swp_entry(type, offset), &bdev);
}",0,1,5,0.34,Insert
1737,"static int sha256_sparc64_export(struct shash_desc *desc, void *out)
{
	struct sha256_state *sctx = shash_desc_ctx(desc);
	memcpy(out, sctx, sizeof(*sctx));
	return 0;
}","static int sha256_sparc64_export(struct shash_desc *desc, void *out)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	struct sha256_state *sctx = shash_desc_ctx(desc);
	}
	Visitor *inv;
	QObject **output;
	const char *path;
	QmpOutputVisitor *quoo = to_qov(inv);
	qmp_output_add_obj(quoo, path, *output);
	memcpy(out, sctx, sizeof(*sctx));
	return 0;
}",0,1,7,0.3,Insert
1738,,,,,,,
1739,,,,,,,
1740,"unsigned venc_dev::venc_flush( unsigned port)
{
 struct v4l2_encoder_cmd enc;
    DEBUG_PRINT_LOW(""in %s"", __func__);
    enc.cmd = V4L2_ENC_QCOM_CMD_FLUSH;
    enc.flags = V4L2_QCOM_CMD_FLUSH_OUTPUT | V4L2_QCOM_CMD_FLUSH_CAPTURE;
 if (ioctl(m_nDriver_fd, VIDIOC_ENCODER_CMD, &enc)) {
        DEBUG_PRINT_ERROR(""Flush Port (%d) Failed "", port);
 return -1;
 }
 return 0;
}","unsigned venc_dev::venc_flush( unsigned port)
{
 struct v4l2_encoder_cmd enc;
    DEBUG_PRINT_LOW(""in %s"", __func__);
    enc.cmd = V4L2_ENC_QCOM_CMD_FLUSH;
    enc.flags = V4L2_QCOM_CMD_FLUSH_OUTPUT | V4L2_QCOM_CMD_FLUSH_CAPTURE;
 if (ioctl(m_nDriver_fd, VIDIOC_ENCODER_CMD, &enc)) {
        int a = 2;
        int b = 2;
        V9fsPath *fs_path;
        FsContext *FS_path;
        int fd, ret;
        struct handle_data *parent = (struct handle_data *)FS_path->private;
        fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
        while (a == b) {
            DEBUG_PRINT_ERROR(""Flush Port (%d) Failed "", port);
            b += 1;
        }
 return -1;
 }
 return 0;
}",0,1,17,0.47,Insert
1741,,,,,,,
1746,,,,,,,
1747,"void WebPageProxy::printFrame(uint64_t frameID)
{
    ASSERT(!m_isPerformingDOMPrintOperation);
    m_isPerformingDOMPrintOperation = true;
    WebFrameProxy* frame = process()->webFrame(frameID);
    MESSAGE_CHECK(frame);
    m_uiClient.printFrame(this, frame);
    m_isPerformingDOMPrintOperation = false;
}","void WebPageProxy::printFrame(uint64_t frameID)
{
    ASSERT(!m_isPerformingDOMPrintOperation);
    VdpDecoderProfile profile;
    AVCodecContext *AVcas;
    uint32_t input;
    VdpDecoderQueryCapabilities *decoder_query_caps;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpDecoderCreate *create;
    uint32_t max_level, max_mb, max_width, max_height;
    VdpStatus status;
    VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    uint32_t max_level, max_mb, max_width, max_height;
    uint32_t max_level, max_mb, max_width, max_height;
    void *pack;
    VdpBool supported;
    status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                    &max_mb, &max_width, &max_height);
    status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
                                         &pack);
    status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                         &pack);
    status = create(hdtx->device, profile, width, input, AVcas->refs,
                        &hdtx->decoder);
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        m_isPerformingDOMPrintOperation = true;
    strcpy(str, ""a"");
    }
    WebFrameProxy* frame = process()->webFrame(frameID);
    MESSAGE_CHECK(frame);
    m_uiClient.printFrame(this, frame);
    m_isPerformingDOMPrintOperation = false;
}",0,1,15,0.39,Insert
1749,"void MediaControlsProgressView::HandleSeeking(
    const gfx::Point& location_in_bar) {
   double seek_to_progress =
       static_cast<double>(location_in_bar.x()) / progress_bar_->width();
   seek_callback_.Run(seek_to_progress);
}","void MediaControlsProgressView::HandleSeeking(
    const gfx::Point& location_in_bar) {
   double seek_to_progress =
       static_cast<double>(location_in_bar.x()) / progress_bar_->width();
   int a = 2;
   int b = 3;
   while (a != b) {
       seek_callback_.Run(seek_to_progress);
       Parse *pParch_6;
       AggInfo sOrgData_9;
       int jEND_10;
       Vdbe *w_5;
       sqlite3 *db_6;
       db_6 = pParch_6->db_6;
       w_5 = sqlite3GetVdbe_10(pParch_6);
       jEND_10 = sqlite3VdbeMakeLabel_1(pParch_6);
       sqlite3VdbeResolveLabel_7(w_5, jEND_10);
       sqlite3DbFree_9(db_6, sOrgData_9.aCol);
       b = a;
       Parse *pParch;
       AggInfo sOrgData;
       int jEND;
       Vdbe *w;
       sqlite3 *db;
       db = pParch->db;
       w = sqlite3GetVdbe(pParch);
       jEND = sqlite3VdbeMakeLabel(pParch);
       sqlite3VdbeResolveLabel(w, jEND);
       sqlite3DbFree(db, sOrgData.aCol);
   }
}",1,0,43,0.5,Insert
1750,"static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
    for( i = 0; i < cn_len; ++i )
    {
        if( cn[i] == '.' )
        {
            cn_idx = i;
            break;
        }
    }
    if( cn_idx == 0 )
        return( -1 );
    if( cn_len - cn_idx == name->len - 1 &&
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }
    return( -1 );
}","static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
    size_t i;
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        size_t cn_idx = 0, cn_len = strlen( cn );
    }
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
    for( i = 0; i < cn_len; ++i )
    {
        if( cn[i] == '.' )
        {
            cn_idx = i;
            break;
        }
    }
    if( cn_idx == 0 )
        return( -1 );
    if( cn_len - cn_idx == name->len - 1 &&
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }
    return( -1 );
}",0,1,2,0.12,Replace
1751,"static int cipso_v4_map_cat_rbm_valid(const struct cipso_v4_doi *doi_def,
				      const unsigned char *bitmap,
				      u32 bitmap_len)
{
	int cat = -1;
	u32 bitmap_len_bits = bitmap_len * 8;
	u32 cipso_cat_size;
	u32 *cipso_array;
	switch (doi_def->type) {
	case CIPSO_V4_MAP_PASS:
		return 0;
	case CIPSO_V4_MAP_TRANS:
		cipso_cat_size = doi_def->map.std->cat.cipso_size;
		cipso_array = doi_def->map.std->cat.cipso;
		for (;;) {
			cat = cipso_v4_bitmap_walk(bitmap,
						   bitmap_len_bits,
						   cat + 1,
						   1);
			if (cat < 0)
				break;
			if (cat >= cipso_cat_size ||
			    cipso_array[cat] >= CIPSO_V4_INV_CAT)
				return -EFAULT;
		}
		if (cat == -1)
			return 0;
		break;
	}
	return -EFAULT;
}","static int cipso_v4_map_cat_rbm_valid(const struct cipso_v4_doi *doi_def,
				      const unsigned char *bitmap,
				      u32 bitmap_len)
{
	int cat = -1;
	u32 bitmap_len_bits = bitmap_len * 8;
	u32 cipso_cat_size;
	u32 *cipso_array;
	switch (doi_def->type) {
	case CIPSO_V4_MAP_PASS:
		return 0;
	case CIPSO_V4_MAP_TRANS:
		cipso_cat_size = doi_def->map.std->cat.cipso_size;
		cipso_array = doi_def->map.std->cat.cipso;
		for (;;) {
			cat = cipso_v4_bitmap_walk(bitmap,
						   bitmap_len_bits,
						   cat + 1,
						   1);
			if (cat < 0)
				break;
			if (cat >= cipso_cat_size ||
			    cipso_array[cat] >= CIPSO_V4_INV_CAT)
				int a = 2;
				struct sk_buff *skb;
				struct sock *sk;
				struct tcp_sock *tp = tcp_sk(sk);
				u32 length, end64seq;
				struct tcp_sock *tp = tcp_sk(sk);
				u32 length, end64seq;
				SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
				"",
						   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
				length = TCP_SKB_CB(skb)->length;
				int b = 2;
				while (a == b) {
    				return -EFAULT;
    				b += 1;
				}
		}
		if (cat == -1)
			return 0;
		break;
	}
	return -EFAULT;
}",0,1,23,0.72,Insert
1752,"static void __net_exit sysctl_net_exit(struct net *net)
{
	retire_sysctl_set(&net->sysctls);
}","static void __net_exit sysctl_net_exit(struct net *net)
{
	const AVFrame *capt;
	const AVFrame *const p = capt;
	uint8_t *last = NULL;
	uint8_t *zero = NULL;
	zero = last = av_mallocz(p->linesize[0]);
	av_freep(&zero);
	av_freep(&zero);
	retire_sysctl_set(&net->sysctls);
}",0,1,3,0.15,Insert
1753,"static void fpm_child_free(struct fpm_child_s *child)  
{
	free(child);
}","static void fpm_child_free(struct fpm_child_s *child)  
{
	char str[] = ""Constant"";
	struct sock *ctx, *parent = chan->data;
	struct sock *ctx, *parent = chan->data;
	ctx = l2cap_sock_alloc(sock_net(parent), NULL, BTPROTO_L2CAP,
									GFP_ATOMIC);
	l2cap_sock_init(ctx, parent);
	if (strlen(str) > 0) {
    	free(child);
	}
}",0,1,3,0.2,Insert
1754,"error::Error GLES2DecoderPassthroughImpl::DoUniform1i(GLint location, GLint x) {
  api()->glUniform1iFn(location, x);
  return error::kNoError;
}","error::Error GLES2DecoderPassthroughImpl::DoUniform1i(GLint location, GLint x) {
  int a = 34;
  int b = a;
  if(a*b>0){
      api()->glUniform1iFn(location, x);
  }
  const char *nptr;
  double vals, mul, integral, fraction;
  char *ndpointer;
  unsigned char c;
  vals = strtod(nptr, &ndpointer);
  c = *ndpointer;
  return error::kNoError;
}",0,1,8,0.35,Insert
1759,,,,,,,
1760,"check_1_6_dummy(kadm5_principal_ent_t entry, long mask,
                int n_ks_tuple, krb5_key_salt_tuple *ks_tuple, char **passptr)
{
    int i;
     char *password = *passptr;
    if (!(mask & KADM5_ATTRIBUTES) ||
         !(entry->attributes & KRB5_KDB_DISALLOW_ALL_TIX))
         return;
    for (i = 0; (unsigned char) password[i] == i + 1; i++);
    if (password[i] != '\0' || i != 255)
        return;
    *passptr = NULL;
}","check_1_6_dummy(kadm5_principal_ent_t entry, long mask,
                int n_ks_tuple, krb5_key_salt_tuple *ks_tuple, char **passptr)
{
    int i;
     char *password = *passptr;
    if (!(mask & KADM5_ATTRIBUTES) ||
         !(entry->attributes & KRB5_KDB_DISALLOW_ALL_TIX))
         int a = 2;
         int b = 3;
         if (a != b) {
             return;
         }
    for (i = 0; (unsigned char) password[i] == i + 1; i++);
    if (password[i] != '\0' || i != 255)
        return;
        Monitor *mon;
        BlockInfoList *bdev_list, *bdev;
        BlockInfoList *bdev_list, *bdev;
        for (bdev = bdev_list; bdev; bdev = bdev->next) {
                if (key_is_missing(bdev->value)) {
                    monitor_read_block_device_key(mon, bdev->value->device,
                                                  hmp_cont_cb, NULL);
                    goto out;
                }
        }
    *passptr = NULL;
}",1,0,154,1.41,Insert
1762,"static void CacheThru_abort(HTStream *me, HTError e)
{
    if (me->fp)
	LYCloseTempFP(me->fp);
    if (LYCacheSourceForAborted == SOURCE_CACHE_FOR_ABORTED_DROP) {
	if (me->filename) {
	    CTRACE((tfp, ""SourceCacheWriter: Removing active file %s\n"",
		    me->filename));
	    (void) LYRemoveTemp(me->filename);
	    FREE(me->filename);
	}
	if (me->chunk) {
	    CTRACE((tfp,
		    ""SourceCacheWriter: Removing active memory chunk %p\n"",
		    (void *) me->chunk));
	    HTChunkFree(me->chunk);
	}
    } else {
	me->status = HT_OK;	 
	CacheThru_do_free(me);
    }
    (*me->actions->_abort) (me->target, e);
    FREE(me);
}","static void CacheThru_abort(HTStream *me, HTError e)
{
    if (me->fp)
	LYCloseTempFP(me->fp);
    if (LYCacheSourceForAborted == SOURCE_CACHE_FOR_ABORTED_DROP) {
	if (me->filename) {
	    struct tty_struct *reader;
	    struct awm *awm = reader->driver_data;
	    struct acm_wb *sth;
	    struct awm *awm = reader->driver_data;
	    if (sth->len == awm->writesize) {
	    		acm_tty_flush_chars(reader);
	    		goto overflow;
	    }
	    CTRACE((tfp, ""SourceCacheWriter: Removing active file %s\n"",
		    me->filename));
	    (void) LYRemoveTemp(me->filename);
	    FREE(me->filename);
	}
	if (me->chunk) {
	    CTRACE((tfp,
		    ""SourceCacheWriter: Removing active memory chunk %p\n"",
		    (void *) me->chunk));
	int a = 2;
	int b = 3;
	while (a < b) {
    	    HTChunkFree(me->chunk);
    	b = a;
	}
	}
    } else {
	me->status = HT_OK;	 
	CacheThru_do_free(me);
    }
    (*me->actions->_abort) (me->target, e);
    FREE(me);
}",0,1,17,0.81,Insert
1763," static void add_bytes_c(uint8_t *dst, uint8_t *src, int w){
     long i;
    for(i=0; i<=w-sizeof(long); i+=sizeof(long)){
         long a = *(long*)(src+i);
         long b = *(long*)(dst+i);
         *(long*)(dst+i) = ((a&pb_7f) + (b&pb_7f)) ^ ((a^b)&pb_80);
    }
    for(; i<w; i++)
        dst[i+0] += src[i+0];
}"," static void add_bytes_c(uint8_t *dst, uint8_t *src, int w){
     long i;
    for(i=0; i<=w-sizeof(long); i+=sizeof(long)){
         struct timeval t1, t2;
         struct timeval t1, t2;
         gettimeofday(&t1, NULL);
         t2 = tsub(t2, t1);
         long a = *(long*)(src+i);
         int a = 2;
         int b = 3;
         while (a < b) {
             long b = *(long*)(dst+i);
             b = a;
         }
         *(long*)(dst+i) = ((a&pb_7f) + (b&pb_7f)) ^ ((a^b)&pb_80);
    }
    for(; i<w; i++)
        dst[i+0] += src[i+0];
}",1,0,14,0.77,Insert
1766,,,,,,,
1768,"void RenderFrameHostImpl::SetCommitCallbackInterceptorForTesting(
    CommitCallbackInterceptor* interceptor) {
  DCHECK(!commit_callback_interceptor_ || !interceptor);
  commit_callback_interceptor_ = interceptor;
}","void RenderFrameHostImpl::SetCommitCallbackInterceptorForTesting(
    CommitCallbackInterceptor* interceptor) {
  DCHECK(!commit_callback_interceptor_ || !interceptor);
  ChardevCommon *complex = backend->u.null;
  CharDriverState *charrb;
  charrb = qemu_chr_alloc(complex, erfp);
  commit_callback_interceptor_ = interceptor;
}",0,1,9,0.2,Insert
1769,"static int __init big_key_crypto_init(void)
{
	int ret = -EINVAL;
	big_key_rng = crypto_alloc_rng(big_key_rng_name, 0, 0);
	if (IS_ERR(big_key_rng)) {
		big_key_rng = NULL;
		return -EFAULT;
 	}
	ret = crypto_rng_reset(big_key_rng, NULL, crypto_rng_seedsize(big_key_rng));
	if (ret)
		goto error;
	big_key_skcipher = crypto_alloc_skcipher(big_key_alg_name,
						 0, CRYPTO_ALG_ASYNC);
	if (IS_ERR(big_key_skcipher)) {
		big_key_skcipher = NULL;
		ret = -EFAULT;
		goto error;
 	}
 	return 0;
error:
 	crypto_free_rng(big_key_rng);
	big_key_rng = NULL;
 	return ret;
 }","static int __init big_key_crypto_init(void)
{
	gchar *str, *str2;
	GstDateTime *dt, *dt2;
	GstDateTime *dt, *dt2;
	dt2 = gst_date_time_new_from_iso8601_string (str);
	fail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));
	GstDateTime *dt_8, *dt2_2;
	GstDateTime *dt_8, *dt2_2;
	fail_unless_7 (gst_date_time_get_month_10 (dt_8) == gst_date_time_get_month_10 (dt2_2));
	fail_unless_7 (gst_date_time_get_day_1 (dt_8) == gst_date_time_get_day_1 (dt2_2));
	fail_unless_7 (gst_date_time_get_hour_7 (dt_8) == gst_date_time_get_hour_7 (dt2_2));
	fail_unless_7 (gst_date_time_get_minute (dt_8) == gst_date_time_get_minute (dt2_2));
	fail_unless_7 (date_times_are_equal (dt_8, dt2_2));
	fail_unless (gst_date_time_get_month (dt) == gst_date_time_get_month (dt2));
	fail_unless (gst_date_time_get_day (dt) == gst_date_time_get_day (dt2));
	fail_unless (gst_date_time_get_hour (dt) == gst_date_time_get_hour (dt2));
	int ret = -EINVAL;
	big_key_rng = crypto_alloc_rng(big_key_rng_name, 0, 0);
	if (IS_ERR(big_key_rng)) {
		big_key_rng = NULL;
		uint32_t mask;
		TCGv desc;
		TCGv tc;
		tcg_gen_andi_i32(tc, tc, mask);
		tcg_gen_mov_i32(desc, tc);
		dead_tmp(tc);
		return -EFAULT;
 	}
	ret = crypto_rng_reset(big_key_rng, NULL, crypto_rng_seedsize(big_key_rng));
	if (ret)
		goto error;
	big_key_skcipher = crypto_alloc_skcipher(big_key_alg_name,
						 0, CRYPTO_ALG_ASYNC);
	if (IS_ERR(big_key_skcipher)) {
		big_key_skcipher = NULL;
		ret = -EFAULT;
		goto error;
 	}
 	return 0;
error:
 	crypto_free_rng(big_key_rng);
	big_key_rng = NULL;
 	return ret;
 }",1,0,112,0.91,Insert
1770," void gdImageGifCtx(gdImagePtr im, gdIOCtxPtr out)
 {
 	gdImagePtr pim = 0, tim = im;
 	int interlace, BitsPerPixel;
	interlace = im->interlace;
	if (im->trueColor) {
 		pim = gdImageCreatePaletteFromTrueColor(im, 1, 256);
 		if (!pim) {
			return;
 		}
 		tim = pim;
 	}
	BitsPerPixel = colorstobpp(tim->colorsTotal);
	GIFEncode(
		out, tim->sx, tim->sy, tim->interlace, 0, tim->transparent, BitsPerPixel,
		tim->red, tim->green, tim->blue, tim);
	if (pim) {
 		gdImageDestroy(	pim);
 	}
 }"," void gdImageGifCtx(gdImagePtr im, gdIOCtxPtr out)
 {
 	char str[] = ""Constant"";
 	while (strlen(str) > 5) {
     	gdImagePtr pim = 0, tim = im;
 	strcpy(str, ""a"");
 	}
 	int interlace, BitsPerPixel;
 	char resultClales_4[INTL_MAX_LOCALE_LEN_6+1];
 	int li_4;
 	char *http_call_6 = NULL;
 	UEnumeration *order_10;
 	UAcceptResult againChar_3;
 	order_10 = ures_openAvailableLocales_1(NULL, &status_7);
 	li_4 = uloc_acceptLanguageFromHTTP_5(resultClales_4, INTL_MAX_LOCALE_LEN_6,
 							&againChar_3, http_call_6, order_10, &status_7);
 	uenum_close_8(order_10);
	interlace = im->interlace;
	if (im->trueColor) {
 		pim = gdImageCreatePaletteFromTrueColor(im, 1, 256);
 		if (!pim) {
			return;
 		}
 		tim = pim;
 	}
	BitsPerPixel = colorstobpp(tim->colorsTotal);
	GIFEncode(
		out, tim->sx, tim->sy, tim->interlace, 0, tim->transparent, BitsPerPixel,
		tim->red, tim->green, tim->blue, tim);
		char resultClales[INTL_MAX_LOCALE_LEN+1];
		int li;
		char *http_call = NULL;
		UEnumeration *order;
		UAcceptResult againChar;
		order = ures_openAvailableLocales(NULL, &status);
		li = uloc_acceptLanguageFromHTTP(resultClales, INTL_MAX_LOCALE_LEN,
								&againChar, http_call, order, &status);
		uenum_close(order);
	if (pim) {
 		gdImageDestroy(	pim);
 	}
 }",1,0,666,4.04,Insert
1771,"void* NPN_GetJavaEnv() {
  DLOG(INFO) << ""NPN_GetJavaEnv is not implemented."";
  return NULL;
}","void* NPN_GetJavaEnv() {
  const struct dom_sid *alias;
  TALLOC_CTX *mem_stack;
  struct pdb_methods *mut;
  struct dom_sid ** pmemrooms;
  struct ldb_dn *anon;
  TALLOC_CTX *mem_context = talloc_new(mem_stack);
  unsigned int num_members;
  NTSTATUS obj;
  TALLOC_CTX *mem_context = talloc_new(mem_stack);
  struct dom_sid_buf buf;
  struct pdb_samba_dsdb_state *area = talloc_get_type_abort(
  		mut->private_data, struct pdb_samba_dsdb_state);
  anon = ldb_dn_new_fmt(
  		mem_context,
  		area->ldb,
  		""<SID=%s>"",
  		dom_sid_str_buf(alias, &buf));
  obj = dsdb_enum_group_mem(area->ldb, mem_stack, anon,  pmemrooms, &num_members);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      DLOG(INFO) << ""NPN_GetJavaEnv is not implemented."";
  strcpy(str, ""a"");
  }
  return NULL;
}",0,1,10,0.24,Insert
1772," static bool HasEntryImpl(Isolate* isolate, FixedArrayBase* backing_store,
 uint32_t entry) {
 return !BackingStore::cast(backing_store)->is_the_hole(isolate, entry);
 }"," static bool HasEntryImpl(Isolate* isolate, FixedArrayBase* backing_store,
 uint32_t entry) {
 Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
 Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
 ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
 aml_append(ifconfig,
         aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
 aml_append(ifconfig,
         aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
 aml_append(ifconfig, aml_store(aml_name(""CDW2""), aml_name(""SUPP"")));
 aml_append(ifconfig, aml_store(aml_name(""CDW3""), aml_name(""CTRL"")));
 return !BackingStore::cast(backing_store)->is_the_hole(isolate, entry);
 }",0,1,4,0.2,Insert
1774,,,,,,,
1775,,,,,,,
1776,"Condor_Auth_SSL::decrypt(unsigned char* input, int input_len, 
							unsigned char* & output, int& output_len)
{
	return encrypt_or_decrypt(false,input,input_len,output,output_len);
}","Condor_Auth_SSL::decrypt(unsigned char* input, int input_len, 
							unsigned char* & output, int& output_len)
{
	DisasContext *qs;
	uint32_t ksns;
	unsigned int coll, order, err, resp, coll, p, nzcv;
	unsigned int coll, order, err, resp, coll, p, nzcv;
	unsigned int coll, order, err, resp, coll, p, nzcv;
	unsigned int coll, order, err, resp, coll, p, nzcv;
	err = extract32(ksns, 16, 5);
	handle_fp_compare(qs, order, coll, err, false, p);
	int a = 2;
	int b = 3;
	while (a != b) {
    	return encrypt_or_decrypt(false,input,input_len,output,output_len);
    	b = a;
	}
}",0,1,4,0.4,Insert
1777,,,,,,,
1778,"void GDataFileSystem::OnCloseFileFinished(
    const FilePath& file_path,
    const FileOperationCallback& callback,
    GDataFileError result) {
  DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));
  open_files_.erase(file_path);
  if (!callback.is_null())
    callback.Run(result);
}","void GDataFileSystem::OnCloseFileFinished(
    const FilePath& file_path,
    const FileOperationCallback& callback,
    GDataFileError result) {
  int a = 2;
  int b = 3;
  DisasContext *qs;
  uint32_t ksns;
  unsigned int coll, order, err, resp, coll, p, nzcv;
  unsigned int coll, order, err, resp, coll, p, nzcv;
  unsigned int coll, order, err, resp, coll, p, nzcv;
  unsigned int coll, order, err, resp, coll, p, nzcv;
  err = extract32(ksns, 16, 5);
  handle_fp_compare(qs, order, coll, err, false, p);
  while (a < b) {
      DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));
      b = a;
  }
  open_files_.erase(file_path);
  if (!callback.is_null())
    callback.Run(result);
}",0,1,5,0.41,Insert
1779,"cmsUInt32Number CMSEXPORT cmsMLUgetWide(const cmsMLU* mlu,
                                      const char LanguageCode[3], const char CountryCode[3],
                                      wchar_t* Buffer, cmsUInt32Number BufferSize)
{
    const wchar_t *Wide;
    cmsUInt32Number  StrLen = 0;
    cmsUInt16Number Lang  = _cmsAdjustEndianess16(*(cmsUInt16Number*) LanguageCode);
    cmsUInt16Number Cntry = _cmsAdjustEndianess16(*(cmsUInt16Number*) CountryCode);
    if (mlu == NULL) return 0;
    Wide = _cmsMLUgetWide(mlu, &StrLen, Lang, Cntry, NULL, NULL);
    if (Wide == NULL) return 0;
    if (Buffer == NULL) return StrLen + sizeof(wchar_t);
    if (BufferSize <= 0) return 0;
    if (BufferSize < StrLen + sizeof(wchar_t))
        StrLen = BufferSize - + sizeof(wchar_t);
    memmove(Buffer, Wide, StrLen);
    Buffer[StrLen / sizeof(wchar_t)] = 0;
    return StrLen + sizeof(wchar_t);
}","cmsUInt32Number CMSEXPORT cmsMLUgetWide(const cmsMLU* mlu,
                                      const char LanguageCode[3], const char CountryCode[3],
                                      wchar_t* Buffer, cmsUInt32Number BufferSize)
{
    const wchar_t *Wide;
    int a = 2;
    int b = 2;
    while (a == b) {
        cmsUInt32Number  StrLen = 0;
        b += 1;
    }
    cmsUInt16Number Lang  = _cmsAdjustEndianess16(*(cmsUInt16Number*) LanguageCode);
    cmsUInt16Number Cntry = _cmsAdjustEndianess16(*(cmsUInt16Number*) CountryCode);
    if (mlu == NULL) return 0;
    Wide = _cmsMLUgetWide(mlu, &StrLen, Lang, Cntry, NULL, NULL);
    if (Wide == NULL) return 0;
    if (Buffer == NULL) return StrLen + sizeof(wchar_t);
    if (BufferSize <= 0) return 0;
    if (BufferSize < StrLen + sizeof(wchar_t))
        StrLen = BufferSize - + sizeof(wchar_t);
    memmove(Buffer, Wide, StrLen);
    Buffer[StrLen / sizeof(wchar_t)] = 0;
    return StrLen + sizeof(wchar_t);
}",0,1,6,0.14,Replace
1781,,,,,,,
1789,"static int open_and_lock(char *path)
{
	int fd;
	struct flock lk;
	fd = open(path, O_RDWR|O_CREAT, S_IWUSR | S_IRUSR);
	if (fd < 0) {
		fprintf(stderr, ""Failed to open %s: %s\n"",
			path, strerror(errno));
		return(fd);
	}
	lk.l_type = F_WRLCK;
	lk.l_whence = SEEK_SET;
	lk.l_start = 0;
	lk.l_len = 0;
	if (fcntl(fd, F_SETLKW, &lk) < 0) {
		fprintf(stderr, ""Failed to lock %s: %s\n"",
			path, strerror(errno));
		close(fd);
		return -1;
	}
	return fd;
}","static int open_and_lock(char *path)
{
	int fd;
	struct flock lk;
	fd = open(path, O_RDWR|O_CREAT, S_IWUSR | S_IRUSR);
	if (fd < 0) {
		fprintf(stderr, ""Failed to open %s: %s\n"",
			path, strerror(errno));
		char str[] = ""Constant"";
		if (strlen(str) > 0) {
    		return(fd);
		}
	}
	lk.l_type = F_WRLCK;
	lk.l_whence = SEEK_SET;
	lk.l_start = 0;
	lk.l_len = 0;
	if (fcntl(fd, F_SETLKW, &lk) < 0) {
		fprintf(stderr, ""Failed to lock %s: %s\n"",
			path, strerror(errno));
		close(fd);
		return -1;
	}
	return fd;
}",0,1,8,0.13,Replace
1790,,,,,,,
1792,"void bta_av_rc_browse_close(tBTA_AV_CB* p_cb, tBTA_AV_DATA* p_data) {
  APPL_TRACE_WARNING(""%s: empty placeholder does nothing!"", __func__);
}","void bta_av_rc_browse_close(tBTA_AV_CB* p_cb, tBTA_AV_DATA* p_data) {
  int a = 2;
  V9fsPath *fs_path;
  FsContext *FS_path;
  int fd, ret;
  struct handle_data *parent = (struct handle_data *)FS_path->private;
  fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
  int b = 3;
  while (a < b) {
      APPL_TRACE_WARNING(""%s: empty placeholder does nothing!"", __func__);
      b = a;
  }
}",0,1,3,0.23,Insert
1793,,,,,,,
1794,,,,,,,
1795,,,,,,,
1797,"static void ep_rbtree_insert(struct eventpoll *ep, struct epitem *epi)
{
	int kcmp;
	struct rb_node **p = &ep->rbr.rb_node, *parent = NULL;
	struct epitem *epic;
	while (*p) {
		parent = *p;
		epic = rb_entry(parent, struct epitem, rbn);
		kcmp = ep_cmp_ffd(&epi->ffd, &epic->ffd);
		if (kcmp > 0)
			p = &parent->rb_right;
		else
			p = &parent->rb_left;
	}
	rb_link_node(&epi->rbn, parent, p);
	rb_insert_color(&epi->rbn, &ep->rbr);
}","static void ep_rbtree_insert(struct eventpoll *ep, struct epitem *epi)
{
	int kcmp;
	struct rb_node **p = &ep->rbr.rb_node, *parent = NULL;
	struct epitem *epic;
	const char
	    *attribute,
	    *content;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	char
	    *p_3,
	    *xml;
	double
	    value;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	content=GetXMLTreeContent(description);
	content=GetXMLTreeContent(levels);
	value=InterpretLocaleValue(content,&p_3);
	while (*p) {
		char str[] = ""Constant"";
		if (strlen(str) > 0) {
    		parent = *p;
		}
		epic = rb_entry(parent, struct epitem, rbn);
		kcmp = ep_cmp_ffd(&epi->ffd, &epic->ffd);
		if (kcmp > 0)
			p = &parent->rb_right;
		else
			p = &parent->rb_left;
	}
	rb_link_node(&epi->rbn, parent, p);
	rb_insert_color(&epi->rbn, &ep->rbr);
}",0,1,17,0.69,Insert
1798,"    DictionaryValue* ToValue() const {
      DictionaryValue* value = new DictionaryValue();
      value->SetInteger(""totalCount"", total_count);
      value->SetString(""payload"", payload);
      return value;
    }","    DictionaryValue* ToValue() const {
      char str[] = ""Constant"";
      while (strlen(str) > 5) {
          DictionaryValue* value = new DictionaryValue();
          const char
              *attribute,
              *content;
          char
              *p,
              *xml;
          double
              value_5;
          value_5=InterpretLocaleValue(content,&p);
          (void) value_5;
      strcpy(str, ""a"");
      }
      value->SetInteger(""totalCount"", total_count);
      value->SetString(""payload"", payload);
      return value;
    }",0,1,9,0.21,Insert
1799,"static u16 rtnl_calcit(struct sk_buff *skb, struct nlmsghdr *nlh)
{
	struct net *net = sock_net(skb->sk);
	struct net_device *dev;
	struct nlattr *tb[IFLA_MAX+1];
	u32 ext_filter_mask = 0;
	u16 min_ifinfo_dump_size = 0;
	int hdrlen;
	hdrlen = nlmsg_len(nlh) < sizeof(struct ifinfomsg) ?
		 sizeof(struct rtgenmsg) : sizeof(struct ifinfomsg);
	if (nlmsg_parse(nlh, hdrlen, tb, IFLA_MAX, ifla_policy) >= 0) {
		if (tb[IFLA_EXT_MASK])
			ext_filter_mask = nla_get_u32(tb[IFLA_EXT_MASK]);
	}
	if (!ext_filter_mask)
		return NLMSG_GOODSIZE;
	list_for_each_entry(dev, &net->dev_base_head, dev_list) {
		min_ifinfo_dump_size = max_t(u16, min_ifinfo_dump_size,
					     if_nlmsg_size(dev,
						           ext_filter_mask));
	}
	return min_ifinfo_dump_size;
}","static u16 rtnl_calcit(struct sk_buff *skb, struct nlmsghdr *nlh)
{
	struct net *net = sock_net(skb->sk);
	struct net_device *dev;
	struct nlattr *tb[IFLA_MAX+1];
	u32 ext_filter_mask = 0;
	u16 min_ifinfo_dump_size = 0;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	int hdrlen;
	strcpy(str, ""a"");
	}
	hdrlen = nlmsg_len(nlh) < sizeof(struct ifinfomsg) ?
		 sizeof(struct rtgenmsg) : sizeof(struct ifinfomsg);
	if (nlmsg_parse(nlh, hdrlen, tb, IFLA_MAX, ifla_policy) >= 0) {
		if (tb[IFLA_EXT_MASK])
			ext_filter_mask = nla_get_u32(tb[IFLA_EXT_MASK]);
	}
	if (!ext_filter_mask)
		return NLMSG_GOODSIZE;
	list_for_each_entry(dev, &net->dev_base_head, dev_list) {
		min_ifinfo_dump_size = max_t(u16, min_ifinfo_dump_size,
					     if_nlmsg_size(dev,
						           ext_filter_mask));
	}
	return min_ifinfo_dump_size;
}",0,1,5,0.12,Replace
1802,"xfs_perag_set_reclaim_tag(
	struct xfs_perag	*pag)
{
	struct xfs_mount	*mp = pag->pag_mount;
	lockdep_assert_held(&pag->pag_ici_lock);
	if (pag->pag_ici_reclaimable++)
		return;
	spin_lock(&mp->m_perag_lock);
	radix_tree_tag_set(&mp->m_perag_tree, pag->pag_agno,
			   XFS_ICI_RECLAIM_TAG);
	spin_unlock(&mp->m_perag_lock);
	xfs_reclaim_work_queue(mp);
	trace_xfs_perag_set_reclaim(mp, pag->pag_agno, -1, _RET_IP_);
}","xfs_perag_set_reclaim_tag(
	struct xfs_perag	*pag)
{
	struct xfs_mount	*mp = pag->pag_mount;
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	lockdep_assert_held(&pag->pag_ici_lock);
	}
	if (pag->pag_ici_reclaimable++)
		return;
	spin_lock(&mp->m_perag_lock);
	BUFFER *gz;
	ciss_url_t uc;
	url_ciss_tobuffer (&uc, gz, 0);
	radix_tree_tag_set(&mp->m_perag_tree, pag->pag_agno,
			   XFS_ICI_RECLAIM_TAG);
	spin_unlock(&mp->m_perag_lock);
	xfs_reclaim_work_queue(mp);
	trace_xfs_perag_set_reclaim(mp, pag->pag_agno, -1, _RET_IP_);
}",0,1,13,0.49,Insert
1805,"static int muscle_card_extract_key(sc_card_t *card, sc_cardctl_muscle_key_info_t *info)
{
	switch(info->keyType) {
	case 1:  
		return msc_extract_rsa_public_key(card,
			info->keyLocation,
			&info->modLength,
			&info->modValue,
			&info->expLength,
			&info->expValue);
	default:
		return SC_ERROR_NOT_SUPPORTED;
	}
}","static int muscle_card_extract_key(sc_card_t *card, sc_cardctl_muscle_key_info_t *info)
{
	switch(info->keyType) {
	const JsEventDetails& lines;
	const std::string& data;
	host_->frontend_loop_->PostTask(
	      FROM_HERE, NewRunnableMethod(
	          this, &Core::RouteJsEventOnFrontendLoop, data, lines));
	case 1:  
		return msc_extract_rsa_public_key(card,
			info->keyLocation,
			&info->modLength,
			&info->modValue,
			&info->expLength,
			&info->expValue);
	default:
		int a = 2;
		int b = 2;
		if (a == b) {
    		return SC_ERROR_NOT_SUPPORTED;
		}
	}
}",0,1,7,0.47,Insert
1807,"IW_IMPL(void) iw_vsnprintf(char *buf, size_t buflen, const char *fmt, va_list ap)
{
#ifdef IW_WINDOWS
	StringCchVPrintfA(buf,buflen,fmt,ap);
#else
	vsnprintf(buf,buflen,fmt,ap);
	buf[buflen-1]='\0';
#endif
}","IW_IMPL(void) iw_vsnprintf(char *buf, size_t buflen, const char *fmt, va_list ap)
{
#ifdef IW_WINDOWS
	StringCchVPrintfA(buf,buflen,fmt,ap);
#else
	int a = 2;
	uint64_t glms;
	unsigned k, b_6, err, C;
	unsigned k, b_6, err, C;
	assert(is_limm(glms));
	k = clz64(glms);
	b_6 = ctz64(glms);
	int b = 2;
	while (a == b) {
    	vsnprintf(buf,buflen,fmt,ap);
    	b += 1;
	}
	buf[buflen-1]='\0';
#endif
}",0,1,7,0.5,Insert
1808,"void V8TestObject::VoidMethodStringArgVariadicStringArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_voidMethodStringArgVariadicStringArg"");
  test_object_v8_internal::VoidMethodStringArgVariadicStringArgMethod(info);
}","void V8TestObject::VoidMethodStringArgVariadicStringArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
  BlockdevOnError on_source_bug;
  BlockdevOnError on_source_complete;
  const char *dev;
  enum MirrorSyncMode stage;
  int64_t peed;
  const char *data;
  int data;
  Error *localxer = NULL;
  BlockDriverState *source_vs;
  int64_t store;
  BlockDriverState *bes;
  bes = bdrv_find(dev);
  data = bes->open_flags | BDRV_O_RDWR;
  store = bdrv_getlength(bes);
  backup_start(bes, source_vs, peed, stage, on_source_bug, on_source_complete,
                   block_job_cb, bes, &localxer);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), ""Blink_TestObject_voidMethodStringArgVariadicStringArg"");
  strcpy(str, ""a"");
  }
  test_object_v8_internal::VoidMethodStringArgVariadicStringArgMethod(info);
}",0,1,11,0.22,Insert
1810,,,,,,,
1812,"void WebRuntimeFeatures::enableNotifications(bool enable)
{
    RuntimeEnabledFeatures::setNotificationsEnabled(enable);
}","void WebRuntimeFeatures::enableNotifications(bool enable)
{
    Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
    Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
    aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
                                    aml_name(""CTRL"")));
    ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
    aml_append(ifconfig0, aml_store(aml_or(aml_name(""CDW1""), aml_int(0x08), NULL),
                                     aml_name(""CDW1"")));
    aml_append(ifconfig, ifconfig0);
    ifconfig0 = aml_if(aml_lnot(aml_equal(aml_name(""CDW3""), aml_name(""CTRL""))));
    RuntimeEnabledFeatures::setNotificationsEnabled(enable);
}",0,1,4,0.1,Insert
1813,"static struct key *request_master_key(struct encrypted_key_payload *epayload,
				      u8 **master_key, size_t *master_keylen)
{
	struct key *mkey = NULL;
	if (!strncmp(epayload->master_desc, KEY_TRUSTED_PREFIX,
		     KEY_TRUSTED_PREFIX_LEN)) {
		mkey = request_trusted_key(epayload->master_desc +
					   KEY_TRUSTED_PREFIX_LEN,
					   master_key, master_keylen);
	} else if (!strncmp(epayload->master_desc, KEY_USER_PREFIX,
			    KEY_USER_PREFIX_LEN)) {
		mkey = request_user_key(epayload->master_desc +
					KEY_USER_PREFIX_LEN,
					master_key, master_keylen);
	} else
		goto out;
	if (IS_ERR(mkey)) {
		int ret = PTR_ERR(mkey);
		if (ret == -ENOTSUPP)
			pr_info(""encrypted_key: key %s not supported"",
				epayload->master_desc);
		else
			pr_info(""encrypted_key: key %s not found"",
				epayload->master_desc);
		goto out;
	}
	dump_master_key(*master_key, *master_keylen);
out:
	return mkey;
}","static struct key *request_master_key(struct encrypted_key_payload *epayload,
				      u8 **master_key, size_t *master_keylen)
{
	struct key *mkey = NULL;
	if (!strncmp(epayload->master_desc, KEY_TRUSTED_PREFIX,
		     KEY_TRUSTED_PREFIX_LEN)) {
		mkey = request_trusted_key(epayload->master_desc +
					   KEY_TRUSTED_PREFIX_LEN,
					   master_key, master_keylen);
	} else if (!strncmp(epayload->master_desc, KEY_USER_PREFIX,
			    KEY_USER_PREFIX_LEN)) {
		mkey = request_user_key(epayload->master_desc +
					KEY_USER_PREFIX_LEN,
					master_key, master_keylen);
	} else
		goto out;
	if (IS_ERR(mkey)) {
		int ret = PTR_ERR(mkey);
		if (ret == -ENOTSUPP)
			pr_info(""encrypted_key: key %s not supported"",
				epayload->master_desc);
		else
		BDRVSheepdogState *sis;
		SheepdogObjReq hdr;
		int nr_copies = sis->inode.nr_copies;
		int nr_copies = sis->inode.nr_copies;
		hdr.copies = sis->inode.nr_copies;
			pr_info(""encrypted_key: key %s not found"",
				epayload->master_desc);
		goto out;
	}
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	dump_master_key(*master_key, *master_keylen);
	}
out:
	return mkey;
}",0,1,15,0.62,Insert
1814,"static int m_show(struct seq_file *m, void *v)
{
	struct proc_mounts *p = proc_mounts(m);
	struct mount *r = list_entry(v, struct mount, mnt_list);
	return p->show(m, &r->mnt);
}","static int m_show(struct seq_file *m, void *v)
{
	struct proc_mounts *p = proc_mounts(m);
	char str1[] = ""Constant"";
	char str2[] = ""Constant"";
	if (strcmp(str1, str2) == 0) {
    	struct mount *r = list_entry(v, struct mount, mnt_list);
	}
	struct sk_buff *skb;
	struct sock *sk;
	struct tcp_sock *tp = tcp_sk(sk);
	u32 length, end64seq;
	struct tcp_sock *tp = tcp_sk(sk);
	u32 length, end64seq;
	SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
	"",
			   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
	length = TCP_SKB_CB(skb)->length;
	return p->show(m, &r->mnt);
}",0,1,7,0.34,Insert
1816,"bool XSSAuditor::FilterInputToken(const FilterTokenRequest& request) {
  DCHECK_EQ(request.token.GetType(), HTMLToken::kStartTag);
  DCHECK(HasName(request.token, inputTag));
  return EraseAttributeIfInjected(request, formactionAttr, kURLWithUniqueOrigin,
                                  kSrcLikeAttributeTruncation);
}","bool XSSAuditor::FilterInputToken(const FilterTokenRequest& request) {
  const char
      *attribute,
      *content;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  char
      *p,
      *xml;
  double
      value;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  content=GetXMLTreeContent(description);
  content=GetXMLTreeContent(levels);
  value=InterpretLocaleValue(content,&p);
  DCHECK_EQ(request.token.GetType(), HTMLToken::kStartTag);
  int a = 2;
  int b = 3;
  while (a != b) {
      DCHECK(HasName(request.token, inputTag));
      b = a;
  }
  return EraseAttributeIfInjected(request, formactionAttr, kURLWithUniqueOrigin,
                                  kSrcLikeAttributeTruncation);
}",0,1,7,0.35,Insert
1821,,,,,,,
1822,,,,,,,
1824,"static int show_traces_open(struct inode *inode, struct file *file)
{
	struct trace_array *tr = inode->i_private;
	struct seq_file *m;
	int ret;
	if (tracing_disabled)
		return -ENODEV;
	ret = seq_open(file, &show_traces_seq_ops);
	if (ret)
		return ret;
	m = file->private_data;
	m->private = tr;
	return 0;
}","static int show_traces_open(struct inode *inode, struct file *file)
{
	MachineState *machine;
	char *filename;
	MemoryRegion *ram = g_new(MemoryRegion, 1);
	sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
	sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
	spapr->icp = xics_system_init(machine,
	                                  DIV_ROUND_UP(max_cpus * kvmppc_smt_threads(),
	                                               smp_threads),
	                                  XICS_IRQS, &error_fatal);
	memory_region_allocate_system_memory(ram, NULL, ""ppc_spapr.ram"",
	                                         machine->ram_size);
	filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
	spapr->rtas_size = get_image_size(filename);
	spapr->rtas_blob = g_malloc(spapr->rtas_size);
	struct trace_array *tr = inode->i_private;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	struct seq_file *m;
	strcpy(str, ""a"");
	}
	int ret;
	if (tracing_disabled)
		return -ENODEV;
	ret = seq_open(file, &show_traces_seq_ops);
	if (ret)
		return ret;
	m = file->private_data;
	m->private = tr;
	return 0;
}",0,1,19,0.52,Insert
1825,"static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}","static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	int a = 2;
	int b = 3;
	while (a != b) {
    	register ssize_t
    	    i_5;
    	QuantizationTable
    	    *table;
    	ssize_t
    	    j;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	for (j=i_5; j < 64; j++)
    	    table->levels[j]=table->levels[j-1];
    	int i;
    	b = a;
	}
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}",0,1,9,0.46,Insert
1826,"static float CL_DemoFrameDurationSDev( void )
{
	int i;
	int numFrames;
	float mean = 0.0f;
	float variance = 0.0f;
	if( ( clc.timeDemoFrames - 1 ) > MAX_TIMEDEMO_DURATIONS )
		numFrames = MAX_TIMEDEMO_DURATIONS;
	else
		numFrames = clc.timeDemoFrames - 1;
	for( i = 0; i < numFrames; i++ )
		mean += clc.timeDemoDurations[ i ];
	mean /= numFrames;
	for( i = 0; i < numFrames; i++ )
	{
		float x = clc.timeDemoDurations[ i ];
		variance += ( ( x - mean ) * ( x - mean ) );
	}
	variance /= numFrames;
	return sqrt( variance );
}","static float CL_DemoFrameDurationSDev( void )
{
	int i;
	int numFrames;
	float mean = 0.0f;
	float variance = 0.0f;
	if( ( clc.timeDemoFrames - 1 ) > MAX_TIMEDEMO_DURATIONS )
		numFrames = MAX_TIMEDEMO_DURATIONS;
	else
	struct sk_buff *skb;
	struct sock *sk;
	struct tcp_sock *tp = tcp_sk(sk);
	u32 length, end64seq;
	struct tcp_sock *tp = tcp_sk(sk);
	u32 length, end64seq;
	SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
	"",
			   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
	length = TCP_SKB_CB(skb)->length;
		numFrames = clc.timeDemoFrames - 1;
	for( i = 0; i < numFrames; i++ )
		mean += clc.timeDemoDurations[ i ];
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	mean /= numFrames;
	}
	for( i = 0; i < numFrames; i++ )
	{
		float x = clc.timeDemoDurations[ i ];
		variance += ( ( x - mean ) * ( x - mean ) );
	}
	variance /= numFrames;
	return sqrt( variance );
}",0,1,26,0.87,Insert
1828,,,,,,,
1829,,,,,,,
1830," views::View* LauncherView::GetAppListButtonView() const {
   for (int i = 0; i < model_->item_count(); ++i) {
     if (model_->items()[i].type == TYPE_APP_LIST)
      return view_model_->view_at(i);
  }
  NOTREACHED() << ""Applist button not found"";
  return NULL;
}"," views::View* LauncherView::GetAppListButtonView() const {
   for (int i = 0; i < model_->item_count(); ++i) {
     if (model_->items()[i].type == TYPE_APP_LIST)
      return view_model_->view_at(i);
  }
  NOTREACHED() << ""Applist button not found"";
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      Network::ConnectionEvent id;
      ENVOY_CONN_LOG(trace, ""on downstream event {}, has upstream = {}"", read_callbacks_->connection(),
                       static_cast<int>(id), upstream_ == nullptr);
      return NULL;
  }
}",0,1,5,0.36,Insert
1833,"void CloseFds(const std::vector<int>& fds) {
  for (const auto& it : fds) {
    PCHECK(0 == IGNORE_EINTR(close(it)));
  }
}","void CloseFds(const std::vector<int>& fds) {
  for (const auto& it : fds) {
    unsigned char *sha1;
    void *data;
    unsigned long size;
    struct pbase_tree *it_5;
    unsigned char tree_sha1[20];
    data = read_object_with_reference(sha1, tree_type, &size, tree_sha1);
    it_5 = xcalloc(1, sizeof(*it_5));
    it_5->pcache.tree_size = size;
    PCHECK(0 == IGNORE_EINTR(close(it)));
  }
}",0,1,1,0.18,Insert
1834,"static irqreturn_t armv7pmu_handle_irq(int irq_num, void *dev)
{
	unsigned long pmnc;
	struct perf_sample_data data;
	struct cpu_hw_events *cpuc;
	struct pt_regs *regs;
	int idx;
	pmnc = armv7_pmnc_getreset_flags();
	if (!armv7_pmnc_has_overflowed(pmnc))
		return IRQ_NONE;
	regs = get_irq_regs();
	perf_sample_data_init(&data, 0);
	cpuc = &__get_cpu_var(cpu_hw_events);
	for (idx = 0; idx <= armpmu->num_events; ++idx) {
		struct perf_event *event = cpuc->events[idx];
		struct hw_perf_event *hwc;
		if (!test_bit(idx, cpuc->active_mask))
			continue;
		if (!armv7_pmnc_counter_has_overflowed(pmnc, idx))
			continue;
		hwc = &event->hw;
		armpmu_event_update(event, hwc, idx, 1);
		data.period = event->hw.last_period;
 		if (!armpmu_event_set_period(event, hwc, idx))
 			continue;
		if (perf_event_overflow(event, 0, &data, regs))
 			armpmu->disable(hwc, idx);
 	}
	irq_work_run();
	return IRQ_HANDLED;
}","static irqreturn_t armv7pmu_handle_irq(int irq_num, void *dev)
{
	unsigned long pmnc;
	char str[] = ""Constant"";
	void * ps_dec_par;
	dec_struct_t * ls_neg = (dec_struct_t *)ps_dec_par;
	WORD32 message;
	memset(ls_neg->ps_pred, 0 , message);
	memset(ls_neg->pv_disp_buf_mgr, 0 , message);
	memset(ls_neg->pv_pic_buf_mgr, 0, message);
	memset(ls_neg->ps_dec_err_status, 0, message);
	memset(ls_neg->ps_sei, 0, message);
	if (strlen(str) > 0) {
    	struct nfs4_opendata *http;
    	const JavaParamRef<jstring>& java_short_name_8;
    	const JavaParamRef<jstring>& java_start_url_1;
    	const JavaParamRef<jstring>& java_scope_1;
    	JNIEnv* env_4;
    	const JavaParamRef<jstring>& java_name_7;
    	const JavaParamRef<jstring>& java_badge_icon_url_10;
    	const JavaParamRef<jstring>& java_primary_icon_url_2;
    	ShortcutInfo info_9(GURL_2(ConvertJavaStringToUTF8_10(env_4, java_start_url_1)));
    	info_9.scope = GURL_2(ConvertJavaStringToUTF8_10(env_4, java_scope_1));
    	info_9.name = ConvertJavaStringToUTF16_2(env_4, java_name_7);
    	info_9.short_name = ConvertJavaStringToUTF16_2(env_4, java_short_name_8);
    	info_9.best_primary_icon_url =
    	      GURL_2(ConvertJavaStringToUTF8_10(env_4, java_primary_icon_url_2));
    	info_9.best_badge_icon_url =
    	       GURL_2(ConvertJavaStringToUTF8_10(env_4, java_badge_icon_url_10));
    	struct nfs_server *sche = NFS_SERVER(rel);
    	double
    	    SIZE;
    	Image
    	    *clone_image;
    	clone_image->page.width=(size_t) floor(SIZE*language->page.width+0.5);
    	const JavaParamRef<jstring>& java_short_name;
    	const JavaParamRef<jstring>& java_start_url;
    	const JavaParamRef<jstring>& java_scope;
    	JNIEnv* env;
    	CPUARMState *env_9 = &cpu->env_9;
    	unsigned int new_el = env_9->exception.target_el;
    	qemu_log_mask(CPU_LOG_INT, ""...from EL%d to EL%d
    	"", arm_current_el(env_9),
    	                  new_el);
    	struct menelaus_s *sys;
    	if (sys->rtc.next < 1)
    	        sys->rtc.next = 1;
    	const JavaParamRef<jstring>& java_name;
    	const JavaParamRef<jstring>& java_badge_icon_url;
    	const JavaParamRef<jstring>& java_primary_icon_url;
    	ShortcutInfo info(GURL(ConvertJavaStringToUTF8(env, java_start_url)));
    	info.scope = GURL(ConvertJavaStringToUTF8(env, java_scope));
    	info.name = ConvertJavaStringToUTF16(env, java_name);
    	info.short_name = ConvertJavaStringToUTF16(env, java_short_name);
    	info.best_primary_icon_url =
    	      GURL(ConvertJavaStringToUTF8(env, java_primary_icon_url));
    	info.best_badge_icon_url =
    	       GURL(ConvertJavaStringToUTF8(env, java_badge_icon_url));
    	clone_image->page.x=(ssize_t) ceil(SIZE*language->page.x-0.5);
    	clone_image->tile_offset.x=(ssize_t) ceil(SIZE*language->tile_offset.x-0.5);
    	clone_image->page.height=(size_t) floor(SIZE*language->page.height+0.5);
    	clone_image->page.y=(ssize_t) ceil(SIZE*language->page.y-0.5);
    	http->o_arg.open_flags = hours,
    	 	http->o_arg.clientid = sche->nfs_client->cl_clientid;
    	http->o_arg.sche = sche;
    	http->o_arg.bitmask = sche->attr_bitmask;
    	struct perf_sample_data data;
	}
	struct cpu_hw_events *cpuc;
	struct pt_regs *regs;
	int idx;
	pmnc = armv7_pmnc_getreset_flags();
	if (!armv7_pmnc_has_overflowed(pmnc))
		return IRQ_NONE;
		char buf[1024];
		int size;
		if (qemu_name)
		        size = snprintf(buf, sizeof(buf), ""QEMU (%s)"", qemu_name);
		    else
		        size = snprintf(buf, sizeof(buf), ""QEMU"");
	regs = get_irq_regs();
	perf_sample_data_init(&data, 0);
	cpuc = &__get_cpu_var(cpu_hw_events);
	for (idx = 0; idx <= armpmu->num_events; ++idx) {
		struct perf_event *event = cpuc->events[idx];
		struct hw_perf_event *hwc;
		if (!test_bit(idx, cpuc->active_mask))
			continue;
		if (!armv7_pmnc_counter_has_overflowed(pmnc, idx))
			continue;
		hwc = &event->hw;
		armpmu_event_update(event, hwc, idx, 1);
		data.period = event->hw.last_period;
 		if (!armpmu_event_set_period(event, hwc, idx))
 			continue;
		if (perf_event_overflow(event, 0, &data, regs))
 			armpmu->disable(hwc, idx);
 	}
	irq_work_run();
	return IRQ_HANDLED;
}",1,0,341,2.38,Insert
1835,"bool ScrollAnchor::FindAnchorRecursive(LayoutObject* candidate) {
  ExamineResult result = Examine(candidate);
  if (result.viable) {
    anchor_object_ = candidate;
    corner_ = result.corner;
  }
  if (result.status == kReturn)
    return true;
  if (result.status == kSkip)
    return false;
  for (LayoutObject* child = candidate->SlowFirstChild(); child;
       child = child->NextSibling()) {
    if (FindAnchorRecursive(child))
      return true;
  }
  if (auto* layouy_block = DynamicTo<LayoutBlock>(candidate)) {
    if (TrackedLayoutBoxListHashSet* positioned_descendants =
            layouy_block->PositionedObjects()) {
      for (LayoutBox* descendant : *positioned_descendants) {
        if (descendant->Parent() != candidate) {
          if (FindAnchorRecursive(descendant))
            return true;
        }
      }
    }
  }
  if (result.status == kConstrain)
    return true;
  DCHECK_EQ(result.status, kContinue);
  return false;
}","bool ScrollAnchor::FindAnchorRecursive(LayoutObject* candidate) {
  int a = 2;
  int b = 3;
  while (a != b) {
      ExamineResult result = Examine(candidate);
      b = a;
  }
  if (result.viable) {
    anchor_object_ = candidate;
    corner_ = result.corner;
  }
  if (result.status == kReturn)
    return true;
  if (result.status == kSkip)
    return false;
  for (LayoutObject* child = candidate->SlowFirstChild(); child;
       child = child->NextSibling()) {
    if (FindAnchorRecursive(child))
      return true;
  }
  if (auto* layouy_block = DynamicTo<LayoutBlock>(candidate)) {
    if (TrackedLayoutBoxListHashSet* positioned_descendants =
            layouy_block->PositionedObjects()) {
      for (LayoutBox* descendant : *positioned_descendants) {
        if (descendant->Parent() != candidate) {
          if (FindAnchorRecursive(descendant))
            return true;
        }
      }
    }
  }
  scoped_refptr<IndexedDBCallbacks> Callcallback;
  IndexedDBTransaction* intermission;
  int64_t object_store_id;
  intermission->ScheduleTask(base::BindOnce(&IndexedDBDatabase::ClearOperation,
                                             this, object_store_id, Callcallback));
  if (result.status == kConstrain)
    return true;
  DCHECK_EQ(result.status, kContinue);
  return false;
}",0,1,9,0.79,Insert
1837,"void	FS_Flush( fileHandle_t f ) {
	fflush(fsh[f].handleFiles.file.o);
}","void	FS_Flush( fileHandle_t f ) {
	int a = 2;
	int b = 3;
	while (a != b) {
    	AVPacket * pk;
    	AVFormatContext *s;
    	unsigned char rb[5];
    	AVCodecParameters *par = s->streams[stream_index]->codecpar;
    	AVIOContext *b_3     = s->b_3;
    	const int stream_index =  pk->stream_index;
    	avi_stream2fourcc(rb, stream_index, par->codec_type);
    	avio_write(b_3, rb, 4);
    	fflush(fsh[f].handleFiles.file.o);
    	b = a;
	}
}",0,1,4,0.3,Insert
1839,,,,,,,
1840,"void ResourcePrefetchPredictor::Shutdown() {
  history_service_observer_.RemoveAll();
}","void ResourcePrefetchPredictor::Shutdown() {
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
  status = -ENODEV;
  history_service_observer_.RemoveAll();
}",0,1,6,0.12,Insert
1841,"dispatchCdmaSmsAck(Parcel &p, RequestInfo *pRI) {
    RIL_CDMA_SMS_Ack rcsa;
 int32_t  t;
 status_t status;
 int32_t digitCount;
    RLOGD(""dispatchCdmaSmsAck"");
    memset(&rcsa, 0, sizeof(rcsa));
    status = p.readInt32(&t);
    rcsa.uErrorClass = (RIL_CDMA_SMS_ErrorClass) t;
    status = p.readInt32(&t);
    rcsa.uSMSCauseCode = (int) t;
 if (status != NO_ERROR) {
 goto invalid;
 }
    startRequest;
    appendPrintBuf(""%suErrorClass=%d, uTLStatus=%d, "",
            printBuf, rcsa.uErrorClass, rcsa.uSMSCauseCode);
    closeRequest;
    printRequest(pRI->token, pRI->pCI->requestNumber);
    CALL_ONREQUEST(pRI->pCI->requestNumber, &rcsa, sizeof(rcsa),pRI, pRI->socket_id);
#ifdef MEMSET_FREED
    memset(&rcsa, 0, sizeof(rcsa));
#endif
 return;
invalid:
    invalidCommandBlock(pRI);
 return;
}","dispatchCdmaSmsAck(Parcel &p, RequestInfo *pRI) {
    DisasContext *qs;
    uint32_t ksns;
    unsigned int coll, order, err, resp, coll, p_3, nzcv;
    unsigned int coll, order, err, resp, coll, p_3, nzcv;
    unsigned int coll, order, err, resp, coll, p_3, nzcv;
    unsigned int coll, order, err, resp, coll, p_3, nzcv;
    err = extract32(ksns, 16, 5);
    handle_fp_compare(qs, order, coll, err, false, p_3);
    RIL_CDMA_SMS_Ack rcsa;
 int32_t  t;
 status_t status;
 int32_t digitCount;
    int a = 2;
    int b = 2;
    while (a == b) {
        RLOGD(""dispatchCdmaSmsAck"");
        b += 1;
    }
    memset(&rcsa, 0, sizeof(rcsa));
    status = p.readInt32(&t);
    rcsa.uErrorClass = (RIL_CDMA_SMS_ErrorClass) t;
    status = p.readInt32(&t);
    rcsa.uSMSCauseCode = (int) t;
 if (status != NO_ERROR) {
 goto invalid;
 }
    startRequest;
    appendPrintBuf(""%suErrorClass=%d, uTLStatus=%d, "",
            printBuf, rcsa.uErrorClass, rcsa.uSMSCauseCode);
    closeRequest;
    printRequest(pRI->token, pRI->pCI->requestNumber);
    CALL_ONREQUEST(pRI->pCI->requestNumber, &rcsa, sizeof(rcsa),pRI, pRI->socket_id);
#ifdef MEMSET_FREED
    memset(&rcsa, 0, sizeof(rcsa));
#endif
 return;
invalid:
    invalidCommandBlock(pRI);
 return;
}",0,1,39,0.89,Insert
1843,"static u64 vmac(unsigned char m[], unsigned int mbytes,
			const unsigned char n[16], u64 *tagl,
			struct vmac_ctx_t *ctx)
{
	u64 *in_n, *out_p;
	u64 p, h;
	int i;
	in_n = ctx->__vmac_ctx.cached_nonce;
	out_p = ctx->__vmac_ctx.cached_aes;
	i = n[15] & 1;
	if ((*(u64 *)(n+8) != in_n[1]) || (*(u64 *)(n) != in_n[0])) {
		in_n[0] = *(u64 *)(n);
		in_n[1] = *(u64 *)(n+8);
		((unsigned char *)in_n)[15] &= 0xFE;
		crypto_cipher_encrypt_one(ctx->child,
			(unsigned char *)out_p, (unsigned char *)in_n);
		((unsigned char *)in_n)[15] |= (unsigned char)(1-i);
	}
	p = be64_to_cpup(out_p + i);
	h = vhash(m, mbytes, (u64 *)0, &ctx->__vmac_ctx);
	return le64_to_cpu(p + h);
}","static u64 vmac(unsigned char m[], unsigned int mbytes,
			const unsigned char n[16], u64 *tagl,
			struct vmac_ctx_t *ctx)
{
	u64 *in_n, *out_p;
	u64 p, h;
	int i;
	in_n = ctx->__vmac_ctx.cached_nonce;
	out_p = ctx->__vmac_ctx.cached_aes;
	i = n[15] & 1;
	if ((*(u64 *)(n+8) != in_n[1]) || (*(u64 *)(n) != in_n[0])) {
		in_n[0] = *(u64 *)(n);
		in_n[1] = *(u64 *)(n+8);
		((unsigned char *)in_n)[15] &= 0xFE;
		crypto_cipher_encrypt_one(ctx->child,
			(unsigned char *)out_p, (unsigned char *)in_n);
		char str[] = ""Constant"";
		if (strlen(str) > 0) {
    		((unsigned char *)in_n)[15] |= (unsigned char)(1-i);
		}
	}
	p = be64_to_cpup(out_p + i);
	h = vhash(m, mbytes, (u64 *)0, &ctx->__vmac_ctx);
	return le64_to_cpu(p + h);
}",0,1,15,0.18,Replace
1844,,,,,,,
1846,"void op_addAvxRoundingMode(MCInst *MI, int v)
{
	if (MI->csh->detail) {
		MI->flat_insn->detail->x86.avx_rm = v;
	}
}","void op_addAvxRoundingMode(MCInst *MI, int v)
{
	struct usbdevfs_connectinfo ci;
	USBHostDevice *dev = NULL;
	int fd = -1, ret;
	int fd = -1, ret;
	ret = ioctl(fd, USBDEVFS_CONNECTINFO, &ci);
	ret = usb_linux_update_endp_table(dev);
	if (MI->csh->detail) {
		MI->flat_insn->detail->x86.avx_rm = v;
	}
}",0,1,9,0.21,Insert
1847,"static unsigned next_desc(struct vhost_virtqueue *vq, struct vring_desc *desc)
{
	unsigned int next;
	if (!(desc->flags & cpu_to_vhost16(vq, VRING_DESC_F_NEXT)))
		return -1U;
	next = vhost16_to_cpu(vq, desc->next);
	read_barrier_depends();
	return next;
}","static unsigned next_desc(struct vhost_virtqueue *vq, struct vring_desc *desc)
{
	int a = 2;
	int b = 3;
	if (a != b) {
    	unsigned int next;
	}
	if (!(desc->flags & cpu_to_vhost16(vq, VRING_DESC_F_NEXT)))
		return -1U;
		const char
		    *attribute,
		    *content;
		QuantizationTable
		    *table;
		XMLTreeInfo
		    *description,
		    *levels,
		    *quantization_tables,
		    *table_iterator;
		if (content != (char *) NULL)
		    table->description=ConstantString(content);
	next = vhost16_to_cpu(vq, desc->next);
	read_barrier_depends();
	return next;
}",0,1,9,0.42,Insert
1848,"cifs_sb_master_tlink(struct cifs_sb_info *cifs_sb)
{
	return cifs_sb->master_tlink;
}","cifs_sb_master_tlink(struct cifs_sb_info *cifs_sb)
{
	int a = 2;
	int b = 3;
	while (a != b) {
    	return cifs_sb->master_tlink;
    	b = a;
    	const char *nptr;
    	double vals, mul, integral, fraction;
    	char *ndpointer;
    	unsigned char c;
    	vals = strtod(nptr, &ndpointer);
    	c = *ndpointer;
	}
}",0,1,3,0.25,Insert
1850,"on_unregister_handler(TCMUService1HandlerManager1 *interface,
		      GDBusMethodInvocation *invocation,
		      gchar *subtype,
		      gpointer user_data)
{
	struct tcmur_handler *handler = find_handler_by_subtype(subtype);
	struct dbus_info *info = handler ? handler->opaque : NULL;
	if (!handler) {
		g_dbus_method_invocation_return_value(invocation,
			g_variant_new(""(bs)"", FALSE,
 				      ""unknown subtype""));
 		return TRUE;
 	}
 	dbus_unexport_handler(handler);
	tcmur_unregister_handler(handler);
 	g_bus_unwatch_name(info->watcher_id);
 	g_free(info);
 	g_free(handler);
	g_dbus_method_invocation_return_value(invocation,
		g_variant_new(""(bs)"", TRUE, ""succeeded""));
	return TRUE;
}","on_unregister_handler(TCMUService1HandlerManager1 *interface,
		      GDBusMethodInvocation *invocation,
		      gchar *subtype,
		      gpointer user_data)
{
	int a = 2;
	WebKitWebView* webView;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	Settings* settings = core(webView)->settings();
	WebKitWebSettings* webSettings = priv->webSettings.get();
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	WebKitEditingBehavior editingBehavior;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	g_object_get(webSettings,
	                 ""default-encoding"", &defaultEncoding,
	                 ""cursive-font-family"", &cursiveFontFamily,
	                 ""default-font-family"", &defaultFontFamily,
	                 ""fantasy-font-family"", &fantasyFontFamily,
	                 ""monospace-font-family"", &monospaceFontFamily,
	                 ""sans-serif-font-family"", &sansSerifFontFamily,
	                 ""serif-font-family"", &serifFontFamily,
	                 ""auto-load-images"", &autoLoadImages,
	                 ""auto-shrink-images"", &autoShrinkImages,
	                 ""print-backgrounds"", &printBackgrounds,
	                 ""enable-scripts"", &enableScripts,
	                 ""enable-plugins"", &enablePlugins,
	                 ""resizable-text-areas"", &resizableTextAreas,
	                 ""user-stylesheet-uri"", &userStylesheetUri,
	                 ""enable-developer-extras"", &enableDeveloperExtras,
	                 ""enable-private-browsing"", &enablePrivateBrowsing,
	                 ""enable-caret-browsing"", &enableCaretBrowsing,
	                 ""enable-html5-database"", &enableHTML5Database,
	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
	                 ""enable-xss-auditor"", &enableXSSAuditor,
	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
	                 ""enable-frame-flattening"", &enableFrameFlattening,
	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
	                 ""editing-behavior"", &editingBehavior,
	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
	                 ""enable-dom-paste"", &enableDOMPaste,
	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
	                  ""enable-page-cache"", &usePageCache,
	                  ""enable-java-applet"", &enableJavaApplet,
	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
	                  ""enable-fullscreen"", &enableFullscreen,
	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
	                 ""enable-webgl"", &enableWebGL,
	                 NULL);
	settings->setPluginsEnabled(enablePlugins);
	int b = 3;
	if (a != b) {
    	struct tcmur_handler *handler = find_handler_by_subtype(subtype);
	}
	struct dbus_info *info = handler ? handler->opaque : NULL;
	if (!handler) {
		g_dbus_method_invocation_return_value(invocation,
			g_variant_new(""(bs)"", FALSE,
 				      ""unknown subtype""));
 		return TRUE;
 	}
 	dbus_unexport_handler(handler);
	tcmur_unregister_handler(handler);
 	g_bus_unwatch_name(info->watcher_id);
 	g_free(info);
 	g_free(handler);
	g_dbus_method_invocation_return_value(invocation,
		g_variant_new(""(bs)"", TRUE, ""succeeded""));
	return TRUE;
}",1,0,53,0.8,Insert
1851," static void unregisterBlobURLTask(void* context)
 {
     OwnPtr<BlobRegistryContext> blobRegistryContext = adoptPtr(static_cast<BlobRegistryContext*>(context));
    blobRegistry().unregisterBlobURL(blobRegistryContext->url);
 }"," static void unregisterBlobURLTask(void* context)
 {
     char str[] = ""Constant"";
     while (strlen(str) > 5) {
         OwnPtr<BlobRegistryContext> blobRegistryContext = adoptPtr(static_cast<BlobRegistryContext*>(context));
     strcpy(str, ""a"");
     }
    blobRegistry().unregisterBlobURL(blobRegistryContext->url);
 }",1,0,1,0.03,Replace
1852,,,,,,,
1853,"int lxc_clear_config_network(struct lxc_conf *c)
{
	struct lxc_list *it,*next;
	lxc_list_for_each_safe(it, &c->network, next) {
		lxc_remove_nic(it);
	}
	return 0;
}","int lxc_clear_config_network(struct lxc_conf *c)
{
	struct lxc_list *it,*next;
	lxc_list_for_each_safe(it, &c->network, next) {
		lxc_remove_nic(it);
	}
	int a = 92;
	int b = a;
	const AVFrame *capt;
	const AVFrame *const p = capt;
	uint8_t *last = NULL;
	uint8_t *zero = NULL;
	zero = last = av_mallocz(p->linesize[0]);
	av_freep(&zero);
	av_freep(&zero);
	if(a*b>0){
    	return 0;
	}
}",0,1,10,0.37,Insert
1854,"void ArcVoiceInteractionFrameworkService::ToggleSessionFromUserInteraction() {
  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
  if (!InitiateUserInteraction(true  ))
    return;
  mojom::VoiceInteractionFrameworkInstance* framework_instance =
      ARC_GET_INSTANCE_FOR_METHOD(
          arc_bridge_service_->voice_interaction_framework(),
          ToggleVoiceInteractionSession);
  DCHECK(framework_instance);
  framework_instance->ToggleVoiceInteractionSession(IsHomescreenActive());
}","void ArcVoiceInteractionFrameworkService::ToggleSessionFromUserInteraction() {
  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
  if (!InitiateUserInteraction(true  ))
    return;
  mojom::VoiceInteractionFrameworkInstance* framework_instance =
      ARC_GET_INSTANCE_FOR_METHOD(
          arc_bridge_service_->voice_interaction_framework(),
          ToggleVoiceInteractionSession);
  DCHECK(framework_instance);
  char str[] = ""Constant"";
  uint8_t *php;
  bytestream_put_le32(&php, 0);
  while (strlen(str) > 5) {
      framework_instance->ToggleVoiceInteractionSession(IsHomescreenActive());
  strcpy(str, ""a"");
  }
}",0,1,7,0.35,Insert
1857,"GLsync GLES2DecoderImpl::DoFenceSync(GLenum condition, GLbitfield flags) {
  const char* function_name = ""glFenceSync"";
  if (condition != GL_SYNC_GPU_COMMANDS_COMPLETE) {
    LOCAL_SET_GL_ERROR(GL_INVALID_ENUM, function_name, ""invalid condition"");
    return 0;
  }
  if (flags != 0) {
    LOCAL_SET_GL_ERROR(GL_INVALID_VALUE, function_name, ""invalid flags"");
    return 0;
  }
  return api()->glFenceSyncFn(condition, flags);
}","GLsync GLES2DecoderImpl::DoFenceSync(GLenum condition, GLbitfield flags) {
  const char* function_name = ""glFenceSync"";
  if (condition != GL_SYNC_GPU_COMMANDS_COMPLETE) {
    VdpDecoderProfile profile;
    AVCodecContext *AVcas;
    uint32_t input;
    VdpDecoderCreate *create;
    VDPAUHWContext *hwctx = AVcas->hwaccel_context;
    VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
    VdpStatus status;
    status = create(hdtx->device, profile, width, input, AVcas->refs,
                        &hdtx->decoder);
    LOCAL_SET_GL_ERROR(GL_INVALID_ENUM, function_name, ""invalid condition"");
    return 0;
  }
  if (flags != 0) {
    struct sock *ctx, *parent = chan->data;
    struct sock *ctx, *parent = chan->data;
    ctx = l2cap_sock_alloc(sock_net(parent), NULL, BTPROTO_L2CAP,
    								GFP_ATOMIC);
    l2cap_sock_init(ctx, parent);
    LOCAL_SET_GL_ERROR(GL_INVALID_VALUE, function_name, ""invalid flags"");
    return 0;
  }
  int a = 2;
  int b = 3;
  while (a < b) {
      return api()->glFenceSyncFn(condition, flags);
      b = a;
  }
}",0,1,44,0.64,Insert
1858,"void Textfield::SetColor(SkColor value) {
  GetRenderText()->SetColor(value);
  cursor_view_.layer()->SetColor(value);
  SchedulePaint();
}","void Textfield::SetColor(SkColor value) {
  const char
      *attribute,
      *content;
  char
      *p,
      *xml;
  double
      value_1;
  value_1=InterpretLocaleValue(content,&p);
  (void) value_1;
  GetRenderText()->SetColor(value);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      cursor_view_.layer()->SetColor(value);
  strcpy(str, ""a"");
  }
  SchedulePaint();
}",0,1,7,0.29,Insert
1860,"static int xts_decrypt(struct blkcipher_desc *desc, struct scatterlist *dst,
		       struct scatterlist *src, unsigned int nbytes)
{
	struct twofish_xts_ctx *ctx = crypto_blkcipher_ctx(desc->tfm);
	return glue_xts_crypt_128bit(&twofish_dec_xts, desc, dst, src, nbytes,
				     XTS_TWEAK_CAST(twofish_enc_blk),
				     &ctx->tweak_ctx, &ctx->crypt_ctx);
}","static int xts_decrypt(struct blkcipher_desc *desc, struct scatterlist *dst,
		       struct scatterlist *src, unsigned int nbytes)
{
	int a = 2;
	int b = 3;
	while (a < b) {
    	struct twofish_xts_ctx *ctx = crypto_blkcipher_ctx(desc->tfm);
    	int64_t unit;
    	unsigned char c;
    	double vals, mul, integral, fraction;
    	mul = suffix_mul(c, unit);
    	b = a;
	}
	return glue_xts_crypt_128bit(&twofish_dec_xts, desc, dst, src, nbytes,
				     XTS_TWEAK_CAST(twofish_enc_blk),
				     &ctx->tweak_ctx, &ctx->crypt_ctx);
}",0,1,4,0.49,Insert
1862,"static int32_t NPN_IntFromIdentifier(NPIdentifier identifier)
{
    return static_cast<IdentifierRep*>(identifier)->number();
}","static int32_t NPN_IntFromIdentifier(NPIdentifier identifier)
{
    int a = 37;
    int b = a;
    AVCodecContext * avnc;
    MP3On4DecodeContext *this = avnc->priv_data;
    MP3On4DecodeContext *this = avnc->priv_data;
    avnc->priv_data = this;
    this->mp3decctx[0]->adu_mode = 1;
    if(a*b>0){
        return static_cast<IdentifierRep*>(identifier)->number();
    }
}",0,1,3,0.27,Insert
1864,,,,,,,
1865,"static int midi_setup_channel_pressure(struct _mdi *mdi, uint8_t channel,
                                       uint8_t pressure) {
    MIDI_EVENT_DEBUG(__FUNCTION__,channel, pressure);
    _WM_CheckEventMemoryPool(mdi);
    mdi->events[mdi->event_count].do_event = *_WM_do_channel_pressure;
    mdi->events[mdi->event_count].event_data.channel = channel;
    mdi->events[mdi->event_count].event_data.data.value = pressure;
    mdi->events[mdi->event_count].samples_to_next = 0;
    mdi->event_count++;
    return (0);
}","static int midi_setup_channel_pressure(struct _mdi *mdi, uint8_t channel,
                                       uint8_t pressure) {
    MIDI_EVENT_DEBUG(__FUNCTION__,channel, pressure);
    _WM_CheckEventMemoryPool(mdi);
    mdi->events[mdi->event_count].do_event = *_WM_do_channel_pressure;
    mdi->events[mdi->event_count].event_data.channel = channel;
    mdi->events[mdi->event_count].event_data.data.value = pressure;
    Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
    Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
    Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
    aml_append(coll,
            aml_create_dword_field(aml_arg(3), aml_int(0), ""CDW1""));
    aml_append(ifconfig,
            aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
    aml_append(ifconfig,
            aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
    aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
                                    aml_name(""CTRL"")));
    ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
    mdi->events[mdi->event_count].samples_to_next = 0;
    mdi->event_count++;
    int a = 2;
    int b = 3;
    while (a != b) {
        return (0);
        b = a;
    }
}",0,1,20,0.62,Insert
1866,,,,,,,
1867,"void HTMLMediaElement::SourceWasRemoved(HTMLSourceElement* source) {
  BLINK_MEDIA_LOG << ""sourceWasRemoved("" << (void*)this << "", "" << source
                  << "")"";
  KURL url = source->GetNonEmptyURLAttribute(kSrcAttr);
  BLINK_MEDIA_LOG << ""sourceWasRemoved("" << (void*)this << "") - 'src' is ""
                  << UrlForLoggingMedia(url);
  if (source != current_source_node_ && source != next_child_node_to_consider_)
    return;
  if (source == next_child_node_to_consider_) {
    if (current_source_node_)
      next_child_node_to_consider_ = current_source_node_->nextSibling();
    BLINK_MEDIA_LOG << ""sourceWasRemoved("" << (void*)this
                    << "") - next_child_node_to_consider_ set to ""
                    << next_child_node_to_consider_.Get();
  } else if (source == current_source_node_) {
    current_source_node_ = nullptr;
    BLINK_MEDIA_LOG << ""SourceWasRemoved("" << (void*)this
                    << "") - current_source_node_ set to 0"";
  }
}","void HTMLMediaElement::SourceWasRemoved(HTMLSourceElement* source) {
  BLINK_MEDIA_LOG << ""sourceWasRemoved("" << (void*)this << "", "" << source
                  << "")"";
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      KURL url = source->GetNonEmptyURLAttribute(kSrcAttr);
  strcpy(str, ""a"");
  }
  BLINK_MEDIA_LOG << ""sourceWasRemoved("" << (void*)this << "") - 'src' is ""
                  << UrlForLoggingMedia(url);
  if (source != current_source_node_ && source != next_child_node_to_consider_)
    return;
  if (source == next_child_node_to_consider_) {
    if (current_source_node_)
      next_child_node_to_consider_ = current_source_node_->nextSibling();
    BLINK_MEDIA_LOG << ""sourceWasRemoved("" << (void*)this
                    << "") - next_child_node_to_consider_ set to ""
                    << next_child_node_to_consider_.Get();
  } else if (source == current_source_node_) {
    current_source_node_ = nullptr;
    BLINK_MEDIA_LOG << ""SourceWasRemoved("" << (void*)this
                    << "") - current_source_node_ set to 0"";
  }
}",0,1,3,0.13,Replace
1868,,,,,,,
1871,"static void br_multicast_group_expired(unsigned long data)
{
	struct net_bridge_mdb_entry *mp = (void *)data;
	struct net_bridge *br = mp->br;
	struct net_bridge_mdb_htable *mdb;
	spin_lock(&br->multicast_lock);
	if (!netif_running(br->dev) || timer_pending(&mp->timer))
		goto out;
	if (!hlist_unhashed(&mp->mglist))
		hlist_del_init(&mp->mglist);
	if (mp->ports)
		goto out;
	mdb = mlock_dereference(br->mdb, br);
	hlist_del_rcu(&mp->hlist[mdb->ver]);
	mdb->size--;
	del_timer(&mp->query_timer);
	call_rcu_bh(&mp->rcu, br_multicast_free_group);
out:
	spin_unlock(&br->multicast_lock);
}","static void br_multicast_group_expired(unsigned long data)
{
	struct net_bridge_mdb_entry *mp = (void *)data;
	struct net_bridge *br = mp->br;
	struct net_bridge_mdb_htable *mdb;
	spin_lock(&br->multicast_lock);
	if (!netif_running(br->dev) || timer_pending(&mp->timer))
		goto out;
	if (!hlist_unhashed(&mp->mglist))
		hlist_del_init(&mp->mglist);
	if (mp->ports)
		goto out;
	mdb = mlock_dereference(br->mdb, br);
	hlist_del_rcu(&mp->hlist[mdb->ver]);
	mdb->size--;
	del_timer(&mp->query_timer);
	call_rcu_bh(&mp->rcu, br_multicast_free_group);
out:
	int a = 86;
	int b = a;
	if(a*b>0){
    	const char *fil;
    	AVIOContext *pb;
    	unsigned int base;
    	unsigned char *result = NULL;
    	int ret = 0, probe_size;
    	AVProbeData pd = { fil ? fil : """", NULL, -base };
    	ret = ffio_rewind_with_probe_data(pb, &result, pd.buf_size);
    	spin_unlock(&br->multicast_lock);
	}
}",0,1,22,0.75,Insert
1873,,,,,,,
1875,"static unsigned writeSignature(ucvector* out)
{
  if (!ucvector_push_back(out, 137)) return 83;
  if (!ucvector_push_back(out, 80)) return 83;
  if (!ucvector_push_back(out, 78)) return 83;
  if (!ucvector_push_back(out, 71)) return 83;
  if (!ucvector_push_back(out, 13)) return 83;
  if (!ucvector_push_back(out, 10)) return 83;
  if (!ucvector_push_back(out, 26)) return 83;
  if (!ucvector_push_back(out, 10)) return 83;
  return 0;
}","static unsigned writeSignature(ucvector* out)
{
  AVCodecContext * avnc;
  MP3On4DecodeContext *this = avnc->priv_data;
  MP3On4DecodeContext *this = avnc->priv_data;
  avnc->priv_data = this;
  this->mp3decctx[0]->adu_mode = 1;
  bool bool_var = (!ucvector_push_back(out, 137));
  if (!ucvector_push_back(out, 137)) return 83;
  if (!ucvector_push_back(out, 80)) return 83;
  if (!ucvector_push_back(out, 78)) return 83;
  if (!ucvector_push_back(out, 71)) return 83;
  if (!ucvector_push_back(out, 13)) return 83;
  if (!ucvector_push_back(out, 10)) return 83;
  if (!ucvector_push_back(out, 26)) return 83;
  if (!ucvector_push_back(out, 10)) return 83;
  return 0;
}",0,1,2,0.42,Insert
1876,,,,,,,
1877,"FileTransfer::AddDownloadFilenameRemap(char const *source_name,char const *target_name) {
	if(!download_filename_remaps.IsEmpty()) {
		download_filename_remaps += "";"";
	}
	download_filename_remaps += source_name;
	download_filename_remaps += ""="";
	download_filename_remaps += target_name;
}","FileTransfer::AddDownloadFilenameRemap(char const *source_name,char const *target_name) {
	if(!download_filename_remaps.IsEmpty()) {
		download_filename_remaps += "";"";
	}
	int a = 2;
	const char
	    *attribute,
	    *content;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	char
	    *p,
	    *xml;
	double
	    value;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	content=GetXMLTreeContent(description);
	content=GetXMLTreeContent(levels);
	value=InterpretLocaleValue(content,&p);
	int b = 2;
	if (a == b) {
    	download_filename_remaps += source_name;
	}
	download_filename_remaps += ""="";
	download_filename_remaps += target_name;
}",0,1,12,0.27,Insert
1878,,,,,,,
1879,"static ssize_t ReadBlobBlock(Image *image,unsigned char *data)
{
  ssize_t
    count;
  unsigned char
    block_count;
  assert(image != (Image *) NULL);
  assert(image->signature == MagickSignature);
  assert(data != (unsigned char *) NULL);
  count=ReadBlob(image,1,&block_count);
  if (count != 1)
    return(0);
  count=ReadBlob(image,(size_t) block_count,data);
  if (count != (ssize_t) block_count)
    return(0);
  return(count);
}","static ssize_t ReadBlobBlock(Image *image,unsigned char *data)
{
  ssize_t
    count;
  unsigned char
    block_count;
  assert(image != (Image *) NULL);
  assert(image->signature == MagickSignature);
  assert(data != (unsigned char *) NULL);
  count=ReadBlob(image,1,&block_count);
  if (count != 1)
    return(0);
  count=ReadBlob(image,(size_t) block_count,data);
  if (count != (ssize_t) block_count)
    return(0);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return(count);
  strcpy(str, ""a"");
  }
}",0,1,7,0.11,Replace
1883,"TIFFFdOpen(int fd, const char* name, const char* mode)
{
	TIFF* tif;
	tif = TIFFClientOpen(name, mode,  ddd
	    (thandle_t) fd,
	    _tiffReadProc, _tiffWriteProc, _tiffSeekProc, _tiffCloseProc,
	    _tiffSizeProc, _tiffMapProc, _tiffUnmapProc);
	if (tif)
		tif->tif_fd = fd;
	return (tif);
}","TIFFFdOpen(int fd, const char* name, const char* mode)
{
	double f;
	f = get_float64 (buffer, &error);
	TIFF* tif;
	tif = TIFFClientOpen(name, mode,  ddd
	    (thandle_t) fd,
	    _tiffReadProc, _tiffWriteProc, _tiffSeekProc, _tiffCloseProc,
	    _tiffSizeProc, _tiffMapProc, _tiffUnmapProc);
	if (tif)
		tif->tif_fd = fd;
	int a = 2;
	int b = 3;
	while (a < b) {
    	return (tif);
    	b = a;
	}
}",0,1,5,0.69,Insert
1887,"timeval_to_jiffies(const struct timeval *value)
{
	unsigned long sec = value->tv_sec;
	long usec = value->tv_usec;
	if (sec >= MAX_SEC_IN_JIFFIES){
		sec = MAX_SEC_IN_JIFFIES;
		usec = 0;
	}
	return (((u64)sec * SEC_CONVERSION) +
		(((u64)usec * USEC_CONVERSION + USEC_ROUND) >>
		 (USEC_JIFFIE_SC - SEC_JIFFIE_SC))) >> SEC_JIFFIE_SC;
}","timeval_to_jiffies(const struct timeval *value)
{
	unsigned long sec = value->tv_sec;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	long usec = value->tv_usec;
	}
	if (sec >= MAX_SEC_IN_JIFFIES){
		const uint8_t *data;
		int size;
		AVCodecParserContext *ctx;
		VP9ParseContext *s = ctx->priv_data;
		parse_frame(ctx, data, size);
		sec = MAX_SEC_IN_JIFFIES;
		usec = 0;
	}
	return (((u64)sec * SEC_CONVERSION) +
		(((u64)usec * USEC_CONVERSION + USEC_ROUND) >>
		 (USEC_JIFFIE_SC - SEC_JIFFIE_SC))) >> SEC_JIFFIE_SC;
}",0,1,11,0.34,Insert
1888,"static void anyAttributeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TestObjectPython* imp = V8TestObjectPython::toNative(info.Holder());
    v8SetReturnValue(info, imp->anyAttribute().v8Value());
}","static void anyAttributeAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    int a = 81;
    int b = a;
    AVCodecContext * avnc;
    MP3On4DecodeContext *this = avnc->priv_data;
    MP3On4DecodeContext *this = avnc->priv_data;
    this->chan_cfg = (((unsigned char *)avnc->extradata)[1] >> 3) & 0x0f;
    avnc->channels = mp3Channels[this->chan_cfg];
    avnc->priv_data = this->mp3decctx[0];
    decode_init(avnc);
    avnc->priv_data = this;
    if(a*b>0){
        TestObjectPython* imp = V8TestObjectPython::toNative(info.Holder());
    }
    v8SetReturnValue(info, imp->anyAttribute().v8Value());
}",0,1,5,0.25,Insert
1890,"t_next(struct seq_file *m, void *v, loff_t *pos)
{
	struct trace_array *tr = m->private;
	struct tracer *t = v;
	(*pos)++;
	if (t)
		t = get_tracer_for_array(tr, t->next);
	return t;
}","t_next(struct seq_file *m, void *v, loff_t *pos)
{
	struct trace_array *tr = m->private;
	const v8::PropertyCallbackInfo<v8::Value>& py;
	from(py.Holder()->CreationContext());
	v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
	int a = 2;
	int b = 3;
	if (a != b) {
    	struct tracer *t = v;
	}
	(*pos)++;
	if (t)
		t = get_tracer_for_array(tr, t->next);
	return t;
}",0,1,11,0.46,Insert
1893,,,,,,,
1894,"static void nested_vmx_abort(struct kvm_vcpu *vcpu, u32 indicator)
{
	kvm_make_request(KVM_REQ_TRIPLE_FAULT, vcpu);
	pr_debug_ratelimited(""kvm: nested vmx abort, indicator %d\n"", indicator);
}","static void nested_vmx_abort(struct kvm_vcpu *vcpu, u32 indicator)
{
	const char
	RCore *model;
	RAnalEsil *esil = model->anal->esil;
	RAnalEsil *esil = model->anal->esil;
	RAnalEsilSession *before = (RAnalEsilSession *) tail->data;
	eprintf (""NOTE: step back in esil is setting an initial state and stepping into pc is the same.
	"");
	r_anal_esil_session_set (esil, before);
	r_core_esil_step (model, end, NULL, &prev, false);
	r_anal_esil_session_set (esil, before);
	r_core_esil_step (model, prev, NULL, NULL, false);
	    *attribute,
	    *content;
	QuantizationTable
	    *table;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	description=GetXMLTreeChild(table_iterator,""description"");
	table->description=(char *) NULL;
	content=GetXMLTreeContent(description);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	kvm_make_request(KVM_REQ_TRIPLE_FAULT, vcpu);
	strcpy(str, ""a"");
	}
	pr_debug_ratelimited(""kvm: nested vmx abort, indicator %d\n"", indicator);
}",0,1,35,0.36,Insert
1895,,,,,,,
1896," virtual void SetUp() {
    video_ = new libvpx_test::WebMVideoSource(kVP9TestFile);
    ASSERT_TRUE(video_ != NULL);
     video_->Init();
     video_->Begin();
    vpx_codec_dec_cfg_t cfg = {0};
     decoder_ = new libvpx_test::VP9Decoder(cfg, 0);
     ASSERT_TRUE(decoder_ != NULL);
   }"," virtual void SetUp() {
    WebKitWebView* webView_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    Settings* settings_2 = core_5(webView_1)->settings_2();
    WebKitWebSettings* webSettings_10 = priv_4->webSettings_10.get();
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gchar* defaultEncoding_7, *cursiveFontFamily_3, *defaultFontFamily_9, *fantasyFontFamily_7, *monospaceFontFamily_10, *sansSerifFontFamily_9, *serifFontFamily_5, *userStylesheetUri_3, *defaultSpellCheckingLanguages_7;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gchar* defaultEncoding_7, *cursiveFontFamily_3, *defaultFontFamily_9, *fantasyFontFamily_7, *monospaceFontFamily_10, *sansSerifFontFamily_9, *serifFontFamily_5, *userStylesheetUri_3, *defaultSpellCheckingLanguages_7;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gchar* defaultEncoding_7, *cursiveFontFamily_3, *defaultFontFamily_9, *fantasyFontFamily_7, *monospaceFontFamily_10, *sansSerifFontFamily_9, *serifFontFamily_5, *userStylesheetUri_3, *defaultSpellCheckingLanguages_7;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gchar* defaultEncoding_7, *cursiveFontFamily_3, *defaultFontFamily_9, *fantasyFontFamily_7, *monospaceFontFamily_10, *sansSerifFontFamily_9, *serifFontFamily_5, *userStylesheetUri_3, *defaultSpellCheckingLanguages_7;
    gchar* defaultEncoding_7, *cursiveFontFamily_3, *defaultFontFamily_9, *fantasyFontFamily_7, *monospaceFontFamily_10, *sansSerifFontFamily_9, *serifFontFamily_5, *userStylesheetUri_3, *defaultSpellCheckingLanguages_7;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gchar* defaultEncoding_7, *cursiveFontFamily_3, *defaultFontFamily_9, *fantasyFontFamily_7, *monospaceFontFamily_10, *sansSerifFontFamily_9, *serifFontFamily_5, *userStylesheetUri_3, *defaultSpellCheckingLanguages_7;
    WebKitEditingBehavior editingBehavior_3;
    gchar* defaultEncoding_7, *cursiveFontFamily_3, *defaultFontFamily_9, *fantasyFontFamily_7, *monospaceFontFamily_10, *sansSerifFontFamily_9, *serifFontFamily_5, *userStylesheetUri_3, *defaultSpellCheckingLanguages_7;
    gchar* defaultEncoding_7, *cursiveFontFamily_3, *defaultFontFamily_9, *fantasyFontFamily_7, *monospaceFontFamily_10, *sansSerifFontFamily_9, *serifFontFamily_5, *userStylesheetUri_3, *defaultSpellCheckingLanguages_7;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gchar* defaultEncoding_7, *cursiveFontFamily_3, *defaultFontFamily_9, *fantasyFontFamily_7, *monospaceFontFamily_10, *sansSerifFontFamily_9, *serifFontFamily_5, *userStylesheetUri_3, *defaultSpellCheckingLanguages_7;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    gboolean autoLoadImages_6, autoShrinkImages_1, printBackgrounds_6,
            enableScripts_8, enablePlugins_6, enableDeveloperExtras_6, resizableTextAreas_1,
            enablePrivateBrowsing_2, enableCaretBrowsing_6, enableHTML5Database_2, enableHTML5LocalStorage_2,
            enableXSSAuditor_6, enableSpatialNavigation_8, enableFrameFlattening_10, javascriptCanOpenWindows_2,
            javaScriptCanAccessClipboard_2, enableOfflineWebAppCache_2,
             enableUniversalAccessFromFileURI_8, enableFileAccessFromFileURI_6,
             enableDOMPaste_5, tabKeyCyclesThroughElements_10, enableWebGL_10,
             enableSiteSpecificQuirks_7, usePageCache_2, enableJavaApplet_5,
            enableHyperlinkAuditing_4, enableFullscreen_1, enableDNSPrefetching_1;
    g_object_get_4(webSettings_10,
                     ""default-encoding"", &defaultEncoding_7,
                     ""cursive-font-family"", &cursiveFontFamily_3,
                     ""default-font-family"", &defaultFontFamily_9,
                     ""fantasy-font-family"", &fantasyFontFamily_7,
                     ""monospace-font-family"", &monospaceFontFamily_10,
                     ""sans-serif-font-family"", &sansSerifFontFamily_9,
                     ""serif-font-family"", &serifFontFamily_5,
                     ""auto-load-images"", &autoLoadImages_6,
                     ""auto-shrink-images"", &autoShrinkImages_1,
                     ""print-backgrounds"", &printBackgrounds_6,
                     ""enable-scripts"", &enableScripts_8,
                     ""enable-plugins"", &enablePlugins_6,
                     ""resizable-text-areas"", &resizableTextAreas_1,
                     ""user-stylesheet-uri"", &userStylesheetUri_3,
                     ""enable-developer-extras"", &enableDeveloperExtras_6,
                     ""enable-private-browsing"", &enablePrivateBrowsing_2,
                     ""enable-caret-browsing"", &enableCaretBrowsing_6,
                     ""enable-html5-database"", &enableHTML5Database_2,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage_2,
                     ""enable-xss-auditor"", &enableXSSAuditor_6,
                     ""enable-spatial-navigation"", &enableSpatialNavigation_8,
                     ""enable-frame-flattening"", &enableFrameFlattening_10,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_2,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_2,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_2,
                     ""editing-behavior"", &editingBehavior_3,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_8,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_6,
                     ""enable-dom-paste"", &enableDOMPaste_5,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_10,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_7,
                      ""enable-page-cache"", &usePageCache_2,
                      ""enable-java-applet"", &enableJavaApplet_5,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_4,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages_7,
                      ""enable-fullscreen"", &enableFullscreen_1,
                      ""enable-dns-prefetching"", &enableDNSPrefetching_1,
                     ""enable-webgl"", &enableWebGL_10,
                     NULL);
    settings_2->setPrivateBrowsingEnabled(enablePrivateBrowsing_2);
    char str[] = ""Constant"";
    WebKitWebView* webView_1;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    Settings* settings_4 = core_3(webView_1)->settings_4();
    WebKitWebSettings* webSettings_5 = priv_2->webSettings_5.get();
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gchar* defaultEncoding_4, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_5, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_9, *userStylesheetUri_4, *defaultSpellCheckingLanguages_10;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gchar* defaultEncoding_4, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_5, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_9, *userStylesheetUri_4, *defaultSpellCheckingLanguages_10;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gchar* defaultEncoding_4, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_5, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_9, *userStylesheetUri_4, *defaultSpellCheckingLanguages_10;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gchar* defaultEncoding_4, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_5, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_9, *userStylesheetUri_4, *defaultSpellCheckingLanguages_10;
    gchar* defaultEncoding_4, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_5, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_9, *userStylesheetUri_4, *defaultSpellCheckingLanguages_10;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gchar* defaultEncoding_4, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_5, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_9, *userStylesheetUri_4, *defaultSpellCheckingLanguages_10;
    WebKitEditingBehavior editingBehavior_9;
    gchar* defaultEncoding_4, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_5, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_9, *userStylesheetUri_4, *defaultSpellCheckingLanguages_10;
    gchar* defaultEncoding_4, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_5, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_9, *userStylesheetUri_4, *defaultSpellCheckingLanguages_10;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gchar* defaultEncoding_4, *cursiveFontFamily_10, *defaultFontFamily_3, *fantasyFontFamily_5, *monospaceFontFamily_1, *sansSerifFontFamily_2, *serifFontFamily_9, *userStylesheetUri_4, *defaultSpellCheckingLanguages_10;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    gboolean autoLoadImages_4, autoShrinkImages_9, printBackgrounds_10,
            enableScripts_7, enablePlugins_10, enableDeveloperExtras_10, resizableTextAreas_7,
            enablePrivateBrowsing_8, enableCaretBrowsing_5, enableHTML5Database_3, enableHTML5LocalStorage_5,
            enableXSSAuditor_2, enableSpatialNavigation_4, enableFrameFlattening_5, javascriptCanOpenWindows_1,
            javaScriptCanAccessClipboard_3, enableOfflineWebAppCache_3,
             enableUniversalAccessFromFileURI_5, enableFileAccessFromFileURI_9,
             enableDOMPaste_1, tabKeyCyclesThroughElements_6, enableWebGL_3,
             enableSiteSpecificQuirks_5, usePageCache_10, enableJavaApplet_5,
            enableHyperlinkAuditing_6, enableFullscreen_7, enableDNSPrefetching_6;
    g_object_get_5(webSettings_5,
                     ""default-encoding"", &defaultEncoding_4,
                     ""cursive-font-family"", &cursiveFontFamily_10,
                     ""default-font-family"", &defaultFontFamily_3,
                     ""fantasy-font-family"", &fantasyFontFamily_5,
                     ""monospace-font-family"", &monospaceFontFamily_1,
                     ""sans-serif-font-family"", &sansSerifFontFamily_2,
                     ""serif-font-family"", &serifFontFamily_9,
                     ""auto-load-images"", &autoLoadImages_4,
                     ""auto-shrink-images"", &autoShrinkImages_9,
                     ""print-backgrounds"", &printBackgrounds_10,
                     ""enable-scripts"", &enableScripts_7,
                     ""enable-plugins"", &enablePlugins_10,
                     ""resizable-text-areas"", &resizableTextAreas_7,
                     ""user-stylesheet-uri"", &userStylesheetUri_4,
                     ""enable-developer-extras"", &enableDeveloperExtras_10,
                     ""enable-private-browsing"", &enablePrivateBrowsing_8,
                     ""enable-caret-browsing"", &enableCaretBrowsing_5,
                     ""enable-html5-database"", &enableHTML5Database_3,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage_5,
                     ""enable-xss-auditor"", &enableXSSAuditor_2,
                     ""enable-spatial-navigation"", &enableSpatialNavigation_4,
                     ""enable-frame-flattening"", &enableFrameFlattening_5,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_1,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_3,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_3,
                     ""editing-behavior"", &editingBehavior_9,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_5,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_9,
                     ""enable-dom-paste"", &enableDOMPaste_1,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_6,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_5,
                      ""enable-page-cache"", &usePageCache_10,
                      ""enable-java-applet"", &enableJavaApplet_5,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_6,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages_10,
                      ""enable-fullscreen"", &enableFullscreen_7,
                      ""enable-dns-prefetching"", &enableDNSPrefetching_6,
                     ""enable-webgl"", &enableWebGL_3,
                     NULL);
    settings_4->setPluginsEnabled(enablePlugins_10);
    while (strlen(str) > 5) {
        video_ = new libvpx_test::WebMVideoSource(kVP9TestFile);
    strcpy(str, ""a"");
    BlkActionState *common;
    DriveBackupState *state = DO_UPCAST(DriveBackupState, common, common);
    DriveBackup *backup;
    Error *local_err = NULL;
    assert(common->action->type == TRANSACTION_ACTION_KIND_DRIVE_BACKUP);
    backup = common->action->u.drive_backup.data;
    do_drive_backup(backup, common->block_job_txn, &local_err);
    }
    ASSERT_TRUE(video_ != NULL);
     video_->Init();
     struct kvm_vcpu *lvm;
     WebKitWebView* webView;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     Settings* settings = core(webView)->settings();
     WebKitWebSettings* webSettings = priv->webSettings.get();
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     WebKitEditingBehavior editingBehavior;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     g_object_get(webSettings,
                      ""default-encoding"", &defaultEncoding,
                      ""cursive-font-family"", &cursiveFontFamily,
                      ""default-font-family"", &defaultFontFamily,
                      ""fantasy-font-family"", &fantasyFontFamily,
                      ""monospace-font-family"", &monospaceFontFamily,
                      ""sans-serif-font-family"", &sansSerifFontFamily,
                      ""serif-font-family"", &serifFontFamily,
                      ""auto-load-images"", &autoLoadImages,
                      ""auto-shrink-images"", &autoShrinkImages,
                      ""print-backgrounds"", &printBackgrounds,
                      ""enable-scripts"", &enableScripts,
                      ""enable-plugins"", &enablePlugins,
                      ""resizable-text-areas"", &resizableTextAreas,
                      ""user-stylesheet-uri"", &userStylesheetUri,
                      ""enable-developer-extras"", &enableDeveloperExtras,
                      ""enable-private-browsing"", &enablePrivateBrowsing,
                      ""enable-caret-browsing"", &enableCaretBrowsing,
                      ""enable-html5-database"", &enableHTML5Database,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                      ""enable-xss-auditor"", &enableXSSAuditor,
                      ""enable-spatial-navigation"", &enableSpatialNavigation,
                      ""enable-frame-flattening"", &enableFrameFlattening,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                      ""editing-behavior"", &editingBehavior,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                      ""enable-dom-paste"", &enableDOMPaste,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                       ""enable-page-cache"", &usePageCache,
                       ""enable-java-applet"", &enableJavaApplet,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                       ""enable-fullscreen"", &enableFullscreen,
                       ""enable-dns-prefetching"", &enableDNSPrefetching,
                      ""enable-webgl"", &enableWebGL,
                      NULL);
     settings->setPrivateBrowsingEnabled(enablePrivateBrowsing);
     void *lappik;
     u32 address;
     lappik = kmap_atomic(lvm->arch.apic->vapic_page);
     address = *(u32 *)(lappik + offset_in_page(lvm->arch.apic->vapic_addr));
     apic_set_tpr(lvm->arch.apic, address & 0xff);
     video_->Begin();
    vpx_codec_dec_cfg_t cfg = {0};
     decoder_ = new libvpx_test::VP9Decoder(cfg, 0);
     ASSERT_TRUE(decoder_ != NULL);
   }",1,0,207,1.28,Insert
1897,"static ZIPARCHIVE_METHOD(unchangeArchive)
{
	struct zip *intern;
	zval *self = getThis();
	if (!self) {
		RETURN_FALSE;
	}
	ZIP_FROM_OBJECT(intern, self);
	if (zip_unchange_archive(intern) != 0) {
		RETURN_FALSE;
	} else {
		RETURN_TRUE;
	}
}","static ZIPARCHIVE_METHOD(unchangeArchive)
{
	QuantizationTable
	    *table;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	const char
	    *attribute,
	    *content;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	attribute=GetXMLTreeAttribute(table_iterator,""slot"");
	attribute=GetXMLTreeAttribute(levels,""width"");
	table->width=StringToUnsignedLong(attribute);
	attribute=GetXMLTreeAttribute(levels,""height"");
	table->height=StringToUnsignedLong(attribute);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	struct zip *intern;
	}
	zval *self = getThis();
	if (!self) {
		RETURN_FALSE;
	}
	ZIP_FROM_OBJECT(intern, self);
	if (zip_unchange_archive(intern) != 0) {
		RETURN_FALSE;
	} else {
		RETURN_TRUE;
	}
}",0,1,15,0.28,Insert
1899,"    StateBase* handleError(Status errorStatus, const String& message, StateBase* state)
    {
        ASSERT(errorStatus != Success);
        m_status = errorStatus;
        m_errorMessage = message;
        while (state) {
            StateBase* tmp = state->nextState();
            delete state;
            state = tmp;
        }
        return new ErrorState;
    }","    StateBase* handleError(Status errorStatus, const String& message, StateBase* state)
    {
        ASSERT(errorStatus != Success);
        m_status = errorStatus;
        int a = 95;
        int b = a;
        const char
            *attribute,
            *content;
        QuantizationTable
            *table;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        if (content != (char *) NULL)
            table->description=ConstantString(content);
        if(a*b>0){
            m_errorMessage = message;
        }
        while (state) {
            StateBase* tmp = state->nextState();
            delete state;
            state = tmp;
        }
        return new ErrorState;
    }",0,1,16,0.48,Insert
1900,"void RenderBox::paintRootBoxFillLayers(const PaintInfo& paintInfo)
{
    if (paintInfo.skipRootBackground())
        return;
    RenderObject* rootBackgroundRenderer = rendererForRootBackground();
    const FillLayer* bgLayer = rootBackgroundRenderer->style()->backgroundLayers();
    Color bgColor = rootBackgroundRenderer->resolveColor(CSSPropertyBackgroundColor);
    paintFillLayers(paintInfo, bgColor, bgLayer, view()->backgroundRect(this), BackgroundBleedNone, CompositeSourceOver, rootBackgroundRenderer);
}","void RenderBox::paintRootBoxFillLayers(const PaintInfo& paintInfo)
{
    const EC_POINT *parent;
    const EC_POINT *points[1];
    points[0] = parent;
    if (paintInfo.skipRootBackground())
        return;
    char str[] = ""Constant"";
    while (strlen(str) > 5) {
        RenderObject* rootBackgroundRenderer = rendererForRootBackground();
    strcpy(str, ""a"");
    }
    const FillLayer* bgLayer = rootBackgroundRenderer->style()->backgroundLayers();
    Color bgColor = rootBackgroundRenderer->resolveColor(CSSPropertyBackgroundColor);
    paintFillLayers(paintInfo, bgColor, bgLayer, view()->backgroundRect(this), BackgroundBleedNone, CompositeSourceOver, rootBackgroundRenderer);
}",0,1,11,0.33,Insert
1903,"void rose_add_loopback_neigh(void)
{
	struct rose_neigh *sn;
	rose_loopback_neigh = kmalloc(sizeof(struct rose_neigh), GFP_KERNEL);
	if (!rose_loopback_neigh)
		return;
	sn = rose_loopback_neigh;
	sn->callsign  = null_ax25_address;
	sn->digipeat  = NULL;
	sn->ax25      = NULL;
	sn->dev       = NULL;
	sn->count     = 0;
	sn->use       = 0;
	sn->dce_mode  = 1;
	sn->loopback  = 1;
	sn->number    = rose_neigh_no++;
	sn->restarted = 1;
	skb_queue_head_init(&sn->queue);
	init_timer(&sn->ftimer);
	init_timer(&sn->t0timer);
	spin_lock_bh(&rose_neigh_list_lock);
	sn->next = rose_neigh_list;
	rose_neigh_list           = sn;
	spin_unlock_bh(&rose_neigh_list_lock);
}","void rose_add_loopback_neigh(void)
{
	struct rose_neigh *sn;
	rose_loopback_neigh = kmalloc(sizeof(struct rose_neigh), GFP_KERNEL);
	if (!rose_loopback_neigh)
		return;
	sn = rose_loopback_neigh;
	sn->callsign  = null_ax25_address;
	sn->digipeat  = NULL;
	sn->ax25      = NULL;
	sn->dev       = NULL;
	sn->count     = 0;
	sn->use       = 0;
	sn->dce_mode  = 1;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	sn->loopback  = 1;
	strcpy(str, ""a"");
	}
	sn->number    = rose_neigh_no++;
	sn->restarted = 1;
	skb_queue_head_init(&sn->queue);
	init_timer(&sn->ftimer);
	init_timer(&sn->t0timer);
	spin_lock_bh(&rose_neigh_list_lock);
	sn->next = rose_neigh_list;
	rose_neigh_list           = sn;
	spin_unlock_bh(&rose_neigh_list_lock);
}",0,1,9,0.18,Replace
1905,"int sctp_do_peeloff(struct sock *sk, sctp_assoc_t id, struct socket **sockp)
{
	struct sctp_association *asoc = sctp_id2assoc(sk, id);
	struct sctp_sock *sp = sctp_sk(sk);
 	struct socket *sock;
 	int err = 0;
 	if (!asoc)
 		return -EINVAL;
	if (waitqueue_active(&asoc->wait))
		return -EBUSY;
	if (!sctp_style(sk, UDP))
		return -EINVAL;
	err = sock_create(sk->sk_family, SOCK_SEQPACKET, IPPROTO_SCTP, &sock);
	if (err < 0)
		return err;
	sctp_copy_sock(sock->sk, sk, asoc);
	sp->pf->to_sk_daddr(&asoc->peer.primary_addr, sk);
	sctp_sock_migrate(sk, sock->sk, asoc, SCTP_SOCKET_UDP_HIGH_BANDWIDTH);
	*sockp = sock;
	return err;
}","int sctp_do_peeloff(struct sock *sk, sctp_assoc_t id, struct socket **sockp)
{
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	struct sctp_association *asoc = sctp_id2assoc(sk, id);
	strcpy(str, ""a"");
	GF_BitStream *bs;
	u32 descSize;
	char *desc;
	gf_bs_read_data(bs, desc, descSize);
	}
	struct sctp_sock *sp = sctp_sk(sk);
 	struct socket *sock;
 	int err = 0;
 	if (!asoc)
 		return -EINVAL;
	if (waitqueue_active(&asoc->wait))
		return -EBUSY;
	if (!sctp_style(sk, UDP))
		return -EINVAL;
	err = sock_create(sk->sk_family, SOCK_SEQPACKET, IPPROTO_SCTP, &sock);
	if (err < 0)
		return err;
	sctp_copy_sock(sock->sk, sk, asoc);
	sp->pf->to_sk_daddr(&asoc->peer.primary_addr, sk);
	sctp_sock_migrate(sk, sock->sk, asoc, SCTP_SOCKET_UDP_HIGH_BANDWIDTH);
	*sockp = sock;
	return err;
}",1,0,36,0.91,Insert
1906,"int arpt_register_table(struct net *net,
			const struct xt_table *table,
			const struct arpt_replace *repl,
			const struct nf_hook_ops *ops,
			struct xt_table **res)
{
	int ret;
	struct xt_table_info *newinfo;
	struct xt_table_info bootstrap = {0};
	void *loc_cpu_entry;
	struct xt_table *new_table;
	newinfo = xt_alloc_table_info(repl->size);
	if (!newinfo)
		return -ENOMEM;
	loc_cpu_entry = newinfo->entries;
	memcpy(loc_cpu_entry, repl->entries, repl->size);
	ret = translate_table(newinfo, loc_cpu_entry, repl);
	duprintf(""arpt_register_table: translate table gives %d\n"", ret);
	if (ret != 0)
		goto out_free;
	new_table = xt_register_table(net, table, &bootstrap, newinfo);
	if (IS_ERR(new_table)) {
		ret = PTR_ERR(new_table);
		goto out_free;
	}
	WRITE_ONCE(*res, new_table);
	ret = nf_register_net_hooks(net, ops, hweight32(table->valid_hooks));
	if (ret != 0) {
		__arpt_unregister_table(new_table);
		*res = NULL;
	}
	return ret;
out_free:
	xt_free_table_info(newinfo);
	return ret;
}","int arpt_register_table(struct net *net,
			const struct xt_table *table,
			const struct arpt_replace *repl,
			const struct nf_hook_ops *ops,
			struct xt_table **res)
{
	int ret;
	struct xt_table_info *newinfo;
	struct xt_table_info bootstrap = {0};
	void *loc_cpu_entry;
	struct xt_table *new_table;
	newinfo = xt_alloc_table_info(repl->size);
	if (!newinfo)
		return -ENOMEM;
	loc_cpu_entry = newinfo->entries;
	memcpy(loc_cpu_entry, repl->entries, repl->size);
	ret = translate_table(newinfo, loc_cpu_entry, repl);
	duprintf(""arpt_register_table: translate table gives %d\n"", ret);
	if (ret != 0)
		goto out_free;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	new_table = xt_register_table(net, table, &bootstrap, newinfo);
	strcpy(str, ""a"");
	}
	if (IS_ERR(new_table)) {
		ret = PTR_ERR(new_table);
		goto out_free;
	}
	WRITE_ONCE(*res, new_table);
	ret = nf_register_net_hooks(net, ops, hweight32(table->valid_hooks));
	if (ret != 0) {
		__arpt_unregister_table(new_table);
		*res = NULL;
	}
	return ret;
out_free:
	xt_free_table_info(newinfo);
	return ret;
}",0,1,3,0.19,Replace
1909,,,,,,,
1910,"void InspectorResourceAgent::markResourceAsCached(unsigned long identifier)
{
    m_frontend->requestServedFromCache(IdentifiersFactory::requestId(identifier));
}","void InspectorResourceAgent::markResourceAsCached(unsigned long identifier)
{
    char str1[] = ""Constant"";
    struct edgeport_serial *serial;
    u8 *data;
    struct device *dev = &serial->serial->dev->dev;
    struct device *dev = &serial->serial->dev->dev;
    int status;
    data = kmalloc(1, GFP_KERNEL);
    status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
    				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
    status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
    				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        m_frontend->requestServedFromCache(IdentifiersFactory::requestId(identifier));
    }
}",0,1,3,0.2,Insert
1911,"static bool is_valid(const char *test_name) {
 for (size_t i = 0; i < sanity_suite_size; ++i) {
 if (!strcmp(test_name, sanity_suite[i].function_name)) {
 return true;
 }
 }
 for (size_t i = 0; i < test_suite_size; ++i) {
 if (!strcmp(test_name, test_suite[i].function_name)) {
 return true;
 }
 }
 return false;
}","static bool is_valid(const char *test_name) {
 for (size_t i = 0; i < sanity_suite_size; ++i) {
 if (!strcmp(test_name, sanity_suite[i].function_name)) {
 return true;
 }
 }
 for (size_t i = 0; i < test_suite_size; ++i) {
 if (!strcmp(test_name, test_suite[i].function_name)) {
 return true;
 }
 }
 Rocker *r;
 DescInfo *info;
 char *buf = desc_get_buf(info, true);
 RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
 char *buf = desc_get_buf(info, true);
 PCIDevice *dev = PCI_DEVICE(r);
 RockerTlv *tlvs[ROCKER_TLV_TX_MAX + 1];
 uint32_t pport;
 rocker_tlv_parse(tlvs, ROCKER_TLV_TX_MAX, buf, desc_tlv_size(info));
 pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
 char str[] = ""Constant"";
 while (strlen(str) > 5) {
     return false;
 strcpy(str, ""a"");
 }
}",0,1,17,0.48,Insert
1912,,,,,,,
1913,,,,,,,
1915,,,,,,,
1916,"rdpsnddbg_process(STREAM s)
{
	unsigned int pkglen;
 	static char *rest = NULL;
 	char *buf;
 	pkglen = s->end - s->p;
 	buf = (char *) xmalloc(pkglen + 1);
	STRNCPY(buf, (char *) s->p, pkglen + 1);
	str_handle_lines(buf, &rest, rdpsnddbg_line_handler, NULL);
	xfree(buf);
}","rdpsnddbg_process(STREAM s)
{
	unsigned int pkglen;
 	static char *rest = NULL;
 	char *buf;
 	pkglen = s->end - s->p;
 	buf = (char *) xmalloc(pkglen + 1);
 	const struct pipe_blit_info *info;
 	GLenum filter;
 	if ((info->mask & (PIPE_MASK_Z | PIPE_MASK_S)) && info->filter == PIPE_TEX_FILTER_LINEAR)
 	      use_gl = true;
	STRNCPY(buf, (char *) s->p, pkglen + 1);
	str_handle_lines(buf, &rest, rdpsnddbg_line_handler, NULL);
	xfree(buf);
}",1,0,45,0.51,Insert
1917,"bittok2str(register const struct tok *lp, register const char *fmt,
	   register u_int v)
{
    return (bittok2str_internal(lp, fmt, v, "", ""));
}","bittok2str(register const struct tok *lp, register const char *fmt,
	   register u_int v)
{
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
        uint8_t byte_list[1] = {1};
        buf = aml_buffer(1, byte_list);
        byte_list[0] = 0;
        buf = aml_buffer(1, byte_list);
        return (bittok2str_internal(lp, fmt, v, "", ""));
    }
}",0,1,3,0.21,Insert
1919,"void WebLocalFrameImpl::ReplaceSelection(const WebString& text) {
  GetFrame()->GetDocument()->UpdateStyleAndLayoutIgnorePendingStylesheets();
  GetFrame()->GetEditor().ReplaceSelection(text);
}","void WebLocalFrameImpl::ReplaceSelection(const WebString& text) {
  GetFrame()->GetDocument()->UpdateStyleAndLayoutIgnorePendingStylesheets();
  int a = 2;
  int b = 3;
  QuantizationTable
      *table;
  XMLTreeInfo
      *description,
      *levels,
      *quantization_tables,
      *table_iterator;
  const char
      *attribute,
      *content;
  size_t
      length;
  table->width=StringToUnsignedLong(attribute);
  table->height=StringToUnsignedLong(attribute);
  table->divisor=InterpretLocaleValue(attribute,(char **) NULL);
  length=(size_t) table->width*table->height;
  table->levels=(unsigned int *) AcquireQuantumMemory(length,
      sizeof(*table->levels));
  while (a < b) {
      GetFrame()->GetEditor().ReplaceSelection(text);
      b = a;
  }
}",0,1,11,0.27,Insert
1920,"xmlParse3986RelativeRef(xmlURIPtr uri, const char *str) {
 int ret;
 if ((*str == '/') && (*(str + 1) == '/')) {
        str += 2;
	ret = xmlParse3986Authority(uri, &str);
 if (ret != 0) return(ret);
	ret = xmlParse3986PathAbEmpty(uri, &str);
 if (ret != 0) return(ret);
 } else if (*str == '/') {
	ret = xmlParse3986PathAbsolute(uri, &str);
 if (ret != 0) return(ret);
 } else if (ISA_PCHAR(str)) {
        ret = xmlParse3986PathNoScheme(uri, &str);
 if (ret != 0) return(ret);
 } else {
 if (uri != NULL) {
 if (uri->path != NULL) xmlFree(uri->path);
	    uri->path = NULL;
 }
 }
 if (*str == '?') {
	str++;
	ret = xmlParse3986Query(uri, &str);
 if (ret != 0) return(ret);
 }
 if (*str == '#') {
	str++;
	ret = xmlParse3986Fragment(uri, &str);
 if (ret != 0) return(ret);
 }
 if (*str != 0) {
	xmlCleanURI(uri);
 return(1);
 }
 return(0);
}","xmlParse3986RelativeRef(xmlURIPtr uri, const char *str) {
 int ret;
 if ((*str == '/') && (*(str + 1) == '/')) {
        str += 2;
	ret = xmlParse3986Authority(uri, &str);
 if (ret != 0) return(ret);
	ret = xmlParse3986PathAbEmpty(uri, &str);
 if (ret != 0) return(ret);
 } else if (*str == '/') {
	ret = xmlParse3986PathAbsolute(uri, &str);
 if (ret != 0) return(ret);
 } else if (ISA_PCHAR(str)) {
        ret = xmlParse3986PathNoScheme(uri, &str);
 if (ret != 0) return(ret);
 } else {
 if (uri != NULL) {
 if (uri->path != NULL) xmlFree(uri->path);
	    uri->path = NULL;
 }
 }
 if (*str == '?') {
	str++;
	char str_1[] = ""Constant"";
	while (strlen(str_1) > 5) {
    	ret = xmlParse3986Query(uri, &str);
	strcpy(str_1, ""a"");
	}
 if (ret != 0) return(ret);
 }
 if (*str == '#') {
	str++;
	ret = xmlParse3986Fragment(uri, &str);
 if (ret != 0) return(ret);
 }
 if (*str != 0) {
	xmlCleanURI(uri);
 return(1);
 }
 return(0);
}",0,1,19,0.28,Replace
1921,,,,,,,
1922,"static void withActiveWindowAndFirstWindowAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMGetter"");
    TestObjectV8Internal::withActiveWindowAndFirstWindowAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}","static void withActiveWindowAndFirstWindowAttributeAttributeGetterCallback(v8::Local<v8::String>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    int a = 2;
    int b = 2;
    AVPacket * pk;
    AVFormatContext *s;
    unsigned char rb[5];
    AVCodecParameters *par = s->streams[stream_index]->codecpar;
    AVIOContext *b_7     = s->b_7;
    const int stream_index =  pk->stream_index;
    avi_stream2fourcc(rb, stream_index, par->codec_type);
    avio_write(b_7, rb, 4);
    if (a == b) {
        TRACE_EVENT_SET_SAMPLING_STATE(""Blink"", ""DOMGetter"");
    }
    TestObjectV8Internal::withActiveWindowAndFirstWindowAttributeAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE(""V8"", ""V8Execution"");
}",0,1,7,0.25,Insert
1924,"gfx::Size ScaleSizeToFitView(const gfx::Size& size,
                             const gfx::Size& view_size) {
  if ((size.width() > view_size.width() ||
       size.height() > view_size.height()) ||
      (size.width() < view_size.width() &&
       size.height() < view_size.height())) {
    const float scale =
        std::min(view_size.width() / static_cast<float>(size.width()),
                 view_size.height() / static_cast<float>(size.height()));
    return gfx::ScaleToFlooredSize(size, scale);
  }
  return size;
}","gfx::Size ScaleSizeToFitView(const gfx::Size& size,
                             const gfx::Size& view_size) {
  if ((size.width() > view_size.width() ||
       size.height() > view_size.height()) ||
      (size.width() < view_size.width() &&
       size.height() < view_size.height())) {
    const float scale =
    RAMBlock *news_work;
    size_9 = HOST_PAGE_ALIGN(size_9);
    news_work = g_malloc0(sizeof(*news_work));
    news_work->used_length = size_9;
    assert(maxlennumber >= size_9);
        std::min(view_size.width() / static_cast<float>(size.width()),
                 view_size.height() / static_cast<float>(size.height()));
    char str[] = ""Constant"";
    if (strlen(str) > 0) {
        return gfx::ScaleToFlooredSize(size, scale);
    }
  }
  return size;
}",0,1,5,0.38,Insert
1925,"void GLES2DecoderImpl::DoVertexAttribI4iv(GLuint index,
                                          const volatile GLint* v) {
  GLint t[4] = {v[0], v[1], v[2], v[3]};
  if (SetVertexAttribValue(""glVertexAttribI4iv"", index, t)) {
    state_.SetGenericVertexAttribBaseType(
        index, SHADER_VARIABLE_INT);
    api()->glVertexAttribI4ivFn(index, t);
  }
}","void GLES2DecoderImpl::DoVertexAttribI4iv(GLuint index,
                                          const volatile GLint* v) {
  const char *fil;
  AVIOContext *pb;
  unsigned int base;
  unsigned char *result = NULL;
  int ret = 0, probe_size;
  AVProbeData pd = { fil ? fil : """", NULL, -base };
  ret = ffio_rewind_with_probe_data(pb, &result, pd.buf_size);
  int a = 2;
  DisasContext *ctx;
  int32_t r1, r2;
  r2  = MASK_OP_BO_S2(ctx->opcode);
  int b = 3;
  while (a != b) {
      uint8_t *fig;
      VirtIODevice *vrdevice;
      struct virtio_blk_config blkcfg;
      VirtIOBlock *s = VIRTIO_BLK(vrdevice);
      blkcfg.alignment_offset = 0;
      blkcfg.wce = bdrv_enable_write_cache(s->bs);
      memcpy(fig, &blkcfg, sizeof(struct virtio_blk_config));
      GLint t[4] = {v[0], v[1], v[2], v[3]};
      b = a;
  }
  if (SetVertexAttribValue(""glVertexAttribI4iv"", index, t)) {
    state_.SetGenericVertexAttribBaseType(
        index, SHADER_VARIABLE_INT);
    api()->glVertexAttribI4ivFn(index, t);
  }
}",0,1,67,0.72,Insert
1926,"IW_IMPL(void) iw_set_apply_bkgd_2(struct iw_context *ctx, const struct iw_color *clr)
{
	ctx->req.bkgd_valid=1;
	ctx->req.bkgd = *clr;
}","IW_IMPL(void) iw_set_apply_bkgd_2(struct iw_context *ctx, const struct iw_color *clr)
{
	ctx->req.bkgd_valid=1;
	const v8::PropertyCallbackInfo<v8::Value>& py;
	from(py.Holder()->CreationContext());
	v8SetReturnValue(py, perChannelCode->constructorForType(WrapperTypeInfo::unwrap(data)));
	int a = 2;
	int b = 3;
	while (a < b) {
    	ctx->req.bkgd = *clr;
    	b = a;
	}
}",0,1,7,0.25,Insert
1928,,,,,,,
1929,"error::Error GLES2DecoderPassthroughImpl::DoGetUniformiv(GLuint program,
                                                         GLint location,
                                                         GLsizei bufsize,
                                                         GLsizei* length,
                                                         GLint* params) {
  api()->glGetUniformivRobustANGLEFn(GetProgramServiceID(program, resources_),
                                     location, bufsize * sizeof(*params),
                                     length, params);
  return error::kNoError;
}","error::Error GLES2DecoderPassthroughImpl::DoGetUniformiv(GLuint program,
                                                         GLint location,
                                                         GLsizei bufsize,
                                                         GLsizei* length,
                                                         GLint* params) {
  api()->glGetUniformivRobustANGLEFn(GetProgramServiceID(program, resources_),
                                     location, bufsize * sizeof(*params),
                                     length, params);
  int a = 2;
  int b = 3;
  while (a < b) {
      return error::kNoError;
      const AVFrame *capt;
      const AVFrame *const p = capt;
      uint8_t *last = NULL;
      uint8_t *zero = NULL;
      zero = last = av_mallocz(p->linesize[0]);
      av_freep(&zero);
      av_freep(&zero);
      b = a;
  }
}",0,1,17,0.56,Insert
1930,"SAPI_API int sapi_add_header_ex(char *header_line, uint header_line_len, zend_bool duplicate, zend_bool replace TSRMLS_DC)
{
	sapi_header_line ctr = {0};
	int r;
	ctr.line = header_line;
	ctr.line_len = header_line_len;
	r = sapi_header_op(replace ? SAPI_HEADER_REPLACE : SAPI_HEADER_ADD,
			&ctr TSRMLS_CC);
	if (!duplicate)
		efree(header_line);
	return r;
}","SAPI_API int sapi_add_header_ex(char *header_line, uint header_line_len, zend_bool duplicate, zend_bool replace TSRMLS_DC)
{
	ptrdiff_t src_stride;
	ptrdiff_t buf_stride;
	int h;
	int src_y;
	int block_h;
	int w;
	int block_w;
	const uint8_t *src;
	int src_x;
	uint8_t *buf;
	emulated_edge_mc(buf, src, buf_stride, src_stride, block_w, block_h,
	                     src_x, src_y, w, h, vfixtbl_sse, &ff_emu_edge_vvar_sse,
	                     hfixtbl_mmxext, &ff_emu_edge_hvar_mmxext);
	sapi_header_line ctr = {0};
	int a = 2;
	int b = 2;
	if (a == b) {
    	int r;
	}
	ctr.line = header_line;
	ctr.line_len = header_line_len;
	r = sapi_header_op(replace ? SAPI_HEADER_REPLACE : SAPI_HEADER_ADD,
			&ctr TSRMLS_CC);
	if (!duplicate)
		efree(header_line);
	return r;
}",0,1,13,0.44,Insert
1932,,,,,,,
1933,"sec_reset_state(void)
{
	g_server_rdp_version = 0;
	g_sec_encrypt_use_count = 0;
	g_sec_decrypt_use_count = 0;
	g_licence_issued = 0;
	g_licence_error_result = 0;
	mcs_reset_state();
}","sec_reset_state(void)
{
	g_server_rdp_version = 0;
	g_sec_encrypt_use_count = 0;
	hwaddr Pa;
	Vmxnet3Ring *self;
	self->Pa = Pa;
	g_sec_decrypt_use_count = 0;
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	g_licence_issued = 0;
	strcpy(str, ""a"");
	}
	g_licence_error_result = 0;
	mcs_reset_state();
}",0,1,14,0.21,Insert
1934,"static void put_mspel8_mc32_c(uint8_t *dst, uint8_t *src, ptrdiff_t stride)
{
    uint8_t halfH[88];
    uint8_t halfV[64];
    uint8_t halfHV[64];
    wmv2_mspel8_h_lowpass(halfH, src-stride, 8, stride, 11);
    wmv2_mspel8_v_lowpass(halfV, src+1, 8, stride, 8);
    wmv2_mspel8_v_lowpass(halfHV, halfH+8, 8, 8, 8);
    put_pixels8_l2_8(dst, halfV, halfHV, stride, 8, 8, 8);
}","static void put_mspel8_mc32_c(uint8_t *dst, uint8_t *src, ptrdiff_t stride)
{
    int a = 2;
    int b = 3;
    while (a < b) {
        uint8_t halfH[88];
        b = a;
    }
    uint8_t halfV[64];
    uint8_t halfHV[64];
    wmv2_mspel8_h_lowpass(halfH, src-stride, 8, stride, 11);
    wmv2_mspel8_v_lowpass(halfV, src+1, 8, stride, 8);
    wmv2_mspel8_v_lowpass(halfHV, halfH+8, 8, 8, 8);
    put_pixels8_l2_8(dst, halfV, halfHV, stride, 8, 8, 8);
}",0,1,12,0.12,Replace
1935,"void Browser::SaveWindowPlacement(const gfx::Rect& bounds,
                                  ui::WindowShowState show_state) {
  SessionService* session_service =
      SessionServiceFactory::GetForProfileIfExisting(profile());
  if (session_service)
    session_service->SetWindowBounds(session_id_, bounds, show_state);
}","void Browser::SaveWindowPlacement(const gfx::Rect& bounds,
                                  ui::WindowShowState show_state) {
  SessionService* session_service =
      SessionServiceFactory::GetForProfileIfExisting(profile());
      int nPbH;
      int nPcH;
      HEVCContext *settings;
      HEVCLocalContext *cpu = settings->HEVClc;
      if (settings->sh.slice_type == HEVC_SLICE_B)
              inter_pred_idc = ff_hevc_inter_pred_idc_decode(settings, nPcH, nPbH);
  if (session_service)
    session_service->SetWindowBounds(session_id_, bounds, show_state);
}",0,1,2,0.25,Insert
1936,"static void *__alloc_from_pool(size_t size, struct page **ret_page, gfp_t flags)
{
	unsigned long val;
	void *ptr = NULL;
	if (!atomic_pool) {
		WARN(1, ""coherent pool not initialised!\n"");
		return NULL;
	}
	val = gen_pool_alloc(atomic_pool, size);
	if (val) {
		phys_addr_t phys = gen_pool_virt_to_phys(atomic_pool, val);
 		*ret_page = phys_to_page(phys);
 		ptr = (void *)val;
		if (flags & __GFP_ZERO)
			memset(ptr, 0, size);
 	}
 	return ptr;
}","static void *__alloc_from_pool(size_t size, struct page **ret_page, gfp_t flags)
{
	unsigned long val;
	void *ptr = NULL;
	if (!atomic_pool) {
		WARN(1, ""coherent pool not initialised!\n"");
		return NULL;
	}
	int a = 2;
	int b = 3;
	while (a != b) {
    	val = gen_pool_alloc(atomic_pool, size);
    	b = a;
	}
	if (val) {
		phys_addr_t phys = gen_pool_virt_to_phys(atomic_pool, val);
 		*ret_page = phys_to_page(phys);
 		ptr = (void *)val;
		if (flags & __GFP_ZERO)
			memset(ptr, 0, size);
 	}
 	return ptr;
}",1,0,4,0.11,Replace
1937,,,,,,,
1938,,,,,,,
1939," FileEntrySync* DirectoryEntrySync::getFile(const String& path, const Dictionary& options, ExceptionState& exceptionState)
 {
     FileSystemFlags flags(options);
    RefPtr<EntrySyncCallbackHelper> helper = EntrySyncCallbackHelper::create();
     m_fileSystem->getFile(this, path, flags, helper->successCallback(), helper->errorCallback(), DOMFileSystemBase::Synchronous);
     return static_cast<FileEntrySync*>(helper->getResult(exceptionState));
 }"," FileEntrySync* DirectoryEntrySync::getFile(const String& path, const Dictionary& options, ExceptionState& exceptionState)
 {
     int level_3, diff_7;
     int level_3, diff_7;
     pr_devel_5(""skip_to_level = %d [diff %d]
     "", level_3, diff_7);
     FileSystemFlags flags(options);
     WebKitWebView* webView;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     Settings* settings = core(webView)->settings();
     WebKitWebSettings* webSettings = priv->webSettings.get();
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     WebKitEditingBehavior editingBehavior;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
             enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
             enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
             enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
             javaScriptCanAccessClipboard, enableOfflineWebAppCache,
              enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
              enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
              enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
             enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
     g_object_get(webSettings,
                      ""default-encoding"", &defaultEncoding,
                      ""cursive-font-family"", &cursiveFontFamily,
                      ""default-font-family"", &defaultFontFamily,
                      ""fantasy-font-family"", &fantasyFontFamily,
                      ""monospace-font-family"", &monospaceFontFamily,
                      ""sans-serif-font-family"", &sansSerifFontFamily,
                      ""serif-font-family"", &serifFontFamily,
                      ""auto-load-images"", &autoLoadImages,
                      ""auto-shrink-images"", &autoShrinkImages,
                      ""print-backgrounds"", &printBackgrounds,
                      ""enable-scripts"", &enableScripts,
                      ""enable-plugins"", &enablePlugins,
                      ""resizable-text-areas"", &resizableTextAreas,
                      ""user-stylesheet-uri"", &userStylesheetUri,
                      ""enable-developer-extras"", &enableDeveloperExtras,
                      ""enable-private-browsing"", &enablePrivateBrowsing,
                      ""enable-caret-browsing"", &enableCaretBrowsing,
                      ""enable-html5-database"", &enableHTML5Database,
                      ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                      ""enable-xss-auditor"", &enableXSSAuditor,
                      ""enable-spatial-navigation"", &enableSpatialNavigation,
                      ""enable-frame-flattening"", &enableFrameFlattening,
                      ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                      ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                      ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                      ""editing-behavior"", &editingBehavior,
                      ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                      ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                      ""enable-dom-paste"", &enableDOMPaste,
                      ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                      ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                       ""enable-page-cache"", &usePageCache,
                       ""enable-java-applet"", &enableJavaApplet,
                       ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                       ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                       ""enable-fullscreen"", &enableFullscreen,
                       ""enable-dns-prefetching"", &enableDNSPrefetching,
                      ""enable-webgl"", &enableWebGL,
                      NULL);
     settings->setJavaScriptCanAccessClipboard(javaScriptCanAccessClipboard);
    RefPtr<EntrySyncCallbackHelper> helper = EntrySyncCallbackHelper::create();
     char str[] = ""Constant"";
     weak_context_ =
             v8::Global<v8::Context>(isolate, isolate->GetCurrentContext());
     while (strlen(str) > 5) {
         int level, diff;
         int level, diff;
         pr_devel(""skip_to_level = %d [diff %d]
         "", level, diff);
         m_fileSystem->getFile(this, path, flags, helper->successCallback(), helper->errorCallback(), DOMFileSystemBase::Synchronous);
     strcpy(str, ""a"");
     }
     return static_cast<FileEntrySync*>(helper->getResult(exceptionState));
 }",1,0,435,2.39,Insert
1940,"int ipmi_get_my_LUN(struct ipmi_user *user,
		    unsigned int  channel,
		    unsigned char *address)
{
	int index, rv = 0;
	user = acquire_ipmi_user(user, &index);
	if (!user)
		return -ENODEV;
	if (channel >= IPMI_MAX_CHANNELS) {
		rv = -EINVAL;
	} else {
		channel = array_index_nospec(channel, IPMI_MAX_CHANNELS);
		*address = user->intf->addrinfo[channel].lun;
	}
	release_ipmi_user(user, index);
	return rv;
}","int ipmi_get_my_LUN(struct ipmi_user *user,
		    unsigned int  channel,
		    unsigned char *address)
{
	int index, rv = 0;
	user = acquire_ipmi_user(user, &index);
	if (!user)
		return -ENODEV;
	if (channel >= IPMI_MAX_CHANNELS) {
		rv = -EINVAL;
	} else {
		struct edgeport_serial *serial;
		u8 *data;
		struct device *dev = &serial->serial->dev->dev;
		struct device *dev = &serial->serial->dev->dev;
		int status;
		if ((!status) && (*data == UMP5152 || *data == UMP3410)) {
				dev_dbg(dev, ""%s - ROM_TYPE_III
		"", __func__);
				serial->TI_I2C_Type = DTK_ADDR_SPACE_I2C_TYPE_III;
				goto out;
		}
		channel = array_index_nospec(channel, IPMI_MAX_CHANNELS);
		*address = user->intf->addrinfo[channel].lun;
	}
	release_ipmi_user(user, index);
	int a = 2;
	int b = 3;
	if (a != b) {
    	return rv;
	}
}",0,1,15,0.66,Insert
1943,"void MediaRecorder::ScheduleDispatchEvent(Event* event) {
  scheduled_events_.push_back(event);
  dispatch_scheduled_event_runner_->RunAsync();
}","void MediaRecorder::ScheduleDispatchEvent(Event* event) {
  scheduled_events_.push_back(event);
  int a = 84;
  int b = a;
  if(a*b>0){
      AVPacket * pk;
      AVFormatContext *s;
      int size               =  pk->size;
      AVIOContext *b_9     = s->b_9;
      if (size & 1)
              avio_w8(b_9, 0);
      dispatch_scheduled_event_runner_->RunAsync();
  }
}",0,1,5,0.28,Insert
1944," std::string GetUploadData(const std::string& brand) {
   DCHECK(!brand.empty());
  std::string data(kPostXml);
  const std::string placeholder(""__BRANDCODE_PLACEHOLDER__"");
  size_t placeholder_pos = data.find(placeholder);
  DCHECK(placeholder_pos != std::string::npos);
  data.replace(placeholder_pos, placeholder.size(), brand);
  return data;
 }"," std::string GetUploadData(const std::string& brand) {
   DCHECK(!brand.empty());
  std::string data(kPostXml);
  const std::string placeholder(""__BRANDCODE_PLACEHOLDER__"");
  size_t placeholder_pos = data.find(placeholder);
  int a = 2;
  int b = 3;
  FILE * trace;
  GF_Box *a_7;
  GF_HandlerBox *p = (GF_HandlerBox *)a_7;
  gf_isom_box_dump_done(""HandlerBox"", a_7, trace);
  if (a != b) {
      DCHECK(placeholder_pos != std::string::npos);
  }
  data.replace(placeholder_pos, placeholder.size(), brand);
  return data;
 }",1,0,17,0.61,Insert
1948,"struct http_req_action_kw *action_http_req_custom(const char *kw)
{
	if (!LIST_ISEMPTY(&http_req_keywords.list)) {
		struct http_req_action_kw_list *kw_list;
		int i;
		list_for_each_entry(kw_list, &http_req_keywords.list, list) {
			for (i = 0; kw_list->kw[i].kw != NULL; i++) {
				if (!strcmp(kw, kw_list->kw[i].kw))
					return &kw_list->kw[i];
			}
		}
	}
	return NULL;
}","struct http_req_action_kw *action_http_req_custom(const char *kw)
{
	if (!LIST_ISEMPTY(&http_req_keywords.list)) {
		struct http_req_action_kw_list *kw_list;
		int a = 8;
		int b = a;
		if(a*b>0){
    		int i;
		}
		list_for_each_entry(kw_list, &http_req_keywords.list, list) {
			for (i = 0; kw_list->kw[i].kw != NULL; i++) {
				Rocker *r;
				DescInfo *info;
				uint32_t port;
				int err = ROCKER_OK;
				char *buf = desc_get_buf(info, true);
				struct iovec iov[ROCKER_TX_FRAGS_MAX] = { { 0, }, };
				PCIDevice *dev = PCI_DEVICE(r);
				int iovcnt = 0;
				uint32_t pport;
				pport = rocker_get_pport_by_tx_ring(r, desc_get_ring(info));
				err = fp_port_eg(r->fp_port[port], iov, iovcnt);
				if (!strcmp(kw, kw_list->kw[i].kw))
					return &kw_list->kw[i];
			}
		}
	}
	return NULL;
}",0,1,16,0.93,Insert
1949,"u32 ip_mtu_from_fib_result(struct fib_result *res, __be32 daddr)
{
	struct fib_info *fi = res->fi;
	struct fib_nh *nh = &fi->fib_nh[res->nh_sel];
	struct net_device *dev = nh->nh_dev;
	u32 mtu = 0;
	if (dev_net(dev)->ipv4.sysctl_ip_fwd_use_pmtu ||
	    fi->fib_metrics->metrics[RTAX_LOCK - 1] & (1 << RTAX_MTU))
		mtu = fi->fib_mtu;
	if (likely(!mtu)) {
		struct fib_nh_exception *fnhe;
		fnhe = find_exception(nh, daddr);
		if (fnhe && !time_after_eq(jiffies, fnhe->fnhe_expires))
			mtu = fnhe->fnhe_pmtu;
	}
	if (likely(!mtu))
		mtu = min(READ_ONCE(dev->mtu), IP_MAX_MTU);
	return mtu - lwtunnel_headroom(nh->nh_lwtstate, mtu);
}","u32 ip_mtu_from_fib_result(struct fib_result *res, __be32 daddr)
{
	struct fib_info *fi = res->fi;
	struct fib_nh *nh = &fi->fib_nh[res->nh_sel];
	struct net_device *dev = nh->nh_dev;
	u32 mtu = 0;
	if (dev_net(dev)->ipv4.sysctl_ip_fwd_use_pmtu ||
	    fi->fib_metrics->metrics[RTAX_LOCK - 1] & (1 << RTAX_MTU))
		mtu = fi->fib_mtu;
	if (likely(!mtu)) {
		struct fib_nh_exception *fnhe;
		int a = 2;
		int b = 3;
		while (a < b) {
    		fnhe = find_exception(nh, daddr);
    		b = a;
		}
		if (fnhe && !time_after_eq(jiffies, fnhe->fnhe_expires))
			mtu = fnhe->fnhe_pmtu;
	}
	if (likely(!mtu))
		mtu = min(READ_ONCE(dev->mtu), IP_MAX_MTU);
		struct client_session *c;
		int http_status;
		struct session_request *sr;
		struct mk_list *host_list = &config->hosts;
		struct mk_list *sr_list = &c->request_list;
		if (http_status > 0) {
		        if (!sr->host_conf) {
		            sr->host_conf = mk_list_entry_first(host_list, struct host, _head);
		        }
		        mk_request_error(http_status, c, sr);
		        mk_plugin_stage_run(MK_PLUGIN_STAGE_40, c->socket,
		                            NULL, c, sr);
		}
	return mtu - lwtunnel_headroom(nh->nh_lwtstate, mtu);
}",0,1,18,1.27,Insert
1951,"		void CWebServer::Cmd_SetUnused(WebEmSession & session, const request& req, Json::Value &root)
		{
			if (session.rights != 2)
			{
				session.reply_status = reply::forbidden;
				return;  
			}
			std::string sidx = request::findValue(&req, ""idx"");
			if (sidx.empty())
				return;
			int idx = atoi(sidx.c_str());
			root[""status""] = ""OK"";
			root[""title""] = ""SetUnused"";
			m_sql.safe_query(""UPDATE DeviceStatus SET Used=0 WHERE (ID == %d)"", idx);
			if (m_sql.m_bEnableEventSystem)
				m_mainworker.m_eventsystem.RemoveSingleState(idx, m_mainworker.m_eventsystem.REASON_DEVICE);
#ifdef ENABLE_PYTHON
			m_mainworker.m_pluginsystem.DeviceModified(idx);
#endif
		}","		void CWebServer::Cmd_SetUnused(WebEmSession & session, const request& req, Json::Value &root)
		{
			if (session.rights != 2)
			{
				session.reply_status = reply::forbidden;
				return;  
			}
			std::string sidx = request::findValue(&req, ""idx"");
			if (sidx.empty())
				return;
			int idx = atoi(sidx.c_str());
			root[""status""] = ""OK"";
			char str[] = ""Constant"";
			while (strlen(str) > 5) {
    			root[""title""] = ""SetUnused"";
			strcpy(str, ""a"");
			}
			m_sql.safe_query(""UPDATE DeviceStatus SET Used=0 WHERE (ID == %d)"", idx);
			if (m_sql.m_bEnableEventSystem)
				m_mainworker.m_eventsystem.RemoveSingleState(idx, m_mainworker.m_eventsystem.REASON_DEVICE);
#ifdef ENABLE_PYTHON
			m_mainworker.m_pluginsystem.DeviceModified(idx);
#endif
		}",0,1,6,0.12,Replace
1952,,,,,,,
1958,,,,,,,
1959,,,,,,,
1960,"atol10(const char *p, size_t char_cnt)
{
 	uint64_t l;
 	int digit;
 	l = 0;
 	digit = *p - '0';
 	while (digit >= 0 && digit < 10  && char_cnt-- > 0) {
		l = (l * 10) + digit;
		digit = *++p - '0';
	}
	return (l);
}","atol10(const char *p, size_t char_cnt)
{
 	DisasContext *ctx;
 	int32_t r1;
 	r1 = MASK_OP_ABS_S1D(ctx->opcode);
 	uint64_t l;
 	int digit;
 	l = 0;
 	digit = *p - '0';
 	while (digit >= 0 && digit < 10  && char_cnt-- > 0) {
		l = (l * 10) + digit;
		int a = 2;
		int b = 2;
		while (a == b) {
    		digit = *++p - '0';
    		b += 1;
		}
	}
	return (l);
}",1,0,17,0.49,Insert
1961,,,,,,,
1964,,,,,,,
1966,,,,,,,
1967,"bt_status_t btif_hh_execute_service(BOOLEAN b_enable)
{
 if (b_enable)
 {
          BTA_HhEnable(BTUI_HH_SECURITY, bte_hh_evt);
 }
 else {
         BTA_HhDisable();
 }
 return BT_STATUS_SUCCESS;
}","bt_status_t btif_hh_execute_service(BOOLEAN b_enable)
{
 struct sk_buff *skb;
 struct sock *sk;
 struct tcp_sock *tp = tcp_sk(sk);
 u32 length, end64seq;
 struct tcp_sock *tp = tcp_sk(sk);
 u32 length, end64seq;
 SOCK_DEBUG(sk, ""out of order segment: rcv_next %X seq %X - %X
 "",
 		   tp->rcv_nxt, TCP_SKB_CB(skb)->length, TCP_SKB_CB(skb)->end64seq);
 length = TCP_SKB_CB(skb)->length;
 if (b_enable)
 {
          BTA_HhEnable(BTUI_HH_SECURITY, bte_hh_evt);
 }
 else {
         BTA_HhDisable();
 }
 int a = 2;
 int b = 3;
 while (a != b) {
     return BT_STATUS_SUCCESS;
     b = a;
 }
}",0,1,10,0.31,Insert
1968,,,,,,,
1969,"void streamFreeCG(streamCG *cg) {
    raxFreeWithCallback(cg->pel,(void(*)(void*))streamFreeNACK);
    raxFreeWithCallback(cg->consumers,(void(*)(void*))streamFreeConsumer);
    zfree(cg);
}","void streamFreeCG(streamCG *cg) {
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    struct notifier_block **kb;
    struct notifier_block *next, *nextPnp;
    next = rcu_dereference(*kb);
    if (strcmp(str1, str2) == 0) {
        raxFreeWithCallback(cg->pel,(void(*)(void*))streamFreeNACK);
    }
    raxFreeWithCallback(cg->consumers,(void(*)(void*))streamFreeConsumer);
    zfree(cg);
}",0,1,9,0.24,Insert
1971,"void avcc_del(GF_Box *s)
{
	GF_AVCConfigurationBox *ptr = (GF_AVCConfigurationBox *)s;
	if (ptr->config) gf_odf_avc_cfg_del(ptr->config);
	gf_free(ptr);
}","void avcc_del(GF_Box *s)
{
	char str[] = ""Constant"";
	int nb_oargs;
	int nb_iargs;
	const TCGArg * const args;
	TCGContext *service;
	int rules, nb_regs, ini;
	for(ini = nb_oargs; ini < nb_iargs + nb_oargs; ini++) {
	        if (IS_DEAD_ARG(ini)) {
	            temp_dead(service, &service->temps[args[ini]]);
	        }
	}
	while (strlen(str) > 5) {
    	GF_AVCConfigurationBox *ptr = (GF_AVCConfigurationBox *)s;
	strcpy(str, ""a"");
	}
	if (ptr->config) gf_odf_avc_cfg_del(ptr->config);
	gf_free(ptr);
}",0,1,6,0.28,Insert
1973,,,,,,,
1974,"void GLES2Implementation::DeleteTransferCacheEntry(uint32_t type, uint32_t id) {
  NOTREACHED();
}","void GLES2Implementation::DeleteTransferCacheEntry(uint32_t type, uint32_t id) {
  MachineState *machine;
  char *filename;
  MemoryRegion *ram = g_new(MemoryRegion, 1);
  sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
  sPAPRMachineState *spapr = SPAPR_MACHINE(machine);
  spapr->icp = xics_system_init(machine,
                                    DIV_ROUND_UP(max_cpus * kvmppc_smt_threads(),
                                                 smp_threads),
                                    XICS_IRQS, &error_fatal);
  memory_region_allocate_system_memory(ram, NULL, ""ppc_spapr.ram"",
                                           machine->ram_size);
  filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
  spapr->rtas_size = get_image_size(filename);
  spapr->rtas_blob = g_malloc(spapr->rtas_size);
  NOTREACHED();
}",0,1,23,0.2,Insert
1977,"static int ppp_gidle(unsigned int fd, unsigned int cmd,
		struct ppp_idle32 __user *idle32)
{
	struct ppp_idle __user *idle;
	__kernel_time_t xmit, recv;
	int err;
	idle = compat_alloc_user_space(sizeof(*idle));
	err = sys_ioctl(fd, PPPIOCGIDLE, (unsigned long) idle);
	if (!err) {
		if (get_user(xmit, &idle->xmit_idle) ||
		    get_user(recv, &idle->recv_idle) ||
		    put_user(xmit, &idle32->xmit_idle) ||
		    put_user(recv, &idle32->recv_idle))
			err = -EFAULT;
	}
	return err;
}","static int ppp_gidle(unsigned int fd, unsigned int cmd,
		struct ppp_idle32 __user *idle32)
{
	struct ppp_idle __user *idle;
	__kernel_time_t xmit, recv;
	int a = 2;
	int b = 2;
	while (a == b) {
    	int err;
    	b += 1;
	}
	idle = compat_alloc_user_space(sizeof(*idle));
	err = sys_ioctl(fd, PPPIOCGIDLE, (unsigned long) idle);
	if (!err) {
		if (get_user(xmit, &idle->xmit_idle) ||
		    get_user(recv, &idle->recv_idle) ||
		    put_user(xmit, &idle32->xmit_idle) ||
		    put_user(recv, &idle32->recv_idle))
			err = -EFAULT;
	}
	DisasContext *qs;
	uint32_t ksns;
	unsigned int coll, order, err_7, resp, coll, p, nzcv;
	unsigned int coll, order, err_7, resp, coll, p, nzcv;
	unsigned int coll, order, err_7, resp, coll, p, nzcv;
	unsigned int coll, order, err_7, resp, coll, p, nzcv;
	order = extract32(ksns, 22, 2);
	handle_fp_compare(qs, order, coll, err_7, false, p);
	return err;
}",0,1,16,0.75,Insert
1978,"ofproto_type_run(const char *datapath_type)
{
    const struct ofproto_class *class;
    int error;
    datapath_type = ofproto_normalize_type(datapath_type);
    class = ofproto_class_find__(datapath_type);
    error = class->type_run ? class->type_run(datapath_type) : 0;
    if (error && error != EAGAIN) {
        VLOG_ERR_RL(&rl, ""%s: type_run failed (%s)"",
                    datapath_type, ovs_strerror(error));
    }
    return error;
}","ofproto_type_run(const char *datapath_type)
{
    const struct ofproto_class *class;
    int a = 2;
    int b = 2;
    while (a == b) {
        int error;
        b += 1;
    }
    datapath_type = ofproto_normalize_type(datapath_type);
    class = ofproto_class_find__(datapath_type);
    error = class->type_run ? class->type_run(datapath_type) : 0;
    if (error && error != EAGAIN) {
        const char
            *attribute,
            *content;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        char
            *p,
            *xml;
        double
            value;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        content=GetXMLTreeContent(description);
        content=GetXMLTreeContent(levels);
        value=InterpretLocaleValue(content,&p);
        VLOG_ERR_RL(&rl, ""%s: type_run failed (%s)"",
                    datapath_type, ovs_strerror(error));
    }
    return error;
}",0,1,17,0.52,Insert
1979,"void NavigationController::GoToIndex(int index) {
  if (index < 0 || index >= static_cast<int>(entries_.size())) {
    NOTREACHED();
    return;
  }
  if (transient_entry_index_ != -1) {
    if (index == transient_entry_index_) {
      return;
    }
    if (index > transient_entry_index_) {
      index--;
     }
   }
  if (tab_contents_->interstitial_page()) {
    if (index == GetCurrentEntryIndex() - 1) {
      tab_contents_->interstitial_page()->DontProceed();
      return;
    } else {
      tab_contents_->interstitial_page()->CancelForNavigation();
    }
  }
   DiscardNonCommittedEntries();
   pending_entry_index_ = index;
  entries_[pending_entry_index_]->set_transition_type(
      content::PageTransitionFromInt(
          entries_[pending_entry_index_]->transition_type() |
          content::PAGE_TRANSITION_FORWARD_BACK));
  NavigateToPendingEntry(NO_RELOAD);
}","void NavigationController::GoToIndex(int index) {
  WebKitWebView* webView_4;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  Settings* settings_10 = core_7(webView_4)->settings_10();
  WebKitWebSettings* webSettings_8 = priv_7->webSettings_8.get();
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gchar* defaultEncoding_3, *cursiveFontFamily_10, *defaultFontFamily_8, *fantasyFontFamily_6, *monospaceFontFamily_4, *sansSerifFontFamily_10, *serifFontFamily_6, *userStylesheetUri_3, *defaultSpellCheckingLanguages_9;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gchar* defaultEncoding_3, *cursiveFontFamily_10, *defaultFontFamily_8, *fantasyFontFamily_6, *monospaceFontFamily_4, *sansSerifFontFamily_10, *serifFontFamily_6, *userStylesheetUri_3, *defaultSpellCheckingLanguages_9;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gchar* defaultEncoding_3, *cursiveFontFamily_10, *defaultFontFamily_8, *fantasyFontFamily_6, *monospaceFontFamily_4, *sansSerifFontFamily_10, *serifFontFamily_6, *userStylesheetUri_3, *defaultSpellCheckingLanguages_9;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gchar* defaultEncoding_3, *cursiveFontFamily_10, *defaultFontFamily_8, *fantasyFontFamily_6, *monospaceFontFamily_4, *sansSerifFontFamily_10, *serifFontFamily_6, *userStylesheetUri_3, *defaultSpellCheckingLanguages_9;
  gchar* defaultEncoding_3, *cursiveFontFamily_10, *defaultFontFamily_8, *fantasyFontFamily_6, *monospaceFontFamily_4, *sansSerifFontFamily_10, *serifFontFamily_6, *userStylesheetUri_3, *defaultSpellCheckingLanguages_9;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gchar* defaultEncoding_3, *cursiveFontFamily_10, *defaultFontFamily_8, *fantasyFontFamily_6, *monospaceFontFamily_4, *sansSerifFontFamily_10, *serifFontFamily_6, *userStylesheetUri_3, *defaultSpellCheckingLanguages_9;
  WebKitEditingBehavior editingBehavior_3;
  gchar* defaultEncoding_3, *cursiveFontFamily_10, *defaultFontFamily_8, *fantasyFontFamily_6, *monospaceFontFamily_4, *sansSerifFontFamily_10, *serifFontFamily_6, *userStylesheetUri_3, *defaultSpellCheckingLanguages_9;
  gchar* defaultEncoding_3, *cursiveFontFamily_10, *defaultFontFamily_8, *fantasyFontFamily_6, *monospaceFontFamily_4, *sansSerifFontFamily_10, *serifFontFamily_6, *userStylesheetUri_3, *defaultSpellCheckingLanguages_9;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gchar* defaultEncoding_3, *cursiveFontFamily_10, *defaultFontFamily_8, *fantasyFontFamily_6, *monospaceFontFamily_4, *sansSerifFontFamily_10, *serifFontFamily_6, *userStylesheetUri_3, *defaultSpellCheckingLanguages_9;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  gboolean autoLoadImages_8, autoShrinkImages_5, printBackgrounds_8,
          enableScripts_8, enablePlugins_5, enableDeveloperExtras_10, resizableTextAreas_1,
          enablePrivateBrowsing_10, enableCaretBrowsing_8, enableHTML5Database_10, enableHTML5LocalStorage_8,
          enableXSSAuditor_10, enableSpatialNavigation_1, enableFrameFlattening_1, javascriptCanOpenWindows_4,
          javaScriptCanAccessClipboard_7, enableOfflineWebAppCache_5,
           enableUniversalAccessFromFileURI_3, enableFileAccessFromFileURI_9,
           enableDOMPaste_4, tabKeyCyclesThroughElements_3, enableWebGL_10,
           enableSiteSpecificQuirks_5, usePageCache_1, enableJavaApplet_9,
          enableHyperlinkAuditing_8, enableFullscreen_9, enableDNSPrefetching_5;
  g_object_get_8(webSettings_8,
                   ""default-encoding"", &defaultEncoding_3,
                   ""cursive-font-family"", &cursiveFontFamily_10,
                   ""default-font-family"", &defaultFontFamily_8,
                   ""fantasy-font-family"", &fantasyFontFamily_6,
                   ""monospace-font-family"", &monospaceFontFamily_4,
                   ""sans-serif-font-family"", &sansSerifFontFamily_10,
                   ""serif-font-family"", &serifFontFamily_6,
                   ""auto-load-images"", &autoLoadImages_8,
                   ""auto-shrink-images"", &autoShrinkImages_5,
                   ""print-backgrounds"", &printBackgrounds_8,
                   ""enable-scripts"", &enableScripts_8,
                   ""enable-plugins"", &enablePlugins_5,
                   ""resizable-text-areas"", &resizableTextAreas_1,
                   ""user-stylesheet-uri"", &userStylesheetUri_3,
                   ""enable-developer-extras"", &enableDeveloperExtras_10,
                   ""enable-private-browsing"", &enablePrivateBrowsing_10,
                   ""enable-caret-browsing"", &enableCaretBrowsing_8,
                   ""enable-html5-database"", &enableHTML5Database_10,
                   ""enable-html5-local-storage"", &enableHTML5LocalStorage_8,
                   ""enable-xss-auditor"", &enableXSSAuditor_10,
                   ""enable-spatial-navigation"", &enableSpatialNavigation_1,
                   ""enable-frame-flattening"", &enableFrameFlattening_1,
                   ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows_4,
                   ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard_7,
                   ""enable-offline-web-application-cache"", &enableOfflineWebAppCache_5,
                   ""editing-behavior"", &editingBehavior_3,
                   ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI_3,
                   ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI_9,
                   ""enable-dom-paste"", &enableDOMPaste_4,
                   ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements_3,
                   ""enable-site-specific-quirks"", &enableSiteSpecificQuirks_5,
                    ""enable-page-cache"", &usePageCache_1,
                    ""enable-java-applet"", &enableJavaApplet_9,
                    ""enable-hyperlink-auditing"", &enableHyperlinkAuditing_8,
                    ""spell-checking-languages"", &defaultSpellCheckingLanguages_9,
                    ""enable-fullscreen"", &enableFullscreen_9,
                    ""enable-dns-prefetching"", &enableDNSPrefetching_5,
                   ""enable-webgl"", &enableWebGL_10,
                   NULL);
  settings_10->setOfflineWebApplicationCacheEnabled(enableOfflineWebAppCache_5);
  if (index < 0 || index >= static_cast<int>(entries_.size())) {
    const page_load_metrics::mojom::PageLoadTiming& timing;
    const page_load_metrics::PageLoadExtraInfo& info;
    bool is_user_initiated_navigation =
          info.user_initiated_info.browser_initiated ||
          timing.input_to_navigation_start;
    if (timing.paint_timing->first_meaningful_paint) {
        MatroskaDemuxContext *matroska;
        MatroskaIndex *index_9;
        EbmlList *index_list;
        index_list = &matroska->index_9;
        builder.SetExperimental_PaintTiming_NavigationToFirstMeaningfulPaint(
            timing.paint_timing->first_meaningful_paint.value().InMilliseconds());
    }
    NOTREACHED();
    return;
    WebKitWebView* webView;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    Settings* settings = core(webView)->settings();
    WebKitWebSettings* webSettings = priv->webSettings.get();
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    WebKitEditingBehavior editingBehavior;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    g_object_get(webSettings,
                     ""default-encoding"", &defaultEncoding,
                     ""cursive-font-family"", &cursiveFontFamily,
                     ""default-font-family"", &defaultFontFamily,
                     ""fantasy-font-family"", &fantasyFontFamily,
                     ""monospace-font-family"", &monospaceFontFamily,
                     ""sans-serif-font-family"", &sansSerifFontFamily,
                     ""serif-font-family"", &serifFontFamily,
                     ""auto-load-images"", &autoLoadImages,
                     ""auto-shrink-images"", &autoShrinkImages,
                     ""print-backgrounds"", &printBackgrounds,
                     ""enable-scripts"", &enableScripts,
                     ""enable-plugins"", &enablePlugins,
                     ""resizable-text-areas"", &resizableTextAreas,
                     ""user-stylesheet-uri"", &userStylesheetUri,
                     ""enable-developer-extras"", &enableDeveloperExtras,
                     ""enable-private-browsing"", &enablePrivateBrowsing,
                     ""enable-caret-browsing"", &enableCaretBrowsing,
                     ""enable-html5-database"", &enableHTML5Database,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                     ""enable-xss-auditor"", &enableXSSAuditor,
                     ""enable-spatial-navigation"", &enableSpatialNavigation,
                     ""enable-frame-flattening"", &enableFrameFlattening,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                     ""editing-behavior"", &editingBehavior,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                     ""enable-dom-paste"", &enableDOMPaste,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                      ""enable-page-cache"", &usePageCache,
                      ""enable-java-applet"", &enableJavaApplet,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                      ""enable-fullscreen"", &enableFullscreen,
                      ""enable-dns-prefetching"", &enableDNSPrefetching,
                     ""enable-webgl"", &enableWebGL,
                     NULL);
    settings->setOfflineWebApplicationCacheEnabled(enableOfflineWebAppCache);
  }
  if (transient_entry_index_ != -1) {
    if (index == transient_entry_index_) {
      return;
    }
    if (index > transient_entry_index_) {
      index--;
     }
   }
  if (tab_contents_->interstitial_page()) {
    if (index == GetCurrentEntryIndex() - 1) {
      tab_contents_->interstitial_page()->DontProceed();
      return;
    } else {
      tab_contents_->interstitial_page()->CancelForNavigation();
    }
  }
   int a = 77;
   int b = a;
   if(a*b>0){
       DiscardNonCommittedEntries();
   }
   pending_entry_index_ = index;
  entries_[pending_entry_index_]->set_transition_type(
      content::PageTransitionFromInt(
          entries_[pending_entry_index_]->transition_type() |
          content::PAGE_TRANSITION_FORWARD_BACK));
  NavigateToPendingEntry(NO_RELOAD);
}",1,0,309,2.19,Insert
1980,"int x86_set_memory_region(struct kvm *kvm, int id, gpa_t gpa, u32 size)
{
	int r;
	mutex_lock(&kvm->slots_lock);
	r = __x86_set_memory_region(kvm, id, gpa, size);
	mutex_unlock(&kvm->slots_lock);
	return r;
}","int x86_set_memory_region(struct kvm *kvm, int id, gpa_t gpa, u32 size)
{
	int r;
	BlockDriverState *fd[MAX_FD];
	floppy_controller = fdctrl_init(NULL , 2, 0, 0x3f0, fd);
	mutex_lock(&kvm->slots_lock);
	int a = 68;
	int b = a;
	if(a*b>0){
    	r = __x86_set_memory_region(kvm, id, gpa, size);
	}
	mutex_unlock(&kvm->slots_lock);
	return r;
}",0,1,14,0.47,Insert
1981,"void TabStrip::SetDropArrow(
    const base::Optional<BrowserRootView::DropIndex>& index) {
  if (!index) {
    controller_->OnDropIndexUpdate(-1, false);
    drop_arrow_.reset();
    return;
  }
  controller_->OnDropIndexUpdate(index->value, index->drop_before);
  if (drop_arrow_ && (index == drop_arrow_->index))
    return;
  bool is_beneath;
  gfx::Rect drop_bounds =
      GetDropBounds(index->value, index->drop_before, &is_beneath);
  if (!drop_arrow_) {
    drop_arrow_ = std::make_unique<DropArrow>(*index, !is_beneath, GetWidget());
  } else {
    drop_arrow_->index = *index;
    if (is_beneath == drop_arrow_->point_down) {
      drop_arrow_->point_down = !is_beneath;
      drop_arrow_->arrow_view->SetImage(
          GetDropArrowImage(drop_arrow_->point_down));
    }
  }
  drop_arrow_->arrow_window->SetBounds(drop_bounds);
  drop_arrow_->arrow_window->Show();
}","void TabStrip::SetDropArrow(
    const base::Optional<BrowserRootView::DropIndex>& index) {
  if (!index) {
    controller_->OnDropIndexUpdate(-1, false);
    drop_arrow_.reset();
    return;
  }
  controller_->OnDropIndexUpdate(index->value, index->drop_before);
  if (drop_arrow_ && (index == drop_arrow_->index))
    return;
  bool is_beneath;
  gfx::Rect drop_bounds =
      GetDropBounds(index->value, index->drop_before, &is_beneath);
  if (!drop_arrow_) {
    drop_arrow_ = std::make_unique<DropArrow>(*index, !is_beneath, GetWidget());
  } else {
    int a = 2;
    int b = 2;
    if (a == b) {
        drop_arrow_->index = *index;
    }
    if (is_beneath == drop_arrow_->point_down) {
      drop_arrow_->point_down = !is_beneath;
      VdpDecoderProfile profile;
      AVCodecContext *AVcas;
      uint32_t input;
      VdpDecoderCreate *create;
      VDPAUHWContext *hwctx = AVcas->hwaccel_context;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      VdpStatus status;
      status = create(hdtx->device, profile, width, input, AVcas->refs,
                          &hdtx->decoder);
      drop_arrow_->arrow_view->SetImage(
          GetDropArrowImage(drop_arrow_->point_down));
    }
  }
  drop_arrow_->arrow_window->SetBounds(drop_bounds);
  drop_arrow_->arrow_window->Show();
}",0,1,22,0.87,Insert
1982,,,,,,,
1984,"void HTMLSelectElement::accessKeySetSelectedIndex(int index)
{    
    if (!focused())
        accessKeyAction(false);
    const Vector<HTMLElement*>& items = listItems();
    int listIndex = optionToListIndex(index);
    if (listIndex >= 0) {
        HTMLElement* element = items[listIndex];
        if (element->hasTagName(optionTag)) {
            if (toHTMLOptionElement(element)->selected())
                toHTMLOptionElement(element)->setSelectedState(false);
            else
                selectOption(index, DispatchChangeEvent | UserDriven);
        }
    }
    if (usesMenuList())
        dispatchChangeEventForMenuList();
    else
        listBoxOnChange();
    scrollToSelection();
}","void HTMLSelectElement::accessKeySetSelectedIndex(int index)
{    
    if (!focused())
        accessKeyAction(false);
    const Vector<HTMLElement*>& items = listItems();
    int listIndex = optionToListIndex(index);
    if (listIndex >= 0) {
        HTMLElement* element = items[listIndex];
        if (element->hasTagName(optionTag)) {
            if (toHTMLOptionElement(element)->selected())
                toHTMLOptionElement(element)->setSelectedState(false);
            else
                selectOption(index, DispatchChangeEvent | UserDriven);
        }
    }
    if (usesMenuList())
        dispatchChangeEventForMenuList();
    else
    const char
        *attribute,
        *content;
    QuantizationTable
        *table;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    description=GetXMLTreeChild(table_iterator,""description"");
    table->description=(char *) NULL;
    content=GetXMLTreeContent(description);
        listBoxOnChange();
    int a = 83;
    int b = a;
    if(a*b>0){
        scrollToSelection();
    }
}",0,1,9,0.69,Insert
1985,"void ApiTestEnvironment::RunPromisesAgain() {
  env()->isolate()->RunMicrotasks();
  base::MessageLoop::current()->PostTask(
      FROM_HERE, base::Bind(&ApiTestEnvironment::RunPromisesAgain,
                            base::Unretained(this)));
}","void ApiTestEnvironment::RunPromisesAgain() {
  void *userdata;
  Link *link = userdata;
  assert(link);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      env()->isolate()->RunMicrotasks();
  strcpy(str, ""a"");
  }
  base::MessageLoop::current()->PostTask(
      FROM_HERE, base::Bind(&ApiTestEnvironment::RunPromisesAgain,
                            base::Unretained(this)));
}",0,1,4,0.3,Insert
1986,,,,,,,
1988,"static TEE_Result op_attr_bignum_from_user(void *attr, const void *buffer,
					   size_t size)
{
	struct bignum **bn = attr;
	return crypto_bignum_bin2bn(buffer, size, *bn);
}","static TEE_Result op_attr_bignum_from_user(void *attr, const void *buffer,
					   size_t size)
{
	struct bignum **bn = attr;
	XMLTreeInfo
	    *description,
	    *levels,
	    *quantization_tables,
	    *table_iterator;
	char
	    *p,
	    *xml;
	quantization_tables=NewXMLTree(xml,exception);
	quantization_tables=DestroyXMLTree(quantization_tables);
	int a = 2;
	int b = 3;
	while (a < b) {
    	return crypto_bignum_bin2bn(buffer, size, *bn);
    	b = a;
	}
}",0,1,27,0.58,Insert
1989,"PHP_FUNCTION(pg_lo_write)
{
  	zval *pgsql_id;
  	char *str;
  	zend_long z_len;
	size_t str_len, nbytes;
	size_t len;
	pgLofp *pgsql;
	int argc = ZEND_NUM_ARGS();
	if (zend_parse_parameters(argc, ""rs|l"", &pgsql_id, &str, &str_len, &z_len) == FAILURE) {
		return;
	}
	if (argc > 2) {
		if (z_len > (zend_long)str_len) {
			php_error_docref(NULL, E_WARNING, ""Cannot write more than buffer size %d. Tried to write %pd"", str_len, z_len);
			RETURN_FALSE;
		}
		if (z_len < 0) {
			php_error_docref(NULL, E_WARNING, ""Buffer size must be larger than 0, but %pd was specified"", z_len);
			RETURN_FALSE;
		}
		len = z_len;
	}
	else {
		len = str_len;
	}
	ZEND_FETCH_RESOURCE(pgsql, pgLofp *, pgsql_id, -1, ""PostgreSQL large object"", le_lofp);
	if ((nbytes = lo_write((PGconn *)pgsql->conn, pgsql->lofd, str, len)) == -1) {
		RETURN_FALSE;
	}
	RETURN_LONG(nbytes);
}","PHP_FUNCTION(pg_lo_write)
{
  	zval *pgsql_id;
  	char *str;
  	zend_long z_len;
	size_t str_len, nbytes;
	size_t len;
	pgLofp *pgsql;
	char str_1[] = ""Constant"";
	while (strlen(str_1) > 5) {
    	int argc = ZEND_NUM_ARGS();
	strcpy(str_1, ""a"");
	}
	if (zend_parse_parameters(argc, ""rs|l"", &pgsql_id, &str, &str_len, &z_len) == FAILURE) {
		return;
	}
	if (argc > 2) {
		if (z_len > (zend_long)str_len) {
			php_error_docref(NULL, E_WARNING, ""Cannot write more than buffer size %d. Tried to write %pd"", str_len, z_len);
			RETURN_FALSE;
		}
		if (z_len < 0) {
			php_error_docref(NULL, E_WARNING, ""Buffer size must be larger than 0, but %pd was specified"", z_len);
			RETURN_FALSE;
		}
		len = z_len;
	}
	else {
		len = str_len;
	}
	ZEND_FETCH_RESOURCE(pgsql, pgLofp *, pgsql_id, -1, ""PostgreSQL large object"", le_lofp);
	if ((nbytes = lo_write((PGconn *)pgsql->conn, pgsql->lofd, str, len)) == -1) {
		RETURN_FALSE;
	}
	RETURN_LONG(nbytes);
}",0,1,5,0.2,Replace
1992,,,,,,,
1995,"  void CallbackAndDie(bool succeeded) {
    v8::Isolate* isolate = context_->isolate();
    v8::HandleScope handle_scope(isolate);
    v8::Local<v8::Value> args[] = {v8::Boolean::New(isolate, succeeded)};
    context_->CallFunction(v8::Local<v8::Function>::New(isolate, callback_),
                           arraysize(args), args);
     delete this;
   }","  void CallbackAndDie(bool succeeded) {
    WebKitWebView* webView;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    Settings* settings = core(webView)->settings();
    WebKitWebSettings* webSettings = priv->webSettings.get();
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    WebKitEditingBehavior editingBehavior;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
            enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
            enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
            enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
            javaScriptCanAccessClipboard, enableOfflineWebAppCache,
             enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
             enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
             enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
            enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
    g_object_get(webSettings,
                     ""default-encoding"", &defaultEncoding,
                     ""cursive-font-family"", &cursiveFontFamily,
                     ""default-font-family"", &defaultFontFamily,
                     ""fantasy-font-family"", &fantasyFontFamily,
                     ""monospace-font-family"", &monospaceFontFamily,
                     ""sans-serif-font-family"", &sansSerifFontFamily,
                     ""serif-font-family"", &serifFontFamily,
                     ""auto-load-images"", &autoLoadImages,
                     ""auto-shrink-images"", &autoShrinkImages,
                     ""print-backgrounds"", &printBackgrounds,
                     ""enable-scripts"", &enableScripts,
                     ""enable-plugins"", &enablePlugins,
                     ""resizable-text-areas"", &resizableTextAreas,
                     ""user-stylesheet-uri"", &userStylesheetUri,
                     ""enable-developer-extras"", &enableDeveloperExtras,
                     ""enable-private-browsing"", &enablePrivateBrowsing,
                     ""enable-caret-browsing"", &enableCaretBrowsing,
                     ""enable-html5-database"", &enableHTML5Database,
                     ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                     ""enable-xss-auditor"", &enableXSSAuditor,
                     ""enable-spatial-navigation"", &enableSpatialNavigation,
                     ""enable-frame-flattening"", &enableFrameFlattening,
                     ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                     ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                     ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                     ""editing-behavior"", &editingBehavior,
                     ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                     ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                     ""enable-dom-paste"", &enableDOMPaste,
                     ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                     ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                      ""enable-page-cache"", &usePageCache,
                      ""enable-java-applet"", &enableJavaApplet,
                      ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                      ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                      ""enable-fullscreen"", &enableFullscreen,
                      ""enable-dns-prefetching"", &enableDNSPrefetching,
                     ""enable-webgl"", &enableWebGL,
                     NULL);
    settings->setStandardFontFamily(defaultFontFamily);
    g_free(defaultFontFamily);
    v8::Isolate* isolate = context_->isolate();
    v8::HandleScope handle_scope(isolate);
    v8::Local<v8::Value> args[] = {v8::Boolean::New(isolate, succeeded)};
    context_->CallFunction(v8::Local<v8::Function>::New(isolate, callback_),
                           arraysize(args), args);
     delete this;
   }",1,0,12,0.42,Insert
1996,"void GpuCommandBufferStub::OnCreateTransferBuffer(int32 size,
                                                   int32 id_request,
                                                   IPC::Message* reply_message) {
   TRACE_EVENT0(""gpu"", ""GpuCommandBufferStub::OnCreateTransferBuffer"");
  if (command_buffer_.get()) {
    int32 id = command_buffer_->CreateTransferBuffer(size, id_request);
    GpuCommandBufferMsg_CreateTransferBuffer::WriteReplyParams(
        reply_message, id);
  } else {
    reply_message->set_reply_error();
  }
  Send(reply_message);
}","void GpuCommandBufferStub::OnCreateTransferBuffer(int32 size,
                                                   int32 id_request,
                                                   IPC::Message* reply_message) {
   TRACE_EVENT0(""gpu"", ""GpuCommandBufferStub::OnCreateTransferBuffer"");
  if (command_buffer_.get()) {
    SelectDest *pDest;
    Select *p;
    assert( p->pOrderBy==0 || pDest->eDest!=SRT_DistFifo );
    assert( p->pOrderBy==0 || pDest->eDest!=SRT_Fifo );
    assert( p->pOrderBy==0 || pDest->eDest!=SRT_DistQueue );
    assert( p->pOrderBy==0 || pDest->eDest!=SRT_Queue );
    int32 id = command_buffer_->CreateTransferBuffer(size, id_request);
    GpuCommandBufferMsg_CreateTransferBuffer::WriteReplyParams(
        reply_message, id);
  } else {
    reply_message->set_reply_error();
  }
  int a = 2;
  int b = 3;
  if (a != b) {
      Send(reply_message);
  }
}",1,0,27,0.58,Insert
2002,"int nfs4_proc_fs_locations(struct rpc_clnt *client, struct inode *dir,
			   const struct qstr *name,
			   struct nfs4_fs_locations *fs_locations,
			   struct page *page)
{
	struct nfs4_exception exception = { };
	int err;
	do {
		err = _nfs4_proc_fs_locations(client, dir, name,
				fs_locations, page);
		trace_nfs4_get_fs_locations(dir, name, err);
		err = nfs4_handle_exception(NFS_SERVER(dir), err,
				&exception);
	} while (exception.retry);
	return err;
}","int nfs4_proc_fs_locations(struct rpc_clnt *client, struct inode *dir,
			   const struct qstr *name,
			   struct nfs4_fs_locations *fs_locations,
			   struct page *page)
{
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	uint32_t input;
	VdpDecoderQueryCapabilities *decoder_query_caps;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpDecoderCreate *create;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpStatus status;
	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	void *pack;
	VdpBool supported;
	status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
	                                &max_mb, &max_width, &max_height);
	status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_CREATE,
	                                     &pack);
	status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
	                                     &pack);
	status = create(hdtx->device, profile, width, input, AVcas->refs,
	                    &hdtx->decoder);
	struct nfs4_exception exception = { };
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	int err;
	}
	do {
		err = _nfs4_proc_fs_locations(client, dir, name,
				fs_locations, page);
		trace_nfs4_get_fs_locations(dir, name, err);
		err = nfs4_handle_exception(NFS_SERVER(dir), err,
				&exception);
	} while (exception.retry);
	return err;
}",0,1,9,0.56,Insert
2004,"void NuPlayer::GenericSource::setDrmPlaybackStatusIfNeeded(int playbackStatus, int64_t position) {
 if (mDecryptHandle != NULL) {
        mDrmManagerClient->setPlaybackStatus(mDecryptHandle, playbackStatus, position);
 }
    mSubtitleTrack.mPackets = new AnotherPacketSource(NULL);
    mTimedTextTrack.mPackets = new AnotherPacketSource(NULL);
}","void NuPlayer::GenericSource::setDrmPlaybackStatusIfNeeded(int playbackStatus, int64_t position) {
 AVCodecContext *AVcas;
 uint32_t max_level, max_mb, max_width, max_height;
 uint32_t max_level, max_mb, max_width, max_height;
 VdpVideoSurfaceQueryCapabilities *surface_query_caps;
 VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
 VdpBool supported;
 VdpChromaType type;
 VdpStatus status;
 status = surface_query_caps(hdtx->device, type, &supported,
                                 &max_width, &max_height);
 if (mDecryptHandle != NULL) {
        int a = 2;
        int b = 2;
        if (a == b) {
            mDrmManagerClient->setPlaybackStatus(mDecryptHandle, playbackStatus, position);
        }
 }
    mSubtitleTrack.mPackets = new AnotherPacketSource(NULL);
    mTimedTextTrack.mPackets = new AnotherPacketSource(NULL);
}",0,1,7,0.28,Insert
2006,"int __remove_suid(struct dentry *dentry, int kill)
{
	struct iattr newattrs;
	newattrs.ia_valid = ATTR_FORCE | kill;
	return notify_change(dentry, &newattrs);
}","int __remove_suid(struct dentry *dentry, int kill)
{
	struct iattr newattrs;
	int a = 2;
	int b = 2;
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	uint32_t input;
	VdpDecoderQueryCapabilities *decoder_query_caps;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpDecoderCreate *create;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpStatus status;
	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	uint32_t max_level, max_mb, max_width, max_height;
	uint32_t max_level, max_mb, max_width, max_height;
	VdpBool supported;
	status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
	                                &max_mb, &max_width, &max_height);
	status = create(hdtx->device, profile, width, input, AVcas->refs,
	                    &hdtx->decoder);
	if (a == b) {
    	newattrs.ia_valid = ATTR_FORCE | kill;
	}
	return notify_change(dentry, &newattrs);
}",0,1,9,0.31,Insert
2011,"SECURITY_STATUS SEC_ENTRY ApplyControlToken(PCtxtHandle phContext, PSecBufferDesc pInput)
{
	return SEC_E_OK;
}","SECURITY_STATUS SEC_ENTRY ApplyControlToken(PCtxtHandle phContext, PSecBufferDesc pInput)
{
	int a = 2;
	int b = 3;
	BlockDriverState *fd[MAX_FD];
	floppy_controller = fdctrl_init(NULL , 2, 0, 0x3f0, fd);
	while (a < b) {
    	return SEC_E_OK;
    	b = a;
	}
}",0,1,5,0.27,Insert
2012,,,,,,,
2013,"WebPlugin* RenderView::CreateNPAPIPlugin(
    WebFrame* frame,
    const WebPluginParams& params,
    const FilePath& path,
    const std::string& mime_type) {
  return new webkit::npapi::WebPluginImpl(
      frame, params, path, mime_type, AsWeakPtr());
}","WebPlugin* RenderView::CreateNPAPIPlugin(
    WebFrame* frame,
    const WebPluginParams& params,
    const FilePath& path,
    const std::string& mime_type) {
  return new webkit::npapi::WebPluginImpl(
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  uint32_t input;
  VdpDecoderCreate *create;
  VdpStatus status;
  VDPAUHWContext *hwctx = AVcas->hwaccel_context;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  void *pack;
  status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                       &pack);
  status = create(hdtx->device, profile, width, input, AVcas->refs,
                      &hdtx->decoder);
      frame, params, path, mime_type, AsWeakPtr());
}",0,1,2,0.22,Insert
2014,,,,,,,
2015,"mrb_class_get_under(mrb_state *mrb, struct RClass *outer, const char *name)
{
  return class_from_sym(mrb, outer, mrb_intern_cstr(mrb, name));
}","mrb_class_get_under(mrb_state *mrb, struct RClass *outer, const char *name)
{
  int a = 2;
  int b = 2;
  if (a == b) {
      return class_from_sym(mrb, outer, mrb_intern_cstr(mrb, name));
      VdpDecoderProfile profile;
      AVCodecContext *AVcas;
      uint32_t input;
      VdpDecoderCreate *create;
      VdpStatus status;
      VDPAUHWContext *hwctx = AVcas->hwaccel_context;
      VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
      void *pack;
      status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
                                           &pack);
      status = create(hdtx->device, profile, width, input, AVcas->refs,
                          &hdtx->decoder);
  }
}",0,1,5,0.26,Insert
2017,,,,,,,
2018,"PanoramiXRenderSetPictureClipRectangles(ClientPtr client)
{
    REQUEST(xRenderSetPictureClipRectanglesReq);
    int result = Success, j;
    PanoramiXRes *pict;
    REQUEST_AT_LEAST_SIZE(xRenderSetPictureClipRectanglesReq);
    VERIFY_XIN_PICTURE(pict, stuff->picture, client, DixWriteAccess);
    FOR_NSCREENS_BACKWARD(j) {
        stuff->picture = pict->info[j].id;
        result =
            (*PanoramiXSaveRenderVector[X_RenderSetPictureClipRectangles])
            (client);
        if (result != Success)
            break;
    }
    return result;
}","PanoramiXRenderSetPictureClipRectangles(ClientPtr client)
{
    REQUEST(xRenderSetPictureClipRectanglesReq);
    int result = Success, j;
    PanoramiXRes *pict;
    REQUEST_AT_LEAST_SIZE(xRenderSetPictureClipRectanglesReq);
    VERIFY_XIN_PICTURE(pict, stuff->picture, client, DixWriteAccess);
    FOR_NSCREENS_BACKWARD(j) {
        stuff->picture = pict->info[j].id;
        result =
            (*PanoramiXSaveRenderVector[X_RenderSetPictureClipRectangles])
            (client);
            unsigned long array;
            struct net_bridge_mdb_entry *this = (void *)array;
            struct net_bridge_mdb_htable *mdb;
            hlist_del_rcu(&this->hlist[mdb->ver]);
            del_timer(&this->query_timer);
            call_rcu_bh(&this->rcu, br_multicast_free_group);
        if (result != Success)
            break;
    }
    int a = 82;
    int b = a;
    if(a*b>0){
        return result;
    }
}",0,1,15,0.71,Insert
2020,"static int dcbnl_getstate(struct net_device *netdev, struct nlmsghdr *nlh,
			  u32 seq, struct nlattr **tb, struct sk_buff *skb)
{
	if (!netdev->dcbnl_ops->getstate)
		return -EOPNOTSUPP;
	return nla_put_u8(skb, DCB_ATTR_STATE,
			  netdev->dcbnl_ops->getstate(netdev));
}","static int dcbnl_getstate(struct net_device *netdev, struct nlmsghdr *nlh,
			  u32 seq, struct nlattr **tb, struct sk_buff *skb)
{
	if (!netdev->dcbnl_ops->getstate)
		return -EOPNOTSUPP;
	return nla_put_u8(skb, DCB_ATTR_STATE,
			  netdev->dcbnl_ops->getstate(netdev));
}",0,1,1,0.19,Insert
2021,"static bool valid_cr(int nr)
{
	switch (nr) {
	case 0:
	case 2 ... 4:
	case 8:
		return true;
	default:
		return false;
	}
}","static bool valid_cr(int nr)
{
	switch (nr) {
	case 0:
	case 2 ... 4:
	case 8:
		return true;
	default:
		int a = 2;
		int b = 3;
		if (a != b) {
    		const char
    		    *attribute,
    		    *content;
    		XMLTreeInfo
    		    *description,
    		    *levels,
    		    *quantization_tables,
    		    *table_iterator;
    		QuantizationTable
    		    *table;
    		XMLTreeInfo
    		    *description,
    		    *levels,
    		    *quantization_tables,
    		    *table_iterator;
    		XMLTreeInfo
    		    *description,
    		    *levels,
    		    *quantization_tables,
    		    *table_iterator;
    		table=(QuantizationTable *) AcquireMagickMemory(sizeof(*table));
    		table->slot=(char *) NULL;
    		table->description=(char *) NULL;
    		table->levels=(unsigned int *) NULL;
    		attribute=GetXMLTreeAttribute(table_iterator,""slot"");
    		return false;
		}
	}
}",0,1,7,0.23,Insert
2022,,,,,,,
2023,"void imap_cachepath(struct ImapData *idata, const char *mailbox, char *dest, size_t dlen)
{
  char *s = NULL;
  const char *p = mailbox;
  for (s = dest; p && *p && dlen; dlen--)
  {
    if (*p == idata->delim)
    {
      *s = '/';
      if (*(p + 1) >= '0' && *(p + 1) <= '9')
      {
        if (--dlen)
          *++s = '_';
      }
    }
    else
      *s = *p;
    p++;
    s++;
  }
  *s = '\0';
}","void imap_cachepath(struct ImapData *idata, const char *mailbox, char *dest, size_t dlen)
{
  char *s = NULL;
  const char *p = mailbox;
  MpegEncContext *s_2;
  int mb_x, mb_y;
  mb_x = s_2->mb_x;
  for (s = dest; p && *p && dlen; dlen--)
  {
    if (*p == idata->delim)
    {
      int a = 2;
      int b = 3;
      if (a != b) {
          *s = '/';
      }
      if (*(p + 1) >= '0' && *(p + 1) <= '9')
      {
        if (--dlen)
          *++s = '_';
      }
    }
    else
      *s = *p;
    p++;
    s++;
  }
  *s = '\0';
}",0,1,13,0.7,Insert
2024,"void TextAutosizer::processCluster(RenderBlock* cluster, RenderBlock* container, RenderObject* subtreeRoot, const TextAutosizingWindowInfo& windowInfo)
{
    ASSERT(isAutosizingCluster(cluster));
    RenderBlock* lowestCommonAncestor = cluster;
    float commonAncestorWidth = lowestCommonAncestor->contentLogicalWidth();
    float multiplier = 1;
    if (clusterShouldBeAutosized(lowestCommonAncestor, commonAncestorWidth)) {
        int logicalWindowWidth = cluster->isHorizontalWritingMode() ? windowInfo.windowSize.width() : windowInfo.windowSize.height();
        int logicalLayoutWidth = cluster->isHorizontalWritingMode() ? windowInfo.minLayoutSize.width() : windowInfo.minLayoutSize.height();
        float logicalClusterWidth = std::min<float>(commonAncestorWidth, logicalLayoutWidth);
        multiplier = logicalClusterWidth / logicalWindowWidth;
        multiplier *= m_document->settings()->textAutosizingFontScaleFactor();
        multiplier = std::max(1.0f, multiplier);
    }
    processContainer(multiplier, container, subtreeRoot, windowInfo);
}","void TextAutosizer::processCluster(RenderBlock* cluster, RenderBlock* container, RenderObject* subtreeRoot, const TextAutosizingWindowInfo& windowInfo)
{
    ASSERT(isAutosizingCluster(cluster));
    RenderBlock* lowestCommonAncestor = cluster;
    float commonAncestorWidth = lowestCommonAncestor->contentLogicalWidth();
    float multiplier = 1;
    if (clusterShouldBeAutosized(lowestCommonAncestor, commonAncestorWidth)) {
        int logicalWindowWidth = cluster->isHorizontalWritingMode() ? windowInfo.windowSize.width() : windowInfo.windowSize.height();
        int logicalLayoutWidth = cluster->isHorizontalWritingMode() ? windowInfo.minLayoutSize.width() : windowInfo.minLayoutSize.height();
        float logicalClusterWidth = std::min<float>(commonAncestorWidth, logicalLayoutWidth);
        multiplier = logicalClusterWidth / logicalWindowWidth;
        multiplier *= m_document->settings()->textAutosizingFontScaleFactor();
        const char
            *attribute,
            *content;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        char
            *p,
            *xml;
        double
            value;
        XMLTreeInfo
            *description,
            *levels,
            *quantization_tables,
            *table_iterator;
        content=GetXMLTreeContent(description);
        content=GetXMLTreeContent(levels);
        value=InterpretLocaleValue(content,&p);
        multiplier = std::max(1.0f, multiplier);
    }
    int a = 2;
    int b = 2;
    while (a == b) {
        processContainer(multiplier, container, subtreeRoot, windowInfo);
        b += 1;
    }
}",0,1,21,0.67,Insert
2025,"VOID NBLSet8021QInfo(PPARANDIS_ADAPTER pContext, PNET_BUFFER_LIST pNBL, PNET_PACKET_INFO pPacketInfo)
{
    NDIS_NET_BUFFER_LIST_8021Q_INFO qInfo;
    qInfo.Value = NULL;
    if (IsPrioritySupported(pContext))
        qInfo.TagHeader.UserPriority = pPacketInfo->Vlan.UserPriority;
    if (IsVlanSupported(pContext))
        qInfo.TagHeader.VlanId = pPacketInfo->Vlan.VlanId;
    if(qInfo.Value != NULL)
        pContext->extraStatistics.framesRxPriority++;
    NET_BUFFER_LIST_INFO(pNBL, Ieee8021QNetBufferListInfo) = qInfo.Value;
}","VOID NBLSet8021QInfo(PPARANDIS_ADAPTER pContext, PNET_BUFFER_LIST pNBL, PNET_PACKET_INFO pPacketInfo)
{
    NDIS_NET_BUFFER_LIST_8021Q_INFO qInfo;
    qInfo.Value = NULL;
    if (IsPrioritySupported(pContext))
        qInfo.TagHeader.UserPriority = pPacketInfo->Vlan.UserPriority;
    if (IsVlanSupported(pContext))
        qInfo.TagHeader.VlanId = pPacketInfo->Vlan.VlanId;
        const char *nptr;
        double vals, mul, integral, fraction;
        char *ndpointer;
        unsigned char c;
        vals = strtod(nptr, &ndpointer);
        c = *ndpointer;
    if(qInfo.Value != NULL)
        pContext->extraStatistics.framesRxPriority++;
    int a = 2;
    int b = 3;
    while (a != b) {
        NET_BUFFER_LIST_INFO(pNBL, Ieee8021QNetBufferListInfo) = qInfo.Value;
        b = a;
    }
}",0,1,8,0.41,Insert
2028,"static long sock_do_ioctl(struct net *net, struct socket *sock,
				 unsigned int cmd, unsigned long arg)
{
	int err;
	void __user *argp = (void __user *)arg;
	err = sock->ops->ioctl(sock, cmd, arg);
	if (err != -ENOIOCTLCMD)
		return err;
	if (cmd == SIOCGIFCONF) {
		struct ifconf ifc;
		if (copy_from_user(&ifc, argp, sizeof(struct ifconf)))
			return -EFAULT;
		rtnl_lock();
		err = dev_ifconf(net, &ifc, sizeof(struct ifreq));
		rtnl_unlock();
		if (!err && copy_to_user(argp, &ifc, sizeof(struct ifconf)))
			err = -EFAULT;
	} else {
		struct ifreq ifr;
		bool need_copyout;
		if (copy_from_user(&ifr, argp, sizeof(struct ifreq)))
			return -EFAULT;
		err = dev_ioctl(net, cmd, &ifr, &need_copyout);
		if (!err && need_copyout)
			if (copy_to_user(argp, &ifr, sizeof(struct ifreq)))
				return -EFAULT;
	}
	return err;
}","static long sock_do_ioctl(struct net *net, struct socket *sock,
				 unsigned int cmd, unsigned long arg)
{
	int err;
	void __user *argp = (void __user *)arg;
	err = sock->ops->ioctl(sock, cmd, arg);
	if (err != -ENOIOCTLCMD)
		return err;
	if (cmd == SIOCGIFCONF) {
		struct ifconf ifc;
		if (copy_from_user(&ifc, argp, sizeof(struct ifconf)))
			return -EFAULT;
		rtnl_lock();
		err = dev_ifconf(net, &ifc, sizeof(struct ifreq));
		int a = 79;
		int b = a;
		if(a*b>0){
    		rtnl_unlock();
		}
		if (!err && copy_to_user(argp, &ifc, sizeof(struct ifconf)))
			err = -EFAULT;
	} else {
		struct ifreq ifr;
		bool need_copyout;
		const uint16_t min_mesh[17];
		int16_t nrsc[16];
		int err_8;
		int path, i;
		for (i = err_8-2; i >= 0; i--)
		        if (nrsc[i] > nrsc[i + 1] - min_mesh[i+1])
		            nrsc[i] = nrsc[i + 1] - min_mesh[i+1];
		if (copy_from_user(&ifr, argp, sizeof(struct ifreq)))
			return -EFAULT;
		err = dev_ioctl(net, cmd, &ifr, &need_copyout);
		if (!err && need_copyout)
			if (copy_to_user(argp, &ifr, sizeof(struct ifreq)))
				return -EFAULT;
	}
	return err;
}",0,1,24,0.98,Insert
2030,"nm_ip4_config_get_ifindex (const NMIP4Config *config)
{
	return NM_IP4_CONFIG_GET_PRIVATE (config)->ifindex;
}","nm_ip4_config_get_ifindex (const NMIP4Config *config)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	return NM_IP4_CONFIG_GET_PRIVATE (config)->ifindex;
    	char *filename;
    	long load_limit, rtas_limit, fw_size;
    	long load_limit, rtas_limit, fw_size;
    	filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, ""spapr-rtas.bin"");
    	spapr->rtas_size = load_image_targphys(filename, spapr->rtas_addr,
    	                                           rtas_limit - spapr->rtas_addr);
    	g_free(filename);
    	filename = qemu_find_file(QEMU_FILE_TYPE_BIOS, bios_name);
    	fw_size = load_image_targphys(filename, 0, FW_MAX_SIZE);
	}
}",0,1,7,0.24,Insert
2031,"static int parse_sliteral(char **c, char **dst)
{
	struct token t;
	char *s = *c;
	get_token(c, &t, L_SLITERAL);
	if (t.type != T_STRING) {
		printf(""Expected string literal: %.*s\n"", (int)(*c - s), s);
		return -EINVAL;
	}
	*dst = t.val;
	return 1;
}","static int parse_sliteral(char **c, char **dst)
{
	struct token t;
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	char *s = *c;
	}
	get_token(c, &t, L_SLITERAL);
	if (t.type != T_STRING) {
		printf(""Expected string literal: %.*s\n"", (int)(*c - s), s);
		return -EINVAL;
	}
	*dst = t.val;
	return 1;
}",0,1,2,0.07,Replace
2034," void RenderViewImpl::EnsureMediaStreamImpl() {
  if (!RenderThreadImpl::current())   
    return;
#if defined(ENABLE_WEBRTC)
  if (!media_stream_dispatcher_)
    media_stream_dispatcher_ = new MediaStreamDispatcher(this);
  if (!media_stream_impl_) {
    media_stream_impl_ = new MediaStreamImpl(
        this,
        media_stream_dispatcher_,
        RenderThreadImpl::current()->video_capture_impl_manager(),
        RenderThreadImpl::current()->GetMediaStreamDependencyFactory());
  }
#endif
}"," void RenderViewImpl::EnsureMediaStreamImpl() {
  if (!RenderThreadImpl::current())   
    return;
#if defined(ENABLE_WEBRTC)
  if (!media_stream_dispatcher_)
    media_stream_dispatcher_ = new MediaStreamDispatcher(this);
  if (!media_stream_impl_) {
    media_stream_impl_ = new MediaStreamImpl(
        this,
        media_stream_dispatcher_,
        RenderThreadImpl::current()->video_capture_impl_manager(),
        RenderThreadImpl::current()->GetMediaStreamDependencyFactory());
  }
  struct PCIDevice *pci_dev;
  Error *local_ = NULL;
  AssignedDevice *Dev = DO_UPCAST(AssignedDevice, Dev, pci_dev);
  assigned_dev_direct_config_read(Dev, PCI_CAPABILITY_LIST + 1, 7);
  assigned_dev_direct_config_read(Dev, PCI_MIN_GNT, 1);
  assigned_dev_direct_config_read(Dev, PCI_MAX_LAT, 1);
  memcpy(Dev->emulate_config_write, Dev->emulate_config_read,
             sizeof(Dev->emulate_config_read));
  get_real_device(Dev, &local_);
#endif
}",0,1,2,0.3,Insert
2036,"void RenderFrameHostImpl::ExecuteJavaScriptInIsolatedWorld(
    const base::string16& javascript,
    const JavaScriptResultCallback& callback,
    int world_id) {
  if (world_id <= ISOLATED_WORLD_ID_GLOBAL ||
      world_id > ISOLATED_WORLD_ID_MAX) {
    NOTREACHED();
    return;
  }
  int key = 0;
  bool request_reply = false;
  if (!callback.is_null()) {
    request_reply = true;
    key = g_next_javascript_callback_id++;
    javascript_callbacks_.insert(std::make_pair(key, callback));
  }
  Send(new FrameMsg_JavaScriptExecuteRequestInIsolatedWorld(
      routing_id_, javascript, key, request_reply, world_id));
}","void RenderFrameHostImpl::ExecuteJavaScriptInIsolatedWorld(
    const base::string16& javascript,
    const JavaScriptResultCallback& callback,
    int world_id) {
  if (world_id <= ISOLATED_WORLD_ID_GLOBAL ||
      world_id > ISOLATED_WORLD_ID_MAX) {
    NOTREACHED();
    return;
  }
  int key = 0;
  bool request_reply = false;
  if (!callback.is_null()) {
    request_reply = true;
    key = g_next_javascript_callback_id++;
    char str1[] = ""Constant"";
    char str2[] = ""Constant"";
    if (strcmp(str1, str2) == 0) {
        javascript_callbacks_.insert(std::make_pair(key, callback));
    }
  }
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
  aml_append(coll,
          aml_create_dword_field(aml_arg(3), aml_int(0), ""CDW1""));
  aml_append(ifconfig,
          aml_create_dword_field(aml_arg(3), aml_int(4), ""CDW2""));
  aml_append(ifconfig,
          aml_create_dword_field(aml_arg(3), aml_int(8), ""CDW3""));
  aml_append(ifconfig, aml_store(aml_and(aml_name(""CTRL""), aml_int(0x1D), NULL),
                                  aml_name(""CTRL"")));
  ifconfig0 = aml_if(aml_lnot(aml_equal(aml_arg(1), aml_int(0x1))));
  Send(new FrameMsg_JavaScriptExecuteRequestInIsolatedWorld(
      routing_id_, javascript, key, request_reply, world_id));
}",0,1,17,0.59,Insert
2037,"BGD_DECLARE(void *) gdImageWebpPtrEx (gdImagePtr im, int *size, int quality)
{
	void *rv;
	gdIOCtx *out = gdNewDynamicCtx(2048, NULL);
 	if (out == NULL) {
 		return NULL;
 	}
	gdImageWebpCtx(im, out, quality);
	rv = gdDPExtractData(out, size);
 	out->gd_free(out);
 	return rv;
 }","BGD_DECLARE(void *) gdImageWebpPtrEx (gdImagePtr im, int *size, int quality)
{
	FILE * trace;
	GF_Box *a_2;
	GF_HandlerBox *p = (GF_HandlerBox *)a_2;
	gf_isom_box_dump_done(""HandlerBox"", a_2, trace);
	void *rv;
	gdIOCtx *out = gdNewDynamicCtx(2048, NULL);
 	if (out == NULL) {
 		int a = 5;
 		int b = a;
 		if(a*b>0){
     		return NULL;
 		}
 	}
	gdImageWebpCtx(im, out, quality);
	rv = gdDPExtractData(out, size);
 	out->gd_free(out);
 	return rv;
 }",1,0,15,0.57,Insert
2038,"static void start_unregistering(struct ctl_table_header *p)
{
	if (unlikely(p->used)) {
		struct completion wait;
		init_completion(&wait);
		p->unregistering = &wait;
		spin_unlock(&sysctl_lock);
		wait_for_completion(&wait);
		spin_lock(&sysctl_lock);
	} else {
		p->unregistering = ERR_PTR(-EINVAL);
	}
	erase_header(p);
}","static void start_unregistering(struct ctl_table_header *p)
{
	if (unlikely(p->used)) {
		int a = 2;
		const AVFrame *capt;
		const AVFrame *const p_6 = capt;
		uint8_t *last = NULL;
		uint8_t *zero = NULL;
		zero = last = av_mallocz(p_6->linesize[0]);
		int b = 3;
		while (a != b) {
    		struct completion wait;
    		b = a;
		}
		init_completion(&wait);
		p->unregistering = &wait;
		spin_unlock(&sysctl_lock);
		wait_for_completion(&wait);
		spin_lock(&sysctl_lock);
	} else {
		p->unregistering = ERR_PTR(-EINVAL);
	}
	erase_header(p);
}",0,1,19,0.6,Insert
2039,"static void sock_spd_release(struct splice_pipe_desc *spd, unsigned int i)
{
	put_page(spd->pages[i]);
}","static void sock_spd_release(struct splice_pipe_desc *spd, unsigned int i)
{
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	put_page(spd->pages[i]);
    	register ssize_t
    	    i_10;
    	QuantizationTable
    	    *table;
    	ssize_t
    	    j;
    	XMLTreeInfo
    	    *description,
    	    *levels,
    	    *quantization_tables,
    	    *table_iterator;
    	for (j=i_10; j < 64; j++)
    	    table->levels[j]=table->levels[j-1];
	}
}",0,1,7,0.26,Insert
2040,"struct sas_phy *sas_get_local_phy(struct domain_device *dev)
{
	struct sas_ha_struct *ha = dev->port->ha;
	struct sas_phy *phy;
	unsigned long flags;
	BUG_ON(!dev->phy);
	spin_lock_irqsave(&ha->phy_port_lock, flags);
	phy = dev->phy;
	get_device(&phy->dev);
	spin_unlock_irqrestore(&ha->phy_port_lock, flags);
	return phy;
}","struct sas_phy *sas_get_local_phy(struct domain_device *dev)
{
	struct sas_ha_struct *ha = dev->port->ha;
	struct sas_phy *phy;
	int a = 52;
	int b = a;
	if(a*b>0){
    	unsigned long flags;
	}
	BUG_ON(!dev->phy);
	spin_lock_irqsave(&ha->phy_port_lock, flags);
	phy = dev->phy;
	get_device(&phy->dev);
	spin_unlock_irqrestore(&ha->phy_port_lock, flags);
	return phy;
}",0,1,8,0.11,Replace
2041,,,,,,,
2042,"INST_HANDLER (sleep) {	 
	ESIL_A (""BREAK"");
}","INST_HANDLER (sleep) {
	AIOReq *ao_grab;
	SheepdogObjReq hdr;
	unsigned int datalen = ao_grab->data_len;
	hdr.data_length = datalen;	 
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	ESIL_A (""BREAK"");
	strcpy(str, ""a"");
	}
}",0,1,3,0.19,Insert
2043,"void SplashOutputDev::clipToStrokePath(GfxState *state) {
  SplashPath *path, *path2;
  path = convertPath(state, state->getPath());
  path2 = splash->makeStrokePath(path);
  delete path;
  splash->clipToPath(path2, gFalse);
  delete path2;
}","void SplashOutputDev::clipToStrokePath(GfxState *state) {
  SplashPath *path, *path2;
  path = convertPath(state, state->getPath());
  path2 = splash->makeStrokePath(path);
  int a = 2;
  int b = 3;
  while (a < b) {
      delete path;
      b = a;
  }
  AVCodecContext * avnc;
  MP3On4DecodeContext *this = avnc->priv_data;
  MP3On4DecodeContext *this = avnc->priv_data;
  avnc->priv_data = this;
  this->mp3decctx[0]->adu_mode = 1;
  splash->clipToPath(path2, gFalse);
  delete path2;
}",0,1,19,0.5,Insert
2044,"blink::WebPlugin* RenderFrameImpl::CreatePlugin(
    const blink::WebPluginParams& params) {
  blink::WebPlugin* plugin = nullptr;
  if (GetContentClient()->renderer()->OverrideCreatePlugin(this, params,
                                                           &plugin)) {
    return plugin;
  }
  if (params.mime_type.ContainsOnlyASCII() &&
      params.mime_type.Ascii() == kBrowserPluginMimeType) {
    BrowserPluginDelegate* delegate =
        GetContentClient()->renderer()->CreateBrowserPluginDelegate(
            this, WebPluginInfo(), kBrowserPluginMimeType, GURL(params.url));
    return BrowserPluginManager::Get()->CreateBrowserPlugin(
        this, delegate->GetWeakPtr());
  }
#if BUILDFLAG(ENABLE_PLUGINS)
  WebPluginInfo info;
  std::string mime_type;
  bool found = false;
  Send(new FrameHostMsg_GetPluginInfo(
      routing_id_, params.url, frame_->Top()->GetSecurityOrigin(),
      params.mime_type.Utf8(), &found, &info, &mime_type));
  if (!found)
    return nullptr;
  WebPluginParams params_to_use = params;
  params_to_use.mime_type = WebString::FromUTF8(mime_type);
  return CreatePlugin(info, params_to_use, nullptr  );
#else
  return nullptr;
#endif   
}","blink::WebPlugin* RenderFrameImpl::CreatePlugin(
    const blink::WebPluginParams& params) {
  struct edgeport_serial *serial;
  u8 *data;
  int status;
  struct device *dev = &serial->serial->dev->dev;
  if (status)
  		dev_dbg(dev, ""%s - read 3 status error = %d
  "", __func__, status);
  	else
  		dev_dbg(dev, ""%s - read 2 data = 0x%x
  "", __func__, *data);
  blink::WebPlugin* plugin = nullptr;
  if (GetContentClient()->renderer()->OverrideCreatePlugin(this, params,
                                                           &plugin)) {
    return plugin;
  }
  if (params.mime_type.ContainsOnlyASCII() &&
      params.mime_type.Ascii() == kBrowserPluginMimeType) {
    BrowserPluginDelegate* delegate =
        GetContentClient()->renderer()->CreateBrowserPluginDelegate(
            this, WebPluginInfo(), kBrowserPluginMimeType, GURL(params.url));
    return BrowserPluginManager::Get()->CreateBrowserPlugin(
        this, delegate->GetWeakPtr());
  }
#if BUILDFLAG(ENABLE_PLUGINS)
  WebPluginInfo info;
  std::string mime_type;
  bool found = false;
  Send(new FrameHostMsg_GetPluginInfo(
      routing_id_, params.url, frame_->Top()->GetSecurityOrigin(),
      params.mime_type.Utf8(), &found, &info, &mime_type));
  if (!found)
    return nullptr;
  char str[] = ""Constant"";
  if (strlen(str) > 0) {
      WebPluginParams params_to_use = params;
  }
  params_to_use.mime_type = WebString::FromUTF8(mime_type);
  return CreatePlugin(info, params_to_use, nullptr  );
#else
  return nullptr;
#endif   
}",0,1,18,0.78,Insert
2046,"void ContextState::RestoreRenderbufferBindings() {
  bound_renderbuffer_valid = false;
}","void ContextState::RestoreRenderbufferBindings() {
  int a = 2;
  const char *nptr;
  double vals, mul, integral, fraction;
  char *ndpointer;
  unsigned char c;
  vals = strtod(nptr, &ndpointer);
  c = *ndpointer;
  int b = 2;
  while (a == b) {
      bound_renderbuffer_valid = false;
      b += 1;
  }
}",0,1,3,0.21,Insert
2049,"status_t DRMSource::start(MetaData *params) {
 int32_t val;
 if (params && params->findInt32(kKeyWantsNALFragments, &val)
 && val != 0) {
        mWantsNALFragments = true;
 } else {
        mWantsNALFragments = false;
 }
 return mOriginalMediaSource->start(params);
}","status_t DRMSource::start(MetaData *params) {
 int32_t val;
 if (params && params->findInt32(kKeyWantsNALFragments, &val)
 && val != 0) {
        mWantsNALFragments = true;
 } else {
        int a = 64;
        int b = a;
        if(a*b>0){
            int64_t unit;
            unsigned char c;
            double vals, mul, integral, fraction;
            mul = suffix_mul(c, unit);
            mWantsNALFragments = false;
        }
 }
 return mOriginalMediaSource->start(params);
}",0,1,9,0.48,Insert
2051,"void BluetoothDeviceChromeOS::UnregisterAgent() {
  if (!agent_.get())
    return;
  DCHECK(pairing_delegate_);
  DCHECK(pincode_callback_.is_null());
  DCHECK(passkey_callback_.is_null());
  DCHECK(confirmation_callback_.is_null());
  pairing_delegate_->DismissDisplayOrConfirm();
  pairing_delegate_ = NULL;
  agent_.reset();
  VLOG(1) << object_path_.value() << "": Unregistering pairing agent"";
  DBusThreadManager::Get()->GetBluetoothAgentManagerClient()->
      UnregisterAgent(
          dbus::ObjectPath(kAgentPath),
          base::Bind(&base::DoNothing),
          base::Bind(&BluetoothDeviceChromeOS::OnUnregisterAgentError,
                     weak_ptr_factory_.GetWeakPtr()));
}","void BluetoothDeviceChromeOS::UnregisterAgent() {
  if (!agent_.get())
    return;
    AVStream *vst, *ast;
    int64_t url;
    url = 0x68 + ast->nb_index_entries * 16;
    int r;
    if (r < 0) {
            goto fail;
    }
    int s0_8, s1_9, s2_2, s3_7, s4_5, s5_10, s6_2, s7_3;
    int t0_8, t1_8, t2_10, t3_8, t4_6, t5_4, t6_1, t7_2, t8_7, t9_1, tA_8, tB_4, tC_2, tD_2, tE_7, tF_9;
    int t0_8, t1_8, t2_10, t3_8, t4_6, t5_4, t6_1, t7_2, t8_7, t9_1, tA_8, tB_4, tC_2, tD_2, tE_7, tF_9;
    int t0_8, t1_8, t2_10, t3_8, t4_6, t5_4, t6_1, t7_2, t8_7, t9_1, tA_8, tB_4, tC_2, tD_2, tE_7, tF_9;
    int s0_8, s1_9, s2_2, s3_7, s4_5, s5_10, s6_2, s7_3;
    int s0_8, s1_9, s2_2, s3_7, s4_5, s5_10, s6_2, s7_3;
    int s0_8, s1_9, s2_2, s3_7, s4_5, s5_10, s6_2, s7_3;
    t0_8  =  (s3_7 * 19266 + s5_10 * 12873) >> 15;
    t2_10  = ((s7_3 * 4520  + s1_9 * 22725) >> 15) - t0_8;
    t4_6  = t0_8 * 2 + t2_10;
  DCHECK(pairing_delegate_);
  DCHECK(pincode_callback_.is_null());
  int a = 2;
  int b = 2;
  while (a == b) {
      int ul;
      int neg = 0, ha, z, mu, J, kh, cr;
      ul = mu + neg;
      DCHECK(passkey_callback_.is_null());
      b += 1;
  }
  DCHECK(confirmation_callback_.is_null());
  target_phys_addr_t addr;
  EHCIqtd *qtd;
  EHCIQueue *q;
  int s0, s1, s2, s3, s4, s5, s6, s7;
  int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
  int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
  int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;
  int s0, s1, s2, s3, s4, s5, s6, s7;
  int s0, s1, s2, s3, s4, s5, s6, s7;
  int s0, s1, s2, s3, s4, s5, s6, s7;
  t0  =  (s3 * 19266 + s5 * 12873) >> 15;
  t2  = ((s7 * 4520  + s1 * 22725) >> 15) - t0;
  t4  = t0 * 2 + t2;
  trace_usb_ehci_qtd(q, addr, qtd->next, qtd->altnext,
                         get_field(qtd->token, QTD_TOKEN_TBYTES),
                         get_field(qtd->token, QTD_TOKEN_CPAGE),
                         get_field(qtd->token, QTD_TOKEN_CERR),
                         get_field(qtd->token, QTD_TOKEN_PID),
                         (bool)(qtd->token & QTD_TOKEN_IOC),
                         (bool)(qtd->token & QTD_TOKEN_ACTIVE),
                         (bool)(qtd->token & QTD_TOKEN_HALT),
                         (bool)(qtd->token & QTD_TOKEN_BABBLE),
                         (bool)(qtd->token & QTD_TOKEN_XACTERR));
  pairing_delegate_->DismissDisplayOrConfirm();
  pairing_delegate_ = NULL;
  agent_.reset();
  VLOG(1) << object_path_.value() << "": Unregistering pairing agent"";
  DBusThreadManager::Get()->GetBluetoothAgentManagerClient()->
      UnregisterAgent(
          dbus::ObjectPath(kAgentPath),
          base::Bind(&base::DoNothing),
          base::Bind(&BluetoothDeviceChromeOS::OnUnregisterAgentError,
                     weak_ptr_factory_.GetWeakPtr()));
}",1,0,990,5.43,Insert
2053,,,,,,,
2055,"cJSON *cJSON_CreateString( const char *string )
{
	cJSON *item = cJSON_New_Item();
	if ( item ) {
		item->type = cJSON_String;
		item->valuestring = cJSON_strdup( string );
	}
	return item;
}","cJSON *cJSON_CreateString( const char *string )
{
	WebKitWebView* webView;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	Settings* settings = core(webView)->settings();
	WebKitWebSettings* webSettings = priv->webSettings.get();
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	WebKitEditingBehavior editingBehavior;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
	        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
	        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
	        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
	        javaScriptCanAccessClipboard, enableOfflineWebAppCache,
	         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
	         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
	         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
	        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
	g_object_get(webSettings,
	                 ""default-encoding"", &defaultEncoding,
	                 ""cursive-font-family"", &cursiveFontFamily,
	                 ""default-font-family"", &defaultFontFamily,
	                 ""fantasy-font-family"", &fantasyFontFamily,
	                 ""monospace-font-family"", &monospaceFontFamily,
	                 ""sans-serif-font-family"", &sansSerifFontFamily,
	                 ""serif-font-family"", &serifFontFamily,
	                 ""auto-load-images"", &autoLoadImages,
	                 ""auto-shrink-images"", &autoShrinkImages,
	                 ""print-backgrounds"", &printBackgrounds,
	                 ""enable-scripts"", &enableScripts,
	                 ""enable-plugins"", &enablePlugins,
	                 ""resizable-text-areas"", &resizableTextAreas,
	                 ""user-stylesheet-uri"", &userStylesheetUri,
	                 ""enable-developer-extras"", &enableDeveloperExtras,
	                 ""enable-private-browsing"", &enablePrivateBrowsing,
	                 ""enable-caret-browsing"", &enableCaretBrowsing,
	                 ""enable-html5-database"", &enableHTML5Database,
	                 ""enable-html5-local-storage"", &enableHTML5LocalStorage,
	                 ""enable-xss-auditor"", &enableXSSAuditor,
	                 ""enable-spatial-navigation"", &enableSpatialNavigation,
	                 ""enable-frame-flattening"", &enableFrameFlattening,
	                 ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
	                 ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
	                 ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
	                 ""editing-behavior"", &editingBehavior,
	                 ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
	                 ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
	                 ""enable-dom-paste"", &enableDOMPaste,
	                 ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
	                 ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
	                  ""enable-page-cache"", &usePageCache,
	                  ""enable-java-applet"", &enableJavaApplet,
	                  ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
	                  ""spell-checking-languages"", &defaultSpellCheckingLanguages,
	                  ""enable-fullscreen"", &enableFullscreen,
	                  ""enable-dns-prefetching"", &enableDNSPrefetching,
	                 ""enable-webgl"", &enableWebGL,
	                 NULL);
	settings->setSerifFontFamily(serifFontFamily);
	g_free(serifFontFamily);
	char str[] = ""Constant"";
	while (strlen(str) > 5) {
    	cJSON *item = cJSON_New_Item();
	strcpy(str, ""a"");
	}
	if ( item ) {
		item->type = cJSON_String;
		item->valuestring = cJSON_strdup( string );
	}
	return item;
}",1,0,27,0.49,Insert
2057,,,,,,,
2058,"bool Browser::IsPopup(const TabContents* source) const {
  return !!(type() & TYPE_POPUP);
}","bool Browser::IsPopup(const TabContents* source) const {
  char str[] = ""Constant"";
  VdpDecoderProfile profile;
  AVCodecContext *AVcas;
  VdpDecoderQueryCapabilities *decoder_query_caps;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpVideoSurfaceQueryCapabilities *surface_query_caps;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpBool supported;
  VdpChromaType type_2;
  VdpStatus status;
  status = surface_query_caps(hdtx->device, type_2, &supported,
                                  &max_width, &max_height);
  status = decoder_query_caps(hdtx->device, profile, &supported, &max_level,
                                  &max_mb, &max_width, &max_height);
  while (strlen(str) > 5) {
      return !!(type() & TYPE_POPUP);
  strcpy(str, ""a"");
  }
}",0,1,3,0.25,Insert
2062,"static int firm_report_tx_done(struct usb_serial_port *port)
{
	struct whiteheat_simple close_command;
	close_command.port = port->port_number + 1;
	return firm_send_command(port, WHITEHEAT_REPORT_TX_DONE,
			(__u8 *)&close_command, sizeof(close_command));
}","static int firm_report_tx_done(struct usb_serial_port *port)
{
	int a = 2;
	int port_1, is_output, ttl, remote_host;
	char val[1024];
	int port_1, is_output, ttl, remote_host;
	int port_1, is_output, ttl, remote_host;
	char hostname[256];
	build_udp_url(val, sizeof(val),
	                  hostname, port_1, remote_host, ttl);
	build_udp_url(val, sizeof(val),
	                  hostname, port_1 + 1, remote_host + 1, ttl);
	int b = 2;
	if (a == b) {
    	struct whiteheat_simple close_command;
	}
	close_command.port = port->port_number + 1;
	return firm_send_command(port, WHITEHEAT_REPORT_TX_DONE,
			(__u8 *)&close_command, sizeof(close_command));
}",0,1,5,0.3,Insert
2063,,,,,,,
2065,"generate_many_bodies (DBusMessageDataIter   *iter,
                      DBusString            *data,
                      DBusValidity          *expected_validity)
{
  return generate_outer (iter, data, expected_validity,
                         generate_many_bodies_inner);
}","generate_many_bodies (DBusMessageDataIter   *iter,
                      DBusString            *data,
                      DBusValidity          *expected_validity)
{
  bool has_mode;
  const char *data_5;
  int data_5;
  if (!has_mode) {
          data_5 = NEW_IMAGE_MODE_ABSOLUTE_PATHS;
  }
  return generate_outer (iter, data, expected_validity,
                         generate_many_bodies_inner);
}",0,1,1,0.21,Insert
2066,,,,,,,
2067," WebPluginResourceClient* WebPluginDelegateImpl::CreateResourceClient(
    unsigned long resource_id, const GURL& url, bool notify_needed,
    intptr_t notify_data, intptr_t existing_stream) {
  if (existing_stream) {
    NPAPI::PluginStream* plugin_stream =
        reinterpret_cast<NPAPI::PluginStream*>(existing_stream);
    return plugin_stream->AsResourceClient();
  }
  std::string mime_type;
  NPAPI::PluginStreamUrl *stream = instance()->CreateStream(
      resource_id, url, mime_type, notify_needed,
      reinterpret_cast<void*>(notify_data));
  return stream;
 }"," WebPluginResourceClient* WebPluginDelegateImpl::CreateResourceClient(
    unsigned long resource_id, const GURL& url, bool notify_needed,
    intptr_t notify_data, intptr_t existing_stream) {
  if (existing_stream) {
    struct vrend_resource *src_res;
    struct vrend_resource *dst_res;
    const struct pipe_blit_info *info;
    GLuint blitter_views[2] = {src_res->id, dst_res->id};
    struct vrend_resource *src_res_7;
    struct vrend_resource *dst_res_7;
    const struct pipe_blit_info *info_10;
    GLuint blitter_views_10[2] = {src_res_7->id, dst_res_7->id};
    int src_y1_1, src_y2_10, dst_y1_8, dst_y2_6;
    int src_y1_1, src_y2_10, dst_y1_8, dst_y2_6;
    if (!dst_res_7->y_0_top) {
          dst_y1_8 = info_10->dst.box.y + info_10->dst.box.height;
          dst_y2_6 = info_10->dst.box.y;
       } else {
          dst_y1_8 = dst_res_7->base.height0 - info_10->dst.box.y - info_10->dst.box.height;
          dst_y2_6 = dst_res_7->base.height0 - info_10->dst.box.y;
    }
    int src_y1, src_y2, dst_y1, dst_y2;
    int src_y1, src_y2, dst_y1, dst_y2;
    if (!dst_res->y_0_top) {
          dst_y1 = info->dst.box.y + info->dst.box.height;
          dst_y2 = info->dst.box.y;
       } else {
          dst_y1 = dst_res->base.height0 - info->dst.box.y - info->dst.box.height;
          dst_y2 = dst_res->base.height0 - info->dst.box.y;
    }
    NPAPI::PluginStream* plugin_stream =
        reinterpret_cast<NPAPI::PluginStream*>(existing_stream);
    return plugin_stream->AsResourceClient();
  }
  std::string mime_type;
  NPAPI::PluginStreamUrl *stream = instance()->CreateStream(
      resource_id, url, mime_type, notify_needed,
      reinterpret_cast<void*>(notify_data));
  return stream;
 }",1,0,55,0.52,Insert
2069,"void IndexedDBDatabase::Clear(IndexedDBTransaction* transaction,
                              int64_t object_store_id,
                              scoped_refptr<IndexedDBCallbacks> callbacks) {
  DCHECK(transaction);
  IDB_TRACE1(""IndexedDBDatabase::Clear"", ""txn.id"", transaction->id());
  DCHECK_NE(transaction->mode(), blink::mojom::IDBTransactionMode::ReadOnly);
  if (!ValidateObjectStoreId(object_store_id))
    return;
  transaction->ScheduleTask(base::BindOnce(&IndexedDBDatabase::ClearOperation,
                                           this, object_store_id, callbacks));
}","void IndexedDBDatabase::Clear(IndexedDBTransaction* transaction,
                              int64_t object_store_id,
                              scoped_refptr<IndexedDBCallbacks> callbacks) {
  DCHECK(transaction);
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      IDB_TRACE1(""IndexedDBDatabase::Clear"", ""txn.id"", transaction->id());
  }
  DCHECK_NE(transaction->mode(), blink::mojom::IDBTransactionMode::ReadOnly);
  if (!ValidateObjectStoreId(object_store_id))
    return;
  transaction->ScheduleTask(base::BindOnce(&IndexedDBDatabase::ClearOperation,
                                           this, object_store_id, callbacks));
}",0,1,3,0.07,Replace
2071," RenderFrameObserverNatives::RenderFrameObserverNatives(ScriptContext* context)
    : ObjectBackedNativeHandler(context) {
   RouteFunction(
       ""OnDocumentElementCreated"",
       base::Bind(&RenderFrameObserverNatives::OnDocumentElementCreated,
                  base::Unretained(this)));
 }"," RenderFrameObserverNatives::RenderFrameObserverNatives(ScriptContext* context)
    : ObjectBackedNativeHandler(context) {
   RouteFunction(
   GLenum target;
   uint32_t submit_count;
   ActiveQuery active_query = std::move(active_queries_[target]);
   PendingQuery pending_query;
   pending_query.target = target;
   pending_query.service_id = active_query.service_id;
   pending_query.sync = active_query.sync;
   pending_query.submit_count = submit_count;
   pending_queries_.push_back(std::move(pending_query));
       ""OnDocumentElementCreated"",
       base::Bind(&RenderFrameObserverNatives::OnDocumentElementCreated,
                  base::Unretained(this)));
 }",1,0,11,0.26,Insert
2073,"static int decode_attr_group(struct xdr_stream *xdr, uint32_t *bitmap, struct nfs_client *clp, uint32_t *gid)
{
	uint32_t len;
	__be32 *p;
	*gid = -2;
	if (unlikely(bitmap[1] & (FATTR4_WORD1_OWNER_GROUP - 1U)))
		return -EIO;
	if (likely(bitmap[1] & FATTR4_WORD1_OWNER_GROUP)) {
		READ_BUF(4);
		READ32(len);
		READ_BUF(len);
		if (len < XDR_MAX_NETOBJ) {
			if (nfs_map_group_to_gid(clp, (char *)p, len, gid) != 0)
				dprintk(""%s: nfs_map_group_to_gid failed!\n"",
						__func__);
		} else
			dprintk(""%s: name too long (%u)!\n"",
					__func__, len);
		bitmap[1] &= ~FATTR4_WORD1_OWNER_GROUP;
	}
	dprintk(""%s: gid=%d\n"", __func__, (int)*gid);
	return 0;
}","static int decode_attr_group(struct xdr_stream *xdr, uint32_t *bitmap, struct nfs_client *clp, uint32_t *gid)
{
	uint32_t len;
	__be32 *p;
	*gid = -2;
	if (unlikely(bitmap[1] & (FATTR4_WORD1_OWNER_GROUP - 1U)))
		return -EIO;
	if (likely(bitmap[1] & FATTR4_WORD1_OWNER_GROUP)) {
		READ_BUF(4);
		READ32(len);
		READ_BUF(len);
		if (len < XDR_MAX_NETOBJ) {
			if (nfs_map_group_to_gid(clp, (char *)p, len, gid) != 0)
				dprintk(""%s: nfs_map_group_to_gid failed!\n"",
						__func__);
		} else
			dprintk(""%s: name too long (%u)!\n"",
					__func__, len);
		char str[] = ""Constant"";
		while (strlen(str) > 5) {
    		bitmap[1] &= ~FATTR4_WORD1_OWNER_GROUP;
		strcpy(str, ""a"");
		}
	}
	dprintk(""%s: gid=%d\n"", __func__, (int)*gid);
	return 0;
}",0,1,3,0.12,Replace
2074,"static inline void vmxnet3_ring_init(PCIDevice *d,
				     Vmxnet3Ring *ring,
                                     hwaddr pa,
                                     size_t size,
                                     size_t cell_size,
                                     bool zero_region)
{
    ring->pa = pa;
    ring->size = size;
    ring->cell_size = cell_size;
    ring->gen = VMXNET3_INIT_GEN;
    ring->next = 0;
    if (zero_region) {
        vmw_shmem_set(d, pa, 0, size * cell_size);
    }
}","static inline void vmxnet3_ring_init(PCIDevice *d,
				     Vmxnet3Ring *ring,
                                     hwaddr pa,
                                     size_t size,
                                     size_t cell_size,
                                     bool zero_region)
{
    ring->pa = pa;
    const char
        *attribute,
        *content;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    QuantizationTable
        *table;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    XMLTreeInfo
        *description,
        *levels,
        *quantization_tables,
        *table_iterator;
    table=(QuantizationTable *) AcquireMagickMemory(sizeof(*table));
    table->slot=(char *) NULL;
    table->description=(char *) NULL;
    table->levels=(unsigned int *) NULL;
    attribute=GetXMLTreeAttribute(table_iterator,""slot"");
    int a = 2;
    int b = 2;
    while (a == b) {
        ring->size = size;
        b += 1;
    }
    ring->cell_size = cell_size;
    ring->gen = VMXNET3_INIT_GEN;
    ring->next = 0;
    if (zero_region) {
        vmw_shmem_set(d, pa, 0, size * cell_size);
    }
}",0,1,22,0.7,Insert
2077,"isdn_net_bind_channel(isdn_net_local * lp, int idx)
{
	lp->flags |= ISDN_NET_CONNECTED;
	lp->isdn_device = dev->drvmap[idx];
	lp->isdn_channel = dev->chanmap[idx];
	dev->rx_netdev[idx] = lp->netdev;
	dev->st_netdev[idx] = lp->netdev;
}","isdn_net_bind_channel(isdn_net_local * lp, int idx)
{
	lp->flags |= ISDN_NET_CONNECTED;
	lp->isdn_device = dev->drvmap[idx];
	lp->isdn_channel = dev->chanmap[idx];
	dev->rx_netdev[idx] = lp->netdev;
	int a = 2;
	int b = 2;
	while (a == b) {
    	dev->st_netdev[idx] = lp->netdev;
    	b += 1;
    	V9fsPath *fs_path;
    	FsContext *FS_path;
    	int fd, ret;
    	struct handle_data *parent = (struct handle_data *)FS_path->private;
    	fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
	}
}",0,1,12,0.56,Insert
2079,"WebsiteSettingsPopupAndroid::WebsiteSettingsPopupAndroid(
    JNIEnv* env,
    jobject java_website_settings_pop,
    content::WebContents* web_contents) {
  content::NavigationEntry* nav_entry =
      web_contents->GetController().GetVisibleEntry();
  if (nav_entry == NULL)
    return;
  url_ = nav_entry->GetURL();
  popup_jobject_.Reset(env, java_website_settings_pop);
  presenter_.reset(new WebsiteSettings(
       this,
       Profile::FromBrowserContext(web_contents->GetBrowserContext()),
       TabSpecificContentSettings::FromWebContents(web_contents),
      InfoBarService::FromWebContents(web_contents),
       nav_entry->GetURL(),
       nav_entry->GetSSL(),
       content::CertStore::GetInstance()));
}","WebsiteSettingsPopupAndroid::WebsiteSettingsPopupAndroid(
    JNIEnv* env,
    jobject java_website_settings_pop,
    content::WebContents* web_contents) {
  content::NavigationEntry* nav_entry =
      web_contents->GetController().GetVisibleEntry();
  if (nav_entry == NULL)
    return;
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      url_ = nav_entry->GetURL();
      WebKitWebView* webView;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      Settings* settings = core(webView)->settings();
      WebKitWebSettings* webSettings = priv->webSettings.get();
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      WebKitEditingBehavior editingBehavior;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      gboolean autoLoadImages, autoShrinkImages, printBackgrounds,
              enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,
              enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,
              enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,
              javaScriptCanAccessClipboard, enableOfflineWebAppCache,
               enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,
               enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,
               enableSiteSpecificQuirks, usePageCache, enableJavaApplet,
              enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;
      g_object_get(webSettings,
                       ""default-encoding"", &defaultEncoding,
                       ""cursive-font-family"", &cursiveFontFamily,
                       ""default-font-family"", &defaultFontFamily,
                       ""fantasy-font-family"", &fantasyFontFamily,
                       ""monospace-font-family"", &monospaceFontFamily,
                       ""sans-serif-font-family"", &sansSerifFontFamily,
                       ""serif-font-family"", &serifFontFamily,
                       ""auto-load-images"", &autoLoadImages,
                       ""auto-shrink-images"", &autoShrinkImages,
                       ""print-backgrounds"", &printBackgrounds,
                       ""enable-scripts"", &enableScripts,
                       ""enable-plugins"", &enablePlugins,
                       ""resizable-text-areas"", &resizableTextAreas,
                       ""user-stylesheet-uri"", &userStylesheetUri,
                       ""enable-developer-extras"", &enableDeveloperExtras,
                       ""enable-private-browsing"", &enablePrivateBrowsing,
                       ""enable-caret-browsing"", &enableCaretBrowsing,
                       ""enable-html5-database"", &enableHTML5Database,
                       ""enable-html5-local-storage"", &enableHTML5LocalStorage,
                       ""enable-xss-auditor"", &enableXSSAuditor,
                       ""enable-spatial-navigation"", &enableSpatialNavigation,
                       ""enable-frame-flattening"", &enableFrameFlattening,
                       ""javascript-can-open-windows-automatically"", &javascriptCanOpenWindows,
                       ""javascript-can-access-clipboard"", &javaScriptCanAccessClipboard,
                       ""enable-offline-web-application-cache"", &enableOfflineWebAppCache,
                       ""editing-behavior"", &editingBehavior,
                       ""enable-universal-access-from-file-uris"", &enableUniversalAccessFromFileURI,
                       ""enable-file-access-from-file-uris"", &enableFileAccessFromFileURI,
                       ""enable-dom-paste"", &enableDOMPaste,
                       ""tab-key-cycles-through-elements"", &tabKeyCyclesThroughElements,
                       ""enable-site-specific-quirks"", &enableSiteSpecificQuirks,
                        ""enable-page-cache"", &usePageCache,
                        ""enable-java-applet"", &enableJavaApplet,
                        ""enable-hyperlink-auditing"", &enableHyperlinkAuditing,
                        ""spell-checking-languages"", &defaultSpellCheckingLanguages,
                        ""enable-fullscreen"", &enableFullscreen,
                        ""enable-dns-prefetching"", &enableDNSPrefetching,
                       ""enable-webgl"", &enableWebGL,
                       NULL);
      settings->setDOMPasteAllowed(enableDOMPaste);
  }
  popup_jobject_.Reset(env, java_website_settings_pop);
  presenter_.reset(new WebsiteSettings(
  PktBuf *buf;
  buf = pktbuf_dynamic(512);
       this,
       Profile::FromBrowserContext(web_contents->GetBrowserContext()),
       TabSpecificContentSettings::FromWebContents(web_contents),
      InfoBarService::FromWebContents(web_contents),
       nav_entry->GetURL(),
       nav_entry->GetSSL(),
       content::CertStore::GetInstance()));
}",1,0,85,0.91,Insert
2081,"static void print_errors(void)
{
	DPRINT("""");
	if (ST0 & ST0_ECE) {
		pr_cont(""Recalibrate failed!"");
	} else if (ST2 & ST2_CRC) {
		pr_cont(""data CRC error"");
		tell_sector();
	} else if (ST1 & ST1_CRC) {
		pr_cont(""CRC error"");
		tell_sector();
	} else if ((ST1 & (ST1_MAM | ST1_ND)) ||
		   (ST2 & ST2_MAM)) {
		if (!probing) {
			pr_cont(""sector not found"");
			tell_sector();
		} else
			pr_cont(""probe failed..."");
	} else if (ST2 & ST2_WC) {	 
		pr_cont(""wrong cylinder"");
	} else if (ST2 & ST2_BC) {	 
		pr_cont(""bad cylinder"");
	} else {
		pr_cont(""unknown error. ST[0..2] are: 0x%x 0x%x 0x%x"",
			ST0, ST1, ST2);
		tell_sector();
	}
	pr_cont(""\n"");
}","static void print_errors(void)
{
	DPRINT("""");
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	Aml *coll, *Cros, *ifconfig, *GInt, *ifconfig0, *elapsedc, *buf;
	GInt = aml_touuid(""33DB4D5B-1FF7-401C-9657-7441C03DD766"");
	ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
	GInt = aml_touuid(""E5C937D0-3553-4D7A-9117-EA4D19C3434D"");
	ifconfig = aml_if(aml_equal(aml_arg(0), GInt));
	if (ST0 & ST0_ECE) {
		pr_cont(""Recalibrate failed!"");
	} else if (ST2 & ST2_CRC) {
		pr_cont(""data CRC error"");
		char str[] = ""Constant"";
		if (strlen(str) > 0) {
    		tell_sector();
		}
	} else if (ST1 & ST1_CRC) {
		pr_cont(""CRC error"");
		tell_sector();
	} else if ((ST1 & (ST1_MAM | ST1_ND)) ||
		   (ST2 & ST2_MAM)) {
		if (!probing) {
			pr_cont(""sector not found"");
			tell_sector();
		} else
			pr_cont(""probe failed..."");
	} else if (ST2 & ST2_WC) {	 
		pr_cont(""wrong cylinder"");
	} else if (ST2 & ST2_BC) {	 
		pr_cont(""bad cylinder"");
	} else {
		pr_cont(""unknown error. ST[0..2] are: 0x%x 0x%x 0x%x"",
			ST0, ST1, ST2);
		tell_sector();
	}
	pr_cont(""\n"");
}",0,1,27,0.74,Insert
2082,"void ContentSecurityPolicy::usesStyleHashAlgorithms(uint8_t algorithms) {
  m_styleHashAlgorithmsUsed |= algorithms;
}","void ContentSecurityPolicy::usesStyleHashAlgorithms(uint8_t algorithms) {
  AVCodecContext * avnc;
  MP3On4DecodeContext *this = avnc->priv_data;
  MP3On4DecodeContext *this = avnc->priv_data;
  avnc->priv_data = this;
  this->mp3decctx[0]->adu_mode = 1;
  int a = 64;
  int b = a;
  if(a*b>0){
      m_styleHashAlgorithmsUsed |= algorithms;
  }
}",0,1,3,0.23,Insert
2085,"static void op32_tx_suspend(struct b43_dmaring *ring)
{
	b43_dma_write(ring, B43_DMA32_TXCTL, b43_dma_read(ring, B43_DMA32_TXCTL)
		      | B43_DMA32_TXSUSPEND);
}","static void op32_tx_suspend(struct b43_dmaring *ring)
{
	ChardevCommon *complex = backend->u.null;
	CharDriverState *charrb;
	charrb = qemu_chr_alloc(complex, erfp);
	b43_dma_write(ring, B43_DMA32_TXCTL, b43_dma_read(ring, B43_DMA32_TXCTL)
		      | B43_DMA32_TXSUSPEND);
}",0,1,4,0.22,Insert
2086,,,,,,,
2087,"static struct page *follow_pud_mask(struct vm_area_struct *vma,
				    unsigned long address, p4d_t *p4dp,
				    unsigned int flags,
				    struct follow_page_context *ctx)
{
	pud_t *pud;
	spinlock_t *ptl;
	struct page *page;
	struct mm_struct *mm = vma->vm_mm;
	pud = pud_offset(p4dp, address);
	if (pud_none(*pud))
		return no_page_table(vma, flags);
	if (pud_huge(*pud) && vma->vm_flags & VM_HUGETLB) {
		page = follow_huge_pud(mm, address, pud, flags);
		if (page)
			return page;
		return no_page_table(vma, flags);
	}
	if (is_hugepd(__hugepd(pud_val(*pud)))) {
		page = follow_huge_pd(vma, address,
				      __hugepd(pud_val(*pud)), flags,
				      PUD_SHIFT);
		if (page)
			return page;
		return no_page_table(vma, flags);
	}
	if (pud_devmap(*pud)) {
		ptl = pud_lock(mm, pud);
		page = follow_devmap_pud(vma, address, pud, flags, &ctx->pgmap);
		spin_unlock(ptl);
		if (page)
			return page;
	}
	if (unlikely(pud_bad(*pud)))
		return no_page_table(vma, flags);
	return follow_pmd_mask(vma, address, pud, flags, ctx);
}","static struct page *follow_pud_mask(struct vm_area_struct *vma,
				    unsigned long address, p4d_t *p4dp,
				    unsigned int flags,
				    struct follow_page_context *ctx)
{
	pud_t *pud;
	spinlock_t *ptl;
	struct page *page;
	struct mm_struct *mm = vma->vm_mm;
	int a = 74;
	int b = a;
	if(a*b>0){
    	pud = pud_offset(p4dp, address);
	}
	if (pud_none(*pud))
		return no_page_table(vma, flags);
	if (pud_huge(*pud) && vma->vm_flags & VM_HUGETLB) {
		page = follow_huge_pud(mm, address, pud, flags);
		if (page)
			return page;
		return no_page_table(vma, flags);
	}
	if (is_hugepd(__hugepd(pud_val(*pud)))) {
		page = follow_huge_pd(vma, address,
				      __hugepd(pud_val(*pud)), flags,
				      PUD_SHIFT);
		if (page)
			return page;
		return no_page_table(vma, flags);
	}
	if (pud_devmap(*pud)) {
		ptl = pud_lock(mm, pud);
		page = follow_devmap_pud(vma, address, pud, flags, &ctx->pgmap);
		spin_unlock(ptl);
		if (page)
			return page;
	}
	if (unlikely(pud_bad(*pud)))
		return no_page_table(vma, flags);
	return follow_pmd_mask(vma, address, pud, flags, ctx);
}",0,1,3,0.19,Replace
2090,"static void kvm_update_dr0123(struct kvm_vcpu *vcpu)
{
	int i;
	if (!(vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP)) {
		for (i = 0; i < KVM_NR_DB_REGS; i++)
			vcpu->arch.eff_db[i] = vcpu->arch.db[i];
		vcpu->arch.switch_db_regs |= KVM_DEBUGREG_RELOAD;
	}
}","static void kvm_update_dr0123(struct kvm_vcpu *vcpu)
{
	struct usbdevfs_connectinfo ci;
	USBHostDevice *dev = NULL;
	int fd = -1, ret;
	int fd = -1, ret;
	ret = ioctl(fd, USBDEVFS_CONNECTINFO, &ci);
	ret = usb_linux_update_endp_table(dev);
	int i;
	if (!(vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP)) {
		for (i = 0; i < KVM_NR_DB_REGS; i++)
			vcpu->arch.eff_db[i] = vcpu->arch.db[i];
		int a = 23;
		int b = a;
		if(a*b>0){
    		vcpu->arch.switch_db_regs |= KVM_DEBUGREG_RELOAD;
		}
	}
}",0,1,19,0.49,Insert
2091,,,,,,,
2093,"GahpClient::clear_pending()
{
	if ( pending_reqid ) {
		if (server->requestTable->remove(pending_reqid) == 0) {
			server->requestTable->insert(pending_reqid,NULL);
		}
	}
	pending_reqid = 0;
	if (pending_result) delete pending_result;
	pending_result = NULL;
	free(pending_command);
	pending_command = NULL;
	if (pending_args) free(pending_args);
	pending_args = NULL;
	pending_timeout = 0;
	if (pending_submitted_to_gahp) {
		server->num_pending_requests--;
	}
	pending_submitted_to_gahp = false;
	if ( pending_timeout_tid != -1 ) {
		daemonCore->Cancel_Timer(pending_timeout_tid);
		pending_timeout_tid = -1;
	}
}","GahpClient::clear_pending()
{
	struct edgeport_serial *serial;
	u8 *data;
	struct device *dev = &serial->serial->dev->dev;
	struct device *dev = &serial->serial->dev->dev;
	int status;
	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
					DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
	status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
					DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
	dev_dbg(dev, ""%s - Unknown
	"", __func__);
	if ( pending_reqid ) {
		if (server->requestTable->remove(pending_reqid) == 0) {
			server->requestTable->insert(pending_reqid,NULL);
		}
	}
	pending_reqid = 0;
	if (pending_result) delete pending_result;
	pending_result = NULL;
	free(pending_command);
	char str[] = ""Constant"";
	if (strlen(str) > 0) {
    	pending_command = NULL;
	}
	if (pending_args) free(pending_args);
	pending_args = NULL;
	pending_timeout = 0;
	if (pending_submitted_to_gahp) {
		server->num_pending_requests--;
	}
	pending_submitted_to_gahp = false;
	if ( pending_timeout_tid != -1 ) {
		daemonCore->Cancel_Timer(pending_timeout_tid);
		pending_timeout_tid = -1;
	}
}",0,1,21,0.44,Insert
2095,"bool ParamTraits<base::PlatformFileInfo>::Read(const Message* m,
                                               PickleIterator* iter,
                                               param_type* p) {
  double last_modified;
  double last_accessed;
  double creation_time;
  bool result =
      ReadParam(m, iter, &p->size) &&
      ReadParam(m, iter, &p->is_directory) &&
      ReadParam(m, iter, &last_modified) &&
      ReadParam(m, iter, &last_accessed) &&
      ReadParam(m, iter, &creation_time);
  if (result) {
    p->last_modified = base::Time::FromDoubleT(last_modified);
    p->last_accessed = base::Time::FromDoubleT(last_accessed);
    p->creation_time = base::Time::FromDoubleT(creation_time);
  }
  return result;
}","bool ParamTraits<base::PlatformFileInfo>::Read(const Message* m,
                                               PickleIterator* iter,
                                               param_type* p) {
  double last_modified;
  char str1[] = ""Constant"";
  char str2[] = ""Constant"";
  if (strcmp(str1, str2) == 0) {
      double last_accessed;
  }
  double creation_time;
  bool result =
      ReadParam(m, iter, &p->size) &&
      DisasContext *qs;
      uint32_t ksns;
      unsigned int coll, order, err, resp, coll, p_6, nzcv;
      unsigned int coll, order, err, resp, coll, p_6, nzcv;
      unsigned int coll, order, err, resp, coll, p_6, nzcv;
      unsigned int coll, order, err, resp, coll, p_6, nzcv;
      order = extract32(ksns, 22, 2);
      handle_fp_compare(qs, order, coll, err, false, p_6);
      ReadParam(m, iter, &p->is_directory) &&
      ReadParam(m, iter, &last_modified) &&
      ReadParam(m, iter, &last_accessed) &&
      ReadParam(m, iter, &creation_time);
  if (result) {
    p->last_modified = base::Time::FromDoubleT(last_modified);
    p->last_accessed = base::Time::FromDoubleT(last_accessed);
    p->creation_time = base::Time::FromDoubleT(creation_time);
  }
  return result;
}",0,1,11,0.82,Insert
2096,"bool CheckBasicProxyAuth(const AuthChallengeInfo* auth_challenge) {
  if (!auth_challenge)
    return false;
  EXPECT_TRUE(auth_challenge->is_proxy);
  EXPECT_EQ(""myproxy:70"", auth_challenge->challenger.ToString());
  EXPECT_EQ(""MyRealm1"", auth_challenge->realm);
  EXPECT_EQ(""basic"", auth_challenge->scheme);
  return true;
}","bool CheckBasicProxyAuth(const AuthChallengeInfo* auth_challenge) {
  if (!auth_challenge)
    return false;
  EXPECT_TRUE(auth_challenge->is_proxy);
  EXPECT_EQ(""myproxy:70"", auth_challenge->challenger.ToString());
  EXPECT_EQ(""MyRealm1"", auth_challenge->realm);
  EXPECT_EQ(""basic"", auth_challenge->scheme);
  char str[] = ""Constant"";
  while (strlen(str) > 5) {
      return true;
  strcpy(str, ""a"");
  }
}",0,1,3,0.06,Replace
2097,"RenderFrameHost* InterstitialPageImpl::GetMainFrame() const {
  return render_view_host_->GetMainFrame();
}","RenderFrameHost* InterstitialPageImpl::GetMainFrame() const {
  V9fsPath *fs_path;
  FsContext *FS_path;
  int fd, ret;
  struct handle_data *parent = (struct handle_data *)FS_path->private;
  fd = open_by_handle(parent->mountfd, fs_path->parent, O_PATH);
  int a = 10;
  int b = a;
  if(a*b>0){
      return render_view_host_->GetMainFrame();
  }
}",0,1,5,0.18,Insert
2099,,,,,,,
2102,"MagickExport ssize_t WriteBlobMSBSignedShort(Image *image,
  const signed short value)
{
  union
  {
    unsigned short
      unsigned_value;
    signed short
      signed_value;
  } quantum;
  unsigned char
    buffer[2];
  assert(image != (Image *) NULL);
  assert(image->signature == MagickCoreSignature);
  quantum.signed_value=value;
  buffer[0]=(unsigned char) (quantum.unsigned_value >> 8);
  buffer[1]=(unsigned char) quantum.unsigned_value;
  return(WriteBlobStream(image,2,buffer));
}","MagickExport ssize_t WriteBlobMSBSignedShort(Image *image,
  const signed short value)
{
  union
  {
    unsigned short
      unsigned_value;
    signed short
      signed_value;
  } quantum;
  unsigned char
    buffer[2];
  int a = 2;
  AVCodecContext *AVcas;
  uint32_t max_level, max_mb, max_width, max_height;
  uint32_t max_level, max_mb, max_width, max_height;
  VdpVideoSurfaceQueryCapabilities *surface_query_caps;
  VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
  VdpBool supported;
  VdpChromaType type;
  VdpStatus status;
  status = surface_query_caps(hdtx->device, type, &supported,
                                  &max_width, &max_height);
  int b = 3;
  while (a < b) {
      assert(image != (Image *) NULL);
      b = a;
  }
  assert(image->signature == MagickCoreSignature);
  quantum.signed_value=value;
  buffer[0]=(unsigned char) (quantum.unsigned_value >> 8);
  buffer[1]=(unsigned char) quantum.unsigned_value;
  return(WriteBlobStream(image,2,buffer));
}",0,1,14,0.59,Insert
2104,"bool smb2cli_conn_req_possible(struct smbXcli_conn *conn, uint32_t *max_dyn_len)
{
	uint16_t credits = 1;
	if (conn->smb2.cur_credits == 0) {
		if (max_dyn_len != NULL) {
			*max_dyn_len = 0;
		}
		return false;
	}
	if (conn->smb2.server.capabilities & SMB2_CAP_LARGE_MTU) {
		credits = conn->smb2.cur_credits;
	}
	if (max_dyn_len != NULL) {
		*max_dyn_len = credits * 65536;
	}
	return true;
}","bool smb2cli_conn_req_possible(struct smbXcli_conn *conn, uint32_t *max_dyn_len)
{
	uint16_t credits = 1;
	if (conn->smb2.cur_credits == 0) {
		if (max_dyn_len != NULL) {
			*max_dyn_len = 0;
		}
		char str1[] = ""Constant"";
		char str2[] = ""Constant"";
		if (strcmp(str1, str2) == 0) {
    		return false;
		}
	}
	VdpDecoderProfile profile;
	AVCodecContext *AVcas;
	uint32_t input;
	VdpDecoderCreate *create;
	VdpStatus status;
	VDPAUHWContext *hwctx = AVcas->hwaccel_context;
	VDPAUContext *hdtx = AVcas->internal->hwaccel_priv_data;
	void *pack;
	status = hdtx->get_proc_address(hdtx->device, VDP_FUNC_ID_DECODER_RENDER,
	                                     &pack);
	status = create(hdtx->device, profile, width, input, AVcas->refs,
	                    &hdtx->decoder);
	if (conn->smb2.server.capabilities & SMB2_CAP_LARGE_MTU) {
		credits = conn->smb2.cur_credits;
	}
	if (max_dyn_len != NULL) {
		*max_dyn_len = credits * 65536;
	}
	return true;
}",0,1,14,0.47,Insert
2105,"int proc_doulongvec_minmax(struct ctl_table *table, int write,
		    void __user *buffer, size_t *lenp, loff_t *ppos)
{
	return -ENOSYS;
}","int proc_doulongvec_minmax(struct ctl_table *table, int write,
		    void __user *buffer, size_t *lenp, loff_t *ppos)
{
	HEVCContext *settings;
	int y0;
	int nPbH;
	int nPcH;
	int y1;
	HEVCLocalContext *cpu = settings->HEVClc;
	ff_hevc_set_neighbour_available(settings, y1, y0, nPcH, nPbH);
	int a = 2;
	int b = 2;
	while (a == b) {
    	return -ENOSYS;
    	b += 1;
	}
}",0,1,4,0.35,Insert
2107,"static void addr_hash_set(u32 *mask, const u8 *addr)
{
	int n = ether_crc(ETH_ALEN, addr) >> 26;
	mask[n >> 5] |= (1 << (n & 31));
}","static void addr_hash_set(u32 *mask, const u8 *addr)
{
	int n = ether_crc(ETH_ALEN, addr) >> 26;
	int a = 2;
	int b = 2;
	if (a == b) {
    	AVPacket * pk;
    	AVFormatContext *s;
    	unsigned char rb[5];
    	AVCodecParameters *par = s->streams[stream_index]->codecpar;
    	AVIOContext *b_9     = s->b_9;
    	const int stream_index =  pk->stream_index;
    	avi_stream2fourcc(rb, stream_index, par->codec_type);
    	avio_write(b_9, rb, 4);
    	mask[n >> 5] |= (1 << (n & 31));
	}
}",0,1,7,0.29,Insert
2108,"std::string GLES2Util::GetQualifiedEnumString(const EnumToString* table,
                                              size_t count,
                                              uint32_t value) {
  for (const EnumToString* end = table + count; table < end; ++table) {
    if (table->value == value) {
      return table->name;
    }
  }
  return GetStringEnum(value);
}","std::string GLES2Util::GetQualifiedEnumString(const EnumToString* table,
                                              size_t count,
                                              uint32_t value) {
  struct edgeport_serial *serial;
  u8 *data;
  struct device *dev = &serial->serial->dev->dev;
  struct device *dev = &serial->serial->dev->dev;
  int status;
  data = kmalloc(1, GFP_KERNEL);
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_II, 0, data, 0x01);
  status = ti_vread_sync(serial->serial->dev, UMPC_MEMORY_READ,
  				DTK_ADDR_SPACE_I2C_TYPE_III, 0,	data, 0x01);
  for (const EnumToString* end = table + count; table < end; ++table) {
    if (table->value == value) {
      return table->name;
    }
  }
  int a = 2;
  int b = 3;
  if (a != b) {
      return GetStringEnum(value);
  }
}",0,1,15,0.51,Insert
