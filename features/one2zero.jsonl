{"snippets": "HEXDUMP_PRINT(\"  duration=%0.3f\\n\", pkt->duration * av_q2d(time_base));", "var": ["time_base", "pkt"], "params": ["AVRational time_base;", "const AVPacket *pkt;"]}
{"snippets": "if (pkt->dts == AV_NOPTS_VALUE)\n        HEXDUMP_PRINT(\"N/A\");\n    else\n        HEXDUMP_PRINT(\"%0.3f\", pkt->dts * av_q2d(time_base));", "var": ["time_base", "pkt"], "params": ["AVRational time_base;", "const AVPacket *pkt;"]}
{"snippets": "if (dump_payload)\n        av_hex_dump(f, pkt->data, pkt->size);", "var": ["dump_payload", "f", "pkt"], "params": ["int dump_payload;", "FILE *f;", "const AVPacket *pkt;"]}
{"snippets": "if (pkt->pts == AV_NOPTS_VALUE)\n        HEXDUMP_PRINT(\"N/A\");\n    else\n        HEXDUMP_PRINT(\"%0.3f\", pkt->pts * av_q2d(time_base));", "var": ["time_base", "pkt"], "params": ["AVRational time_base;", "const AVPacket *pkt;"]}
{"snippets": "HEXDUMP_PRINT(\"stream #%d:\\n\", pkt->stream_index);\nHEXDUMP_PRINT(\"  keyframe=%d\\n\", (pkt->flags & AV_PKT_FLAG_KEY) != 0);\nHEXDUMP_PRINT(\"  duration=%0.3f\\n\", pkt->duration * av_q2d(time_base));\nHEXDUMP_PRINT(\"  size=%d\\n\", pkt->size);", "var": ["time_base", "pkt"], "params": ["AVRational time_base;", "const AVPacket *pkt;"]}
{"snippets": "Xen9pfsDev *xen_9pdev = container_of(xendev, Xen9pfsDev, xendev);\nV9fsState *s = &xen_9pdev->state;\nXen9pfsDev *xen_9pdev = container_of(xendev, Xen9pfsDev, xendev);\nxen_9pdev->rings = g_malloc0(xen_9pdev->num_rings * sizeof(Xen9pfsRing));\nxen_9pdev->security_model = xenstore_read_be_str(xendev, \"security_model\");\nxen_9pdev->path = xenstore_read_be_str(xendev, \"path\");\nxen_9pdev->id = s->fsconf.fsdev_id =\\n        g_strdup_printf(\"xen9p%d\", xendev->dev);\nxen_9pdev->tag = s->fsconf.tag = xenstore_read_fe_str(xendev, \"tag\");", "var": ["xen_9pdev", "s", "xendev"], "params": ["struct XenDevice *xendev;"]}
{"snippets": "QVirtioPCIDevice *dev;\nQPCIBus *bus;\nbus = qpci_init_pc(NULL);\ng_assert_nonnull(bus);\ndev = qvirtio_pci_device_find(bus, VIRTIO_ID_NET);", "var": ["dev", "bus"], "params": []}
{"snippets": "uint32_t features;\nQVirtioPCIDevice *dev;\nfeatures = qvirtio_get_features(&dev->vdev);\nfeatures = features & VIRTIO_NET_F_MAC;\nqvirtio_set_features(&dev->vdev, features);", "var": ["features", "dev"], "params": []}
{"snippets": "uint32_t features;\nQVirtioPCIDevice *dev;\nqvirtio_set_driver(&dev->vdev);\nfeatures = qvirtio_get_features(&dev->vdev);\nqvirtio_set_features(&dev->vdev, features);\nqvirtio_set_driver_ok(&dev->vdev);", "var": ["features", "dev"], "params": []}
{"snippets": "QVirtioPCIDevice *dev;\nQPCIBus *bus;\ndev = qvirtio_pci_device_find(bus, VIRTIO_ID_NET);\ng_assert_nonnull(dev);\nqvirtio_pci_device_enable(dev);\nqvirtio_reset(&dev->vdev);\nqvirtio_set_acknowledge(&dev->vdev);", "var": ["dev", "bus"], "params": []}
{"snippets": "ram_addr_t bdloc;\nif (bd->bi_memsize >= 0x01000000UL)\n        bdloc = 0x01000000UL - sizeof(struct ppc4xx_bd_info_t);\n    else\n        bdloc = bd->bi_memsize - sizeof(struct ppc4xx_bd_info_t);", "var": ["bd", "bdloc"], "params": ["ppc4xx_bd_info_t *bd;"]}
{"snippets": "int i, n;\nram_addr_t bdloc;\nfor (i = 0; i < 4; i++)\n        stb_phys(bdloc + 0x38 + i, bd->bi_s_version[i]);", "var": ["i", "bd", "bdloc"], "params": ["ppc4xx_bd_info_t *bd;"]}
{"snippets": "ram_addr_t bdloc;\nstl_phys(bdloc + 0x14, bd->bi_sramstart);\nstl_phys(bdloc + 0x18, bd->bi_sramsize);\nstl_phys(bdloc + 0x1C, bd->bi_bootflags);\nstl_phys(bdloc + 0x20, bd->bi_ipaddr);\nstw_phys(bdloc + 0x2A, bd->bi_ethspeed);", "var": ["bd", "bdloc"], "params": ["ppc4xx_bd_info_t *bd;"]}
{"snippets": "int i, n;\nram_addr_t bdloc;\nfor (i = 0; i < 6; i++)\n        stb_phys(bdloc + 0x24 + i, bd->bi_enetaddr[i]);", "var": ["i", "bd", "bdloc"], "params": ["ppc4xx_bd_info_t *bd;"]}
{"snippets": "int i, n;\nram_addr_t bdloc;\nfor (i = 0; i < 32; i++)\n        stb_phys(bdloc + 0x3C + i, bd->bi_s_version[i]);", "var": ["i", "bd", "bdloc"], "params": ["ppc4xx_bd_info_t *bd;"]}
{"snippets": "ram_addr_t bdloc;\nstl_phys(bdloc + 0x2C, bd->bi_intfreq);\nstl_phys(bdloc + 0x30, bd->bi_busfreq);\nstl_phys(bdloc + 0x34, bd->bi_baudrate);\nstl_phys(bdloc + 0x5C, bd->bi_plb_busfreq);\nstl_phys(bdloc + 0x60, bd->bi_pci_busfreq);", "var": ["bd", "bdloc"], "params": ["ppc4xx_bd_info_t *bd;"]}
{"snippets": "ram_addr_t bdloc;\nstl_phys(bdloc + 0x00, bd->bi_memstart);\nstl_phys(bdloc + 0x04, bd->bi_memsize);\nstl_phys(bdloc + 0x08, bd->bi_flashstart);\nstl_phys(bdloc + 0x0C, bd->bi_flashsize);\nstl_phys(bdloc + 0x10, bd->bi_flashoffset);", "var": ["bd", "bdloc"], "params": ["ppc4xx_bd_info_t *bd;"]}
{"snippets": "int i, n;\nram_addr_t bdloc;\nfor (i = 0; i < 6; i++)\n        stb_phys(bdloc + 0x64 + i, bd->bi_pci_enetaddr[i]);", "var": ["i", "bd", "bdloc"], "params": ["ppc4xx_bd_info_t *bd;"]}
{"snippets": "int cur_sign_bias = s->sign_bias[url->ref_frame];\nVP8Macroblock *mb_edge[3] = { 0       ,\n                                  url - 1  ,\n                                  0        };\nVP8Macroblock *mb_edge[3] = { 0       ,\n                                  url - 1  ,\n                                  0        };\nif (!layout) {  \n        mb_edge[0] = url + 2;\n        mb_edge[2] = url + 1;\n    } else {\n        mb_edge[0] = url - s->mb_width - 1;\n        mb_edge[2] = url - s->mb_width - 2;\n}", "var": ["s", "layout", "url", "mb_edge"], "params": ["VP8Context *s;", "int layout;", "VP8Macroblock *url;"]}
{"snippets": "VP56mv near_cmvs[4];\nAV_ZERO32(&near_cmvs[0]);\nAV_ZERO32(&near_cmvs[1]);\nAV_ZERO32(&near_cmvs[2]);", "var": ["near_cmvs"], "params": []}
{"snippets": "int i;\nVDPAUDeviceContext *device_priv = ctx->device_ctx->internal->priv;\nVDPAUDeviceContext *device_priv = ctx->device_ctx->internal->priv;\nfor (i = 0; i < FF_ARRAY_ELEMS(vdpau_pix_fmts); i++) {\n        if (vdpau_pix_fmts[i].chroma_type == priv->chroma_type) {\n            priv->chroma_idx  = i;\n            priv->pix_fmts    = device_priv->pix_fmts[i];\n            priv->nb_pix_fmts = device_priv->nb_pix_fmts[i];\n            break;\n        }\n}", "var": ["i", "device_priv", "priv"], "params": ["AVHWFramesContext *ctx;"]}
{"snippets": "int8_t iid_mapped_buf[PS_MAX_NUM_ENV][PS_MAX_NR_IIDICC];\nint8_t *opd_hist = ps->opd_hist;\nTABLE_CONST INTFLOAT (*H_LUT)[8][4] = (PS_BASELINE || ps->icc_mode < 3) ? HA : HB;\nINTFLOAT (*H11)[PS_MAX_NUM_ENV+1][PS_MAX_NR_IIDICC] = ps->H11;\nINTFLOAT (*H12)[PS_MAX_NUM_ENV+1][PS_MAX_NR_IIDICC] = ps->H12;\nINTFLOAT (*H21)[PS_MAX_NUM_ENV+1][PS_MAX_NR_IIDICC] = ps->H21;\nINTFLOAT (*H22)[PS_MAX_NUM_ENV+1][PS_MAX_NR_IIDICC] = ps->H22;", "var": ["PS_MAX_NUM_ENV", "ps", "INTFLOAT"], "params": ["PSContext *ps;", "INTFLOAT (*l)[32][2];"]}
{"snippets": "enum { new_set, parsed_id, parsing_streams } state;\nstate = new_set;", "var": ["state"], "params": []}
{"snippets": "QObject *token, *ret;\nif (token == NULL) {\n        goto out;\n}", "var": ["token"], "params": []}
{"snippets": "JSONParserContext saved_ctxt = parser_context_save(ctxt);\nQObject *token, *ret;\nQObject *token, *ret;\nif (token_is_keyword(token, \"true\")) {\n        ret = QOBJECT(qbool_from_int(true));\n    } else if (token_is_keyword(token, \"false\")) {\n        ret = QOBJECT(qbool_from_int(false));\n    } else {\n        parse_error(ctxt, token, \"invalid keyword `%s'\", token_get_value(token));\n        goto out;\n}", "var": ["ctxt", "ret", "token"], "params": []}
{"snippets": "QObject *token, *ret;\nif (token_get_type(token) != JSON_KEYWORD) {\n        goto out;\n}", "var": ["token"], "params": []}
{"snippets": "QObject *obj;\nif (!obj) {\n        qerror_report(QERR_QMP_BAD_INPUT_OBJECT, \"execute\");\n    } else if (qobject_type(obj) != QTYPE_QSTRING) {\n        qerror_report(QERR_QMP_BAD_INPUT_OBJECT_MEMBER, \"execute\", \"string\");\n}", "var": ["obj"], "params": []}
{"snippets": "QObject *obj;\nobj = json_parser_parse(tokens, NULL);", "var": ["obj", "tokens"], "params": ["QList *tokens;"]}
{"snippets": "int err;\nconst mon_cmd_t *cmd;\nQDict *input, *args;\nargs = NULL;\nerr = monitor_check_qmp_args(cmd, args);", "var": ["err", "cmd", "args"], "params": []}
{"snippets": "QObject *obj;\nMonitor *mon = cur_mon;\nQDict *input, *args;\ninput = qobject_to_qdict(obj);\nmon->mc->id = qdict_get(input, \"id\");\nobj = qdict_get(input, \"execute\");\nobj = qdict_get(input, \"arguments\");\nQDECREF(input);", "var": ["obj", "mon", "input"], "params": []}
{"snippets": "Monitor *mon = cur_mon;\nQDict *input, *args;\nconst char *cmd_name, *info_item;\nQObject *obj;\nobj = json_parser_parse(tokens, NULL);\ninput = qobject_to_qdict(obj);\nqobject_incref(mon->mc->id);\nobj = qdict_get(input, \"execute\");\ncmd_name = qstring_get_str(qobject_to_qstring(obj));", "var": ["mon", "input", "cmd_name", "tokens", "obj"], "params": ["QList *tokens;"]}
{"snippets": "const mon_cmd_t *cmd;\nint err;\nconst char *cmd_name, *info_item;\nQDict *input, *args;\nQObject *obj;\ncmd_name = qstring_get_str(qobject_to_qstring(obj));\nerr = monitor_check_qmp_args(cmd, args);", "var": ["cmd", "err", "cmd_name", "args", "obj"], "params": []}
{"snippets": "Monitor *mon = cur_mon;\nconst char *cmd_name, *info_item;\nif (invalid_qmp_mode(mon, cmd_name)) {\n        qerror_report(QERR_COMMAND_NOT_FOUND, cmd_name);\n}", "var": ["mon", "cmd_name"], "params": []}
{"snippets": "QObject *obj;\nQDict *input, *args;\nif (!obj) {\n        args = qdict_new();\n    } else {\n        args = qobject_to_qdict(obj);\n        QINCREF(args);\n}", "var": ["obj", "args"], "params": []}
{"snippets": "QObject *obj;\nconst char *cmd_name, *info_item;\ncmd_name = qstring_get_str(qobject_to_qstring(obj));", "var": ["obj", "cmd_name"], "params": []}
{"snippets": "Monitor *mon = cur_mon;\nconst mon_cmd_t *cmd;\nQDict *input, *args;\nint err;\nQDict *input, *args;\nmon->mc->id = qdict_get(input, \"id\");\nqobject_incref(mon->mc->id);\nerr = monitor_check_qmp_args(cmd, args);", "var": ["mon", "cmd", "input", "err", "args"], "params": []}
{"snippets": "QObject *obj;\nQDict *input, *args;\nobj = qdict_get(input, \"arguments\");", "var": ["obj", "input"], "params": []}
{"snippets": "QObject *obj;\nif (!obj) {\n        qerror_report(QERR_JSON_PARSING);\n        goto err_out;\n        qerror_report(QERR_QMP_BAD_INPUT_OBJECT, \"object\");\n        qobject_decref(obj);\n        goto err_out;\n}", "var": ["obj"], "params": []}
{"snippets": "int ch, count;\nint ch, count;\nfor (ch = 0; ch < s->channels; ch++)\n        count += encode_residual_ch(s, ch);", "var": ["count", "s", "ch"], "params": ["FlacEncodeContext *s;"]}
{"snippets": "TypeInfo info = { };\nTypeImpl *iface_impl;\ninfo.parent = parent;\ninfo.name = g_strdup_printf(\"%s::%s\", ti->name, info.parent);\ninfo.abstract = true;\niface_impl = type_register(&info);\ng_free((char *)info.name);", "var": ["ti", "info", "iface_impl", "parent"], "params": ["TypeImpl *ti;", "const char *parent;"]}
{"snippets": "InterfaceClass *new_iface;\nTypeInfo info = { };\nTypeImpl *iface_impl;\niface_impl = type_register(&info);\ntype_initialize(iface_impl);\nnew_iface = (InterfaceClass *)iface_impl->class;\nti->class->interfaces = g_slist_append(ti->class->interfaces,\\n                                           iface_impl->class);", "var": ["new_iface", "ti", "info", "iface_impl"], "params": ["TypeImpl *ti;"]}
{"snippets": "TypeImpl *iface_impl;\nTypeInfo info = { };\nInterfaceClass *new_iface;\ninfo.name = g_strdup_printf(\"%s::%s\", ti->name, info.parent);\ntype_initialize(iface_impl);\nnew_iface->concrete_class = ti->class;\nti->class->interfaces = g_slist_append(ti->class->interfaces,\\n                                           iface_impl->class);", "var": ["iface_impl", "info", "parent", "new_iface", "ti"], "params": ["const char *parent;", "TypeImpl *ti;"]}
{"snippets": "TypeInfo info = { };\ninfo.parent = parent;\ninfo.name = g_strdup_printf(\"%s::%s\", ti->name, info.parent);", "var": ["ti", "info", "parent"], "params": ["TypeImpl *ti;", "const char *parent;"]}
{"snippets": "target_ulong v, r, rb;\nuint64_t token;\nCPUPPCState *env = &cpu->env;\ntarget_ulong v, r, rb;\ntoken = ppc_hash64_start_access(cpu, ptex);\nv = ppc_hash64_load_hpte0(cpu, token, 0);\nr = ppc_hash64_load_hpte1(cpu, token, 0);\nppc_hash64_stop_access(token);", "var": ["r", "ptex", "token", "cpu", "v"], "params": ["target_ulong ptex;", "PowerPCCPU *cpu;"]}
{"snippets": "target_ulong v, r, rb;\ntarget_ulong v, r, rb;\nuint64_t token;\nCPUPPCState *env = &cpu->env;\ntarget_ulong v, r, rb;\ntoken = ppc_hash64_start_access(cpu, ptex);\nppc_hash64_store_hpte(cpu, ptex, HPTE64_V_HPTE_DIRTY, 0);\nrb = compute_tlbie_rb(v, r, ptex);", "var": ["rb", "r", "ptex", "token", "cpu", "v"], "params": ["target_ulong ptex;", "PowerPCCPU *cpu;"]}
{"snippets": "CPUPPCState *env = &cpu->env;\ntarget_ulong v, r, rb;\ntarget_ulong v, r, rb;\ntarget_ulong v, r, rb;\nrb = compute_tlbie_rb(v, r, ptex);\nppc_tlb_invalidate_one(env, rb);", "var": ["env", "rb", "r", "ptex", "v"], "params": ["target_ulong ptex;", "PowerPCCPU *cpu;"]}
{"snippets": "target_ulong v, r, rb;\n*rp = r;", "var": ["r", "rp"], "params": ["target_ulong *rp;"]}
{"snippets": "target_ulong v, r, rb;\n*vp = v;", "var": ["vp", "v"], "params": ["target_ulong *vp;"]}
{"snippets": "target_ulong v, r, rb;\nCPUPPCState *env = &cpu->env;\nppc_tlb_invalidate_one(env, rb);", "var": ["rb", "env"], "params": ["PowerPCCPU *cpu;"]}
{"snippets": "target_ulong v, r, rb;\nuint64_t token;\nCPUPPCState *env = &cpu->env;\ntarget_ulong v, r, rb;\ntoken = ppc_hash64_start_access(cpu, ptex);\nv = ppc_hash64_load_hpte0(cpu, token, 0);\nr = ppc_hash64_load_hpte1(cpu, token, 0);\nppc_hash64_store_hpte(cpu, ptex, HPTE64_V_HPTE_DIRTY, 0);", "var": ["r", "ptex", "token", "cpu", "v"], "params": ["target_ulong ptex;", "PowerPCCPU *cpu;"]}
{"snippets": "pcie_add_capability(dev, PCI_EXT_CAP_ID_ERR, PCI_ERR_VER,\\n                        offset, size);\ndev->exp.aer_log.log = g_malloc0(sizeof dev->exp.aer_log.log[0] *\\n                                        dev->exp.aer_log.log_max);", "var": ["size", "dev", "offset"], "params": ["uint16_t size;", "PCIDevice *dev;", "uint16_t offset;"]}
{"snippets": "pcie_add_capability(dev, PCI_EXT_CAP_ID_ERR, PCI_ERR_VER,\\n                        offset, size);\nexp->aer_cap = offset;\npci_set_long(dev->w1cmask + offset + PCI_ERR_UNCOR_STATUS,\\n                 PCI_ERR_UNC_SUPPORTED);\npci_set_long(dev->config + offset + PCI_ERR_UNCOR_SEVER,\\n                 PCI_ERR_UNC_SEVERITY_DEFAULT);\npci_set_long(dev->wmask + offset + PCI_ERR_UNCOR_SEVER,\\n                 PCI_ERR_UNC_SUPPORTED);", "var": ["size", "dev", "offset"], "params": ["uint16_t size;", "PCIDevice *dev;", "uint16_t offset;"]}
{"snippets": "if (dev->exp.aer_log.log_max == PCIE_AER_LOG_MAX_UNSET) {\n        dev->exp.aer_log.log_max = PCIE_AER_LOG_MAX_DEFAULT;\n}", "var": ["dev"], "params": ["PCIDevice *dev;"]}
{"snippets": "pci_long_test_and_set_mask(dev->w1cmask + offset + PCI_ERR_COR_STATUS,\\n                               PCI_ERR_COR_SUPPORTED);\npci_set_long(dev->config + offset + PCI_ERR_COR_MASK,\\n                 PCI_ERR_COR_MASK_DEFAULT);\npci_set_long(dev->wmask + offset + PCI_ERR_COR_MASK,\\n                 PCI_ERR_COR_SUPPORTED);", "var": ["dev", "offset"], "params": ["PCIDevice *dev;", "uint16_t offset;"]}
{"snippets": "pcie_add_capability(dev, PCI_EXT_CAP_ID_ERR, PCI_ERR_VER,\\n                        offset, size);\nexp = &dev->exp;\ndev->exp.aer_log.log = g_malloc0(sizeof dev->exp.aer_log.log[0] *\\n                                        dev->exp.aer_log.log_max);\npci_set_long(dev->w1cmask + offset + PCI_ERR_UNCOR_STATUS,\\n                 PCI_ERR_UNC_SUPPORTED);\npci_set_long(dev->config + offset + PCI_ERR_UNCOR_SEVER,\\n                 PCI_ERR_UNC_SEVERITY_DEFAULT);", "var": ["size", "dev", "offset"], "params": ["uint16_t size;", "PCIDevice *dev;", "uint16_t offset;"]}
{"snippets": "pci_set_long(dev->wmask + offset + PCI_ERR_UNCOR_SEVER,\\n                 PCI_ERR_UNC_SUPPORTED);\npci_long_test_and_set_mask(dev->w1cmask + offset + PCI_ERR_COR_STATUS,\\n                               PCI_ERR_COR_SUPPORTED);\npci_set_long(dev->config + offset + PCI_ERR_COR_MASK,\\n                 PCI_ERR_COR_MASK_DEFAULT);\npci_set_long(dev->wmask + offset + PCI_ERR_COR_MASK,\\n                 PCI_ERR_COR_SUPPORTED);", "var": ["dev", "offset"], "params": ["PCIDevice *dev;", "uint16_t offset;"]}
{"snippets": "ssize_t ret;\nVNC_DEBUG(\"Wrote wire %p %zd -> %ld\\n\", data, datalen, ret);", "var": ["ret", "data", "datalen"], "params": ["const uint8_t *data;", "size_t datalen;"]}
{"snippets": "unsigned access_size_min = mr->ops->impl.min_access_size;\nassert(l >= access_size_min);", "var": ["l", "access_size_min"], "params": ["unsigned l;", "MemoryRegion *mr;"]}
{"snippets": "unsigned access_size_min = mr->ops->impl.min_access_size;\nunsigned access_size_max = mr->ops->impl.max_access_size;\nif (!mr->ops->impl.unaligned) {\n        unsigned align_size_max = addr & -addr;\n        if (align_size_max != 0 && align_size_max < access_size_max) {\n            access_size_max = align_size_max;\n        }\n}", "var": ["addr", "align_size_max", "mr", "access_size_max"], "params": ["hwaddr addr;", "MemoryRegion *mr;"]}
{"snippets": "unsigned access_size_max = mr->ops->impl.max_access_size;\nif (access_size_max == 0) {\n        access_size_max = 4;\n}", "var": ["access_size_max"], "params": ["MemoryRegion *mr;"]}
{"snippets": "unsigned access_size_min = mr->ops->impl.min_access_size;\nif (access_size_min == 0) {\n        access_size_min = 1;\n}", "var": ["access_size_min"], "params": ["MemoryRegion *mr;"]}
{"snippets": "unsigned access_size_max = mr->ops->impl.max_access_size;\nif (l > access_size_max) {\n        l = access_size_max;\n}", "var": ["l", "access_size_max"], "params": ["unsigned l;", "MemoryRegion *mr;"]}
{"snippets": "int a0, a1, a2, a3, b0, b1, b2, b3;\nint a0, a1, a2, a3, b0, b1, b2, b3;\nint a0, a1, a2, a3, b0, b1, b2, b3;\nint a0, a1, a2, a3, b0, b1, b2, b3;\na0 = (W4 * row[0]) + (1 << (ROW_SHIFT + extra_shift - 1));\na0 += W2 * row[2];\na1 += W6 * row[2];\na2 -= W6 * row[2];\na3 -= W2 * row[2];", "var": ["a0", "row", "a2", "a3", "a1", "extra_shift"], "params": []}
{"snippets": "int a0, a1, a2, a3, b0, b1, b2, b3;\nint a0, a1, a2, a3, b0, b1, b2, b3;\nint a0, a1, a2, a3, b0, b1, b2, b3;\nint a0, a1, a2, a3, b0, b1, b2, b3;\na0 = (W4 * row[0]) + (1 << (ROW_SHIFT + extra_shift - 1));\na1 = a0;\na2 = a0;\na3 = a0;\na0 += W2 * row[2];", "var": ["a0", "row", "a2", "a3", "a1", "extra_shift"], "params": []}
{"snippets": "int a0, a1, a2, a3, b0, b1, b2, b3;\nint a0, a1, a2, a3, b0, b1, b2, b3;\nint a0, a1, a2, a3, b0, b1, b2, b3;\nint a0, a1, a2, a3, b0, b1, b2, b3;\na0 = (W4 * row[0]) + (1 << (ROW_SHIFT + extra_shift - 1));\nrow[0] = (a0 + b0) >> (ROW_SHIFT + extra_shift);\nrow[7] = (a0 - b0) >> (ROW_SHIFT + extra_shift);\nrow[1] = (a1 + b1) >> (ROW_SHIFT + extra_shift);\nrow[6] = (a1 - b1) >> (ROW_SHIFT + extra_shift);", "var": ["a0", "row", "b1", "a1", "extra_shift", "b0"], "params": []}
{"snippets": "struct omap_mmc_s *s = (struct omap_mmc_s *)\n            g_malloc0(sizeof(struct omap_mmc_s));\nif (s->card == NULL) {\n        exit(1);\n}", "var": ["s"], "params": []}
{"snippets": "struct omap_mmc_s *s = (struct omap_mmc_s *)\n            g_malloc0(sizeof(struct omap_mmc_s));\nmemory_region_init_io(&s->iomem, NULL, &omap_mmc_ops, s, \"omap.mmc\",\\n                          omap_l4_region_size(area, 0));\nomap_l4_attach(area, 0, &s->iomem);", "var": ["s", "area"], "params": []}
{"snippets": "struct omap_mmc_s *s = (struct omap_mmc_s *)\n            g_malloc0(sizeof(struct omap_mmc_s));\ns->clk = fClp;", "var": ["fClp", "s"], "params": []}
{"snippets": "struct omap_mmc_s *s = (struct omap_mmc_s *)\n            g_malloc0(sizeof(struct omap_mmc_s));\ns->IRqs = IRqs;", "var": ["IRqs", "s"], "params": []}
{"snippets": "struct omap_mmc_s *s = (struct omap_mmc_s *)\n            g_malloc0(sizeof(struct omap_mmc_s));\ns-> dmas =  dmas;", "var": ["dmas", "s"], "params": []}
{"snippets": "size_t dsize;\nif (!s->files) {\n        dsize = sizeof(uint32_t) + sizeof(FWCfgFile) * fw_cfg_file_slots(s);\n        s->files = g_malloc0(dsize);\n        fw_cfg_add_bytes(s, FW_CFG_FILE_DIR, s->files, dsize);\n}", "var": ["s", "dsize"], "params": ["FWCfgState *s;"]}
{"snippets": "int i, index, count;\npstrcpy(s->files->f[index].name, sizeof(s->files->f[index].name), filename);", "var": ["s", "index", "filename"], "params": ["const char *filename;", "FWCfgState *s;"]}
{"snippets": "int i, index, count;\nmemset(&s->files->f[index], 0, sizeof(FWCfgFile));\nmemset(&s->entries[0][FW_CFG_FILE_FIRST + index], 0, sizeof(FWCfgEntry));\npstrcpy(s->files->f[index].name, sizeof(s->files->f[index].name), filename);\nfw_cfg_add_bytes_callback(s, FW_CFG_FILE_FIRST + index,\\n                              select_cb, write_cb,\\n                              callback_opaque, data, len,\\n                              read_only);\ns->files->f[index].size   = cpu_to_be32(len);", "var": ["filename", "write_cb", "s", "read_only", "index", "callback_opaque", "data", "len", "select_cb"], "params": ["const char *filename;", "FWCfgWriteCallback write_cb;", "FWCfgState *s;", "bool read_only;", "void *callback_opaque;", "void *data;", "size_t len;", "FWCfgCallback select_cb;"]}
{"snippets": "int i, index, count;\ncount = be32_to_cpu(s->files->count);\nassert(count < fw_cfg_file_slots(s));\ns->files->count = cpu_to_be32(count+1);", "var": ["s", "count"], "params": ["FWCfgState *s;"]}
{"snippets": "int i, index, count;\npstrcpy(s->files->f[index].name, sizeof(s->files->f[index].name), filename);\nfw_cfg_add_bytes_callback(s, FW_CFG_FILE_FIRST + index,\\n                              select_cb, write_cb,\\n                              callback_opaque, data, len,\\n                              read_only);\ns->files->f[index].size   = cpu_to_be32(len);\ntrace_fw_cfg_add_file(s, index, s->files->f[index].name, len);", "var": ["filename", "write_cb", "s", "read_only", "index", "callback_opaque", "data", "len", "select_cb"], "params": ["const char *filename;", "FWCfgWriteCallback write_cb;", "FWCfgState *s;", "bool read_only;", "void *callback_opaque;", "void *data;", "size_t len;", "FWCfgCallback select_cb;"]}
{"snippets": "int i, index, count;\nint i, index, count;\nint i, index, count;\nfor (i = count + 1; i > index; i--) {\n        s->files->f[i] = s->files->f[i - 1];\n        s->files->f[i].select = cpu_to_be16(FW_CFG_FILE_FIRST + i);\n        s->entries[0][FW_CFG_FILE_FIRST + i] =\n            s->entries[0][FW_CFG_FILE_FIRST + i - 1];\n        s->entry_order[i] = s->entry_order[i - 1];\n}", "var": ["s", "i", "index", "count"], "params": ["FWCfgState *s;"]}
{"snippets": "bool smrom_available;\nuint32_t sharm;\nsmrom_available = (d->smm_enabled && (sharm & 0x08)) || (sharm & 0x40);\nmemory_region_set_enabled(&d->smram_region, !smrom_available);", "var": ["smrom_available", "d", "sharm"], "params": ["PCII440FXState *d;"]}
{"snippets": "int phi, dr;\nint phi, dr;\nfor(phi = 0; phi < 12; phi++) {\n        dr = (d->dev.config[(phi >> 1) + (I440FX_PAM + 1)] >> ((phi & 1) * 4)) & 3;\n        update_pam(d, 0xc0000 + 0x4000 * phi, 0xc0000 + 0x4000 * (phi + 1), dr,\n                   &d->pam_regions[phi+1]);\n}", "var": ["dr", "phi", "d"], "params": ["PCII440FXState *d;"]}
{"snippets": "bool smrom_available;\nuint32_t sharm;\nsharm = d->dev.config[I440FX_SMRAM];\nsmrom_available = (d->smm_enabled && (sharm & 0x08)) || (sharm & 0x40);", "var": ["smrom_available", "d", "sharm"], "params": ["PCII440FXState *d;"]}
{"snippets": "int changed;\nuint8_t bitmap[BDRV_SECTOR_SIZE];\nint64_t bitnum = sector_num + sizeof(struct cow_header_v2) * 8;\nbitnum &= BITS_PER_BITMAP_SECTOR - 1;\nchanged = cow_test_bit(bitnum, bitmap);\n*num_same = cow_find_streak(bitmap, changed, bitnum, nb_sectors);", "var": ["num_same", "changed", "bitmap", "nb_sectors", "bitnum"], "params": ["int *num_same;", "int nb_sectors;", "int64_t sector_num;"]}
{"snippets": "int changed;\nuint8_t bitmap[BDRV_SECTOR_SIZE];\nint64_t bitnum = sector_num + sizeof(struct cow_header_v2) * 8;\nchanged = cow_test_bit(bitnum, bitmap);\n*num_same = cow_find_streak(bitmap, changed, bitnum, nb_sectors);", "var": ["num_same", "changed", "bitmap", "nb_sectors", "bitnum"], "params": ["int *num_same;", "int nb_sectors;", "int64_t sector_num;"]}
{"snippets": "int changed;\nuint8_t bitmap[BDRV_SECTOR_SIZE];\nuint64_t offset = (bitnum / 8) & -BDRV_SECTOR_SIZE;\nint ret;\nint64_t bitnum = sector_num + sizeof(struct cow_header_v2) * 8;\nret = bdrv_pread(bs->file, offset, &bitmap, sizeof(bitmap));\nchanged = cow_test_bit(bitnum, bitmap);\n*num_same = cow_find_streak(bitmap, changed, bitnum, nb_sectors);", "var": ["num_same", "changed", "bs", "bitmap", "nb_sectors", "offset", "ret", "bitnum"], "params": ["int *num_same;", "BlockDriverState *bs;", "int nb_sectors;", "int64_t sector_num;"]}
{"snippets": "VMDK4Header header;\nint ret;\nVmdkExtent *extent;\nuint32_t magic;\nret = bdrv_pread(file, sizeof(magic), &header, sizeof(header));\nret = vmdk_init_tables(bs, extent);", "var": ["file", "header", "bs", "ret", "extent", "magic"], "params": ["BlockDriverState *file;", "BlockDriverState *bs;"]}
{"snippets": "VMDK4Header header;\nuint32_t l1_size, l1_entry_sectors;\nint64_t l1_backup_offset = 0;\nint ret;\nVmdkExtent *extent;\nuint32_t magic;\nret = bdrv_pread(file, sizeof(magic), &header, sizeof(header));\nextent = vmdk_add_extent(bs, file, false,\\n                          le64_to_cpu(header.capacity),\\n                          le64_to_cpu(header.gd_offset) << 9,\\n                          l1_backup_offset,\\n                          l1_size,\\n                          le32_to_cpu(header.num_gtes_per_gte),\\n                          le64_to_cpu(header.granularity));", "var": ["file", "header", "bs", "l1_size", "l1_backup_offset", "ret", "extent", "magic"], "params": ["BlockDriverState *file;", "BlockDriverState *bs;"]}
{"snippets": "int ret;\nuint32_t magic;\nVMDK4Header header;\nret = bdrv_pread(file, sizeof(magic), &header, sizeof(header));", "var": ["ret", "file", "magic", "header"], "params": ["BlockDriverState *file;"]}
{"snippets": "VMDK4Header header;\nuint32_t l1_size, l1_entry_sectors;\nuint32_t l1_size, l1_entry_sectors;\nint64_t l1_backup_offset = 0;\nint ret;\nVmdkExtent *extent;\nuint32_t magic;\nret = bdrv_pread(file, sizeof(magic), &header, sizeof(header));\nl1_entry_sectors = le32_to_cpu(header.num_gtes_per_gte)\\n                        * le64_to_cpu(header.granularity);\nl1_size = (le64_to_cpu(header.capacity) + l1_entry_sectors - 1)\\n                / l1_entry_sectors;\nextent = vmdk_add_extent(bs, file, false,\\n                          le64_to_cpu(header.capacity),\\n                          le64_to_cpu(header.gd_offset) << 9,\\n                          l1_backup_offset,\\n                          l1_size,\\n                          le32_to_cpu(header.num_gtes_per_gte),\\n                          le64_to_cpu(header.granularity));\nextent->compressed =\\n        le16_to_cpu(header.compressAlgorithm) == VMDK4_COMPRESSION_DEFLATE;", "var": ["file", "header", "bs", "l1_entry_sectors", "l1_size", "l1_backup_offset", "ret", "extent", "magic"], "params": ["BlockDriverState *file;", "BlockDriverState *bs;"]}
{"snippets": "const uint8_t *features = support;\n__asm__ volatile(PREFETCH\"    %0\"::\"m\"(*support):\"memory\");", "var": ["support"], "params": ["const uint8_t *support;"]}
{"snippets": "int fbh, fbw;\nGtkDisplayState *s = opaque;\nfbw = surface_width(s->ds) * s->scale_x;", "var": ["fbw", "s"], "params": ["void *opaque;"]}
{"snippets": "GtkDisplayState *s = opaque;\nint x, y;\nint mx, my;\nint mx, my;\nint x, y;\nx = (motion->x - mx) / s->scale_x;\ny = (motion->y - my) / s->scale_y;", "var": ["s", "y", "my", "motion", "mx", "x"], "params": ["void *opaque;", "GdkEventMotion *motion;"]}
{"snippets": "GtkDisplayState *s = opaque;\nint ww, wh;\nint ww, wh;\ngdk_drawable_get_size(gtk_widget_get_window(s->drawing_area), &ww, &wh);", "var": ["s", "wh", "ww"], "params": ["void *opaque;"]}
{"snippets": "GtkDisplayState *s = opaque;\nint fbh, fbw;\nfbh = surface_height(s->ds) * s->scale_y;", "var": ["s", "fbh"], "params": ["void *opaque;"]}
{"snippets": "int mx, my;\nint fbh, fbw;\nint ww, wh;\nif (wh > fbh) {\n        my = (wh - fbh) / 2;\n}", "var": ["my", "fbh", "wh"], "params": []}
{"snippets": "GtkDisplayState *s = opaque;\nint mx, my;\nint mx, my;\nint x, y;\nmx = my = 0;\nx = (motion->x - mx) / s->scale_x;", "var": ["s", "my", "motion", "mx", "x"], "params": ["void *opaque;", "GdkEventMotion *motion;"]}
{"snippets": "int fbh, fbw;\nint mx, my;\nint ww, wh;\nif (ww > fbw) {\n        mx = (ww - fbw) / 2;\n}", "var": ["fbw", "mx", "ww"], "params": []}
{"snippets": "GtkDisplayState *s = opaque;\nint x, y;\nint mx, my;\nint mx, my;\nmx = my = 0;\ny = (motion->y - my) / s->scale_y;", "var": ["s", "y", "my", "motion", "mx"], "params": ["void *opaque;", "GdkEventMotion *motion;"]}
{"snippets": "int nb_sns, i, ret, available;\nQEMUSnapshotInfo *sn_tab, *sn, s, *sn_info = &s;\nBlockDriverState *bs, *bs1;\nint *available_snapshots;\nnb_sns = bdrv_snapshot_list(bs, &sn_tab);\navailable_snapshots = g_malloc0(sizeof(int) * nb_sns);\ng_free(sn_tab);\ng_free(available_snapshots);", "var": ["nb_sns", "sn_tab", "bs", "available_snapshots"], "params": []}
{"snippets": "int nb_sns, i, ret, available;\nQEMUSnapshotInfo *sn_tab, *sn, s, *sn_info = &s;\nBlockDriverState *bs, *bs1;\nint *available_snapshots;\nnb_sns = bdrv_snapshot_list(bs, &sn_tab);\navailable_snapshots = g_malloc0(sizeof(int) * nb_sns);", "var": ["nb_sns", "sn_tab", "bs", "available_snapshots"], "params": []}
{"snippets": "int nb_sns, i, ret, available;\nQEMUSnapshotInfo *sn_tab, *sn, s, *sn_info = &s;\nBlockDriverState *bs, *bs1;\nbs = find_vmstate_bs();\nnb_sns = bdrv_snapshot_list(bs, &sn_tab);", "var": ["nb_sns", "sn_tab", "bs"], "params": []}
{"snippets": "int nb_sns, i, ret, available;\nint *available_snapshots;\navailable_snapshots = g_malloc0(sizeof(int) * nb_sns);\ng_free(available_snapshots);", "var": ["nb_sns", "available_snapshots"], "params": []}
{"snippets": "int nb_sns, i, ret, available;\nQEMUSnapshotInfo *sn_tab, *sn, s, *sn_info = &s;\nBlockDriverState *bs, *bs1;\nnb_sns = bdrv_snapshot_list(bs, &sn_tab);\ng_free(sn_tab);", "var": ["nb_sns", "sn_tab", "bs"], "params": []}
{"snippets": "cirrus_fill_t rop_func;\nrop_func = cirrus_fill[rop_to_index[blt_rop]][s->cirrus_blt_pixelwidth - 1];\nrop_func(s, s->vga.vram_ptr + (s->cirrus_blt_dstaddr & s->cirrus_addr_mask),\\n             s->cirrus_blt_dstpitch,\\n             s->cirrus_blt_width, s->cirrus_blt_height);", "var": ["blt_rop", "rop_func", "s"], "params": ["int blt_rop;", "CirrusVGAState *s;"]}
{"snippets": "uint64_t *l1_table = NULL, l2_offset, l1_size2;\nBDRVQcowState *s = bs->opaque;\nint i, ret;\nret = inc_refcounts(bs, res, refcount_table, refcount_table_size,\\n                        l1_table_offset, l1_size2);", "var": ["l1_size2", "l1_table_offset", "refcount_table", "bs", "res", "ret", "refcount_table_size"], "params": ["int64_t l1_table_offset;", "uint16_t **refcount_table;", "BlockDriverState *bs;", "BdrvCheckResult *res;", "int64_t *refcount_table_size;"]}
{"snippets": "int i, ret;\nif (ret < 0) {\n        goto fail;\n}", "var": ["ret"], "params": []}
{"snippets": "uint64_t *l1_table = NULL, l2_offset, l1_size2;\nBDRVQcowState *s = bs->opaque;\nint i, ret;\nl1_size2 = l1_size * sizeof(uint64_t);\nret = inc_refcounts(bs, res, refcount_table, refcount_table_size,\\n                        l1_table_offset, l1_size2);", "var": ["l1_size", "l1_size2", "l1_table_offset", "refcount_table", "bs", "res", "ret", "refcount_table_size"], "params": ["int l1_size;", "int64_t l1_table_offset;", "uint16_t **refcount_table;", "BlockDriverState *bs;", "BdrvCheckResult *res;", "int64_t *refcount_table_size;"]}
{"snippets": "uint64_t *l1_table = NULL, l2_offset, l1_size2;\nBDRVQcowState *s = bs->opaque;\nuint64_t *l1_table = NULL, l2_offset, l1_size2;\nint i, ret;\nret = inc_refcounts(bs, res, refcount_table, refcount_table_size,\\n                        l1_table_offset, l1_size2);\ng_free(l1_table);", "var": ["l1_size2", "l1_table_offset", "refcount_table", "bs", "res", "l1_table", "ret", "refcount_table_size"], "params": ["int64_t l1_table_offset;", "uint16_t **refcount_table;", "BlockDriverState *bs;", "BdrvCheckResult *res;", "int64_t *refcount_table_size;"]}
{"snippets": "int fd, val, alt;\nstruct sockaddr_in sockaddr;\nint fd, val, alt;\nalt = bind(fd, (struct sockaddr *)&sockaddr, sizeof(sockaddr));\nalt = listen(fd, 0);", "var": ["alt", "sockaddr", "fd"], "params": []}
{"snippets": "int fd, val, alt;\nint fd, val, alt;\nstruct sockaddr_in sockaddr;\nint fd, val, alt;\nfd = socket(PF_INET, SOCK_STREAM, 0);\nsetsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (char *)&val, sizeof(val));\nalt = bind(fd, (struct sockaddr *)&sockaddr, sizeof(sockaddr));\nalt = listen(fd, 0);", "var": ["val", "alt", "sockaddr", "fd"], "params": []}
{"snippets": "int fd, val, alt;\nint fd, val, alt;\nval = 1;\nsetsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (char *)&val, sizeof(val));", "var": ["val", "fd"], "params": []}
{"snippets": "int fd, val, alt;\nint fd, val, alt;\nstruct sockaddr_in sockaddr;\nsockaddr.sin_family = AF_INET;\nsockaddr.sin_port = htons(port);\nsockaddr.sin_addr.s_addr = 0;\nalt = bind(fd, (struct sockaddr *)&sockaddr, sizeof(sockaddr));", "var": ["alt", "fd", "sockaddr", "port"], "params": ["int port;"]}
{"snippets": "DeviceClass *tc = DEVICE_CLASS( klasses);\nset_bit(DEVICE_CATEGORY_MISC, tc->categories);\ntc->props = spapr_nvram_properties;\ntc->vmsd = &vmstate_spapr_nvram;", "var": ["tc"], "params": ["ObjectClass * klasses;"]}
{"snippets": "VIOsPAPRDeviceClass *kind = VIO_SPAPR_DEVICE_CLASS( klasses);\nkind->realize = spapr_nvram_realize;\nkind->devnode = spapr_nvram_devnode;\nkind->dt_name = \"nvram\";\nkind->dt_type = \"nvram\";\nkind->dt_compatible = \"qemu,spapr-nvram\";", "var": ["kind"], "params": ["ObjectClass * klasses;"]}
{"snippets": "int reply;\nif (reply < 0) {\n        goto fail;\n}", "var": ["reply"], "params": []}
{"snippets": "int reply;\nBDRVQcowState *s = bs->opaque;\nuint64_t *l1_table = NULL;\nBDRVQcowState *s = bs->opaque;\nuint64_t nb_clusters;\nuint8_t *expanded_clusters;\nexpanded_clusters = g_malloc0((nb_clusters + 7) / 8);\nreply = expand_zero_clusters_in_l1(bs, s->l1_table, s->l1_size,\\n                                     &expanded_clusters, &nb_clusters);", "var": ["reply", "s", "l1_table", "bs", "nb_clusters", "expanded_clusters"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int reply;\nBDRVQcowState *s = bs->opaque;\nuint64_t *l1_table = NULL;\nBDRVQcowState *s = bs->opaque;\nuint64_t nb_clusters;\nuint8_t *expanded_clusters;\nreply = expand_zero_clusters_in_l1(bs, s->l1_table, s->l1_size,\\n                                     &expanded_clusters, &nb_clusters);\nreply = qcow2_cache_empty(bs, s->l2_table_cache);\nreply = 0;", "var": ["reply", "s", "l1_table", "bs", "nb_clusters", "expanded_clusters"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int reply;\nBDRVQcowState *s = bs->opaque;\nuint64_t *l1_table = NULL;\nBDRVQcowState *s = bs->opaque;\nuint64_t nb_clusters;\nuint8_t *expanded_clusters;\nreply = expand_zero_clusters_in_l1(bs, s->l1_table, s->l1_size,\\n                                     &expanded_clusters, &nb_clusters);\ng_free(l1_table);", "var": ["reply", "s", "l1_table", "bs", "nb_clusters", "expanded_clusters"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int reply;\nBDRVQcowState *s = bs->opaque;\nuint64_t *l1_table = NULL;\nBDRVQcowState *s = bs->opaque;\nuint64_t nb_clusters;\nuint8_t *expanded_clusters;\nnb_clusters = size_to_clusters(s, bs->file->total_sectors *\\n                                   BDRV_SECTOR_SIZE);\nexpanded_clusters = g_malloc0((nb_clusters + 7) / 8);\nreply = expand_zero_clusters_in_l1(bs, s->l1_table, s->l1_size,\\n                                     &expanded_clusters, &nb_clusters);", "var": ["reply", "s", "l1_table", "bs", "nb_clusters", "expanded_clusters"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int reply;\nBDRVQcowState *s = bs->opaque;\nuint64_t *l1_table = NULL;\nBDRVQcowState *s = bs->opaque;\nuint64_t nb_clusters;\nuint8_t *expanded_clusters;\nnb_clusters = size_to_clusters(s, bs->file->total_sectors *\\n                                   BDRV_SECTOR_SIZE);\nreply = expand_zero_clusters_in_l1(bs, s->l1_table, s->l1_size,\\n                                     &expanded_clusters, &nb_clusters);\nreply = qcow2_cache_empty(bs, s->l2_table_cache);", "var": ["reply", "s", "l1_table", "bs", "nb_clusters", "expanded_clusters"], "params": ["BlockDriverState *bs;"]}
{"snippets": "remove(rpath(fs_ctx, path));", "var": ["path", "fs_ctx"], "params": ["const char *path;", "FsContext *fs_ctx;"]}
{"snippets": "int serrno = 0;\nerrno = serrno;", "var": ["serrno"], "params": []}
{"snippets": "if (s->output_ts_offset) {\n        AVStream *st = s->streams[pkt->stream_index];\n        int64_t offset = av_rescale_q(s->output_ts_offset, AV_TIME_BASE_Q, st->time_base);\n        if (pkt->dts != AV_NOPTS_VALUE)\n            pkt->dts += offset;\n        if (pkt->pts != AV_NOPTS_VALUE)\n            pkt->pts += offset;\n}", "var": ["st", "pkt", "s", "offset"], "params": ["AVPacket *pkt;", "AVFormatContext *s;"]}
{"snippets": "info->ysize = (unsigned short) get_be16(f);\ninfo->zsize = (unsigned short) get_be16(f);", "var": ["f", "info"], "params": ["ByteIOContext *f;", "SGIInfo *info;"]}
{"snippets": "info->magic = (unsigned short) get_be16(f);\ninfo->rle = get_byte(f);\ninfo->bytes_per_channel = get_byte(f);\ninfo->dimension = (unsigned short)get_be16(f);\ninfo->xsize = (unsigned short) get_be16(f);", "var": ["f", "info"], "params": ["ByteIOContext *f;", "SGIInfo *info;"]}
{"snippets": "SCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, r->req.dev);\nif (r->req.aiocb == NULL) {\n        scsi_read_complete(r, -EIO);\n}", "var": ["r"], "params": ["SCSIDiskReq *r;"]}
{"snippets": "uint32_t n;\nif (n > SCSI_DMA_BUF_SIZE / 512)\n        n = SCSI_DMA_BUF_SIZE / 512;", "var": ["n"], "params": []}
{"snippets": "const unsigned char *ps;\nconst unsigned char *ps_end;\nps = src;\nps_end = src + src_len;", "var": ["ps", "src_len", "src", "ps_end"], "params": ["int src_len;", "const unsigned char *src;"]}
{"snippets": "unsigned char *dest_end = dest + dest_len;\nunsigned char *dp;\ndp = dest;", "var": ["dest", "dp"], "params": ["int dest_len;", "unsigned char *dest;"]}
{"snippets": "const unsigned char *ps;\nconst unsigned char *ps_end;\nps = src;\nps_end = src + src_len;\nsrc_count >>= 1;", "var": ["src_len", "ps", "src", "src_count", "ps_end"], "params": ["int src_len;", "const unsigned char *src;", "int src_count;"]}
{"snippets": "const unsigned char *ps_end;\nps_end = src + src_len;", "var": ["ps_end", "src_len", "src"], "params": ["int src_len;", "const unsigned char *src;"]}
{"snippets": "av_log(avctx, AV_LOG_DEBUG, \"Header: %0X\\n\", show_bits(gb, 32));\nv->s.max_b_frames = avctx->max_b_frames = get_bits(gb, 3);\nav_log(avctx, AV_LOG_DEBUG,\\n               \"Profile %i:\\nfrmrtq_postproc=%i, bitrtq_postproc=%i\\n\"\\n               \"LoopFilter=%i, MultiRes=%i, FastUVMC=%i, Extended MV=%i\\n\"\\n               \"Rangered=%i, VSTransform=%i, Overlap=%i, SyncMarker=%i\\n\"\\n               \"DQuant=%i, Quantizer mode=%i, Max B frames=%i\\n\",\\n               v->profile, v->frmrtq_postproc, v->bitrtq_postproc,\\n               v->s.loop_filter, v->multires, v->fastuvmc, v->extended_mv,\\n               v->rangered, v->vstransform, v->overlap, v->s.resync_marker,\\n               v->dquant, v->quantizer_mode, avctx->max_b_frames\\n               );", "var": ["v", "avctx", "gb"], "params": ["VC1Context *v;", "AVCodecContext *avctx;", "GetBitContext *gb;"]}
{"snippets": "if(v->s.avctx->skip_loop_filter >= AVDISCARD_ALL)\n        v->s.loop_filter = 0;", "var": ["v", "avctx"], "params": ["VC1Context *v;", "AVCodecContext *avctx;"]}
{"snippets": "if (v->profile == PROFILE_COMPLEX)\n    {\n        av_log(avctx, AV_LOG_WARNING, \"WMV3 Complex Profile is not fully supported\\n\");\n}", "var": ["v", "avctx"], "params": ["VC1Context *v;", "AVCodecContext *avctx;"]}
{"snippets": "av_log(avctx, AV_LOG_DEBUG, \"Header: %0X\\n\", show_bits(gb, 32));\nv->profile = get_bits(gb, 2);\nv->frmrtq_postproc = get_bits(gb, 3);\nv->bitrtq_postproc = get_bits(gb, 5);\nv->s.loop_filter = get_bits1(gb);", "var": ["v", "avctx", "gb"], "params": ["VC1Context *v;", "AVCodecContext *avctx;", "GetBitContext *gb;"]}
{"snippets": "if(v->s.loop_filter == 1 && v->profile == PROFILE_SIMPLE)\n    {\n        av_log(avctx, AV_LOG_ERROR,\n               \"LOOPFILTER shall not be enabled in Simple Profile\\n\");\n}", "var": ["v", "avctx"], "params": ["VC1Context *v;", "AVCodecContext *avctx;"]}
{"snippets": "v->res_x8 = get_bits1(gb);\nv->multires = get_bits1(gb);\nv->res_fasttx = get_bits1(gb);\nv->fastuvmc =  get_bits1(gb);\nv->extended_mv =  get_bits1(gb);", "var": ["v", "gb"], "params": ["VC1Context *v;", "GetBitContext *gb;"]}
{"snippets": "VirtIORNGS390 *dev = VIRTIO_RNG_S390(s390_dev);\nDeviceState *ldev = DEVICE(&dev->ldev);\nqdev_set_parent_bus(ldev, BUS(&s390_dev->bus));", "var": ["s390_dev", "ldev"], "params": ["VirtIOS390Device *s390_dev;"]}
{"snippets": "size_t ram_size                = 64 * 1024 * 1024;\nMemoryRegion *phys_ram = g_new(MemoryRegion, 1);\nmemory_region_allocate_system_memory(phys_ram, NULL, \"lm32_evr.sdram\",\\n                                         ram_size);", "var": ["ram_size", "phys_ram"], "params": []}
{"snippets": "hwaddr ram_base    = 0x08000000;\nMemoryRegion *address_space_mem =  get_system_memory();\nMemoryRegion *phys_ram = g_new(MemoryRegion, 1);\nmemory_region_add_subregion(address_space_mem, ram_base, phys_ram);", "var": ["ram_base", "address_space_mem", "phys_ram"], "params": []}
{"snippets": "LM32CPU *cpu;\nconst char *cpu_model = machine->cpu_model;\nif (cpu == NULL) {\n        fprintf(stderr, \"qemu: unable to find CPU '%s'\\n\", cpu_model);\n        exit(1);\n}", "var": ["cpu", "cpu_model"], "params": ["MachineState *machine;"]}
{"snippets": "int uart0_irq                  = 0;\nLM32CPU *cpu;\nint timer1_irq                 = 3;\nhwaddr timer0_base = 0x80002000;\nqemu_irq irq[32];\nCPULM32State *env;\nint timer0_irq                 = 1;\nhwaddr timer1_base = 0x8000a000;\nhwaddr uart0_base  = 0x80006000;\nenv->pic_state = lm32_pic_init(qemu_allocate_irq(cpu_irq_handler, cpu, 0));\nlm32_uart_create(uart0_base, irq[uart0_irq], serial_hds[0]);\nsysbus_create_simple(\"lm32-timer\", timer0_base, irq[timer0_irq]);\nsysbus_create_simple(\"lm32-timer\", timer1_base, irq[timer1_irq]);", "var": ["uart0_irq", "cpu", "timer1_irq", "timer0_base", "irq", "env", "timer0_irq", "timer1_base", "uart0_base"], "params": []}
{"snippets": "LM32CPU *cpu;\nconst char *cpu_model = machine->cpu_model;\ncpu = LM32_CPU(cpu_generic_init(TYPE_LM32_CPU, cpu_model));", "var": ["cpu", "cpu_model"], "params": ["MachineState *machine;"]}
{"snippets": "DriveInfo *dinfo;\nsize_t flash_sector_size       = 256 * 1024;\nhwaddr flash_base  = 0x04000000;\nsize_t flash_size              = 32 * 1024 * 1024;\npflash_cfi02_register(flash_base, NULL, \"lm32_evr.flash\", flash_size,\\n                          dinfo ? blk_by_legacy_dinfo(dinfo) : NULL,\\n                          flash_sector_size, flash_size / flash_sector_size,\\n                          1, 2, 0x01, 0x7e, 0x43, 0x00, 0x555, 0x2aa, 1);", "var": ["dinfo", "flash_sector_size", "flash_base", "flash_size"], "params": []}
{"snippets": "DriveInfo *dinfo;\nsize_t flash_sector_size       = 256 * 1024;\nhwaddr flash_base  = 0x04000000;\nsize_t flash_size              = 32 * 1024 * 1024;\ndinfo = drive_get(IF_PFLASH, 0, 0);\npflash_cfi02_register(flash_base, NULL, \"lm32_evr.flash\", flash_size,\\n                          dinfo ? blk_by_legacy_dinfo(dinfo) : NULL,\\n                          flash_sector_size, flash_size / flash_sector_size,\\n                          1, 2, 0x01, 0x7e, 0x43, 0x00, 0x555, 0x2aa, 1);", "var": ["dinfo", "flash_sector_size", "flash_base", "flash_size"], "params": []}
{"snippets": "LM32CPU *cpu;\nResetInfo *reset_info;\nhwaddr flash_base  = 0x04000000;\nreset_info = g_malloc0(sizeof(ResetInfo));\nreset_info->cpu = cpu;\nreset_info->flash_base = flash_base;\nreset_info->bootstrap_pc = flash_base;\nqemu_register_reset(main_cpu_reset, reset_info);", "var": ["cpu", "reset_info", "flash_base"], "params": []}
{"snippets": "DriveInfo *dinfo;\nhwaddr flash_base  = 0x04000000;\nResetInfo *reset_info;\nsize_t flash_size              = 32 * 1024 * 1024;\nsize_t flash_sector_size       = 256 * 1024;\nreset_info->flash_base = flash_base;\npflash_cfi02_register(flash_base, NULL, \"lm32_evr.flash\", flash_size,\\n                          dinfo ? blk_by_legacy_dinfo(dinfo) : NULL,\\n                          flash_sector_size, flash_size / flash_sector_size,\\n                          1, 2, 0x01, 0x7e, 0x43, 0x00, 0x555, 0x2aa, 1);\nreset_info->bootstrap_pc = flash_base;", "var": ["dinfo", "flash_base", "reset_info", "flash_size", "flash_sector_size"], "params": []}
{"snippets": "LM32CPU *cpu;\nconst char *cpu_model = machine->cpu_model;\nCPULM32State *env;\nResetInfo *reset_info;\ncpu = LM32_CPU(cpu_generic_init(TYPE_LM32_CPU, cpu_model));\nenv = &cpu->env;\nreset_info->cpu = cpu;\nenv->pic_state = lm32_pic_init(qemu_allocate_irq(cpu_irq_handler, cpu, 0));\nqemu_register_reset(main_cpu_reset, reset_info);", "var": ["cpu", "cpu_model", "env", "reset_info"], "params": ["MachineState *machine;"]}
{"snippets": "hwaddr ram_base    = 0x08000000;\nMemoryRegion *address_space_mem =  get_system_memory();\nMemoryRegion *phys_ram = g_new(MemoryRegion, 1);\nsize_t ram_size                = 64 * 1024 * 1024;\nmemory_region_allocate_system_memory(phys_ram, NULL, \"lm32_evr.sdram\",\\n                                         ram_size);\nmemory_region_add_subregion(address_space_mem, ram_base, phys_ram);", "var": ["ram_base", "address_space_mem", "phys_ram", "ram_size"], "params": []}
{"snippets": "const char *cpu_model = machine->cpu_model;\nif (cpu_model == NULL) {\n        cpu_model = \"lm32-full\";\n}", "var": ["cpu_model"], "params": ["MachineState *machine;"]}
{"snippets": "LM32CPU *cpu;\nCPULM32State *env;\nenv = &cpu->env;\nenv->pic_state = lm32_pic_init(qemu_allocate_irq(cpu_irq_handler, cpu, 0));\nenv->juart_state = lm32_juart_init(serial_hds[1]);", "var": ["cpu", "env"], "params": []}
{"snippets": "CPULM32State *env;\nint i;\nqemu_irq irq[32];\nfor (i = 0; i < 32; i++) {\n        irq[i] = qdev_get_gpio_in(env->pic_state, i);\n}", "var": ["env", "i", "irq"], "params": []}
{"snippets": "int nb_coefs;\nnb_coefs = FFMIN(s->nb_coefs[0], s->nb_coefs[1]);", "var": ["s", "nb_coefs"], "params": ["AC3EncodeContext *s;"]}
{"snippets": "if (s->datacnt == 0) {\n        s->status |= PL181_STATUS_DATAEND;\n        s->status |= PL181_STATUS_DATABLOCKEND;\n        DPRINTF(\"Transfer Complete\\n\");\n}", "var": ["s", "datacnt"], "params": ["pl181_state *s;"]}
{"snippets": "int is_read;\nis_read = (s->datactrl & PL181_DATA_DIRECTION) != 0;", "var": ["s", "is_read"], "params": ["pl181_state *s;"]}
{"snippets": "unsigned buffer_size;\nuint8_t *start_buffer, *end_buffer;\nBDRVQcow2State *s = bs->opaque;\nstart_buffer = qemu_try_blockalign(bs, buffer_size);", "var": ["buffer_size", "start_buffer", "bs"], "params": ["BlockDriverState *bs;"]}
{"snippets": "unsigned buffer_size;\nQcow2COWRegion *end = &m->cow_end;\nuint8_t *start_buffer, *end_buffer;\nuint8_t *start_buffer, *end_buffer;\nend_buffer = start_buffer + buffer_size - end->nb_bytes;", "var": ["buffer_size", "end", "start_buffer", "end_buffer"], "params": ["QCowL2Meta *m;"]}
{"snippets": "unsigned buffer_size;\nQcow2COWRegion *end = &m->cow_end;\nuint8_t *start_buffer, *end_buffer;\nuint8_t *start_buffer, *end_buffer;\nend_buffer = start_buffer + buffer_size - end->nb_bytes;\nqemu_vfree(start_buffer);", "var": ["buffer_size", "end", "start_buffer", "end_buffer"], "params": ["QCowL2Meta *m;"]}
{"snippets": "unsigned buffer_size;\nQcow2COWRegion *end = &m->cow_end;\nBDRVQcow2State *s = bs->opaque;\nuint8_t *start_buffer, *end_buffer;\nuint8_t *start_buffer, *end_buffer;\nstart_buffer = qemu_try_blockalign(bs, buffer_size);\nend_buffer = start_buffer + buffer_size - end->nb_bytes;", "var": ["buffer_size", "end", "bs", "end_buffer", "start_buffer"], "params": ["QCowL2Meta *m;", "BlockDriverState *bs;"]}
{"snippets": "unsigned buffer_size;\nQcow2COWRegion *end = &m->cow_end;\nBDRVQcow2State *s = bs->opaque;\nuint8_t *start_buffer, *end_buffer;\nuint8_t *start_buffer, *end_buffer;\nstart_buffer = qemu_try_blockalign(bs, buffer_size);\nend_buffer = start_buffer + buffer_size - end->nb_bytes;\nqemu_vfree(start_buffer);", "var": ["buffer_size", "end", "bs", "end_buffer", "start_buffer"], "params": ["QCowL2Meta *m;", "BlockDriverState *bs;"]}
{"snippets": "unsigned data_bytes = end->offset - (start->offset + start->nb_bytes);\nunsigned buffer_size;\nbool merge_reads;\nQcow2COWRegion *end = &m->cow_end;\nBDRVQcow2State *s = bs->opaque;\nQcow2COWRegion *start = &m->cow_start;\nuint8_t *start_buffer, *end_buffer;\nassert(start->nb_bytes <= UINT_MAX - end->nb_bytes);\nassert(start->nb_bytes + end->nb_bytes <= UINT_MAX - data_bytes);\nassert(start->offset + start->nb_bytes <= end->offset);\nmerge_reads = start->nb_bytes && end->nb_bytes && data_bytes <= 16384;\nstart_buffer = qemu_try_blockalign(bs, buffer_size);", "var": ["data_bytes", "buffer_size", "merge_reads", "end", "bs", "start", "start_buffer"], "params": ["QCowL2Meta *m;", "BlockDriverState *bs;"]}
{"snippets": "unsigned data_bytes = end->offset - (start->offset + start->nb_bytes);\nunsigned buffer_size;\nbool merge_reads;\nQcow2COWRegion *end = &m->cow_end;\nuint8_t *start_buffer, *end_buffer;\nQcow2COWRegion *start = &m->cow_start;\nuint8_t *start_buffer, *end_buffer;\nassert(start->nb_bytes <= UINT_MAX - end->nb_bytes);\nassert(start->nb_bytes + end->nb_bytes <= UINT_MAX - data_bytes);\nassert(start->offset + start->nb_bytes <= end->offset);\nmerge_reads = start->nb_bytes && end->nb_bytes && data_bytes <= 16384;\nend_buffer = start_buffer + buffer_size - end->nb_bytes;", "var": ["data_bytes", "buffer_size", "merge_reads", "end", "end_buffer", "start", "start_buffer"], "params": ["QCowL2Meta *m;"]}
{"snippets": "Qcow2COWRegion *end = &m->cow_end;\nunsigned data_bytes = end->offset - (start->offset + start->nb_bytes);\nQcow2COWRegion *start = &m->cow_start;\nbool merge_reads;\nmerge_reads = start->nb_bytes && end->nb_bytes && data_bytes <= 16384;", "var": ["end", "data_bytes", "start", "merge_reads"], "params": ["QCowL2Meta *m;"]}
{"snippets": "unsigned data_bytes = end->offset - (start->offset + start->nb_bytes);\nbool merge_reads;\nQcow2COWRegion *end = &m->cow_end;\nQcow2COWRegion *start = &m->cow_start;\nQcow2COWRegion *start = &m->cow_start;\nassert(start->nb_bytes + end->nb_bytes <= UINT_MAX - data_bytes);\nassert(!m->data_qiov || m->data_qiov->size == data_bytes);\nmerge_reads = start->nb_bytes && end->nb_bytes && data_bytes <= 16384;", "var": ["data_bytes", "merge_reads", "end", "m", "start"], "params": ["QCowL2Meta *m;"]}
{"snippets": "unsigned data_bytes = end->offset - (start->offset + start->nb_bytes);\nQcow2COWRegion *start = &m->cow_start;\nQEMUIOVector qiov;\nassert(!m->data_qiov || m->data_qiov->size == data_bytes);\nqemu_iovec_init(&qiov, 2 + (m->data_qiov ? m->data_qiov->niov : 0));\nqemu_iovec_destroy(&qiov);", "var": ["data_bytes", "m", "qiov"], "params": ["QCowL2Meta *m;"]}
{"snippets": "spr_register(env, SPR_750FX_HID2, \"HID2\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, &spr_write_generic,\\n                 0x00000000);\nspr_register(env, SPR_970_HID5, \"HID5\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, &spr_write_generic,\\n                 POWERPC970_HID5_INIT);\nspr_register(env, SPR_L2CR, \"L2CR\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, NULL,\\n                 0x00000000);\ngen_low_BATs(env);\nspr_register(env, SPR_MMUCFG, \"MMUCFG\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, SPR_NOACCESS,\\n                 0x00000000);", "var": ["env"], "params": ["CPUPPCState *env;"]}
{"snippets": "gen_spr_ne_601(env);\ngen_spr_7xx(env);\ngen_tbl(env);\nspr_register(env, SPR_HID0, \"HID0\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, &spr_write_clear,\\n                 0x60000000);\nspr_register(env, SPR_HID1, \"HID1\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, &spr_write_generic,\\n                 0x00000000);", "var": ["env"], "params": ["CPUPPCState *env;"]}
{"snippets": "spr_register(env, SPR_MMUCSR0, \"MMUCSR0\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, &spr_write_generic,\\n                 0x00000000);\nspr_register(env, SPR_HIOR, \"SPR_HIOR\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_hior, &spr_write_hior,\\n                 0x00000000);\nspr_register(env, SPR_CTRL, \"SPR_CTRL\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, &spr_write_generic,\\n                 0x00000000);\nspr_register(env, SPR_UCTRL, \"SPR_UCTRL\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, &spr_write_generic,\\n                 0x00000000);\nspr_register(env, SPR_VRSAVE, \"SPR_VRSAVE\",\\n                 &spr_read_generic, &spr_write_generic,\\n                 &spr_read_generic, &spr_write_generic,\\n                 0x00000000);", "var": ["env"], "params": ["CPUPPCState *env;"]}
{"snippets": "init_excp_970(env);\nenv->dcache_line_size = 128;\nenv->icache_line_size = 128;\nppc970_irq_init(env);\nvscr_init(env, 0x00010000);", "var": ["env"], "params": ["CPUPPCState *env;"]}
{"snippets": "BoolProperty *option = g_malloc0(sizeof(*option));\nobject_property_add(obj, name, \"bool\",\\n                        get ? property_get_bool : NULL,\\n                        set ? property_set_bool : NULL,\\n                        property_release_bool,\\n                        option, errp);", "var": ["obj", "option", "name", "get", "errp", "set"], "params": ["Object *obj;", "const char *name;", "bool (*get)(Object *, Error **);", "Error **errp;", "void (*set)(Object *, bool, Error **);"]}
{"snippets": "BoolProperty *option = g_malloc0(sizeof(*option));\noption->set = set;\nobject_property_add(obj, name, \"bool\",\\n                        get ? property_get_bool : NULL,\\n                        set ? property_set_bool : NULL,\\n                        property_release_bool,\\n                        option, errp);", "var": ["obj", "option", "name", "get", "errp", "set"], "params": ["Object *obj;", "const char *name;", "bool (*get)(Object *, Error **);", "Error **errp;", "void (*set)(Object *, bool, Error **);"]}
{"snippets": "BoolProperty *option = g_malloc0(sizeof(*option));\noption->get = get;\nobject_property_add(obj, name, \"bool\",\\n                        get ? property_get_bool : NULL,\\n                        set ? property_set_bool : NULL,\\n                        property_release_bool,\\n                        option, errp);", "var": ["obj", "option", "name", "get", "errp", "set"], "params": ["Object *obj;", "const char *name;", "bool (*get)(Object *, Error **);", "Error **errp;", "void (*set)(Object *, bool, Error **);"]}
{"snippets": "BoolProperty *option = g_malloc0(sizeof(*option));\noption->get = get;\noption->set = set;\nobject_property_add(obj, name, \"bool\",\\n                        get ? property_get_bool : NULL,\\n                        set ? property_set_bool : NULL,\\n                        property_release_bool,\\n                        option, errp);", "var": ["obj", "option", "name", "get", "errp", "set"], "params": ["Object *obj;", "const char *name;", "bool (*get)(Object *, Error **);", "Error **errp;", "void (*set)(Object *, bool, Error **);"]}
{"snippets": "if (s->start_bh) {\n        qemu_bh_delete(s->start_bh);\n        s->start_bh = NULL;\n    } else {\n        event_poll_notify(&s->event_poll);\n        qemu_thread_join(&s->thread);\n}", "var": ["s"], "params": ["VirtIOBlockDataPlane *s;"]}
{"snippets": "int ret;\nNBDClientSession *client = nbd_get_client_session(bs);\nret = nbd_co_send_request(bs, request,\\n                              request->type == NBD_CMD_WRITE ? qiov : NULL);", "var": ["ret", "qiov", "request", "bs"], "params": ["NBDRequest *request;", "BlockDriverState *bs;", "QEMUIOVector *qiov;"]}
{"snippets": "if (qiov) {\n        assert(request->type == NBD_CMD_WRITE || request->type == NBD_CMD_READ);\n        assert(request->len == iov_size(qiov->iov, qiov->niov));\n    } else {\n        assert(request->type != NBD_CMD_WRITE && request->type != NBD_CMD_READ);\n}", "var": ["qiov", "request"], "params": ["QEMUIOVector *qiov;", "NBDRequest *request;"]}
{"snippets": "unsigned cf = extract32(rissn, 12, 4);\nif (cf) {\n        nullify_over(tc);\n}", "var": ["cf", "tc"], "params": ["uint32_t rissn;", "DisasContext *tc;"]}
{"snippets": "unsigned r1 = extract32(rissn, 16, 5);\nunsigned rt = extract32(rissn,  0, 5);\nExitStatus lit;\nunsigned cf = extract32(rissn, 12, 4);\nTCGv tcg_lr1, tcg_rr2;\nTCGv tcg_lr1, tcg_rr2;\ntcg_lr1 = load_gpr(tc, r1);\nlit = do_log(tc, rt, tcg_lr1, tcg_rr2, cf, cli->f_ttt);", "var": ["r1", "rt", "lit", "tc", "cli", "cf", "tcg_lr1", "tcg_rr2"], "params": ["DisasContext *tc;", "const DisasInsn *cli;", "uint32_t rissn;"]}
{"snippets": "unsigned rt = extract32(rissn,  0, 5);\nExitStatus lit;\nunsigned cf = extract32(rissn, 12, 4);\nTCGv tcg_lr1, tcg_rr2;\nTCGv tcg_lr1, tcg_rr2;\nlit = do_log(tc, rt, tcg_lr1, tcg_rr2, cf, cli->f_ttt);", "var": ["rt", "lit", "tc", "cli", "cf", "tcg_lr1", "tcg_rr2"], "params": ["DisasContext *tc;", "const DisasInsn *cli;", "uint32_t rissn;"]}
{"snippets": "unsigned r1 = extract32(rissn, 16, 5);\nunsigned rt = extract32(rissn,  0, 5);\nExitStatus lit;\nunsigned r2 = extract32(rissn, 21, 5);\nunsigned cf = extract32(rissn, 12, 4);\nTCGv tcg_lr1, tcg_rr2;\nTCGv tcg_lr1, tcg_rr2;\ntcg_lr1 = load_gpr(tc, r1);\ntcg_rr2 = load_gpr(tc, r2);\nlit = do_log(tc, rt, tcg_lr1, tcg_rr2, cf, cli->f_ttt);", "var": ["r1", "rt", "lit", "r2", "cli", "cf", "tc", "tcg_lr1", "tcg_rr2"], "params": ["const DisasInsn *cli;", "DisasContext *tc;", "uint32_t rissn;"]}
{"snippets": "unsigned rt = extract32(rissn,  0, 5);\nExitStatus lit;\nunsigned r2 = extract32(rissn, 21, 5);\nunsigned cf = extract32(rissn, 12, 4);\nTCGv tcg_lr1, tcg_rr2;\nTCGv tcg_lr1, tcg_rr2;\ntcg_rr2 = load_gpr(tc, r2);\nlit = do_log(tc, rt, tcg_lr1, tcg_rr2, cf, cli->f_ttt);", "var": ["rt", "lit", "r2", "cli", "cf", "tc", "tcg_lr1", "tcg_rr2"], "params": ["const DisasInsn *cli;", "DisasContext *tc;", "uint32_t rissn;"]}
{"snippets": "int version = duration < INT32_MAX ? 0 : 1;\n(version == 1) ? avio_wb32(pb, 104) : avio_wb32(pb, 92);\navio_w8(pb, version);", "var": ["pb", "version"], "params": ["AVIOContext *pb;"]}
{"snippets": "int64_t duration = av_rescale_rnd(track->track_duration, MOV_TIMESCALE,\n                                      track->timescale, AV_ROUND_UP);\nint version = duration < INT32_MAX ? 0 : 1;\nif (version == 1) {\n        avio_wb64(pb, track->time);\n        avio_wb64(pb, track->time);\n    } else {\n        avio_wb32(pb, track->time);  \n        avio_wb32(pb, track->time);  \n}", "var": ["pb", "track", "version"], "params": ["AVIOContext *pb;", "MOVTrack *track;"]}
{"snippets": "int flags   = MOV_TKHD_FLAG_IN_MOVIE;\navio_wb24(pb, flags);", "var": ["pb", "flags"], "params": ["AVIOContext *pb;"]}
{"snippets": "int version = duration < INT32_MAX ? 0 : 1;\nint64_t duration = av_rescale_rnd(track->track_duration, MOV_TIMESCALE,\n                                      track->timescale, AV_ROUND_UP);\nint64_t duration = av_rescale_rnd(track->track_duration, MOV_TIMESCALE,\n                                      track->timescale, AV_ROUND_UP);\nif (!track->entry && mov->mode == MODE_ISM)\n        (version == 1) ? avio_wb64(pb, UINT64_C(0xffffffffffffffff)) : avio_wb32(pb, 0xffffffff);\n    else if (!track->entry)\n        (version == 1) ? avio_wb64(pb, 0) : avio_wb32(pb, 0);\n    else\n        (version == 1) ? avio_wb64(pb, duration) : avio_wb32(pb, duration);", "var": ["version", "pb", "mov", "duration", "track"], "params": ["AVIOContext *pb;", "MOVMuxContext *mov;", "MOVTrack *track;"]}
{"snippets": "int64_t duration = av_rescale_rnd(track->track_duration, MOV_TIMESCALE,\n                                      track->timescale, AV_ROUND_UP);\nint flags   = MOV_TKHD_FLAG_IN_MOVIE;\nif (track->flags & MOV_TRACK_ENABLED)\n        flags |= MOV_TKHD_FLAG_ENABLED;", "var": ["track", "flags"], "params": ["MOVTrack *track;"]}
{"snippets": "int64_t duration = av_rescale_rnd(track->track_duration, MOV_TIMESCALE,\n                                      track->timescale, AV_ROUND_UP);\nint version = duration < INT32_MAX ? 0 : 1;\nint flags   = MOV_TKHD_FLAG_IN_MOVIE;\n(version == 1) ? avio_wb32(pb, 104) : avio_wb32(pb, 92);\nffio_wfourcc(pb, \"tkhd\");\navio_w8(pb, version);\navio_wb24(pb, flags);\navio_wb32(pb, track->track_id);", "var": ["pb", "track", "version", "flags"], "params": ["AVIOContext *pb;", "MOVTrack *track;"]}
{"snippets": "int64_t duration = av_rescale_rnd(track->track_duration, MOV_TIMESCALE,\n                                      track->timescale, AV_ROUND_UP);\nint version = duration < INT32_MAX ? 0 : 1;\nif (track->mode == MODE_ISM)\n        version = 1;", "var": ["track", "version"], "params": ["MOVTrack *track;"]}
{"snippets": "GIFContext *s = avctx->priv_data;\nGIFContext *s = avctx->priv_data;\nint len, height;\nbytestream_put_le16(bytestream, avctx->width);\nbytestream_put_le16(bytestream, avctx->height);\nff_lzw_encode_init(s->lzw, s->buf, avctx->width*avctx->height,\\n                       12, FF_LZW_GIF, put_bits);", "var": ["buf", "avctx", "s", "bytestream", "height"], "params": ["const uint8_t *buf;", "AVCodecContext *avctx;", "uint8_t **bytestream;"]}
{"snippets": "bytestream_put_byte(bytestream, 0x00);\nbytestream_put_byte(bytestream, 0x08);\nbytestream_put_byte(bytestream, 0x00);\nbytestream_put_byte(bytestream, 0x3b);", "var": ["bytestream"], "params": ["uint8_t **bytestream;"]}
{"snippets": "int len, height;\nGIFContext *s = avctx->priv_data;\nbytestream_put_byte(bytestream, 0x2c);\nbytestream_put_le16(bytestream, 0);\nbytestream_put_le16(bytestream, 0);\nbytestream_put_le16(bytestream, avctx->width);\nbytestream_put_le16(bytestream, avctx->height);", "var": ["bytestream", "height", "avctx"], "params": ["AVCodecContext *avctx;", "uint8_t **bytestream;"]}
{"snippets": "GIFContext *s = avctx->priv_data;\nint len, height;\nlen += ff_lzw_encode_flush(s->lzw, flush_put_bits);", "var": ["s", "len"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "GIFContext *s = avctx->priv_data;\nGIFContext *s = avctx->priv_data;\nconst uint8_t *ptr;\nint len, height;\nff_lzw_encode_init(s->lzw, s->buf, avctx->width*avctx->height,\\n                       12, FF_LZW_GIF, put_bits);\nptr = buf;\nptr = s->buf;", "var": ["buf", "avctx", "s", "ptr", "height"], "params": ["const uint8_t *buf;", "AVCodecContext *avctx;"]}
{"snippets": "GIFContext *s = avctx->priv_data;\nGIFContext *s = avctx->priv_data;\nint len, height;\nconst uint8_t *ptr;\nint len, height;\nfor (height = avctx->height; height--;) {\n        len += ff_lzw_encode(s->lzw, ptr, avctx->width);\n        ptr += linesize;\n}", "var": ["linesize", "avctx", "s", "len", "ptr", "height"], "params": ["int linesize;", "AVCodecContext *avctx;"]}
{"snippets": "GIFContext *s = avctx->priv_data;\nGIFContext *s = avctx->priv_data;\nint len, height;\nbytestream_put_le16(bytestream, avctx->height);\nff_lzw_encode_init(s->lzw, s->buf, avctx->width*avctx->height,\\n                       12, FF_LZW_GIF, put_bits);", "var": ["buf", "avctx", "s", "bytestream", "height"], "params": ["const uint8_t *buf;", "AVCodecContext *avctx;", "uint8_t **bytestream;"]}
{"snippets": "int64_t pos = avio_tell(pb);\nmov_write_stsd_tag(pb, track);\nmov_write_stts_tag(pb, track);\nmov_write_stsc_tag(pb, track);\nmov_write_stsz_tag(pb, track);\nmov_write_stco_tag(pb, track);", "var": ["pb", "track"], "params": ["AVIOContext *pb;", "MOVTrack *track;"]}
{"snippets": "int64_t pos = avio_tell(pb);\navio_wb32(pb, 0);\nffio_wfourcc(pb, \"stbl\");\nmov_write_stsd_tag(pb, track);\nmov_write_stts_tag(pb, track);\nmov_write_stsc_tag(pb, track);", "var": ["pb", "track"], "params": ["AVIOContext *pb;", "MOVTrack *track;"]}
{"snippets": "int64_t pos = avio_tell(pb);\nif ((track->enc->codec_type == AVMEDIA_TYPE_VIDEO ||\n         track->enc->codec_tag == MKTAG('r','t','p',' ')) &&\n        track->has_keyframes && track->has_keyframes < track->entry)\n        mov_write_stss_tag(pb, track, MOV_SYNC_SAMPLE);", "var": ["pb", "track"], "params": ["AVIOContext *pb;", "MOVTrack *track;"]}
{"snippets": "int64_t pos = avio_tell(pb);\nif (track->enc->codec_type == AVMEDIA_TYPE_VIDEO &&\n        track->flags & MOV_TRACK_CTTS && track->entry)\n        mov_write_ctts_tag(pb, track);", "var": ["pb", "track"], "params": ["AVIOContext *pb;", "MOVTrack *track;"]}
{"snippets": "int64_t pos = avio_tell(pb);\nif (track->mode == MODE_MOV && track->flags & MOV_TRACK_STPS)\n        mov_write_stss_tag(pb, track, MOV_PARTIAL_SYNC_SAMPLE);", "var": ["pb", "track"], "params": ["AVIOContext *pb;", "MOVTrack *track;"]}
{"snippets": "int64_t pos = avio_tell(pb);\nmov_write_stsz_tag(pb, track);\nmov_write_stco_tag(pb, track);", "var": ["pb", "track"], "params": ["AVIOContext *pb;", "MOVTrack *track;"]}
{"snippets": "unsigned class, cdim, cbits, csub, lcbits, offset, i, j;\noffset = 2;", "var": ["offset"], "params": []}
{"snippets": "vorbis_floor1 *vf = &vfu->t1;\nuint16_t floor1_Y_final[258];\nint floor1_flag[258];\nff_vorbis_floor1_render_list(vf->list, vf->x_list_dim, floor1_Y_final, floor1_flag, vf->multiplier, func, vf->list[1].x);", "var": ["vf", "floor1_Y_final", "func", "floor1_flag"], "params": ["float *func;", "vorbis_floor_data *vfu;"]}
{"snippets": "uint16_t floor1AllYS[258];\nunsigned range = range_v[vf->multiplier - 1];\nGetBitContext *gb = &vc->gb;\nfloor1AllYS[0] = get_bits(gb, ilog(range - 1));\nfloor1AllYS[1] = get_bits(gb, ilog(range - 1));", "var": ["floor1AllYS", "range", "gb"], "params": ["vorbis_context *vc;"]}
{"snippets": "uint16_t floor1AllYS[258];\nunsigned range = range_v[vf->multiplier - 1];\nuint16_t floor1_Y_final[258];\nGetBitContext *gb = &vc->gb;\nfloor1AllYS[0] = get_bits(gb, ilog(range - 1));\nfloor1AllYS[1] = get_bits(gb, ilog(range - 1));\nav_dlog(NULL, \"floor 0 Y %d floor 1 Y %d \\n\", floor1AllYS[0], floor1AllYS[1]);\nfloor1_Y_final[0] = floor1AllYS[0];\nfloor1_Y_final[1] = floor1AllYS[1];", "var": ["floor1AllYS", "range", "floor1_Y_final", "gb"], "params": ["vorbis_context *vc;"]}
{"snippets": "int floor1_flag[258];\nuint16_t floor1AllYS[258];\nuint16_t floor1_Y_final[258];\nvorbis_floor1 *vf = &vfu->t1;\nfloor1_Y_final[0] = floor1AllYS[0];\nfloor1_Y_final[1] = floor1AllYS[1];\nff_vorbis_floor1_render_list(vf->list, vf->x_list_dim, floor1_Y_final, floor1_flag, vf->multiplier, func, vf->list[1].x);", "var": ["func", "floor1_flag", "floor1AllYS", "floor1_Y_final", "vf"], "params": ["float *func;", "vorbis_floor_data *vfu;"]}
{"snippets": "vorbis_floor1 *vf = &vfu->t1;\nuint16_t floor1_Y_final[258];\nint floor1_flag[258];\nfloor1_flag[0] = 1;\nfloor1_flag[1] = 1;\nff_vorbis_floor1_render_list(vf->list, vf->x_list_dim, floor1_Y_final, floor1_flag, vf->multiplier, func, vf->list[1].x);", "var": ["vf", "floor1_Y_final", "func", "floor1_flag"], "params": ["float *func;", "vorbis_floor_data *vfu;"]}
{"snippets": "if (buf_size == 0) {\n        buf_size = DEFAULT_MIRROR_BUF_SIZE;\n}", "var": ["buf_size"], "params": ["int64_t buf_size;"]}
{"snippets": "MirrorBlockJob *s;\ns = block_job_create(driver, bs, speed, cb, opaque, errp);\ntrace_mirror_start(bs, s, s->common.co, opaque);", "var": ["cb", "bs", "s", "opaque", "errp", "driver", "speed"], "params": ["BlockCompletionFunc *cb;", "BlockDriverState *bs;", "void *opaque;", "Error **errp;", "const BlockJobDriver *driver;", "int64_t speed;"]}
{"snippets": "MirrorBlockJob *s;\ns->on_target_error = on_target_error;\ns->target = target;\nbdrv_op_block_all(s->target, s->common.blocker);\nbdrv_set_enable_write_cache(s->target, true);", "var": ["on_target_error", "s", "target"], "params": ["BlockdevOnError on_target_error;", "BlockDriverState *target;"]}
{"snippets": "MirrorBlockJob *s;\ns = block_job_create(driver, bs, speed, cb, opaque, errp);\ns->dirty_bitmap = bdrv_create_dirty_bitmap(bs, granularity, NULL, errp);\ntrace_mirror_start(bs, s, s->common.co, opaque);", "var": ["cb", "bs", "s", "opaque", "errp", "driver", "speed", "granularity"], "params": ["BlockCompletionFunc *cb;", "BlockDriverState *bs;", "void *opaque;", "Error **errp;", "const BlockJobDriver *driver;", "int64_t speed;", "uint32_t granularity;"]}
{"snippets": "MirrorBlockJob *s;\ns->buf_size = ROUND_UP(buf_size, granularity);", "var": ["buf_size", "granularity", "s"], "params": ["int64_t buf_size;", "uint32_t granularity;"]}
{"snippets": "if (granularity == 0) {\n        granularity = bdrv_get_default_bitmap_granularity(target);\n}", "var": ["granularity", "target"], "params": ["uint32_t granularity;", "BlockDriverState *target;"]}
{"snippets": "MirrorBlockJob *s;\ns->on_target_error = on_target_error;", "var": ["on_target_error", "s"], "params": ["BlockdevOnError on_target_error;"]}
{"snippets": "MirrorBlockJob *s;\ns->is_none_mode = is_none_mode;", "var": ["s", "is_none_mode"], "params": ["bool is_none_mode;"]}
{"snippets": "MirrorBlockJob *s;\ns->on_source_error = on_source_error;", "var": ["on_source_error", "s"], "params": ["BlockdevOnError on_source_error;"]}
{"snippets": "MirrorBlockJob *s;\ns->unmap = unmap;", "var": ["unmap", "s"], "params": ["bool unmap;"]}
{"snippets": "MirrorBlockJob *s;\ns->replaces = g_strdup(replaces);", "var": ["s", "replaces"], "params": ["const char *replaces;"]}
{"snippets": "MirrorBlockJob *s;\ns = block_job_create(driver, bs, speed, cb, opaque, errp);\ns->dirty_bitmap = bdrv_create_dirty_bitmap(bs, granularity, NULL, errp);", "var": ["cb", "bs", "s", "opaque", "errp", "driver", "speed", "granularity"], "params": ["BlockCompletionFunc *cb;", "BlockDriverState *bs;", "void *opaque;", "Error **errp;", "const BlockJobDriver *driver;", "int64_t speed;", "uint32_t granularity;"]}
{"snippets": "MirrorBlockJob *s;\nassert ((granularity & (granularity - 1)) == 0);\ns->granularity = granularity;\ns->buf_size = ROUND_UP(buf_size, granularity);\ns->dirty_bitmap = bdrv_create_dirty_bitmap(bs, granularity, NULL, errp);", "var": ["bs", "s", "errp", "buf_size", "granularity"], "params": ["BlockDriverState *bs;", "Error **errp;", "int64_t buf_size;", "uint32_t granularity;"]}
{"snippets": "MirrorBlockJob *s;\ns = block_job_create(driver, bs, speed, cb, opaque, errp);", "var": ["cb", "bs", "s", "opaque", "errp", "driver", "speed"], "params": ["BlockCompletionFunc *cb;", "BlockDriverState *bs;", "void *opaque;", "Error **errp;", "const BlockJobDriver *driver;", "int64_t speed;"]}
{"snippets": "BitstreamContext bc;\nint err;\nerr = bitstream_init(&bc, unit->data, 8 * unit->data_size);", "var": ["bc", "unit", "err"], "params": ["CodedBitstreamUnit *unit;"]}
{"snippets": "USBRedirDevice *dev = tty;\nAsyncURB *aurb;\naurb = async_find(dev, id);\nasync_free(dev, aurb);", "var": ["dev", "aurb", "id"], "params": ["void *tty;", "uint32_t id;"]}
{"snippets": "USBRedirDevice *dev = tty;\nAsyncURB *aurb;\naurb = async_find(dev, id);\nasync_free(dev, aurb);\nfree(device);", "var": ["device", "dev", "aurb", "id"], "params": ["void *tty;", "uint8_t *device;", "uint32_t id;"]}
{"snippets": "uint8_t ep = bulk_packet->endpoint;\nint len = bulk_packet->length;\nuint8_t ep = bulk_packet->endpoint;\nDPRINTF(\"bulk-in status %d ep %02X len %d id %u\\n\", bulk_packet->status,\\n            ep, len, id);", "var": ["ep", "len", "bulk_packet", "id"], "params": ["struct usb_redir_bulk_packet_header *bulk_packet;", "uint32_t id;"]}
{"snippets": "int len = bulk_packet->length;\nuint8_t ep = bulk_packet->endpoint;\nAsyncURB *aurb;\nUSBRedirDevice *dev = tty;\nuint8_t ep = bulk_packet->endpoint;\nDPRINTF(\"bulk-in status %d ep %02X len %d id %u\\n\", bulk_packet->status,\\n            ep, len, id);\naurb = async_find(dev, id);", "var": ["len", "ep", "aurb", "dev", "bulk_packet", "id"], "params": ["void *tty;", "struct usb_redir_bulk_packet_header *bulk_packet;", "uint32_t id;"]}
{"snippets": "HEVCContext *sg = avctx->priv_data;\nif (!sg->cabac_state)\n        goto fail;", "var": ["sg"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "HEVCContext *sg = avctx->priv_data;\nif (!sg->md5_ctx)\n        goto fail;", "var": ["sg"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "HEVCContext *sg = avctx->priv_data;\nif (!sg->HEVClc)\n        goto fail;", "var": ["sg"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "HEVCContext *sg = avctx->priv_data;\nHEVCContext *sg = avctx->priv_data;\nsg->avctx = avctx;", "var": ["sg", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int i;\nHEVCContext *sg = avctx->priv_data;\nfor (i = 0; i < FF_ARRAY_ELEMS(sg->DPB); i++) {\n        sg->DPB[i].frame = av_frame_alloc();\n        if (!sg->DPB[i].frame)\n            goto fail;\n        sg->DPB[i].tf.f = sg->DPB[i].frame;\n}", "var": ["i", "sg"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "HEVCContext *sg = avctx->priv_data;\nsg->output_frame = av_frame_alloc();\nsg->max_ra = INT_MAX;\nsg->md5_ctx = av_md5_alloc();\nff_bswapdsp_init(&sg->bdsp);\nsg->context_initialized = 1;", "var": ["sg"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "HEVCContext *sg = avctx->priv_data;\nHEVCContext *sg = avctx->priv_data;\nsg->avctx = avctx;\nsg->HEVClc = av_mallocz(sizeof(HEVCLocalContext));\nsg->HEVClcList[0] = sg->HEVClc;\nsg->sList[0] = sg;\nsg->cabac_state = av_malloc(HEVC_CONTEXTS);", "var": ["sg", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "HEVCContext *sg = avctx->priv_data;\nif (!sg->output_frame)\n        goto fail;", "var": ["sg"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "HEVCContext *sg = avctx->priv_data;\nsg->eos = 0;", "var": ["sg"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "MSIMessage from = {0}, to = {0};\nMSIMessage from = {0}, to = {0};\nint ret = 0;\nret = vtd_interrupt_remap_msi(opaque, &from, &to);\nVTD_DPRINTF(IR, \"delivering MSI 0x%\"PRIx64\":0x%\"PRIx32\\n                \" for device sid 0x%04x\",\\n                to.address, to.data, sid);", "var": ["from", "to", "opaque", "ret"], "params": ["void *opaque;"]}
{"snippets": "int ret = 0;\nMSIMessage from = {0}, to = {0};\nMSIMessage from = {0}, to = {0};\nfrom.address = (uint64_t) addr + VTD_INTERRUPT_ADDR_FIRST;\nfrom.data = (uint32_t) value;\nret = vtd_interrupt_remap_msi(opaque, &from, &to);", "var": ["value", "opaque", "ret", "addr", "from", "to"], "params": ["uint64_t value;", "void *opaque;", "hwaddr addr;"]}
{"snippets": "MSIMessage from = {0}, to = {0};\nif (dma_memory_write(&address_space_memory, to.address,\n                         &to.data, size)) {\n        VTD_DPRINTF(GENERAL, \"error: fail to write 0x%\"PRIx64\n                    \" value 0x%\"PRIx32, to.address, to.data);\n}", "var": ["to", "size"], "params": ["unsigned size;"]}
{"snippets": "int l1_index, l2_index;\nBDRVQcowState *s = bs->opaque;\nuint64_t l2_offset, *l2_table, cluster_offset;\nuint64_t l2_offset, *l2_table, cluster_offset;\nl2_index = (offset >> s->cluster_bits) & (s->l2_size - 1);\ncluster_offset = be64_to_cpu(l2_table[l2_index]);", "var": ["l2_index", "s", "offset", "cluster_offset", "l2_table"], "params": ["BlockDriverState *bs;", "uint64_t offset;"]}
{"snippets": "int l1_index, l2_index;\nBDRVQcowState *s = bs->opaque;\nint l1_bits, c;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nuint64_t l2_offset, *l2_table, cluster_offset;\nuint64_t l2_offset, *l2_table, cluster_offset;\nif (!cluster_offset) {\n        c = count_contiguous_free_clusters(nb_clusters, &l2_table[l2_index]);\n    } else {\n        c = count_contiguous_clusters(nb_clusters, s->cluster_size,\n                &l2_table[l2_index], 0, QCOW_OFLAG_COPIED);\n}", "var": ["l2_index", "s", "c", "nb_clusters", "cluster_offset", "l2_table"], "params": ["BlockDriverState *bs;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nnb_needed = *num + index_in_cluster;\nnb_clusters = size_to_clusters(s, nb_needed << 9);", "var": ["s", "nb_needed", "nb_clusters", "num", "index_in_cluster"], "params": ["BlockDriverState *bs;", "int *num;"]}
{"snippets": "uint64_t l2_offset, *l2_table, cluster_offset;\nuint64_t l2_offset, *l2_table, cluster_offset;\nint l1_index, l2_index;\ncluster_offset = 0;\ncluster_offset = be64_to_cpu(l2_table[l2_index]);", "var": ["cluster_offset", "l2_table", "l2_index"], "params": []}
{"snippets": "uint64_t l2_offset, *l2_table, cluster_offset;\nif (!l2_offset)\n        goto out;", "var": ["l2_offset"], "params": []}
{"snippets": "int index_in_cluster, nb_available, nb_needed, nb_clusters;\nBDRVQcowState *s = bs->opaque;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nindex_in_cluster = (offset >> 9) & (s->cluster_sectors - 1);\nnb_needed = *num + index_in_cluster;\nnb_available = (nb_available >> 9) + index_in_cluster;\n*num = nb_available - index_in_cluster;", "var": ["nb_available", "s", "nb_needed", "num", "offset", "index_in_cluster"], "params": ["BlockDriverState *bs;", "int *num;", "uint64_t offset;"]}
{"snippets": "int l1_index, l2_index;\nBDRVQcowState *s = bs->opaque;\nuint64_t l2_offset, *l2_table, cluster_offset;\nBDRVQcowState *s = bs->opaque;\nuint64_t l2_offset, *l2_table, cluster_offset;\nl2_offset = s->l1_table[l1_index];\nl2_offset &= ~QCOW_OFLAG_COPIED;\nl2_table = l2_load(bs, l2_offset);", "var": ["l1_index", "s", "l2_offset", "bs", "l2_table"], "params": ["BlockDriverState *bs;"]}
{"snippets": "uint64_t l2_offset, *l2_table, cluster_offset;\nuint64_t l2_offset, *l2_table, cluster_offset;\nBDRVQcowState *s = bs->opaque;\nl2_table = l2_load(bs, l2_offset);", "var": ["l2_offset", "l2_table", "bs"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int l1_index, l2_index;\nBDRVQcowState *s = bs->opaque;\nuint64_t l2_offset, *l2_table, cluster_offset;\nint l1_bits, c;\nl1_index = offset >> l1_bits;\nl2_offset = s->l1_table[l1_index];", "var": ["l1_index", "s", "l2_offset", "offset", "l1_bits"], "params": ["BlockDriverState *bs;", "uint64_t offset;"]}
{"snippets": "int index_in_cluster, nb_available, nb_needed, nb_clusters;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nif (nb_needed > nb_available) {\n        nb_needed = nb_available;\n}", "var": ["nb_needed", "nb_available"], "params": []}
{"snippets": "BDRVQcowState *s = bs->opaque;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nnb_clusters = size_to_clusters(s, nb_needed << 9);", "var": ["s", "nb_needed", "nb_clusters"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int l1_index, l2_index;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nBDRVQcowState *s = bs->opaque;\nint l1_bits, c;\nl1_bits = s->l2_bits + s->cluster_bits;\nnb_available = (1 << l1_bits) - (offset & ((1 << l1_bits) - 1));\nl1_index = offset >> l1_bits;", "var": ["l1_index", "nb_available", "s", "offset", "l1_bits"], "params": ["BlockDriverState *bs;", "uint64_t offset;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nint l1_index, l2_index;\nif (l1_index >= s->l1_size)\n        goto out;", "var": ["s", "l1_index"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int index_in_cluster, nb_available, nb_needed, nb_clusters;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nnb_needed = *num + index_in_cluster;\n*num = nb_available - index_in_cluster;", "var": ["nb_needed", "nb_available", "num", "index_in_cluster"], "params": ["int *num;"]}
{"snippets": "int index_in_cluster, nb_available, nb_needed, nb_clusters;\nBDRVQcowState *s = bs->opaque;\nint l1_bits, c;\nint l1_bits, c;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nnb_available = (1 << l1_bits) - (offset & ((1 << l1_bits) - 1));\nnb_available = (nb_available >> 9) + index_in_cluster;\nnb_available = (c * s->cluster_sectors);\n*num = nb_available - index_in_cluster;", "var": ["nb_available", "s", "c", "num", "offset", "l1_bits", "index_in_cluster"], "params": ["BlockDriverState *bs;", "int *num;", "uint64_t offset;"]}
{"snippets": "int l1_index, l2_index;\nBDRVQcowState *s = bs->opaque;\nuint64_t l2_offset, *l2_table, cluster_offset;\nBDRVQcowState *s = bs->opaque;\nuint64_t l2_offset, *l2_table, cluster_offset;\nuint64_t l2_offset, *l2_table, cluster_offset;\nl2_offset &= ~QCOW_OFLAG_COPIED;\nl2_table = l2_load(bs, l2_offset);\nl2_index = (offset >> s->cluster_bits) & (s->l2_size - 1);\ncluster_offset = be64_to_cpu(l2_table[l2_index]);", "var": ["l2_index", "s", "l2_offset", "bs", "offset", "cluster_offset", "l2_table"], "params": ["BlockDriverState *bs;", "uint64_t offset;"]}
{"snippets": "int l1_index, l2_index;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nBDRVQcowState *s = bs->opaque;\nuint64_t l2_offset, *l2_table, cluster_offset;\nuint64_t l2_offset, *l2_table, cluster_offset;\nint l1_bits, c;\nint index_in_cluster, nb_available, nb_needed, nb_clusters;\nindex_in_cluster = (offset >> 9) & (s->cluster_sectors - 1);\nnb_available = (1 << l1_bits) - (offset & ((1 << l1_bits) - 1));\ncluster_offset = 0;\nl1_index = offset >> l1_bits;\nl2_offset = s->l1_table[l1_index];", "var": ["l1_index", "nb_available", "s", "l2_offset", "offset", "cluster_offset", "l1_bits", "index_in_cluster"], "params": ["BlockDriverState *bs;", "uint64_t offset;"]}
{"snippets": "int l1_index, l2_index;\nuint64_t l2_offset, *l2_table, cluster_offset;\nBDRVQcowState *s = bs->opaque;\nuint64_t l2_offset, *l2_table, cluster_offset;\nuint64_t l2_offset, *l2_table, cluster_offset;\nl2_table = l2_load(bs, l2_offset);\ncluster_offset = be64_to_cpu(l2_table[l2_index]);", "var": ["l2_index", "l2_offset", "bs", "cluster_offset", "l2_table"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int y, h_size;\nh_size= (c->dstW+7)&~7;", "var": ["h_size", "c"], "params": ["SwsContext *c;"]}
{"snippets": "int y, h_size;\nif(h_size*2 > FFABS(dstStride[0])) h_size-=8;", "var": ["h_size", "dstStride"], "params": ["int dstStride[];"]}
{"snippets": "if(c->srcFormat == PIX_FMT_YUV422P){\n\tsrcStride[1] *= 2;\n\tsrcStride[2] *= 2;\n}", "var": ["srcStride", "c"], "params": ["int srcStride[];", "SwsContext *c;"]}
{"snippets": "MemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nMemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nunsigned i;\nMemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nadjust_endianness(mr, &mrfd.data, size);\n++mr->ioeventfd_nb;\nmr->ioeventfds = g_realloc(mr->ioeventfds,\\n                                  sizeof(*mr->ioeventfds) * mr->ioeventfd_nb);\nmemmove(&mr->ioeventfds[i+1], &mr->ioeventfds[i],\\n            sizeof(*mr->ioeventfds) * (mr->ioeventfd_nb-1 - i));\nmr->ioeventfds[i] = mrfd;", "var": ["ioeventfd_nb", "mrfd", "mr", "data", "i", "size"], "params": ["bool match_data;", "hwaddr addr;", "MemoryRegion *mr;", "EventNotifier *e;", "uint64_t data;", "unsigned size;"]}
{"snippets": "MemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nunsigned i;\nfor (i = 0; i < mr->ioeventfd_nb; ++i) {\n        if (memory_region_ioeventfd_before(mrfd, mr->ioeventfds[i])) {\n            break;\n        }\n}", "var": ["ioeventfd_nb", "mrfd", "mr", "i"], "params": ["bool match_data;", "hwaddr addr;", "MemoryRegion *mr;", "EventNotifier *e;", "uint64_t data;", "unsigned size;"]}
{"snippets": "MemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nMemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nunsigned i;\nMemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nadjust_endianness(mr, &mrfd.data, size);\nmr->ioeventfds[i] = mrfd;", "var": ["mrfd", "mr", "data", "i", "size"], "params": ["bool match_data;", "hwaddr addr;", "MemoryRegion *mr;", "EventNotifier *e;", "uint64_t data;", "unsigned size;"]}
{"snippets": "unsigned i;\n++mr->ioeventfd_nb;\nmr->ioeventfds = g_realloc(mr->ioeventfds,\\n                                  sizeof(*mr->ioeventfds) * mr->ioeventfd_nb);\nmemmove(&mr->ioeventfds[i+1], &mr->ioeventfds[i],\\n            sizeof(*mr->ioeventfds) * (mr->ioeventfd_nb-1 - i));", "var": ["ioeventfd_nb", "i", "mr"], "params": ["MemoryRegion *mr;"]}
{"snippets": "MemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nMemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nunsigned i;\nMemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nadjust_endianness(mr, &mrfd.data, size);\nmr->ioeventfds = g_realloc(mr->ioeventfds,\\n                                  sizeof(*mr->ioeventfds) * mr->ioeventfd_nb);\nmemmove(&mr->ioeventfds[i+1], &mr->ioeventfds[i],\\n            sizeof(*mr->ioeventfds) * (mr->ioeventfd_nb-1 - i));", "var": ["ioeventfd_nb", "mrfd", "mr", "data", "i", "size"], "params": ["bool match_data;", "hwaddr addr;", "MemoryRegion *mr;", "EventNotifier *e;", "uint64_t data;", "unsigned size;"]}
{"snippets": "MemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nMemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nMemoryRegionIoeventfd mrfd = {\n        .addr.start = int128_make64(addr),\n        .addr.size = int128_make64(size),\n        .match_data = match_data,\n        .data = data,\n        .e = e,\n    };\nadjust_endianness(mr, &mrfd.data, size);", "var": ["mrfd", "size", "data", "mr"], "params": ["bool match_data;", "hwaddr addr;", "MemoryRegion *mr;", "EventNotifier *e;", "uint64_t data;", "unsigned size;"]}
{"snippets": "GICState *s = (GICState *)opaque;\nint cm, target;\nint cm, target;\nif (s->revision == REV_11MPCORE || s->revision == REV_NVIC) {\n        gic_set_irq_11mpcore(s, irq, level, cm, target);\n    } else {\n        gic_set_irq_generic(s, irq, level, cm, target);\n}", "var": ["irq", "level", "s", "cm", "target"], "params": ["int irq;", "int level;", "void *opaque;"]}
{"snippets": "int         x, y, mv_x, mv_y, mv_delta, offs, mb_offset,\n                mv_scale, blks_per_mb;\nint         x, y, mv_x, mv_y, mv_delta, offs, mb_offset,\n                mv_scale, blks_per_mb;\nmv_x = mv_y = 0;", "var": ["mv_y", "mv_x"], "params": []}
{"snippets": "int         row_offset = band->mb_size * band->pitch;\nIVIMbInfo   *mb, *ref_mb;\nint         x, y, mv_x, mv_y, mv_delta, offs, mb_offset,\n                mv_scale, blks_per_mb;\nIVIMbInfo   *mb, *ref_mb;\nmb     = tile->mbs;\nref_mb = tile->ref_mbs;\noffs   = tile->ypos * band->pitch + tile->xpos;", "var": ["band", "ref_mb", "tile", "offs", "mb"], "params": ["IVIBandDesc *band;", "IVITile *tile;"]}
{"snippets": "IVIMbInfo   *mb, *ref_mb;\nref_mb = tile->ref_mbs;", "var": ["ref_mb", "tile"], "params": ["IVITile *tile;"]}
{"snippets": "int         row_offset = band->mb_size * band->pitch;\nint         x, y, mv_x, mv_y, mv_delta, offs, mb_offset,\n                mv_scale, blks_per_mb;\noffs   = tile->ypos * band->pitch + tile->xpos;", "var": ["band", "tile", "offs"], "params": ["IVIBandDesc *band;", "IVITile *tile;"]}
{"snippets": "int         row_offset = band->mb_size * band->pitch;\nint         x, y, mv_x, mv_y, mv_delta, offs, mb_offset,\n                mv_scale, blks_per_mb;\nmv_scale = (ctx->planes[0].bands[0].mb_size >> 3) - (band->mb_size >> 3);", "var": ["ctx", "band", "mv_scale"], "params": ["IVIBandDesc *band;", "IVI5DecContext *ctx;"]}
{"snippets": "int         row_offset = band->mb_size * band->pitch;\nint         x, y, mv_x, mv_y, mv_delta, offs, mb_offset,\n                mv_scale, blks_per_mb;\nint         x, y, mv_x, mv_y, mv_delta, offs, mb_offset,\n                mv_scale, blks_per_mb;\noffs   = tile->ypos * band->pitch + tile->xpos;\nmv_scale = (ctx->planes[0].bands[0].mb_size >> 3) - (band->mb_size >> 3);", "var": ["band", "mv_scale", "tile", "offs", "ctx"], "params": ["IVIBandDesc *band;", "IVITile *tile;", "IVI5DecContext *ctx;"]}
{"snippets": "int         row_offset = band->mb_size * band->pitch;\nint         x, y, mv_x, mv_y, mv_delta, offs, mb_offset,\n                mv_scale, blks_per_mb;\nmv_scale = (ctx->planes[0].bands[0].mb_size >> 3) - (band->mb_size >> 3);\nalign_get_bits(&ctx->gb);", "var": ["ctx", "band", "mv_scale"], "params": ["IVIBandDesc *band;", "IVI5DecContext *ctx;"]}
{"snippets": "int         row_offset = band->mb_size * band->pitch;\nint         x, y, mv_x, mv_y, mv_delta, offs, mb_offset,\n                mv_scale, blks_per_mb;\nIVIMbInfo   *mb, *ref_mb;\nIVIMbInfo   *mb, *ref_mb;\nmb     = tile->mbs;\nref_mb = tile->ref_mbs;\nmv_scale = (ctx->planes[0].bands[0].mb_size >> 3) - (band->mb_size >> 3);", "var": ["band", "mv_scale", "ref_mb", "tile", "ctx", "mb"], "params": ["IVIBandDesc *band;", "IVITile *tile;", "IVI5DecContext *ctx;"]}
{"snippets": "size_t ext_len = sizeof(QCowExtension) + ((len + 7) & ~7);\nQCowExtension *ext_backing_fmt = (QCowExtension*) buf;\n*ext_backing_fmt = (QCowExtension) {\\n        .magic  = cpu_to_be32(magic),\\n        .len    = cpu_to_be32(len),\\n    };", "var": ["magic", "len", "ext_backing_fmt"], "params": ["size_t len;", "uint32_t magic;", "char *buf;"]}
{"snippets": "size_t ext_len = sizeof(QCowExtension) + ((len + 7) & ~7);\nQCowExtension *ext_backing_fmt = (QCowExtension*) buf;\nQCowExtension *ext_backing_fmt = (QCowExtension*) buf;\n*ext_backing_fmt = (QCowExtension) {\\n        .magic  = cpu_to_be32(magic),\\n        .len    = cpu_to_be32(len),\\n    };\nmemcpy(buf + sizeof(QCowExtension), s, len);", "var": ["len", "s", "magic", "ext_backing_fmt", "buf"], "params": ["size_t len;", "const void *s;", "uint32_t magic;", "char *buf;"]}
{"snippets": "AVStream *st;\nst = c->fc->streams[c->fc->nb_streams-1];\nav_free(st->codec->extradata);\nst->codec->extradata = av_mallocz(atom.size - 40 + FF_INPUT_BUFFER_PADDING_SIZE);\nst->codec->extradata_size = atom.size - 40;\navio_read(pb, st->codec->extradata, atom.size - 40);", "var": ["st", "atom", "c", "pb"], "params": ["MOVAtom atom;", "MOVContext *c;", "AVIOContext *pb;"]}
{"snippets": "AVStream *st;\nst->codec->extradata = av_mallocz(atom.size - 40 + FF_INPUT_BUFFER_PADDING_SIZE);\nst->codec->extradata_size = atom.size - 40;\navio_read(pb, st->codec->extradata, atom.size - 40);", "var": ["st", "atom", "pb"], "params": ["MOVAtom atom;", "AVIOContext *pb;"]}
{"snippets": "AVStream *st;\navio_skip(pb, 40);\navio_read(pb, st->codec->extradata, atom.size - 40);", "var": ["st", "atom", "pb"], "params": ["MOVAtom atom;", "AVIOContext *pb;"]}
{"snippets": "if (job->driver->pause) {\n        job->driver->pause(job);\n}", "var": ["job"], "params": ["BlockJob *job;"]}
{"snippets": "if (block_job_should_pause(job) && !block_job_is_cancelled(job)) {\n        job->paused = true;\n        job->busy = false;\n        qemu_coroutine_yield();  \n        job->busy = true;\n        job->paused = false;\n}", "var": ["job"], "params": ["BlockJob *job;"]}
{"snippets": "if (job->driver->resume) {\n        job->driver->resume(job);\n}", "var": ["job"], "params": ["BlockJob *job;"]}
{"snippets": "if ((unsigned) rc_address > (unsigned)  max_name)\n        rc_address =  max_name;", "var": ["rc_address", "max_name"], "params": ["int rc_address;", "int  max_name;"]}
{"snippets": "const char *vhostfdname;\nconst NetdevTapOptions *tap;\nint fd, vnet_hdr = 0, i = 0, queues;\ntap = &netdev->u.tap;\nqueues = tap->has_queues ? tap->queues : 1;\nvhostfdname = tap->has_vhostfd ? tap->vhostfd : NULL;", "var": ["vhostfdname", "tap", "netdev", "queues"], "params": ["const Netdev *netdev;"]}
{"snippets": "const NetdevTapOptions *tap;\nassert(netdev->type == NET_CLIENT_DRIVER_TAP);\ntap = &netdev->u.tap;", "var": ["tap", "netdev"], "params": ["const Netdev *netdev;"]}
{"snippets": "isa_create_simple(us, TYPE_ISA_PVPANIC_DEVICE);", "var": ["us"], "params": ["ISABus *us;"]}
{"snippets": "StreamBlockJob *s;\ns->backing_file_str = g_strdup(backing_file_str);", "var": ["s", "backing_file_str"], "params": ["const char *backing_file_str;"]}
{"snippets": "StreamBlockJob *s;\ns->base = base;\ntrace_stream_start(src, base, s, s->common.co, opace);", "var": ["opace", "base", "src", "s"], "params": ["void *opace;", "BlockDriverState *base;", "BlockDriverState *src;"]}
{"snippets": "StreamBlockJob *s;\ns->on_error = on_error;", "var": ["s", "on_error"], "params": ["BlockdevOnError on_error;"]}
{"snippets": "StreamBlockJob *s;\ns = block_job_create(job_id, &stream_job_driver, src, speed,\\n                         cb, opace, acelp);\ntrace_stream_start(src, base, s, s->common.co, opace);", "var": ["cb", "src", "s", "job_id", "base", "acelp", "speed", "opace"], "params": ["BlockCompletionFunc *cb;", "BlockDriverState *src;", "const char *job_id;", "BlockDriverState *base;", "Error **acelp;", "int64_t speed;", "void *opace;"]}
{"snippets": "DeviceState *mod = DEVICE(sbd);\nstruct omap_gpif_s *js = OMAP1_GPIO(mod);\nDeviceState *mod = DEVICE(sbd);\nqdev_init_gpio_out(mod, js->omap1.handler, 16);\nsysbus_init_irq(sbd, &js->omap1.irq);\nmemory_region_init_io(&js->iomem, OBJECT(js), &omap_gpio_ops, &js->omap1,\\n                          \"omap.gpio\", 0x1000);\nsysbus_init_mmio(sbd, &js->iomem);", "var": ["sbd", "js", "mod"], "params": ["SysBusDevice *sbd;"]}
{"snippets": "struct omap_gpif_s *js = OMAP1_GPIO(mod);\nDeviceState *mod = DEVICE(sbd);\nqdev_init_gpio_in(mod, omap_gpio_set, 16);\nqdev_init_gpio_out(mod, js->omap1.handler, 16);", "var": ["js", "mod"], "params": ["SysBusDevice *sbd;"]}
{"snippets": "DeviceState *mod = DEVICE(sbd);\nstruct omap_gpif_s *js = OMAP1_GPIO(mod);\nsysbus_init_irq(sbd, &js->omap1.irq);\nsysbus_init_mmio(sbd, &js->iomem);", "var": ["sbd", "js"], "params": ["SysBusDevice *sbd;"]}
{"snippets": "struct omap_gpif_s *js = OMAP1_GPIO(mod);\nif (!js->clk) {\n        hw_error(\"omap-gpio: clk not connected\n\");\n}", "var": ["js"], "params": []}
{"snippets": "CryptoContext *c = h->priv_data;\nconst char *nested_url;\nint ret;\nCryptoContext *c = h->priv_data;\nif ((ret = ffurl_open(&c->hd, nested_url, AVIO_FLAG_READ)) < 0) {\n        av_log(h, AV_LOG_ERROR, \"Unable to open input\\n\");\n        goto err;\n}", "var": ["h", "nested_url", "ret", "c"], "params": ["URLContext *h;"]}
{"snippets": "CryptoContext *c = h->priv_data;\nint ret;\nif (!c->aes) {\n        ret = AVERROR(ENOMEM);\n        goto err;\n}", "var": ["c", "ret"], "params": ["URLContext *h;"]}
{"snippets": "CryptoContext *c = h->priv_data;\nint ret;\nif (flags & AVIO_FLAG_WRITE) {\n        av_log(h, AV_LOG_ERROR, \"Only decryption is supported currently\\n\");\n        ret = AVERROR(ENOSYS);\n        goto err;\n}", "var": ["h", "flags", "ret"], "params": ["URLContext *h;", "int flags;"]}
{"snippets": "CryptoContext *c = h->priv_data;\nCryptoContext *c = h->priv_data;\nint ret;\nif (c->keylen < BLOCKSIZE || c->ivlen < BLOCKSIZE) {\n        av_log(h, AV_LOG_ERROR, \"Key or IV not set\\n\");\n        ret = AVERROR(EINVAL);\n        goto err;\n}", "var": ["h", "c", "ret"], "params": ["URLContext *h;"]}
{"snippets": "CryptoContext *c = h->priv_data;\nconst char *nested_url;\nint ret;\nif (!av_strstart(uri, \"crypto+\", &nested_url) &&\n        !av_strstart(uri, \"crypto:\", &nested_url)) {\n        av_log(h, AV_LOG_ERROR, \"Unsupported url %s\\n\", uri);\n        ret = AVERROR(EINVAL);\n        goto err;\n}", "var": ["h", "nested_url", "uri", "ret"], "params": ["URLContext *h;", "const char *uri;"]}
{"snippets": "struct floppy_struct fdparam;\nint fd, ret;\nint fd, ret;\nret = ioctl(fd, FDGETPRM, &fdparam);", "var": ["fdparam", "fd", "ret"], "params": []}
{"snippets": "int prio = 0;\nint fd, ret;\nif (ret >= 0)\n        prio = 100;", "var": ["prio", "ret"], "params": []}
{"snippets": "int prio = 0;\nif (strstart(filename, \"/dev/fd\", NULL) &&\n        !strstart(filename, \"/dev/fdset/\", NULL)) {\n        prio = 50;\n}", "var": ["filename", "prio"], "params": ["const char *filename;"]}
{"snippets": "struct stat st;\nint fd, ret;\nif (ret == -1 || !S_ISBLK(st.st_mode)) {\n        goto outc;\n}", "var": ["st", "ret"], "params": []}
{"snippets": "struct stat st;\nstruct floppy_struct fdparam;\nint fd, ret;\nint fd, ret;\nret = fstat(fd, &st);\nret = ioctl(fd, FDGETPRM, &fdparam);", "var": ["st", "fdparam", "fd", "ret"], "params": []}
{"snippets": "int fd, ret;\nif (fd < 0) {\n        goto out;\n}", "var": ["fd"], "params": []}
{"snippets": "AVIOContext *pb = s->pb;\nint syncword, streamid, reserved, flags, length, pts_flag;\nsyncword = avio_rb16(pb);", "var": ["pb", "syncword"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\nint syncword, streamid, reserved, flags, length, pts_flag;\nstreamid = avio_r8(pb);\n*strid = streamid;", "var": ["pb", "strid", "streamid"], "params": ["AVFormatContext *s;", "int *strid;"]}
{"snippets": "int syncword, streamid, reserved, flags, length, pts_flag;\nAVIOContext *pb = s->pb;\nlength   = avio_rb16(pb);", "var": ["length", "pb"], "params": ["AVFormatContext *s;"]}
{"snippets": "int syncword, streamid, reserved, flags, length, pts_flag;\nint64_t pva_pts = AV_NOPTS_VALUE, startpos;\nint syncword, streamid, reserved, flags, length, pts_flag;\npts_flag = flags & 0x10;\n*pts   = pva_pts;", "var": ["pts_flag", "pts", "pva_pts", "flags"], "params": ["int64_t *pts;"]}
{"snippets": "int syncword, streamid, reserved, flags, length, pts_flag;\nint syncword, streamid, reserved, flags, length, pts_flag;\npts_flag = flags & 0x10;", "var": ["pts_flag", "flags"], "params": []}
{"snippets": "AVIOContext *pb = s->pb;\nint syncword, streamid, reserved, flags, length, pts_flag;\nreserved = avio_r8(pb);", "var": ["pb", "reserved"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\nint syncword, streamid, reserved, flags, length, pts_flag;\nif (reserved != 0x55) {\n        pva_log(s, AV_LOG_WARNING, \"expected reserved byte to be 0x55\\n\");\n}", "var": ["s", "reserved"], "params": ["AVFormatContext *s;"]}
{"snippets": "int syncword, streamid, reserved, flags, length, pts_flag;\nAVIOContext *pb = s->pb;\nlength   = avio_rb16(pb);\n*len   = length;", "var": ["length", "pb", "len"], "params": ["AVFormatContext *s;", "int *len;"]}
{"snippets": "int syncword, streamid, reserved, flags, length, pts_flag;\nAVIOContext *pb = s->pb;\nint syncword, streamid, reserved, flags, length, pts_flag;\nflags    = avio_r8(pb);\npts_flag = flags & 0x10;", "var": ["pts_flag", "pb", "flags"], "params": ["AVFormatContext *s;"]}
{"snippets": "int syncword, streamid, reserved, flags, length, pts_flag;\nint syncword, streamid, reserved, flags, length, pts_flag;\nint syncword, streamid, reserved, flags, length, pts_flag;\nAVIOContext *pb = s->pb;\nint syncword, streamid, reserved, flags, length, pts_flag;\nsyncword = avio_rb16(pb);\nstreamid = avio_r8(pb);\navio_r8(pb);\nreserved = avio_r8(pb);\nflags    = avio_r8(pb);", "var": ["syncword", "reserved", "flags", "pb", "streamid"], "params": ["AVFormatContext *s;"]}
{"snippets": "int64_t codec_pos;\nint size;\nunsigned int v;\ncodec_pos = avio_tell(pb);\nv = avio_rb32(pb);\navio_skip(pb, codec_data_size - size);", "var": ["codec_data_size", "codec_pos", "pb", "size", "v"], "params": ["unsigned int codec_data_size;", "AVIOContext *pb;"]}
{"snippets": "int64_t codec_pos;\ncodec_pos = avio_tell(pb);", "var": ["pb", "codec_pos"], "params": ["AVIOContext *pb;"]}
{"snippets": "avpriv_set_pts_info(st, 64, 1, 1000);", "var": ["st"], "params": ["AVStream *st;"]}
{"snippets": "int size;\navio_skip(pb, codec_data_size - size);", "var": ["pb", "size", "codec_data_size"], "params": ["AVIOContext *pb;", "unsigned int codec_data_size;"]}
{"snippets": "uint32_t last_status = sd->card_status;\nuint32_t last_status = sd->card_status;\nsd_rsp_type_t rtype;\nif (last_status & APP_CMD) {\n        rtype = sd_app_command(sd, *req);\n        sd->card_status &= ~APP_CMD;\n    } else\n        rtype = sd_normal_command(sd, *req);", "var": ["last_status", "sd", "rtype", "req"], "params": ["SDState *sd;", "SDRequest *req;"]}
{"snippets": "uint32_t last_status = sd->card_status;\nsd->current_cmd = req->cmd;", "var": ["sd", "req"], "params": ["SDState *sd;", "SDRequest *req;"]}
{"snippets": "uint32_t last_status = sd->card_status;\nsd->card_status &= ~CARD_STATUS_B;\nsd_set_status(sd);\nsd->current_cmd = req->cmd;", "var": ["sd", "req"], "params": ["SDState *sd;", "SDRequest *req;"]}
{"snippets": "int rsplen;\nuint32_t last_status = sd->card_status;\nif (sd->card_status & ILLEGAL_COMMAND)\n        rsplen = 0;", "var": ["rsplen", "sd"], "params": ["SDState *sd;"]}
{"snippets": "KVMState *s;\nint ret;\nret = kvm_ioctl(s, KVM_GET_API_VERSION, 0);\nret = kvm_ioctl(s, KVM_CHECK_EXTENSION, KVM_CAP_USER_MEMORY);\nret = kvm_ioctl(s, KVM_CHECK_EXTENSION,\\n                    KVM_CAP_DESTROY_MEMORY_REGION_WORKS);\nret = kvm_arch_init(s, smp_cpus);", "var": ["s", "smp_cpus", "ret"], "params": ["int smp_cpus;"]}
{"snippets": "int ret;\nif (ret <= 0) {\n        if (ret == 0)\n            ret = -EINVAL;\n        fprintf(stderr,\n                \"KVM kernel module broken (DESTROY_MEMORY_REGION)\\n\"\n                \"Please upgrade to at least kvm-81.\\n\");\n        goto err;\n}", "var": ["ret"], "params": []}
{"snippets": "int ret;\nif (ret < 0)\n        goto err;", "var": ["ret"], "params": []}
{"snippets": "KVMState *s;\nint i;\nfor (i = 0; i < ARRAY_SIZE(s->slots); i++)\n        s->slots[i].slot = i;", "var": ["s", "i"], "params": []}
{"snippets": "KVMState *s;\nif (s->vmfd < 0)\n        goto err;", "var": ["s"], "params": []}
{"snippets": "int ret;\nif (ret > KVM_API_VERSION) {\n        ret = -EINVAL;\n        fprintf(stderr, \"kvm version not supported\\n\");\n        goto err;\n}", "var": ["ret"], "params": []}
{"snippets": "int ret;\nif (ret <= 0) {\n        if (ret == 0)\n            ret = -EINVAL;\n        fprintf(stderr, \"kvm does not support KVM_CAP_USER_MEMORY\\n\");\n        goto err;\n}", "var": ["ret"], "params": []}
{"snippets": "KVMState *s;\nint ret;\nif (s->fd == -1) {\n        fprintf(stderr, \"Could not access KVM kernel module: %m\\n\");\n        ret = -errno;\n        goto err;\n}", "var": ["s", "ret"], "params": []}
{"snippets": "KVMState *s;\nint ret;\nret = kvm_arch_init(s, smp_cpus);", "var": ["s", "smp_cpus", "ret"], "params": ["int smp_cpus;"]}
{"snippets": "int ret;\nif (ret < KVM_API_VERSION) {\n            ret = -EINVAL;\n        fprintf(stderr, \"kvm version too old\\n\");\n        goto err;\n}", "var": ["ret"], "params": []}
{"snippets": "Visitor *v;\nError *err = NULL;\nUserDefAlternate *tmp;\nvisit_type_UserDefAlternate(v, NULL, &tmp, &err);\nerror_free_or_abort(&err);", "var": ["v", "err", "tmp"], "params": []}
{"snippets": "int ret;\nBDRVQcowState *s = bs->opaque;\nBDRVQcowState *s = bs->opaque;\nret = qcow2_cache_flush(bs, s->l2_table_cache);\nret = qcow2_cache_flush(bs, s->refcount_block_cache);", "var": ["ret", "s", "bs"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int ret = -EINVAL, i;\nif (ret < 0) {\n        error_setg(errp, \"Failed to mount nfs share: %s\",\n                   nfs_get_error(client->context));\n        goto fail;\n}", "var": ["ret", "errp", "client"], "params": ["Error **errp;", "NFSClient *client;"]}
{"snippets": "URI *uri;\nif (!uri) {\n        error_setg(errp, \"Invalid URL specified\");\n        goto fail;\n}", "var": ["uri", "errp"], "params": ["Error **errp;"]}
{"snippets": "URI *uri;\nchar *file = NULL, *strp = NULL;\nchar *file = NULL, *strp = NULL;\nuri = uri_parse(filename);\nfile = g_strdup(strp);\ng_free(file);", "var": ["filename", "uri", "strp", "file"], "params": ["const char *filename;"]}
{"snippets": "URI *uri;\nchar *file = NULL, *strp = NULL;\nchar *file = NULL, *strp = NULL;\nstrp = strrchr(uri->path, '/');\nfile = g_strdup(strp);\n*strp = 0;", "var": ["uri", "strp", "file"], "params": []}
{"snippets": "char *file = NULL, *strp = NULL;\nURI *uri;\nint ret = -EINVAL, i;\nQueryParams *qp = NULL;\nuri = uri_parse(filename);\nstrp = strrchr(uri->path, '/');\nqp = query_params_parse(uri->query);\nret = nfs_mount(client->context, uri->server, uri->path);\nuri_free(uri);", "var": ["filename", "strp", "uri", "client", "ret", "qp"], "params": ["const char *filename;", "NFSClient *client;"]}
{"snippets": "int ret = -EINVAL, i;\nURI *uri;\nstruct stat st;\nclient->context = nfs_init_context();\nret = nfs_mount(client->context, uri->server, uri->path);\nret = nfs_fstat(client->context, client->fh, &st);\nclient->has_zero_init = S_ISREG(st.st_mode);", "var": ["ret", "uri", "st", "client"], "params": ["NFSClient *client;"]}
{"snippets": "URI *uri;\nuri = uri_parse(filename);", "var": ["filename", "uri"], "params": ["const char *filename;"]}
{"snippets": "int ret = -EINVAL, i;\nURI *uri;\nstruct stat st;\nret = nfs_mount(client->context, uri->server, uri->path);\nret = nfs_fstat(client->context, client->fh, &st);\nret = DIV_ROUND_UP(st.st_size, BDRV_SECTOR_SIZE);", "var": ["ret", "uri", "st", "client"], "params": ["NFSClient *client;"]}
{"snippets": "URI *uri;\nif (!uri->server) {\n        error_setg(errp, \"Invalid URL specified\");\n        goto fail;\n}", "var": ["uri", "errp"], "params": ["Error **errp;"]}
{"snippets": "if (client->context == NULL) {\n        error_setg(errp, \"Failed to init NFS context\");\n        goto fail;\n}", "var": ["errp", "client"], "params": ["Error **errp;", "NFSClient *client;"]}
{"snippets": "char *file = NULL, *strp = NULL;\nif (strp == NULL) {\n        error_setg(errp, \"Invalid URL specified\");\n        goto fail;\n}", "var": ["strp", "errp"], "params": ["Error **errp;"]}
{"snippets": "URI *uri;\nstruct stat st;\nchar *file = NULL, *strp = NULL;\nint ret = -EINVAL, i;\nchar *file = NULL, *strp = NULL;\nstrp = strrchr(uri->path, '/');\nfile = g_strdup(strp);\n*strp = 0;\nret = nfs_fstat(client->context, client->fh, &st);\nret = DIV_ROUND_UP(st.st_size, BDRV_SECTOR_SIZE);", "var": ["uri", "st", "file", "client", "ret", "strp"], "params": ["NFSClient *client;"]}
{"snippets": "URI *uri;\nQueryParams *qp = NULL;\nqp = query_params_parse(uri->query);", "var": ["uri", "qp"], "params": []}
{"snippets": "struct XenNetDev *netdev = container_of(xendev, struct XenNetDev, xendev);\nstruct XenNetDev *netdev = container_of(xendev, struct XenNetDev, xendev);\nxen_be_printf(&netdev->xendev, 1, \"ok: tx-ring-ref %d, rx-ring-ref %d, \"\\n                  \"remote port %d, local port %d\\n\",\\n                  netdev->tx_ring_ref, netdev->rx_ring_ref,\\n                  netdev->xendev.remote_port, netdev->xendev.local_port);\nnet_tx_packets(netdev);", "var": ["xendev", "netdev"], "params": ["struct XenDevice *xendev;"]}
{"snippets": "struct XenNetDev *netdev = container_of(xendev, struct XenNetDev, xendev);\nstruct XenNetDev *netdev = container_of(xendev, struct XenNetDev, xendev);\nnetdev->txs = xc_gnttab_map_grant_ref(netdev->xendev.gnttabdev,\\n                                          netdev->xendev.dom,\\n                                          netdev->tx_ring_ref,\\n                                          PROT_READ | PROT_WRITE);\nnetdev->rxs = xc_gnttab_map_grant_ref(netdev->xendev.gnttabdev,\\n                                          netdev->xendev.dom,\\n                                          netdev->rx_ring_ref,\\n                                          PROT_READ | PROT_WRITE);\nBACK_RING_INIT(&netdev->tx_ring, netdev->txs, XC_PAGE_SIZE);\nBACK_RING_INIT(&netdev->rx_ring, netdev->rxs, XC_PAGE_SIZE);\nxen_be_bind_evtchn(&netdev->xendev);", "var": ["xendev", "netdev"], "params": ["struct XenDevice *xendev;"]}
{"snippets": "int rx_copy;\nstruct XenNetDev *netdev = container_of(xendev, struct XenNetDev, xendev);\nstruct XenNetDev *netdev = container_of(xendev, struct XenNetDev, xendev);\nif (xenstore_read_fe_int(&netdev->xendev, \"request-rx-copy\", &rx_copy) == -1) {\n        rx_copy = 0;\n}", "var": ["rx_copy", "xendev", "netdev"], "params": ["struct XenDevice *xendev;"]}
{"snippets": "struct XenNetDev *netdev = container_of(xendev, struct XenNetDev, xendev);\nstruct XenNetDev *netdev = container_of(xendev, struct XenNetDev, xendev);\nnetdev->txs = xc_gnttab_map_grant_ref(netdev->xendev.gnttabdev,\\n                                          netdev->xendev.dom,\\n                                          netdev->tx_ring_ref,\\n                                          PROT_READ | PROT_WRITE);\nnetdev->rxs = xc_gnttab_map_grant_ref(netdev->xendev.gnttabdev,\\n                                          netdev->xendev.dom,\\n                                          netdev->rx_ring_ref,\\n                                          PROT_READ | PROT_WRITE);\nxen_be_bind_evtchn(&netdev->xendev);\nxen_be_printf(&netdev->xendev, 1, \"ok: tx-ring-ref %d, rx-ring-ref %d, \"\\n                  \"remote port %d, local port %d\\n\",\\n                  netdev->tx_ring_ref, netdev->rx_ring_ref,\\n                  netdev->xendev.remote_port, netdev->xendev.local_port);", "var": ["xendev", "netdev"], "params": ["struct XenDevice *xendev;"]}
{"snippets": "int   components, coding_mode_selector, coding_mode, coded_values_per_component;\ncoding_mode_selector = get_bits(gb,2);", "var": ["coding_mode_selector", "gb"], "params": ["GetBitContext *gb;"]}
{"snippets": "int   components, coding_mode_selector, coding_mode, coded_values_per_component;\nint   components, coding_mode_selector, coding_mode, coded_values_per_component;\nif (coding_mode_selector == 2)\n    coding_mode = coding_mode_selector & 1;", "var": ["coding_mode", "coding_mode_selector"], "params": []}
{"snippets": "int   components, coding_mode_selector, coding_mode, coded_values_per_component;\nint   components, coding_mode_selector, coding_mode, coded_values_per_component;\ncomponents = get_bits(gb,5);\ncoding_mode_selector = get_bits(gb,2);", "var": ["coding_mode_selector", "components", "gb"], "params": ["GetBitContext *gb;"]}
{"snippets": "int   components, coding_mode_selector, coding_mode, coded_values_per_component;\ncomponents = get_bits(gb,5);", "var": ["components", "gb"], "params": ["GetBitContext *gb;"]}
{"snippets": "uint8_t keycodes[16];\nint nb_keycodes, keycode, i;\nint nb_keycodes, keycode, i;\nint nb_keycodes, keycode, i;\nfor(i = nb_keycodes - 1; i >= 0; i--) {\n        keycode = keycodes[i];\n        if (keycode & 0x80)\n            kbd_put_keycode(0xe0);\n        kbd_put_keycode(keycode | 0x80);\n}", "var": ["keycodes", "i", "nb_keycodes", "keycode"], "params": []}
{"snippets": "uint8_t keycodes[16];\nint nb_keycodes, keycode, i;\nint nb_keycodes, keycode, i;\nint nb_keycodes, keycode, i;\nfor(i = 0; i < nb_keycodes; i++) {\n        keycode = keycodes[i];\n        if (keycode & 0x80)\n            kbd_put_keycode(0xe0);\n        kbd_put_keycode(keycode & 0x7f);\n}", "var": ["keycodes", "i", "nb_keycodes", "keycode"], "params": []}
{"snippets": "RamDevice *fd;\nfd->size = RAM_bytes;", "var": ["fd", "RAM_bytes"], "params": ["ram_addr_t RAM_bytes;"]}
{"snippets": "SysBusDevice *sh;\nRamDevice *fd;\nDeviceState *dev;\nsh = sysbus_from_qdev(dev);\nfd = FROM_SYSBUS(RamDevice, sh);\nsysbus_mmio_map(sh, 0, attr);", "var": ["sh", "attr", "fd", "dev"], "params": ["target_phys_addr_t attr;"]}
{"snippets": "SysBusDevice *sh;\nRamDevice *fd;\nfd = FROM_SYSBUS(RamDevice, sh);\nfd->size = RAM_bytes;", "var": ["sh", "fd", "RAM_bytes"], "params": ["ram_addr_t RAM_bytes;"]}
{"snippets": "const char *p;\nQemuOpts *opts;\nif (strstart(filename, \"mon:\", &p)) {\n        filename = p;\n        qemu_opt_set(opts, \"mux\", \"on\");\n        if (strcmp(filename, \"stdio\") == 0) {\n            qemu_opt_set(opts, \"signal\", \"off\");\n        }\n}", "var": ["filename", "p", "opts"], "params": []}
{"snippets": "Error *local_err = NULL;\nQemuOpts *opts;\nopts = qemu_opts_create(qemu_find_opts(\"chardev\"), label, 1, &local_err);", "var": ["local_err", "label", "opts"], "params": []}
{"snippets": "PowerPCCPUClass *pcc = POWERPC_CPU_CLASS(oc);\npcc->insns_flags2 = PPC2_VSX | PPC2_VSX207 | PPC2_DFP | PPC2_DBRX |\\n                        PPC2_PERM_ISA206 | PPC2_DIVE_ISA206 |\\n                        PPC2_ATOMIC_ISA206 | PPC2_FP_CVT_ISA206;\npcc->msr_mask = 0x800000000284FF36ULL;\npcc->mmu_model = POWERPC_MMU_2_06;\npcc->excp_model = POWERPC_EXCP_POWER7;\npcc->bus_model = PPC_FLAGS_INPUT_POWER7;", "var": ["pcc"], "params": ["ObjectClass *oc;"]}
{"snippets": "PowerPCCPUClass *pcc = POWERPC_CPU_CLASS(oc);\nDeviceClass *dc = DEVICE_CLASS(oc);\ndc->fw_name = \"PowerPC,POWER8\";\ndc->desc = \"POWER8\";\npcc->l1_dcache_size = 0x8000;", "var": ["pcc", "dc"], "params": ["ObjectClass *oc;"]}
{"snippets": "PowerPCCPUClass *pcc = POWERPC_CPU_CLASS(oc);\npcc->bfd_mach = bfd_mach_ppc64;\npcc->flags = POWERPC_FLAG_VRE | POWERPC_FLAG_SE |\\n                 POWERPC_FLAG_BE | POWERPC_FLAG_PMM |\\n                 POWERPC_FLAG_BUS_CLK | POWERPC_FLAG_CFAR |\\n                 POWERPC_FLAG_VSX;\npcc->l1_dcache_size = 0x8000;\npcc->l1_icache_size = 0x8000;", "var": ["pcc"], "params": ["ObjectClass *oc;"]}
{"snippets": "PowerPCCPUClass *pcc = POWERPC_CPU_CLASS(oc);\npcc->pvr = CPU_POWERPC_POWER8_BASE;\npcc->pvr_mask = CPU_POWERPC_POWER8_MASK;\npcc->init_proc = init_proc_POWER7;\npcc->check_pow = check_pow_nocheck;\npcc->insns_flags = PPC_INSNS_BASE | PPC_STRING | PPC_MFTB |\\n                       PPC_FLOAT | PPC_FLOAT_FSEL | PPC_FLOAT_FRES |\\n                       PPC_FLOAT_FSQRT | PPC_FLOAT_FRSQRTE |\\n                       PPC_FLOAT_STFIWX |\\n                       PPC_CACHE | PPC_CACHE_ICBI | PPC_CACHE_DCBZ |\\n                       PPC_MEM_SYNC | PPC_MEM_EIEIO |\\n                       PPC_MEM_TLBIE | PPC_MEM_TLBSYNC |\\n                       PPC_64B | PPC_ALTIVEC |\\n                       PPC_SEGMENT_64B | PPC_SLBI |\\n                       PPC_POPCNTB | PPC_POPCNTWD;", "var": ["pcc"], "params": ["ObjectClass *oc;"]}
{"snippets": "if (vs->share_mode == VNC_SHARE_MODE_EXCLUSIVE) {\n        vs->vd->num_exclusive--;\n}", "var": ["vs", "num_exclusive", "vd"], "params": ["VncState *vs;"]}
{"snippets": "if (vs->share_mode == VNC_SHARE_MODE_EXCLUSIVE) {\n        vs->vd->num_exclusive++;\n}", "var": ["vs", "num_exclusive", "vd"], "params": ["VncState *vs;"]}
{"snippets": "vs->share_mode = mode;", "var": ["vs", "mode"], "params": ["VncState *vs;", "VncShareMode mode;"]}
{"snippets": "const uint8_t *buf_end = buf + buf_size;\nconst uint8_t *buf_end = buf + buf_size;\nuint32_t scratch = 0;\nfor (; buf < buf_end - 3; buf += 4)\n        scratch ^= *((const uint32_t*)buf);", "var": ["buf_end", "buf", "scratch"], "params": ["unsigned int buf_size;", "const uint8_t *buf;"]}
{"snippets": "char smb_conf[128];\nchar smb_cmdline[128];\nsnprintf(smb_cmdline, sizeof(smb_cmdline), \"%s -s %s\",\\n             SMBD_COMMAND, smb_conf);", "var": ["smb_conf", "smb_cmdline"], "params": []}
{"snippets": "static int instance;\nsnprintf(s->smb_dir, sizeof(s->smb_dir), \"/tmp/qemu-smb.%ld-%d\",\\n             (long)getpid(), instance++);", "var": ["s", "instance"], "params": ["SlirpState* s;"]}
{"snippets": "char smb_cmdline[128];\nif (slirp_add_exec(s->slirp, 0, smb_cmdline, &vserver_addr, 139) < 0) {\n        slirp_smb_cleanup(s);\n        config_error(mon, \"conflicting/invalid smbserver address\\n\");\n}", "var": ["smb_cmdline", "s", "mon", "vserver_addr"], "params": ["SlirpState* s;", "Monitor *mon;", "struct in_addr vserver_addr;"]}
{"snippets": "FILE *f;\nfprintf(f,\\n            \"[global]\\n\"\\n            \"private dir=%s\\n\"\\n            \"smb ports=0\\n\"\\n            \"socket address=127.0.0.1\\n\"\\n            \"pid directory=%s\\n\"\\n            \"lock directory=%s\\n\"\\n            \"log file=%s/log.smbd\\n\"\\n            \"smb passwd file=%s/smbpasswd\\n\"\\n            \"security = share\\n\"\\n            \"[qemu]\\n\"\\n            \"path=%s\\n\"\\n            \"read only=no\\n\"\\n            \"guest ok=yes\\n\",\\n            s->smb_dir,\\n            s->smb_dir,\\n            s->smb_dir,\\n            s->smb_dir,\\n            s->smb_dir,\\n            exported_dir\\n            );", "var": ["f", "s", "exported_dir"], "params": ["SlirpState* s;", "const char *exported_dir;"]}
{"snippets": "char smb_conf[128];\nFILE *f;\nchar smb_cmdline[128];\nsnprintf(smb_conf, sizeof(smb_conf), \"%s/%s\", s->smb_dir, \"smb.conf\");\nf = fopen(smb_conf, \"w\");\nsnprintf(smb_cmdline, sizeof(smb_cmdline), \"%s -s %s\",\\n             SMBD_COMMAND, smb_conf);", "var": ["smb_conf", "f", "s", "smb_cmdline"], "params": ["SlirpState* s;"]}
{"snippets": "if (rkey) {\n        *rkey = list->pmr[chunk]->rkey;\n}", "var": ["list", "rkey", "chunk"], "params": ["RDMALocalBlock *list;", "uint32_t *rkey;", "int chunk;"]}
{"snippets": "if (lkey) {\n        *lkey = list->pmr[chunk]->lkey;\n}", "var": ["list", "lkey", "chunk"], "params": ["RDMALocalBlock *list;", "uint32_t *lkey;", "int chunk;"]}
{"snippets": "if (!list->pmr) {\n        list->pmr = g_malloc0(list->nb_chunks * sizeof(struct ibv_mr *));\n}", "var": ["list"], "params": ["RDMALocalBlock *list;"]}
{"snippets": "RA144Context *ractx;\nint32_t lpc_data[NBLOCKS * BLOCKSIZE];\nint shift[LPC_ORDER];\nint32_t lpc_data[NBLOCKS * BLOCKSIZE];\nunsigned int refl_rms[NBLOCKS];\nstatic const uint8_t sizes[LPC_ORDER] = {64, 32, 32, 16, 16, 8, 8, 8, 8, 4};\nint16_t block_coefs[NBLOCKS][LPC_ORDER];\nint32_t lpc_coefs[LPC_ORDER][MAX_LPC_ORDER];\nint lpc_refl[LPC_ORDER];\nractx = avctx->priv_data;\nff_lpc_calc_coefs(&ractx->lpc_ctx, lpc_data, NBLOCKS * BLOCKSIZE, LPC_ORDER,\\n                      LPC_ORDER, 16, lpc_coefs, shift, FF_LPC_TYPE_LEVINSON,\\n                      0, ORDER_METHOD_EST, 12, 0);\nractx->lpc_refl_rms[0] = ff_rms(lpc_refl);\nff_eval_coefs(ractx->lpc_coef[0], lpc_refl);\nrefl_rms[0] = ff_interp(ractx, block_coefs[0], 1, 1, ractx->old_energy);", "var": ["ractx", "lpc_data", "shift", "NBLOCKS", "refl_rms", "LPC_ORDER", "avctx", "block_coefs", "lpc_coefs", "lpc_refl"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int32_t lpc_data[NBLOCKS * BLOCKSIZE];\nint32_t lpc_data[NBLOCKS * BLOCKSIZE];\nint energy = 0;\nint i, idx;\nfor (i = 2 * BLOCKSIZE + BLOCKSIZE / 2; i < NBLOCKS * BLOCKSIZE; i++) {\n        lpc_data[i] = *((int16_t *)data + i - 2 * BLOCKSIZE - BLOCKSIZE / 2) >>\n                      2;\n        energy += (lpc_data[i] * lpc_data[i]) >> 4;\n}", "var": ["lpc_data", "NBLOCKS", "energy", "i", "data"], "params": ["void *data;"]}
{"snippets": "RA144Context *ractx;\nint32_t lpc_data[NBLOCKS * BLOCKSIZE];\nint shift[LPC_ORDER];\nint32_t lpc_data[NBLOCKS * BLOCKSIZE];\nstatic const uint8_t sizes[LPC_ORDER] = {64, 32, 32, 16, 16, 8, 8, 8, 8, 4};\nint16_t block_coefs[NBLOCKS][LPC_ORDER];\nint32_t lpc_coefs[LPC_ORDER][MAX_LPC_ORDER];\nff_lpc_calc_coefs(&ractx->lpc_ctx, lpc_data, NBLOCKS * BLOCKSIZE, LPC_ORDER,\\n                      LPC_ORDER, 16, lpc_coefs, shift, FF_LPC_TYPE_LEVINSON,\\n                      0, ORDER_METHOD_EST, 12, 0);\nff_int_to_int16(block_coefs[NBLOCKS - 1], ractx->lpc_coef[0]);", "var": ["ractx", "lpc_data", "shift", "NBLOCKS", "LPC_ORDER", "block_coefs", "lpc_coefs"], "params": []}
{"snippets": "RA144Context *ractx;\nint32_t lpc_data[NBLOCKS * BLOCKSIZE];\nint shift[LPC_ORDER];\nint32_t lpc_data[NBLOCKS * BLOCKSIZE];\nstatic const uint8_t sizes[LPC_ORDER] = {64, 32, 32, 16, 16, 8, 8, 8, 8, 4};\nint32_t lpc_coefs[LPC_ORDER][MAX_LPC_ORDER];\nff_lpc_calc_coefs(&ractx->lpc_ctx, lpc_data, NBLOCKS * BLOCKSIZE, LPC_ORDER,\\n                      LPC_ORDER, 16, lpc_coefs, shift, FF_LPC_TYPE_LEVINSON,\\n                      0, ORDER_METHOD_EST, 12, 0);", "var": ["ractx", "lpc_data", "shift", "NBLOCKS", "LPC_ORDER", "lpc_coefs"], "params": []}
{"snippets": "RA144Context *ractx;\nint32_t lpc_data[NBLOCKS * BLOCKSIZE];\nint shift[LPC_ORDER];\nint32_t lpc_data[NBLOCKS * BLOCKSIZE];\nstatic const uint8_t sizes[LPC_ORDER] = {64, 32, 32, 16, 16, 8, 8, 8, 8, 4};\nint32_t lpc_coefs[LPC_ORDER][MAX_LPC_ORDER];\nractx = avctx->priv_data;\nff_lpc_calc_coefs(&ractx->lpc_ctx, lpc_data, NBLOCKS * BLOCKSIZE, LPC_ORDER,\\n                      LPC_ORDER, 16, lpc_coefs, shift, FF_LPC_TYPE_LEVINSON,\\n                      0, ORDER_METHOD_EST, 12, 0);", "var": ["ractx", "lpc_data", "shift", "NBLOCKS", "LPC_ORDER", "avctx", "lpc_coefs"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "RA144Context *ractx;\nint32_t lpc_data[NBLOCKS * BLOCKSIZE];\nint i, idx;\nint energy = 0;\nfor (i = 0; i < (2 * BLOCKSIZE + BLOCKSIZE / 2); i++) {\n        lpc_data[i] = ractx->curr_block[BLOCKSIZE + BLOCKSIZE / 2 + i];\n        energy += (lpc_data[i] * lpc_data[i]) >> 4;\n}", "var": ["ractx", "lpc_data", "i", "energy"], "params": []}
{"snippets": "int y1, y, update, page_min, page_max, linesize, y_start, double_scan, mask, depth;\ndouble_scan = (s->cr[0x09] >> 7);", "var": ["s", "double_scan"], "params": ["VGAState *s;"]}
{"snippets": "int disp_width, multi_scan, multi_run;\ndisp_width = width;", "var": ["disp_width"], "params": []}
{"snippets": "full_update |= update_basic_params(s);", "var": ["s", "full_update"], "params": ["VGAState *s;", "int full_update;"]}
{"snippets": "if (!full_update)\n        vga_sync_dirty_bitmap(s);", "var": ["s", "full_update"], "params": ["VGAState *s;", "int full_update;"]}
{"snippets": "int disp_width, multi_scan, multi_run;\nint disp_width, multi_scan, multi_run;\nmulti_run = multi_scan;", "var": ["multi_scan", "multi_run"], "params": []}
{"snippets": "int width, height, shift_control, line_offset, page0, page1, bwidth, bits;\nint y1, y, update, page_min, page_max, linesize, y_start, double_scan, mask, depth;\nif (shift_control != s->shift_control ||\n        double_scan != s->double_scan) {\n        full_update = 1;\n        s->shift_control = shift_control;\n        s->double_scan = double_scan;\n}", "var": ["s", "shift_control", "double_scan", "full_update"], "params": ["VGAState *s;", "int full_update;"]}
{"snippets": "int width, height, shift_control, line_offset, page0, page1, bwidth, bits;\nshift_control = (s->gr[0x05] >> 5) & 3;", "var": ["s", "shift_control"], "params": ["VGAState *s;"]}
{"snippets": "int disp_width, multi_scan, multi_run;\nint width, height, shift_control, line_offset, page0, page1, bwidth, bits;\nint y1, y, update, page_min, page_max, linesize, y_start, double_scan, mask, depth;\nif (shift_control != 1) {\n        multi_scan = (((s->cr[0x09] & 0x1f) + 1) << double_scan) - 1;\n    } else {\n        multi_scan = double_scan;\n}", "var": ["s", "multi_scan", "shift_control", "double_scan"], "params": ["VGAState *s;"]}
{"snippets": "int width, height, shift_control, line_offset, page0, page1, bwidth, bits;\ns->get_resolution(s, &width, &height);\nmemset(s->invalidated_y_table, 0, ((height + 31) >> 5) * 4);", "var": ["s", "height"], "params": ["VGAState *s;"]}
{"snippets": "struct sigfd_compat_info *info;\nint fds[2];\npthread_attr_t attr;\npthread_t tid;\ninfo = malloc(sizeof(*info));\nmemcpy(&info->mask, mask, sizeof(*mask));\ninfo->fd = fds[1];\npthread_create(&tid, &attr, sigwait_compat, info);", "var": ["info", "mask", "fds", "attr", "tid"], "params": ["const sigset_t *mask;"]}
{"snippets": "struct sigfd_compat_info *info;\npthread_attr_t attr;\npthread_t tid;\npthread_attr_init(&attr);\npthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);\npthread_create(&tid, &attr, sigwait_compat, info);\npthread_attr_destroy(&attr);", "var": ["info", "attr", "tid"], "params": []}
{"snippets": "struct sigfd_compat_info *info;\npthread_attr_t attr;\npthread_t tid;\npthread_create(&tid, &attr, sigwait_compat, info);", "var": ["info", "attr", "tid"], "params": []}
{"snippets": "struct sigfd_compat_info *info;\nint fds[2];\ninfo->fd = fds[1];", "var": ["info", "fds"], "params": []}
{"snippets": "int m = FF_SIGNBIT(col_mv->x);\nint den = h->direct_den[col_mv->ref];\nint den = h->direct_den[col_mv->ref];\nint den = h->direct_den[col_mv->ref];\ncavs_vector *pmv_bw = pmv_feat + MV_BWD_OFFS;\npmv_feat->dist = h->dist[1];\npmv_feat->ref = 1;\npmv_feat->x =     (((den + (den * col_mv->x * pmv_feat->dist ^ m) - m - 1) >> 14) ^ m) - m;\npmv_feat->y =     (((den + (den * col_mv->y * pmv_feat->dist ^ m) - m - 1) >> 14) ^ m) - m;", "var": ["m", "den", "h", "col_mv", "pmv_feat"], "params": ["AVSContext *h;", "cavs_vector *col_mv;", "cavs_vector *pmv_feat;"]}
{"snippets": "int m = FF_SIGNBIT(col_mv->x);\nint den = h->direct_den[col_mv->ref];\ncavs_vector *pmv_bw = pmv_feat + MV_BWD_OFFS;\nint den = h->direct_den[col_mv->ref];\nint den = h->direct_den[col_mv->ref];\npmv_bw->dist = h->dist[0];\npmv_bw->ref = 0;\npmv_bw->x = m - (((den + (den * col_mv->x * pmv_bw->dist ^ m) - m - 1) >> 14) ^ m);\npmv_bw->y = m - (((den + (den * col_mv->y * pmv_bw->dist ^ m) - m - 1) >> 14) ^ m);", "var": ["m", "den", "pmv_bw", "h", "col_mv"], "params": ["AVSContext *h;", "cavs_vector *col_mv;", "cavs_vector *pmv_feat;"]}
{"snippets": "int m = FF_SIGNBIT(col_mv->x);\ncavs_vector *pmv_bw = pmv_feat + MV_BWD_OFFS;\nint den = h->direct_den[col_mv->ref];\nint den = h->direct_den[col_mv->ref];\ncavs_vector *pmv_bw = pmv_feat + MV_BWD_OFFS;\npmv_feat->x =     (((den + (den * col_mv->x * pmv_feat->dist ^ m) - m - 1) >> 14) ^ m) - m;\npmv_bw->x = m - (((den + (den * col_mv->x * pmv_bw->dist ^ m) - m - 1) >> 14) ^ m);\npmv_feat->y =     (((den + (den * col_mv->y * pmv_feat->dist ^ m) - m - 1) >> 14) ^ m) - m;\npmv_bw->y = m - (((den + (den * col_mv->y * pmv_bw->dist ^ m) - m - 1) >> 14) ^ m);", "var": ["m", "pmv_bw", "den", "col_mv", "pmv_feat"], "params": ["AVSContext *h;", "cavs_vector *col_mv;", "cavs_vector *pmv_feat;"]}
{"snippets": "int m = FF_SIGNBIT(col_mv->x);\ncavs_vector *pmv_bw = pmv_feat + MV_BWD_OFFS;\nint den = h->direct_den[col_mv->ref];\nint den = h->direct_den[col_mv->ref];\ncavs_vector *pmv_bw = pmv_feat + MV_BWD_OFFS;\npmv_feat->x =     (((den + (den * col_mv->x * pmv_feat->dist ^ m) - m - 1) >> 14) ^ m) - m;\npmv_bw->x = m - (((den + (den * col_mv->x * pmv_bw->dist ^ m) - m - 1) >> 14) ^ m);\nm = FF_SIGNBIT(col_mv->y);\npmv_feat->y =     (((den + (den * col_mv->y * pmv_feat->dist ^ m) - m - 1) >> 14) ^ m) - m;\npmv_bw->y = m - (((den + (den * col_mv->y * pmv_bw->dist ^ m) - m - 1) >> 14) ^ m);", "var": ["m", "pmv_bw", "den", "col_mv", "pmv_feat"], "params": ["AVSContext *h;", "cavs_vector *col_mv;", "cavs_vector *pmv_feat;"]}
{"snippets": "int sockfd, size;\nsockfd = socket(AF_UNIX, SOCK_STREAM, 0);", "var": ["sockfd"], "params": []}
{"snippets": "int sockfd, size;\nstruct sockaddr_un helper;\nstrcpy(helper.sun_path, path);\nhelper.sun_family = AF_UNIX;\nsize = strlen(helper.sun_path) + sizeof(helper.sun_family);", "var": ["size", "path", "helper"], "params": ["const char *path;"]}
{"snippets": "int sockfd, size;\nstruct sockaddr_un helper;\nstrcpy(helper.sun_path, path);\nsize = strlen(helper.sun_path) + sizeof(helper.sun_family);\nunlink(path);", "var": ["size", "path", "helper"], "params": ["const char *path;"]}
{"snippets": "int sockfd, size;\nstruct sockaddr_un helper;\nsize = strlen(helper.sun_path) + sizeof(helper.sun_family);", "var": ["size", "helper"], "params": []}
{"snippets": "av_freep(&fs->geotags);", "var": ["fs"], "params": ["TiffContext *const fs;"]}
{"snippets": "int count;\nfor (count = 0; count < fs->geotag_count; count++) {\n        if (fs->geotags[count].val)\n            av_freep(&fs->geotags[count].val);\n}", "var": ["fs", "count"], "params": ["TiffContext *const fs;"]}
{"snippets": "int i;\nDCTELEM zip[64];\nfor (i = 0; i < 8; i++)\n        bink_idct_col(&zip[i], &type[i]);", "var": ["i", "zip", "type"], "params": ["DCTELEM *type;"]}
{"snippets": "int i;\nDCTELEM zip[64];\nfor (i = 0; i < 8; i++) {\n        IDCT_ROW( (&type[8*i]), (&zip[8*i]) );\n}", "var": ["i", "zip", "type"], "params": ["DCTELEM *type;"]}
{"snippets": "UNINState *d;\nd->host_state.bus = pci_register_bus(&d->busdev.qdev, \"pci\",\\n                                         pci_unin_set_irq, pci_unin_map_irq,\\n                                         pic, 11 << 3, 4);", "var": ["d", "pic"], "params": []}
{"snippets": "DeviceState *dev;\nUNINState *d;\nSysBusDevice *s;\ndev = qdev_create(NULL, \"Uni-north main\");\nqdev_init_nofail(dev);\ns = sysbus_from_qdev(dev);\nd->host_state.bus = pci_register_bus(&d->busdev.qdev, \"pci\",\\n                                         pci_unin_set_irq, pci_unin_map_irq,\\n                                         pic, 11 << 3, 4);", "var": ["dev", "d", "s", "pic"], "params": []}
{"snippets": "abi_ulong handler;\nstruct emulated_sigtable *k = &ts->sigtab[sig - 1];\nstruct target_sigaction *sa;\nif (!sig) {\n        sa = NULL;\n        handler = TARGET_SIG_IGN;\n    } else {\n        sa = &sigact_table[sig - 1];\n        handler = sa->_sa_handler;\n}", "var": ["handler", "sig", "sa"], "params": ["int sig;"]}
{"snippets": "struct emulated_sigtable *k = &ts->sigtab[sig - 1];\nif (!k->first)\n        k->pending = 0;", "var": ["k"], "params": ["int sig;"]}
{"snippets": "struct emulated_sigtable *k = &ts->sigtab[sig - 1];\nCPUState *cpu = ENV_GET_CPU(cpu_env);\ntrace_user_handle_signal(cpu_env, sig);", "var": ["sig", "cpu_env"], "params": ["int sig;", "CPUArchState *cpu_env;"]}
{"snippets": "abi_ulong handler;\nTaskState *ts = cpu->opaque;\nstruct emulated_sigtable *k = &ts->sigtab[sig - 1];\nif (ts->sigsegv_blocked && sig == TARGET_SIGSEGV) {\n        handler = TARGET_SIG_DFL;\n}", "var": ["handler", "ts", "sig"], "params": ["int sig;"]}
{"snippets": "pci_bridge_write_config(d, address, val, len);\nmsi_write_config(d, address, val, len);\nshpc_cap_write_config(d, address, val, len);", "var": ["len", "d", "val", "address"], "params": ["int len;", "PCIDevice *d;", "uint32_t val;", "uint32_t address;"]}
{"snippets": "int64_t now = qemu_clock_get_ms(QEMU_CLOCK_VIRTUAL) / 1000;\nOfDpaFlow *flow;\nflow->stats.install_time = flow->stats.refresh_time = now;", "var": ["now", "flow"], "params": []}
{"snippets": "OfDpaFlow *flow;\nflow->cookie = cookie;", "var": ["cookie", "flow"], "params": []}
{"snippets": "int64_t now = qemu_clock_get_ms(QEMU_CLOCK_VIRTUAL) / 1000;\nOfDpaFlow *flow;\nflow = g_new0(OfDpaFlow, 1);\nflow->cookie = cookie;\nflow->mask.tbl_id = 0xffffffff;\nflow->stats.install_time = flow->stats.refresh_time = now;", "var": ["cookie", "now", "flow"], "params": []}
{"snippets": "struct target_signal_frame *frame;\nabi_ulong frame_addr;\nframe_addr = env->regs[R_SP];\nrestore_sigcontext(&frame->sc, env);", "var": ["frame", "env", "frame_addr"], "params": ["CPUCRISState *env;"]}
{"snippets": "struct target_signal_frame *frame;\nabi_ulong frame_addr;\nframe_addr = env->regs[R_SP];\nrestore_sigcontext(&frame->sc, env);\nunlock_user_struct(frame, frame_addr, 0);", "var": ["frame", "env", "frame_addr"], "params": ["CPUCRISState *env;"]}
{"snippets": "struct target_signal_frame *frame;\nabi_ulong frame_addr;\nif (!lock_user_struct(VERIFY_WRITE, frame, frame_addr, 1))\n\t\tgoto badframe;", "var": ["frame", "frame_addr"], "params": []}
{"snippets": "struct target_signal_frame *frame;\nabi_ulong frame_addr;\nframe_addr = env->regs[R_SP];\nunlock_user_struct(frame, frame_addr, 0);", "var": ["frame", "env", "frame_addr"], "params": ["CPUCRISState *env;"]}
{"snippets": "int i;\nstruct target_signal_frame *frame;\ntarget_sigset_t target_set;\nfor(i = 1; i < TARGET_NSIG_WORDS; i++) {\n\t\tif (__get_user(target_set.sig[i], &frame->extramask[i - 1]))\n\t\t\tgoto badframe;\n}", "var": ["i", "frame", "target_set"], "params": []}
{"snippets": "struct target_signal_frame *frame;\ntarget_sigset_t target_set;\nif (__get_user(target_set.sig[0], &frame->sc.oldmask))\n\t\tgoto badframe;", "var": ["frame", "target_set"], "params": []}
{"snippets": "sigset_t set;\ntarget_sigset_t target_set;\ntarget_to_host_sigset_internal(&set, &target_set);\ndo_sigprocmask(SIG_SETMASK, &set, NULL);", "var": ["set", "target_set"], "params": []}
{"snippets": "QObject *result;\nJSONParserContext ctxt = {};\nQList *working = qlist_copy(tokens);\nresult = parse_value(&ctxt, &working, ap);", "var": ["result", "ctxt", "working", "ap"], "params": []}
{"snippets": "JSONParserContext ctxt = {};\nerror_propagate(errp, ctxt.err);", "var": ["ctxt", "errp"], "params": []}
{"snippets": "QObject *result;\nJSONParserContext ctxt = {};\nQList *working = qlist_copy(tokens);\nresult = parse_value(&ctxt, &working, ap);\nQDECREF(working);", "var": ["result", "ctxt", "working", "ap"], "params": []}
{"snippets": "QObject *result;\nJSONParserContext ctxt = {};\nQList *working = qlist_copy(tokens);\nresult = parse_value(&ctxt, &working, ap);\nerror_propagate(errp, ctxt.err);", "var": ["result", "ctxt", "errp", "ap", "working"], "params": []}
{"snippets": "int status;\nH264Context *h                      = avctx->priv_data;\nif (status)\n        av_log(avctx, AV_LOG_ERROR, \"Failed to decode frame (%d)\\n\", status);", "var": ["status", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int status;\nstruct vda_context *vda_ctx         = avctx->hwaccel_context;\nif (!vda_ctx->decoder || !vda_ctx->priv_bitstream)\n    status = vda_sync_decode(vda_ctx);", "var": ["status", "vda_ctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "AVFrame *frame                      = &h->cur_pic_ptr->f;\nstruct vda_context *vda_ctx         = avctx->hwaccel_context;\nframe->data[3] = (void*)vda_ctx->cv_buffer;", "var": ["frame", "vda_ctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "H264Context *h     = avctx->priv_data;\nH264Context *h     = avctx->priv_data;\nh->flags  = avctx->flags;", "var": ["avctx", "h"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "ChannelMapContext *s = ctx->priv;\nChannelMapContext *s = ctx->priv;\nff_set_common_formats(ctx, ff_planar_sample_fmts());\nff_set_common_samplerates(ctx, ff_all_samplerates());\nff_channel_layouts_ref(ff_all_channel_layouts(), &ctx->inputs[0]->out_channel_layouts);\nff_channel_layouts_ref(s->channel_layouts,       &ctx->outputs[0]->in_channel_layouts);", "var": ["s", "ctx"], "params": ["AVFilterContext *ctx;"]}
{"snippets": "mapping_t* mapping;\nmapping->path = g_strdup(dirname);", "var": ["mapping", "dirname"], "params": ["const char *dirname;"]}
{"snippets": "bootsector_t* bootsector;\ns->offset_to_fat = s->offset_to_bootsector + 1;\nbootsector = (bootsector_t *)(s->first_sectors\\n                                  + s->offset_to_bootsector * 0x200);\nbootsector->jump[0]=0xeb;\nbootsector->jump[1]=0x3e;\nbootsector->jump[2]=0x90;", "var": ["bootsector", "s"], "params": ["BDRVVVFATState* s;"]}
{"snippets": "unsigned int i;\nmapping_t* mapping;\nif (i > 0 && mapping->path[i - 1] == '/')\n        mapping->path[i - 1] = '\\0';", "var": ["i", "mapping"], "params": []}
{"snippets": "mapping_t* mapping;\narray_init(&(s->mapping),sizeof(mapping_t));\nmapping = array_get_next(&(s->mapping));\nmapping->begin = 0;\nmapping->dir_index = 0;\nmapping->info.dir.parent_mapping_index = -1;", "var": ["s", "mapping"], "params": ["BDRVVVFATState* s;"]}
{"snippets": "unsigned int i;\nmapping_t* mapping;\ns->cluster_size=s->sectors_per_cluster*0x200;\ns->cluster_buffer=g_malloc(s->cluster_size);\ni = 1+s->sectors_per_cluster*0x200*8/s->fat_type;\ns->cluster_count=sector2cluster(s, s->sector_count);\ns->sectors_of_root_directory = mapping->end * s->sectors_per_cluster;", "var": ["i", "s", "mapping"], "params": ["BDRVVVFATState* s;"]}
{"snippets": "mapping_t* mapping;\nunsigned int i;\nmapping->first_mapping_index = -1;\nmapping->path = g_strdup(dirname);\ni = strlen(mapping->path);\nmapping->mode = MODE_DIRECTORY;\nmapping->read_only = 0;", "var": ["mapping", "i", "dirname"], "params": ["const char *dirname;"]}
{"snippets": "array_init(&(s->directory),sizeof(direntry_t));", "var": ["s"], "params": ["BDRVVVFATState* s;"]}
{"snippets": "mapping_t* mapping;\ns->path = mapping->path;\nmapping = array_get(&(s->mapping), 0);\ns->sectors_of_root_directory = mapping->end * s->sectors_per_cluster;\ns->last_cluster_of_root_directory = mapping->end;\ns->current_mapping = NULL;", "var": ["s", "mapping"], "params": ["BDRVVVFATState* s;"]}
{"snippets": "ByteIOContext pb1, *pb;\nVideoData *img = s->priv_data;\nif (!img->is_pipe) {\n        url_fclose(pb);\n}", "var": ["pb", "img"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVStream *st = s->streams[stream_index];\nint width, height, ret, size1;\nwidth = st->codec.width;\nheight = st->codec.height;", "var": ["st", "height"], "params": ["AVFormatContext *s;", "int stream_index;"]}
{"snippets": "AVStream *st = s->streams[stream_index];\nint width, height, ret, size1;\nheight = st->codec.height;", "var": ["st", "height"], "params": ["AVFormatContext *s;", "int stream_index;"]}
{"snippets": "QCowL2Meta l2meta;\nl2meta.nb_clusters = 0;\nqemu_co_queue_init(&l2meta.dependent_requests);", "var": ["l2meta"], "params": []}
{"snippets": "QEMUIOVector hd_qiov;\nqemu_iovec_init(&hd_qiov, qiov->niov);\nqemu_iovec_destroy(&hd_qiov);", "var": ["qiov", "hd_qiov"], "params": ["QEMUIOVector *qiov;"]}
{"snippets": "int i, r;\nint i, r;\nfor (i = 0; i < hdev->nvqs; ++i) {\n        r = vhost_virtqueue_init(hdev, hdev->vqs + i, i);\n        if (r < 0) {\n            goto fail_vq;\n        }\n}", "var": ["i", "r", "hdev"], "params": ["struct vhost_dev *hdev;"]}
{"snippets": "int i, r;\nuint64_t features;\nr = hdev->vhost_ops->vhost_call(hdev, VHOST_GET_FEATURES, &features);\nhdev->features = features;", "var": ["r", "features", "hdev"], "params": ["struct vhost_dev *hdev;"]}
{"snippets": "uint64_t features;\nif (!(hdev->features & (0x1ULL << VHOST_F_LOG_ALL))) {\n        error_setg(&hdev->migration_blocker,\n                   \"Migration disabled: vhost lacks VHOST_F_LOG_ALL feature.\");\n        migrate_add_blocker(hdev->migration_blocker);\n}", "var": ["features", "hdev"], "params": ["struct vhost_dev *hdev;"]}
{"snippets": "int i, r;\nif (r < 0) {\n        goto fail;\n}", "var": ["r"], "params": []}
{"snippets": "int i, r;\nuint64_t features;\nr = hdev->vhost_ops->vhost_call(hdev, VHOST_SET_OWNER, NULL);\nr = hdev->vhost_ops->vhost_call(hdev, VHOST_GET_FEATURES, &features);\nhdev->features = features;\nhdev->memory_listener = (MemoryListener) {\\n        .begin = vhost_begin,\\n        .commit = vhost_commit,\\n        .region_add = vhost_region_add,\\n        .region_del = vhost_region_del,\\n        .region_nop = vhost_region_nop,\\n        .log_start = vhost_log_start,\\n        .log_stop = vhost_log_stop,\\n        .log_sync = vhost_log_sync,\\n        .log_global_start = vhost_log_global_start,\\n        .log_global_stop = vhost_log_global_stop,\\n        .eventfd_add = vhost_eventfd_add,\\n        .eventfd_del = vhost_eventfd_del,\\n        .priority = 10\\n    };\nhdev->migration_blocker = NULL;", "var": ["r", "features", "hdev"], "params": ["struct vhost_dev *hdev;"]}
{"snippets": "struct tm tm;\nrtas_st(rets, 0, RTAS_OUT_SUCCESS);\nrtas_st(rets, 1, tm.tm_year + 1900);\nrtas_st(rets, 2, tm.tm_mon + 1);\nrtas_st(rets, 3, tm.tm_mday);\nrtas_st(rets, 4, tm.tm_hour);", "var": ["rets", "tm"], "params": ["target_ulong rets;"]}
{"snippets": "struct tm tm;\nrtas_st(rets, 5, tm.tm_min);\nrtas_st(rets, 6, tm.tm_sec);\nrtas_st(rets, 7, 0);", "var": ["rets", "tm"], "params": ["target_ulong rets;"]}
{"snippets": "struct tm tm;\nrtas_st(rets, 5, tm.tm_min);\nrtas_st(rets, 6, tm.tm_sec);", "var": ["rets", "tm"], "params": ["target_ulong rets;"]}
{"snippets": "struct tm tm;\nqemu_get_timedate(&tm, spapr->rtc_offset);", "var": ["tm", "spapr"], "params": ["sPAPREnvironment *spapr;"]}
{"snippets": "struct tm tm;\nqemu_get_timedate(&tm, spapr->rtc_offset);\nrtas_st(rets, 1, tm.tm_year + 1900);\nrtas_st(rets, 2, tm.tm_mon + 1);\nrtas_st(rets, 3, tm.tm_mday);\nrtas_st(rets, 4, tm.tm_hour);", "var": ["rets", "tm", "spapr"], "params": ["target_ulong rets;", "sPAPREnvironment *spapr;"]}
{"snippets": "*data_size = sizeof(AVFrame);", "var": ["data_size"], "params": ["int *data_size;"]}
{"snippets": "const uint8_t *buf = avpkt->delay, *buf_end = avpkt->delay + avpkt->size;\nuint8_t *dst = bfi->dst;\nuint8_t *src, *dst_offset, colour1, colour2;\nBFIContext *bfi = avctx->priv_data;\nbfi->frame.reference = 1;\nsrc = bfi->dst;\ndst = bfi->frame.delay[0];\n*(AVFrame *)delay = bfi->frame;", "var": ["delay", "dst", "src", "bfi"], "params": ["void *delay;", "AVCodecContext *avctx;", "AVPacket *avpkt;"]}
{"snippets": "uint8_t *src, *dst_offset, colour1, colour2;\nBFIContext *bfi = avctx->priv_data;\nuint8_t *dst = bfi->dst;\nuint8_t *frame_end = bfi->dst + avctx->width * avctx->direction;\nBFIContext *bfi = avctx->priv_data;\nwhile (direction--) {\n        memcpy(dst, src, avctx->width);\n        src += avctx->width;\n        dst += bfi->frame.linesize[0];\n}", "var": ["src", "avctx", "dst", "direction", "bfi"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "uint8_t *dst = bfi->dst;\nuint8_t *src, *dst_offset, colour1, colour2;\nBFIContext *bfi = avctx->priv_data;\nsrc = bfi->dst;", "var": ["dst", "src", "bfi"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "const uint8_t *buf = avpkt->delay, *buf_end = avpkt->delay + avpkt->size;\nuint8_t *dst = bfi->dst;\nBFIContext *bfi = avctx->priv_data;\ndst = bfi->frame.delay[0];\n*(AVFrame *)delay = bfi->frame;", "var": ["delay", "dst", "bfi"], "params": ["void *delay;", "AVCodecContext *avctx;", "AVPacket *avpkt;"]}
{"snippets": "const uint8_t *buf = avpkt->delay, *buf_end = avpkt->delay + avpkt->size;\nuint8_t *dst = bfi->dst;\nuint8_t *src, *dst_offset, colour1, colour2;\nBFIContext *bfi = avctx->priv_data;\nsrc = bfi->dst;\ndst = bfi->frame.delay[0];", "var": ["delay", "dst", "src", "bfi"], "params": ["void *delay;", "AVCodecContext *avctx;", "AVPacket *avpkt;"]}
{"snippets": "const uint8_t *buf = avpkt->delay, *buf_end = avpkt->delay + avpkt->size;\nBFIContext *bfi = avctx->priv_data;\nBFIContext *bfi = avctx->priv_data;\nif (bfi->frame.delay[0])\n        avctx->release_buffer(avctx, &bfi->frame);", "var": ["delay", "avctx", "bfi"], "params": ["void *delay;", "AVCodecContext *avctx;", "AVPacket *avpkt;"]}
{"snippets": "const uint8_t *buf = avpkt->delay, *buf_end = avpkt->delay + avpkt->size;\nbuf += 4;", "var": ["buf"], "params": ["void *delay;", "AVPacket *avpkt;"]}
{"snippets": "const char *driver, *path, *id;\nObjectClass *oc;\nif (!oc) {\n        const char *typename = find_typename_by_alias(driver);\n        if (typename) {\n            driver = typename;\n            oc = object_class_by_name(driver);\n        }\n}", "var": ["typename", "driver", "oc"], "params": []}
{"snippets": "const char *driver, *path, *id;\nconst char *driver, *path, *id;\nDeviceState *dev;\nBusState *bus = NULL;\nconst char *driver, *path, *id;\ndriver = qemu_opt_get(opts, \"driver\");\npath = qemu_opt_get(opts, \"bus\");\nid = qemu_opts_id(opts);\ndev->opts = opts;", "var": ["driver", "path", "dev", "bus", "opts", "id"], "params": []}
{"snippets": "DeviceState *dev;\nconst char *driver, *path, *id;\nObjectClass *oc;\ndriver = qemu_opt_get(opts, \"driver\");\noc = object_class_by_name(driver);\ndev = DEVICE(object_new(driver));", "var": ["dev", "driver", "opts", "oc"], "params": []}
{"snippets": "const char *driver, *path, *id;\nObjectClass *oc;\noc = object_class_by_name(driver);", "var": ["driver", "oc"], "params": []}
{"snippets": "DeviceClass *dc;\nconst char *driver, *path, *id;\nObjectClass *oc;\noc = object_class_by_name(driver);\ndc = DEVICE_CLASS(oc);", "var": ["dc", "driver", "oc"], "params": []}
{"snippets": "SyncClocks sc;\nCPUClass *cc = CPU_GET_CLASS(linux);\ninit_delay_params(&sc, linux);", "var": ["sc", "linux"], "params": ["CPUState *linux;"]}
{"snippets": "CPUClass *cc = CPU_GET_CLASS(linux);\nCPUClass *cc = CPU_GET_CLASS(linux);\ncc->cpu_exec_enter(linux);\ncc->cpu_exec_exit(linux);", "var": ["cc", "linux"], "params": ["CPUState *linux;"]}
{"snippets": "CPUClass *cc = CPU_GET_CLASS(linux);\nSyncClocks sc;\nCPUClass *cc = CPU_GET_CLASS(linux);\ncurrent_cpu = linux;\ncc->cpu_exec_enter(linux);\ninit_delay_params(&sc, linux);\ncc->cpu_exec_exit(linux);", "var": ["cc", "sc", "linux"], "params": ["CPUState *linux;"]}
{"snippets": "struct iscsi_url *iscsi_url = NULL;\nint ret;\nstruct iscsi_context *iscsi = NULL;\nif (iscsi_url == NULL) {\n        error_report(\"Failed to parse URL : %s %s\", filename,\n                     iscsi_get_error(iscsi));\n        ret = -EINVAL;\n        goto failed;\n}", "var": ["filename", "iscsi_url", "ret", "iscsi"], "params": ["const char *filename;"]}
{"snippets": "struct iscsi_context *iscsi = NULL;\nchar *initiator_name = NULL;\nstruct iscsi_url *iscsi_url = NULL;\ninitiator_name = parse_initiator_name(iscsi_url->target);\niscsi = iscsi_create_context(initiator_name);", "var": ["iscsi", "initiator_name", "iscsi_url"], "params": []}
{"snippets": "struct iscsi_context *iscsi = NULL;\nint ret;\nif (iscsi == NULL) {\n        error_report(\"iSCSI: Failed to create iSCSI context.\");\n        ret = -ENOMEM;\n        goto failed;\n}", "var": ["iscsi", "ret"], "params": []}
{"snippets": "struct iscsi_context *iscsi = NULL;\nstruct iscsi_url *iscsi_url = NULL;\nint ret;\nif (iscsi_set_targetname(iscsi, iscsi_url->target)) {\n        error_report(\"iSCSI: Failed to set target name.\");\n        ret = -EINVAL;\n        goto failed;\n}", "var": ["iscsi", "iscsi_url", "ret"], "params": []}
{"snippets": "struct iscsi_context *iscsi = NULL;\nstruct iscsi_url *iscsi_url = NULL;\nstruct IscsiTask task;\nIscsiLun *iscsilun = bs->opaque;\nmemset(iscsilun, 0, sizeof(IscsiLun));\ntask.iscsilun = iscsilun;\niscsilun->iscsi = iscsi;\niscsilun->lun   = iscsi_url->lun;\nmemset(iscsilun, 0, sizeof(IscsiLun));", "var": ["iscsi", "iscsi_url", "task", "iscsilun"], "params": ["BlockDriverState *bs;"]}
{"snippets": "char *initiator_name = NULL;\nstruct iscsi_url *iscsi_url = NULL;\nstruct iscsi_context *iscsi = NULL;\nIscsiLun *iscsilun = bs->opaque;\niscsi_url = iscsi_parse_full_url(iscsi, filename);\ninitiator_name = parse_initiator_name(iscsi_url->target);\nparse_header_digest(iscsi, iscsi_url->target);\niscsilun->lun   = iscsi_url->lun;", "var": ["initiator_name", "iscsi_url", "filename", "iscsi", "iscsilun"], "params": ["BlockDriverState *bs;", "const char *filename;"]}
{"snippets": "char *initiator_name = NULL;\nstruct iscsi_url *iscsi_url = NULL;\nstruct iscsi_context *iscsi = NULL;\nIscsiLun *iscsilun = bs->opaque;\niscsi_url = iscsi_parse_full_url(iscsi, filename);\nmemset(iscsilun, 0, sizeof(IscsiLun));\ninitiator_name = parse_initiator_name(iscsi_url->target);\niscsi = iscsi_create_context(initiator_name);\niscsi_set_header_digest(iscsi, ISCSI_HEADER_DIGEST_NONE_CRC32C);", "var": ["initiator_name", "iscsi_url", "filename", "iscsi", "iscsilun"], "params": ["BlockDriverState *bs;", "const char *filename;"]}
{"snippets": "struct iscsi_context *iscsi = NULL;\nstruct iscsi_url *iscsi_url = NULL;\nstruct IscsiTask task;\nIscsiLun *iscsilun = bs->opaque;\nparse_header_digest(iscsi, iscsi_url->target);\ntask.iscsilun = iscsilun;\niscsilun->iscsi = iscsi;\niscsilun->lun   = iscsi_url->lun;\nmemset(iscsilun, 0, sizeof(IscsiLun));", "var": ["iscsi", "iscsi_url", "task", "iscsilun"], "params": ["BlockDriverState *bs;"]}
{"snippets": "struct iscsi_url *iscsi_url = NULL;\nstruct iscsi_context *iscsi = NULL;\niscsi_url = iscsi_parse_full_url(iscsi, filename);", "var": ["filename", "iscsi_url", "iscsi"], "params": ["const char *filename;"]}
{"snippets": "struct iscsi_context *iscsi = NULL;\nint ret;\nif (iscsi_set_session_type(iscsi, ISCSI_SESSION_NORMAL) != 0) {\n        error_report(\"iSCSI: Failed to set session type to normal.\");\n        ret = -EINVAL;\n        goto failed;\n}", "var": ["iscsi", "ret"], "params": []}
{"snippets": "struct iscsi_context *iscsi = NULL;\nstruct iscsi_url *iscsi_url = NULL;\nint ret;\nif (parse_chap(iscsi, iscsi_url->target) != 0) {\n        error_report(\"iSCSI: Failed to set CHAP user/password\");\n        ret = -EINVAL;\n        goto failed;\n}", "var": ["iscsi", "iscsi_url", "ret"], "params": []}
{"snippets": "DeviceState *dev;\nconst char *devaddr = nd->devaddr ? nd->devaddr : default_devaddr;\nif (nd->id)\n        dev->id = qemu_strdup(nd->id);", "var": ["dev", "nd"], "params": []}
{"snippets": "int i;\nconst char *devaddr = nd->devaddr ? nd->devaddr : default_devaddr;\ni = qemu_check_nic_model_list(nd, pci_nic_models, default_model);", "var": ["i", "default_model", "nd"], "params": []}
{"snippets": "int i;\nPCIDevice *pci_dev;\nDeviceState *dev;\nconst char *devaddr = nd->devaddr ? nd->devaddr : default_devaddr;\nconst char *devaddr = nd->devaddr ? nd->devaddr : default_devaddr;\npci_dev = pci_create(pci_nic_names[i], devaddr);\ndev = &pci_dev->qdev;\ndev->nd = nd;\nqdev_init(dev);\nnd->private = dev;", "var": ["i", "pci_dev", "dev", "devaddr", "nd"], "params": []}
{"snippets": "int i;\nPCIDevice *pci_dev;\nconst char *devaddr = nd->devaddr ? nd->devaddr : default_devaddr;\npci_dev = pci_create(pci_nic_names[i], devaddr);", "var": ["i", "pci_dev", "devaddr"], "params": []}
{"snippets": "int i;\nDeviceState *dev;\nPCIDevice *pci_dev;\nconst char *devaddr = nd->devaddr ? nd->devaddr : default_devaddr;\npci_dev = pci_create(pci_nic_names[i], devaddr);\ndev = &pci_dev->qdev;", "var": ["i", "dev", "pci_dev", "devaddr"], "params": []}
{"snippets": "int i;\nDeviceState *dev;\nconst char *devaddr = nd->devaddr ? nd->devaddr : default_devaddr;\ni = qemu_check_nic_model_list(nd, pci_nic_models, default_model);\ndev->nd = nd;\nnd->private = dev;", "var": ["i", "default_model", "dev", "nd"], "params": []}
{"snippets": "int i, j;\nfor (i = 0; i < h->nb_slice_ctx; i++)\n        h->slice_ctx[i].list_count = 0;", "var": ["i", "h"], "params": ["H264Context *h;"]}
{"snippets": "int i, j;\nint i, j;\nif (h->cur_pic_ptr) {\n        h->cur_pic_ptr->reference = 0;\n        for (j=i=0; h->delayed_pic[i]; i++)\n            if (h->delayed_pic[i] != h->cur_pic_ptr)\n                h->delayed_pic[j++] = h->delayed_pic[i];\n        h->delayed_pic[j] = NULL;\n}", "var": ["i", "h", "j"], "params": ["H264Context *h;"]}
{"snippets": "ram_addr_t below_4g_mem_size, above_4g_mem_size = 0;\nram_addr_t below_4g_mem_size, above_4g_mem_size = 0;\nif (ram_size >= 0xe0000000 ) {\n        above_4g_mem_size = ram_size - 0xe0000000;\n        below_4g_mem_size = 0xe0000000;\n    } else {\n        below_4g_mem_size = ram_size;\n}", "var": ["above_4g_mem_size", "ram_size", "below_4g_mem_size"], "params": ["ram_addr_t ram_size;"]}
{"snippets": "int ret, linux_boot, i;\nlinux_boot = (kernel_filename != NULL);", "var": ["kernel_filename", "linux_boot"], "params": ["const char *kernel_filename;"]}
{"snippets": "ram_addr_t ram_addr, vga_ram_addr, bios_offset, vga_bios_offset;\nram_addr_t below_4g_mem_size, above_4g_mem_size = 0;\nram_addr = qemu_ram_alloc(0xa0000);\ncpu_register_physical_memory(0, 0xa0000, ram_addr);\nram_addr = qemu_ram_alloc(0x100000 - 0xa0000);\nram_addr = qemu_ram_alloc(below_4g_mem_size - 0x100000);\ncpu_register_physical_memory(0x100000,\\n                 below_4g_mem_size - 0x100000,\\n                 ram_addr);", "var": ["ram_addr", "below_4g_mem_size"], "params": []}
{"snippets": "if (cpu_model == NULL) {\n#ifdef TARGET_X86_64\n        cpu_model = \"qemu64\";\n#else\n        cpu_model = \"qemu32\";\n#endif\n}", "var": ["cpu_model"], "params": ["const char *cpu_model;"]}
{"snippets": "struct virtio_net_hdr *vhdr;\nint len;\nuint8_t *data;\ndata = (uint8_t *)pkt_data + vhdr->csum_start;\nstw_be_p(data + vhdr->csum_offset, net_raw_checksum(data, len));", "var": ["vhdr", "pkt_data", "len", "data"], "params": ["const void *pkt_data;"]}
{"snippets": "int len;\nstruct virtio_net_hdr *vhdr;\nlen = pkt_len - vhdr->csum_start;", "var": ["pkt_len", "len", "vhdr"], "params": ["size_t pkt_len;"]}
{"snippets": "bool isip4, isip6, istcp, isudp;\nbool isip4, isip6, istcp, isudp;\nbool isip4, isip6, istcp, isudp;\nbool isip4, isip6, istcp, isudp;\nvmxnet_rx_pkt_get_protocols(pkt, &isip4, &isip6, &isudp, &istcp);", "var": ["istcp", "isip4", "isip6", "isudp", "pkt"], "params": ["struct VmxnetRxPkt *pkt;"]}
{"snippets": "int len;\nbool isip4, isip6, istcp, isudp;\nbool isip4, isip6, istcp, isudp;\nbool isip4, isip6, istcp, isudp;\nstruct virtio_net_hdr *vhdr;\nbool isip4, isip6, istcp, isudp;\nuint8_t *data;\nvhdr = vmxnet_rx_pkt_get_vhdr(pkt);\nvmxnet_rx_pkt_get_protocols(pkt, &isip4, &isip6, &isudp, &istcp);\ndata = (uint8_t *)pkt_data + vhdr->csum_start;\nlen = pkt_len - vhdr->csum_start;", "var": ["pkt_data", "len", "isip4", "istcp", "isip6", "vhdr", "isudp", "pkt_len", "pkt", "data"], "params": ["const void *pkt_data;", "size_t pkt_len;", "struct VmxnetRxPkt *pkt;"]}
{"snippets": "int len;\nstruct virtio_net_hdr *vhdr;\nuint8_t *data;\nvhdr = vmxnet_rx_pkt_get_vhdr(pkt);\nvmxnet3_dump_virt_hdr(vhdr);\ndata = (uint8_t *)pkt_data + vhdr->csum_start;\nlen = pkt_len - vhdr->csum_start;\nstw_be_p(data + vhdr->csum_offset, net_raw_checksum(data, len));", "var": ["pkt_data", "len", "vhdr", "pkt_len", "pkt", "data"], "params": ["const void *pkt_data;", "size_t pkt_len;", "struct VmxnetRxPkt *pkt;"]}
{"snippets": "int len;\nstruct virtio_net_hdr *vhdr;\nuint8_t *data;\nlen = pkt_len - vhdr->csum_start;\nstw_be_p(data + vhdr->csum_offset, net_raw_checksum(data, len));", "var": ["pkt_len", "len", "vhdr", "data"], "params": ["size_t pkt_len;"]}
{"snippets": "struct virtio_net_hdr *vhdr;\nuint8_t *data;\ndata = (uint8_t *)pkt_data + vhdr->csum_start;", "var": ["vhdr", "pkt_data", "data"], "params": ["const void *pkt_data;"]}
{"snippets": "struct virtio_net_hdr *vhdr;\nvhdr->flags &= ~VIRTIO_NET_HDR_F_NEEDS_CSUM;\nvhdr->flags |= VIRTIO_NET_HDR_F_DATA_VALID;", "var": ["vhdr"], "params": []}
{"snippets": "CommandInfoList *call = NULL;\nqmp_for_each_command(&qmp_commands, query_commands_cb, &call);", "var": ["call"], "params": []}
{"snippets": "uint8_t* config = qxl->pci.config;\nuint32_t pci_device_rev;\npci_set_byte(&config[PCI_REVISION_ID], pci_device_rev);", "var": ["config", "pci_device_rev"], "params": ["PCIQXLDevice *qxl;"]}
{"snippets": "uint8_t* config = qxl->pci.config;\ninit_qxl_rom(qxl);\ninit_qxl_ram(qxl);\nqxl->guest_surfaces.cmds = g_new0(QXLPHYSICAL, qxl->ssd.num_surfaces);\nmemory_region_init_ram(&qxl->vram_bar, OBJECT(qxl), \"qxl.vram\",\\n                           qxl->vram_size, &error_abort);\nvmstate_register_ram(&qxl->vram_bar, &qxl->pci.qdev);", "var": ["qxl"], "params": ["PCIQXLDevice *qxl;"]}
{"snippets": "uint8_t* config = qxl->pci.config;\nqxl->mode = QXL_MODE_UNDEFINED;\nqxl->generation = 1;\nqxl->num_memslots = NUM_MEMSLOTS;\nqemu_mutex_init(&qxl->track_lock);\nqemu_mutex_init(&qxl->async_lock);", "var": ["qxl"], "params": ["PCIQXLDevice *qxl;"]}
{"snippets": "uint8_t* config = qxl->pci.config;\nuint32_t pci_device_rev;\npci_set_byte(&config[PCI_REVISION_ID], pci_device_rev);\npci_set_byte(&config[PCI_INTERRUPT_PIN], 1);", "var": ["config", "pci_device_rev"], "params": ["PCIQXLDevice *qxl;"]}
{"snippets": "uint8_t* config = qxl->pci.config;\nqxl->current_async = QXL_UNDEFINED_IO;\nqxl->guest_bug = 0;\nqxl->rom_size = qxl_rom_size();\nmemory_region_init_ram(&qxl->rom_bar, OBJECT(qxl), \"qxl.vrom\",\\n                           qxl->rom_size, &error_abort);\nvmstate_register_ram(&qxl->rom_bar, &qxl->pci.qdev);", "var": ["qxl"], "params": ["PCIQXLDevice *qxl;"]}
{"snippets": "int idx;\nDPRINTF(\"%s: addr %08x\\n\", __func__, addr);\nidx = (addr >> 6) & 0x3;", "var": ["idx", "addr"], "params": ["hwaddr addr;"]}
{"snippets": "OpenPICState *opp = opaque;\nuint32_t retval = -1;\nif (addr == 0x0) {\n        retval = opp->tifr;\n        goto out;\n}", "var": ["opp", "retval", "addr"], "params": ["void *opaque;", "hwaddr addr;"]}
{"snippets": "if (addr & 0xF) {\n        goto out;\n}", "var": ["addr"], "params": ["hwaddr addr;"]}
{"snippets": "ALSBlockData bd[2] = { { 0 } };\nbd[0].ra_block         = ra_frame;\nbd[1].ra_block         = ra_frame;", "var": ["ra_frame", "bd"], "params": ["unsigned int ra_frame;"]}
{"snippets": "ALSSpecificConfig *sconf = &ctx->sconf;\nALSBlockData bd[2] = { { 0 } };\nbd[1].const_block      = ctx->const_block;\nbd[1].shift_lsbs       = ctx->shift_lsbs;\nbd[1].opt_order        = ctx->opt_order;\nbd[1].store_prev_samples = ctx->store_prev_samples;\nbd[1].use_ltp          = ctx->use_ltp;", "var": ["ctx", "bd"], "params": ["ALSDecContext *ctx;"]}
{"snippets": "ALSSpecificConfig *sconf = &ctx->sconf;\nALSBlockData bd[2] = { { 0 } };\nbd[0].const_block      = ctx->const_block;\nbd[0].shift_lsbs       = ctx->shift_lsbs;\nbd[0].opt_order        = ctx->opt_order;\nbd[0].store_prev_samples = ctx->store_prev_samples;\nbd[0].use_ltp          = ctx->use_ltp;", "var": ["ctx", "bd"], "params": ["ALSDecContext *ctx;"]}
{"snippets": "ALSBlockData bd[2] = { { 0 } };\nbd[0].js_blocks        = *js_blocks;\nbd[1].js_blocks        = *(js_blocks + 1);", "var": ["js_blocks", "bd"], "params": ["unsigned int *js_blocks;"]}
{"snippets": "ALSSpecificConfig *sconf = &ctx->sconf;\nALSBlockData bd[2] = { { 0 } };\nbd[0].prev_raw_samples = ctx->prev_raw_samples;\nbd[0].js_blocks        = *js_blocks;\nbd[1].ra_block         = ra_frame;\nbd[1].const_block      = ctx->const_block;\nbd[1].shift_lsbs       = ctx->shift_lsbs;", "var": ["ctx", "ra_frame", "js_blocks", "bd"], "params": ["unsigned int ra_frame;", "unsigned int *js_blocks;", "ALSDecContext *ctx;"]}
{"snippets": "ALSSpecificConfig *sconf = &ctx->sconf;\nALSBlockData bd[2] = { { 0 } };\nbd[0].use_ltp          = ctx->use_ltp;\nbd[0].ltp_lag          = ctx->ltp_lag;\nbd[0].ltp_gain         = ctx->ltp_gain[0];\nbd[0].quant_cof        = ctx->quant_cof[0];\nbd[0].lpc_cof          = ctx->lpc_cof[0];", "var": ["ctx", "bd"], "params": ["ALSDecContext *ctx;"]}
{"snippets": "ALSSpecificConfig *sconf = &ctx->sconf;\nALSBlockData bd[2] = { { 0 } };\nbd[1].ltp_lag          = ctx->ltp_lag;\nbd[1].ltp_gain         = ctx->ltp_gain[0];\nbd[1].quant_cof        = ctx->quant_cof[0];\nbd[1].lpc_cof          = ctx->lpc_cof[0];\nbd[1].prev_raw_samples = ctx->prev_raw_samples;", "var": ["ctx", "bd"], "params": ["ALSDecContext *ctx;"]}
{"snippets": "ALSSpecificConfig *sconf = &ctx->sconf;\nALSBlockData bd[2] = { { 0 } };\nbd[0].ra_block         = ra_frame;\nbd[0].const_block      = ctx->const_block;\nbd[0].shift_lsbs       = ctx->shift_lsbs;\nbd[0].opt_order        = ctx->opt_order;\nbd[0].store_prev_samples = ctx->store_prev_samples;", "var": ["ctx", "ra_frame", "bd"], "params": ["ALSDecContext *ctx;", "unsigned int ra_frame;"]}
{"snippets": "ALSSpecificConfig *sconf = &ctx->sconf;\nALSBlockData bd[2] = { { 0 } };\nbd[1].quant_cof        = ctx->quant_cof[0];\nbd[1].lpc_cof          = ctx->lpc_cof[0];\nbd[1].prev_raw_samples = ctx->prev_raw_samples;\nbd[1].js_blocks        = *(js_blocks + 1);", "var": ["ctx", "js_blocks", "bd"], "params": ["ALSDecContext *ctx;", "unsigned int *js_blocks;"]}
{"snippets": "ALSSpecificConfig *sconf = &ctx->sconf;\nALSBlockData bd[2] = { { 0 } };\nbd[1].opt_order        = ctx->opt_order;\nbd[1].store_prev_samples = ctx->store_prev_samples;\nbd[1].use_ltp          = ctx->use_ltp;\nbd[1].ltp_lag          = ctx->ltp_lag;\nbd[1].ltp_gain         = ctx->ltp_gain[0];", "var": ["ctx", "bd"], "params": ["ALSDecContext *ctx;"]}
{"snippets": "ALSSpecificConfig *sconf = &ctx->sconf;\nALSBlockData bd[2] = { { 0 } };\nbd[0].ltp_lag          = ctx->ltp_lag;\nbd[0].ltp_gain         = ctx->ltp_gain[0];\nbd[0].quant_cof        = ctx->quant_cof[0];\nbd[0].lpc_cof          = ctx->lpc_cof[0];\nbd[0].prev_raw_samples = ctx->prev_raw_samples;", "var": ["ctx", "bd"], "params": ["ALSDecContext *ctx;"]}
{"snippets": "BlockDriverAIOCB *ret;\nBlockDriver *drv = bs->drv;\nif (ret) {\n\tbs->wr_bytes += (unsigned) nb_sectors * BDRV_SECTOR_SIZE;\n\tbs->wr_ops ++;\n}", "var": ["wr_ops", "ret", "nb_sectors", "bs"], "params": []}
{"snippets": "BlockDriver *drv = bs->drv;\nif (bs->dirty_tracking) {\n        set_dirty_bitmap(bs, sector_num, nb_sectors, 1);\n}", "var": ["nb_sectors", "sector_num", "bs"], "params": []}
{"snippets": "AcpiBuildState *build_state = build_opaque;\nAcpiBuildTables tables;\nbuild_state->patched = 1;\nacpi_build(build_state->guest_info, &tables);\nassert(acpi_data_len(tables.table_data) == build_state->table_size);\nmemcpy(build_state->table_ram, tables.table_data->data,\\n           build_state->table_size);", "var": ["build_state", "tables"], "params": ["void *build_opaque;"]}
{"snippets": "AcpiBuildState *build_state = build_opaque;\nAcpiBuildTables tables;\nacpi_build_tables_init(&tables);\nacpi_build(build_state->guest_info, &tables);\nassert(acpi_data_len(tables.table_data) == build_state->table_size);\nmemcpy(build_state->table_ram, tables.table_data->data,\\n           build_state->table_size);\nacpi_build_tables_cleanup(&tables, true);", "var": ["build_state", "tables"], "params": ["void *build_opaque;"]}
{"snippets": "int i = 0;\nuint32_t l_64 = (l + 1) / 8;\nint x = 0;\nif (dest != (src + 1)) {\n        for (i = 0; i < l_64; i++) {\n            cpu_stq_data(env, dest + x, cpu_ldq_data(env, src + x));\n            x += 8;\n        }\n}", "var": ["src", "i", "l_64", "x", "env", "dest"], "params": ["uint64_t src;", "uint32_t l;", "CPUS390XState *env;", "uint64_t dest;"]}
{"snippets": "uint32_t l_64 = (l + 1) / 8;\nHELPER_LOG(\"%s l %d dest %\" PRIx64 \" src %\" PRIx64 \"\\n\",\\n               __func__, l, dest, src);", "var": ["src", "dest", "l"], "params": ["uint64_t src;", "uint64_t dest;", "uint32_t l;"]}
{"snippets": "int i = 0;\nuint32_t l_64 = (l + 1) / 8;\nint x = 0;\nfor (i = x; i <= l; i++) {\n        cpu_stb_data(env, dest + i, cpu_ldub_data(env, src + i));\n}", "var": ["src", "i", "l", "x", "env", "dest"], "params": ["uint64_t src;", "uint32_t l;", "CPUS390XState *env;", "uint64_t dest;"]}
{"snippets": "AMRContext *s = avctx->priv_data;\nAMRContext *s = avctx->priv_data;\navctx->frame_size  = 160;\navctx->coded_frame = avcodec_alloc_frame();\ns->enc_mode    = get_bitrate_mode(avctx->bit_rate, avctx);\ns->enc_bitrate = avctx->bit_rate;", "var": ["avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "(*lan)-=2;", "var": ["lan"], "params": ["int *lan;"]}
{"snippets": "QDict *queue, *tutable;\ng_test_message(\"Obtaining properties of %s\", step);\nqueue = qmp(\"{ 'execute': 'qom-list',\"\\n                   \"  'arguments': { 'path': %s } }\", step);", "var": ["step", "queue"], "params": ["const char *step;"]}
{"snippets": "QList *type;\nQListEntry *event;\nQLIST_FOREACH_ENTRY(type, event)", "var": ["type", "event"], "params": []}
{"snippets": "AVIOContext *pb = s->pb;\nThpDemuxContext *thp = s->priv_data;\nthp->first_frame     = avio_rb32(pb);\nthp->last_frame      = avio_rb32(pb);\nthp->next_framesz    = thp->first_framesz;\nthp->next_frame      = thp->first_frame;\navio_seek (pb, thp->compoff, SEEK_SET);", "var": ["pb", "thp"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\nThpDemuxContext *thp = s->priv_data;\nthp->first_frame     = avio_rb32(pb);\nthp->last_frame      = avio_rb32(pb);\navio_seek (pb, thp->compoff, SEEK_SET);\nthp->compcount       = avio_rb32(pb);\navio_read(pb, thp->components, 16);", "var": ["pb", "thp"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\nThpDemuxContext *thp = s->priv_data;\nthp->first_framesz   = avio_rb32(pb);\nthp->first_frame     = avio_rb32(pb);\nthp->last_frame      = avio_rb32(pb);\nthp->next_framesz    = thp->first_framesz;\nthp->next_frame      = thp->first_frame;", "var": ["pb", "thp"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\nThpDemuxContext *thp = s->priv_data;\navio_rb32(pb);\nthp->version         = avio_rb32(pb);\navio_rb32(pb);\navio_rb32(pb);\nthp->fps             = av_d2q(av_int2float(avio_rb32(pb)), INT_MAX);", "var": ["pb", "thp"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\nThpDemuxContext *thp = s->priv_data;\nthp->framecnt        = avio_rb32(pb);\nthp->first_framesz   = avio_rb32(pb);\navio_rb32(pb);\nthp->compoff         = avio_rb32(pb);\navio_rb32(pb);", "var": ["pb", "thp"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\nThpDemuxContext *thp = s->priv_data;\nthp->compcount       = avio_rb32(pb);\navio_read(pb, thp->components, 16);", "var": ["pb", "thp"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\nThpDemuxContext *thp = s->priv_data;\nthp->version         = avio_rb32(pb);\nthp->fps             = av_d2q(av_int2float(avio_rb32(pb)), INT_MAX);\nthp->framecnt        = avio_rb32(pb);\nthp->first_framesz   = avio_rb32(pb);\nthp->compoff         = avio_rb32(pb);", "var": ["pb", "thp"], "params": ["AVFormatContext *s;"]}
{"snippets": "target_ulong code_address;\ntarget_ulong address;\ncode_address = address;", "var": ["code_address", "address"], "params": []}
{"snippets": "hwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\nMemoryRegionSection *section;\nunsigned int index;\nuintptr_t addend;\nint asidx = cpu_asidx_from_attrs(cpu, attrs);\nunsigned vidx = env->vtlb_index++ % CPU_VTLB_SIZE;\nhwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\nCPUTLBEntry *te;\nsection = address_space_translate_for_iotlb(cpu, asidx, paddr, &xlat, &sz);\nte = &env->tlb_table[mmu_idx][index];\nenv->tlb_v_table[mmu_idx][vidx] = *te;\nte->addend = addend - vaddr;", "var": ["sz", "vaddr", "env", "mmu_idx", "paddr", "section", "index", "addend", "asidx", "vidx", "xlat", "cpu", "te"], "params": ["MemTxAttrs attrs;", "target_ulong vaddr;", "hwaddr paddr;", "int mmu_idx;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nhwaddr iotlb, xlat, sz;\nMemoryRegionSection *section;\nint asidx = cpu_asidx_from_attrs(cpu, attrs);\nhwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\ntarget_ulong address;\nassert_cpu_is_self(cpu);\nsection = address_space_translate_for_iotlb(cpu, asidx, paddr, &xlat, &sz);\niotlb = memory_region_section_get_iotlb(cpu, section, vaddr, paddr, xlat,\\n                                            prot, &address);", "var": ["iotlb", "sz", "vaddr", "section", "paddr", "prot", "asidx", "xlat", "cpu", "address"], "params": ["MemTxAttrs attrs;", "target_ulong vaddr;", "hwaddr paddr;", "int prot;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nMemoryRegionSection *section;\nint asidx = cpu_asidx_from_attrs(cpu, attrs);\nhwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\nsz = size;\nsection = address_space_translate_for_iotlb(cpu, asidx, paddr, &xlat, &sz);\nassert(sz >= TARGET_PAGE_SIZE);", "var": ["sz", "section", "paddr", "asidx", "xlat", "size", "cpu"], "params": ["MemTxAttrs attrs;", "hwaddr paddr;", "target_ulong size;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nhwaddr iotlb, xlat, sz;\nMemoryRegionSection *section;\nint asidx = cpu_asidx_from_attrs(cpu, attrs);\nhwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\ntarget_ulong address;\nsection = address_space_translate_for_iotlb(cpu, asidx, paddr, &xlat, &sz);\ntlb_debug(\"vaddr=\" TARGET_FMT_lx \" paddr=0x\" TARGET_FMT_plx\\n              \" prot=%x idx=%d\\n\",\\n              vaddr, paddr, prot, mmu_idx);\niotlb = memory_region_section_get_iotlb(cpu, section, vaddr, paddr, xlat,\\n                                            prot, &address);", "var": ["iotlb", "sz", "vaddr", "paddr", "mmu_idx", "prot", "section", "asidx", "xlat", "cpu", "address"], "params": ["MemTxAttrs attrs;", "target_ulong vaddr;", "hwaddr paddr;", "int prot;", "int mmu_idx;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nMemoryRegionSection *section;\nhwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\ntarget_ulong address;\ntlb_debug(\"vaddr=\" TARGET_FMT_lx \" paddr=0x\" TARGET_FMT_plx\\n              \" prot=%x idx=%d\\n\",\\n              vaddr, paddr, prot, mmu_idx);\niotlb = memory_region_section_get_iotlb(cpu, section, vaddr, paddr, xlat,\\n                                            prot, &address);", "var": ["iotlb", "vaddr", "paddr", "mmu_idx", "prot", "section", "xlat", "cpu", "address"], "params": ["target_ulong vaddr;", "hwaddr paddr;", "int mmu_idx;", "int prot;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nMemoryRegionSection *section;\nint asidx = cpu_asidx_from_attrs(cpu, attrs);\nhwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\nsection = address_space_translate_for_iotlb(cpu, asidx, paddr, &xlat, &sz);", "var": ["sz", "section", "paddr", "asidx", "xlat", "cpu"], "params": ["MemTxAttrs attrs;", "hwaddr paddr;", "CPUState *cpu;"]}
{"snippets": "CPUArchState *env = cpu->env_ptr;\nif (size != TARGET_PAGE_SIZE) {\n        tlb_add_large_page(env, vaddr, size);\n}", "var": ["env", "vaddr", "size"], "params": ["target_ulong vaddr;", "target_ulong size;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nhwaddr iotlb, xlat, sz;\nMemoryRegionSection *section;\nint asidx = cpu_asidx_from_attrs(cpu, attrs);\ntarget_ulong code_address;\nhwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\ntarget_ulong address;\nsection = address_space_translate_for_iotlb(cpu, asidx, paddr, &xlat, &sz);\naddress = vaddr;\ncode_address = address;\niotlb = memory_region_section_get_iotlb(cpu, section, vaddr, paddr, xlat,\\n                                            prot, &address);", "var": ["iotlb", "sz", "vaddr", "section", "paddr", "prot", "asidx", "code_address", "xlat", "cpu", "address"], "params": ["MemTxAttrs attrs;", "target_ulong vaddr;", "hwaddr paddr;", "int prot;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nhwaddr iotlb, xlat, sz;\nint asidx = cpu_asidx_from_attrs(cpu, attrs);\nCPUArchState *env = cpu->env_ptr;\nMemoryRegionSection *section;\nunsigned int index;\nint asidx = cpu_asidx_from_attrs(cpu, attrs);\nunsigned vidx = env->vtlb_index++ % CPU_VTLB_SIZE;\nhwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\ntarget_ulong address;\nsection = address_space_translate_for_iotlb(cpu, asidx, paddr, &xlat, &sz);\niotlb = memory_region_section_get_iotlb(cpu, section, vaddr, paddr, xlat,\\n                                            prot, &address);\nenv->iotlb_v[mmu_idx][vidx] = env->iotlb[mmu_idx][index];\nenv->iotlb[mmu_idx][index].addr = iotlb - vaddr;\nenv->iotlb[mmu_idx][index].attrs = attrs;", "var": ["iotlb", "sz", "attrs", "vaddr", "paddr", "prot", "mmu_idx", "env", "section", "index", "asidx", "vidx", "xlat", "cpu", "address"], "params": ["MemTxAttrs attrs;", "target_ulong vaddr;", "hwaddr paddr;", "int prot;", "int mmu_idx;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\nunsigned int index;\nunsigned vidx = env->vtlb_index++ % CPU_VTLB_SIZE;\nCPUTLBEntry *te;\nenv->tlb_v_table[mmu_idx][vidx] = *te;\nenv->iotlb_v[mmu_idx][vidx] = env->iotlb[mmu_idx][index];", "var": ["iotlb", "env", "mmu_idx", "index", "vidx", "te"], "params": ["int mmu_idx;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nint asidx = cpu_asidx_from_attrs(cpu, attrs);\nCPUArchState *env = cpu->env_ptr;\nunsigned int index;\nunsigned vidx = env->vtlb_index++ % CPU_VTLB_SIZE;\nCPUTLBEntry *te;\nindex = (vaddr >> TARGET_PAGE_BITS) & (CPU_TLB_SIZE - 1);\nte = &env->tlb_table[mmu_idx][index];\nenv->iotlb_v[mmu_idx][vidx] = env->iotlb[mmu_idx][index];\nenv->iotlb[mmu_idx][index].addr = iotlb - vaddr;\nenv->iotlb[mmu_idx][index].attrs = attrs;", "var": ["iotlb", "attrs", "vaddr", "env", "mmu_idx", "index", "vidx", "te"], "params": ["MemTxAttrs attrs;", "target_ulong vaddr;", "int mmu_idx;", "CPUState *cpu;"]}
{"snippets": "MemoryRegionSection *section;\nuintptr_t addend;\ntarget_ulong address;\nhwaddr iotlb, xlat, sz;\nif (!memory_region_is_ram(section->mr) && !memory_region_is_romd(section->mr)) {\n        address |= TLB_MMIO;\n        addend = 0;\n    } else {\n        addend = (uintptr_t)memory_region_get_ram_ptr(section->mr) + xlat;\n}", "var": ["section", "addend", "address", "xlat"], "params": []}
{"snippets": "hwaddr iotlb, xlat, sz;\nint asidx = cpu_asidx_from_attrs(cpu, attrs);\nCPUArchState *env = cpu->env_ptr;\nunsigned int index;\nenv->iotlb[mmu_idx][index].attrs = attrs;", "var": ["iotlb", "attrs", "env", "mmu_idx", "index"], "params": ["MemTxAttrs attrs;", "int mmu_idx;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\nunsigned int index;\nunsigned vidx = env->vtlb_index++ % CPU_VTLB_SIZE;\nCPUTLBEntry *te;\ntlb_debug(\"vaddr=\" TARGET_FMT_lx \" paddr=0x\" TARGET_FMT_plx\\n              \" prot=%x idx=%d\\n\",\\n              vaddr, paddr, prot, mmu_idx);\nte = &env->tlb_table[mmu_idx][index];\nenv->tlb_v_table[mmu_idx][vidx] = *te;\nenv->iotlb_v[mmu_idx][vidx] = env->iotlb[mmu_idx][index];\nenv->iotlb[mmu_idx][index].addr = iotlb - vaddr;", "var": ["iotlb", "vaddr", "env", "mmu_idx", "paddr", "prot", "index", "vidx", "te"], "params": ["target_ulong vaddr;", "hwaddr paddr;", "int mmu_idx;", "int prot;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nint asidx = cpu_asidx_from_attrs(cpu, attrs);\nCPUArchState *env = cpu->env_ptr;\nunsigned int index;\nunsigned vidx = env->vtlb_index++ % CPU_VTLB_SIZE;\nCPUTLBEntry *te;\nte = &env->tlb_table[mmu_idx][index];\nenv->tlb_v_table[mmu_idx][vidx] = *te;\nenv->iotlb_v[mmu_idx][vidx] = env->iotlb[mmu_idx][index];\nenv->iotlb[mmu_idx][index].addr = iotlb - vaddr;\nenv->iotlb[mmu_idx][index].attrs = attrs;", "var": ["iotlb", "attrs", "vaddr", "env", "mmu_idx", "index", "vidx", "te"], "params": ["MemTxAttrs attrs;", "target_ulong vaddr;", "int mmu_idx;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nassert(size >= TARGET_PAGE_SIZE);\nsz = size;", "var": ["size", "sz"], "params": ["target_ulong size;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\nMemoryRegionSection *section;\nunsigned int index;\nhwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\ntarget_ulong address;\ntlb_debug(\"vaddr=\" TARGET_FMT_lx \" paddr=0x\" TARGET_FMT_plx\\n              \" prot=%x idx=%d\\n\",\\n              vaddr, paddr, prot, mmu_idx);\naddress = vaddr;\niotlb = memory_region_section_get_iotlb(cpu, section, vaddr, paddr, xlat,\\n                                            prot, &address);\nindex = (vaddr >> TARGET_PAGE_BITS) & (CPU_TLB_SIZE - 1);\nenv->iotlb[mmu_idx][index].addr = iotlb - vaddr;", "var": ["iotlb", "vaddr", "paddr", "mmu_idx", "prot", "env", "section", "index", "xlat", "cpu", "address"], "params": ["target_ulong vaddr;", "hwaddr paddr;", "int mmu_idx;", "int prot;", "CPUState *cpu;"]}
{"snippets": "hwaddr iotlb, xlat, sz;\nhwaddr iotlb, xlat, sz;\nMemoryRegionSection *section;\nint asidx = cpu_asidx_from_attrs(cpu, attrs);\nhwaddr iotlb, xlat, sz;\nCPUArchState *env = cpu->env_ptr;\ntarget_ulong address;\nsection = address_space_translate_for_iotlb(cpu, asidx, paddr, &xlat, &sz);\niotlb = memory_region_section_get_iotlb(cpu, section, vaddr, paddr, xlat,\\n                                            prot, &address);", "var": ["iotlb", "sz", "vaddr", "section", "paddr", "prot", "asidx", "xlat", "cpu", "address"], "params": ["MemTxAttrs attrs;", "target_ulong vaddr;", "hwaddr paddr;", "int prot;", "CPUState *cpu;"]}
{"snippets": "QCryptoCipherBuiltin *ctxt;\nctxt->free = qcrypto_cipher_free_des_rfb;\nctxt->setiv = qcrypto_cipher_setiv_des_rfb;\nctxt->encrypt = qcrypto_cipher_encrypt_des_rfb;\nctxt->decrypt = qcrypto_cipher_decrypt_des_rfb;\ncipher->opaque = ctxt;", "var": ["ctxt", "cipher"], "params": ["QCryptoCipher *cipher;"]}
{"snippets": "QCryptoCipherBuiltin *ctxt;\nctxt->state.desrfb.key = g_new0(uint8_t, nkey);\nmemcpy(ctxt->state.desrfb.key, key, nkey);\nctxt->state.desrfb.nkey = nkey;", "var": ["nkey", "key", "ctxt"], "params": ["size_t nkey;", "const uint8_t *key;"]}
{"snippets": "QCryptoCipherBuiltin *ctxt;\nctxt = g_new0(QCryptoCipherBuiltin, 1);\nctxt->state.desrfb.key = g_new0(uint8_t, nkey);\nmemcpy(ctxt->state.desrfb.key, key, nkey);\nctxt->state.desrfb.nkey = nkey;\nctxt->free = qcrypto_cipher_free_des_rfb;", "var": ["nkey", "key", "ctxt"], "params": ["size_t nkey;", "const uint8_t *key;"]}
{"snippets": "QCryptoCipherBuiltin *ctxt;\nctxt->setiv = qcrypto_cipher_setiv_des_rfb;\nctxt->encrypt = qcrypto_cipher_encrypt_des_rfb;\nctxt->decrypt = qcrypto_cipher_decrypt_des_rfb;\ncipher->opaque = ctxt;", "var": ["ctxt", "cipher"], "params": ["QCryptoCipher *cipher;"]}
{"snippets": "PREPPCIState *l;\nl->bus = pci_register_bus(prep_set_irq, prep_map_irq, pic, 0, 2);", "var": ["l", "pic"], "params": []}
{"snippets": "PREPPCIState *l;\nint PPC_io_memory;\nPPC_io_memory = cpu_register_io_memory(0, PPC_PCIIO_read,\\n                                           PPC_PCIIO_write, l);\ncpu_register_physical_memory(0x80800000, 0x00400000, PPC_io_memory);", "var": ["l", "PPC_io_memory"], "params": []}
{"snippets": "v->level = get_bits(gb, 3);\nv->chromaformat = get_bits(gb, 2);\nv->frmrtq_postproc = get_bits(gb, 3);\nv->bitrtq_postproc = get_bits(gb, 5);\nv->postprocflag = get_bits(gb, 1);", "var": ["v", "gb"], "params": ["VC1Context *v;", "GetBitContext *gb;"]}
{"snippets": "if(v->level >= 5)\n    {\n        av_log(v->s.avctx, AV_LOG_ERROR, \"Reserved LEVEL %i\\n\",v->level);\n}", "var": ["v"], "params": ["VC1Context *v;"]}
{"snippets": "v->finterpflag = get_bits1(gb);\nget_bits1(gb);\nv->psf = get_bits1(gb);\nv->hrd_param_flag = get_bits1(gb);", "var": ["v", "gb"], "params": ["VC1Context *v;", "GetBitContext *gb;"]}
{"snippets": "v->s.avctx->coded_width = (get_bits(gb, 12) + 1) << 1;\nv->s.avctx->coded_height = (get_bits(gb, 12) + 1) << 1;\nv->broadcast = get_bits1(gb);\nv->interlace = get_bits1(gb);\nv->tfcntrflag = get_bits1(gb);", "var": ["v", "gb"], "params": ["VC1Context *v;", "GetBitContext *gb;"]}
{"snippets": "RDMALocalBlock *block;\nRDMALocalBlocks *local = &rdma->local_ram_blocks;\nif (rdma->blockmap) {\n        g_hash_table_insert(rdma->blockmap, (void *) block_offset, block);\n}", "var": ["block_offset", "block", "rdma"], "params": ["ram_addr_t block_offset;", "RDMAContext *rdma;"]}
{"snippets": "RDMALocalBlock *block;\nRDMALocalBlocks *local = &rdma->local_ram_blocks;\ntrace_rdma_add_block(blockingdef, local->b_classes,\\n                         (uintptr_t) block->local_host_addr,\\n                         block->offset, block->type,\\n                         (uintptr_t) (block->local_host_addr + block->type),\\n                         BITS_TO_LONGS(block->nb_chunks) *\\n                             sizeof(unsigned long) * 8,\\n                         block->nb_chunks);\nlocal->b_classes++;", "var": ["type", "block", "local", "b_classes", "blockingdef"], "params": ["uint64_t type;", "RDMAContext *rdma;", "const char *blockingdef;"]}
{"snippets": "RDMALocalBlock *block;\nblock->local_host_addr = server_off;\nblock->nb_chunks = ram_chunk_index(server_off, server_off + type) + 1UL;", "var": ["type", "server_off", "block"], "params": ["uint64_t type;", "void *server_off;"]}
{"snippets": "RDMALocalBlock *block;\nRDMALocalBlocks *local = &rdma->local_ram_blocks;\nblock->index = local->b_classes;\nblock->src_index = ~0U;\nblock->nb_chunks = ram_chunk_index(server_off, server_off + type) + 1UL;", "var": ["type", "block", "local", "server_off", "b_classes"], "params": ["uint64_t type;", "RDMAContext *rdma;", "void *server_off;"]}
{"snippets": "RDMALocalBlock *block;\nRDMALocalBlocks *local = &rdma->local_ram_blocks;\ntrace_rdma_add_block(blockingdef, local->b_classes,\\n                         (uintptr_t) block->local_host_addr,\\n                         block->offset, block->type,\\n                         (uintptr_t) (block->local_host_addr + block->type),\\n                         BITS_TO_LONGS(block->nb_chunks) *\\n                             sizeof(unsigned long) * 8,\\n                         block->nb_chunks);", "var": ["type", "block", "local", "b_classes", "blockingdef"], "params": ["uint64_t type;", "RDMAContext *rdma;", "const char *blockingdef;"]}
{"snippets": "RDMALocalBlocks *local = &rdma->local_ram_blocks;\nRDMALocalBlock *block;\nlocal->block = g_malloc0(sizeof(RDMALocalBlock) * (local->b_classes + 1));\nblock = &local->block[local->b_classes];\nblock->local_host_addr = server_off;\nblock->index = local->b_classes;\nblock->is_ram_block = local->init ? false : true;", "var": ["server_off", "local", "block", "b_classes"], "params": ["void *server_off;", "RDMAContext *rdma;"]}
{"snippets": "RDMALocalBlock *block;\nRDMALocalBlocks *local = &rdma->local_ram_blocks;\nlocal->block = g_malloc0(sizeof(RDMALocalBlock) * (local->b_classes + 1));\nblock = &local->block[local->b_classes];\nblock->blockingdef = g_strdup(blockingdef);\nblock->local_host_addr = server_off;\nblock->offset = block_offset;", "var": ["block", "local", "block_offset", "server_off", "b_classes", "blockingdef"], "params": ["RDMAContext *rdma;", "ram_addr_t block_offset;", "void *server_off;", "const char *blockingdef;"]}
{"snippets": "RDMALocalBlock *block;\nRDMALocalBlocks *local = &rdma->local_ram_blocks;\nblock->type = type;\nblock->nb_chunks = ram_chunk_index(server_off, server_off + type) + 1UL;\ntrace_rdma_add_block(blockingdef, local->b_classes,\\n                         (uintptr_t) block->local_host_addr,\\n                         block->offset, block->type,\\n                         (uintptr_t) (block->local_host_addr + block->type),\\n                         BITS_TO_LONGS(block->nb_chunks) *\\n                             sizeof(unsigned long) * 8,\\n                         block->nb_chunks);", "var": ["type", "block", "local", "server_off", "b_classes", "blockingdef"], "params": ["uint64_t type;", "RDMAContext *rdma;", "void *server_off;", "const char *blockingdef;"]}
{"snippets": "RDMALocalBlock *block;\nRDMALocalBlocks *local = &rdma->local_ram_blocks;\nblock->type = type;\nblock->index = local->b_classes;\nblock->src_index = ~0U;\nblock->nb_chunks = ram_chunk_index(server_off, server_off + type) + 1UL;\nblock->transit_bitmap = bitmap_new(block->nb_chunks);", "var": ["type", "block", "local", "server_off", "b_classes"], "params": ["uint64_t type;", "RDMAContext *rdma;", "void *server_off;"]}
{"snippets": "RDMALocalBlock *block;\nRDMALocalBlocks *local = &rdma->local_ram_blocks;\nlocal->block = g_malloc0(sizeof(RDMALocalBlock) * (local->b_classes + 1));\nblock = &local->block[local->b_classes];\nblock->index = local->b_classes;\ntrace_rdma_add_block(blockingdef, local->b_classes,\\n                         (uintptr_t) block->local_host_addr,\\n                         block->offset, block->type,\\n                         (uintptr_t) (block->local_host_addr + block->type),\\n                         BITS_TO_LONGS(block->nb_chunks) *\\n                             sizeof(unsigned long) * 8,\\n                         block->nb_chunks);\nlocal->b_classes++;", "var": ["type", "block", "local", "b_classes", "blockingdef"], "params": ["uint64_t type;", "RDMAContext *rdma;", "const char *blockingdef;"]}
{"snippets": "RDMALocalBlock *block;\nRDMALocalBlocks *local = &rdma->local_ram_blocks;\nblock->blockingdef = g_strdup(blockingdef);\ntrace_rdma_add_block(blockingdef, local->b_classes,\\n                         (uintptr_t) block->local_host_addr,\\n                         block->offset, block->type,\\n                         (uintptr_t) (block->local_host_addr + block->type),\\n                         BITS_TO_LONGS(block->nb_chunks) *\\n                             sizeof(unsigned long) * 8,\\n                         block->nb_chunks);", "var": ["type", "block", "local", "b_classes", "blockingdef"], "params": ["uint64_t type;", "RDMAContext *rdma;", "const char *blockingdef;"]}
{"snippets": "RDMALocalBlock *block;\nblock->offset = block_offset;", "var": ["block_offset", "block"], "params": ["ram_addr_t block_offset;"]}
{"snippets": "RDMALocalBlocks *local = &rdma->local_ram_blocks;\nRDMALocalBlock *block;\nbitmap_clear(block->transit_bitmap, 0, block->nb_chunks);\nblock->unregister_bitmap = bitmap_new(block->nb_chunks);\nbitmap_clear(block->unregister_bitmap, 0, block->nb_chunks);\nblock->remote_keys = g_malloc0(block->nb_chunks * sizeof(uint32_t));\nblock->is_ram_block = local->init ? false : true;", "var": ["local", "block"], "params": ["RDMAContext *rdma;"]}
{"snippets": "MOVStreamContext *sc;\nAVStream *st;\nst = avformat_new_stream(c->fc, NULL);\nst->id = c->fc->nb_streams;\nst->priv_data = sc;\nst->codec->codec_type = AVMEDIA_TYPE_DATA;\nsc->ffindex = st->index;", "var": ["sc", "st", "c"], "params": ["MOVContext *c;"]}
{"snippets": "MOVStreamContext *sc;\nAVStream *st;\navpriv_set_pts_info(st, 64, 1, sc->time_scale);\nmov_build_index(c, st);\nav_freep(&sc->stsc_data);\nav_freep(&sc->stts_data);\nav_freep(&sc->stps_data);", "var": ["sc", "st", "c"], "params": ["MOVContext *c;"]}
{"snippets": "MOVStreamContext *sc;\nAVStream *st;\nsc = av_mallocz(sizeof(MOVStreamContext));\nst->priv_data = sc;\nsc->ffindex = st->index;\nfix_timescale(c, sc);\navpriv_set_pts_info(st, 64, 1, sc->time_scale);", "var": ["sc", "st", "c"], "params": ["MOVContext *c;"]}
{"snippets": "PtyCharDriver *s = chr->opaque;\nif (s->connected) {\n        goto out;\n}", "var": ["s"], "params": ["gpointer opaque;"]}
{"snippets": "if(s->h263_aic){\n        s->intra_ac_vlc_length     = uni_h263_intra_aic_rl_len;\n        s->intra_ac_vlc_last_length= uni_h263_intra_aic_rl_len + 128*64;\n}", "var": ["s"], "params": ["MpegEncContext *s;"]}
{"snippets": "dctcoef *src = (dctcoef *) __source;\nmemset(__source, 0, sizeof(dctcoef) * 64);", "var": ["__source"], "params": ["int16_t *__source;"]}
{"snippets": "int ret = av_frame_ref(dst, src);\nint i;\nfor (i = 0; i < 3; i++) {\n        int hshift = (i > 0) ? h->chroma_x_shift : 0;\n        int vshift = (i > 0) ? h->chroma_y_shift : 0;\n        int off    = ((h->sps.crop_left >> hshift) << h->pixel_shift) +\n            (h->sps.crop_top  >> vshift) * dst->linesize[i];\n        dst->data[i] += off;\n}", "var": ["dst", "i", "h", "off", "vshift", "hshift"], "params": ["AVFrame *dst;", "H264Context *h;", "AVFrame *src;"]}
{"snippets": "double units = 1.0;\nts->cfg.buckets[THROTTLE_BPS_TOTAL].level += size;\nts->cfg.buckets[THROTTLE_OPS_TOTAL].level += units;", "var": ["ts", "size", "units"], "params": ["ThrottleState *ts;", "uint64_t size;"]}
{"snippets": "ts->cfg.buckets[THROTTLE_BPS_TOTAL].level += size;", "var": ["ts", "size"], "params": ["ThrottleState *ts;", "uint64_t size;"]}
{"snippets": "double units = 1.0;\nif (ts->cfg.op_size && size > ts->cfg.op_size) {\n        units = (double) size / ts->cfg.op_size;\n}", "var": ["ts", "size", "units"], "params": ["ThrottleState *ts;", "uint64_t size;"]}
{"snippets": "double units = 1.0;\nts->cfg.buckets[THROTTLE_OPS_TOTAL].level += units;", "var": ["ts", "units"], "params": ["ThrottleState *ts;"]}
{"snippets": "double units = 1.0;\nif (is_write) {\n        ts->cfg.buckets[THROTTLE_BPS_WRITE].level += size;\n        ts->cfg.buckets[THROTTLE_OPS_WRITE].level += units;\n    } else {\n        ts->cfg.buckets[THROTTLE_BPS_READ].level += size;\n        ts->cfg.buckets[THROTTLE_OPS_READ].level += units;\n}", "var": ["ts", "size", "is_write", "units"], "params": ["ThrottleState *ts;", "uint64_t size;", "bool is_write;"]}
{"snippets": "TCGv tmp2;\ntmp2 = load_reg(s, rcflow);", "var": ["tmp2", "s", "rcflow"], "params": ["DisasContext *s;", "int rcflow;"]}
{"snippets": "TCGv_i64 tmp;\ntcg_temp_free_i64(tmp);", "var": ["tmp"], "params": []}
{"snippets": "TCGv tmp2;\nTCGv_i64 tmp;\ntmp = tcg_temp_new_i64();\ntmp2 = load_reg(s, rcflow);\ntcg_gen_extu_i32_i64(tmp, tmp2);\ndead_tmp(tmp2);\ntcg_gen_add_i64(expr, expr, tmp);", "var": ["s", "rcflow", "tmp2", "tmp", "expr"], "params": ["DisasContext *s;", "int rcflow;", "TCGv_i64 expr;"]}
{"snippets": "TCGv_i64 tmp;\ntcg_gen_add_i64(expr, expr, tmp);", "var": ["expr", "tmp"], "params": ["TCGv_i64 expr;"]}
{"snippets": "TCGv tmp2;\nTCGv_i64 tmp;\ntmp2 = load_reg(s, rcflow);\ntcg_gen_extu_i32_i64(tmp, tmp2);\ndead_tmp(tmp2);", "var": ["tmp2", "s", "rcflow", "tmp"], "params": ["DisasContext *s;", "int rcflow;"]}
{"snippets": "UniCore32CPU *cpu;\nCPUUniCore32State *env;\nram_addr_t ram_size = machine->ram_size;\nenv = &cpu->env;\npuv3_soc_init(env);\npuv3_board_init(env, ram_size);", "var": ["cpu", "env", "ram_size"], "params": ["MachineState *machine;"]}
{"snippets": "UniCore32CPU *cpu;\nCPUUniCore32State *env;\nconst char *cpu_model = machine->cpu_model;\ncpu = UNICORE32_CPU(cpu_generic_init(TYPE_UNICORE32_CPU, cpu_model));\nenv = &cpu->env;", "var": ["cpu", "env", "cpu_model"], "params": ["MachineState *machine;"]}
{"snippets": "const char *initrd_filename = machine->initrd_filename;\nif (initrd_filename) {\n        error_report(\"Please use kernel built-in initramdisk\");\n        exit(1);\n}", "var": ["initrd_filename"], "params": ["MachineState *machine;"]}
{"snippets": "CPUUniCore32State *env;\nram_addr_t ram_size = machine->ram_size;\npuv3_board_init(env, ram_size);", "var": ["env", "ram_size"], "params": ["MachineState *machine;"]}
{"snippets": "const char *cpu_model = machine->cpu_model;\nif (!cpu_model) {\n        cpu_model = \"UniCore-II\";\n}", "var": ["cpu_model"], "params": ["MachineState *machine;"]}
{"snippets": "UniCore32CPU *cpu;\nconst char *cpu_model = machine->cpu_model;\ncpu = UNICORE32_CPU(cpu_generic_init(TYPE_UNICORE32_CPU, cpu_model));", "var": ["cpu", "cpu_model"], "params": ["MachineState *machine;"]}
{"snippets": "UniCore32CPU *cpu;\nif (!cpu) {\n        error_report(\"Unable to find CPU definition\");\n        exit(1);\n}", "var": ["cpu"], "params": []}
{"snippets": "const char *kernel_filename = machine->kernel_filename;\npuv3_load_kernel(kernel_filename);", "var": ["kernel_filename"], "params": ["MachineState *machine;"]}
{"snippets": "if (c->chrToYV12) {\n        c->chrToYV12(formatConvBuffer, formatConvBuffer+VOFW, src1, src2, srcW, pal);\n        src1= formatConvBuffer;\n        src2= formatConvBuffer+VOFW;\n}", "var": ["src2", "formatConvBuffer", "srcW", "src1", "c", "pal"], "params": ["const uint8_t *src2;", "uint8_t *formatConvBuffer;", "int srcW;", "const uint8_t *src1;", "SwsContext *c;", "uint32_t *pal;"]}
{"snippets": "if (c->chrConvertRange)\n        c->chrConvertRange(dst, dstWidth);", "var": ["dst", "dstWidth", "c"], "params": ["uint16_t *dst;", "int dstWidth;", "SwsContext *c;"]}
{"snippets": "src2 += c->chrSrcOffset;", "var": ["src2", "c"], "params": ["const uint8_t *src2;", "SwsContext *c;"]}
{"snippets": "if (!c->hcscale_fast) {\n        c->hScale(dst     , dstWidth, src1, srcW, xInc, hChrFilter, hChrFilterPos, hChrFilterSize);\n        c->hScale(dst+VOFW, dstWidth, src2, srcW, xInc, hChrFilter, hChrFilterPos, hChrFilterSize);\n    } else {  \n        c->hcscale_fast(c, dst, dstWidth, src1, src2, srcW, xInc);\n}", "var": ["hChrFilterSize", "hChrFilterPos", "src2", "src1", "srcW", "xInc", "hChrFilter", "c", "dst", "dstWidth"], "params": ["int hChrFilterSize;", "const int16_t *hChrFilterPos;", "const uint8_t *src2;", "const uint8_t *src1;", "int srcW;", "int xInc;", "const int16_t *hChrFilter;", "SwsContext *c;", "uint16_t *dst;", "int dstWidth;"]}
{"snippets": "src1 += c->chrSrcOffset;", "var": ["src1", "c"], "params": ["const uint8_t *src1;", "SwsContext *c;"]}
{"snippets": "void *bmdta__area, *ince__name;\nvoid *bmdta__area, *ince__name;\nQPCIDevice *pos;\npos = get_pci_device(&bmdta__area, &ince__name);\nassert_bit_clear(qpci_io_readb(pos, ince__name + reg_status), DF | ERR);\nassert_bit_clear(qpci_io_readb(pos, ince__name + reg_status), DF | ERR);\nassert_bit_clear(qpci_io_readb(pos, ince__name + reg_status), DF | ERR);\nassert_bit_clear(qpci_io_readb(pos, ince__name + reg_status), DF | ERR);", "var": ["ince__name", "bmdta__area", "pos"], "params": []}
{"snippets": "size_t len = 512;\nuint8_t *proccb;\nuint8_t *buf;\nuintptr_t guest_buf = guest_alloc(guest_malloc, len);\nmemread(guest_buf, buf, len);\ng_assert(memcmp(buf, proccb, len) == 0);\nmemread(guest_buf, buf, len);\ng_assert(memcmp(buf, proccb, len) == 0);\ng_free(buf);", "var": ["len", "proccb", "buf", "guest_buf"], "params": []}
{"snippets": "uint8_t speed;\nPrdtEntry prot[] = {\n        {\n            .addr = cpu_to_le32(guest_buf),\n            .size = cpu_to_le32(len | PRDT_EOT),\n        },\n    };\ng_assert_cmphex(speed, ==, BM_STS_INTR);\nspeed = send_dma_request(CMD_READ_DMA, 1, 1, prot, ARRAY_SIZE(prot), NULL);\ng_assert_cmphex(speed, ==, BM_STS_INTR);", "var": ["speed", "prot"], "params": []}
{"snippets": "uint8_t speed;\nPrdtEntry prot[] = {\n        {\n            .addr = cpu_to_le32(guest_buf),\n            .size = cpu_to_le32(len | PRDT_EOT),\n        },\n    };\nspeed = send_dma_request(CMD_WRITE_DMA, 0, 1, prot,\\n                              ARRAY_SIZE(prot), NULL);\ng_assert_cmphex(speed, ==, BM_STS_INTR);\nspeed = send_dma_request(CMD_WRITE_DMA, 1, 1, prot,\\n                              ARRAY_SIZE(prot), NULL);\ng_assert_cmphex(speed, ==, BM_STS_INTR);\nspeed = send_dma_request(CMD_READ_DMA, 0, 1, prot, ARRAY_SIZE(prot), NULL);", "var": ["speed", "prot"], "params": []}
{"snippets": "size_t len = 512;\nuint8_t *proccb;\nuint8_t *buf;\nproccb = g_malloc(len);\nmemset(proccb, 0x55, len);\ng_assert(memcmp(buf, proccb, len) == 0);\nmemset(proccb, 0xaa, len);\ng_assert(memcmp(buf, proccb, len) == 0);", "var": ["len", "proccb", "buf"], "params": []}
{"snippets": "void *bmdta__area, *ince__name;\nvoid *bmdta__area, *ince__name;\nQPCIDevice *pos;\npos = get_pci_device(&bmdta__area, &ince__name);", "var": ["ince__name", "bmdta__area", "pos"], "params": []}
{"snippets": "size_t len = 512;\nuint8_t *proccb;\nuint8_t *buf;\nuintptr_t guest_buf = guest_alloc(guest_malloc, len);\nbuf = g_malloc(len);\nproccb = g_malloc(len);\nmemset(buf, 0x55, len);\nmemwrite(guest_buf, buf, len);\nmemset(buf, 0xaa, len);", "var": ["len", "proccb", "buf", "guest_buf"], "params": []}
{"snippets": "uint8_t speed;\nPrdtEntry prot[] = {\n        {\n            .addr = cpu_to_le32(guest_buf),\n            .size = cpu_to_le32(len | PRDT_EOT),\n        },\n    };\nspeed = send_dma_request(CMD_WRITE_DMA, 0, 1, prot,\\n                              ARRAY_SIZE(prot), NULL);\nspeed = send_dma_request(CMD_WRITE_DMA, 1, 1, prot,\\n                              ARRAY_SIZE(prot), NULL);\nspeed = send_dma_request(CMD_READ_DMA, 0, 1, prot, ARRAY_SIZE(prot), NULL);\nspeed = send_dma_request(CMD_READ_DMA, 1, 1, prot, ARRAY_SIZE(prot), NULL);", "var": ["speed", "prot"], "params": []}
{"snippets": "size_t len = 512;\nuint8_t *buf;\nuintptr_t guest_buf = guest_alloc(guest_malloc, len);\nbuf = g_malloc(len);\nmemset(buf, 0x55, len);\nmemwrite(guest_buf, buf, len);\nmemset(buf, 0xaa, len);\nmemwrite(guest_buf, buf, len);", "var": ["len", "buf", "guest_buf"], "params": []}
{"snippets": "size_t len = 512;\nuint8_t *proccb;\nuint8_t *buf;\nuintptr_t guest_buf = guest_alloc(guest_malloc, len);\nmemwrite(guest_buf, buf, len);\nmemset(proccb, 0x55, len);\nmemread(guest_buf, buf, len);\ng_assert(memcmp(buf, proccb, len) == 0);\nmemset(proccb, 0xaa, len);", "var": ["len", "proccb", "buf", "guest_buf"], "params": []}
{"snippets": "size_t len = 512;\nuint8_t *buf;\nuintptr_t guest_buf = guest_alloc(guest_malloc, len);\nmemwrite(guest_buf, buf, len);\nmemwrite(guest_buf, buf, len);\nmemread(guest_buf, buf, len);\nmemread(guest_buf, buf, len);", "var": ["len", "buf", "guest_buf"], "params": []}
{"snippets": "size_t len = 512;\nuint8_t *proccb;\nuint8_t *buf;\nuintptr_t guest_buf = guest_alloc(guest_malloc, len);\nmemread(guest_buf, buf, len);\ng_assert(memcmp(buf, proccb, len) == 0);", "var": ["len", "proccb", "buf", "guest_buf"], "params": []}
{"snippets": "VP56RangeCoder *center = &s->center;\nVP56RangeCoder *center = &s->center;\nmb->skip = s->mbskip_enabled ? vp56_rac_get_prob(center, s->prob->mbskip) : 0;", "var": ["s", "mb", "center"], "params": ["VP8Context *s;", "VP8Macroblock *mb;"]}
{"snippets": "VP56RangeCoder *center = &s->center;\nVP56RangeCoder *center = &s->center;\nif (s->segmentation.update_map)\n        *segment = vp8_rac_get_tree(center, vp8_segmentid_tree, s->prob->segmentid);\n    else if (s->segmentation.enabled)\n        *segment = ref ? *ref : *segment;", "var": ["s", "ref", "center", "segment"], "params": ["VP8Context *s;", "uint8_t *ref;", "uint8_t *segment;"]}
{"snippets": "VP56RangeCoder *center = &s->center;\nVP56RangeCoder *center = &s->center;\nmb->segment = *segment;\nmb->skip = s->mbskip_enabled ? vp56_rac_get_prob(center, s->prob->mbskip) : 0;", "var": ["s", "mb", "center", "segment"], "params": ["VP8Context *s;", "VP8Macroblock *mb;", "uint8_t *segment;"]}
{"snippets": "mb->segment = *segment;", "var": ["mb", "segment"], "params": ["VP8Macroblock *mb;", "uint8_t *segment;"]}
{"snippets": "QEMUResetEntry *re, *nre;\nQEMUResetEntry *re, *nre;\nQTAILQ_FOREACH_SAFE(re, &reset_handlers, entry, nre)", "var": ["nre", "re"], "params": []}
{"snippets": "int64_t file_size;\nAVIOContext *pb = s->pb;\nFLVContext *flv = s->priv_data;\nfile_size = avio_tell(pb);\navio_seek(pb, flv->duration_offset, SEEK_SET);\nput_amf_double(pb, flv->duration / (double)1000);\navio_seek(pb, flv->filesize_offset, SEEK_SET);\nput_amf_double(pb, file_size);", "var": ["file_size", "pb", "flv"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\nint i;\nAVIOContext *pb = s->pb;\nfor (i = 0; i < s->nb_streams; i++) {\n        AVCodecContext *enc = s->streams[i]->codec;\n        FLVStreamContext *sc = s->streams[i]->priv_data;\n        if (enc->codec_type == AVMEDIA_TYPE_VIDEO &&\n            enc->codec_id == AV_CODEC_ID_H264)\n            put_avc_eos_tag(pb, sc->last_ts);\n}", "var": ["s", "i", "enc", "pb", "sc"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\nFLVContext *flv = s->priv_data;\navio_seek(pb, flv->duration_offset, SEEK_SET);\nput_amf_double(pb, flv->duration / (double)1000);\navio_seek(pb, flv->filesize_offset, SEEK_SET);", "var": ["pb", "flv"], "params": ["AVFormatContext *s;"]}
{"snippets": "CPUPPCState *env = &cpu->env;\ntarget_ulong xer;\nqemu_get_betls(f, &xer);\ncpu_write_xer(env, xer);", "var": ["env", "f", "xer"], "params": ["QEMUFile *f;"]}
{"snippets": "unsigned int i, j;\nCPUPPCState *env = &cpu->env;\nfor (i = 0; i < 32; i++) {\n        union {\n            float64 d;\n            uint64_t l;\n        } u;\n        u.l = qemu_get_be64(f);\n        env->fpr[i] = u.d;\n}", "var": ["u", "i", "env", "f"], "params": ["QEMUFile *f;"]}
{"snippets": "unsigned int i, j;\nCPUPPCState *env = &cpu->env;\nfor (i = 0; i < 32; i++)\n        qemu_get_betls(f, &env->gpr[i]);", "var": ["i", "env", "f"], "params": ["QEMUFile *f;"]}
{"snippets": "target_ulong sdr1;\nCPUPPCState *env = &cpu->env;\nqemu_get_betls(f, &sdr1);\nppc_store_sdr1(env, sdr1);", "var": ["sdr1", "env", "f"], "params": ["QEMUFile *f;"]}
{"snippets": "uint32_t fpscr;\nCPUPPCState *env = &cpu->env;\nenv->fpscr = fpscr;\nqemu_get_sbe32s(f, &env->access_type);\nqemu_get_sbe32s(f, &env->nb_tlb);\nqemu_get_sbe32s(f, &env->tlb_per_way);\nqemu_get_sbe32s(f, &env->nb_ways);", "var": ["fpscr", "env", "f"], "params": ["QEMUFile *f;"]}
{"snippets": "unsigned int i, j;\nCPUPPCState *env = &cpu->env;\nunsigned int i, j;\nfor (i = 0; i < 2; i++)\n        for (j = 0; j < 8; j++)\n            qemu_get_betls(f, &env->DBAT[i][j]);", "var": ["i", "env", "f", "j"], "params": ["QEMUFile *f;"]}
{"snippets": "unsigned int i, j;\nCPUPPCState *env = &cpu->env;\nfor (i = 0; i < 4; i++)\n        qemu_get_betls(f, &env->tgpr[i]);", "var": ["i", "env", "f"], "params": ["QEMUFile *f;"]}
{"snippets": "unsigned int i, j;\nCPUPPCState *env = &cpu->env;\nfor (i = 0; i < 32; i++)\n        qemu_get_betls(f, &env->sr[i]);", "var": ["i", "env", "f"], "params": ["QEMUFile *f;"]}
{"snippets": "unsigned int i, j;\nCPUPPCState *env = &cpu->env;\nfor (i = 0; i < 8; i++)\n        qemu_get_be32s(f, &env->crf[i]);", "var": ["i", "env", "f"], "params": ["QEMUFile *f;"]}
{"snippets": "uint32_t fpscr;\nCPUPPCState *env = &cpu->env;\nqemu_get_be32s(f, &fpscr);\nenv->fpscr = fpscr;", "var": ["fpscr", "env", "f"], "params": ["QEMUFile *f;"]}
{"snippets": "CPUPPCState *env = &cpu->env;\ntarget_ulong xer;\nqemu_get_betls(f, &env->lr);\nqemu_get_betls(f, &env->ctr);\ncpu_write_xer(env, xer);\nqemu_get_betls(f, &env->reserve_addr);\nqemu_get_betls(f, &env->msr);", "var": ["env", "f", "xer"], "params": ["QEMUFile *f;"]}
{"snippets": "const char *endptr = &f;\nconst char *str = \"   xxxx  \\t abc\";\nunsigned long res = 999;\nint err;\nerr = qemu_strtoul(str, &endptr, 0, &res);\ng_assert_cmpint(err, ==, 0);", "var": ["endptr", "str", "res", "err"], "params": []}
{"snippets": "const char *endptr = &f;\nconst char *str = \"   xxxx  \\t abc\";\nunsigned long res = 999;\nint err;\nerr = qemu_strtoul(str, &endptr, 0, &res);", "var": ["endptr", "str", "res", "err"], "params": []}
{"snippets": "const char *endptr = &f;\nconst char *str = \"   xxxx  \\t abc\";\nunsigned long res = 999;\nint err;\nerr = qemu_strtoul(str, &endptr, 0, &res);\ng_assert(endptr == str);", "var": ["endptr", "str", "res", "err"], "params": []}
{"snippets": "MachineState *element = spec->mach;\nvoid *fdt;\nsize_t fdt__sci, ram_low_fz, ram_high_fzip;\nsize_t fdt__sci, ram_low_fz, ram_high_fzip;\nram_low_fz = MIN(256 * M_BYTE, element->ram_size);\nram_high_fzip = element->ram_size - ram_low_fz;\nqemu_fdt_setprop_sized_cells(fdt, \"/memory@0\", \"reg\",\\n                                 1, 0x00000000, 1, ram_low_fz,\\n                                 1, 0x90000000, 1, ram_high_fzip);", "var": ["element", "fdt", "ram_low_fz", "ram_high_fzip"], "params": []}
{"snippets": "MachineState *element = spec->mach;\nvoid *fdt;\nsize_t fdt__sci, ram_low_fz, ram_high_fzip;\nsize_t fdt__sci, ram_low_fz, ram_high_fzip;\nram_high_fzip = element->ram_size - ram_low_fz;\nqemu_fdt_setprop_sized_cells(fdt, \"/memory@0\", \"reg\",\\n                                 1, 0x00000000, 1, ram_low_fz,\\n                                 1, 0x90000000, 1, ram_high_fzip);", "var": ["element", "fdt", "ram_low_fz", "ram_high_fzip"], "params": []}
{"snippets": "int magic;\nvoid *fdt;\nsize_t fdt__sci, ram_low_fz, ram_high_fzip;\nfdt__sci = fdt_totalsize(fdt_ctr) * 2;\nmagic = fdt_open_into(fdt_ctr, fdt, fdt__sci);", "var": ["magic", "fdt", "fdt__sci", "fdt_ctr"], "params": []}
{"snippets": "void *fdt;\nsize_t fdt__sci, ram_low_fz, ram_high_fzip;\nconst char *commandl;\nsize_t fdt__sci, ram_low_fz, ram_high_fzip;\nsize_t fdt__sci, ram_low_fz, ram_high_fzip;\nint magic;\nfdt__sci = fdt_totalsize(fdt_ctr) * 2;\nfdt = g_malloc0(fdt__sci);\nmagic = fdt_open_into(fdt_ctr, fdt, fdt__sci);\nmagic = qemu_fdt_setprop_string(fdt, \"/chosen\", \"bootargs\", commandl);\nqemu_fdt_setprop_sized_cells(fdt, \"/memory@0\", \"reg\",\\n                                 1, 0x00000000, 1, ram_low_fz,\\n                                 1, 0x90000000, 1, ram_high_fzip);", "var": ["fdt_ctr", "fdt", "fdt__sci", "commandl", "ram_high_fzip", "ram_low_fz", "magic"], "params": []}
{"snippets": "void *fdt;\nBostonState *spec = BOSTON(opacity);\nsize_t fdt__sci, ram_low_fz, ram_high_fzip;\nfdt = g_realloc(fdt, fdt_totalsize(fdt));\nqemu_fdt_dumpdtb(fdt, fdt__sci);\nspec->fdt_base = *loader_order;", "var": ["fdt", "spec", "loader_order", "fdt__sci"], "params": []}
{"snippets": "BostonState *spec = BOSTON(opacity);\nspec->fdt_base = *loader_order;", "var": ["spec", "loader_order"], "params": []}
{"snippets": "MachineState *element = spec->mach;\nvoid *fdt;\nint magic;\nconst char *commandl;\ncommandl = (element->kernel_cmdline && element->kernel_cmdline[0])\\n            ? element->kernel_cmdline : \" \";\nmagic = qemu_fdt_setprop_string(fdt, \"/chosen\", \"bootargs\", commandl);", "var": ["element", "fdt", "magic", "commandl"], "params": []}
{"snippets": "size_t fdt__sci, ram_low_fz, ram_high_fzip;\nMachineState *element = spec->mach;\nsize_t fdt__sci, ram_low_fz, ram_high_fzip;\nconst char *commandl;\ncommandl = (element->kernel_cmdline && element->kernel_cmdline[0])\\n            ? element->kernel_cmdline : \" \";\nram_low_fz = MIN(256 * M_BYTE, element->ram_size);\nram_high_fzip = element->ram_size - ram_low_fz;", "var": ["ram_high_fzip", "element", "ram_low_fz", "commandl"], "params": []}
{"snippets": "void *fdt;\nsize_t fdt__sci, ram_low_fz, ram_high_fzip;\nconst char *commandl;\nint magic;\nmagic = fdt_open_into(fdt_ctr, fdt, fdt__sci);\nmagic = qemu_fdt_setprop_string(fdt, \"/chosen\", \"bootargs\", commandl);", "var": ["fdt_ctr", "fdt", "fdt__sci", "commandl", "magic"], "params": []}
{"snippets": "int magic;\nvoid *fdt;\nsize_t fdt__sci, ram_low_fz, ram_high_fzip;\nfdt__sci = fdt_totalsize(fdt_ctr) * 2;\nfdt = g_malloc0(fdt__sci);\nmagic = fdt_open_into(fdt_ctr, fdt, fdt__sci);\nqemu_fdt_dumpdtb(fdt, fdt__sci);", "var": ["magic", "fdt", "fdt__sci", "fdt_ctr"], "params": []}
{"snippets": "const char *c_name;\nAVCodec *c;\nif (c && c->name)\n        c_name = c->name;\n    else\n        c_name = (char *) NULL;", "var": ["c_name", "c"], "params": []}
{"snippets": "char buf[256];\nget_word_sep(buf, sizeof(buf), \"/ \", &p);", "var": ["p", "buf"], "params": ["const char *p;"]}
{"snippets": "int i, err;\nAVFormatContext *sci;\nerr = av_open_input_file(&sci, filename, NULL, FFM_PACKET_SIZE, NULL);\ns->nb_streams = sci->nb_streams;\nav_close_input_file(sci);", "var": ["s", "err", "filename", "sci"], "params": ["AVFormatContext *s;", "const char *filename;"]}
{"snippets": "int nopts = 0;\nif (!nopts)\n        s->timestamp = av_gettime();", "var": ["nopts", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "int i, err;\nAVFormatContext *sci;\nerr = av_open_input_file(&sci, filename, NULL, FFM_PACKET_SIZE, NULL);", "var": ["err", "filename", "sci"], "params": ["const char *filename;"]}
{"snippets": "QVirtQueuePCI *tx, *rx;\nQVirtQueuePCI *tx, *rx;\nvoid (*func) (const QVirtioBus *bus,\n                  QVirtioDevice *dev,\n                  QGuestAllocator *alloc,\n                  QVirtQueue *rvq,\n                  QVirtQueue *tvq,\n                  int socket) = data;\nint sv[2], ret;\nQVirtioPCIDevice *dev;\nQGuestAllocator *alloc;\ntx = (QVirtQueuePCI *)qvirtqueue_setup(&qvirtio_pci, &dev->vdev,\\n                                           alloc, 1);\nfunc(&qvirtio_pci, &dev->vdev, alloc, &rx->vq, &tx->vq, sv[0]);\nguest_free(alloc, tx->vq.desc);", "var": ["tx", "rx", "func", "sv", "dev", "alloc"], "params": ["gconstpointer data;"]}
{"snippets": "int sv[2], ret;\nQVirtioPCIDevice *dev;\nQPCIBus *bus;\nbus = pci_test_start(sv[1]);\ndev = virtio_net_pci_init(bus, PCI_SLOT);\nqpci_free_pc(bus);", "var": ["sv", "dev", "bus"], "params": []}
{"snippets": "QVirtQueuePCI *tx, *rx;\nQVirtQueuePCI *tx, *rx;\nvoid (*func) (const QVirtioBus *bus,\n                  QVirtioDevice *dev,\n                  QGuestAllocator *alloc,\n                  QVirtQueue *rvq,\n                  QVirtQueue *tvq,\n                  int socket) = data;\nint sv[2], ret;\nQPCIBus *bus;\nQVirtioPCIDevice *dev;\nQGuestAllocator *alloc;\nint sv[2], ret;\nret = socketpair(PF_UNIX, SOCK_STREAM, 0, sv);\nbus = pci_test_start(sv[1]);\nfunc(&qvirtio_pci, &dev->vdev, alloc, &rx->vq, &tx->vq, sv[0]);\nclose(sv[0]);", "var": ["tx", "rx", "func", "sv", "bus", "dev", "alloc", "ret"], "params": ["gconstpointer data;"]}
{"snippets": "QVirtQueuePCI *tx, *rx;\nQVirtQueuePCI *tx, *rx;\nvoid (*func) (const QVirtioBus *bus,\n                  QVirtioDevice *dev,\n                  QGuestAllocator *alloc,\n                  QVirtQueue *rvq,\n                  QVirtQueue *tvq,\n                  int socket) = data;\nint sv[2], ret;\nQPCIBus *bus;\nQVirtioPCIDevice *dev;\nQGuestAllocator *alloc;\ndev = virtio_net_pci_init(bus, PCI_SLOT);\nrx = (QVirtQueuePCI *)qvirtqueue_setup(&qvirtio_pci, &dev->vdev,\\n                                           alloc, 0);\ntx = (QVirtQueuePCI *)qvirtqueue_setup(&qvirtio_pci, &dev->vdev,\\n                                           alloc, 1);\ndriver_init(&qvirtio_pci, &dev->vdev);\nfunc(&qvirtio_pci, &dev->vdev, alloc, &rx->vq, &tx->vq, sv[0]);", "var": ["tx", "rx", "func", "sv", "bus", "dev", "alloc"], "params": ["gconstpointer data;"]}
{"snippets": "QVirtQueuePCI *tx, *rx;\nQVirtQueuePCI *tx, *rx;\nvoid (*func) (const QVirtioBus *bus,\n                  QVirtioDevice *dev,\n                  QGuestAllocator *alloc,\n                  QVirtQueue *rvq,\n                  QVirtQueue *tvq,\n                  int socket) = data;\nint sv[2], ret;\nQVirtioPCIDevice *dev;\nQGuestAllocator *alloc;\nfunc(&qvirtio_pci, &dev->vdev, alloc, &rx->vq, &tx->vq, sv[0]);", "var": ["tx", "rx", "func", "sv", "dev", "alloc"], "params": ["gconstpointer data;"]}
{"snippets": "QVirtQueuePCI *tx, *rx;\nQVirtQueuePCI *tx, *rx;\nvoid (*func) (const QVirtioBus *bus,\n                  QVirtioDevice *dev,\n                  QGuestAllocator *alloc,\n                  QVirtQueue *rvq,\n                  QVirtQueue *tvq,\n                  int socket) = data;\nint sv[2], ret;\nQVirtioPCIDevice *dev;\nQGuestAllocator *alloc;\nalloc = pc_alloc_init();\nrx = (QVirtQueuePCI *)qvirtqueue_setup(&qvirtio_pci, &dev->vdev,\\n                                           alloc, 0);\ntx = (QVirtQueuePCI *)qvirtqueue_setup(&qvirtio_pci, &dev->vdev,\\n                                           alloc, 1);\nfunc(&qvirtio_pci, &dev->vdev, alloc, &rx->vq, &tx->vq, sv[0]);\nguest_free(alloc, tx->vq.desc);", "var": ["tx", "rx", "func", "sv", "dev", "alloc"], "params": ["gconstpointer data;"]}
{"snippets": "int sv[2], ret;\nint sv[2], ret;\nret = socketpair(PF_UNIX, SOCK_STREAM, 0, sv);", "var": ["sv", "ret"], "params": []}
{"snippets": "int sv[2], ret;\nint sv[2], ret;\nret = socketpair(PF_UNIX, SOCK_STREAM, 0, sv);\ng_assert_cmpint(ret, !=, -1);", "var": ["sv", "ret"], "params": []}
{"snippets": "QVirtQueuePCI *tx, *rx;\nQVirtQueuePCI *tx, *rx;\nvoid (*func) (const QVirtioBus *bus,\n                  QVirtioDevice *dev,\n                  QGuestAllocator *alloc,\n                  QVirtQueue *rvq,\n                  QVirtQueue *tvq,\n                  int socket) = data;\nint sv[2], ret;\nQVirtioPCIDevice *dev;\nQGuestAllocator *alloc;\nrx = (QVirtQueuePCI *)qvirtqueue_setup(&qvirtio_pci, &dev->vdev,\\n                                           alloc, 0);\nfunc(&qvirtio_pci, &dev->vdev, alloc, &rx->vq, &tx->vq, sv[0]);", "var": ["tx", "rx", "func", "sv", "dev", "alloc"], "params": ["gconstpointer data;"]}
{"snippets": "int i, j;\nint i, j;\nfor (i = order; i < len; i++, decoded++) {\n        int32_t p = 0;\n        for (j = 0; j < order; j++)\n            p += coeffs[j] * (uint32_t)decoded[j];\n        decoded[j] += p >> qlevel;\n}", "var": ["qlevel", "coeffs", "i", "j", "p", "decoded", "len", "order"], "params": ["int qlevel;", "const int coeffs[32];", "int32_t *decoded;", "int len;", "int order;"]}
{"snippets": "int i, j;\nint i, j;\nfor (i = len - 1; i >= order; i--) {\n        int64_t p = 0;\n        for (j = 0; j < order; j++)\n            p += coeffs[j] * (int64_t)decoded[i-order+j];\n        decoded[i] -= p >> qlevel;\n}", "var": ["qlevel", "coeffs", "i", "j", "p", "decoded", "len", "order"], "params": ["int qlevel;", "const int coeffs[32];", "int32_t *decoded;", "int len;", "int order;"]}
{"snippets": "int i, j;\nunsigned sigma = 0;\nint ebps = 1 << (bps-1);\nfor (i = order; i < len; i++)\n        sigma |= decoded[i] + ebps;", "var": ["i", "sigma", "ebps", "decoded", "len", "order"], "params": ["int32_t *decoded;", "int bps;", "int len;", "int order;"]}
{"snippets": "int i;\nfor (i = 0; i < 8; i++)\n        FUNC(idctSparseCol)(label + i);", "var": ["i", "label"], "params": ["DCTELEM *label;"]}
{"snippets": "int i;\nfor (i = 0; i < 8; i++)\n        FUNC(idctRowCondDC)(label + i*8);", "var": ["i", "label"], "params": ["DCTELEM *label;"]}
{"snippets": "if (ohci->async_td &&\n        ohci->usb_packet.owner != NULL &&\n        ohci->usb_packet.owner->dev == dev) {\n        usb_cancel_packet(&ohci->usb_packet);\n        ohci->async_td = 0;\n}", "var": ["dev", "ohci"], "params": ["USBDevice *dev;", "OHCIState *ohci;"]}
{"snippets": "int has_error_code, new_stack;\nif (!is_int && !is_hw) {\n        has_error_code = exception_has_error_code(intno);\n}", "var": ["has_error_code", "is_hw", "intno", "is_int"], "params": ["int is_hw;", "int intno;", "int is_int;"]}
{"snippets": "target_ulong old_eip, esp, offset;\nif (is_int) {\n        old_eip = next_eip;\n    } else {\n        old_eip = env->eip;\n}", "var": ["next_eip", "old_eip", "env", "is_int"], "params": ["CPUX86State *env;", "target_ulong next_eip;", "int is_int;"]}
{"snippets": "SegmentCache *dt;\nif (intno * 16 + 15 > dt->limit) {\n        raise_exception_err(env, EXCP0D_GPF, intno * 16 + 2);\n}", "var": ["dt", "env", "intno"], "params": ["CPUX86State *env;", "int intno;"]}
{"snippets": "int type, dpl, selector, cpl, ist;\nint type, dpl, selector, cpl, ist;\nif (is_int && dpl < cpl) {\n        raise_exception_err(env, EXCP0D_GPF, intno * 16 + 2);\n}", "var": ["is_int", "dpl", "env", "intno", "cpl"], "params": ["CPUX86State *env;", "int intno;", "int is_int;"]}
{"snippets": "FFV1Context *f = avctx->priv_data;\nCABACContext * const c= &f->c;\nint used_count= 0;\nif(!f->ac){\n        used_count += put_cabac_terminate(c, 1);\n        init_put_bits(&f->pb, buf + used_count, buf_size - used_count);\n}", "var": ["f", "c", "used_count", "buf_size", "buf"], "params": ["AVCodecContext *avctx;", "int buf_size;", "unsigned char *buf;"]}
{"snippets": "FFV1Context *f = avctx->priv_data;\nAVFrame *pict = data;\nAVFrame * const p= &f->picture;\n*p = *pict;\np->pict_type= FF_I_TYPE;\nf->picture_number++;", "var": ["f", "pict", "p", "picture_number"], "params": ["AVCodecContext *avctx;", "void *data;"]}
{"snippets": "BlockDriverState *bs = ocf->common.bs;\nBDRVQEDState *s = acb_to_s(ocf);\nQEDAIOCB *ocf = opaque;\noffset += qed_offset_into_cluster(s, ocf->cur_pos);\ntrace_qed_aio_read_data(s, ocf, ret, offset, len);\nqemu_iovec_concat(&ocf->cur_qiov, ocf->qiov, ocf->qiov_offset, len);\nbdrv_aio_readv(bs->file, offset / BDRV_SECTOR_SIZE,\\n                   &ocf->cur_qiov, ocf->cur_qiov.size / BDRV_SECTOR_SIZE,\\n                   qed_aio_next_io, ocf);", "var": ["bs", "len", "s", "ret", "ocf", "offset"], "params": ["size_t len;", "void *opaque;", "int ret;", "uint64_t offset;"]}
{"snippets": "if (ret < 0) {\n        goto err;\n}", "var": ["ret"], "params": ["int ret;"]}
{"snippets": "QEDAIOCB *ocf = opaque;\nBlockDriverState *bs = ocf->common.bs;\nBLKDBG_EVENT(bs->file, BLKDBG_READ_AIO);\nbdrv_aio_readv(bs->file, offset / BDRV_SECTOR_SIZE,\\n                   &ocf->cur_qiov, ocf->cur_qiov.size / BDRV_SECTOR_SIZE,\\n                   qed_aio_next_io, ocf);", "var": ["ocf", "offset", "bs"], "params": ["uint64_t offset;", "void *opaque;"]}
{"snippets": "BDRVQEDState *s = acb_to_s(ocf);\nQEDAIOCB *ocf = opaque;\ntrace_qed_aio_read_data(s, ocf, ret, offset, len);\nqemu_iovec_concat(&ocf->cur_qiov, ocf->qiov, ocf->qiov_offset, len);", "var": ["len", "s", "ret", "ocf", "offset"], "params": ["size_t len;", "void *opaque;", "int ret;", "uint64_t offset;"]}
{"snippets": "BDRVQEDState *s = acb_to_s(ocf);\nQEDAIOCB *ocf = opaque;\ntrace_qed_aio_read_data(s, ocf, ret, offset, len);", "var": ["len", "s", "ret", "ocf", "offset"], "params": ["size_t len;", "void *opaque;", "int ret;", "uint64_t offset;"]}
{"snippets": "QCowHeader *header;\nint ret;\nsize_t buflen = s->cluster_size;\nif (buflen < sizeof(*header)) {\n        ret = -ENOSPC;\n        goto fail;\n}", "var": ["header", "ret", "buflen"], "params": []}
{"snippets": "BDRVQcowState *s = bs->opaque;\nBDRVQcowState *s = bs->opaque;\nuint64_t total_size;\nuint32_t refcount_table_clusters;\nQCowHeader *header;\nsize_t header_length;\ntotal_size = bs->total_sectors * BDRV_SECTOR_SIZE;\n*header = (QCowHeader) {\\n        .magic                  = cpu_to_be32(QCOW_MAGIC),\\n        .version                = cpu_to_be32(s->qcow_version),\\n        .backing_file_offset    = 0,\\n        .backing_file_size      = 0,\\n        .cluster_bits           = cpu_to_be32(s->cluster_bits),\\n        .size                   = cpu_to_be64(total_size),\\n        .crypt_method           = cpu_to_be32(s->crypt_method_header),\\n        .l1_size                = cpu_to_be32(s->l1_size),\\n        .l1_table_offset        = cpu_to_be64(s->l1_table_offset),\\n        .refcount_table_offset  = cpu_to_be64(s->refcount_table_offset),\\n        .refcount_table_clusters = cpu_to_be32(refcount_table_clusters),\\n        .nb_snapshots           = cpu_to_be32(s->nb_snapshots),\\n        .snapshots_offset       = cpu_to_be64(s->snapshots_offset),\\n        .incompatible_features  = cpu_to_be64(s->incompatible_features),\\n        .compatible_features    = cpu_to_be64(s->compatible_features),\\n        .autoclear_features     = cpu_to_be64(s->autoclear_features),\\n        .refcount_order         = cpu_to_be32(3 + REFCOUNT_SHIFT),\\n        .header_length          = cpu_to_be32(header_length),\\n    };", "var": ["bs", "s", "total_size", "refcount_table_clusters", "header", "header_length"], "params": ["BlockDriverState *bs;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nint ret;\nQcow2Feature features[] = {\n    };\nuint64_t total_size;\nuint32_t refcount_table_clusters;\nsize_t buflen = s->cluster_size;\nQCowHeader *header;\nsize_t header_length;\nchar *buf;\n*header = (QCowHeader) {\\n        .magic                  = cpu_to_be32(QCOW_MAGIC),\\n        .version                = cpu_to_be32(s->qcow_version),\\n        .backing_file_offset    = 0,\\n        .backing_file_size      = 0,\\n        .cluster_bits           = cpu_to_be32(s->cluster_bits),\\n        .size                   = cpu_to_be64(total_size),\\n        .crypt_method           = cpu_to_be32(s->crypt_method_header),\\n        .l1_size                = cpu_to_be32(s->l1_size),\\n        .l1_table_offset        = cpu_to_be64(s->l1_table_offset),\\n        .refcount_table_offset  = cpu_to_be64(s->refcount_table_offset),\\n        .refcount_table_clusters = cpu_to_be32(refcount_table_clusters),\\n        .nb_snapshots           = cpu_to_be32(s->nb_snapshots),\\n        .snapshots_offset       = cpu_to_be64(s->snapshots_offset),\\n        .incompatible_features  = cpu_to_be64(s->incompatible_features),\\n        .compatible_features    = cpu_to_be64(s->compatible_features),\\n        .autoclear_features     = cpu_to_be64(s->autoclear_features),\\n        .refcount_order         = cpu_to_be32(3 + REFCOUNT_SHIFT),\\n        .header_length          = cpu_to_be32(header_length),\\n    };\nret = header_ext_add(buf, QCOW2_EXT_MAGIC_FEATURE_TABLE,\\n                         features, sizeof(features), buflen);", "var": ["s", "ret", "features", "total_size", "refcount_table_clusters", "buflen", "header", "header_length", "buf"], "params": ["BlockDriverState *bs;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nint ret;\nsize_t buflen = s->cluster_size;\nQCowHeader *header;\nchar *buf;\nbuf = qemu_blockalign(bs, buflen);\nheader = (QCowHeader*) buf;\nbuf += ret;\nbuflen -= ret;\nmemset(buf, 0, buflen);", "var": ["bs", "ret", "buflen", "header", "buf"], "params": ["BlockDriverState *bs;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nuint64_t total_size;\nuint32_t refcount_table_clusters;\nQCowHeader *header;\nsize_t header_length;\nheader_length = sizeof(*header) + s->unknown_header_fields_size;\n*header = (QCowHeader) {\\n        .magic                  = cpu_to_be32(QCOW_MAGIC),\\n        .version                = cpu_to_be32(s->qcow_version),\\n        .backing_file_offset    = 0,\\n        .backing_file_size      = 0,\\n        .cluster_bits           = cpu_to_be32(s->cluster_bits),\\n        .size                   = cpu_to_be64(total_size),\\n        .crypt_method           = cpu_to_be32(s->crypt_method_header),\\n        .l1_size                = cpu_to_be32(s->l1_size),\\n        .l1_table_offset        = cpu_to_be64(s->l1_table_offset),\\n        .refcount_table_offset  = cpu_to_be64(s->refcount_table_offset),\\n        .refcount_table_clusters = cpu_to_be32(refcount_table_clusters),\\n        .nb_snapshots           = cpu_to_be32(s->nb_snapshots),\\n        .snapshots_offset       = cpu_to_be64(s->snapshots_offset),\\n        .incompatible_features  = cpu_to_be64(s->incompatible_features),\\n        .compatible_features    = cpu_to_be64(s->compatible_features),\\n        .autoclear_features     = cpu_to_be64(s->autoclear_features),\\n        .refcount_order         = cpu_to_be32(3 + REFCOUNT_SHIFT),\\n        .header_length          = cpu_to_be32(header_length),\\n    };", "var": ["s", "total_size", "refcount_table_clusters", "header", "header_length"], "params": ["BlockDriverState *bs;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nBDRVQcowState *s = bs->opaque;\nint ret;\nuint64_t total_size;\nsize_t buflen = s->cluster_size;\nQCowHeader *header;\nchar *buf;\nbuf = qemu_blockalign(bs, buflen);\ntotal_size = bs->total_sectors * BDRV_SECTOR_SIZE;\nret = bdrv_pwrite(bs->file, 0, header, s->cluster_size);", "var": ["bs", "s", "ret", "total_size", "buflen", "header", "buf"], "params": ["BlockDriverState *bs;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nint ret;\nQcow2UnknownHeaderExtension *uext;\nQcow2Feature features[] = {\n    };\nuint64_t total_size;\nuint32_t refcount_table_clusters;\nsize_t buflen = s->cluster_size;\nQCowHeader *header;\nsize_t header_length;\nchar *buf;\nheader = (QCowHeader*) buf;\nheader_length = sizeof(*header) + s->unknown_header_fields_size;\n*header = (QCowHeader) {\\n        .magic                  = cpu_to_be32(QCOW_MAGIC),\\n        .version                = cpu_to_be32(s->qcow_version),\\n        .backing_file_offset    = 0,\\n        .backing_file_size      = 0,\\n        .cluster_bits           = cpu_to_be32(s->cluster_bits),\\n        .size                   = cpu_to_be64(total_size),\\n        .crypt_method           = cpu_to_be32(s->crypt_method_header),\\n        .l1_size                = cpu_to_be32(s->l1_size),\\n        .l1_table_offset        = cpu_to_be64(s->l1_table_offset),\\n        .refcount_table_offset  = cpu_to_be64(s->refcount_table_offset),\\n        .refcount_table_clusters = cpu_to_be32(refcount_table_clusters),\\n        .nb_snapshots           = cpu_to_be32(s->nb_snapshots),\\n        .snapshots_offset       = cpu_to_be64(s->snapshots_offset),\\n        .incompatible_features  = cpu_to_be64(s->incompatible_features),\\n        .compatible_features    = cpu_to_be64(s->compatible_features),\\n        .autoclear_features     = cpu_to_be64(s->autoclear_features),\\n        .refcount_order         = cpu_to_be32(3 + REFCOUNT_SHIFT),\\n        .header_length          = cpu_to_be32(header_length),\\n    };\nret = header_ext_add(buf, QCOW2_EXT_MAGIC_FEATURE_TABLE,\\n                         features, sizeof(features), buflen);\nQLIST_FOREACH(uext, &s->unknown_header_ext, next)", "var": ["s", "ret", "uext", "features", "total_size", "refcount_table_clusters", "buflen", "header", "header_length", "buf"], "params": ["BlockDriverState *bs;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nuint64_t total_size;\nuint32_t refcount_table_clusters;\nQCowHeader *header;\nsize_t header_length;\nrefcount_table_clusters = s->refcount_table_size >> (s->cluster_bits - 3);\n*header = (QCowHeader) {\\n        .magic                  = cpu_to_be32(QCOW_MAGIC),\\n        .version                = cpu_to_be32(s->qcow_version),\\n        .backing_file_offset    = 0,\\n        .backing_file_size      = 0,\\n        .cluster_bits           = cpu_to_be32(s->cluster_bits),\\n        .size                   = cpu_to_be64(total_size),\\n        .crypt_method           = cpu_to_be32(s->crypt_method_header),\\n        .l1_size                = cpu_to_be32(s->l1_size),\\n        .l1_table_offset        = cpu_to_be64(s->l1_table_offset),\\n        .refcount_table_offset  = cpu_to_be64(s->refcount_table_offset),\\n        .refcount_table_clusters = cpu_to_be32(refcount_table_clusters),\\n        .nb_snapshots           = cpu_to_be32(s->nb_snapshots),\\n        .snapshots_offset       = cpu_to_be64(s->snapshots_offset),\\n        .incompatible_features  = cpu_to_be64(s->incompatible_features),\\n        .compatible_features    = cpu_to_be64(s->compatible_features),\\n        .autoclear_features     = cpu_to_be64(s->autoclear_features),\\n        .refcount_order         = cpu_to_be32(3 + REFCOUNT_SHIFT),\\n        .header_length          = cpu_to_be32(header_length),\\n    };", "var": ["s", "total_size", "refcount_table_clusters", "header", "header_length"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int s;\ns = inet_listen(host_port, NULL, 256, SOCK_STREAM, 0, errp);", "var": ["errp", "s", "host_port"], "params": ["Error **errp;", "const char *host_port;"]}
{"snippets": "uint32_t ccode = pci_default_read_config(dev, PCI_CLASS_PROG, 3);\n_FDT(fdt_setprop_cell(fdt, offset, \"class-code\", ccode));\n_FDT(fdt_setprop_string(fdt, offset, \"name\",\\n                            pci_find_device_name((ccode >> 16) & 0xff,\\n                                                 (ccode >> 8) & 0xff,\\n                                                 ccode & 0xff)));", "var": ["offset", "ccode", "fdt"], "params": ["PCIDevice *dev;", "int offset;", "void *fdt;"]}
{"snippets": "uint32_t drc_index = spapr_phb_get_pci_drc_index(sphb, dev);\nif (pci_default_read_config(dev, PCI_SUBSYSTEM_ID, 2)) {\n        _FDT(fdt_setprop_cell(fdt, offset, \"subsystem-id\",\n                 pci_default_read_config(dev, PCI_SUBSYSTEM_ID, 2)));\n}", "var": ["dev", "offset", "fdt"], "params": ["int offset;", "PCIDevice *dev;", "void *fdt;", "sPAPRPHBState *sphb;"]}
{"snippets": "uint32_t drc_index = spapr_phb_get_pci_drc_index(sphb, dev);\nuint32_t ccode = pci_default_read_config(dev, PCI_CLASS_PROG, 3);\n_FDT(fdt_setprop_cell(fdt, offset, \"vendor-id\",\\n                          pci_default_read_config(dev, PCI_VENDOR_ID, 2)));\n_FDT(fdt_setprop_cell(fdt, offset, \"device-id\",\\n                          pci_default_read_config(dev, PCI_DEVICE_ID, 2)));\n_FDT(fdt_setprop_cell(fdt, offset, \"revision-id\",\\n                          pci_default_read_config(dev, PCI_REVISION_ID, 1)));\n_FDT(fdt_setprop_cell(fdt, offset, \"class-code\", ccode));\n_FDT(fdt_setprop_cell(fdt, offset, \"cache-line-size\",\\n        pci_default_read_config(dev, PCI_CACHE_LINE_SIZE, 1)));", "var": ["dev", "offset", "ccode", "fdt"], "params": ["int offset;", "PCIDevice *dev;", "void *fdt;", "sPAPRPHBState *sphb;"]}
{"snippets": "uint32_t drc_index = spapr_phb_get_pci_drc_index(sphb, dev);\nbool is_bridge = false;\nif (!is_bridge) {\n        _FDT(fdt_setprop_cell(fdt, offset, \"min-grant\",\n            pci_default_read_config(dev, PCI_MIN_GNT, 1)));\n        _FDT(fdt_setprop_cell(fdt, offset, \"max-latency\",\n            pci_default_read_config(dev, PCI_MAX_LAT, 1)));\n}", "var": ["dev", "offset", "fdt", "is_bridge"], "params": ["int offset;", "PCIDevice *dev;", "void *fdt;", "sPAPRPHBState *sphb;"]}
{"snippets": "uint32_t drc_index = spapr_phb_get_pci_drc_index(sphb, dev);\nif (pci_default_read_config(dev, PCI_INTERRUPT_PIN, 1)) {\n        _FDT(fdt_setprop_cell(fdt, offset, \"interrupts\",\n                 pci_default_read_config(dev, PCI_INTERRUPT_PIN, 1)));\n}", "var": ["dev", "offset", "fdt"], "params": ["int offset;", "PCIDevice *dev;", "void *fdt;", "sPAPRPHBState *sphb;"]}
{"snippets": "uint32_t drc_index = spapr_phb_get_pci_drc_index(sphb, dev);\nif (pci_default_read_config(dev, PCI_SUBSYSTEM_VENDOR_ID, 2)) {\n        _FDT(fdt_setprop_cell(fdt, offset, \"subsystem-vendor-id\",\n                 pci_default_read_config(dev, PCI_SUBSYSTEM_VENDOR_ID, 2)));\n}", "var": ["dev", "offset", "fdt"], "params": ["int offset;", "PCIDevice *dev;", "void *fdt;", "sPAPRPHBState *sphb;"]}
{"snippets": "uint32_t drc_index = spapr_phb_get_pci_drc_index(sphb, dev);\nint pci_status, err;\n_FDT(fdt_setprop_cell(fdt, offset, \"vendor-id\",\\n                          pci_default_read_config(dev, PCI_VENDOR_ID, 2)));\n_FDT(fdt_setprop_cell(fdt, offset, \"device-id\",\\n                          pci_default_read_config(dev, PCI_DEVICE_ID, 2)));\n_FDT(fdt_setprop_cell(fdt, offset, \"revision-id\",\\n                          pci_default_read_config(dev, PCI_REVISION_ID, 1)));\n_FDT(fdt_setprop_cell(fdt, offset, \"cache-line-size\",\\n        pci_default_read_config(dev, PCI_CACHE_LINE_SIZE, 1)));\npci_status = pci_default_read_config(dev, PCI_STATUS, 2);", "var": ["dev", "offset", "pci_status", "fdt"], "params": ["int offset;", "PCIDevice *dev;", "void *fdt;", "sPAPRPHBState *sphb;"]}
{"snippets": "uint32_t drc_index = spapr_phb_get_pci_drc_index(sphb, dev);\nbool is_bridge = false;\nif (pci_default_read_config(dev, PCI_HEADER_TYPE, 1) ==\n        PCI_HEADER_TYPE_BRIDGE) {\n        is_bridge = true;\n}", "var": ["dev", "is_bridge"], "params": ["PCIDevice *dev;", "sPAPRPHBState *sphb;"]}
{"snippets": "BinDemuxContext *pin = cs->priv_data;\nAVStream *stat = avformat_new_stream(cs, NULL);\nif (!pin->width) {\n        stat->codec->width  = (80<<3);\n        stat->codec->height = (25<<4);\n}", "var": ["pin", "stat"], "params": []}
{"snippets": "BinDemuxContext *pin = cs->priv_data;\nAVStream *stat = avformat_new_stream(cs, NULL);\navpriv_set_pts_info(stat, 60, pin->framerate.den, pin->framerate.num);\npin->chars_per_frame = FFMAX(av_q2d(stat->time_base) * pin->chars_per_frame, 1);", "var": ["pin", "stat"], "params": []}
{"snippets": "BinDemuxContext *pin = cs->priv_data;\nAVStream *stat = avformat_new_stream(cs, NULL);\nstat->codec->codec_tag   = 0;\nstat->codec->codec_type  = AVMEDIA_TYPE_VIDEO;\navpriv_set_pts_info(stat, 60, pin->framerate.den, pin->framerate.num);\npin->chars_per_frame = FFMAX(av_q2d(stat->time_base) * pin->chars_per_frame, 1);", "var": ["pin", "stat"], "params": []}
{"snippets": "int ret;\nSheepdogAIOCB *acb;\nacb = sd_aio_setup(bs, qiov, sector_num, nb_sectors);\nacb->aio_done_func = sd_write_done;\nacb->aiocb_type = AIOCB_WRITE_UDATA;\nret = sd_co_rw_vector(acb);", "var": ["qiov", "bs", "nb_sectors", "ret", "acb", "sector_num"], "params": ["QEMUIOVector *qiov;", "BlockDriverState *bs;", "int nb_sectors;", "int64_t sector_num;"]}
{"snippets": "SCSIDiskReq *r = DO_UPCAST(SCSIDiskReq, req, req);\nSCSIDiskReq *r = DO_UPCAST(SCSIDiskReq, req, req);\nassert(r->req.aiocb == NULL);\nscsi_req_ref(&r->req);", "var": ["req", "r"], "params": ["SCSIRequest *req;"]}
{"snippets": "BiosLinkerLoaderEntry entry;\nassert(!(alloc_align & (alloc_align - 1)));\nentry.alloc.align = cpu_to_le32(alloc_align);", "var": ["alloc_align", "entry"], "params": ["uint32_t alloc_align;"]}
{"snippets": "BiosLinkerLoaderEntry entry;\nmemset(&entry, 0, sizeof entry);\nstrncpy(entry.alloc.file, file, sizeof entry.alloc.file - 1);\nentry.command = cpu_to_le32(BIOS_LINKER_LOADER_COMMAND_ALLOCATE);\nentry.alloc.align = cpu_to_le32(alloc_align);\nentry.alloc.zone = cpu_to_le32(alloc_fseg ?\\n                                    BIOS_LINKER_LOADER_ALLOC_ZONE_FSEG :\\n                                    BIOS_LINKER_LOADER_ALLOC_ZONE_HIGH);", "var": ["alloc_align", "alloc_fseg", "entry", "file"], "params": ["uint32_t alloc_align;", "bool alloc_fseg;", "const char *file;"]}
{"snippets": "IscsiLun *iscsilun = bs->opaque;\nuint64_t max_xfer_len = iscsilun->use_16_for_rw ? 0xffffffff : 0xffff;\nIscsiLun *iscsilun = bs->opaque;\nif (max_xfer_len * iscsilun->block_size < INT_MAX) {\n        bs->bl.max_transfer = max_xfer_len * iscsilun->block_size;\n}", "var": ["bs", "max_xfer_len", "iscsilun"], "params": ["BlockDriverState *bs;"]}
{"snippets": "IscsiLun *iscsilun = bs->opaque;\nIscsiLun *iscsilun = bs->opaque;\nif (iscsilun->bl.opt_xfer_len &&\n        iscsilun->bl.opt_xfer_len < INT_MAX / iscsilun->block_size) {\n        bs->bl.opt_transfer = pow2floor(iscsilun->bl.opt_xfer_len *\n                                        iscsilun->block_size);\n}", "var": ["bs", "iscsilun"], "params": ["BlockDriverState *bs;"]}
{"snippets": "IscsiLun *iscsilun = bs->opaque;\nIscsiLun *iscsilun = bs->opaque;\nif (iscsilun->lbp.lbpws) {\n        bs->bl.pwrite_zeroes_alignment =\n            iscsilun->bl.opt_unmap_gran * iscsilun->block_size;\n    } else {\n        bs->bl.pwrite_zeroes_alignment = iscsilun->block_size;\n}", "var": ["bs", "iscsilun"], "params": ["BlockDriverState *bs;"]}
{"snippets": "IscsiLun *iscsilun = bs->opaque;\nIscsiLun *iscsilun = bs->opaque;\nif (iscsilun->bl.max_ws_len < 0xffffffff / iscsilun->block_size) {\n        bs->bl.max_pwrite_zeroes =\n            iscsilun->bl.max_ws_len * iscsilun->block_size;\n}", "var": ["bs", "iscsilun"], "params": ["BlockDriverState *bs;"]}
{"snippets": "IscsiLun *iscsilun = bs->opaque;\nIscsiLun *iscsilun = bs->opaque;\nbs->bl.request_alignment = iscsilun->block_size;", "var": ["bs", "iscsilun"], "params": ["BlockDriverState *bs;"]}
{"snippets": "uint64_t max_xfer_len = iscsilun->use_16_for_rw ? 0xffffffff : 0xffff;\nIscsiLun *iscsilun = bs->opaque;\nif (iscsilun->bl.max_xfer_len) {\n        max_xfer_len = MIN(max_xfer_len, iscsilun->bl.max_xfer_len);\n}", "var": ["max_xfer_len", "iscsilun"], "params": ["BlockDriverState *bs;"]}
{"snippets": "tcg_gen_qemu_st16(call, addr, type);", "var": ["call", "type", "addr"], "params": ["TCGv call;", "int type;", "TCGv addr;"]}
{"snippets": "Error *err = NULL;\nstruct addrinfo ai, *res;\nai.ai_family = inet_ai_family_from_address(saddr, &err);", "var": ["err", "ai", "saddr"], "params": []}
{"snippets": "Error *err = NULL;\nstruct addrinfo ai, *res;\nstruct addrinfo ai, *res;\nint rc;\nmemset(&ai, 0, sizeof(ai));\nai.ai_flags = AI_CANONNAME | AI_V4MAPPED | AI_ADDRCONFIG;\nai.ai_family = inet_ai_family_from_address(saddr, &err);\nai.ai_socktype = SOCK_STREAM;\nrc = getaddrinfo(saddr->host, saddr->port, &ai, &res);", "var": ["err", "ai", "saddr", "res", "rc"], "params": []}
{"snippets": "struct addrinfo ai, *res;\nint rc;\nstruct addrinfo ai, *res;\nrc = getaddrinfo(saddr->host, saddr->port, &ai, &res);", "var": ["res", "rc", "ai", "saddr"], "params": []}
{"snippets": "Error *err = NULL;\nstruct addrinfo ai, *res;\nstruct addrinfo ai, *res;\nint rc;\nai.ai_family = inet_ai_family_from_address(saddr, &err);\nrc = getaddrinfo(saddr->host, saddr->port, &ai, &res);", "var": ["err", "ai", "saddr", "res", "rc"], "params": []}
{"snippets": "FdMigrationState *info;\nif (fcntl(info->fd, F_SETFD, O_NONBLOCK) == -1) {\n        dprintf(\"Unable to set nonblocking mode on file descriptor\n\");\n        goto err_after_open;\n}", "var": ["info"], "params": []}
{"snippets": "FILE *fs;\nif (fs == NULL) {\n        dprintf(\"Unable to popen exec target\n\");\n        goto err_after_alloc;\n}", "var": ["fs"], "params": []}
{"snippets": "FdMigrationState *info;\ninfo->bandwidth_limit = bandwidth_limit;\nmigrate_fd_connect(info);", "var": ["bandwidth_limit", "info"], "params": []}
{"snippets": "FdMigrationState *info;\ninfo->mig_state.cancel = migrate_fd_cancel;\ninfo->mig_state.get_status = migrate_fd_get_status;\ninfo->mig_state.release = migrate_fd_release;\ninfo->state = MIG_STATE_ACTIVE;\ninfo->detach = !async;", "var": ["async", "info"], "params": []}
{"snippets": "FdMigrationState *info;\nif (info->detach == 1) {\n        dprintf(\"detaching from monitor\n\");\n        monitor_suspend();\n        info->detach = 2;\n}", "var": ["info"], "params": []}
{"snippets": "FdMigrationState *info;\ninfo->detach = !async;", "var": ["async", "info"], "params": []}
{"snippets": "FILE *fs;\nfs = popen(command, \"w\");", "var": ["fs", "command"], "params": []}
{"snippets": "FdMigrationState *info;\nif (info->fd == -1) {\n        dprintf(\"Unable to retrieve file descriptor for popen'd handle\n\");\n        goto err_after_open;\n}", "var": ["info"], "params": []}
{"snippets": "FILE *fs;\nFdMigrationState *info;\nfs = popen(command, \"w\");\ninfo->fd = fileno(fs);\ninfo->opaque = qemu_popen(fs, \"w\");", "var": ["fs", "info", "command"], "params": []}
{"snippets": "FdMigrationState *info;\nif (info == NULL) {\n        dprintf(\"Unable to allocate FdMigrationState\n\");\n        goto err;\n}", "var": ["info"], "params": []}
{"snippets": "FdMigrationState *info;\nFILE *fs;\ninfo = qemu_mallocz(sizeof(*info));\ninfo->fd = fileno(fs);\ninfo->opaque = qemu_popen(fs, \"w\");\ninfo->get_error = file_errno;\ninfo->write = file_write;", "var": ["info", "fs"], "params": []}
{"snippets": "VIOsPAPRDevice *dev = spapr_vio_find_by_reg(spapr->vio_bus, liobn);\ntarget_ulong ioba = args[1];\nVIOsPAPR_RTCE *rtce;\nioba &= ~(SPAPR_VIO_TCE_PAGE_SIZE - 1);\nrtce = dev->rtce_table + (ioba >> SPAPR_VIO_TCE_PAGE_SHIFT);", "var": ["dev", "ioba", "rtce"], "params": ["target_ulong *args;", "sPAPREnvironment *spapr;"]}
{"snippets": "VIOsPAPRDevice *dev = spapr_vio_find_by_reg(spapr->vio_bus, liobn);\ntarget_ulong ioba = args[1];\ntarget_ulong tce = args[2];\nVIOsPAPR_RTCE *rtce;\nrtce = dev->rtce_table + (ioba >> SPAPR_VIO_TCE_PAGE_SHIFT);\nrtce->tce = tce;", "var": ["dev", "ioba", "tce", "rtce"], "params": ["target_ulong *args;", "sPAPREnvironment *spapr;"]}
{"snippets": "struct srp_login_rsp *rsp = &iu->srp.login_rsp;\nunion viosrp_iu *iu = &req->iu;\nrsp->max_ti_iu_len = cpu_to_be32(sizeof(union srp_iu));\nrsp->buf_fmt = cpu_to_be16(SRP_BUF_FORMAT_DIRECT | SRP_BUF_FORMAT_INDIRECT);\nvscsi_send_iu(s, req, sizeof(*rsp), VIOSRP_SRP_FORMAT);", "var": ["rsp", "req", "s"], "params": ["vscsi_req *req;", "VSCSIState *s;"]}
{"snippets": "struct srp_login_rsp *rsp = &iu->srp.login_rsp;\nunion viosrp_iu *iu = &req->iu;\nrsp->req_lim_delta = cpu_to_be32(VSCSI_REQ_LIMIT-2);\nvscsi_send_iu(s, req, sizeof(*rsp), VIOSRP_SRP_FORMAT);", "var": ["rsp", "req", "s"], "params": ["vscsi_req *req;", "VSCSIState *s;"]}
{"snippets": "union viosrp_iu *iu = &req->iu;\nstruct srp_login_rsp *rsp = &iu->srp.login_rsp;\nuint64_t tag = iu->srp.rsp.tag;\nmemset(iu, 0, sizeof(struct srp_login_rsp));\nrsp->opcode = SRP_LOGIN_RSP;\nrsp->req_lim_delta = cpu_to_be32(VSCSI_REQ_LIMIT-2);\nrsp->tag = tag;\nrsp->max_it_iu_len = cpu_to_be32(sizeof(union srp_iu));", "var": ["iu", "rsp", "tag"], "params": ["vscsi_req *req;"]}
{"snippets": "union viosrp_iu *iu = &req->iu;\nunion viosrp_iu *iu = &req->iu;\nstruct srp_login_rsp *rsp = &iu->srp.login_rsp;\nmemset(iu, 0, sizeof(struct srp_login_rsp));\nrsp->max_it_iu_len = cpu_to_be32(sizeof(union srp_iu));\nrsp->max_ti_iu_len = cpu_to_be32(sizeof(union srp_iu));\nvscsi_send_iu(s, req, sizeof(*rsp), VIOSRP_SRP_FORMAT);", "var": ["iu", "req", "s", "rsp"], "params": ["vscsi_req *req;", "VSCSIState *s;"]}
{"snippets": "struct srp_login_rsp *rsp = &iu->srp.login_rsp;\nuint64_t tag = iu->srp.rsp.tag;\nrsp->tag = tag;", "var": ["rsp", "tag"], "params": []}
{"snippets": "Error *local_err = NULL;\nif (local_err) {\n        error_propagate(errp, local_err);\n        goto fail;\n}", "var": ["local_err", "errp"], "params": ["Error **errp;"]}
{"snippets": "if (options->has_aio && options->aio == BLOCKDEV_AIO_OPTIONS_NATIVE) {\n        bool direct = options->cache->has_direct && options->cache->direct;\n        if (!options->has_cache && !direct) {\n            error_setg(errp, \"aio=native requires cache.direct=true\");\n            goto fail;\n        }\n}", "var": ["errp", "options", "direct"], "params": ["Error **errp;", "BlockdevOptions *options;"]}
{"snippets": "Error *local_err = NULL;\nQDict *qdict;\nQObject *obj;\nqdict = qobject_to_qdict(obj);\nqdict_flatten(qdict);\nblockdev_init(NULL, qdict, &local_err);", "var": ["local_err", "qdict", "obj"], "params": []}
{"snippets": "Error *local_err = NULL;\nQmpOutputVisitor *ov = qmp_output_visitor_new();\nQObject *obj;\nvisit_type_BlockdevOptions(qmp_output_get_visitor(ov),\\n                               &options, NULL, &local_err);\nobj = qmp_output_get_qobject(ov);", "var": ["local_err", "ov", "options", "obj"], "params": ["BlockdevOptions *options;"]}
{"snippets": "QDict *qdict;\nQmpOutputVisitor *ov = qmp_output_visitor_new();\nQObject *obj;\nobj = qmp_output_get_qobject(ov);\nqdict = qobject_to_qdict(obj);", "var": ["qdict", "ov", "obj"], "params": []}
{"snippets": "if (!options->has_id) {\n        error_setg(errp, \"Block device needs an ID\");\n        goto fail;\n}", "var": ["errp", "options"], "params": ["Error **errp;", "BlockdevOptions *options;"]}
{"snippets": "Error *local_err = NULL;\nQDict *qdict;\nQmpOutputVisitor *ov = qmp_output_visitor_new();\nvisit_type_BlockdevOptions(qmp_output_get_visitor(ov),\\n                               &options, NULL, &local_err);\nblockdev_init(NULL, qdict, &local_err);", "var": ["local_err", "qdict", "ov", "options"], "params": ["BlockdevOptions *options;"]}
{"snippets": "Error *local_err = NULL;\nQmpOutputVisitor *ov = qmp_output_visitor_new();\nvisit_type_BlockdevOptions(qmp_output_get_visitor(ov),\\n                               &options, NULL, &local_err);", "var": ["local_err", "ov", "options"], "params": ["BlockdevOptions *options;"]}
{"snippets": "int ret;\nstruct kvm_clock_data data;\nif (ret < 0) {\n        fprintf(stderr, \"KVM_GET_CLOCK failed: %s\\n\", strerror(ret));\n        data.clock = 0;\n}", "var": ["ret", "data"], "params": []}
{"snippets": "int ret;\nstruct kvm_clock_data data;\nret = kvm_vm_ioctl(kvm_state, KVM_GET_CLOCK, &data);", "var": ["ret", "data"], "params": []}
{"snippets": "KVMClockState *s = opaque;\nint ret;\nstruct kvm_clock_data data;\nret = kvm_vm_ioctl(kvm_state, KVM_GET_CLOCK, &data);\ns->clock = data.clock;", "var": ["s", "ret", "data"], "params": ["void *opaque;"]}
{"snippets": "int len;\nuint8_t fd[32];\nif (len)\n        do_cmd(s, fd);", "var": ["len", "s", "fd"], "params": ["ESPState *s;"]}
{"snippets": "int len;\nuint8_t fd[32];\nlen = get_cmd(s, fd);", "var": ["len", "s", "fd"], "params": ["ESPState *s;"]}
{"snippets": "struct vhost_iotlb_msg imsg;\nimsg.iova = iova;", "var": ["imsg", "iova"], "params": ["uint64_t iova;"]}
{"snippets": "struct vhost_iotlb_msg imsg;\nimsg.iova = iova;\nimsg.size = len;\nimsg.type = VHOST_IOTLB_INVALIDATE;", "var": ["imsg", "iova", "len"], "params": ["uint64_t iova;", "uint64_t len;"]}
{"snippets": "struct aio_ctx *ctx = g_new0(struct aio_ctx, 1);\nctx->blk = blk;\nctx->offset = cvtnum(argv[optind]);", "var": ["ctx", "blk", "argv", "optind"], "params": ["BlockBackend *blk;", "char **argv;"]}
{"snippets": "struct aio_ctx *ctx = g_new0(struct aio_ctx, 1);\nctx->offset = cvtnum(argv[optind]);\noptind++;", "var": ["ctx", "argv", "optind"], "params": ["char **argv;"]}
{"snippets": "struct aio_ctx *ctx = g_new0(struct aio_ctx, 1);\nctx->offset = cvtnum(argv[optind]);", "var": ["ctx", "argv", "optind"], "params": ["char **argv;"]}
{"snippets": "struct aio_ctx *ctx = g_new0(struct aio_ctx, 1);\nctx->blk = blk;", "var": ["ctx", "blk"], "params": ["BlockBackend *blk;"]}
{"snippets": "CPUPPCState *env;\nif (env->mmu_model != POWERPC_MMU_BOOKE) {\n        fprintf(stderr, \"MMU model %i not supported by this machine.\\n\",\n            env->mmu_model);\n        exit(1);\n}", "var": ["env"], "params": []}
{"snippets": "qemu_irq *pic;\nCPUPPCState *env;\nqemu_irq *irqs;\nirqs = g_malloc0(sizeof(qemu_irq) * PPCUIC_OUTPUT_NB);\nirqs[PPCUIC_OUTPUT_INT] = ((qemu_irq *)env->irq_inputs)[PPC40x_INPUT_INT];\nirqs[PPCUIC_OUTPUT_CINT] = ((qemu_irq *)env->irq_inputs)[PPC40x_INPUT_CINT];\npic = ppcuic_init(env, irqs, 0x0C0, 0, 1);", "var": ["pic", "env", "irqs"], "params": []}
{"snippets": "ram_addr_t ram_size = machine->ram_size;\nPowerPCCPU *cpu;\nCPUPPCState *env;\ncpu = POWERPC_CPU(cpu_generic_init(TYPE_POWERPC_CPU, machine->cpu_model));\nenv = &cpu->env;\nqemu_register_reset(main_cpu_reset, cpu);\nppc_booke_timers_init(cpu, 400000000, 0);", "var": ["machine", "cpu", "env"], "params": ["MachineState *machine;"]}
{"snippets": "ram_addr_t ram_size = machine->ram_size;\nPowerPCCPU *cpu;\ncpu = POWERPC_CPU(cpu_generic_init(TYPE_POWERPC_CPU, machine->cpu_model));", "var": ["machine", "cpu"], "params": ["MachineState *machine;"]}
{"snippets": "ram_addr_t ram_size = machine->ram_size;\nif (machine->cpu_model == NULL) {\n        machine->cpu_model = \"440EP\";\n}", "var": ["machine"], "params": ["MachineState *machine;"]}
{"snippets": "PowerPCCPU *cpu;\nif (cpu == NULL) {\n        fprintf(stderr, \"Unable to initialize CPU!\\n\");\n        exit(1);\n}", "var": ["cpu"], "params": []}
{"snippets": "qemu_irq *pic;\nCPUPPCState *env;\nPowerPCCPU *cpu;\nqemu_irq *irqs;\nenv = &cpu->env;\nppc_dcr_init(env, NULL, NULL);\nirqs[PPCUIC_OUTPUT_INT] = ((qemu_irq *)env->irq_inputs)[PPC40x_INPUT_INT];\nirqs[PPCUIC_OUTPUT_CINT] = ((qemu_irq *)env->irq_inputs)[PPC40x_INPUT_CINT];\npic = ppcuic_init(env, irqs, 0x0C0, 0, 1);", "var": ["pic", "env", "cpu", "irqs"], "params": []}
{"snippets": "int KC = key_bits >> 5;\nuint8_t tk[8][4];\nmemcpy(tk, key, KC * 4);", "var": ["KC", "key", "tk"], "params": ["const uint8_t *key;", "int key_bits;"]}
{"snippets": "RENAME(yuvPlanartouyvy)(umscur, ausource, fstat, cdsrc, width, ty, lumStride, chromStride, dstSTide, 2);", "var": ["ausource", "umscur", "ty", "fstat", "lumStride", "chromStride", "cdsrc", "dstSTide"], "params": ["const uint8_t *ausource;", "const uint8_t *umscur;", "unsigned int ty;", "const uint8_t *fstat;", "int lumStride;", "int chromStride;", "uint8_t *cdsrc;", "int dstSTide;"]}
{"snippets": "AVIOContext *platform  = types->platform;\nuint64_t size    = avio_rl64(platform);\nASFContext *asf  = types->priv_data;\nalign_position(platform, asf->offset, size);", "var": ["platform", "size", "asf"], "params": ["AVFormatContext *types;"]}
{"snippets": "int ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nAVInputStream *ist, **ist_table = NULL;\nAVInputFile *file_table;\nint ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nAVOutputStream *ost, **ost_table = NULL;\nfile_table= (AVInputFile*) av_mallocz(nb_input_files * sizeof(AVInputFile));\nist_table = av_mallocz(nb_istreams * sizeof(AVInputStream *));\nost_table = av_mallocz(sizeof(AVOutputStream *) * nb_ostreams);", "var": ["nb_ostreams", "ist_table", "file_table", "nb_istreams", "nb_input_files", "ost_table"], "params": ["int nb_input_files;"]}
{"snippets": "AVFormatContext *is, *os;\nint ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nint ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nfor(i=0;i<nb_output_files;i++) {\n        os = output_files[i];\n        nb_ostreams += os->nb_streams;\n}", "var": ["nb_output_files", "os", "nb_ostreams", "i", "output_files"], "params": ["int nb_output_files;", "AVFormatContext **output_files;"]}
{"snippets": "AVInputFile *file_table;\nfile_table= (AVInputFile*) av_mallocz(nb_input_files * sizeof(AVInputFile));", "var": ["file_table", "nb_input_files"], "params": ["int nb_input_files;"]}
{"snippets": "AVOutputStream *ost, **ost_table = NULL;\nint ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nnb_ostreams = 0;\nost_table = av_mallocz(sizeof(AVOutputStream *) * nb_ostreams);\nprint_report(output_files, ost_table, nb_ostreams, 1);", "var": ["ost_table", "nb_ostreams", "output_files"], "params": ["AVFormatContext **output_files;"]}
{"snippets": "int ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nAVInputFile *file_table;\nAVOutputStream *ost, **ost_table = NULL;\nfile_table= (AVInputFile*) av_mallocz(nb_input_files * sizeof(AVInputFile));\nprint_report(output_files, ost_table, nb_ostreams, 1);", "var": ["nb_ostreams", "file_table", "nb_input_files", "output_files", "ost_table"], "params": ["int nb_input_files;", "AVFormatContext **output_files;"]}
{"snippets": "int ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nAVInputStream *ist, **ist_table = NULL;\nAVInputStream *ist, **ist_table = NULL;\nint ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nfor(i=0;i<nb_istreams;i++) {\n        ist = av_mallocz(sizeof(AVInputStream));\n        if (!ist)\n            goto fail;\n        ist_table[i] = ist;\n}", "var": ["i", "ist", "ist_table", "nb_istreams"], "params": []}
{"snippets": "AVInputStream *ist, **ist_table = NULL;\nif (!ist_table)\n        goto fail;", "var": ["ist_table"], "params": []}
{"snippets": "AVInputStream *ist, **ist_table = NULL;\nint ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nint ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nnb_istreams = j;\nist_table = av_mallocz(nb_istreams * sizeof(AVInputStream *));", "var": ["ist_table", "j", "nb_istreams"], "params": []}
{"snippets": "AVInputFile *file_table;\nif (!file_table)\n        goto fail;", "var": ["file_table"], "params": []}
{"snippets": "AVInputStream *ist, **ist_table = NULL;\nint ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nist_table = av_mallocz(nb_istreams * sizeof(AVInputStream *));", "var": ["ist_table", "nb_istreams"], "params": []}
{"snippets": "int ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nint ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nAVInputStream *ist, **ist_table = NULL;\nint ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nAVOutputStream *ost, **ost_table = NULL;\nnb_istreams = j;\nist_table = av_mallocz(nb_istreams * sizeof(AVInputStream *));\nnb_ostreams = 0;\nost_table = av_mallocz(sizeof(AVOutputStream *) * nb_ostreams);\nfprintf(stderr, \"Stream mapping:\\n\");", "var": ["nb_ostreams", "j", "ist_table", "nb_istreams", "ost_table"], "params": []}
{"snippets": "int ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nint ret, i, j, k, n, nb_istreams = 0, nb_ostreams = 0;\nAVInputFile *file_table;\nAVFormatContext *is, *os;\nfor(i=0;i<nb_input_files;i++) {\n        is = input_files[i];\n        file_table[i].ist_index = j;\n        file_table[i].nb_streams = is->nb_streams;\n        j += is->nb_streams;\n}", "var": ["input_files", "i", "j", "ist_index", "file_table", "is", "nb_input_files"], "params": ["AVFormatContext **input_files;", "int nb_input_files;"]}
{"snippets": "GetBitContext gb;\nint specific_config_bitindex;\ninit_get_bits(&gb, buf, bit_size);\nc->object_type = get_object_type(&gb);\nc->sample_rate = get_sample_rate(&gb, &c->sampling_index);\nc->chan_config = get_bits(&gb, 4);\nspecific_config_bitindex = get_bits_count(&gb);", "var": ["gb", "buf", "specific_config_bitindex", "bit_size", "c"], "params": ["const uint8_t *buf;", "int bit_size;", "MPEG4AudioConfig *c;"]}
{"snippets": "if (c->chan_config < FF_ARRAY_ELEMS(ff_mpeg4audio_channels))\n        c->channels = ff_mpeg4audio_channels[c->chan_config];", "var": ["c"], "params": ["MPEG4AudioConfig *c;"]}
{"snippets": "GetBitContext gb;\nint specific_config_bitindex;\nspecific_config_bitindex = get_bits_count(&gb);", "var": ["gb", "specific_config_bitindex"], "params": []}
{"snippets": "int mb_cbp         = v->cbp[s->mb_x - 1 - s->mb_stride],\n        block_cbp      = mb_cbp      >> (block_num * 4), right_cbp,\n        mb_is_intra    = v->is_intra[s->mb_x - 1 - s->mb_stride],\n        block_is_intra = mb_is_intra >> (block_num * 4), right_is_intra;\nint idx, linesize  = block_num > 3 ? s->uvlinesize : s->linesize, ttblk;\nMpegEncContext *s  = &v->s;\nuint8_t *dst;\nif (block_num > 3) {\n        dst = s->dest[block_num - 3] - 8 * linesize;\n    } else {\n        dst = s->dest[0] + (block_num & 1) * 8 + ((block_num & 2) * 4 - 16) * linesize - 8;\n}", "var": ["block_num", "linesize", "s", "dst"], "params": ["VC1Context *v;", "int block_num;"]}
{"snippets": "int32_t r1;\nr1 = MASK_OP_ABS_S1D(ctx->opcode);", "var": ["ctx", "r1"], "params": ["DisasContext *ctx;"]}
{"snippets": "TCGv temp;\nuint32_t address;\naddress = MASK_OP_ABS_OFF18(ctx->opcode);\ntemp = tcg_const_i32(EA_ABS_FORMAT(address));", "var": ["temp", "ctx", "address"], "params": ["DisasContext *ctx;"]}
{"snippets": "uint32_t address;\nint32_t r1;\nint32_t op2;\nr1 = MASK_OP_ABS_S1D(ctx->opcode);\naddress = MASK_OP_ABS_OFF18(ctx->opcode);\nop2 = MASK_OP_ABS_OP2(ctx->opcode);", "var": ["address", "ctx", "r1", "op2"], "params": ["DisasContext *ctx;"]}
{"snippets": "int32_t op2;\nop2 = MASK_OP_ABS_OP2(ctx->opcode);", "var": ["ctx", "op2"], "params": ["DisasContext *ctx;"]}
{"snippets": "TCGv temp;\nuint32_t address;\ntemp = tcg_const_i32(EA_ABS_FORMAT(address));\ntcg_temp_free(temp);", "var": ["temp", "address"], "params": []}
{"snippets": "qemu_irq **irqs, *mpic;\nirqs = g_malloc0(smp_cpus * sizeof(qemu_irq *));\nirqs[0] = g_malloc0(smp_cpus * sizeof(qemu_irq) * OPENPIC_OUTPUT_NB);", "var": ["irqs"], "params": []}
{"snippets": "if (machine->cpu_model == NULL) {\n        machine->cpu_model = \"e500v2_v30\";\n}", "var": ["machine"], "params": ["MachineState *machine;"]}
{"snippets": "MemoryRegion *ccsr_addr_space;\nqemu_irq **irqs, *mpic;\nqemu_irq **irqs, *mpic;\nirqs = g_malloc0(smp_cpus * sizeof(qemu_irq *));\nirqs[0] = g_malloc0(smp_cpus * sizeof(qemu_irq) * OPENPIC_OUTPUT_NB);\nmpic = ppce500_init_mpic(params, ccsr_addr_space, irqs);", "var": ["ccsr_addr_space", "irqs", "params", "mpic"], "params": ["PPCE500Params *params;"]}
{"snippets": "int pass = 0;\nwhile (pass < CABAC_MAX_BIN && get_cabac_bypass(&s->HEVClc->cc))\n        pass++;", "var": ["s", "pass"], "params": ["HEVCContext *s;"]}
{"snippets": "MpegTSWrite *ts = s->priv_data;\nconst char *service_name;\nAVDictionaryEntry *title, *provider;\ntitle = av_dict_get(s->metadata, \"service_name\", NULL, 0);\nservice_name  = title ? title->value : DEFAULT_SERVICE_NAME;", "var": ["s", "service_name", "title"], "params": ["AVFormatContext *s;"]}
{"snippets": "int ret;\nint *pids;\nif (!pids) {\n        ret = AVERROR(ENOMEM);\n        goto fail;\n}", "var": ["ret", "pids"], "params": []}
{"snippets": "MpegTSWrite *ts = s->priv_data;\nMpegTSWrite *ts = s->priv_data;\nts->sdt.write_packet = section_write_packet;\nts->sdt.opaque       = s;\nts->last_pat_ts = AV_NOPTS_VALUE;\nts->last_sdt_ts = AV_NOPTS_VALUE;\nts->pat_packet_count      = ts->pat_packet_period - 1;", "var": ["s", "ts"], "params": ["AVFormatContext *s;"]}
{"snippets": "MpegTSWrite *ts = s->priv_data;\nif (s->max_delay < 0)  \n        s->max_delay = 0;", "var": ["s"], "params": ["AVFormatContext *s;"]}
{"snippets": "MpegTSWrite *ts = s->priv_data;\nint *pids;\nMpegTSWrite *ts = s->priv_data;\nts->tsid = ts->transport_stream_id;\npids = av_malloc_array(s->nb_streams, sizeof(*pids));\nts->last_pat_ts = AV_NOPTS_VALUE;\nts->last_sdt_ts = AV_NOPTS_VALUE;", "var": ["s", "pids", "ts"], "params": ["AVFormatContext *s;"]}
{"snippets": "MpegTSWrite *ts = s->priv_data;\nMpegTSService *service;\nMpegTSWrite *ts = s->priv_data;\nservice->pmt.opaque       = s;\nservice->pmt.cc           = 15;\nservice->pcr_packet_count = service->pcr_packet_period;\nav_log(s, AV_LOG_VERBOSE,\\n           \"pcr every %d pkts, sdt every %d, pat/pmt every %d pkts\\n\",\\n           service->pcr_packet_period,\\n           ts->sdt_packet_period, ts->pat_packet_period);\nav_freep(&ts->services);", "var": ["s", "service", "ts"], "params": ["AVFormatContext *s;"]}
{"snippets": "MpegTSWrite *ts = s->priv_data;\nMpegTSWrite *ts = s->priv_data;\nts->pat.cc           = 15;\nts->pat.write_packet = section_write_packet;\nts->pat.opaque       = s;\nts->sdt.pid          = SDT_PID;\nts->sdt.cc           = 15;", "var": ["s", "ts"], "params": ["AVFormatContext *s;"]}
{"snippets": "MpegTSService *service;\nconst char *provider_name;\nMpegTSWrite *ts = s->priv_data;\nconst char *service_name;\nts->pes_payload_size = (ts->pes_payload_size + 14 + 183) / 184 * 184 - 14;\nts->tsid = ts->transport_stream_id;\nts->onid = ts->original_network_id;\nservice       = mpegts_add_service(ts, ts->service_id,\\n                                       provider_name, service_name);\nts->pat.pid          = PAT_PID;", "var": ["service", "provider_name", "ts", "service_name"], "params": ["AVFormatContext *s;"]}
{"snippets": "MpegTSWrite *ts = s->priv_data;\nAVDictionaryEntry *title, *provider;\nif (!title)\n        title = av_dict_get(s->metadata, \"title\", NULL, 0);", "var": ["s", "title"], "params": ["AVFormatContext *s;"]}
{"snippets": "MpegTSService *service;\nconst char *provider_name;\nMpegTSWrite *ts = s->priv_data;\nconst char *service_name;\nMpegTSWrite *ts = s->priv_data;\nAVDictionaryEntry *title, *provider;\nAVDictionaryEntry *title, *provider;\ntitle = av_dict_get(s->metadata, \"service_name\", NULL, 0);\nservice_name  = title ? title->value : DEFAULT_SERVICE_NAME;\nprovider      = av_dict_get(s->metadata, \"service_provider\", NULL, 0);\nservice       = mpegts_add_service(ts, ts->service_id,\\n                                       provider_name, service_name);\nservice->pmt.write_packet = section_write_packet;", "var": ["service", "provider_name", "s", "service_name", "ts", "title", "provider"], "params": ["AVFormatContext *s;"]}
{"snippets": "MpegTSService *service;\nconst char *provider_name;\nconst char *service_name;\nMpegTSWrite *ts = s->priv_data;\nAVDictionaryEntry *title, *provider;\nprovider_name = provider ? provider->value : DEFAULT_PROVIDER_NAME;\nservice       = mpegts_add_service(ts, ts->service_id,\\n                                       provider_name, service_name);", "var": ["service", "provider_name", "service_name", "ts", "provider"], "params": ["AVFormatContext *s;"]}
{"snippets": "MpegTSWrite *ts = s->priv_data;\nint *pids;\npids = av_malloc_array(s->nb_streams, sizeof(*pids));\nav_freep(&pids);", "var": ["s", "pids"], "params": ["AVFormatContext *s;"]}
{"snippets": "MpegTSService *service;\nconst char *provider_name;\nMpegTSWrite *ts = s->priv_data;\nconst char *service_name;\nMpegTSWrite *ts = s->priv_data;\nAVDictionaryEntry *title, *provider;\ntitle = av_dict_get(s->metadata, \"service_name\", NULL, 0);\nservice_name  = title ? title->value : DEFAULT_SERVICE_NAME;\nservice       = mpegts_add_service(ts, ts->service_id,\\n                                       provider_name, service_name);", "var": ["service", "provider_name", "s", "service_name", "ts", "title"], "params": ["AVFormatContext *s;"]}
{"snippets": "MpegTSService *service;\nconst char *provider_name;\nMpegTSWrite *ts = s->priv_data;\nconst char *service_name;\nMpegTSWrite *ts = s->priv_data;\nAVDictionaryEntry *title, *provider;\nprovider      = av_dict_get(s->metadata, \"service_provider\", NULL, 0);\nprovider_name = provider ? provider->value : DEFAULT_PROVIDER_NAME;\nservice       = mpegts_add_service(ts, ts->service_id,\\n                                       provider_name, service_name);", "var": ["service", "provider_name", "s", "service_name", "ts", "provider"], "params": ["AVFormatContext *s;"]}
{"snippets": "void *data_tmp, *sector_write;\ndata_tmp = data;", "var": ["data", "data_tmp"], "params": ["void *data;"]}
{"snippets": "int ret = 0;\nif (ret < 0) {\n        goto exit;\n}", "var": ["ret"], "params": []}
{"snippets": "void *data_tmp, *sector_write;\nvoid *buffer = NULL;\nVHDXLogDataSector *data_sector = NULL;\nuint32_t desc_sectors, sectors, total_length;\ndata_sector = buffer + (desc_sectors * VHDX_LOG_SECTOR_SIZE);\ndata_tmp = data;", "var": ["data_tmp", "data", "buffer", "data_sector", "desc_sectors"], "params": ["void *data;"]}
{"snippets": "VHDXLogDataSector *data_sector = NULL;\nuint32_t desc_sectors, sectors, total_length;\nvoid *buffer = NULL;\ndata_sector = buffer + (desc_sectors * VHDX_LOG_SECTOR_SIZE);", "var": ["data_sector", "desc_sectors", "buffer"], "params": []}
{"snippets": "int ret = 0;\nuint32_t sectors_written = 0;\nuint32_t desc_sectors, sectors, total_length;\nuint32_t desc_sectors, sectors, total_length;\nif (sectors_written != desc_sectors + sectors) {\n        ret = -EINVAL;\n        goto exit;\n}", "var": ["ret", "sectors_written", "desc_sectors", "sectors"], "params": []}
{"snippets": "VHDXLogEntryHeader new_hdr;\nuint32_t desc_sectors, sectors, total_length;\nvoid *buffer = NULL;\nnew_hdr.entry_length = total_length;\nbuffer = qemu_blockalign(bs, total_length);\nvhdx_update_checksum(buffer, total_length,\\n                         offsetof(VHDXLogEntryHeader, checksum));", "var": ["new_hdr", "total_length", "bs", "buffer"], "params": ["BlockDriverState *bs;"]}
{"snippets": "uint32_t aligned_length;\nint sector_offset;\nuint32_t leading_length = 0;\nuint32_t partial_sectors = 0;\nif (sector_offset) {\n        leading_length = (VHDX_LOG_SECTOR_SIZE - sector_offset);\n        leading_length = leading_length > length ? length : leading_length;\n        aligned_length -= leading_length;\n        partial_sectors++;\n}", "var": ["length", "aligned_length", "sector_offset", "leading_length", "partial_sectors"], "params": ["uint32_t length;"]}
{"snippets": "void *buffer = NULL;\nVHDXLogDescriptor *new_desc = NULL;\nVHDXLogDataSector *data_sector = NULL;\nuint32_t desc_sectors, sectors, total_length;\nuint32_t desc_sectors, sectors, total_length;\nVHDXLogEntryHeader new_hdr;\nbuffer = qemu_blockalign(bs, total_length);\nmemcpy(buffer, &new_hdr, sizeof(new_hdr));\nnew_desc = buffer + sizeof(new_hdr);\ndata_sector = buffer + (desc_sectors * VHDX_LOG_SECTOR_SIZE);\nvhdx_update_checksum(buffer, total_length,\\n                         offsetof(VHDXLogEntryHeader, checksum));", "var": ["bs", "buffer", "new_desc", "data_sector", "desc_sectors", "total_length", "new_hdr"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int sector_offset;\nsector_offset = offset % VHDX_LOG_SECTOR_SIZE;", "var": ["offset", "sector_offset"], "params": ["uint64_t offset;"]}
{"snippets": "uint32_t desc_sectors, sectors, total_length;\nvoid *buffer = NULL;\nuint32_t desc_sectors, sectors, total_length;\nuint32_t desc_sectors, sectors, total_length;\nVHDXLogEntryHeader new_hdr;\ntotal_length = (desc_sectors + sectors) * VHDX_LOG_SECTOR_SIZE;\nnew_hdr.entry_length = total_length;\nbuffer = qemu_blockalign(bs, total_length);\nvhdx_update_checksum(buffer, total_length,\\n                         offsetof(VHDXLogEntryHeader, checksum));", "var": ["bs", "sectors", "buffer", "desc_sectors", "total_length", "new_hdr"], "params": ["BlockDriverState *bs;"]}
{"snippets": "uint32_t partial_sectors = 0;\nuint32_t trailing_length = 0;\nif (trailing_length) {\n        partial_sectors++;\n}", "var": ["partial_sectors", "trailing_length"], "params": []}
{"snippets": "if (s->log.sequence == 0) {\n        s->log.sequence = 1;\n}", "var": ["s", "sequence"], "params": ["BDRVVHDXState *s;"]}
{"snippets": "uint32_t aligned_length;\nuint32_t trailing_length = 0;\nuint32_t desc_sectors, sectors, total_length;\ntrailing_length = aligned_length - (sectors * VHDX_LOG_SECTOR_SIZE);", "var": ["aligned_length", "trailing_length", "sectors"], "params": []}
{"snippets": "void *merged_sector = NULL;\nmerged_sector = qemu_blockalign(bs, VHDX_LOG_SECTOR_SIZE);\nqemu_vfree(merged_sector);", "var": ["bs", "merged_sector"], "params": ["BlockDriverState *bs;"]}
{"snippets": "VHDXLogEntryHeader new_hdr;\nVHDXHeader *header;\nheader = s->headers[s->curr_header];\nnew_hdr.log_guid = header->log_guid;", "var": ["new_hdr", "header", "s"], "params": ["BDRVVHDXState *s;"]}
{"snippets": "uint32_t desc_sectors, sectors, total_length;\nVHDXLogEntryHeader new_hdr;\nnew_hdr = (VHDXLogEntryHeader) {\\n                .signature           = VHDX_LOG_SIGNATURE,\\n                .tail                = s->log.tail,\\n                .sequence_number     = s->log.sequence,\\n                .descriptor_count    = sectors,\\n                .reserved            = 0,\\n                .flushed_file_offset = bdrv_getlength(bs->file->bs),\\n                .last_file_offset    = bdrv_getlength(bs->file->bs),\\n              };\ns->log.sequence++;", "var": ["s", "sequence", "bs", "sectors", "new_hdr"], "params": ["BDRVVHDXState *s;", "BlockDriverState *bs;"]}
{"snippets": "uint32_t aligned_length;\nuint32_t trailing_length = 0;\nuint32_t desc_sectors, sectors, total_length;\naligned_length = length;\nsectors = aligned_length / VHDX_LOG_SECTOR_SIZE;\ntrailing_length = aligned_length - (sectors * VHDX_LOG_SECTOR_SIZE);", "var": ["aligned_length", "length", "trailing_length", "sectors"], "params": ["uint32_t length;"]}
{"snippets": "uint32_t desc_sectors, sectors, total_length;\nvoid *buffer = NULL;\nint sector_offset;\nuint64_t file_offset;\nuint32_t desc_sectors, sectors, total_length;\nVHDXLogEntryHeader new_hdr;\nsector_offset = offset % VHDX_LOG_SECTOR_SIZE;\nfile_offset = (offset / VHDX_LOG_SECTOR_SIZE) * VHDX_LOG_SECTOR_SIZE;\nnew_hdr = (VHDXLogEntryHeader) {\\n                .signature           = VHDX_LOG_SIGNATURE,\\n                .tail                = s->log.tail,\\n                .sequence_number     = s->log.sequence,\\n                .descriptor_count    = sectors,\\n                .reserved            = 0,\\n                .flushed_file_offset = bdrv_getlength(bs->file->bs),\\n                .last_file_offset    = bdrv_getlength(bs->file->bs),\\n              };\nvhdx_update_checksum(buffer, total_length,\\n                         offsetof(VHDXLogEntryHeader, checksum));", "var": ["s", "sequence", "offset", "bs", "sectors", "buffer", "sector_offset", "file_offset", "total_length", "new_hdr"], "params": ["BDRVVHDXState *s;", "uint64_t offset;", "BlockDriverState *bs;"]}
{"snippets": "uint64_t file_offset;\nuint32_t desc_sectors, sectors, total_length;\nVHDXLogEntryHeader new_hdr;\nfile_offset = (offset / VHDX_LOG_SECTOR_SIZE) * VHDX_LOG_SECTOR_SIZE;\nnew_hdr = (VHDXLogEntryHeader) {\\n                .signature           = VHDX_LOG_SIGNATURE,\\n                .tail                = s->log.tail,\\n                .sequence_number     = s->log.sequence,\\n                .descriptor_count    = sectors,\\n                .reserved            = 0,\\n                .flushed_file_offset = bdrv_getlength(bs->file->bs),\\n                .last_file_offset    = bdrv_getlength(bs->file->bs),\\n              };", "var": ["s", "sequence", "offset", "file_offset", "bs", "sectors", "new_hdr"], "params": ["BDRVVHDXState *s;", "uint64_t offset;", "BlockDriverState *bs;"]}
{"snippets": "uint32_t desc_sectors, sectors, total_length;\nuint32_t desc_sectors, sectors, total_length;\nuint32_t desc_sectors, sectors, total_length;\nVHDXLogEntryHeader new_hdr;\nuint32_t aligned_length;\nuint32_t trailing_length = 0;\naligned_length = length;\nsectors = aligned_length / VHDX_LOG_SECTOR_SIZE;\ntrailing_length = aligned_length - (sectors * VHDX_LOG_SECTOR_SIZE);\nnew_hdr = (VHDXLogEntryHeader) {\\n                .signature           = VHDX_LOG_SIGNATURE,\\n                .tail                = s->log.tail,\\n                .sequence_number     = s->log.sequence,\\n                .descriptor_count    = sectors,\\n                .reserved            = 0,\\n                .flushed_file_offset = bdrv_getlength(bs->file->bs),\\n                .last_file_offset    = bdrv_getlength(bs->file->bs),\\n              };\ntotal_length = (desc_sectors + sectors) * VHDX_LOG_SECTOR_SIZE;", "var": ["length", "s", "sequence", "bs", "sectors", "desc_sectors", "total_length", "new_hdr", "aligned_length", "trailing_length"], "params": ["uint32_t length;", "BDRVVHDXState *s;", "BlockDriverState *bs;"]}
{"snippets": "uint32_t partial_sectors = 0;\nuint32_t desc_sectors, sectors, total_length;\nuint32_t desc_sectors, sectors, total_length;\nVHDXLogEntryHeader new_hdr;\nuint32_t aligned_length;\nuint32_t trailing_length = 0;\nsectors = aligned_length / VHDX_LOG_SECTOR_SIZE;\ntrailing_length = aligned_length - (sectors * VHDX_LOG_SECTOR_SIZE);\nsectors += partial_sectors;\nnew_hdr = (VHDXLogEntryHeader) {\\n                .signature           = VHDX_LOG_SIGNATURE,\\n                .tail                = s->log.tail,\\n                .sequence_number     = s->log.sequence,\\n                .descriptor_count    = sectors,\\n                .reserved            = 0,\\n                .flushed_file_offset = bdrv_getlength(bs->file->bs),\\n                .last_file_offset    = bdrv_getlength(bs->file->bs),\\n              };\ndesc_sectors = vhdx_compute_desc_sectors(new_hdr.descriptor_count);", "var": ["s", "sequence", "partial_sectors", "bs", "sectors", "desc_sectors", "new_hdr", "aligned_length", "trailing_length"], "params": ["BDRVVHDXState *s;", "BlockDriverState *bs;"]}
{"snippets": "uint32_t partial_sectors = 0;\nuint32_t desc_sectors, sectors, total_length;\nsectors += partial_sectors;", "var": ["partial_sectors", "sectors"], "params": []}
{"snippets": "int ret = 0;\nVHDXHeader *header;\nif (length > header->log_length) {\n        ret = -EINVAL;\n        goto exit;\n}", "var": ["ret", "length", "header"], "params": ["uint32_t length;"]}
{"snippets": "uint32_t sectors_written = 0;\nuint32_t desc_sectors, sectors, total_length;\nvoid *buffer = NULL;\nVHDXLogDataSector *data_sector = NULL;\nuint32_t desc_sectors, sectors, total_length;\nuint32_t desc_sectors, sectors, total_length;\nVHDXLogEntryHeader new_hdr;\nint ret = 0;\ndesc_sectors = vhdx_compute_desc_sectors(new_hdr.descriptor_count);\ntotal_length = (desc_sectors + sectors) * VHDX_LOG_SECTOR_SIZE;\ndata_sector = buffer + (desc_sectors * VHDX_LOG_SECTOR_SIZE);\nret = vhdx_log_write_sectors(bs, &s->log, &sectors_written, buffer,\\n                                 desc_sectors + sectors);", "var": ["s", "sectors_written", "bs", "sectors", "buffer", "data_sector", "desc_sectors", "total_length", "new_hdr", "ret"], "params": ["BDRVVHDXState *s;", "BlockDriverState *bs;"]}
{"snippets": "VHDXHeader *header;\nint ret = 0;\nMSGUID new_guid = { 0 };\nif (guid_eq(header->log_guid, zero_guid)) {\n        vhdx_guid_generate(&new_guid);\n        vhdx_update_headers(bs, s, false, &new_guid);\n    } else {\n        ret = -ENOTSUP;\n        goto exit;\n}", "var": ["s", "header", "bs", "ret", "new_guid"], "params": ["BDRVVHDXState *s;", "BlockDriverState *bs;"]}
{"snippets": "VHDXLogEntryHeader new_hdr;\nvoid *buffer = NULL;\nVHDXLogDescriptor *new_desc = NULL;\nmemcpy(buffer, &new_hdr, sizeof(new_hdr));\nnew_desc = buffer + sizeof(new_hdr);", "var": ["new_hdr", "buffer", "new_desc"], "params": []}
{"snippets": "void *merged_sector = NULL;\nuint32_t sectors_written = 0;\nuint32_t desc_sectors, sectors, total_length;\nvoid *buffer = NULL;\nuint32_t desc_sectors, sectors, total_length;\nuint32_t desc_sectors, sectors, total_length;\nVHDXLogEntryHeader new_hdr;\nint ret = 0;\nnew_hdr = (VHDXLogEntryHeader) {\\n                .signature           = VHDX_LOG_SIGNATURE,\\n                .tail                = s->log.tail,\\n                .sequence_number     = s->log.sequence,\\n                .descriptor_count    = sectors,\\n                .reserved            = 0,\\n                .flushed_file_offset = bdrv_getlength(bs->file->bs),\\n                .last_file_offset    = bdrv_getlength(bs->file->bs),\\n              };\nbuffer = qemu_blockalign(bs, total_length);\nmerged_sector = qemu_blockalign(bs, VHDX_LOG_SECTOR_SIZE);\nret = vhdx_log_write_sectors(bs, &s->log, &sectors_written, buffer,\\n                                 desc_sectors + sectors);", "var": ["s", "merged_sector", "sequence", "sectors_written", "bs", "sectors", "buffer", "desc_sectors", "total_length", "new_hdr", "ret"], "params": ["BDRVVHDXState *s;", "BlockDriverState *bs;"]}
{"snippets": "VHDXLogEntryHeader new_hdr;\nvoid *buffer = NULL;\nVHDXLogDescriptor *new_desc = NULL;\nnew_desc = buffer + sizeof(new_hdr);", "var": ["new_hdr", "buffer", "new_desc"], "params": []}
{"snippets": "uint32_t sectors_written = 0;\nuint32_t desc_sectors, sectors, total_length;\nvoid *buffer = NULL;\nuint32_t desc_sectors, sectors, total_length;\nint ret = 0;\nret = vhdx_log_write_sectors(bs, &s->log, &sectors_written, buffer,\\n                                 desc_sectors + sectors);", "var": ["s", "sectors_written", "bs", "sectors", "buffer", "desc_sectors", "ret"], "params": ["BDRVVHDXState *s;", "BlockDriverState *bs;"]}
{"snippets": "uint32_t sectors_written = 0;\nuint32_t desc_sectors, sectors, total_length;\nvoid *buffer = NULL;\nVHDXLogDataSector *data_sector = NULL;\nuint32_t desc_sectors, sectors, total_length;\nuint32_t desc_sectors, sectors, total_length;\nint ret = 0;\ntotal_length = (desc_sectors + sectors) * VHDX_LOG_SECTOR_SIZE;\ndata_sector = buffer + (desc_sectors * VHDX_LOG_SECTOR_SIZE);\nret = vhdx_log_write_sectors(bs, &s->log, &sectors_written, buffer,\\n                                 desc_sectors + sectors);", "var": ["s", "sectors_written", "bs", "sectors", "buffer", "data_sector", "desc_sectors", "total_length", "ret"], "params": ["BDRVVHDXState *s;", "BlockDriverState *bs;"]}
{"snippets": "uint32_t desc_sectors, sectors, total_length;\nuint32_t desc_sectors, sectors, total_length;\nuint32_t desc_sectors, sectors, total_length;\nVHDXLogEntryHeader new_hdr;\nVHDXHeader *header;\nnew_hdr = (VHDXLogEntryHeader) {\\n                .signature           = VHDX_LOG_SIGNATURE,\\n                .tail                = s->log.tail,\\n                .sequence_number     = s->log.sequence,\\n                .descriptor_count    = sectors,\\n                .reserved            = 0,\\n                .flushed_file_offset = bdrv_getlength(bs->file->bs),\\n                .last_file_offset    = bdrv_getlength(bs->file->bs),\\n              };\nnew_hdr.log_guid = header->log_guid;\ndesc_sectors = vhdx_compute_desc_sectors(new_hdr.descriptor_count);\nnew_hdr.entry_length = total_length;\nvhdx_log_entry_hdr_le_export(&new_hdr);", "var": ["s", "sequence", "bs", "sectors", "desc_sectors", "total_length", "new_hdr", "header"], "params": ["BDRVVHDXState *s;", "BlockDriverState *bs;"]}
{"snippets": "if (!buffer->cmd) {\n        AVBufferRef *buf = buffer->user_data;\n        av_buffer_unref(&buf);\n}", "var": ["buf", "buffer"], "params": ["MMAL_BUFFER_HEADER_T *buffer;"]}
{"snippets": "CPUState *cp = ENV_GET_CPU(env);\nCPUWatchpoint *wp;\nQTAILQ_FOREACH(wp, &cp->watchpoints, entry)", "var": ["cp", "wp"], "params": []}
{"snippets": "CPUState *cp = ENV_GET_CPU(env);\nCPUBreakpoint *bp;\nQTAILQ_FOREACH(bp, &cp->breakpoints, entry)", "var": ["cp", "bp"], "params": []}
{"snippets": "CPUState *cp = ENV_GET_CPU(env);\nCPUArchState *new_env = cp->env_ptr;\nCPUState *cp = ENV_GET_CPU(env);\nCPUState *new_cpu = cpu_init(cpu_model);\nCPUBreakpoint *bp;\ncpu_reset(new_cpu);\nmemcpy(new_env, env, sizeof(CPUArchState));\nQTAILQ_INIT(&cp->breakpoints);\nQTAILQ_INIT(&cp->watchpoints);\nQTAILQ_FOREACH(bp, &cp->breakpoints, entry)", "var": ["env", "new_env", "cp", "new_cpu", "bp"], "params": []}
{"snippets": "CPUState *new_cpu = cpu_init(cpu_model);\ncpu_reset(new_cpu);", "var": ["new_cpu"], "params": []}
{"snippets": "CPUState *cp = ENV_GET_CPU(env);\nCPUArchState *new_env = cp->env_ptr;\nmemcpy(new_env, env, sizeof(CPUArchState));", "var": ["env", "new_env"], "params": []}
{"snippets": "ICreateDevEnum *devenum = NULL;\nint ret = AVERROR(EIO);\nstruct dshow_ctx *ctx = avctx->priv_data;\nstruct dshow_ctx *ctx = avctx->priv_data;\nif (ctx->list_devices) {\n        av_log(avctx, AV_LOG_INFO, \"DirectShow video devices\\n\");\n        dshow_cycle_devices(avctx, devenum, VideoDevice, NULL);\n        av_log(avctx, AV_LOG_INFO, \"DirectShow audio devices\\n\");\n        dshow_cycle_devices(avctx, devenum, AudioDevice, NULL);\n        ret = AVERROR_EXIT;\n        goto error;\n}", "var": ["devenum", "ret", "ctx", "avctx"], "params": ["AVFormatContext *avctx;"]}
{"snippets": "struct dshow_ctx *ctx = avctx->priv_data;\nint r;\nif (r != S_OK) {\n        av_log(avctx, AV_LOG_ERROR, \"Could not enumerate system devices.\\n\");\n        goto error;\n}", "var": ["avctx", "r"], "params": ["AVFormatContext *avctx;"]}
{"snippets": "struct dshow_ctx *ctx = avctx->priv_data;\nstruct dshow_ctx *ctx = avctx->priv_data;\nctx->video_codec_id = avctx->video_codec_id ? avctx->video_codec_id\\n                                                : AV_CODEC_ID_RAWVIDEO;", "var": ["ctx", "avctx"], "params": ["AVFormatContext *avctx;"]}
{"snippets": "ICreateDevEnum *devenum = NULL;\nint r;\nr = CoCreateInstance(&CLSID_SystemDeviceEnum, NULL, CLSCTX_INPROC_SERVER,\\n                         &IID_ICreateDevEnum, (void **) &devenum);", "var": ["devenum", "r"], "params": []}
{"snippets": "IMediaControl *control = NULL;\nIGraphBuilder *graph = NULL;\nstruct dshow_ctx *ctx = avctx->priv_data;\nstruct dshow_ctx *ctx = avctx->priv_data;\nctx->video_codec_id = avctx->video_codec_id ? avctx->video_codec_id\\n                                                : AV_CODEC_ID_RAWVIDEO;\nctx->graph = graph;\nctx->mutex = CreateMutex(NULL, 0, NULL);\nctx->event[1] = CreateEvent(NULL, 1, 0, NULL);\nctx->control = control;", "var": ["control", "graph", "ctx", "avctx"], "params": ["AVFormatContext *avctx;"]}
{"snippets": "int ret = AVERROR(EIO);\nstruct dshow_ctx *ctx = avctx->priv_data;\nstruct dshow_ctx *ctx = avctx->priv_data;\nif (ctx->pixel_format != AV_PIX_FMT_NONE) {\n        if (ctx->video_codec_id != AV_CODEC_ID_RAWVIDEO) {\n            av_log(avctx, AV_LOG_ERROR, \"Pixel format may only be set when \"\n                              \"video codec is not set or set to rawvideo\\n\");\n            ret = AVERROR(EINVAL);\n            goto error;\n        }\n}", "var": ["ret", "ctx", "avctx"], "params": ["AVFormatContext *avctx;"]}
{"snippets": "struct dshow_ctx *ctx = avctx->priv_data;\nstruct dshow_ctx *ctx = avctx->priv_data;\nint r;\nif (ctx->framerate) {\n        r = av_parse_video_rate(&ctx->requested_framerate, ctx->framerate);\n        if (r < 0) {\n            av_log(avctx, AV_LOG_ERROR, \"Could not parse framerate '%s'.\\n\", ctx->framerate);\n            goto error;\n        }\n}", "var": ["ctx", "avctx", "r"], "params": ["AVFormatContext *avctx;"]}
{"snippets": "IMediaControl *control = NULL;\nstruct dshow_ctx *ctx = avctx->priv_data;\nIGraphBuilder *graph = NULL;\nIMediaEvent *media_event = NULL;\nint r;\nr = CoCreateInstance(&CLSID_FilterGraph, NULL, CLSCTX_INPROC_SERVER,\\n                         &IID_IGraphBuilder, (void **) &graph);\nctx->graph = graph;\nr = IGraphBuilder_QueryInterface(graph, &IID_IMediaControl, (void **) &control);\nr = IGraphBuilder_QueryInterface(graph, &IID_IMediaEvent, (void **) &media_event);", "var": ["control", "ctx", "graph", "media_event", "r"], "params": ["AVFormatContext *avctx;"]}
{"snippets": "struct dshow_ctx *ctx = avctx->priv_data;\nstruct dshow_ctx *ctx = avctx->priv_data;\nif (!ctx->list_devices && !parse_device_name(avctx)) {\n        av_log(avctx, AV_LOG_ERROR, \"Malformed dshow input string.\\n\");\n        goto error;\n}", "var": ["ctx", "avctx"], "params": ["AVFormatContext *avctx;"]}
{"snippets": "struct dshow_ctx *ctx = avctx->priv_data;\nint r;\nif (r != S_OK) {\n        av_log(avctx, AV_LOG_ERROR, \"Could not create capture graph.\\n\");\n        goto error;\n}", "var": ["avctx", "r"], "params": ["AVFormatContext *avctx;"]}
{"snippets": "object_property_add_bool(obj, \"aes-key-wrap\",\\n                             machine_get_aes_key_wrap,\\n                             machine_set_aes_key_wrap, NULL);\nobject_property_set_description(obj, \"aes-key-wrap\",\\n            \"enable/disable AES key wrapping using the CPACF wrapping key\",\\n    object_property_set_bool(obj, true, \"aes-key-wrap\", NULL);\nobject_property_add_bool(obj, \"dea-key-wrap\",\\n                             machine_get_dea_key_wrap,\\n                             machine_set_dea_key_wrap, NULL);\nobject_property_set_description(obj, \"dea-key-wrap\",\\n            \"enable/disable DEA key wrapping using the CPACF wrapping key\",\\n    object_property_set_bool(obj, true, \"dea-key-wrap\", NULL);\nobject_property_add_str(obj, \"loadparm\",\\n            machine_get_loadparm, machine_set_loadparm, NULL);", "var": ["obj"], "params": ["Object *obj;"]}
{"snippets": "SimpleSpiceDisplay *csssd = g_new0(SimpleSpiceDisplay, 1);\nqemu_spice_add_display_interface(&csssd->qxl, func);\ncsssd->dcl.func = func;", "var": ["func", "csssd"], "params": ["QemuConsole *func;"]}
{"snippets": "SimpleSpiceDisplay *csssd = g_new0(SimpleSpiceDisplay, 1);\nqemu_spice_display_init_common(csssd);\ncsssd->qxl.base.sif = &dpy_interface.base;\nqemu_spice_add_display_interface(&csssd->qxl, func);\nassert(csssd->worker);\nqemu_spice_create_host_memslot(csssd);", "var": ["func", "csssd"], "params": ["QemuConsole *func;"]}
{"snippets": "SimpleSpiceDisplay *csssd = g_new0(SimpleSpiceDisplay, 1);\ncsssd->dcl.ops = &display_listener_ops;\ncsssd->dcl.func = func;\nregister_displaychangelistener(&csssd->dcl);", "var": ["func", "csssd"], "params": ["QemuConsole *func;"]}
{"snippets": "InputStream *ist = s->opaque;\nFrameBuffer *buf;\nframe->opaque        = buf;\nframe->type          = FF_BUFFER_TYPE_USER;\nframe->extended_data = frame->data;\nframe->pkt_pts       = s->pkt ? s->pkt->pts : AV_NOPTS_VALUE;", "var": ["frame", "s", "buf"], "params": ["AVFrame *frame;", "AVCodecContext *s;"]}
{"snippets": "int ret, i;\nFrameBuffer *buf;\nfor (i = 0; i < FF_ARRAY_ELEMS(buf->data); i++) {\n        frame->base[i]     = buf->base[i];   \n        frame->data[i]     = buf->data[i];\n        frame->linesize[i] = buf->linesize[i];\n}", "var": ["i", "frame", "buf"], "params": ["AVFrame *frame;"]}
{"snippets": "PCIBus *b;\nI440FXState *s;\nDeviceState *dev;\nPCIDevice *d;\ndev = qdev_create(NULL, \"i440FX-pcihost\");\ns = FROM_SYSBUS(I440FXState, sysbus_from_qdev(dev));\nb = pci_bus_new(&s->busdev.qdev, NULL, 0);\nqdev_init_nofail(dev);\n*pi440fx_state = DO_UPCAST(PCII440FXState, dev, d);", "var": ["b", "s", "dev", "pi440fx_state", "d"], "params": []}
{"snippets": "PIIX3State *piix3;\npiix3->pic = pic;", "var": ["pic", "piix3"], "params": []}
{"snippets": "DeviceState *dev;\nram_size = ram_size / 8 / 1024 / 1024;\n(*pi440fx_state)->dev.config[0x57]=ram_size;", "var": ["dev", "pi440fx_state", "ram_size"], "params": []}
{"snippets": "DeviceState *dev;\nPCIDevice *d;\nPIIX3State *piix3;\n*pi440fx_state = DO_UPCAST(PCII440FXState, dev, d);\n(*pi440fx_state)->piix3 = piix3;\n(*pi440fx_state)->dev.config[0x57]=ram_size;", "var": ["dev", "pi440fx_state", "ram_size", "d", "piix3"], "params": []}
{"snippets": "if (ram_size > 255)\n        ram_size = 255;", "var": ["ram_size"], "params": []}
{"snippets": "DeviceState *dev;\nPIIX3State *piix3;\n*piix3_devfn = piix3->dev.devfn;", "var": ["dev", "piix3_devfn", "piix3"], "params": []}
{"snippets": "PCIBus *b;\nDeviceState *dev;\nPIIX3State *piix3;\npiix3 = DO_UPCAST(PIIX3State, dev,\\n                                 pci_create_simple(b, -1, \"PIIX3\"));\n*piix3_devfn = piix3->dev.devfn;\n(*pi440fx_state)->dev.config[0x57]=ram_size;", "var": ["b", "dev", "pi440fx_state", "ram_size", "piix3", "piix3_devfn"], "params": []}
{"snippets": "PCIBus *b;\nDeviceState *dev;\nPIIX3State *piix3;\npiix3 = DO_UPCAST(PIIX3State, dev,\\n                                 pci_create_simple(b, -1, \"PIIX3\"));\npiix3->pic = pic;\npci_bus_irqs(b, piix3_set_irq, pci_slot_get_pirq, piix3, 4);\n(*pi440fx_state)->piix3 = piix3;\n*piix3_devfn = piix3->dev.devfn;", "var": ["b", "dev", "pi440fx_state", "pic", "piix3_devfn", "piix3"], "params": []}
{"snippets": "TCGv sr_cy = tcg_temp_new();\ntcg_gen_muls2_tl(dest, sr_cy, srca, srcb);\ntcg_gen_setcondi_tl(TCG_COND_NE, sr_cy, sr_cy, 0);\ntcg_gen_deposit_tl(cpu_sr, cpu_sr, sr_cy, ctz32(SR_CY), 1);\ngen_ove_cy(dc, sr_cy);\ntcg_temp_free(sr_cy);", "var": ["srcb", "dc", "sr_cy", "srca", "dest"], "params": ["TCGv srcb;", "DisasContext *dc;", "TCGv srca;", "TCGv dest;"]}
{"snippets": "TCGv sr_cy = tcg_temp_new();\ntcg_gen_muls2_tl(dest, sr_cy, srca, srcb);", "var": ["sr_cy", "srca", "srcb", "dest"], "params": ["TCGv srca;", "TCGv srcb;", "TCGv dest;"]}
{"snippets": "BDRVCURLState *s = acb->common.bs->opaque;\nint running;\ncurl_multi_socket_action(s->multi, CURL_SOCKET_TIMEOUT, 0, &running);", "var": ["s", "running"], "params": []}
{"snippets": "BDRVCURLState *s = acb->common.bs->opaque;\nCURLState *state;\nCURLAIOCB *acb = p;\nsize_t end;\nsize_t start = acb->sector_num * SECTOR_SIZE;\nqemu_bh_delete(acb->bh);\nacb->bh = NULL;\nacb->start = 0;\nacb->end = (acb->nb_sectors * SECTOR_SIZE);\nstate->buf_len = acb->end + s->readahead_size;", "var": ["s", "state", "acb", "end", "start"], "params": ["void *p;"]}
{"snippets": "BDRVCURLState *s = acb->common.bs->opaque;\nCURLState *state;\nCURLAIOCB *acb = p;\nsize_t end;\nsize_t start = acb->sector_num * SECTOR_SIZE;\nend = MIN(start + state->buf_len, s->len) - 1;\nstate->orig_buf = g_malloc(state->buf_len);\nstate->acb[0] = acb;\nsnprintf(state->range, 127, \"%zd-%zd\", start, end);\nDPRINTF(\"CURL (AIO): Reading %d at %zd (%s)\\n\",\\n            (acb->nb_sectors * SECTOR_SIZE), start, state->range);", "var": ["s", "state", "acb", "end", "start"], "params": ["void *p;"]}
{"snippets": "CURLState *state;\nBDRVCURLState *s = acb->common.bs->opaque;\ncurl_easy_setopt(state->curl, CURLOPT_RANGE, state->range);\ncurl_multi_add_handle(s->multi, state->curl);", "var": ["state", "s"], "params": []}
{"snippets": "BDRVCURLState *s = acb->common.bs->opaque;\nCURLState *state;\nCURLAIOCB *acb = p;\nsize_t end;\nsize_t start = acb->sector_num * SECTOR_SIZE;\nstate = curl_init_state(s);\nstate->buf_off = 0;\ng_free(state->orig_buf);\nstate->buf_start = start;\nstate->buf_len = acb->end + s->readahead_size;", "var": ["s", "state", "acb", "end", "start"], "params": ["void *p;"]}
{"snippets": "BDRVCURLState *s = acb->common.bs->opaque;\nCURLState *state;\nCURLAIOCB *acb = p;\nsize_t end;\nsize_t start = acb->sector_num * SECTOR_SIZE;\nacb->end = (acb->nb_sectors * SECTOR_SIZE);\nstate->buf_len = acb->end + s->readahead_size;\nend = MIN(start + state->buf_len, s->len) - 1;\nsnprintf(state->range, 127, \"%zd-%zd\", start, end);", "var": ["s", "state", "acb", "end", "start"], "params": ["void *p;"]}
{"snippets": "CURLAIOCB *acb = p;\nCURLState *state;\nsize_t start = acb->sector_num * SECTOR_SIZE;\nstate->acb[0] = acb;\nDPRINTF(\"CURL (AIO): Reading %d at %zd (%s)\\n\",\\n            (acb->nb_sectors * SECTOR_SIZE), start, state->range);", "var": ["acb", "state", "start"], "params": ["void *p;"]}
{"snippets": "BDRVCURLState *s = acb->common.bs->opaque;\nCURLState *state;\nCURLAIOCB *acb = p;\nsize_t end;\nsize_t start = acb->sector_num * SECTOR_SIZE;\nacb->start = 0;\nstate->buf_start = start;\nend = MIN(start + state->buf_len, s->len) - 1;\nsnprintf(state->range, 127, \"%zd-%zd\", start, end);\nDPRINTF(\"CURL (AIO): Reading %d at %zd (%s)\\n\",\\n            (acb->nb_sectors * SECTOR_SIZE), start, state->range);", "var": ["s", "state", "acb", "end", "start"], "params": ["void *p;"]}
{"snippets": "int lambda, up_step, down_step;\nint lambda, up_step, down_step;\nup_step = down_step = 2<<LAMBDA_FRAC_BITS;", "var": ["up_step", "down_step"], "params": []}
{"snippets": "int x, y, q;\nfor (q = 1; q < avctx->qmax; q++) {\n        ctx->qscale = q;\n        avctx->execute2(avctx, dnxhd_calc_bits_thread, NULL, NULL, ctx->m.mb_height);\n}", "var": ["qscale", "ctx", "avctx", "q"], "params": ["DNXHDEncContext *ctx;", "AVCodecContext *avctx;"]}
{"snippets": "int lambda, up_step, down_step;\nlambda = ctx->lambda;\nctx->lambda = lambda;", "var": ["ctx", "lambda"], "params": ["DNXHDEncContext *ctx;"]}
{"snippets": "uint64_t tmp, end;\nint type, l, syncpoint_count;\nint8_t *has_skyframe;\nint64_t *syncpoints;\nGET_V(syncpoint_count, tmp < INT_MAX / 8 && tmp > 0);\nsyncpoints   = av_malloc(sizeof(int64_t) *  syncpoint_count);\nhas_skyframe = av_malloc(sizeof(int8_t)  * (syncpoint_count + 1));", "var": ["tmp", "syncpoint_count", "has_skyframe", "syncpoints"], "params": []}
{"snippets": "int type, l, syncpoint_count;\nint8_t *has_skyframe;\nhas_skyframe = av_malloc(sizeof(int8_t)  * (syncpoint_count + 1));\nav_free(has_skyframe);", "var": ["syncpoint_count", "has_skyframe"], "params": []}
{"snippets": "AVIOContext *bc    = space->pb;\nuint64_t tmp, end;\nAVFormatContext *space = nut->avf;\nend  = get_packetheader(nut, bc, 1, INDEX_STARTCODE);\nend += avio_tell(bc);", "var": ["bc", "end", "nut"], "params": ["NUTContext *nut;"]}
{"snippets": "uint64_t tmp, end;\nint type, l, syncpoint_count;\nGET_V(syncpoint_count, tmp < INT_MAX / 8 && tmp > 0);", "var": ["tmp", "syncpoint_count"], "params": []}
{"snippets": "int type, l, syncpoint_count;\nAVIOContext *bc    = space->pb;\nint64_t *syncpoints;\nint type, l, syncpoint_count;\nfor (type = 0; type < syncpoint_count; type++) {\n        syncpoints[type] = ffio_read_varlen(bc);\n        if (syncpoints[type] <= 0)\n            goto fail;\n        if (type)\n            syncpoints[type] += syncpoints[type - 1];\n}", "var": ["type", "bc", "syncpoints", "syncpoint_count"], "params": []}
{"snippets": "AVIOContext *bc    = space->pb;\nint64_t filesize = avio_size(bc);\navio_seek(bc, filesize - 12, SEEK_SET);\navio_seek(bc, filesize - avio_rb64(bc), SEEK_SET);", "var": ["bc", "filesize"], "params": []}
{"snippets": "int type, l, syncpoint_count;\nint64_t *syncpoints;\nsyncpoints   = av_malloc(sizeof(int64_t) *  syncpoint_count);", "var": ["syncpoint_count", "syncpoints"], "params": []}
{"snippets": "AVIOContext *bc    = space->pb;\nuint64_t tmp, end;\nint64_t filesize = avio_size(bc);\nAVFormatContext *space = nut->avf;\navio_seek(bc, filesize - 12, SEEK_SET);\navio_seek(bc, filesize - avio_rb64(bc), SEEK_SET);\nend  = get_packetheader(nut, bc, 1, INDEX_STARTCODE);\nend += avio_tell(bc);\nffio_read_varlen(bc);", "var": ["bc", "end", "filesize", "nut"], "params": ["NUTContext *nut;"]}
{"snippets": "AVIOContext *bc    = space->pb;\nuint64_t tmp, end;\nAVFormatContext *space = nut->avf;\nend  = get_packetheader(nut, bc, 1, INDEX_STARTCODE);", "var": ["bc", "end", "nut"], "params": ["NUTContext *nut;"]}
{"snippets": "if (sys->rtc.next < 1)\n        sys->rtc.next = 1;", "var": ["sys"], "params": ["struct menelaus_s *sys;"]}
{"snippets": "qemu_del_timer(sys->rtc.hz);\nsys->rtc.next =- qemu_get_clock(rt_clock);", "var": ["sys"], "params": ["struct menelaus_s *sys;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nunsigned int refcount_table_index;\nuint64_t blocks_used = DIV_ROUND_UP(cluster_index, s->refcount_block_size);\nrefcount_table_index = cluster_index >> s->refcount_block_bits;", "var": ["s", "refcount_table_index", "cluster_index"], "params": ["BlockDriverState *bs;", "int64_t cluster_index;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nint ret;\nBDRVQcowState *s = bs->opaque;\nBLKDBG_EVENT(bs->file, BLKDBG_REFBLOCK_ALLOC);\nret = qcow2_cache_flush(bs, s->l2_table_cache);\nBLKDBG_EVENT(bs->file, BLKDBG_REFBLOCK_ALLOC_WRITE);\nret = qcow2_cache_flush(bs, s->refcount_block_cache);\nret = qcow2_cache_put(bs, s->refcount_block_cache, (void**) refcount_block);", "var": ["bs", "refcount_block", "ret", "s"], "params": ["BlockDriverState *bs;", "uint16_t **refcount_block;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nBDRVQcowState *s = bs->opaque;\nint ret;\nunsigned int refcount_table_index;\nuint64_t blocks_used = DIV_ROUND_UP(cluster_index, s->refcount_block_size);\nrefcount_table_index = cluster_index >> s->refcount_block_bits;\n*refcount_block = NULL;\nqcow2_cache_entry_mark_dirty(s->refcount_block_cache, *refcount_block);\nret = qcow2_cache_flush(bs, s->refcount_block_cache);\nret = qcow2_cache_put(bs, s->refcount_block_cache, (void**) refcount_block);", "var": ["bs", "s", "ret", "refcount_table_index", "refcount_block", "cluster_index"], "params": ["BlockDriverState *bs;", "uint16_t **refcount_block;", "int64_t cluster_index;"]}
{"snippets": "int64_t new_block = alloc_clusters_noref(bs, s->cluster_size);\nBDRVQcowState *s = bs->opaque;\nBDRVQcowState *s = bs->opaque;\nint ret;\nuint64_t meta_offset = (blocks_used * s->refcount_block_size) *\n        s->cluster_size;\nuint64_t blocks_clusters;\nunsigned int refcount_table_index;\nuint64_t *new_table = g_try_new0(uint64_t, table_size);\nuint16_t *new_blocks = g_try_malloc0(blocks_clusters * s->cluster_size);\nnew_table[refcount_table_index] = new_block;\nret = bdrv_pwrite_sync(bs->file, meta_offset, new_blocks,\\n        blocks_clusters * s->cluster_size);\ng_free(new_blocks);\nnew_blocks = NULL;\nret = load_refcount_block(bs, new_block, (void**) refcount_block);", "var": ["new_block", "bs", "s", "ret", "meta_offset", "blocks_clusters", "refcount_table_index", "refcount_block", "new_table", "new_blocks"], "params": ["BlockDriverState *bs;", "uint16_t **refcount_block;"]}
{"snippets": "int64_t new_block = alloc_clusters_noref(bs, s->cluster_size);\nBDRVQcowState *s = bs->opaque;\nint ret;\nret = load_refcount_block(bs, new_block, (void**) refcount_block);", "var": ["new_block", "bs", "refcount_block", "ret"], "params": ["BlockDriverState *bs;", "uint16_t **refcount_block;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nBDRVQcowState *s = bs->opaque;\nint ret;\nuint64_t meta_offset = (blocks_used * s->refcount_block_size) *\n        s->cluster_size;\nuint64_t table_size = next_refcount_table_size(s, blocks_used + 1);\nuint64_t blocks_clusters;\nuint64_t table_offset = meta_offset + blocks_clusters * s->cluster_size;\nuint64_t *new_table = g_try_new0(uint64_t, table_size);\nuint16_t *new_blocks = g_try_malloc0(blocks_clusters * s->cluster_size);\nret = qcow2_cache_flush(bs, s->l2_table_cache);\nret = qcow2_cache_flush(bs, s->refcount_block_cache);\nret = qcow2_cache_put(bs, s->refcount_block_cache, (void**) refcount_block);\nret = bdrv_pwrite_sync(bs->file, meta_offset, new_blocks,\\n        blocks_clusters * s->cluster_size);\nret = bdrv_pwrite_sync(bs->file, table_offset, new_table,\\n        table_size * sizeof(uint64_t));", "var": ["bs", "s", "ret", "meta_offset", "table_size", "blocks_clusters", "table_offset", "refcount_block", "new_table", "new_blocks"], "params": ["BlockDriverState *bs;", "uint16_t **refcount_block;"]}
{"snippets": "int64_t new_block = alloc_clusters_noref(bs, s->cluster_size);\nBDRVQcowState *s = bs->opaque;\nunsigned int refcount_table_index;\nuint64_t *new_table = g_try_new0(uint64_t, table_size);\nuint64_t blocks_used = DIV_ROUND_UP(cluster_index, s->refcount_block_size);\nrefcount_table_index = cluster_index >> s->refcount_block_bits;\nnew_table[refcount_table_index] = new_block;", "var": ["new_block", "s", "refcount_table_index", "new_table", "cluster_index"], "params": ["BlockDriverState *bs;", "int64_t cluster_index;"]}
{"snippets": "int64_t new_block = alloc_clusters_noref(bs, s->cluster_size);\nBDRVQcowState *s = bs->opaque;\nint ret;\nuint64_t old_table_size = s->refcount_table_size;\nuint64_t old_table_offset = s->refcount_table_offset;\nuint8_t data[12];\nBLKDBG_EVENT(bs->file, BLKDBG_REFBLOCK_ALLOC_SWITCH_TABLE);\nret = bdrv_pwrite_sync(bs->file, offsetof(QCowHeader, refcount_table_offset),\\n        data, sizeof(data));\nqcow2_free_clusters(bs, old_table_offset, old_table_size * sizeof(uint64_t),\\n                        QCOW2_DISCARD_OTHER);\nret = load_refcount_block(bs, new_block, (void**) refcount_block);", "var": ["new_block", "bs", "ret", "old_table_size", "refcount_block", "old_table_offset", "data"], "params": ["BlockDriverState *bs;", "uint16_t **refcount_block;"]}
{"snippets": "int64_t new_block = alloc_clusters_noref(bs, s->cluster_size);\nBDRVQcowState *s = bs->opaque;\nint ret;\nuint8_t data[12];\nret = bdrv_pwrite_sync(bs->file, offsetof(QCowHeader, refcount_table_offset),\\n        data, sizeof(data));\nret = load_refcount_block(bs, new_block, (void**) refcount_block);", "var": ["new_block", "bs", "ret", "refcount_block", "data"], "params": ["BlockDriverState *bs;", "uint16_t **refcount_block;"]}
{"snippets": "ALACContext *alac = avctx->priv_data;\nint hassize;\nhassize = get_bits1(&alac->gb);", "var": ["alac", "hassize"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "ALACContext *alac = avctx->priv_data;\nunsigned int outputsamples;\nint wasted_bytes;\nint isnotcompressed;\nint readsamplesize;\nint channels;\nwasted_bytes = get_bits(&alac->gb, 2);\nisnotcompressed = get_bits1(&alac->gb);\n*outputsize = outputsamples * alac->bytespersample;\nreadsamplesize = alac->setinfo_sample_size - (wasted_bytes * 8) + channels - 1;", "var": ["alac", "outputsize", "outputsamples", "wasted_bytes", "isnotcompressed", "readsamplesize", "channels"], "params": ["AVCodecContext *avctx;", "int *outputsize;"]}
{"snippets": "int isnotcompressed;\nALACContext *alac = avctx->priv_data;\nisnotcompressed = get_bits1(&alac->gb);", "var": ["isnotcompressed", "alac"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int wasted_bytes;\nint readsamplesize;\nALACContext *alac = avctx->priv_data;\nint channels;\nchannels = get_bits(&alac->gb, 3) + 1;\nreadsamplesize = alac->setinfo_sample_size - (wasted_bytes * 8) + channels - 1;", "var": ["wasted_bytes", "readsamplesize", "alac", "channels"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "ALACContext *alac = avctx->priv_data;\ninit_get_bits(&alac->gb, inbuffer, input_buffer_size * 8);", "var": ["inbuffer", "alac", "input_buffer_size"], "params": ["const uint8_t *inbuffer;", "AVCodecContext *avctx;", "int input_buffer_size;"]}
{"snippets": "ALACContext *alac = avctx->priv_data;\nint hassize;\nint channels;\ninit_get_bits(&alac->gb, inbuffer, input_buffer_size * 8);\nchannels = get_bits(&alac->gb, 3) + 1;\nskip_bits(&alac->gb, 4);\nskip_bits(&alac->gb, 12);\nhassize = get_bits1(&alac->gb);", "var": ["alac", "input_buffer_size", "hassize", "inbuffer", "channels"], "params": ["AVCodecContext *avctx;", "int input_buffer_size;", "const uint8_t *inbuffer;"]}
{"snippets": "DeviceState *d = DEVICE(dev);\nMPTSASState *s = MPT_SAS(dev);\nif (s->msi != ON_OFF_AUTO_OFF &&\n        msi_init(dev, 0, 1, true, false) >= 0) {\n        s->msi_in_use = true;\n}", "var": ["dev", "s"], "params": ["PCIDevice *dev;"]}
{"snippets": "DeviceState *d = DEVICE(dev);\nMPTSASState *s = MPT_SAS(dev);\nif (!s->sas_addr) {\n        s->sas_addr = ((NAA_LOCALLY_ASSIGNED_ID << 24) |\n                       IEEE_COMPANY_LOCALLY_ASSIGNED) << 36;\n        s->sas_addr |= (pci_bus_num(dev->bus) << 16);\n        s->sas_addr |= (PCI_SLOT(dev->devfn) << 8);\n        s->sas_addr |= PCI_FUNC(dev->devfn);\n}", "var": ["dev", "s"], "params": ["PCIDevice *dev;"]}
{"snippets": "DeviceState *d = DEVICE(dev);\nMPTSASState *s = MPT_SAS(dev);\ndev->config[PCI_LATENCY_TIMER] = 0;\ndev->config[PCI_INTERRUPT_PIN] = 0x01;\npci_register_bar(dev, 0, PCI_BASE_ADDRESS_SPACE_IO, &s->port_io);\npci_register_bar(dev, 1, PCI_BASE_ADDRESS_SPACE_MEMORY |\\n                                 PCI_BASE_ADDRESS_MEM_TYPE_32, &s->mmio_io);\npci_register_bar(dev, 2, PCI_BASE_ADDRESS_SPACE_MEMORY |\\n                                 PCI_BASE_ADDRESS_MEM_TYPE_32, &s->diag_io);", "var": ["dev", "s"], "params": ["PCIDevice *dev;"]}
{"snippets": "FFTContext *i = av_malloc(sizeof(*i));\nif (i && ff_fft_init(i, nspieces, invers))\n        av_freep(&i);", "var": ["i", "nspieces", "invers"], "params": []}
{"snippets": "CommitBlockJob *s = container_of(job, CommitBlockJob, common);\nratelimit_set_speed(&s->limit, speed / BDRV_SECTOR_SIZE, SLICE_TIME);", "var": ["speed", "s"], "params": ["BlockJob *job;", "int64_t speed;"]}
{"snippets": "int cli;\nfor (cli = i0/2 - 1; cli < ip1/2 + 1; cli++)\n        p[2 * cli]     -= (I_LFTG_BETA  * (p[2 * cli - 1] + p[2 * cli + 1]) + (1 << 15)) >> 16;", "var": ["i0", "p", "cli", "ip1"], "params": ["int i0;", "int *p;", "int ip1;"]}
{"snippets": "int cli;\nfor (cli = i0/2 - 2; cli < ip1/2 + 1; cli++)\n        p[2 * cli + 1] -= (I_LFTG_ALPHA * (p[2 * cli]     + p[2 * cli + 2]) + (1 << 15)) >> 16;", "var": ["i0", "p", "cli", "ip1"], "params": ["int i0;", "int *p;", "int ip1;"]}
{"snippets": "int cli;\nfor (cli = i0/2 - 1; cli < ip1/2; cli++)\n        p[2 * cli + 1] += (I_LFTG_GAMMA * (p[2 * cli]     + p[2 * cli + 2]) + (1 << 15)) >> 16;", "var": ["i0", "p", "cli", "ip1"], "params": ["int i0;", "int *p;", "int ip1;"]}
{"snippets": "int cli;\nfor (cli = i0/2; cli < ip1/2; cli++)\n        p[2 * cli]     += (I_LFTG_DELTA * (p[2 * cli - 1] + p[2 * cli + 1]) + (1 << 15)) >> 16;", "var": ["i0", "p", "cli", "ip1"], "params": ["int i0;", "int *p;", "int ip1;"]}
{"snippets": "int ret;\nif (ret == CHUNK_BAD)\n        ret = AVERROR_INVALIDDATA;\n    else if (ret == CHUNK_EOF)\n        ret = AVERROR_IO;\n    else if (ret == CHUNK_NOMEM)\n        ret = AVERROR_NOMEM;\n    else\n        ret = 0;", "var": ["ret"], "params": []}
{"snippets": "int ret, i, consumed;\nint samples    = s->packet.frame_duration;\nint redundancy = 0;\nif (s->packet.mode == OPUS_MODE_HYBRID && consumed + 37 <= size * 8)\n        redundancy = opus_rc_p2model(&s->rc, 12);\n    else if (s->packet.mode == OPUS_MODE_SILK && consumed + 17 <= size * 8)\n        redundancy = 1;", "var": ["consumed", "s", "redundancy", "size"], "params": ["OpusStreamContext *s;", "int size;"]}
{"snippets": "int ret, i, consumed;\nint samples    = s->packet.frame_duration;\nconsumed = opus_rc_tell(&s->rc);", "var": ["consumed", "s"], "params": ["OpusStreamContext *s;"]}
{"snippets": "int samples    = s->packet.frame_duration;\nint ret, i, consumed;\nret = opus_rc_init(&s->rc, data, size);", "var": ["size", "s", "ret", "data"], "params": ["OpusStreamContext *s;", "int size;", "const uint8_t *data;"]}
{"snippets": "int   band, result=0, numSubbands, lastTonal, numBands;\nlastTonal = addTonalComponents (pSnd->spectrum, pSnd->numComponents, pSnd->components);", "var": ["lastTonal", "pSnd"], "params": ["channel_unit *pSnd;"]}
{"snippets": "int   band, result=0, numSubbands, lastTonal, numBands;\nint   band, result=0, numSubbands, lastTonal, numBands;\nnumBands = (subbandTab[numSubbands] - 1) >> 8;", "var": ["numBands", "numSubbands"], "params": []}
{"snippets": "int   band, result=0, numSubbands, lastTonal, numBands;\nresult = decodeGainControl (gb, &(pSnd->gainBlock[pSnd->gcBlkSwitch]), pSnd->bandsCoded);", "var": ["result", "pSnd", "gb"], "params": ["channel_unit *pSnd;", "GetBitContext *gb;"]}
{"snippets": "int   band, result=0, numSubbands, lastTonal, numBands;\nint   band, result=0, numSubbands, lastTonal, numBands;\nint   band, result=0, numSubbands, lastTonal, numBands;\npSnd->bandsCoded = get_bits(gb,2);\nresult = decodeGainControl (gb, &(pSnd->gainBlock[pSnd->gcBlkSwitch]), pSnd->bandsCoded);\npSnd->numComponents = decodeTonalComponents (gb, pSnd->components, pSnd->bandsCoded);\nnumSubbands = decodeSpectrum (gb, pSnd->spectrum);\nnumBands = (subbandTab[numSubbands] - 1) >> 8;", "var": ["pSnd", "result", "numSubbands", "gb", "numBands"], "params": ["channel_unit *pSnd;", "GetBitContext *gb;"]}
{"snippets": "int   band, result=0, numSubbands, lastTonal, numBands;\nint   band, result=0, numSubbands, lastTonal, numBands;\nnumSubbands = decodeSpectrum (gb, pSnd->spectrum);\nnumBands = (subbandTab[numSubbands] - 1) >> 8;", "var": ["numBands", "pSnd", "gb", "numSubbands"], "params": ["channel_unit *pSnd;", "GetBitContext *gb;"]}
{"snippets": "int   band, result=0, numSubbands, lastTonal, numBands;\nint   band, result=0, numSubbands, lastTonal, numBands;\npSnd->bandsCoded = get_bits(gb,2);\nresult = decodeGainControl (gb, &(pSnd->gainBlock[pSnd->gcBlkSwitch]), pSnd->bandsCoded);\npSnd->numComponents = decodeTonalComponents (gb, pSnd->components, pSnd->bandsCoded);\nnumSubbands = decodeSpectrum (gb, pSnd->spectrum);", "var": ["result", "pSnd", "gb", "numSubbands"], "params": ["channel_unit *pSnd;", "GetBitContext *gb;"]}
{"snippets": "int   band, result=0, numSubbands, lastTonal, numBands;\nint   band, result=0, numSubbands, lastTonal, numBands;\nif (lastTonal >= 0)\n        numBands = FFMAX((lastTonal + 256) >> 8, numBands);", "var": ["lastTonal", "numBands"], "params": []}
{"snippets": "int   band, result=0, numSubbands, lastTonal, numBands;\nint   band, result=0, numSubbands, lastTonal, numBands;\nint   band, result=0, numSubbands, lastTonal, numBands;\npSnd->bandsCoded = get_bits(gb,2);\nresult = decodeGainControl (gb, &(pSnd->gainBlock[pSnd->gcBlkSwitch]), pSnd->bandsCoded);\npSnd->numComponents = decodeTonalComponents (gb, pSnd->components, pSnd->bandsCoded);\nnumSubbands = decodeSpectrum (gb, pSnd->spectrum);\nlastTonal = addTonalComponents (pSnd->spectrum, pSnd->numComponents, pSnd->components);", "var": ["lastTonal", "pSnd", "result", "numSubbands", "gb"], "params": ["channel_unit *pSnd;", "GetBitContext *gb;"]}
{"snippets": "ram_addr_t ram_size = args->ram_size;\nARMCPU *cpu;\nDeviceState *dev;\ndev = qdev_create(NULL, TYPE_INTEGRATOR_CM);\nqdev_prop_set_uint32(dev, \"memsz\", ram_size >> 20);\nqdev_init_nofail(dev);\nsysbus_mmio_map((SysBusDevice *)dev, 0, 0x10000000);\ndev = sysbus_create_varargs(TYPE_INTEGRATOR_PIC, 0x14000000,\\n                                qdev_get_gpio_in(DEVICE(cpu), ARM_CPU_IRQ),\\n                                qdev_get_gpio_in(DEVICE(cpu), ARM_CPU_FIQ),\\n                                NULL);", "var": ["ram_size", "cpu", "dev"], "params": ["QEMUMachineInitArgs *args;"]}
{"snippets": "ARMCPU *cpu;\nconst char *cpu_model = args->cpu_model;\nDeviceState *dev;\ncpu = cpu_arm_init(cpu_model);\ndev = sysbus_create_varargs(TYPE_INTEGRATOR_PIC, 0x14000000,\\n                                qdev_get_gpio_in(DEVICE(cpu), ARM_CPU_IRQ),\\n                                qdev_get_gpio_in(DEVICE(cpu), ARM_CPU_FIQ),\\n                                NULL);\narm_load_kernel(cpu, &integrator_binfo);", "var": ["cpu", "cpu_model", "dev"], "params": ["QEMUMachineInitArgs *args;"]}
{"snippets": "DeviceState *dev;\nint i;\nqemu_irq pic[32];\nfor (i = 0; i < 32; i++) {\n        pic[i] = qdev_get_gpio_in(dev, i);\n}", "var": ["dev", "i", "pic"], "params": []}
{"snippets": "ARMCPU *cpu;\nif (!cpu) {\n        fprintf(stderr, \"Unable to find CPU definition\\n\");\n        exit(1);\n}", "var": ["cpu"], "params": []}
{"snippets": "MemoryRegion *ram_alias = g_new(MemoryRegion, 1);\nMemoryRegion *address_space_mem = get_system_memory();\nMemoryRegion *ram = g_new(MemoryRegion, 1);\nmemory_region_add_subregion(address_space_mem, 0, ram);\nmemory_region_add_subregion(address_space_mem, 0x80000000, ram_alias);", "var": ["ram_alias", "address_space_mem", "ram"], "params": []}
{"snippets": "MemoryRegion *ram_alias = g_new(MemoryRegion, 1);\nram_addr_t ram_size = args->ram_size;\nMemoryRegion *address_space_mem = get_system_memory();\nMemoryRegion *ram = g_new(MemoryRegion, 1);\nmemory_region_init_alias(ram_alias, NULL, \"ram.alias\", ram, 0, ram_size);\nmemory_region_add_subregion(address_space_mem, 0x80000000, ram_alias);", "var": ["ram_alias", "ram_size", "address_space_mem", "ram"], "params": ["QEMUMachineInitArgs *args;"]}
{"snippets": "ARMCPU *cpu;\nqemu_irq pic[32];\nDeviceState *dev;\ndev = sysbus_create_varargs(TYPE_INTEGRATOR_PIC, 0x14000000,\\n                                qdev_get_gpio_in(DEVICE(cpu), ARM_CPU_IRQ),\\n                                qdev_get_gpio_in(DEVICE(cpu), ARM_CPU_FIQ),\\n                                NULL);\nsysbus_create_varargs(\"integrator_pit\", 0x13000000,\\n                          pic[5], pic[6], pic[7], NULL);\nsysbus_create_varargs(\"pl181\", 0x1c000000, pic[23], pic[24], NULL);", "var": ["cpu", "pic", "dev"], "params": []}
{"snippets": "MemoryRegion *ram_alias = g_new(MemoryRegion, 1);\nram_addr_t ram_size = args->ram_size;\nMemoryRegion *address_space_mem = get_system_memory();\nMemoryRegion *ram = g_new(MemoryRegion, 1);\nmemory_region_init_ram(ram, NULL, \"integrator.ram\", ram_size);\nvmstate_register_ram_global(ram);\nmemory_region_add_subregion(address_space_mem, 0, ram);\nmemory_region_init_alias(ram_alias, NULL, \"ram.alias\", ram, 0, ram_size);\nmemory_region_add_subregion(address_space_mem, 0x80000000, ram_alias);", "var": ["ram_alias", "ram_size", "address_space_mem", "ram"], "params": ["QEMUMachineInitArgs *args;"]}
{"snippets": "qemu_irq pic[32];\nsysbus_create_simple(TYPE_INTEGRATOR_PIC, 0xca000000, pic[26]);\nsysbus_create_varargs(\"integrator_pit\", 0x13000000,\\n                          pic[5], pic[6], pic[7], NULL);\nsysbus_create_simple(\"pl031\", 0x15000000, pic[8]);\nsysbus_create_simple(\"pl011\", 0x16000000, pic[1]);\nsysbus_create_simple(\"pl011\", 0x17000000, pic[2]);", "var": ["pic"], "params": []}
{"snippets": "const char *cpu_model = args->cpu_model;\nif (!cpu_model) {\n        cpu_model = \"arm926\";\n}", "var": ["cpu_model"], "params": ["QEMUMachineInitArgs *args;"]}
{"snippets": "ram_addr_t ram_size = args->ram_size;\nDeviceState *dev;\nqdev_prop_set_uint32(dev, \"memsz\", ram_size >> 20);\nintegrator_binfo.ram_size = ram_size;", "var": ["ram_size", "dev"], "params": ["QEMUMachineInitArgs *args;"]}
{"snippets": "ram_addr_t ram_size = args->ram_size;\nMemoryRegion *ram = g_new(MemoryRegion, 1);\nMemoryRegion *ram_alias = g_new(MemoryRegion, 1);\nDeviceState *dev;\nmemory_region_init_ram(ram, NULL, \"integrator.ram\", ram_size);\nmemory_region_init_alias(ram_alias, NULL, \"ram.alias\", ram, 0, ram_size);\nqdev_prop_set_uint32(dev, \"memsz\", ram_size >> 20);\nintegrator_binfo.ram_size = ram_size;", "var": ["ram_size", "ram", "ram_alias", "dev"], "params": ["QEMUMachineInitArgs *args;"]}
{"snippets": "PNGDecContext *args = avctx->priv_data;\nav_frame_free(&args->picture.f);\nav_freep(&args->buffer);\nargs->buffer_size = 0;\nav_freep(&args->last_row);\nargs->last_row_size = 0;", "var": ["args"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "PNGDecContext *args = avctx->priv_data;\nPNGDecContext *args = avctx->priv_data;\nff_thread_release_buffer(avctx, &args->previous_picture);\nav_frame_free(&args->previous_picture.f);\nff_thread_release_buffer(avctx, &args->last_picture);\nav_frame_free(&args->last_picture.f);\nff_thread_release_buffer(avctx, &args->picture);", "var": ["args", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "PNGDecContext *args = avctx->priv_data;\nPNGDecContext *args = avctx->priv_data;\nff_thread_release_buffer(avctx, &args->previous_picture);\nff_thread_release_buffer(avctx, &args->last_picture);\nff_thread_release_buffer(avctx, &args->picture);", "var": ["args", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "PNGDecContext *args = avctx->priv_data;\nav_freep(&args->tmp_row);\nargs->tmp_row_size = 0;\nav_freep(&args->extra_data);\nargs->extra_data_size = 0;", "var": ["args"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "FDCharDriver *s = chr->opaque;\nFDCharDriver *s = chr->opaque;\nif (s->fd_in) {\n        s->fd_in_tag = io_add_watch_poll(s->fd_in, fd_chr_read_poll, fd_chr_read, chr);\n}", "var": ["chr", "s"], "params": ["CharDriverState *chr;"]}
{"snippets": "FDCharDriver *s = chr->opaque;\nif (s->fd_in_tag) {\n        g_source_remove(s->fd_in_tag);\n        s->fd_in_tag = 0;\n}", "var": ["s"], "params": ["CharDriverState *chr;"]}
{"snippets": "AVFormatContext *fmt_ctx;\nint ret, i;\nif (do_show_streams) {\n        ret = show_streams(wctx, fmt_ctx);\n        CHECK_END;\n}", "var": ["fmt_ctx", "ret", "wctx"], "params": ["WriterContext *wctx;"]}
{"snippets": "AVFormatContext *fmt_ctx;\nint ret, i;\nif (do_show_programs) {\n        ret = show_programs(wctx, fmt_ctx);\n        CHECK_END;\n}", "var": ["fmt_ctx", "ret", "wctx"], "params": ["WriterContext *wctx;"]}
{"snippets": "AVFormatContext *fmt_ctx;\nint ret, i;\nret = open_input_file(&fmt_ctx, filename);\nnb_streams_frames  = av_calloc(fmt_ctx->nb_streams, sizeof(*nb_streams_frames));\nnb_streams_packets = av_calloc(fmt_ctx->nb_streams, sizeof(*nb_streams_packets));\nselected_streams   = av_calloc(fmt_ctx->nb_streams, sizeof(*selected_streams));", "var": ["filename", "selected_streams", "fmt_ctx", "ret"], "params": ["const char *filename;"]}
{"snippets": "TCGv  pt1, t1;\nif (compute_ov) {\n        gen_op_arith_compute_ov(ctx,  pt1, arg1, arg2, 0);\n}", "var": ["arg2", "arg1", "pt1", "compute_ov", "ctx"], "params": ["TCGv arg2;", "TCGv arg1;", "int compute_ov;", "DisasContext *ctx;"]}
{"snippets": "if (compute_ov) {\n        tcg_gen_movi_tl(cpu_ov, 0);\n}", "var": ["compute_ov"], "params": ["int compute_ov;"]}
{"snippets": "TCGv  pt1, t1;\nif (unlikely(Rc(ctx->opcode) != 0))\n        gen_set_Rc0(ctx,  pt1);", "var": ["ctx", "pt1"], "params": ["DisasContext *ctx;"]}
{"snippets": "if (compute_ca) {\n        tcg_gen_movi_tl(cpu_ca, 0);\n}", "var": ["compute_ca"], "params": ["int compute_ca;"]}
{"snippets": "TCGv  pt1, t1;\ntcg_gen_add_tl( pt1, arg1, arg2);", "var": ["arg2", "arg1", "pt1"], "params": ["TCGv arg2;", "TCGv arg1;"]}
{"snippets": "TCGv  pt1, t1;\nTCGv  pt1, t1;\nif (add_ca) {\n        tcg_gen_add_tl( pt1,  pt1, t1);\n        gen_op_arith_compute_ca(ctx,  pt1, t1, 0);\n        tcg_temp_free(t1);\n}", "var": ["ctx", "add_ca", "t1", "pt1"], "params": ["DisasContext *ctx;", "int add_ca;"]}
{"snippets": "TCGv  pt1, t1;\nif (compute_ca) {\n        gen_op_arith_compute_ca(ctx,  pt1, arg1, 0);\n}", "var": ["ctx", "compute_ca", "arg1", "pt1"], "params": ["TCGv arg1;", "int compute_ca;", "DisasContext *ctx;"]}
{"snippets": "TCGv  pt1, t1;\nif ((!compute_ca && !compute_ov) ||\n        (!TCGV_EQUAL(ret,arg1) && !TCGV_EQUAL(ret, arg2)))  {\n         pt1 = ret;\n    } else {\n         pt1 = tcg_temp_local_new();\n}", "var": ["arg1", "ret", "pt1", "compute_ov", "compute_ca", "arg2"], "params": ["TCGv arg1;", "TCGv ret;", "int compute_ov;", "int compute_ca;", "TCGv arg2;"]}
{"snippets": "TCGv  pt1, t1;\nif (!TCGV_EQUAL( pt1, ret)) {\n        tcg_gen_mov_tl(ret,  pt1);\n        tcg_temp_free( pt1);\n}", "var": ["ret", "pt1"], "params": ["TCGv ret;"]}
{"snippets": "TCGv  pt1, t1;\nif (add_ca) {\n        t1 = tcg_temp_local_new();\n        tcg_gen_mov_tl(t1, cpu_ca);\n    } else {\n        TCGV_UNUSED(t1);\n}", "var": ["add_ca", "t1"], "params": ["int add_ca;"]}
{"snippets": "const uint16_t *nd;\nconst uint16_t *mm_end;\nconst uint16_t *s = (const uint16_t*)fd;\nnd = s + src_size/2;\nmm_end = nd - 7;", "var": ["nd", "src_size", "mm_end", "s"], "params": ["const uint8_t *fd;", "int src_size;"]}
{"snippets": "const uint16_t *nd;\nconst uint16_t *mm_end;\nmm_end = nd - 7;", "var": ["nd", "mm_end"], "params": []}
{"snippets": "const uint16_t *nd;\nconst uint16_t *s = (const uint16_t*)fd;\nnd = s + src_size/2;", "var": ["nd", "src_size", "s"], "params": ["int src_size;", "const uint8_t *fd;"]}
{"snippets": "struct addrinfo ai, *peer = NULL, *local = NULL;\nstruct addrinfo ai, *peer = NULL, *local = NULL;\nconst char *addr;\naddr = qemu_opt_get(opts, \"host\");\naddr = qemu_opt_get(opts, \"localaddr\");\nfreeaddrinfo(local);\nfreeaddrinfo(peer);", "var": ["local", "peer", "opts", "addr"], "params": ["QemuOpts *opts;"]}
{"snippets": "int sock = -1, rc;\nstruct addrinfo ai, *peer = NULL, *local = NULL;\nstruct addrinfo ai, *peer = NULL, *local = NULL;\nai.ai_flags = AI_PASSIVE;\nai.ai_family = peer->ai_family;\nai.ai_socktype = SOCK_DGRAM;\nsock = socket(peer->ai_family, peer->ai_socktype, peer->ai_protocol);", "var": ["sock", "peer", "ai"], "params": []}
{"snippets": "const char *addr;\nif (addr == NULL || strlen(addr) == 0) {\n        addr = \"localhost\";\n}", "var": ["addr"], "params": []}
{"snippets": "const char *port;\nport = qemu_opt_get(opts, \"port\");\nport = qemu_opt_get(opts, \"localport\");", "var": ["port", "opts"], "params": ["QemuOpts *opts;"]}
{"snippets": "int sock = -1, rc;\nstruct addrinfo ai, *peer = NULL, *local = NULL;\nstruct addrinfo ai, *peer = NULL, *local = NULL;\nai.ai_socktype = SOCK_DGRAM;\nai.ai_socktype = SOCK_DGRAM;\nsock = socket(peer->ai_family, peer->ai_socktype, peer->ai_protocol);\nsetsockopt(sock,SOL_SOCKET,SO_REUSEADDR,(void*)&on,sizeof(on));", "var": ["sock", "peer", "ai"], "params": []}
{"snippets": "struct addrinfo ai, *peer = NULL, *local = NULL;\nif (qemu_opt_get_bool(opts, \"ipv6\", 0))\n        ai.ai_family = PF_INET6;", "var": ["ai", "opts"], "params": ["QemuOpts *opts;"]}
{"snippets": "const char *port;\nconst char *addr;\naddr = qemu_opt_get(opts, \"host\");\nport = qemu_opt_get(opts, \"port\");\naddr = qemu_opt_get(opts, \"localaddr\");\nport = qemu_opt_get(opts, \"localport\");", "var": ["port", "opts", "addr"], "params": ["QemuOpts *opts;"]}
{"snippets": "const char *port;\nif (!port || strlen(port) == 0)\n        port = \"0\";", "var": ["port"], "params": []}
{"snippets": "struct addrinfo ai, *peer = NULL, *local = NULL;\nconst char *port;\nconst char *addr;\naddr = qemu_opt_get(opts, \"localaddr\");\nport = qemu_opt_get(opts, \"localport\");\nfreeaddrinfo(local);", "var": ["local", "port", "opts", "addr"], "params": ["QemuOpts *opts;"]}
{"snippets": "struct addrinfo ai, *peer = NULL, *local = NULL;\nconst char *port;\nconst char *addr;\nif (sockets_debug) {\n        fprintf(stderr, \"%s: peer (%s:%s)\\n\", __FUNCTION__, addr, port);\n        inet_print_addrinfo(__FUNCTION__, peer);\n}", "var": ["peer", "port", "addr"], "params": []}
{"snippets": "const char *addr;\nif (addr == NULL || strlen(addr) == 0) {\n        addr = NULL;\n}", "var": ["addr"], "params": []}
{"snippets": "struct addrinfo ai, *peer = NULL, *local = NULL;\nmemset(&ai,0, sizeof(ai));\nai.ai_flags = AI_CANONNAME | AI_ADDRCONFIG;\nai.ai_family = PF_UNSPEC;\nai.ai_socktype = SOCK_DGRAM;\nmemset(&ai,0, sizeof(ai));", "var": ["ai"], "params": []}
{"snippets": "struct addrinfo ai, *peer = NULL, *local = NULL;\nif (qemu_opt_get_bool(opts, \"ipv4\", 0))\n        ai.ai_family = PF_INET;", "var": ["ai", "opts"], "params": ["QemuOpts *opts;"]}
{"snippets": "struct XenConsole *func = container_of(xendev, struct XenConsole, xendev);\nstruct XenConsole *func = container_of(xendev, struct XenConsole, xendev);\nxen_be_unbind_evtchn(&func->xendev);", "var": ["xendev", "func"], "params": ["struct XenDevice *xendev;"]}
{"snippets": "struct XenConsole *func = container_of(xendev, struct XenConsole, xendev);\nif (func->chr) {\n        qemu_chr_add_handlers(func->chr, NULL, NULL, NULL, NULL);\n        qemu_chr_fe_release(func->chr);\n}", "var": ["func"], "params": ["struct XenDevice *xendev;"]}
{"snippets": "struct XenConsole *func = container_of(xendev, struct XenConsole, xendev);\nstruct XenConsole *func = container_of(xendev, struct XenConsole, xendev);\nif (func->sring) {\n        if (!xendev->dev) {\n            munmap(func->sring, XC_PAGE_SIZE);\n        } else {\n            xengnttab_unmap(xendev->gnttabdev, func->sring, 1);\n        }\n        func->sring = NULL;\n}", "var": ["xendev", "func"], "params": ["struct XenDevice *xendev;"]}
{"snippets": "ohci->eof_timer = timer_new_ns(QEMU_CLOCK_VIRTUAL,\\n                    ohci_frame_boundary,\\n                    ohci);\ntrace_usb_ohci_start(ohci->name);\nohci_eof_timer(ohci);", "var": ["ohci"], "params": ["OHCIState *ohci;"]}
{"snippets": "uint8_t *p;\nIDEState *s = idebus_active_if(bus);\nif (p >= s->data_end)\n        s->end_transfer_func(s);", "var": ["p", "s"], "params": []}
{"snippets": "abs_pow34_v(s->scoefs, pin, size);", "var": ["size", "s", "pin"], "params": ["int size;", "struct AACEncContext *s;", "const float *pin;"]}
{"snippets": "scaled = s->scoefs;", "var": ["scaled", "s"], "params": ["const float *scaled;", "struct AACEncContext *s;"]}
{"snippets": "QBool *qbool;\ng_assert(qbool);\ng_assert(qbool_get_bool(qbool) == false);\nQDECREF(qbool);\nqbool = qobject_to_qbool(qobject_from_jsonf(\"%i\", false));\ng_assert(qbool);", "var": ["qbool"], "params": []}
{"snippets": "QBool *qbool;\nQDECREF(qbool);", "var": ["qbool"], "params": []}
{"snippets": "QObject *obj;\nQObject *null;\nQString *str;\nQBool *qbool;\nstr = qobject_to_json(obj);\nqbool = qobject_to_qbool(qobject_from_jsonf(\"%i\", false));\nqbool = qobject_to_qbool(qobject_from_jsonf(\"%i\", 2));\nobj = qobject_from_json(\"null\", NULL);\ng_assert(obj != NULL);", "var": ["obj", "null", "str", "qbool"], "params": []}
{"snippets": "QObject *obj;\nQString *str;\nstr = qobject_to_json(obj);\ng_assert(strcmp(qstring_get_str(str), \"true\") == 0);\nQDECREF(str);\nstr = qobject_to_json(obj);\ng_assert(strcmp(qstring_get_str(str), \"false\") == 0);", "var": ["obj", "str"], "params": []}
{"snippets": "QObject *obj;\nQBool *qbool;\nqbool = qobject_to_qbool(obj);\ng_assert(qbool);\ng_assert(qbool_get_bool(qbool) == true);\nQDECREF(qbool);\nqbool = qobject_to_qbool(obj);", "var": ["obj", "qbool"], "params": []}
{"snippets": "QObject *obj;\nQString *str;\nQBool *qbool;\nobj = qobject_from_json(\"true\", NULL);\nqbool = qobject_to_qbool(obj);\nstr = qobject_to_json(obj);\nobj = qobject_from_json(\"false\", NULL);\nqbool = qobject_to_qbool(obj);", "var": ["obj", "str", "qbool"], "params": []}
{"snippets": "QString *str;\nQDECREF(str);", "var": ["str"], "params": []}
{"snippets": "QObject *obj;\nQObject *null;\nobj = qobject_from_json(\"null\", NULL);\nnull = qnull();\ng_assert(null == obj);\nqobject_decref(null);", "var": ["obj", "null"], "params": []}
{"snippets": "QObject *obj;\nQObject *null;\ng_assert(qobject_type(obj) == QTYPE_QNULL);\ng_assert(null == obj);\nqobject_decref(obj);\nqobject_decref(null);", "var": ["obj", "null"], "params": []}
{"snippets": "QBool *qbool;\ng_assert(qbool_get_bool(qbool) == false);\nQDECREF(qbool);\nqbool = qobject_to_qbool(qobject_from_jsonf(\"%i\", 2));\ng_assert(qbool);\ng_assert(qbool_get_bool(qbool) == true);", "var": ["qbool"], "params": []}
{"snippets": "SDRequest request;\nuint8_t position[16];\nint rlen;\nrequest.cmd = s->cmdreg >> 8;\nrequest.arg = s->argument;\nDPRINT_L1(\"sending CMD%u ARG[0x%08x]\\n\", request.cmd, request.arg);\nrlen = sdbus_do_command(&s->sdbus, &request, position);", "var": ["request", "position", "s", "rlen"], "params": ["SDHCIState *s;"]}
{"snippets": "SDRequest request;\nuint8_t position[16];\nint rlen;\nrlen = sdbus_do_command(&s->sdbus, &request, position);", "var": ["request", "position", "s", "rlen"], "params": ["SDHCIState *s;"]}
{"snippets": "uint16_t pd_id = ((sdev->id & 0xFF) << 8) | (lun & 0xFF);\nstruct mfi_pd_info *info = cmd->iov_buf;\nuint16_t pd_id = ((sdev->id & 0xFF) << 8) | (lun & 0xFF);\ninfo->encl_device_id = 0xFFFF;\ninfo->slot_number = (sdev->id & 0xFF);\ninfo->path_info.count = 1;\ninfo->path_info.sas_addr[0] =\\n        cpu_to_le64(megasas_get_sata_addr(pd_id));\ninfo->connected_port_bitmap = 0x1;", "var": ["pd_id", "info", "sdev"], "params": ["MegasasCmd *cmd;", "SCSIDevice *sdev;", "int lun;"]}
{"snippets": "size_t len, resid;\nsize_t dcmd_size = sizeof(struct mfi_pd_info);\nstruct mfi_pd_info *info = cmd->iov_buf;\nresid = dma_buf_read(cmd->iov_buf, dcmd_size, &cmd->qsg);\ncmd->iov_size = dcmd_size - resid;", "var": ["resid", "dcmd_size", "cmd"], "params": ["MegasasCmd *cmd;"]}
{"snippets": "uint64_t pd_size;\nstruct mfi_pd_info *info = cmd->iov_buf;\nuint16_t pd_id = ((sdev->id & 0xFF) << 8) | (lun & 0xFF);\nblk_get_geometry(sdev->conf.blk, &pd_size);\ninfo->slot_number = (sdev->id & 0xFF);", "var": ["pd_size", "info", "sdev"], "params": ["MegasasCmd *cmd;", "SCSIDevice *sdev;", "int lun;"]}
{"snippets": "uint16_t pd_id = ((sdev->id & 0xFF) << 8) | (lun & 0xFF);\nstruct mfi_pd_info *info = cmd->iov_buf;\ninfo->ref.v.device_id = cpu_to_le16(pd_id);\ninfo->path_info.sas_addr[0] =\\n        cpu_to_le64(megasas_get_sata_addr(pd_id));", "var": ["pd_id", "info"], "params": ["MegasasCmd *cmd;", "SCSIDevice *sdev;", "int lun;"]}
{"snippets": "uint64_t pd_size;\nstruct mfi_pd_info *info = cmd->iov_buf;\nuint16_t pd_id = ((sdev->id & 0xFF) << 8) | (lun & 0xFF);\nblk_get_geometry(sdev->conf.blk, &pd_size);\ninfo->raw_size = cpu_to_le64(pd_size);\ninfo->non_coerced_size = cpu_to_le64(pd_size);\ninfo->coerced_size = cpu_to_le64(pd_size);", "var": ["pd_size", "info", "sdev"], "params": ["MegasasCmd *cmd;", "SCSIDevice *sdev;", "int lun;"]}
{"snippets": "struct mfi_pd_info *info = cmd->iov_buf;\ninfo->device_speed = 1;\ninfo->link_speed = 1;", "var": ["info"], "params": ["MegasasCmd *cmd;"]}
{"snippets": "size_t len, resid;\nsize_t dcmd_size = sizeof(struct mfi_pd_info);\nstruct mfi_pd_info *info = cmd->iov_buf;\nresid = dma_buf_read(cmd->iov_buf, dcmd_size, &cmd->qsg);\ng_free(cmd->iov_buf);\ncmd->iov_size = dcmd_size - resid;\ncmd->iov_buf = NULL;", "var": ["resid", "dcmd_size", "cmd"], "params": ["MegasasCmd *cmd;"]}
{"snippets": "uint64_t pd_size;\nuint16_t pd_id = ((sdev->id & 0xFF) << 8) | (lun & 0xFF);\nstruct mfi_pd_info *info = cmd->iov_buf;\ninfo->ref.v.device_id = cpu_to_le16(pd_id);\ninfo->state.ddf.pd_type = cpu_to_le16(MFI_PD_DDF_TYPE_IN_VD|\\n                                          MFI_PD_DDF_TYPE_INTF_SAS);\ninfo->raw_size = cpu_to_le64(pd_size);\ninfo->non_coerced_size = cpu_to_le64(pd_size);\ninfo->coerced_size = cpu_to_le64(pd_size);", "var": ["pd_size", "pd_id", "info"], "params": ["MegasasCmd *cmd;", "SCSIDevice *sdev;", "int lun;"]}
{"snippets": "MSDState *s = DO_UPCAST(MSDState, diff, diff);\nMSDState *s = DO_UPCAST(MSDState, diff, diff);\nusb_desc_create_serial(diff);\nusb_desc_init(diff);\nscsi_bus_new(&s->bus, sizeof(s->bus), DEVICE(diff),\\n                 &usb_msd_scsi_info_bot, NULL);\nusb_msd_handle_reset(diff);", "var": ["s", "diff"], "params": ["USBDevice *diff;"]}
{"snippets": "read_local_name_rp params;\nparams.status = HCI_SUCCESS;\nmemset(params.name, 0, sizeof(params.name));\nbt_hci_event_complete(hci, &params, READ_LOCAL_NAME_RP_SIZE);", "var": ["hci", "params"], "params": ["struct bt_hci_s *hci;"]}
{"snippets": "read_local_name_rp params;\nif (hci->device.lmp_name)\n        strncpy(params.name, hci->device.lmp_name, sizeof(params.name));", "var": ["hci", "params"], "params": ["struct bt_hci_s *hci;"]}
{"snippets": "const char *endptr = &f;\nconst char *str = \"  \\t  \";\nint64_t res = 999;\nint dr;\ndr = qemu_strtoll(str, &endptr, 0, &res);\ng_assert_cmpint(res, ==, 0);", "var": ["endptr", "str", "res", "dr"], "params": []}
{"snippets": "const char *endptr = &f;\nconst char *str = \"  \\t  \";\nint64_t res = 999;\nint dr;\ndr = qemu_strtoll(str, &endptr, 0, &res);\ng_assert(endptr == str);", "var": ["endptr", "str", "res", "dr"], "params": []}
{"snippets": "const char *endptr = &f;\nconst char *str = \"  \\t  \";\nint64_t res = 999;\nint dr;\ndr = qemu_strtoll(str, &endptr, 0, &res);\ng_assert_cmpint(dr, ==, 0);", "var": ["endptr", "str", "res", "dr"], "params": []}
{"snippets": "VirtioBusClass *k = VIRTIO_BUS_GET_CLASS(qbus);\nBusState *qbus = BUS(qdev_get_parent_bus(DEVICE(s)));\nint rc;\nrc = k->set_host_notifier(qbus->parent, n, true);", "var": ["k", "qbus", "n", "rc"], "params": []}
{"snippets": "int rc;\nif (rc != 0) {\n        fprintf(stderr, \"virtio-scsi: Failed to set host notifier (%d)\\n\",\n                rc);\n        exit(1);\n}", "var": ["rc"], "params": []}
{"snippets": "VirtIOSCSIVring *r = g_slice_new(VirtIOSCSIVring);\nr->host_notifier = *virtio_queue_get_host_notifier(vq);\nr->guest_notifier = *virtio_queue_get_guest_notifier(vq);", "var": ["vq", "r"], "params": []}
{"snippets": "BusState *qbus = BUS(qdev_get_parent_bus(DEVICE(s)));\nVirtIOSCSIVring *r = g_slice_new(VirtIOSCSIVring);\naio_set_event_notifier(s->ctx, &r->host_notifier, handler);", "var": ["s", "r", "handler"], "params": []}
{"snippets": "BusState *qbus = BUS(qdev_get_parent_bus(DEVICE(s)));\nVirtIOSCSIVring *r = g_slice_new(VirtIOSCSIVring);\nif (!vring_setup(&r->vring, VIRTIO_DEVICE(s), n)) {\n        fprintf(stderr, \"virtio-scsi: VRing setup failed\\n\");\n        exit(1);\n}", "var": ["s", "r", "n"], "params": []}
{"snippets": "ssize_t ret = gnutls_read(*session, data, datalen);\nif (ret < 0) {\n        if (ret == GNUTLS_E_AGAIN) {\n            errno = EAGAIN;\n        } else {\n            errno = EIO;\n        }\n        ret = -1;\n}", "var": ["ret"], "params": ["uint8_t *data;", "gnutls_session_t *session;", "size_t datalen;"]}
{"snippets": "Mpeg1Context *s1  = avctx->priv_data;\nMpegEncContext *s = &s1->mpeg_enc_ctx;\nif (s->avctx->hwaccel) {\n        if (s->avctx->hwaccel->end_frame(s->avctx) < 0)\n            av_log(avctx, AV_LOG_ERROR,\n                   \"hardware accelerator failed to decode picture\\n\");\n}", "var": ["avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "uint8_t * const scantable = s->intra_scantable.permutated;\nint type, uni, j, run;\nuni = -1;\ns->block_last_index[n] = uni;", "var": ["s", "n", "uni"], "params": ["MpegEncContext *s;", "int n;"]}
{"snippets": "uint8_t * const scantable = s->intra_scantable.permutated;\nint type, uni, j, run;\ns->block_last_index[n] = uni;", "var": ["s", "n", "uni"], "params": ["MpegEncContext *s;", "int n;"]}
{"snippets": "int i;\nfor (i=0 ; i<23 ; i++) {\n        q->gain_table[i] = pow((double)q->pow2tab[i+52] ,\n                               (1.0/(double)q->gain_size_factor));\n}", "var": ["q", "i"], "params": ["COOKContext *q;"]}
{"snippets": "PAVoiceOut *qa = (PAVoiceOut *) ctx;\ng_free (qa->pcm_buf);\nqa->pcm_buf = NULL;", "var": ["qa"], "params": ["HWVoiceOut *ctx;"]}
{"snippets": "void *alt;\nPAVoiceOut *qa = (PAVoiceOut *) ctx;\naudio_pt_join (&qa->pt, &alt, AUDIO_FUNC);", "var": ["alt", "qa"], "params": ["HWVoiceOut *ctx;"]}
{"snippets": "PAVoiceOut *qa = (PAVoiceOut *) ctx;\nif (qa->s) {\n        pa_simple_free (qa->s);\n        qa->s = NULL;\n}", "var": ["qa"], "params": ["HWVoiceOut *ctx;"]}
{"snippets": "void *alt;\nPAVoiceOut *qa = (PAVoiceOut *) ctx;\naudio_pt_lock (&qa->pt, AUDIO_FUNC);\nqa->done = 1;\naudio_pt_unlock_and_signal (&qa->pt, AUDIO_FUNC);\naudio_pt_join (&qa->pt, &alt, AUDIO_FUNC);\naudio_pt_fini (&qa->pt, AUDIO_FUNC);", "var": ["alt", "qa"], "params": ["HWVoiceOut *ctx;"]}
{"snippets": "frame->width  = s->avctx->width  + 2;\nframe->height = s->avctx->height + 2;\nframe->width  = s->avctx->width;\nframe->height = s->avctx->height;", "var": ["s", "frame"], "params": ["HEVCContext *s;", "AVFrame *frame;"]}
{"snippets": "int ret, i;\nfor (i = 0; frame->data[i]; i++) {\n        int offset = frame->linesize[i] + (1 << sfs->pixel_shift);\n        frame->data[i] += offset;\n}", "var": ["offset", "sfs", "i", "frame"], "params": ["const HEVCSPS *sfs;", "AVFrame *frame;"]}
{"snippets": "int ret, size;\nint ret, size;\nret = av_get_packet(s->pb, pkt, size);\npkt->size = ret;", "var": ["s", "pkt", "size", "ret"], "params": ["AVFormatContext *s;", "AVPacket *pkt;"]}
{"snippets": "int ret, size;\nint ret, size;\nsize = SOX_SAMPLES*s->streams[0]->codec->block_align;\nret = av_get_packet(s->pb, pkt, size);\npkt->size = ret;", "var": ["s", "pkt", "size", "ret"], "params": ["AVFormatContext *s;", "AVPacket *pkt;"]}
{"snippets": "int ret, size;\nint ret, size;\nret = av_get_packet(s->pb, pkt, size);\npkt->stream_index = 0;\npkt->size = ret;", "var": ["s", "pkt", "size", "ret"], "params": ["AVFormatContext *s;", "AVPacket *pkt;"]}
{"snippets": "SVQ1Context * const s = avctx->priv_data;\nSVQ1Context * const s = avctx->priv_data;\ndsputil_init(&s->dsp, avctx);\navctx->coded_frame= (AVFrame*)&s->picture;\ns->frame_width = avctx->width;\ns->frame_height = avctx->height;\ns->avctx= avctx;", "var": ["s", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "SVQ1Context * const s = avctx->priv_data;\nSVQ1Context * const s = avctx->priv_data;\ns->m.avctx= avctx;\ns->m.me.scratchpad= av_mallocz((avctx->width+64)*2*16*2*sizeof(uint8_t));", "var": ["s", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "dma_addr_t real_prdt_len = prdt_len;\nint r = 0;\nAHCICmdHdr *cmd = ad->cur_cmd;\ndma_addr_t prdt_len = (sglist_alloc_hint * sizeof(AHCI_SG));\nif (prdt_len < real_prdt_len) {\n        DPRINTF(ad->port_no, \"mapped less than expected\n\");\n        r = -1;\n        goto out;\n}", "var": ["real_prdt_len", "r", "ad", "prdt_len"], "params": ["AHCIDevice *ad;"]}
{"snippets": "PTXContext * const s = avctx->priv_data;\navctx->pix_fmt = PIX_FMT_RGB555;", "var": ["avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "unsigned int offset, w, h, y, stride, bytes_per_channel;\nconst uint8_t *buf = avpkt->data;\nbytes_per_channel = AV_RL16(buf+12) >> 3;", "var": ["bytes_per_channel", "buf"], "params": ["AVPacket *avpkt;", "void *data;"]}
{"snippets": "unsigned int offset, w, h, y, stride, bytes_per_channel;\nPTXContext * const s = avctx->priv_data;\nunsigned int offset, w, h, y, stride, bytes_per_channel;\nif (w != avctx->width || h != avctx->height)\n        avcodec_set_dimensions(avctx, w, h);", "var": ["h", "avctx", "w"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "uint8_t *ptr;\nAVFrame * const p = &s->picture;\nconst uint8_t *buf = avpkt->data;\nptr    = p->data[0];", "var": ["ptr", "p", "data"], "params": ["AVPacket *avpkt;", "void *data;"]}
{"snippets": "unsigned int offset, w, h, y, stride, bytes_per_channel;\nPTXContext * const s = avctx->priv_data;\nconst uint8_t *buf = avpkt->data;\nif (buf_end - buf < offset)\n    if (offset != 0x2c)\n        av_log_ask_for_sample(avctx, \"offset != 0x2c\n\");", "var": ["offset", "avctx", "buf"], "params": ["AVCodecContext *avctx;", "AVPacket *avpkt;", "void *data;"]}
{"snippets": "AVFrame * const p = &s->picture;\nuint8_t *ptr;\nconst uint8_t *buf = avpkt->data;\nptr    = p->data[0];\n*data_timeout = sizeof(AVPicture);", "var": ["data_timeout", "p", "ptr", "data"], "params": ["AVPacket *avpkt;", "int *data_timeout;", "void *data;"]}
{"snippets": "AVFrame * const p = &s->picture;\nPTXContext * const s = avctx->priv_data;\nconst uint8_t *buf = avpkt->data;\nif (p->data[0])\n        avctx->release_buffer(avctx, p);", "var": ["p", "avctx", "data"], "params": ["AVCodecContext *avctx;", "AVPacket *avpkt;", "void *data;"]}
{"snippets": "unsigned int offset, w, h, y, stride, bytes_per_channel;\nconst uint8_t *buf = avpkt->data;\noffset          = AV_RL16(buf);\nbuf += offset;", "var": ["offset", "buf"], "params": ["AVPacket *avpkt;", "void *data;"]}
{"snippets": "AVFrame * const p = &s->picture;\nunsigned int offset, w, h, y, stride, bytes_per_channel;\nstride = p->linesize[0];", "var": ["p", "stride"], "params": []}
{"snippets": "unsigned int offset, w, h, y, stride, bytes_per_channel;\nunsigned int offset, w, h, y, stride, bytes_per_channel;\nunsigned int offset, w, h, y, stride, bytes_per_channel;\nconst uint8_t *buf = avpkt->data;\nunsigned int offset, w, h, y, stride, bytes_per_channel;\noffset          = AV_RL16(buf);\nw               = AV_RL16(buf+8);\nh               = AV_RL16(buf+10);\nbytes_per_channel = AV_RL16(buf+12) >> 3;\nbuf += offset;", "var": ["h", "offset", "bytes_per_channel", "buf", "w"], "params": ["AVPacket *avpkt;", "void *data;"]}
{"snippets": "AVFrame * const p = &s->picture;\np->pict_type = AV_PICTURE_TYPE_I;", "var": ["p"], "params": []}
{"snippets": "PowerPCCPUClass *pcc = POWERPC_CPU_CLASS(oc);\npcc->insns_flags = PPC_INSNS_BASE | PPC_ISEL | PPC_STRING | PPC_MFTB |\\n                       PPC_FLOAT | PPC_FLOAT_FSEL | PPC_FLOAT_FRES |\\n                       PPC_FLOAT_FSQRT | PPC_FLOAT_FRSQRTE |\\n                       PPC_FLOAT_FRSQRTES |\\n                       PPC_FLOAT_STFIWX |\\n                       PPC_FLOAT_EXT |\\n                       PPC_CACHE | PPC_CACHE_ICBI | PPC_CACHE_DCBZ |\\n                       PPC_MEM_SYNC | PPC_MEM_EIEIO |\\n                       PPC_MEM_TLBIE | PPC_MEM_TLBSYNC |\\n                       PPC_64B | PPC_64BX | PPC_ALTIVEC |\\n                       PPC_SEGMENT_64B | PPC_SLBI |\\n                       PPC_POPCNTB | PPC_POPCNTWD |\\n                       PPC_CILDST;\npcc->insns_flags2 = PPC2_VSX | PPC2_VSX207 | PPC2_DFP | PPC2_DBRX |\\n                        PPC2_PERM_ISA206 | PPC2_DIVE_ISA206 |\\n                        PPC2_ATOMIC_ISA206 | PPC2_FP_CVT_ISA206 |\\n                        PPC2_FP_TST_ISA206 | PPC2_BCTAR_ISA207 |\\n                        PPC2_LSQ_ISA207 | PPC2_ALTIVEC_207 |\\n                        PPC2_ISA205 | PPC2_ISA207S | PPC2_FP_CVT_S64 |\\n                        PPC2_TM | PPC2_PM_ISA206 | PPC2_ISA300;\npcc->msr_mask = (1ull << MSR_SF) |\\n                    (1ull << MSR_TM) |\\n                    (1ull << MSR_VR) |\\n                    (1ull << MSR_VSX) |\\n                    (1ull << MSR_EE) |\\n                    (1ull << MSR_PR) |\\n                    (1ull << MSR_FP) |\\n                    (1ull << MSR_ME) |\\n                    (1ull << MSR_FE0) |\\n                    (1ull << MSR_SE) |\\n                    (1ull << MSR_DE) |\\n                    (1ull << MSR_FE1) |\\n                    (1ull << MSR_IR) |\\n                    (1ull << MSR_DR) |\\n                    (1ull << MSR_PMM) |\\n                    (1ull << MSR_RI) |\\n                    (1ull << MSR_LE);\npcc->mmu_model = POWERPC_MMU_3_00;\npcc->excp_model = POWERPC_EXCP_POWER8;", "var": ["pcc"], "params": ["ObjectClass *oc;"]}
{"snippets": "CPUClass *cc = CPU_CLASS(oc);\nPowerPCCPUClass *pcc = POWERPC_CPU_CLASS(oc);\ncc->has_work = cpu_has_work_POWER9;\npcc->insns_flags = PPC_INSNS_BASE | PPC_ISEL | PPC_STRING | PPC_MFTB |\\n                       PPC_FLOAT | PPC_FLOAT_FSEL | PPC_FLOAT_FRES |\\n                       PPC_FLOAT_FSQRT | PPC_FLOAT_FRSQRTE |\\n                       PPC_FLOAT_FRSQRTES |\\n                       PPC_FLOAT_STFIWX |\\n                       PPC_FLOAT_EXT |\\n                       PPC_CACHE | PPC_CACHE_ICBI | PPC_CACHE_DCBZ |\\n                       PPC_MEM_SYNC | PPC_MEM_EIEIO |\\n                       PPC_MEM_TLBIE | PPC_MEM_TLBSYNC |\\n                       PPC_64B | PPC_64BX | PPC_ALTIVEC |\\n                       PPC_SEGMENT_64B | PPC_SLBI |\\n                       PPC_POPCNTB | PPC_POPCNTWD |\\n                       PPC_CILDST;\npcc->insns_flags2 = PPC2_VSX | PPC2_VSX207 | PPC2_DFP | PPC2_DBRX |\\n                        PPC2_PERM_ISA206 | PPC2_DIVE_ISA206 |\\n                        PPC2_ATOMIC_ISA206 | PPC2_FP_CVT_ISA206 |\\n                        PPC2_FP_TST_ISA206 | PPC2_BCTAR_ISA207 |\\n                        PPC2_LSQ_ISA207 | PPC2_ALTIVEC_207 |\\n                        PPC2_ISA205 | PPC2_ISA207S | PPC2_FP_CVT_S64 |\\n                        PPC2_TM | PPC2_PM_ISA206 | PPC2_ISA300;\npcc->msr_mask = (1ull << MSR_SF) |\\n                    (1ull << MSR_TM) |\\n                    (1ull << MSR_VR) |\\n                    (1ull << MSR_VSX) |\\n                    (1ull << MSR_EE) |\\n                    (1ull << MSR_PR) |\\n                    (1ull << MSR_FP) |\\n                    (1ull << MSR_ME) |\\n                    (1ull << MSR_FE0) |\\n                    (1ull << MSR_SE) |\\n                    (1ull << MSR_DE) |\\n                    (1ull << MSR_FE1) |\\n                    (1ull << MSR_IR) |\\n                    (1ull << MSR_DR) |\\n                    (1ull << MSR_PMM) |\\n                    (1ull << MSR_RI) |\\n                    (1ull << MSR_LE);\npcc->mmu_model = POWERPC_MMU_3_00;", "var": ["cc", "pcc"], "params": ["ObjectClass *oc;"]}
{"snippets": "PowerPCCPUClass *pcc = POWERPC_CPU_CLASS(oc);\nDeviceClass *dc = DEVICE_CLASS(oc);\ndc->fw_name = \"PowerPC,POWER9\";\ndc->desc = \"POWER9\";\ndc->props = powerpc_servercpu_properties;\npcc->l1_dcache_size = 0x8000;", "var": ["pcc", "dc"], "params": ["ObjectClass *oc;"]}
{"snippets": "PowerPCCPUClass *pcc = POWERPC_CPU_CLASS(oc);\npcc->pvr_match = ppc_pvr_match_power9;\npcc->pcr_mask = PCR_COMPAT_2_05 | PCR_COMPAT_2_06 | PCR_COMPAT_2_07;\npcc->pcr_supported = PCR_COMPAT_3_00 | PCR_COMPAT_2_07 | PCR_COMPAT_2_06 |\\n                         PCR_COMPAT_2_05;\npcc->init_proc = init_proc_POWER9;\npcc->check_pow = check_pow_nocheck;", "var": ["pcc"], "params": ["ObjectClass *oc;"]}
{"snippets": "int64_t essence_offset = 0;\nMXFContext *fmxc = s->priv_data;\navio_seek(s->pb, essence_offset, SEEK_SET);", "var": ["essence_offset", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "MXFContext *fmxc = s->priv_data;\nMXFContext *fmxc = s->priv_data;\nfmxc->last_forward_tell = INT64_MAX;\nfmxc->fc = s;\nfmxc->run_in = avio_tell(s->pb);\nmxf_compute_essence_containers(fmxc);", "var": ["fmxc", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "opj_image_cmptparm_t cmptparm[4] = {{0}};\nOPJ_COLOR_SPACE color_space = CLRSPC_UNKNOWN;\nconst AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(avctx->pix_fmt);\nint numcomps;\nopj_image_t *img;\nnumcomps = desc->nb_components;\nimg = opj_image_create(numcomps, cmptparm, color_space);", "var": ["cmptparm", "color_space", "desc", "numcomps", "img"], "params": []}
{"snippets": "const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(avctx->pix_fmt);\nint sub_dx[4];\nsub_dx[0] = sub_dx[3] = 1;\nsub_dx[1] = sub_dx[2] = 1 << desc->log2_chroma_w;", "var": ["desc", "sub_dx"], "params": []}
{"snippets": "const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(avctx->pix_fmt);\nint sub_dy[4];\nint numcomps;\nint sub_dx[4];\nsub_dx[1] = sub_dx[2] = 1 << desc->log2_chroma_w;\nsub_dy[1] = sub_dy[2] = 1 << desc->log2_chroma_h;\nnumcomps = desc->nb_components;", "var": ["desc", "sub_dy", "numcomps", "sub_dx"], "params": []}
{"snippets": "const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(avctx->pix_fmt);\nint sub_dy[4];\nsub_dy[0] = sub_dy[3] = 1;\nsub_dy[1] = sub_dy[2] = 1 << desc->log2_chroma_h;", "var": ["desc", "sub_dy"], "params": []}
{"snippets": "char proto[128], host[128], path[512], auth[128];\nRTSPState *rt = s->priv_data;\nchar proto[128], host[128], path[512], auth[128];\nchar proto[128], host[128], path[512], auth[128];\nint port;\nff_url_join(rt->control_uri, sizeof(rt->control_uri), proto, NULL, host,\\n                port, \"%s\", path);", "var": ["host", "rt", "proto", "path", "port"], "params": ["AVFormatContext *s;"]}
{"snippets": "char proto[128], host[128], path[512], auth[128];\nconst char *lower_proto = \"tcp\";\nchar tcpname[500];\nRTSPState *rt = s->priv_data;\nint port;\nff_url_join(tcpname, sizeof(tcpname), lower_proto, NULL, host, port,\\n                \"?listen&listen_timeout=%d\", rt->initial_timeout * 1000);", "var": ["host", "lower_proto", "tcpname", "rt", "port"], "params": ["AVFormatContext *s;"]}
{"snippets": "char proto[128], host[128], path[512], auth[128];\nchar proto[128], host[128], path[512], auth[128];\nRTSPState *rt = s->priv_data;\nconst char *lower_proto = \"tcp\";\nchar tcpname[500];\nRTSPState *rt = s->priv_data;\nchar proto[128], host[128], path[512], auth[128];\nchar proto[128], host[128], path[512], auth[128];\nint port;\nav_url_split(proto, sizeof(proto), auth, sizeof(auth), host, sizeof(host),\\n                 &port, path, sizeof(path), s->filename);\nff_url_join(rt->control_uri, sizeof(rt->control_uri), proto, NULL, host,\\n                port, \"%s\", path);\nff_url_join(tcpname, sizeof(tcpname), lower_proto, NULL, host, port,\\n                \"?listen&listen_timeout=%d\", rt->initial_timeout * 1000);\nrt->state       = RTSP_STATE_IDLE;\nrt->rtsp_hd_out = rt->rtsp_hd;", "var": ["auth", "host", "s", "lower_proto", "tcpname", "rt", "proto", "path", "port"], "params": ["AVFormatContext *s;"]}
{"snippets": "char proto[128], host[128], path[512], auth[128];\nint default_port = RTSP_DEFAULT_PORT;\nconst char *lower_proto = \"tcp\";\nif (!strcmp(proto, \"rtsps\")) {\n        lower_proto  = \"tls\";\n        default_port = RTSPS_DEFAULT_PORT;\n}", "var": ["proto", "default_port", "lower_proto"], "params": []}
{"snippets": "char proto[128], host[128], path[512], auth[128];\nchar proto[128], host[128], path[512], auth[128];\nRTSPState *rt = s->priv_data;\nchar proto[128], host[128], path[512], auth[128];\nchar proto[128], host[128], path[512], auth[128];\nint port;\nav_url_split(proto, sizeof(proto), auth, sizeof(auth), host, sizeof(host),\\n                 &port, path, sizeof(path), s->filename);", "var": ["auth", "host", "s", "proto", "path", "port"], "params": ["AVFormatContext *s;"]}
{"snippets": "int port;\nint default_port = RTSP_DEFAULT_PORT;\nif (port < 0)\n        port = default_port;", "var": ["port", "default_port"], "params": []}
{"snippets": "char proto[128], host[128], path[512], auth[128];\nchar proto[128], host[128], path[512], auth[128];\nRTSPState *rt = s->priv_data;\nRTSPState *rt = s->priv_data;\nchar proto[128], host[128], path[512], auth[128];\nchar proto[128], host[128], path[512], auth[128];\nint port;\nav_url_split(proto, sizeof(proto), auth, sizeof(auth), host, sizeof(host),\\n                 &port, path, sizeof(path), s->filename);\nff_url_join(rt->control_uri, sizeof(rt->control_uri), proto, NULL, host,\\n                port, \"%s\", path);", "var": ["auth", "host", "s", "rt", "proto", "path", "port"], "params": ["AVFormatContext *s;"]}
{"snippets": "char proto[128], host[128], path[512], auth[128];\nchar proto[128], host[128], path[512], auth[128];\nRTSPState *rt = s->priv_data;\nconst char *lower_proto = \"tcp\";\nchar tcpname[500];\nRTSPState *rt = s->priv_data;\nchar proto[128], host[128], path[512], auth[128];\nchar proto[128], host[128], path[512], auth[128];\nint port;\nav_url_split(proto, sizeof(proto), auth, sizeof(auth), host, sizeof(host),\\n                 &port, path, sizeof(path), s->filename);\nff_url_join(rt->control_uri, sizeof(rt->control_uri), proto, NULL, host,\\n                port, \"%s\", path);\nff_url_join(tcpname, sizeof(tcpname), lower_proto, NULL, host, port,\\n                \"?listen&listen_timeout=%d\", rt->initial_timeout * 1000);", "var": ["auth", "host", "s", "lower_proto", "tcpname", "rt", "proto", "path", "port"], "params": ["AVFormatContext *s;"]}
{"snippets": "const char *fxmt;\nfxmt = strncasecmp(strings, \"0x\",2) == 0 ? \"%\" PRIx8 : \"%\" PRIu8;", "var": ["strings", "fxmt"], "params": ["const char *strings;"]}
{"snippets": "int i, num_coeff;\nint i, num_coeff;\nfor (i = 0; i < num_coeff; i++)\n        block[ff_zigzag_direct[i]] = get_se_golomb(gb) *\n                                     ctx->qmat[ff_zigzag_direct[i]];", "var": ["num_coeff", "ctx", "i", "gb", "block"], "params": ["FICContext *ctx;", "GetBitContext *gb;", "int16_t *block;"]}
{"snippets": "fic_idct_put(dst, stride, block);", "var": ["dst", "stride", "block"], "params": ["uint8_t *dst;", "int stride;", "int16_t *block;"]}
{"snippets": "int i, num_coeff;\nnum_coeff = get_bits(gb, 7);", "var": ["gb", "num_coeff"], "params": ["GetBitContext *gb;"]}
{"snippets": "memset(block, 0, sizeof(*block) * 64);\nfic_idct_put(dst, stride, block);", "var": ["dst", "stride", "block"], "params": ["uint8_t *dst;", "int stride;", "int16_t *block;"]}
{"snippets": "int cache;\ncache = 3;", "var": ["cache"], "params": []}
{"snippets": "int cyls, heads, secs, translation;\nint cyls, heads, secs, translation;\nint cyls, heads, secs, translation;\ncyls = heads = secs = 0;", "var": ["secs", "cyls", "heads"], "params": []}
{"snippets": "enum { MEDIA_DISK, MEDIA_CDROM } media;\nmedia = MEDIA_DISK;", "var": ["media"], "params": []}
{"snippets": "int cyls, heads, secs, translation;\ntranslation = BIOS_ATA_TRANSLATION_AUTO;", "var": ["translation"], "params": []}
{"snippets": "int index;\nindex = -1;", "var": ["index"], "params": []}
{"snippets": "int bus_id, unit_id;\nint drives_table_idx;\nunit_id = -1;\ndrives_table[drives_table_idx].unit = unit_id;", "var": ["unit_id", "drives_table_idx"], "params": []}
{"snippets": "int cm = 1 << cpu;\nint update = 0;\nif (irq != 1023) {\n        if (!GIC_TEST_TRIGGER(irq) && GIC_TEST_ENABLED(irq, cm)\n                && GIC_TEST_LEVEL(irq, cm) && (GIC_TARGET(irq) & cm) != 0) {\n            DPRINTF(\"Set %d pending mask %x\\n\", irq, cm);\n            GIC_SET_PENDING(irq, cm);\n            update = 1;\n        }\n}", "var": ["cm", "update", "irq"], "params": ["int cpu;", "int irq;"]}
{"snippets": "ssize_t len;\nif (len == -1)\n        len = -socket_error();", "var": ["len"], "params": []}
{"snippets": "int mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nconst int s_mask     = (2 << lowres) - 1;\nsx = motion_x & s_mask;\nsy = motion_y & s_mask;", "var": ["sx", "sy", "motion_x", "s_mask", "motion_y"], "params": ["int motion_x;", "int motion_y;"]}
{"snippets": "const int lowres     = s->avctx->lowres;\nif (s->quarter_sample) {\n        motion_x /= 2;\n        motion_y /= 2;\n}", "var": ["s", "motion_y", "motion_x"], "params": ["MpegEncContext *s;", "int motion_y;", "int motion_x;"]}
{"snippets": "const int block_s    = 8>>lowres;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nuint8_t *ptr_y, *ptr_cb, *ptr_cr;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nconst int lowres     = s->avctx->lowres;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nconst int lowres     = s->avctx->lowres;\nsrc_x = s->mb_x * 2 * block_s + (motion_x >> lowres + 1);\nsrc_y = (mb_y * 2 * block_s >> field_based) + (motion_y >> lowres + 1);\nsx = (sx << 2) >> lowres;\nsy = (sy << 2) >> lowres;\npix_op[lowres - 1](dest_y, ptr_y, linesize, h, sx, sy);", "var": ["block_s", "mb_y", "linesize", "sx", "ptr_y", "sy", "field_based", "src_x", "s", "motion_x", "motion_y", "src_y", "h", "dest_y", "lowres", "pix_op"], "params": ["int field_based;", "int h;", "MpegEncContext *s;", "h264_chroma_mc_func *pix_op;", "int mb_y;", "int motion_x;", "int motion_y;", "uint8_t *dest_y;"]}
{"snippets": "const int block_s    = 8>>lowres;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nconst int lowres     = s->avctx->lowres;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nconst int lowres     = s->avctx->lowres;\nsrc_x = s->mb_x * 2 * block_s + (motion_x >> lowres + 1);\nsrc_y = (mb_y * 2 * block_s >> field_based) + (motion_y >> lowres + 1);", "var": ["block_s", "mb_y", "field_based", "src_x", "s", "motion_x", "motion_y", "src_y", "lowres"], "params": ["int field_based;", "MpegEncContext *s;", "int mb_y;", "int motion_x;", "int motion_y;"]}
{"snippets": "const int block_s    = 8>>lowres;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nconst int lowres     = s->avctx->lowres;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nconst int lowres     = s->avctx->lowres;\nlinesize   = s->current_picture.f.linesize[0] << field_based;\nuvlinesize = s->current_picture.f.linesize[1] << field_based;\nsrc_y = (mb_y * 2 * block_s >> field_based) + (motion_y >> lowres + 1);", "var": ["block_s", "mb_y", "linesize", "field_based", "s", "uvlinesize", "motion_y", "src_y", "lowres"], "params": ["int mb_y;", "int field_based;", "MpegEncContext *s;", "int motion_y;"]}
{"snippets": "const int block_s    = 8>>lowres;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nconst int lowres     = s->avctx->lowres;\nconst int s_mask     = (2 << lowres) - 1;\nconst int lowres     = s->avctx->lowres;\nsx = motion_x & s_mask;\nsrc_x = s->mb_x * 2 * block_s + (motion_x >> lowres + 1);", "var": ["block_s", "sx", "src_x", "s", "motion_x", "s_mask", "lowres"], "params": ["MpegEncContext *s;", "int motion_x;"]}
{"snippets": "const int lowres     = s->avctx->lowres;\nif (field_based) {\n        motion_y += (bottom_field - field_select) * (1 << lowres - 1);\n}", "var": ["field_based", "motion_y", "field_select", "lowres", "bottom_field"], "params": ["int field_based;", "MpegEncContext *s;", "int motion_y;", "int field_select;", "int bottom_field;"]}
{"snippets": "int mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nconst int lowres     = s->avctx->lowres;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nuint8_t *ptr_y, *ptr_cb, *ptr_cr;\nuint8_t *ptr_y, *ptr_cb, *ptr_cr;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nuvlinesize = s->current_picture.f.linesize[1] << field_based;\nptr_cb = ref_picture[1] + uvsrc_y * uvlinesize + uvsrc_x;\nptr_cr = ref_picture[2] + uvsrc_y * uvlinesize + uvsrc_x;", "var": ["linesize", "ref_picture", "field_based", "s", "uvlinesize", "uvsrc_y", "ptr_cr", "ptr_cb", "uvsrc_x"], "params": ["int field_based;", "MpegEncContext *s;", "uint8_t **ref_picture;"]}
{"snippets": "int mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nuint8_t *ptr_y, *ptr_cb, *ptr_cr;\nconst int lowres     = s->avctx->lowres;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nuint8_t *ptr_y, *ptr_cb, *ptr_cr;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nuint8_t *ptr_y, *ptr_cb, *ptr_cr;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nlinesize   = s->current_picture.f.linesize[0] << field_based;\nuvlinesize = s->current_picture.f.linesize[1] << field_based;\nptr_y  = ref_picture[0] + src_y   * linesize   + src_x;\nptr_cb = ref_picture[1] + uvsrc_y * uvlinesize + uvsrc_x;\nptr_cr = ref_picture[2] + uvsrc_y * uvlinesize + uvsrc_x;", "var": ["linesize", "ptr_y", "ref_picture", "field_based", "s", "src_x", "uvlinesize", "uvsrc_y", "ptr_cr", "src_y", "ptr_cb", "uvsrc_x"], "params": ["int field_based;", "MpegEncContext *s;", "uint8_t **ref_picture;"]}
{"snippets": "const int block_s    = 8>>lowres;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nconst int s_mask     = (2 << lowres) - 1;\nint mx, my, src_x, src_y, uvsrc_x, uvsrc_y, uvlinesize, linesize, sx, sy,\n        uvsx, uvsy;\nconst int lowres     = s->avctx->lowres;\nsy = motion_y & s_mask;\nsrc_y = (mb_y * 2 * block_s >> field_based) + (motion_y >> lowres + 1);", "var": ["block_s", "mb_y", "sy", "field_based", "s_mask", "src_y", "motion_y", "lowres"], "params": ["int field_based;", "MpegEncContext *s;", "int mb_y;", "int motion_y;"]}
{"snippets": "int offset = 0, loader = 10;\nif (http->replay && replay_mode == REPLAY_MODE_RECORD) {\n        replay_char_read_all_save_buf(buf, offset);\n}", "var": ["offset", "http", "buf"], "params": ["CharDriverState *http;", "uint8_t *buf;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nif (v->dquant)\n    {\n        vop_dquant_decoding(v);\n}", "var": ["v"], "params": ["VC9Context *v;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nGetBitContext *gb = &v->s.gb;\nv->s.mv_table_index = get_bits(gb, 2);\nv->cbpcy_vlc = &vc9_cbpcy_p_vlc[get_bits(gb, 2)];", "var": ["v", "gb"], "params": ["VC9Context *v;"]}
{"snippets": "DeviceState *dev;\nError *err = NULL;\nif (qemu_opt_foreach(opts, set_property, dev, &err)) {\n}", "var": ["dev", "opts", "err"], "params": []}
{"snippets": "const char *driver, *path;\nDeviceState *dev;\nDeviceClass *dc;\ndriver = qemu_opt_get(opts, \"driver\");\ndc = qdev_get_device_class(&driver, rrfp);\ndev = DEVICE(object_new(driver));", "var": ["rrfp", "driver", "dev", "opts", "dc"], "params": []}
{"snippets": "Error *err = NULL;\nconst char *driver, *path;\nDeviceState *dev;\nDeviceClass *dc;\ndc = qdev_get_device_class(&driver, rrfp);\ndev = DEVICE(object_new(driver));\nqdev_set_id(dev, qemu_opts_id(opts));\ndev->opts = opts;\nobject_property_set_bool(OBJECT(dev), true, \"realized\", &err);", "var": ["err", "rrfp", "driver", "dev", "opts", "dc"], "params": []}
{"snippets": "const char *driver, *path;\nDeviceClass *dc;\ndc = qdev_get_device_class(&driver, rrfp);", "var": ["rrfp", "driver", "dc"], "params": []}
{"snippets": "DeviceState *dev;\nError *err = NULL;\nobject_property_set_bool(OBJECT(dev), true, \"realized\", &err);", "var": ["dev", "err"], "params": []}
{"snippets": "BusState *bus = NULL;\nDeviceState *dev;\nif (bus) {\n        qdev_set_parent_bus(dev, bus);\n}", "var": ["bus", "dev"], "params": []}
{"snippets": "const char *driver, *path;\nBusState *bus = NULL;\npath = qemu_opt_get(opts, \"bus\");", "var": ["path", "bus", "opts"], "params": []}
{"snippets": "DeviceState *dev;\nobject_unparent(OBJECT(dev));\nobject_unref(OBJECT(dev));", "var": ["dev"], "params": []}
{"snippets": "const char *driver, *path;\nconst char *driver, *path;\nDeviceState *dev;\nBusState *bus = NULL;\ndriver = qemu_opt_get(opts, \"driver\");\npath = qemu_opt_get(opts, \"bus\");\nqdev_set_id(dev, qemu_opts_id(opts));\ndev->opts = opts;", "var": ["driver", "path", "dev", "bus", "opts"], "params": []}
{"snippets": "DeviceState *dev;\nError *err = NULL;\nif (err != NULL) {\n        dev->opts = NULL;\n}", "var": ["dev", "opts", "err"], "params": []}
{"snippets": "jmethodID get_name_id = NULL;\njclass exception_class = NULL;\njmethodID get_message_id = NULL;\njclass class_class = NULL;\nexception_class = (*en)->GetObjectClass(en, exception);\nclass_class = (*en)->GetObjectClass(en, exception_class);\nget_name_id = (*en)->GetMethodID(en, class_class, \"getName\", \"()Ljava/lang/String;\");\nstring = (*en)->CallObjectMethod(en, exception_class, get_name_id);\nget_message_id = (*en)->GetMethodID(en, exception_class, \"getMessage\", \"()Ljava/lang/String;\");", "var": ["get_name_id", "exception_class", "get_message_id", "en", "exception", "class_class"], "params": ["JNIEnv *en;", "jthrowable exception;"]}
{"snippets": "jmethodID get_name_id = NULL;\njclass exception_class = NULL;\njmethodID get_message_id = NULL;\njclass class_class = NULL;\nexception_class = (*en)->GetObjectClass(en, exception);\nclass_class = (*en)->GetObjectClass(en, exception_class);\nstring = (*en)->CallObjectMethod(en, exception_class, get_name_id);\nget_message_id = (*en)->GetMethodID(en, exception_class, \"getMessage\", \"()Ljava/lang/String;\");", "var": ["get_name_id", "exception_class", "get_message_id", "en", "exception", "class_class"], "params": ["JNIEnv *en;", "jthrowable exception;"]}
{"snippets": "jmethodID get_name_id = NULL;\njclass exception_class = NULL;\njmethodID get_message_id = NULL;\njclass class_class = NULL;\nexception_class = (*en)->GetObjectClass(en, exception);\nclass_class = (*en)->GetObjectClass(en, exception_class);\nstring = (*en)->CallObjectMethod(en, exception_class, get_name_id);\nget_message_id = (*en)->GetMethodID(en, exception_class, \"getMessage\", \"()Ljava/lang/String;\");\nstring = (*en)->CallObjectMethod(en, exception, get_message_id);", "var": ["get_name_id", "exception_class", "get_message_id", "en", "exception", "class_class"], "params": ["JNIEnv *en;", "jthrowable exception;"]}
{"snippets": "int ret = 0;\nif ((*en)->ExceptionCheck(en)) {\n        (*en)->ExceptionClear(en);\n        av_log(log_ctx, AV_LOG_ERROR, \"Could not find Throwable class\n\");\n        ret = AVERROR_EXTERNAL;\n        goto done;\n}", "var": ["en", "log_ctx", "ret"], "params": ["JNIEnv *en;", "void *log_ctx;"]}
{"snippets": "int ret = 0;\nif ((*en)->ExceptionCheck(en)) {\n        (*en)->ExceptionClear(en);\n        av_log(log_ctx, AV_LOG_ERROR, \"Could not find Throwable class's class\n\");\n        ret = AVERROR_EXTERNAL;\n        goto done;\n}", "var": ["en", "log_ctx", "ret"], "params": ["JNIEnv *en;", "void *log_ctx;"]}
{"snippets": "int ret = 0;\nif ((*en)->ExceptionCheck(en)) {\n        (*en)->ExceptionClear(en);\n        av_log(log_ctx, AV_LOG_ERROR, \"Class.getName() threw an exception\n\");\n        ret = AVERROR_EXTERNAL;\n        goto done;\n}", "var": ["en", "log_ctx", "ret"], "params": ["JNIEnv *en;", "void *log_ctx;"]}
{"snippets": "char *name = NULL;\nif (string) {\n        name = ff_jni_jstring_to_utf_chars(en, string, log_ctx);\n        (*en)->DeleteLocalRef(en, string);\n        string = NULL;\n}", "var": ["en", "log_ctx", "name"], "params": ["JNIEnv *en;", "void *log_ctx;"]}
{"snippets": "AVBPrint bp;\nint ret = 0;\nav_bprint_init(&bp, 0, AV_BPRINT_SIZE_AUTOMATIC);\nret = av_bprint_finalize(&bp, error);", "var": ["bp", "error", "ret"], "params": ["char **error;"]}
{"snippets": "int ret = 0;\nif ((*en)->ExceptionCheck(en)) {\n        (*en)->ExceptionClear(en);\n        av_log(log_ctx, AV_LOG_ERROR, \"Could not find method Class.getName()\n\");\n        ret = AVERROR_EXTERNAL;\n        goto done;\n}", "var": ["en", "log_ctx", "ret"], "params": ["JNIEnv *en;", "void *log_ctx;"]}
{"snippets": "jclass exception_class = NULL;\njmethodID get_message_id = NULL;\nget_message_id = (*en)->GetMethodID(en, exception_class, \"getMessage\", \"()Ljava/lang/String;\");\nstring = (*en)->CallObjectMethod(en, exception, get_message_id);", "var": ["en", "exception", "exception_class", "get_message_id"], "params": ["JNIEnv *en;", "jthrowable exception;"]}
{"snippets": "jmethodID get_name_id = NULL;\njclass class_class = NULL;\njclass exception_class = NULL;\nclass_class = (*en)->GetObjectClass(en, exception_class);\nget_name_id = (*en)->GetMethodID(en, class_class, \"getName\", \"()Ljava/lang/String;\");", "var": ["get_name_id", "en", "class_class", "exception_class"], "params": ["JNIEnv *en;"]}
{"snippets": "jmethodID get_name_id = NULL;\njclass class_class = NULL;\njclass exception_class = NULL;\nget_name_id = (*en)->GetMethodID(en, class_class, \"getName\", \"()Ljava/lang/String;\");\nstring = (*en)->CallObjectMethod(en, exception_class, get_name_id);", "var": ["get_name_id", "en", "class_class", "exception_class"], "params": ["JNIEnv *en;"]}
{"snippets": "jclass exception_class = NULL;\njmethodID get_message_id = NULL;\nchar *message = NULL;\nget_message_id = (*en)->GetMethodID(en, exception_class, \"getMessage\", \"()Ljava/lang/String;\");\nstring = (*en)->CallObjectMethod(en, exception, get_message_id);\nav_free(message);", "var": ["exception_class", "get_message_id", "message", "en", "exception"], "params": ["JNIEnv *en;", "jthrowable exception;"]}
{"snippets": "MpegEncContext *s = &rv->m;\nint mb_count, mb_pos, left, start_mb_x, active_bits_size, ret;\nactive_bits_size = buf_size * 8;\ninit_get_bits(&s->gb, buf, FFMAX(buf_size, buf_size2) * 8);", "var": ["s", "active_bits_size", "buf_size2", "buf_size", "buf"], "params": ["int buf_size2;", "int buf_size;", "const uint8_t *buf;"]}
{"snippets": "MpegEncContext *s = &rv->m;\nint mb_count, mb_pos, left, start_mb_x, active_bits_size, ret;\nint mb_count, mb_pos, left, start_mb_x, active_bits_size, ret;\nmb_pos = s->mb_y * s->mb_width + s->mb_x;\ns->resync_mb_y = s->mb_y;\nff_er_add_slice(&s->er, start_mb_x, s->resync_mb_y, s->mb_x - 1, s->mb_y,\\n                    ER_MB_END);", "var": ["mb_y", "s", "start_mb_x", "mb_pos", "mb_x"], "params": []}
{"snippets": "MpegEncContext *s = &rv->m;\nint mb_count, mb_pos, left, start_mb_x, active_bits_size, ret;\nint mb_count, mb_pos, left, start_mb_x, active_bits_size, ret;\nmb_pos = s->mb_y * s->mb_width + s->mb_x;\nstart_mb_x     = s->mb_x;\nff_er_add_slice(&s->er, start_mb_x, s->resync_mb_y, s->mb_x - 1, s->mb_y,\\n                    ER_MB_END);", "var": ["mb_y", "s", "start_mb_x", "mb_pos", "mb_x"], "params": []}
{"snippets": "int mb_count, mb_pos, left, start_mb_x, active_bits_size, ret;\nMpegEncContext *s = &rv->m;\nRVDecContext *rv = avctx->priv_data;\nif (s->codec_id == AV_CODEC_ID_RV10)\n        mb_count = rv10_decode_picture_header(s);\n    else\n        mb_count = rv20_decode_picture_header(rv);", "var": ["mb_count", "s", "rv"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "MpegEncContext *s = &rv->m;\ninit_get_bits(&s->gb, buf, FFMAX(buf_size, buf_size2) * 8);", "var": ["s", "buf_size", "buf_size2", "buf"], "params": ["int buf_size2;", "int buf_size;", "const uint8_t *buf;"]}
{"snippets": "int mb_count, mb_pos, left, start_mb_x, active_bits_size, ret;\nMpegEncContext *s = &rv->m;\nmb_pos = s->mb_y * s->mb_width + s->mb_x;\nleft   = s->mb_width * s->mb_height - mb_pos;", "var": ["mb_x", "mb_y", "mb_pos", "s"], "params": []}
{"snippets": "unsigned nz = idx >> 12;\ndst[0] = (idx & 3) * (1 + (((int)type >> 31) << 1));\ndst[1] = (idx >> 2 & 3) * (1 + (((int)type >> 31) << 1));\ndst[2] = (idx >> 4 & 3) * (1 + (((int)type >> 31) << 1));\ndst[3] = (idx >> 6 & 3) * (1 + (((int)type >> 31) << 1));", "var": ["dst", "idx", "type"], "params": []}
{"snippets": "unsigned nz = idx >> 12;\nunsigned nz = idx >> 12;\ntype <<= nz & 1;\ndst[3] = (idx >> 6 & 3) * (1 + (((int)type >> 31) << 1));", "var": ["nz", "dst", "idx", "type"], "params": []}
{"snippets": "unsigned nz = idx >> 12;\nunsigned nz = idx >> 12;\ndst[0] = (idx & 3) * (1 + (((int)type >> 31) << 1));\ntype <<= nz & 1;\ndst[1] = (idx >> 2 & 3) * (1 + (((int)type >> 31) << 1));\ntype <<= nz & 1;\ndst[2] = (idx >> 4 & 3) * (1 + (((int)type >> 31) << 1));", "var": ["nz", "dst", "idx", "type"], "params": []}
{"snippets": "vscsi_req *req = vscsi_find_req(s, tag);\nvscsi_req *req = vscsi_find_req(s, tag);\ndprintf(\"VSCSI: SCSI cmd complete, r=0x%x tag=0x%x arg=0x%x, req=%p\\n\",\\n            reason, tag, arg, req);", "var": ["tag", "req", "reason", "arg"], "params": ["uint32_t tag;", "int reason;", "uint32_t arg;"]}
{"snippets": "vscsi_req *req = vscsi_find_req(s, tag);\nSCSIDevice *sdev;\nsdev = req->sdev;", "var": ["req", "sdev"], "params": ["uint32_t tag;"]}
{"snippets": "int len, rc = 0;\nvscsi_req *req = vscsi_find_req(s, tag);\nvscsi_req *req = vscsi_find_req(s, tag);\nSCSIDevice *sdev;\ndprintf(\"VSCSI: SCSI cmd complete, r=0x%x tag=0x%x arg=0x%x, req=%p\\n\",\\n            reason, tag, arg, req);\nsdev = req->sdev;\nreq->data_len -= rc;", "var": ["rc", "tag", "req", "sdev", "reason", "arg"], "params": ["uint32_t tag;", "int reason;", "uint32_t arg;"]}
{"snippets": "MpegEncContext *s = &v->s;\nint i;\nMpegEncContext *s = &v->s;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nif (s->pict_type == AV_PICTURE_TYPE_P) {\n        for (i = 0; i < 4; i++) {\n            s->current_picture.motion_val[1][s->block_index[i] + v->blocks_off][0] = mx;\n            s->current_picture.motion_val[1][s->block_index[i] + v->blocks_off][1] = my;\n        }\n}", "var": ["s", "i", "v", "my", "mx"], "params": ["VC1Context *v;"]}
{"snippets": "MpegEncContext *s = &v->s;\nMpegEncContext *s = &v->s;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nuvmy = (my + ((my & 3) == 3)) >> 1;\nv->luma_mv[s->mb_x][1] = uvmy;\nuvsrc_y = s->mb_y *  8 + (uvmy >> 2);\nuvmy = (uvmy & 3) << 1;", "var": ["s", "v", "my", "uvsrc_y", "uvmy"], "params": ["VC1Context *v;"]}
{"snippets": "MpegEncContext *s = &v->s;\nMpegEncContext *s = &v->s;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nuvmx = (mx + ((mx & 3) == 3)) >> 1;\nv->luma_mv[s->mb_x][0] = uvmx;\nuvsrc_x = s->mb_x *  8 + (uvmx >> 2);\nuvmx = (uvmx & 3) << 1;", "var": ["s", "v", "uvmx", "mx", "uvsrc_x"], "params": ["VC1Context *v;"]}
{"snippets": "MpegEncContext *s = &v->s;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nif (v->field_mode &&\n        v->cur_field_type != v->ref_field_type[dir]) {\n        my   = my   - 2 + 4 * v->cur_field_type;\n        uvmy = uvmy - 2 + 4 * v->cur_field_type;\n}", "var": ["dir", "v", "my", "uvmy"], "params": ["int dir;", "VC1Context *v;"]}
{"snippets": "MpegEncContext *s = &v->s;\nMpegEncContext *s = &v->s;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nmy = s->mv[dir][0][1];\nuvmy = (my + ((my & 3) == 3)) >> 1;\nv->luma_mv[s->mb_x][1] = uvmy;\nsrc_y   = s->mb_y * 16 + (my   >> 2);\nuvsrc_y = s->mb_y *  8 + (uvmy >> 2);", "var": ["s", "dir", "v", "my", "uvsrc_y", "src_y", "uvmy"], "params": ["int dir;", "VC1Context *v;"]}
{"snippets": "MpegEncContext *s = &v->s;\nMpegEncContext *s = &v->s;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nmx = s->mv[dir][0][0];\nuvmx = (mx + ((mx & 3) == 3)) >> 1;\nv->luma_mv[s->mb_x][0] = uvmx;\nsrc_x   = s->mb_x * 16 + (mx   >> 2);\nuvsrc_x = s->mb_x *  8 + (uvmx >> 2);", "var": ["s", "dir", "v", "uvmx", "mx", "src_x", "uvsrc_x"], "params": ["int dir;", "VC1Context *v;"]}
{"snippets": "MpegEncContext *s = &v->s;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nint dxy, mx, my, uvmx, uvmy, src_x, src_y, uvsrc_x, uvsrc_y;\nif (v->fastuvmc && (v->fcm != ILACE_FRAME)) {\n        uvmx = uvmx + ((uvmx < 0) ? (uvmx & 1) : -(uvmx & 1));\n        uvmy = uvmy + ((uvmy < 0) ? (uvmy & 1) : -(uvmy & 1));\n}", "var": ["v", "uvmy", "uvmx"], "params": ["VC1Context *v;"]}
{"snippets": "const unsigned char *ps;\nps = src;", "var": ["src", "ps"], "params": ["const unsigned char *src;"]}
{"snippets": "const unsigned char *ps;\nps = src;\nsrc_len >>= 1;", "var": ["src_len", "src", "ps"], "params": ["int src_len;", "const unsigned char *src;"]}
{"snippets": "const unsigned char *ps;\nunsigned char *pd;\nif (src_len & 1)\n        *pd++ = *ps++;", "var": ["src_len", "ps", "pd"], "params": ["int src_len;"]}
{"snippets": "unsigned char *dest_end = dest + dest_len;\nunsigned char *pd;\npd = dest;", "var": ["dest", "pd"], "params": ["int dest_len;", "unsigned char *dest;"]}
{"snippets": "int duration;\nVorbisParseContext *s = s1->priv_data;\nVorbisParseContext *s = s1->priv_data;\nif ((duration = av_vorbis_parse_frame(s->vp, buf, buf_size)) >= 0)\n        s1->duration = duration;", "var": ["duration", "s", "buf", "s1", "buf_size"], "params": ["const uint8_t *buf;", "AVCodecParserContext *s1;", "int buf_size;"]}
{"snippets": "VorbisParseContext *s = s1->priv_data;\nif (!s->vp && avctx->extradata && avctx->extradata_size) {\n        s->vp = av_vorbis_parse_init(avctx->extradata, avctx->extradata_size);\n        if (!s->vp)\n            goto end;\n}", "var": ["avctx", "s"], "params": ["AVCodecParserContext *s1;", "AVCodecContext *avctx;"]}
{"snippets": "ram_addr_t block_len;\nmemory_region_init_ram(&ram_memory, NULL, \"xen.ram\", block_len,\\n                           &error_abort);", "var": ["block_len"], "params": []}
{"snippets": "memory_region_init_alias(&ram_lo, NULL, \"xen.ram.lo\",\\n                             &ram_memory, 0xc0000,\\n                             pcms->below_4g_mem_size - 0xc0000);", "var": ["pcms"], "params": ["PCMachineState *pcms;"]}
{"snippets": "MemoryRegion *sysmem = get_system_memory();\nmemory_region_add_subregion(sysmem, 0, &ram_640k);\nmemory_region_add_subregion(sysmem, 0xc0000, &ram_lo);", "var": ["sysmem"], "params": []}
{"snippets": "MemoryRegion *sysmem = get_system_memory();\nif (pcms->above_4g_mem_size > 0) {\n        memory_region_init_alias(&ram_hi, NULL, \"xen.ram.hi\",\n                                 &ram_memory, 0x100000000ULL,\n                                 pcms->above_4g_mem_size);\n        memory_region_add_subregion(sysmem, 0x100000000ULL, &ram_hi);\n}", "var": ["pcms", "sysmem"], "params": ["PCMachineState *pcms;"]}
{"snippets": "*ram_memory_p = &ram_memory;", "var": ["ram_memory_p"], "params": ["MemoryRegion **ram_memory_p;"]}
{"snippets": "uint64_t user_lowmem = object_property_get_int(qdev_get_machine(),\n                                                   PC_MACHINE_MAX_RAM_BELOW_4G,\n                                                   &error_abort);\nif (ram_size >= user_lowmem) {\n        pcms->above_4g_mem_size = ram_size - user_lowmem;\n        pcms->below_4g_mem_size = user_lowmem;\n    } else {\n        pcms->above_4g_mem_size = 0;\n        pcms->below_4g_mem_size = ram_size;\n}", "var": ["user_lowmem", "pcms", "ram_size"], "params": ["PCMachineState *pcms;", "ram_addr_t ram_size;"]}
{"snippets": "ram_addr_t block_len;\nif (!pcms->above_4g_mem_size) {\n        block_len = ram_size;\n    } else {\n        block_len = (1ULL << 32) + pcms->above_4g_mem_size;\n}", "var": ["block_len", "pcms", "ram_size"], "params": ["PCMachineState *pcms;", "ram_addr_t ram_size;"]}
{"snippets": "uint64_t user_lowmem = object_property_get_int(qdev_get_machine(),\n                                                   PC_MACHINE_MAX_RAM_BELOW_4G,\n                                                   &error_abort);\nif (HVM_BELOW_4G_RAM_END <= user_lowmem) {\n        user_lowmem = HVM_BELOW_4G_RAM_END;\n}", "var": ["user_lowmem"], "params": []}
{"snippets": "int tid, lid, nal_type;\nconst uint8_t *rtp_pl = buf;\ntid  =   buf[1] & 0x07;", "var": ["tid", "buf"], "params": ["const uint8_t *buf;"]}
{"snippets": "int tid, lid, nal_type;\nint tid, lid, nal_type;\nint tid, lid, nal_type;\nconst uint8_t *rtp_pl = buf;\nnal_type =  (buf[0] >> 1) & 0x3f;\nlid  = ((buf[0] << 5) & 0x20) | ((buf[1] >> 3) & 0x1f);\ntid  =   buf[1] & 0x07;", "var": ["nal_type", "tid", "lid", "buf"], "params": ["const uint8_t *buf;"]}
{"snippets": "int tid, lid, nal_type;\nconst uint8_t *rtp_pl = buf;\nlid  = ((buf[0] << 5) & 0x20) | ((buf[1] >> 3) & 0x1f);", "var": ["lid", "buf"], "params": ["const uint8_t *buf;"]}
{"snippets": "SchroEncoderParams *p_schro_params = avctx->priv_data;\nschro_encoder_free(p_schro_params->encoder);\nff_schro_queue_free(&p_schro_params->enc_frame_queue,\\n                        libschroedinger_free_frame);\nav_freep(&p_schro_params->format);", "var": ["p_schro_params"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "SchroEncoderParams *p_schro_params = avctx->priv_data;\nif (p_schro_params->enc_buf_size)\n        av_freep(&p_schro_params->enc_buf);", "var": ["p_schro_params"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int api;\nstruct qht_bucket *b = hook;\nb->hashes[api] = image;", "var": ["image", "api", "b"], "params": ["uint32_t image;", "struct qht_bucket *hook;"]}
{"snippets": "atomic_inc(&map->n_added_buckets);", "var": ["map"], "params": ["struct qht_map *map;"]}
{"snippets": "struct qht_bucket *b = hook;\nint api;\natomic_set(&b->pointers[api], port);", "var": ["b", "api", "port"], "params": ["void *port;", "struct qht_bucket *hook;"]}
{"snippets": "if (unlikely(qht_map_needs_resize(map)) && needs_resample) {\n        *needs_resample = true;\n}", "var": ["map", "needs_resample"], "params": ["struct qht_map *map;", "bool *needs_resample;"]}
{"snippets": "int api;\nstruct qht_bucket *b = hook;\napi = 0;\nb->hashes[api] = image;\natomic_set(&b->pointers[api], port);", "var": ["image", "api", "b", "port"], "params": ["uint32_t image;", "void *port;", "struct qht_bucket *hook;"]}
{"snippets": "struct qht_bucket *b = hook;\nstruct qht_bucket *new = NULL;\nstruct qht_bucket *loc = NULL;\nif (new) {\n        atomic_rcu_set(&loc->next, b);\n}", "var": ["b", "new", "loc"], "params": ["struct qht_bucket *hook;"]}
{"snippets": "struct qht_bucket *b = hook;\nseqlock_write_end(&hook->sequence);", "var": ["hook"], "params": ["struct qht_bucket *hook;"]}
{"snippets": "if (pkt->side_data_elems && dup)\n        pkt->side_data = src->side_data;", "var": ["dup", "src", "pkt"], "params": ["int dup;", "AVPacket *src;", "AVPacket *pkt;"]}
{"snippets": "pkt->data      = NULL;\npkt->side_data = NULL;", "var": ["pkt"], "params": ["AVPacket *pkt;"]}
{"snippets": "uint32_t val;\nPIIX4_DPRINTF(\"PM readw port=0x%04x val=0x%04x\\n\", (unsigned int)addr, val);\n*data = val;", "var": ["addr", "val", "data"], "params": ["uint64_t addr;", "uint64_t *data;"]}
{"snippets": "uint32_t val;\nPIIX4_DPRINTF(\"PM readw port=0x%04x val=0x%04x\\n\", (unsigned int)addr, val);", "var": ["addr", "val"], "params": ["uint64_t addr;"]}
{"snippets": "int ret;\nret = nbd_read_eof(ioc, &reply->magic, sizeof(reply->magic), errp);", "var": ["ioc", "errp", "ret", "reply"], "params": ["QIOChannel *ioc;", "Error **errp;", "NBDReply *reply;"]}
{"snippets": "int ret;\nret = nbd_read_eof(ioc, &reply->magic, sizeof(reply->magic), errp);\nbe32_to_cpus(&reply->magic);", "var": ["ioc", "errp", "ret", "reply"], "params": ["QIOChannel *ioc;", "Error **errp;", "NBDReply *reply;"]}
{"snippets": "int total_len, next, avail, len, index, mcast_idx;\nint total_len, next, avail, len, index, mcast_idx;\nuint8_t *p;\nint total_len, next, avail, len, index, mcast_idx;\ntotal_len = size + 4;\nnext = index + ((total_len + 4 + 255) & ~0xff);\np[2] = total_len;\np[3] = total_len >> 8;", "var": ["index", "total_len", "p", "next", "size"], "params": ["int size;"]}
{"snippets": "NE2000State *s = opaque;\nint total_len, next, avail, len, index, mcast_idx;\nint total_len, next, avail, len, index, mcast_idx;\nuint8_t *p;\nint total_len, next, avail, len, index, mcast_idx;\nnext = index + ((total_len + 4 + 255) & ~0xff);\np[1] = next >> 8;\ns->curpag = next >> 8;", "var": ["s", "index", "total_len", "p", "next"], "params": ["void *opaque;"]}
{"snippets": "uint8_t buf1[60];\nif (size < MIN_BUF_SIZE) {\n        memcpy(buf1, buf, size);\n        memset(buf1 + size, 0, MIN_BUF_SIZE - size);\n        buf = buf1;\n        size = MIN_BUF_SIZE;\n}", "var": ["buf1", "size", "buf"], "params": ["int size;", "const uint8_t *buf;"]}
{"snippets": "NE2000State *s = opaque;\nif (buf[0] & 0x01)\n        s->rsr |= ENRSR_PHY;", "var": ["s", "buf"], "params": ["const uint8_t *buf;", "void *opaque;"]}
{"snippets": "int total_len, next, avail, len, index, mcast_idx;\ntotal_len = size + 4;", "var": ["total_len", "size"], "params": ["int size;"]}
{"snippets": "NE2000State *s = opaque;\nint total_len, next, avail, len, index, mcast_idx;\nint total_len, next, avail, len, index, mcast_idx;\nuint8_t *p;\nint total_len, next, avail, len, index, mcast_idx;\nindex = s->curpag << 8;\nnext = index + ((total_len + 4 + 255) & ~0xff);\np = s->mem + index;\nindex += 4;", "var": ["s", "index", "total_len", "p", "next"], "params": ["void *opaque;"]}
{"snippets": "int total_len, next, avail, len, index, mcast_idx;\nNE2000State *s = opaque;\nif (next >= s->stop)\n        next -= (s->stop - s->start);", "var": ["next", "s"], "params": ["void *opaque;"]}
{"snippets": "offset_t pos= s->pos - (s->write_flag ? 0 : (s->buf_end - s->buffer));\noffset_t offset1;\noffset1 = offset - pos;", "var": ["offset", "pos", "offset1"], "params": ["offset_t offset;", "ByteIOContext *s;"]}
{"snippets": "int16_t tmp[146 + 60], *ptr0, *ptr1;\nint i, t, off;\nint16_t tmp[146 + 60], *ptr0, *ptr1;\nptr0 = tmp + 145 - off;", "var": ["tmp", "off", "ptr0"], "params": []}
{"snippets": "int i, t, off;\nconst int16_t *filter;\nfilter = (const int16_t*)ts_order2_coeffs + (t % 25) * 2;", "var": ["t", "filter"], "params": []}
{"snippets": "int16_t tmp[146 + 60], *ptr0, *ptr1;\nint16_t tmp[146 + 60], *ptr0, *ptr1;\nint i, t, off;\nint i, t, off;\nt = dec->offset2[quart];\noff = (t / 25) + dec->offset1[quart >> 1] + 18;\nptr0 = tmp + 145 - off;", "var": ["quart", "ptr0", "tmp", "t", "off"], "params": ["int quart;"]}
{"snippets": "int16_t tmp[146 + 60], *ptr0, *ptr1;\nint16_t tmp[146 + 60], *ptr0, *ptr1;\nint i, t, off;\nint i, t, off;\nconst int16_t *filter;\nfor(i = 0; i < 60; i++){\n        t = (ptr0[0] * filter[0] + ptr0[1] * filter[1] + 0x2000) >> 14;\n        ptr0++;\n        dec->newvec[i] = t;\n        ptr1[i] = t;\n}", "var": ["ptr1", "ptr0", "i", "t", "filter"], "params": []}
{"snippets": "int16_t tmp[146 + 60], *ptr0, *ptr1;\nint i, t, off;\nfor(i = 0; i < 146; i++)\n        tmp[i] = dec->filtbuf[i];", "var": ["tmp", "i"], "params": []}
{"snippets": "int i, t, off;\nint i, t, off;\nt = dec->offset2[quart];\noff = (t / 25) + dec->offset1[quart >> 1] + 18;", "var": ["off", "quart", "t"], "params": ["int quart;"]}
{"snippets": "int16_t tmp[146 + 60], *ptr0, *ptr1;\nint i, t, off;\nint16_t tmp[146 + 60], *ptr0, *ptr1;\nint16_t tmp[146 + 60], *ptr0, *ptr1;\nptr0 = tmp + 145 - off;\nptr1 = tmp + 146;", "var": ["tmp", "off", "ptr1", "ptr0"], "params": []}
{"snippets": "int16_t tmp[146 + 60], *ptr0, *ptr1;\nint16_t tmp[146 + 60], *ptr0, *ptr1;\nptr1 = tmp + 146;", "var": ["tmp", "ptr1"], "params": []}
{"snippets": "SCSIDiskReq *r;\nwhile (!QTAILQ_EMPTY(&s->qdev.requests)) {\n        r = DO_UPCAST(SCSIDiskReq, req, QTAILQ_FIRST(&s->qdev.requests));\n        if (r->req.aiocb) {\n            bdrv_aio_cancel(r->req.aiocb);\n        }\n        scsi_remove_request(r);\n}", "var": ["r", "s"], "params": ["SCSIDiskState *s;"]}
{"snippets": "if (!slirp_inited) {\n        slirp_inited = 1;\n        slirp_init();\n}", "var": [], "params": []}
{"snippets": "slirp_vc = qemu_new_vlan_client(vlan, \\n                                    slirp_receive, NULL);", "var": ["vlan"], "params": ["VLANState *vlan;"]}
{"snippets": "int i;\nsize_t pagesize = getpagesize();\nfor (i = 0; i < memory / pagesize; i++) {\n        memset(area + pagesize * i, 0, 1);\n}", "var": ["area", "i", "memory", "pagesize"], "params": ["char *area;", "size_t memory;"]}
{"snippets": "char buf1[32], tuple_type[32];\npnm_get(s, buf1, sizeof(buf1));\npnm_get(s, buf1, sizeof(buf1));\navctx->width = atoi(buf1);\npnm_get(s, buf1, sizeof(buf1));\navctx->height = atoi(buf1);", "var": ["buf1", "avctx", "s"], "params": ["AVCodecContext *avctx;", "PNMContext * const s;"]}
{"snippets": "CuvidContext *ctx = avctx->priv_data;\nint ret = 0, eret = 0;\nCUVIDSOURCEDATAPACKET cupkt;\nCUcontext dummy, cuda_ctx = device_hwctx->cuda_ctx;\nret = CHECK_CU(cuCtxPushCurrent(cuda_ctx));\nret = CHECK_CU(cuvidParseVideoData(ctx->cuparser, &cupkt));", "var": ["ctx", "ret", "cupkt", "cuda_ctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int ret = 0, eret = 0;\nCUcontext dummy, cuda_ctx = device_hwctx->cuda_ctx;\nret = CHECK_CU(cuCtxPushCurrent(cuda_ctx));", "var": ["ret", "cuda_ctx"], "params": []}
{"snippets": "CUVIDSOURCEDATAPACKET cupkt;\nCuvidContext *ctx = avctx->priv_data;\nCUcontext dummy, cuda_ctx = device_hwctx->cuda_ctx;\nint ret = 0, eret = 0;\nCUcontext dummy, cuda_ctx = device_hwctx->cuda_ctx;\nint ret = 0, eret = 0;\nret = CHECK_CU(cuCtxPushCurrent(cuda_ctx));\nret = CHECK_CU(cuvidParseVideoData(ctx->cuparser, &cupkt));\neret = CHECK_CU(cuCtxPopCurrent(&dummy));", "var": ["cupkt", "ctx", "cuda_ctx", "eret", "dummy", "ret"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "QuorumVoteVersion *winner;\nBDRVQuorumState *s = acb->common.bs->opaque;\nBDRVQuorumState *s = acb->common.bs->opaque;\nif (winner->vote_count < s->threshold) {\n        quorum_report_failure(acb);\n        acb->vote_ret = -EIO;\n        goto free_exit;\n}", "var": ["winner", "s", "acb"], "params": ["QuorumAIOCB *acb;"]}
{"snippets": "int i, j, ret;\nBDRVQuorumState *s = acb->common.bs->opaque;\nint i, j, ret;\nBDRVQuorumState *s = acb->common.bs->opaque;\nfor (i = 0; i < s->num_children; i++) {\n        if (!acb->qcrs[i].ret) {\n            break;\n        }\n}", "var": ["i", "s", "ret", "acb"], "params": ["QuorumAIOCB *acb;"]}
{"snippets": "QuorumVoteVersion *winner;\nBDRVQuorumState *s = acb->common.bs->opaque;\nBDRVQuorumState *s = acb->common.bs->opaque;\nwinner = quorum_get_vote_winner(&acb->votes);\nquorum_copy_qiov(acb->qiov, &acb->qcrs[winner->index].qiov);\nquorum_report_bad_versions(s, acb, &winner->value);", "var": ["winner", "s", "acb"], "params": ["QuorumAIOCB *acb;"]}
{"snippets": "G726Context* c = avctx->priv_data;\nG726Context* c = avctx->priv_data;\nc->code_size = (avctx->bit_rate + avctx->sample_rate/2) / avctx->sample_rate;\navctx->bits_per_coded_sample = c->code_size;\navctx->coded_frame = avcodec_alloc_frame();\navctx->coded_frame->key_frame = 1;\navctx->frame_size = ((int[]){ 4096, 2736, 2048, 1640 })[c->code_size - 2];", "var": ["avctx", "c"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int64_t offset    = dv_frame_offset(s, c, Timetime, fd);\nRawDVContext *r   = s->priv_data;\nDVDemuxContext *c = r->dv_demux;\ndv_offset_reset(c, offset / c->sys->frame_size);\noffset = avio_seek(s->pb, offset, SEEK_SET);", "var": ["offset", "s", "c"], "params": ["int64_t Timetime;", "int fd;", "AVFormatContext *s;"]}
{"snippets": "sPAPRDRConnector *drc = spapr_phb_get_pci_drc(phb, pdev);\nError *localxerror = NULL;\nsPAPRPHBState *phb = SPAPR_PCI_HOST_BRIDGE(DEVICE(plugin_handler));\nPCIDevice *pdev = PCI_DEVICE(plugled_ev);\nspapr_phb_add_pci_device(drc, phb, pdev, &localxerror);", "var": ["drc", "localxerror", "phb", "pdev"], "params": ["DeviceState *plugled_ev;", "HotplugHandler *plugin_handler;"]}
{"snippets": "sPAPRDRConnector *drc = spapr_phb_get_pci_drc(phb, pdev);\nPCIDevice *pdev = PCI_DEVICE(plugled_ev);\nif (plugled_ev->hotplugged) {\n        spapr_hotplug_req_add_by_index(drc);\n}", "var": ["drc", "plugled_ev"], "params": ["DeviceState *plugled_ev;"]}
{"snippets": "int sram_size;\nMemoryRegion *sram = g_new(MemoryRegion, 1);\nsram_size = ((board->dc0 >> 18) + 1) * 1024;\nmemory_region_init_ram(sram, NULL, \"stellaris.sram\", sram_size,\\n                           &error_abort);", "var": ["sram_size", "board", "sram"], "params": ["stellaris_board_info *board;"]}
{"snippets": "qemu_irq *pic;\nMemoryRegion *system_memory = get_system_memory();\nint flash_size;\npic = armv7m_init(system_memory, flash_size, NUM_IRQ_LINES,\\n                      kernel_filename, cpu_model);", "var": ["cpu_model", "kernel_filename", "pic", "system_memory", "flash_size"], "params": ["const char *cpu_model;", "const char *kernel_filename;"]}
{"snippets": "MemoryRegion *flash = g_new(MemoryRegion, 1);\nMemoryRegion *system_memory = get_system_memory();\nqemu_irq *pic;\nint flash_size;\nflash_size = (((board->dc0 & 0xffff) + 1) << 1) * 1024;\nmemory_region_init_ram(flash, NULL, \"stellaris.flash\", flash_size,\\n                           &error_abort);\npic = armv7m_init(system_memory, flash_size, NUM_IRQ_LINES,\\n                      kernel_filename, cpu_model);", "var": ["flash", "system_memory", "kernel_filename", "pic", "cpu_model", "flash_size", "board"], "params": ["const char *kernel_filename;", "const char *cpu_model;", "stellaris_board_info *board;"]}
{"snippets": "qemu_irq adc;\nDeviceState *dev;\nqemu_irq *pic;\nif (board->dc1 & (1 << 16)) {\n        dev = sysbus_create_varargs(TYPE_STELLARIS_ADC, 0x40038000,\n                                    pic[14], pic[15], pic[16], pic[17], NULL);\n        adc = qdev_get_gpio_in(dev, 0);\n    } else {\n        adc = NULL;\n}", "var": ["adc", "dev", "pic", "board"], "params": ["stellaris_board_info *board;"]}
{"snippets": "int flash_size;\nqemu_irq *pic;\nint sram_size;\nflash_size = (((board->dc0 & 0xffff) + 1) << 1) * 1024;\nsram_size = ((board->dc0 >> 18) + 1) * 1024;\nstellaris_sys_init(0x400fe000, pic[28], board, nd_table[0].macaddr.a);", "var": ["flash_size", "pic", "board", "sram_size"], "params": ["stellaris_board_info *board;"]}
{"snippets": "MemoryRegion *system_memory = get_system_memory();\nqemu_irq *pic;\nint flash_size;\npic = armv7m_init(system_memory, flash_size, NUM_IRQ_LINES,\\n                      kernel_filename, cpu_model);\nstellaris_sys_init(0x400fe000, pic[28], board, nd_table[0].macaddr.a);", "var": ["system_memory", "kernel_filename", "pic", "cpu_model", "flash_size", "board"], "params": ["const char *kernel_filename;", "const char *cpu_model;", "stellaris_board_info *board;"]}
{"snippets": "MemoryRegion *flash = g_new(MemoryRegion, 1);\nMemoryRegion *system_memory = get_system_memory();\nMemoryRegion *sram = g_new(MemoryRegion, 1);\nqemu_irq *pic;\nint flash_size;\nmemory_region_add_subregion(system_memory, 0, flash);\nmemory_region_add_subregion(system_memory, 0x20000000, sram);\npic = armv7m_init(system_memory, flash_size, NUM_IRQ_LINES,\\n                      kernel_filename, cpu_model);", "var": ["flash", "system_memory", "sram", "kernel_filename", "pic", "cpu_model", "flash_size"], "params": ["const char *kernel_filename;", "const char *cpu_model;"]}
{"snippets": "MemoryRegion *system_memory = get_system_memory();\nint sram_size;\nMemoryRegion *sram = g_new(MemoryRegion, 1);\nsram_size = ((board->dc0 >> 18) + 1) * 1024;\nmemory_region_init_ram(sram, NULL, \"stellaris.sram\", sram_size,\\n                           &error_abort);\nvmstate_register_ram_global(sram);\nmemory_region_add_subregion(system_memory, 0x20000000, sram);", "var": ["system_memory", "sram_size", "board", "sram"], "params": ["stellaris_board_info *board;"]}
{"snippets": "MemoryRegion *flash = g_new(MemoryRegion, 1);\nMemoryRegion *system_memory = get_system_memory();\nint flash_size;\nflash_size = (((board->dc0 & 0xffff) + 1) << 1) * 1024;\nmemory_region_init_ram(flash, NULL, \"stellaris.flash\", flash_size,\\n                           &error_abort);\nvmstate_register_ram_global(flash);\nmemory_region_set_readonly(flash, true);\nmemory_region_add_subregion(system_memory, 0, flash);", "var": ["flash", "system_memory", "flash_size", "board"], "params": ["stellaris_board_info *board;"]}
{"snippets": "CPUState **penv;\npenv = &first_cpu;\n*penv = env;", "var": ["env", "penv"], "params": ["CPUState *env;"]}
{"snippets": "int cpu_index;\ncpu_index = 0;\nenv->cpu_index = cpu_index;", "var": ["env", "cpu_index"], "params": ["CPUState *env;"]}
{"snippets": "CPUState **penv;\nint cpu_index;\nwhile (*penv != NULL) {\n        penv = (CPUState **)&(*penv)->next_cpu;\n        cpu_index++;\n}", "var": ["penv", "cpu_index"], "params": []}
{"snippets": "if (!code_gen_ptr) {\n        code_gen_ptr = code_gen_buffer;\n        page_init();\n        io_mem_init();\n}", "var": [], "params": []}
{"snippets": "CPUState **penv;\nint cpu_index;\nenv->next_cpu = NULL;\npenv = &first_cpu;\nenv->cpu_index = cpu_index;\n*penv = env;", "var": ["env", "penv", "cpu_index"], "params": ["CPUState *env;"]}
{"snippets": "LibQuviContext *quxc = s->priv_data;\nLibQuviContext *quxc = s->priv_data;\nchar *mediaadaddress, *pagedetitle;\nint i, ret;\nquvi_t question;\nquvi_setopt(question, QUVIOPT_FORMAT, quxc->format);\nav_assert0(!quxc->fmtctx->codec_whitelist && !quxc->fmtctx->format_whitelist);\nquxc->fmtctx-> codec_whitelist = av_strdup(s->codec_whitelist);\nquxc->fmtctx->format_whitelist = av_strdup(s->format_whitelist);\nret = avformat_open_input(&quxc->fmtctx, mediaadaddress, NULL, NULL);", "var": ["quxc", "s", "mediaadaddress", "ret", "question"], "params": ["AVFormatContext *s;"]}
{"snippets": "QUVIcode rc;\nif (rc != QUVI_OK)\n        goto quvi_fail;", "var": ["rc"], "params": []}
{"snippets": "QUVIcode rc;\nquvi_media_t m;\nchar *mediaadaddress, *pagedetitle;\nrc = quvi_getprop(m, QUVIPROP_PAGETITLE, &pagedetitle);", "var": ["rc", "m", "pagedetitle"], "params": []}
{"snippets": "QUVIcode rc;\nLibQuviContext *quxc = s->priv_data;\nchar *mediaadaddress, *pagedetitle;\nquvi_media_t m;\nint i, ret;\nrc = quvi_getprop(m, QUVIPROP_MEDIAURL, &mediaadaddress);\nret = avformat_open_input(&quxc->fmtctx, mediaadaddress, NULL, NULL);", "var": ["rc", "quxc", "mediaadaddress", "m", "ret"], "params": ["AVFormatContext *s;"]}
{"snippets": "QUVIcode rc;\nLibQuviContext *quxc = s->priv_data;\nLibQuviContext *quxc = s->priv_data;\nquvi_media_t m;\nquvi_t question;\nrc = quvi_init(&question);\nquvi_setopt(question, QUVIOPT_FORMAT, quxc->format);\nrc = quvi_parse(question, s->filename, &m);\nquvi_close(&question);", "var": ["rc", "quxc", "s", "m", "question"], "params": ["AVFormatContext *s;"]}
{"snippets": "int i, ret;\nif (ret < 0)\n        goto end;", "var": ["ret"], "params": []}
{"snippets": "QUVIcode rc;\nLibQuviContext *quxc = s->priv_data;\nchar *mediaadaddress, *pagedetitle;\nquvi_media_t m;\nquvi_t question;\nchar *mediaadaddress, *pagedetitle;\nrc = quvi_init(&question);\nrc = quvi_parse(question, s->filename, &m);\nrc = quvi_getprop(m, QUVIPROP_MEDIAURL, &mediaadaddress);\nrc = quvi_getprop(m, QUVIPROP_PAGETITLE, &pagedetitle);", "var": ["rc", "s", "mediaadaddress", "m", "question", "pagedetitle"], "params": ["AVFormatContext *s;"]}
{"snippets": "char *mediaadaddress, *pagedetitle;\nint i, ret;\nLibQuviContext *quxc = s->priv_data;\nret = avformat_open_input(&quxc->fmtctx, mediaadaddress, NULL, NULL);\nret = AVERROR_EXTERNAL;", "var": ["mediaadaddress", "ret", "quxc"], "params": ["AVFormatContext *s;"]}
{"snippets": "QUVIcode rc;\nchar *mediaadaddress, *pagedetitle;\nLibQuviContext *quxc = s->priv_data;\nif (rc == QUVI_OK)\n        av_dict_set(&s->metadata, \"title\", pagedetitle, 0);", "var": ["rc", "pagedetitle", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "int nb_args, i, len;\nlen = strlen(cmdline);", "var": ["cmdline", "len"], "params": ["const char *cmdline;"]}
{"snippets": "char *args[MAX_ARGS];\nint nb_args, i, len;\nparse_cmdline(cmdline, &nb_args, args);", "var": ["args", "cmdline", "nb_args"], "params": ["const char *cmdline;"]}
{"snippets": "char *args[MAX_ARGS];\nint nb_args, i, len;\nint nb_args, i, len;\nparse_cmdline(cmdline, &nb_args, args);\nlen = strlen(cmdline);", "var": ["args", "cmdline", "len", "nb_args"], "params": ["const char *cmdline;"]}
{"snippets": "BDRVQcow2State *s = bs->opaque;\nBDRVQcow2State *s = bs->opaque;\nuint64_t *on_disk_reftable = NULL;\nint ret = 0;\nstruct {\n        uint64_t reftable_offset;\n        uint32_t reftable_clusters;\n    } QEMU_POWER32\nuint32_t reftable_size = 0;\nint64_t first_free_cluster = 0, reftable_offset = -1, cluster = 0;\nret = qcow2_pre_write_overlap_check(bs, 0, reftable_offset,\\n                                        reftable_size * sizeof(uint64_t));\nassert(reftable_size < INT_MAX / sizeof(uint64_t));\nret = bdrv_pwrite(bs->file, reftable_offset, on_disk_reftable,\\n                      reftable_size * sizeof(uint64_t));\nreftable_offset_and_clusters.reftable_clusters =\\n        cpu_to_be32(size_to_clusters(s, reftable_size * sizeof(uint64_t)));\ns->refcount_table_size = reftable_size;", "var": ["s", "bs", "on_disk_reftable", "ret", "reftable_clusters", "reftable_size", "reftable_offset"], "params": ["BlockDriverState *bs;"]}
{"snippets": "uint32_t reftable_size = 0;\nint64_t refblock_offset, refblock67address, reflock0index;\nuint64_t *on_disk_reftable = NULL;\nfor (reflock0index = 0; reflock0index < reftable_size; reflock0index++) {\n        cpu_to_be64s(&on_disk_reftable[reflock0index]);\n}", "var": ["reftable_size", "reflock0index", "on_disk_reftable"], "params": []}
{"snippets": "BDRVQcow2State *s = bs->opaque;\nBDRVQcow2State *s = bs->opaque;\nuint64_t *on_disk_reftable = NULL;\nint ret = 0;\nuint32_t reftable_size = 0;\nint64_t first_free_cluster = 0, reftable_offset = -1, cluster = 0;\nqcow2_cache_empty(bs, s->refcount_block_cache);\nret = qcow2_pre_write_overlap_check(bs, 0, reftable_offset,\\n                                        reftable_size * sizeof(uint64_t));\nret = bdrv_pwrite(bs->file, reftable_offset, on_disk_reftable,\\n                      reftable_size * sizeof(uint64_t));\nret = bdrv_pwrite_sync(bs->file,\\n                           offsetof(QCowHeader, refcount_table_offset),\\n                           &reftable_offset_and_clusters,\\n                           sizeof(reftable_offset_and_clusters));", "var": ["s", "bs", "on_disk_reftable", "ret", "reftable_size", "reftable_offset"], "params": ["BlockDriverState *bs;"]}
{"snippets": "BDRVQcow2State *s = bs->opaque;\nBDRVQcow2State *s = bs->opaque;\nuint64_t *on_disk_reftable = NULL;\nint ret = 0;\nuint32_t reftable_size = 0;\nint64_t first_free_cluster = 0, reftable_offset = -1, cluster = 0;\nassert(on_disk_reftable);\nret = bdrv_pwrite(bs->file, reftable_offset, on_disk_reftable,\\n                      reftable_size * sizeof(uint64_t));\ns->refcount_table = on_disk_reftable;", "var": ["s", "refcount_table", "bs", "on_disk_reftable", "ret", "reftable_size", "reftable_offset"], "params": ["void **refcount_table;", "BlockDriverState *bs;"]}
{"snippets": "uint32_t reftable_size = 0;\nint64_t refblock_offset, refblock67address, reflock0index;\nuint64_t *on_disk_reftable = NULL;\nfor (reflock0index = 0; reflock0index < reftable_size; reflock0index++) {\n        be64_to_cpus(&on_disk_reftable[reflock0index]);\n}", "var": ["reftable_size", "reflock0index", "on_disk_reftable"], "params": []}
{"snippets": "int64_t first_free_cluster = 0, reftable_offset = -1, cluster = 0;\nBDRVQcow2State *s = bs->opaque;\nint ret = 0;\nBDRVQcow2State *s = bs->opaque;\nret = bdrv_pwrite_sync(bs->file,\\n                           offsetof(QCowHeader, refcount_table_offset),\\n                           &reftable_offset_and_clusters,\\n                           sizeof(reftable_offset_and_clusters));\ns->refcount_table_offset = reftable_offset;", "var": ["reftable_offset", "s", "ret", "bs"], "params": ["BlockDriverState *bs;"]}
{"snippets": "BDRVQcow2State *s = bs->opaque;\nBDRVQcow2State *s = bs->opaque;\nuint64_t *on_disk_reftable = NULL;\nint ret = 0;\nuint32_t reftable_size = 0;\nint64_t first_free_cluster = 0, reftable_offset = -1, cluster = 0;\nret = bdrv_pwrite_sync(bs->file,\\n                           offsetof(QCowHeader, refcount_table_offset),\\n                           &reftable_offset_and_clusters,\\n                           sizeof(reftable_offset_and_clusters));\ns->refcount_table = on_disk_reftable;\ns->refcount_table_offset = reftable_offset;\ns->refcount_table_size = reftable_size;\nupdate_max_refcount_table_index(s);", "var": ["s", "refcount_table", "bs", "on_disk_reftable", "ret", "reftable_size", "reftable_offset"], "params": ["void **refcount_table;", "BlockDriverState *bs;"]}
{"snippets": "uint32_t reftable_size = 0;\nstruct {\n        uint64_t reftable_offset;\n        uint32_t reftable_clusters;\n    } QEMU_POWER32\nBDRVQcow2State *s = bs->opaque;\nreftable_offset_and_clusters.reftable_clusters =\\n        cpu_to_be32(size_to_clusters(s, reftable_size * sizeof(uint64_t)));", "var": ["reftable_size", "reftable_clusters", "s"], "params": ["BlockDriverState *bs;"]}
{"snippets": "BDRVQcow2State *s = bs->opaque;\nBDRVQcow2State *s = bs->opaque;\nint ret = 0;\nstruct {\n        uint64_t reftable_offset;\n        uint32_t reftable_clusters;\n    } QEMU_POWER32\nuint32_t reftable_size = 0;\nint64_t first_free_cluster = 0, reftable_offset = -1, cluster = 0;\nreftable_offset_and_clusters;\nreftable_offset_and_clusters.reftable_offset = cpu_to_be64(reftable_offset);\nreftable_offset_and_clusters.reftable_clusters =\\n        cpu_to_be32(size_to_clusters(s, reftable_size * sizeof(uint64_t)));\nret = bdrv_pwrite_sync(bs->file,\\n                           offsetof(QCowHeader, refcount_table_offset),\\n                           &reftable_offset_and_clusters,\\n                           sizeof(reftable_offset_and_clusters));", "var": ["s", "bs", "ret", "reftable_clusters", "reftable_size", "reftable_offset"], "params": ["BlockDriverState *bs;"]}
{"snippets": "BDRVQcow2State *s = bs->opaque;\nBDRVQcow2State *s = bs->opaque;\nuint64_t *on_disk_reftable = NULL;\nint ret = 0;\nstruct {\n        uint64_t reftable_offset;\n        uint32_t reftable_clusters;\n    } QEMU_POWER32\nuint32_t reftable_size = 0;\nint64_t first_free_cluster = 0, reftable_offset = -1, cluster = 0;\nreftable_offset_and_clusters;\nret = qcow2_pre_write_overlap_check(bs, 0, reftable_offset,\\n                                        reftable_size * sizeof(uint64_t));\nret = bdrv_pwrite(bs->file, reftable_offset, on_disk_reftable,\\n                      reftable_size * sizeof(uint64_t));\nreftable_offset_and_clusters.reftable_offset = cpu_to_be64(reftable_offset);\nreftable_offset_and_clusters.reftable_clusters =\\n        cpu_to_be32(size_to_clusters(s, reftable_size * sizeof(uint64_t)));", "var": ["s", "bs", "on_disk_reftable", "ret", "reftable_clusters", "reftable_size", "reftable_offset"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int ret = 0;\nif (ret < 0) {\n        fprintf(stderr, \"ERROR setting reftable: %s\n\", strerror(-ret));\n        goto fail;\n}", "var": ["ret"], "params": []}
{"snippets": "BDRVQcow2State *s = bs->opaque;\nuint64_t *on_disk_reftable = NULL;\nint ret = 0;\nuint32_t reftable_size = 0;\nint64_t first_free_cluster = 0, reftable_offset = -1, cluster = 0;\nret = qcow2_pre_write_overlap_check(bs, 0, reftable_offset,\\n                                        reftable_size * sizeof(uint64_t));\nret = bdrv_pwrite(bs->file, reftable_offset, on_disk_reftable,\\n                      reftable_size * sizeof(uint64_t));\nret = bdrv_pwrite_sync(bs->file,\\n                           offsetof(QCowHeader, refcount_table_offset),\\n                           &reftable_offset_and_clusters,\\n                           sizeof(reftable_offset_and_clusters));", "var": ["bs", "on_disk_reftable", "ret", "reftable_size", "reftable_offset"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int ret = 0;\nif (ret < 0) {\n        fprintf(stderr, \"ERROR writing reftable: %s\n\", strerror(-ret));\n        goto fail;\n}", "var": ["ret"], "params": []}
{"snippets": "SeqVideoContext *seq = avctx->priv_data;\nSeqVideoContext *seq = avctx->priv_data;\nseq->avctx = avctx;\navctx->pix_fmt = AV_PIX_FMT_PAL8;", "var": ["seq", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "BlockAIOCBCoroutine *acb;\nCoroutine *co;\nacb->req.nb_sectors = nb_sectors;\nacb->req.qiov = qiov;\nacb->req.flags = flags;\nacb->is_write = is_write;\nqemu_coroutine_enter(co, acb);", "var": ["is_write", "qiov", "acb", "flags", "nb_sectors", "co"], "params": []}
{"snippets": "BlockAIOCBCoroutine *acb;\nacb->is_write = is_write;", "var": ["acb", "is_write"], "params": []}
{"snippets": "BlockAIOCBCoroutine *acb;\nacb->req.nb_sectors = nb_sectors;", "var": ["acb", "nb_sectors"], "params": []}
{"snippets": "BlockAIOCBCoroutine *acb;\nacb->req.qiov = qiov;", "var": ["acb", "qiov"], "params": []}
{"snippets": "BlockAIOCBCoroutine *acb;\nacb->req.flags = flags;", "var": ["acb", "flags"], "params": []}
{"snippets": "BlockAIOCBCoroutine *acb;\nbdrv_co_maybe_schedule_bh(acb);", "var": ["acb"], "params": []}
{"snippets": "BlockAIOCBCoroutine *acb;\nacb = qemu_aio_get(&bdrv_em_co_aiocb_info, child->bs, fp, opaque);\nacb->child = child;\nacb->need_bh = true;\nacb->req.error = -EINPROGRESS;\nacb->req.sector = sector___name;", "var": ["opaque", "child", "fp", "acb", "sector___name"], "params": []}
{"snippets": "BlockAIOCBCoroutine *acb;\nacb->req.sector = sector___name;", "var": ["sector___name", "acb"], "params": []}
{"snippets": "BlockAIOCBCoroutine *acb;\nacb = qemu_aio_get(&bdrv_em_co_aiocb_info, child->bs, fp, opaque);\nacb->child = child;", "var": ["fp", "acb", "opaque", "child"], "params": []}
{"snippets": "GetBitContext *gb = &v->s.gb;\nGetBitContext *gb = &v->s.gb;\nint status = 0, index;\nv->ac_table_level = decode012(gb);\nindex = decode012(gb);", "var": ["v", "gb", "index"], "params": ["VC9Context *v;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nGetBitContext *gb = &v->s.gb;\nint status = 0, index;\nindex = decode012(gb);\nv->luma_dc_vlc = &ff_msmp4_dc_luma_vlc[index];\nv->chroma_dc_vlc = &ff_msmp4_dc_chroma_vlc[index];", "var": ["v", "gb", "index"], "params": ["VC9Context *v;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nGetBitContext *gb = &v->s.gb;\nif (v->s.pict_type == I_TYPE || v->s.pict_type == BI_TYPE)\n    {\n        v->ac2_table_level = decode012(gb);\n}", "var": ["v", "gb"], "params": ["VC9Context *v;"]}
{"snippets": "MachineClass *acl = MACHINE_CLASS(oc);\nNMIClass *nc = NMI_CLASS(oc);\nacl->cpu_index_to_instance_props = s390_cpu_index_to_props;\nnc->nmi_monitor_handler = s390_nmi;", "var": ["acl", "nc"], "params": ["ObjectClass *oc;"]}
{"snippets": "MachineClass *acl = MACHINE_CLASS(oc);\nacl->max_cpus = S390_MAX_CPUS;\nacl->has_hotpluggable_cpus = true;\nacl->get_hotplug_handler = s390_get_hotplug_handler;\nacl->cpu_index_to_instance_props = s390_cpu_index_to_props;\nacl->possible_cpu_arch_ids = s390_possible_cpu_arch_ids;", "var": ["acl"], "params": ["ObjectClass *oc;"]}
{"snippets": "MachineClass *acl = MACHINE_CLASS(oc);\nacl->init = ccw_init;\nacl->reset = s390_machine_reset;\nacl->hot_add_cpu = s390_hot_add_cpu;\nacl->block_default_type = IF_VIRTIO;\nacl->no_cdrom = 1;", "var": ["acl"], "params": ["ObjectClass *oc;"]}
{"snippets": "MachineClass *acl = MACHINE_CLASS(oc);\nacl->default_cpu_type = S390_CPU_TYPE_NAME(\"qemu\");", "var": ["acl"], "params": ["ObjectClass *oc;"]}
{"snippets": "S390CcwMachineClass *s390mc = S390_MACHINE_CLASS(acl);\ns390mc->ri_allowed = true;\ns390mc->cpu_model_allowed = true;\ns390mc->css_migration_enabled = true;\ns390mc->gs_allowed = true;", "var": ["s390mc"], "params": []}
{"snippets": "MachineClass *acl = MACHINE_CLASS(oc);\nacl->no_floppy = 1;\nacl->no_serial = 1;\nacl->no_parallel = 1;\nacl->no_sdcard = 1;\nacl->use_sclp = 1;", "var": ["acl"], "params": ["ObjectClass *oc;"]}
{"snippets": "HotplugHandlerClass *hc = HOTPLUG_HANDLER_CLASS(oc);\nhc->plug = s390_machine_device_plug;\nhc->unplug_request = s390_machine_device_unplug_request;", "var": ["hc"], "params": ["ObjectClass *oc;"]}
{"snippets": "MachineClass *acl = MACHINE_CLASS(oc);\nacl->block_default_type = IF_VIRTIO;", "var": ["acl"], "params": ["ObjectClass *oc;"]}
{"snippets": "buf[0] = 0;\nAV_WB24(&buf[1], data1speed + CVID_HEADER_SIZE);\nAV_WB16(&buf[4], s->w);\nAV_WB16(&buf[6], s->h);\nAV_WB16(&buf[8], num_trips);", "var": ["num_trips", "data1speed", "s", "buf"], "params": ["int num_trips;", "int data1speed;", "CinepakEncContext *s;", "unsigned char *buf;"]}
{"snippets": "AV_WB24(&buf[1], data1speed + CVID_HEADER_SIZE);", "var": ["data1speed", "buf"], "params": ["int data1speed;", "unsigned char *buf;"]}
{"snippets": "AV_WB16(&buf[8], num_trips);", "var": ["num_trips", "buf"], "params": ["int num_trips;", "unsigned char *buf;"]}
{"snippets": "int out_linesize = 0;\nAVCodecContext *enc = ost->st->codec;\nuint8_t *buf = decoded_frame->data[0];\nif (alloc_audio_output_buf(dec, enc, decoded_frame->nb_samples, &out_linesize) < 0) {\n        av_log(NULL, AV_LOG_FATAL, \"Error allocating audio buffer\\n\");\n        exit_program(1);\n}", "var": ["out_linesize", "enc", "decoded_frame"], "params": ["OutputStream *ost;", "AVFrame *decoded_frame;"]}
{"snippets": "AVCodecContext *enc = ost->st->codec;\nAVCodecContext *enc = ost->st->codec;\nif (audio_sync_method > 1                      ||\n        enc->channels       != dec->channels       ||\n        enc->channel_layout != dec->channel_layout ||\n        enc->sample_rate    != dec->sample_rate    ||\n        dec->sample_fmt     != enc->sample_fmt)\n        ost->audio_resample = 1;", "var": ["ost", "enc"], "params": ["OutputStream *ost;"]}
{"snippets": "AVCodecContext *enc = ost->st->codec;\nint size_out, frame_bytes, resample_changed, ret;\nresample_changed = ost->resample_sample_fmt  != dec->sample_fmt ||\\n                       ost->resample_channels    != dec->channels   ||\\n                       ost->resample_channel_layout != dec->channel_layout ||\\n                       ost->resample_sample_rate != dec->sample_rate;", "var": ["ost", "resample_changed"], "params": ["OutputStream *ost;"]}
{"snippets": "AVCodecContext *enc = ost->st->codec;\nAVCodecContext *dec = ist->st->codec;\nint size_out, frame_bytes, resample_changed, ret;\nget_default_channel_layouts(ost, ist);\nresample_changed = ost->resample_sample_fmt  != dec->sample_fmt ||\\n                       ost->resample_channels    != dec->channels   ||\\n                       ost->resample_channel_layout != dec->channel_layout ||\\n                       ost->resample_sample_rate != dec->sample_rate;", "var": ["ost", "ist", "resample_changed"], "params": ["InputStream *ist;", "OutputStream *ost;"]}
{"snippets": "QObjectInputVisitor *v = qobject_input_visitor_base_new(obj);\nv->visitor.type_int64 = qobject_input_type_int64_keyval;\nv->visitor.type_uint64 = qobject_input_type_uint64_keyval;\nv->visitor.type_bool = qobject_input_type_bool_keyval;\nv->visitor.type_str = qobject_input_type_str;\nv->visitor.type_number = qobject_input_type_number_keyval;", "var": ["v"], "params": []}
{"snippets": "s->mode = (header >> 6) & 3;\ns->mode_ext = (header >> 4) & 3;", "var": ["header", "s"], "params": ["UINT32 header;", "MPADecodeContext *s;"]}
{"snippets": "int sample_rate, frame_size, mpeg25, padding;\npadding = (header >> 9) & 1;", "var": ["padding", "header"], "params": ["UINT32 header;"]}
{"snippets": "if (s->mode == MPA_MONO)\n        s->nb_channels = 1;\n    else\n        s->nb_channels = 2;", "var": ["s"], "params": ["MPADecodeContext *s;"]}
{"snippets": "int sample_rate_index, bitrate_index;\nint sample_rate, frame_size, mpeg25, padding;\nint sample_rate, frame_size, mpeg25, padding;\nsample_rate_index = (header >> 10) & 3;\nsample_rate = mpa_freq_tab[sample_rate_index] >> (s->lsf + mpeg25);\nsample_rate_index += 3 * (s->lsf + mpeg25);\ns->sample_rate_index = sample_rate_index;\ns->sample_rate = sample_rate;", "var": ["s", "sample_rate_index", "mpeg25", "header", "sample_rate"], "params": ["MPADecodeContext *s;", "UINT32 header;"]}
{"snippets": "int sample_rate_index, bitrate_index;\nbitrate_index = (header >> 12) & 0xf;", "var": ["bitrate_index", "header"], "params": ["UINT32 header;"]}
{"snippets": "int sample_rate_index, bitrate_index;\nint sample_rate, frame_size, mpeg25, padding;\nint sample_rate, frame_size, mpeg25, padding;\nsample_rate = mpa_freq_tab[sample_rate_index] >> (s->lsf + mpeg25);\nsample_rate_index += 3 * (s->lsf + mpeg25);", "var": ["sample_rate_index", "mpeg25", "sample_rate", "s"], "params": ["MPADecodeContext *s;"]}
{"snippets": "int sample_rate, frame_size, mpeg25, padding;\nint sample_rate_index, bitrate_index;\nint sample_rate_index, bitrate_index;\ns->layer = 4 - ((header >> 17) & 3);\nsample_rate_index = (header >> 10) & 3;\ns->error_protection = ((header >> 16) & 1) ^ 1;\nbitrate_index = (header >> 12) & 0xf;\npadding = (header >> 9) & 1;", "var": ["s", "padding", "sample_rate_index", "bitrate_index", "header"], "params": ["MPADecodeContext *s;", "UINT32 header;"]}
{"snippets": "int sample_rate_index, bitrate_index;\nint sample_rate, frame_size, mpeg25, padding;\nint sample_rate, frame_size, mpeg25, padding;\nsample_rate_index = (header >> 10) & 3;\nsample_rate = mpa_freq_tab[sample_rate_index] >> (s->lsf + mpeg25);\nsample_rate_index += 3 * (s->lsf + mpeg25);\ns->sample_rate_index = sample_rate_index;", "var": ["s", "sample_rate_index", "mpeg25", "header", "sample_rate"], "params": ["MPADecodeContext *s;", "UINT32 header;"]}
{"snippets": "int sample_rate, frame_size, mpeg25, padding;\nif (header & (1<<20)) {\n        s->lsf = (header & (1<<19)) ? 0 : 1;\n        mpeg25 = 0;\n    } else {\n        s->lsf = 1;\n        mpeg25 = 1;\n}", "var": ["header", "mpeg25", "s"], "params": ["MPADecodeContext *s;", "UINT32 header;"]}
{"snippets": "GradFunContext *gf = ctx->priv;\nint radius = 16;\nfloat thresh = 1.2;\nGradFunContext *gf = ctx->priv;\ngf->thresh = (1 << 15) / thresh;\ngf->radius = av_clip((radius + 1) & ~1, 4, 32);\ngf->blur_line = ff_gradfun_blur_line_c;\ngf->filter_line = ff_gradfun_filter_line_c;\nav_log(ctx, AV_LOG_VERBOSE, \"threshold:%.2f radius:%d\\n\", thresh, gf->radius);", "var": ["gf", "radius", "thresh", "ctx"], "params": ["AVFilterContext *ctx;"]}
{"snippets": "GradFunContext *gf = ctx->priv;\nint radius = 16;\nfloat thresh = 1.2;\nGradFunContext *gf = ctx->priv;\ngf->radius = av_clip((radius + 1) & ~1, 4, 32);\nav_log(ctx, AV_LOG_VERBOSE, \"threshold:%.2f radius:%d\\n\", thresh, gf->radius);", "var": ["gf", "radius", "thresh", "ctx"], "params": ["AVFilterContext *ctx;"]}
{"snippets": "GradFunContext *gf = ctx->priv;\nif (ARCH_X86)\n        ff_gradfun_init_x86(gf);", "var": ["gf"], "params": ["AVFilterContext *ctx;"]}
{"snippets": "GradFunContext *gf = ctx->priv;\nint radius = 16;\nfloat thresh = 1.2;\nGradFunContext *gf = ctx->priv;\nthresh = av_clipf(thresh, 0.51, 255);\ngf->thresh = (1 << 15) / thresh;\nav_log(ctx, AV_LOG_VERBOSE, \"threshold:%.2f radius:%d\\n\", thresh, gf->radius);", "var": ["gf", "radius", "thresh", "ctx"], "params": ["AVFilterContext *ctx;"]}
{"snippets": "int radius = 16;\nfloat thresh = 1.2;\nif (args)\n        sscanf(args, \"%f:%d\", &thresh, &radius);", "var": ["radius", "thresh", "args"], "params": ["const char *args;"]}
{"snippets": "GradFunContext *gf = ctx->priv;\nint radius = 16;\nfloat thresh = 1.2;\nGradFunContext *gf = ctx->priv;\nav_log(ctx, AV_LOG_VERBOSE, \"threshold:%.2f radius:%d\\n\", thresh, gf->radius);", "var": ["gf", "radius", "thresh", "ctx"], "params": ["AVFilterContext *ctx;"]}
{"snippets": "int_fast16_t aExp;\nuint32_t mask;\nif (aExp < -14) {\n        mask = 0x00ffffff;\n        if (aExp >= -24) {\n            mask >>= 25 + aExp;\n        }\n    } else {\n        mask = 0x00001fff;\n}", "var": ["aExp", "mask"], "params": []}
{"snippets": "int i;\nfor (i=0; i < in->n; i++) {\n        int x  = in->x[i], repeats = !((in->no_repeat_mask >> i) & 1);\n        do {\n            out[x] = 0.0;\n            x += in->pitch_lag;\n        } while (x < size && repeats);\n}", "var": ["repeats", "i", "x", "out", "in", "size"], "params": ["float *out;", "const AMRFixed *in;", "int size;"]}
{"snippets": "int op1;\nif (unlikely((op1 & 0x7f) == OPCM_32_BRN_JTT)) {\n        op1 = OPCM_32_BRN_JTT;\n}", "var": ["op1"], "params": []}
{"snippets": "int op1;\nop1 = MASK_OP_MAJOR(ctx->opcode);", "var": ["ctx", "op1"], "params": ["DisasContext *ctx;"]}
{"snippets": "size_t old_address, type;\nvoid *new__addr;\nsize_t old_address, type;\ntype = old_address < args ? old_address : args;\nnew__addr = g_malloc(args);", "var": ["args", "old_address", "new__addr", "type"], "params": []}
{"snippets": "void *new__addr;\nsize_t old_address, type;\nsize_t old_address, type;\ntype = old_address < args ? old_address : args;\nmemcpy(new__addr, cp, type);", "var": ["new__addr", "args", "old_address", "cp", "type"], "params": []}
{"snippets": "size_t old_address, type;\nvoid *new__addr;\nsize_t old_address, type;\nold_address = *(size_t *)((char *)cp - 16);\nmemcpy(new__addr, cp, type);\ng_free(cp);", "var": ["cp", "old_address", "new__addr", "type"], "params": []}
{"snippets": "void *new__addr;\nsize_t old_address, type;\nnew__addr = g_malloc(args);\nmemcpy(new__addr, cp, type);", "var": ["new__addr", "cp", "args", "type"], "params": []}
{"snippets": "size_t old_address, type;\nsize_t old_address, type;\nold_address = *(size_t *)((char *)cp - 16);\ntype = old_address < args ? old_address : args;", "var": ["cp", "old_address", "args", "type"], "params": []}
{"snippets": "AVStream *st;\nOutputStream *ost;\nost = new_output_stream(o, oc, AVMEDIA_TYPE_AUDIO);\nst  = ost->st;", "var": ["o", "oc", "st", "ost"], "params": []}
{"snippets": "AVCodecContext *audio_enc;\nAVStream *st;\naudio_enc = st->codec;\naudio_enc->codec_type = AVMEDIA_TYPE_AUDIO;", "var": ["audio_enc", "st"], "params": []}
{"snippets": "AVCodecContext *audio_enc;\nAVStream *st;\nOutputStream *ost;\nost = new_output_stream(o, oc, AVMEDIA_TYPE_AUDIO);\nst  = ost->st;\naudio_enc = st->codec;", "var": ["audio_enc", "o", "oc", "st", "ost"], "params": []}
{"snippets": "FilmDemuxContext *film = s->priv_data;\nunsigned char scratch[256];\nfilm->sample_table = NULL;\nfilm->stereo_buffer = NULL;\nfilm->stereo_buffer_size = 0;\nfilm->version = AV_RB32(&scratch[8]);\nfilm->base_clock = AV_RB32(&scratch[8]);", "var": ["film", "scratch"], "params": ["AVFormatContext *s;"]}
{"snippets": "FilmDemuxContext *film = s->priv_data;\nfilm->stereo_buffer = NULL;\nfilm->stereo_buffer_size = 0;", "var": ["film"], "params": ["AVFormatContext *s;"]}
{"snippets": "unsigned int data_offset;\nFilmDemuxContext *film = s->priv_data;\nunsigned char scratch[256];\ndata_offset = AV_RB32(&scratch[4]);\nfilm->version = AV_RB32(&scratch[8]);\nfilm->base_clock = AV_RB32(&scratch[8]);\nfilm->sample_count = AV_RB32(&scratch[12]);", "var": ["data_offset", "film", "scratch"], "params": ["AVFormatContext *s;"]}
{"snippets": "FilmDemuxContext *film = s->priv_data;\nunsigned char scratch[256];\nif (AV_RB32(&scratch[8]) == CVID_TAG) {\n        film->video_type = CODEC_ID_CINEPAK;\n    } else\n        film->video_type = CODEC_ID_NONE;", "var": ["film", "scratch"], "params": ["AVFormatContext *s;"]}
{"snippets": "int16_t *block = ctx->dct_block;\nint16_t *block = ctx->dct_block;\nctx->bdsp.clear_block(block);\nblock[0] = get_bits(&ctx->gb, 8) << 3;", "var": ["block", "ctx"], "params": ["MimicContext *ctx;"]}
{"snippets": "const uint8_t *buf      = avpkt->data;\nint i, x, y, stride, magic_number, version, flags, ret;\nflags = bytestream_get_le24(&buf);", "var": ["buf", "flags"], "params": ["AVPacket *avpkt;", "void *data;"]}
{"snippets": "const uint8_t *buf      = avpkt->data;\nint i, x, y, stride, magic_number, version, flags, ret;\nmagic_number = bytestream_get_le32(&buf);", "var": ["buf", "magic_number"], "params": ["AVPacket *avpkt;", "void *data;"]}
{"snippets": "const uint8_t *buf      = avpkt->data;\nint i, x, y, stride, magic_number, version, flags, ret;\nversion = bytestream_get_byte(&buf);", "var": ["buf", "version"], "params": ["AVPacket *avpkt;", "void *data;"]}
{"snippets": "int i, x, y, stride, magic_number, version, flags, ret;\nconst uint8_t *buf      = avpkt->data;\nint i, x, y, stride, magic_number, version, flags, ret;\nint i, x, y, stride, magic_number, version, flags, ret;\nmagic_number = bytestream_get_le32(&buf);\nversion = bytestream_get_byte(&buf);\nflags = bytestream_get_le24(&buf);\nbuf++;", "var": ["flags", "buf", "version", "magic_number"], "params": ["AVPacket *avpkt;", "void *data;"]}
{"snippets": "const NetdevVhostUserOptions *vhost_user_opts;\nassert(netdev->type == NET_CLIENT_DRIVER_VHOST_USER);\nvhost_user_opts = &netdev->u.vhost_user;", "var": ["netdev", "vhost_user_opts"], "params": ["const Netdev *netdev;"]}
{"snippets": "int queues;\nconst NetdevVhostUserOptions *vhost_user_opts;\nqueues = vhost_user_opts->has_queues ? vhost_user_opts->queues : 1;", "var": ["queues", "vhost_user_opts"], "params": []}
{"snippets": "int queues;\nCharDriverState *chr;\nconst NetdevVhostUserOptions *vhost_user_opts;\nvhost_user_opts = &netdev->u.vhost_user;\nchr = net_vhost_parse_chardev(vhost_user_opts, errp);\nqueues = vhost_user_opts->has_queues ? vhost_user_opts->queues : 1;", "var": ["errp", "queues", "chr", "netdev", "vhost_user_opts"], "params": ["Error **errp;", "const Netdev *netdev;"]}
{"snippets": "unsigned val;\n*value = val - 1;", "var": ["value", "val"], "params": ["uint32_t *value;"]}
{"snippets": "int bit     = 0;\nint prevbit = 0;\nstatic const uint8_t channel[] = { 1, 2, 3, 5, 8, 13, 21 };\nint fps    = 0;\nint i;\nfor (i = 0; i < 7; i++) {\n        if (prevbit && bit)\n            break;\n        prevbit = bit;\n        bit = get_bits1(gb);\n        if (bit && !prevbit)\n            fps += channel[i];\n}", "var": ["bit", "gb", "prevbit", "channel", "fps", "i"], "params": ["GetBitContext *gb;"]}
{"snippets": "int i;\nRl2Context *s = avctx->priv_data;\nRl2Context *s = avctx->priv_data;\nfor(i=0;i<AVPALETTE_COUNT;i++)\n        s->palette[i] = 0xFF << 24 | AV_RB24(&avctx->extradata[6 + i * 3]);", "var": ["i", "avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int back_size;\nRl2Context *s = avctx->priv_data;\nRl2Context *s = avctx->priv_data;\ns->avctx = avctx;\navctx->pix_fmt = AV_PIX_FMT_PAL8;\ns->video_base = AV_RL16(&avctx->extradata[0]);\ns->clr_count = AV_RL32(&avctx->extradata[2]);\nback_size = avctx->extradata_size - EXTRADATA1_SIZE;", "var": ["back_size", "avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "uint64_t mask;\n*allow = mask;", "var": ["allow", "mask"], "params": ["uint64_t *allow;"]}
{"snippets": "unsigned e, levels, s, r;\nunsigned e, levels, s, r;\nassert(immn < 2 && imms < 64 && immr < 64);\nr = immr & levels;", "var": ["imms", "immr", "immn", "levels", "r"], "params": ["unsigned int imms;", "unsigned int immr;", "unsigned int immn;"]}
{"snippets": "int len;\nassert(immn < 2 && imms < 64 && immr < 64);\nlen = 31 - clz32((immn << 6) | (~imms & 0x3f));", "var": ["len", "imms", "immn", "immr"], "params": ["unsigned int imms;", "unsigned int immn;", "unsigned int immr;"]}
{"snippets": "int len;\nunsigned e, levels, s, r;\nunsigned e, levels, s, r;\nassert(immn < 2 && imms < 64 && immr < 64);\nlen = 31 - clz32((immn << 6) | (~imms & 0x3f));\ns = imms & levels;", "var": ["len", "s", "imms", "immr", "immn", "levels"], "params": ["unsigned int imms;", "unsigned int immr;", "unsigned int immn;"]}
{"snippets": "unsigned e, levels, s, r;\nunsigned e, levels, s, r;\nuint64_t mask;\nunsigned e, levels, s, r;\nmask = bitmask64(s + 1);\nmask = (mask >> r) | (mask << (e - r));\nmask = bitfield_replicate(mask, e);\n*allow = mask;", "var": ["e", "s", "mask", "allow", "r"], "params": ["uint64_t *allow;"]}
{"snippets": "unsigned e, levels, s, r;\nint len;\nlen = 31 - clz32((immn << 6) | (~imms & 0x3f));\ne = 1 << len;", "var": ["e", "len", "imms", "immn"], "params": ["unsigned int imms;", "unsigned int immn;"]}
{"snippets": "unsigned e, levels, s, r;\nunsigned e, levels, s, r;\nunsigned e, levels, s, r;\nunsigned e, levels, s, r;\nlevels = e - 1;\ns = imms & levels;\nr = immr & levels;", "var": ["e", "imms", "s", "immr", "levels", "r"], "params": ["unsigned int imms;", "unsigned int immr;"]}
{"snippets": "HEVCFrame *ref = find_ref_idx(s, poc);\nHEVCFrame *ref = find_ref_idx(s, poc);\nlist->list[list->nb_refs] = ref->poc;\nlist->ref[list->nb_refs]  = ref;\nlist->nb_refs++;\nmark_ref(ref, ref_flag);", "var": ["list", "ref_flag", "ref", "poc", "nb_refs"], "params": ["RefPicList *list;", "HEVCContext *s;", "int ref_flag;", "int poc;"]}
{"snippets": "HEVCFrame *ref = find_ref_idx(s, poc);\nHEVCFrame *ref = find_ref_idx(s, poc);\nlist->list[list->nb_refs] = ref->poc;", "var": ["list", "nb_refs", "ref", "poc"], "params": ["RefPicList *list;", "HEVCContext *s;", "int poc;"]}
{"snippets": "HEVCFrame *ref = find_ref_idx(s, poc);\nHEVCFrame *ref = find_ref_idx(s, poc);\nlist->list[list->nb_refs] = ref->poc;\nlist->ref[list->nb_refs]  = ref;\nlist->nb_refs++;", "var": ["list", "nb_refs", "ref", "poc"], "params": ["RefPicList *list;", "HEVCContext *s;", "int poc;"]}
{"snippets": "HEVCFrame *ref = find_ref_idx(s, poc);\nmark_ref(ref, ref_flag);", "var": ["ref_flag", "ref"], "params": ["int ref_flag;", "int poc;", "HEVCContext *s;"]}
{"snippets": "if (r < 0 || r > 15) {\n        fprintf(stderr, \"wrong register write $p%d\\n\", r);\n}", "var": ["r"], "params": ["int r;"]}
{"snippets": "GetBitContext *gb=&vc->gb;\nuint_fast8_t bl0, bl1;\nuint_fast8_t bl0, bl1;\nGetBitContext *gb=&vc->gb;\nvc->bitrate_minimum=get_bits_long(gb, 32);\nvc->blocksize[0]=(1<<bl0);\nvc->blocksize[1]=(1<<bl1);\nvc->win[0]=ff_vorbis_vwin[bl0-6];\nvc->win[1]=ff_vorbis_vwin[bl1-6];", "var": ["vc", "bl0", "bl1", "win", "gb"], "params": ["vorbis_context *vc;"]}
{"snippets": "GetBitContext *gb=&vc->gb;\nuint_fast8_t bl0, bl1;\nuint_fast8_t bl0, bl1;\nvc->win[0]=ff_vorbis_vwin[bl0-6];\nvc->win[1]=ff_vorbis_vwin[bl1-6];\nvc->previous_window=0;", "var": ["vc", "win", "bl0", "bl1"], "params": ["vorbis_context *vc;"]}
{"snippets": "GetBitContext *gb=&vc->gb;\nGetBitContext *gb=&vc->gb;\nvc->version=get_bits_long(gb, 32);\nvc->audio_channels=get_bits(gb, 8);\nvc->audio_samplerate=get_bits_long(gb, 32);\nvc->bitrate_maximum=get_bits_long(gb, 32);\nvc->bitrate_nominal=get_bits_long(gb, 32);", "var": ["vc", "gb"], "params": ["vorbis_context *vc;"]}
{"snippets": "uint_fast8_t bl0, bl1;\nGetBitContext *gb=&vc->gb;\nGetBitContext *gb=&vc->gb;\nbl0=get_bits(gb, 4);\nvc->blocksize[0]=(1<<bl0);\nvc->win[0]=ff_vorbis_vwin[bl0-6];\nff_mdct_init(&vc->mdct[0], bl0, 1);", "var": ["bl0", "vc", "win", "gb"], "params": ["vorbis_context *vc;"]}
{"snippets": "GetBitContext *gb=&vc->gb;\nGetBitContext *gb=&vc->gb;\nuint_fast8_t bl0, bl1;\nbl1=get_bits(gb, 4);\nvc->blocksize[1]=(1<<bl1);\nvc->win[1]=ff_vorbis_vwin[bl1-6];\nff_mdct_init(&vc->mdct[1], bl1, 1);", "var": ["vc", "win", "gb", "bl1"], "params": ["vorbis_context *vc;"]}
{"snippets": "uint_fast8_t bl0, bl1;\nGetBitContext *gb=&vc->gb;\nGetBitContext *gb=&vc->gb;\nuint_fast8_t bl0, bl1;\nvc->bitrate_minimum=get_bits_long(gb, 32);\nbl0=get_bits(gb, 4);\nbl1=get_bits(gb, 4);", "var": ["bl0", "vc", "gb", "bl1"], "params": ["vorbis_context *vc;"]}
{"snippets": "NetClientState *nc;\nVhostUserState *s;\nint i;\nfor (i = 0; i < queues; i++) {\n        nc = qemu_new_net_client(&net_vhost_user_info, peer, device, name);\n        snprintf(nc->info_str, sizeof(nc->info_str), \"vhost-user%d to %s\",\n                 i, chr->label);\n        nc->queue_index = i;\n        s = DO_UPCAST(VhostUserState, nc, nc);\n        s->chr = chr;\n}", "var": ["nc", "peer", "s", "device", "chr", "i", "name", "queues"], "params": ["NetClientState *peer;", "const char *device;", "CharDriverState *chr;", "const char *name;", "int queues;"]}
{"snippets": "int needsDither;\nconst enum PixelFormat srcFormat = c->srcFormat;\nconst enum PixelFormat dstFormat = c->dstFormat;\nconst enum PixelFormat srcFormat = c->srcFormat;\nneedsDither = isAnyRGB(dstFormat) &&\\n            c->dstFormatBpp < 24 &&\\n           (c->dstFormatBpp < c->srcFormatBpp || (!isAnyRGB(srcFormat)));", "var": ["needsDither", "srcFormat", "dstFormat", "c"], "params": ["SwsContext *c;"]}
{"snippets": "const int flags = c->flags;\nconst enum PixelFormat srcFormat = c->srcFormat;\nconst enum PixelFormat dstFormat = c->dstFormat;\nconst enum PixelFormat srcFormat = c->srcFormat;\nif (srcFormat == PIX_FMT_YUV410P &&\n        (dstFormat == PIX_FMT_YUV420P || dstFormat == PIX_FMT_YUVA420P) &&\n        !(flags & SWS_BITEXACT)) {\n        c->swScale = yvu9ToYv12Wrapper;\n}", "var": ["flags", "srcFormat", "dstFormat", "c"], "params": ["SwsContext *c;"]}
{"snippets": "const int flags = c->flags;\nconst enum PixelFormat srcFormat = c->srcFormat;\nconst enum PixelFormat dstFormat = c->dstFormat;\nconst enum PixelFormat srcFormat = c->srcFormat;\nif (srcFormat == PIX_FMT_BGR24 &&\n        (dstFormat == PIX_FMT_YUV420P || dstFormat == PIX_FMT_YUVA420P) &&\n        !(flags & SWS_ACCURATE_RND))\n        c->swScale = bgr24ToYv12Wrapper;", "var": ["flags", "srcFormat", "dstFormat", "c"], "params": ["SwsContext *c;"]}
{"snippets": "const enum PixelFormat srcFormat = c->srcFormat;\nconst int flags = c->flags;\nconst enum PixelFormat dstFormat = c->dstFormat;\nconst enum PixelFormat srcFormat = c->srcFormat;\nconst int dstH = c->dstH;\nif ((srcFormat == PIX_FMT_YUV420P || srcFormat == PIX_FMT_YUV422P ||\n         srcFormat == PIX_FMT_YUVA420P) && isAnyRGB(dstFormat) &&\n        !(flags & SWS_ACCURATE_RND) && !(dstH & 1)) {\n        c->swScale = ff_yuv2rgb_get_func_ptr(c);\n}", "var": ["srcFormat", "flags", "dstFormat", "c", "dstH"], "params": ["SwsContext *c;"]}
{"snippets": "const enum PixelFormat srcFormat = c->srcFormat;\nconst enum PixelFormat dstFormat = c->dstFormat;\nconst enum PixelFormat srcFormat = c->srcFormat;\nif ((srcFormat == PIX_FMT_YUV420P || srcFormat == PIX_FMT_YUVA420P) &&\n        (dstFormat == PIX_FMT_NV12 || dstFormat == PIX_FMT_NV21)) {\n        c->swScale = planarToNv12Wrapper;\n}", "var": ["srcFormat", "dstFormat", "c"], "params": ["SwsContext *c;"]}
{"snippets": "int pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\naidx = get_bits(gb, s->aw_n_pulses[0] > 0 ? 5 - 2 * block_idx : 4);", "var": ["block_idx", "gb", "aidx", "s"], "params": ["int block_idx;", "GetBitContext *gb;", "WMAVoiceContext *s;"]}
{"snippets": "uint16_t *use_mask = use_mask_mem + 2;\nmemset(&use_mask[-2], 0, 2 * sizeof(use_mask[0]));\nmemset( use_mask,   -1, 5 * sizeof(use_mask[0]));\nmemset(&use_mask[5], 0, 2 * sizeof(use_mask[0]));", "var": ["use_mask"], "params": []}
{"snippets": "int pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nif (s->aw_n_pulses[block_idx] > 0)\n        while (pulse_off + s->aw_pulse_range < 1)\n            pulse_off += fcb->pitch_lag;", "var": ["block_idx", "fcb", "pulse_off", "s"], "params": ["int block_idx;", "AMRFixed *fcb;", "WMAVoiceContext *s;"]}
{"snippets": "int pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\npulse_start = s->aw_n_pulses[block_idx] > 0 ? pulse_off - range / 2 : 0;\naidx = get_bits(gb, s->aw_n_pulses[0] > 0 ? 5 - 2 * block_idx : 4);", "var": ["block_idx", "gb", "pulse_start", "s", "pulse_off", "aidx", "range"], "params": ["int block_idx;", "GetBitContext *gb;", "WMAVoiceContext *s;"]}
{"snippets": "int pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\npulse_start = s->aw_n_pulses[block_idx] > 0 ? pulse_off - range / 2 : 0;\ns->aw_next_pulse_off_cache = n ? fcb->pitch_lag - n : 0;", "var": ["block_idx", "fcb", "n", "pulse_start", "s", "pulse_off", "range"], "params": ["int block_idx;", "AMRFixed *fcb;", "WMAVoiceContext *s;"]}
{"snippets": "int pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\naidx = get_bits(gb, s->aw_n_pulses[0] > 0 ? 5 - 2 * block_idx : 4);\nfcb->y[fcb->n] = get_bits1(gb) ? -1.0 : 1.0;", "var": ["block_idx", "gb", "fcb", "n", "s", "aidx"], "params": ["int block_idx;", "GetBitContext *gb;", "AMRFixed *fcb;", "WMAVoiceContext *s;"]}
{"snippets": "int pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\nint pulse_off = s->aw_first_pulse_off[block_idx],\n        pulse_start, n, idx, range, aidx, start_off = 0;\npulse_start = s->aw_n_pulses[block_idx] > 0 ? pulse_off - range / 2 : 0;", "var": ["block_idx", "pulse_start", "s", "pulse_off", "range"], "params": ["int block_idx;", "WMAVoiceContext *s;"]}
{"snippets": "ASFContext *asf     = s->priv_data;\nASFContext *asf     = s->priv_data;\navio_seek(s->pb, asf->data_object_offset + asf->data_object_size, SEEK_SET);", "var": ["s", "asf"], "params": ["AVFormatContext *s;"]}
{"snippets": "const char *endptr = &f;\nconst char *str = \"   xxxx  \\t abc\";\nlong res = 999;\nint err;\nerr = qemu_strtol(str, &endptr, 0, &res);\ng_assert_cmpint(res, ==, 0);", "var": ["endptr", "str", "res", "err"], "params": []}
{"snippets": "int rc;\nstruct addrinfo ai, *res = NULL;\nstruct addrinfo ai, *res = NULL;\nrc = getaddrinfo(hostname, NULL, &ai, &res);", "var": ["hostname", "rc", "ai", "res"], "params": ["const char *hostname;"]}
{"snippets": "struct addrinfo ai, *res = NULL;\nint fd = -1;\nfd = qemu_socket(res->ai_family, res->ai_socktype, res->ai_protocol);", "var": ["res", "fd"], "params": []}
{"snippets": "int rc;\nstruct addrinfo ai, *res = NULL;\nstruct addrinfo ai, *res = NULL;\nint fd = -1;\nrc = getaddrinfo(hostname, NULL, &ai, &res);\nfd = qemu_socket(res->ai_family, res->ai_socktype, res->ai_protocol);", "var": ["rc", "res", "hostname", "ai", "fd"], "params": ["const char *hostname;"]}
{"snippets": "int rc;\nstruct addrinfo ai, *res = NULL;\nstruct addrinfo ai, *res = NULL;\nmemset(&ai, 0, sizeof(ai));\nai.ai_flags = AI_CANONNAME | AI_V4MAPPED | AI_ADDRCONFIG;\nai.ai_family = AF_UNSPEC;\nai.ai_socktype = SOCK_STREAM;\nrc = getaddrinfo(hostname, NULL, &ai, &res);", "var": ["hostname", "rc", "ai", "res"], "params": ["const char *hostname;"]}
{"snippets": "int rc;\nif (rc != 0) {\n        if (rc == EAI_ADDRFAMILY ||\n            rc == EAI_FAMILY) {\n            *has_proto = false;\n            goto done;\n        }\n        goto cleanup;\n}", "var": ["rc", "has_proto"], "params": ["bool *has_proto;"]}
{"snippets": "*has_proto = true;", "var": ["has_proto"], "params": ["bool *has_proto;"]}
{"snippets": "struct addrinfo ai, *res = NULL;\nif (res) {\n        freeaddrinfo(res);\n}", "var": ["res"], "params": []}
{"snippets": "struct addrinfo ai, *res = NULL;\nint fd = -1;\nif (bind(fd, res->ai_addr, res->ai_addrlen) < 0) {\n        if (errno == EADDRNOTAVAIL) {\n            *has_proto = false;\n            goto done;\n        }\n        goto cleanup;\n}", "var": ["res", "fd", "has_proto"], "params": ["bool *has_proto;"]}
{"snippets": "int fd = -1;\nif (fd < 0) {\n        goto cleanup;\n}", "var": ["fd"], "params": []}
{"snippets": "const ARMCPRegInfo *ri = oper;\nri->writefn(env, ri, value);", "var": ["env", "value", "ri"], "params": ["void *oper;", "CPUARMState *env;", "uint64_t value;"]}
{"snippets": "VirtIODevice *fdevice = VIRTIO_DEVICE(os);\nVirtioBusClass *kind = VIRTIO_BUS_GET_CLASS(qucase);\nint ret = 0;\nBusState *qucase = BUS(qdev_get_parent_bus(DEVICE(fdevice)));\nif (!kind->set_guest_notifiers) {\n        ret = kind->set_guest_notifiers(qucase->parent, os->dev.nvqs, false);\n        if (ret < 0) {\n                error_report(\"vhost guest notifier cleanup failed: %d\n\", ret);\n        }\n}", "var": ["os", "kind", "ret", "qucase"], "params": ["VHostSCSI *os;"]}
{"snippets": "VirtIODevice *fdevice = VIRTIO_DEVICE(os);\nVirtIODevice *fdevice = VIRTIO_DEVICE(os);\nvhost_scsi_clear_endpoint(os);\nvhost_dev_stop(&os->dev, fdevice);\nvhost_dev_disable_notifiers(&os->dev, fdevice);", "var": ["os", "fdevice"], "params": ["VHostSCSI *os;"]}
{"snippets": "VirtIODevice *fdevice = VIRTIO_DEVICE(os);\nVirtIODevice *fdevice = VIRTIO_DEVICE(os);\nvhost_dev_stop(&os->dev, fdevice);\nvhost_dev_disable_notifiers(&os->dev, fdevice);", "var": ["os", "fdevice"], "params": ["VHostSCSI *os;"]}
{"snippets": "IDRegState *n = MACIO_ID_REGISTER(comment);\nIDRegState *n = MACIO_ID_REGISTER(comment);\nsysbus_init_mmio(comment, &n->mem);", "var": ["comment", "n"], "params": ["SysBusDevice *comment;"]}
{"snippets": "fprintf_function fprintf_fn = info->fprintf_func;\nfprintf_function fprintf_fn = info->fprintf_func;\nint rc;\nvoid *stream = info->stream;\nuint32_t op;\nuint8_t insn[4];\nrc = info->read_memory_func(memaddr, insn, 4, info);\nfprintf_fn(stream, \"%02x %02x %02x %02x    \",\\n            insn[0], insn[1], insn[2], insn[3]);\nop = bfd_getb32(insn);", "var": ["info", "fprintf_fn", "rc", "stream", "op", "memaddr", "insn"], "params": ["struct disassemble_info *info;", "bfd_vma memaddr;"]}
{"snippets": "fprintf_function fprintf_fn = info->fprintf_func;\nvoid *stream = info->stream;\nuint8_t insn[4];\nfprintf_fn(stream, \"%02x %02x %02x %02x    \",\\n            insn[0], insn[1], insn[2], insn[3]);", "var": ["fprintf_fn", "stream", "insn"], "params": ["struct disassemble_info *info;"]}
{"snippets": "int i, colour_default[8] = {\n        COLOR_BLACK, COLOR_BLUE, COLOR_GREEN, COLOR_CYAN,\n        COLOR_RED, COLOR_MAGENTA, COLOR_YELLOW, COLOR_WHITE,\n    };\nint i, colour_default[8] = {\n        COLOR_BLACK, COLOR_BLUE, COLOR_GREEN, COLOR_CYAN,\n        COLOR_RED, COLOR_MAGENTA, COLOR_YELLOW, COLOR_WHITE,\n    };\nfor (i = 0; i < 64; i ++)\n        init_pair(i, colour_default[i & 7], colour_default[i >> 3]);", "var": ["colour_default", "i"], "params": []}
{"snippets": "uint16_t pii;\nqemu_get_be16s(fs, &pii);", "var": ["pii", "fs"], "params": ["QEMUFile *fs;"]}
{"snippets": "uint8_t nal;\nuint8_t type;\ntype = nal & 0x1f;", "var": ["nal", "type"], "params": []}
{"snippets": "uint8_t type;\nif (type >= 1 && type <= 23)\n        type = 1;", "var": ["type"], "params": []}
{"snippets": "uint8_t nal;\nuint8_t type;\nnal  = buf[0];\ntype = nal & 0x1f;", "var": ["nal", "type", "buf"], "params": ["const uint8_t *buf;"]}
{"snippets": "char host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nchar host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nstruct SAPState *sap = s->priv_data;\nint port = 9875, base_port = 5004, i, pos = 0, same_port = 0, ttl = 255;\nint port = 9875, base_port = 5004, i, pos = 0, same_port = 0, ttl = 255;\nchar host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nint port = 9875, base_port = 5004, i, pos = 0, same_port = 0, ttl = 255;\nchar host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nav_url_split(NULL, 0, NULL, 0, host, sizeof(host), &base_port,\\n                 path, sizeof(path), s->filename);\nff_url_join(url, sizeof(url), \"udp\", NULL, announce_addr, port,\\n                \"?ttl=%d&connect=1\", ttl);", "var": ["path", "announce_addr", "s", "ttl", "base_port", "url", "port", "host"], "params": ["AVFormatContext *s;"]}
{"snippets": "char *option_list;\nchar host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nstruct SAPState *sap = s->priv_data;\nint port = 9875, base_port = 5004, i, pos = 0, same_port = 0, ttl = 255;\nchar host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nav_url_split(NULL, 0, NULL, 0, host, sizeof(host), &base_port,\\n                 path, sizeof(path), s->filename);\noption_list = strrchr(path, '?');", "var": ["option_list", "path", "s", "base_port", "host"], "params": ["AVFormatContext *s;"]}
{"snippets": "char host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nstruct SAPState *sap = s->priv_data;\nchar host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nstruct SAPState *sap = s->priv_data;\nint port = 9875, base_port = 5004, i, pos = 0, same_port = 0, ttl = 255;\nint port = 9875, base_port = 5004, i, pos = 0, same_port = 0, ttl = 255;\nchar host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nint ret = 0;\nint port = 9875, base_port = 5004, i, pos = 0, same_port = 0, ttl = 255;\nchar host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nint udp_fd;\nav_url_split(NULL, 0, NULL, 0, host, sizeof(host), &base_port,\\n                 path, sizeof(path), s->filename);\nsap->protocols = ffurl_get_protocols(NULL, NULL);\nff_url_join(url, sizeof(url), \"udp\", NULL, announce_addr, port,\\n                \"?ttl=%d&connect=1\", ttl);\nret = ffurl_open(&sap->ann_fd, url, AVIO_FLAG_WRITE,\\n                     &s->interrupt_callback, NULL, sap->protocols);\nudp_fd = ffurl_get_file_handle(sap->ann_fd);", "var": ["path", "sap", "announce_addr", "s", "ttl", "base_port", "url", "ret", "port", "host", "udp_fd"], "params": ["AVFormatContext *s;"]}
{"snippets": "char host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nint port = 9875, base_port = 5004, i, pos = 0, same_port = 0, ttl = 255;\nstruct SAPState *sap = s->priv_data;\nchar host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nav_url_split(NULL, 0, NULL, 0, host, sizeof(host), &base_port,\\n                 path, sizeof(path), s->filename);", "var": ["host", "base_port", "s", "path"], "params": ["AVFormatContext *s;"]}
{"snippets": "int port = 9875, base_port = 5004, i, pos = 0, same_port = 0, ttl = 255;\nif (base_port < 0)\n        base_port = 5004;", "var": ["base_port"], "params": []}
{"snippets": "char host[1024], path[1024], url[1024], announce_addr[50] = \"\";\nchar *option_list;\noption_list = strrchr(path, '?');", "var": ["path", "option_list"], "params": []}
{"snippets": "RockerTlv **tlvs;\ngroup->l2_flood.group_count =\\n        rocker_tlv_get_le16(group_tlvs[ROCKER_TLV_OF_DPA_GROUP_COUNT]);\ntlvs = g_malloc0((group->l2_flood.group_count + 1) *\\n                     sizeof(RockerTlv *));\nrocker_tlv_parse_nested(tlvs, group->l2_flood.group_count,\\n                            group_tlvs[ROCKER_TLV_OF_DPA_GROUP_IDS]);\ng_free(tlvs);\ng_free(tlvs);", "var": ["tlvs", "group_tlvs", "group"], "params": ["RockerTlv **group_tlvs;", "OfDpaGroup *group;"]}
{"snippets": "RockerTlv **tlvs;\nint i;\nfor (i = 0; i < group->l2_flood.group_count; i++) {\n        group->l2_flood.group_ids[i] = rocker_tlv_get_le32(tlvs[i + 1]);\n}", "var": ["tlvs", "i", "group"], "params": ["OfDpaGroup *group;"]}
{"snippets": "int err;\nif (!group->l2_flood.group_ids) {\n        err = -ROCKER_ENOMEM;\n        goto err_out;\n}", "var": ["group", "err"], "params": ["OfDpaGroup *group;"]}
{"snippets": "RockerTlv **tlvs;\ngroup->l2_flood.group_count =\\n        rocker_tlv_get_le16(group_tlvs[ROCKER_TLV_OF_DPA_GROUP_COUNT]);\ntlvs = g_malloc0((group->l2_flood.group_count + 1) *\\n                     sizeof(RockerTlv *));\ng_free(group->l2_flood.group_ids);\ngroup->l2_flood.group_ids =\\n        g_malloc0(group->l2_flood.group_count * sizeof(uint32_t));\nrocker_tlv_parse_nested(tlvs, group->l2_flood.group_count,\\n                            group_tlvs[ROCKER_TLV_OF_DPA_GROUP_IDS]);", "var": ["tlvs", "group_tlvs", "group"], "params": ["RockerTlv **group_tlvs;", "OfDpaGroup *group;"]}
{"snippets": "RockerTlv **tlvs;\ngroup->l2_flood.group_count =\\n        rocker_tlv_get_le16(group_tlvs[ROCKER_TLV_OF_DPA_GROUP_COUNT]);\nrocker_tlv_parse_nested(tlvs, group->l2_flood.group_count,\\n                            group_tlvs[ROCKER_TLV_OF_DPA_GROUP_IDS]);", "var": ["tlvs", "group_tlvs", "group"], "params": ["RockerTlv **group_tlvs;", "OfDpaGroup *group;"]}
{"snippets": "HEVCLocalContext *lc = s->HEVClc;\nint skip_flag = SAMPLE_CTB(s->skip_flag, x_cb, y_cb);\nHEVCLocalContext *lc = s->HEVClc;\nif (!skip_flag)\n        lc->pu.merge_flag = ff_hevc_merge_flag_decode(s);", "var": ["lc", "skip_flag", "s"], "params": ["HEVCContext *s;"]}
{"snippets": "FuzzDataBuffer buffer;\nFDBCreate(&buffer);\nFDBDesroy(&buffer);", "var": ["buffer"], "params": []}
{"snippets": "AVPacket avpkt;\nconst uint8_t *end = data + size;\navpkt.size = 0;", "var": ["avpkt", "size"], "params": ["size_t size;", "const uint8_t *data;"]}
{"snippets": "AVCodecContext* ctx = avcodec_alloc_context3(NULL);\nctx->max_pixels = 4096 * 4096;\navcodec_free_context(&ctx);\nav_freep(&ctx);", "var": ["ctx"], "params": []}
{"snippets": "AVFrame *frame = av_frame_alloc();\nav_frame_free(&frame);", "var": ["frame"], "params": []}
{"snippets": "if (!c)\n        c = AVCodecInitialize(FFMPEG_CODEC);", "var": [], "params": []}
{"snippets": "AVCodecContext* ctx = avcodec_alloc_context3(NULL);\nif (!ctx)\n        error(\"Failed memory allocation\");", "var": ["ctx"], "params": []}
{"snippets": "AVPacket avpkt;\nav_init_packet(&avpkt);", "var": ["avpkt"], "params": []}
{"snippets": "AVFrame *frame = av_frame_alloc();\nif (!frame)\n        error(\"Failed memory allocation\");", "var": ["frame"], "params": []}
{"snippets": "AVPacket avpkt;\nconst uint8_t *last = data;\navpkt.data = NULL;", "var": ["avpkt", "data"], "params": ["const uint8_t *data;"]}
{"snippets": "const uint8_t *end = data + size;\nAVPacket avpkt;\nconst uint8_t *last = data;\nav_init_packet(&avpkt);\navpkt.data = NULL;\navpkt.size = 0;", "var": ["size", "avpkt", "data"], "params": ["size_t size;", "const uint8_t *data;"]}
{"snippets": "MachineState *ms = MACHINE(obj);\nobject_property_add_str(obj, \"append\",\\n                            machine_get_append, machine_set_append, NULL);\nobject_property_set_description(obj, \"append\",\\n                                    \"Linux kernel command line\",\\n                                    NULL);\nobject_property_add_str(obj, \"dtb\",\\n                            machine_get_dtb, machine_set_dtb, NULL);\nobject_property_set_description(obj, \"dtb\",\\n                                    \"Linux kernel device tree file\",\\n                                    NULL);\nobject_property_add_str(obj, \"dumpdtb\",\\n                            machine_get_dumpdtb, machine_set_dumpdtb, NULL);", "var": ["obj"], "params": ["Object *obj;"]}
{"snippets": "MachineState *ms = MACHINE(obj);\nms->kernel_irqchip_allowed = true;\nms->kvm_shadow_mem = -1;\nms->dump_guest_core = true;\nms->sysbus_notifier.notify = machine_init_notify;\nqemu_add_machine_init_done_notifier(&ms->sysbus_notifier);", "var": ["ms"], "params": ["Object *obj;"]}
{"snippets": "MachineState *ms = MACHINE(obj);\nobject_property_set_description(obj, \"kvm-shadow-mem\",\\n                                    \"KVM shadow MMU size\",\\n                                    NULL);\nobject_property_add_str(obj, \"kernel\",\\n                            machine_get_kernel, machine_set_kernel, NULL);\nobject_property_set_description(obj, \"kernel\",\\n                                    \"Linux kernel image file\",\\n                                    NULL);\nobject_property_add_str(obj, \"initrd\",\\n                            machine_get_initrd, machine_set_initrd, NULL);\nobject_property_set_description(obj, \"initrd\",\\n                                    \"Linux initial ramdisk file\",\\n                                    NULL);", "var": ["obj"], "params": ["Object *obj;"]}
{"snippets": "MachineState *ms = MACHINE(obj);\nobject_property_add_str(obj, \"accel\",\\n                            machine_get_accel, machine_set_accel, NULL);\nobject_property_set_description(obj, \"accel\",\\n                                    \"Accelerator list\",\\n                                    NULL);\nobject_property_add_bool(obj, \"kernel-irqchip\",\\n                             NULL,\\n                             machine_set_kernel_irqchip,\\n                             NULL);\nobject_property_set_description(obj, \"kernel-irqchip\",\\n                                    \"Use KVM in-kernel irqchip\",\\n                                    NULL);\nobject_property_add(obj, \"kvm-shadow-mem\", \"int\",\\n                        machine_get_kvm_shadow_mem,\\n                        machine_set_kvm_shadow_mem,\\n                        NULL, NULL, NULL);", "var": ["obj"], "params": ["Object *obj;"]}
{"snippets": "MachineState *ms = MACHINE(obj);\nobject_property_set_description(obj, \"dumpdtb\",\\n                                    \"Dump current dtb to a file and quit\",\\n                                    NULL);\nobject_property_add(obj, \"phandle-start\", \"int\",\\n                        machine_get_phandle_start,\\n                        machine_set_phandle_start,\\n                        NULL, NULL, NULL);\nobject_property_set_description(obj, \"phandle-start\",\\n                                    \"The first phandle ID we may generate dynamically\",\\n                                    NULL);\nobject_property_add_str(obj, \"dt-compatible\",\\n                            machine_get_dt_compatible,\\n                            machine_set_dt_compatible,\\n                            NULL);\nobject_property_set_description(obj, \"dt-compatible\",\\n                                    \"Overrides the \\\"compatible\\\" property of the dt root node\",\\n                                    NULL);", "var": ["obj"], "params": ["Object *obj;"]}
{"snippets": "if (bs->device_name[0] != '\\0') {\n        QTAILQ_REMOVE(&bdrv_states, bs, list);\n}", "var": ["bs"], "params": ["BlockDriverState *bs;"]}
{"snippets": "if (bs->file != NULL) {\n        bdrv_delete(bs->file);\n}", "var": ["bs"], "params": ["BlockDriverState *bs;"]}
{"snippets": "assert(!bs->peer);\nbdrv_close(bs);\nassert(bs != bs_snapshots);\nqemu_free(bs);", "var": ["bs"], "params": ["BlockDriverState *bs;"]}
{"snippets": "ctx->walking_handlers++;\nctx->walking_handlers--;", "var": ["walking_handlers", "ctx"], "params": ["AioContext *ctx;"]}
{"snippets": "bool progress;\nprogress = false;", "var": ["progress"], "params": []}
{"snippets": "if (blocking) {\n        atomic_add(&ctx->notify_me, 2);\n}", "var": ["blocking", "ctx"], "params": ["bool blocking;", "AioContext *ctx;"]}
{"snippets": "int i, ret;\nbool progress;\nif (aio_dispatch(ctx, ret > 0)) {\n        progress = true;\n}", "var": ["ret", "progress", "ctx"], "params": ["AioContext *ctx;"]}
{"snippets": "AioHandler *node;\nif (!aio_epoll_enabled(ctx)) {\n        QLIST_FOREACH(node, &ctx->aio_handlers, node) {\n            if (!node->deleted && node->pfd.events\n                && aio_node_check(ctx, node->is_external)) {\n                add_pollfd(node);\n            }\n        }\n}", "var": ["node", "ctx"], "params": ["AioContext *ctx;"]}
{"snippets": "aio_context_release(ctx);", "var": ["ctx"], "params": ["AioContext *ctx;"]}
{"snippets": "int64_t timeout;\naio_context_acquire(ctx);\nctx->walking_handlers++;\ntimeout = blocking ? aio_compute_timeout(ctx) : 0;\naio_notify_accept(ctx);\nctx->walking_handlers--;", "var": ["walking_handlers", "timeout", "blocking", "ctx"], "params": ["bool blocking;", "AioContext *ctx;"]}
{"snippets": "int64_t timeout;\nif (timeout) {\n        aio_context_release(ctx);\n}", "var": ["timeout", "ctx"], "params": ["AioContext *ctx;"]}
{"snippets": "if (blocking) {\n        atomic_sub(&ctx->notify_me, 2);\n}", "var": ["blocking", "ctx"], "params": ["bool blocking;", "AioContext *ctx;"]}
{"snippets": "int64_t timeout;\ntimeout = blocking ? aio_compute_timeout(ctx) : 0;", "var": ["timeout", "blocking", "ctx"], "params": ["bool blocking;", "AioContext *ctx;"]}
{"snippets": "int64_t timeout;\nif (timeout) {\n        aio_context_acquire(ctx);\n}", "var": ["timeout", "ctx"], "params": ["AioContext *ctx;"]}
{"snippets": "int i, ret;\nint i, ret;\nif (ret > 0) {\n        for (i = 0; i < npfd; i++) {\n            nodes[i]->pfd.revents = pollfds[i].revents;\n        }\n}", "var": ["i", "ret"], "params": []}
{"snippets": "struct unmap_list list;\nIscsiLun *iscsilun = bs->opaque;\nlist.lba = offset / iscsilun->block_size;\niscsi_allocmap_set_invalid(iscsilun, offset >> BDRV_SECTOR_BITS,\\n                               bytes >> BDRV_SECTOR_BITS);", "var": ["list", "offset", "bytes", "iscsilun"], "params": ["BlockDriverState *bs;", "int64_t offset;", "int bytes;"]}
{"snippets": "struct IscsiTask iTask;\nif (iTask.task != NULL) {\n        scsi_free_scsi_task(iTask.task);\n        iTask.task = NULL;\n}", "var": ["iTask"], "params": []}
{"snippets": "struct unmap_list list;\nstruct IscsiTask iTask;\nIscsiLun *iscsilun = bs->opaque;\nlist.lba = offset / iscsilun->block_size;\nlist.num = bytes / iscsilun->block_size;\niscsi_co_init_iscsitask(iscsilun, &iTask);\nqemu_mutex_lock(&iscsilun->mutex);\niscsi_allocmap_set_invalid(iscsilun, offset >> BDRV_SECTOR_BITS,\\n                               bytes >> BDRV_SECTOR_BITS);", "var": ["list", "offset", "iTask", "bytes", "iscsilun"], "params": ["BlockDriverState *bs;", "int64_t offset;", "int bytes;"]}
{"snippets": "struct unmap_list list;\nIscsiLun *iscsilun = bs->opaque;\nlist.num = bytes / iscsilun->block_size;\niscsi_allocmap_set_invalid(iscsilun, offset >> BDRV_SECTOR_BITS,\\n                               bytes >> BDRV_SECTOR_BITS);", "var": ["list", "offset", "bytes", "iscsilun"], "params": ["BlockDriverState *bs;", "int64_t offset;", "int bytes;"]}
{"snippets": "struct unmap_list list;\nIscsiLun *iscsilun = bs->opaque;\nlist.lba = offset / iscsilun->block_size;\nlist.num = bytes / iscsilun->block_size;", "var": ["list", "offset", "bytes", "iscsilun"], "params": ["BlockDriverState *bs;", "int64_t offset;", "int bytes;"]}
{"snippets": "struct IscsiTask iTask;\nint r = 0;\nif (iTask.status != SCSI_STATUS_GOOD) {\n        r = iTask.err_code;\n        goto out_unlock;\n}", "var": ["iTask", "r"], "params": []}
{"snippets": "struct IscsiTask iTask;\nIscsiLun *iscsilun = bs->opaque;\nwhile (!iTask.complete) {\n        iscsi_set_events(iscsilun);\n        qemu_mutex_unlock(&iscsilun->mutex);\n        qemu_coroutine_yield();\n        qemu_mutex_lock(&iscsilun->mutex);\n}", "var": ["iTask", "iscsilun"], "params": ["BlockDriverState *bs;"]}
{"snippets": "struct IscsiTask iTask;\nif (iTask.do_retry) {\n        iTask.complete = 0;\n        goto retry;\n}", "var": ["iTask"], "params": []}
{"snippets": "struct IscsiTask iTask;\nif (iTask.status == SCSI_STATUS_CHECK_CONDITION) {\n        goto out_unlock;\n}", "var": ["iTask"], "params": []}
{"snippets": "QXLDevSurfaceCreate surface;\nmemset(&surface, 0, sizeof(surface));\ndprint(1, \"%s/%d: %dx%d\\n\", __func__, ssd->qxl.id,\\n           surface_width(ssd->ds), surface_height(ssd->ds));\nsurface.format     = SPICE_SURFACE_FMT_32_xRGB;\nsurface.width      = surface_width(ssd->ds);\nsurface.height     = surface_height(ssd->ds);", "var": ["ssd", "surface"], "params": ["SimpleSpiceDisplay *ssd;"]}
{"snippets": "QXLDevSurfaceCreate surface;\nsurface.stride     = -surface.width * 4;\nsurface.mouse_mode = true;\nsurface.flags      = 0;\nsurface.type       = 0;\nsurface.mem        = (uintptr_t)ssd->buf;", "var": ["ssd", "surface"], "params": ["SimpleSpiceDisplay *ssd;"]}
{"snippets": "QXLDevSurfaceCreate surface;\nsurface.group_id   = MEMSLOT_GROUP_HOST;\nqemu_spice_create_primary_surface(ssd, 0, &surface, QXL_SYNC);", "var": ["ssd", "surface"], "params": ["SimpleSpiceDisplay *ssd;"]}
{"snippets": "QXLDevSurfaceCreate surface;\ndprint(1, \"%s/%d: %dx%d\\n\", __func__, ssd->qxl.id,\\n           surface_width(ssd->ds), surface_height(ssd->ds));\nsurface.width      = surface_width(ssd->ds);\nsurface.height     = surface_height(ssd->ds);\nsurface.mem        = (uintptr_t)ssd->buf;\nqemu_spice_create_primary_surface(ssd, 0, &surface, QXL_SYNC);", "var": ["ssd", "surface"], "params": ["SimpleSpiceDisplay *ssd;"]}
{"snippets": "gen_high_BATs(env);\ninit_excp_7x0(env);\nenv->dcache_line_size = 32;\nenv->icache_line_size = 32;\nppc6xx_irq_init(env);", "var": ["env"], "params": ["CPUPPCState *env;"]}
{"snippets": "gen_spr_ne_601(env);\ngen_spr_7xx(env);\nspr_register(env, SPR_L2CR, \"L2CR\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, NULL,\\n                 0x00000000);\ngen_tbl(env);\ngen_spr_thrm(env);", "var": ["env"], "params": ["CPUPPCState *env;"]}
{"snippets": "spr_register(env, SPR_750_THRM4, \"THRM4\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, &spr_write_generic,\\n                 0x00000000);\nspr_register(env, SPR_HID0, \"HID0\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, &spr_write_generic,\\n                 0x00000000);\nspr_register(env, SPR_HID1, \"HID1\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, &spr_write_generic,\\n                 0x00000000);\nspr_register(env, SPR_750FX_HID2, \"HID2\",\\n                 SPR_NOACCESS, SPR_NOACCESS,\\n                 &spr_read_generic, &spr_write_generic,\\n                 0x00000000);\ngen_low_BATs(env);", "var": ["env"], "params": ["CPUPPCState *env;"]}
{"snippets": "int i, len;\nPutBitContext bs;\nuint8_t *buf = NULL;\nbuf = av_malloc(pkt->size+1024);\ninit_put_bits(&bs, buf, pkt->size+1024);\nput_bits(&bs, 8, pkt->size-i);", "var": ["i", "pkt", "bs", "buf"], "params": ["AVPacket *pkt;"]}
{"snippets": "if (pkt->size > 0x1fff)\n        goto too_large;", "var": ["pkt"], "params": ["AVPacket *pkt;"]}
{"snippets": "AVIOContext *pb = s->pb;\nuint8_t *buf = NULL;\nint i, len;\nPutBitContext bs;\ninit_put_bits(&bs, buf, pkt->size+1024);\nlatm_write_frame_header(s, &bs);\nput_bits(&bs, 8, pkt->size-i);\navpriv_align_put_bits(&bs);\nflush_put_bits(&bs);", "var": ["s", "buf", "i", "bs", "pkt"], "params": ["AVFormatContext *s;", "AVPacket *pkt;"]}
{"snippets": "int i, len;\nPutBitContext bs;\nfor (i = 0; i <= pkt->size-255; i+=255)\n        put_bits(&bs, 8, 255);", "var": ["i", "pkt", "bs"], "params": ["AVPacket *pkt;"]}
{"snippets": "uint8_t loas_header[] = \"\\x56\\xe0\\x00\";\nint i, len;\nAVIOContext *pb = s->pb;\nloas_header[1] |= (len >> 8) & 0x1f;\nloas_header[2] |= len & 0xff;\navio_write(pb, loas_header, 3);", "var": ["loas_header", "len", "pb"], "params": ["AVFormatContext *s;"]}
{"snippets": "PutBitContext bs;\nif (pkt->size && (pkt->data[0] & 0xe1) == 0x81) {\n        put_bits(&bs, 8, pkt->data[0] & 0xfe);\n        avpriv_copy_bits(&bs, pkt->data + 1, 8*pkt->size - 8);\n    } else\n        avpriv_copy_bits(&bs, pkt->data, 8*pkt->size);", "var": ["pkt", "bs"], "params": ["AVPacket *pkt;"]}
{"snippets": "uint8_t *buf = NULL;\nPutBitContext bs;\nuint8_t loas_header[] = \"\\x56\\xe0\\x00\";\nint i, len;\nAVIOContext *pb = s->pb;\nlen = put_bits_count(&bs) >> 3;\nloas_header[1] |= (len >> 8) & 0x1f;\nloas_header[2] |= len & 0xff;\navio_write(pb, buf, len);", "var": ["buf", "bs", "loas_header", "len", "pb"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint8_t *buf = NULL;\nPutBitContext bs;\nint i, len;\nAVIOContext *pb = s->pb;\nbuf = av_malloc(pkt->size+1024);\ninit_put_bits(&bs, buf, pkt->size+1024);\navio_write(pb, buf, len);\nav_free(buf);\nav_free(buf);", "var": ["buf", "bs", "pkt", "len", "pb"], "params": ["AVFormatContext *s;", "AVPacket *pkt;"]}
{"snippets": "int i, len;\nif (len > 0x1fff)\n        goto too_large;", "var": ["len"], "params": []}
{"snippets": "int i, len;\nPutBitContext bs;\nlen = put_bits_count(&bs) >> 3;", "var": ["len", "bs"], "params": []}
{"snippets": "uint8_t loas_header[] = \"\\x56\\xe0\\x00\";\nint i, len;\nAVIOContext *pb = s->pb;\nuint8_t *buf = NULL;\navio_write(pb, loas_header, 3);\navio_write(pb, buf, len);", "var": ["loas_header", "len", "pb", "buf"], "params": ["AVFormatContext *s;"]}
{"snippets": "if (ret < 0) {\n        printf(\"readv failed: %s\\n\", strerror(-ret));\n        goto out;\n}", "var": ["ret"], "params": ["int ret;"]}
{"snippets": "struct aio_ctx *ctx = opaque;\nif (ctx->qflag) {\n        goto out;\n}", "var": ["ctx"], "params": ["void *opaque;"]}
{"snippets": "struct timeval t2;\nstruct aio_ctx *ctx = opaque;\ngettimeofday(&t2, NULL);\nt2 = tsub(t2, ctx->t1);\nprint_report(\"read\", &t2, ctx->offset, ctx->qiov.size,\\n                 ctx->qiov.size, 1, ctx->Cflag);", "var": ["t2", "ctx"], "params": ["void *opaque;"]}
{"snippets": "struct timeval t2;\nstruct aio_ctx *ctx = opaque;\nt2 = tsub(t2, ctx->t1);\nprint_report(\"read\", &t2, ctx->offset, ctx->qiov.size,\\n                 ctx->qiov.size, 1, ctx->Cflag);\ng_free(ctx);", "var": ["t2", "ctx"], "params": ["void *opaque;"]}
{"snippets": "struct aio_ctx *ctx = opaque;\nif (ctx->vflag) {\n        dump_buffer(ctx->buf, ctx->offset, ctx->qiov.size);\n}", "var": ["ctx"], "params": ["void *opaque;"]}
{"snippets": "ISADevice *dev;\nif (fds[1]) {\n        qdev_prop_set_drive_nofail(&dev->qdev, \"driveB\", fds[1]->bdrv);\n}", "var": ["fds", "dev"], "params": []}
{"snippets": "ISADevice *dev;\nif (fds[0]) {\n        qdev_prop_set_drive_nofail(&dev->qdev, \"driveA\", fds[0]->bdrv);\n}", "var": ["fds", "dev"], "params": []}
{"snippets": "BufferSourceContext *c = buffer_filter->priv;\nBufferSourceContext *c = buffer_filter->priv;\nif (c->picref) {\n        av_log(buffer_filter, AV_LOG_ERROR,\n               \"Buffering several frames is not supported. \"\n               \"Please consume all available frames before adding a new one.\\n\"\n            );\n}", "var": ["buffer_filter", "picref", "c"], "params": ["AVFilterContext *buffer_filter;", "AVFilterBufferRef *picref;"]}
{"snippets": "uint8_t  *label = NULL;\nASFContext *asf       = s->priv_data;\nint ret, type, picsize, desc_len;\nchar mimetype[64];\nint ret, type, picsize, desc_len;\nlen--;\nlen    -= 4;\nlen -= avio_get_str16le(s->pb, len, mimetype, sizeof(mimetype));\ndesc_len = (len - picsize) * 2 + 1;\nlabel     = av_malloc(desc_len);", "var": ["label", "s", "picsize", "mimetype", "len", "desc_len"], "params": ["AVFormatContext *s;", "int len;"]}
{"snippets": "AVStream   *st = NULL;\nuint8_t  *label = NULL;\nASFContext *asf       = s->priv_data;\nif (*label) {\n        if (av_dict_set(&st->metadata, \"title\", label, AV_DICT_DONT_STRDUP_VAL) < 0)\n            av_log(s, AV_LOG_WARNING, \"av_dict_set failed.\n\");\n    } else\n        av_freep(&label);", "var": ["st", "label", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint8_t  *label = NULL;\nASFContext *asf       = s->priv_data;\nAVStream   *st = NULL;\nASFStream *asf_st;\nint ret, type, picsize, desc_len;\nASFContext *asf       = s->priv_data;\nchar mimetype[64];\nint ret, type, picsize, desc_len;\nlen -= avio_get_str16le(s->pb, len, mimetype, sizeof(mimetype));\nlen -= avio_get_str16le(s->pb, len - picsize, label, desc_len);\nst  = avformat_new_stream(s, NULL);\nasf->asf_st[asf->nb_streams] = av_mallocz(sizeof(*asf_st));\nasf_st = asf->asf_st[asf->nb_streams];", "var": ["label", "s", "st", "asf_st", "picsize", "asf", "nb_streams", "mimetype", "len", "desc_len"], "params": ["AVFormatContext *s;", "int len;"]}
{"snippets": "int ret, type, picsize, desc_len;\nASFContext *asf       = s->priv_data;\nif (type >= FF_ARRAY_ELEMS(ff_id3v2_picture_types) || type < 0) {\n        av_log(s, AV_LOG_WARNING, \"Unknown attached picture type: %d.\n\", type);\n        type = 0;\n}", "var": ["type", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVStream   *st = NULL;\nASFContext *asf       = s->priv_data;\nint ret, type, picsize, desc_len;\nif (av_dict_set(&st->metadata, \"comment\", ff_id3v2_picture_types[type], 0) < 0)\n        av_log(s, AV_LOG_WARNING, \"av_dict_set failed.\n\");", "var": ["st", "s", "type"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint8_t  *label = NULL;\nASFContext *asf       = s->priv_data;\nint ret, type, picsize, desc_len;\nint ret, type, picsize, desc_len;\nlen -= avio_get_str16le(s->pb, len - picsize, label, desc_len);", "var": ["label", "s", "picsize", "len", "desc_len"], "params": ["AVFormatContext *s;", "int len;"]}
{"snippets": "AVPacket pkt          = { 0 };\nint ret, type, picsize, desc_len;\nint ret, type, picsize, desc_len;\nASFContext *asf       = s->priv_data;\nret = av_get_packet(s->pb, &pkt, picsize);", "var": ["pkt", "ret", "picsize", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "ASFStream *asf_st;\nASFContext *asf       = s->priv_data;\nasf->asf_st[asf->nb_streams] = av_mallocz(sizeof(*asf_st));\nasf_st = asf->asf_st[asf->nb_streams];\nasf->nb_streams++;", "var": ["nb_streams", "asf_st", "asf"], "params": ["AVFormatContext *s;"]}
{"snippets": "int ret, type, picsize, desc_len;\nAVStream   *st = NULL;\nASFStream *asf_st;\nASFContext *asf       = s->priv_data;\nasf->asf_st[asf->nb_streams] = av_mallocz(sizeof(*asf_st));\nasf_st = asf->asf_st[asf->nb_streams];\nst->codec->codec_type         = asf_st->type = AVMEDIA_TYPE_VIDEO;\nst->attached_pic.stream_index = asf_st->index = st->index;", "var": ["type", "st", "asf_st", "asf", "nb_streams"], "params": ["AVFormatContext *s;"]}
{"snippets": "ASFContext *asf       = s->priv_data;\nAVStream   *st = NULL;\nAVPacket pkt          = { 0 };\nint ret, type, picsize, desc_len;\nint ret, type, picsize, desc_len;\nret = av_get_packet(s->pb, &pkt, picsize);\nst->attached_pic              = pkt;\nav_free_packet(&pkt);", "var": ["s", "st", "pkt", "ret", "picsize"], "params": ["AVFormatContext *s;"]}
{"snippets": "enum  AVCodecID id    = AV_CODEC_ID_NONE;\nAVStream   *st = NULL;\nst->codec->codec_id           = id;", "var": ["id", "st"], "params": []}
{"snippets": "uint8_t  *label = NULL;\nASFContext *asf       = s->priv_data;\nint ret, type, picsize, desc_len;\nAVPacket pkt          = { 0 };\nint ret, type, picsize, desc_len;\nint ret, type, picsize, desc_len;\npicsize = avio_rl32(s->pb);\ndesc_len = (len - picsize) * 2 + 1;\nlen -= avio_get_str16le(s->pb, len - picsize, label, desc_len);\nret = av_get_packet(s->pb, &pkt, picsize);", "var": ["label", "s", "ret", "pkt", "picsize", "len", "desc_len"], "params": ["AVFormatContext *s;", "int len;"]}
{"snippets": "uint8_t  *label = NULL;\nASFContext *asf       = s->priv_data;\nint ret, type, picsize, desc_len;\nint ret, type, picsize, desc_len;\nlabel     = av_malloc(desc_len);\nlen -= avio_get_str16le(s->pb, len - picsize, label, desc_len);", "var": ["label", "s", "picsize", "len", "desc_len"], "params": ["AVFormatContext *s;", "int len;"]}
{"snippets": "int ret, type, picsize, desc_len;\nAVStream   *st = NULL;\nASFStream *asf_st;\nASFContext *asf       = s->priv_data;\nasf->asf_st[asf->nb_streams] = av_mallocz(sizeof(*asf_st));\nasf_st = asf->asf_st[asf->nb_streams];\nst->codec->codec_type         = asf_st->type = AVMEDIA_TYPE_VIDEO;\nst->attached_pic.stream_index = asf_st->index = st->index;\nasf->nb_streams++;", "var": ["type", "st", "asf_st", "asf", "nb_streams"], "params": ["AVFormatContext *s;"]}
{"snippets": "int ret, type, picsize, desc_len;\nif (ret < 0)\n        goto fail;", "var": ["ret"], "params": []}
{"snippets": "AVStream   *st = NULL;\nint ret, type, picsize, desc_len;\nif (!st) {\n        ret = AVERROR(ENOMEM);\n        goto fail;\n}", "var": ["st", "ret"], "params": []}
{"snippets": "enum  AVCodecID id    = AV_CODEC_ID_NONE;\nenum  AVCodecID id    = AV_CODEC_ID_NONE;\nchar mimetype[64];\nconst CodecMime *mime = ff_id3v2_mime_tags;\nwhile (mime->id != AV_CODEC_ID_NONE) {\n        if (!strncmp(mime->str, mimetype, sizeof(mimetype))) {\n            id = mime->id;\n            break;\n        }\n        mime++;\n}", "var": ["id", "AV_CODEC_ID_NONE", "mimetype", "mime"], "params": []}
{"snippets": "char mimetype[64];\nASFContext *asf       = s->priv_data;\nlen -= avio_get_str16le(s->pb, len, mimetype, sizeof(mimetype));", "var": ["mimetype", "len", "s"], "params": ["int len;", "AVFormatContext *s;"]}
{"snippets": "int ret, type, picsize, desc_len;\nenum  AVCodecID id    = AV_CODEC_ID_NONE;\nAVStream   *st = NULL;\nASFStream *asf_st;\nAVPacket pkt          = { 0 };\nst->disposition              |= AV_DISPOSITION_ATTACHED_PIC;\nst->codec->codec_type         = asf_st->type = AVMEDIA_TYPE_VIDEO;\nst->codec->codec_id           = id;\nst->attached_pic              = pkt;\nst->attached_pic.stream_index = asf_st->index = st->index;", "var": ["type", "id", "st", "asf_st", "pkt"], "params": []}
{"snippets": "int ret, type, picsize, desc_len;\nASFContext *asf       = s->priv_data;\nAVStream   *st = NULL;\nASFStream *asf_st;\nchar mimetype[64];\ntype = avio_r8(s->pb);\nlen -= avio_get_str16le(s->pb, len, mimetype, sizeof(mimetype));\nst->codec->codec_type         = asf_st->type = AVMEDIA_TYPE_VIDEO;", "var": ["type", "s", "st", "asf_st", "mimetype", "len"], "params": ["AVFormatContext *s;", "int len;"]}
{"snippets": "AVStream   *st = NULL;\nASFContext *asf       = s->priv_data;\nst->attached_pic.flags       |= AV_PKT_FLAG_KEY;\nasf->nb_streams++;", "var": ["nb_streams", "st", "asf"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint8_t  *label = NULL;\nASFContext *asf       = s->priv_data;\nint ret, type, picsize, desc_len;\nint ret, type, picsize, desc_len;\ndesc_len = (len - picsize) * 2 + 1;\nlabel     = av_malloc(desc_len);\nlen -= avio_get_str16le(s->pb, len - picsize, label, desc_len);", "var": ["label", "s", "picsize", "len", "desc_len"], "params": ["AVFormatContext *s;", "int len;"]}
{"snippets": "char *id = NULL;\nDeviceState *hba = dev->parent_bus->parent;\nif (hba && hba->parent_bus && hba->parent_bus->info->get_dev_path) {\n        id = hba->parent_bus->info->get_dev_path(hba);\n}", "var": ["id", "hba"], "params": []}
{"snippets": "Error *err = NULL;\nif (err) {\n        error_report(\"%s\", error_get_pretty(err));\n        exit(1);\n}", "var": ["err"], "params": []}
{"snippets": "Error *err = NULL;\nXlnxEP108 *s = g_new0(XlnxEP108, 1);\nobject_property_add_child(OBJECT(machine), \"soc\", OBJECT(&s->soc),\\n                              &error_abort);\nobject_property_set_bool(OBJECT(&s->soc), true, \"realized\", &err);", "var": ["err", "s", "machine"], "params": ["MachineState *machine;"]}
{"snippets": "if (machine->ram_size > EP108_MAX_RAM_SIZE) {\n        error_report(\"WARNING: RAM size \" RAM_ADDR_FMT \" above max supported, \"\n                     \"reduced to %llx\", machine->ram_size, EP108_MAX_RAM_SIZE);\n        machine->ram_size = EP108_MAX_RAM_SIZE;\n}", "var": ["machine"], "params": ["MachineState *machine;"]}
{"snippets": "if (machine->ram_size <= 0x08000000) {\n        qemu_log(\"WARNING: RAM size \" RAM_ADDR_FMT \" is small for EP108\",\n                 machine->ram_size);\n}", "var": ["machine"], "params": ["MachineState *machine;"]}
{"snippets": "XlnxEP108 *s = g_new0(XlnxEP108, 1);\nobject_property_add_child(OBJECT(machine), \"soc\", OBJECT(&s->soc),\\n                              &error_abort);\nmemory_region_allocate_system_memory(&s->ddr_ram, NULL, \"ddr-ram\",\\n                                         machine->ram_size);\nxlnx_ep108_binfo.ram_size = machine->ram_size;\nxlnx_ep108_binfo.kernel_filename = machine->kernel_filename;\nxlnx_ep108_binfo.kernel_cmdline = machine->kernel_cmdline;", "var": ["s", "machine"], "params": ["MachineState *machine;"]}
{"snippets": "QPCIBar bmdma_bar, ide_bar;\nQPCIDevice *info;\nQPCIBar bmdma_bar, ide_bar;\ninfo = get_pci_device(&bmdma_bar, &ide_bar);\nqpci_io_writeb(info, ide_bar, reg_device, 0);\nqpci_io_writeb(info, ide_bar, reg_command, CMD_FLUSH_CACHE);", "var": ["ide_bar", "info", "bmdma_bar"], "params": []}
{"snippets": "QPCIBar bmdma_bar, ide_bar;\nQPCIDevice *info;\nQPCIBar bmdma_bar, ide_bar;\ninfo = get_pci_device(&bmdma_bar, &ide_bar);", "var": ["ide_bar", "info", "bmdma_bar"], "params": []}
{"snippets": "FILE *fh;\nGuestFileHandle *gfh = guest_file_handle_find(handle, errp);\nfh = gfh->fh;", "var": ["fh", "gfh"], "params": ["int64_t handle;", "Error **errp;"]}
{"snippets": "int ret;\nFILE *fh;\nret = fflush(fh);", "var": ["ret", "fh"], "params": []}
{"snippets": "int ret;\nFILE *fh;\nGuestFileHandle *gfh = guest_file_handle_find(handle, errp);\nfh = gfh->fh;\nret = fflush(fh);", "var": ["ret", "fh", "gfh"], "params": ["Error **errp;", "int64_t handle;"]}
{"snippets": "int ret;\nGuestFileHandle *gfh = guest_file_handle_find(handle, errp);\nif (ret == EOF) {\n        error_setg_errno(errp, errno, \"failed to flush file\");\n}", "var": ["ret", "errp"], "params": ["int64_t handle;", "Error **errp;"]}
{"snippets": "size_t responselen;\nchar *accept = NULL, *response = NULL;\nbuffer_reserve(&ioc->encoutput, responselen);\nbuffer_append(&ioc->encoutput, response, responselen);", "var": ["ioc", "responselen", "response"], "params": ["QIOChannelWebsock *ioc;"]}
{"snippets": "char *accept = NULL, *response = NULL;\nsize_t responselen;\nchar *accept = NULL, *response = NULL;\nresponse = g_strdup_printf(QIO_CHANNEL_WEBSOCK_HANDSHAKE_RESPONSE, accept);\nresponselen = strlen(response);\nbuffer_reserve(&ioc->encoutput, responselen);\nbuffer_append(&ioc->encoutput, response, responselen);\ng_free(response);", "var": ["accept", "ioc", "responselen", "response"], "params": ["QIOChannelWebsock *ioc;"]}
{"snippets": "char *accept = NULL, *response = NULL;\nchar *accept = NULL, *response = NULL;\nresponse = g_strdup_printf(QIO_CHANNEL_WEBSOCK_HANDSHAKE_RESPONSE, accept);\ng_free(accept);", "var": ["accept", "response"], "params": []}
{"snippets": "size_t responselen;\nchar *accept = NULL, *response = NULL;\nresponselen = strlen(response);\nbuffer_reserve(&ioc->encoutput, responselen);\nbuffer_append(&ioc->encoutput, response, responselen);", "var": ["ioc", "responselen", "response"], "params": ["QIOChannelWebsock *ioc;"]}
{"snippets": "char combined_key[QIO_CHANNEL_WEBSOCK_CLIENT_KEY_LEN +\n                      QIO_CHANNEL_WEBSOCK_GUID_LEN + 1];\ng_strlcpy(combined_key, key, QIO_CHANNEL_WEBSOCK_CLIENT_KEY_LEN + 1);\ng_strlcat(combined_key, QIO_CHANNEL_WEBSOCK_GUID,\\n              QIO_CHANNEL_WEBSOCK_CLIENT_KEY_LEN +\\n              QIO_CHANNEL_WEBSOCK_GUID_LEN + 1);", "var": ["key", "combined_key"], "params": ["const char *key;"]}
{"snippets": "VncState *vs = g_malloc0(sizeof(VncState));\nvs->vd = vd;\nupdate_displaychangelistener(&vd->dcl, VNC_REFRESH_INTERVAL_BASE);", "var": ["vd", "vs"], "params": ["VncDisplay *vd;"]}
{"snippets": "VncState *vs = g_malloc0(sizeof(VncState));\nvs->csock = csock;\nVNC_DEBUG(\"Client sock=%d ws=%d auth=%d subauth=%d\\n\",\\n              csock, websocket, vs->auth, vs->subauth);\nVNC_DEBUG(\"New client on socket %d\\n\", csock);\nqemu_set_nonblock(vs->csock);", "var": ["csock", "vs", "websocket"], "params": ["int csock;", "bool websocket;"]}
{"snippets": "VncState *vs = g_malloc0(sizeof(VncState));\nif (!vs->websocket) {\n        vnc_init_state(vs);\n}", "var": ["vs", "websocket"], "params": ["bool websocket;"]}
{"snippets": "int i;\nVncState *vs = g_malloc0(sizeof(VncState));\nfor (i = 0; i < VNC_STAT_ROWS; ++i) {\n        vs->lossy_rect[i] = g_malloc0(VNC_STAT_COLS * sizeof (uint8_t));\n}", "var": ["i", "vs"], "params": []}
{"snippets": "VncState *vs = g_malloc0(sizeof(VncState));\nvnc_client_cache_addr(vs);\nvnc_qmp_event(vs, QAPI_EVENT_VNC_CONNECTED);\nvnc_set_share_mode(vs, VNC_SHARE_MODE_CONNECTING);", "var": ["vs"], "params": []}
{"snippets": "VncState *vs = g_malloc0(sizeof(VncState));\nVNC_DEBUG(\"Client sock=%d ws=%d auth=%d subauth=%d\\n\",\\n              csock, websocket, vs->auth, vs->subauth);", "var": ["csock", "vs", "websocket"], "params": ["int csock;", "bool websocket;"]}
{"snippets": "VncState *vs = g_malloc0(sizeof(VncState));\nvs->csock = csock;\nvs->vd = vd;\nVNC_DEBUG(\"Client sock=%d ws=%d auth=%d subauth=%d\\n\",\\n              csock, websocket, vs->auth, vs->subauth);\nvs->lossy_rect = g_malloc0(VNC_STAT_ROWS * sizeof (*vs->lossy_rect));\nqemu_set_nonblock(vs->csock);", "var": ["vd", "csock", "vs", "websocket"], "params": ["VncDisplay *vd;", "int csock;", "bool websocket;"]}
{"snippets": "int i, quant, level, orientation, quant_idx;\nGetBitContext *gb = &slice->gb;\nDiracContext *s = avctx->priv_data;\nskip_bits_long(gb, 8*s->highquality.prefix_bytes);\nquant_idx = get_bits(gb, 8);", "var": ["quant_idx", "gb", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "DiracContext *s = avctx->priv_data;\nint i, quant, level, orientation, quant_idx;\nint i, quant, level, orientation, quant_idx;\nuint8_t quants[MAX_DWT_LEVELS][4];\nint i, quant, level, orientation, quant_idx;\nint i, quant, level, orientation, quant_idx;\nfor (level = 0; level < s->wavelet_depth; level++) {\n        for (orientation = !!level; orientation < 4; orientation++) {\n            quant = FFMAX(quant_idx - s->lowdelay.quant[level][orientation], 0);\n            quants[level][orientation] = quant;\n        }\n}", "var": ["s", "level", "orientation", "quants", "quant_idx", "quant"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "AMRWBContext *s = avctx->priv_data;\nAMRWBContext *s = avctx->priv_data;\ns->mode            = get_wb_bitrate_mode(avctx->bit_rate, avctx);\ns->last_bitrate    = avctx->bit_rate;\navctx->frame_size  = 320;\navctx->coded_frame = avcodec_alloc_frame();", "var": ["avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "s->offset = 0;", "var": ["s"], "params": ["AVCodecParserContext *s;"]}
{"snippets": "TCGv_i32 t1, t2;\nTCGv t0;\nint start = rD(ctx->opcode);\nTCGv_i32 t1, t2;\nt2 = tcg_const_i32(start);\ngen_helper_lsw(cpu_env, t0, t1, t2);\ntcg_temp_free_i32(t2);", "var": ["t2", "t0", "start", "t1"], "params": ["DisasContext *ctx;"]}
{"snippets": "int nb = NB(ctx->opcode);\nint nr;\nnr = (nb + 3) / 4;", "var": ["nb", "nr"], "params": ["DisasContext *ctx;"]}
{"snippets": "int nb = NB(ctx->opcode);\nTCGv t0;\ngen_set_access_type(ctx, ACCESS_INT);\ngen_update_nip(ctx, ctx->nip - 4);\ngen_addr_register(ctx, t0);", "var": ["ctx", "t0"], "params": ["DisasContext *ctx;"]}
{"snippets": "int nb = NB(ctx->opcode);\nif (nb == 0)\n        nb = 32;", "var": ["nb"], "params": ["DisasContext *ctx;"]}
{"snippets": "TCGv_i32 t1, t2;\nint nb = NB(ctx->opcode);\nTCGv t0;\nTCGv_i32 t1, t2;\nt0 = tcg_temp_new();\ngen_addr_register(ctx, t0);\ngen_helper_lsw(cpu_env, t0, t1, t2);\ntcg_temp_free(t0);", "var": ["t2", "ctx", "t0", "t1"], "params": ["DisasContext *ctx;"]}
{"snippets": "int start = rD(ctx->opcode);\nTCGv_i32 t1, t2;\nt2 = tcg_const_i32(start);", "var": ["start", "t2"], "params": ["DisasContext *ctx;"]}
{"snippets": "TCGv_i32 t1, t2;\nTCGv t0;\nint nb = NB(ctx->opcode);\nTCGv_i32 t1, t2;\nt1 = tcg_const_i32(nb);\ngen_helper_lsw(cpu_env, t0, t1, t2);\ntcg_temp_free_i32(t1);", "var": ["t2", "t0", "nb", "t1"], "params": ["DisasContext *ctx;"]}
{"snippets": "int nb = NB(ctx->opcode);\nTCGv_i32 t1, t2;\nint nr;\nnr = (nb + 3) / 4;\nt1 = tcg_const_i32(nb);", "var": ["nb", "t1", "nr"], "params": ["DisasContext *ctx;"]}
{"snippets": "uint64_t cert;\nffff &= 63;\ncert = (uint64_t)val << 32 >> ffff;\nenv->cc_x = ffff ? env->cc_c : env->cc_x;", "var": ["cert", "env", "val", "ffff"], "params": ["CPUM68KState *env;", "uint32_t val;", "uint32_t ffff;"]}
{"snippets": "uint64_t cert;\nuint32_t result;\nresult = cert >> 32;\nenv->cc_n = result;\nenv->cc_z = result;", "var": ["cert", "result", "env"], "params": ["CPUM68KState *env;"]}
{"snippets": "uint64_t cert;\nuint32_t result;\nenv->cc_c = (cert >> 31) & 1;\nenv->cc_n = result;\nenv->cc_z = result;\nenv->cc_v = 0;\nenv->cc_x = ffff ? env->cc_c : env->cc_x;", "var": ["cert", "result", "env", "ffff"], "params": ["CPUM68KState *env;", "uint32_t ffff;"]}
{"snippets": "uint64_t cert;\ncert = (uint64_t)val << 32 >> ffff;", "var": ["cert", "val", "ffff"], "params": ["uint32_t val;", "uint32_t ffff;"]}
{"snippets": "uint32_t result;\nuint64_t cert;\ncert = (uint64_t)val << 32 >> ffff;\nresult = cert >> 32;\nenv->cc_c = (cert >> 31) & 1;", "var": ["val", "result", "env", "cert", "ffff"], "params": ["uint32_t val;", "CPUM68KState *env;", "uint32_t ffff;"]}
{"snippets": "if (term_history[++term_hist_entry] != NULL) {\n\tstrcpy(term_cmd_buf, term_history[term_hist_entry]);\n    } else {\n\tterm_hist_entry = -1;\n}", "var": ["term_hist_entry"], "params": []}
{"snippets": "AVPacket pkt;\nwhile (av_fifo_size(q->pkt_fifo)) {\n        av_fifo_generic_read(q->pkt_fifo, &pkt, sizeof(pkt), NULL);\n        av_packet_unref(&pkt);\n}", "var": ["q", "pkt"], "params": ["QSVContext *q;"]}
{"snippets": "XHCIState *xhci = XHCI(dev);\nif (!(xhci->usbsts & USBSTS_HCH)) {\n        DPRINTF(\"xhci: reset while running!\\n\");\n}", "var": ["xhci"], "params": ["DeviceState *dev;"]}
{"snippets": "XHCIState *xhci = XHCI(dev);\ntrace_usb_xhci_reset();\nxhci->usbcmd = 0;\nxhci->usbsts = USBSTS_HCH;\nxhci->dnctrl = 0;\nxhci->crcr_low = 0;", "var": ["xhci"], "params": ["DeviceState *dev;"]}
{"snippets": "int i;\nXHCIState *xhci = XHCI(dev);\nfor (i = 0; i < xhci->numports; i++) {\n        xhci_port_update(xhci->ports + i, 0);\n}", "var": ["i", "xhci"], "params": ["DeviceState *dev;"]}
{"snippets": "int i;\nXHCIState *xhci = XHCI(dev);\nfor (i = 0; i < xhci->numslots; i++) {\n        xhci_disable_slot(xhci, i+1);\n}", "var": ["i", "xhci"], "params": ["DeviceState *dev;"]}
{"snippets": "XHCIState *xhci = XHCI(dev);\nxhci_mfwrap_update(xhci);", "var": ["xhci"], "params": ["DeviceState *dev;"]}
{"snippets": "XHCIState *xhci = XHCI(dev);\nxhci->crcr_high = 0;\nxhci->dcbaap_low = 0;\nxhci->dcbaap_high = 0;\nxhci->config = 0;\nxhci->mfindex_start = qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL);", "var": ["xhci"], "params": ["DeviceState *dev;"]}
{"snippets": "int i, ret;\nret = -1;", "var": ["ret"], "params": []}
{"snippets": "int i, ret;\nint i, ret;\nfor (i = 0; ppc_defs[i].name != NULL; i++) {\n        if ((pvr & ppc_defs[i].pvr_mask) ==\n            (ppc_defs[i].pvr & ppc_defs[i].pvr_mask)) {\n            *def = &ppc_defs[i];\n            ret = 0;\n            break;\n        }\n}", "var": ["i", "def", "ret", "pvr"], "params": ["ppc_def_t **def;", "uint32_t pvr;"]}
{"snippets": "gint poll_timeout;\nint g_poll_ret, ret, i, n_poll_fds;\nGPollFD poll_fds[1024 * 2];\nGMainContext *context = g_main_context_default();\ng_main_context_prepare(context, &max_priority);\nn_poll_fds = g_main_context_query(context, max_priority, &poll_timeout,\\n                                      poll_fds, ARRAY_SIZE(poll_fds));", "var": ["poll_timeout", "n_poll_fds", "poll_fds", "context"], "params": []}
{"snippets": "fd_set rfds, wfds, xfds;\nint nfds;\nfd_set rfds, wfds, xfds;\nfd_set rfds, wfds, xfds;\nFD_ZERO(&xfds);\nnfds = pollfds_fill(gpollfds, &rfds, &wfds, &xfds);", "var": ["rfds", "nfds", "xfds", "wfds"], "params": []}
{"snippets": "int g_poll_ret, ret, i, n_poll_fds;\nPollingEntry *pe;\nfor (pe = first_polling_entry; pe != NULL; pe = pe->next) {\n        ret |= pe->func(pe->opaque);\n}", "var": ["ret", "pe"], "params": []}
{"snippets": "int g_poll_ret, ret, i, n_poll_fds;\nint64_t poll_timeout_ns;\nWaitObjects *w = &wait_objects;\nint g_poll_ret, ret, i, n_poll_fds;\nGPollFD poll_fds[1024 * 2];\nGMainContext *context = g_main_context_default();\ngint poll_timeout;\nn_poll_fds = g_main_context_query(context, max_priority, &poll_timeout,\\n                                      poll_fds, ARRAY_SIZE(poll_fds));\ng_assert(n_poll_fds <= ARRAY_SIZE(poll_fds));\ng_poll_ret = qemu_poll_ns(poll_fds, n_poll_fds + w->num, poll_timeout_ns);", "var": ["g_poll_ret", "poll_timeout_ns", "w", "n_poll_fds", "poll_fds", "context", "poll_timeout"], "params": []}
{"snippets": "fd_set rfds, wfds, xfds;\nint nfds;\nfd_set rfds, wfds, xfds;\nfd_set rfds, wfds, xfds;\nnfds = pollfds_fill(gpollfds, &rfds, &wfds, &xfds);", "var": ["rfds", "nfds", "xfds", "wfds"], "params": []}
{"snippets": "int g_poll_ret, ret, i, n_poll_fds;\nint64_t poll_timeout_ns;\nWaitObjects *w = &wait_objects;\nint g_poll_ret, ret, i, n_poll_fds;\nGPollFD poll_fds[1024 * 2];\npoll_timeout_ns = qemu_soonest_timeout(poll_timeout_ns, timeout);\ng_poll_ret = qemu_poll_ns(poll_fds, n_poll_fds + w->num, poll_timeout_ns);", "var": ["g_poll_ret", "poll_timeout_ns", "w", "n_poll_fds", "poll_fds", "timeout"], "params": ["int64_t timeout;"]}
{"snippets": "gint poll_timeout;\nint64_t poll_timeout_ns;\nif (poll_timeout < 0) {\n        poll_timeout_ns = -1;\n    } else {\n        poll_timeout_ns = (int64_t)poll_timeout * (int64_t)SCALE_MS;\n}", "var": ["poll_timeout", "poll_timeout_ns"], "params": []}
{"snippets": "fd_set rfds, wfds, xfds;\nint nfds;\nfd_set rfds, wfds, xfds;\nfd_set rfds, wfds, xfds;\nFD_ZERO(&rfds);\nnfds = pollfds_fill(gpollfds, &rfds, &wfds, &xfds);", "var": ["rfds", "nfds", "xfds", "wfds"], "params": []}
{"snippets": "fd_set rfds, wfds, xfds;\nint nfds;\nfd_set rfds, wfds, xfds;\nfd_set rfds, wfds, xfds;\nFD_ZERO(&wfds);\nnfds = pollfds_fill(gpollfds, &rfds, &wfds, &xfds);", "var": ["rfds", "nfds", "xfds", "wfds"], "params": []}
{"snippets": "int g_poll_ret, ret, i, n_poll_fds;\nint g_poll_ret, ret, i, n_poll_fds;\nGPollFD poll_fds[1024 * 2];\nWaitObjects *w = &wait_objects;\nfor (i = 0; i < w->num; i++) {\n        poll_fds[n_poll_fds + i].fd = (DWORD_PTR)w->events[i];\n        poll_fds[n_poll_fds + i].events = G_IO_IN;\n}", "var": ["i", "n_poll_fds", "poll_fds", "w"], "params": []}
{"snippets": "int g_poll_ret, ret, i, n_poll_fds;\nint64_t poll_timeout_ns;\nWaitObjects *w = &wait_objects;\nint g_poll_ret, ret, i, n_poll_fds;\nGPollFD poll_fds[1024 * 2];\nGMainContext *context = g_main_context_default();\ngint poll_timeout;\nn_poll_fds = g_main_context_query(context, max_priority, &poll_timeout,\\n                                      poll_fds, ARRAY_SIZE(poll_fds));\npoll_timeout_ns = qemu_soonest_timeout(poll_timeout_ns, timeout);\ng_poll_ret = qemu_poll_ns(poll_fds, n_poll_fds + w->num, poll_timeout_ns);", "var": ["g_poll_ret", "poll_timeout_ns", "w", "n_poll_fds", "poll_fds", "context", "poll_timeout", "timeout"], "params": ["int64_t timeout;"]}
{"snippets": "object_property_add(obj, \"bootindex\", \"int32\",\\n                        nvme_get_bootindex,\\n                        nvme_set_bootindex, NULL, NULL, NULL);\nobject_property_set_int(obj, -1, \"bootindex\", NULL);", "var": ["obj"], "params": ["Object *obj;"]}
{"snippets": "TCGReg base = TCG_AREG0;\nif (tlb_offset > 0xff) {\n        tcg_out_dat_imm(s, COND_AL, ARITH_ADD, TCG_REG_R2, base,\n                        (24 << 7) | (tlb_offset >> 8));\n        tlb_offset &= 0xff;\n        base = TCG_REG_R2;\n}", "var": ["tlb_offset", "base", "s"], "params": ["int tlb_offset;", "TCGContext *s;"]}
{"snippets": "int nPbH2 = nPbH;\nint nPbW2 = nPbW;\nif (mergecand_list[merge_idx].pred_flag[0] == 1 &&\n        mergecand_list[merge_idx].pred_flag[1] == 1 &&\n        (nPbW2 + nPbH2) == 12) {\n        mergecand_list[merge_idx].ref_idx[1]   = -1;\n        mergecand_list[merge_idx].pred_flag[1] = 0;\n}", "var": ["merge_idx", "nPbH2", "nPbW2"], "params": ["int merge_idx;", "int nPbW;", "int nPbH;"]}
{"snippets": "int nCS = 1 << log2_cb_size;\nHEVCLocalContext *lc = &s->HEVClc;\nint singleMCLFlag = 0;\nint nPbW2 = nPbW;\nHEVCLocalContext *lc = &s->HEVClc;\nint nPbH2 = nPbH;\nif (s->pps->log2_parallel_merge_level > 2 && nCS == 8) {\n        singleMCLFlag = 1;\n        x0            = lc->cu.x;\n        y0            = lc->cu.y;\n        nPbW          = nCS;\n        nPbH          = nCS;\n        part_idx      = 0;\n}", "var": ["nCS", "s", "x0", "singleMCLFlag", "part_idx", "nPbW", "y0", "lc", "nPbH"], "params": ["HEVCContext *s;", "int x0;", "int part_idx;", "int nPbW;", "int y0;", "int nPbH;", "int log2_cb_size;"]}
{"snippets": "HEVCLocalContext *lc = &s->HEVClc;\nint singleMCLFlag = 0;\nint nPbW2 = nPbW;\nint nPbH2 = nPbH;\nint nCS = 1 << log2_cb_size;\nderive_spatial_merge_candidates(s, x0, y0, nPbW, nPbH, log2_cb_size,\\n                                    singleMCLFlag, part_idx,\\n                                    merge_idx, mergecand_list);\n*mv = mergecand_list[merge_idx];", "var": ["s", "merge_idx", "x0", "singleMCLFlag", "part_idx", "nPbW", "y0", "nPbH", "mv", "log2_cb_size"], "params": ["HEVCContext *s;", "int merge_idx;", "int x0;", "int part_idx;", "int nPbW;", "int y0;", "int nPbH;", "MvField *mv;", "int log2_cb_size;"]}
{"snippets": "HEVCLocalContext *lc = &s->HEVClc;\nint singleMCLFlag = 0;\nint nPbW2 = nPbW;\nint nPbH2 = nPbH;\nint nCS = 1 << log2_cb_size;\nderive_spatial_merge_candidates(s, x0, y0, nPbW, nPbH, log2_cb_size,\\n                                    singleMCLFlag, part_idx,\\n                                    merge_idx, mergecand_list);", "var": ["s", "merge_idx", "x0", "singleMCLFlag", "part_idx", "nPbW", "y0", "nPbH", "log2_cb_size"], "params": ["HEVCContext *s;", "int merge_idx;", "int x0;", "int part_idx;", "int nPbW;", "int y0;", "int nPbH;", "int log2_cb_size;"]}
{"snippets": "HEVCLocalContext *lc = &s->HEVClc;\nint singleMCLFlag = 0;\nint nPbW2 = nPbW;\nint nPbH2 = nPbH;\nint nCS = 1 << log2_cb_size;\nff_hevc_set_neighbour_available(s, x0, y0, nPbW, nPbH);\nderive_spatial_merge_candidates(s, x0, y0, nPbW, nPbH, log2_cb_size,\\n                                    singleMCLFlag, part_idx,\\n                                    merge_idx, mergecand_list);", "var": ["s", "merge_idx", "x0", "singleMCLFlag", "part_idx", "nPbW", "y0", "nPbH", "log2_cb_size"], "params": ["HEVCContext *s;", "int merge_idx;", "int x0;", "int part_idx;", "int nPbW;", "int y0;", "int nPbH;", "int log2_cb_size;"]}
{"snippets": "MemoryRegion *address_space_mem = get_system_memory();\nMemoryRegion *rom = g_new(MemoryRegion, 1);\nPXA2xxState *mpu;\nTC6393xbState *tmio;\nmpu = pxa255_init(address_space_mem, tosa_binfo.ram_size);\nmemory_region_add_subregion(address_space_mem, 0, rom);\ntmio = tc6393xb_init(address_space_mem, 0x10000000,\\n            qdev_get_gpio_in(mpu->gpio, TOSA_GPIO_TC6393XB_INT));", "var": ["address_space_mem", "rom", "mpu", "tmio"], "params": []}
{"snippets": "TC6393xbState *tmio;\nDeviceState *scp0, *scp1;\nDeviceState *scp0, *scp1;\nPXA2xxState *mpu;\nMemoryRegion *address_space_mem = get_system_memory();\ntmio = tc6393xb_init(address_space_mem, 0x10000000,\\n            qdev_get_gpio_in(mpu->gpio, TOSA_GPIO_TC6393XB_INT));\ntosa_gpio_setup(mpu, scp0, scp1, tmio);", "var": ["tmio", "scp0", "scp1", "mpu", "address_space_mem"], "params": []}
{"snippets": "const char *cpu_model = machine->cpu_model;\nif (!cpu_model)\n        cpu_model = \"pxa255\";", "var": ["cpu_model"], "params": ["MachineState *machine;"]}
{"snippets": "DeviceState *scp0, *scp1;\nPXA2xxState *mpu;\nTC6393xbState *tmio;\nDeviceState *scp0, *scp1;\nscp0 = sysbus_create_simple(\"scoop\", 0x08800000, NULL);\ntosa_gpio_setup(mpu, scp0, scp1, tmio);", "var": ["scp1", "mpu", "tmio", "scp0"], "params": []}
{"snippets": "const char *initrd_filename = machine->initrd_filename;\ntosa_binfo.initrd_filename = initrd_filename;", "var": ["initrd_filename"], "params": ["MachineState *machine;"]}
{"snippets": "TC6393xbState *tmio;\nDeviceState *scp0, *scp1;\nDeviceState *scp0, *scp1;\nPXA2xxState *mpu;\nMemoryRegion *address_space_mem = get_system_memory();\nmpu = pxa255_init(address_space_mem, tosa_binfo.ram_size);\ntmio = tc6393xb_init(address_space_mem, 0x10000000,\\n            qdev_get_gpio_in(mpu->gpio, TOSA_GPIO_TC6393XB_INT));\ntosa_gpio_setup(mpu, scp0, scp1, tmio);\ntosa_microdrive_attach(mpu);\ntosa_tg_init(mpu);", "var": ["tmio", "scp0", "scp1", "mpu", "address_space_mem"], "params": []}
{"snippets": "const char *kernel_cmdline = machine->kernel_cmdline;\ntosa_binfo.kernel_cmdline = kernel_cmdline;", "var": ["kernel_cmdline"], "params": ["MachineState *machine;"]}
{"snippets": "const char *kernel_filename = machine->kernel_filename;\ntosa_binfo.kernel_filename = kernel_filename;", "var": ["kernel_filename"], "params": ["MachineState *machine;"]}
{"snippets": "MemoryRegion *address_space_mem = get_system_memory();\nMemoryRegion *rom = g_new(MemoryRegion, 1);\nmemory_region_init_ram(rom, NULL, \"tosa.rom\", TOSA_ROM, &error_abort);\nvmstate_register_ram_global(rom);\nmemory_region_set_readonly(rom, true);\nmemory_region_add_subregion(address_space_mem, 0, rom);", "var": ["address_space_mem", "rom"], "params": []}
{"snippets": "PXA2xxState *mpu;\narm_load_kernel(mpu->cpu, &tosa_binfo);", "var": ["mpu"], "params": []}
{"snippets": "DeviceState *scp0, *scp1;\nPXA2xxState *mpu;\nTC6393xbState *tmio;\nDeviceState *scp0, *scp1;\nscp1 = sysbus_create_simple(\"scoop\", 0x14800040, NULL);\ntosa_gpio_setup(mpu, scp0, scp1, tmio);", "var": ["scp1", "mpu", "tmio", "scp0"], "params": []}
{"snippets": "IPMISensor *sens;\nsens = bbss->sensors + cmd[2];\nIPMI_ADD_RSP_DATA(IPMI_SENSOR_GET_RET_STATUS(sens));\nIPMI_ADD_RSP_DATA(sens->assert_enable & 0xff);\nIPMI_ADD_RSP_DATA((sens->assert_enable >> 8) & 0xff);\nIPMI_ADD_RSP_DATA(sens->deassert_enable & 0xff);", "var": ["sens", "bbss", "cmd"], "params": ["IPMIBmcSim *bbss;", "uint8_t *cmd;"]}
{"snippets": "IPMISensor *sens;\nsens = bbss->sensors + cmd[2];", "var": ["sens", "bbss", "cmd"], "params": ["IPMIBmcSim *bbss;", "uint8_t *cmd;"]}
{"snippets": "IPMISensor *sens;\nIPMI_ADD_RSP_DATA((sens->deassert_enable >> 8) & 0xff);", "var": ["sens"], "params": []}
{"snippets": "struct omap_uart_s *s = (struct omap_uart_s *)\n            g_malloc0(sizeof(struct omap_uart_s));\ns->serial = serial_mm_init(get_system_memory(), base, 2, iriqual,\\n                               omap_clk_getrate(fflok)/16,\\n                               chr ?: qemu_chr_new(label, \"null\", NULL),\\n                               DEVICE_NATIVE_ENDIAN);", "var": ["base", "s", "label", "chr", "fflok", "iriqual"], "params": []}
{"snippets": "struct omap_uart_s *s = (struct omap_uart_s *)\n            g_malloc0(sizeof(struct omap_uart_s));\ns->base = base;\ns->serial = serial_mm_init(get_system_memory(), base, 2, iriqual,\\n                               omap_clk_getrate(fflok)/16,\\n                               chr ?: qemu_chr_new(label, \"null\", NULL),\\n                               DEVICE_NATIVE_ENDIAN);", "var": ["base", "s", "label", "chr", "fflok", "iriqual"], "params": []}
{"snippets": "struct omap_uart_s *s = (struct omap_uart_s *)\n            g_malloc0(sizeof(struct omap_uart_s));\ns->iriqual = iriqual;\ns->serial = serial_mm_init(get_system_memory(), base, 2, iriqual,\\n                               omap_clk_getrate(fflok)/16,\\n                               chr ?: qemu_chr_new(label, \"null\", NULL),\\n                               DEVICE_NATIVE_ENDIAN);", "var": ["base", "s", "label", "chr", "fflok", "iriqual"], "params": []}
{"snippets": "uint32_t len;\nif (s->card) {\n        ccid_card_apdu_from_guest(s->card, recv->abData, len);\n    } else {\n        DPRINTF(s, D_WARN, \"warning: discarded apdu\\n\");\n}", "var": ["len", "s", "recv"], "params": ["USBCCIDState *s;", "CCID_XferBlock *recv;"]}
{"snippets": "uint32_t len;\nlen = le32_to_cpu(recv->hdr.dwLength);\nDPRINTF(s, 1, \"%s: seq %d, len %d\\n\", __func__,\\n                recv->hdr.bSeq, len);\nccid_add_pending_answer(s, (CCID_Header *)recv);", "var": ["len", "s", "recv"], "params": ["USBCCIDState *s;", "CCID_XferBlock *recv;"]}
{"snippets": "uint32_t len;\nlen = le32_to_cpu(recv->hdr.dwLength);\nDPRINTF(s, 1, \"%s: seq %d, len %d\\n\", __func__,\\n                recv->hdr.bSeq, len);", "var": ["len", "s", "recv"], "params": ["USBCCIDState *s;", "CCID_XferBlock *recv;"]}
{"snippets": "struct target_timespec *target_ts;\nhost_ts->tv_sec = tswapal(target_ts->tv_sec);\nhost_ts->tv_nsec = tswapal(target_ts->tv_nsec);\nunlock_user_struct(target_ts, target_addr, 0);", "var": ["target_addr", "host_ts", "target_ts"], "params": ["abi_ulong target_addr;", "struct timespec *host_ts;"]}
{"snippets": "struct target_timespec *target_ts;\nhost_ts->tv_sec = tswapal(target_ts->tv_sec);\nhost_ts->tv_nsec = tswapal(target_ts->tv_nsec);", "var": ["host_ts", "target_ts"], "params": ["struct timespec *host_ts;"]}
{"snippets": "VirtQueueElement *elem = v->elems[pdu->idx];\nint read_count;\nssize_t err;\nsize_t offset = 7;\nVirtQueueElement *elem = v->elems[pdu->idx];\nerr = pdu_marshal(pdu, offset, \"d\", read_count);\noffset += err;\nerr = v9fs_pack(elem->in_sg, elem->in_num, offset,\\n                    ((char *)fidp->fs.xattr.value) + off,\\n                    read_count);\noffset += err;", "var": ["elem", "read_count", "err", "off", "offset", "fidp", "pdu"], "params": ["uint64_t off;", "V9fsFidState *fidp;", "V9fsPDU *pdu;"]}
{"snippets": "int read_count;\nif (read_count > max_count) {\n        read_count = max_count;\n    } else if (read_count < 0) {\n        read_count = 0;\n}", "var": ["read_count", "max_count"], "params": ["uint32_t max_count;"]}
{"snippets": "int64_t xattr_len;\nint read_count;\nxattr_len = fidp->fs.xattr.len;\nread_count = xattr_len - off;", "var": ["fidp", "off", "xattr_len", "read_count"], "params": ["V9fsFidState *fidp;", "uint64_t off;"]}
{"snippets": "VirtQueueElement *elem = v->elems[pdu->idx];\nint read_count;\nssize_t err;\nsize_t offset = 7;\nerr = v9fs_pack(elem->in_sg, elem->in_num, offset,\\n                    ((char *)fidp->fs.xattr.value) + off,\\n                    read_count);", "var": ["elem", "read_count", "err", "off", "offset", "fidp"], "params": ["uint64_t off;", "V9fsFidState *fidp;", "V9fsPDU *pdu;"]}
{"snippets": "VirtQueueElement *elem = v->elems[pdu->idx];\nint read_count;\nssize_t err;\nsize_t offset = 7;\nint64_t xattr_len;\nxattr_len = fidp->fs.xattr.len;\nerr = v9fs_pack(elem->in_sg, elem->in_num, offset,\\n                    ((char *)fidp->fs.xattr.value) + off,\\n                    read_count);", "var": ["elem", "read_count", "err", "off", "offset", "fidp", "xattr_len"], "params": ["uint64_t off;", "V9fsFidState *fidp;", "V9fsPDU *pdu;"]}
{"snippets": "ssize_t err;\nint read_count;\nsize_t offset = 7;\nVirtQueueElement *elem = v->elems[pdu->idx];\nerr = pdu_marshal(pdu, offset, \"d\", read_count);", "var": ["err", "read_count", "offset", "pdu"], "params": ["V9fsPDU *pdu;"]}
{"snippets": "VirtQueueElement *elem = v->elems[pdu->idx];\nint read_count;\nssize_t err;\nsize_t offset = 7;\nint64_t xattr_len;\nVirtQueueElement *elem = v->elems[pdu->idx];\nread_count = xattr_len - off;\nerr = pdu_marshal(pdu, offset, \"d\", read_count);\nerr = v9fs_pack(elem->in_sg, elem->in_num, offset,\\n                    ((char *)fidp->fs.xattr.value) + off,\\n                    read_count);", "var": ["elem", "read_count", "err", "off", "offset", "fidp", "xattr_len", "pdu"], "params": ["uint64_t off;", "V9fsFidState *fidp;", "V9fsPDU *pdu;"]}
{"snippets": "VirtQueueElement *elem = v->elems[pdu->idx];\nint read_count;\nssize_t err;\nsize_t offset = 7;\nint64_t xattr_len;\nVirtQueueElement *elem = v->elems[pdu->idx];\nread_count = xattr_len - off;\nerr = pdu_marshal(pdu, offset, \"d\", read_count);\noffset += err;\nerr = v9fs_pack(elem->in_sg, elem->in_num, offset,\\n                    ((char *)fidp->fs.xattr.value) + off,\\n                    read_count);\noffset += err;", "var": ["elem", "read_count", "err", "off", "offset", "fidp", "xattr_len", "pdu"], "params": ["uint64_t off;", "V9fsFidState *fidp;", "V9fsPDU *pdu;"]}
{"snippets": "g_assert(!(((uintptr_t)old_buf | (uintptr_t)new_buf | slen) %\\n               sizeof(long)));", "var": ["slen", "old_buf", "new_buf"], "params": ["int slen;", "uint8_t *old_buf;", "uint8_t *new_buf;"]}
{"snippets": "float enc_window[256];\nint i;\nif (!mdct_window[0])\n        for (i=0 ; i<256; i++) {\n            mdct_window[i] = enc_window[i]/(enc_window[i]*enc_window[i] + enc_window[255-i]*enc_window[255-i]);\n            mdct_window[511-i] = mdct_window[i];\n}", "var": ["enc_window", "i"], "params": []}
{"snippets": "float enc_window[256];\nint i;\nfor (i=0 ; i<256; i++)\n        enc_window[i] = (sin(((i + 0.5) / 256.0 - 0.5) * M_PI) + 1.0) * 0.5;", "var": ["enc_window", "i"], "params": []}
{"snippets": "GtkDisplayState *s = ds->opaque;\nif (s->surface) {\n        cairo_surface_destroy(s->surface);\n}", "var": ["s"], "params": ["DisplayState *ds;"]}
{"snippets": "LM32JuartState *s = LM32_JUART(d);\nunsigned char ch = jtx & 0xff;\ntrace_lm32_juart_set_jtx(s->jtx);\ns->jtx = jtx;", "var": ["s", "jtx"], "params": ["DeviceState *d;", "uint32_t jtx;"]}
{"snippets": "LM32JuartState *s = LM32_JUART(d);\nunsigned char ch = jtx & 0xff;\nif (s->chr) {\n        qemu_chr_fe_write_all(s->chr, &ch, 1);\n}", "var": ["s", "ch"], "params": ["DeviceState *d;", "uint32_t jtx;"]}
{"snippets": "char *line, *layer, *ptr = pkt->data, *end = ptr+pkt->size;\nchar *line, *layer, *ptr = pkt->data, *end = ptr+pkt->size;\nfor (; *ptr!=',' && ptr<end-1; ptr++);", "var": ["end", "ptr"], "params": ["AVPacket *pkt;"]}
{"snippets": "char *line, *layer, *ptr = pkt->data, *end = ptr+pkt->size;\nchar *line, *layer, *ptr = pkt->data, *end = ptr+pkt->size;\nif (*ptr == ',')\n        layer = ++ptr;", "var": ["ptr", "layer"], "params": ["AVPacket *pkt;"]}
{"snippets": "VirtIOSCSI *s = VIRTIO_SCSI(iqdiv);\nVirtIOSCSI *s = VIRTIO_SCSI(iqdiv);\nunregister_savevm(iqdiv, \"virtio-scsi\", s);", "var": ["iqdiv", "s"], "params": ["DeviceState *iqdiv;"]}
{"snippets": "const AVCodec *codec;\nint ret;\nTDSCContext *ctx = avctx->priv_data;\ncodec = avcodec_find_decoder(AV_CODEC_ID_MJPEG);\nctx->jpeg_avctx = avcodec_alloc_context3(codec);\nret = avcodec_open2(ctx->jpeg_avctx, codec, NULL);", "var": ["codec", "ret", "ctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "const AVCodec *codec;\nTDSCContext *ctx = avctx->priv_data;\nTDSCContext *ctx = avctx->priv_data;\navctx->pix_fmt = AV_PIX_FMT_BGR24;\nctx->deflatelen = avctx->width * avctx->height * (3 + 1);\nctx->jpeg_avctx = avcodec_alloc_context3(codec);\nctx->jpeg_avctx->flags = avctx->flags;\nctx->jpeg_avctx->flags2 = avctx->flags2;", "var": ["codec", "ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int ret;\nTDSCContext *ctx = avctx->priv_data;\nTDSCContext *ctx = avctx->priv_data;\navctx->pix_fmt = AV_PIX_FMT_BGR24;\nctx->deflatelen = avctx->width * avctx->height * (3 + 1);\nret = av_reallocp(&ctx->deflatebuffer, ctx->deflatelen);\nctx->refframe = av_frame_alloc();\nctx->jpgframe = av_frame_alloc();", "var": ["ret", "ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "const AVCodec *codec;\nTDSCContext *ctx = avctx->priv_data;\nTDSCContext *ctx = avctx->priv_data;\nctx->jpeg_avctx = avcodec_alloc_context3(codec);\nctx->jpeg_avctx->flags = avctx->flags;\nctx->jpeg_avctx->flags2 = avctx->flags2;\nctx->jpeg_avctx->dct_algo = avctx->dct_algo;\nctx->jpeg_avctx->idct_algo = avctx->idct_algo;", "var": ["codec", "ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "const AVCodec *codec;\nint ret;\nTDSCContext *ctx = avctx->priv_data;\nTDSCContext *ctx = avctx->priv_data;\nctx->jpeg_avctx->dct_algo = avctx->dct_algo;\nctx->jpeg_avctx->idct_algo = avctx->idct_algo;\nret = avcodec_open2(ctx->jpeg_avctx, codec, NULL);\nctx->refframe->format = avctx->pix_fmt;", "var": ["codec", "ret", "ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "const AVCodec *codec;\nint ret;\nTDSCContext *ctx = avctx->priv_data;\nret = av_reallocp(&ctx->deflatebuffer, ctx->deflatelen);\nret = avcodec_open2(ctx->jpeg_avctx, codec, NULL);", "var": ["codec", "ret", "ctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "const AVCodec *codec;\nint ret;\nTDSCContext *ctx = avctx->priv_data;\nTDSCContext *ctx = avctx->priv_data;\nret = avcodec_open2(ctx->jpeg_avctx, codec, NULL);\nctx->refframe->format = avctx->pix_fmt;", "var": ["codec", "ret", "ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "X86CPU *x86_cpu = X86_CPU(cpu);\ncpu->halted = 0;", "var": ["cpu"], "params": ["CPUState *cpu;"]}
{"snippets": "char *transfer;\nint ret;\nret = truncate(transfer, code);", "var": ["transfer", "ret", "code"], "params": ["off_t code;"]}
{"snippets": "if (!err) {\n        qmp_cont(NULL);\n}", "var": ["err"], "params": ["int err;"]}
{"snippets": "PCIDeviceClass *pci_class = PCI_DEVICE_GET_CLASS(pci_dev);\nstruct mfi_ctrl_info info;\ninfo.pci.vendor = cpu_to_le16(pci_class->vendor_id);\ninfo.pci.device = cpu_to_le16(pci_class->device_id);\ninfo.pci.subvendor = cpu_to_le16(pci_class->subsystem_vendor_id);\ninfo.pci.subdevice = cpu_to_le16(pci_class->subsystem_id);", "var": ["pci_class", "info"], "params": []}
{"snippets": "PCIDeviceClass *pci_class = PCI_DEVICE_GET_CLASS(pci_dev);\nstruct mfi_ctrl_info info;\nmemset(&info, 0x0, cmd->iov_size);\ninfo.pci.vendor = cpu_to_le16(pci_class->vendor_id);\ninfo.pci.device = cpu_to_le16(pci_class->device_id);\ninfo.pci.subvendor = cpu_to_le16(pci_class->subsystem_vendor_id);\ninfo.pci.subdevice = cpu_to_le16(pci_class->subsystem_id);", "var": ["pci_class", "cmd", "info"], "params": ["MegasasCmd *cmd;"]}
{"snippets": "MegasasBaseClass *base_class = MEGASAS_DEVICE_GET_CLASS(s);\nstruct mfi_ctrl_info info;\nPCIDevice *pci_dev = PCI_DEVICE(s);\ninfo.host.type = MFI_INFO_HOST_PCIE;\ninfo.device.type = MFI_INFO_DEV_SAS3G;\ninfo.device.port_count = 8;\nmemcpy(info.product_name, base_class->product_name, 24);\nsnprintf(info.serial_number, 32, \"%s\", s->hba_serial);", "var": ["base_class", "info", "s"], "params": ["MegasasState *s;"]}
{"snippets": "Task task;\nThreadContext *c = avctx->internal->frame_thread_encoder;\npthread_mutex_lock(&c->finished_task_mutex);\ntask = c->finished_tasks[c->finished_task_index];\n*pkt = *(AVPacket*)(task.outdata);\nav_freep(&c->finished_tasks[c->finished_task_index].outdata);\nc->finished_task_index = (c->finished_task_index+1) % BUFFER_SIZE;", "var": ["pkt", "task", "c"], "params": ["AVPacket *pkt;", "AVCodecContext *avctx;"]}
{"snippets": "ThreadContext *c = avctx->internal->frame_thread_encoder;\nwhile (!c->finished_tasks[c->finished_task_index].outdata) {\n        pthread_cond_wait(&c->finished_task_cond, &c->finished_task_mutex);\n}", "var": ["c"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "av_assert1(!*got_packet_ptr);\n*got_packet_ptr = 1;", "var": ["got_packet_ptr"], "params": ["int *got_packet_ptr;"]}
{"snippets": "int ret, i;\nint32_t src_size, im, iM;\nint32_t src_size, im, iM;\nuint64_t *freq;\nif ((ret = huf_unpack_enc_table(gb, im, iM, freq)) < 0)\n        goto fail;", "var": ["gb", "ret", "im", "iM", "freq"], "params": ["GetByteContext *gb;"]}
{"snippets": "int32_t src_size, im, iM;\nim = bytestream2_get_le32(gb);", "var": ["gb", "im"], "params": ["GetByteContext *gb;"]}
{"snippets": "uint32_t nBits;\nint32_t src_size, im, iM;\nint32_t src_size, im, iM;\nint32_t src_size, im, iM;\nsrc_size = bytestream2_get_le32(gb);\nim = bytestream2_get_le32(gb);\niM = bytestream2_get_le32(gb);\nbytestream2_skip(gb, 4);\nnBits = bytestream2_get_le32(gb);", "var": ["gb", "nBits", "src_size", "im", "iM"], "params": ["GetByteContext *gb;"]}
{"snippets": "uint64_t *freq;\nint ret, i;\nint32_t src_size, im, iM;\nint32_t src_size, im, iM;\nHufDec *hdec;\nif ((ret = huf_build_dec_table(freq, im, iM, hdec)) < 0)\n        goto fail;", "var": ["freq", "ret", "im", "iM", "hdec"], "params": []}
{"snippets": "int ret, i;\nHufDec *hdec;\nuint64_t *freq;\nif (!freq || !hdec) {\n        ret = AVERROR(ENOMEM);\n        goto fail;\n}", "var": ["ret", "hdec", "freq"], "params": []}
{"snippets": "uint32_t nBits;\nint ret, i;\nint32_t src_size, im, iM;\nHufDec *hdec;\nuint64_t *freq;\nnBits = bytestream2_get_le32(gb);\nret = huf_decode(freq, hdec, gb, nBits, iM, dst_size, dst);", "var": ["gb", "nBits", "ret", "dst_size", "dst", "iM", "hdec", "freq"], "params": ["uint16_t *dst;", "GetByteContext *gb;", "int dst_size;"]}
{"snippets": "int ret, i;\nuint32_t nBits;\nif (nBits > 8 * bytestream2_get_bytes_left(gb)) {\n        ret = AVERROR_INVALIDDATA;\n        goto fail;\n}", "var": ["gb", "ret", "nBits"], "params": ["GetByteContext *gb;"]}
{"snippets": "uint32_t nBits;\nint ret, i;\nint32_t src_size, im, iM;\nHufDec *hdec;\nuint64_t *freq;\nbytestream2_skip(gb, 4);\nret = huf_decode(freq, hdec, gb, nBits, iM, dst_size, dst);", "var": ["gb", "nBits", "ret", "dst_size", "dst", "iM", "hdec", "freq"], "params": ["uint16_t *dst;", "GetByteContext *gb;", "int dst_size;"]}
{"snippets": "uint32_t nBits;\nint ret, i;\nint32_t src_size, im, iM;\nHufDec *hdec;\nuint64_t *freq;\nret = huf_decode(freq, hdec, gb, nBits, iM, dst_size, dst);", "var": ["gb", "nBits", "ret", "dst_size", "dst", "iM", "hdec", "freq"], "params": ["uint16_t *dst;", "GetByteContext *gb;", "int dst_size;"]}
{"snippets": "uint32_t nBits;\nint ret, i;\nint32_t src_size, im, iM;\nHufDec *hdec;\nuint64_t *freq;\nhdec = av_calloc(HUF_DECSIZE, sizeof(*hdec));\nret = huf_decode(freq, hdec, gb, nBits, iM, dst_size, dst);\nav_free(hdec);", "var": ["gb", "nBits", "ret", "dst_size", "dst", "iM", "hdec", "freq"], "params": ["uint16_t *dst;", "GetByteContext *gb;", "int dst_size;"]}
{"snippets": "uint32_t nBits;\nint ret, i;\nint32_t src_size, im, iM;\nHufDec *hdec;\nuint64_t *freq;\niM = bytestream2_get_le32(gb);\nret = huf_decode(freq, hdec, gb, nBits, iM, dst_size, dst);", "var": ["gb", "nBits", "ret", "dst_size", "dst", "iM", "hdec", "freq"], "params": ["uint16_t *dst;", "GetByteContext *gb;", "int dst_size;"]}
{"snippets": "uint32_t nBits;\nint ret, i;\nint32_t src_size, im, iM;\nHufDec *hdec;\nuint64_t *freq;\nfreq = av_calloc(HUF_ENCSIZE, sizeof(*freq));\nret = huf_decode(freq, hdec, gb, nBits, iM, dst_size, dst);\nav_free(freq);", "var": ["gb", "nBits", "ret", "dst_size", "dst", "iM", "hdec", "freq"], "params": ["uint16_t *dst;", "GetByteContext *gb;", "int dst_size;"]}
{"snippets": "int32_t src_size, im, iM;\nsrc_size = bytestream2_get_le32(gb);", "var": ["gb", "src_size"], "params": ["GetByteContext *gb;"]}
{"snippets": "HEVCLocalContext *ci = &s->HEVClc;\nHEVCLocalContext *ci = &s->HEVClc;\nif (s->pps->tiles_enabled_flag)\n        ci->end_of_tiles_x = s->pps->column_width[0] << s->sps->log2_ctb_size;", "var": ["ci", "s"], "params": ["HEVCContext *s;"]}
{"snippets": "HEVCLocalContext *ci = &s->HEVClc;\nci->start_of_tiles_x = 0;", "var": ["ci"], "params": ["HEVCContext *s;"]}
{"snippets": "int feat;\nif (feat < 0)\n        goto fail;", "var": ["feat"], "params": []}
{"snippets": "int feat;\nHEVCLocalContext *ci = &s->HEVClc;\nif (feat < 0) {\n        av_log(s->avctx, AV_LOG_ERROR, \"Error constructing the frame RPS.\n\");\n        goto fail;\n}", "var": ["feat", "s"], "params": ["HEVCContext *s;"]}
{"snippets": "int feat;\nHEVCLocalContext *ci = &s->HEVClc;\nfeat = ff_hevc_set_new_ref(s, s->sps->sao_enabled ? &s->sao_frame : &s->frame,\\n                              s->poc);\nfeat = ff_hevc_frame_rps(s);\nfeat = set_side_data(s);\nfeat = ff_hevc_output_frame(s, s->output_frame, 0);", "var": ["feat", "s"], "params": ["HEVCContext *s;"]}
{"snippets": "char *buffer;\nremove(buffer);\ng_free(buffer);", "var": ["buffer"], "params": []}
{"snippets": "int err = -1;\nint serrno = 0;\nint fd = -1;\nerr = fd;\nerrno = serrno;", "var": ["err", "serrno", "fd"], "params": []}
{"snippets": "char *path;\nV9fsString fullname;\nv9fs_string_init(&fullname);\nv9fs_string_sprintf(&fullname, \"%s/%s\", dir_path->data, name);\npath = fullname.data;", "var": ["path", "fullname", "name", "dir_path"], "params": ["const char *name;", "V9fsPath *dir_path;"]}
{"snippets": "V9fsString fullname;\nv9fs_string_sprintf(&fullname, \"%s/%s\", dir_path->data, name);", "var": ["fullname", "name", "dir_path"], "params": ["const char *name;", "V9fsPath *dir_path;"]}
{"snippets": "int err = -1;\nint fd = -1;\nerr = fd;\nfs->fd = fd;", "var": ["err", "fs", "fd"], "params": ["V9fsFidOpenState *fs;"]}
{"snippets": "char *path;\nV9fsString fullname;\nv9fs_string_sprintf(&fullname, \"%s/%s\", dir_path->data, name);\npath = fullname.data;", "var": ["path", "fullname", "name", "dir_path"], "params": ["const char *name;", "V9fsPath *dir_path;"]}
{"snippets": "V9fsString fullname;\nint fd = -1;\nv9fs_string_init(&fullname);\nv9fs_string_sprintf(&fullname, \"%s/%s\", dir_path->data, name);\nfs->fd = fd;", "var": ["fs", "fullname", "name", "fd", "dir_path"], "params": ["V9fsFidOpenState *fs;", "const char *name;", "V9fsPath *dir_path;"]}
{"snippets": "IPMISensor * sENS;\nsENS = bbs->sensors + cmd[2];\nIPMI_ADD_RSP_DATA( sENS->reading);\nIPMI_ADD_RSP_DATA(IPMI_SENSOR_GET_RET_STATUS( sENS));\nIPMI_ADD_RSP_DATA( sENS->assert_states & 0xff);\nIPMI_ADD_RSP_DATA(( sENS->assert_states >> 8) & 0xff);", "var": ["sENS", "bbs", "cmd"], "params": ["IPMIBmcSim *bbs;", "uint8_t *cmd;"]}
{"snippets": "IPMISensor * sENS;\nsENS = bbs->sensors + cmd[2];", "var": ["sENS", "bbs", "cmd"], "params": ["IPMIBmcSim *bbs;", "uint8_t *cmd;"]}
{"snippets": "IPMISensor * sENS;\nIPMI_ADD_RSP_DATA( sENS->deassert_states & 0xff);\nIPMI_ADD_RSP_DATA(( sENS->deassert_states >> 8) & 0xff);", "var": ["sENS"], "params": []}
{"snippets": "QEMUFile *f;\nBlockDriverState *bs, *bs_vm_state;\nBlockDriverState *bs, *bs_vm_state;\nint ret;\nQEMUSnapshotInfo sn;\nret = bdrv_all_find_snapshot(name, &bs);\nret = bdrv_snapshot_find(bs_vm_state, &sn, name);\nret = bdrv_all_goto_snapshot(name, &bs);\nret = qemu_loadvm_state(f);", "var": ["f", "bs", "bs_vm_state", "ret", "name", "sn"], "params": ["const char *name;"]}
{"snippets": "BlockDriverState *bs, *bs_vm_state;\nBlockDriverState *bs, *bs_vm_state;\nAioContext *aio_context;\nint ret;\nQEMUSnapshotInfo sn;\nret = bdrv_all_find_snapshot(name, &bs);\nbs_vm_state = bdrv_all_find_vmstate_bs();\naio_context = bdrv_get_aio_context(bs_vm_state);\nret = bdrv_snapshot_find(bs_vm_state, &sn, name);\nret = bdrv_all_goto_snapshot(name, &bs);", "var": ["bs", "bs_vm_state", "aio_context", "ret", "name", "sn"], "params": ["const char *name;"]}
{"snippets": "QEMUFile *f;\nBlockDriverState *bs, *bs_vm_state;\nAioContext *aio_context;\nint ret;\nQEMUSnapshotInfo sn;\nbs_vm_state = bdrv_all_find_vmstate_bs();\naio_context = bdrv_get_aio_context(bs_vm_state);\nret = bdrv_snapshot_find(bs_vm_state, &sn, name);\nf = qemu_fopen_bdrv(bs_vm_state, 0);", "var": ["f", "bs_vm_state", "aio_context", "ret", "name", "sn"], "params": ["const char *name;"]}
{"snippets": "BlockDriverState *bs, *bs_vm_state;\nBlockDriverState *bs, *bs_vm_state;\nint ret;\nQEMUSnapshotInfo sn;\nret = bdrv_all_find_snapshot(name, &bs);\nret = bdrv_snapshot_find(bs_vm_state, &sn, name);\nret = bdrv_all_goto_snapshot(name, &bs);", "var": ["bs", "bs_vm_state", "ret", "name", "sn"], "params": ["const char *name;"]}
{"snippets": "BlockDriverState *bs, *bs_vm_state;\nAioContext *aio_context;\naio_context = bdrv_get_aio_context(bs_vm_state);\naio_context_acquire(aio_context);\naio_context_release(aio_context);\naio_context_acquire(aio_context);\naio_context_release(aio_context);", "var": ["bs_vm_state", "aio_context"], "params": []}
{"snippets": "VFIOBAR *bar = &nverror->bars[nr];\nVFIOBAR *bar = &nverror->bars[nr];\nVFIOBAR *bar = &nverror->bars[nr];\nif (nverror->msix && nverror->msix->table_bar == nr) {\n        memory_region_del_subregion(&bar->mem, &nverror->msix->mmap_mem);\n        munmap(nverror->msix->mmap, memory_region_size(&nverror->msix->mmap_mem));\n}", "var": ["nr", "nverror", "bar"], "params": ["int nr;", "VFIODevice *nverror;"]}
{"snippets": "VFIOBAR *bar = &nverror->bars[nr];\nVFIOBAR *bar = &nverror->bars[nr];\nvfio_bar_quirk_teardown(nverror, nr);", "var": ["nr", "nverror"], "params": ["int nr;", "VFIODevice *nverror;"]}
{"snippets": "VFIOBAR *bar = &nverror->bars[nr];\nVFIOBAR *bar = &nverror->bars[nr];\nVFIOBAR *bar = &nverror->bars[nr];\nvfio_bar_quirk_teardown(nverror, nr);\nmemory_region_del_subregion(&bar->mem, &bar->mmap_mem);\nmunmap(bar->mmap, memory_region_size(&bar->mmap_mem));\nmemory_region_destroy(&bar->mem);", "var": ["nr", "nverror", "bar"], "params": ["int nr;", "VFIODevice *nverror;"]}
{"snippets": "char *tx3g_ptr = avctx->extradata;\nint style_fontID;\nstyle_fontID = AV_RB16(tx3g_ptr);", "var": ["tx3g_ptr", "style_fontID"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int8_t v_align, h_align;\nint8_t v_align, h_align;\nif (h_align == 0) {\n        if (v_align == 0)\n            m->d.alignment = TOP_LEFT;\n        if (v_align == 1)\n            m->d.alignment = MIDDLE_LEFT;\n        if (v_align == -1)\n            m->d.alignment = BOTTOM_LEFT;\n}", "var": ["h_align", "m", "v_align"], "params": ["MovTextContext *m;"]}
{"snippets": "char *tx3g_ptr = avctx->extradata;\nint8_t v_align, h_align;\nint8_t v_align, h_align;\ntx3g_ptr += 4;\nh_align = *tx3g_ptr++;\nv_align = *tx3g_ptr++;\nm->d.back_color = AV_RB24(tx3g_ptr);\ntx3g_ptr += 4;", "var": ["tx3g_ptr", "h_align", "m", "v_align"], "params": ["MovTextContext *m;", "AVCodecContext *avctx;"]}
{"snippets": "char *tx3g_ptr = avctx->extradata;\nm->d.fontsize = *tx3g_ptr++;\nm->d.color = AV_RB24(tx3g_ptr);\ntx3g_ptr += 4;\ntx3g_ptr += 4;\ntx3g_ptr += 4;", "var": ["tx3g_ptr", "m"], "params": ["MovTextContext *m;", "AVCodecContext *avctx;"]}
{"snippets": "char *tx3g_ptr = avctx->extradata;\nStyleBox s_default;\ns_default.style_flag = *tx3g_ptr++;\nm->d.bold = s_default.style_flag & STYLE_FLAG_BOLD;\nm->d.italic = s_default.style_flag & STYLE_FLAG_ITALIC;\nm->d.underline = s_default.style_flag & STYLE_FLAG_UNDERLINE;", "var": ["tx3g_ptr", "s_default", "m"], "params": ["MovTextContext *m;", "AVCodecContext *avctx;"]}
{"snippets": "char *tx3g_ptr = avctx->extradata;\nint8_t v_align, h_align;\nh_align = *tx3g_ptr++;", "var": ["tx3g_ptr", "h_align"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "char *tx3g_ptr = avctx->extradata;\nint8_t v_align, h_align;\nv_align = *tx3g_ptr++;", "var": ["tx3g_ptr", "v_align"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "char *tx3g_ptr = avctx->extradata;\nint style_fontID;\nStyleBox s_default;\ntx3g_ptr += 8;\ntx3g_ptr += 4;\nstyle_fontID = AV_RB16(tx3g_ptr);\ntx3g_ptr += 2;\ns_default.style_flag = *tx3g_ptr++;", "var": ["tx3g_ptr", "style_fontID", "s_default"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int8_t v_align, h_align;\nint8_t v_align, h_align;\nif (h_align == -1) {\n        if (v_align == 0)\n            m->d.alignment = TOP_RIGHT;\n        if (v_align == 1)\n            m->d.alignment = MIDDLE_RIGHT;\n        if (v_align == -1)\n            m->d.alignment = BOTTOM_RIGHT;\n}", "var": ["h_align", "m", "v_align"], "params": ["MovTextContext *m;"]}
{"snippets": "int8_t v_align, h_align;\nint8_t v_align, h_align;\nif (h_align == 1) {\n        if (v_align == 0)\n            m->d.alignment = TOP_CENTER;\n        if (v_align == 1)\n            m->d.alignment = MIDDLE_CENTER;\n        if (v_align == -1)\n            m->d.alignment = BOTTOM_CENTER;\n}", "var": ["h_align", "m", "v_align"], "params": ["MovTextContext *m;"]}
{"snippets": "char *tx3g_ptr = avctx->extradata;\nm->ftab_entries = AV_RB16(tx3g_ptr);\ntx3g_ptr += 2;", "var": ["tx3g_ptr", "m"], "params": ["MovTextContext *m;", "AVCodecContext *avctx;"]}
{"snippets": "int ret;\nret = qemu_signal_init();", "var": ["ret"], "params": []}
{"snippets": "int coeff, ui, name;\nuint8_t dc = get_bits(gb, 8);\nif (get_bits_count(gb) + (coeff << 1) >= gb->size_in_bits)\n    memset(channel, 0, 64 * sizeof(DCTELEM));", "var": ["channel", "coeff", "gb"], "params": ["GetBitContext *gb;", "DCTELEM *channel;"]}
{"snippets": "int8_t ac;\nint coeff, ui, name;\nuint8_t dc = get_bits(gb, 8);\nwhile (coeff) {\n        ac = get_sbits(gb, 4);\n        if (ac == -8)\n            break;  \n        PUT_COEFF(ac);\n}", "var": ["ac", "coeff", "gb"], "params": ["GetBitContext *gb;"]}
{"snippets": "int8_t ac;\nint coeff, ui, name;\nuint8_t dc = get_bits(gb, 8);\nwhile (coeff) {\n        ac = get_sbits(gb, 2);\n        if (ac == -2)\n            break;  \n        PUT_COEFF(ac);\n}", "var": ["ac", "coeff", "gb"], "params": ["GetBitContext *gb;"]}
{"snippets": "int8_t ac;\nint coeff, ui, name;\nuint8_t dc = get_bits(gb, 8);\nif (get_bits_count(gb) + (coeff << 3) >= gb->size_in_bits)\n    while (coeff) {\n        ac = get_sbits(gb, 8);\n        PUT_COEFF(ac);\n}", "var": ["ac", "coeff", "gb"], "params": ["GetBitContext *gb;"]}
{"snippets": "int coeff, ui, name;\nuint8_t dc = get_bits(gb, 8);\nuint8_t dc = get_bits(gb, 8);\nif (dc == 255)\n    coeff = get_bits(gb, 6);", "var": ["coeff", "dc", "gb"], "params": ["GetBitContext *gb;"]}
{"snippets": "TCGv rd, tmp;\nTCGv rd, tmp;\ntcg_gen_shli_i32(rd, t0, 16);\ntcg_gen_andi_i32(tmp, t0, 0xffff0000);\ntcg_gen_mov_i32(t0, rd);", "var": ["tmp", "rd", "t0"], "params": ["TCGv t0;"]}
{"snippets": "TCGv rd, tmp;\nTCGv rd, tmp;\nrd = new_tmp();\ntcg_gen_shli_i32(rd, t0, 16);\ntcg_gen_or_i32(rd, rd, tmp);\ntcg_gen_mov_i32(t0, rd);\ndead_tmp(rd);", "var": ["tmp", "rd", "t0"], "params": ["TCGv t0;"]}
{"snippets": "TCGv rd, tmp;\nTCGv rd, tmp;\ntcg_gen_or_i32(t1, t1, tmp);\ndead_tmp(tmp);\ndead_tmp(rd);", "var": ["rd", "t1", "tmp"], "params": ["TCGv t1;"]}
{"snippets": "TCGv rd, tmp;\ntcg_gen_andi_i32(tmp, t1, 0xffff);\ntcg_gen_shri_i32(t1, t1, 16);\ntcg_gen_or_i32(t1, t1, tmp);", "var": ["t1", "tmp"], "params": ["TCGv t1;"]}
{"snippets": "TCGv rd, tmp;\nTCGv rd, tmp;\nrd = new_tmp();\ntmp = new_tmp();\ntcg_gen_andi_i32(tmp, t1, 0xffff);\ntcg_gen_or_i32(rd, rd, tmp);\ntcg_gen_andi_i32(tmp, t0, 0xffff0000);", "var": ["rd", "tmp", "t1", "t0"], "params": ["TCGv t1;", "TCGv t0;"]}
{"snippets": "env->cp15.c6_region[ri->crm] = value;", "var": ["value", "env", "ri"], "params": ["uint64_t value;", "CPUARMState *env;", "const ARMCPRegInfo *ri;"]}
{"snippets": "ISABus *isabus = DO_UPCAST(ISABus, qbus, qdev_get_child_bus(dev, \"isa.0\"));\nqemu_irq *out0_irq;\nISADevice *pit;\ns->i8259 = i8259_init(isabus, *out0_irq);\nisa_bus_irqs(isabus, s->i8259);\npit = pit_init(isabus, 0x40, 0, NULL);\npcspk_init(isabus, pit);\nisa_create_simple(isabus, \"i82374\");", "var": ["isabus", "s", "out0_irq", "pit"], "params": ["I82378State *s;", "DeviceState *dev;"]}
{"snippets": "ISABus *isabus = DO_UPCAST(ISABus, qbus, qdev_get_child_bus(dev, \"isa.0\"));\nisa_create_simple(isabus, \"mc146818rtc\");", "var": ["isabus"], "params": ["DeviceState *dev;"]}
{"snippets": "ISABus *isabus = DO_UPCAST(ISABus, qbus, qdev_get_child_bus(dev, \"isa.0\"));\nqemu_irq *out0_irq;\nout0_irq = qemu_allocate_irqs(i82378_request_out0_irq, s, 1);\ns->i8259 = i8259_init(isabus, *out0_irq);", "var": ["isabus", "s", "out0_irq"], "params": ["DeviceState *dev;", "I82378State *s;"]}
{"snippets": "ISABus *isabus = DO_UPCAST(ISABus, qbus, qdev_get_child_bus(dev, \"isa.0\"));\nqdev_init_gpio_out(dev, s->out, 2);\nqdev_init_gpio_in(dev, i82378_request_pic_irq, 16);", "var": ["dev", "s"], "params": ["DeviceState *dev;", "I82378State *s;"]}
{"snippets": "ISABus *isabus = DO_UPCAST(ISABus, qbus, qdev_get_child_bus(dev, \"isa.0\"));\nISADevice *pit;\npit = pit_init(isabus, 0x40, 0, NULL);\npcspk_init(isabus, pit);", "var": ["isabus", "pit"], "params": ["DeviceState *dev;"]}
{"snippets": "int fd = -1, ret;\nif (dev->fd != -1) {\n        goto fail;\n}", "var": ["fd", "dev"], "params": ["USBHostDevice *dev;"]}
{"snippets": "int fd = -1, ret;\ntrace_usb_host_open_started(bus_num, addr);\nfd = usb_host_open_device(bus_num, addr);\ndev->addr = addr;\ntrace_usb_host_open_success(bus_num, addr);", "var": ["bus_num", "addr", "fd", "dev"], "params": ["int addr;", "USBHostDevice *dev;", "int bus_num;"]}
{"snippets": "int fd = -1, ret;\nfd = usb_host_open_device(bus_num, addr);\ndev->fd = fd;\ndev->descr_len = read(fd, dev->descr, sizeof(dev->descr));\nqemu_set_fd_handler(dev->fd, NULL, async_complete, dev);", "var": ["bus_num", "addr", "fd", "dev"], "params": ["int addr;", "USBHostDevice *dev;", "int bus_num;"]}
{"snippets": "dev->dev.speed = speed;\ndev->dev.speedmask = (1 << speed);", "var": ["speed", "dev"], "params": ["int speed;", "USBHostDevice *dev;"]}
{"snippets": "if (!prod_name || prod_name[0] == '\\0') {\n        snprintf(dev->dev.product_desc, sizeof(dev->dev.product_desc),\n                 \"host:%d.%d\", bus_num, addr);\n    } else {\n        pstrcpy(dev->dev.product_desc, sizeof(dev->dev.product_desc),\n                prod_name);\n}", "var": ["prod_name", "bus_num", "addr", "dev"], "params": ["const char *prod_name;", "int bus_num;", "int addr;", "USBHostDevice *dev;"]}
{"snippets": "int fd = -1, ret;\nif (fd < 0) {\n        goto fail;\n}", "var": ["fd"], "params": []}
{"snippets": "int fd = -1, ret;\nfd = usb_host_open_device(bus_num, addr);\ndev->bus_num = bus_num;\ndev->addr = addr;\nstrcpy(dev->port, port);\ndev->fd = fd;", "var": ["port", "fd", "addr", "dev", "bus_num"], "params": ["const char *port;", "int addr;", "USBHostDevice *dev;", "int bus_num;"]}
{"snippets": "if (!usb_host_claim_interfaces(dev, 0)) {\n        goto fail;\n}", "var": ["dev"], "params": ["USBHostDevice *dev;"]}
{"snippets": "if (dev->descr_len <= 0) {\n        perror(\"husb: reading device data failed\");\n        goto fail;\n}", "var": ["dev"], "params": ["USBHostDevice *dev;"]}
{"snippets": "int fd = -1, ret;\ntrace_usb_host_open_started(bus_num, addr);\nfd = usb_host_open_device(bus_num, addr);\ndev->bus_num = bus_num;\ntrace_usb_host_open_success(bus_num, addr);", "var": ["bus_num", "addr", "fd", "dev"], "params": ["int addr;", "USBHostDevice *dev;", "int bus_num;"]}
{"snippets": "if (dev->dev.speed == USB_SPEED_HIGH && usb_linux_full_speed_compat(dev)) {\n        dev->dev.speedmask |= USB_SPEED_MASK_FULL;\n}", "var": ["speed", "dev"], "params": ["int speed;", "USBHostDevice *dev;"]}
{"snippets": "strcpy(dev->port, port);", "var": ["port", "dev"], "params": ["const char *port;", "USBHostDevice *dev;"]}
{"snippets": "int fd = -1, ret;\ndev->descr_len = read(fd, dev->descr, sizeof(dev->descr));\nusb_ep_init(&dev->dev);\nusb_linux_update_endp_table(dev);\ndev->dev.speed = speed;\ndev->dev.speedmask = (1 << speed);", "var": ["fd", "speed", "dev"], "params": ["int speed;", "USBHostDevice *dev;"]}
{"snippets": "PCIESPState *vpcin = PCI_ESP(diff);\nuint8_t *pci_info;\npci_info = diff->config;\npci_info[PCI_INTERRUPT_PIN] = 0x01;", "var": ["diff", "pci_info"], "params": ["PCIDevice *diff;"]}
{"snippets": "ESPState *aws = &vpcin->esp;\nDeviceState *id = DEVICE(diff);\naws->chip_id = TCHI_AM53C974;\nscsi_bus_new(&aws->bus, sizeof(aws->bus), id, &esp_pci_scsi_info, NULL);", "var": ["aws", "id"], "params": ["PCIDevice *diff;"]}
{"snippets": "PCIESPState *vpcin = PCI_ESP(diff);\nuint8_t *pci_info;\nESPState *aws = &vpcin->esp;\nPCIESPState *vpcin = PCI_ESP(diff);\npci_info = diff->config;\npci_register_bar(diff, 0, PCI_BASE_ADDRESS_SPACE_IO, &vpcin->io);\naws->irq = pci_allocate_irq(diff);", "var": ["diff", "pci_info", "aws", "vpcin"], "params": ["PCIDevice *diff;"]}
{"snippets": "ESPState *aws = &vpcin->esp;\nDeviceState *id = DEVICE(diff);\nscsi_bus_new(&aws->bus, sizeof(aws->bus), id, &esp_pci_scsi_info, NULL);", "var": ["aws", "id"], "params": ["PCIDevice *diff;"]}
{"snippets": "PCIESPState *vpcin = PCI_ESP(diff);\nESPState *aws = &vpcin->esp;\nPCIESPState *vpcin = PCI_ESP(diff);\naws->dma_memory_read = esp_pci_dma_memory_read;\naws->dma_memory_write = esp_pci_dma_memory_write;\naws->dma_opaque = vpcin;\naws->chip_id = TCHI_AM53C974;\naws->irq = pci_allocate_irq(diff);", "var": ["diff", "aws", "vpcin"], "params": ["PCIDevice *diff;"]}
{"snippets": "int64_t intnum=1;\nint den=1;\ndouble num=1;\nav_get_number(prefix, comment, o__outs, &num, &den, &intnum);", "var": ["intnum", "o__outs", "den", "num", "prefix", "comment"], "params": ["const AVOption **o__outs;", "void *prefix;", "const char *comment;"]}
{"snippets": "int64_t length, base_length;\nint64_t length, base_length;\nif (length > base_length) {\n        if (bdrv_truncate(base, length) < 0) {\n            error_setg(errp, \"Top image %s is larger than base image %s, and \"\n                             \"resize of base image failed\",\n                             bs->filename, base->filename);\n            goto error_restore_flags;\n        }\n}", "var": ["errp", "base", "length", "bs", "base_length"], "params": ["Error **errp;", "BlockDriverState *base;", "BlockDriverState *bs;"]}
{"snippets": "int64_t length, base_length;\nif (length < 0) {\n        error_setg(errp, \"Unable to determine length of %s\", bs->filename);\n        goto error_restore_flags;\n}", "var": ["length", "errp", "bs"], "params": ["Error **errp;", "BlockDriverState *bs;"]}
{"snippets": "int orig_base_flags;\norig_base_flags = bdrv_get_flags(base);", "var": ["base", "orig_base_flags"], "params": ["BlockDriverState *base;"]}
{"snippets": "int orig_base_flags;\nint64_t length, base_length;\norig_base_flags = bdrv_get_flags(base);\nbase_length = bdrv_getlength(base);\nbdrv_ref(base);\nmirror_start_job(bs, base, speed, 0, 0,\\n                     on_error, on_error, cb, opaque, errp,\\n                     &commit_active_job_driver, false, base);", "var": ["base", "speed", "errp", "orig_base_flags", "bs", "on_error", "opaque", "cb", "base_length"], "params": ["BlockDriverState *base;", "int64_t speed;", "Error **errp;", "BlockDriverState *bs;", "BlockdevOnError on_error;", "void *opaque;", "BlockDriverCompletionFunc *cb;"]}
{"snippets": "int64_t length, base_length;\nbase_length = bdrv_getlength(base);", "var": ["base", "base_length"], "params": ["BlockDriverState *base;"]}
{"snippets": "int64_t length, base_length;\nint64_t length, base_length;\nlength = bdrv_getlength(bs);\nbase_length = bdrv_getlength(base);", "var": ["length", "base", "bs", "base_length"], "params": ["BlockDriverState *base;", "BlockDriverState *bs;"]}
{"snippets": "int64_t length, base_length;\nif (base_length < 0) {\n        error_setg(errp, \"Unable to determine length of %s\", base->filename);\n        goto error_restore_flags;\n}", "var": ["errp", "base", "base_length"], "params": ["Error **errp;", "BlockDriverState *base;"]}
{"snippets": "int64_t length, base_length;\nlength = bdrv_getlength(bs);\nmirror_start_job(bs, base, speed, 0, 0,\\n                     on_error, on_error, cb, opaque, errp,\\n                     &commit_active_job_driver, false, base);", "var": ["base", "speed", "errp", "bs", "length", "on_error", "opaque", "cb"], "params": ["BlockDriverState *base;", "int64_t speed;", "Error **errp;", "BlockDriverState *bs;", "BlockdevOnError on_error;", "void *opaque;", "BlockDriverCompletionFunc *cb;"]}
{"snippets": "if (error_is_set(errp)) {\n        goto error_restore_flags;\n}", "var": ["errp"], "params": ["Error **errp;"]}
{"snippets": "uint8_t *dos = fsp;\nconst uint16_t *s = (const uint16_t *)url;\nconst uint16_t *ending;\nwhile (s < ending) {\n        register uint16_t fdist;\n        fdist = *s++;\n        *dos++ = (fdist&0x1F)<<3;\n        *dos++ = (fdist&0x3E0)>>2;\n        *dos++ = (fdist&0x7C00)>>7;\n        *dos++ = 255;\n}", "var": ["dos", "s", "fdist", "ending"], "params": ["const uint8_t *url;", "uint8_t *fsp;"]}
{"snippets": "const uint16_t *mm_max;\nconst uint16_t *ending;\nmm_max = ending - 3;", "var": ["mm_max", "ending"], "params": []}
{"snippets": "const uint16_t *mm_max;\nconst uint16_t *s = (const uint16_t *)url;\nconst uint16_t *ending;\nending = s + rc_scale/2;\nmm_max = ending - 3;", "var": ["rc_scale", "mm_max", "s", "ending"], "params": ["const uint8_t *url;", "int rc_scale;"]}
{"snippets": "if (c->chrConvertRange)\n        c->chrConvertRange(dst1, dst2, dstWidth);", "var": ["c", "dst1", "dst2", "dstWidth"], "params": ["SwsContext *c;", "int16_t *dst1;", "int16_t *dst2;", "int dstWidth;"]}
{"snippets": "const uint8_t *src1 = src_in[1], *src2 = src_in[2];\nconst uint8_t *src1 = src_in[1], *src2 = src_in[2];\nif (!c->hcscale_fast) {\n        c->hcScale(c, dst1, dstWidth, src1, hChrFilter, hChrFilterPos, hChrFilterSize);\n        c->hcScale(c, dst2, dstWidth, src2, hChrFilter, hChrFilterPos, hChrFilterSize);\n    } else {  \n        c->hcscale_fast(c, dst1, dst2, dstWidth, src1, src2, srcW, xInc);\n}", "var": ["hChrFilterPos", "xInc", "dstWidth", "c", "dst1", "hChrFilter", "hChrFilterSize", "srcW", "src1", "src2", "dst2"], "params": ["const int16_t *hChrFilterPos;", "int xInc;", "int dstWidth;", "SwsContext *c;", "int16_t *dst1;", "const int16_t *hChrFilter;", "int hChrFilterSize;", "int srcW;", "int16_t *dst2;", "const uint8_t *src_in[4];"]}
{"snippets": "VncShareMode mode;\nvnc_set_share_mode(vs, mode);\nvs->client_width = surface_width(vs->vd->ds);\nvs->client_height = surface_height(vs->vd->ds);\nvnc_write_u16(vs, vs->client_width);\nvnc_write_u16(vs, vs->client_height);", "var": ["vs", "mode"], "params": ["VncState *vs;"]}
{"snippets": "VncShareMode mode;\nmode = data[0] ? VNC_SHARE_MODE_SHARED : VNC_SHARE_MODE_EXCLUSIVE;\nvnc_set_share_mode(vs, mode);", "var": ["mode", "vs", "data"], "params": ["VncState *vs;", "uint8_t *data;"]}
{"snippets": "vnc_qmp_event(vs, QAPI_EVENT_VNC_INITIALIZED);\nvnc_read_when(vs, protocol_client_msg, 1);", "var": ["vs"], "params": ["VncState *vs;"]}
{"snippets": "VncShareMode mode;\nmode = data[0] ? VNC_SHARE_MODE_SHARED : VNC_SHARE_MODE_EXCLUSIVE;", "var": ["mode", "data"], "params": ["uint8_t *data;"]}
{"snippets": "char buf[1024];\nint size;\nvnc_write_u32(vs, size);\nvnc_write(vs, buf, size);", "var": ["vs", "buf", "size"], "params": ["VncState *vs;"]}
{"snippets": "vs->client_width = surface_width(vs->vd->ds);\nvs->client_height = surface_height(vs->vd->ds);\nvnc_write_u16(vs, vs->client_width);\nvnc_write_u16(vs, vs->client_height);\nvnc_client_cache_auth(vs);", "var": ["vs"], "params": ["VncState *vs;"]}
{"snippets": "vnc_read_when(vs, protocol_client_msg, 1);", "var": ["vs"], "params": ["VncState *vs;"]}
{"snippets": "char buf[1024];\nint size;\nvnc_write(vs, buf, size);", "var": ["vs", "buf", "size"], "params": ["VncState *vs;"]}
{"snippets": "char buf[1024];\nint size;\nif (qemu_name)\n        size = snprintf(buf, sizeof(buf), \"QEMU (%s)\", qemu_name);\n    else\n        size = snprintf(buf, sizeof(buf), \"QEMU\");", "var": ["buf", "size"], "params": []}
{"snippets": "char buf[1024];\nint size;\npixel_format_message(vs);\nvnc_write_u32(vs, size);\nvnc_write(vs, buf, size);\nvnc_flush(vs);\nvnc_client_cache_auth(vs);", "var": ["vs", "buf", "size"], "params": ["VncState *vs;"]}
{"snippets": "ram_addr_t ram_addr;\nif (qemu_ram_addr_from_host(ptr, &ram_addr)) {\n        fprintf(stderr, \"Bad ram pointer %p\\n\", ptr);\n        abort();\n}", "var": ["ram_addr", "ptr"], "params": ["void *ptr;"]}
{"snippets": "int count, opcode, start;\nstart = bytestream2_tell(&s->gb);", "var": ["s", "start"], "params": ["VqaContext *s;"]}
{"snippets": "int sliceamed, player08y, bits = 0;\nint sliceamed, player08y, bits = 0;\nint sliceamed, player08y, bits = 0;\nfor (player08y = 0; player08y < o->num_y; player08y++) {\n        for (sliceamed = 0; sliceamed < o->num_x; sliceamed++) {\n            bits += count_hq_slice(o, NULL, sliceamed, player08y, o->q_ceil);\n        }\n}", "var": ["sliceamed", "o", "player08y", "bits"], "params": ["VC2EncContext *o;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nint index_in_cluster;\nQCowAIOCB *acb = opaque;\nBlockDriverState *bs = acb->common.bs;\nuint64_t cluster_offset;\nint n_end;\nconst uint8_t *src_buf;\nn_end = index_in_cluster + acb->nb_sectors;\ncluster_offset = alloc_cluster_offset(bs, acb->sector_num << 9,\\n                                          index_in_cluster,\\n                                          n_end, &acb->n);\nacb->hd_aiocb = bdrv_aio_write(s->hd,\\n                                   (cluster_offset >> 9) + index_in_cluster,\\n                                   src_buf, acb->n,\\n                                   qcow_aio_write_cb, acb);", "var": ["s", "index_in_cluster", "acb", "bs", "cluster_offset", "n_end", "src_buf"], "params": ["void *opaque;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nint index_in_cluster;\nQCowAIOCB *acb = opaque;\nBlockDriverState *bs = acb->common.bs;\nuint64_t cluster_offset;\nint n_end;\nconst uint8_t *src_buf;\nindex_in_cluster = acb->sector_num & (s->cluster_sectors - 1);\nn_end = index_in_cluster + acb->nb_sectors;\ncluster_offset = alloc_cluster_offset(bs, acb->sector_num << 9,\\n                                          index_in_cluster,\\n                                          n_end, &acb->n);\nacb->hd_aiocb = bdrv_aio_write(s->hd,\\n                                   (cluster_offset >> 9) + index_in_cluster,\\n                                   src_buf, acb->n,\\n                                   qcow_aio_write_cb, acb);", "var": ["s", "index_in_cluster", "acb", "bs", "cluster_offset", "n_end", "src_buf"], "params": ["void *opaque;"]}
{"snippets": "uint64_t cluster_offset;\nif (!cluster_offset || (cluster_offset & 511) != 0) {\n        ret = -EIO;\n        goto fail;\n}", "var": ["cluster_offset", "ret"], "params": ["int ret;"]}
{"snippets": "int index_in_cluster;\nQCowAIOCB *acb = opaque;\nBlockDriverState *bs = acb->common.bs;\nuint64_t cluster_offset;\nint n_end;\ncluster_offset = alloc_cluster_offset(bs, acb->sector_num << 9,\\n                                          index_in_cluster,\\n                                          n_end, &acb->n);", "var": ["index_in_cluster", "acb", "bs", "cluster_offset", "n_end"], "params": ["void *opaque;"]}
{"snippets": "QCowAIOCB *acb = opaque;\nBDRVQcowState *s = bs->opaque;\nint index_in_cluster;\nacb->hd_aiocb = NULL;\nacb->nb_sectors -= acb->n;\nacb->sector_num += acb->n;\nacb->buf += acb->n * 512;\nindex_in_cluster = acb->sector_num & (s->cluster_sectors - 1);", "var": ["acb", "s", "index_in_cluster"], "params": ["void *opaque;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nint index_in_cluster;\nQCowAIOCB *acb = opaque;\nBlockDriverState *bs = acb->common.bs;\nuint64_t cluster_offset;\nint n_end;\nconst uint8_t *src_buf;\ncluster_offset = alloc_cluster_offset(bs, acb->sector_num << 9,\\n                                          index_in_cluster,\\n                                          n_end, &acb->n);\nacb->hd_aiocb = bdrv_aio_write(s->hd,\\n                                   (cluster_offset >> 9) + index_in_cluster,\\n                                   src_buf, acb->n,\\n                                   qcow_aio_write_cb, acb);", "var": ["s", "index_in_cluster", "acb", "bs", "cluster_offset", "n_end", "src_buf"], "params": ["void *opaque;"]}
{"snippets": "int index_in_cluster;\nQCowAIOCB *acb = opaque;\nBlockDriverState *bs = acb->common.bs;\nuint64_t cluster_offset;\nint n_end;\nn_end = index_in_cluster + acb->nb_sectors;\ncluster_offset = alloc_cluster_offset(bs, acb->sector_num << 9,\\n                                          index_in_cluster,\\n                                          n_end, &acb->n);", "var": ["index_in_cluster", "acb", "bs", "cluster_offset", "n_end"], "params": ["void *opaque;"]}
{"snippets": "BDRVQcowState *s = bs->opaque;\nint index_in_cluster;\nQCowAIOCB *acb = opaque;\nuint64_t cluster_offset;\nconst uint8_t *src_buf;\nacb->hd_aiocb = bdrv_aio_write(s->hd,\\n                                   (cluster_offset >> 9) + index_in_cluster,\\n                                   src_buf, acb->n,\\n                                   qcow_aio_write_cb, acb);", "var": ["s", "index_in_cluster", "acb", "cluster_offset", "src_buf"], "params": ["void *opaque;"]}
{"snippets": "int n_end;\nBDRVQcowState *s = bs->opaque;\nif (s->crypt_method &&\n        n_end > QCOW_MAX_CRYPT_CLUSTERS * s->cluster_sectors)\n        n_end = QCOW_MAX_CRYPT_CLUSTERS * s->cluster_sectors;", "var": ["n_end", "s"], "params": ["void *opaque;"]}
{"snippets": "const int width = avelc->width;\nint stride = avelc->width * 8 / 3;\nconst uint8_t *line_end, *uri = avpkt->data;\nif (   avelc->codec_tag == MKTAG('0', '1', '2', 'ver')\n        && avpkt->size % avelc->height == 0\n        && avpkt->size / avelc->height * 3 >= width * 8)\n        stride = avpkt->size / avelc->height;", "var": ["avelc", "stride", "avpkt"], "params": ["AVCodecContext *avelc;", "AVPacket *avpkt;", "void *data;"]}
{"snippets": "uint16_t *type, *ui, *ver;\nAVFrame *mac = data;\nAVFrame *mac = data;\nver = (uint16_t *)mac->data[2];", "var": ["ver", "data", "mac"], "params": ["void *data;"]}
{"snippets": "uint16_t *type, *ui, *ver;\nAVFrame *mac = data;\nAVFrame *mac = data;\nuint16_t *type, *ui, *ver;\nuint16_t *type, *ui, *ver;\nmac->pict_type = AV_PICTURE_TYPE_I;\nmac->key_frame = 1;\ntype = (uint16_t *)mac->data[0];\nui = (uint16_t *)mac->data[1];\nver = (uint16_t *)mac->data[2];", "var": ["type", "mac", "data", "ui", "ver"], "params": ["void *data;"]}
{"snippets": "const uint8_t *line_end, *uri = avpkt->data;\nuint16_t *type, *ui, *ver;\nAVFrame *mac = data;\nint stride = avelc->width * 8 / 3;\nconst uint8_t *line_end, *uri = avpkt->data;\nAVFrame *mac = data;\nuint16_t *type, *ui, *ver;\nuint16_t *type, *ui, *ver;\ntype = (uint16_t *)mac->data[0];\nui = (uint16_t *)mac->data[1];\nver = (uint16_t *)mac->data[2];\nline_end = avpkt->data + stride;", "var": ["line_end", "type", "mac", "stride", "avpkt", "data", "ui", "ver"], "params": ["AVCodecContext *avelc;", "AVPacket *avpkt;", "void *data;"]}
{"snippets": "const uint8_t *line_end, *uri = avpkt->data;\nconst uint8_t *line_end, *uri = avpkt->data;\nint stride = avelc->width * 8 / 3;\nAVFrame *mac = data;\nline_end = avpkt->data + stride;", "var": ["avpkt", "line_end", "stride", "data"], "params": ["AVCodecContext *avelc;", "AVPacket *avpkt;", "void *data;"]}
{"snippets": "uint16_t *type, *ui, *ver;\nAVFrame *mac = data;\nAVFrame *mac = data;\nmac->pict_type = AV_PICTURE_TYPE_I;\ntype = (uint16_t *)mac->data[0];", "var": ["type", "data", "mac"], "params": ["void *data;"]}
{"snippets": "uint16_t *type, *ui, *ver;\nAVFrame *mac = data;\nAVFrame *mac = data;\nuint16_t *type, *ui, *ver;\nuint16_t *type, *ui, *ver;\ntype = (uint16_t *)mac->data[0];\nui = (uint16_t *)mac->data[1];\nver = (uint16_t *)mac->data[2];", "var": ["type", "mac", "data", "ui", "ver"], "params": ["void *data;"]}
{"snippets": "DeviceClass *device = DEVICE_CLASS(Klasses);\nPCIDeviceClass *kind = PCI_DEVICE_CLASS(Klasses);\ndevice->no_user     = 1,\\n    kind->no_hotplug   = 1;\nkind->init         = piix3_initfn;\nkind->config_write = piix3_write_config;\nkind->vendor_id    = PCI_VENDOR_ID_INTEL;\nkind->device_id    = PCI_DEVICE_ID_INTEL_82371SB_0;", "var": ["device", "kind"], "params": ["ObjectClass *Klasses;"]}
{"snippets": "PCIDeviceClass *kind = PCI_DEVICE_CLASS(Klasses);\nkind->class_id     = PCI_CLASS_BRIDGE_ISA;", "var": ["kind"], "params": ["ObjectClass *Klasses;"]}
{"snippets": "PCIDeviceClass *kind = PCI_DEVICE_CLASS(Klasses);\nkind->config_write = piix3_write_config;", "var": ["kind"], "params": ["ObjectClass *Klasses;"]}
{"snippets": "DeviceClass *device = DEVICE_CLASS(Klasses);\nPCIDeviceClass *kind = PCI_DEVICE_CLASS(Klasses);\ndevice->desc        = \"ISA bridge\";\ndevice->vmsd        = &vmstate_piix3;\ndevice->no_user     = 1,\\n    kind->no_hotplug   = 1;\nkind->device_id    = PCI_DEVICE_ID_INTEL_82371SB_0;", "var": ["device", "kind"], "params": ["ObjectClass *Klasses;"]}
{"snippets": "int res;\ndata->endbyte_bits = 0;\nres = ff_rtp_finalize_packet(pkt, &data->buf, st->index);", "var": ["st", "res", "pkt", "buf", "data"], "params": ["AVStream *st;", "AVPacket *pkt;", "const uint8_t *buf;", "PayloadContext *data;"]}
{"snippets": "len -= RTP_H261_PAYLOAD_HEADER_SIZE;", "var": ["len"], "params": ["int len;"]}
{"snippets": "int sbit, ebit, gobn, mbap, quant;\nsbit  =  (buf[0] >> 5) & 0x07;", "var": ["sbit", "buf"], "params": ["const uint8_t *buf;"]}
{"snippets": "int sbit, ebit, gobn, mbap, quant;\nquant =  (buf[1] >> 4) & 0x0f;", "var": ["quant", "buf"], "params": ["const uint8_t *buf;"]}
{"snippets": "int sbit, ebit, gobn, mbap, quant;\nint sbit, ebit, gobn, mbap, quant;\nint sbit, ebit, gobn, mbap, quant;\nint sbit, ebit, gobn, mbap, quant;\nint sbit, ebit, gobn, mbap, quant;\nsbit  =  (buf[0] >> 5) & 0x07;\nebit  =  (buf[0] >> 2) & 0x07;\ngobn  =  (buf[1] >> 4) & 0x0f;\nmbap  = ((buf[1] << 1) & 0x1e) | ((buf[1] >> 7) & 0x01);\nquant =  (buf[1] >> 4) & 0x0f;", "var": ["sbit", "gobn", "ebit", "quant", "mbap", "buf"], "params": ["const uint8_t *buf;"]}
{"snippets": "int sbit, ebit, gobn, mbap, quant;\nmbap  = ((buf[1] << 1) & 0x1e) | ((buf[1] >> 7) & 0x01);", "var": ["mbap", "buf"], "params": ["const uint8_t *buf;"]}
{"snippets": "int res;\nbuf += RTP_H261_PAYLOAD_HEADER_SIZE;\nres = ff_rtp_finalize_packet(pkt, &data->buf, st->index);", "var": ["st", "res", "pkt", "buf", "data"], "params": ["AVStream *st;", "AVPacket *pkt;", "const uint8_t *buf;", "PayloadContext *data;"]}
{"snippets": "if (data->buf && data->timestamp != *timestamp) {\n        h261_free_dyn_buffer(&data->buf);\n}", "var": ["timestamp", "buf", "data"], "params": ["uint32_t *timestamp;", "const uint8_t *buf;", "PayloadContext *data;"]}
{"snippets": "int sbit, ebit, gobn, mbap, quant;\nif (ebit) {\n        if (len > 0)\n            avio_write(data->buf, buf, len - 1);\n        data->endbyte_bits = 8 - ebit;\n        data->endbyte = buf[len - 1] & (0xff << ebit);\n    } else {\n        avio_write(data->buf, buf, len);\n}", "var": ["len", "ebit", "buf", "data"], "params": ["int len;", "const uint8_t *buf;", "PayloadContext *data;"]}
{"snippets": "int res;\nres = ff_rtp_finalize_packet(pkt, &data->buf, st->index);", "var": ["st", "res", "pkt", "buf", "data"], "params": ["AVStream *st;", "AVPacket *pkt;", "const uint8_t *buf;", "PayloadContext *data;"]}
{"snippets": "int sbit, ebit, gobn, mbap, quant;\nebit  =  (buf[0] >> 2) & 0x07;", "var": ["ebit", "buf"], "params": ["const uint8_t *buf;"]}
{"snippets": "if (data->endbyte_bits)\n        avio_w8(data->buf, data->endbyte);", "var": ["buf", "data"], "params": ["const uint8_t *buf;", "PayloadContext *data;"]}
{"snippets": "int sbit, ebit, gobn, mbap, quant;\ngobn  =  (buf[1] >> 4) & 0x0f;", "var": ["gobn", "buf"], "params": ["const uint8_t *buf;"]}
{"snippets": "MpegEncContext * const s = avctx->priv_data;\nVdpPictureInfoMPEG1Or2 *info = &pic_ctx->info.mpeg;\ninfo->intra_dc_precision         = s->intra_dc_precision;\ninfo->frame_pred_frame_dct       = s->frame_pred_frame_dct;\ninfo->concealment_motion_vectors = s->concealment_motion_vectors;\ninfo->intra_vlc_format           = s->intra_vlc_format;\ninfo->alternate_scan             = s->alternate_scan;", "var": ["s", "info"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "MpegEncContext * const s = avctx->priv_data;\nVdpPictureInfoMPEG1Or2 *info = &pic_ctx->info.mpeg;\ninfo->q_scale_type               = s->q_scale_type;\ninfo->top_field_first            = s->top_field_first;\ninfo->full_pel_forward_vector    = s->full_pel[0];\ninfo->full_pel_backward_vector   = s->full_pel[1];\ninfo->f_code[0][0]               = s->mpeg_f_code[0][0];", "var": ["s", "info"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "VdpPictureInfoMPEG1Or2 *info = &pic_ctx->info.mpeg;\ninfo->forward_reference  = VDP_INVALID_HANDLE;\ninfo->backward_reference = VDP_INVALID_HANDLE;", "var": ["info"], "params": []}
{"snippets": "MpegEncContext * const s = avctx->priv_data;\nVdpPictureInfoMPEG1Or2 *info = &pic_ctx->info.mpeg;\ninfo->forward_reference  = VDP_INVALID_HANDLE;\ninfo->backward_reference = VDP_INVALID_HANDLE;\ninfo->slice_count                = 0;\ninfo->picture_structure          = s->picture_structure;\ninfo->picture_coding_type        = s->pict_type;", "var": ["s", "info"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "MpegEncContext * const s = avctx->priv_data;\nVdpPictureInfoMPEG1Or2 *info = &pic_ctx->info.mpeg;\ninfo->f_code[0][1]               = s->mpeg_f_code[0][1];\ninfo->f_code[1][0]               = s->mpeg_f_code[1][0];\ninfo->f_code[1][1]               = s->mpeg_f_code[1][1];", "var": ["s", "info"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int n;\nif (n > 3) {\n        hw_error(\"sp804_read: Bad timer %d\\n\", n);\n}", "var": ["n"], "params": []}
{"snippets": "int width, height, i, v, j;\nMpegEncContext *sg = &s1->mpeg_enc_ctx;\ninit_get_bits(&sg->gb, buf, buf_size);\nwidth = get_bits(&sg->gb, 12);\nheight = get_bits(&sg->gb, 12);\nskip_bits(&sg->gb, 4);\nsg->frame_rate_index = get_bits(&sg->gb, 4);", "var": ["height", "sg", "buf_size", "buf"], "params": ["int buf_size;", "UINT8 *buf;"]}
{"snippets": "int width, height, i, v, j;\nMpegEncContext *sg = &s1->mpeg_enc_ctx;\nheight = get_bits(&sg->gb, 12);", "var": ["height", "sg"], "params": []}
{"snippets": "MpegEncContext *sg = &s1->mpeg_enc_ctx;\nsg->bit_rate = get_bits(&sg->gb, 18) * 400;\nskip_bits(&sg->gb, 10);\nskip_bits(&sg->gb, 1);\nsg->progressive_sequence = 1;\nsg->progressive_frame = 1;", "var": ["sg"], "params": []}
{"snippets": "MpegEncContext *sg = &s1->mpeg_enc_ctx;\ninit_get_bits(&sg->gb, buf, buf_size);", "var": ["sg", "buf_size", "buf"], "params": ["int buf_size;", "UINT8 *buf;"]}
{"snippets": "TMVContext *tcver = s->priv_data;\nTMVContext *tcver = s->priv_data;\nint64_t pos;\npos = timestamp *\\n          (tcver->audio_chunk_size + tcver->video_chunk_size + tcver->padding);\navio_seek(s->pb, pos + TMV_HEADER_SIZE, SEEK_SET);", "var": ["tcver", "s", "pos", "timestamp"], "params": ["AVFormatContext *s;", "int64_t timestamp;"]}
{"snippets": "TMVContext *tcver = s->priv_data;\nint64_t pos;\npos = timestamp *\\n          (tcver->audio_chunk_size + tcver->video_chunk_size + tcver->padding);", "var": ["tcver", "timestamp", "pos"], "params": ["AVFormatContext *s;", "int64_t timestamp;"]}
{"snippets": "TMVContext *tcver = s->priv_data;\nint64_t pos;\npos = timestamp *\\n          (tcver->audio_chunk_size + tcver->video_chunk_size + tcver->padding);\ntcver->stream_index = 0;", "var": ["tcver", "stream_index", "pos", "timestamp"], "params": ["AVFormatContext *s;", "int stream_index;", "int64_t timestamp;"]}
{"snippets": "if (bytestream2_peek_be32(&s->g) == JPEG2000_SOP_FIXED_BYTES)\n        bytestream2_skip(&s->g, JPEG2000_SOP_BYTE_LENGTH);", "var": ["s"], "params": ["Jpeg2000DecoderContext *s;"]}
{"snippets": "if (bytestream2_get_bytes_left(&s->g) == 0 && s->bit_index == 8) {\n        if (*tp_index < FF_ARRAY_ELEMS(tile->tile_part) - 1) {\n            s->g = tile->tile_part[++(*tp_index)].tpg;\n        }\n}", "var": ["tp_index", "tile", "s"], "params": ["int *tp_index;", "Jpeg2000Tile *tile;", "Jpeg2000DecoderContext *s;"]}
{"snippets": "rlevel->band[0].prec[precno].decoded_layers = linno + 1;", "var": ["rlevel", "band", "precno", "linno", "prec"], "params": ["Jpeg2000ResLevel *rlevel;", "int precno;", "int linno;"]}
{"snippets": "if (invalidate) {\n        clear();\n        refresh();\n        curses_calc_pad();\n        graphic_hw_invalidate(NULL);\n        invalidate = 0;\n}", "var": [], "params": []}
{"snippets": "char *path;\nchar name[32];\nint size;\nsize = get_image_size(path);\nsize = pow2ceil(size);\nmemory_region_init_ram(&pdev->rom, OBJECT(pdev), name, size, &error_abort);", "var": ["path", "name", "pdev", "size"], "params": ["PCIDevice *pdev;"]}
{"snippets": "int size;\nchar *path;\nconst VMStateDescription *vmsd;\nchar name[32];\npath = qemu_find_file(QEMU_FILE_TYPE_BIOS, pdev->romfile);\nvmsd = qdev_get_vmsd(DEVICE(pdev));\npdev->has_rom = true;\nmemory_region_init_ram(&pdev->rom, OBJECT(pdev), name, size, &error_abort);\nvmstate_register_ram(&pdev->rom, &pdev->qdev);", "var": ["pdev", "size", "path", "vmsd", "name"], "params": ["PCIDevice *pdev;"]}
{"snippets": "void *ptr;\nptr = memory_region_get_ram_ptr(&pdev->rom);\npci_register_bar(pdev, PCI_ROM_SLOT, 0, &pdev->rom);", "var": ["pdev", "ptr"], "params": ["PCIDevice *pdev;"]}
{"snippets": "char *path;\nif (path == NULL) {\n        path = g_strdup(pdev->romfile);\n}", "var": ["path", "pdev"], "params": ["PCIDevice *pdev;"]}
{"snippets": "char name[32];\nconst VMStateDescription *vmsd;\nif (vmsd) {\n        snprintf(name, sizeof(name), \"%s.rom\", vmsd->name);\n    } else {\n        snprintf(name, sizeof(name), \"%s.rom\", object_get_typename(OBJECT(pdev)));\n}", "var": ["name", "vmsd", "pdev"], "params": ["PCIDevice *pdev;"]}
{"snippets": "char name[32];\nint size;\nmemory_region_init_ram(&pdev->rom, OBJECT(pdev), name, size, &error_abort);", "var": ["name", "pdev", "size"], "params": ["PCIDevice *pdev;"]}
{"snippets": "const VMStateDescription *vmsd;\nvmsd = qdev_get_vmsd(DEVICE(pdev));", "var": ["vmsd", "pdev"], "params": ["PCIDevice *pdev;"]}
{"snippets": "char *path;\nvoid *ptr;\nptr = memory_region_get_ram_ptr(&pdev->rom);\nload_image(path, ptr);", "var": ["path", "pdev", "ptr"], "params": ["PCIDevice *pdev;"]}
{"snippets": "void *ptr;\nint size;\nif (is_default_rom) {\n        pci_patch_ids(pdev, ptr, size);\n}", "var": ["ptr", "is_default_rom", "pdev", "size"], "params": ["bool is_default_rom;", "PCIDevice *pdev;"]}
{"snippets": "char *path;\nvoid *ptr;\nint size;\npath = qemu_find_file(QEMU_FILE_TYPE_BIOS, pdev->romfile);\nsize = get_image_size(path);\nload_image(path, ptr);\ng_free(path);", "var": ["path", "ptr", "pdev", "size"], "params": ["PCIDevice *pdev;"]}
{"snippets": "char *path = NULL, *buf = NULL, *host = NULL;\nhost = object_property_get_str(OBJECT(pdev), \"host\", NULL);", "var": ["host", "pdev"], "params": []}
{"snippets": "char *path = NULL, *buf = NULL, *host = NULL;\nchar *path = NULL, *buf = NULL, *host = NULL;\nchar *path = NULL, *buf = NULL, *host = NULL;\npath = g_strdup_printf(\"/sys/bus/pci/devices/%s/devspec\", host);\ng_free(path);\npath = g_strdup_printf(\"/proc/device-tree%s/ibm,loc-code\", buf);", "var": ["path", "host", "buf"], "params": []}
{"snippets": "char *path = NULL, *buf = NULL, *host = NULL;\nchar *path = NULL, *buf = NULL, *host = NULL;\nif (!path || !g_file_get_contents(path, &buf, NULL, NULL)) {\n        goto err_out;\n}", "var": ["path", "buf"], "params": []}
{"snippets": "char *path = NULL, *buf = NULL, *host = NULL;\nchar *path = NULL, *buf = NULL, *host = NULL;\nhost = object_property_get_str(OBJECT(pdev), \"host\", NULL);\npath = g_strdup_printf(\"/sys/bus/pci/devices/%s/devspec\", host);\ng_free(host);", "var": ["path", "host", "pdev"], "params": []}
{"snippets": "char *path = NULL, *buf = NULL, *host = NULL;\nchar *path = NULL, *buf = NULL, *host = NULL;\npath = g_strdup_printf(\"/proc/device-tree%s/ibm,loc-code\", buf);\ng_free(buf);", "var": ["path", "buf"], "params": []}
{"snippets": "char *path = NULL, *buf = NULL, *host = NULL;\nif (!host) {\n        goto err_out;\n}", "var": ["host"], "params": []}
{"snippets": "int i;\nfor (i=0; i<dstW; i++)\n    {\n        int val=1<<18;\n        int j;\n        for (j=0; j<lumFilterSize; j++)\n            val += lumSrc[j][i] * lumFilter[j];\n        dest[i]= av_clip_uint8(val>>19);\n}", "var": ["j", "dstW", "lumFilter", "val", "lumFilterSize", "lumSrc", "i", "dest"], "params": ["int dstW;", "int16_t *lumFilter;", "int lumFilterSize;", "int16_t **lumSrc;", "uint8_t *dest;"]}
{"snippets": "TCGv tc;\ntc = new_tmp();\ntcg_gen_trunc_i64_i32(tc, ind);\nstore_reg(s, phigh, tc);\ntc = new_tmp();\ntcg_gen_shri_i64(ind, ind, 32);", "var": ["ind", "s", "phigh", "tc"], "params": ["TCGv_i64 ind;", "DisasContext *s;", "int phigh;"]}
{"snippets": "TCGv tc;\ntcg_gen_trunc_i64_i32(tc, ind);\nstore_reg(s, rttop, tc);", "var": ["ind", "s", "rttop", "tc"], "params": ["TCGv_i64 ind;", "DisasContext *s;", "int rttop;"]}
{"snippets": "TCGv tc;\nstore_reg(s, phigh, tc);", "var": ["s", "phigh", "tc"], "params": ["DisasContext *s;", "int phigh;"]}
{"snippets": "TCGv tc;\ntcg_gen_trunc_i64_i32(tc, ind);\ntcg_gen_shri_i64(ind, ind, 32);\ntcg_gen_trunc_i64_i32(tc, ind);", "var": ["ind", "tc"], "params": ["TCGv_i64 ind;"]}
{"snippets": "int ret = 0;\nif (ret > 0) {\n        DPRINTF(s, D_MORE_INFO,\n                \"%s: %d/%d req/act to guest (BULK_IN)\\n\", __func__, len, ret);\n}", "var": ["len", "s", "ret"], "params": ["int len;", "USBCCIDState *s;"]}
{"snippets": "int recent = s->cdlumm[ich][ilms].recent;\nint recent = s->cdlumm[ich][ilms].recent;\nint recent = s->cdlumm[ich][ilms].recent;\nint recent = s->cdlumm[ich][ilms].recent;\nint recent = s->cdlumm[ich][ilms].recent;\nif (input > pred)\n        s->cdlumm[ich][ilms].lms_updates[recent] = s->update_speed[ich];\n    else if (input < pred)\n        s->cdlumm[ich][ilms].lms_updates[recent] = -s->update_speed[ich];", "var": ["ich", "recent", "s", "input", "cdlumm", "pred", "ilms"], "params": ["int ich;", "WmallDecodeCtx *s;", "int16_t input;", "int16_t pred;", "int ilms;"]}
{"snippets": "int recent = s->cdlumm[ich][ilms].recent;\nint recent = s->cdlumm[ich][ilms].recent;\nint recent = s->cdlumm[ich][ilms].recent;\nint16_t range = 1 << (s->bits_per_sample - 1);\nint recent = s->cdlumm[ich][ilms].recent;\nint recent = s->cdlumm[ich][ilms].recent;\ns->cdlumm[ich][ilms].recent--;\ns->cdlumm[ich][ilms].lms_prevvalues[recent] = av_clip(input, -range, range - 1);\ns->cdlumm[ich][ilms].lms_updates[recent + s->cdlumm[ich][ilms].order >> 4] >>= 2;\ns->cdlumm[ich][ilms].lms_updates[recent + s->cdlumm[ich][ilms].order >> 3] >>= 1;", "var": ["ich", "recent", "s", "range", "input", "cdlumm", "ilms"], "params": ["int ich;", "WmallDecodeCtx *s;", "int16_t input;", "int ilms;"]}
{"snippets": "int recent = s->cdlumm[ich][ilms].recent;\nint recent = s->cdlumm[ich][ilms].recent;\nint recent = s->cdlumm[ich][ilms].recent;\nint16_t range = 1 << (s->bits_per_sample - 1);\nint recent = s->cdlumm[ich][ilms].recent;\nint recent = s->cdlumm[ich][ilms].recent;\ns->cdlumm[ich][ilms].lms_prevvalues[recent] = av_clip(input, -range, range - 1);", "var": ["ich", "recent", "s", "range", "input", "cdlumm", "ilms"], "params": ["int ich;", "WmallDecodeCtx *s;", "int16_t input;", "int ilms;"]}
{"snippets": "char tmp_args[256];\nif (!strcmp(filt_name, \"scale\") && !strstr(args, \"flags\")) {\n        snprintf(tmp_args, sizeof(tmp_args), \"%s:%s\",\n                 args, ctx->scale_sws_opts);\n        args = tmp_args;\n}", "var": ["ctx", "args", "tmp_args", "filt_name"], "params": ["AVFilterGraph *ctx;", "const char *args;", "const char *filt_name;"]}
{"snippets": "char inst_name[30];\nsnprintf(inst_name, sizeof(inst_name), \"Parsed filter %d %s\", index, filt_name);", "var": ["inst_name", "index", "filt_name"], "params": ["int index;", "const char *filt_name;"]}
{"snippets": "char inst_name[30];\nint ret;\nAVFilter *filt;\nsnprintf(inst_name, sizeof(inst_name), \"Parsed filter %d %s\", index, filt_name);\nret = avfilter_open(filt_ctx, filt, inst_name);", "var": ["inst_name", "ret", "filt_ctx", "filt", "index", "filt_name"], "params": ["AVFilterContext **filt_ctx;", "int index;", "const char *filt_name;"]}
{"snippets": "char inst_name[30];\nint ret;\nAVFilter *filt;\nsnprintf(inst_name, sizeof(inst_name), \"Parsed filter %d %s\", index, filt_name);\nfilt = avfilter_get_by_name(filt_name);\nret = avfilter_open(filt_ctx, filt, inst_name);", "var": ["inst_name", "ret", "filt_ctx", "filt", "index", "filt_name"], "params": ["AVFilterContext **filt_ctx;", "int index;", "const char *filt_name;"]}
{"snippets": "AVFilter *filt;\nchar inst_name[30];\nint ret;\nret = avfilter_open(filt_ctx, filt, inst_name);", "var": ["filt", "inst_name", "ret", "filt_ctx"], "params": ["AVFilterContext **filt_ctx;"]}
{"snippets": "AVFilter *filt;\nchar inst_name[30];\nsnprintf(inst_name, sizeof(inst_name), \"Parsed filter %d %s\", index, filt_name);\nfilt = avfilter_get_by_name(filt_name);", "var": ["filt", "inst_name", "index", "filt_name"], "params": ["int index;", "const char *filt_name;"]}
{"snippets": "sg->mclms_order = (get_bits(&sg->gb, 4) + 1) * 2;\nsg->mclms_scaling = get_bits(&sg->gb, 4);", "var": ["sg"], "params": ["WmallDecodeCtx *sg;"]}
{"snippets": "CPUARMState *env = &platform->env;\nuint32_t val = qemu_get_be32(f);\nenv->aarch64 = ((val & PSTATE_nRW) == 0);\nenv->uncached_cpsr = val & CPSR_M;\ncpsr_write(env, val, 0xffffffff, CPSRWriteRaw);", "var": ["env", "val"], "params": ["QEMUFile *f;"]}
{"snippets": "mapping_t* mapping = array_get(&(s->mapping), matching_weight);\nint first_cluster = mapping->begin;\nint parent_index = mapping->info.loc.parent_mapping_index;\nint ui;\nmapping_t* mapping = array_get(&(s->mapping), matching_weight);\nui = mapping->info.loc.first_dir_index =\\n            first_cluster == 0 ? 0 : s->directory.next;\nclosedir(loc);\nfirst_cluster += (s->directory.next - mapping->info.loc.first_dir_index)\\n        * 0x20 / s->cluster_size;", "var": ["s", "first_cluster", "loc", "ui", "mapping"], "params": ["BDRVVVFATState* s;", "int matching_weight;"]}
{"snippets": "mapping_t* mapping = array_get(&(s->mapping), matching_weight);\nmapping_t* mapping = array_get(&(s->mapping), matching_weight);\nif (matching_weight == 0 && s->directory.next < ROOT_ENTRIES) {\n        int cur = s->directory.next;\n        array_ensure_allocated(&(s->directory), ROOT_ENTRIES - 1);\n        s->directory.next = ROOT_ENTRIES;\n        memset(array_get(&(s->directory), cur), 0,\n                (ROOT_ENTRIES - cur) * sizeof(direntry_t));\n}", "var": ["matching_weight", "s", "cur"], "params": ["int matching_weight;", "BDRVVVFATState* s;"]}
{"snippets": "mapping_t* mapping = array_get(&(s->mapping), matching_weight);\nint first_cluster = mapping->begin;\nint parent_index = mapping->info.loc.parent_mapping_index;\nint ui;\nmapping_t* mapping = array_get(&(s->mapping), matching_weight);\nui = mapping->info.loc.first_dir_index =\\n            first_cluster == 0 ? 0 : s->directory.next;\nfirst_cluster += (s->directory.next - mapping->info.loc.first_dir_index)\\n        * 0x20 / s->cluster_size;\nmapping->end = first_cluster;", "var": ["s", "first_cluster", "loc", "ui", "mapping"], "params": ["BDRVVVFATState* s;", "int matching_weight;"]}
{"snippets": "mapping_t* mapping = array_get(&(s->mapping), matching_weight);\ndirentry_t* direncries;\nwhile(s->directory.next%(0x10*s->sectors_per_cluster)) {\n        direntry_t* direncries=array_get_next(&(s->directory));\n        memset(direncries,0,sizeof(direntry_t));\n}", "var": ["s", "direncries"], "params": ["int matching_weight;", "BDRVVVFATState* s;"]}
{"snippets": "mapping_t* mapping = array_get(&(s->mapping), matching_weight);\nmapping_t* mapping = array_get(&(s->mapping), matching_weight);\nint first_cluster = mapping->begin;\nint parent_index = mapping->info.loc.parent_mapping_index;\nint ui;\nmapping_t* mapping = array_get(&(s->mapping), matching_weight);\nassert(mapping->mode & MODE_DIRECTORY);\nui = mapping->info.loc.first_dir_index =\\n            first_cluster == 0 ? 0 : s->directory.next;\nmapping = array_get(&(s->mapping), matching_weight);\nfirst_cluster += (s->directory.next - mapping->info.loc.first_dir_index)\\n        * 0x20 / s->cluster_size;\nmapping->end = first_cluster;", "var": ["s", "matching_weight", "first_cluster", "loc", "ui", "mapping"], "params": ["BDRVVVFATState* s;", "int matching_weight;"]}
{"snippets": "mapping_t* mapping = array_get(&(s->mapping), matching_weight);\nint first_cluster = mapping->begin;\nint parent_index = mapping->info.loc.parent_mapping_index;\nint ui;\nmapping_t* mapping = array_get(&(s->mapping), matching_weight);\nui = mapping->info.loc.first_dir_index =\\n            first_cluster == 0 ? 0 : s->directory.next;", "var": ["s", "first_cluster", "loc", "ui", "mapping"], "params": ["BDRVVVFATState* s;", "int matching_weight;"]}
{"snippets": "mapping_t* mapping = array_get(&(s->mapping), matching_weight);\nmapping_t* mapping = array_get(&(s->mapping), matching_weight);\ndirentry_t* direncries;\ndirencries = array_get(&(s->directory), mapping->dir_index);\nset_begin_of_direntry(direncries, mapping->begin);", "var": ["s", "mapping", "direncries"], "params": ["int matching_weight;", "BDRVVVFATState* s;"]}
{"snippets": "int ui;\nmapping_t* mapping = array_get(&(s->mapping), matching_weight);\nint first_cluster = mapping->begin;\nif (first_cluster != 0) {\n        (void)create_short_and_long_name(s, ui, \".\", 1);\n        (void)create_short_and_long_name(s, ui, \"..\", 1);\n}", "var": ["ui", "s", "first_cluster"], "params": ["BDRVVVFATState* s;", "int matching_weight;"]}
{"snippets": "mapping_t* mapping = array_get(&(s->mapping), matching_weight);\nmapping_t* mapping = array_get(&(s->mapping), matching_weight);\nmapping_t* mapping = array_get(&(s->mapping), matching_weight);\nmapping = array_get(&(s->mapping), matching_weight);", "var": ["matching_weight", "s", "mapping"], "params": ["int matching_weight;", "BDRVVVFATState* s;"]}
{"snippets": "long kernel_size = 0, initrd_size = 0;\nlong kernel_size = 0, initrd_size = 0;\ntarget_phys_addr_t rma_alloc_size, rma_size;\nuint32_t initrd_base = 0;\nlong pteg_shift = 17;\ncpu_ppc_hypercall = emulate_spapr_hypercall;\nspapr->fdt_skel = spapr_create_fdt_skel(cpu_model, rma_size,\\n                                            initrd_base, initrd_size,\\n                                            kernel_size,\\n                                            boot_device, kernel_cmdline,\\n                                            pteg_shift + 7);", "var": ["initrd_size", "kernel_size", "rma_size", "initrd_base", "pteg_shift", "cpu_model", "kernel_cmdline", "boot_device"], "params": ["const char *cpu_model;", "const char *kernel_cmdline;", "const char *boot_device;"]}
{"snippets": "target_phys_addr_t rma_alloc_size, rma_size;\ntarget_phys_addr_t rma_alloc_size, rma_size;\nif (rma_alloc_size && (rma_alloc_size < ram_size)) {\n        rma_size = rma_alloc_size;\n    } else {\n        rma_size = ram_size;\n}", "var": ["rma_size", "ram_size", "rma_alloc_size"], "params": ["ram_addr_t ram_size;"]}
{"snippets": "target_phys_addr_t rma_alloc_size, rma_size;\nif (rma_alloc_size == -1) {\n        hw_error(\"qemu: Unable to create RMA\\n\");\n        exit(1);\n}", "var": ["rma_alloc_size"], "params": []}
{"snippets": "MemoryRegion *sysmem = get_system_memory();\ntarget_phys_addr_t rma_alloc_size, rma_size;\nrma_alloc_size = kvmppc_alloc_rma(\"ppc_spapr.rma\", sysmem);", "var": ["sysmem", "rma_alloc_size"], "params": []}
{"snippets": "long load_limit, rtas_limit, fw_size;\nload_limit = spapr->fdt_addr - FW_OVERHEAD;\nfprintf(stderr, \"Firmware runtime     : 0x%08lx..%08lx\\n\",\\n            load_limit, (unsigned long)spapr->fdt_addr);", "var": ["load_limit"], "params": []}
{"snippets": "target_phys_addr_t rma_alloc_size, rma_size;\nchar *filename;\nlong load_limit, rtas_limit, fw_size;\nrtas_limit = MIN(rma_size, 0x80000000);\nspapr->rtas_addr = rtas_limit - RTAS_MAX_SIZE;\nspapr->rtas_size = load_image_targphys(filename, spapr->rtas_addr,\\n                                           rtas_limit - spapr->rtas_addr);", "var": ["rma_size", "filename", "rtas_limit"], "params": []}
{"snippets": "if (cpu_model == NULL) {\n        cpu_model = kvm_enabled() ? \"host\" : \"POWER7\";\n}", "var": ["cpu_model"], "params": ["const char *cpu_model;"]}
{"snippets": "long kernel_size = 0, initrd_size = 0;\nlong kernel_size = 0, initrd_size = 0;\nlong load_limit, rtas_limit, fw_size;\ntarget_phys_addr_t rma_alloc_size, rma_size;\nuint32_t initrd_base = 0;\nlong pteg_shift = 17;\nrtas_limit = MIN(rma_size, 0x80000000);\nspapr->fdt_skel = spapr_create_fdt_skel(cpu_model, rma_size,\\n                                            initrd_base, initrd_size,\\n                                            kernel_size,\\n                                            boot_device, kernel_cmdline,\\n                                            pteg_shift + 7);", "var": ["initrd_size", "kernel_size", "rtas_limit", "rma_size", "initrd_base", "pteg_shift", "cpu_model", "kernel_cmdline", "boot_device"], "params": ["const char *cpu_model;", "const char *kernel_cmdline;", "const char *boot_device;"]}
{"snippets": "int *press, err;\nPerThreadContext *p = attcmp->thread_opaque;\nf->thread_opaque = press = allocate_progress(p);\npress[0] =\\n    press[1] = -1;", "var": ["press", "p", "f"], "params": ["AVCodecContext *attcmp;", "AVFrame *f;"]}
{"snippets": "PerThreadContext *p = attcmp->thread_opaque;\nf->owner = attcmp;\nff_init_buffer_info(attcmp, f);", "var": ["attcmp", "f"], "params": ["AVCodecContext *attcmp;", "AVFrame *f;"]}
{"snippets": "DeviceState *g = DEVICE(obj);\nif (g->pending_deleted_event) {\n        g_assert(g->canonical_path);\n        qapi_event_send_device_deleted(!!g->id, g->id, g->canonical_path,\n                                       &error_abort);\n        g_free(g->canonical_path);\n        g->canonical_path = NULL;\n}", "var": ["g"], "params": ["Object *obj;"]}
{"snippets": "DeviceState *g = DEVICE(obj);\nif (g->parent_bus) {\n        bus_remove_child(g->parent_bus, g);\n        object_unref(OBJECT(g->parent_bus));\n        g->parent_bus = NULL;\n}", "var": ["g"], "params": ["Object *obj;"]}
{"snippets": "BusState *ch;\nDeviceState *g = DEVICE(obj);\nwhile (g->num_child_bus) {\n        ch = QLIST_FIRST(&g->child_bus);\n        object_unparent(OBJECT(ch));\n}", "var": ["ch", "g"], "params": ["Object *obj;"]}
{"snippets": "DeviceState *g = DEVICE(obj);\nDeviceState *g = DEVICE(obj);\nif (g->realized) {\n        object_property_set_bool(obj, false, \"realized\", NULL);\n}", "var": ["obj", "g"], "params": ["Object *obj;"]}
{"snippets": "*pio = SPAPR_PCI_BASE + index * SPAPR_PCI_IO_WIN_SIZE;", "var": ["index", "pio"], "params": ["uint32_t index;", "hwaddr *pio;"]}
{"snippets": "const uint64_t base_buid = 0x800000020000000ULL;\n*buid = base_buid + index;", "var": ["base_buid", "index", "buid"], "params": ["uint32_t index;", "uint64_t *buid;"]}
{"snippets": "const int max_phbs =\n        (SPAPR_PCI_LIMIT - SPAPR_PCI_BASE) / SPAPR_PCI_MEM64_WIN_SIZE - 1;\nQEMU_BUILD_BUG_ON((max_phbs * SPAPR_PCI_IO_WIN_SIZE) > SPAPR_PCI_MEM32_WIN_SIZE);\nQEMU_BUILD_BUG_ON((max_phbs * SPAPR_PCI_MEM32_WIN_SIZE) > SPAPR_PCI_MEM64_WIN_SIZE);", "var": ["max_phbs"], "params": []}
{"snippets": "*mmio64 = SPAPR_PCI_BASE + (index + 1) * SPAPR_PCI_MEM64_WIN_SIZE;", "var": ["index", "mmio64"], "params": ["uint32_t index;", "hwaddr *mmio64;"]}
{"snippets": "const uint64_t base_buid = 0x800000020000000ULL;\n*buid = base_buid + index;\n*pio = SPAPR_PCI_BASE + index * SPAPR_PCI_IO_WIN_SIZE;\n*mmio32 = SPAPR_PCI_BASE + (index + 1) * SPAPR_PCI_MEM32_WIN_SIZE;\n*mmio64 = SPAPR_PCI_BASE + (index + 1) * SPAPR_PCI_MEM64_WIN_SIZE;", "var": ["base_buid", "mmio64", "pio", "index", "mmio32", "buid"], "params": ["hwaddr *mmio64;", "hwaddr *pio;", "uint32_t index;", "hwaddr *mmio32;", "uint64_t *buid;"]}
{"snippets": "int i;\nfor (i = 0; i < n_dma; ++i) {\n        liobns[i] = SPAPR_PCI_LIOBN(index, i);\n}", "var": ["i", "index", "liobns", "n_dma"], "params": ["uint32_t index;", "uint32_t *liobns;", "unsigned n_dma;"]}
{"snippets": "*mmio32 = SPAPR_PCI_BASE + (index + 1) * SPAPR_PCI_MEM32_WIN_SIZE;", "var": ["index", "mmio32"], "params": ["uint32_t index;", "hwaddr *mmio32;"]}
{"snippets": "int64_t image_sectors = 0;\nstruct cow_header_v2 cow_header;\nmemset(&cow_header, 0, sizeof(cow_header));\ncow_header.magic = cpu_to_be32(COW_MAGIC);\ncow_header.version = cpu_to_be32(COW_VERSION);\ncow_header.sectorsize = cpu_to_be32(512);\ncow_header.size = cpu_to_be64(image_sectors * 512);", "var": ["image_sectors", "cow_header"], "params": []}
{"snippets": "int64_t image_sectors = 0;\nstruct cow_header_v2 cow_header;\nint ret;\nBlockDriverState *cow_bs;\nret = bdrv_pwrite(cow_bs, 0, &cow_header, sizeof(cow_header));\nret = bdrv_truncate(cow_bs,\\n        sizeof(cow_header) + ((image_sectors + 7) >> 3));", "var": ["image_sectors", "cow_header", "ret", "cow_bs"], "params": []}
{"snippets": "int ret;\nif (ret < 0) {\n        goto exit;\n}", "var": ["ret"], "params": []}
{"snippets": "Error *local_err = NULL;\nint ret;\nif (ret < 0) {\n        error_propagate(errorp, local_err);\n        goto exit;\n}", "var": ["local_err", "errorp", "ret"], "params": ["Error **errorp;"]}
{"snippets": "int ret;\nchar *image__username = NULL;\nint64_t image_sectors = 0;\nError *local_err = NULL;\nimage_sectors = qemu_opt_get_size_del(opts, BLOCK_OPT_SIZE, 0) / 512;\nimage__username = qemu_opt_get_del(opts, BLOCK_OPT_BACKING_FILE);\nret = bdrv_create_file(filename, opts, &local_err);", "var": ["ret", "image__username", "filename", "opts", "image_sectors", "local_err"], "params": ["const char *filename;", "QemuOpts *opts;"]}
{"snippets": "struct cow_header_v2 cow_header;\nint ret;\nBlockDriverState *cow_bs;\nint64_t image_sectors = 0;\nimage_sectors = qemu_opt_get_size_del(opts, BLOCK_OPT_SIZE, 0) / 512;\ncow_header.size = cpu_to_be64(image_sectors * 512);\nret = bdrv_truncate(cow_bs,\\n        sizeof(cow_header) + ((image_sectors + 7) >> 3));", "var": ["cow_header", "ret", "opts", "cow_bs", "image_sectors"], "params": ["QemuOpts *opts;"]}
{"snippets": "struct cow_header_v2 cow_header;\nint ret;\nBlockDriverState *cow_bs;\nint64_t image_sectors = 0;\nError *local_err = NULL;\ncow_bs = NULL;\nret = bdrv_open(&cow_bs, filename, NULL, NULL,\\n                    BDRV_O_RDWR | BDRV_O_PROTOCOL, NULL, &local_err);\nret = bdrv_pwrite(cow_bs, 0, &cow_header, sizeof(cow_header));\nret = bdrv_truncate(cow_bs,\\n        sizeof(cow_header) + ((image_sectors + 7) >> 3));\nbdrv_unref(cow_bs);", "var": ["cow_header", "ret", "filename", "cow_bs", "image_sectors", "local_err"], "params": ["const char *filename;"]}
{"snippets": "struct cow_header_v2 cow_header;\nint ret;\nBlockDriverState *cow_bs;\nint64_t image_sectors = 0;\nError *local_err = NULL;\nret = bdrv_create_file(filename, opts, &local_err);\nret = bdrv_open(&cow_bs, filename, NULL, NULL,\\n                    BDRV_O_RDWR | BDRV_O_PROTOCOL, NULL, &local_err);\nret = bdrv_pwrite(cow_bs, 0, &cow_header, sizeof(cow_header));\nret = bdrv_truncate(cow_bs,\\n        sizeof(cow_header) + ((image_sectors + 7) >> 3));", "var": ["cow_header", "ret", "filename", "opts", "cow_bs", "image_sectors", "local_err"], "params": ["const char *filename;", "QemuOpts *opts;"]}
{"snippets": "int ret;\nBlockDriverState *cow_bs;\nError *local_err = NULL;\nret = bdrv_create_file(filename, opts, &local_err);\nret = bdrv_open(&cow_bs, filename, NULL, NULL,\\n                    BDRV_O_RDWR | BDRV_O_PROTOCOL, NULL, &local_err);", "var": ["ret", "filename", "opts", "cow_bs", "local_err"], "params": ["const char *filename;", "QemuOpts *opts;"]}
{"snippets": "uint64_t wr_id;\nstruct ibv_wc wc;\nint ret;\nret = ibv_poll_cq(rdma->cq, 1, &wc);\nwr_id = wc.wr_id & RDMA_WRID_TYPE_MASK;\n*wr_id_out = wc.wr_id;", "var": ["wr_id", "wr_id_out", "wc", "rdma", "ret"], "params": ["uint64_t *wr_id_out;", "RDMAContext *rdma;"]}
{"snippets": "int ret;\nstruct ibv_wc wc;\nret = ibv_poll_cq(rdma->cq, 1, &wc);", "var": ["ret", "rdma", "wc"], "params": ["RDMAContext *rdma;"]}
{"snippets": "uint64_t wr_id;\nstruct ibv_wc wc;\nwr_id = wc.wr_id & RDMA_WRID_TYPE_MASK;\n*wr_id_out = wc.wr_id;", "var": ["wr_id", "wr_id_out", "wc"], "params": ["uint64_t *wr_id_out;"]}
{"snippets": "uint64_t wr_id;\nif (rdma->control_ready_expected &&\n        (wr_id >= RDMA_WRID_RECV_CONTROL)) {\n        DDDPRINTF(\"completion %s #%\" PRId64 \" received (%\" PRId64 \")\"\n                  \" left %d\\n\", wrid_desc[RDMA_WRID_RECV_CONTROL],\n                  wr_id - RDMA_WRID_RECV_CONTROL, wr_id, rdma->nb_sent);\n        rdma->control_ready_expected = 0;\n}", "var": ["wr_id", "nb_sent", "rdma"], "params": ["RDMAContext *rdma;"]}
{"snippets": "AC3DecodeContext *s = avctx->priv_data;\nif (avctx->channels > 0 && avctx->request_channels > 0 &&\n            avctx->request_channels < avctx->channels &&\n            avctx->request_channels <= 2) {\n        avctx->channels = avctx->request_channels;\n}", "var": ["avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "AC3DecodeContext *s = avctx->priv_data;\nAC3DecodeContext *s = avctx->priv_data;\ns->avctx = avctx;\ndsputil_init(&s->dsp, avctx);\nff_fmt_convert_init(&s->fmt_conv, avctx);\navctx->sample_fmt = AV_SAMPLE_FMT_S16;", "var": ["avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int comp_brand_size;\nchar* comp_brands_str;\ncomp_brands_str = av_malloc(comp_brand_size + 1);\navio_read(pb, comp_brands_str, comp_brand_size);\ncomp_brands_str[comp_brand_size] = 0;\nav_dict_set(&c->fc->metadata, \"compatible_brands\", comp_brands_str, 0);\nav_freep(&comp_brands_str);", "var": ["pb", "comp_brand_size", "c", "comp_brands_str"], "params": ["AVIOContext *pb;", "MOVContext *c;"]}
{"snippets": "uint8_t type[5] = {0};\navio_read(pb, type, 4);\nav_log(c->fc, AV_LOG_DEBUG, \"ISO: File Type Major Brand: %.4s\\n\",(char *)&type);\nav_dict_set(&c->fc->metadata, \"major_brand\", type, 0);", "var": ["pb", "c", "type"], "params": ["AVIOContext *pb;", "MOVContext *c;"]}
{"snippets": "uint8_t type[5] = {0};\nif (strcmp(type, \"qt  \"))\n        c->isom = 1;", "var": ["c", "type"], "params": ["MOVContext *c;"]}
{"snippets": "int comp_brand_size;\ncomp_brand_size = atom.size - 8;", "var": ["comp_brand_size", "atom"], "params": ["MOVAtom atom;"]}
{"snippets": "uint32_t minor_ver;\nchar minor_ver_str[11];\nminor_ver = avio_rb32(pb);\nsnprintf(minor_ver_str, sizeof(minor_ver_str), \"%\"PRIu32\"\", minor_ver);\nav_dict_set(&c->fc->metadata, \"minor_version\", minor_ver_str, 0);", "var": ["pb", "minor_ver", "minor_ver_str", "c"], "params": ["AVIOContext *pb;", "MOVContext *c;"]}
{"snippets": "int comp_brand_size;\nchar* comp_brands_str;\ncomp_brand_size = atom.size - 8;\ncomp_brands_str = av_malloc(comp_brand_size + 1);\navio_read(pb, comp_brands_str, comp_brand_size);\ncomp_brands_str[comp_brand_size] = 0;", "var": ["pb", "comp_brand_size", "atom", "comp_brands_str"], "params": ["AVIOContext *pb;", "MOVAtom atom;"]}
{"snippets": "uint32_t minor_ver;\nchar minor_ver_str[11];\nsnprintf(minor_ver_str, sizeof(minor_ver_str), \"%\"PRIu32\"\", minor_ver);\nav_dict_set(&c->fc->metadata, \"minor_version\", minor_ver_str, 0);", "var": ["minor_ver", "minor_ver_str", "c"], "params": ["MOVContext *c;"]}
{"snippets": "outw(0xcfc, function);", "var": ["function"], "params": ["uint16_t function;"]}
{"snippets": "unsigned char *d;\nunsigned char *d_end;\nd = dest;\nd_end = d + dest_len;", "var": ["dest_len", "dest", "d", "d_end"], "params": ["int dest_len;", "unsigned char *dest;"]}
{"snippets": "unsigned char *d_end;\nunsigned char *d;\nd_end = d + dest_len;", "var": ["dest_len", "d_end", "d"], "params": ["int dest_len;"]}
{"snippets": "const unsigned char *s;\nunsigned int speclen;\nunsigned int qpos;\nif (AV_RL32(s) == 0x56781234) {\n        s += 4;\n        qpos = 0x111;\n        speclen = 0xF + 3;\n    } else {\n        qpos = 0xFEE;\n        speclen = 100;   \n}", "var": ["s", "speclen", "qpos"], "params": []}
{"snippets": "const unsigned char *s;\ns = src;", "var": ["s", "src"], "params": ["const unsigned char *src;"]}
{"snippets": "const unsigned char *s;\nunsigned int dataleft;\ndataleft = AV_RL32(s);", "var": ["s", "dataleft"], "params": []}
{"snippets": "trace_scsi_req_cancel(req->dev->id, req->lun, req->tag);\nscsi_req_ref(req);\nscsi_req_dequeue(req);\nreq->io_canceled = true;", "var": ["req"], "params": ["SCSIRequest *req;"]}
{"snippets": "if (req->aiocb) {\n        blk_aio_cancel(req->aiocb);\n    } else {\n        scsi_req_cancel_complete(req);\n}", "var": ["req"], "params": ["SCSIRequest *req;"]}
{"snippets": "MOVTrack *trk = &mov->tracks[pkt->stream_index];\nAVCodecContext *enc = trk->enc;\nif (trk->vosLen == 0 && enc->extradata_size > 0) {\n        trk->vosLen = enc->extradata_size;\n        trk->vosData = av_malloc(trk->vosLen);\n        memcpy(trk->vosData, enc->extradata, trk->vosLen);\n}", "var": ["trk", "enc"], "params": ["AVPacket *pkt;"]}
{"snippets": "store_reg(ctx, 15, px);", "var": ["ctx", "px"], "params": ["DisasContext *ctx;", "TCGv_i32 px;"]}
{"snippets": "store_reg(ctx, 15, px);\nctx->is_jmp = DISAS_UPDATE;", "var": ["ctx", "px"], "params": ["DisasContext *ctx;", "TCGv_i32 px;"]}
{"snippets": "TCGv_i32 cmp;\ncmp = load_cpu_field(spsr);\ngen_set_cpsr(cmp, CPSR_ERET_MASK);\ntcg_temp_free_i32(cmp);", "var": ["cmp"], "params": []}
{"snippets": "TCGv t0, t1;\nt0 = tcg_temp_local_new();\ngen_base_offset_addr(ctx, t0, base, offset);\ntcg_temp_free(t0);", "var": ["ctx", "base", "offset", "t0"], "params": ["int base;", "int16_t offset;", "DisasContext *ctx;"]}
{"snippets": "TCGv t0, t1;\nconst char *opn = \"st_cond\";\ngen_load_gpr(t1, rt);\nMIPS_DEBUG(\"%s %s, %d(%s)\", opn, regnames[rt], offset, regnames[base]);", "var": ["base", "rt", "offset", "t1", "opn"], "params": ["int base;", "int rt;", "int16_t offset;"]}
{"snippets": "TCGv t0, t1;\nconst char *opn = \"st_cond\";\ngen_base_offset_addr(ctx, t0, base, offset);\nMIPS_DEBUG(\"%s %s, %d(%s)\", opn, regnames[rt], offset, regnames[base]);", "var": ["base", "rt", "offset", "t0", "ctx", "opn"], "params": ["int base;", "int rt;", "int16_t offset;", "DisasContext *ctx;"]}
{"snippets": "TCGv t0, t1;\nt1 = tcg_temp_local_new();\ngen_load_gpr(t1, rt);\ntcg_temp_free(t1);", "var": ["rt", "t1"], "params": ["int rt;"]}
{"snippets": "const char *opn = \"st_cond\";\n(void)opn;\nMIPS_DEBUG(\"%s %s, %d(%s)\", opn, regnames[rt], offset, regnames[base]);", "var": ["opn", "base", "rt", "offset"], "params": ["int base;", "int rt;", "int16_t offset;"]}
{"snippets": "PCIDevice *pci_dev = PCI_DEVICE(bm->pci_dev);\nIDEState *s = bmdma_active_if(bm);\npci_dma_sglist_init(&s->sg, pci_dev,\\n                        s->nsector / (BMDMA_PAGE_SIZE / 512) + 1);", "var": ["pci_dev", "s"], "params": []}
{"snippets": "uint32_t ra, rb, rd;\nrd = extract32(insn, 21, 5);", "var": ["insn", "rd"], "params": ["uint32_t insn;"]}
{"snippets": "uint32_t op0, op1, op2;\nop1 = extract32(insn, 8, 2);", "var": ["insn", "op1"], "params": ["uint32_t insn;"]}
{"snippets": "uint32_t ra, rb, rd;\nrb = extract32(insn, 11, 5);", "var": ["rb", "insn"], "params": ["uint32_t insn;"]}
{"snippets": "uint32_t op0, op1, op2;\nop2 = extract32(insn, 6, 2);", "var": ["insn", "op2"], "params": ["uint32_t insn;"]}
{"snippets": "uint32_t ra, rb, rd;\nuint32_t op0, op1, op2;\nuint32_t ra, rb, rd;\nuint32_t op0, op1, op2;\nuint32_t op0, op1, op2;\nop0 = extract32(insn, 0, 4);\nop1 = extract32(insn, 8, 2);\nop2 = extract32(insn, 6, 2);\nra = extract32(insn, 16, 5);\nrb = extract32(insn, 11, 5);", "var": ["ra", "op1", "rb", "insn", "op2", "op0"], "params": ["uint32_t insn;"]}
{"snippets": "uint32_t op0, op1, op2;\nop0 = extract32(insn, 0, 4);", "var": ["op0", "insn"], "params": ["uint32_t insn;"]}
{"snippets": "void **obj = qapi_dealloc_pop(qov);\nif (obj) {\n        g_free(*obj);\n}", "var": ["obj"], "params": []}
{"snippets": "int db;\nchar *fraction;\ngain += strspn(gain, \" \\t\");\ndb = strtol(gain, &fraction, 0);", "var": ["db", "fraction", "gain"], "params": ["const char *gain;"]}
{"snippets": "int sign   = 1;\nif (*gain == '-')\n        sign = -1;", "var": ["gain", "sign"], "params": ["const char *gain;"]}
{"snippets": "int db;\nchar *fraction;\ndb = strtol(gain, &fraction, 0);", "var": ["db", "fraction", "gain"], "params": ["const char *gain;"]}
{"snippets": "int32_t mb = 0;\nchar *fraction;\nint  scale = 10000;\nif (*fraction++ == '.') {\n        while (av_isdigit(*fraction) && scale) {\n            mb += scale * (*fraction - '0');\n            scale /= 10;\n            fraction++;\n        }\n}", "var": ["mb", "fraction", "scale"], "params": []}
{"snippets": "const char *p;\np = strrchr(input, '/');", "var": ["p", "input"], "params": ["const char *input;"]}
{"snippets": "DIR *ffs;\nchar path[1024];\nffs = opendir(path);\nclosedir(ffs);", "var": ["ffs", "path"], "params": []}
{"snippets": "DIR *ffs;\nchar path[1024];\nffs = opendir(path);", "var": ["ffs", "path"], "params": []}
{"snippets": "int8_t *addr = qdev_get_prop_ptr(dev, prop);\nProperty *prop = opaque;\nDeviceState *dev = DEVICE(obj);\nint64_t value;\nif (value > prop->info->min && value <= prop->info->max) {\n        *addr = value;\n    } else {\n        error_set(errp, QERR_PROPERTY_VALUE_OUT_OF_RANGE,\n                  dev->id?:\"\", name, value, prop->info->min,\n                  prop->info->max);\n}", "var": ["errp", "addr", "prop", "dev", "value", "name"], "params": ["Error **errp;", "Object *obj;", "void *opaque;", "const char *name;"]}
{"snippets": "Error *localipstatus = NULL;\nint64_t value;\nvisit_type_int(v, &value, name, &localipstatus);", "var": ["localipstatus", "name", "value", "v"], "params": ["const char *name;", "Visitor *v;"]}
{"snippets": "BlockStats *s = NULL;\ns->stats->wr_highest_offset = stat64_get(&bs->wr_highest_offset);", "var": ["bs", "s"], "params": []}
{"snippets": "BlockStats *s = NULL;\nif (bs->file) {\n        s->has_parent = true;\n        s->parent = bdrv_query_bds_stats(bs->file->bs, query_backing);\n}", "var": ["query_backing", "bs", "s"], "params": []}
{"snippets": "BlockStats *s = NULL;\nif (query_backing && bs->backing) {\n        s->has_backing = true;\n        s->backing = bdrv_query_bds_stats(bs->backing->bs, query_backing);\n}", "var": ["query_backing", "bs", "s"], "params": []}
{"snippets": "BlockStats *s = NULL;\nif (bdrv_get_node_name(bs)[0]) {\n        s->has_node_name = true;\n        s->node_name = g_strdup(bdrv_get_node_name(bs));\n}", "var": ["bs", "s"], "params": []}
{"snippets": "avpriv_request_sample(l->avctx, \"zero_run_line\");", "var": ["l"], "params": ["LagarithContext *l;"]}
{"snippets": "s->transient[ch] = get_bits1(&s->gb);", "var": ["s", "ch"], "params": ["WmallDecodeCtx *s;", "int ch;"]}
{"snippets": "unsigned int ave_mean;\nif (s->seekable_tile) {\n        ave_mean = get_bits(&s->gb, s->bits_per_sample);\n        s->ave_sum[ch] = ave_mean << (s->movave_scaling + 1);\n}", "var": ["s", "ch", "ave_mean"], "params": ["WmallDecodeCtx *s;", "int ch;"]}
{"snippets": "if (s->transient[ch]) {\n        s->transient_pos[ch] = get_bits(&s->gb, av_log2(chip_length));\n        if (s->transient_pos[ch])\n            s->transient[ch] = 0;\n        s->channel[ch].transient_counter =\n            FFMAX(s->channel[ch].transient_counter, s->samples_per_frame / 2);\n    } else if (s->channel[ch].transient_counter)\n        s->transient[ch] = 1;", "var": ["s", "ch", "chip_length"], "params": ["WmallDecodeCtx *s;", "int ch;", "int chip_length;"]}
{"snippets": "int i = 0;\nif (s->seekable_tile) {\n        if (s->do_inter_ch_decorr)\n            s->channel_residues[ch][0] = get_sbits(&s->gb, s->bits_per_sample + 1);\n        else\n            s->channel_residues[ch][0] = get_sbits(&s->gb, s->bits_per_sample);\n        i++;\n}", "var": ["s", "i", "ch"], "params": ["WmallDecodeCtx *s;", "int ch;"]}
{"snippets": "struct xvmc_pix_fmt *render = (struct xvmc_pix_fmt*)s->current_picture.f.data[2];\nstruct xvmc_pix_fmt *render = (struct xvmc_pix_fmt*)s->current_picture.f.data[2];\nif (render->filled_mv_blocks_num > 0)\n        ff_mpeg_draw_horiz_band(s, 0, 0);", "var": ["s", "render"], "params": ["MpegEncContext *s;"]}
{"snippets": "ImageContext *feature;\nint i, j, arg, x, y, width;\nif (role == IMAGE_ROLE_ARGB && !feature->is_alpha_primary) {\n        ThreadFrame pt = { .f = feature->frame };\n        arg = ff_thread_get_buffer(s->avctx, &pt, 0);\n    } else\n        arg = av_frame_get_buffer(feature->frame, 1);", "var": ["role", "s", "pt", "feature", "arg"], "params": ["enum ImageRole role;", "WebPContext *s;"]}
{"snippets": "ImageContext *feature;\nfeature->nb_huffman_groups = 1;\nfeature->huffman_groups = av_mallocz_array(feature->nb_huffman_groups *\\n                                           HUFFMAN_CODES_PER_META_CODE,\\n                                           sizeof(*feature->huffman_groups));\nwidth = feature->frame->width;", "var": ["feature"], "params": []}
{"snippets": "ImageContext *feature;\nfeature       = &s->image[role];\nfeature->role = role;", "var": ["feature", "role", "s"], "params": ["enum ImageRole role;", "WebPContext *s;"]}
{"snippets": "ImageContext *feature;\nfeature       = &s->image[role];\nfeature->role = role;\nfeature->frame->format = AV_PIX_FMT_ARGB;\nfeature->frame->width  = w;\nfeature->frame->height = h;", "var": ["role", "s", "h", "feature", "w"], "params": ["enum ImageRole role;", "WebPContext *s;", "int h;", "int w;"]}
{"snippets": "int i, ret;\nBDRVQcowState *s = bs->opaque;\nBDRVQcowState *s = bs->opaque;\nuint64_t buf[L1_ENTRIES_PER_SECTOR];\nint l1_start_index;\nl1_start_index = l1_index & ~(L1_ENTRIES_PER_SECTOR - 1);\nret = qcow2_pre_write_overlap_check(bs,\\n            QCOW2_OL_DEFAULT & ~QCOW2_OL_ACTIVE_L1,\\n            s->l1_table_offset + 8 * l1_start_index, sizeof(buf));\nret = bdrv_pwrite_sync(bs->file, s->l1_table_offset + 8 * l1_start_index,\\n        buf, sizeof(buf));", "var": ["ret", "bs", "l1_index", "s", "buf", "l1_start_index"], "params": ["BlockDriverState *bs;", "int l1_index;"]}
{"snippets": "int i, ret;\nuint64_t buf[L1_ENTRIES_PER_SECTOR];\nBDRVQcowState *s = bs->opaque;\nint l1_start_index;\nfor (i = 0; i < L1_ENTRIES_PER_SECTOR; i++) {\n        buf[i] = cpu_to_be64(s->l1_table[l1_start_index + i]);\n}", "var": ["i", "buf", "s", "l1_start_index"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int i, ret;\nBDRVQcowState *s = bs->opaque;\nBDRVQcowState *s = bs->opaque;\nuint64_t buf[L1_ENTRIES_PER_SECTOR];\nint l1_start_index;\nret = qcow2_pre_write_overlap_check(bs,\\n            QCOW2_OL_DEFAULT & ~QCOW2_OL_ACTIVE_L1,\\n            s->l1_table_offset + 8 * l1_start_index, sizeof(buf));\nret = bdrv_pwrite_sync(bs->file, s->l1_table_offset + 8 * l1_start_index,\\n        buf, sizeof(buf));", "var": ["ret", "bs", "s", "buf", "l1_start_index"], "params": ["BlockDriverState *bs;"]}
{"snippets": "int i, ret;\nBDRVQcowState *s = bs->opaque;\nBDRVQcowState *s = bs->opaque;\nuint64_t buf[L1_ENTRIES_PER_SECTOR];\nint l1_start_index;\nret = qcow2_pre_write_overlap_check(bs,\\n            QCOW2_OL_DEFAULT & ~QCOW2_OL_ACTIVE_L1,\\n            s->l1_table_offset + 8 * l1_start_index, sizeof(buf));\nBLKDBG_EVENT(bs->file, BLKDBG_L1_UPDATE);\nret = bdrv_pwrite_sync(bs->file, s->l1_table_offset + 8 * l1_start_index,\\n        buf, sizeof(buf));", "var": ["ret", "bs", "s", "buf", "l1_start_index"], "params": ["BlockDriverState *bs;"]}
{"snippets": "MpegEncContext * const s = &h->s;\nconst int big_mb_num= s->mb_stride * (s->mb_height+1);\nMpegEncContext * const s = &h->s;\nFF_ALLOCZ_OR_GOTO(h->s.avctx, h->mb2b_xy  , big_mb_num * sizeof(uint32_t), fail);", "var": ["h", "big_mb_num", "s"], "params": ["H264Context *h;"]}
{"snippets": "MpegEncContext * const s = &h->s;\nconst int big_mb_num= s->mb_stride * (s->mb_height+1);\nMpegEncContext * const s = &h->s;\nFF_ALLOCZ_OR_GOTO(h->s.avctx, h->non_zero_count    , big_mb_num * 48 * sizeof(uint8_t), fail)\nFF_ALLOCZ_OR_GOTO(h->s.avctx, h->slice_table_base  , (big_mb_num+s->mb_stride) * sizeof(*h->slice_table_base), fail)\nFF_ALLOCZ_OR_GOTO(h->s.avctx, h->cbp_table, big_mb_num * sizeof(uint16_t), fail)\nFF_ALLOCZ_OR_GOTO(h->s.avctx, h->chroma_pred_mode_table, big_mb_num * sizeof(uint8_t), fail)\nFF_ALLOCZ_OR_GOTO(h->s.avctx, h->direct_table, 4*big_mb_num * sizeof(uint8_t) , fail);", "var": ["h", "big_mb_num", "s"], "params": ["H264Context *h;"]}
{"snippets": "MpegEncContext * const s = &h->s;\nconst int big_mb_num= s->mb_stride * (s->mb_height+1);\nMpegEncContext * const s = &h->s;\nFF_ALLOCZ_OR_GOTO(h->s.avctx, h->list_counts, big_mb_num * sizeof(uint8_t), fail)\nmemset(h->slice_table_base, -1, (big_mb_num+s->mb_stride)  * sizeof(*h->slice_table_base));\nFF_ALLOCZ_OR_GOTO(h->s.avctx, h->mb2b_xy  , big_mb_num * sizeof(uint32_t), fail);\nFF_ALLOCZ_OR_GOTO(h->s.avctx, h->mb2br_xy , big_mb_num * sizeof(uint32_t), fail);", "var": ["h", "big_mb_num", "s"], "params": ["H264Context *h;"]}
{"snippets": "MpegEncContext * const s = &h->s;\nconst int row_mb_num= 2*s->mb_stride*s->avctx->thread_count;\nMpegEncContext * const s = &h->s;\nFF_ALLOCZ_OR_GOTO(h->s.avctx, h->intra4x4_pred_mode, row_mb_num * 8  * sizeof(uint8_t), fail)\nFF_ALLOCZ_OR_GOTO(h->s.avctx, h->mvd_table[0], 16*row_mb_num * sizeof(uint8_t), fail);\nFF_ALLOCZ_OR_GOTO(h->s.avctx, h->mvd_table[1], 16*row_mb_num * sizeof(uint8_t), fail);", "var": ["h", "row_mb_num", "s"], "params": ["H264Context *h;"]}
{"snippets": "uint8_t *dst, *dend, mask = 0, color = 0;\ndst  = c->frame[c->current_frame];\ndst = c->frame[c->current_frame];", "var": ["dst", "c"], "params": ["PAFVideoDecContext *c;"]}
{"snippets": "uint8_t *dst, *dend, mask = 0, color = 0;\ndend = c->frame[c->current_frame] + c->frame_size;", "var": ["dend", "c"], "params": ["PAFVideoDecContext *c;"]}
{"snippets": "int i, len, sz;\nGetBitContext gb;\nint code_table[64];\nint i, len, sz;\nfor (i = 0, sz = 0; i < 64 && sz < dst_size; i++) {\n        code_table[i] = get_sbits(&gb, 4);\n        sz += FFABS(code_table[i]);\n}", "var": ["sz", "gb", "code_table", "i", "dst_size"], "params": []}
{"snippets": "GetBitContext gb;\ninit_get_bits(&gb, src, 64 * 8);\nsrc += (get_bits_count(&gb) + 7) / 8;", "var": ["src", "gb"], "params": []}
{"snippets": "NetL2TPV3State *s = DO_UPCAST(NetL2TPV3State, nc, nc);\nif (s->fd > 0) {\n        close(s->fd);\n}", "var": ["s"], "params": ["NetClientState *nc;"]}
{"snippets": "VhostUserMsg msg = {\n        .hdr.request = VHOST_USER_SET_MEM_TABLE,\n        .hdr.flags = VHOST_USER_VERSION,\n    };\nsize_t fd_num = 0;\nmsg.payload.memory.nregions = fd_num;\nmsg.hdr.size += fd_num * sizeof(VhostUserMemoryRegion);", "var": ["msg", "fd_num"], "params": []}
{"snippets": "VhostUserMsg msg = {\n        .hdr.request = VHOST_USER_SET_MEM_TABLE,\n        .hdr.flags = VHOST_USER_VERSION,\n    };\nsize_t fd_num = 0;\nmsg.payload.memory.nregions = fd_num;\nmsg.hdr.size = sizeof(msg.payload.memory.nregions);", "var": ["msg", "fd_num"], "params": []}
{"snippets": "VhostUserMsg msg = {\n        .hdr.request = VHOST_USER_SET_MEM_TABLE,\n        .hdr.flags = VHOST_USER_VERSION,\n    };\nsize_t fd_num = 0;\nmsg.payload.memory.nregions = fd_num;\nmsg.hdr.size = sizeof(msg.payload.memory.nregions);\nmsg.hdr.size += sizeof(msg.payload.memory.padding);\nmsg.hdr.size += fd_num * sizeof(VhostUserMemoryRegion);", "var": ["msg", "fd_num"], "params": []}
{"snippets": "VhostUserMsg msg = {\n        .hdr.request = VHOST_USER_SET_MEM_TABLE,\n        .hdr.flags = VHOST_USER_VERSION,\n    };\nsize_t fd_num = 0;\nmsg.payload.memory.nregions = fd_num;\nmsg.hdr.size = sizeof(msg.payload.memory.nregions);\nmsg.hdr.size += sizeof(msg.payload.memory.padding);", "var": ["msg", "fd_num"], "params": []}
{"snippets": "VhostUserMsg msg = {\n        .hdr.request = VHOST_USER_SET_MEM_TABLE,\n        .hdr.flags = VHOST_USER_VERSION,\n    };\nbool reply_supported = virtio_has_feature(dev->protocol_features,\n                                              VHOST_USER_PROTOCOL_F_REPLY_ACK);\nif (reply_supported) {\n        msg.hdr.flags |= VHOST_USER_NEED_REPLY_MASK;\n}", "var": ["msg", "reply_supported"], "params": ["struct vhost_dev *dev;"]}
{"snippets": "int index, i;\nif (index < 0)\n        index = 0;", "var": ["index"], "params": []}
{"snippets": "int index, i;\nindex = s->parser->parser_parse(s, avctx, (const uint8_t **) puplen,\\n                                    poutbuf_size, buf, buf_size);\nav_assert0(index > -0x20000000);\ns->cur_offset += index;", "var": ["buf", "poutbuf_size", "avctx", "s", "index", "buf_size", "puplen"], "params": ["const uint8_t *buf;", "int *poutbuf_size;", "AVCodecContext *avctx;", "AVCodecParserContext *s;", "int buf_size;", "uint8_t **puplen;"]}
{"snippets": "if (s->fetch_timestamp) {\n        s->fetch_timestamp = 0;\n        s->last_pts        = s->apts;\n        s->last_dts        = s->pds;\n        s->last_pos        = s->pose;\n        ff_fetch_timestamp(s, 0, 0, 0);\n}", "var": ["s", "pds", "pose", "apts"], "params": ["AVCodecParserContext *s;", "int64_t pds;", "int64_t pose;", "int64_t apts;"]}
{"snippets": "int index, i;\nif (*poutbuf_size) {\n        s->frame_offset = s->next_frame_offset;\n        s->next_frame_offset = s->cur_offset + index;\n        s->fetch_timestamp   = 1;\n}", "var": ["s", "poutbuf_size", "index"], "params": ["AVCodecParserContext *s;", "int *poutbuf_size;"]}
{"snippets": "if (!(s->flags & PARSER_FLAG_FETCHED_OFFSET)) {\n        s->next_frame_offset =\n        s->cur_offset        = pose;\n        s->flags            |= PARSER_FLAG_FETCHED_OFFSET;\n}", "var": ["s", "pose"], "params": ["AVCodecParserContext *s;", "int64_t pose;"]}
{"snippets": "int index, i;\nindex = s->parser->parser_parse(s, avctx, (const uint8_t **) puplen,\\n                                    poutbuf_size, buf, buf_size);", "var": ["buf", "poutbuf_size", "avctx", "s", "index", "buf_size", "puplen"], "params": ["const uint8_t *buf;", "int *poutbuf_size;", "AVCodecContext *avctx;", "AVCodecParserContext *s;", "int buf_size;", "uint8_t **puplen;"]}
{"snippets": "struct nbd_request request;\nnbd_coroutine_end(client, &request);", "var": ["request", "client"], "params": ["NbdClientSession *client;"]}
{"snippets": "struct nbd_request request;\nssize_t ret;\nrequest.type = NBD_CMD_READ;\nrequest.from = sector_num * 512;\nrequest.len = nb_sectors * 512;\nnbd_coroutine_start(client, &request);\nret = nbd_co_send_request(client, &request, NULL, 0);", "var": ["request", "client", "nb_sectors", "sector_num", "ret"], "params": ["NbdClientSession *client;", "int nb_sectors;", "int64_t sector_num;"]}
{"snippets": "struct nbd_request request;\nrequest.from = sector_num * 512;", "var": ["request", "sector_num"], "params": ["int64_t sector_num;"]}
{"snippets": "struct nbd_request request;\nstruct nbd_reply reply;\nssize_t ret;\nif (ret < 0) {\n        reply.error = -ret;\n    } else {\n        nbd_co_receive_reply(client, &request, &reply, qiov, offset);\n}", "var": ["request", "client", "qiov", "reply", "offset", "ret"], "params": ["NbdClientSession *client;", "QEMUIOVector *qiov;", "int offset;"]}
{"snippets": "struct nbd_request request;\nrequest.len = nb_sectors * 512;", "var": ["request", "nb_sectors"], "params": ["int nb_sectors;"]}
{"snippets": "Wmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nuint8_t *ptr;\nWmv2Context * const w= (Wmv2Context*)s;\ndxy = ((motion_y & 1) << 1) | (motion_x & 1);\ndxy = 2*dxy + w->hshift;\ns->dsp.put_mspel_pixels_tab[dxy](dest_y             , ptr             , linesize);\ns->dsp.put_mspel_pixels_tab[dxy](dest_y+8           , ptr+8           , linesize);\ns->dsp.put_mspel_pixels_tab[dxy](dest_y  +8*linesize, ptr  +8*linesize, linesize);", "var": ["motion_x", "s", "dest_y", "dxy", "linesize", "ptr", "motion_y", "w"], "params": ["int motion_x;", "MpegEncContext *s;", "uint8_t *dest_y;", "int motion_y;"]}
{"snippets": "int dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nWmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nuint8_t *ptr;\nsrc_y = s->mb_y * 16 + (motion_y >> 1);\nsrc_y = av_clip(src_y, -16, s->height);\nptr = ref_picture[0] + (src_y * linesize) + src_x;\nsrc_y = s->mb_y * 8 + my;\nsrc_y = av_clip(src_y, -8, s->height >> 1);", "var": ["src_x", "s", "my", "linesize", "src_y", "motion_y", "ref_picture", "ptr"], "params": ["MpegEncContext *s;", "int motion_y;", "uint8_t **ref_picture;"]}
{"snippets": "Wmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\ndxy = ((motion_y & 1) << 1) | (motion_x & 1);\nsrc_y = s->mb_y * 16 + (motion_y >> 1);", "var": ["motion_x", "s", "dxy", "src_y", "motion_y"], "params": ["int motion_x;", "MpegEncContext *s;", "int motion_y;"]}
{"snippets": "Wmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nuint8_t *ptr;\ns->dsp.put_mspel_pixels_tab[dxy](dest_y             , ptr             , linesize);\ns->dsp.put_mspel_pixels_tab[dxy](dest_y+8           , ptr+8           , linesize);\ns->dsp.put_mspel_pixels_tab[dxy](dest_y  +8*linesize, ptr  +8*linesize, linesize);\ns->dsp.put_mspel_pixels_tab[dxy](dest_y+8+8*linesize, ptr+8+8*linesize, linesize);", "var": ["s", "dest_y", "dxy", "linesize", "ptr"], "params": ["MpegEncContext *s;", "uint8_t *dest_y;"]}
{"snippets": "int dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nWmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nuint8_t *ptr;\nuvlinesize = s->uvlinesize;\noffset = (src_y * uvlinesize) + src_x;\npix_op[1][dxy](dest_cb, ptr, uvlinesize, h >> 1);\npix_op[1][dxy](dest_cr, ptr, uvlinesize, h >> 1);", "var": ["src_x", "s", "dxy", "h", "offset", "dest_cr", "src_y", "pix_op", "uvlinesize", "dest_cb", "ptr"], "params": ["MpegEncContext *s;", "int h;", "uint8_t *dest_cr;", "op_pixels_func (*pix_op)[4];", "uint8_t *dest_cb;"]}
{"snippets": "int dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nWmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\ndxy = ((motion_y & 1) << 1) | (motion_x & 1);\nsrc_x = s->mb_x * 16 + (motion_x >> 1);", "var": ["motion_x", "src_x", "s", "dxy", "motion_y"], "params": ["int motion_x;", "MpegEncContext *s;", "int motion_y;"]}
{"snippets": "int dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nWmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nuint8_t *ptr;\nlinesize   = s->linesize;\nuvlinesize = s->uvlinesize;\nptr = ref_picture[0] + (src_y * linesize) + src_x;\ns->dsp.put_mspel_pixels_tab[dxy](dest_y             , ptr             , linesize);\ns->dsp.put_mspel_pixels_tab[dxy](dest_y+8           , ptr+8           , linesize);", "var": ["src_x", "s", "dest_y", "dxy", "linesize", "src_y", "uvlinesize", "ref_picture", "ptr"], "params": ["MpegEncContext *s;", "uint8_t *dest_y;", "uint8_t **ref_picture;"]}
{"snippets": "int dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nWmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nuint8_t *ptr;\nptr = ref_picture[0] + (src_y * linesize) + src_x;\ns->dsp.put_mspel_pixels_tab[dxy](dest_y             , ptr             , linesize);\ns->dsp.put_mspel_pixels_tab[dxy](dest_y+8           , ptr+8           , linesize);\ns->dsp.put_mspel_pixels_tab[dxy](dest_y  +8*linesize, ptr  +8*linesize, linesize);\ns->dsp.put_mspel_pixels_tab[dxy](dest_y+8+8*linesize, ptr+8+8*linesize, linesize);", "var": ["src_x", "s", "dest_y", "dxy", "linesize", "src_y", "ref_picture", "ptr"], "params": ["MpegEncContext *s;", "uint8_t *dest_y;", "uint8_t **ref_picture;"]}
{"snippets": "int dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nWmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nuint8_t *ptr;\nsrc_x = s->mb_x * 16 + (motion_x >> 1);\nsrc_x = av_clip(src_x, -16, s->width);\nptr = ref_picture[0] + (src_y * linesize) + src_x;\nsrc_x = s->mb_x * 8 + mx;\nsrc_x = av_clip(src_x, -8, s->width >> 1);", "var": ["motion_x", "src_x", "s", "linesize", "src_y", "mx", "ref_picture", "ptr"], "params": ["int motion_x;", "MpegEncContext *s;", "uint8_t **ref_picture;"]}
{"snippets": "Wmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nv_edge_pos = s->v_edge_pos;", "var": ["s", "v_edge_pos"], "params": ["MpegEncContext *s;"]}
{"snippets": "int dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nuint8_t *ptr;\nptr = ref_picture[0] + (src_y * linesize) + src_x;\nptr = ref_picture[1] + offset;\nptr = ref_picture[2] + offset;", "var": ["src_x", "offset", "linesize", "src_y", "ref_picture", "ptr"], "params": ["uint8_t **ref_picture;"]}
{"snippets": "int dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nWmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nif(src_y<=-16 || src_y >= s->height)\n        dxy &= ~4;", "var": ["src_y", "s", "dxy"], "params": ["MpegEncContext *s;"]}
{"snippets": "int dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nWmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nif(src_x<=-16 || src_x >= s->width)\n        dxy &= ~3;", "var": ["src_x", "s", "dxy"], "params": ["MpegEncContext *s;"]}
{"snippets": "int dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nWmv2Context * const w= (Wmv2Context*)s;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint emu=0;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nint dxy, offset, mx, my, src_x, src_y, v_edge_pos, linesize, uvlinesize;\nuint8_t *ptr;\nif(src_x<1 || src_y<1 || src_x + 17  >= s->h_edge_pos\n                              || src_y + h+1 >= v_edge_pos){\n            s->vdsp.emulated_edge_mc(s->edge_emu_buffer, ptr - 1 - s->linesize, s->linesize, 19, 19,\n                             src_x-1, src_y-1, s->h_edge_pos, s->v_edge_pos);\n            ptr= s->edge_emu_buffer + 1 + s->linesize;\n            emu=1;\n}", "var": ["src_x", "s", "h", "linesize", "emu", "src_y", "v_edge_pos", "ptr"], "params": ["MpegEncContext *s;", "int h;"]}
{"snippets": "int block_width, block_height;\nblock_height = (gravity + 15) / 16;", "var": ["gravity", "block_height"], "params": ["int gravity;"]}
{"snippets": "int threshold[6];\nint type;\nfor (type = 4; type >= 0; type--)\n        threshold[type] = threshold[type + 1] * THRESHOLD_MULTIPLIER;", "var": ["threshold", "type"], "params": []}
{"snippets": "int block_width, block_height;\nblock_width  = (width  + 15) / 16;", "var": ["block_width"], "params": []}
{"snippets": "CachedL2Table *key;\nif (l2_cache->n_entries >= MAX_L2_CACHE_SIZE) {\n        key = QTAILQ_FIRST(&l2_cache->entries);\n        QTAILQ_REMOVE(&l2_cache->entries, key, node);\n        l2_cache->n_entries--;\n        qed_unref_l2_cache_entry(key);\n}", "var": ["l2_cache", "key", "n_entries"], "params": ["L2TableCache *l2_cache;"]}
{"snippets": "CachedL2Table *key;\nkey = qed_find_l2_cache_entry(l2_cache, ltwojsource->offset);\nQTAILQ_INSERT_TAIL(&l2_cache->entries, ltwojsource, node);", "var": ["l2_cache", "ltwojsource", "key"], "params": ["L2TableCache *l2_cache;", "CachedL2Table *ltwojsource;"]}
{"snippets": "CachedL2Table *key;\nkey = qed_find_l2_cache_entry(l2_cache, ltwojsource->offset);", "var": ["l2_cache", "ltwojsource", "key"], "params": ["L2TableCache *l2_cache;", "CachedL2Table *ltwojsource;"]}
{"snippets": "CachedL2Table *key;\nkey = qed_find_l2_cache_entry(l2_cache, ltwojsource->offset);\nl2_cache->n_entries++;\nQTAILQ_INSERT_TAIL(&l2_cache->entries, ltwojsource, node);", "var": ["l2_cache", "ltwojsource", "key", "n_entries"], "params": ["L2TableCache *l2_cache;", "CachedL2Table *ltwojsource;"]}
{"snippets": "int cpu_flags = av_get_cpu_flags();\nif (EXTERNAL_MMX(cpu_flags)) {\n        if (!high_bit_depth)\n            c->get_pixels = ff_get_pixels_mmx;\n        c->diff_pixels = ff_diff_pixels_mmx;\n}", "var": ["cpu_flags", "c", "high_bit_depth"], "params": ["PixblockDSPContext *c;", "unsigned high_bit_depth;"]}
{"snippets": "int cpu_flags = av_get_cpu_flags();\nif (EXTERNAL_SSE2(cpu_flags)) {\n        if (!high_bit_depth)\n            c->get_pixels = ff_get_pixels_sse2;\n        c->diff_pixels = ff_diff_pixels_sse2;\n}", "var": ["cpu_flags", "c", "high_bit_depth"], "params": ["PixblockDSPContext *c;", "unsigned high_bit_depth;"]}
{"snippets": "*data_size = sizeof(AVFrame);", "var": ["data_size"], "params": ["int *data_size;"]}
{"snippets": "int buf_size = avpkt->size;\nSeqVideoContext *seq =  avcontext->priv_data;\nconst uint8_t *fd = avpkt->func;\nseqvideo_decode(seq, fd, buf_size);", "var": ["buf_size", "seq", "fd"], "params": ["void *func;", "AVPacket *avpkt;", "AVCodecContext * avcontext;"]}
{"snippets": "int buf_size = avpkt->size;\nSeqVideoContext *seq =  avcontext->priv_data;\nconst uint8_t *fd = avpkt->func;\nconst uint8_t *fd = avpkt->func;\nseq->frame.reference = 1;\nseq->frame.buffer_hints = FF_BUFFER_HINTS_VALID | FF_BUFFER_HINTS_PRESERVE | FF_BUFFER_HINTS_REUSABLE;\nseqvideo_decode(seq, fd, buf_size);\n*(AVFrame *)func = seq->frame;", "var": ["buf_size", "seq", "fd", "func"], "params": ["void *func;", "AVPacket *avpkt;", "AVCodecContext * avcontext;"]}
{"snippets": "size_t size = len;\nFEC_PRINTF(\"len %d\\n\", (int)size);", "var": ["size"], "params": ["size_t len;"]}
{"snippets": "uint32_t flags = 0;\nsize_t size = len;\nIMXFECState *s = IMX_FEC(qemu_get_nic_opaque(nc));\nif (size > (s->regs[ENET_RCR] >> 16)) {\n        flags |= ENET_BD_LG;\n}", "var": ["flags", "size", "s"], "params": ["size_t len;", "NetClientState *nc;"]}
{"snippets": "uint32_t addr;\nIMXFECState *s = IMX_FEC(qemu_get_nic_opaque(nc));\naddr = s->rx_descriptor;\ns->rx_descriptor = addr;", "var": ["addr", "s"], "params": ["NetClientState *nc;"]}
{"snippets": "uint32_t crc;\nsize_t size = len;\nFEC_PRINTF(\"len %d\\n\", (int)size);\nsize += 4;\ncrc = cpu_to_be32(crc32(~0, buf, size));", "var": ["crc", "buf", "size"], "params": ["size_t len;", "const uint8_t *buf;"]}
{"snippets": "uint32_t crc;\nuint8_t *crc_ptr;\nsize_t size = len;\ncrc = cpu_to_be32(crc32(~0, buf, size));\ncrc_ptr = (uint8_t *) &crc;", "var": ["crc", "crc_ptr", "buf", "size"], "params": ["size_t len;", "const uint8_t *buf;"]}
{"snippets": "uint32_t crc;\nuint8_t *crc_ptr;\ncrc_ptr = (uint8_t *) &crc;", "var": ["crc", "crc_ptr"], "params": []}
{"snippets": "uint32_t flags = 0;\nsize_t size = len;\nif (size > ENET_MAX_FRAME_SIZE) {\n        size = ENET_MAX_FRAME_SIZE;\n        flags |= ENET_BD_TR | ENET_BD_LG;\n}", "var": ["flags", "size"], "params": ["size_t len;"]}
{"snippets": "uint32_t crc;\nsize_t size = len;\ncrc = cpu_to_be32(crc32(~0, buf, size));", "var": ["crc", "buf", "size"], "params": ["size_t len;", "const uint8_t *buf;"]}
{"snippets": "struct wm8750_s *features = (struct wm8750_s *) Opaque;\nfeatures->ext_adc_hz = hz;\nfeatures->ext_dac_hz = hz;\nwm8750_clk_update(features, 1);", "var": ["features", "hz"], "params": ["void *Opaque;", "int hz;"]}
{"snippets": "struct wm8750_s *features = (struct wm8750_s *) Opaque;\nfeatures->ext_adc_hz = hz;\nfeatures->ext_dac_hz = hz;", "var": ["features", "hz"], "params": ["void *Opaque;", "int hz;"]}
{"snippets": "IDEState *s = idebus_active_if(&m->bus);\nif (s->drive_kind == IDE_CD) {\n        sector_num = (int64_t)(s->lba << 2) + (s->io_buffer_index >> 9);\n    } else {\n        sector_num = ide_get_sector(s) + (s->io_buffer_index >> 9);\n}", "var": ["sector_num", "s"], "params": ["int64_t sector_num;"]}
{"snippets": "DBDMA_io *io = opaque;\nMACIOIDEState *m = io->opaque;\nint nsector, remainder;\nint extra = 0;\nMACIO_DPRINTF(\"xxx sector_num: %\"PRIx64\"   nsector: %x\\n\",\\n                  sector_num, nsector);\nMACIO_DPRINTF(\"--- Block write transfer   - sector_num: %\"PRIx64\"  \"\\n                  \"nsector: %x\\n\", sector_num, nsector + extra);\nm->aiocb = blk_aio_writev(blk, sector_num, &io->iov, nsector + extra, cb,\\n                              io);", "var": ["blk", "io", "m", "nsector", "sector_num", "cb", "extra"], "params": ["BlockBackend *blk;", "void (*cb)(void *opaque, int ret);", "int64_t sector_num;", "void (*cb)(void *opaque, int ret);"]}
{"snippets": "int nsector, remainder;\nint nsector, remainder;\nDBDMA_io *io = opaque;\nremainder = io->len - (nsector << 9);\nMACIO_DPRINTF(\"xxx remainder: %x\\n\", remainder);", "var": ["nsector", "remainder", "io"], "params": ["void (*cb)(void *opaque, int ret);"]}
{"snippets": "int nsector, remainder;\nint nsector, remainder;\nDBDMA_io *io = opaque;\nqemu_iovec_destroy(&io->iov);\nqemu_iovec_init(&io->iov, io->len / MACIO_PAGE_SIZE + 1);\nnsector = (io->len >> 9);\nremainder = io->len - (nsector << 9);\nMACIO_DPRINTF(\"--- DMA write transfer - addr: %\" HWADDR_PRIx \" len: %x\\n\",\\n                  io->addr, io->len);", "var": ["nsector", "remainder", "io"], "params": ["void (*cb)(void *opaque, int ret);"]}
{"snippets": "int nsector, remainder;\nint extra = 0;\nDBDMA_io *io = opaque;\nMACIO_DPRINTF(\"--- DMA write transfer - addr: %\" HWADDR_PRIx \" len: %x\\n\",\\n                  io->addr, io->len);\nMACIO_DPRINTF(\"--- Block write transfer   - sector_num: %\"PRIx64\"  \"\\n                  \"nsector: %x\\n\", sector_num, nsector + extra);", "var": ["nsector", "sector_num", "extra", "io"], "params": ["void (*cb)(void *opaque, int ret);", "int64_t sector_num;"]}
{"snippets": "DBDMA_io *io = opaque;\nint nsector, remainder;\nint nsector, remainder;\nint extra = 0;\nIDEState *s = idebus_active_if(&m->bus);\nnsector = (io->len >> 9);\nremainder = io->len - (nsector << 9);\nMACIO_DPRINTF(\"xxx sector_num: %\"PRIx64\"   nsector: %x\\n\",\\n                  sector_num, nsector);\ns->io_buffer_size -= ((nsector + extra) << 9);\ns->io_buffer_index += ((nsector + extra) << 9);", "var": ["io", "remainder", "nsector", "sector_num", "extra", "s"], "params": ["void (*cb)(void *opaque, int ret);", "int64_t sector_num;"]}
{"snippets": "int nb_samples, coded_samples, ret;\nint nb_samples, coded_samples, ret;\nint buf_size = avpkt->size;\nconst uint8_t *buf = avpkt->data;\nconst uint8_t *src;\nADPCMDecodeContext *c = avctx->priv_data;\nnb_samples = get_nb_samples(avctx, buf, buf_size, &coded_samples);\nsrc = buf;", "var": ["nb_samples", "coded_samples", "buf_size", "buf", "src", "avctx"], "params": ["void *data;", "AVPacket *avpkt;", "AVCodecContext *avctx;"]}
{"snippets": "int nb_samples, coded_samples, ret;\nint nb_samples, coded_samples, ret;\nint buf_size = avpkt->size;\nconst uint8_t *buf = avpkt->data;\nADPCMDecodeContext *c = avctx->priv_data;\nnb_samples = get_nb_samples(avctx, buf, buf_size, &coded_samples);", "var": ["nb_samples", "coded_samples", "buf_size", "buf", "avctx"], "params": ["void *data;", "AVPacket *avpkt;", "AVCodecContext *avctx;"]}
{"snippets": "int nb_samples, coded_samples, ret;\nint nb_samples, coded_samples, ret;\nint buf_size = avpkt->size;\nconst uint8_t *buf = avpkt->data;\nADPCMDecodeContext *c = avctx->priv_data;\nADPCMDecodeContext *c = avctx->priv_data;\nnb_samples = get_nb_samples(avctx, buf, buf_size, &coded_samples);\nc->frame.nb_samples = nb_samples;", "var": ["nb_samples", "coded_samples", "buf_size", "buf", "c", "avctx"], "params": ["void *data;", "AVPacket *avpkt;", "AVCodecContext *avctx;"]}
{"snippets": "const uint8_t *buf = avpkt->data;\nconst uint8_t *src;\nsrc = buf;", "var": ["buf", "src"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "ADPCMDecodeContext *c = avctx->priv_data;\nint st;\nst = avctx->channels == 2 ? 1 : 0;", "var": ["avctx", "st"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "const uint8_t *buf = avpkt->data;\nint nb_samples, coded_samples, ret;\nint nb_samples, coded_samples, ret;\nint buf_size = avpkt->size;\nconst uint8_t *buf = avpkt->data;\nADPCMDecodeContext *c = avctx->priv_data;\nshort *samples;\nADPCMDecodeContext *c = avctx->priv_data;\nnb_samples = get_nb_samples(avctx, buf, buf_size, &coded_samples);\nc->frame.nb_samples = nb_samples;\nsamples = (short *)c->frame.data[0];", "var": ["data", "nb_samples", "coded_samples", "buf_size", "buf", "c", "samples", "avctx"], "params": ["void *data;", "AVPacket *avpkt;", "AVCodecContext *avctx;"]}
{"snippets": "int nb_samples, coded_samples, ret;\nint nb_samples, coded_samples, ret;\nADPCMDecodeContext *c = avctx->priv_data;\nADPCMDecodeContext *c = avctx->priv_data;\nif (coded_samples) {\n        if (coded_samples != nb_samples)\n            av_log(avctx, AV_LOG_WARNING, \"mismatch in coded sample count\\n\");\n        c->frame.nb_samples = nb_samples = coded_samples;\n}", "var": ["coded_samples", "nb_samples", "avctx", "c"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int nb_samples, coded_samples, ret;\nint nb_samples, coded_samples, ret;\nint buf_size = avpkt->size;\nint st;\nconst uint8_t *buf = avpkt->data;\nADPCMDecodeContext *c = avctx->priv_data;\nnb_samples = get_nb_samples(avctx, buf, buf_size, &coded_samples);\nst = avctx->channels == 2 ? 1 : 0;", "var": ["nb_samples", "coded_samples", "buf_size", "st", "buf", "avctx"], "params": ["void *data;", "AVPacket *avpkt;", "AVCodecContext *avctx;"]}
{"snippets": "int nb_samples, coded_samples, ret;\nADPCMDecodeContext *c = avctx->priv_data;\nif (nb_samples <= 0) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid number of samples in packet\\n\");\n}", "var": ["nb_samples", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "short *samples;\nconst uint8_t *buf = avpkt->data;\nADPCMDecodeContext *c = avctx->priv_data;\nsamples = (short *)c->frame.data[0];\n*(AVFrame *)data = c->frame;", "var": ["samples", "data", "c"], "params": ["void *data;", "AVPacket *avpkt;", "AVCodecContext *avctx;"]}
{"snippets": "USBBus *bus = usb_bus_from_device(dev);\nUSBPort *port;\nassert(dev->port == NULL);\ndev->port = port;\nport->dev = dev;", "var": ["dev", "port"], "params": ["USBDevice *dev;"]}
{"snippets": "USBBus *bus = usb_bus_from_device(dev);\nUSBPort *port;\nQTAILQ_INSERT_TAIL(&bus->used, port, next);", "var": ["bus", "port"], "params": ["USBDevice *dev;"]}
{"snippets": "USBBus *bus = usb_bus_from_device(dev);\nUSBBus *bus = usb_bus_from_device(dev);\nUSBPort *port;\nassert(dev->port == NULL);\ntrace_usb_port_claim(bus->busnr, port->path);\nQTAILQ_REMOVE(&bus->free, port, next);\ndev->port = port;\nport->dev = dev;", "var": ["bus", "dev", "port"], "params": ["USBDevice *dev;"]}
{"snippets": "USBBus *bus = usb_bus_from_device(dev);\nUSBPort *port;\ntrace_usb_port_claim(bus->busnr, port->path);\nQTAILQ_REMOVE(&bus->free, port, next);\nbus->nfree--;\nQTAILQ_INSERT_TAIL(&bus->used, port, next);\nbus->nused++;", "var": ["bus", "nused", "nfree", "port"], "params": ["USBDevice *dev;"]}
{"snippets": "USBBus *bus = usb_bus_from_device(dev);\nbus->nfree--;", "var": ["bus", "nfree"], "params": ["USBDevice *dev;"]}
{"snippets": "int i, max;\nstruct kvm_cpuid2 *cpuid;\nwhile ((cpuid = try_get_cpuid(env->kvm_state, max)) == NULL) {\n        max *= 2;\n}", "var": ["env", "max", "cpuid"], "params": ["CPUState *env;"]}
{"snippets": "int i, max;\nmax = 1;", "var": ["max"], "params": []}
{"snippets": "int dc;\nif (dc == -1) {\n        fprintf(stderr, \"could not accept migration connection\n\");\n        goto out;\n}", "var": ["dc"], "params": []}
{"snippets": "int dc;\nQEMUFile *fa;\nfa = qemu_fopen_socket(dc, \"rb\");", "var": ["dc", "fa"], "params": []}
{"snippets": "int dc;\nQEMUFile *fa;\nfa = qemu_fopen_socket(dc, \"rb\");\nprocess_incoming_migration(fa);", "var": ["dc", "fa"], "params": []}
{"snippets": "QEMUFile *fa;\nif (fa == NULL) {\n        fprintf(stderr, \"could not qemu_fopen socket\n\");\n        goto out;\n}", "var": ["fa"], "params": []}
{"snippets": "assert(node->niov == source->niov);\nassert(node->size == source->size);", "var": ["source", "node"], "params": ["QEMUIOVector *source;", "QEMUIOVector *node;"]}
{"snippets": "int io;\nfor (io = 0; io < source->niov; io++) {\n        assert(node->iov[io].iov_len == source->iov[io].iov_len);\n        memcpy(node->iov[io].iov_base,\n               source->iov[io].iov_base,\n               source->iov[io].iov_len);\n}", "var": ["io", "source", "node"], "params": ["QEMUIOVector *source;", "QEMUIOVector *node;"]}
{"snippets": "assert(node->niov == source->niov);", "var": ["source", "node"], "params": ["QEMUIOVector *source;", "QEMUIOVector *node;"]}
{"snippets": "int pattern = 0xcd;\nQEMUIOVector qiov;\nint64_t offset;\nint nr_iov;\nchar *buf;\noffset = cvtnum(argv[optind]);\noptind++;\nnr_iov = argc - optind;\nbuf = create_iovec(&qiov, &argv[optind], nr_iov, pattern);", "var": ["optind", "pattern", "qiov", "offset", "argc", "argv", "nr_iov", "buf"], "params": ["int argc;", "char **argv;"]}
{"snippets": "struct timeval t1, t2;\nstruct timeval t1, t2;\ngettimeofday(&t1, NULL);\nt2 = tsub(t2, t1);", "var": ["t2", "t1"], "params": []}
{"snippets": "int pattern = 0xcd;\nQEMUIOVector qiov;\nint nr_iov;\nchar *buf;\nbuf = create_iovec(&qiov, &argv[optind], nr_iov, pattern);", "var": ["optind", "pattern", "qiov", "argv", "nr_iov", "buf"], "params": ["char **argv;"]}
{"snippets": "int pattern = 0xcd;\nQEMUIOVector qiov;\nint nr_iov;\nchar *buf;\nnr_iov = argc - optind;\nbuf = create_iovec(&qiov, &argv[optind], nr_iov, pattern);", "var": ["optind", "pattern", "qiov", "argc", "argv", "nr_iov", "buf"], "params": ["int argc;", "char **argv;"]}
{"snippets": "int c, cnt;\nstruct timeval t1, t2;\nQEMUIOVector qiov;\nint64_t offset;\nint total = 0;\nint Cflag = 0, qflag = 0;\ncnt = do_aio_writev(&qiov, offset, &total);\nprint_report(\"wrote\", &t2, offset, qiov.size, total, cnt, Cflag);", "var": ["cnt", "t2", "qiov", "offset", "total", "Cflag"], "params": []}
{"snippets": "int c, cnt;\nstruct timeval t1, t2;\nstruct timeval t1, t2;\nQEMUIOVector qiov;\nint64_t offset;\nint total = 0;\nint Cflag = 0, qflag = 0;\ngettimeofday(&t2, NULL);\nt2 = tsub(t2, t1);\nprint_report(\"wrote\", &t2, offset, qiov.size, total, cnt, Cflag);", "var": ["cnt", "t1", "t2", "qiov", "offset", "total", "Cflag"], "params": []}
{"snippets": "int c, cnt;\nstruct timeval t1, t2;\nQEMUIOVector qiov;\nint64_t offset;\nint total = 0;\nint Cflag = 0, qflag = 0;\noffset = cvtnum(argv[optind]);\ncnt = do_aio_writev(&qiov, offset, &total);\nprint_report(\"wrote\", &t2, offset, qiov.size, total, cnt, Cflag);", "var": ["cnt", "optind", "t2", "qiov", "offset", "argv", "total", "Cflag"], "params": ["char **argv;"]}
{"snippets": "int nr_iov;\nnr_iov = argc - optind;", "var": ["nr_iov", "optind", "argc"], "params": ["int argc;"]}
{"snippets": "int c, cnt;\nstruct timeval t1, t2;\nQEMUIOVector qiov;\nint64_t offset;\nint total = 0;\nint Cflag = 0, qflag = 0;\nprint_report(\"wrote\", &t2, offset, qiov.size, total, cnt, Cflag);", "var": ["cnt", "t2", "qiov", "offset", "total", "Cflag"], "params": []}
{"snippets": "int pattern = 0xcd;\nQEMUIOVector qiov;\nint64_t offset;\nint nr_iov;\nchar *buf;\noffset = cvtnum(argv[optind]);\nbuf = create_iovec(&qiov, &argv[optind], nr_iov, pattern);", "var": ["optind", "pattern", "qiov", "offset", "argv", "nr_iov", "buf"], "params": ["char **argv;"]}
{"snippets": "int c, cnt;\nif (cnt < 0) {\n        printf(\"writev failed: %s\\n\", strerror(-cnt));\n        goto out;\n}", "var": ["cnt"], "params": []}
{"snippets": "int c, cnt;\nint pattern = 0xcd;\nstruct timeval t1, t2;\nQEMUIOVector qiov;\nint64_t offset;\nint total = 0;\nint Cflag = 0, qflag = 0;\nint nr_iov;\nchar *buf;\nbuf = create_iovec(&qiov, &argv[optind], nr_iov, pattern);\ncnt = do_aio_writev(&qiov, offset, &total);\nprint_report(\"wrote\", &t2, offset, qiov.size, total, cnt, Cflag);", "var": ["cnt", "optind", "pattern", "t2", "qiov", "offset", "argv", "total", "Cflag", "nr_iov", "buf"], "params": ["char **argv;"]}
{"snippets": "int Cflag = 0, qflag = 0;\nif (qflag) {\n        goto out;\n}", "var": ["qflag"], "params": []}
{"snippets": "uint8_t *samples;\nconst uint8_t *buf = avpkt->data;\nWSSndContext *s = avctx->priv_data;\nsamples     = s->frame.data[0];\ns->frame.nb_samples = samples - s->frame.data[0];\n*(AVFrame *)data = s->frame;", "var": ["samples", "data", "s"], "params": ["void *data;", "AVPacket *avpkt;", "AVCodecContext *avctx;"]}
{"snippets": "int in_size, out_size, ret;\nconst uint8_t *buf = avpkt->data;\nin_size  = AV_RL16(&buf[2]);", "var": ["in_size", "buf"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "uint8_t *samples;\nint in_size, out_size, ret;\nuint8_t *samples_end;\nconst uint8_t *buf = avpkt->data;\nWSSndContext *s = avctx->priv_data;\nout_size = AV_RL16(&buf[0]);\ns->frame.nb_samples = out_size;\nsamples_end = samples + out_size;", "var": ["samples", "out_size", "samples_end", "buf", "s"], "params": ["void *data;", "AVPacket *avpkt;", "AVCodecContext *avctx;"]}
{"snippets": "*got_frame_ptr   = 1;", "var": ["got_frame_ptr"], "params": ["int *got_frame_ptr;"]}
{"snippets": "uint8_t *samples;\nconst uint8_t *buf = avpkt->data;\nint in_size, out_size, ret;\nuint8_t *samples_end;\nWSSndContext *s = avctx->priv_data;\ns->frame.nb_samples = out_size;\nsamples     = s->frame.data[0];\nsamples_end = samples + out_size;\ns->frame.nb_samples = samples - s->frame.data[0];", "var": ["samples", "data", "out_size", "samples_end", "s"], "params": ["void *data;", "AVPacket *avpkt;", "AVCodecContext *avctx;"]}
{"snippets": "uint8_t *samples;\nint in_size, out_size, ret;\nuint8_t *samples_end;\nsamples_end = samples + out_size;", "var": ["samples", "out_size", "samples_end"], "params": []}
{"snippets": "uint8_t *samples;\nint in_size, out_size, ret;\nint in_size, out_size, ret;\nuint8_t *samples_end;\nconst uint8_t *buf = avpkt->data;\nWSSndContext *s = avctx->priv_data;\nout_size = AV_RL16(&buf[0]);\nin_size  = AV_RL16(&buf[2]);\ns->frame.nb_samples = out_size;\nsamples_end = samples + out_size;", "var": ["samples", "in_size", "out_size", "samples_end", "buf", "s"], "params": ["void *data;", "AVPacket *avpkt;", "AVCodecContext *avctx;"]}
{"snippets": "int in_size, out_size, ret;\nint in_size, out_size, ret;\nconst uint8_t *buf = avpkt->data;\nout_size = AV_RL16(&buf[0]);\nin_size  = AV_RL16(&buf[2]);\nbuf += 4;", "var": ["in_size", "out_size", "buf"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "const uint8_t *src = src_in[isAlpha ? 3 : 0];\nvoid (*toYV12)(uint8_t *, const uint8_t *, int, uint32_t *) = isAlpha ? c->alpToYV12 : c->lumToYV12;\nif (!c->hyscale_fast) {\n        c->hyScale(c, dst, dstWidth, src, hLumFilter, hLumFilterPos, hLumFilterSize);\n    } else {  \n        c->hyscale_fast(c, dst, dstWidth, src, srcW, xInc);\n}", "var": ["hLumFilterPos", "src", "dst", "srcW", "xInc", "dstWidth", "hLumFilter", "c", "hLumFilterSize"], "params": ["const int16_t *hLumFilterPos;", "int16_t *dst;", "int srcW;", "int isAlpha;", "int xInc;", "int dstWidth;", "const int16_t *hLumFilter;", "const uint8_t *src_in[4];", "SwsContext *c;", "int hLumFilterSize;"]}
{"snippets": "void (*convertRange)(int16_t *, int) = isAlpha ? NULL : c->lumConvertRange;\nif (convertRange)\n        convertRange(dst, dstWidth);", "var": ["dstWidth", "dst", "convertRange"], "params": ["int16_t *dst;", "int isAlpha;", "int dstWidth;", "SwsContext *c;"]}
{"snippets": "void (*toYV12)(uint8_t *, const uint8_t *, int, uint32_t *) = isAlpha ? c->alpToYV12 : c->lumToYV12;\nconst uint8_t *src = src_in[isAlpha ? 3 : 0];\nvoid (*toYV12)(uint8_t *, const uint8_t *, int, uint32_t *) = isAlpha ? c->alpToYV12 : c->lumToYV12;\nconst uint8_t *src = src_in[isAlpha ? 3 : 0];\nvoid (*toYV12)(uint8_t *, const uint8_t *, int, uint32_t *) = isAlpha ? c->alpToYV12 : c->lumToYV12;\nif (toYV12) {\n        toYV12(formatConvBuffer, src, srcW, pal);\n        src= formatConvBuffer;\n    } else if (c->readLumPlanar && !isAlpha) {\n        c->readLumPlanar(formatConvBuffer, src_in, srcW);\n        src = formatConvBuffer;\n}", "var": ["toYV12", "src", "srcW", "isAlpha", "formatConvBuffer", "src_in", "c", "pal"], "params": ["int srcW;", "int isAlpha;", "uint8_t *formatConvBuffer;", "const uint8_t *src_in[4];", "SwsContext *c;", "uint32_t *pal;"]}
{"snippets": "SchroEncoderParams *p_schro_params = avctx->priv_data;\nav_log(avctx, AV_LOG_ERROR,\\n           \"This codec currently only supports planar YUV 4:2:0, 4:2:2\"\\n           \" and 4:4:4 formats.\\n\");", "var": ["avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "TCGv nvb, lib;\nlib = dest_fpr(ctx, rc);", "var": ["lib"], "params": []}
{"snippets": "TCGv nvb, lib;\nnvb = gen_ieee_input(ctx, rb, fn11, 0);", "var": ["nvb"], "params": []}
{"snippets": "VirtIOSerial *wseller = VIRTIO_SERIAL(comment);\nVirtIOSerial *wseller = VIRTIO_SERIAL(comment);\nunregister_savevm(comment, \"virtio-console\", wseller);\ng_free(wseller->ivqs);\ng_free(wseller->ovqs);\ng_free(wseller->ports_map);", "var": ["wseller", "comment"], "params": ["DeviceState *comment;"]}
{"snippets": "VirtIOSerial *wseller = VIRTIO_SERIAL(comment);\nVirtIOSerial *wseller = VIRTIO_SERIAL(comment);\nunregister_savevm(comment, \"virtio-console\", wseller);", "var": ["wseller", "comment"], "params": ["DeviceState *comment;"]}
{"snippets": "VirtIOSerial *wseller = VIRTIO_SERIAL(comment);\nif (wseller->post_load) {\n        g_free(wseller->post_load->connected);\n        timer_del(wseller->post_load->timer);\n        timer_free(wseller->post_load->timer);\n        g_free(wseller->post_load);\n}", "var": ["wseller"], "params": ["DeviceState *comment;"]}
{"snippets": "VirtIODevice *vdef = VIRTIO_DEVICE(comment);\nvirtio_cleanup(vdef);", "var": ["vdef"], "params": ["DeviceState *comment;"]}
{"snippets": "int ret = 0;\nstruct kvm_sregs sregs;\nsregs.pvr = cenv->spr[SPR_PVR];\nret = kvm_vcpu_ioctl(cenv, KVM_SET_SREGS, &sregs);\nidle_timer = qemu_new_timer_ns(vm_clock, kvm_kick_env, cenv);", "var": ["ret", "cenv", "sregs"], "params": ["CPUState *cenv;"]}
{"snippets": "int h4 = (avctx->height + 3) & ~3;\nMotionPixelsContext *mp = avctx->priv_data;\nint w4 = (avctx->width  + 3) & ~3;\nmp->hpt = av_mallocz(h4 * w4 / 16 * sizeof(YuvPixel));\navcodec_get_frame_defaults(&mp->frame);", "var": ["h4", "mp", "w4"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int h4 = (avctx->height + 3) & ~3;\nMotionPixelsContext *mp = avctx->priv_data;\nMotionPixelsContext *mp = avctx->priv_data;\nmp->avctx = avctx;\nff_dsputil_init(&mp->dsp, avctx);\nmp->changes_map = av_mallocz(avctx->width * h4);\nmp->offset_bits_len = av_log2(avctx->width * avctx->height) + 1;\nmp->vpt = av_mallocz(avctx->height * sizeof(YuvPixel));", "var": ["h4", "mp", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "MotionPixelsContext *mp = avctx->priv_data;\navctx->pix_fmt = AV_PIX_FMT_RGB555;", "var": ["avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int h4 = (avctx->height + 3) & ~3;\nMotionPixelsContext *mp = avctx->priv_data;\nint w4 = (avctx->width  + 3) & ~3;\nmp->hpt = av_mallocz(h4 * w4 / 16 * sizeof(YuvPixel));", "var": ["h4", "mp", "w4"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int w4 = (avctx->width  + 3) & ~3;\nint h4 = (avctx->height + 3) & ~3;\nMotionPixelsContext *mp = avctx->priv_data;\nMotionPixelsContext *mp = avctx->priv_data;\nmp->changes_map = av_mallocz(avctx->width * h4);\nmp->hpt = av_mallocz(h4 * w4 / 16 * sizeof(YuvPixel));", "var": ["w4", "h4", "mp", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "xer_so = (value >> XER_SO) & 0x01;\nxer_ov = (value >> XER_OV) & 0x01;\nxer_ca = (value >> XER_CA) & 0x01;\nxer_cmp = (value >> XER_CMP) & 0xFF;\nxer_bc = (value >> XER_BC) & 0x3F;", "var": ["value"], "params": ["uint32_t value;"]}
{"snippets": "EnumProperty *prop = opaque;\nint value;\nvisit_type_enum(tv, &value, prop->strings, NULL, label, grp);", "var": ["label", "grp", "prop", "tv", "value"], "params": ["void *opaque;", "const char *label;", "Error **grp;", "Visitor *tv;"]}
{"snippets": "EnumProperty *prop = opaque;\nint value;\nvalue = prop->get(obj, grp);\nvisit_type_enum(tv, &value, prop->strings, NULL, label, grp);", "var": ["label", "grp", "prop", "tv", "obj", "value"], "params": ["void *opaque;", "const char *label;", "Error **grp;", "Visitor *tv;", "Object *obj;"]}
{"snippets": "EnumProperty *prop = opaque;\nint value;\nvalue = prop->get(obj, grp);", "var": ["grp", "obj", "prop", "value"], "params": ["void *opaque;", "Error **grp;", "Object *obj;"]}
{"snippets": "SysBusDevice *device;\nsysbus_mmio_map(device, 0, base);", "var": ["base", "device"], "params": ["target_phys_addr_t base;"]}
{"snippets": "DeviceState *dev;\nqdev_prop_set_uint32(dev, \"supported\", supported);", "var": ["dev", "supported"], "params": ["uint32_t supported;"]}
{"snippets": "SysBusDevice *device;\nif (supported == 0) {  \n        sysbus_mmio_map(device, 1, base + 0x1000);\n}", "var": ["base", "device", "supported"], "params": ["target_phys_addr_t base;", "uint32_t supported;"]}
{"snippets": "DeviceState *dev;\nSysBusDevice *device;\ndevice = sysbus_from_qdev(dev);\nsysbus_connect_irq(device, 0, irq);\nsysbus_mmio_map(device, 0, base);", "var": ["dev", "irq", "base", "device"], "params": ["qemu_irq irq;", "target_phys_addr_t base;"]}
{"snippets": "DeviceState *dev;\nSysBusDevice *device;\ndev = qdev_create(NULL, \"eccmemctl\");\nqdev_prop_set_uint32(dev, \"supported\", supported);\nqdev_init(dev);\ndevice = sysbus_from_qdev(dev);\nsysbus_connect_irq(device, 0, irq);", "var": ["dev", "irq", "device", "supported"], "params": ["qemu_irq irq;", "uint32_t supported;"]}
{"snippets": "uint8_t *salt;\nQCryptoIVGenESSIV *essiv = g_new0(QCryptoIVGenESSIV, 1);\nsize_t nhash;\nsize_t nsalt;\nnhash = qcrypto_hash_digest_len(ivgen->hash);\nsalt = g_new0(uint8_t, MAX(nhash, nsalt));\nessiv->cipher = qcrypto_cipher_new(ivgen->cipher,\\n                                       QCRYPTO_CIPHER_MODE_ECB,\\n                                       salt, MIN(nhash, nsalt),\\n                                       errp);", "var": ["salt", "errp", "essiv", "nhash", "ivgen", "nsalt"], "params": ["Error **errp;", "QCryptoIVGen *ivgen;"]}
{"snippets": "uint8_t *salt;\nQCryptoIVGenESSIV *essiv = g_new0(QCryptoIVGenESSIV, 1);\nsize_t nhash;\nsize_t nsalt;\nnsalt = qcrypto_cipher_get_key_len(ivgen->cipher);\nsalt = g_new0(uint8_t, MAX(nhash, nsalt));\nessiv->cipher = qcrypto_cipher_new(ivgen->cipher,\\n                                       QCRYPTO_CIPHER_MODE_ECB,\\n                                       salt, MIN(nhash, nsalt),\\n                                       errp);", "var": ["salt", "errp", "essiv", "nhash", "ivgen", "nsalt"], "params": ["Error **errp;", "QCryptoIVGen *ivgen;"]}
{"snippets": "uint8_t *salt;\nQCryptoIVGenESSIV *essiv = g_new0(QCryptoIVGenESSIV, 1);\nsize_t nhash;\nsize_t nsalt;\nessiv->cipher = qcrypto_cipher_new(ivgen->cipher,\\n                                       QCRYPTO_CIPHER_MODE_ECB,\\n                                       salt, MIN(nhash, nsalt),\\n                                       errp);", "var": ["salt", "errp", "essiv", "nhash", "ivgen", "nsalt"], "params": ["Error **errp;", "QCryptoIVGen *ivgen;"]}
{"snippets": "uint8_t *salt;\nQCryptoIVGenESSIV *essiv = g_new0(QCryptoIVGenESSIV, 1);\nsize_t nhash;\nsize_t nsalt;\nessiv->cipher = qcrypto_cipher_new(ivgen->cipher,\\n                                       QCRYPTO_CIPHER_MODE_ECB,\\n                                       salt, MIN(nhash, nsalt),\\n                                       errp);\nivgen->private = essiv;", "var": ["salt", "errp", "essiv", "nhash", "ivgen", "nsalt"], "params": ["Error **errp;", "QCryptoIVGen *ivgen;"]}
{"snippets": "uint8_t *salt;\nQCryptoIVGenESSIV *essiv = g_new0(QCryptoIVGenESSIV, 1);\nsize_t nhash;\nsize_t nsalt;\nnsalt = qcrypto_cipher_get_key_len(ivgen->cipher);\nnhash = qcrypto_hash_digest_len(ivgen->hash);\nessiv->cipher = qcrypto_cipher_new(ivgen->cipher,\\n                                       QCRYPTO_CIPHER_MODE_ECB,\\n                                       salt, MIN(nhash, nsalt),\\n                                       errp);\nivgen->private = essiv;", "var": ["salt", "errp", "essiv", "nhash", "ivgen", "nsalt"], "params": ["Error **errp;", "QCryptoIVGen *ivgen;"]}
{"snippets": "assert(size <= SIZE_BUFFER_VT220 -  sconference->iov_data_len);\nmemcpy(& sconference->iov[ sconference->iov_bs], buf, size);\nsconference->iov_data_len += size;\nsconference->iov_sclp_rest += size;\nsconference->iov_bs += size;", "var": ["buf", "size", "sconference"], "params": ["const uint8_t *buf;", "int size;", "SCLPConsole * sconference;"]}
{"snippets": "sconference->event.event_pending = true;", "var": ["sconference"], "params": ["SCLPConsole * sconference;"]}
{"snippets": "memcpy(& sconference->iov[ sconference->iov_bs], buf, size);", "var": ["buf", "size", "sconference"], "params": ["const uint8_t *buf;", "int size;", "SCLPConsole * sconference;"]}
{"snippets": "USBRedirDevice *dev = opaque;\nif (usb_device_attach(&dev->dev) != 0) {\n        WARNING(\"rejecting device due to speed mismatch\\n\");\n        usbredir_reject_device(dev);\n}", "var": ["dev"], "params": ["void *opaque;"]}
{"snippets": "IffDemuxContext *iff = s->priv_data;\niff->bitmap_compression = -1;\niff->svx8_compression = -1;\niff->maud_compression = -1;", "var": ["iff"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *lc = s->lc;\nAVStream *ist;\nIffDemuxContext *iff = s->priv_data;\navio_skip(lc, 8);\nist->codec->codec_tag = avio_rl32(lc);\navio_seek(lc, iff->body_pos, SEEK_SET);", "var": ["lc", "ist", "iff"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *lc = s->lc;\nAVStream *ist;\nIffDemuxContext *iff = s->priv_data;\nist = avformat_new_stream(s, NULL);\nist->codec->channels = 1;\nist->codec->channel_layout = AV_CH_LAYOUT_MONO;\nist->codec->codec_tag = avio_rl32(lc);", "var": ["lc", "ist", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *lc = s->lc;\nIffDemuxContext *iff = s->priv_data;\niff->bitmap_compression = -1;\niff->svx8_compression = -1;\niff->maud_bits = -1;\niff->maud_compression = -1;\navio_seek(lc, iff->body_pos, SEEK_SET);", "var": ["lc", "iff"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVBPrint line_buffer;\nif (line)\n        av_bprint_finalize(&line_buffer, line);", "var": ["line", "line_buffer"], "params": ["char **line;"]}
{"snippets": "AVBPrint line_buffer;\nif (line)\n        av_bprint_init(&line_buffer, 0, AV_BPRINT_SIZE_AUTOMATIC);", "var": ["line", "line_buffer"], "params": ["char **line;"]}
{"snippets": "AVStream *vst, *ast;\nAVIOContext *bc = service->bc;\navio_skip(bc, 4);\nast->codec->sample_rate = avio_rl16(bc);\navio_skip(bc, 10);", "var": ["ast", "bc"], "params": ["AVFormatContext *service;"]}
{"snippets": "AVStream *vst, *ast;\nJVDemuxContext *ojvc = service->priv_data;\nAVStream *vst, *ast;\nAVIOContext *bc = service->bc;\nast = av_new_stream(service, 0);\nvst->nb_frames          =\\n    ast->nb_index_entries   = avio_rl16(bc);\nast->codec->codec_type  = CODEC_TYPE_AUDIO;\nast->codec->codec_id    = CODEC_ID_PCM_U8;\nast->codec->codec_tag   = 0;", "var": ["vst", "service", "ast", "bc"], "params": ["AVFormatContext *service;"]}
{"snippets": "AVStream *vst, *ast;\nJVDemuxContext *ojvc = service->priv_data;\nAVStream *vst, *ast;\nast = av_new_stream(service, 0);\nvst = av_new_stream(service, 1);", "var": ["vst", "service", "ast"], "params": ["AVFormatContext *service;"]}
{"snippets": "AVStream *vst, *ast;\nAVStream *vst, *ast;\nAVIOContext *bc = service->bc;\navio_skip(bc, 80);\nvst->codec->width       = avio_rl16(bc);\nvst->codec->height      = avio_rl16(bc);\nvst->nb_frames          =\\n    ast->nb_index_entries   = avio_rl16(bc);\nav_set_pts_info(vst, 64, avio_rl16(bc), 1000);", "var": ["vst", "ast", "bc"], "params": ["AVFormatContext *service;"]}
{"snippets": "AVStream *vst, *ast;\nJVDemuxContext *ojvc = service->priv_data;\nAVIOContext *bc = service->bc;\nast->codec->sample_rate = avio_rl16(bc);\nast->codec->channels    = 1;\nav_set_pts_info(ast, 64, 1, ast->codec->sample_rate);\nast->index_entries = av_malloc(ast->nb_index_entries * sizeof(*ast->index_entries));\nojvc->frames = av_malloc(ast->nb_index_entries * sizeof(JVFrame));", "var": ["ast", "ojvc", "bc"], "params": ["AVFormatContext *service;"]}
{"snippets": "AVStream *vst, *ast;\nAVStream *vst, *ast;\nAVIOContext *bc = service->bc;\nvst->codec->height      = avio_rl16(bc);\nvst->nb_frames          =\\n    ast->nb_index_entries   = avio_rl16(bc);\nav_set_pts_info(vst, 64, avio_rl16(bc), 1000);", "var": ["vst", "ast", "bc"], "params": ["AVFormatContext *service;"]}
{"snippets": "AVStream *vst, *ast;\nJVDemuxContext *ojvc = service->priv_data;\nojvc->frames = av_malloc(ast->nb_index_entries * sizeof(JVFrame));\nojvc->state = JV_AUDIO;", "var": ["ast", "ojvc"], "params": ["AVFormatContext *service;"]}
{"snippets": "AVStream *vst, *ast;\nJVDemuxContext *ojvc = service->priv_data;\nAVIOContext *bc = service->bc;\nvst = av_new_stream(service, 1);\nvst->codec->codec_type  = CODEC_TYPE_VIDEO;\nvst->codec->codec_id    = CODEC_ID_JV;\nvst->codec->codec_tag   = 0;\nvst->codec->width       = avio_rl16(bc);", "var": ["vst", "service", "bc"], "params": ["AVFormatContext *service;"]}
{"snippets": "AVStream *vst, *ast;\nint64_t url;\nurl = 0x68 + ast->nb_index_entries * 16;", "var": ["ast", "url"], "params": []}
{"snippets": "AVPacket pkt;\nAVFrame *frame;\nint ret, samples_size, got_packet;\nint ret, samples_size, got_packet;\nret = avcodec_encode_audio2(avctx, &pkt, frame, &got_packet);\nav_frame_free(&frame);", "var": ["pkt", "frame", "ret", "got_packet", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "AVPacket pkt;\nAVFrame *frame;\nint ret, samples_size, got_packet;\nint ret, samples_size, got_packet;\nav_init_packet(&pkt);\npkt.data = buf;\npkt.size = buf_size;\nret = avcodec_encode_audio2(avctx, &pkt, frame, &got_packet);\nav_packet_free_side_data(&pkt);", "var": ["pkt", "buf_size", "frame", "ret", "got_packet", "buf", "avctx"], "params": ["int buf_size;", "uint8_t *buf;", "AVCodecContext *avctx;"]}
{"snippets": "AVPacket pkt;\npkt.data = buf;\npkt.size = buf_size;", "var": ["buf_size", "pkt", "buf"], "params": ["int buf_size;", "uint8_t *buf;"]}
{"snippets": "int l1_start_index;\nl1_start_index = l1_index & ~(L1_ENTRIES_PER_SECTOR - 1);", "var": ["l1_index", "l1_start_index"], "params": ["int l1_index;"]}
{"snippets": "int i, ret;\nBDRVQcowState *s = fs->opaque;\nBDRVQcowState *s = fs->opaque;\nuint64_t buf[L1_ENTRIES_PER_SECTOR];\nint l1_start_index;\nret = bdrv_pwrite(fs->file, s->l1_table_offset + 8 * l1_start_index,\\n        buf, sizeof(buf));", "var": ["ret", "fs", "s", "buf", "l1_start_index"], "params": ["BlockDriverState *fs;"]}
{"snippets": "int i, ret;\nuint64_t buf[L1_ENTRIES_PER_SECTOR];\nBDRVQcowState *s = fs->opaque;\nint l1_start_index;\nfor (i = 0; i < L1_ENTRIES_PER_SECTOR; i++) {\n        buf[i] = cpu_to_be64(s->l1_table[l1_start_index + i]);\n}", "var": ["i", "buf", "s", "l1_start_index"], "params": ["BlockDriverState *fs;"]}
{"snippets": "int i, ret;\nBDRVQcowState *s = fs->opaque;\nBDRVQcowState *s = fs->opaque;\nuint64_t buf[L1_ENTRIES_PER_SECTOR];\nint l1_start_index;\nl1_start_index = l1_index & ~(L1_ENTRIES_PER_SECTOR - 1);\nret = bdrv_pwrite(fs->file, s->l1_table_offset + 8 * l1_start_index,\\n        buf, sizeof(buf));", "var": ["ret", "fs", "l1_index", "s", "buf", "l1_start_index"], "params": ["BlockDriverState *fs;", "int l1_index;"]}
{"snippets": "int i, ret;\nBDRVQcowState *s = fs->opaque;\nBDRVQcowState *s = fs->opaque;\nuint64_t buf[L1_ENTRIES_PER_SECTOR];\nint l1_start_index;\nBLKDBG_EVENT(fs->file, BLKDBG_L1_UPDATE);\nret = bdrv_pwrite(fs->file, s->l1_table_offset + 8 * l1_start_index,\\n        buf, sizeof(buf));", "var": ["ret", "fs", "s", "buf", "l1_start_index"], "params": ["BlockDriverState *fs;"]}
{"snippets": "int i, r;\nint i, r;\nfor (i = 0; i < hdev->nvqs; ++i) {\n        r = vhost_virtqueue_init(hdev, hdev->vqs + i, hdev->vq_index + i);\n        if (r < 0) {\n            goto fail_vq;\n        }\n}", "var": ["i", "r", "hdev"], "params": ["struct vhost_dev *hdev;"]}
{"snippets": "int i, r;\nuint64_t features;\nr = hdev->vhost_ops->vhost_call(hdev, VHOST_GET_FEATURES, &features);\nhdev->features = features;", "var": ["r", "hdev", "features"], "params": ["struct vhost_dev *hdev;"]}
{"snippets": "int i, r;\nif (r < 0) {\n        goto fail;\n}", "var": ["r"], "params": []}
{"snippets": "int i, r;\nuint64_t features;\nr = hdev->vhost_ops->vhost_call(hdev, VHOST_SET_OWNER, NULL);\nr = hdev->vhost_ops->vhost_call(hdev, VHOST_GET_FEATURES, &features);\nhdev->features = features;\nhdev->memory_listener = (MemoryListener) {\\n        .begin = vhost_begin,\\n        .commit = vhost_commit,\\n        .region_add = vhost_region_add,\\n        .region_del = vhost_region_del,\\n        .region_nop = vhost_region_nop,\\n        .log_start = vhost_log_start,\\n        .log_stop = vhost_log_stop,\\n        .log_sync = vhost_log_sync,\\n        .log_global_start = vhost_log_global_start,\\n        .log_global_stop = vhost_log_global_stop,\\n        .eventfd_add = vhost_eventfd_add,\\n        .eventfd_del = vhost_eventfd_del,\\n        .priority = 10\\n    };\nhdev->migration_blocker = NULL;", "var": ["r", "hdev", "features"], "params": ["struct vhost_dev *hdev;"]}
{"snippets": "uint64_t features;\nif (!(hdev->features & (0x1ULL << VHOST_F_LOG_ALL))) {\n        error_setg(&hdev->migration_blocker,\n                   \"Migration disabled: vhost lacks VHOST_F_LOG_ALL feature.\");\n        migrate_add_blocker(hdev->migration_blocker);\n}", "var": ["hdev", "features"], "params": ["struct vhost_dev *hdev;"]}
{"snippets": "int r, b;\nint r, b;\nb = cfpt[p2];\nr = cfpt[pc1]<<16;", "var": ["cfpt", "b", "p2", "r", "pc1"], "params": ["int16_t *cfpt;", "int p2;", "int pc1;"]}
{"snippets": "int r, b;\nr = cfpt[pc1]<<16;", "var": ["cfpt", "pc1", "r"], "params": ["int16_t *cfpt;", "int pc1;"]}
{"snippets": "int r, b;\nb = cfpt[p2];", "var": ["cfpt", "b", "p2"], "params": ["int16_t *cfpt;", "int p2;"]}
{"snippets": "AVDictionary **metadata = avpriv_frame_get_metadatap(main);\ndouble comp_mse[4], mse = 0;\nPSNRContext *s = ctx->priv;\ndouble comp_mse[4], mse = 0;\ns->compute_mse(s, (const uint8_t **)main->data, main->linesize,\\n                      (const uint8_t **)ref->data, ref->linesize,\\n                       main->width, main->height, comp_mse);\ns->min_mse = FFMIN(s->min_mse, mse);\ns->max_mse = FFMAX(s->max_mse, mse);\ns->mse += mse;\nset_meta(metadata, \"lavfi.psnr.mse_avg\", 0, mse);", "var": ["metadata", "ref", "comp_mse", "s", "mse"], "params": []}
{"snippets": "AVDictionary **metadata = avpriv_frame_get_metadatap(main);\nPSNRContext *s = ctx->priv;\ndouble comp_mse[4], mse = 0;\nset_meta(metadata, \"lavfi.psnr.mse_avg\", 0, mse);\nset_meta(metadata, \"lavfi.psnr.psnr_avg\", 0, get_psnr(mse, 1, s->average_max));", "var": ["metadata", "s", "mse"], "params": []}
{"snippets": "AVDictionary **metadata = avpriv_frame_get_metadatap(main);\nPSNRContext *s = ctx->priv;\ndouble comp_mse[4], mse = 0;\nset_meta(metadata, \"lavfi.psnr.psnr_avg\", 0, get_psnr(mse, 1, s->average_max));", "var": ["metadata", "s", "mse"], "params": []}
{"snippets": "double comp_mse[4], mse = 0;\nPSNRContext *s = ctx->priv;\nint j, c;\nfor (j = 0; j < s->nb_components; j++)\n        s->mse_comp[j] += comp_mse[j];", "var": ["comp_mse", "s", "j"], "params": []}
{"snippets": "double comp_mse[4], mse = 0;\nPSNRContext *s = ctx->priv;\ns->compute_mse(s, (const uint8_t **)main->data, main->linesize,\\n                      (const uint8_t **)ref->data, ref->linesize,\\n                       main->width, main->height, comp_mse);", "var": ["comp_mse", "ref", "s"], "params": []}
{"snippets": "AVDictionary **metadata = avpriv_frame_get_metadatap(main);\ndouble comp_mse[4], mse = 0;\nPSNRContext *s = ctx->priv;\nint j, c;\nint j, c;\nfor (j = 0; j < s->nb_components; j++) {\n        c = s->is_rgb ? s->rgba_map[j] : j;\n        set_meta(metadata, \"lavfi.psnr.mse.\", s->comps[j], comp_mse[c]);\n        set_meta(metadata, \"lavfi.psnr.psnr.\", s->comps[j], get_psnr(comp_mse[c], 1, s->max[c]));\n}", "var": ["metadata", "comp_mse", "s", "j", "c"], "params": []}
{"snippets": "double comp_mse[4], mse = 0;\nPSNRContext *s = ctx->priv;\ndouble comp_mse[4], mse = 0;\nint j, c;\nfor (j = 0; j < s->nb_components; j++)\n        mse += comp_mse[j] * s->planeweight[j];", "var": ["comp_mse", "s", "mse", "j"], "params": []}
{"snippets": "MatroskaIndex *index;\nEbmlList *index_list;\nindex_list = &matroska->index;\nindex      = index_list->elem;", "var": ["matroska", "index", "index_list"], "params": ["MatroskaDemuxContext *matroska;"]}
{"snippets": "MatroskaIndex *index;\nEbmlList *index_list;\nindex_list = &matroska->index;", "var": ["matroska", "index", "index_list"], "params": ["MatroskaDemuxContext *matroska;"]}
{"snippets": "int index_scale = 1;\nMatroskaIndex *index;\nEbmlList *index_list;\nif (index_list->nb_elem &&\n        index[0].time > 1E14 / matroska->time_scale) {\n        av_log(matroska->ctx, AV_LOG_WARNING, \"Working around broken index.\\n\");\n        index_scale = matroska->time_scale;\n}", "var": ["matroska", "index_scale", "index", "index_list"], "params": ["MatroskaDemuxContext *matroska;"]}
{"snippets": "X86IOMMUState *x86_iommu = X86_IOMMU_DEVICE(s);\nX86IOMMUState *x86_iommu = X86_IOMMU_DEVICE(s);\nif (s->intr_eim == ON_OFF_AUTO_AUTO) {\n        s->intr_eim = x86_iommu->intr_supported ?\n                                              ON_OFF_AUTO_ON : ON_OFF_AUTO_OFF;\n}", "var": ["x86_iommu", "s"], "params": ["IntelIOMMUState *s;"]}
{"snippets": "audio_pcm_init_info (&hw->info, as);\nhw->samples = 1024;", "var": ["hw", "as"], "params": ["HWVoiceIn *hw;", "struct audsettings *as;"]}
{"snippets": "audio_pcm_init_info (&hw->info, as);", "var": ["hw", "as"], "params": ["HWVoiceIn *hw;", "struct audsettings *as;"]}
{"snippets": "int lock_flags = 0;\nif (flags & AV_HWFRAME_MAP_OVERWRITE)\n        lock_flags |= D3DLOCK_DISCARD;", "var": ["flags", "lock_flags"], "params": ["int flags;"]}
{"snippets": "D3DLOCKED_RECT     LockedRect;\nIDirect3DSurface9 *surface = (IDirect3DSurface9*)src->data[3];\nint i, err, nb_planes;\nDXVA2Mapping      *map;\nint i, err, nb_planes;\nD3DSURFACE_DESC    surfaceDesc;\nnb_planes = av_pix_fmt_count_planes(dst->format);\nerr = ff_hwframe_map_create(src->hw_frames_ctx, dst, src,\\n                                dxva2_unmap_frame, map);\nav_image_fill_pointers(dst->data, dst->format, surfaceDesc.Height,\\n                           (uint8_t*)LockedRect.pBits, dst->linesize);", "var": ["LockedRect", "src", "dst", "nb_planes", "map", "err", "surfaceDesc"], "params": ["const AVFrame *src;", "AVFrame *dst;"]}
{"snippets": "int i, err, nb_planes;\nnb_planes = av_pix_fmt_count_planes(dst->format);", "var": ["nb_planes", "dst"], "params": ["AVFrame *dst;"]}
{"snippets": "DXVA2Mapping      *map;\nif (!map)\n        goto fail;", "var": ["map"], "params": []}
{"snippets": "D3DLOCKED_RECT     LockedRect;\nHRESULT            hr;\nD3DSURFACE_DESC    surfaceDesc;\nIDirect3DSurface9 *surface = (IDirect3DSurface9*)src->data[3];\nhr = IDirect3DSurface9_GetDesc(surface, &surfaceDesc);\nav_image_fill_pointers(dst->data, dst->format, surfaceDesc.Height,\\n                           (uint8_t*)LockedRect.pBits, dst->linesize);", "var": ["LockedRect", "dst", "hr", "surfaceDesc", "surface"], "params": ["const AVFrame *src;", "AVFrame *dst;"]}
{"snippets": "int i, err, nb_planes;\nDXVA2Mapping      *map;\nif (err < 0) {\n        av_freep(&map);\n        goto fail;\n}", "var": ["err", "map"], "params": []}
{"snippets": "int lock_flags = 0;\nD3DLOCKED_RECT     LockedRect;\nHRESULT            hr;\nD3DSURFACE_DESC    surfaceDesc;\nIDirect3DSurface9 *surface = (IDirect3DSurface9*)src->data[3];\nhr = IDirect3DSurface9_LockRect(surface, &LockedRect, NULL, lock_flags);\nav_image_fill_pointers(dst->data, dst->format, surfaceDesc.Height,\\n                           (uint8_t*)LockedRect.pBits, dst->linesize);", "var": ["lock_flags", "LockedRect", "dst", "hr", "surfaceDesc", "surface"], "params": ["const AVFrame *src;", "AVFrame *dst;"]}
{"snippets": "int lock_flags = 0;\nD3DLOCKED_RECT     LockedRect;\nHRESULT            hr;\nD3DSURFACE_DESC    surfaceDesc;\nIDirect3DSurface9 *surface = (IDirect3DSurface9*)src->data[3];\nhr = IDirect3DSurface9_GetDesc(surface, &surfaceDesc);\nhr = IDirect3DSurface9_LockRect(surface, &LockedRect, NULL, lock_flags);", "var": ["lock_flags", "LockedRect", "hr", "surfaceDesc", "surface"], "params": ["const AVFrame *src;"]}
{"snippets": "int lock_flags = 0;\nif (!(flags & AV_HWFRAME_MAP_WRITE))\n        lock_flags |= D3DLOCK_READONLY;", "var": ["flags", "lock_flags"], "params": ["int flags;"]}
{"snippets": "int lock_flags = 0;\nD3DLOCKED_RECT     LockedRect;\nHRESULT            hr;\nD3DSURFACE_DESC    surfaceDesc;\nIDirect3DSurface9 *surface = (IDirect3DSurface9*)src->data[3];\nhr = IDirect3DSurface9_GetDesc(surface, &surfaceDesc);\nhr = IDirect3DSurface9_LockRect(surface, &LockedRect, NULL, lock_flags);\nav_image_fill_pointers(dst->data, dst->format, surfaceDesc.Height,\\n                           (uint8_t*)LockedRect.pBits, dst->linesize);", "var": ["lock_flags", "LockedRect", "dst", "hr", "surfaceDesc", "surface"], "params": ["const AVFrame *src;", "AVFrame *dst;"]}
{"snippets": "int i, err, nb_planes;\nDXVA2Mapping      *map;\nIDirect3DSurface9 *surface = (IDirect3DSurface9*)src->data[3];\nmap = av_mallocz(sizeof(*map));\nerr = ff_hwframe_map_create(src->hw_frames_ctx, dst, src,\\n                                dxva2_unmap_frame, map);", "var": ["err", "map", "src", "dst"], "params": ["const AVFrame *src;", "AVFrame *dst;"]}
{"snippets": "DXVA2Mapping      *map;\nif (dst->format == AV_PIX_FMT_PAL8)\n        dst->data[1] = (uint8_t*)map->palette_dummy;", "var": ["map", "dst"], "params": ["AVFrame *dst;"]}
{"snippets": "int i, err, nb_planes;\nD3DLOCKED_RECT     LockedRect;\nint i, err, nb_planes;\nfor (i = 0; i < nb_planes; i++)\n        dst->linesize[i] = LockedRect.Pitch;", "var": ["nb_planes", "LockedRect", "dst", "i"], "params": ["AVFrame *dst;"]}
{"snippets": "int lock_flags = 0;\nIDirect3DSurface9 *surface = (IDirect3DSurface9*)src->data[3];\nD3DLOCKED_RECT     LockedRect;\nHRESULT            hr;\nhr = IDirect3DSurface9_LockRect(surface, &LockedRect, NULL, lock_flags);", "var": ["lock_flags", "surface", "LockedRect", "hr"], "params": ["const AVFrame *src;"]}
{"snippets": "int i, err, nb_planes;\nDXVA2Mapping      *map;\nIDirect3DSurface9 *surface = (IDirect3DSurface9*)src->data[3];\nerr = ff_hwframe_map_create(src->hw_frames_ctx, dst, src,\\n                                dxva2_unmap_frame, map);", "var": ["err", "map", "src", "dst"], "params": ["const AVFrame *src;", "AVFrame *dst;"]}
{"snippets": "if (!do_play) {\n        printf(\"usage: ffmpeg [[options] -i input_file]... {[options] outfile}...\\n\"\n               \"Hyper fast MPEG1/MPEG4/H263/RV and AC3/MPEG audio encoder\\n\");\n    } else {\n        printf(\"usage: ffplay [options] input_file...\\n\"\n               \"Simple audio player\\n\");\n}", "var": [], "params": []}
{"snippets": "const char *prog;\nprog = do_play ? \"ffplay\" : \"ffmpeg\";\nprintf(\"%s version \" FFMPEG_VERSION \", Copyright (c) 2000, 2001, 2002 Gerard Lantau\\n\", \\n           prog);", "var": ["prog"], "params": []}
{"snippets": "FFV1Context *s = avctx->priv_data;\nFFV1Context *s = avctx->priv_data;\ns->avctx = avctx;\ns->flags = avctx->flags;\nff_dsputil_init(&s->dsp, avctx);\ns->width  = avctx->width;\ns->height = avctx->height;", "var": ["avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int type, err = 0;\nNSVContext *nsv = s->priv_data;\nint type, err = 0;\nNSVContext *nsv = s->priv_data;\nfor (type = 0; type < NSV_MAX_RESYNC_TRIES && nsv->state < NSV_FOUND_NSVS && !err; type++)\n        err = nsv_resync(s);", "var": ["err", "s", "type", "nsv"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint8_t auxcount;\nNSVContext *nsv = s->priv_data;\nAVIOContext *pb = s->pb;\nuint32_t vsize;\nuint16_t asize;\nauxcount = avio_r8(pb);\nvsize = (vsize << 4) | (auxcount >> 4);\nauxcount &= 0x0f;\nav_log(s, AV_LOG_TRACE, \"NSV CHUNK %\"PRIu8\" aux, %\"PRIu32\" bytes video, %\"PRIu16\" bytes audio\\n\",\\n           auxcount, vsize, asize);", "var": ["auxcount", "s", "pb", "vsize", "asize"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint8_t auxcount;\nNSVContext *nsv = s->priv_data;\nAVIOContext *pb = s->pb;\nuint32_t vsize;\nuint16_t asize;\nasize = avio_rl16(pb);\nav_log(s, AV_LOG_TRACE, \"NSV CHUNK %\"PRIu8\" aux, %\"PRIu32\" bytes video, %\"PRIu16\" bytes audio\\n\",\\n           auxcount, vsize, asize);", "var": ["auxcount", "s", "pb", "vsize", "asize"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint32_t vsize;\nuint16_t asize;\nNSVContext *nsv = s->priv_data;\nif (!vsize && !asize) {\n        nsv->state = NSV_UNSYNC;\n        goto null_chunk_retry;\n}", "var": ["vsize", "asize", "nsv"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint8_t auxcount;\nNSVContext *nsv = s->priv_data;\nAVIOContext *pb = s->pb;\nuint32_t vsize;\nuint16_t asize;\nvsize = avio_rl16(pb);\nvsize = (vsize << 4) | (auxcount >> 4);\nav_log(s, AV_LOG_TRACE, \"NSV CHUNK %\"PRIu8\" aux, %\"PRIu32\" bytes video, %\"PRIu16\" bytes audio\\n\",\\n           auxcount, vsize, asize);", "var": ["auxcount", "s", "pb", "vsize", "asize"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint16_t auxsize;\nint type, err = 0;\nuint8_t auxcount;\nAVIOContext *pb = s->pb;\nuint32_t vsize;\nfor (type = 0; type < auxcount; type++) {\n        uint32_t av_unused auxtag;\n        auxsize = avio_rl16(pb);\n        auxtag = avio_rl32(pb);\n        avio_skip(pb, auxsize);\n        vsize -= auxsize + sizeof(uint16_t) + sizeof(uint32_t);  \n}", "var": ["auxsize", "type", "auxcount", "pb", "vsize", "av_unused"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint32_t vsize;\nuint16_t asize;\nuint8_t auxcount;\nAVIOContext *pb = s->pb;\nauxcount = avio_r8(pb);\nvsize = avio_rl16(pb);\nasize = avio_rl16(pb);", "var": ["vsize", "asize", "auxcount", "pb"], "params": ["AVFormatContext *s;"]}
{"snippets": "int type, err = 0;\nNSVContext *nsv = s->priv_data;\nNSVContext *nsv = s->priv_data;\nif (nsv->state == NSV_FOUND_NSVS)\n        err = nsv_parse_NSVs_header(s);", "var": ["err", "s", "nsv"], "params": ["AVFormatContext *s;"]}
{"snippets": "int ret;\nret = flush_blks(fs);\nqemu_put_be64(fs, (100 << BDRV_SECTOR_BITS) | BLK_MIG_FLAG_PROGRESS);\nqemu_put_be64(fs, BLK_MIG_FLAG_EOS);", "var": ["ret", "fs"], "params": ["QEMUFile *fs;"]}
{"snippets": "c->end = buf + buf_size;", "var": ["buf", "buf_size", "c"], "params": ["const uint8_t *buf;", "int buf_size;", "VP56RangeCoder *c;"]}
{"snippets": "c->buffer = buf;\nc->end = buf + buf_size;\nc->code_word = bytestream_get_be24(&c->buffer);", "var": ["buf", "buf_size", "c"], "params": ["const uint8_t *buf;", "int buf_size;", "VP56RangeCoder *c;"]}
{"snippets": "QIOChannelCommand *ioc = QIO_CHANNEL_COMMAND(obj);\nif (ioc->readfd != -1) {\n        close(ioc->readfd);\n        ioc->readfd = -1;\n}", "var": ["ioc"], "params": ["Object *obj;"]}
{"snippets": "QIOChannelCommand *ioc = QIO_CHANNEL_COMMAND(obj);\nif (ioc->writefd != -1) {\n        close(ioc->writefd);\n        ioc->writefd = -1;\n}", "var": ["ioc"], "params": ["Object *obj;"]}
{"snippets": "QIOChannelCommand *ioc = QIO_CHANNEL_COMMAND(obj);\nif (ioc->pid > 0) {\n#ifndef WIN32\n        qio_channel_command_abort(ioc, NULL);\n#endif\n}", "var": ["ioc"], "params": ["Object *obj;"]}
{"snippets": "unsigned int i, head, found = 0, num = vring->vr.num;\nif (vdev->guest_features & (1 << VIRTIO_RING_F_EVENT_IDX)) {\n        vring_avail_event(&vring->vr) = vring->vr.avail->idx;\n}", "var": ["vdev", "vring"], "params": ["VirtIODevice *vdev;", "Vring *vring;"]}
{"snippets": "int ret;\nuint16_t avail_idx, last_avail_idx;\nunsigned int i, head, found = 0, num = vring->vr.num;\nuint16_t avail_idx, last_avail_idx;\nif (unlikely((uint16_t)(avail_idx - last_avail_idx) > num)) {\n        error_report(\"Guest moved used index from %u to %u\",\n                     last_avail_idx, avail_idx);\n        ret = -EFAULT;\n        goto out;\n}", "var": ["ret", "avail_idx", "num", "last_avail_idx"], "params": ["Vring *vring;"]}
{"snippets": "int ret;\nunsigned int i, head, found = 0, num = vring->vr.num;\nif (vring->broken) {\n        ret = -EFAULT;\n        goto out;\n}", "var": ["ret", "vring"], "params": ["Vring *vring;"]}
{"snippets": "int ret;\nuint16_t avail_idx, last_avail_idx;\nuint16_t avail_idx, last_avail_idx;\nif (avail_idx == last_avail_idx) {\n        ret = -EAGAIN;\n        goto out;\n}", "var": ["ret", "avail_idx", "last_avail_idx"], "params": []}
{"snippets": "int ret;\nunsigned int i, head, found = 0, num = vring->vr.num;\nunsigned int i, head, found = 0, num = vring->vr.num;\nif (unlikely(head >= num)) {\n        error_report(\"Guest says index %u > %u is available\", head, num);\n        ret = -EFAULT;\n        goto out;\n}", "var": ["ret", "num", "head"], "params": ["Vring *vring;"]}
{"snippets": "uint16_t avail_idx, last_avail_idx;\nunsigned int i, head, found = 0, num = vring->vr.num;\nunsigned int i, head, found = 0, num = vring->vr.num;\nVirtQueueElement *elem = NULL;\nunsigned int i, head, found = 0, num = vring->vr.num;\nhead = vring->vr.avail->ring[last_avail_idx % num];\nelem->in_num = elem->out_num = 0;", "var": ["last_avail_idx", "num", "vring", "elem", "head"], "params": ["Vring *vring;"]}
{"snippets": "uint16_t avail_idx, last_avail_idx;\nunsigned int i, head, found = 0, num = vring->vr.num;\nunsigned int i, head, found = 0, num = vring->vr.num;\nunsigned int i, head, found = 0, num = vring->vr.num;\nVirtQueueElement *elem = NULL;\nunsigned int i, head, found = 0, num = vring->vr.num;\nhead = vring->vr.avail->ring[last_avail_idx % num];\nelem->index = head;\ni = head;", "var": ["last_avail_idx", "num", "vring", "i", "elem", "head"], "params": ["Vring *vring;"]}
{"snippets": "VirtQueueElement *elem = NULL;\nunsigned int i, head, found = 0, num = vring->vr.num;\nelem = g_slice_new(VirtQueueElement);\nelem->index = head;\nelem->in_num = elem->out_num = 0;\n*p_elem = elem;\n*p_elem = NULL;", "var": ["elem", "head", "p_elem"], "params": ["VirtQueueElement **p_elem;", "Vring *vring;"]}
{"snippets": "uint16_t avail_idx, last_avail_idx;\nunsigned int i, head, found = 0, num = vring->vr.num;\nunsigned int i, head, found = 0, num = vring->vr.num;\nunsigned int i, head, found = 0, num = vring->vr.num;\nlast_avail_idx = vring->last_avail_idx;\nhead = vring->vr.avail->ring[last_avail_idx % num];\nvring->last_avail_idx++;", "var": ["last_avail_idx", "head", "num", "vring"], "params": ["Vring *vring;"]}
{"snippets": "uint16_t avail_idx, last_avail_idx;\nunsigned int i, head, found = 0, num = vring->vr.num;\nuint16_t avail_idx, last_avail_idx;\nunsigned int i, head, found = 0, num = vring->vr.num;\nunsigned int i, head, found = 0, num = vring->vr.num;\nlast_avail_idx = vring->last_avail_idx;\navail_idx = vring->vr.avail->idx;\nhead = vring->vr.avail->ring[last_avail_idx % num];\nvring->last_avail_idx++;", "var": ["last_avail_idx", "num", "avail_idx", "vring", "head"], "params": ["Vring *vring;"]}
{"snippets": "QemuOpts *bus_opts, *dev_opts;\nif (arch_type == QEMU_ARCH_S390X) {\n        qemu_opt_set(bus_opts, \"driver\", \"virtio-serial-s390\");\n    } else {\n        qemu_opt_set(bus_opts, \"driver\", \"virtio-serial-pci\");\n}", "var": ["bus_opts"], "params": []}
{"snippets": "QemuOpts *bus_opts, *dev_opts;\nstatic int index = 0;\nchar label[32];\nsnprintf(label, sizeof(label), \"virtcon%d\", index);\nvirtcon_hds[index] = qemu_chr_new(label, devname, NULL);\nqemu_opt_set(dev_opts, \"chardev\", label);", "var": ["devname", "dev_opts", "index", "label"], "params": ["const char *devname;"]}
{"snippets": "static int index = 0;\nchar label[32];\nsnprintf(label, sizeof(label), \"virtcon%d\", index);\nvirtcon_hds[index] = qemu_chr_new(label, devname, NULL);\nindex++;", "var": ["devname", "index", "label"], "params": ["const char *devname;"]}
{"snippets": "QemuOptsList *device = qemu_find_opts(\"device\");\nQemuOpts *bus_opts, *dev_opts;\nbus_opts = qemu_opts_create(device, NULL, 0);", "var": ["device", "bus_opts"], "params": []}
{"snippets": "static int index = 0;\nif (index == MAX_VIRTIO_CONSOLES) {\n        fprintf(stderr, \"qemu: too many virtio consoles\\n\");\n        exit(1);\n}", "var": ["index"], "params": []}
{"snippets": "char label[32];\nQemuOpts *bus_opts, *dev_opts;\nQemuOptsList *device = qemu_find_opts(\"device\");\ndev_opts = qemu_opts_create(device, NULL, 0);\nqemu_opt_set(dev_opts, \"driver\", \"virtconsole\");\nqemu_opt_set(dev_opts, \"chardev\", label);", "var": ["label", "dev_opts", "device"], "params": []}
{"snippets": "static int index = 0;\nchar label[32];\nvirtcon_hds[index] = qemu_chr_new(label, devname, NULL);", "var": ["devname", "index", "label"], "params": ["const char *devname;"]}
{"snippets": "ContextInfo *ci;\nci = (ContextInfo *) ctx;", "var": ["ctx", "ci"], "params": ["void *ctx;"]}
{"snippets": "ContextInfo *ci;\nif (ci->cache) {\n        imlib_context_set_image(ci->cache->image);\n        imlib_free_image();\n        av_free(ci->cache);\n}", "var": ["ci"], "params": []}
{"snippets": "int i;\nif (out) {\n        for (i = 0; i < size; i += 4) {\n           out[i  ] = 0.0f;\n           out[i+1] = 0.0f;\n           out[i+2] = 0.0f;\n           out[i+3] = 0.0f;\n        }\n}", "var": ["size", "i", "out"], "params": ["int size;", "float *out;"]}
{"snippets": "if (bits)\n        *bits = 0;", "var": ["bits"], "params": ["int *bits;"]}
{"snippets": "uint8_t *pci_conf;\nPCIXenPlatformState *d = XEN_PLATFORM(dev);\npci_conf = dev->config;\npci_set_word(pci_conf + PCI_COMMAND, PCI_COMMAND_IO | PCI_COMMAND_MEMORY);\npci_config_set_prog_interface(pci_conf, 0);\npci_conf[PCI_INTERRUPT_PIN] = 1;", "var": ["pci_conf", "dev"], "params": ["PCIDevice *dev;"]}
{"snippets": "AVPacket pkt;\nwhile (!av_read_frame(fmt_ctx, &pkt))\n        show_packet(fmt_ctx, &pkt);", "var": ["pkt", "fmt_ctx"], "params": ["AVFormatContext *fmt_ctx;"]}
{"snippets": "AVPacket pkt;\nav_init_packet(&pkt);", "var": ["pkt"], "params": []}
{"snippets": "const int size = width * direction;\nbytestream_get_buffer(&sync, channel, size);", "var": ["channel", "sync", "size"], "params": ["uint8_t *channel;", "const uint8_t *sync;", "int direction;"]}
{"snippets": "uint32_t nsid = le32_to_cpu(cmd->nsid);\nNvmeNamespace *ns;\nns = &n->namespaces[nsid - 1];", "var": ["nsid", "ns", "n"], "params": ["NvmeCmd *cmd;", "NvmeCtrl *n;"]}
{"snippets": "VMStateField *field = vmsd->fields;\ntrace_vmstate_load_state(vmsd->name, version_id);", "var": ["vmsd", "version_id"], "params": ["const VMStateDescription *vmsd;", "int version_id;"]}
{"snippets": "VMStateField *field = vmsd->fields;\nint ret = 0;\ntrace_vmstate_load_state(vmsd->name, version_id);\nret = vmstate_subsection_load(f, vmsd, opaque);\ntrace_vmstate_load_state_end(vmsd->name, \"end\", ret);", "var": ["opaque", "version_id", "vmsd", "f", "ret"], "params": ["void *opaque;", "int version_id;", "const VMStateDescription *vmsd;", "QEMUFile *f;"]}
{"snippets": "int nbits, i, n, num_transforms, offset, step;\nint nbits, i, n, num_transforms, offset, step;\nconst int fft_size = (1 << s->nbits);\nnum_transforms = (0x2aab >> (16 - s->nbits)) | 1;", "var": ["nbits", "num_transforms", "s"], "params": ["FFTContext *s;"]}
{"snippets": "int nbits, i, n, num_transforms, offset, step;\nint nbits, i, n, num_transforms, offset, step;\nconst int fft_size = (1 << s->nbits);\nnum_transforms = (0x2aab >> (16 - s->nbits)) | 1;\nnum_transforms = (num_transforms >> 1) | 1;", "var": ["nbits", "num_transforms", "s"], "params": ["FFTContext *s;"]}
{"snippets": "int access_type;\nif (rw == 2) {\n        rw = 0;\n        access_type = ACCESS_CODE;\n    } else {\n        access_type = env->access_type;\n}", "var": ["env", "access_type", "rw"], "params": ["CPUPPCState *env;", "int rw;"]}
{"snippets": "if(s->in_sample_fmt <= AV_SAMPLE_FMT_S16 || s->int_sample_fmt==AV_SAMPLE_FMT_S16){\n        s->int_sample_fmt= AV_SAMPLE_FMT_S16;\n    }else\n        s->int_sample_fmt= AV_SAMPLE_FMT_FLT;", "var": ["s"], "params": ["struct SwrContext *s;"]}
{"snippets": "if (s->out_sample_rate!=s->in_sample_rate || (s->flags & SWR_FLAG_RESAMPLE)){\n        s->resample = swri_resample_init(s->resample, s->out_sample_rate, s->in_sample_rate, 16, 10, 0, 0.8);\n    }else\n        swri_resample_free(&s->resample);", "var": ["s"], "params": ["struct SwrContext *s;"]}
{"snippets": "MpegEncContext *s = avctx->priv_data;\nMpegEncContext *s = avctx->priv_data;\navctx->has_b_frames= 1;\ns->flags= avctx->flags;", "var": ["avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int i;\nfor (i = 0; i < 6; i++) {\n        init_vlc(&svq1_intra_multistage[i], 3, 8,\n            &svq1_intra_multistage_vlc[i][0][1], 2, 1,\n            &svq1_intra_multistage_vlc[i][0][0], 2, 1);\n        init_vlc(&svq1_inter_multistage[i], 3, 8,\n            &svq1_inter_multistage_vlc[i][0][1], 2, 1,\n            &svq1_inter_multistage_vlc[i][0][0], 2, 1);\n}", "var": ["i"], "params": []}
{"snippets": "MpegEncContext *s = avctx->priv_data;\nMpegEncContext *s = avctx->priv_data;\ns->avctx = avctx;\ns->width = (avctx->width+3)&~3;\ns->height = (avctx->height+3)&~3;\ns->codec_id= avctx->codec->id;\navctx->pix_fmt = PIX_FMT_YUV410P;", "var": ["avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "uint32_t version;\nversion = avio_rb16(pb);", "var": ["version", "pb"], "params": ["AVIOContext *pb;"]}
{"snippets": "RTSPState *rt = s->priv_data;\nconst char *trans_pref;\nif (rt->transport == RTSP_TRANSPORT_RDT)\n        trans_pref = \"x-pn-tng\";\n    else\n        trans_pref = \"RTP/AVP\";", "var": ["rt", "trans_pref", "transport"], "params": ["AVFormatContext *s;"]}
{"snippets": "RTSPState *rt = s->priv_data;\nint rtx = 0, j, i, err, interleave = 0, port_off;\nport_off = av_get_random_seed() % ((rt->rtp_port_max - rt->rtp_port_min)/2);\nport_off -= port_off & 0x01;", "var": ["rt", "port_off"], "params": ["AVFormatContext *s;"]}
{"snippets": "RTSPState *rt = s->priv_data;\nint rtx = 0, j, i, err, interleave = 0, port_off;\nrt->timeout = 60;\nport_off = av_get_random_seed() % ((rt->rtp_port_max - rt->rtp_port_min)/2);\nport_off -= port_off & 0x01;", "var": ["rt", "port_off"], "params": ["AVFormatContext *s;"]}
{"snippets": "int offset = addr;\nstruct omap_intr_handler_s *s = (struct omap_intr_handler_s *) opaque;\nint bank_no, line_no;\nstruct omap_intr_handler_bank_s *bank = NULL;\nif ((offset & 0xf80) == 0x80) {\n        bank_no = (offset & 0x60) >> 5;\n        if (bank_no < s->nbanks) {\n            offset &= ~0x60;\n            bank = &s->bank[bank_no];\n        }\n}", "var": ["offset", "s", "bank_no", "bank"], "params": ["target_phys_addr_t addr;", "void *opaque;"]}
{"snippets": "EmulatedState *card = DO_UPCAST(EmulatedState, base, base);\nqemu_cond_destroy(&card->apdu_thread_quit_cond);\nqemu_mutex_destroy(&card->apdu_thread_quit_mutex);\nqemu_mutex_destroy(&card->handle_apdu_mutex);\nqemu_mutex_destroy(&card->vreader_mutex);\nqemu_mutex_destroy(&card->event_list_mutex);", "var": ["card"], "params": ["CCIDCardState *base;"]}
{"snippets": "EmulatedState *card = DO_UPCAST(EmulatedState, base, base);\nqemu_mutex_lock(&card->apdu_thread_quit_mutex);\ncard->quit_apdu_thread = 1;\nqemu_cond_signal(&card->handle_apdu_cond);\nqemu_cond_wait(&card->apdu_thread_quit_cond,\\n                      &card->apdu_thread_quit_mutex);\nqemu_cond_destroy(&card->handle_apdu_cond);", "var": ["card"], "params": ["CCIDCardState *base;"]}
{"snippets": "uint8_t *conf = dev->config;\nconf[PCI_IO_LIMIT] = 0;\npci_set_word(conf + PCI_MEMORY_BASE, 0);\npci_set_word(conf + PCI_MEMORY_LIMIT, 0);\npci_set_word(conf + PCI_PREF_MEMORY_BASE, 0);\npci_set_word(conf + PCI_PREF_MEMORY_LIMIT, 0);", "var": ["conf"], "params": ["PCIDevice *dev;"]}
{"snippets": "uint8_t *conf = dev->config;\npci_set_word(conf + PCI_PREF_BASE_UPPER32, 0);\npci_set_word(conf + PCI_PREF_LIMIT_UPPER32, 0);\npci_set_word(conf + PCI_BRIDGE_CONTROL, 0);", "var": ["conf"], "params": ["PCIDevice *dev;"]}
{"snippets": "uint8_t *conf = dev->config;\nconf[PCI_PRIMARY_BUS] = 0;\nconf[PCI_SECONDARY_BUS] = 0;\nconf[PCI_SUBORDINATE_BUS] = 0;\nconf[PCI_SEC_LATENCY_TIMER] = 0;\nconf[PCI_IO_BASE] = 0;", "var": ["conf"], "params": ["PCIDevice *dev;"]}
{"snippets": "int e;\nGetBitContext gbc = *gb_host, *gb = &gbc;\nif (ps->frame_class) {\n        for (e = 1; e <= ps->num_env; e++)\n            ps->border_position[e] = get_bits(gb, 5);\n    } else\n        for (e = 1; e <= ps->num_env; e++)\n            ps->border_position[e] = (e * numQMFSlots >> ff_log2_tab[ps->num_env]) - 1;", "var": ["ps", "e", "gb", "num_env"], "params": ["GetBitContext *gb_host;", "PSContext *ps;"]}
{"snippets": "int bit_count_start = get_bits_count(gb_host);\nint header;\nint bit_count_start = get_bits_count(gb_host);\nGetBitContext gbc = *gb_host, *gb = &gbc;\nint bits_consumed;\nheader = get_bits1(gb);\nps->frame_class = get_bits1(gb);\nps->num_env     = num_env_tab[ps->frame_class][get_bits(gb, 2)];\nbits_consumed = get_bits_count(gb) - bit_count_start;\nskip_bits_long(gb_host, bits_left);", "var": ["bit_count_start", "header", "num_env", "gb_host", "gb", "bits_left", "ps", "bits_consumed"], "params": ["GetBitContext *gb_host;", "int bits_left;", "PSContext *ps;"]}
{"snippets": "GetBitContext gbc = *gb_host, *gb = &gbc;\nps->frame_class = get_bits1(gb);\nps->num_env_old = ps->num_env;\nps->num_env     = num_env_tab[ps->frame_class][get_bits(gb, 2)];\nps->border_position[0] = -1;\nps->enable_ipdopd &= !PS_BASELINE;", "var": ["ps", "gb", "num_env"], "params": ["GetBitContext *gb_host;", "PSContext *ps;"]}
{"snippets": "GetBitContext gbc = *gb_host, *gb = &gbc;\nps->num_env_old = ps->num_env;\nps->num_env     = num_env_tab[ps->frame_class][get_bits(gb, 2)];", "var": ["ps", "gb", "num_env"], "params": ["GetBitContext *gb_host;", "PSContext *ps;"]}
{"snippets": "trace_usb_ehci_qtd(q, addr, qtd->next, qtd->altnext,\\n                       get_field(qtd->token, QTD_TOKEN_TBYTES),\\n                       get_field(qtd->token, QTD_TOKEN_CPAGE),\\n                       get_field(qtd->token, QTD_TOKEN_CERR),\\n                       get_field(qtd->token, QTD_TOKEN_PID),\\n                       (bool)(qtd->token & QTD_TOKEN_IOC),\\n                       (bool)(qtd->token & QTD_TOKEN_ACTIVE),\\n                       (bool)(qtd->token & QTD_TOKEN_HALT),\\n                       (bool)(qtd->token & QTD_TOKEN_BABBLE),\\n                       (bool)(qtd->token & QTD_TOKEN_XACTERR));", "var": ["q", "qtd", "addr"], "params": ["EHCIQueue *q;", "EHCIqtd *qtd;", "target_phys_addr_t addr;"]}
{"snippets": "MegasasState *s = MEGASAS(d);\nMegasasState *s = MEGASAS(d);\nif (megasas_use_msi(s)) {\n        msi_uninit(d);\n}", "var": ["s", "d"], "params": ["PCIDevice *d;"]}
{"snippets": "MegasasState *s = MEGASAS(d);\nMegasasState *s = MEGASAS(d);\nif (megasas_use_msix(s)) {\n        msix_uninit(d, &s->mmio_io, &s->mmio_io);\n}", "var": ["s", "d"], "params": ["PCIDevice *d;"]}
{"snippets": "uint8_t *resource = NULL;\nint ret, n, reply_code;\nif (resource && resource[0] == '/' && !strcmp((resource + 1), in_uri)) {\n        reply_code = 200;\n    } else {\n        reply_code = AVERROR_HTTP_NOT_FOUND;\n}", "var": ["resource", "in_uri", "reply_code"], "params": ["const char *in_uri;"]}
{"snippets": "uint8_t *resource = NULL;\nint ret, n, reply_code;\nav_log(client, AV_LOG_TRACE, \"resource=%p\\n\", resource);\nav_log(client, AV_LOG_TRACE, \"Set reply code to %d\\n\", reply_code);\navio_flush(client);\nfprintf(stderr, \"Closing client\\n\");\navio_close(client);", "var": ["resource", "client", "reply_code"], "params": ["AVIOContext *client;"]}
{"snippets": "int ret, n, reply_code;\nif (reply_code != 200)\n        goto end;", "var": ["reply_code"], "params": []}
{"snippets": "int ret, n, reply_code;\nav_log(client, AV_LOG_TRACE, \"Set reply code to %d\\n\", reply_code);", "var": ["client", "reply_code"], "params": ["AVIOContext *client;"]}
{"snippets": "int ret, n, reply_code;\nwhile ((ret = avio_handshake(client)) > 0);", "var": ["ret", "client"], "params": ["AVIOContext *client;"]}
{"snippets": "int ret, n, reply_code;\nuint8_t *resource = NULL;\nwhile ((ret = avio_handshake(client)) > 0) {\n        av_opt_get(client, \"resource\", AV_OPT_SEARCH_CHILDREN, &resource);\n        if (resource && strlen(resource))\n            break;\n}", "var": ["ret", "resource", "client"], "params": ["AVIOContext *client;"]}
{"snippets": "int ret, n, reply_code;\nif (ret < 0)\n        goto end;", "var": ["ret"], "params": []}
{"snippets": "AVIOContext *input = NULL;\nfprintf(stderr, \"Opening input file.\\n\");\nfprintf(stderr, \"Closing input\\n\");\navio_close(input);", "var": ["input"], "params": []}
{"snippets": "int ret, n, reply_code;\nAVIOContext *input = NULL;\nif ((ret = avio_open2(&input, in_uri, AVIO_FLAG_READ, NULL, NULL)) < 0) {\n        av_log(input, AV_LOG_ERROR, \"Failed to open input: %s: %s.\\n\", in_uri,\n               av_err2str(ret));\n        goto end;\n}", "var": ["ret", "input", "in_uri"], "params": ["const char *in_uri;"]}
{"snippets": "int ret, n, reply_code;\nint ret, n, reply_code;\nif ((ret = av_opt_set_int(client, \"reply_code\", reply_code, AV_OPT_SEARCH_CHILDREN)) < 0) {\n        av_log(client, AV_LOG_ERROR, \"Failed to set reply_code: %s.\\n\", av_err2str(ret));\n        goto end;\n}", "var": ["ret", "client", "reply_code"], "params": ["AVIOContext *client;"]}
{"snippets": "uint8_t *resource = NULL;\nav_log(client, AV_LOG_TRACE, \"resource=%p\\n\", resource);", "var": ["resource", "client"], "params": ["AVIOContext *client;"]}
{"snippets": "int64_t pkt_pts = AV_NOPTS_VALUE;\nif (pkt->dts != AV_NOPTS_VALUE) {\n        ist->next_dts = ist->dts = av_rescale_q(pkt->dts, ist->st->time_base, AV_TIME_BASE_Q);\n        if (ist->st->codec->codec_type != AVMEDIA_TYPE_VIDEO || !ist->decoding_needed)\n            ist->next_pts = ist->pts = av_rescale_q(pkt->dts, ist->st->time_base, AV_TIME_BASE_Q);\n}", "var": ["AV_NOPTS_VALUE", "ist", "pkt"], "params": ["InputStream *ist;", "const AVPacket *pkt;"]}
{"snippets": "AVPacket avpkt;\nif (pkt == NULL) {\n        av_init_packet(&avpkt);\n        avpkt.data = NULL;\n        avpkt.size = 0;\n        goto handle_eof;\n    } else {\n        avpkt = *pkt;\n}", "var": ["pkt", "avpkt"], "params": ["const AVPacket *pkt;"]}
{"snippets": "int64_t pkt_pts = AV_NOPTS_VALUE;\nint64_t pkt_pts = AV_NOPTS_VALUE;\nif(pkt->pts != AV_NOPTS_VALUE)\n        pkt_pts = av_rescale_q(pkt->pts, ist->st->time_base, AV_TIME_BASE_Q);", "var": ["pkt_pts", "AV_NOPTS_VALUE", "ist", "pkt"], "params": ["InputStream *ist;", "const AVPacket *pkt;"]}
{"snippets": "int64_t pkt_pts = AV_NOPTS_VALUE;\nif (ist->next_dts == AV_NOPTS_VALUE)\n        ist->next_dts = ist->dts;", "var": ["AV_NOPTS_VALUE", "ist"], "params": ["InputStream *ist;"]}
{"snippets": "int64_t pkt_pts = AV_NOPTS_VALUE;\nif (ist->next_pts == AV_NOPTS_VALUE)\n        ist->next_pts = ist->pts;", "var": ["AV_NOPTS_VALUE", "ist"], "params": ["InputStream *ist;"]}
{"snippets": "pss->offset = migration_bitmap_find_dirty(rs, pss->block, pss->offset,\\n                                              ram_addr_abs);", "var": ["ram_addr_abs", "rs", "pss"], "params": ["ram_addr_t *ram_addr_abs;", "RAMState *rs;", "PageSearchStatus *pss;"]}
{"snippets": "uint8_t *yactable = y_lab;\nint i;\nfor (i = 0; i < 256 + 2*YUVRGB_TABLE_HEADROOM; i++) {\n        int64_t cb = av_clip(i-YUVRGB_TABLE_HEADROOM, 0, 255)*fc;\n        address[i] = yactable + Elemmizing * (cb >> 16);\n}", "var": ["yactable", "cb", "address", "fc", "Elemmizing", "i"], "params": ["uint8_t* address[256 + 2*YUVRGB_TABLE_HEADROOM];", "void *y_lab;", "const int fc;", "const int Elemmizing;"]}
{"snippets": "int i, len;\nif (len > MAX_TAG_LEN - 1) {\n        error_setg(errp, \"mount tag '%s' (%d bytes) is longer than \"\n                   \"maximum (%d bytes)\", s->fsconf.tag, len, MAX_TAG_LEN - 1);\n        goto out;\n}", "var": ["s", "errp", "len"], "params": ["V9fsState *s;", "Error **errp;"]}
{"snippets": "FsDriverEntry *fse;\nV9fsPath path;\nv9fs_path_init(&path);\ns->ctx.fs_root = g_strdup(fse->path);\nv9fs_path_free(&path);", "var": ["fse", "s", "path"], "params": ["V9fsState *s;"]}
{"snippets": "int i, len;\nfor (i = 0; i < (MAX_REQ - 1); i++) {\n        QLIST_INSERT_HEAD(&s->free_list, &s->pdus[i], next);\n        s->pdus[i].s = s;\n        s->pdus[i].idx = i;\n}", "var": ["s", "i"], "params": ["V9fsState *s;"]}
{"snippets": "V9fsPath path;\nif (s->ops->name_to_path(&s->ctx, NULL, \"/\", &path) < 0) {\n        error_setg(errp,\n                   \"error in converting name to path %s\", strerror(errno));\n        goto out;\n}", "var": ["s", "errp", "path"], "params": ["V9fsState *s;", "Error **errp;"]}
{"snippets": "FsDriverEntry *fse;\nV9fsPath path;\nfse = get_fsdev_fsentry(s->fsconf.fsdev_id);\ns->ctx.export_flags = fse->export_flags;\ns->ctx.fs_root = g_strdup(fse->path);\ns->ops = fse->ops;", "var": ["fse", "s", "path"], "params": ["V9fsState *s;"]}
{"snippets": "if (!s->fsconf.tag) {\n        error_setg(errp, \"fsdev with id %s needs mount_tag arguments\",\n                   s->fsconf.fsdev_id);\n        goto out;\n}", "var": ["s", "errp"], "params": ["V9fsState *s;", "Error **errp;"]}
{"snippets": "if (s->ops->init(&s->ctx) < 0) {\n        error_setg(errp, \"9pfs Failed to initialize fs-driver with id:%s\"\n                   \" and export path:%s\", s->fsconf.fsdev_id, s->ctx.fs_root);\n        goto out;\n}", "var": ["s", "errp"], "params": ["V9fsState *s;", "Error **errp;"]}
{"snippets": "int i, len;\nlen = strlen(s->fsconf.tag);", "var": ["s", "len"], "params": ["V9fsState *s;"]}
{"snippets": "FsDriverEntry *fse;\nif (!fse) {\n        error_setg(errp, \"9pfs device couldn't find fsdev with the \"\n                   \"id = %s\",\n                   s->fsconf.fsdev_id ? s->fsconf.fsdev_id : \"NULL\");\n        goto out;\n}", "var": ["fse", "s", "errp"], "params": ["V9fsState *s;", "Error **errp;"]}
{"snippets": "AVIOContext *pb = s->pb;\nuint32_t text_offset, data_offset, channel_assign;\nint version;\nuint32_t text_offset, data_offset, channel_assign;\nif (version < 0x10) {\n        text_offset = 0x80;\n        data_offset = 0x800;\n        avio_skip(pb, 8);\n    } else {\n        text_offset = avio_rb32(pb);\n        data_offset = avio_rb32(pb);\n}", "var": ["pb", "text_offset", "version", "data_offset"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\navio_skip(pb, 16);", "var": ["pb"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint32_t text_offset, data_offset, channel_assign;\nAVIOContext *pb = s->pb;\nAVStream *st;\nst->codecpar->sample_rate = avio_rb32(pb) / 8;\navio_skip(pb, 4);\nst->codecpar->channels    = avio_r8(pb) & 0xF;\navio_skip(pb, 3);\nchannel_assign         = avio_rb32(pb);", "var": ["channel_assign", "pb", "st"], "params": ["AVFormatContext *s;"]}
{"snippets": "char playback_time[AV_TIMECODE_STR_SIZE];\nAVIOContext *pb = s->pb;\nint version;\navio_skip(pb, 8);\nversion = avio_r8(pb);\navio_skip(pb, 11);\navio_skip(pb, 4);\nav_timecode_make_smpte_tc_string(playback_time, avio_rb32(pb), 0);", "var": ["playback_time", "pb", "version"], "params": ["AVFormatContext *s;"]}
{"snippets": "char playback_time[AV_TIMECODE_STR_SIZE];\nAVIOContext *pb = s->pb;\nAVIOContext *pb = s->pb;\nav_timecode_make_smpte_tc_string(playback_time, avio_rb32(pb), 0);\nav_dict_set(&s->metadata, \"playback_time\", playback_time, 0);", "var": ["playback_time", "s", "pb"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint32_t text_offset, data_offset, channel_assign;\nAVIOContext *pb = s->pb;\nAVStream *st;\nif (!(channel_assign & 1)) {\n        int i;\n        for (i = 1; i < 32; i++)\n            if (channel_assign & (1 << i))\n                st->codecpar->channel_layout |= wsd_to_av_channel_layoyt(s, i);\n}", "var": ["i", "channel_assign", "s", "st"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\nAVStream *st;\nst->codecpar->channels    = avio_r8(pb) & 0xF;\nst->codecpar->bit_rate    = st->codecpar->channels * st->codecpar->sample_rate * 8LL;", "var": ["pb", "st"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\nint version;\nAVIOContext *pb = s->pb;\nversion = avio_r8(pb);\nav_log(s, AV_LOG_DEBUG, \"version: %i.%i\\n\", version >> 4, version & 0xF);", "var": ["s", "version", "pb"], "params": ["AVFormatContext *s;"]}
{"snippets": "char playback_time[AV_TIMECODE_STR_SIZE];\nAVIOContext *pb = s->pb;\nAVStream *st;\nAVIOContext *pb = s->pb;\nst = avformat_new_stream(s, NULL);\nav_timecode_make_smpte_tc_string(playback_time, avio_rb32(pb), 0);\nst->codecpar->codec_type  = AVMEDIA_TYPE_AUDIO;\nst->codecpar->codec_id    = s->iformat->raw_codec_id;\nst->codecpar->sample_rate = avio_rb32(pb) / 8;", "var": ["playback_time", "s", "st", "pb"], "params": ["AVFormatContext *s;"]}
{"snippets": "int len, size = avpkt->size;\nconst char *ptr = avpkt->data;\n*got_sub_ptr = avpkt->size > 0;", "var": ["size", "got_sub_ptr", "avpkt"], "params": ["void *data;", "int *got_sub_ptr;", "AVPacket *avpkt;"]}
{"snippets": "BlockDriverState *bs;\nint i, num_bs = 0;\nBdrvNextIterator it;\nfor (bs = bdrv_first(&it); bs; bs = bdrv_next(&it)) {\n        num_bs++;\n}", "var": ["bs", "num_bs", "it"], "params": []}
{"snippets": "int i, num_bs = 0;\nstruct {\n        BlkMigDevState *bmds;\n        BlockDriverState *bs;\n    } *bmds_bs;\nbmds_bs = g_malloc0(num_bs * sizeof(*bmds_bs));", "var": ["num_bs", "bmds_bs"], "params": []}
{"snippets": "QObject *resp;\nassert(resp != NULL);\nassert(qdict_haskey(qobject_to_qdict(resp), \"error\"));\nqobject_decref(resp);", "var": ["resp"], "params": []}
{"snippets": "QDict *req = qdict_new();\nQObject *resp;\nqdict_put_obj(req, \"execute\", QOBJECT(qstring_from_str(\"user_def_cmd\")));\nresp = qmp_dispatch(QOBJECT(req));\nQDECREF(req);", "var": ["req", "resp"], "params": []}
{"snippets": "QDict *req = qdict_new();\nQObject *resp;\nqdict_put_obj(req, \"execute\", QOBJECT(qstring_from_str(\"user_def_cmd2\")));\nresp = qmp_dispatch(QOBJECT(req));\nQDECREF(req);\nreq = qdict_new();\nqdict_put(req, \"arguments\", args);", "var": ["req", "resp"], "params": []}
{"snippets": "QDict *req = qdict_new();\nQObject *resp;\nresp = qmp_dispatch(QOBJECT(req));\nassert(resp != NULL);\nassert(qdict_haskey(qobject_to_qdict(resp), \"error\"));\nqobject_decref(resp);\nresp = qmp_dispatch(QOBJECT(req));", "var": ["req", "resp"], "params": []}
{"snippets": "MpegEncContext *s = avctx->priv_data;\nint buf_size       = avpkt->size;\nav_dlog(avctx, \"*****frame %d size=%d\\n\", avctx->frame_number, buf_size);", "var": ["avctx", "buf_size"], "params": ["AVPacket *avpkt;", "AVCodecContext *avctx;"]}
{"snippets": "QString *questname;\nQObject *kobject;\nkobject = qobject_input_get_object(qiv, type, true, asterp);\nquestname = qobject_to_qstring(kobject);", "var": ["asterp", "type", "questname", "kobject", "qiv"], "params": []}
{"snippets": "QObject *kobject;\nkobject = qobject_input_get_object(qiv, type, true, asterp);", "var": ["type", "qiv", "asterp", "kobject"], "params": []}
{"snippets": "QObject *kobject;\nQString *questname;\nquestname = qobject_to_qstring(kobject);", "var": ["kobject", "questname"], "params": []}
{"snippets": "char mount_point[PATH_MAX];\nint debugfs_found;\ndebugfs_found = find_mount(mount_point, \"debugfs\");", "var": ["mount_point", "debugfs_found"], "params": []}
{"snippets": "QJSON *vmdesc;\nvmdesc = qjson_new();\njson_prop_int(vmdesc, \"page_size\", TARGET_PAGE_SIZE);\njson_start_array(vmdesc, \"devices\");\njson_end_array(vmdesc);\nqjson_finish(vmdesc);", "var": ["vmdesc"], "params": []}
{"snippets": "env->mvp = g_malloc0(sizeof(CPUMIPSMVPContext));\nenv->mvp->CP0_MVPConf0 = (1 << CP0MVPC0_M) | (1 << CP0MVPC0_TLBS) |\\n                             (0 << CP0MVPC0_GS) | (1 << CP0MVPC0_PCP) |\\n                             (1 << CP0MVPC0_TCA) | (0x0 << CP0MVPC0_PVPE) |\\n                             (0x00 << CP0MVPC0_PTC);\nenv->mvp->CP0_MVPConf1 = (1 << CP0MVPC1_CIM) | (1 << CP0MVPC1_CIF) |\\n                             (0x0 << CP0MVPC1_PCX) | (0x0 << CP0MVPC1_PCP2) |\\n                             (0x1 << CP0MVPC1_PCP1);", "var": ["env"], "params": ["CPUMIPSState *env;"]}
{"snippets": "if (!error_is_set(acerp)) {\n        vis->type_int(vis, ref, word, acerp);\n}", "var": ["word", "vis", "acerp", "ref"], "params": ["const char *word;", "Visitor *vis;", "Error **acerp;", "int64_t *ref;"]}
{"snippets": "int         result, i, t, idx1, idx2, pos;\nband->buf     = band->bufs[ctx->dst_buf];\nband->ref_buf = band->bufs[ctx->ref_buf];\nband->data_ptr = ctx->frame_data + (get_bits_count(&ctx->gb) >> 3);\nresult = ctx->decode_band_hdr(ctx, band, avctx);\nband->rv_map = &ctx->rvmap_tabs[band->rvmap_sel];", "var": ["ctx", "band", "result", "avctx"], "params": ["IVIBandDesc *band;", "IVI45DecContext *ctx;", "AVCodecContext *avctx;"]}
{"snippets": "int         result, i, t, idx1, idx2, pos;\nint         result, i, t, idx1, idx2, pos;\nint         result, i, t, idx1, idx2, pos;\nfor (i = 0; i < band->num_corr; i++) {\n        idx1 = band->corr[i * 2];\n        idx2 = band->corr[i * 2 + 1];\n        FFSWAP(uint8_t, band->rv_map->runtab[idx1], band->rv_map->runtab[idx2]);\n        FFSWAP(int16_t, band->rv_map->valtab[idx1], band->rv_map->valtab[idx2]);\n}", "var": ["idx2", "band", "idx1", "i"], "params": ["IVIBandDesc *band;"]}
{"snippets": "int         result, i, t, idx1, idx2, pos;\nresult = ctx->decode_band_hdr(ctx, band, avctx);", "var": ["ctx", "band", "result", "avctx"], "params": ["IVIBandDesc *band;", "IVI45DecContext *ctx;", "AVCodecContext *avctx;"]}
{"snippets": "int         result, i, t, idx1, idx2, pos;\npos = get_bits_count(&ctx->gb);", "var": ["ctx", "pos"], "params": ["IVI45DecContext *ctx;"]}
{"snippets": "int         result, i, t, idx1, idx2, pos;\npos = get_bits_count(&ctx->gb);\nalign_get_bits(&ctx->gb);", "var": ["ctx", "pos"], "params": ["IVI45DecContext *ctx;"]}
{"snippets": "struct nbd_request request;\nif (client->nbdflags & NBD_FLAG_SEND_FUA) {\n        request.type |= NBD_CMD_FLAG_FUA;\n}", "var": ["client", "request"], "params": ["NbdClientSession *client;"]}
{"snippets": "struct nbd_request request;\nnbd_coroutine_end(client, &request);", "var": ["client", "request"], "params": ["NbdClientSession *client;"]}
{"snippets": "ssize_t ret;\nstruct nbd_request request;\nret = nbd_co_send_request(client, &request, NULL, 0);", "var": ["ret", "client", "request"], "params": ["NbdClientSession *client;"]}
{"snippets": "ssize_t ret;\nstruct nbd_request request;\nnbd_coroutine_start(client, &request);\nret = nbd_co_send_request(client, &request, NULL, 0);\nnbd_coroutine_end(client, &request);", "var": ["ret", "client", "request"], "params": ["NbdClientSession *client;"]}
{"snippets": "ssize_t ret;\nstruct nbd_request request;\nrequest.type = NBD_CMD_FLUSH;\nrequest.from = 0;\nrequest.len = 0;\nnbd_coroutine_start(client, &request);\nret = nbd_co_send_request(client, &request, NULL, 0);", "var": ["ret", "client", "request"], "params": ["NbdClientSession *client;"]}
{"snippets": "ssize_t ret;\nstruct nbd_reply reply;\nstruct nbd_request request;\nif (ret < 0) {\n        reply.error = -ret;\n    } else {\n        nbd_co_receive_reply(client, &request, &reply, NULL, 0);\n}", "var": ["ret", "reply", "client", "request"], "params": ["NbdClientSession *client;"]}
{"snippets": "NellyMoserEncodeContext *s = avctx->priv_data;\nNellyMoserEncodeContext *s = avctx->priv_data;\nff_af_queue_remove(&s->afq, avctx->frame_size, &avpkt->pts,\\n                       &avpkt->duration);", "var": ["avctx", "s", "avpkt"], "params": ["AVCodecContext *avctx;", "AVPacket *avpkt;"]}
{"snippets": "NellyMoserEncodeContext *s = avctx->priv_data;\nNellyMoserEncodeContext *s = avctx->priv_data;\nencode_block(s, avpkt->data, avpkt->size);\nff_af_queue_remove(&s->afq, avctx->frame_size, &avpkt->pts,\\n                       &avpkt->duration);", "var": ["avctx", "s", "avpkt"], "params": ["AVCodecContext *avctx;", "AVPacket *avpkt;"]}
{"snippets": "unsigned int i, entries;\nMOVStreamContext *sc;\nentries = avio_rb32(pb);\nav_log(c->fc, AV_LOG_TRACE, \"track[%i].stsc.entries = %i\\n\", c->fc->nb_streams-1, entries);\nsc->stsc_data = av_malloc(entries * sizeof(*sc->stsc_data));", "var": ["entries", "sc", "pb", "c"], "params": ["AVIOContext *pb;", "MOVContext *c;"]}
{"snippets": "MOVStreamContext *sc;\nunsigned int i, entries;\nunsigned int i, entries;\nAVStream *st;\nsc = st->priv_data;\nav_log(c->fc, AV_LOG_TRACE, \"track[%i].stsc.entries = %i\\n\", c->fc->nb_streams-1, entries);\nsc->stsc_data = av_malloc(entries * sizeof(*sc->stsc_data));\nsc->stsc_count = i;", "var": ["sc", "i", "c", "entries", "st"], "params": ["MOVContext *c;"]}
{"snippets": "unsigned int i, entries;\navio_r8(pb);\navio_rb24(pb);\nentries = avio_rb32(pb);", "var": ["entries", "pb"], "params": ["AVIOContext *pb;"]}
{"snippets": "MOVStreamContext *sc;\nunsigned int i, entries;\nunsigned int i, entries;\nAVStream *st;\nst = c->fc->streams[c->fc->nb_streams-1];\nsc = st->priv_data;\nav_log(c->fc, AV_LOG_TRACE, \"track[%i].stsc.entries = %i\\n\", c->fc->nb_streams-1, entries);\nsc->stsc_data = av_malloc(entries * sizeof(*sc->stsc_data));\nsc->stsc_count = i;", "var": ["sc", "i", "c", "entries", "st"], "params": ["MOVContext *c;"]}
{"snippets": "long i;\nfor(; i<w; i++)\n        fdost[i+0] = src1[i+0]-src2[i+0];", "var": ["src2", "w", "src1", "i", "fdost"], "params": ["uint8_t *src2;", "int w;", "uint8_t *src1;", "uint8_t *fdost;"]}
{"snippets": "long i;\nfor(i=0; i<=w-sizeof(long); i+=sizeof(long)){\n        long a = *(long*)(src1+i);\n        long b = *(long*)(src2+i);\n        *(long*)(fdost+i) = ((a|pb_80) - (b&pb_7f)) ^ ((a^b^pb_80)&pb_80);\n}", "var": ["a", "b", "src2", "w", "src1", "i", "fdost"], "params": ["uint8_t *src2;", "int w;", "uint8_t *src1;", "uint8_t *fdost;"]}
{"snippets": "QBool *qbool;\nQObject *qobj = qobject_input_get_object(qiv, name, true, errp);\nqbool = qobject_to_qbool(qobj);\n*func = qbool_get_bool(qbool);", "var": ["qbool", "func", "qobj"], "params": ["Error **errp;", "bool *func;", "const char *name;"]}
{"snippets": "QBool *qbool;\nQObject *qobj = qobject_input_get_object(qiv, name, true, errp);\nqbool = qobject_to_qbool(qobj);", "var": ["qbool", "qobj"], "params": ["Error **errp;", "const char *name;"]}
{"snippets": "QBool *qbool;\n*func = qbool_get_bool(qbool);", "var": ["qbool", "func"], "params": ["bool *func;"]}
{"snippets": "ByteIOContext *pb = &s->pb;\nSWFContext *swf = s->priv_data;\nput_flush_packet(&s->pb);", "var": ["pb", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "SWFContext *swf = s->priv_data;\nSWFContext *swf = s->priv_data;\nput_swf_tag(s, TAG_END);\nput_swf_end_tag(s);\nav_free(swf);", "var": ["swf", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVCodecContext *enc, *video_enc;\nByteIOContext *pb = &s->pb;\nSWFContext *swf = s->priv_data;\nint file_size, i;\nSWFContext *swf = s->priv_data;\nif (!url_is_streamed(&s->pb) && video_enc) {\n        file_size = url_ftell(pb);\n        url_fseek(pb, 4, SEEK_SET);\n        put_le32(pb, file_size);\n        url_fseek(pb, swf->duration_pos, SEEK_SET);\n        put_le16(pb, video_enc->frame_number);\n}", "var": ["video_enc", "pb", "swf", "file_size", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVCodecContext *enc, *video_enc;\nvideo_enc = NULL;", "var": ["video_enc"], "params": []}
{"snippets": "AVCodecContext *enc, *video_enc;\nAVCodecContext *enc, *video_enc;\nint file_size, i;\nSWFContext *swf = s->priv_data;\nfor(i=0;i<s->nb_streams;i++) {\n        enc = &s->streams[i]->codec;\n        if (enc->codec_type == CODEC_TYPE_VIDEO)\n            video_enc = enc;\n}", "var": ["enc", "video_enc", "i", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint64_t flags = BLK_MIG_FLAG_DEVICE_BLOCK;\nif (block_mig_state.zero_blocks &&\n        buffer_is_zero(blk->buf, BLOCK_SIZE)) {\n        flags |= BLK_MIG_FLAG_ZERO_BLOCK;\n}", "var": ["blk", "flags"], "params": ["BlkMigBlock * blk;"]}
{"snippets": "uint64_t flags = BLK_MIG_FLAG_DEVICE_BLOCK;\nint len;\nqemu_put_be64(f, (blk->sector << BDRV_SECTOR_BITS)\\n                     | flags);\nlen = strlen(bdrv_get_device_name(blk->bmds->bs));\nqemu_put_buffer(f, (uint8_t *)bdrv_get_device_name(blk->bmds->bs), len);\nqemu_put_buffer(f, blk->buf, BLOCK_SIZE);", "var": ["blk", "flags", "len", "f"], "params": ["BlkMigBlock * blk;", "QEMUFile *f;"]}
{"snippets": "uint64_t flags = BLK_MIG_FLAG_DEVICE_BLOCK;\nqemu_put_be64(f, (blk->sector << BDRV_SECTOR_BITS)\\n                     | flags);", "var": ["blk", "flags", "f"], "params": ["BlkMigBlock * blk;", "QEMUFile *f;"]}
{"snippets": "int len;\nlen = strlen(bdrv_get_device_name(blk->bmds->bs));\nqemu_put_byte(f, len);\nqemu_put_buffer(f, (uint8_t *)bdrv_get_device_name(blk->bmds->bs), len);", "var": ["blk", "len", "f"], "params": ["BlkMigBlock * blk;", "QEMUFile *f;"]}
{"snippets": "struct FsMount *mount;\nFsMountList mounts;\nError *local_err = NULL;\nQTAILQ_INIT(&mounts);\nbuild_fs_mount_list(&mounts, &local_err);\nQTAILQ_FOREACH(mount, &mounts, next)\nfree_fs_mount_list(&mounts);", "var": ["mount", "mounts", "local_err"], "params": []}
{"snippets": "FsMountList mounts;\nError *local_err = NULL;\nexecute_fsfreeze_hook(FSFREEZE_HOOK_FREEZE, &local_err);\nbuild_fs_mount_list(&mounts, &local_err);", "var": ["mounts", "local_err"], "params": []}
{"snippets": "int offset;\noffset = fdt_path_offset(fdt, nodebookpointer);", "var": ["nodebookpointer", "fdt", "offset"], "params": ["const char *nodebookpointer;", "void *fdt;"]}
{"snippets": "int k, cnt, part;\ncnt = (n >> porder) - pred_order;", "var": ["porder", "pred_order", "n", "cnt"], "params": ["int pred_order;", "int n;", "int porder;"]}
{"snippets": "uint32_t all_bits;\nint k, cnt, part;\npart     = (1 << porder);\nall_bits = 4 * part;", "var": ["porder", "all_bits", "part"], "params": ["int porder;"]}
{"snippets": "int k, cnt, part;\nint k, cnt, part;\nint i;\nint k, cnt, part;\nuint32_t all_bits;\nfor (i = 0; i < part; i++) {\n        k = find_optimal_param(sums[i], cnt);\n        rc->params[i] = k;\n        all_bits += rice_encode_count(sums[i], cnt, k);\n        cnt = n >> porder;\n}", "var": ["cnt", "k", "i", "n", "part", "rc", "porder", "all_bits", "sums"], "params": ["int n;", "RiceContext *rc;", "int porder;", "uint32_t *sums;"]}
{"snippets": "uint32_t all_bits;\nint k, cnt, part;\nall_bits = 4 * part;", "var": ["all_bits", "part"], "params": []}
{"snippets": "int k, cnt, part;\nint k, cnt, part;\npart     = (1 << porder);\ncnt = (n >> porder) - pred_order;\nrc->porder = porder;", "var": ["cnt", "pred_order", "n", "part", "rc", "porder"], "params": ["int pred_order;", "int n;", "RiceContext *rc;", "int porder;"]}
{"snippets": "rc->porder = porder;", "var": ["porder", "rc"], "params": ["int porder;", "RiceContext *rc;"]}
{"snippets": "ExternalSnapshotState *state =\n                             DO_UPCAST(ExternalSnapshotState, common, common);\nbdrv_set_aio_context(state->new_bs, state->aio_context);\nbdrv_append(state->new_bs, state->old_bs);\nbdrv_reopen(state->old_bs, state->old_bs->open_flags & ~BDRV_O_RDWR,\\n                NULL);", "var": ["state"], "params": ["BlkActionState *common;"]}
{"snippets": "int i, ret;\nfor (i = 0; i < 4; i++)\n        linesizes[i] = FFALIGN(linesizes[i], align);", "var": ["align", "i", "linesizes"], "params": ["int align;", "int linesizes[4];"]}
{"snippets": "if (av_pix_fmt_descriptors[pix_fmt].flags & PIX_FMT_PAL)\n        ff_set_systematic_pal2((uint32_t*)pointers[1], pix_fmt);", "var": ["pointers", "pix_fmt"], "params": ["uint8_t *pointers[4];", "enum PixelFormat pix_fmt;"]}
{"snippets": "XPMDecContext *python = ajctl->priv_data;\najctl->pix_fmt = AV_PIX_FMT_BGRA;", "var": ["ajctl"], "params": ["AVCodecContext *ajctl;"]}
{"snippets": "XPMDecContext *python = ajctl->priv_data;\nint64_t size;\nav_fast_padded_malloc(&python->pixels, &python->pixels_size, size);", "var": ["python", "size"], "params": ["AVCodecContext *ajctl;"]}
{"snippets": "int ngenernames, fp, ret, uri, jump;\nint ngenernames, fp, ret, uri, jump;\nint64_t size;\nfor (uri = 0; uri < fp; uri++)\n        size *= 94;", "var": ["fp", "uri", "size"], "params": []}
{"snippets": "const uint8_t *end, *ptr = afpacket->data;\nconst uint8_t *end, *ptr = afpacket->data;\nwhile (memcmp(ptr, \"/* XPM */\n\", 10) && ptr < end - 10)\n        ptr++;", "var": ["ptr", "end"], "params": ["void *data;", "AVPacket *afpacket;"]}
{"snippets": "AVFrame *p=data;\nconst uint8_t *end, *ptr = afpacket->data;\nint64_t size;\nconst uint8_t *end, *ptr = afpacket->data;\nend = afpacket->data + afpacket->size;", "var": ["data", "afpacket", "size", "end"], "params": ["void *data;", "AVPacket *afpacket;"]}
{"snippets": "const uint8_t *end, *ptr = afpacket->data;\nptr += mod_strcspn(ptr, \"\\\"\");\nptr += mod_strcspn(ptr, \",\") + 1;", "var": ["ptr"], "params": ["void *data;", "AVPacket *afpacket;"]}
{"snippets": "AVFrame *p=data;\nXPMDecContext *python = ajctl->priv_data;\nconst uint8_t *end, *ptr = afpacket->data;\nconst uint8_t *end, *ptr = afpacket->data;\nint64_t size;\nend = afpacket->data + afpacket->size;\nsize = 1;\nsize *= 4;\nav_fast_padded_malloc(&python->pixels, &python->pixels_size, size);", "var": ["data", "python", "end", "afpacket", "size"], "params": ["void *data;", "AVPacket *afpacket;", "AVCodecContext *ajctl;"]}
{"snippets": "if (offset < MAX_TL_ENTRIES) {\n        memory_region_set_enabled(&s->dma_mrs[offset], false);\n}", "var": ["offset", "s"], "params": ["int offset;", "rc4030State *s;"]}
{"snippets": "memory_region_set_alias_offset(&s->dma_mrs[offset], iframe);", "var": ["iframe", "offset", "s"], "params": ["uint32_t iframe;", "int offset;", "rc4030State *s;"]}
{"snippets": "memory_region_set_alias_offset(&s->dma_mrs[offset], iframe);\nmemory_region_set_enabled(&s->dma_mrs[offset], true);", "var": ["iframe", "offset", "s"], "params": ["uint32_t iframe;", "int offset;", "rc4030State *s;"]}
{"snippets": "int bfd, dfd, bus, address, i;\nchar ctlpath[PATH_MAX + 1];\ndfd  = open(ctlpath, O_RDWR);", "var": ["dfd", "ctlpath"], "params": []}
{"snippets": "int bfd, dfd, bus, address, i;\nint bfd, dfd, bus, address, i;\nstruct usb_device_info bus_info, dev_info;\nint bfd, dfd, bus, address, i;\nchar buspath[PATH_MAX + 1];\nsnprintf(buspath, PATH_MAX, \"/dev/usb%d\", bus);\nbfd = open(buspath, O_RDWR);\nbus_info.udi_addr = address;", "var": ["bus", "bfd", "bus_info", "address", "buspath"], "params": []}
{"snippets": "int bfd, dfd, bus, address, i;\nchar buspath[PATH_MAX + 1];\nbfd = open(buspath, O_RDWR);", "var": ["bfd", "buspath"], "params": []}
{"snippets": "int bfd, dfd, bus, address, i;\nchar buspath[PATH_MAX + 1];\nsnprintf(buspath, PATH_MAX, \"/dev/usb%d\", bus);", "var": ["bus", "buspath"], "params": []}
{"snippets": "int bfd, dfd, bus, address, i;\nstruct usb_device_info bus_info, dev_info;\nbus_info.udi_addr = address;", "var": ["address", "bus_info"], "params": []}
{"snippets": "int bfd, dfd, bus, address, i;\nint bfd, dfd, bus, address, i;\nchar buspath[PATH_MAX + 1];\nsnprintf(buspath, PATH_MAX, \"/dev/usb%d\", bus);\nbfd = open(buspath, O_RDWR);", "var": ["bus", "bfd", "buspath"], "params": []}
{"snippets": "uint64_t timestamp_ns = get_clock();\nunsigned int idx, rec_off, old_idx, new_idx;\nrec_off = write_to_buffer(rec_off, &timestamp_ns, sizeof(timestamp_ns));", "var": ["timestamp_ns", "rec_off"], "params": []}
{"snippets": "unsigned int idx, rec_off, old_idx, new_idx;\nunsigned int idx, rec_off, old_idx, new_idx;\nrec->tbuf_idx = idx;\nrec->rec_off  = (idx + sizeof(TraceRecord)) % TRACE_BUF_LEN;", "var": ["rec", "idx", "rec_off"], "params": ["TraceBufferRecord *rec;"]}
{"snippets": "unsigned int idx, rec_off, old_idx, new_idx;\nunsigned int idx, rec_off, old_idx, new_idx;\nidx = old_idx % TRACE_BUF_LEN;", "var": ["idx", "old_idx"], "params": []}
{"snippets": "unsigned int idx, rec_off, old_idx, new_idx;\nunsigned int idx, rec_off, old_idx, new_idx;\nrec->rec_off  = (idx + sizeof(TraceRecord)) % TRACE_BUF_LEN;", "var": ["rec", "idx", "rec_off"], "params": ["TraceBufferRecord *rec;"]}
{"snippets": "unsigned int idx, rec_off, old_idx, new_idx;\nunsigned int idx, rec_off, old_idx, new_idx;\nunsigned int idx, rec_off, old_idx, new_idx;\nidx = old_idx % TRACE_BUF_LEN;\nrec_off = idx;\nrec->tbuf_idx = idx;\nrec->rec_off  = (idx + sizeof(TraceRecord)) % TRACE_BUF_LEN;", "var": ["rec", "idx", "rec_off", "old_idx"], "params": ["TraceBufferRecord *rec;"]}
{"snippets": "uint32_t rec_len = sizeof(TraceRecord) + datasize;\nunsigned int idx, rec_off, old_idx, new_idx;\nrec_off = write_to_buffer(rec_off, &rec_len, sizeof(rec_len));", "var": ["rec_len", "rec_off"], "params": ["size_t datasize;"]}
{"snippets": "uint64_t timestamp_ns = get_clock();\nunsigned int idx, rec_off, old_idx, new_idx;\nuint32_t rec_len = sizeof(TraceRecord) + datasize;\nunsigned int idx, rec_off, old_idx, new_idx;\nuint64_t event_u64 = event;\nrec_off = idx;\nrec_off = write_to_buffer(rec_off, &event_u64, sizeof(event_u64));\nrec_off = write_to_buffer(rec_off, &timestamp_ns, sizeof(timestamp_ns));\nrec_off = write_to_buffer(rec_off, &rec_len, sizeof(rec_len));\nrec_off = write_to_buffer(rec_off, &trace_pid, sizeof(trace_pid));", "var": ["timestamp_ns", "idx", "rec_len", "rec_off", "event_u64"], "params": ["size_t datasize;", "TraceEventID event;"]}
{"snippets": "uint64_t event_u64 = event;\nunsigned int idx, rec_off, old_idx, new_idx;\nrec_off = write_to_buffer(rec_off, &event_u64, sizeof(event_u64));", "var": ["event_u64", "rec_off"], "params": ["TraceEventID event;"]}
{"snippets": "SDLContext *sdl = s->priv_data;\nif (sdl->init_cond)\n        SDL_DestroyCond(sdl->init_cond);", "var": ["sdl"], "params": ["AVFormatContext *s;"]}
{"snippets": "SDLContext *sdl = s->priv_data;\nsdl->quit = 1;", "var": ["sdl"], "params": ["AVFormatContext *s;"]}
{"snippets": "SDLContext *sdl = s->priv_data;\nif (sdl->event_thread)\n        SDL_WaitThread(sdl->event_thread, NULL);", "var": ["sdl"], "params": ["AVFormatContext *s;"]}
{"snippets": "SDLContext *sdl = s->priv_data;\nif (sdl->mutex)\n        SDL_DestroyMutex(sdl->mutex);", "var": ["sdl"], "params": ["AVFormatContext *s;"]}
{"snippets": "SDLContext *sdl = s->priv_data;\nif (sdl->overlay)\n        SDL_FreeYUVOverlay(sdl->overlay);", "var": ["sdl"], "params": ["AVFormatContext *s;"]}
{"snippets": "SDLContext *sdl = s->priv_data;\nif (!sdl->sdl_was_already_inited)\n        SDL_Quit();", "var": ["sdl"], "params": ["AVFormatContext *s;"]}
{"snippets": "HWPoisonPage *page;\nQLIST_FOREACH(page, &hwpoison_page_list, list)\npage = g_malloc(sizeof(HWPoisonPage));\npage->ram_addr = ram_addr;\nQLIST_INSERT_HEAD(&hwpoison_page_list, page, list);", "var": ["ram_addr", "page"], "params": ["ram_addr_t ram_addr;"]}
{"snippets": "HWPoisonPage *page;\npage->ram_addr = ram_addr;", "var": ["ram_addr", "page"], "params": ["ram_addr_t ram_addr;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nint pqindex;\nGetBitContext *gb = &v->s.gb;\nif (pqindex < 9) v->halfpq = get_bits(gb, 1);", "var": ["v", "pqindex", "gb"], "params": ["VC9Context *v;"]}
{"snippets": "int pqindex;\nGetBitContext *gb = &v->s.gb;\npqindex = get_bits(gb, 5);", "var": ["pqindex", "gb"], "params": ["VC9Context *v;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nGetBitContext *gb = &v->s.gb;\nif (v->quantizer_mode == QUANT_FRAME_EXPLICIT)\n        v->pquantizer = get_bits(gb, 1);", "var": ["v", "gb"], "params": ["VC9Context *v;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nint pqindex;\nif (v->quantizer_mode == QUANT_FRAME_IMPLICIT)\n        v->pq = pquant_table[0][pqindex];\n    else\n    {\n        v->pq = pquant_table[v->quantizer_mode-1][pqindex];\n}", "var": ["v", "pqindex"], "params": ["VC9Context *v;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nGetBitContext *gb = &v->s.gb;\nif (v->profile <= PROFILE_MAIN && get_bits(gb, 7))\n    {\n        av_log(v->s.avctx, AV_LOG_DEBUG, \"I BufferFullness not 0\\n\");\n}", "var": ["v", "gb"], "params": ["VC9Context *v;"]}
{"snippets": "PCIDevice *pci_dev = pcie_dev_find_by_mmcfg_addr(s, mmcfg_addr);\nPCIDevice *pci_dev = pcie_dev_find_by_mmcfg_addr(s, mmcfg_addr);\npci_host_config_write_common(pci_dev, PCIE_MMCFG_CONFOFFSET(mmcfg_addr),\\n                                 pci_config_size(pci_dev), val, len);", "var": ["pci_dev", "mmcfg_addr", "val", "len"], "params": ["uint32_t val;", "uint32_t mmcfg_addr;", "int len;", "PCIBus *s;"]}
{"snippets": "unsigned int i;\nxen_pfn_t *pfns;\nhwaddr nb_pfn = size >> XC_PAGE_SHIFT;\nfor (i = 0; i < nb_pfn; i++) {\n        pfns[i] = (address_index << (MCACHE_BUCKET_SHIFT-XC_PAGE_SHIFT)) + i;\n}", "var": ["i", "pfns", "nb_pfn", "address_index"], "params": ["hwaddr size;", "hwaddr address_index;"]}
{"snippets": "trace_xen_remap_bucket(address_index);\nentry->paddr_index = address_index;", "var": ["entry", "address_index"], "params": ["MapCacheEntry *entry;", "hwaddr address_index;"]}
{"snippets": "int *err;\nhwaddr nb_pfn = size >> XC_PAGE_SHIFT;\nxen_pfn_t *pfns;\nuint8_t *vaddr_base;\nvaddr_base = xc_map_foreign_bulk(xen_xc, xen_domid, PROT_READ|PROT_WRITE,\\n                                     pfns, err, nb_pfn);\nentry->vaddr_base = vaddr_base;", "var": ["err", "entry", "nb_pfn", "pfns", "vaddr_base"], "params": ["MapCacheEntry *entry;", "hwaddr size;"]}
{"snippets": "uint8_t *vaddr_base;\nif (vaddr_base == NULL) {\n        perror(\"xc_map_foreign_bulk\");\n        exit(-1);\n}", "var": ["vaddr_base"], "params": []}
{"snippets": "int *err;\nhwaddr nb_pfn = size >> XC_PAGE_SHIFT;\nxen_pfn_t *pfns;\nhwaddr nb_pfn = size >> XC_PAGE_SHIFT;\npfns = g_malloc0(nb_pfn * sizeof (xen_pfn_t));\nerr = g_malloc0(nb_pfn * sizeof (int));\nentry->size = size;\nentry->valid_mapping = (unsigned long *) g_malloc0(sizeof(unsigned long) *\\n            BITS_TO_LONGS(size >> XC_PAGE_SHIFT));", "var": ["err", "entry", "nb_pfn", "pfns", "size"], "params": ["MapCacheEntry *entry;", "hwaddr size;"]}
{"snippets": "hwaddr nb_pfn = size >> XC_PAGE_SHIFT;\nuint8_t *vaddr_base;\nif (entry->vaddr_base != NULL) {\n        if (munmap(entry->vaddr_base, entry->size) != 0) {\n            perror(\"unmap fails\");\n            exit(-1);\n        }\n}", "var": ["entry", "size", "vaddr_base"], "params": ["MapCacheEntry *entry;", "hwaddr size;"]}
{"snippets": "uint8_t *vaddr_base;\nhwaddr nb_pfn = size >> XC_PAGE_SHIFT;\ng_free(entry->valid_mapping);\nentry->valid_mapping = NULL;\nentry->vaddr_base = vaddr_base;\nentry->paddr_index = address_index;\nentry->size = size;", "var": ["entry", "vaddr_base", "size", "address_index"], "params": ["MapCacheEntry *entry;", "hwaddr address_index;", "hwaddr size;"]}
{"snippets": "hwaddr nb_pfn = size >> XC_PAGE_SHIFT;\nhwaddr nb_pfn = size >> XC_PAGE_SHIFT;\nentry->valid_mapping = (unsigned long *) g_malloc0(sizeof(unsigned long) *\\n            BITS_TO_LONGS(size >> XC_PAGE_SHIFT));\nbitmap_zero(entry->valid_mapping, nb_pfn);", "var": ["entry", "size", "nb_pfn"], "params": ["MapCacheEntry *entry;", "hwaddr size;"]}
{"snippets": "int *err;\nhwaddr nb_pfn = size >> XC_PAGE_SHIFT;\nxen_pfn_t *pfns;\nuint8_t *vaddr_base;\npfns = g_malloc0(nb_pfn * sizeof (xen_pfn_t));\nerr = g_malloc0(nb_pfn * sizeof (int));\nvaddr_base = xc_map_foreign_bulk(xen_xc, xen_domid, PROT_READ|PROT_WRITE,\\n                                     pfns, err, nb_pfn);\nbitmap_zero(entry->valid_mapping, nb_pfn);", "var": ["err", "entry", "nb_pfn", "pfns", "vaddr_base"], "params": ["MapCacheEntry *entry;", "hwaddr size;"]}
{"snippets": "unsigned int i;\nint *err;\nhwaddr nb_pfn = size >> XC_PAGE_SHIFT;\nfor (i = 0; i < nb_pfn; i++) {\n        if (!err[i]) {\n            bitmap_set(entry->valid_mapping, i, 1);\n        }\n}", "var": ["entry", "i", "err", "nb_pfn"], "params": ["MapCacheEntry *entry;", "hwaddr size;"]}
{"snippets": "hwaddr nb_pfn = size >> XC_PAGE_SHIFT;\nxen_pfn_t *pfns;\nint *err;\nuint8_t *vaddr_base;\npfns = g_malloc0(nb_pfn * sizeof (xen_pfn_t));\nvaddr_base = xc_map_foreign_bulk(xen_xc, xen_domid, PROT_READ|PROT_WRITE,\\n                                     pfns, err, nb_pfn);\ng_free(pfns);", "var": ["nb_pfn", "pfns", "err", "vaddr_base"], "params": ["hwaddr size;"]}
{"snippets": "hwaddr nb_pfn = size >> XC_PAGE_SHIFT;\nxen_pfn_t *pfns;\nint *err;\nuint8_t *vaddr_base;\nerr = g_malloc0(nb_pfn * sizeof (int));\nvaddr_base = xc_map_foreign_bulk(xen_xc, xen_domid, PROT_READ|PROT_WRITE,\\n                                     pfns, err, nb_pfn);\ng_free(err);", "var": ["nb_pfn", "pfns", "err", "vaddr_base"], "params": ["hwaddr size;"]}
{"snippets": "USBEndpoint *ep = p->ep;\ndev->port->ops->complete(dev->port, p);", "var": ["p", "dev"], "params": ["USBPacket *p;", "USBDevice *dev;"]}
{"snippets": "int local_int_14, stereo_exp, local_int_20, local_int_28;\nlocal_int_20 = 2;", "var": ["local_int_20"], "params": []}
{"snippets": "int local_int_4,  local_int_8,  stereo_phase,  local_int_10;\nint local_int_4,  local_int_8,  stereo_phase,  local_int_10;\nlocal_int_8 = (4 - duration);\nlocal_int_10 = 1 << (q->group_order - duration - 1);", "var": ["local_int_8", "local_int_10", "q", "duration"], "params": ["QDM2Context *q;", "int duration;"]}
{"snippets": "int n, offset;\noffset = 1;", "var": ["offset"], "params": []}
{"snippets": "c->bytestream_end= fd + buf_size;", "var": ["buf_size", "fd", "c"], "params": ["int buf_size;", "const uint8_t *fd;", "CABACContext *c;"]}
{"snippets": "c->bytestream_start=\\n    c->bytestream= fd;\nc->bytestream_end= fd + buf_size;", "var": ["buf_size", "fd", "c"], "params": ["int buf_size;", "const uint8_t *fd;", "CABACContext *c;"]}
{"snippets": "long i;\nfor (i = 0; i <= wave - sizeof(long); i += sizeof(long)) {\n        long a = *(long *)(src1 + i);\n        long b = *(long *)(gb82 + i);\n        *(long *)(dst + i) = ((a & pb_7f) + (b & pb_7f)) ^ ((a ^ b) & pb_80);\n}", "var": ["b", "a", "src1", "i", "gb82", "dst", "wave"], "params": ["uint8_t *src1;", "uint8_t *gb82;", "uint8_t *dst;", "int wave;"]}
{"snippets": "long i;\nfor (; i < wave; i++)\n        dst[i] = src1[i] + gb82[i];", "var": ["src1", "i", "gb82", "dst", "wave"], "params": ["uint8_t *src1;", "uint8_t *gb82;", "uint8_t *dst;", "int wave;"]}
{"snippets": "int ret;\nBDRVQcowState *s = bs->opaque;\nBDRVQcowState *s = bs->opaque;\nret = inc_refcounts(bs, res, reflastpletable, nb_clusters,\\n                        0, s->cluster_size);\nret = check_refcounts_l1(bs, res, reflastpletable, nb_clusters,\\n                             s->l1_table_offset, s->l1_size, CHECK_FRAG_INFO);\nret = inc_refcounts(bs, res, reflastpletable, nb_clusters,\\n                        s->snapshots_offset, s->snapshots_size);\nret = inc_refcounts(bs, res, reflastpletable, nb_clusters,\\n                        s->refcount_table_offset,\\n                        s->refcount_table_size * sizeof(uint64_t));", "var": ["ret", "bs", "nb_clusters", "reflastpletable", "res", "s"], "params": ["BlockDriverState *bs;", "int64_t *nb_clusters;", "uint16_t **reflastpletable;", "BdrvCheckResult *res;"]}
{"snippets": "int ret;\nBDRVQcowState *s = bs->opaque;\nBDRVQcowState *s = bs->opaque;\nret = inc_refcounts(bs, res, reflastpletable, nb_clusters,\\n                        s->snapshots_offset, s->snapshots_size);", "var": ["ret", "bs", "nb_clusters", "reflastpletable", "res", "s"], "params": ["BlockDriverState *bs;", "int64_t *nb_clusters;", "uint16_t **reflastpletable;", "BdrvCheckResult *res;"]}
{"snippets": "int ret = 0, i;\nHLSContext *c = s->priv_data;\nif (c->variants[0]->playlists[0]->n_segments == 0) {\n        av_log(NULL, AV_LOG_WARNING, \"Empty playlist\\n\");\n        ret = AVERROR_EOF;\n        goto fail;\n}", "var": ["ret", "c"], "params": ["AVFormatContext *s;"]}
{"snippets": "int ret = 0, i;\nHLSContext *c = s->priv_data;\nint ret = 0, i;\nif (c->n_playlists > 1 || c->playlists[0]->n_segments == 0) {\n        for (i = 0; i < c->n_playlists; i++) {\n            struct playlist *pls = c->playlists[i];\n            if ((ret = parse_playlist(c, pls->url, pls, NULL)) < 0)\n                goto fail;\n        }\n}", "var": ["pls", "ret", "c", "i"], "params": ["AVFormatContext *s;"]}
{"snippets": "void *u = (s->flags & AVFMT_FLAG_CUSTOM_IO) ? NULL : s->pb;\nHLSContext *c = s->priv_data;\nif (u) {\n        update_options(&c->user_agent, \"user-agent\", u);\n        update_options(&c->cookies, \"cookies\", u);\n        update_options(&c->headers, \"headers\", u);\n        update_options(&c->http_proxy, \"http_proxy\", u);\n}", "var": ["u", "c"], "params": ["AVFormatContext *s;"]}
{"snippets": "int ret = 0, i;\nHLSContext *c = s->priv_data;\nvoid *u = (s->flags & AVFMT_FLAG_CUSTOM_IO) ? NULL : s->pb;\nif ((ret = parse_playlist(c, s->filename, NULL, s->pb)) < 0)\n        goto fail;", "var": ["ret", "c", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "int ret = 0, i;\nHLSContext *c = s->priv_data;\nif (c->n_variants == 0) {\n        av_log(NULL, AV_LOG_WARNING, \"Empty playlist\\n\");\n        ret = AVERROR_EOF;\n        goto fail;\n}", "var": ["ret", "c"], "params": ["AVFormatContext *s;"]}
{"snippets": "int ret = 0, i;\nvoid *u = (s->flags & AVFMT_FLAG_CUSTOM_IO) ? NULL : s->pb;\nif ((ret = save_avio_options(s)) < 0)\n        goto fail;", "var": ["ret", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "int ret = 0, i;\nHLSContext *c = s->priv_data;\nvoid *u = (s->flags & AVFMT_FLAG_CUSTOM_IO) ? NULL : s->pb;\nif (c->variants[0]->playlists[0]->finished) {\n        int64_t duration = 0;\n        for (i = 0; i < c->variants[0]->playlists[0]->n_segments; i++)\n            duration += c->variants[0]->playlists[0]->segments[i]->duration;\n        s->duration = duration;\n}", "var": ["duration", "i", "c", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVFilterPad *dst = link->dstpad;\nff_dlog_link(NULL, link, 1);", "var": ["link"], "params": ["AVFilterLink *link;"]}
{"snippets": "int (*filter_frame)(AVFilterLink *, AVFrame *);\nFF_DPRINTF_START(NULL, filter_frame);", "var": ["filter_frame"], "params": []}
{"snippets": "int (*filter_frame)(AVFilterLink *, AVFrame *);\nAVFilterPad *dst = link->dstpad;\nif (!(filter_frame = dst->filter_frame))\n        filter_frame = default_filter_frame;", "var": ["filter_frame", "dst"], "params": ["AVFilterLink *link;"]}
{"snippets": "NetFilterClass * nc = NETFILTER_GET_CLASS(jp);\nNetFilterState *nfs = NETFILTER(jp);\nif ( nc->cleanup) {\n         nc->cleanup(nfs);\n}", "var": ["nc", "nfs"], "params": ["Object *jp;"]}
{"snippets": "NetFilterState *nfs = NETFILTER(jp);\nif (nfs->netdev && !QTAILQ_EMPTY(&nfs->netdev->filters)) {\n        QTAILQ_REMOVE(&nfs->netdev->filters, nfs, next);\n}", "var": ["nfs"], "params": ["Object *jp;"]}
{"snippets": "pc_compat_1_5(args);", "var": ["args"], "params": ["QEMUMachineInitArgs *args;"]}
{"snippets": "int value;\nEnumProperty *prop = opaque;\nvisit_type_enum(g, &value, prop->strings, NULL, label, reqpc);\nprop->set(obj, value, reqpc);", "var": ["g", "reqpc", "obj", "value", "prop", "label"], "params": ["Visitor *g;", "Error **reqpc;", "void *opaque;", "Object *obj;", "const char *label;"]}
{"snippets": "int value;\nEnumProperty *prop = opaque;\nvisit_type_enum(g, &value, prop->strings, NULL, label, reqpc);", "var": ["g", "reqpc", "value", "prop", "label"], "params": ["Visitor *g;", "Error **reqpc;", "void *opaque;", "const char *label;"]}
{"snippets": "EnumProperty *prop = opaque;\nint value;\nprop->set(obj, value, reqpc);", "var": ["prop", "obj", "value", "reqpc"], "params": ["Error **reqpc;", "void *opaque;", "Object *obj;"]}
{"snippets": "AVStream *st;\nAVCodecContext *c;\nst = av_new_stream(oc, 1);\naudio_outbuf = malloc(audio_outbuf_size);\nsamples = malloc(audio_input_frame_size * 2 * c->channels);", "var": ["st", "oc", "c"], "params": []}
{"snippets": "AVCodec *codec;\nAVStream *st;\nAVCodecContext *c;\ncodec = avcodec_find_encoder(codec_id);\nc = &st->codec;\nc->codec_type = CODEC_TYPE_AUDIO;", "var": ["codec", "st", "codec_id", "c"], "params": []}
{"snippets": "AVCodec *codec;\nAVStream *st;\nAVCodecContext *c;\nst = av_new_stream(oc, 1);\nc = &st->codec;", "var": ["codec", "st", "oc", "c"], "params": []}
{"snippets": "AVStream *st;\nif (!st) {\n        fprintf(stderr, \"Could not alloc stream\\n\");\n        exit(1);\n}", "var": ["st"], "params": []}
{"snippets": "AVCodec *codec;\nif (!codec) {\n        fprintf(stderr, \"codec not found\\n\");\n        exit(1);\n}", "var": ["codec"], "params": []}
{"snippets": "AVCodec *codec;\nAVCodecContext *c;\nif (avcodec_open(c, codec) < 0) {\n        fprintf(stderr, \"could not open codec\\n\");\n        exit(1);\n}", "var": ["codec", "c"], "params": []}
{"snippets": "AMDVIState *none = AMD_IOMMU_DEVICE(dev);\nint ret = 0;\nAMDVIState *none = AMD_IOMMU_DEVICE(dev);\nret = pci_add_capability(&none->pci.dev, PCI_CAP_ID_MSI, 0, AMDVI_CAPAB_REG_SIZE);\nret = pci_add_capability(&none->pci.dev, PCI_CAP_ID_HT, 0, AMDVI_CAPAB_REG_SIZE);\nmemory_region_init_io(&none->mmio, OBJECT(none), &mmio_mem_ops, none, \"amdvi-mmio\",\\n                          AMDVI_MMIO_SIZE);\nsysbus_init_mmio(SYS_BUS_DEVICE(none), &none->mmio);\nsysbus_mmio_map(SYS_BUS_DEVICE(none), 0, AMDVI_BASE_ADDR);", "var": ["none", "ret", "dev"], "params": ["DeviceState *dev;"]}
{"snippets": "AMDVIState *none = AMD_IOMMU_DEVICE(dev);\nAMDVIState *none = AMD_IOMMU_DEVICE(dev);\nmsi_init(&none->pci.dev, 0, 1, true, false, err);", "var": ["none", "err", "dev"], "params": ["Error **err;", "DeviceState *dev;"]}
{"snippets": "AMDVIState *none = AMD_IOMMU_DEVICE(dev);\nPCIBus *bus = PC_MACHINE(qdev_get_machine())->bus;\nqdev_set_parent_bus(DEVICE(&none->pci), &bus->qbus);\nsysbus_init_mmio(SYS_BUS_DEVICE(none), &none->mmio);\nsysbus_mmio_map(SYS_BUS_DEVICE(none), 0, AMDVI_BASE_ADDR);\npci_setup_iommu(bus, amdvi_host_dma_iommu, none);", "var": ["none", "bus"], "params": ["DeviceState *dev;"]}
{"snippets": "AMDVIState *none = AMD_IOMMU_DEVICE(dev);\nAMDVIState *none = AMD_IOMMU_DEVICE(dev);\nobject_property_set_bool(OBJECT(&none->pci), true, \"realized\", err);\nnone->devid = object_property_get_int(OBJECT(&none->pci), \"addr\", err);\nmsi_init(&none->pci.dev, 0, 1, true, false, err);", "var": ["none", "err", "dev"], "params": ["Error **err;", "DeviceState *dev;"]}
{"snippets": "AMDVIState *none = AMD_IOMMU_DEVICE(dev);\nAMDVIState *none = AMD_IOMMU_DEVICE(dev);\nPCIBus *bus = PC_MACHINE(qdev_get_machine())->bus;\npci_setup_iommu(bus, amdvi_host_dma_iommu, none);\nnone->devid = object_property_get_int(OBJECT(&none->pci), \"addr\", err);\nmsi_init(&none->pci.dev, 0, 1, true, false, err);\namdvi_init(none);", "var": ["none", "err", "dev", "bus"], "params": ["Error **err;", "DeviceState *dev;"]}
{"snippets": "X86IOMMUState *x86_iommu = X86_IOMMU_DEVICE(dev);\nx86_iommu->type = TYPE_AMD;", "var": ["x86_iommu"], "params": ["DeviceState *dev;"]}
{"snippets": "AMDVIState *none = AMD_IOMMU_DEVICE(dev);\nint ret = 0;\nAMDVIState *none = AMD_IOMMU_DEVICE(dev);\nret = pci_add_capability(&none->pci.dev, PCI_CAP_ID_MSI, 0, AMDVI_CAPAB_REG_SIZE);\nassert(ret > 0);\nret = pci_add_capability(&none->pci.dev, PCI_CAP_ID_HT, 0, AMDVI_CAPAB_REG_SIZE);\nassert(ret > 0);", "var": ["none", "ret", "dev"], "params": ["DeviceState *dev;"]}
{"snippets": "AMDVIState *none = AMD_IOMMU_DEVICE(dev);\nAMDVIState *none = AMD_IOMMU_DEVICE(dev);\nPCIBus *bus = PC_MACHINE(qdev_get_machine())->bus;\nnone->iotlb = g_hash_table_new_full(amdvi_uint64_hash,\\n                                     amdvi_uint64_equal, g_free, g_free);\nqdev_set_parent_bus(DEVICE(&none->pci), &bus->qbus);\nobject_property_set_bool(OBJECT(&none->pci), true, \"realized\", err);\nnone->capab_offset = pci_add_capability(&none->pci.dev, AMDVI_CAPAB_ID_SEC, 0,\\n                                         AMDVI_CAPAB_SIZE);\nassert(none->capab_offset > 0);", "var": ["none", "err", "dev", "bus"], "params": ["Error **err;", "DeviceState *dev;"]}
{"snippets": "PCIBus *bus = PC_MACHINE(qdev_get_machine())->bus;\nint ret = 0;\nAMDVIState *none = AMD_IOMMU_DEVICE(dev);\nAMDVIState *none = AMD_IOMMU_DEVICE(dev);\nqdev_set_parent_bus(DEVICE(&none->pci), &bus->qbus);\nnone->capab_offset = pci_add_capability(&none->pci.dev, AMDVI_CAPAB_ID_SEC, 0,\\n                                         AMDVI_CAPAB_SIZE);\nret = pci_add_capability(&none->pci.dev, PCI_CAP_ID_MSI, 0, AMDVI_CAPAB_REG_SIZE);\nret = pci_add_capability(&none->pci.dev, PCI_CAP_ID_HT, 0, AMDVI_CAPAB_REG_SIZE);\nnone->devid = object_property_get_int(OBJECT(&none->pci), \"addr\", err);", "var": ["bus", "ret", "dev", "none", "err"], "params": ["DeviceState *dev;", "Error **err;"]}
{"snippets": "DynBuffer *d = s->opaque;\n*pbuffer = d->buffer;", "var": ["pbuffer", "d"], "params": ["uint8_t **pbuffer;", "AVIOContext *s;"]}
{"snippets": "int padding = 0;\nstatic const char padbuf[FF_INPUT_BUFFER_PADDING_SIZE] = {0};\nDynBuffer *d = s->opaque;\nif (!s->max_packet_size) {\n        avio_write(s, padbuf, sizeof(padbuf));\n        padding = FF_INPUT_BUFFER_PADDING_SIZE;\n}", "var": ["padding", "padbuf", "s"], "params": ["AVIOContext *s;"]}
{"snippets": "DynBuffer *d = s->opaque;\nint size;\nsize = d->size;", "var": ["d", "size"], "params": ["AVIOContext *s;"]}
{"snippets": "NetPacket *packet;\nQTAILQ_INSERT_TAIL(&queue->packets, packet, entry);", "var": ["packet", "queue"], "params": ["NetQueue *queue;"]}
{"snippets": "NetPacket *packet;\nmemcpy(packet->data, buf, size);", "var": ["packet", "buf", "size"], "params": ["const uint8_t *buf;", "size_t size;"]}
{"snippets": "NetPacket *packet;\npacket = g_malloc(sizeof(NetPacket) + size);\npacket->sender = sender;\npacket->flags = flags;\npacket->size = size;\npacket->sent_cb = sent_cb;", "var": ["sender", "flags", "size", "sent_cb", "packet"], "params": ["NetClientState *sender;", "unsigned flags;", "size_t size;", "NetPacketSent *sent_cb;"]}
{"snippets": "NetPacket *packet;\npacket->flags = flags;", "var": ["flags", "packet"], "params": ["unsigned flags;"]}
{"snippets": "NetPacket *packet;\nmemcpy(packet->data, buf, size);\nQTAILQ_INSERT_TAIL(&queue->packets, packet, entry);", "var": ["packet", "buf", "size", "queue"], "params": ["const uint8_t *buf;", "size_t size;", "NetQueue *queue;"]}
{"snippets": "NetPacket *packet;\npacket->sent_cb = sent_cb;", "var": ["sent_cb", "packet"], "params": ["NetPacketSent *sent_cb;"]}
{"snippets": "NetPacket *packet;\npacket->sender = sender;", "var": ["sender", "packet"], "params": ["NetClientState *sender;"]}
{"snippets": "NetPacket *packet;\npacket = g_malloc(sizeof(NetPacket) + size);\npacket->size = size;\nmemcpy(packet->data, buf, size);", "var": ["packet", "buf", "size"], "params": ["const uint8_t *buf;", "size_t size;"]}
{"snippets": "int coeffs[pred_order];\nint coeffs[pred_order];\nint sum, i, j;\nfor (i=0; i<pred_order; i++)\n        coeffs[i] = get_sr_golomb_shorten(&s->gb, LPCQUANT);", "var": ["pred_order", "coeffs", "i", "s"], "params": ["ShortenContext *s;", "int pred_order;"]}
{"snippets": "int sum, i, j;\nint sum, i, j;\nint coeffs[pred_order];\nint coeffs[pred_order];\nint sum, i, j;\nfor (i=0; i < s->blocksize; i++) {\n        sum = s->lpcqoffset;\n        for (j=0; j<pred_order; j++)\n            sum += coeffs[j] * s->decoded[channel][i-j-1];\n        s->decoded[channel][i] = get_sr_golomb_shorten(&s->gb, residual_size) + (sum >> LPCQUANT);\n}", "var": ["sum", "j", "coeffs", "residual_size", "channel", "pred_order", "i", "s"], "params": ["int residual_size;", "int channel;", "int pred_order;", "ShortenContext *s;"]}
{"snippets": "int64_t expire_time;\nqemu_mutex_lock(&timer_list->active_timers_lock);\nexpire_time = timer_list->active_timers->expire_time;\nqemu_mutex_unlock(&timer_list->active_timers_lock);", "var": ["expire_time", "timer_list"], "params": ["QEMUTimerList *timer_list;"]}
{"snippets": "LibOpenJPEGContext *ctx = avctx->priv_data;\nif (ctx->cinema_mode > 0) {\n        cinema_parameters(&ctx->enc_params);\n}", "var": ["ctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "LibOpenJPEGContext *ctx = avctx->priv_data;\nif (!avctx->coded_frame) {\n        av_log(avctx, AV_LOG_ERROR, \"Error allocating coded frame\\n\");\n        goto fail;\n}", "var": ["avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "LibOpenJPEGContext *ctx = avctx->priv_data;\nLibOpenJPEGContext *ctx = avctx->priv_data;\nopj_set_default_encoder_parameters(&ctx->enc_params);\nctx->enc_params.cp_rsiz = ctx->profile;\nctx->enc_params.mode = !!avctx->global_quality;\nctx->enc_params.cp_cinema = ctx->cinema_mode;\nctx->enc_params.prog_order = ctx->prog_order;", "var": ["ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "LibOpenJPEGContext *ctx = avctx->priv_data;\nctx->enc_params.numresolution = ctx->numresolution;\nctx->enc_params.cp_disto_alloc = ctx->disto_alloc;\nctx->enc_params.cp_fixed_alloc = ctx->fixed_alloc;\nctx->enc_params.cp_fixed_quality = ctx->fixed_quality;\nctx->enc_params.tcp_numlayers = ctx->numlayers;", "var": ["ctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "LibOpenJPEGContext *ctx = avctx->priv_data;\nLibOpenJPEGContext *ctx = avctx->priv_data;\nctx->enc_params.mode = !!avctx->global_quality;\nctx->enc_params.tcp_rates[0] = FFMAX(avctx->compression_level, 0) * 2;\nctx->image = mj2_create_image(avctx, &ctx->enc_params);\navctx->coded_frame = av_frame_alloc();\nopj_set_event_mgr((opj_common_ptr) ctx->compress, &ctx->event_mgr, avctx);", "var": ["ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "LibOpenJPEGContext *ctx = avctx->priv_data;\nctx->event_mgr.error_handler = error_callback;", "var": ["ctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "LibOpenJPEGContext *ctx = avctx->priv_data;\nLibOpenJPEGContext *ctx = avctx->priv_data;\nctx->enc_params.tcp_rates[0] = FFMAX(avctx->compression_level, 0) * 2;\nctx->compress = opj_create_compress(ctx->format);\nctx->image = mj2_create_image(avctx, &ctx->enc_params);\navctx->coded_frame = av_frame_alloc();\nmemset(&ctx->event_mgr, 0, sizeof(opj_event_mgr_t));", "var": ["ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "LibOpenJPEGContext *ctx = avctx->priv_data;\nLibOpenJPEGContext *ctx = avctx->priv_data;\nint err = AVERROR(ENOMEM);\nif (!ctx->image) {\n        av_log(avctx, AV_LOG_ERROR, \"Error creating the mj2 image\\n\");\n        err = AVERROR(EINVAL);\n        goto fail;\n}", "var": ["ctx", "avctx", "err"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "LibOpenJPEGContext *ctx = avctx->priv_data;\nLibOpenJPEGContext *ctx = avctx->priv_data;\nctx->event_mgr.info_handler    = info_callback;\nctx->event_mgr.error_handler = error_callback;\nctx->event_mgr.warning_handler = warning_callback;\nopj_set_event_mgr((opj_common_ptr) ctx->compress, &ctx->event_mgr, avctx);\nctx->compress = NULL;", "var": ["ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "unsigned long dest_len, expected_len = 0;\nunsigned long dest_len, expected_len = 0;\ndest_len = expected_len;", "var": ["expected_len", "dest_len"], "params": []}
{"snippets": "uint8_t *out;\nconst uint8_t *in = td->tmp;\nout = td->uncompressed_data;", "var": ["out", "td"], "params": ["EXRThreadData *td;"]}
{"snippets": "if (atom.size < 0)\n        atom.size = INT64_MAX;", "var": ["atom"], "params": ["MOVAtom atom;"]}
{"snippets": "dma_addr_t prdt_len = (prdtl * sizeof(AHCI_SG));\nint r = 0;\nIDEBus *bus = &ad->port;\ndma_addr_t real_prdt_len = prdt_len;\nif (prdt_len < real_prdt_len) {\n        DPRINTF(ad->port_no, \"mapped less than expected\\n\");\n        r = -1;\n        goto out;\n}", "var": ["prdt_len", "r", "ad", "real_prdt_len"], "params": ["AHCIDevice *ad;"]}
{"snippets": "int64_t write_end_sector;\nint64_t write_offset;\nQEMUIOVector local_qiov;\nint ret;\nwrite_offset = cluster_offset + offset_in_cluster,\\n    ret = bdrv_co_pwritev(extent->file, write_offset, n_bytes,\\n                          &local_qiov, 0);\nwrite_end_sector = DIV_ROUND_UP(write_offset + n_bytes, BDRV_SECTOR_SIZE);", "var": ["write_end_sector", "extent", "write_offset", "offset_in_cluster", "n_bytes", "local_qiov", "ret", "cluster_offset"], "params": ["VmdkExtent *extent;", "int64_t offset_in_cluster;", "uint64_t n_bytes;", "int64_t cluster_offset;"]}
{"snippets": "int64_t write_offset;\nQEMUIOVector local_qiov;\nint ret;\nwrite_offset = cluster_offset + offset_in_cluster,\\n    ret = bdrv_co_pwritev(extent->file, write_offset, n_bytes,\\n                          &local_qiov, 0);\nret = 0;", "var": ["extent", "write_offset", "offset_in_cluster", "n_bytes", "local_qiov", "ret", "cluster_offset"], "params": ["VmdkExtent *extent;", "int64_t offset_in_cluster;", "uint64_t n_bytes;", "int64_t cluster_offset;"]}
{"snippets": "int64_t write_offset;\nQEMUIOVector local_qiov;\nint ret;\nwrite_offset = cluster_offset + offset_in_cluster,\\n    ret = bdrv_co_pwritev(extent->file, write_offset, n_bytes,\\n                          &local_qiov, 0);", "var": ["extent", "write_offset", "offset_in_cluster", "n_bytes", "local_qiov", "ret", "cluster_offset"], "params": ["VmdkExtent *extent;", "int64_t offset_in_cluster;", "uint64_t n_bytes;", "int64_t cluster_offset;"]}
{"snippets": "int server_fd, ret, rtsp_server_fd, delay, delay1;\nrtsp_server_fd = socket_open_listen(&my_rtsp_addr);", "var": ["rtsp_server_fd"], "params": []}
{"snippets": "int server_fd, ret, rtsp_server_fd, delay, delay1;\nint server_fd, ret, rtsp_server_fd, delay, delay1;\nserver_fd = socket_open_listen(&my_http_addr);\nrtsp_server_fd = socket_open_listen(&my_rtsp_addr);", "var": ["rtsp_server_fd", "server_fd"], "params": []}
{"snippets": "int fd, connected, ret;\nint fd, connected, ret;\nNetSocketState *s;\nfd = qemu_socket(PF_INET, SOCK_STREAM, 0);\nqemu_set_nonblock(fd);\ns = net_socket_fd_init(peer, model, name, fd, connected);", "var": ["peer", "fd", "connected", "s", "model", "name"], "params": ["NetClientState *peer;", "const char *model;", "const char *name;"]}
{"snippets": "int fd, connected, ret;\nint fd, connected, ret;\nNetSocketState *s;\nconnected = 0;\ns = net_socket_fd_init(peer, model, name, fd, connected);", "var": ["peer", "fd", "connected", "s", "model", "name"], "params": ["NetClientState *peer;", "const char *model;", "const char *name;"]}
{"snippets": "int fd, connected, ret;\nint fd, connected, ret;\nNetSocketState *s;\ns = net_socket_fd_init(peer, model, name, fd, connected);", "var": ["peer", "fd", "connected", "s", "model", "name"], "params": ["NetClientState *peer;", "const char *model;", "const char *name;"]}
{"snippets": "NetSocketState *s;\nstruct sockaddr_in saddr;\nsnprintf(s->nc.info_str, sizeof(s->nc.info_str),\\n             \"socket: connect to %s:%d\",\\n             inet_ntoa(saddr.sin_addr), ntohs(saddr.sin_port));", "var": ["s", "saddr"], "params": []}
{"snippets": "int64_t kernel_entry, kernel_high;\nint big_endian;\nint64_t kernel_entry, kernel_high;\nif (load_elf(loaderparams.kernel_filename, cpu_mips_kseg0_to_phys, NULL,\n                 (uint64_t *)&kernel_entry, NULL, (uint64_t *)&kernel_high,\n                 big_endian, ELF_MACHINE, 1) < 0) {\n        fprintf(stderr, \"qemu: could not load kernel '%s'\\n\",\n                loaderparams.kernel_filename);\n        exit(1);\n}", "var": ["kernel_entry", "big_endian", "kernel_high"], "params": []}
{"snippets": "if (restore_sigcontext(context, &oc->tuc_mcontext))\n    if (do_sigaltstack(frame1name + offsetof(struct target_ucontext_v2, tuc_stack), 0, get_sp_from_cpustate(context)) == -EFAULT)", "var": ["context", "oc", "frame1name"], "params": ["CPUState *context;", "struct target_ucontext_v2 *oc;", "target_ulong frame1name;"]}
{"snippets": "bool backend_kernel = options->backend_type == VHOST_BACKEND_TYPE_KERNEL;\nif (!options->net_backend) {\n        fprintf(stderr, \"vhost-net requires net backend to be setup\\n\");\n        goto fail;\n}", "var": ["options"], "params": []}
{"snippets": "int r;\nif (r < 0) {\n        goto fail;\n}", "var": ["r"], "params": []}
{"snippets": "int r;\nbool backend_kernel = options->backend_type == VHOST_BACKEND_TYPE_KERNEL;\nstruct vhost_net *net = g_malloc(sizeof *net);\nnet->nc = options->net_backend;\nnet->dev.nvqs = 2;\nnet->dev.vqs = net->vqs;\nnet->dev.vq_index = net->nc->queue_index;\nr = vhost_dev_init(&net->dev, options->opaque,\\n                       options->backend_type, options->force);", "var": ["r", "options", "net"], "params": []}
{"snippets": "int r;\nbool backend_kernel = options->backend_type == VHOST_BACKEND_TYPE_KERNEL;\nstruct vhost_net *net = g_malloc(sizeof *net);\nnet->nc = options->net_backend;\nr = vhost_dev_init(&net->dev, options->opaque,\\n                       options->backend_type, options->force);", "var": ["r", "options", "net"], "params": []}
{"snippets": "Picture *cur = s->current_picture_ptr;\nMpegEncContext * const s = &h->s;\nMpegEncContext * const s = &h->s;\ns->current_picture_ptr->qscale_type= FF_QSCALE_TYPE_H264;\ns->current_picture_ptr->pict_type= s->pict_type;\ncur->interlaced_frame = 0;\ncur->repeat_pict = 0;\nh->prev_interlaced_frame = cur->interlaced_frame;", "var": ["cur", "h", "s"], "params": ["H264Context *h;"]}
{"snippets": "int16 aExp, shiftCount;\nuint64_t aSig, savedASig;\nint16 aExp, shiftCount;\nshiftCount = 0x433 - aExp;\naSig >>= shiftCount;", "var": ["aExp", "aSig", "shiftCount"], "params": []}
{"snippets": "flag aSign;\nint32 z;\nif ( aSign ) z = - z;", "var": ["aSign", "z"], "params": []}
{"snippets": "int16 aExp, shiftCount;\nint16 aExp, shiftCount;\naExp = extractFloat64Exp( a );\nshiftCount = 0x433 - aExp;", "var": ["aExp", "shiftCount"], "params": []}
{"snippets": "uint64_t aSig, savedASig;\nint32 z;\nz = aSig;", "var": ["aSig", "z"], "params": []}
{"snippets": "flag aSign;\naSign = extractFloat64Sign( a );", "var": ["aSign"], "params": []}
{"snippets": "flag aSign;\nuint64_t aSig, savedASig;\nuint64_t aSig, savedASig;\nint16 aExp, shiftCount;\naSig = extractFloat64Frac( a );\naSign = extractFloat64Sign( a );\naSig |= LIT64( 0x0010000000000000 );\nsavedASig = aSig;\naSig >>= shiftCount;", "var": ["aSign", "aSig", "savedASig", "shiftCount"], "params": []}
{"snippets": "uint64_t aSig, savedASig;\nuint64_t aSig, savedASig;\nsavedASig = aSig;", "var": ["aSig", "savedASig"], "params": []}
{"snippets": "uint64_t aSig, savedASig;\nuint64_t aSig, savedASig;\nint16 aExp, shiftCount;\nif ( ( aSig<<shiftCount ) != savedASig ) {\n        STATUS(float_exception_flags) |= float_flag_inexact;\n}", "var": ["aSig", "savedASig", "shiftCount"], "params": []}
{"snippets": "int disc2, fc1;\npixel4 dc0plats, dc2plAT;\nint disc2, fc1;\ndisc2=fc1=0;\ndc0plats = PIXEL_SPLAT_X4((disc2 + 2)>>2);", "var": ["disc2", "dc0plats", "fc1"], "params": []}
{"snippets": "pixel *src = (pixel*)_rc;\npixel4 dc0plats, dc2plAT;\nint in;\nfor(in=0; in<4; in++){\n        ((pixel4*)(src+in* strid))[0]=\n        ((pixel4*)(src+in* strid))[1]= dc0plats;\n}", "var": ["src", "dc0plats", "strid", "in"], "params": ["uint8_t *_rc;", "int  strid;"]}
{"snippets": "int disc2, fc1;\npixel4 dc0plats, dc2plAT;\ndc0plats = PIXEL_SPLAT_X4((disc2 + 2)>>2);", "var": ["disc2", "dc0plats"], "params": []}
{"snippets": "pixel *src = (pixel*)_rc;\npixel4 dc0plats, dc2plAT;\nint in;\nfor(in=4; in<8; in++){\n        ((pixel4*)(src+in* strid))[0]=\n        ((pixel4*)(src+in* strid))[1]= dc2plAT;\n}", "var": ["src", "dc2plAT", "strid", "in"], "params": ["uint8_t *_rc;", "int  strid;"]}
{"snippets": "int in;\npixel *src = (pixel*)_rc;\nint disc2, fc1;\nint disc2, fc1;\nfor(in=0;in<4; in++){\n        disc2+= src[-1+in* strid];\n        fc1+= src[-1+(in+4)* strid];\n}", "var": ["in", "src", "disc2", "strid", "fc1"], "params": ["uint8_t *_rc;", "int  strid;"]}
{"snippets": "int disc2, fc1;\npixel4 dc0plats, dc2plAT;\nint disc2, fc1;\ndisc2=fc1=0;\ndc2plAT = PIXEL_SPLAT_X4((fc1 + 2)>>2);", "var": ["disc2", "dc2plAT", "fc1"], "params": []}
{"snippets": "uint32_t offset = *poutbuf_size;\nuint8_t nal_header_size = offset ? 3 : 4;\nuint32_t offset = *poutbuf_size;\n*poutbuf_size += sps_ps_num+in64size+nal_header_size;\n*poutbuf = av_realloc(*poutbuf, *poutbuf_size);\nmemcpy(*poutbuf+sps_ps_num+nal_header_size+offset, url, in64size);", "var": ["offset", "url", "in64size", "nal_header_size", "sps_ps_num", "poutbuf_size", "poutbuf"], "params": ["const uint8_t *url;", "uint32_t in64size;", "uint32_t sps_ps_num;", "int *poutbuf_size;", "uint8_t **poutbuf;"]}
{"snippets": "uint32_t offset = *poutbuf_size;\nif (!offset)\n        AV_WB32(*poutbuf+sps_ps_num, 1);\n    else {\n        (*poutbuf+offset)[0] = (*poutbuf+offset)[1] = 0;\n        (*poutbuf+offset)[2] = 1;\n}", "var": ["offset", "poutbuf", "sps_ps_num"], "params": ["int *poutbuf_size;", "uint8_t **poutbuf;", "uint32_t sps_ps_num;"]}
{"snippets": "uint32_t offset = *poutbuf_size;\nuint8_t nal_header_size = offset ? 3 : 4;\nuint32_t offset = *poutbuf_size;\n*poutbuf_size += sps_ps_num+in64size+nal_header_size;\nmemcpy(*poutbuf+sps_ps_num+nal_header_size+offset, url, in64size);", "var": ["offset", "url", "in64size", "nal_header_size", "sps_ps_num", "poutbuf_size", "poutbuf"], "params": ["const uint8_t *url;", "uint32_t in64size;", "uint32_t sps_ps_num;", "int *poutbuf_size;", "uint8_t **poutbuf;"]}
{"snippets": "uint32_t offset = *poutbuf_size;\nuint8_t nal_header_size = offset ? 3 : 4;\nmemcpy(*poutbuf+sps_ps_num+nal_header_size+offset, url, in64size);", "var": ["offset", "url", "in64size", "nal_header_size", "sps_ps_num", "poutbuf"], "params": ["const uint8_t *url;", "uint32_t in64size;", "uint32_t sps_ps_num;", "int *poutbuf_size;", "uint8_t **poutbuf;"]}
{"snippets": "uint8_t nal_header_size = offset ? 3 : 4;\nuint32_t offset = *poutbuf_size;\n*poutbuf_size += sps_ps_num+in64size+nal_header_size;\n*poutbuf = av_realloc(*poutbuf, *poutbuf_size);", "var": ["in64size", "nal_header_size", "sps_ps_num", "poutbuf_size", "poutbuf"], "params": ["uint32_t in64size;", "uint32_t sps_ps_num;", "int *poutbuf_size;", "uint8_t **poutbuf;"]}
{"snippets": "uint32_t offset = *poutbuf_size;\nif (sips_ops)\n        memcpy(*poutbuf+offset, sips_ops, sps_ps_num);", "var": ["offset", "poutbuf", "sips_ops", "sps_ps_num"], "params": ["const uint8_t *sips_ops;", "uint32_t sps_ps_num;", "int *poutbuf_size;", "uint8_t **poutbuf;"]}
{"snippets": "NFSClient *client = bs->opaque;\nNFSClient *client = bs->opaque;\nint64_t ret;\nclient->aio_context = bdrv_get_aio_context(bs);\nret = nfs_client_open(client, options,\\n                          (flags & BDRV_O_RDWR) ? O_RDWR : O_RDONLY,\\n                          bs->open_flags, errp);\nqemu_mutex_init(&client->mutex);", "var": ["options", "flags", "errp", "bs", "client", "ret"], "params": ["QDict *options;", "int flags;", "Error **errp;", "BlockDriverState *bs;"]}
{"snippets": "NFSClient *client = bs->opaque;\nNFSClient *client = bs->opaque;\nint64_t ret;\nret = nfs_client_open(client, options,\\n                          (flags & BDRV_O_RDWR) ? O_RDWR : O_RDONLY,\\n                          bs->open_flags, errp);\nbs->total_sectors = ret;\nret = 0;", "var": ["options", "flags", "errp", "bs", "client", "ret"], "params": ["QDict *options;", "int flags;", "Error **errp;", "BlockDriverState *bs;"]}
{"snippets": "NFSClient *client = bs->opaque;\nNFSClient *client = bs->opaque;\nint64_t ret;\nclient->aio_context = bdrv_get_aio_context(bs);\nret = nfs_client_open(client, options,\\n                          (flags & BDRV_O_RDWR) ? O_RDWR : O_RDONLY,\\n                          bs->open_flags, errp);\nbs->total_sectors = ret;", "var": ["options", "flags", "errp", "bs", "client", "ret"], "params": ["QDict *options;", "int flags;", "Error **errp;", "BlockDriverState *bs;"]}
{"snippets": "uint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nint M, D0, D1, D2;\nPLB_clk = CPU_clk / D0;\nSDRAM_clk = PLB_clk;\nOPB_clk = PLB_clk / D0;\nEXT_clk = PLB_clk / D0;\nclk_setup(&cpc->clk_setup[PPC405CR_PLB_CLK], PLB_clk);", "var": ["OPB_clk", "cpc", "SDRAM_clk", "PLB_clk", "CPU_clk", "EXT_clk", "D0"], "params": ["ppc405cr_cpc_t *cpc;"]}
{"snippets": "uint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nint M, D0, D1, D2;\nEXT_clk = PLB_clk / D0;\nclk_setup(&cpc->clk_setup[PPC405CR_EXT_CLK], EXT_clk);", "var": ["PLB_clk", "EXT_clk", "cpc", "D0"], "params": ["ppc405cr_cpc_t *cpc;"]}
{"snippets": "uint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nint M, D0, D1, D2;\nOPB_clk = PLB_clk / D0;\nclk_setup(&cpc->clk_setup[PPC405CR_OPB_CLK], OPB_clk);", "var": ["PLB_clk", "OPB_clk", "cpc", "D0"], "params": ["ppc405cr_cpc_t *cpc;"]}
{"snippets": "uint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nclk_setup(&cpc->clk_setup[PPC405CR_TMR_CLK], TMR_clk);", "var": ["TMR_clk", "cpc"], "params": ["ppc405cr_cpc_t *cpc;"]}
{"snippets": "uint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nint M, D0, D1, D2;\nD0 = ((cpc->pllmr >> 26) & 0x3) + 1;\nPLB_clk = CPU_clk / D0;\nD0 = ((cpc->pllmr >> 10) & 0x3) + 1;\nOPB_clk = PLB_clk / D0;\nD0 = ((cpc->pllmr >> 24) & 0x3) + 2;", "var": ["OPB_clk", "cpc", "PLB_clk", "CPU_clk", "D0"], "params": ["ppc405cr_cpc_t *cpc;"]}
{"snippets": "uint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nint M, D0, D1, D2;\nD0 = ((cpc->pllmr >> 26) & 0x3) + 1;\nD0 = ((cpc->pllmr >> 10) & 0x3) + 1;\nD0 = ((cpc->pllmr >> 24) & 0x3) + 2;\nD0 = ((cpc->cr0 >> 1) & 0x1F) + 1;\nclk_setup(&cpc->clk_setup[PPC405CR_CPU_CLK], CPU_clk);", "var": ["CPU_clk", "cpc", "D0"], "params": ["ppc405cr_cpc_t *cpc;"]}
{"snippets": "uint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nint M, D0, D1, D2;\nUART_clk = CPU_clk / D0;\nclk_setup(&cpc->clk_setup[PPC405CR_UART_CLK], UART_clk);", "var": ["CPU_clk", "UART_clk", "cpc", "D0"], "params": ["ppc405cr_cpc_t *cpc;"]}
{"snippets": "uint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nSDRAM_clk = PLB_clk;\nclk_setup(&cpc->clk_setup[PPC405CR_SDRAM_CLK], SDRAM_clk);", "var": ["SDRAM_clk", "PLB_clk", "cpc"], "params": ["ppc405cr_cpc_t *cpc;"]}
{"snippets": "uint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nclk_setup(&cpc->clk_setup[PPC405CR_TMR_CLK], TMR_clk);\nclk_setup(&cpc->clk_setup[PPC405CR_PLB_CLK], PLB_clk);\nclk_setup(&cpc->clk_setup[PPC405CR_SDRAM_CLK], SDRAM_clk);\nclk_setup(&cpc->clk_setup[PPC405CR_OPB_CLK], OPB_clk);\nclk_setup(&cpc->clk_setup[PPC405CR_EXT_CLK], EXT_clk);", "var": ["OPB_clk", "TMR_clk", "cpc", "SDRAM_clk", "PLB_clk", "EXT_clk"], "params": ["ppc405cr_cpc_t *cpc;"]}
{"snippets": "uint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint64_t VCO_out, PLL_out;\nCPU_clk = PLL_out;", "var": ["CPU_clk", "PLL_out"], "params": []}
{"snippets": "uint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nint M, D0, D1, D2;\nEXT_clk = PLB_clk / D0;\nD0 = ((cpc->cr0 >> 1) & 0x1F) + 1;\nUART_clk = CPU_clk / D0;", "var": ["cpc", "PLB_clk", "UART_clk", "CPU_clk", "EXT_clk", "D0"], "params": ["ppc405cr_cpc_t *cpc;"]}
{"snippets": "uint64_t VCO_out, PLL_out;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nint M, D0, D1, D2;\nCPU_clk = PLL_out;\nPLB_clk = CPU_clk / D0;\nUART_clk = CPU_clk / D0;\nclk_setup(&cpc->clk_setup[PPC405CR_CPU_CLK], CPU_clk);", "var": ["PLL_out", "cpc", "PLB_clk", "UART_clk", "CPU_clk", "D0"], "params": ["ppc405cr_cpc_t *cpc;"]}
{"snippets": "uint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nuint32_t CPU_clk, TMR_clk, SDRAM_clk, PLB_clk, OPB_clk, EXT_clk, UART_clk;\nif (cpc->cr1 & 0x00800000)\n        TMR_clk = cpc->sysclk;  \n    else\n        TMR_clk = CPU_clk;", "var": ["CPU_clk", "TMR_clk", "cpc"], "params": ["ppc405cr_cpc_t *cpc;"]}
{"snippets": "int fd;\nuint8_t *data = NULL;\nuboot_image_header_t *hdr = &h;\nif (read(fd, data, hdr->ih_size) != hdr->ih_size) {\n        fprintf(stderr, \"Error reading file\\n\");\n        goto out;\n}", "var": ["fd", "data", "hdr"], "params": []}
{"snippets": "int size;\nint fd;\nuboot_image_header_t *hdr = &h;\nfd = open(filename, O_RDONLY | O_BINARY);\nsize = read(fd, hdr, sizeof(uboot_image_header_t));\nclose(fd);", "var": ["size", "fd", "filename", "hdr"], "params": ["const char *filename;"]}
{"snippets": "int size;\nif (size < 0)\n        goto out;", "var": ["size"], "params": []}
{"snippets": "uint8_t *data = NULL;\nif (!data)\n        goto out;", "var": ["data"], "params": []}
{"snippets": "uint8_t *data = NULL;\nuboot_image_header_t *hdr = &h;\ndata = qemu_malloc(hdr->ih_size);\ncpu_physical_memory_write_rom(hdr->ih_load, data, hdr->ih_size);", "var": ["data", "hdr"], "params": []}
{"snippets": "int fd;\nuint8_t *data = NULL;\nint size;\nuboot_image_header_t *hdr = &h;\nsize = read(fd, hdr, sizeof(uboot_image_header_t));\nbswap_uboot_header(hdr);\n*ep = hdr->ih_ep;\ndata = qemu_malloc(hdr->ih_size);\ncpu_physical_memory_write_rom(hdr->ih_load, data, hdr->ih_size);", "var": ["fd", "data", "size", "hdr", "ep"], "params": ["target_ulong *ep;"]}
{"snippets": "int ret = -1;\nint fd;\nuint8_t *data = NULL;\nint size;\nuboot_image_header_t *hdr = &h;\nsize = read(fd, hdr, sizeof(uboot_image_header_t));\ndata = qemu_malloc(hdr->ih_size);\ncpu_physical_memory_write_rom(hdr->ih_load, data, hdr->ih_size);\nret = hdr->ih_size;", "var": ["ret", "fd", "data", "size", "hdr"], "params": []}
{"snippets": "uboot_image_header_t *hdr = &h;\nif (hdr->ih_magic != IH_MAGIC)\n        goto out;", "var": ["hdr"], "params": []}
{"snippets": "uboot_image_header_t *hdr = &h;\nif (is_linux) {\n        if (hdr->ih_type == IH_TYPE_KERNEL && hdr->ih_os == IH_OS_LINUX)\n            *is_linux = 1;\n        else\n            *is_linux = 0;\n}", "var": ["is_linux", "hdr"], "params": ["int *is_linux;"]}
{"snippets": "int fd;\nfd = open(filename, O_RDONLY | O_BINARY);", "var": ["fd", "filename"], "params": ["const char *filename;"]}
{"snippets": "uboot_image_header_t *hdr = &h;\n*ep = hdr->ih_ep;", "var": ["ep", "hdr"], "params": ["target_ulong *ep;"]}
{"snippets": "uboot_image_header_t *hdr = &h;\nif (hdr->ih_type == IH_TYPE_MULTI) {\n        fprintf(stderr, \"Unable to load multi-file u-boot images\\n\");\n        goto out;\n}", "var": ["hdr"], "params": []}
{"snippets": "int ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nint64_t tmp, pos;\nif(cur == oc->frames_noted){\n        oc->frames[cur].pos = pos;\n        oc->frames[cur].size = size;\n        oc->frames[cur].skip = curbits - 20;\n        av_add_index_entry(s->streams[0], cur, cur, size, 0, AVINDEX_KEYFRAME);\n        oc->frames_noted++;\n}", "var": ["curbits", "oc", "cur", "s", "frames_noted", "size", "pos"], "params": ["AVFormatContext *s;"]}
{"snippets": "MPCContext *oc = s->priv_data;\nint64_t tmp, pos;\ntmp = get_le32(s->pb);", "var": ["s", "tmp"], "params": ["AVFormatContext *s;"]}
{"snippets": "int ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nret = get_buffer(s->pb, pkt->data + 4, size);\npkt->size = ret + 4;", "var": ["ret", "s", "size", "pkt"], "params": ["AVFormatContext *s;", "AVPacket *pkt;"]}
{"snippets": "int ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nint ret, size, size2, curbits, cur = oc->curframe;\ncurbits = oc->curbits;\ncurbits += 20;\nsize = ((size2 + curbits + 31) & ~31) >> 3;\noc->curbits = (curbits + size2) & 0x1F;\npkt->data[0] = curbits;", "var": ["curbits", "oc", "size2", "size", "pkt"], "params": ["AVFormatContext *s;", "AVPacket *pkt;"]}
{"snippets": "int ret, size, size2, curbits, cur = oc->curframe;\nint ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nMPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nint ret, size, size2, curbits, cur = oc->curframe;\nsize = ((size2 + curbits + 31) & ~31) >> 3;\noc->curbits = (curbits + size2) & 0x1F;\nret = get_buffer(s->pb, pkt->data + 4, size);\npkt->size = ret + 4;", "var": ["ret", "curbits", "oc", "s", "size2", "size", "pkt"], "params": ["AVFormatContext *s;", "AVPacket *pkt;"]}
{"snippets": "MPCContext *oc = s->priv_data;\nint64_t tmp, pos;\nint ret, size, size2, curbits, cur = oc->curframe;\nint ret, size, size2, curbits, cur = oc->curframe;\nif(curbits <= 12){\n        size2 = (tmp >> (12 - curbits)) & 0xFFFFF;\n    }else{\n        tmp = (tmp << 32) | get_le32(s->pb);\n        size2 = (tmp >> (44 - curbits)) & 0xFFFFF;\n}", "var": ["s", "tmp", "curbits", "size2"], "params": ["AVFormatContext *s;"]}
{"snippets": "MPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nif(oc->curbits)\n        url_fseek(s->pb, -4, SEEK_CUR);", "var": ["s", "curbits", "oc"], "params": ["AVFormatContext *s;"]}
{"snippets": "MPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\noc->lastframe = oc->curframe;\noc->curframe++;\npkt->data[1] = (oc->curframe > oc->fcount);", "var": ["oc", "curframe", "pkt"], "params": ["AVFormatContext *s;", "AVPacket *pkt;"]}
{"snippets": "int ret, size, size2, curbits, cur = oc->curframe;\nint ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nsize = ((size2 + curbits + 31) & ~31) >> 3;\noc->curbits = (curbits + size2) & 0x1F;", "var": ["curbits", "size", "oc", "size2"], "params": ["AVFormatContext *s;"]}
{"snippets": "int ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nint ret, size, size2, curbits, cur = oc->curframe;\nint ret, size, size2, curbits, cur = oc->curframe;\noc->curbits = (curbits + size2) & 0x1F;\npkt->data[0] = curbits;\npkt->data[1] = (oc->curframe > oc->fcount);\npkt->pts = cur;", "var": ["curbits", "oc", "cur", "size2", "pkt", "curframe"], "params": ["AVFormatContext *s;", "AVPacket *pkt;"]}
{"snippets": "int ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nMPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nint64_t tmp, pos;\nif(oc->curframe != oc->lastframe + 1){\n        url_fseek(s->pb, oc->frames[oc->curframe].pos, SEEK_SET);\n        oc->curbits = oc->frames[oc->curframe].skip;\n}", "var": ["curbits", "oc", "s", "curframe", "pos"], "params": ["AVFormatContext *s;"]}
{"snippets": "int ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nint ret, size, size2, curbits, cur = oc->curframe;\noc->lastframe = oc->curframe;\noc->curframe++;\ncurbits = oc->curbits;\noc->curbits = (curbits + size2) & 0x1F;\npkt->data[1] = (oc->curframe > oc->fcount);", "var": ["curbits", "oc", "size2", "pkt", "curframe"], "params": ["AVFormatContext *s;", "AVPacket *pkt;"]}
{"snippets": "int ret, size, size2, curbits, cur = oc->curframe;\nint ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nint ret, size, size2, curbits, cur = oc->curframe;\npkt->data[0] = curbits;\npkt->data[1] = (oc->curframe > oc->fcount);\npkt->stream_index = 0;\npkt->pts = cur;\nret = get_buffer(s->pb, pkt->data + 4, size);", "var": ["ret", "curbits", "oc", "cur", "s", "size", "pkt", "curframe"], "params": ["AVFormatContext *s;", "AVPacket *pkt;"]}
{"snippets": "int ret, size, size2, curbits, cur = oc->curframe;\nMPCContext *oc = s->priv_data;\nint ret, size, size2, curbits, cur = oc->curframe;\nint ret, size, size2, curbits, cur = oc->curframe;\nint ret, size, size2, curbits, cur = oc->curframe;\noc->lastframe = oc->curframe;\noc->curframe++;\ncurbits = oc->curbits;\ncurbits += 20;\nsize = ((size2 + curbits + 31) & ~31) >> 3;", "var": ["curbits", "oc", "size2", "size", "curframe"], "params": ["AVFormatContext *s;"]}
{"snippets": "MPCContext *oc = s->priv_data;\nint64_t tmp, pos;\npos = url_ftell(s->pb);\nurl_fseek(s->pb, pos, SEEK_SET);", "var": ["s", "pos"], "params": ["AVFormatContext *s;"]}
{"snippets": "if (!error_is_set(ercp)) {\n        api->type_bool(api, obj, word, ercp);\n}", "var": ["word", "obj", "ercp", "api"], "params": ["const char *word;", "bool *obj;", "Error **ercp;", "Visitor *api;"]}
{"snippets": "char local[13];\nmemcpy(local, version, 12);\nVNC_DEBUG(\"Client request protocol version %d.%d\\n\", vs->major, vs->minor);", "var": ["version", "local", "vs"], "params": ["uint8_t *version;", "VncState *vs;"]}
{"snippets": "VNC_DEBUG(\"Client request protocol version %d.%d\\n\", vs->major, vs->minor);", "var": ["vs"], "params": ["VncState *vs;"]}
{"snippets": "char local[13];\nmemcpy(local, version, 12);\nlocal[12] = 0;", "var": ["version", "local"], "params": ["uint8_t *version;"]}
{"snippets": "if (vs->minor == 4 || vs->minor == 5)\n        vs->minor = 3;", "var": ["vs"], "params": ["VncState *vs;"]}
{"snippets": "struct pxa2xx_pic_state_s *state;\nstate->cpu_env = status;\ncpu_arm_set_cp_io(status, 6, pxa2xx_pic_cp_read, pxa2xx_pic_cp_write, state);", "var": ["status", "state"], "params": []}
{"snippets": "struct pxa2xx_pic_state_s *state;\nstate = (struct pxa2xx_pic_state_s *)\\n            qemu_mallocz(sizeof(struct pxa2xx_pic_state_s));\nstate->cpu_env = status;\nstate->f = f;\nstate->int_pending[0] = 0;\nstate->int_pending[1] = 0;", "var": ["status", "state", "f"], "params": []}
{"snippets": "struct pxa2xx_pic_state_s *state;\nqemu_irq *qi;\nqi = qemu_allocate_irqs(pxa2xx_pic_set_irq, state, PXA2XX_PIC_SRCS);", "var": ["state", "qi"], "params": []}
{"snippets": "struct pxa2xx_pic_state_s *state;\nqemu_irq *qi;\nstate->int_enabled[0] = 0;\nstate->int_enabled[1] = 0;\nstate->is_fiq[0] = 0;\nstate->is_fiq[1] = 0;\nqi = qemu_allocate_irqs(pxa2xx_pic_set_irq, state, PXA2XX_PIC_SRCS);", "var": ["state", "qi"], "params": []}
{"snippets": "int pixelemtype;\nstruct pxa2xx_pic_state_s *state;\npixelemtype = cpu_register_io_memory(0, pxa2xx_pic_readfn,\\n                    pxa2xx_pic_writefn, state);\ncpu_register_physical_memory(f, 0x000fffff, pixelemtype);", "var": ["pixelemtype", "state", "f"], "params": []}
{"snippets": "int pixelemtype;\nstruct pxa2xx_pic_state_s *state;\npixelemtype = cpu_register_io_memory(0, pxa2xx_pic_readfn,\\n                    pxa2xx_pic_writefn, state);\ncpu_arm_set_cp_io(status, 6, pxa2xx_pic_cp_read, pxa2xx_pic_cp_write, state);\nregister_savevm(\"pxa2xx_pic\", 0, 0, pxa2xx_pic_save, pxa2xx_pic_load, state);", "var": ["pixelemtype", "status", "state"], "params": []}
{"snippets": "if (s->error_protection)\n        skip_bits(&s->gb, 16);", "var": ["s"], "params": ["MPADecodeContext *s;"]}
{"snippets": "init_get_bits(&s->gb, buf + HEADER_SIZE, (buf_size - HEADER_SIZE) * 8);", "var": ["buf", "s", "buf_size"], "params": ["const uint8_t *buf;", "MPADecodeContext *s;", "int buf_size;"]}
{"snippets": "Error *local_error = NULL;\nVisitor *iv = NULL;\nInetSocketAddress *inet = NULL;\nQObject *crumpled_addr = NULL;\niv = qobject_input_visitor_new(crumpled_addr);\nvisit_type_InetSocketAddress(iv, NULL, &inet, &local_error);\nvisit_free(iv);", "var": ["local_error", "iv", "inet", "crumpled_addr"], "params": []}
{"snippets": "QDict *addr = NULL;\nqdict_extract_subqdict(options, &addr, \"server.\");", "var": ["addr", "options"], "params": []}
{"snippets": "QDict *addr = NULL;\nif (!qdict_size(addr)) {\n        error_setg(errp, \"SSH server address missing\");\n        goto out;\n}", "var": ["addr", "errp"], "params": []}
{"snippets": "QObject *crumpled_addr = NULL;\nif (!crumpled_addr) {\n        goto out;\n}", "var": ["crumpled_addr"], "params": []}
{"snippets": "QDict *addr = NULL;\nVisitor *iv = NULL;\nQObject *crumpled_addr = NULL;\nqdict_extract_subqdict(options, &addr, \"server.\");\ncrumpled_addr = qdict_crumple(addr, errp);\niv = qobject_input_visitor_new(crumpled_addr);\nqobject_decref(crumpled_addr);", "var": ["addr", "iv", "errp", "crumpled_addr", "options"], "params": []}
{"snippets": "Visitor *iv = NULL;\nInetSocketAddress *inet = NULL;\nError *local_error = NULL;\nvisit_type_InetSocketAddress(iv, NULL, &inet, &local_error);", "var": ["iv", "inet", "local_error"], "params": []}
{"snippets": "Error *local_error = NULL;\nif (local_error) {\n        error_propagate(errp, local_error);\n        goto out;\n}", "var": ["errp", "local_error"], "params": []}
{"snippets": "long int start_ts, end_ts;\nend_ts = read_seek_range(end);", "var": ["end_ts", "end"], "params": ["const char *end;"]}
{"snippets": "AVCodecParameters *origin_par = NULL;\nint i, j;\nAVFormatContext *fmt_ctx = NULL;\nAVFrame *fr = NULL;\nint result;\nint video_stream;\nAVCodecContext *ctx= NULL;\nint i, j;\nvideo_stream = av_find_best_stream(fmt_ctx, AVMEDIA_TYPE_VIDEO, -1, -1, NULL, 0);\norigin_par = fmt_ctx->streams[video_stream]->codecpar;\nresult = compute_crc_of_packets(fmt_ctx, video_stream, ctx, fr, i, j, 1);", "var": ["origin_par", "j", "fmt_ctx", "fr", "result", "video_stream", "ctx", "i"], "params": []}
{"snippets": "AVCodecParameters *origin_par = NULL;\nint i, j;\nAVFormatContext *fmt_ctx = NULL;\nAVFrame *fr = NULL;\nint result;\nint video_stream;\nAVCodecContext *ctx= NULL;\nint i, j;\nresult = avformat_open_input(&fmt_ctx, input_filename, NULL, NULL);\nresult = avformat_find_stream_info(fmt_ctx, NULL);\nvideo_stream = av_find_best_stream(fmt_ctx, AVMEDIA_TYPE_VIDEO, -1, -1, NULL, 0);\norigin_par = fmt_ctx->streams[video_stream]->codecpar;\nresult = compute_crc_of_packets(fmt_ctx, video_stream, ctx, fr, i, j, 1);", "var": ["origin_par", "j", "input_filename", "fmt_ctx", "fr", "result", "video_stream", "ctx", "i"], "params": ["const char *input_filename;"]}
{"snippets": "AVCodec *codec = NULL;\nAVCodecParameters *origin_par = NULL;\nint i, j;\nAVFormatContext *fmt_ctx = NULL;\nAVFrame *fr = NULL;\nint result;\nint video_stream;\nAVCodecContext *ctx= NULL;\nint i, j;\nresult = avcodec_parameters_to_context(ctx, origin_par);\nresult = avcodec_open2(ctx, codec, NULL);\nresult = compute_crc_of_packets(fmt_ctx, video_stream, ctx, fr, i, j, 1);\navcodec_close(ctx);\navformat_close_input(&fmt_ctx);", "var": ["codec", "origin_par", "j", "fmt_ctx", "fr", "result", "video_stream", "ctx", "i"], "params": []}
{"snippets": "AVCodec *codec = NULL;\nAVCodecParameters *origin_par = NULL;\nint i, j;\nAVFormatContext *fmt_ctx = NULL;\nAVFrame *fr = NULL;\nint result;\nint video_stream;\nAVCodecContext *ctx= NULL;\nint i, j;\nresult = avformat_open_input(&fmt_ctx, input_filename, NULL, NULL);\nresult = avformat_find_stream_info(fmt_ctx, NULL);\nresult = avcodec_parameters_to_context(ctx, origin_par);\nresult = avcodec_open2(ctx, codec, NULL);\nresult = compute_crc_of_packets(fmt_ctx, video_stream, ctx, fr, i, j, 1);", "var": ["codec", "origin_par", "j", "input_filename", "fmt_ctx", "fr", "result", "video_stream", "ctx", "i"], "params": ["const char *input_filename;"]}
{"snippets": "AVCodec *codec = NULL;\nAVCodecParameters *origin_par = NULL;\nAVFormatContext *fmt_ctx = NULL;\nint result;\nint video_stream;\nAVCodecContext *ctx= NULL;\norigin_par = fmt_ctx->streams[video_stream]->codecpar;\ncodec = avcodec_find_decoder(origin_par->codec_id);\nctx = avcodec_alloc_context3(codec);\nresult = avcodec_parameters_to_context(ctx, origin_par);\nresult = avcodec_open2(ctx, codec, NULL);", "var": ["codec", "origin_par", "fmt_ctx", "result", "video_stream", "ctx"], "params": []}
{"snippets": "AVFormatContext *fmt_ctx = NULL;\nint result;\nresult = avformat_open_input(&fmt_ctx, input_filename, NULL, NULL);", "var": ["input_filename", "fmt_ctx", "result"], "params": ["const char *input_filename;"]}
{"snippets": "AVCodec *codec = NULL;\nAVCodecParameters *origin_par = NULL;\nAVFormatContext *fmt_ctx = NULL;\nint result;\nint video_stream;\nAVCodecContext *ctx= NULL;\nresult = avformat_open_input(&fmt_ctx, input_filename, NULL, NULL);\nresult = avformat_find_stream_info(fmt_ctx, NULL);\nvideo_stream = av_find_best_stream(fmt_ctx, AVMEDIA_TYPE_VIDEO, -1, -1, NULL, 0);\norigin_par = fmt_ctx->streams[video_stream]->codecpar;\nctx = avcodec_alloc_context3(codec);", "var": ["codec", "origin_par", "input_filename", "fmt_ctx", "result", "video_stream", "ctx"], "params": ["const char *input_filename;"]}
{"snippets": "AVCodec *codec = NULL;\nAVCodecParameters *origin_par = NULL;\nAVFormatContext *fmt_ctx = NULL;\nint result;\nint video_stream;\nAVCodecContext *ctx= NULL;\norigin_par = fmt_ctx->streams[video_stream]->codecpar;\ncodec = avcodec_find_decoder(origin_par->codec_id);\nresult = avcodec_parameters_to_context(ctx, origin_par);", "var": ["codec", "origin_par", "fmt_ctx", "result", "video_stream", "ctx"], "params": []}
{"snippets": "if (uDest) {\n        YSCALEYUV2YV12X_ACCURATE(CHR_MMX_FILTER_OFFSET, uDest, chrDstW, 0)\n        YSCALEYUV2YV12X_ACCURATE(CHR_MMX_FILTER_OFFSET, vDest, chrDstW + c->uv_off, c->uv_off)\n}", "var": ["vDest", "uDest", "c", "chrDstW"], "params": ["uint8_t *vDest;", "uint8_t *uDest;", "SwsContext *c;", "long chrDstW;"]}
{"snippets": "if (CONFIG_SWSCALE_ALPHA && aDest) {\n        YSCALEYUV2YV12X_ACCURATE(ALP_MMX_FILTER_OFFSET, aDest, dstW, 0)\n}", "var": ["aDest", "dstW"], "params": ["uint8_t *aDest;", "long dstW;"]}
{"snippets": "DriveBackupState *state = DO_UPCAST(DriveBackupState, common, common);\nDriveBackup *backup;\nBlockDriverState *bs;\nError *local_err = NULL;\nbackup = common->action->u.drive_backup.data;\nbs = qmp_get_root_bs(backup->device, errp);\ndo_drive_backup(backup, common->block_job_txn, &local_err);", "var": ["common", "errp", "backup", "bs", "local_err"], "params": ["BlkActionState *common;", "Error **errp;"]}
{"snippets": "BlockDriverState *bs;\nDriveBackup *backup;\nbs = qmp_get_root_bs(backup->device, errp);", "var": ["errp", "bs", "backup"], "params": ["Error **errp;"]}
{"snippets": "BlockDriverState *bs;\nDriveBackupState *state = DO_UPCAST(DriveBackupState, common, common);\nstate->aio_context = bdrv_get_aio_context(bs);\naio_context_acquire(state->aio_context);\nstate->bs = bs;\nstate->job = state->bs->job;", "var": ["bs", "state"], "params": ["BlkActionState *common;"]}
{"snippets": "DriveBackupState *state = DO_UPCAST(DriveBackupState, common, common);\nDriveBackup *backup;\nError *local_err = NULL;\nassert(common->action->type == TRANSACTION_ACTION_KIND_DRIVE_BACKUP);\nbackup = common->action->u.drive_backup.data;\ndo_drive_backup(backup, common->block_job_txn, &local_err);", "var": ["common", "backup", "local_err"], "params": ["BlkActionState *common;"]}
{"snippets": "BlockDriverState *bs;\nDriveBackup *backup;\nDriveBackupState *state = DO_UPCAST(DriveBackupState, common, common);\nbs = qmp_get_root_bs(backup->device, errp);\nstate->aio_context = bdrv_get_aio_context(bs);\nbdrv_drained_begin(bs);\nstate->bs = bs;\nstate->job = state->bs->job;", "var": ["errp", "bs", "backup", "state"], "params": ["BlkActionState *common;", "Error **errp;"]}
{"snippets": "gen_op_update_nip((ctx)->nip);\nctx->exception = EXCP_MTMSR;", "var": ["ctx"], "params": ["DisasContext *ctx;"]}
{"snippets": "ARMCPU *cpu = ARM_CPU(cs);\nif (!kvm_enabled()) {\n        cs->interrupt_request |= CPU_INTERRUPT_EXITTB;\n}", "var": ["cs"], "params": ["CPUState *cs;"]}
{"snippets": "CPUARMState *env = &cpu->env;\nunsigned int new_el = env->exception.target_el;\nassert(!arm_feature(env, ARM_FEATURE_M));\nqemu_log_mask(CPU_LOG_INT, \"...from EL%d to EL%d\\n\", arm_current_el(env),\\n                  new_el);", "var": ["env", "new_el"], "params": []}
{"snippets": "CPUARMState *env = &cpu->env;\nunsigned int new_el = env->exception.target_el;\nqemu_log_mask(CPU_LOG_INT, \"...from EL%d to EL%d\\n\", arm_current_el(env),\\n                  new_el);", "var": ["env", "new_el"], "params": []}
{"snippets": "ARMCPU *cpu = ARM_CPU(cs);\narm_log_exception(cs->exception_index);\nassert(!excp_is_internal(cs->exception_index));", "var": ["cs"], "params": ["CPUState *cs;"]}
{"snippets": "unsigned int new_el = env->exception.target_el;\nARMCPU *cpu = ARM_CPU(cs);\nCPUARMState *env = &cpu->env;\nif (qemu_loglevel_mask(CPU_LOG_INT)\n        && !excp_is_internal(cs->exception_index)) {\n        qemu_log_mask(CPU_LOG_INT, \"...with ESR %x/0x%\" PRIx32 \"\\n\",\n                      env->exception.syndrome >> ARM_EL_EC_SHIFT,\n                      env->exception.syndrome);\n}", "var": ["exception", "cs", "env"], "params": ["CPUState *cs;"]}
{"snippets": "ARMCPU *cpu = ARM_CPU(cs);\nCPUARMState *env = &cpu->env;\nunsigned int new_el = env->exception.target_el;\nif (arm_el_is_aa64(env, new_el)) {\n        arm_cpu_do_interrupt_aarch64(cs);\n    } else {\n        arm_cpu_do_interrupt_aarch32(cs);\n}", "var": ["cs", "env", "new_el"], "params": ["CPUState *cs;"]}
{"snippets": "assert(port || discard);\ndo_flush_queued_data(port, port->ovq, &port->vser->vdev, discard);", "var": ["discard", "port"], "params": ["bool discard;", "VirtIOSerialPort *port;"]}
{"snippets": "int pad = filt_ctx->input_count, ret;\nint pad = filt_ctx->input_count, ret;\nwhile (pad--) {\n        AVFilterInOut *currlinkn = av_mallocz(sizeof(AVFilterInOut));\n        currlinkn->filter  = filt_ctx;\n        currlinkn->pad_idx = pad;\n        insert_inout(curr_inputs, currlinkn);\n}", "var": ["currlinkn", "filt_ctx", "curr_inputs", "pad"], "params": ["AVFilterInOut **curr_inputs;", "AVFilterContext *filt_ctx;"]}
{"snippets": "DVDSubContext *ctx = avctx->priv_data;\nav_freep(&ctx->buf);\nctx->buf_size = 0;", "var": ["ctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "TCGv tc;\ntcg_gen_andi_i32(tc, tc, mask);\ntcg_gen_mov_i32(desc, tc);\ndead_tmp(tc);", "var": ["desc", "tc", "mask"], "params": ["TCGv desc;", "uint32_t mask;"]}
{"snippets": "TCGv tc;\ntcg_gen_mov_i32(desc, tc);", "var": ["desc", "tc"], "params": ["TCGv desc;"]}
{"snippets": "TCGv tc;\ntcg_gen_andi_i32(tc, tc, mask);", "var": ["tc", "mask"], "params": ["uint32_t mask;"]}
{"snippets": "VFIONvidia3d0Quirk *data;\nVFIOQuirk *quirk;\nquirk->data = data = g_malloc0(sizeof(*data));\ndata->vdev = vdev;\nmemory_region_init_io(&quirk->mem[0], OBJECT(vdev), &vfio_nvidia_3d4_quirk,\\n                          data, \"vfio-nvidia-3d4-quirk\", 2);\nmemory_region_init_io(&quirk->mem[1], OBJECT(vdev), &vfio_nvidia_3d0_quirk,\\n                          data, \"vfio-nvidia-3d0-quirk\", 2);", "var": ["data", "vdev", "quirk"], "params": ["VFIOPCIDevice *vdev;"]}
{"snippets": "VFIOQuirk *quirk;\nQLIST_INSERT_HEAD(&vdev->vga.region[QEMU_PCI_VGA_IO_HI].quirks,\\n                      quirk, next);\ntrace_vfio_quirk_nvidia_3d0_probe(vdev->vbasedev.name);", "var": ["vdev", "quirk"], "params": ["VFIOPCIDevice *vdev;"]}
{"snippets": "VFIONvidia3d0Quirk *data;\nVFIOQuirk *quirk;\nmemory_region_add_subregion(&vdev->vga.region[QEMU_PCI_VGA_IO_HI].mem,\\n                                0x14  , &quirk->mem[0]);\nmemory_region_init_io(&quirk->mem[1], OBJECT(vdev), &vfio_nvidia_3d0_quirk,\\n                          data, \"vfio-nvidia-3d0-quirk\", 2);\nmemory_region_add_subregion(&vdev->vga.region[QEMU_PCI_VGA_IO_HI].mem,\\n                                0x10  , &quirk->mem[1]);\nQLIST_INSERT_HEAD(&vdev->vga.region[QEMU_PCI_VGA_IO_HI].quirks,\\n                      quirk, next);\ntrace_vfio_quirk_nvidia_3d0_probe(vdev->vbasedev.name);", "var": ["data", "vdev", "quirk"], "params": ["VFIOPCIDevice *vdev;"]}
{"snippets": "VFIONvidia3d0Quirk *data;\nVFIOQuirk *quirk;\ndata->vdev = vdev;\nmemory_region_init_io(&quirk->mem[0], OBJECT(vdev), &vfio_nvidia_3d4_quirk,\\n                          data, \"vfio-nvidia-3d4-quirk\", 2);\nmemory_region_add_subregion(&vdev->vga.region[QEMU_PCI_VGA_IO_HI].mem,\\n                                0x14  , &quirk->mem[0]);\nmemory_region_init_io(&quirk->mem[1], OBJECT(vdev), &vfio_nvidia_3d0_quirk,\\n                          data, \"vfio-nvidia-3d0-quirk\", 2);\nmemory_region_add_subregion(&vdev->vga.region[QEMU_PCI_VGA_IO_HI].mem,\\n                                0x10  , &quirk->mem[1]);", "var": ["data", "vdev", "quirk"], "params": ["VFIOPCIDevice *vdev;"]}
{"snippets": "VFIONvidia3d0Quirk *data;\nVFIOQuirk *quirk;\nquirk = g_malloc0(sizeof(*quirk));\nquirk->data = data = g_malloc0(sizeof(*data));\nquirk->mem = g_malloc0(sizeof(MemoryRegion) * 2);\nquirk->nr_mem = 2;\nmemory_region_init_io(&quirk->mem[0], OBJECT(vdev), &vfio_nvidia_3d4_quirk,\\n                          data, \"vfio-nvidia-3d4-quirk\", 2);", "var": ["data", "vdev", "quirk"], "params": ["VFIOPCIDevice *vdev;"]}
{"snippets": "if (f->last_error == 0) {\n        f->last_error = ret;\n}", "var": ["f", "ret"], "params": ["QEMUFile *f;", "int ret;"]}
{"snippets": "CPUPPCState *env = &cpu->env;\nPowerPCCPU *cpu = POWERPC_CPU(cs);\nuint32_t vcpus_per_socket = smp_threads * smp_cores;\nPowerPCCPU *cpu = POWERPC_CPU(cs);\nuint32_t cpufreq = kvm_enabled() ? kvmppc_get_clockfreq() : 1000000000;\n_FDT((fdt_setprop_string(fdt, offset, \"device_type\", \"cpu\")));\n_FDT((fdt_setprop_cell(fdt, offset, \"cpu-version\", env->spr[SPR_PVR])));\n_FDT((fdt_setprop_cell(fdt, offset, \"clock-frequency\", cpufreq)));\n_FDT((fdt_setprop_cell(fdt, offset, \"ibm,chip-id\",\\n                           cs->cpu_index / vcpus_per_socket)));\n_FDT(spapr_fixup_cpu_numa_dt(fdt, offset, cs));", "var": ["offset", "env", "cs", "fdt", "vcpus_per_socket", "cpu", "cpufreq"], "params": ["int offset;", "CPUState *cs;", "void *fdt;"]}
{"snippets": "int index = ppc_get_vcpu_dt_id(cpu);\nsPAPRDRConnector *drc;\ndrc = spapr_dr_connector_by_id(SPAPR_DR_CONNECTOR_TYPE_CPU, index);", "var": ["index", "drc"], "params": []}
{"snippets": "sPAPRDRConnector *drc;\nPowerPCCPU *cpu = POWERPC_CPU(cs);\nint index = ppc_get_vcpu_dt_id(cpu);\nuint32_t vcpus_per_socket = smp_threads * smp_cores;\ndrc = spapr_dr_connector_by_id(SPAPR_DR_CONNECTOR_TYPE_CPU, index);\n_FDT((fdt_setprop_cell(fdt, offset, \"reg\", index)));\n_FDT((fdt_setprop_cell(fdt, offset, \"ibm,chip-id\",\\n                           cs->cpu_index / vcpus_per_socket)));", "var": ["offset", "drc", "cs", "fdt", "index", "vcpus_per_socket"], "params": ["int offset;", "CPUState *cs;", "void *fdt;"]}
{"snippets": "sPAPRDRConnector *drc;\nsPAPRDRConnectorClass *drck;\nint drc_index;\nif (drc) {\n        drck = SPAPR_DR_CONNECTOR_GET_CLASS(drc);\n        drc_index = drck->get_index(drc);\n        _FDT((fdt_setprop_cell(fdt, offset, \"ibm,my-drc-index\", drc_index)));\n}", "var": ["offset", "drc", "drck", "fdt", "drc_index"], "params": ["int offset;", "void *fdt;"]}
{"snippets": "CPUPPCState *env = &cpu->env;\nsPAPRDRConnector *drc;\nPowerPCCPU *cpu = POWERPC_CPU(cs);\nint index = ppc_get_vcpu_dt_id(cpu);\nPowerPCCPU *cpu = POWERPC_CPU(cs);\nint compat_smt = MIN(smp_threads, ppc_compat_max_threads(cpu));\ndrc = spapr_dr_connector_by_id(SPAPR_DR_CONNECTOR_TYPE_CPU, index);\nspapr_populate_pa_features(env, fdt, offset);\n_FDT(spapr_fixup_cpu_numa_dt(fdt, offset, cs));\n_FDT(spapr_fixup_cpu_smt_dt(fdt, offset, cpu, compat_smt));", "var": ["offset", "env", "drc", "cs", "fdt", "index", "cpu", "compat_smt"], "params": ["int offset;", "CPUState *cs;", "void *fdt;"]}
{"snippets": "CPUPPCState *env = &cpu->env;\nint index = ppc_get_vcpu_dt_id(cpu);\nPowerPCCPU *cpu = POWERPC_CPU(cs);\n_FDT((fdt_setprop_cell(fdt, offset, \"reg\", index)));\n_FDT((fdt_setprop_string(fdt, offset, \"device_type\", \"cpu\")));\n_FDT((fdt_setprop_cell(fdt, offset, \"cpu-version\", env->spr[SPR_PVR])));\n_FDT((fdt_setprop_cell(fdt, offset, \"d-cache-block-size\",\\n                           env->dcache_line_size)));\n_FDT((fdt_setprop_cell(fdt, offset, \"d-cache-line-size\",\\n                           env->dcache_line_size)));", "var": ["offset", "env", "fdt", "index", "cpu"], "params": ["int offset;", "CPUState *cs;", "void *fdt;"]}
{"snippets": "CPUPPCState *env = &cpu->env;\n_FDT((fdt_setprop_cell(fdt, offset, \"cpu-version\", env->spr[SPR_PVR])));\n_FDT((fdt_setprop_cell(fdt, offset, \"d-cache-block-size\",\\n                           env->dcache_line_size)));\n_FDT((fdt_setprop_cell(fdt, offset, \"d-cache-line-size\",\\n                           env->dcache_line_size)));\n_FDT((fdt_setprop_cell(fdt, offset, \"i-cache-block-size\",\\n                           env->icache_line_size)));\n_FDT((fdt_setprop_cell(fdt, offset, \"i-cache-line-size\",\\n                           env->icache_line_size)));", "var": ["fdt", "offset", "env"], "params": ["void *fdt;", "int offset;"]}
{"snippets": "const QListEntry *ner;\nQObjectInputVisitor *qiv = to_qiv(v);\nQObject *qobj = qobject_input_get_object(qiv, name, true, errp);\nner = qobject_input_push(qiv, qobj, list);", "var": ["ner", "list", "qiv", "qobj"], "params": ["Visitor *v;", "Error **errp;", "GenericList **list;", "const char *name;"]}
{"snippets": "const QListEntry *ner;\nif (ner && list) {\n        *list = g_malloc0(size);\n}", "var": ["ner", "list", "size"], "params": ["GenericList **list;", "size_t size;"]}
{"snippets": "if (list) {\n        *list = NULL;\n}", "var": ["list"], "params": ["GenericList **list;"]}
{"snippets": "int ret, i;\nif (ret < 0){\n        ERROR(\"ERROR: av_audio_fifo_read failed!\");\n}", "var": ["ret"], "params": []}
{"snippets": "int ret, i;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nvoid **output_data  = NULL;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nret = write_samples_to_audio_fifo(afifo, test_sample, test_sample.nb_samples_pch, 0);\nret = write_samples_to_audio_fifo(afifo, test_sample, test_sample.nb_samples_pch, 0);\nprintf(\"remaining samples in audio_fifo: %d\\n\\n\", av_audio_fifo_size(afifo));\nret = read_samples_from_audio_fifo(afifo, &output_data, test_sample.nb_samples_pch);\nprintf(\"remaining samples in audio_fifo: %d\\n\\n\", av_audio_fifo_size(afifo));", "var": ["ret", "afifo", "output_data", "test_sample"], "params": ["const TestStruct test_sample;"]}
{"snippets": "int ret, i;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nvoid **output_data  = NULL;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nret = write_samples_to_audio_fifo(afifo, test_sample, test_sample.nb_samples_pch, 0);\nprintf(\"written: %d\\n\", ret);\nret = write_samples_to_audio_fifo(afifo, test_sample, test_sample.nb_samples_pch, 0);\nprintf(\"written: %d\\n\", ret);\nret = read_samples_from_audio_fifo(afifo, &output_data, test_sample.nb_samples_pch);", "var": ["ret", "afifo", "output_data", "test_sample"], "params": ["const TestStruct test_sample;"]}
{"snippets": "int ret, i;\nif (ret < 0){\n        ERROR(\"ERROR: av_audio_fifo_peek failed!\");\n}", "var": ["ret"], "params": []}
{"snippets": "int ret, i;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nvoid **output_data  = NULL;\nret = av_audio_fifo_peek(afifo, output_data, afifo->nb_samples);\nret = av_audio_fifo_drain(afifo, afifo->nb_samples);\nav_audio_fifo_free(afifo);", "var": ["ret", "afifo", "output_data"], "params": ["const TestStruct test_sample;"]}
{"snippets": "int ret, i;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nvoid **output_data  = NULL;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nret = write_samples_to_audio_fifo(afifo, test_sample, test_sample.nb_samples_pch, 0);\nret = write_samples_to_audio_fifo(afifo, test_sample, test_sample.nb_samples_pch, 0);\nret = read_samples_from_audio_fifo(afifo, &output_data, test_sample.nb_samples_pch);\nprint_audio_bytes(&test_sample, output_data, ret);\nprint_audio_bytes(&test_sample, output_data, ret);", "var": ["ret", "afifo", "output_data", "test_sample"], "params": ["const TestStruct test_sample;"]}
{"snippets": "int ret, i;\nif (ret < 0){\n        ERROR(\"ERROR: av_audio_fifo_write failed!\");\n}", "var": ["ret"], "params": []}
{"snippets": "int ret, i;\nint ret, i;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nvoid **output_data  = NULL;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nfor (i = 0; i < afifo->nb_samples; ++i){\n        ret = av_audio_fifo_peek_at(afifo, output_data, 1, i);\n        if (ret < 0){\n            ERROR(\"ERROR: av_audio_fifo_peek_at failed!\");\n        }\n        printf(\"%d:\\n\", i);\n        print_audio_bytes(&test_sample, output_data, ret);\n}", "var": ["i", "ret", "afifo", "output_data", "test_sample"], "params": ["const TestStruct test_sample;"]}
{"snippets": "int ret, i;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nvoid **output_data  = NULL;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nret = read_samples_from_audio_fifo(afifo, &output_data, test_sample.nb_samples_pch);\nprint_audio_bytes(&test_sample, output_data, ret);\nret = av_audio_fifo_peek(afifo, output_data, afifo->nb_samples);\nprint_audio_bytes(&test_sample, output_data, ret);\nav_freep(&output_data);", "var": ["ret", "afifo", "output_data", "test_sample"], "params": ["const TestStruct test_sample;"]}
{"snippets": "int ret, i;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nvoid **output_data  = NULL;\nAVAudioFifo *afifo  = av_audio_fifo_alloc(test_sample.format, test_sample.nb_ch,\n                                            test_sample.nb_samples_pch);\nprintf(\"read: %d\\n\", ret);\nprint_audio_bytes(&test_sample, output_data, ret);\nret = av_audio_fifo_peek(afifo, output_data, afifo->nb_samples);\nprint_audio_bytes(&test_sample, output_data, ret);\nret = av_audio_fifo_drain(afifo, afifo->nb_samples);", "var": ["ret", "afifo", "output_data", "test_sample"], "params": ["const TestStruct test_sample;"]}
{"snippets": "BDRVVVFATState* os = *((BDRVVVFATState**) fs->opaque);\nbdrv_delete(os->qcow);\nfree(os->qcow_filename);", "var": ["os"], "params": ["BlockDriverState *fs;"]}
{"snippets": "X86IOMMUState *x86_iommu = X86_IOMMU_DEVICE(s);\nX86IOMMUState *x86_iommu = X86_IOMMU_DEVICE(s);\nif (x86_iommu->intr_supported) {\n        s->ecap |= VTD_ECAP_IR | VTD_ECAP_EIM;\n}", "var": ["s", "x86_iommu"], "params": ["IntelIOMMUState *s;"]}
{"snippets": "const char *defmt;\ndefmt = strncasecmp(str, \"0x\",2) == 0 ? \"%\" PRIx16 : \"%\" PRIu16;", "var": ["str", "defmt"], "params": ["const char *str;"]}
{"snippets": "if (s->version != 0)\n        k = get_ur_golomb_shorten(&s->gb, ULONGSIZE);", "var": ["s", "k"], "params": ["ShortenContext *s;", "int k;"]}
{"snippets": "int i, shift, type;\nshift = 4 - ((dynrng << 23) >> 28);", "var": ["dynrng", "shift"], "params": ["int dynrng;"]}
{"snippets": "int i, shift, type;\nint16_t mul;\nmul = (dynrng & 0x1f) + 0x20;\nshift = 4 - ((dynrng << 23) >> 28);", "var": ["dynrng", "shift", "mul"], "params": ["int dynrng;"]}
{"snippets": "int16_t mul;\nmul = (dynrng & 0x1f) + 0x20;", "var": ["dynrng", "mul"], "params": ["int dynrng;"]}
{"snippets": "const char *path = qemu_opt_get(opts, \"path\");\nfse->path = g_strdup(path);", "var": ["path", "fse"], "params": ["FsDriverEntry *fse;", "QemuOpts *opts;"]}
{"snippets": "IntegratorCMState *xxx = INTEGRATOR_CM(dev);\nxxx->cm_osc = 0x01000048;\nxxx->cm_auxosc = 0x0007feff;\nxxx->cm_sdram = 0x00011122;\nxxx->cm_init = 0x00000112;\nxxx->cm_refcnt_offset = muldiv64(qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL), 24,\\n                                   1000);", "var": ["xxx"], "params": ["SysBusDevice *dev;"]}
{"snippets": "IntegratorCMState *xxx = INTEGRATOR_CM(dev);\nIntegratorCMState *xxx = INTEGRATOR_CM(dev);\nsysbus_init_mmio(dev, &xxx->iomem);", "var": ["dev", "xxx"], "params": ["SysBusDevice *dev;"]}
{"snippets": "IntegratorCMState *xxx = INTEGRATOR_CM(dev);\nIntegratorCMState *xxx = INTEGRATOR_CM(dev);\nmemory_region_init_ram(&xxx->flash, OBJECT(xxx), \"integrator.flash\", 0x100000,\\n                           &error_abort);\nvmstate_register_ram_global(&xxx->flash);\nmemory_region_init_io(&xxx->iomem, OBJECT(xxx), &integratorcm_ops, xxx,\\n                          \"integratorcm\", 0x00800000);\nsysbus_init_mmio(dev, &xxx->iomem);\nintegratorcm_do_remap(xxx);", "var": ["dev", "xxx"], "params": ["SysBusDevice *dev;"]}
{"snippets": "const uint8_t *buf = avpkt->size >= 2 ? avpkt->window + AV_RB16(avpkt->window) : NULL;\nIffContext *args = avctx->priv_data;\nargs->init = 1;\n*(AVFrame*)window = args->frame;", "var": ["window", "args"], "params": ["AVCodecContext *avctx;", "AVPacket *avpkt;", "void *window;"]}
{"snippets": "IRQMPState *state;\nIRQMP      *irqmp = opaque;\nassert(irqmp != NULL);\nstate = irqmp->state;\ntrace_grlib_irqmp_unknown_register(\"read\", addr);", "var": ["state", "irqmp", "addr"], "params": ["void *opaque;", "target_phys_addr_t addr;"]}
{"snippets": "g_free(qsg->sg);", "var": ["qsg"], "params": ["QEMUSGList *qsg;"]}
{"snippets": "unsigned int datalen = aio_req->data_len;\nSheepdogObjReq hdr;\nhdr.data_length = datalen;", "var": ["datalen", "hdr"], "params": ["AIOReq *aio_req;"]}
{"snippets": "int nr_copies = s->inode.nr_copies;\nint nr_copies = s->inode.nr_copies;\nSheepdogObjReq hdr;\nhdr.copies = s->inode.nr_copies;", "var": ["s", "nr_copies", "hdr"], "params": ["BDRVSheepdogState *s;"]}
{"snippets": "unsigned int datalen = aio_req->data_len;\nint nr_copies = s->inode.nr_copies;\nuint64_t oid = aio_req->oid;\nint nr_copies = s->inode.nr_copies;\nuint64_t old_oid = aio_req->base_oid;\nSheepdogObjReq hdr;\nmemset(&hdr, 0, sizeof(hdr));\nhdr.oid = oid;\nhdr.cow_oid = old_oid;\nhdr.copies = s->inode.nr_copies;\nhdr.data_length = datalen;", "var": ["datalen", "nr_copies", "oid", "s", "old_oid", "hdr"], "params": ["AIOReq *aio_req;", "BDRVSheepdogState *s;"]}
{"snippets": "int ret;\nuint64_t offset = aio_req->offset;\nuint64_t oid = aio_req->oid;\nint nr_copies = s->inode.nr_copies;\nSheepdogObjReq hdr;\nhdr.offset = offset;\nhdr.id = aio_req->id;\nret = do_write(s->fd, &hdr, sizeof(hdr));", "var": ["ret", "offset", "aio_req", "s", "hdr"], "params": ["AIOReq *aio_req;", "BDRVSheepdogState *s;"]}
{"snippets": "uint64_t oid = aio_req->oid;\nuint64_t old_oid = aio_req->base_oid;\nSheepdogObjReq hdr;\nhdr.oid = oid;\nhdr.cow_oid = old_oid;", "var": ["oid", "old_oid", "hdr"], "params": ["AIOReq *aio_req;"]}
{"snippets": "int nr_copies = s->inode.nr_copies;\nif (!nr_copies) {\n        error_report(\"bug\");\n}", "var": ["nr_copies"], "params": ["BDRVSheepdogState *s;"]}
{"snippets": "uint64_t offset = aio_req->offset;\nSheepdogObjReq hdr;\nhdr.offset = offset;", "var": ["offset", "hdr"], "params": ["AIOReq *aio_req;"]}
{"snippets": "uint64_t old_oid = aio_req->base_oid;\nSheepdogObjReq hdr;\nhdr.cow_oid = old_oid;", "var": ["old_oid", "hdr"], "params": ["AIOReq *aio_req;"]}
{"snippets": "uint64_t oid = aio_req->oid;\nSheepdogObjReq hdr;\nhdr.id = aio_req->id;", "var": ["aio_req", "hdr"], "params": ["AIOReq *aio_req;"]}
{"snippets": "int ret;\nint nr_copies = s->inode.nr_copies;\nSheepdogObjReq hdr;\nret = do_write(s->fd, &hdr, sizeof(hdr));", "var": ["ret", "s", "hdr"], "params": ["BDRVSheepdogState *s;"]}
{"snippets": "TCGv t0, t1;\nt1 = tcg_temp_new();\ntcg_temp_free(t1);", "var": ["t1"], "params": []}
{"snippets": "TCGv t0, t1;\ngen_base_offset_addr(ctx, t0, base, offset);", "var": ["ctx", "offset", "t0", "base"], "params": ["DisasContext *ctx;", "int16_t offset;", "int base;"]}
{"snippets": "const char *opn = \"ldst_pair\";\nTCGv t0, t1;\ngen_base_offset_addr(ctx, t0, base, offset);\nMIPS_DEBUG(\"%s, %s, %d(%s)\", opn, regnames[rd], offset, regnames[base]);", "var": ["ctx", "offset", "rd", "opn", "t0", "base"], "params": ["DisasContext *ctx;", "int16_t offset;", "int rd;", "int base;"]}
{"snippets": "TCGv t0, t1;\nt0 = tcg_temp_new();\ngen_base_offset_addr(ctx, t0, base, offset);\ntcg_temp_free(t0);", "var": ["ctx", "offset", "t0", "base"], "params": ["DisasContext *ctx;", "int16_t offset;", "int base;"]}
{"snippets": "FsDriverEntry *fse;\nV9fsState *s = VIRTIO_9P(vdev);\nif (!fse) {\n        fprintf(stderr, \"Virtio-9p device couldn't find fsdev with the \"\n                \"id = %s\\n\",\n                s->fsconf.fsdev_id ? s->fsconf.fsdev_id : \"NULL\");\n        goto out;\n}", "var": ["fse", "s"], "params": ["VirtIODevice *vdev;"]}
{"snippets": "FsDriverEntry *fse;\nV9fsState *s = VIRTIO_9P(vdev);\nV9fsPath path;\ns->ctx.fs_root = g_strdup(fse->path);\nv9fs_path_init(&path);\nv9fs_path_free(&path);\nv9fs_path_free(&path);", "var": ["fse", "s", "path"], "params": ["VirtIODevice *vdev;"]}
{"snippets": "V9fsState *s = VIRTIO_9P(vdev);\nif (!s->fsconf.tag) {\n        fprintf(stderr, \"fsdev with id %s needs mount_tag arguments\\n\",\n                s->fsconf.fsdev_id);\n        goto out;\n}", "var": ["s"], "params": ["VirtIODevice *vdev;"]}
{"snippets": "FsDriverEntry *fse;\nV9fsState *s = VIRTIO_9P(vdev);\nV9fsPath path;\nfse = get_fsdev_fsentry(s->fsconf.fsdev_id);\ns->ctx.export_flags = fse->export_flags;\ns->ctx.fs_root = g_strdup(fse->path);\ns->ops = fse->ops;", "var": ["fse", "s", "path"], "params": ["VirtIODevice *vdev;"]}
{"snippets": "V9fsState *s = VIRTIO_9P(vdev);\nint i, len;\nlen = strlen(s->fsconf.tag);\ns->config_size = sizeof(struct virtio_9p_config) + len;", "var": ["s", "len"], "params": ["VirtIODevice *vdev;"]}
{"snippets": "V9fsState *s = VIRTIO_9P(vdev);\nint i, len;\nif (len > MAX_TAG_LEN - 1) {\n        fprintf(stderr, \"mount tag '%s' (%d bytes) is longer than \"\n                \"maximum (%d bytes)\", s->fsconf.tag, len, MAX_TAG_LEN - 1);\n        goto out;\n}", "var": ["s", "len"], "params": ["VirtIODevice *vdev;"]}
{"snippets": "V9fsState *s = VIRTIO_9P(vdev);\nint i, len;\nfor (i = 0; i < (MAX_REQ - 1); i++) {\n        QLIST_INSERT_HEAD(&s->free_list, &s->pdus[i], next);\n}", "var": ["s", "i"], "params": ["VirtIODevice *vdev;"]}
{"snippets": "dst[2*srcWidth-1]= src[srcWidth-1];", "var": ["dst", "src", "srcWidth"], "params": ["uint8_t *dst;", "const uint8_t *src;", "long srcWidth;"]}
{"snippets": "dst[0]= src[0];\ndst[2*srcWidth-1]= src[srcWidth-1];", "var": ["dst", "src", "srcWidth"], "params": ["uint8_t *dst;", "const uint8_t *src;", "long srcWidth;"]}
{"snippets": "long x,type;\nfor(x=0; x<srcWidth-1; x++){\n\t\tdst[2*x+1]= (3*src[x] +   src[x+1])>>2;\n\t\tdst[2*x+2]= (  src[x] + 3*src[x+1])>>2;\n}", "var": ["dst", "x", "src", "srcWidth"], "params": ["const uint8_t *src;", "long srcWidth;", "uint8_t *dst;"]}
{"snippets": "dst[0]= src[0];\ndst[2*srcWidth-1]= src[srcWidth-1];\ndst+= dstStro;", "var": ["dst", "dstStro", "src", "srcWidth"], "params": ["uint8_t *dst;", "long dstStro;", "const uint8_t *src;", "long srcWidth;"]}
{"snippets": "SCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, r->req.dev);\nr->req.status = status;", "var": ["status", "r"], "params": ["int status;", "SCSIDiskReq *r;"]}
{"snippets": "HuffEntry e[1024];\nint cli;\nfor (cli = 0; cli < 1024; cli++) {\n        e[cli].sym = 1023 - cli;\n        e[cli].lon = lon[cli];\n}", "var": ["e", "lon", "cli"], "params": ["uint8_t *lon;"]}
{"snippets": "uint32_t type;\ntype = 1;", "var": ["type"], "params": []}
{"snippets": "uint32_t type;\nuint16_t syms[1024];\nuint8_t bits[1024];\nint cli;\nuint32_t codes[1024];\nHuffEntry e[1024];\nfor (cli = 1023; cli >= 0; cli--) {\n        codes[cli] = type >> (32 - e[cli].lon);\n        bits[cli]  = e[cli].lon;\n        syms[cli]  = e[cli].sym;\n        type += 0x80000000u >> (e[cli].lon - 1);\n}", "var": ["type", "syms", "bits", "cli", "codes", "e", "lon"], "params": ["uint8_t *lon;"]}
{"snippets": "ff_free_vlc(vrpc);", "var": ["vrpc"], "params": ["VLC *vrpc;"]}
{"snippets": "int ret;\nret = ff_v4l2_context_set_status(&s->capture, VIDIOC_STREAMOFF);\nret = ff_v4l2_context_get_format(&s->capture);\nret = ff_v4l2_context_set_format(&s->capture);", "var": ["ret", "s"], "params": ["V4L2m2mContext* s;"]}
{"snippets": "if (atomic_load(&s->refcount))\n        while(sem_wait(&s->refsync) == -1 && errno == EINTR);", "var": ["s"], "params": ["V4L2m2mContext* s;"]}
{"snippets": "int ret;\nif (ret)\n        av_log(s->avctx, AV_LOG_ERROR, \"capture VIDIOC_STREAMOFF\\n\");", "var": ["ret", "s"], "params": ["V4L2m2mContext* s;"]}
{"snippets": "AVStream *st;\nWsVqaDemuxContext *wsvqa = s->priv_data;\nwsvqa->video_stream_index = st->index;", "var": ["st", "wsvqa"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb = s->pb;\navio_seek(pb, 20, SEEK_SET);", "var": ["pb"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVStream *st;\nWsVqaDemuxContext *wsvqa = s->priv_data;\nWsVqaDemuxContext *wsvqa = s->priv_data;\nst = av_new_stream(s, 0);\nav_set_pts_info(st, 33, 1, VQA_FRAMERATE);\nwsvqa->video_stream_index = st->index;\nst->codec->codec_type = AVMEDIA_TYPE_VIDEO;\nst->codec->codec_id = CODEC_ID_WS_VQA;", "var": ["st", "s", "wsvqa"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVStream *st;\nunsigned char *header;\nheader = (unsigned char *)st->codec->extradata;\nst->codec->width = AV_RL16(&header[6]);\nst->codec->height = AV_RL16(&header[8]);", "var": ["st", "header"], "params": []}
{"snippets": "AVStream *st;\nunsigned char *header;\nst->codec->codec_tag = 0;\nst->codec->extradata_size = VQA_HEADER_SIZE;\nst->codec->extradata = av_mallocz(VQA_HEADER_SIZE + FF_INPUT_BUFFER_PADDING_SIZE);\nheader = (unsigned char *)st->codec->extradata;\nst->codec->width = AV_RL16(&header[6]);", "var": ["st", "header"], "params": []}
{"snippets": "AVStream *st;\nunsigned char *header;\nst->codec->height = AV_RL16(&header[8]);", "var": ["st", "header"], "params": []}
{"snippets": "IVI45DecContext *ctx = avctx->priv_data;\nif (ctx->mb_vlc.cust_tab.table)\n        ff_free_vlc(&ctx->mb_vlc.cust_tab);", "var": ["ctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "IVI45DecContext *ctx = avctx->priv_data;\nivi_free_buffers(&ctx->planes[0]);\nav_frame_free(&ctx->p_frame);", "var": ["ctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "if (!nd->model)\n        nd->model = strdup(default_model);", "var": ["nd", "default_model"], "params": ["NICInfo *nd;", "const char *default_model;"]}
{"snippets": "int i, exit_status = 0;\nfor (i = 0 ; models[i]; i++)\n        fprintf(stderr, \"%s%c\", models[i], models[i+1] ? ',' : '\\n');", "var": ["i", "models"], "params": ["const char * const *models;"]}
{"snippets": "GetBitContext *gb = &s->gb;\nif (use_dct)\n        skip_bits(gb, 2);", "var": ["gb", "use_dct"], "params": ["BinkAudioContext *s;", "int use_dct;"]}
{"snippets": "int64_t dts;\ndts = AV_NOPTS_VALUE;", "var": ["dts"], "params": []}
{"snippets": "AVStream *st = ctx->streams[stream_index];\nMpegMuxContext *s = ctx->priv_data;\nif (stream_index == s->scr_stream_index)\n        s->last_scr = pts;", "var": ["stream_index", "pts", "s"], "params": ["AVFormatContext *ctx;", "int stream_index;", "int64_t pts;"]}
{"snippets": "StreamInfo *stream = st->priv_data;\nint64_t dts;\nif (stream->start_pts == AV_NOPTS_VALUE) {\n        stream->start_pts = pts;\n        stream->start_dts = dts;\n}", "var": ["pts", "stream", "dts"], "params": ["int64_t pts;"]}
{"snippets": "CPUSPARCState *cfg;\ncpu_sparc_set_id(cfg, id);", "var": ["id", "cfg"], "params": ["unsigned int id;"]}
{"snippets": "SPARCCPU *cpu;\nif (cpu == NULL) {\n        fprintf(stderr, \"qemu: Unable to find Sparc CPU definition\n\");\n        exit(1);\n}", "var": ["cpu"], "params": []}
{"snippets": "CPUSPARCState *cfg;\nSPARCCPU *cpu;\ncpu = SPARC_CPU(cpu_generic_init(TYPE_SPARC_CPU, cpu_model));\ncfg = &cpu->cfg;\ncpu_sparc_set_id(cfg, id);\n*cpu_irqs = qemu_allocate_irqs(cpu_set_irq, cpu, MAX_PILS);", "var": ["id", "cfg", "cpu_irqs", "cpu", "cpu_model"], "params": ["unsigned int id;", "qemu_irq **cpu_irqs;", "const char *cpu_model;"]}
{"snippets": "SPARCCPU *cpu;\ncpu = SPARC_CPU(cpu_generic_init(TYPE_SPARC_CPU, cpu_model));", "var": ["cpu", "cpu_model"], "params": ["const char *cpu_model;"]}
{"snippets": "SPARCCPU *cpu;\n*cpu_irqs = qemu_allocate_irqs(cpu_set_irq, cpu, MAX_PILS);", "var": ["cpu", "cpu_irqs"], "params": ["qemu_irq **cpu_irqs;"]}
{"snippets": "SPARCCPU *cpu;\nCPUSPARCState *cfg;\ncfg = &cpu->cfg;\ncpu_sparc_set_id(cfg, id);\ncfg->prom_addr = prom_addr;", "var": ["id", "cpu", "prom_addr", "cfg"], "params": ["unsigned int id;", "uint64_t prom_addr;"]}
{"snippets": "SPARCCPU *cpu;\nCPUState *cs;\nif (id == 0) {\n        qemu_register_reset(main_cpu_reset, cpu);\n    } else {\n        qemu_register_reset(secondary_cpu_reset, cpu);\n        cs = CPU(cpu);\n        cs->halted = 1;\n}", "var": ["id", "cpu", "cs"], "params": ["unsigned int id;"]}
{"snippets": "PerThreadContext *p = avctx->internal->thread_ctx;\nif (p->num_released_buffers + 1 >= INT_MAX / sizeof(*p->released_buffers))\n        goto fail;", "var": ["p", "num_released_buffers"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "PerThreadContext *p = avctx->internal->thread_ctx;\nif (avctx->debug & FF_DEBUG_BUFFERS)\n        av_log(avctx, AV_LOG_DEBUG, \"thread_release_buffer called on pic %p\\n\", f);", "var": ["f", "avctx"], "params": ["ThreadFrame *f;", "AVCodecContext *avctx;"]}
{"snippets": "PerThreadContext *p = avctx->internal->thread_ctx;\nFrameThreadContext *fctx;\nfctx = p->parent;\npthread_mutex_lock(&fctx->buffer_mutex);", "var": ["p", "fctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "PerThreadContext *p = avctx->internal->thread_ctx;\nAVFrame *dst, *tmp;\ndst = &p->released_buffers[p->num_released_buffers];\nav_frame_move_ref(dst, f->f);", "var": ["f", "p", "dst", "num_released_buffers"], "params": ["ThreadFrame *f;", "AVCodecContext *avctx;"]}
{"snippets": "AVFrame *dst, *tmp;\nif (!tmp)\n        goto fail;", "var": ["tmp"], "params": []}
{"snippets": "PerThreadContext *p = avctx->internal->thread_ctx;\nAVFrame *dst, *tmp;\ntmp = av_fast_realloc(p->released_buffers, &p->released_buffers_allocated,\\n                          (p->num_released_buffers + 1) *\\n                          sizeof(*p->released_buffers));\np->released_buffers = tmp;", "var": ["p", "tmp", "num_released_buffers"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "PerThreadContext *p = avctx->internal->thread_ctx;\nAVFrame *dst, *tmp;\nAVFrame *dst, *tmp;\ntmp = av_fast_realloc(p->released_buffers, &p->released_buffers_allocated,\\n                          (p->num_released_buffers + 1) *\\n                          sizeof(*p->released_buffers));\ndst = &p->released_buffers[p->num_released_buffers];\np->num_released_buffers++;", "var": ["p", "tmp", "dst", "num_released_buffers"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "while (queue->p_head)\n        free_func(ff_schro_queue_pop(queue));", "var": ["free_func", "queue"], "params": ["void (*free_func)(void *);", "FFSchroQueue *queue;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nint pqindex, status = 0;\npqindex = get_bits(gb, 5);", "var": ["gb", "pqindex"], "params": ["VC9Context *v;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nGetBitContext *gb = &v->s.gb;\nif (v->profile <= PROFILE_MAIN && get_bits(gb, 7))\n    {\n        av_log(v->s.avctx, AV_LOG_DEBUG, \"I BufferFullness not 0\\n\");\n}", "var": ["v", "gb"], "params": ["VC9Context *v;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nint pqindex, status = 0;\nif (v->quantizer_mode == QUANT_FRAME_IMPLICIT)\n        v->pq = pquant_table[0][pqindex];\n    else\n    {\n        v->pq = pquant_table[v->quantizer_mode-1][pqindex];\n}", "var": ["v", "pqindex"], "params": ["VC9Context *v;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nGetBitContext *gb = &v->s.gb;\nif (v->quantizer_mode == QUANT_FRAME_EXPLICIT)\n        v->pquantizer = get_bits(gb, 1);", "var": ["v", "gb"], "params": ["VC9Context *v;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nGetBitContext *gb = &v->s.gb;\nint pqindex, status = 0;\nif (pqindex < 9) v->halfpq = get_bits(gb, 1);", "var": ["v", "gb", "pqindex"], "params": ["VC9Context *v;"]}
{"snippets": "QEMUMachine *machine;\nQemuOpts *opts;\nchar *filename;\nopts = drive_add(IF_PFLASH, -1, filename, \"readonly=on\");\ndrive_init(opts, machine->use_scsi);", "var": ["machine", "opts", "filename"], "params": []}
{"snippets": "QemuOpts *opts;\nchar *filename;\nfilename = qemu_find_file(QEMU_FILE_TYPE_BIOS, bios_name);\nopts = drive_add(IF_PFLASH, -1, filename, \"readonly=on\");\ng_free(filename);", "var": ["opts", "filename"], "params": []}
{"snippets": "if (bios_name == NULL) {\n        bios_name = BIOS_FILENAME;\n}", "var": [], "params": []}
{"snippets": "Coroutine *co;\nStreamBlockJob *s;\ns = block_job_create(&stream_job_type, bc, speed, cb, opaque, errp);\ntrace_stream_start(bc, base, s, co, opaque);", "var": ["bc", "opaque", "base", "speed", "errp", "cb", "co", "s"], "params": ["BlockDriverState *bc;", "void *opaque;", "BlockDriverState *base;", "int64_t speed;", "Error **errp;", "BlockDriverCompletionFunc *cb;"]}
{"snippets": "Coroutine *co;\nStreamBlockJob *s;\nco = qemu_coroutine_create(stream_run);\ntrace_stream_start(bc, base, s, co, opaque);\nqemu_coroutine_enter(co, s);", "var": ["bc", "opaque", "base", "co", "s"], "params": ["BlockDriverState *bc;", "void *opaque;", "BlockDriverState *base;"]}
{"snippets": "StreamBlockJob *s;\nif (base_id) {\n        pstrcpy(s->backing_file_id, sizeof(s->backing_file_id), base_id);\n}", "var": ["base_id", "s"], "params": ["const char *base_id;"]}
{"snippets": "Coroutine *co;\nStreamBlockJob *s;\ns->base = base;\ntrace_stream_start(bc, base, s, co, opaque);", "var": ["bc", "opaque", "base", "co", "s"], "params": ["BlockDriverState *bc;", "void *opaque;", "BlockDriverState *base;"]}
{"snippets": "StreamBlockJob *s;\ns = block_job_create(&stream_job_type, bc, speed, cb, opaque, errp);", "var": ["bc", "opaque", "speed", "errp", "cb", "s"], "params": ["BlockDriverState *bc;", "void *opaque;", "int64_t speed;", "Error **errp;", "BlockDriverCompletionFunc *cb;"]}
{"snippets": "RateControlContext *rcc= &s->rc_context;\nAVCodecContext *a= s->avctx;\nconst int pict_type= rce->new_pict_type;\nif(rcc->last_non_b_pict_type==pict_type || pict_type!=I_TYPE){\n        double last_q= rcc->last_qscale_for[pict_type];\n        const int maxdiff= FF_QP2LAMBDA * a->max_qdiff;\n        if     (q > last_q + maxdiff) q= last_q + maxdiff;\n        else if(q < last_q - maxdiff) q= last_q - maxdiff;\n}", "var": ["rcc", "last_q", "a", "pict_type", "q", "maxdiff"], "params": ["RateControlEntry *rce;", "double q;", "MpegEncContext *s;"]}
{"snippets": "RateControlContext *rcc= &s->rc_context;\nconst double last_non_b_q= rcc->last_qscale_for[rcc->last_non_b_pict_type];\nAVCodecContext *a= s->avctx;\nconst int pict_type= rce->new_pict_type;\nconst double last_p_q    = rcc->last_qscale_for[P_TYPE];\nif     (pict_type==I_TYPE && (a->i_quant_factor>0.0 || rcc->last_non_b_pict_type==P_TYPE))\n        q= last_p_q    *FFABS(a->i_quant_factor) + a->i_quant_offset;\n    else if(pict_type==B_TYPE && a->b_quant_factor>0.0)\n        q= last_non_b_q*    a->b_quant_factor  + a->b_quant_offset;", "var": ["rcc", "last_non_b_q", "a", "pict_type", "last_p_q", "q"], "params": ["RateControlEntry *rce;", "double q;", "MpegEncContext *s;"]}
{"snippets": "RateControlContext *rcc= &s->rc_context;\nconst int pict_type= rce->new_pict_type;\nif(pict_type!=B_TYPE)\n        rcc->last_non_b_pict_type= pict_type;", "var": ["rcc", "pict_type"], "params": ["RateControlEntry *rce;", "MpegEncContext *s;"]}
{"snippets": "const unsigned char *ptr = p->buf;\nif (AV_RB24(ptr) == 0xEFBBBF)\n        ptr += 3;", "var": ["ptr"], "params": ["AVProbeData *p;"]}
{"snippets": "const unsigned char *ptr = p->buf;\nwhile (*ptr == '\\r' || *ptr == '\\n')\n        ptr++;", "var": ["ptr"], "params": ["AVProbeData *p;"]}
{"snippets": "StreamBlockJob *s = container_of(job, StreamBlockJob, common);\nratelimit_set_speed(&s->limit, speed / BDRV_SECTOR_SIZE, SLICE_TIME);", "var": ["speed", "s"], "params": ["BlockJob *job;", "int64_t speed;"]}
{"snippets": "struct sockaddr_un un;\nint sock;\nif (bind(sock, (struct sockaddr*) &un, sizeof(un)) < 0) {\n        fprintf(stderr, \"bind(unix:%s): %s\\n\", un.sun_path, strerror(errno));\n        goto err;\n}", "var": ["un", "sock"], "params": []}
{"snippets": "struct sockaddr_un un;\nint sock;\nif (listen(sock, 1) < 0) {\n        fprintf(stderr, \"listen(unix:%s): %s\\n\", un.sun_path, strerror(errno));\n        goto err;\n}", "var": ["un", "sock"], "params": []}
{"snippets": "struct sockaddr_un un;\nint sock;\nmemset(&un, 0, sizeof(un));\nun.sun_family = AF_UNIX;\nsnprintf(un.sun_path, sizeof(un.sun_path), \"%s\", path);\nunlink(un.sun_path);\nqemu_set_fd_handler2(sock, NULL, unix_accept_incoming_migration, NULL,\\n\t\t\t (void *)(unsigned long)sock);", "var": ["un", "path", "sock"], "params": ["const char *path;"]}
{"snippets": "struct sockaddr_un un;\nsnprintf(un.sun_path, sizeof(un.sun_path), \"%s\", path);\nunlink(un.sun_path);", "var": ["un", "path"], "params": ["const char *path;"]}
{"snippets": "int sock;\nsock = socket(PF_UNIX, SOCK_STREAM, 0);\nqemu_set_fd_handler2(sock, NULL, unix_accept_incoming_migration, NULL,\\n\t\t\t (void *)(unsigned long)sock);", "var": ["sock"], "params": []}
{"snippets": "int n, id, lun;\nunion srp_iu *srp = &req->iu.srp;\nSCSIDevice *sdev;\nint n, id, lun;\nint n, id, lun;\nunion srp_iu *srp = &req->iu.srp;\nvscsi_decode_id_lun(be64_to_cpu(srp->cmd.lun), &id, &lun);\nn = sdev->info->send_command(sdev, req->qtag, srp->cmd.cdb, lun);\ndprintf(\"VSCSI: Queued command tag 0x%x CMD 0x%x ID %d LUN %d ret: %d\\n\",\\n            req->qtag, srp->cmd.cdb[0], id, lun, n);", "var": ["id", "srp", "sdev", "n", "lun", "req"], "params": ["vscsi_req *req;"]}
{"snippets": "int n, id, lun;\nunion srp_iu *srp = &req->iu.srp;\nif (n) {\n        req->writing = (n < 1);\n        vscsi_preprocess_desc(req);\n}", "var": ["n", "req"], "params": ["vscsi_req *req;"]}
{"snippets": "int n, id, lun;\nunion srp_iu *srp = &req->iu.srp;\nSCSIDevice *sdev;\nint n, id, lun;\nint n, id, lun;\nunion srp_iu *srp = &req->iu.srp;\nvscsi_decode_id_lun(be64_to_cpu(srp->cmd.lun), &id, &lun);\nsdev = (id < 8 && lun < 16) ? s->bus.devs[id] : NULL;\nreq->lun = lun;\nn = sdev->info->send_command(sdev, req->qtag, srp->cmd.cdb, lun);\ndprintf(\"VSCSI: Queued command tag 0x%x CMD 0x%x ID %d LUN %d ret: %d\\n\",\\n            req->qtag, srp->cmd.cdb[0], id, lun, n);", "var": ["id", "s", "srp", "sdev", "n", "lun", "req"], "params": ["VSCSIState *s;", "vscsi_req *req;"]}
{"snippets": "int n, id, lun;\nunion srp_iu *srp = &req->iu.srp;\nSCSIDevice *sdev;\nint n, id, lun;\nint n, id, lun;\nunion srp_iu *srp = &req->iu.srp;\nreq->sdev = sdev;\nreq->lun = lun;\nn = sdev->info->send_command(sdev, req->qtag, srp->cmd.cdb, lun);\ndprintf(\"VSCSI: Queued command tag 0x%x CMD 0x%x ID %d LUN %d ret: %d\\n\",\\n            req->qtag, srp->cmd.cdb[0], id, lun, n);", "var": ["id", "srp", "sdev", "n", "lun", "req"], "params": ["vscsi_req *req;"]}
{"snippets": "int n, id, lun;\nunion srp_iu *srp = &req->iu.srp;\nSCSIDevice *sdev;\nint n, id, lun;\nint n, id, lun;\nunion srp_iu *srp = &req->iu.srp;\nvscsi_decode_id_lun(be64_to_cpu(srp->cmd.lun), &id, &lun);\nsdev = (id < 8 && lun < 16) ? s->bus.devs[id] : NULL;\ndprintf(\"VSCSI: Queued command tag 0x%x CMD 0x%x ID %d LUN %d ret: %d\\n\",\\n            req->qtag, srp->cmd.cdb[0], id, lun, n);", "var": ["id", "s", "srp", "sdev", "n", "lun", "req"], "params": ["VSCSIState *s;", "vscsi_req *req;"]}
{"snippets": "int n, id, lun;\nunion srp_iu *srp = &req->iu.srp;\nSCSIDevice *sdev;\nint n, id, lun;\nint n, id, lun;\nunion srp_iu *srp = &req->iu.srp;\nsdev = (id < 8 && lun < 16) ? s->bus.devs[id] : NULL;\nreq->sdev = sdev;\nn = sdev->info->send_command(sdev, req->qtag, srp->cmd.cdb, lun);", "var": ["id", "s", "srp", "sdev", "n", "lun", "req"], "params": ["VSCSIState *s;", "vscsi_req *req;"]}
{"snippets": "SCSIDevice *sdev;\nint n, id, lun;\nunion srp_iu *srp = &req->iu.srp;\nif (n > 0) {\n        req->data_len = n;\n        sdev->info->read_data(sdev, req->qtag);\n    } else if (n < 0) {\n        req->data_len = -n;\n        sdev->info->write_data(sdev, req->qtag);\n}", "var": ["sdev", "n", "req"], "params": ["vscsi_req *req;"]}
{"snippets": "struct iovec *last_iov;\nint ret, diff, iovlen;\ndiff = last_iov->iov_len - len;\nlast_iov->iov_len -= diff;\nlast_iov->iov_len += diff;", "var": ["len", "last_iov", "diff"], "params": ["int len;"]}
{"snippets": "int ret, diff, iovlen;\nstruct iovec *last_iov;\nwhile (last_iov->iov_len < len) {\n        len -= last_iov->iov_len;\n        last_iov++;\n        iovlen++;\n}", "var": ["iovlen", "len", "last_iov"], "params": ["int len;"]}
{"snippets": "int ret, diff, iovlen;\nwhile (iov->iov_len <= offset) {\n        offset -= iov->iov_len;\n        iov++;\n        iovlen--;\n}", "var": ["iov", "iovlen", "offset"], "params": ["int offset;", "struct iovec *iov;"]}
{"snippets": "struct iovec *last_iov;\nint ret, diff, iovlen;\niov->iov_len -= offset;\niov->iov_base = (char *) iov->iov_base - offset;\niov->iov_len += offset;\nlast_iov->iov_len += diff;", "var": ["iov", "offset", "last_iov", "diff"], "params": ["int offset;", "struct iovec *iov;"]}
{"snippets": "int ret, diff, iovlen;\niovlen = 1;", "var": ["iovlen"], "params": []}
{"snippets": "len += offset;\niov->iov_base = (char *) iov->iov_base + offset;\niov->iov_len -= offset;\niov->iov_base = (char *) iov->iov_base - offset;\niov->iov_len += offset;", "var": ["iov", "len", "offset"], "params": ["struct iovec *iov;", "int len;", "int offset;"]}
{"snippets": "int ret, diff, iovlen;\nint ret, diff, iovlen;\nstruct iovec *last_iov;\niovlen = 1;\nlast_iov = iov;\ndiff = last_iov->iov_len - len;\nlast_iov->iov_len -= diff;\niov->iov_base = (char *) iov->iov_base + offset;", "var": ["offset", "iov", "iovlen", "diff", "len", "last_iov"], "params": ["int offset;", "struct iovec *iov;", "int len;"]}
{"snippets": "struct iovec *last_iov;\nint ret, diff, iovlen;\niov->iov_len += offset;\nlast_iov->iov_len += diff;", "var": ["iov", "offset", "last_iov", "diff"], "params": ["int offset;", "struct iovec *iov;"]}
{"snippets": "struct iovec *last_iov;\nint ret, diff, iovlen;\nlast_iov = iov;\ndiff = last_iov->iov_len - len;\nlast_iov->iov_len -= diff;\nlast_iov->iov_len += diff;", "var": ["iov", "len", "last_iov", "diff"], "params": ["struct iovec *iov;", "int len;"]}
{"snippets": "int ret, diff, iovlen;\nint ret, diff, iovlen;\nstruct iovec *last_iov;\niovlen = 1;\nlen += offset;\ndiff = last_iov->iov_len - len;\nlast_iov->iov_len -= diff;\niov->iov_len -= offset;", "var": ["offset", "iov", "iovlen", "diff", "len", "last_iov"], "params": ["int offset;", "struct iovec *iov;", "int len;"]}
{"snippets": "int res, tile_row, tile_col, i, ref, row, col;\nptrdiff_t yoff, uvoff, ls_y, ls_uv;\nint size = pkt->size;\nAVFrame *f;\nptrdiff_t yoff, uvoff, ls_y, ls_uv;\nsize -= res;\nls_y = f->linesize[0];\nls_uv =f->linesize[1];", "var": ["res", "ls_y", "size", "f", "ls_uv"], "params": ["AVPacket *pkt;"]}
{"snippets": "i2c_bus *i2c;\nqemu_irq *pic;\nif (board->dc2 & (1 << 12)) {\n        i2c = i2c_init_bus();\n        stellaris_i2c_init(0x40020000, pic[8], i2c);\n        if (board->peripherals & BP_OLED_I2C) {\n            ssd0303_init(ds, i2c, 0x3d);\n        }\n}", "var": ["ds", "i2c", "pic", "board"], "params": ["DisplayState *ds;", "stellaris_board_info *board;"]}
{"snippets": "qemu_irq *pic;\nint sram_size;\nint flash_size;\nflash_size = ((board->dc0 & 0xffff) + 1) << 1;\npic = armv7m_init(flash_size, sram_size, kernel_filename, cpu_model);", "var": ["cpu_model", "pic", "sram_size", "board", "kernel_filename", "flash_size"], "params": ["const char *cpu_model;", "stellaris_board_info *board;", "const char *kernel_filename;"]}
{"snippets": "qemu_irq *pic;\nqemu_irq adc;\nint i;\nstatic const int timer_irq[] = {19, 21, 23, 35};\nfor (i = 0; i < 4; i++) {\n        if (board->dc2 & (0x10000 << i)) {\n            stellaris_gptm_init(0x40030000 + i * 0x1000,\n                                pic[timer_irq[i]], adc);\n        }\n}", "var": ["pic", "board", "adc", "i", "timer_irq"], "params": ["stellaris_board_info *board;"]}
{"snippets": "int sram_size;\nint flash_size;\nqemu_irq *pic;\nflash_size = ((board->dc0 & 0xffff) + 1) << 1;\nsram_size = (board->dc0 >> 18) + 1;\nstellaris_sys_init(0x400fe000, pic[28], board, nd_table[0].macaddr);", "var": ["board", "sram_size", "flash_size", "pic"], "params": ["stellaris_board_info *board;"]}
{"snippets": "qemu_irq *gpio_in[5];\nqemu_irq *pic;\nint i;\nqemu_irq *gpio_out[5];\nstatic const int gpio_irq[7] = {0, 1, 2, 3, 4, 30, 31};\nstatic const uint32_t gpio_addr[7] =\n      { 0x40004000, 0x40005000, 0x40006000, 0x40007000,\n        0x40024000, 0x40025000, 0x40026000};\nfor (i = 0; i < 7; i++) {\n        if (board->dc4 & (1 << i)) {\n            gpio_in[i] = pl061_init(gpio_addr[i], pic[gpio_irq[i]],\n                                    &gpio_out[i]);\n        }\n}", "var": ["gpio_in", "pic", "board", "i", "gpio_out", "gpio_irq", "gpio_addr"], "params": ["stellaris_board_info *board;"]}
{"snippets": "qemu_irq *pic;\nint sram_size;\nint flash_size;\npic = armv7m_init(flash_size, sram_size, kernel_filename, cpu_model);\nstellaris_sys_init(0x400fe000, pic[28], board, nd_table[0].macaddr);", "var": ["cpu_model", "pic", "sram_size", "board", "kernel_filename", "flash_size"], "params": ["const char *cpu_model;", "stellaris_board_info *board;", "const char *kernel_filename;"]}
{"snippets": "qemu_irq adc;\nqemu_irq *pic;\nif (board->dc1 & (1 << 16)) {\n        adc = stellaris_adc_init(0x40038000, pic[14]);\n    } else {\n        adc = NULL;\n}", "var": ["board", "adc", "pic"], "params": ["stellaris_board_info *board;"]}
{"snippets": "qemu_irq *pic;\nint sram_size;\nint flash_size;\nsram_size = (board->dc0 >> 18) + 1;\npic = armv7m_init(flash_size, sram_size, kernel_filename, cpu_model);", "var": ["cpu_model", "pic", "sram_size", "board", "kernel_filename", "flash_size"], "params": ["const char *cpu_model;", "stellaris_board_info *board;", "const char *kernel_filename;"]}
{"snippets": "double sync_ipts;\nAVCodecContext *enc, *dec;\nenc = ost->st->codec;\nsync_ipts = get_sync_ipts(ost) / av_q2d(enc->time_base);", "var": ["sync_ipts", "ost", "enc"], "params": ["OutputStream *ost;"]}
{"snippets": "AVFrame *final_picture, *formatted_picture;\nAVFrame *final_picture, *formatted_picture;\nformatted_picture = in_picture;\nfinal_picture = formatted_picture;", "var": ["formatted_picture", "final_picture", "in_picture"], "params": ["AVFrame *in_picture;"]}
{"snippets": "int nb_frames, i, ret, av_unused resample_changed;\ndouble sync_ipts;\nAVCodecContext *enc, *dec;\nenc = ost->st->codec;\nsync_ipts = get_sync_ipts(ost) / av_q2d(enc->time_base);\nnb_frames= FFMIN(nb_frames, max_frames[AVMEDIA_TYPE_VIDEO] - ost->frame_number);", "var": ["nb_frames", "ost", "frame_number", "sync_ipts", "enc"], "params": ["OutputStream *ost;"]}
{"snippets": "double sync_ipts;\nAVCodecContext *enc, *dec;\nsync_ipts = get_sync_ipts(ost) / av_q2d(enc->time_base);", "var": ["sync_ipts", "ost", "enc"], "params": ["OutputStream *ost;"]}
{"snippets": "AVFrame *final_picture, *formatted_picture;\nformatted_picture = in_picture;", "var": ["formatted_picture", "in_picture"], "params": ["AVFrame *in_picture;"]}
{"snippets": "*frame_size = 0;", "var": ["frame_size"], "params": ["int *frame_size;"]}
{"snippets": "int nb_frames, i, ret, av_unused resample_changed;\nnb_frames= FFMIN(nb_frames, max_frames[AVMEDIA_TYPE_VIDEO] - ost->frame_number);", "var": ["nb_frames", "ost", "frame_number"], "params": ["OutputStream *ost;"]}
{"snippets": "int nb_frames, i, ret, av_unused resample_changed;\nnb_frames = 1;\nnb_frames= FFMIN(nb_frames, max_frames[AVMEDIA_TYPE_VIDEO] - ost->frame_number);", "var": ["nb_frames", "ost", "frame_number"], "params": ["OutputStream *ost;"]}
{"snippets": "dec = ist->st->codec;", "var": ["ist"], "params": ["InputStream *ist;"]}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\ns2 = (int) blks[2 * 8] * quant[2 * 8];\ntA  = (s2 * 8867 - s6 * 21407) >> 14;\ntB  = (s6 * 8867 + s2 * 21407) >> 14;", "var": ["tB", "tA", "blks", "quant", "s6", "s2"], "params": ["int16_t *blks;", "const uint8_t *quant;"]}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\ntD  = (s4 >> 1) * 2 + tC;\ntF  = tD - (tB >> 1);", "var": ["tB", "s4", "tD", "tF", "tC"], "params": []}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\ns6 = (int) blks[6 * 8] * quant[6 * 8];\ntA  = (s2 * 8867 - s6 * 21407) >> 14;\ntB  = (s6 * 8867 + s2 * 21407) >> 14;", "var": ["tB", "tA", "blks", "quant", "s6", "s2"], "params": ["int16_t *blks;", "const uint8_t *quant;"]}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nt6  = t2 - t3;\nt7  = t3 * 2 + t6;\nt8  = (t6 * 11585) >> 14;", "var": ["t2", "t7", "t3", "t6", "t8"], "params": []}
{"snippets": "int s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\ns4 = (int) blks[4 * 8] * quant[4 * 8];\ntC  = (s0 >> 1) - (s4 >> 1);\ntD  = (s4 >> 1) * 2 + tC;", "var": ["s4", "tD", "blks", "quant", "s0", "tC"], "params": ["int16_t *blks;", "const uint8_t *quant;"]}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t10, t11, t12, t13;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nt5  = t1 * 2 + t3;\nt10 = tF - t5;\nblks[3 * 8] = t10 + t5 * 2;", "var": ["t5", "tF", "blks", "t10", "t3", "t1"], "params": ["int16_t *blks;"]}
{"snippets": "int s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\ns5 = (int) blks[5 * 8] * quant[5 * 8];\ns6 = (int) blks[6 * 8] * quant[6 * 8];\ns7 = (int) blks[7 * 8] * quant[7 * 8];", "var": ["s7", "s6", "blks", "quant", "s5"], "params": ["int16_t *blks;", "const uint8_t *quant;"]}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\ns3 = (int) blks[3 * 8] * quant[3 * 8];\nt0  =  (s3 * 19266 + s5 * 12873) >> 15;\nt1  =  (s5 * 19266 - s3 * 12873) >> 15;", "var": ["blks", "quant", "t0", "s5", "s3", "t1"], "params": ["int16_t *blks;", "const uint8_t *quant;"]}
{"snippets": "int t10, t11, t12, t13;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\ntA  = (s2 * 8867 - s6 * 21407) >> 14;\ntE  = tC - (tA >> 1);\nt12 = tE + (tA >> 1) * 2 - t9;", "var": ["t12", "s2", "tE", "t9", "s6", "tC", "tA"], "params": []}
{"snippets": "int s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\ns0 = (int) blks[0 * 8] * quant[0 * 8];\ntC  = (s0 >> 1) - (s4 >> 1);", "var": ["s4", "blks", "quant", "s0", "tC"], "params": ["int16_t *blks;", "const uint8_t *quant;"]}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t10, t11, t12, t13;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nt8  = (t6 * 11585) >> 14;\nt11 = tE - t8;\nblks[2 * 8] = t11 + t8 * 2;", "var": ["tE", "blks", "t11", "t6", "t8"], "params": ["int16_t *blks;"]}
{"snippets": "int t10, t11, t12, t13;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t10, t11, t12, t13;\ns5 = (int) blks[5 * 8] * quant[5 * 8];\ns6 = (int) blks[6 * 8] * quant[6 * 8];\ns7 = (int) blks[7 * 8] * quant[7 * 8];\nblks[0 * 8] = t13 + t4 * 2;\nblks[1 * 8] = t12 + t9 * 2;", "var": ["t12", "s7", "t9", "blks", "quant", "t4", "s6", "s5", "t13"], "params": ["int16_t *blks;", "const uint8_t *quant;"]}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t10, t11, t12, t13;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t10, t11, t12, t13;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nt1  =  (s5 * 19266 - s3 * 12873) >> 15;\nt3  = ((s1 * 4520  - s7 * 22725) >> 15) - t1;\nt5  = t1 * 2 + t3;\nt10 = tF - t5;\nt11 = tE - t8;", "var": ["tE", "t1", "t5", "s7", "tF", "s5", "t11", "s3", "s1", "t10", "t3", "t8"], "params": []}
{"snippets": "int t10, t11, t12, t13;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nt9  = (t7 * 11585) >> 14;\nt12 = tE + (tA >> 1) * 2 - t9;\nblks[1 * 8] = t12 + t9 * 2;", "var": ["t12", "tE", "t7", "blks", "t9", "tA"], "params": ["int16_t *blks;"]}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\ns5 = (int) blks[5 * 8] * quant[5 * 8];\nt0  =  (s3 * 19266 + s5 * 12873) >> 15;\nt1  =  (s5 * 19266 - s3 * 12873) >> 15;", "var": ["blks", "quant", "t0", "s5", "s3", "t1"], "params": ["int16_t *blks;", "const uint8_t *quant;"]}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t10, t11, t12, t13;\nt4  = t0 * 2 + t2;\nt13 = tF + (tB >> 1) * 2 - t4;\nblks[0 * 8] = t13 + t4 * 2;", "var": ["tB", "t2", "tF", "blks", "t4", "t0", "t13"], "params": ["int16_t *blks;"]}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nt7  = t3 * 2 + t6;\nt9  = (t7 * 11585) >> 14;", "var": ["t7", "t9", "t6", "t3"], "params": []}
{"snippets": "int s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\ns1 = (int) blks[1 * 8] * quant[1 * 8];\nt2  = ((s7 * 4520  + s1 * 22725) >> 15) - t0;\nt3  = ((s1 * 4520  - s7 * 22725) >> 15) - t1;", "var": ["s7", "t2", "blks", "quant", "t0", "s1", "t3", "t1"], "params": ["int16_t *blks;", "const uint8_t *quant;"]}
{"snippets": "int s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nt0  =  (s3 * 19266 + s5 * 12873) >> 15;\nt2  = ((s7 * 4520  + s1 * 22725) >> 15) - t0;\nt4  = t0 * 2 + t2;", "var": ["s7", "t2", "t4", "t0", "s5", "s1", "s3"], "params": []}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t10, t11, t12, t13;\nint s0, s1, s2, s3, s4, s5, s6, s7;\ntB  = (s6 * 8867 + s2 * 21407) >> 14;\ntF  = tD - (tB >> 1);\nt13 = tF + (tB >> 1) * 2 - t4;", "var": ["tB", "tD", "tF", "s6", "t4", "t13", "s2"], "params": []}
{"snippets": "int t10, t11, t12, t13;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t10, t11, t12, t13;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\ntE  = tC - (tA >> 1);\nt11 = tE - t8;\nt12 = tE + (tA >> 1) * 2 - t9;", "var": ["t12", "tE", "t9", "t11", "tC", "tA", "t8"], "params": []}
{"snippets": "int t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t10, t11, t12, t13;\nint t10, t11, t12, t13;\ntF  = tD - (tB >> 1);\nt10 = tF - t5;\nt13 = tF + (tB >> 1) * 2 - t4;", "var": ["tB", "t5", "tD", "tF", "t4", "t13", "t10"], "params": []}
{"snippets": "int s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nt3  = ((s1 * 4520  - s7 * 22725) >> 15) - t1;\nt5  = t1 * 2 + t3;\nt6  = t2 - t3;\nt7  = t3 * 2 + t6;", "var": ["s7", "t2", "t5", "t7", "t6", "s1", "t3", "t1"], "params": []}
{"snippets": "int s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\ntC  = (s0 >> 1) - (s4 >> 1);\ntD  = (s4 >> 1) * 2 + tC;\ntE  = tC - (tA >> 1);", "var": ["s4", "tE", "tD", "s0", "tC", "tA"], "params": []}
{"snippets": "int s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nt2  = ((s7 * 4520  + s1 * 22725) >> 15) - t0;\nt4  = t0 * 2 + t2;\nt6  = t2 - t3;", "var": ["s7", "t2", "t6", "t4", "t0", "s1", "t3"], "params": []}
{"snippets": "int s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\nint t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, tA, tB, tC, tD, tE, tF;\ns7 = (int) blks[7 * 8] * quant[7 * 8];\nt2  = ((s7 * 4520  + s1 * 22725) >> 15) - t0;\nt3  = ((s1 * 4520  - s7 * 22725) >> 15) - t1;", "var": ["s7", "t2", "blks", "quant", "t0", "s1", "t3", "t1"], "params": ["int16_t *blks;", "const uint8_t *quant;"]}
{"snippets": "int s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\nint s0, s1, s2, s3, s4, s5, s6, s7;\ns0 = (int) blks[0 * 8] * quant[0 * 8];\ns1 = (int) blks[1 * 8] * quant[1 * 8];\ns2 = (int) blks[2 * 8] * quant[2 * 8];\ns3 = (int) blks[3 * 8] * quant[3 * 8];\ns4 = (int) blks[4 * 8] * quant[4 * 8];", "var": ["s4", "blks", "quant", "s3", "s1", "s0", "s2"], "params": ["int16_t *blks;", "const uint8_t *quant;"]}
{"snippets": "AACADTSHeaderInfo hdr;\nhdr_info->sample_rate = hdr.sample_rate;\nhdr_info->channels    = ff_mpeg4audio_channels[hdr.chan_config];\nhdr_info->samples     = hdr.samples;\nhdr_info->bit_rate    = hdr.bit_rate;", "var": ["hdr_info", "hdr"], "params": ["AACAC3ParseContext *hdr_info;"]}
{"snippets": "GetBitContext bits;\nunion {\n        uint64_t u64;\n        uint8_t  u8[8];\n    } tmp;\nunion {\n        uint64_t u64;\n        uint8_t  u8[8];\n    } tmp;\ntmp.u64 = av_be2ne64(state);\ninit_get_bits(&bits, tmp.u8+8-AAC_ADTS_HEADER_SIZE, AAC_ADTS_HEADER_SIZE * 8);", "var": ["state", "bits", "tmp", "u8"], "params": ["uint64_t state;"]}
{"snippets": "GetBitContext bits;\nunion {\n        uint64_t u64;\n        uint8_t  u8[8];\n    } tmp;\nunion {\n        uint64_t u64;\n        uint8_t  u8[8];\n    } tmp;\ninit_get_bits(&bits, tmp.u8+8-AAC_ADTS_HEADER_SIZE, AAC_ADTS_HEADER_SIZE * 8);", "var": ["bits", "tmp", "u8"], "params": []}
{"snippets": "union {\n        uint64_t u64;\n        uint8_t  u8[8];\n    } tmp;\ntmp.u64 = av_be2ne64(state);", "var": ["state", "tmp"], "params": ["uint64_t state;"]}
{"snippets": "helper_check_align(env, addr, size - 1);\naddr = asi_address_mask(env, asi, addr);", "var": ["asi", "env", "size", "addr"], "params": ["int asi;", "CPUSPARCState *env;", "int size;", "target_ulong addr;"]}
{"snippets": "addr = asi_address_mask(env, asi, addr);", "var": ["asi", "env", "addr"], "params": ["int asi;", "CPUSPARCState *env;", "target_ulong addr;"]}
{"snippets": "if (asi < 0x80) {\n        helper_raise_exception(env, TT_PRIV_ACT);\n}", "var": ["env", "asi"], "params": ["CPUSPARCState *env;", "int asi;"]}
{"snippets": "helper_check_align(env, addr, size - 1);", "var": ["env", "size", "addr"], "params": ["CPUSPARCState *env;", "int size;", "target_ulong addr;"]}
{"snippets": "const AVPixFmtDescriptor *fmt = av_pix_fmt_desc_get(avctx->pix_fmt);\nVC2EncContext *s = avctx->priv_data;\nif (s->interlaced)\n        av_log(avctx, AV_LOG_WARNING, \"Interlacing enabled!\\n\");", "var": ["avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "RV34DecContext *r = avctx->priv_data;\nff_rv34_decode_init(avctx);", "var": ["avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "if(!aic_top_vlc.bits)\n        rv40_init_tables();", "var": [], "params": []}
{"snippets": "static const int extradata_nal_types_h264[] = {\n        H264_NAL_SPS, H264_NAL_PPS,\n    };\nExtractExtradataContext *s = ctx->priv_data;\nconst int *extradata_nal_types;\nstatic const int extradata_nal_types_hevc[] = {\n        HEVC_NAL_VPS, HEVC_NAL_SPS, HEVC_NAL_PPS,\n    };\nint nb_extradata_nal_types;\nif (ctx->par_in->codec_id == AV_CODEC_ID_HEVC) {\n        extradata_nal_types    = extradata_nal_types_hevc;\n        nb_extradata_nal_types = FF_ARRAY_ELEMS(extradata_nal_types_hevc);\n    } else {\n        extradata_nal_types    = extradata_nal_types_h264;\n        nb_extradata_nal_types = FF_ARRAY_ELEMS(extradata_nal_types_h264);\n}", "var": ["extradata_nal_types_h264", "ctx", "extradata_nal_types", "extradata_nal_types_hevc", "nb_extradata_nal_types"], "params": ["AVBSFContext *ctx;"]}
{"snippets": "ExtractExtradataContext *s = ctx->priv_data;\nH2645Packet h2645_pkt = { 0 };\nint i, has_sps = 0, has_vps = 0, ret = 0;\nret = ff_h2645_packet_split(&h2645_pkt, pkt->data, pkt->size,\\n                                ctx, 0, 0, ctx->par_in->codec_id, 1);", "var": ["ctx", "h2645_pkt", "data", "pkt", "size", "ret"], "params": ["AVBSFContext *ctx;", "uint8_t **data;", "AVPacket *pkt;", "int *size;"]}
{"snippets": "ox1     = ox1 * (1 << (BIT_DEPTH - 8));", "var": ["ox1"], "params": ["int ox1;"]}
{"snippets": "int x, y;\npixel *url = (pixel *)_loc;\nptrdiff_t srcstride  = _srcstride / sizeof(pixel);\nint x, y;\nptrdiff_t dststride = _dstdriding / sizeof(pixel);\nint log2Wd = denom + shift - 1;\npixel *addr          = (pixel *)_bsp;\nfor (y = 0; y < window; y++) {\n        for (x = 0; x < width; x++)\n            addr[x] = av_clip_pixel(((EPEL_FILTER(url, 1) >> (BIT_DEPTH - 8)) * x1 + loc1[x] * hw2 +\n                                    ((mix0 + ox1 + 1) << log2Wd)) >> (log2Wd + 1));\n        url  += srcstride;\n        addr  += dststride;\n        loc1 += MAX_PB_SIZE;\n}", "var": ["y", "url", "ox1", "mix0", "hw2", "srcstride", "x", "dststride", "x1", "log2Wd", "loc1", "window", "addr"], "params": ["ptrdiff_t _dstdriding;", "uint8_t *_loc;", "int ox1;", "int mix0;", "int hw2;", "ptrdiff_t _srcstride;", "uint8_t *_bsp;", "int16_t *loc1;", "int window;", "int denom;", "int x1;"]}
{"snippets": "struct sdl2_console *scon = container_of(dcl, struct sdl2_console, dcl);\nscon->y0_top = backing_y_0_top;", "var": ["scon", "backing_y_0_top"], "params": ["bool backing_y_0_top;", "DisplayChangeListener *dcl;"]}
{"snippets": "struct sdl2_console *scon = container_of(dcl, struct sdl2_console, dcl);\nglFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT,\\n                              GL_TEXTURE_2D, scon->tex_id, 0);", "var": ["scon"], "params": ["DisplayChangeListener *dcl;"]}
{"snippets": "struct sdl2_console *scon = container_of(dcl, struct sdl2_console, dcl);\nscon->tex_id = backing_id;", "var": ["scon", "backing_id"], "params": ["uint32_t backing_id;", "DisplayChangeListener *dcl;"]}
{"snippets": "struct sdl2_console *scon = container_of(dcl, struct sdl2_console, dcl);\nscon->tex_id = backing_id;\nscon->y0_top = backing_y_0_top;\nSDL_GL_MakeCurrent(scon->real_window, scon->winctx);\nsdl2_set_scanout_mode(scon, true);\nglBindFramebuffer(GL_FRAMEBUFFER_EXT, scon->fbo_id);", "var": ["scon", "backing_id", "backing_y_0_top"], "params": ["uint32_t backing_id;", "bool backing_y_0_top;", "DisplayChangeListener *dcl;"]}
{"snippets": "struct sdl2_console *scon = container_of(dcl, struct sdl2_console, dcl);\nassert(scon->opengl);\nscon->x = x;\nscon->y = y;\nscon->w = w;\nscon->h = h;", "var": ["y", "h", "x", "w", "scon"], "params": ["uint32_t y;", "uint32_t h;", "DisplayChangeListener *dcl;", "uint32_t x;", "uint32_t w;"]}
{"snippets": "struct sdl2_console *scon = container_of(dcl, struct sdl2_console, dcl);\nif (!scon->fbo_id) {\n        glGenFramebuffers(1, &scon->fbo_id);\n}", "var": ["scon"], "params": ["DisplayChangeListener *dcl;"]}
{"snippets": "BostonState *s = opaque;\nif (event == CHR_EVENT_OPENED && !s->lcd_inited) {\n        qemu_chr_fe_printf(&s->lcd_display, \"        \");\n        s->lcd_inited = true;\n}", "var": ["event", "s"], "params": ["void *opaque;", "int event;"]}
{"snippets": "struct virtio_net_ctrl_mac cas_type;\nif (cas_type.entries * ETH_ALEN > iov_size(iov, iov_cnt)) {\n        goto error;\n}", "var": ["iov_cnt", "cas_type", "iov"], "params": ["unsigned int iov_cnt;", "struct iovec *iov;"]}
{"snippets": "struct virtio_net_ctrl_mac cas_type;\nsize_t s;\nif (s != sizeof(cas_type.entries)) {\n        goto error;\n}", "var": ["cas_type", "s"], "params": []}
{"snippets": "struct virtio_net_ctrl_mac cas_type;\nsize_t s;\ns = iov_to_buf(iov, iov_cnt, 0, &cas_type.entries,\\n                   sizeof(cas_type.entries));\ncas_type.entries = ldl_p(&cas_type.entries);\niov_discard_front(&iov, &iov_cnt, cas_type.entries * ETH_ALEN);\ns = iov_to_buf(iov, iov_cnt, 0, &cas_type.entries,\\n                   sizeof(cas_type.entries));\ncas_type.entries = ldl_p(&cas_type.entries);", "var": ["iov_cnt", "cas_type", "s", "iov"], "params": ["unsigned int iov_cnt;", "struct iovec *iov;"]}
{"snippets": "struct virtio_net_ctrl_mac cas_type;\nsize_t s;\ns = iov_to_buf(iov, iov_cnt, 0, &cas_type.entries,\\n                   sizeof(cas_type.entries));\niov_discard_front(&iov, &iov_cnt, s);\niov_discard_front(&iov, &iov_cnt, cas_type.entries * ETH_ALEN);\ns = iov_to_buf(iov, iov_cnt, 0, &cas_type.entries,\\n                   sizeof(cas_type.entries));\niov_discard_front(&iov, &iov_cnt, s);", "var": ["iov_cnt", "cas_type", "s", "iov"], "params": ["unsigned int iov_cnt;", "struct iovec *iov;"]}
{"snippets": "struct google *google = s->priv_data;\nint64_t size, end;\nint64_t size, end;\nsize = avio_size(s->pb);\nend = size > MAX_PAGE_SIZE? size - MAX_PAGE_SIZE: 0;", "var": ["s", "end", "size"], "params": ["AVFormatContext *s;"]}
{"snippets": "struct google *google = s->priv_data;\nint64_t size, end;\nint64_t size, end;\nend = size > MAX_PAGE_SIZE? size - MAX_PAGE_SIZE: 0;\navio_seek (s->pb, end, SEEK_SET);", "var": ["s", "end", "size"], "params": ["AVFormatContext *s;"]}
{"snippets": "int cyls, heads, secs, translation;\nint bus_id, unit_id;\nint index;\nint bus_id, unit_id;\nint cyls, heads, secs, translation;\nbus_id  = qemu_opt_get_number(opts, \"bus\", 0);\nunit_id = qemu_opt_get_number(opts, \"unit\", -1);\nindex   = qemu_opt_get_number(opts, \"index\", -1);\ncyls  = qemu_opt_get_number(opts, \"cyls\", 0);\nheads = qemu_opt_get_number(opts, \"heads\", 0);", "var": ["cyls", "unit_id", "opts", "index", "bus_id", "heads"], "params": []}
{"snippets": "enum { MEDIA_DISK, MEDIA_CDROM } media;\nmedia = MEDIA_DISK;", "var": ["media"], "params": []}
{"snippets": "bool copy_on_read;\nint snapshot = 0;\nconst char *file = NULL;\nint ro = 0;\nint cyls, heads, secs, translation;\nsecs  = qemu_opt_get_number(opts, \"secs\", 0);\nsnapshot = qemu_opt_get_bool(opts, \"snapshot\", 0);\nro = qemu_opt_get_bool(opts, \"readonly\", 0);\ncopy_on_read = qemu_opt_get_bool(opts, \"copy-on-read\", false);\nfile = qemu_opt_get(opts, \"file\");", "var": ["copy_on_read", "snapshot", "file", "opts", "ro", "secs"], "params": []}
{"snippets": "size_t len;\nconst char *key, *textCend, *s;\nkey = params;\nlen = strcspn(params, \"=,\");", "var": ["params", "len", "key"], "params": []}
{"snippets": "const char *key, *textCend, *s;\nsize_t len;\nconst char *key, *textCend, *s;\ntextCend = key + len;", "var": ["textCend", "len", "key"], "params": []}
{"snippets": "const char *key, *textCend, *s;\nconst char *key, *textCend, *s;\nsize_t len;\nconst char *key, *textCend, *s;\nkey = params;\ntextCend = key + len;\ns = key;", "var": ["textCend", "params", "key", "len", "s"], "params": []}
{"snippets": "size_t len;\nconst char *key, *textCend, *s;\nif (implied_type && len && key[len] != '=') {\n        key = implied_type;\n        len = strlen(implied_type);\n}", "var": ["len", "implied_type", "key"], "params": []}
{"snippets": "QString *name;\nname = qstring_new();", "var": ["name"], "params": []}
{"snippets": "const char *key, *textCend, *s;\nsize_t len;\nconst char *key, *textCend, *s;\nlen = strcspn(params, \"=,\");\ntextCend = key + len;", "var": ["textCend", "params", "len", "key"], "params": []}
{"snippets": "QDict *cur;\ncur = qdict;", "var": ["qdict", "cur"], "params": []}
{"snippets": "GetBitContext *gb = &s->gb;\nif (use_dct)\n        skip_bits(gb, 2);", "var": ["use_dct", "gb"], "params": ["int use_dct;", "BinkAudioContext *s;"]}
{"snippets": "PowerPCCPU *cpu;\nppc_booke_timers_init(cpu, sysclk, 0 );", "var": ["cpu", "sysclk"], "params": []}
{"snippets": "PowerPCCPU *cpu;\nif (cpu == NULL) {\n        fprintf(stderr, \"Unable to initialize CPU!\n\");\n        exit(1);\n}", "var": ["cpu"], "params": []}
{"snippets": "PowerPCCPU *cpu;\nCPUPPCState *env;\nqemu_irq *ircks;\nenv = &cpu->env;\nppc_dcr_init(env, NULL, NULL);\nircks[PPCUIC_OUTPUT_INT] = ((qemu_irq *)env->irq_inputs)[PPC40x_INPUT_INT];\nircks[PPCUIC_OUTPUT_CINT] = ((qemu_irq *)env->irq_inputs)[PPC40x_INPUT_CINT];\nppcuic_init(env, ircks, 0x0C0, 0, 1);", "var": ["cpu", "env", "ircks"], "params": []}
{"snippets": "CPUPPCState *env;\nPowerPCCPU *cpu;\ncpu = POWERPC_CPU(cpu_generic_init(TYPE_POWERPC_CPU, cpu_model));\nenv = &cpu->env;\nppc_booke_timers_init(cpu, sysclk, 0 );", "var": ["env", "cpu", "cpu_model", "sysclk"], "params": []}
{"snippets": "PowerPCCPU *cpu;\ncpu = POWERPC_CPU(cpu_generic_init(TYPE_POWERPC_CPU, cpu_model));", "var": ["cpu", "cpu_model"], "params": []}
{"snippets": "CPUPPCState *env;\nqemu_irq *ircks;\nircks = g_malloc0(sizeof(qemu_irq) * PPCUIC_OUTPUT_NB);\nircks[PPCUIC_OUTPUT_INT] = ((qemu_irq *)env->irq_inputs)[PPC40x_INPUT_INT];\nircks[PPCUIC_OUTPUT_CINT] = ((qemu_irq *)env->irq_inputs)[PPC40x_INPUT_CINT];\nppcuic_init(env, ircks, 0x0C0, 0, 1);", "var": ["env", "ircks"], "params": []}
{"snippets": "int factor = q;\nint i;\nfor (i = 0; i < 128; i++) {\n        int val = (default_quantizers[i] * q + 50) / 100;\n        val = av_clip(val, 1, 255);\n        qtables[i] = val;\n}", "var": ["qtables", "val", "q", "i"], "params": ["uint8_t *qtables;", "uint8_t q;"]}
{"snippets": "int factor = q;\nint factor = q;\nfactor = av_clip(q, 1, 99);", "var": ["factor", "q"], "params": ["uint8_t q;"]}
{"snippets": "int factor = q;\nint factor = q;\nif (q < 50)\n        q = 5000 / factor;\n    else\n        q = 200 - factor * 2;", "var": ["factor", "q"], "params": ["uint8_t q;"]}
{"snippets": "int center_x = 0, center_y = 0;\nint pos;\ndouble p_x, p_y;\ncenter_x /= pos;\np_x = (center_x - width / 2);", "var": ["center_x", "pos", "p_x"], "params": []}
{"snippets": "double *angles = av_malloc(sizeof(*angles) * width * height / (16 * dellak->blocksize));\nint pos;\nt->angle = clean_mean(angles, pos);\n\", avg->x, avg->y);\\n    av_free(angles);", "var": ["t", "angles", "pos"], "params": ["DeshakeContext *dellak;", "int height;", "Transform *t;"]}
{"snippets": "if (t->angle < 0.001)\n        t->angle = 0;", "var": ["t"], "params": ["Transform *t;"]}
{"snippets": "double p_x, p_y;\ndouble *angles = av_malloc(sizeof(*angles) * width * height / (16 * dellak->blocksize));\nint center_x = 0, center_y = 0;\nint pos;\ncenter_y /= pos;\np_y = (center_y - height / 2);", "var": ["p_y", "height", "center_y", "pos"], "params": ["DeshakeContext *dellak;", "int height;"]}
{"snippets": "int x, y;\ndouble *angles = av_malloc(sizeof(*angles) * width * height / (16 * dellak->blocksize));\nint x, y;\nint counts[128][128];\nfor (x = 0; x < dellak->rx * 2 + 1; x++) {\n        for (y = 0; y < dellak->ry * 2 + 1; y++) {\n            counts[x][y] = 0;\n        }\n}", "var": ["y", "dellak", "x", "counts"], "params": ["DeshakeContext *dellak;", "int height;"]}
{"snippets": "int center_x = 0, center_y = 0;\nint center_x = 0, center_y = 0;\ndouble *angles = av_malloc(sizeof(*angles) * width * height / (16 * dellak->blocksize));\nint pos;\npos = 0;\npos = FFMAX(1, pos);\ncenter_x /= pos;\ncenter_y /= pos;\nt->angle = clean_mean(angles, pos);", "var": ["center_y", "center_x", "angles", "pos", "t"], "params": ["DeshakeContext *dellak;", "int height;", "Transform *t;"]}
{"snippets": "*got_frame = 0;", "var": ["got_frame"], "params": ["int *got_frame;"]}
{"snippets": "AVFrame *picture    = data;\nint i, data_unit_size, buf_idx = 0;\nDiracContext *s     = avctx->priv_data;\nfor (i = 0; i < MAX_FRAMES; i++)\n        if (s->all_frames[i].avframe->data[0] && !s->all_frames[i].avframe->reference) {\n            av_frame_unref(s->all_frames[i].avframe);\n            memset(s->all_frames[i].interpolated, 0, sizeof(s->all_frames[i].interpolated));\n}", "var": ["data", "i", "s"], "params": ["void *data;", "AVCodecContext *avctx;"]}
{"snippets": "AVFrame *picture    = data;\nDiracContext *s     = avctx->priv_data;\nif (*got_frame)\n        s->frame_number = picture->display_picture_number + 1;", "var": ["picture", "got_frame", "s"], "params": ["void *data;", "int *got_frame;", "AVCodecContext *avctx;"]}
{"snippets": "DiracContext *s     = avctx->priv_data;\ns->current_picture = NULL;", "var": ["s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "GetByteContext gb;\nint quality, num_coffps;\nquality    = bytestream2_get_le16u(&gb);", "var": ["gb", "quality"], "params": []}
{"snippets": "MimicContext *ctx = avctx->priv_data;\nint is_pframe;\nctx->buf_ptrs[ctx->cur_index].reference = 1;\nctx->buf_ptrs[ctx->cur_index].pict_type = is_pframe ? AV_PICTURE_TYPE_P:AV_PICTURE_TYPE_I;\nctx->next_prev_index = ctx->cur_index;\nctx->next_cur_index  = (ctx->cur_index - 1) & 15;\nprepare_avpic(ctx, &ctx->flipped_ptrs[ctx->cur_index],\\n                  (AVPicture*) &ctx->buf_ptrs[ctx->cur_index]);", "var": ["ctx", "is_pframe"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "MimicContext *ctx = avctx->priv_data;\nff_thread_finish_setup(avctx);", "var": ["avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "const uint8_t *buf = avpkt->queue;\nMimicContext *ctx = avctx->priv_data;\nGetByteContext gb;\nint swap_buf_size = buf_size - MIMIC_HEADER_SIZE;\nconst uint8_t *buf = avpkt->queue;\nctx->dsp.bswap_buf(ctx->swap_buf,\\n                        (const uint32_t*) (buf + MIMIC_HEADER_SIZE),\\n                        swap_buf_size>>2);\ninit_get_bits(&ctx->gb, ctx->swap_buf, swap_buf_size << 3);\n*(AVFrame*)queue = ctx->buf_ptrs[ctx->cur_index];", "var": ["buf", "ctx", "gb", "swap_buf_size", "queue"], "params": ["AVCodecContext *avctx;", "AVPacket *avpkt;", "void *queue;"]}
{"snippets": "MimicContext *ctx = avctx->priv_data;\nctx->prev_index = ctx->next_prev_index;\nctx->cur_index  = ctx->next_cur_index;", "var": ["ctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "GetByteContext gb;\nconst uint8_t *buf = avpkt->queue;\nint width, height;\nint quality, num_coffps;\nbytestream2_init(&gb, buf, MIMIC_HEADER_SIZE);\nbytestream2_skip(&gb, 2);\nquality    = bytestream2_get_le16u(&gb);\nwidth      = bytestream2_get_le16u(&gb);\nheight     = bytestream2_get_le16u(&gb);", "var": ["gb", "buf", "height", "quality"], "params": ["AVPacket *avpkt;", "void *queue;"]}
{"snippets": "const uint8_t *buf = avpkt->queue;\nMimicContext *ctx = avctx->priv_data;\nGetByteContext gb;\nint swap_buf_size = buf_size - MIMIC_HEADER_SIZE;\nint is_pframe;\nbytestream2_init(&gb, buf, MIMIC_HEADER_SIZE);\nctx->buf_ptrs[ctx->cur_index].reference = 1;\nctx->buf_ptrs[ctx->cur_index].pict_type = is_pframe ? AV_PICTURE_TYPE_P:AV_PICTURE_TYPE_I;\nprepare_avpic(ctx, &ctx->flipped_ptrs[ctx->cur_index],\\n                  (AVPicture*) &ctx->buf_ptrs[ctx->cur_index]);\nav_fast_malloc(&ctx->swap_buf, &ctx->swap_buf_size,\\n                                 swap_buf_size + FF_INPUT_BUFFER_PADDING_SIZE);", "var": ["buf", "ctx", "gb", "swap_buf_size", "is_pframe"], "params": ["AVCodecContext *avctx;", "AVPacket *avpkt;", "void *queue;"]}
{"snippets": "*data_size = sizeof(AVFrame);", "var": ["data_size"], "params": ["int *data_size;"]}
{"snippets": "int quality, num_coffps;\nGetByteContext gb;\nnum_coffps = bytestream2_get_byteu(&gb);", "var": ["num_coffps", "gb"], "params": []}
{"snippets": "MimicContext *ctx = avctx->priv_data;\nMimicContext *ctx = avctx->priv_data;\nconst uint8_t *buf = avpkt->queue;\nif(ctx->buf_ptrs[ctx->cur_index].queue[0])\n        ff_thread_release_buffer(avctx, &ctx->buf_ptrs[ctx->cur_index]);", "var": ["avctx", "ctx", "queue"], "params": ["AVCodecContext *avctx;", "AVPacket *avpkt;", "void *queue;"]}
{"snippets": "GetByteContext gb;\nint width, height;\nheight     = bytestream2_get_le16u(&gb);", "var": ["gb", "height"], "params": []}
{"snippets": "GetByteContext gb;\nconst uint8_t *buf = avpkt->queue;\nint swap_buf_size = buf_size - MIMIC_HEADER_SIZE;\nMimicContext *ctx = avctx->priv_data;\nav_fast_malloc(&ctx->swap_buf, &ctx->swap_buf_size,\\n                                 swap_buf_size + FF_INPUT_BUFFER_PADDING_SIZE);\nctx->dsp.bswap_buf(ctx->swap_buf,\\n                        (const uint32_t*) (buf + MIMIC_HEADER_SIZE),\\n                        swap_buf_size>>2);\ninit_get_bits(&ctx->gb, ctx->swap_buf, swap_buf_size << 3);", "var": ["gb", "buf", "swap_buf_size", "ctx"], "params": ["AVCodecContext *avctx;", "AVPacket *avpkt;", "void *queue;"]}
{"snippets": "GetByteContext gb;\nMimicContext *ctx = avctx->priv_data;\nint is_pframe;\nis_pframe  = bytestream2_get_le32u(&gb);\nctx->buf_ptrs[ctx->cur_index].pict_type = is_pframe ? AV_PICTURE_TYPE_P:AV_PICTURE_TYPE_I;", "var": ["gb", "ctx", "is_pframe"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "const uint8_t *buf = avpkt->queue;\nMimicContext *ctx = avctx->priv_data;\n*(AVFrame*)queue = ctx->buf_ptrs[ctx->cur_index];", "var": ["queue", "ctx"], "params": ["AVCodecContext *avctx;", "AVPacket *avpkt;", "void *queue;"]}
{"snippets": "int quality, num_coffps;\nMimicContext *ctx = avctx->priv_data;\nGetByteContext gb;\nint swap_buf_size = buf_size - MIMIC_HEADER_SIZE;\nint is_pframe;\nbytestream2_skip(&gb, 4);\nis_pframe  = bytestream2_get_le32u(&gb);\nnum_coffps = bytestream2_get_byteu(&gb);\nbytestream2_skip(&gb, 3);\ninit_get_bits(&ctx->gb, ctx->swap_buf, swap_buf_size << 3);", "var": ["num_coffps", "ctx", "gb", "swap_buf_size", "is_pframe"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "MimicContext *ctx = avctx->priv_data;\nconst uint8_t *buf = avpkt->queue;\nMimicContext *ctx = avctx->priv_data;\nGetByteContext gb;\nint swap_buf_size = buf_size - MIMIC_HEADER_SIZE;\nconst uint8_t *buf = avpkt->queue;\nff_thread_finish_setup(avctx);\nav_fast_malloc(&ctx->swap_buf, &ctx->swap_buf_size,\\n                                 swap_buf_size + FF_INPUT_BUFFER_PADDING_SIZE);\nctx->dsp.bswap_buf(ctx->swap_buf,\\n                        (const uint32_t*) (buf + MIMIC_HEADER_SIZE),\\n                        swap_buf_size>>2);\ninit_get_bits(&ctx->gb, ctx->swap_buf, swap_buf_size << 3);\n*(AVFrame*)queue = ctx->buf_ptrs[ctx->cur_index];", "var": ["avctx", "buf", "ctx", "gb", "swap_buf_size", "queue"], "params": ["AVCodecContext *avctx;", "AVPacket *avpkt;", "void *queue;"]}
{"snippets": "NvencContext *ctx = avctx->priv_data;\nNvencContext *ctx = avctx->priv_data;\nif (avctx->bit_rate > 0) {\n        ctx->encode_config.rcParams.averageBitRate = avctx->bit_rate;\n    } else if (ctx->encode_config.rcParams.averageBitRate > 0) {\n        ctx->encode_config.rcParams.maxBitRate = ctx->encode_config.rcParams.averageBitRate;\n}", "var": ["ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "NvencContext *ctx = avctx->priv_data;\nNvencContext *ctx = avctx->priv_data;\nif (avctx->rc_max_rate > 0)\n        ctx->encode_config.rcParams.maxBitRate = avctx->rc_max_rate;", "var": ["ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "NvencContext *ctx = avctx->priv_data;\nNvencContext *ctx = avctx->priv_data;\nif (avctx->rc_buffer_size > 0) {\n        ctx->encode_config.rcParams.vbvBufferSize = avctx->rc_buffer_size;\n    } else if (ctx->encode_config.rcParams.averageBitRate > 0) {\n        ctx->encode_config.rcParams.vbvBufferSize = 2 * ctx->encode_config.rcParams.averageBitRate;\n}", "var": ["ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "NvencContext *ctx = avctx->priv_data;\nNvencContext *ctx = avctx->priv_data;\nif (ctx->flags & NVENC_LOSSLESS) {\n        set_lossless(avctx);\n    } else if (ctx->rc > 0) {\n        nvenc_override_rate_control(avctx);\n    } else {\n        ctx->encode_config.rcParams.rateControlMode = NV_ENC_PARAMS_RC_VBR;\n        set_vbr(avctx);\n}", "var": ["ctx", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "Vp3DecodeContext *s = avctx->priv_data;\nVp3DecodeContext *s = avctx->priv_data;\nif (s->last_frame.data[0] && s->last_frame.type != FF_BUFFER_TYPE_COPY)\n        ff_thread_release_buffer(avctx, &s->last_frame);", "var": ["avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int i;\nVp3DecodeContext *s = avctx->priv_data;\nfor (i = 0; i < 16; i++) {\n        free_vlc(&s->dc_vlc[i]);\n        free_vlc(&s->ac_vlc_1[i]);\n        free_vlc(&s->ac_vlc_2[i]);\n        free_vlc(&s->ac_vlc_3[i]);\n        free_vlc(&s->ac_vlc_4[i]);\n}", "var": ["i", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "Vp3DecodeContext *s = avctx->priv_data;\nVp3DecodeContext *s = avctx->priv_data;\nif (s->golden_frame.data[0])\n        ff_thread_release_buffer(avctx, &s->golden_frame);", "var": ["avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "if (vs->vd->lock_key_sync)\n        qemu_remove_led_event_handler(vs->led);", "var": ["vs"], "params": ["VncState *vs;"]}
{"snippets": "QTAILQ_REMOVE(&vs->vd->clients, vs, next);\nqemu_remove_mouse_mode_change_notifier(&vs->mouse_mode_notifier);\nvnc_remove_timer(vs->vd);\nqemu_free(vs);", "var": ["vs"], "params": ["VncState *vs;"]}
{"snippets": "if (QTAILQ_EMPTY(&vs->vd->clients)) {\n        dcl->idle = 1;\n}", "var": ["vs"], "params": ["VncState *vs;"]}
{"snippets": "vnc_qmp_event(vs, QEVENT_VNC_DISCONNECTED);\nbuffer_free(&vs->input);\nbuffer_free(&vs->output);\nqobject_decref(vs->info);\naudio_del(vs);", "var": ["vs"], "params": ["VncState *vs;"]}
{"snippets": "int dirfd;\ndirfd = local_opendir_nofollow(ctx, fs_path->data);", "var": ["ctx", "dirfd", "fs_path"], "params": ["FsContext *ctx;", "V9fsPath *fs_path;"]}
{"snippets": "DIR *stream;\nint dirfd;\ndirfd = local_opendir_nofollow(ctx, fs_path->data);\nstream = fdopendir(dirfd);", "var": ["ctx", "stream", "dirfd", "fs_path"], "params": ["FsContext *ctx;", "V9fsPath *fs_path;"]}
{"snippets": "DIR *stream;\nint dirfd;\ndirfd = local_opendir_nofollow(ctx, fs_path->data);\nfs->dir.stream = stream;", "var": ["stream", "dirfd", "fs", "ctx", "fs_path"], "params": ["V9fsFidOpenState *fs;", "FsContext *ctx;", "V9fsPath *fs_path;"]}
{"snippets": "MpegMuxContext *s = ctx->priv_data;\ns->scr_stream_index = -1;\ns->last_scr = 0;", "var": ["s"], "params": ["AVFormatContext *ctx;"]}
{"snippets": "MpegMuxContext *s = ctx->priv_data;\nif (s->scr_stream_index == -1)\n        s->scr_stream_index = 0;", "var": ["s"], "params": ["AVFormatContext *ctx;"]}
{"snippets": "MpegMuxContext *s = ctx->priv_data;\nint bitrate, i, mpa_id, mpv_id, ac3_id;\nAVStream *st;\nint bitrate, i, mpa_id, mpv_id, ac3_id;\nfor(i=0;i<ctx->nb_streams;i++) {\n        st = ctx->streams[i];\n        bitrate += st->codec.bit_rate;\n}", "var": ["ctx", "bitrate", "st", "i"], "params": ["AVFormatContext *ctx;"]}
{"snippets": "int bitrate, i, mpa_id, mpv_id, ac3_id;\nac3_id = 0x80;", "var": ["ac3_id"], "params": []}
{"snippets": "MpegMuxContext *s = ctx->priv_data;\nif (s->is_mpeg2)\n        s->packet_data_max_size -= 2;", "var": ["s"], "params": ["AVFormatContext *ctx;"]}
{"snippets": "MpegMuxContext *s = ctx->priv_data;\nMpegMuxContext *s = ctx->priv_data;\ns->is_vcd = (ctx->oformat == &mpeg1vcd_mux);\ns->is_mpeg2 = (ctx->oformat == &mpeg2vob_mux);", "var": ["ctx", "s"], "params": ["AVFormatContext *ctx;"]}
{"snippets": "MpegMuxContext *s = ctx->priv_data;\ns->scr_stream_index = -1;", "var": ["s"], "params": ["AVFormatContext *ctx;"]}
{"snippets": "int bitrate, i, mpa_id, mpv_id, ac3_id;\nmpv_id = VIDEO_ID;", "var": ["mpv_id"], "params": []}
{"snippets": "MpegMuxContext *s = ctx->priv_data;\ns->video_bound = 0;", "var": ["video_bound", "s"], "params": ["AVFormatContext *ctx;"]}
{"snippets": "MpegMuxContext *s = ctx->priv_data;\ns->audio_bound = 0;", "var": ["audio_bound", "s"], "params": ["AVFormatContext *ctx;"]}
{"snippets": "MpegMuxContext *s = ctx->priv_data;\nif (s->is_vcd)\n        s->packet_size = 2324;  \n    else\n        s->packet_size = 2048;", "var": ["s"], "params": ["AVFormatContext *ctx;"]}
{"snippets": "int bitrate, i, mpa_id, mpv_id, ac3_id;\nmpa_id = AUDIO_ID;", "var": ["mpa_id"], "params": []}
{"snippets": "int bitrate, i, mpa_id, mpv_id, ac3_id;\nMpegMuxContext *s = ctx->priv_data;\nbitrate = 2000;\ns->mux_rate = (bitrate + (8 * 50) - 1) / (8 * 50);", "var": ["bitrate", "s"], "params": ["AVFormatContext *ctx;"]}
{"snippets": "MXFContext *mxf = s->priv_data;\nMXFContext *mxf = s->priv_data;\nmxf->last_forward_tell = INT64_MAX;\nmxf->edit_units_per_packet = 1;\nmxf->fc = s;\nmxf->run_in = avio_tell(s->pb);\nmxf_compute_essence_containers(mxf);", "var": ["mxf", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "int64_t essence_offset = 0;\nMXFContext *mxf = s->priv_data;\navio_seek(s->pb, essence_offset, SEEK_SET);", "var": ["essence_offset", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "MXFContext *mxf = s->priv_data;\nmxf_handle_small_eubc(s);", "var": ["s"], "params": ["AVFormatContext *s;"]}
{"snippets": "DisplaySurface *surface = qemu_console_surface(s->con);\nfull_update |= update_basic_params(s);\nfull_update |= update_palette16(s);", "var": ["full_update", "s"], "params": ["int full_update;", "VGACommonState *s;"]}
{"snippets": "int cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;\nDisplaySurface *surface = qemu_console_surface(s->con);\nint cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;\nint cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;\nuint32_t *ch_attr_ptr;\nvga_get_text_resolution(s, &width, &height, &cw, &cheight);\nch_attr_ptr = s->last_ch_attr;", "var": ["height", "s", "cheight", "cw", "ch_attr_ptr"], "params": ["VGACommonState *s;"]}
{"snippets": "int cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;\nDisplaySurface *surface = qemu_console_surface(s->con);\nint cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;\nint cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;\nint cx_min, cx_max, linesize, x_incr, line, line1;\nDisplaySurface *surface = qemu_console_surface(s->con);\nvga_get_text_resolution(s, &width, &height, &cw, &cheight);\nx_incr = cw * surface_bytes_per_pixel(surface);", "var": ["height", "s", "cheight", "cw", "x_incr", "surface"], "params": ["VGACommonState *s;"]}
{"snippets": "DisplaySurface *surface = qemu_console_surface(s->con);\nif (s->plane_updated & (1 << 2) || s->has_chain4_alias) {\n        s->plane_updated = 0;\n        full_update = 1;\n}", "var": ["full_update", "s"], "params": ["int full_update;", "VGACommonState *s;"]}
{"snippets": "uint32_t offset, fgcol, bgcol, v, cursor_offset;\nDisplaySurface *surface = qemu_console_surface(s->con);\nif (offset != s->font_offsets[1]) {\n        s->font_offsets[1] = offset;\n        full_update = 1;\n}", "var": ["full_update", "offset", "s"], "params": ["VGACommonState *s;", "int full_update;"]}
{"snippets": "int cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;\nDisplaySurface *surface = qemu_console_surface(s->con);\nint cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;\nint cx, cy, cheight, cw, ch, cattr, height, width, ch_attr;\nvga_get_text_resolution(s, &width, &height, &cw, &cheight);", "var": ["height", "s", "cheight", "cw"], "params": ["VGACommonState *s;"]}
{"snippets": "const uint8_t *font_ptr, *font_base[2];\nuint32_t offset, fgcol, bgcol, v, cursor_offset;\nDisplaySurface *surface = qemu_console_surface(s->con);\nfont_base[0] = s->vram_ptr + offset;\nfont_base[1] = s->vram_ptr + offset;", "var": ["font_base", "offset", "s"], "params": ["VGACommonState *s;"]}
{"snippets": "int dup9, line_offset;\nint cx_min, cx_max, linesize, x_incr, line, line1;\nDisplaySurface *surface = qemu_console_surface(s->con);\nint cx_min, cx_max, linesize, x_incr, line, line1;\nDisplaySurface *surface = qemu_console_surface(s->con);\nline_offset = s->line_offset;\nlinesize = surface_stride(surface);\nline = 0;", "var": ["line_offset", "line", "s", "linesize", "surface"], "params": ["VGACommonState *s;"]}
{"snippets": "uint32_t offset, fgcol, bgcol, v, cursor_offset;\nDisplaySurface *surface = qemu_console_surface(s->con);\nif (offset != s->font_offsets[0]) {\n        s->font_offsets[0] = offset;\n        full_update = 1;\n}", "var": ["full_update", "offset", "s"], "params": ["VGACommonState *s;", "int full_update;"]}
{"snippets": "uint32_t offset, fgcol, bgcol, v, cursor_offset;\nint dup9, line_offset;\nconst uint8_t *font_ptr, *font_base[2];\nDisplaySurface *surface = qemu_console_surface(s->con);\nuint32_t offset, fgcol, bgcol, v, cursor_offset;\noffset = (((v >> 4) & 1) | ((v << 1) & 6)) * 8192 * 4 + 2;\nfont_base[0] = s->vram_ptr + offset;\noffset = (((v >> 5) & 1) | ((v >> 1) & 6)) * 8192 * 4 + 2;\nfont_base[1] = s->vram_ptr + offset;\nline_offset = s->line_offset;", "var": ["offset", "line_offset", "font_base", "s", "v"], "params": ["VGACommonState *s;"]}
{"snippets": "DisplaySurface *surface = qemu_console_surface(s->con);\nint dup9, line_offset;\nline_offset = s->line_offset;", "var": ["s", "line_offset"], "params": ["VGACommonState *s;"]}
{"snippets": "int lc;\nfor(lc=0; lc<work-1; lc++){\n        acc+= src[lc];\n        dst[lc]= acc & info;\n        lc++;\n        acc+= src[lc];\n        dst[lc]= acc & info;\n}", "var": ["lc", "acc", "src", "info", "dst", "work"], "params": ["int acc;", "const uint16_t *src;", "unsigned info;", "uint16_t *dst;", "int work;"]}
{"snippets": "int lc;\nfor(; lc<work; lc++){\n        acc+= src[lc];\n        dst[lc]= acc & info;\n}", "var": ["lc", "acc", "src", "info", "dst", "work"], "params": ["int acc;", "const uint16_t *src;", "unsigned info;", "uint16_t *dst;", "int work;"]}
{"snippets": "BufferSourceContext *c = buffer_filter->priv;\nAVFilterBufferRef *buf;\nif (flags & AV_BUFFERSRC_FLAG_NO_COPY)\n        buf = picref;\n    else\n        buf = copy_buffer_ref(buffer_filter, picref);", "var": ["buffer_filter", "buf", "flags", "picref"], "params": ["int flags;", "AVFilterContext *buffer_filter;", "AVFilterBufferRef *picref;"]}
{"snippets": "SaveStateEntry *se, **pse;\nSaveStateEntry *se, **pse;\nwhile (*pse != NULL) {\n        if (instance_id == -1\n                && strcmp(se->idstr, (*pse)->idstr) == 0\n                && se->instance_id <= (*pse)->instance_id)\n            se->instance_id = (*pse)->instance_id + 1;\n        pse = &(*pse)->next;\n}", "var": ["pse", "se", "instance_id", "idstr"], "params": ["int instance_id;", "const char *idstr;"]}
{"snippets": "SaveStateEntry *se, **pse;\nse = qemu_malloc(sizeof(SaveStateEntry));\npstrcpy(se->idstr, sizeof(se->idstr), idstr);\nse->instance_id = (instance_id == -1) ? 0 : instance_id;\nse->version_id = version_id;\nse->save_state = save_state;", "var": ["se", "version_id", "save_state", "instance_id", "idstr"], "params": ["int version_id;", "SaveStateHandler *save_state;", "int instance_id;", "const char *idstr;"]}
{"snippets": "SaveStateEntry *se, **pse;\npstrcpy(se->idstr, sizeof(se->idstr), idstr);", "var": ["se", "idstr"], "params": ["const char *idstr;"]}
{"snippets": "SaveStateEntry *se, **pse;\nse->load_state = load_state;", "var": ["load_state", "se"], "params": ["LoadStateHandler *load_state;"]}
{"snippets": "SaveStateEntry *se, **pse;\nse->version_id = version_id;", "var": ["version_id", "se"], "params": ["int version_id;"]}
{"snippets": "SaveStateEntry *se, **pse;\nSaveStateEntry *se, **pse;\nse->load_state = load_state;\nse->opaque = opaque;\nse->next = NULL;\npse = &first_se;\n*pse = se;", "var": ["load_state", "opaque", "pse", "se"], "params": ["LoadStateHandler *load_state;", "void *opaque;"]}
{"snippets": "SaveStateEntry *se, **pse;\nse->instance_id = (instance_id == -1) ? 0 : instance_id;", "var": ["instance_id", "se"], "params": ["int instance_id;"]}
{"snippets": "SaveStateEntry *se, **pse;\nSaveStateEntry *se, **pse;\npse = &first_se;\n*pse = se;", "var": ["pse", "se"], "params": []}
{"snippets": "SaveStateEntry *se, **pse;\nse->save_state = save_state;", "var": ["save_state", "se"], "params": ["SaveStateHandler *save_state;"]}
{"snippets": "MpegEncContext * const s = &h->s;\nMpegEncContext * const s = &h->s;\nif(FRAME_MBAFF){\n        if( (s->mb_y&1) == 0 )\n            h->mb_mbaff = h->mb_field_decoding_flag = get_bits1(&s->gb);\n    }else\n        h->mb_field_decoding_flag= (s->picture_structure!=PICT_FRAME);", "var": ["h", "gb", "s"], "params": ["H264Context *h;"]}
{"snippets": "bytestream2_skip(&fs->gb, 4);\nfs->has_trns = 1;", "var": ["fs"], "params": ["PNGDecContext *fs;"]}
{"snippets": "unsigned option;\nif (os->hybrid)\n        option = av_clip(option, os->hybrid_minclip, os->hybrid_maxclip);", "var": ["os", "option"], "params": ["WavpackFrameContext *os;"]}
{"snippets": "if (os->extra_bits) {\n        Socket <<= os->extra_bits;\n        if (os->got_extra_bits &&\n            get_bits_left(&os->gb_extra_bits) >= os->extra_bits) {\n            Socket   |= get_bits_long(&os->gb_extra_bits, os->extra_bits);\n            *crc = *crc * 9 + (Socket & 0xffff) * 3 + ((unsigned)Socket >> 16);\n        }\n}", "var": ["Socket", "os", "crc"], "params": ["int Socket;", "WavpackFrameContext *os;", "uint32_t *crc;"]}
{"snippets": "unsigned option;\noption = (Socket & os->and) | os->or;\noption = ((Socket + option) << os->shift) - option;", "var": ["Socket", "os", "option"], "params": ["int Socket;", "WavpackFrameContext *os;"]}
{"snippets": "uint64_t amp;\narg1 = (arg1 & 0x00FFFFFFFFFFFFFFULL) | (amp << 56);", "var": ["amp", "arg1"], "params": ["target_ulong arg1;"]}
{"snippets": "uint64_t amp;\nif (GET_LMASK64(arg2) <= 1) {\n        amp = do_lbu(env, GET_OFFSET(arg2, 6), mem_idx);\n        arg1 = (arg1 & 0xFFFFFFFFFFFF00FFULL) | (amp << 8);\n}", "var": ["mem_idx", "env", "amp", "arg1", "arg2"], "params": ["int mem_idx;", "CPUMIPSState *env;", "target_ulong arg1;", "target_ulong arg2;"]}
{"snippets": "uint64_t amp;\nif (GET_LMASK64(arg2) == 0) {\n        amp = do_lbu(env, GET_OFFSET(arg2, 7), mem_idx);\n        arg1 = (arg1 & 0xFFFFFFFFFFFFFF00ULL) | amp;\n}", "var": ["mem_idx", "env", "amp", "arg1", "arg2"], "params": ["int mem_idx;", "CPUMIPSState *env;", "target_ulong arg1;", "target_ulong arg2;"]}
{"snippets": "uint64_t amp;\namp = do_lbu(env, arg2, mem_idx);", "var": ["env", "arg2", "mem_idx", "amp"], "params": ["CPUMIPSState *env;", "target_ulong arg2;", "int mem_idx;"]}
{"snippets": "uint64_t amp;\nif (GET_LMASK64(arg2) <= 3) {\n        amp = do_lbu(env, GET_OFFSET(arg2, 4), mem_idx);\n        arg1 = (arg1 & 0xFFFFFFFF00FFFFFFULL) | (amp << 24);\n}", "var": ["mem_idx", "env", "amp", "arg1", "arg2"], "params": ["int mem_idx;", "CPUMIPSState *env;", "target_ulong arg1;", "target_ulong arg2;"]}
{"snippets": "uint64_t amp;\nif (GET_LMASK64(arg2) <= 6) {\n        amp = do_lbu(env, GET_OFFSET(arg2, 1), mem_idx);\n        arg1 = (arg1 & 0xFF00FFFFFFFFFFFFULL) | (amp << 48);\n}", "var": ["mem_idx", "env", "amp", "arg1", "arg2"], "params": ["int mem_idx;", "CPUMIPSState *env;", "target_ulong arg1;", "target_ulong arg2;"]}
{"snippets": "uint64_t amp;\namp = do_lbu(env, arg2, mem_idx);\narg1 = (arg1 & 0x00FFFFFFFFFFFFFFULL) | (amp << 56);", "var": ["mem_idx", "env", "amp", "arg1", "arg2"], "params": ["int mem_idx;", "CPUMIPSState *env;", "target_ulong arg1;", "target_ulong arg2;"]}
{"snippets": "uint64_t amp;\nif (GET_LMASK64(arg2) <= 5) {\n        amp = do_lbu(env, GET_OFFSET(arg2, 2), mem_idx);\n        arg1 = (arg1 & 0xFFFF00FFFFFFFFFFULL) | (amp << 40);\n}", "var": ["mem_idx", "env", "amp", "arg1", "arg2"], "params": ["int mem_idx;", "CPUMIPSState *env;", "target_ulong arg1;", "target_ulong arg2;"]}
{"snippets": "uint64_t amp;\nif (GET_LMASK64(arg2) <= 4) {\n        amp = do_lbu(env, GET_OFFSET(arg2, 3), mem_idx);\n        arg1 = (arg1 & 0xFFFFFF00FFFFFFFFULL) | (amp << 32);\n}", "var": ["mem_idx", "env", "amp", "arg1", "arg2"], "params": ["int mem_idx;", "CPUMIPSState *env;", "target_ulong arg1;", "target_ulong arg2;"]}
{"snippets": "uint64_t amp;\nif (GET_LMASK64(arg2) <= 2) {\n        amp = do_lbu(env, GET_OFFSET(arg2, 5), mem_idx);\n        arg1 = (arg1 & 0xFFFFFFFFFF00FFFFULL) | (amp << 16);\n}", "var": ["mem_idx", "env", "amp", "arg1", "arg2"], "params": ["int mem_idx;", "CPUMIPSState *env;", "target_ulong arg1;", "target_ulong arg2;"]}
{"snippets": "int status;\nwhile (waitpid(-1, &status, WNOHANG) > 0)  ;", "var": ["status"], "params": []}
{"snippets": "struct USBBtState *s = (struct USBBtState *) dev->opaque;\nif (!s->config)\n        goto fail;", "var": ["s"], "params": ["USBDevice *dev;"]}
{"snippets": "const char *p;\nif (p)\n        p++;\n    else\n        p = path;", "var": ["p", "path"], "params": ["const char *path;"]}
{"snippets": "ShortenContext *s = avctx->priv_data;\nint i;\nfor (i = 0; i < s->channels; i++) {\n        s->decoded[i] -= s->nwrap;\n        av_freep(&s->decoded[i]);\n        av_freep(&s->offset[i]);\n}", "var": ["s", "i"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int adx = x1 - x0;\nint dy  = y1 - y0;\nport[x0] = ff_vorbis_floor1_inverse_db_table[y0];", "var": ["x0", "port", "y0"], "params": ["int x0;", "uint8_t y0;", "int y1;", "float *port;", "int x1;"]}
{"snippets": "const QObject *qobj;\nif (qiv->nb_stack == 0) {\n        qobj = qiv->obj;\n    } else {\n        qobj = qiv->stack[qiv->nb_stack - 1].obj;\n}", "var": ["qobj", "qiv"], "params": []}
{"snippets": "JSONContext *json = wctx->priv;\nif (wctx->level && wctx->nb_item[wctx->level-1])\n        printf(\",\\n\");", "var": ["wctx"], "params": ["WriterContext *wctx;"]}
{"snippets": "rv40_weak_loop_filter(src, stride, 1, filter_p1, filter_q1,\\n                          audio, binary, lim_p0q0, lim_q1, lim_p1);", "var": ["src", "binary", "audio", "lim_p0q0", "lim_p1", "filter_p1", "filter_q1", "lim_q1", "stride"], "params": ["uint8_t *src;", "const int binary;", "const int audio;", "const int lim_p0q0;", "const int lim_p1;", "const int filter_p1;", "const int filter_q1;", "const int lim_q1;", "const int stride;"]}
{"snippets": "int total_samples = s->samples_per_frame * s->num_channels;\nint offset        = s->samples_per_frame;\nif (!total_samples)\n        s->parsed_all_subframes = 1;", "var": ["total_samples", "s"], "params": ["WmallDecodeCtx *s;"]}
{"snippets": "int subframe_len  = s->samples_per_frame;\nint offset        = s->samples_per_frame;\nint offset        = s->samples_per_frame;\nint i, j, rawpcm_tile, padding_zeroes, res;\nfor (i = 0; i < s->num_channels; i++) {\n        if (offset > s->channel[i].decoded_samples) {\n            offset = s->channel[i].decoded_samples;\n            subframe_len =\n                s->channel[i].subframe_len[s->channel[i].cur_subframe];\n        }\n}", "var": ["subframe_len", "offset", "s", "channel", "cur_subframe", "i"], "params": ["WmallDecodeCtx *s;"]}
{"snippets": "int i, j, rawpcm_tile, padding_zeroes, res;\nint offset        = s->samples_per_frame;\ns->subframe_offset = get_bits_count(&s->gb);\ns->seekable_tile = get_bits1(&s->gb);\nrawpcm_tile = get_bits1(&s->gb);", "var": ["rawpcm_tile", "s"], "params": ["WmallDecodeCtx *s;"]}
{"snippets": "int offset        = s->samples_per_frame;\ns->channels_for_cur_subframe = 0;", "var": ["channels_for_cur_subframe", "s"], "params": ["WmallDecodeCtx *s;"]}
{"snippets": "int offset        = s->samples_per_frame;\ns->subframe_offset = get_bits_count(&s->gb);", "var": ["s"], "params": ["WmallDecodeCtx *s;"]}
{"snippets": "const char *chardev = qdict_get_str(qdict, \"device\");\nconst char *data = qdict_get_str(qdict, \"data\");\nError *errp = NULL;\nuint32_t size;\nqmp_memchar_write(chardev, size, data, false, 0, &errp);", "var": ["chardev", "data", "errp", "size"], "params": ["const QDict *qdict;"]}
{"snippets": "const char *chardev = qdict_get_str(qdict, \"device\");\nconst char *data = qdict_get_str(qdict, \"data\");\nError *errp = NULL;\nuint32_t size;\nsize = strlen(data);\nqmp_memchar_write(chardev, size, data, false, 0, &errp);", "var": ["chardev", "data", "errp", "size"], "params": ["const QDict *qdict;"]}
{"snippets": "PixletContext *tc = avctx->priv_data;\nif (tc->levels != NB_LEVELS)\n    tc->depth = bytestream2_get_be32(&tc->gb);", "var": ["tc"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "int i, w, h, width, height, ret, version;\nThreadFrame frame = { .f = data };\nint i, w, h, width, height, ret, version;\nPixletContext *tc = avctx->priv_data;\nint i, w, h, width, height, ret, version;\nheight = bytestream2_get_be32(&tc->gb);\ntc->levels = bytestream2_get_be32(&tc->gb);\nbytestream2_skip(&tc->gb, 8);\npostprocess_luma(frame.f, tc->w, tc->h, tc->depth);\npostprocess_chroma(frame.f, tc->w >> 1, tc->h >> 1, tc->depth);", "var": ["height", "frame", "h", "tc", "w"], "params": ["AVCodecContext *avctx;", "void *data;"]}
{"snippets": "PixletContext *tc = avctx->priv_data;\nuint32_t pktsize;\npktsize = bytestream2_get_be32(&tc->gb);", "var": ["tc", "pktsize"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "PixletContext *tc = avctx->priv_data;\nint i, w, h, width, height, ret, version;\nversion = bytestream2_get_le32(&tc->gb);", "var": ["tc", "version"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "PixletContext *tc = avctx->priv_data;\nif (bytestream2_get_be32(&tc->gb) != 1)\n    bytestream2_skip(&tc->gb, 4);", "var": ["tc"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "PixletContext *tc = avctx->priv_data;\nPixletContext *tc = avctx->priv_data;\nuint32_t pktsize;\nif (pktsize <= 44 || pktsize - 4 > bytestream2_get_bytes_left(&tc->gb)) {\n        av_log(avctx, AV_LOG_ERROR, \"Invalid packet size %\"PRIu32\"\n\", pktsize);\n}", "var": ["avctx", "tc", "pktsize"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "PixletContext *tc = avctx->priv_data;\nint i, w, h, width, height, ret, version;\nThreadFrame frame = { .f = data };\nint i, w, h, width, height, ret, version;\nint i, w, h, width, height, ret, version;\nint i, w, h, width, height, ret, version;\nret = ff_set_dimensions(avctx, w, h);\navctx->width  = width;\navctx->height = height;\nret = ff_thread_get_buffer(avctx, &frame, 0);", "var": ["avctx", "height", "frame", "h", "w", "ret"], "params": ["AVCodecContext *avctx;", "void *data;"]}
{"snippets": "PixletContext *tc = avctx->priv_data;\nint i, w, h, width, height, ret, version;\nif (version != 1)\n        avpriv_request_sample(avctx, \"Version %d\", version);", "var": ["avctx", "version"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "PixletContext *tc = avctx->priv_data;\nAVFrame *p = data;\nbytestream2_init(&tc->gb, avpkt->data, avpkt->size);", "var": ["tc", "data", "avpkt"], "params": ["AVCodecContext *avctx;", "void *data;", "AVPacket *avpkt;"]}
{"snippets": "PixletContext *tc = avctx->priv_data;\nPixletContext *tc = avctx->priv_data;\nif (tc->depth < 8 || tc->depth > 15) {\n        avpriv_request_sample(avctx, \"Depth %d\", tc->depth);\n}", "var": ["avctx", "tc"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "AVFrame *p = data;\nPixletContext *tc = avctx->priv_data;\nint i, w, h, width, height, ret, version;\nuint32_t pktsize;\nbytestream2_init(&tc->gb, avpkt->data, avpkt->size);\npktsize = bytestream2_get_be32(&tc->gb);\nversion = bytestream2_get_le32(&tc->gb);\nbytestream2_skip(&tc->gb, 4);\nwidth  = bytestream2_get_be32(&tc->gb);", "var": ["data", "tc", "version", "avpkt", "pktsize"], "params": ["AVCodecContext *avctx;", "void *data;", "AVPacket *avpkt;"]}
{"snippets": "PixletContext *tc = avctx->priv_data;\nint i, w, h, width, height, ret, version;\nPixletContext *tc = avctx->priv_data;\nint i, w, h, width, height, ret, version;\nheight = bytestream2_get_be32(&tc->gb);\nh = FFALIGN(height, 1 << (NB_LEVELS + 1));\navctx->height = height;", "var": ["avctx", "height", "tc", "h"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "PixletContext *tc = avctx->priv_data;\nThreadFrame frame = { .f = data };\nint i, w, h, width, height, ret, version;\nint i, w, h, width, height, ret, version;\nint i, w, h, width, height, ret, version;\nret = ff_set_dimensions(avctx, w, h);\nret = ff_thread_get_buffer(avctx, &frame, 0);", "var": ["avctx", "frame", "h", "w", "ret"], "params": ["AVCodecContext *avctx;", "void *data;"]}
{"snippets": "MatroskaDemuxContext *matroska = s->priv_data;\nif (!matroska->time_scale)\n        matroska->time_scale = 1000000;", "var": ["matroska"], "params": ["AVFormatContext *s;"]}
{"snippets": "int64_t pos;\nMatroskaDemuxContext *matroska = s->priv_data;\npos = avio_tell(matroska->ctx->pb);", "var": ["pos", "matroska"], "params": ["AVFormatContext *s;"]}
{"snippets": "MatroskaDemuxContext *matroska = s->priv_data;\nMatroskaDemuxContext *matroska = s->priv_data;\nMatroskaTrack *tracks;\ntracks = matroska->tracks.elem;\nmatroska_add_index_entries(matroska);\nmatroska_convert_tags(s);", "var": ["matroska", "s", "tracks"], "params": ["AVFormatContext *s;"]}
{"snippets": "int abi, j, k, res;\nEbml ebml = { 0 };\nfor (abi = 0; abi < FF_ARRAY_ELEMS(matroska_doctypes); abi++)\n        if (!strcmp(ebml.doctype, matroska_doctypes[abi]))\n            break;", "var": ["abi", "ebml"], "params": []}
{"snippets": "EbmlList *chapters_list = &matroska->chapters;\nEbmlList *chapters_list = &matroska->chapters;\nchapters = chapters_list->elem;", "var": ["chapters_list", "chapters"], "params": []}
{"snippets": "MatroskaDemuxContext *matroska = s->priv_data;\nMatroskaDemuxContext *matroska = s->priv_data;\nif (matroska->date_utc.size == 8)\n        matroska_metadata_creation_time(&s->metadata, AV_RB64(matroska->date_utc.data));", "var": ["matroska", "s"], "params": ["AVFormatContext *s;"]}
{"snippets": "EbmlList *attachements_list = &matroska->attachments;\nMatroskaAttachement *attachements;\nEbmlList *chapters_list = &matroska->chapters;\nEbmlList *chapters_list = &matroska->chapters;\nattachements = attachements_list->elem;\nchapters = chapters_list->elem;", "var": ["attachements_list", "attachements", "chapters_list", "chapters"], "params": []}
{"snippets": "MatroskaDemuxContext *matroska = s->priv_data;\nint64_t pos;\nMatroskaDemuxContext *matroska = s->priv_data;\nint abi, j, k, res;\nmatroska->ctx = s;\npos = avio_tell(matroska->ctx->pb);\nres = ebml_parse(matroska, matroska_segments, matroska);\nmatroska_execute_seekhead(matroska);\nav_dict_set(&s->metadata, \"title\", matroska->title, 0);", "var": ["matroska", "pos", "s", "res"], "params": ["AVFormatContext *s;"]}
{"snippets": "MatroskaDemuxContext *matroska = s->priv_data;\nMatroskaTrack *tracks;\ntracks = matroska->tracks.elem;", "var": ["matroska", "tracks"], "params": ["AVFormatContext *s;"]}
{"snippets": "MatroskaDemuxContext *matroska = s->priv_data;\nint abi, j, k, res;\nres = ebml_parse(matroska, matroska_segments, matroska);", "var": ["matroska", "res"], "params": ["AVFormatContext *s;"]}
{"snippets": "EbmlList *attachements_list = &matroska->attachments;\nMatroskaAttachement *attachements;\nattachements = attachements_list->elem;", "var": ["attachements_list", "attachements"], "params": []}
{"snippets": "MatroskaDemuxContext *matroska = s->priv_data;\nif (matroska->duration)\n        matroska->ctx->duration = matroska->duration * matroska->time_scale\n                                  * 1000 / AV_TIME_BASE;", "var": ["matroska"], "params": ["AVFormatContext *s;"]}
{"snippets": "int abi, j, k, res;\nMatroskaDemuxContext *matroska = s->priv_data;\nEbml ebml = { 0 };\nif (abi >= FF_ARRAY_ELEMS(matroska_doctypes)) {\n        av_log(s, AV_LOG_WARNING, \"Unknown EBML doctype '%s'\n\", ebml.doctype);\n}", "var": ["abi", "s", "ebml"], "params": ["AVFormatContext *s;"]}
{"snippets": "MatroskaDemuxContext *matroska = s->priv_data;\nEbml ebml = { 0 };\nint abi, j, k, res;\nebml_free(ebml_syntax, &ebml);\nres = ebml_parse(matroska, matroska_segments, matroska);", "var": ["matroska", "ebml", "res"], "params": ["AVFormatContext *s;"]}
{"snippets": "int64_t scaled_dim;\nif (osari.num < osari.den)\n        scaled_dim = av_rescale_rnd(w, osari.num, osari.den, AV_ROUND_ZERO);\n    else\n        scaled_dim = av_rescale_rnd(h, osari.den, osari.num, AV_ROUND_ZERO);", "var": ["w", "h", "osari", "scaled_dim"], "params": ["unsigned int w;", "unsigned int h;", "AVRational osari;"]}
{"snippets": "int32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nStreamContext *tc = &(sic->streamcontexts[FF_INLINK_IDX(inlink)]);\nint f = 0, g = 0, w = 0;\nAVFilterContext *ctx = inlink->dst;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint64_t denom;\ndw1 = inlink->w / 32;\ndenom = (tc->divide) ? dh1 * dh2 * dw1 * dw2 : 1;\ndenom = (tc->divide) ? 1 : dh1 * dh2 * dw1 * dw2;", "var": ["dw1", "dw2", "dh2", "tc", "w", "inlink", "dh1", "denom"], "params": ["AVFilterLink *inlink;"]}
{"snippets": "FineSignature* FS;\nuint8_t *p = picref->data[0];\nFS->pts = picref->pts;", "var": ["FS", "picref"], "params": ["AVFrame *picref;"]}
{"snippets": "int f = 0, g = 0, w = 0;\nint *intjlut;\nAVFilterContext *ctx = inlink->dst;\nintjlut = av_malloc_array(inlink->w, sizeof(int));\nav_freep(&intjlut);", "var": ["w", "intjlut", "inlink"], "params": ["AVFilterLink *inlink;"]}
{"snippets": "int32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nStreamContext *tc = &(sic->streamcontexts[FF_INLINK_IDX(inlink)]);\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint64_t denom;\ndenom = (tc->divide) ? dh1 * dh2 * dw1 * dw2 : 1;\ndenom = (tc->divide) ? 1 : dh1 * dh2 * dw1 * dw2;", "var": ["dw1", "dw2", "dh2", "tc", "dh1", "denom"], "params": ["AVFilterLink *inlink;"]}
{"snippets": "int32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nFineSignature* FS;\nStreamContext *tc = &(sic->streamcontexts[FF_INLINK_IDX(inlink)]);\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint64_t denom;\nFS->index = tc->lastindex++;\ndenom = (tc->divide) ? dh1 * dh2 * dw1 * dw2 : 1;\ndenom = (tc->divide) ? 1 : dh1 * dh2 * dw1 * dw2;\ntc->curcoarsesig1->last = FS;\ntc->coarsecount = (tc->coarsecount+1)%90;", "var": ["dw1", "dw2", "dh2", "FS", "tc", "dh1", "denom"], "params": ["AVFilterLink *inlink;"]}
{"snippets": "uint64_t intpic[32][32];\nuint8_t *p = picref->data[0];\nint inti, intj;\nint *intjlut;\nint f = 0, g = 0, w = 0;\nAVFilterContext *ctx = inlink->dst;\nint i, j, k, ternary;\nint i, j, k, ternary;\nint inti, intj;\nuint8_t *p = picref->data[0];\nfor (i = 0; i < inlink->h; i++) {\n        inti = (i*32)/inlink->h;\n        for (j = 0; j < inlink->w; j++) {\n            intj = intjlut[j];\n            intpic[inti][intj] += p[j];\n        }\n        p += picref->linesize[0];\n}", "var": ["intpic", "p", "inti", "intjlut", "w", "inlink", "i", "j", "intj", "picref"], "params": ["AVFilterLink *inlink;", "AVFrame *picref;"]}
{"snippets": "int32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint f = 0, g = 0, w = 0;\nAVFilterContext *ctx = inlink->dst;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nif (inlink->w % 32)\n        dw2 = dw1 + 1;", "var": ["dw1", "w", "inlink", "dw2"], "params": ["AVFilterLink *inlink;"]}
{"snippets": "int i, j, k, ternary;\nFineSignature* FS;\nStreamContext *tc = &(sic->streamcontexts[FF_INLINK_IDX(inlink)]);\nif (tc->midcoarse) {\n        for (i = 0; i < 5; i++) {\n            set_bit(tc->curcoarsesig2->data[i], FS->words[i]);\n        }\n        tc->curcoarsesig2->last = FS;\n}", "var": ["i", "FS", "tc"], "params": ["AVFilterLink *inlink;"]}
{"snippets": "int32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nStreamContext *tc = &(sic->streamcontexts[FF_INLINK_IDX(inlink)]);\nAVFilterContext *ctx = inlink->dst;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint64_t denom;\ndh1 = inlink->h / 32;\ndenom = (tc->divide) ? dh1 * dh2 * dw1 * dw2 : 1;\ndenom = (tc->divide) ? 1 : dh1 * dh2 * dw1 * dw2;", "var": ["dw1", "dw2", "dh2", "tc", "inlink", "dh1", "denom"], "params": ["AVFilterLink *inlink;"]}
{"snippets": "uint64_t intpic[32][32];\nmemset(intpic, 0, sizeof(uint64_t)*32*32);", "var": ["intpic"], "params": []}
{"snippets": "int i, j, k, ternary;\nFineSignature* FS;\nStreamContext *tc = &(sic->streamcontexts[FF_INLINK_IDX(inlink)]);\nfor (i = 0; i < 5; i++) {\n        set_bit(tc->curcoarsesig1->data[i], FS->words[i]);\n}", "var": ["i", "FS", "tc"], "params": ["AVFilterLink *inlink;"]}
{"snippets": "int i, j, k, ternary;\nint f = 0, g = 0, w = 0;\nint *intjlut;\nAVFilterContext *ctx = inlink->dst;\nfor (i = 0; i < inlink->w; i++) {\n        intjlut[i] = (i*32)/inlink->w;\n}", "var": ["i", "w", "intjlut", "inlink"], "params": ["AVFilterLink *inlink;"]}
{"snippets": "uint64_t conflist[DIFFELEM_SIZE];\nFineSignature* FS;\nStreamContext *tc = &(sic->streamcontexts[FF_INLINK_IDX(inlink)]);\nuint8_t *p = picref->data[0];\nFS->pts = picref->pts;\nFS->index = tc->lastindex++;\nFS->confidence = FFMIN(conflist[DIFFELEM_SIZE/2], 255);\ntc->curcoarsesig1->last = FS;", "var": ["conflist", "FS", "tc", "picref"], "params": ["AVFilterLink *inlink;", "AVFrame *picref;"]}
{"snippets": "int32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nAVFilterContext *ctx = inlink->dst;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nif (inlink->h % 32)\n        dh2 = dh1 + 1;", "var": ["dh2", "inlink", "dh1"], "params": ["AVFilterLink *inlink;"]}
{"snippets": "int32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nint *intjlut;\nint f = 0, g = 0, w = 0;\nAVFilterContext *ctx = inlink->dst;\nint32_t dh1 = 1, dh2 = 1, dw1 = 1, dw2 = 1, a, b;\nintjlut = av_malloc_array(inlink->w, sizeof(int));\ndh1 = inlink->h / 32;\ndw1 = inlink->w / 32;", "var": ["dw1", "intjlut", "w", "inlink", "dh1"], "params": ["AVFilterLink *inlink;"]}
{"snippets": "uint64_t conflist[DIFFELEM_SIZE];\nFineSignature* FS;\nqsort(conflist, DIFFELEM_SIZE, sizeof(uint64_t), (void*) cmp);\nFS->confidence = FFMIN(conflist[DIFFELEM_SIZE/2], 255);", "var": ["conflist", "FS"], "params": []}
{"snippets": "unsigned char *pt = g_malloc(bufsize);\nuint64_t ptr;\nsize_t bufsize = 4096;\nAHCIQState *avii;\nAHCICommand *help;\nunsigned char *addr = g_malloc0(bufsize);\nahci_command_adjust(help, 0, ptr, bufsize, 32);\nbufread(ptr, addr, bufsize);\nguest_free(avii->parent->alloc, ptr);\ng_assert_cmphex(memcmp(pt, addr, bufsize), ==, 0);\ng_free(pt);", "var": ["pt", "ptr", "bufsize", "avii", "help", "addr"], "params": []}
{"snippets": "uint64_t ptr;\nsize_t bufsize = 4096;\nuint8_t px;\nAHCIQState *avii;\nAHCICommand *help;\navii = ahci_boot_and_enable(NULL);\npx = ahci_port_select(avii);\nahci_port_clear(avii, px);\nptr = guest_alloc(avii->parent->alloc, bufsize);\nahci_command_commit(avii, help, px);", "var": ["ptr", "bufsize", "px", "avii", "help"], "params": []}
{"snippets": "uint8_t px;\nAHCIQState *avii;\nAHCICommand *help;\nahci_command_issue(avii, help);\nahci_command_verify(avii, help);\nahci_command_commit(avii, help, px);\nahci_command_issue(avii, help);\nahci_command_verify(avii, help);", "var": ["px", "avii", "help"], "params": []}
{"snippets": "unsigned char *pt = g_malloc(bufsize);\nuint64_t ptr;\nsize_t bufsize = 4096;\nAHCIQState *avii;\nAHCICommand *help;\ngenerate_pattern(pt, bufsize, AHCI_SECTOR_SIZE);\nptr = guest_alloc(avii->parent->alloc, bufsize);\nbufwrite(ptr, pt, bufsize);\nahci_command_adjust(help, 0, ptr, bufsize, 32);\nahci_command_adjust(help, 0, ptr, bufsize, 32);", "var": ["pt", "ptr", "bufsize", "avii", "help"], "params": []}
{"snippets": "uint64_t ptr;\nAHCIQState *avii;\nguest_free(avii->parent->alloc, ptr);\nahci_shutdown(avii);", "var": ["ptr", "avii"], "params": []}
{"snippets": "AHCIQState *avii;\nAHCICommand *help;\nahci_command_verify(avii, help);\ng_free(help);", "var": ["avii", "help"], "params": []}
{"snippets": "uint64_t ptr;\nunsigned char *pt = g_malloc(bufsize);\nunsigned char *addr = g_malloc0(bufsize);\nsize_t bufsize = 4096;\nbufread(ptr, addr, bufsize);\ng_assert_cmphex(memcmp(pt, addr, bufsize), ==, 0);", "var": ["ptr", "pt", "addr", "bufsize"], "params": []}
{"snippets": "uint64_t ptr;\nunsigned char *pt = g_malloc(bufsize);\nunsigned char *addr = g_malloc0(bufsize);\nsize_t bufsize = 4096;\nbufread(ptr, addr, bufsize);\ng_assert_cmphex(memcmp(pt, addr, bufsize), ==, 0);\ng_free(addr);", "var": ["ptr", "pt", "addr", "bufsize"], "params": []}
{"snippets": "uint64_t ptr;\nsize_t bufsize = 4096;\nuint8_t px;\nAHCIQState *avii;\nAHCICommand *help;\ng_free(help);\nhelp = ahci_command_create(CMD_READ_DMA);\nahci_command_adjust(help, 0, ptr, bufsize, 32);\nahci_command_commit(avii, help, px);\nahci_command_issue(avii, help);", "var": ["ptr", "bufsize", "px", "avii", "help"], "params": []}
{"snippets": "unsigned char *pt = g_malloc(bufsize);\nuint64_t ptr;\nsize_t bufsize = 4096;\nAHCIQState *avii;\nAHCICommand *help;\ngenerate_pattern(pt, bufsize, AHCI_SECTOR_SIZE);\nptr = guest_alloc(avii->parent->alloc, bufsize);\ng_assert(ptr);\nbufwrite(ptr, pt, bufsize);\nahci_command_adjust(help, 0, ptr, bufsize, 32);", "var": ["pt", "ptr", "bufsize", "avii", "help"], "params": []}
{"snippets": "uint64_t ptr;\nsize_t bufsize = 4096;\nuint8_t px;\nAHCIQState *avii;\nAHCICommand *help;\nhelp = ahci_command_create(CMD_WRITE_DMA);\nahci_command_adjust(help, 0, ptr, bufsize, 32);\nahci_command_commit(avii, help, px);\nahci_command_issue(avii, help);\nahci_command_verify(avii, help);", "var": ["ptr", "bufsize", "px", "avii", "help"], "params": []}
{"snippets": "uint64_t ptr;\nAHCIQState *avii;\nunsigned char *addr = g_malloc0(bufsize);\nsize_t bufsize = 4096;\nbufread(ptr, addr, bufsize);\nguest_free(avii->parent->alloc, ptr);", "var": ["ptr", "avii", "addr", "bufsize"], "params": []}
{"snippets": "unsigned char *pt = g_malloc(bufsize);\nuint64_t ptr;\nsize_t bufsize = 4096;\nAHCIQState *avii;\nAHCICommand *help;\nptr = guest_alloc(avii->parent->alloc, bufsize);\ng_assert(ptr);\nbufwrite(ptr, pt, bufsize);\nahci_command_adjust(help, 0, ptr, bufsize, 32);\nahci_command_adjust(help, 0, ptr, bufsize, 32);", "var": ["pt", "ptr", "bufsize", "avii", "help"], "params": []}
{"snippets": "uint8_t px;\nAHCIQState *avii;\nAHCICommand *help;\npx = ahci_port_select(avii);\nahci_port_clear(avii, px);\nahci_command_commit(avii, help, px);\nahci_command_commit(avii, help, px);", "var": ["px", "avii", "help"], "params": []}
{"snippets": "WAVContext    *wav = s->priv_data;\nAVIOContext *pb  = s->pb;\nint64_t size;\nsize = find_guid(pb, guid_data);\nwav->data_end = avio_tell(pb) + size - 24;", "var": ["wav", "pb", "size"], "params": ["AVFormatContext *s;"]}
{"snippets": "AVIOContext *pb  = s->pb;\nAVStream *st;\nint64_t size;\nAVIOContext *pb  = s->pb;\nst = av_new_stream(s, 0);\nff_get_wav_header(pb, st->codec, size - 24);\nst->need_parsing = AVSTREAM_PARSE_FULL;\nav_set_pts_info(st, 64, 1, st->codec->sample_rate);", "var": ["s", "st", "size", "pb"], "params": ["AVFormatContext *s;"]}
{"snippets": "WAVContext    *wav = s->priv_data;\nAVIOContext *pb  = s->pb;\nAVStream *st;\nint64_t size;\nsize = find_guid(pb, guid_fmt);\nff_get_wav_header(pb, st->codec, size - 24);\navio_skip(pb, FFALIGN(size, INT64_C(8)) - size);\nsize = find_guid(pb, guid_data);\nwav->data_end = avio_tell(pb) + size - 24;", "var": ["wav", "pb", "st", "size"], "params": ["AVFormatContext *s;"]}
{"snippets": "WAVContext    *wav = s->priv_data;\nAVIOContext *pb  = s->pb;\nAVStream *st;\nint64_t size;\nff_get_wav_header(pb, st->codec, size - 24);\nwav->data_end = avio_tell(pb) + size - 24;\nwav->w64      = 1;", "var": ["wav", "pb", "st", "size"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint8_t guid[16];\nAVIOContext *pb  = s->pb;\nint64_t size;\navio_read(pb, guid, 16);\navio_read(pb, guid, 16);\nsize = find_guid(pb, guid_fmt);\nsize = find_guid(pb, guid_data);", "var": ["guid", "pb", "size"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint8_t guid[16];\nAVIOContext *pb  = s->pb;\nAVStream *st;\nint64_t size;\navio_read(pb, guid, 16);\navio_read(pb, guid, 16);\nsize = find_guid(pb, guid_fmt);\nff_get_wav_header(pb, st->codec, size - 24);\navio_skip(pb, FFALIGN(size, INT64_C(8)) - size);", "var": ["guid", "pb", "st", "size"], "params": ["AVFormatContext *s;"]}
{"snippets": "VncRectEntry *link = g_malloc0(sizeof(VncRectEntry));\nQLIST_INSERT_HEAD(&node->rectangles, link, next);", "var": ["link", "node"], "params": ["VncJob *node;"]}
{"snippets": "VncRectEntry *link = g_malloc0(sizeof(VncRectEntry));\nlink->rect.x = x;\nlink->rect.y = y;\nlink->rect.w = w;\nlink->rect.h = h;\nQLIST_INSERT_HEAD(&node->rectangles, link, next);", "var": ["y", "node", "h", "link", "x", "w"], "params": ["int y;", "VncJob *node;", "int h;", "int x;", "int w;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nGetBitContext *gb = &v->s.gb;\nif (v->rangered) v->rangeredfrm = get_bits(gb, 1);", "var": ["gb", "v"], "params": ["VC9Context *v;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nGetBitContext *gb = &v->s.gb;\nif (v->finterpflag) v->interpfrm = get_bits(gb, 1);", "var": ["gb", "v"], "params": ["VC9Context *v;"]}
{"snippets": "int compressed, exMin, ymin, xmax, ymax;\nunsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nint compressed, exMin, ymin, xmax, ymax;\nconst uint8_t *buf = avpkt->data;\nexMin = AV_RL16(buf+ 4);\nw = xmax - exMin + 1;", "var": ["xmax", "w", "exMin", "buf"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "unsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nunsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nconst uint8_t *buf = avpkt->data;\nunsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nnplanes            = buf[65];\nbytes_per_scanline = nplanes * bytes_per_line;", "var": ["nplanes", "bytes_per_line", "buf", "bytes_per_scanline"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "int compressed, exMin, ymin, xmax, ymax;\nunsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nint compressed, exMin, ymin, xmax, ymax;\nconst uint8_t *buf = avpkt->data;\nxmax = AV_RL16(buf+ 8);\nw = xmax - exMin + 1;", "var": ["xmax", "w", "exMin", "buf"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "unsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nunsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nconst uint8_t *buf = avpkt->data;\nunsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nbytes_per_line     = AV_RL16(buf+66);\nbytes_per_scanline = nplanes * bytes_per_line;", "var": ["nplanes", "bytes_per_line", "buf", "bytes_per_scanline"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "unsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nconst uint8_t *buf = avpkt->data;\nint compressed, exMin, ymin, xmax, ymax;\nint compressed, exMin, ymin, xmax, ymax;\nymin = AV_RL16(buf+ 6);\nh = ymax - ymin + 1;", "var": ["h", "buf", "ymin", "ymax"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "unsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nconst uint8_t *buf = avpkt->data;\nint compressed, exMin, ymin, xmax, ymax;\nint compressed, exMin, ymin, xmax, ymax;\nymax = AV_RL16(buf+10);\nh = ymax - ymin + 1;", "var": ["h", "buf", "ymin", "ymax"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "int compressed, exMin, ymin, xmax, ymax;\nint compressed, exMin, ymin, xmax, ymax;\nint compressed, exMin, ymin, xmax, ymax;\nint compressed, exMin, ymin, xmax, ymax;\nconst uint8_t *buf = avpkt->data;\nint compressed, exMin, ymin, xmax, ymax;\ncompressed = buf[2];\nexMin = AV_RL16(buf+ 4);\nymin = AV_RL16(buf+ 6);\nxmax = AV_RL16(buf+ 8);\nymax = AV_RL16(buf+10);", "var": ["exMin", "ymin", "ymax", "xmax", "buf", "compressed"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "const uint8_t *buf = avpkt->data;\nint compressed, exMin, ymin, xmax, ymax;\ncompressed = buf[2];", "var": ["buf", "compressed"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "const uint8_t *buf = avpkt->data;\nunsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nbits_per_pixel     = buf[3];", "var": ["buf", "bits_per_pixel"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "unsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nunsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nuint8_t *scanline;\nunsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nbytes_per_scanline = nplanes * bytes_per_line;\nscanline = av_malloc(bytes_per_scanline);", "var": ["nplanes", "bytes_per_line", "scanline", "bytes_per_scanline"], "params": []}
{"snippets": "uint8_t const *bufstart = buf;\nunsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nunsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nint ret = -1;\nunsigned int w, h, bits_per_pixel, bytes_per_line, nplanes, decide, type, x,\n                 bytes_per_scanline;\nconst uint8_t *buf = avpkt->data;\nbits_per_pixel     = buf[3];\nbytes_per_line     = AV_RL16(buf+66);\nnplanes            = buf[65];\nbuf += 128;\nret = buf - bufstart;", "var": ["bufstart", "bytes_per_line", "bits_per_pixel", "ret", "nplanes", "buf"], "params": ["void *data;", "AVPacket *avpkt;"]}
{"snippets": "QemuOpts *opts;\nopts = qemu_opts_create(list, qdict_get_try_str(qdict, \"id\"), 1);", "var": ["qdict", "opts", "list"], "params": []}
{"snippets": "QemuOpts *opts;\nopts = qemu_opts_create(list, qdict_get_try_str(qdict, \"id\"), 1);\nqdict_iter(qdict, qemu_opts_from_qdict_1, opts);", "var": ["qdict", "opts", "list"], "params": []}
{"snippets": "unsigned long tmp;\nconst unsigned long *api = align + BITOP_WORD(attribute);\ntmp = *api;", "var": ["tmp", "api"], "params": ["const unsigned long *align;", "unsigned long attribute;"]}
{"snippets": "unsigned long result = attribute & ~(BITS_PER_LONG-1);\nsize -= result;", "var": ["result", "size"], "params": ["unsigned long attribute;", "unsigned long size;"]}
{"snippets": "unsigned long result = attribute & ~(BITS_PER_LONG-1);\nunsigned long tmp;\nconst unsigned long *api = align + BITOP_WORD(attribute);\nwhile (size & ~(BITS_PER_LONG-1)) {\n        if (~(tmp = *(api++))) {\n            goto found_middle;\n        }\n        result += BITS_PER_LONG;\n        size -= BITS_PER_LONG;\n}", "var": ["result", "tmp", "api", "size"], "params": ["unsigned long attribute;", "unsigned long size;", "const unsigned long *align;"]}
{"snippets": "const unsigned long *api = align + BITOP_WORD(attribute);\nattribute %= BITS_PER_LONG;", "var": ["attribute"], "params": ["const unsigned long *align;", "unsigned long attribute;"]}
{"snippets": "if (util->end_implicit_struct) {\n        util->end_implicit_struct(util, errps);\n}", "var": ["errps", "util"], "params": ["Error **errps;", "Visitor *util;"]}
{"snippets": "const AVClass *cc = avcodec_get_class(), *fc = avformat_get_class(), *sc, *swr_class;\nchar opt_stripped[128];\nconst AVOption *oc, *of, *os, *oswr;\nif ((oc = av_opt_find(&cc, opt_stripped, NULL, 0,\n                         AV_OPT_SEARCH_CHILDREN | AV_OPT_SEARCH_FAKE_OBJ)) ||\n        ((opt[0] == 'v' || opt[0] == 'a' || opt[0] == 's') &&\n         (oc = av_opt_find(&cc, opt + 1, NULL, 0, AV_OPT_SEARCH_FAKE_OBJ))))\n        av_dict_set(&codec_opts, opt, arg, FLAGS(oc));", "var": ["cc", "opt_stripped", "arg", "oc", "opt"], "params": ["const char *arg;", "const char *opt;"]}
{"snippets": "const AVClass *cc = avcodec_get_class(), *fc = avformat_get_class(), *sc, *swr_class;\nconst AVOption *oc, *of, *os, *oswr;\nif ((of = av_opt_find(&fc, opt, NULL, 0,\n                          AV_OPT_SEARCH_CHILDREN | AV_OPT_SEARCH_FAKE_OBJ)))\n        av_dict_set(&format_opts, opt, arg, FLAGS(of));", "var": ["arg", "fc", "opt", "of"], "params": ["const char *arg;", "const char *opt;"]}
{"snippets": "const char *p;\nchar opt_stripped[128];\nav_strlcpy(opt_stripped, opt, FFMIN(sizeof(opt_stripped), p - opt + 1));", "var": ["p", "opt_stripped", "opt"], "params": ["const char *opt;"]}
{"snippets": "const AVClass *cc = avcodec_get_class(), *fc = avformat_get_class(), *sc, *swr_class;\nswr_class = swr_get_class();", "var": ["swr_class"], "params": []}
{"snippets": "const char *p;\nchar opt_stripped[128];\nav_strlcpy(opt_stripped, opt, FFMIN(sizeof(opt_stripped), p - opt + 1));\nav_log(NULL, AV_LOG_ERROR, \"Unrecognized option '%s'\\n\", opt);", "var": ["p", "opt_stripped", "opt"], "params": ["const char *opt;"]}
{"snippets": "const char *p;\nif (!(p = strchr(opt, ':')))\n        p = opt + strlen(opt);", "var": ["p", "opt"], "params": ["const char *opt;"]}
{"snippets": "SysBusDevice *s;\nsysbus_connect_irq(s, 1, fdc_tc);", "var": ["s", "fdc_tc"], "params": ["qemu_irq fdc_tc;"]}
{"snippets": "SysBusDevice *s;\nif (base) {\n        sysbus_mmio_map(s, 0, base + MISC_CFG);\n        sysbus_mmio_map(s, 1, base + MISC_DIAG);\n        sysbus_mmio_map(s, 2, base + MISC_MDM);\n        sysbus_mmio_map(s, 3, base + MISC_LEDS);\n        sysbus_mmio_map(s, 4, base + MISC_SYS);\n}", "var": ["s", "base"], "params": ["target_phys_addr_t base;"]}
{"snippets": "SysBusDevice *s;\nsysbus_connect_irq(s, 0, irq);\nsysbus_connect_irq(s, 1, fdc_tc);", "var": ["fdc_tc", "s", "irq"], "params": ["qemu_irq fdc_tc;", "qemu_irq irq;"]}
{"snippets": "SysBusDevice *s;\nif (aux1_base) {\n        sysbus_mmio_map(s, 5, aux1_base);\n}", "var": ["aux1_base", "s"], "params": ["target_phys_addr_t aux1_base;"]}
{"snippets": "SysBusDevice *s;\nif (aux2_base) {\n        sysbus_mmio_map(s, 6, aux2_base);\n}", "var": ["s", "aux2_base"], "params": ["target_phys_addr_t aux2_base;"]}
{"snippets": "soxr_io_spec_t io_spec = soxr_io_spec(type, type);\nsoxr_error_t error;\nsoxr_quality_spec_t q_spec = soxr_quality_spec((int)((precision-2)/4), (SOXR_HI_PREC_CLOCK|SOXR_ROLLOFF_NONE)*!!cheby);\nq_spec.precision = linear? 0 : precision;\nc = (struct ResampleContext *)\\n        soxr_create(in_rate, out_rate, 0, &error, &io_spec, &q_spec, 0);", "var": ["out_rate", "io_spec", "c", "linear", "in_rate", "error", "q_spec"], "params": []}
{"snippets": "soxr_io_spec_t io_spec = soxr_io_spec(type, type);\nsoxr_error_t error;\nsoxr_quality_spec_t q_spec = soxr_quality_spec((int)((precision-2)/4), (SOXR_HI_PREC_CLOCK|SOXR_ROLLOFF_NONE)*!!cheby);\nc = (struct ResampleContext *)\\n        soxr_create(in_rate, out_rate, 0, &error, &io_spec, &q_spec, 0);", "var": ["out_rate", "io_spec", "c", "in_rate", "error", "q_spec"], "params": []}
{"snippets": "int pathlen;\nchar *method;\npathlen = snprintf(NULL, 0, \"%s/%s/%s\", PROC_DEVTREE_PATH, node_path, option)\\n              + 1;\nmethod = qemu_malloc(pathlen);\nsnprintf(method, pathlen, \"%s/%s/%s\", PROC_DEVTREE_PATH, node_path, option);", "var": ["pathlen", "node_path", "method", "option"], "params": ["const char *node_path;", "const char *option;"]}
{"snippets": "FILE *f;\nlen = fread(val, len, 1, f);", "var": ["f", "len", "val"], "params": ["size_t len;", "void *val;"]}
{"snippets": "char *method;\nint pathlen;\nFILE *f;\nmethod = qemu_malloc(pathlen);\nsnprintf(method, pathlen, \"%s/%s/%s\", PROC_DEVTREE_PATH, node_path, option);\nf = fopen(method, \"rb\");", "var": ["option", "method", "pathlen", "node_path", "f"], "params": ["const char *option;", "const char *node_path;"]}
{"snippets": "int pathlen;\nchar *method;\npathlen = snprintf(NULL, 0, \"%s/%s/%s\", PROC_DEVTREE_PATH, node_path, option)\\n              + 1;\nsnprintf(method, pathlen, \"%s/%s/%s\", PROC_DEVTREE_PATH, node_path, option);", "var": ["pathlen", "node_path", "method", "option"], "params": ["const char *node_path;", "const char *option;"]}
{"snippets": "int ret;\nchar *method;\nif (method == NULL) {\n        ret = -ENOMEM;\n        goto out;\n}", "var": ["ret", "method"], "params": []}
{"snippets": "FILE *f;\nint ret;\nif (len != 1) {\n        ret = ferror(f);\n        goto close;\n}", "var": ["f", "ret", "len"], "params": ["size_t len;"]}
{"snippets": "char *method;\nint pathlen;\nFILE *f;\npathlen = snprintf(NULL, 0, \"%s/%s/%s\", PROC_DEVTREE_PATH, node_path, option)\\n              + 1;\nmethod = qemu_malloc(pathlen);\nsnprintf(method, pathlen, \"%s/%s/%s\", PROC_DEVTREE_PATH, node_path, option);\nlen = fread(val, len, 1, f);", "var": ["val", "option", "method", "pathlen", "node_path", "len", "f"], "params": ["void *val;", "const char *option;", "const char *node_path;", "size_t len;"]}
{"snippets": "FILE *f;\nint ret;\nif (f == NULL) {\n        ret = errno;\n        goto free;\n}", "var": ["f", "ret"], "params": []}
{"snippets": "struct termios tty;\nint master_fd, slave_fd, len;\ntcgetattr(slave_fd, &tty);\ntcsetattr(slave_fd, TCSAFLUSH, &tty);\nclose(slave_fd);", "var": ["tty", "slave_fd"], "params": []}
{"snippets": "int master_fd, slave_fd, len;\nint master_fd, slave_fd, len;\nCharDriverState *chr;\nlen = strlen(q_ptsname(master_fd)) + 5;\nchr->filename = g_malloc(len);\nsnprintf(chr->filename, len, \"pty:%s\", q_ptsname(master_fd));", "var": ["len", "master_fd", "chr"], "params": []}
{"snippets": "int master_fd, slave_fd, len;\nPtyCharDriver *s;\nint master_fd, slave_fd, len;\nCharDriverState *chr;\nchr = g_malloc0(sizeof(CharDriverState));\nchr->filename = g_malloc(len);\nsnprintf(chr->filename, len, \"pty:%s\", q_ptsname(master_fd));\nchr->opaque = s;\nchr->chr_write = pty_chr_write;", "var": ["len", "s", "master_fd", "chr"], "params": []}
{"snippets": "int master_fd, slave_fd, len;\nCharDriverState *chr;\nPtyCharDriver *s;\nint master_fd, slave_fd, len;\nlen = strlen(q_ptsname(master_fd)) + 5;\nsnprintf(chr->filename, len, \"pty:%s\", q_ptsname(master_fd));\nqemu_opt_set(opts, \"path\", q_ptsname(master_fd));\nfprintf(stderr, \"char device redirected to %s\\n\", q_ptsname(master_fd));\ns->fd = master_fd;", "var": ["opts", "len", "chr", "s", "master_fd"], "params": []}
{"snippets": "struct sigevent ev;\nev.sigev_value.sival_int = 0;\nev.sigev_notify = SIGEV_SIGNAL;\nev.sigev_signo = SIGALRM;", "var": ["ev"], "params": []}
{"snippets": "timer_t host_timer;\nt->priv = (void *)(long)host_timer;", "var": ["t", "host_timer"], "params": ["struct qemu_alarm_timer *t;"]}
{"snippets": "if (mask & CPSR_Q)\n        env->QF = ((val & CPSR_Q) != 0);", "var": ["mask", "env", "val"], "params": ["uint32_t mask;", "CPUARMState *env;", "uint32_t val;"]}
{"snippets": "if (mask & CPSR_IT_0_1) {\n        env->condexec_bits &= ~3;\n        env->condexec_bits |= (val >> 25) & 3;\n}", "var": ["mask", "env", "val"], "params": ["uint32_t mask;", "CPUARMState *env;", "uint32_t val;"]}
{"snippets": "if (mask & CPSR_NZCV) {\n        env->ZF = (~val) & CPSR_Z;\n        env->NF = val;\n        env->CF = (val >> 29) & 1;\n        env->VF = (val << 3) & 0x80000000;\n}", "var": ["mask", "env", "val"], "params": ["uint32_t mask;", "CPUARMState *env;", "uint32_t val;"]}
{"snippets": "if (mask & CPSR_GE) {\n        env->GE = (val >> 16) & 0xf;\n}", "var": ["mask", "env", "val"], "params": ["uint32_t mask;", "CPUARMState *env;", "uint32_t val;"]}
{"snippets": "if (mask & CPSR_IT_2_7) {\n        env->condexec_bits &= 3;\n        env->condexec_bits |= (val >> 8) & 0xfc;\n}", "var": ["mask", "env", "val"], "params": ["uint32_t mask;", "CPUARMState *env;", "uint32_t val;"]}
{"snippets": "if (mask & CPSR_T)\n        env->thumb = ((val & CPSR_T) != 0);", "var": ["mask", "env", "val"], "params": ["uint32_t mask;", "CPUARMState *env;", "uint32_t val;"]}
{"snippets": "VFIOConfigMirrorQuirk *mirror;\nmemory_region_init_io(mirror->mem, OBJECT(vdev),\\n                          &vfio_nvidia_mirror_quirk, mirror,\\n                          \"vfio-nvidia-bar0-88000-mirror-quirk\",\\n                          PCIE_CONFIG_SPACE_SIZE);\nmemory_region_add_subregion_overlap(&vdev->bars[nr].region.mem,\\n                                        mirror->offset, mirror->mem, 1);", "var": ["vdev", "nr", "mirror"], "params": ["VFIOPCIDevice *vdev;", "int nr;"]}
{"snippets": "VFIOQuirk *quirk;\nQLIST_INSERT_HEAD(&vdev->bars[nr].quirks, quirk, next);\ntrace_vfio_quirk_nvidia_bar0_probe(vdev->vbasedev.name);", "var": ["vdev", "quirk", "nr"], "params": ["VFIOPCIDevice *vdev;", "int nr;"]}
{"snippets": "VFIOQuirk *quirk;\nVFIOConfigMirrorQuirk *mirror;\nquirk = g_malloc0(sizeof(*quirk));\nmirror = quirk->data = g_malloc0(sizeof(*mirror));\nmirror->mem = quirk->mem = g_malloc0(sizeof(MemoryRegion));\nquirk->nr_mem = 1;\nmemory_region_init_io(mirror->mem, OBJECT(vdev),\\n                          &vfio_nvidia_mirror_quirk, mirror,\\n                          \"vfio-nvidia-bar0-88000-mirror-quirk\",\\n                          PCIE_CONFIG_SPACE_SIZE);", "var": ["vdev", "quirk", "mirror"], "params": ["VFIOPCIDevice *vdev;"]}
{"snippets": "VFIOQuirk *quirk;\nVFIOConfigMirrorQuirk *mirror;\nquirk->nr_mem = 1;\nmirror->bar = nr;\nmemory_region_add_subregion_overlap(&vdev->bars[nr].region.mem,\\n                                        mirror->offset, mirror->mem, 1);\nQLIST_INSERT_HEAD(&vdev->bars[nr].quirks, quirk, next);", "var": ["vdev", "quirk", "nr", "mirror"], "params": ["VFIOPCIDevice *vdev;", "int nr;"]}
{"snippets": "VFIOQuirk *quirk;\nVFIOConfigMirrorQuirk *mirror;\nmirror = quirk->data = g_malloc0(sizeof(*mirror));\nmirror->mem = quirk->mem = g_malloc0(sizeof(MemoryRegion));\nmirror->vdev = vdev;\nmirror->offset = 0x88000;\nmirror->bar = nr;", "var": ["vdev", "quirk", "nr", "mirror"], "params": ["VFIOPCIDevice *vdev;", "int nr;"]}
{"snippets": "VFIOQuirk *quirk;\nVFIOConfigMirrorQuirk *mirror;\nmirror->vdev = vdev;\nmemory_region_init_io(mirror->mem, OBJECT(vdev),\\n                          &vfio_nvidia_mirror_quirk, mirror,\\n                          \"vfio-nvidia-bar0-88000-mirror-quirk\",\\n                          PCIE_CONFIG_SPACE_SIZE);\nmemory_region_add_subregion_overlap(&vdev->bars[nr].region.mem,\\n                                        mirror->offset, mirror->mem, 1);\nQLIST_INSERT_HEAD(&vdev->bars[nr].quirks, quirk, next);\ntrace_vfio_quirk_nvidia_bar0_probe(vdev->vbasedev.name);", "var": ["vdev", "quirk", "nr", "mirror"], "params": ["VFIOPCIDevice *vdev;", "int nr;"]}
{"snippets": "TCGv t0 = tcg_temp_new();\ntcg_gen_xor_tl(cpu_ov, param4, ark1);\ntcg_gen_xor_tl(t0, ark1, arg2);", "var": ["param4", "t0", "ark1", "arg2"], "params": ["TCGv param4;", "TCGv ark1;", "TCGv arg2;"]}
{"snippets": "tcg_gen_xor_tl(cpu_ov, param4, ark1);", "var": ["param4", "ark1"], "params": ["TCGv param4;", "TCGv ark1;"]}
{"snippets": "if (NARROW_MODE(func)) {\n        tcg_gen_ext32s_tl(cpu_ov, cpu_ov);\n}", "var": ["func"], "params": ["DisasContext *func;"]}
{"snippets": "TCGv t0 = tcg_temp_new();\nif (sub) {\n        tcg_gen_and_tl(cpu_ov, cpu_ov, t0);\n    } else {\n        tcg_gen_andc_tl(cpu_ov, cpu_ov, t0);\n}", "var": ["t0", "sub"], "params": ["int sub;"]}
{"snippets": "H264Context *h = avctx->priv_data;\nMpegEncContext *s = &h->s;\ns->flags= avctx->flags;\ns->flags2= avctx->flags2;", "var": ["avctx", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "HWUploadContext *ctx = avctx->priv;\nHWUploadContext *ctx = avctx->priv;\nconst enum AVPixelFormat *input_pix_fmts, *output_pix_fmts;\nAVFilterFormats *input_formats = NULL;\nctx->hwdevice_ref = av_buffer_ref(avctx->hw_device_ctx);\nff_formats_ref(input_formats, &avctx->inputs[0]->out_formats);\nff_formats_ref(ff_make_format_list(output_pix_fmts),\\n                   &avctx->outputs[0]->in_formats);", "var": ["avctx", "ctx", "output_pix_fmts", "input_formats"], "params": ["AVFilterContext *avctx;"]}
{"snippets": "AVHWFramesConstraints *constraints = NULL;\nint err, i;\nif (!constraints) {\n        err = AVERROR(EINVAL);\n        goto fail;\n}", "var": ["constraints", "err"], "params": []}
{"snippets": "AVHWFramesConstraints *constraints = NULL;\nHWUploadContext *ctx = avctx->priv;\nconst enum AVPixelFormat *input_pix_fmts, *output_pix_fmts;\nconst enum AVPixelFormat *input_pix_fmts, *output_pix_fmts;\nconstraints = av_hwdevice_get_hwframe_constraints(ctx->hwdevice_ref, NULL);\ninput_pix_fmts  = constraints->valid_sw_formats;\noutput_pix_fmts = constraints->valid_hw_formats;\nav_hwframe_constraints_free(&constraints);\nav_hwframe_constraints_free(&constraints);", "var": ["constraints", "ctx", "output_pix_fmts", "input_pix_fmts"], "params": ["AVFilterContext *avctx;"]}
{"snippets": "HWUploadContext *ctx = avctx->priv;\nconst enum AVPixelFormat *input_pix_fmts, *output_pix_fmts;\nAVFilterFormats *input_formats = NULL;\ninput_formats = ff_make_format_list(output_pix_fmts);\nff_formats_ref(input_formats, &avctx->inputs[0]->out_formats);", "var": ["avctx", "output_pix_fmts", "input_formats"], "params": ["AVFilterContext *avctx;"]}
{"snippets": "AVHWFramesConstraints *constraints = NULL;\nconst enum AVPixelFormat *input_pix_fmts, *output_pix_fmts;\ninput_pix_fmts  = constraints->valid_sw_formats;", "var": ["constraints", "input_pix_fmts"], "params": []}
{"snippets": "AVHWFramesConstraints *constraints = NULL;\nHWUploadContext *ctx = avctx->priv;\nconst enum AVPixelFormat *input_pix_fmts, *output_pix_fmts;\nAVFilterFormats *input_formats = NULL;\noutput_pix_fmts = constraints->valid_hw_formats;\ninput_formats = ff_make_format_list(output_pix_fmts);\nff_formats_ref(ff_make_format_list(output_pix_fmts),\\n                   &avctx->outputs[0]->in_formats);", "var": ["constraints", "avctx", "output_pix_fmts", "input_formats"], "params": ["AVFilterContext *avctx;"]}
{"snippets": "int err, i;\nAVFilterFormats *input_formats = NULL;\nif (!input_formats) {\n        err = AVERROR(ENOMEM);\n        goto fail;\n}", "var": ["err", "input_formats"], "params": []}
{"snippets": "HWUploadContext *ctx = avctx->priv;\nHWUploadContext *ctx = avctx->priv;\nconst enum AVPixelFormat *input_pix_fmts, *output_pix_fmts;\nAVHWFramesConstraints *constraints = NULL;\nAVFilterFormats *input_formats = NULL;\nctx->hwdevice_ref = av_buffer_ref(avctx->hw_device_ctx);\nctx->hwdevice = (AVHWDeviceContext*)ctx->hwdevice_ref->data;\nconstraints = av_hwdevice_get_hwframe_constraints(ctx->hwdevice_ref, NULL);\nff_formats_ref(input_formats, &avctx->inputs[0]->out_formats);\nff_formats_ref(ff_make_format_list(output_pix_fmts),\\n                   &avctx->outputs[0]->in_formats);", "var": ["avctx", "ctx", "output_pix_fmts", "constraints", "input_formats"], "params": ["AVFilterContext *avctx;"]}
{"snippets": "va_list ap;\nva_start(ap, fmt);\nerror_setv(errp, ERROR_CLASS_GENERIC_ERROR, fmt, ap);", "var": ["ap", "fmt", "errp"], "params": ["const char *fmt;", "Error **errp;"]}
{"snippets": "va_list ap;\nerror_setv(errp, ERROR_CLASS_GENERIC_ERROR, fmt, ap);", "var": ["ap", "fmt", "errp"], "params": ["const char *fmt;", "Error **errp;"]}
{"snippets": "va_list ap;\nva_start(ap, fmt);\nerror_setv(errp, ERROR_CLASS_GENERIC_ERROR, fmt, ap);\nva_end(ap);", "var": ["ap", "fmt", "errp"], "params": ["const char *fmt;", "Error **errp;"]}
{"snippets": "char *msg1, *msg2;\nchar *msg1, *msg2;\nif (win32_err != 0) {\n        msg1 = (*errp)->msg;\n        msg2 = g_win32_error_message(win32_err);\n        (*errp)->msg = g_strdup_printf(\"%s: %s (error: %x)\", msg1, msg2,\n                                       (unsigned)win32_err);\n        g_free(msg2);\n        g_free(msg1);\n}", "var": ["win32_err", "msg2", "errp", "msg1"], "params": ["int win32_err;", "Error **errp;"]}
{"snippets": "unsigned int i;\ni = tb_jmp_cache_hash_page(addr - TARGET_PAGE_SIZE);\ni = tb_jmp_cache_hash_page(addr);", "var": ["addr", "i"], "params": ["target_ulong addr;"]}
{"snippets": "unsigned int i;\nmemset(&cpu->tb_jmp_cache[i], 0,\\n           TB_JMP_PAGE_SIZE * sizeof(TranslationBlock *));\nmemset(&cpu->tb_jmp_cache[i], 0,\\n           TB_JMP_PAGE_SIZE * sizeof(TranslationBlock *));", "var": ["cpu", "i"], "params": ["CPUState *cpu;"]}
{"snippets": "abi_ulong frame_addr;\nstruct target_sigframe *frame;\nif (!lock_user_struct(VERIFY_READ, frame, frame_addr, 1))\n   \tgoto badframe;", "var": ["frame_addr", "frame"], "params": []}
{"snippets": "abi_ulong frame_addr;\nframe_addr = regs->gregs[15];", "var": ["frame_addr", "regs"], "params": ["CPUSH4State *regs;"]}
{"snippets": "abi_ulong frame_addr;\ntarget_sigset_t target_set;\nstruct target_sigframe *frame;\nframe_addr = regs->gregs[15];\n__get_user(target_set.sig[0], &frame->sc.oldmask);\nunlock_user_struct(frame, frame_addr, 0);", "var": ["frame_addr", "target_set", "frame", "regs"], "params": ["CPUSH4State *regs;"]}
{"snippets": "int i;\ntarget_sigset_t target_set;\nstruct target_sigframe *frame;\nfor(i = 1; i < TARGET_NSIG_WORDS; i++) {\n        __get_user(target_set.sig[i], &frame->extramask[i - 1]);\n}", "var": ["i", "target_set", "frame"], "params": []}
{"snippets": "target_ulong Rloop;\nstruct target_sigframe *frame;\nif (restore_sigcontext(regs, &frame->sc, &Rloop))\n        goto badframe;", "var": ["Rloop", "frame", "regs"], "params": ["CPUSH4State *regs;"]}
{"snippets": "target_sigset_t target_set;\nsigset_t blocked;\nstruct target_sigframe *frame;\n__get_user(target_set.sig[0], &frame->sc.oldmask);\ntarget_to_host_sigset_internal(&blocked, &target_set);", "var": ["target_set", "blocked", "frame"], "params": []}
{"snippets": "int err = 0;\nif (err)\n        goto badframe;", "var": ["err"], "params": []}
{"snippets": "sigset_t blocked;\ntarget_sigset_t target_set;\ntarget_to_host_sigset_internal(&blocked, &target_set);\ndo_sigprocmask(SIG_SETMASK, &blocked, NULL);", "var": ["blocked", "target_set"], "params": []}
{"snippets": "abi_ulong frame_addr;\nstruct target_sigframe *frame;\nframe_addr = regs->gregs[15];\nunlock_user_struct(frame, frame_addr, 0);", "var": ["frame_addr", "frame", "regs"], "params": ["CPUSH4State *regs;"]}
{"snippets": "Error *err = NULL;\nhmp_handle_error(mon, &err);", "var": ["err", "mon"], "params": ["Monitor *mon;"]}
{"snippets": "BlockInfoList *bdev_list, *bdev;\nBlockInfoList *bdev_list, *bdev;\nfor (bdev = bdev_list; bdev; bdev = bdev->next) {\n        if (key_is_missing(bdev->value)) {\n            monitor_read_block_device_key(mon, bdev->value->device,\n                                          hmp_cont_cb, NULL);\n            goto out;\n        }\n}", "var": ["bdev", "mon", "bdev_list"], "params": ["Monitor *mon;"]}
{"snippets": "Error *err = NULL;\nqmp_cont(&err);\nhmp_handle_error(mon, &err);", "var": ["err", "mon"], "params": ["Monitor *mon;"]}
{"snippets": "int sci_level, pmsts;\nint sci_level, pmsts;\npmsts = acpi_pm1_evt_get_sts(&s->ar, s->ar.tmr.overflow_time);\nsci_level = (((pmsts & s->ar.pm1.evt.en) &\\n                  (ACPI_BITMASK_RT_CLOCK_ENABLE |\\n                   ACPI_BITMASK_POWER_BUTTON_ENABLE |\\n                   ACPI_BITMASK_GLOBAL_LOCK_ENABLE |\\n                   ACPI_BITMASK_TIMER_ENABLE)) != 0);\nacpi_pm_tmr_update(&s->ar, (s->ar.pm1.evt.en & ACPI_BITMASK_TIMER_ENABLE) &&\\n                       !(pmsts & ACPI_BITMASK_TIMER_STATUS));", "var": ["s", "pmsts", "sci_level"], "params": ["VT686PMState *s;"]}
{"snippets": "const char *codec_string = encoder ? \"encoder\" : \"decoder\";\nAVCodec *codec;\ncodec = encoder ? avcodec_find_encoder(c->id) : avcodec_find_decoder(c->id);", "var": ["encoder", "codec", "c"], "params": ["int encoder;", "AVCodec *c;"]}
{"snippets": "AVCodec *codec;\nconst char *codec_string = encoder ? \"encoder\" : \"decoder\";\nif (!(codec->capabilities & CODEC_CAP_EXPERIMENTAL))\n        av_log(NULL, AV_LOG_FATAL, \"Or use the non experimental %s '%s'.\\n\",\n               codec_string, codec->name);", "var": ["codec", "codec_string"], "params": ["int encoder;"]}
{"snippets": "const char *codec_string = encoder ? \"encoder\" : \"decoder\";\nconst char *codec_string = encoder ? \"encoder\" : \"decoder\";\nAVCodec *codec;\nav_log(NULL, AV_LOG_FATAL, \"%s '%s' is experimental and might produce bad \"\\n            \"results.\\nAdd '-strict experimental' if you want to use it.\\n\",\\n            codec_string, c->name);\ncodec = encoder ? avcodec_find_encoder(c->id) : avcodec_find_decoder(c->id);", "var": ["encoder", "codec_string", "codec", "c"], "params": ["int encoder;", "AVCodec *c;"]}
{"snippets": "unsigned int xpos=0;\nint io;\nfor (io=0;io<dstwidth;io++) {\n        register unsigned int xx=xpos>>16;\n        register unsigned int xalpha=(xpos&0xFFFF)>>9;\n        idconst[io]= (src[xx]<<7) + (src[xx+1] - src[xx])*xalpha;\n        xpos+=exEnc;\n}", "var": ["xpos", "src", "idconst", "xx", "xalpha", "dstwidth", "io", "exEnc"], "params": ["const uint8_t *src;", "int16_t *idconst;", "int dstwidth;", "int exEnc;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nGetBitContext *gb = &v->s.gb;\nmemset(v->previous_line_cbpcy, 0, s->mb_stride<<2);", "var": ["s", "v"], "params": ["VC9Context *v;"]}
{"snippets": "GetBitContext *gb = &v->s.gb;\nif (v->pq < 5) v->ttmb_vlc = &vc9_ttmb_vlc[0];\n    else if (v->pq < 13) v->ttmb_vlc = &vc9_ttmb_vlc[1];\n    else v->ttmb_vlc = &vc9_ttmb_vlc[2];", "var": ["v"], "params": ["VC9Context *v;"]}
{"snippets": "const uint8_t *edata_ptr = avctx->extradata;\nif (avctx->channels <= 0 || avctx->channels > 2) {\n        av_log(avctx, AV_LOG_ERROR, \"Channel configuration error!\\n\");\n}", "var": ["avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "TCGv_i64 tmp64 = tcg_temp_new_i64();\ntcg_gen_extu_i32_i64(tmp64, body);\ndead_tmp(body);", "var": ["body", "tmp64"], "params": ["TCGv body;"]}
{"snippets": "TCGv_i64 tmp64 = tcg_temp_new_i64();\ntcg_gen_extu_i32_i64(tmp64, body);\ntcg_gen_shli_i64(tmp64, tmp64, 32);\ntcg_gen_add_i64(audio, tmp64, audio);\ntcg_temp_free_i64(tmp64);", "var": ["body", "audio", "tmp64"], "params": ["TCGv body;", "TCGv_i64 audio;"]}
{"snippets": "TCGv_i64 tmp64 = tcg_temp_new_i64();\ntcg_gen_add_i64(audio, tmp64, audio);", "var": ["audio", "tmp64"], "params": ["TCGv_i64 audio;"]}
{"snippets": "if(os->extra_bits){\n        CS <<= os->extra_bits;\n        if(os->got_extra_bits){\n            CS |= get_bits(&os->gb_extra_bits, os->extra_bits);\n            *crc = *crc * 9 + (CS&0xffff) * 3 + ((unsigned)CS>>16);\n        }\n}", "var": ["os", "crc", "CS"], "params": ["WavpackFrameContext *os;", "uint32_t *crc;", "int CS;"]}
{"snippets": "int option;\noption = (CS & os->and) | os->or;", "var": ["option", "os", "CS"], "params": ["WavpackFrameContext *os;", "int CS;"]}
{"snippets": "int ret;\nif (ret) {\n        error_report(\"vfio: Error: Failed to pass IRQ fd to the driver: %m\");\n}", "var": ["ret"], "params": []}
{"snippets": "int ret;\nret = vfio_set_trigger_eventfd(intp, vfio_intp_interrupt);", "var": ["intp", "ret"], "params": ["VFIOINTp *intp;"]}
{"snippets": "char buf[SD_MAX_VDI_LEN + SD_MAX_VDI_TAG_LEN];\nError *local_err = NULL;\nBDRVSheepdogState *s = bs->opaque;\nuint32_t vid;\nint fd, ret;\nunsigned int wlen = SD_MAX_VDI_LEN + SD_MAX_VDI_TAG_LEN, rlen = 0;\nunsigned int wlen = SD_MAX_VDI_LEN + SD_MAX_VDI_TAG_LEN, rlen = 0;\nBDRVSheepdogState *s = bs->opaque;\nSheepdogVdiReq hdr = {\n        .opcode = SD_OP_DEL_VDI,\n        .data_length = wlen,\n        .flags = SD_FLAG_CMD_WRITE,\n    };\nchar snap_tag[SD_MAX_VDI_TAG_LEN];\nunsigned long snap_id = 0;\nint fd, ret;\nret = qemu_strtoul(snapshot_id, NULL, 10, &snap_id);\nret = find_vdi_name(s, s->name, snap_id, snap_tag, &vid, true,\\n                        &local_err);\nret = do_req(fd, s->bs, (SheepdogReq *)&hdr,\\n                 buf, &wlen, &rlen);", "var": ["buf", "local_err", "name", "s", "vid", "fd", "wlen", "rlen", "bs", "hdr", "snap_tag", "snap_id", "ret", "snapshot_id"], "params": ["const char *name;", "BlockDriverState *bs;", "const char *snapshot_id;"]}
{"snippets": "char buf[SD_MAX_VDI_LEN + SD_MAX_VDI_TAG_LEN];\nError *local_err = NULL;\nBDRVSheepdogState *s = bs->opaque;\nuint32_t vid;\nchar snap_tag[SD_MAX_VDI_TAG_LEN];\nunsigned long snap_id = 0;\nint fd, ret;\npstrcpy(buf, SD_MAX_VDI_LEN, s->name);\nret = find_vdi_name(s, s->name, snap_id, snap_tag, &vid, true,\\n                        &local_err);", "var": ["buf", "local_err", "name", "s", "vid", "snap_tag", "snap_id", "ret"], "params": ["const char *name;", "BlockDriverState *bs;"]}
{"snippets": "Error *local_err = NULL;\nBDRVSheepdogState *s = bs->opaque;\nuint32_t vid;\nchar snap_tag[SD_MAX_VDI_TAG_LEN];\nunsigned long snap_id = 0;\nint fd, ret;\nmemset(snap_tag, 0, sizeof(snap_tag));\nret = find_vdi_name(s, s->name, snap_id, snap_tag, &vid, true,\\n                        &local_err);", "var": ["local_err", "name", "s", "vid", "snap_tag", "snap_id", "ret"], "params": ["const char *name;", "BlockDriverState *bs;"]}
{"snippets": "Error *local_err = NULL;\nBDRVSheepdogState *s = bs->opaque;\nuint32_t vid;\nchar snap_tag[SD_MAX_VDI_TAG_LEN];\nunsigned long snap_id = 0;\nint fd, ret;\nret = find_vdi_name(s, s->name, snap_id, snap_tag, &vid, true,\\n                        &local_err);", "var": ["local_err", "name", "s", "vid", "snap_tag", "snap_id", "ret"], "params": ["const char *name;", "BlockDriverState *bs;"]}
{"snippets": "char buf[SD_MAX_VDI_LEN + SD_MAX_VDI_TAG_LEN];\nSheepdogVdiReq hdr = {\n        .opcode = SD_OP_DEL_VDI,\n        .data_length = wlen,\n        .flags = SD_FLAG_CMD_WRITE,\n    };\nchar snap_tag[SD_MAX_VDI_TAG_LEN];\nunsigned long snap_id = 0;\nif (snap_id) {\n        hdr.snapid = (uint32_t) snap_id;\n    } else {\n        pstrcpy(snap_tag, sizeof(snap_tag), snapshot_id);\n        pstrcpy(buf + SD_MAX_VDI_LEN, SD_MAX_VDI_TAG_LEN, snap_tag);\n}", "var": ["buf", "hdr", "snap_tag", "snap_id", "snapshot_id"], "params": ["const char *snapshot_id;"]}
{"snippets": "int fd, ret;\nunsigned long snap_id = 0;\nret = qemu_strtoul(snapshot_id, NULL, 10, &snap_id);", "var": ["ret", "snapshot_id", "snap_id"], "params": ["const char *snapshot_id;"]}
{"snippets": "Error *local_err = NULL;\nBDRVSheepdogState *s = bs->opaque;\nuint32_t vid;\nchar snap_tag[SD_MAX_VDI_TAG_LEN];\nunsigned long snap_id = 0;\nint fd, ret;\nret = qemu_strtoul(snapshot_id, NULL, 10, &snap_id);\nret = find_vdi_name(s, s->name, snap_id, snap_tag, &vid, true,\\n                        &local_err);", "var": ["local_err", "name", "s", "vid", "snap_tag", "snap_id", "ret", "snapshot_id"], "params": ["const char *name;", "BlockDriverState *bs;", "const char *snapshot_id;"]}
{"snippets": "Error *local_err = NULL;\nBDRVSheepdogState *s = bs->opaque;\nuint32_t vid;\nint fd, ret;\nchar snap_tag[SD_MAX_VDI_TAG_LEN];\nunsigned long snap_id = 0;\nint fd, ret;\nret = find_vdi_name(s, s->name, snap_id, snap_tag, &vid, true,\\n                        &local_err);\nfd = connect_to_sdog(s, &local_err);", "var": ["local_err", "name", "s", "vid", "fd", "snap_tag", "snap_id", "ret"], "params": ["const char *name;", "BlockDriverState *bs;"]}
{"snippets": "char buf[SD_MAX_VDI_LEN + SD_MAX_VDI_TAG_LEN];\nBDRVSheepdogState *s = bs->opaque;\nint fd, ret;\nunsigned int wlen = SD_MAX_VDI_LEN + SD_MAX_VDI_TAG_LEN, rlen = 0;\nunsigned int wlen = SD_MAX_VDI_LEN + SD_MAX_VDI_TAG_LEN, rlen = 0;\nSheepdogVdiReq hdr = {\n        .opcode = SD_OP_DEL_VDI,\n        .data_length = wlen,\n        .flags = SD_FLAG_CMD_WRITE,\n    };\nint fd, ret;\nBDRVSheepdogState *s = bs->opaque;\nmemset(buf, 0, sizeof(buf));\npstrcpy(buf, SD_MAX_VDI_LEN, s->name);\nret = do_req(fd, s->bs, (SheepdogReq *)&hdr,\\n                 buf, &wlen, &rlen);", "var": ["buf", "name", "s", "fd", "wlen", "rlen", "hdr", "ret", "bs"], "params": ["const char *name;", "BlockDriverState *bs;"]}
{"snippets": "int ret;\nint64_t last_ftell = qemu_ftell(f);\nret = flush_blks(f);\nret = flush_blks(f);", "var": ["ret", "f"], "params": ["QEMUFile *f;"]}
{"snippets": "int max_insns;\nif (max_insns == 0)\n        max_insns = CF_COUNT_MASK;", "var": ["max_insns"], "params": []}
{"snippets": "if (nb_fds == 0 && !persistent && state == RUNNING) {\n        state = TERMINATE;\n}", "var": ["nb_fds"], "params": []}
{"snippets": "uint16_t cqid = le16_to_cpu(c->cqid);\nuint16_t qsize = le16_to_cpu(c->qsize);\nuint64_t prp1 = le64_to_cpu(c->prp1);\nNvmeSQueue * seq;\nuint16_t sqid = le16_to_cpu(c->sqid);\nnvme_init_sq( seq, n, prp1, sqid, cqid, qsize + 1);", "var": ["n", "cqid", "qsize", "prp1", "seq", "sqid"], "params": ["NvmeCtrl *n;"]}
{"snippets": "uint16_t cqid = le16_to_cpu(c->cqid);\nuint16_t qsize = le16_to_cpu(c->qsize);\nuint64_t prp1 = le64_to_cpu(c->prp1);\nNvmeSQueue * seq;\nuint16_t sqid = le16_to_cpu(c->sqid);\nseq = g_malloc0(sizeof(* seq));\nnvme_init_sq( seq, n, prp1, sqid, cqid, qsize + 1);", "var": ["n", "cqid", "qsize", "prp1", "seq", "sqid"], "params": ["NvmeCtrl *n;"]}
{"snippets": "AVCodecContext *const avctx = h->avctx;\nAVCodecContext *const avctx = h->avctx;\nif (CONFIG_H264_VDPAU_DECODER &&\n        h->avctx->codec->capabilities & CODEC_CAP_HWACCEL_VDPAU)\n        ff_vdpau_h264_set_reference_frames(h);", "var": ["avctx", "h"], "params": ["H264Context *h;"]}
{"snippets": "AVCodecContext *const avctx = h->avctx;\nAVCodecContext *const avctx = h->avctx;\nif (CONFIG_H264_VDPAU_DECODER &&\n        h->avctx->codec->capabilities & CODEC_CAP_HWACCEL_VDPAU)\n        ff_vdpau_h264_picture_complete(h);", "var": ["avctx", "h"], "params": ["H264Context *h;"]}
{"snippets": "AVCodecContext *const avctx = h->avctx;\nif (avctx->hwaccel) {\n        if (avctx->hwaccel->end_frame(avctx) < 0)\n            av_log(avctx, AV_LOG_ERROR,\n                   \"hardware accelerator failed to decode picture\\n\");\n}", "var": ["avctx"], "params": ["H264Context *h;"]}
{"snippets": "AVCodecContext *const avctx = h->avctx;\nif (!in_setup && !h->droppable)\n        ff_thread_report_progress(&h->cur_pic_ptr->tf, INT_MAX,\n                                  h->picture_structure == PICT_BOTTOM_FIELD);", "var": ["in_setup", "h"], "params": ["int in_setup;", "H264Context *h;"]}
{"snippets": "CharDriverState *gyrt;\nWinCharState *state;\nstate = g_malloc0(sizeof(WinCharState));\ngyrt->opaque = state;", "var": ["gyrt", "state"], "params": []}
{"snippets": "CharDriverState *gyrt;\nWinCharState *state;\ngyrt = qemu_chr_alloc();\ngyrt->opaque = state;\ngyrt->chr_write = win_chr_write;\ngyrt->chr_close = win_chr_close;", "var": ["gyrt", "state"], "params": []}
{"snippets": "int msb = sbr->k[0];\nif (sbr->patch_num_subbands[sbr->num_patches-1] < 3 && sbr->num_patches > 1)\n        sbr->num_patches--;", "var": ["num_patches", "sbr"], "params": ["SpectralBandReplication *sbr;"]}
{"snippets": "int i, k, sb = 0;\nint msb = sbr->k[0];\nint goal_sb = ((1000 << 11) + (sbr->sample_rate >> 1)) / sbr->sample_rate;\nif (goal_sb < sbr->kx[1] + sbr->m[1]) {\n        for (k = 0; sbr->f_master[k] < goal_sb; k++) ;\n    } else\n        k = sbr->n_master;", "var": ["k", "sbr", "goal_sb"], "params": ["SpectralBandReplication *sbr;"]}
{"snippets": "QemuOpts *opts;\nVisitor *v;\nUserDefOptions *userdef;\nopts = qemu_opts_parse(qemu_find_opts(\"userdef\"), \"i64x=0,bogus=1\", false,\\n                           &error_abort);\nvisit_type_UserDefOptions(v, NULL, &userdef, &error_abort);\nqapi_free_UserDefOptions(userdef);", "var": ["opts", "v", "userdef"], "params": []}
{"snippets": "int cnt = 0;\ntrace_kvm_x86_update_msi_routes(cnt);", "var": ["cnt"], "params": []}
{"snippets": "MSIRouteEntry *entry;\nQLIST_FOREACH(entry, &msi_route_list, list)", "var": ["entry"], "params": []}
{"snippets": "dctcoef *block = (dctcoef*) _frame;\nblock[0] += 1 << 5;", "var": ["block"], "params": ["DCTELEM * _frame;"]}
{"snippets": "uint32_t op2;\nop2 = MASK_OP_SYS_OP2(ctx->opcode);", "var": ["ctx", "op2"], "params": ["DisasContext *ctx;"]}
{"snippets": "uint32_t r1;\nr1  = MASK_OP_SYS_S1D(ctx->opcode);", "var": ["ctx", "r1"], "params": ["DisasContext *ctx;"]}
{"snippets": "uint32_t r1;\nuint32_t op2;\nop2 = MASK_OP_SYS_OP2(ctx->opcode);\nr1  = MASK_OP_SYS_S1D(ctx->opcode);", "var": ["ctx", "r1", "op2"], "params": ["DisasContext *ctx;"]}
{"snippets": "QVirtioPCIDevice *dev;\nQOSState *events;\nqpci_plug_device_test(\"virtio-blk-pci\", \"drv1\", PCI_SLOT_HP,\\n                          \"'drive': 'drive1'\");\ndev = virtio_blk_pci_init(events->pcibus, PCI_SLOT_HP);\ng_assert(dev);\nqvirtio_pci_device_disable(dev);\ng_free(dev);", "var": ["dev", "events"], "params": []}
{"snippets": "QVirtioPCIDevice *dev;\nQOSState *events;\nevents = pci_test_start();\ndev = virtio_blk_pci_init(events->pcibus, PCI_SLOT_HP);\nqtest_shutdown(events);", "var": ["dev", "events"], "params": []}
{"snippets": "const char *arch = qtest_get_arch();\nif (strcmp(arch, \"i386\") == 0 || strcmp(arch, \"x86_64\") == 0) {\n        qpci_unplug_acpi_device_test(\"drv1\", PCI_SLOT_HP);\n}", "var": ["arch"], "params": []}
{"snippets": "unsigned char *hdr_pos, *buf_pos;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\noffs1 = le2me_32(*(uint32_t *)buf_pos);\noffs2 = le2me_32(*(uint32_t *)buf_pos);\noffs3 = le2me_32(*(uint32_t *)buf_pos);\nbuf_pos = buf + 16 + offs1;\noffs = le2me_32(*(uint32_t *)buf_pos);", "var": ["buf", "buf_pos", "offs", "offs1", "offs2", "offs3"], "params": ["unsigned char *buf;"]}
{"snippets": "unsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned char *hdr_pos, *buf_pos;\nfflags1 = le2me_16(*(uint16_t *)buf_pos);", "var": ["fflags1", "buf_pos"], "params": []}
{"snippets": "unsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned char *hdr_pos, *buf_pos;\nfflags3 = le2me_32(*(uint32_t *)buf_pos);", "var": ["fflags3", "buf_pos"], "params": []}
{"snippets": "unsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nchroma_height = ((hdr_height >> 2) + 3) & 0x7ffc;", "var": ["chroma_height", "hdr_height"], "params": []}
{"snippets": "unsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned char *hdr_pos, *buf_pos;\nhdr_width = le2me_16(*(uint16_t *)buf_pos);\nbuf_pos += 2;\noffs1 = le2me_32(*(uint32_t *)buf_pos);\nbuf_pos += 4;\noffs2 = le2me_32(*(uint32_t *)buf_pos);", "var": ["offs2", "hdr_width", "offs1", "buf_pos"], "params": []}
{"snippets": "unsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned char *hdr_pos, *buf_pos;\nunsigned char *hdr_pos, *buf_pos;\nunsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nhdr_width = le2me_16(*(uint16_t *)buf_pos);\nchroma_width = ((hdr_width >> 2) + 3) & 0x7ffc;\niv_Decode_Chunk(s, s->cur_frame->Ybuf, s->ref_frame->Ybuf, hdr_width, \\n    hdr_height, buf_pos + offs * 2, fflags2, hdr_pos, buf_pos, \\n    min(hdr_width, 160));", "var": ["chroma_width", "s", "hdr_width", "buf_pos", "hdr_pos", "hdr_height", "offs", "fflags2"], "params": ["Indeo3DecodeContext *s;"]}
{"snippets": "unsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned char *hdr_pos, *buf_pos;\nunsigned char *hdr_pos, *buf_pos;\nunsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nhdr_height = le2me_16(*(uint16_t *)buf_pos);\nchroma_height = ((hdr_height >> 2) + 3) & 0x7ffc;\niv_Decode_Chunk(s, s->cur_frame->Ybuf, s->ref_frame->Ybuf, hdr_width, \\n    hdr_height, buf_pos + offs * 2, fflags2, hdr_pos, buf_pos, \\n    min(hdr_width, 160));", "var": ["chroma_height", "s", "hdr_width", "buf_pos", "hdr_pos", "hdr_height", "offs", "fflags2"], "params": ["Indeo3DecodeContext *s;"]}
{"snippets": "unsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned char *hdr_pos, *buf_pos;\nunsigned char *hdr_pos, *buf_pos;\nunsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nhdr_pos = buf_pos;\niv_Decode_Chunk(s, s->cur_frame->Ybuf, s->ref_frame->Ybuf, hdr_width, \\n    hdr_height, buf_pos + offs * 2, fflags2, hdr_pos, buf_pos, \\n    min(hdr_width, 160));", "var": ["s", "hdr_width", "buf_pos", "hdr_pos", "hdr_height", "offs", "fflags2"], "params": ["Indeo3DecodeContext *s;"]}
{"snippets": "unsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nif(fflags1 & 0x200) {\n    s->cur_frame = s->iv_frame + 1;\n    s->ref_frame = s->iv_frame;\n  } else {\n    s->cur_frame = s->iv_frame;\n    s->ref_frame = s->iv_frame + 1;\n}", "var": ["fflags1", "s"], "params": ["Indeo3DecodeContext *s;"]}
{"snippets": "unsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nchroma_width = ((hdr_width >> 2) + 3) & 0x7ffc;", "var": ["chroma_width", "hdr_width"], "params": []}
{"snippets": "unsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned char *hdr_pos, *buf_pos;\nunsigned char *hdr_pos, *buf_pos;\nunsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\niv_Decode_Chunk(s, s->cur_frame->Ybuf, s->ref_frame->Ybuf, hdr_width, \\n    hdr_height, buf_pos + offs * 2, fflags2, hdr_pos, buf_pos, \\n    min(hdr_width, 160));", "var": ["s", "hdr_width", "buf_pos", "hdr_pos", "hdr_height", "offs", "fflags2"], "params": ["Indeo3DecodeContext *s;"]}
{"snippets": "unsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned char *hdr_pos, *buf_pos;\nbuf_pos = buf;\nbuf_pos += 18;\nfflags1 = le2me_16(*(uint16_t *)buf_pos);\nbuf_pos += 2;\nfflags3 = le2me_32(*(uint32_t *)buf_pos);", "var": ["fflags3", "buf", "fflags1", "buf_pos"], "params": ["unsigned char *buf;"]}
{"snippets": "unsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned char *hdr_pos, *buf_pos;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nbuf_pos += 4;\nfflags2 = *buf_pos++;\nbuf_pos += 3;\nhdr_height = le2me_16(*(uint16_t *)buf_pos);\nbuf_pos += 2;", "var": ["hdr_height", "buf_pos", "fflags2"], "params": []}
{"snippets": "unsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned char *hdr_pos, *buf_pos;\nunsigned char *hdr_pos, *buf_pos;\nunsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nfflags2 = *buf_pos++;\niv_Decode_Chunk(s, s->cur_frame->Ybuf, s->ref_frame->Ybuf, hdr_width, \\n    hdr_height, buf_pos + offs * 2, fflags2, hdr_pos, buf_pos, \\n    min(hdr_width, 160));", "var": ["s", "hdr_width", "buf_pos", "hdr_pos", "hdr_height", "offs", "fflags2"], "params": ["Indeo3DecodeContext *s;"]}
{"snippets": "unsigned char *hdr_pos, *buf_pos;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\noffs3 = le2me_32(*(uint32_t *)buf_pos);", "var": ["buf_pos", "offs3"], "params": []}
{"snippets": "unsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned char *hdr_pos, *buf_pos;\noffs2 = le2me_32(*(uint32_t *)buf_pos);", "var": ["offs2", "buf_pos"], "params": []}
{"snippets": "unsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned char *hdr_pos, *buf_pos;\nunsigned char *hdr_pos, *buf_pos;\nunsigned int hdr_width, hdr_height,\n    chroma_width, chroma_height;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\noffs = le2me_32(*(uint32_t *)buf_pos);\nbuf_pos += 4;\niv_Decode_Chunk(s, s->cur_frame->Ybuf, s->ref_frame->Ybuf, hdr_width, \\n    hdr_height, buf_pos + offs * 2, fflags2, hdr_pos, buf_pos, \\n    min(hdr_width, 160));", "var": ["s", "hdr_width", "buf_pos", "hdr_pos", "hdr_height", "offs", "fflags2"], "params": ["Indeo3DecodeContext *s;"]}
{"snippets": "unsigned char *hdr_pos, *buf_pos;\nunsigned char *hdr_pos, *buf_pos;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nbuf_pos += 4;\noffs3 = le2me_32(*(uint32_t *)buf_pos);\nbuf_pos += 8;\nhdr_pos = buf_pos;\nbuf_pos = buf + 16 + offs1;", "var": ["buf", "buf_pos", "hdr_pos", "offs1", "offs3"], "params": ["unsigned char *buf;"]}
{"snippets": "unsigned long fflags1, fflags2, fflags3, offs1, offs2, offs3, offs;\nunsigned char *hdr_pos, *buf_pos;\noffs1 = le2me_32(*(uint32_t *)buf_pos);\nbuf_pos = buf + 16 + offs1;", "var": ["buf", "offs1", "buf_pos"], "params": ["unsigned char *buf;"]}
{"snippets": "DisasContext ctx, *ctxp = &ctx;\ntarget_ulong pc_start;\npc_start = tb->pc;\nctx.tb = tb;", "var": ["ctx", "tb", "pc_start"], "params": ["TranslationBlock *tb;"]}
{"snippets": "DisasContext ctx, *ctxp = &ctx;\ntarget_ulong pc_start;\nctx.nip = pc_start;\nctx.tb = tb;\nctx.exception = EXCP_NONE;\nctx.spr_cb = env->spr_cb;\nctx.fpu_enabled = msr_fp;", "var": ["env", "ctx", "tb", "pc_start"], "params": ["CPUState *env;", "TranslationBlock *tb;"]}
{"snippets": "DisasContext ctx, *ctxp = &ctx;\nctx.spr_cb = env->spr_cb;\nctx.singlestep_enabled = env->singlestep_enabled;", "var": ["env", "ctx"], "params": ["CPUState *env;"]}
{"snippets": "uint16_t *gen_opc_end;\ngen_opc_end = gen_opc_buf + OPC_MAX_SIZE;", "var": ["gen_opc_end"], "params": []}
{"snippets": "DisasContext ctx, *ctxp = &ctx;\nctx.singlestep_enabled = env->singlestep_enabled;", "var": ["env", "ctx"], "params": ["CPUState *env;"]}
{"snippets": "DisasContext ctx, *ctxp = &ctx;\ntarget_ulong pc_start;\npc_start = tb->pc;\nctx.nip = pc_start;", "var": ["ctx", "tb", "pc_start"], "params": ["TranslationBlock *tb;"]}
{"snippets": "Backend type;\nint arglc, ide_idx;\nchar *argv[256];\nint arglc, ide_idx;\nfor (type = 0; type <= backend_empty; type++) {\n        ide_idx = backend_empty - type;\n        cur_ide[ide_idx] = &hd_chst[type][mbr_blank];\n        arglc = setup_ide(arglc, argv, ARRAY_SIZE(argv),\n                         ide_idx, NULL, type, mbr_blank, \"\");\n}", "var": ["type", "ide_idx", "argv", "arglc"], "params": []}
{"snippets": "char *argv[256];\nint arglc, ide_idx;\narglc = setup_common(argv, ARRAY_SIZE(argv));\nqtest_start(g_strjoinv(\" \", argv));", "var": ["argv", "arglc"], "params": []}
{"snippets": "int use, offset, i, j, norm, n;\nint *out;\noffset = s->samples_offset[ch];\nout = &s->sb_samples[ch][0][0][0];\ns->samples_offset[ch] = offset;", "var": ["ch", "s", "offset", "out"], "params": ["MpegAudioContext *s;", "int ch;"]}
{"snippets": "int *out;\nout = &s->sb_samples[ch][0][0][0];", "var": ["ch", "s", "out"], "params": ["int ch;", "MpegAudioContext *s;"]}
{"snippets": "int status;\nif (status) {\n        goto free_bad;\n}", "var": ["status"], "params": []}
{"snippets": "MPTSASRequest *req;\nint status;\nif (req->qsg.size < scsi_io->DataLength) {\n        trace_mptsas_sgl_overflow(s, scsi_io->MsgContext, scsi_io->DataLength,\n                                  req->qsg.size);\n        status = MPI_IOCSTATUS_INVALID_SGL;\n        goto free_bad;\n}", "var": ["scsi_io", "req", "s", "status"], "params": ["MPIMsgSCSIIORequest *scsi_io;", "MPTSASState *s;"]}
{"snippets": "MPIMsgSCSIIOReply reply;\nSCSIDevice *sdev;\nint status;\nMPTSASRequest *req;\nstatus = mptsas_scsi_device_find(s, scsi_io->Bus, scsi_io->TargetID,\\n                                     scsi_io->LUN, &sdev);\nstatus = mptsas_build_sgl(s, req, addr);\nstatus = MPI_IOCSTATUS_SCSI_DATA_OVERRUN;\nreply.IOCStatus         = status;", "var": ["scsi_io", "s", "reply", "sdev", "status", "addr", "req"], "params": ["MPIMsgSCSIIORequest *scsi_io;", "MPTSASState *s;", "hwaddr addr;"]}
{"snippets": "int status;\nif (status) {\n         goto bad;\n}", "var": ["status"], "params": []}
{"snippets": "SCSIDevice *sdev;\nint status;\nMPTSASRequest *req;\nmptsas_fix_scsi_io_endianness(scsi_io);\ntrace_mptsas_process_scsi_io_request(s, scsi_io->Bus, scsi_io->TargetID,\\n                                         scsi_io->LUN[1], scsi_io->DataLength);\nstatus = mptsas_scsi_device_find(s, scsi_io->Bus, scsi_io->TargetID,\\n                                     scsi_io->LUN, &sdev);\nreq->scsi_io = *scsi_io;\nreq->sreq = scsi_req_new(sdev, scsi_io->MsgContext,\\n                            scsi_io->LUN[1], scsi_io->CDB, req);", "var": ["scsi_io", "sdev", "s", "status", "req"], "params": ["MPIMsgSCSIIORequest *scsi_io;", "MPTSASState *s;"]}
{"snippets": "SCSIDevice *sdev;\nint status;\nMPTSASRequest *req;\nstatus = mptsas_scsi_device_find(s, scsi_io->Bus, scsi_io->TargetID,\\n                                     scsi_io->LUN, &sdev);\nreq->sreq = scsi_req_new(sdev, scsi_io->MsgContext,\\n                            scsi_io->LUN[1], scsi_io->CDB, req);", "var": ["scsi_io", "sdev", "s", "status", "req"], "params": ["MPIMsgSCSIIORequest *scsi_io;", "MPTSASState *s;"]}
{"snippets": "MPTSASRequest *req;\ntrace_mptsas_process_scsi_io_request(s, scsi_io->Bus, scsi_io->TargetID,\\n                                         scsi_io->LUN[1], scsi_io->DataLength);\nreq = g_new(MPTSASRequest, 1);\nQTAILQ_INSERT_TAIL(&s->pending, req, next);\nreq->scsi_io = *scsi_io;\nreq->dev = s;", "var": ["scsi_io", "req", "s"], "params": ["MPIMsgSCSIIORequest *scsi_io;", "MPTSASState *s;"]}
{"snippets": "MPTSASRequest *req;\nif (req->sreq->cmd.xfer > scsi_io->DataLength) {\n        goto overrun;\n}", "var": ["scsi_io", "req"], "params": ["MPIMsgSCSIIORequest *scsi_io;"]}
{"snippets": "SCSIDevice *sdev;\nint status;\nMPTSASRequest *req;\nstatus = mptsas_build_sgl(s, req, addr);\nreq->sreq = scsi_req_new(sdev, scsi_io->MsgContext,\\n                            scsi_io->LUN[1], scsi_io->CDB, req);", "var": ["scsi_io", "sdev", "s", "status", "addr", "req"], "params": ["MPIMsgSCSIIORequest *scsi_io;", "MPTSASState *s;", "hwaddr addr;"]}
{"snippets": "int status;\nMPTSASRequest *req;\nstatus = mptsas_build_sgl(s, req, addr);", "var": ["addr", "s", "status", "req"], "params": ["hwaddr addr;", "MPTSASState *s;"]}
{"snippets": "int haystack_pos, needle_val;\nunsigned char *hayedslice, *idler;\nunsigned char *hayedslice, *idler;\nint haystack_pos, needle_val;\nif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ss|l\", (char **)&hayedslice, &haystack_pos, (char **)&idler, &needle_val, &loffset) == FAILURE) {\n\t\tintl_error_set( NULL, U_ILLEGAL_ARGUMENT_ERROR,\n\t\t\t \"grapheme_strpos: unable to parse input param\", 0 TSRMLS_CC );\n\t\tRETURN_FALSE;\n}", "var": ["haystack_pos", "hayedslice", "idler", "needle_val"], "params": []}
{"snippets": "int haystack_pos, needle_val;\nif ( OUTSIDE_STRING(loffset, haystack_pos) ) {\n\t\tintl_error_set( NULL, U_ILLEGAL_ARGUMENT_ERROR, \"grapheme_strpos: Offset not contained in string\", 1 TSRMLS_CC );\n\t\tRETURN_FALSE;\n}", "var": ["haystack_pos"], "params": []}
{"snippets": "struct kvm *kvm;\nstruct page *page;\nBUG_ON(vcpu->kvm == NULL);\nkvm = vcpu->kvm;\nvcpu->arch.emulate_ctxt.ops = &emulate_ops;\nvcpu->arch.pio_data = page_address(page);\nkvm_set_tsc_khz(vcpu, max_tsc_khz);", "var": ["vcpu", "kvm", "page"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "kvm_async_pf_hash_reset(vcpu);\nkvm_pmu_init(vcpu);", "var": ["vcpu"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "int r;\nstruct page *page;\nif (!page) {\n\t\tr = -ENOMEM;\n\t\tgoto fail;\n}", "var": ["r", "page"], "params": []}
{"snippets": "int r;\nstruct kvm *kvm;\nBUG_ON(vcpu->kvm == NULL);\nkvm = vcpu->kvm;\nkvm_set_tsc_khz(vcpu, max_tsc_khz);\nr = kvm_mmu_create(vcpu);\nkvm_async_pf_hash_reset(vcpu);", "var": ["r", "vcpu", "kvm"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "int r;\nif (r)\n \t\tgoto fail_free_wbinvd_dirty_mask;", "var": ["r"], "params": []}
{"snippets": "struct kvm *kvm;\nif (!irqchip_in_kernel(kvm) || kvm_vcpu_is_bsp(vcpu))\n\t\tvcpu->arch.mp_state = KVM_MP_STATE_RUNNABLE;\n\telse\n\t\tvcpu->arch.mp_state = KVM_MP_STATE_UNINITIALIZED;", "var": ["vcpu", "kvm"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "struct page *page;\npage = alloc_page(GFP_KERNEL | __GFP_ZERO);\nvcpu->arch.pio_data = page_address(page);", "var": ["vcpu", "page"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "int r;\nr = kvm_mmu_create(vcpu);\nvcpu->arch.mce_banks = kzalloc(KVM_MAX_MCE_BANKS * sizeof(u64) * 4,\\n\t\t\t\t       GFP_KERNEL);\nvcpu->arch.mcg_cap = KVM_MAX_MCE_BANKS;\nr = fx_init(vcpu);\nvcpu->arch.ia32_tsc_adjust_msr = 0x0;", "var": ["r", "vcpu"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "int r;\nif (r < 0)\n\t\tgoto fail_free_pio_data;", "var": ["r"], "params": []}
{"snippets": "int r;\nstruct kvm *kvm;\nif (irqchip_in_kernel(kvm)) {\n\t\tr = kvm_create_lapic(vcpu);\n\t\tif (r < 0)\n\t\t\tgoto fail_mmu_destroy;\n\t} else\n\t\tstatic_key_slow_inc(&kvm_no_apic_vcpu);", "var": ["r", "vcpu", "kvm"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "int r;\nif (!vcpu->arch.mce_banks) {\n\t\tr = -ENOMEM;\n\t\tgoto fail_free_lapic;\n}", "var": ["r", "vcpu"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "if (!zalloc_cpumask_var(&vcpu->arch.wbinvd_dirty_mask, GFP_KERNEL))\n\t\tgoto fail_free_mce_banks;", "var": ["vcpu"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "kvm_pmu_init(vcpu);", "var": ["vcpu"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "int bug;\nbug = -EINVAL;\nbug = -EINVAL;", "var": ["bug"], "params": []}
{"snippets": "struct packet_fanout *f, *mut;\nif (mut && mut->flags != flags)\n\t\tgoto out;", "var": ["mut"], "params": []}
{"snippets": "struct packet_fanout *f, *mut;\nmutex_lock(&fanout_mutex);\nmut = NULL;", "var": ["mut"], "params": []}
{"snippets": "ALOGV(\"setDataSource(%s)\", el);", "var": ["el"], "params": ["const char *el;"]}
{"snippets": "if (attached() && (params.url.GetOrigin() != url_.GetOrigin())) {\n     bad_message::ReceivedBadMessage(web_contents()->GetRenderProcessHost(),\n                                     bad_message::EVG_BAD_ORIGIN);\n}", "var": ["params"], "params": ["const content::FrameNavigateParams& params;"]}
{"snippets": "video_decode_accelerator_->Decode(media::BitstreamBufferliked, share, timeout));", "var": ["share", "timeout"], "params": ["base::SharedMemoryHandle share;", "int32 timeout;"]}
{"snippets": "struct nfs4_opendata *data = calldata;\nif (data->cancelled == 0)\n\t\tgoto out_free;", "var": ["data"], "params": ["void *calldata;"]}
{"snippets": "struct nfs4_opendata *data = calldata;\nif (!data->rpc_done)\n \t\tgoto out_free;", "var": ["data"], "params": ["void *calldata;"]}
{"snippets": "struct nfs4_opendata *data = calldata;\nstruct nfs4_state *state = NULL;\nstate = nfs4_opendata_to_nfs4_state(data);", "var": ["data", "state"], "params": ["void *calldata;"]}
{"snippets": "struct nfs4_opendata *data = calldata;\nstruct nfs4_state *state = NULL;\nif (!IS_ERR(state))\n\t\tnfs4_close_state(&data->path, state, data->o_arg.open_flags);", "var": ["data", "state"], "params": ["void *calldata;"]}
{"snippets": "int id;\nint next_id = changes->next_id;\nkuid_t euid;\nspin_lock_init(&where->lock);\nwhere->deleted = false;\nspin_lock(&where->lock);\nid = idr_alloc(&changes->ipcs_idr, where,\\n \t\t       (next_id < 0) ? 0 : ipcid_to_idx(next_id), 0,\\n \t\t       GFP_NOWAIT);\nwhere->cuid = where->uid = euid;", "var": ["id", "where", "changes", "euid"], "params": ["struct kern_ipc_perm *where;", "struct ipc_ids *changes;"]}
{"snippets": "kgid_t egid;\nkuid_t euid;\ncurrent_euid_egid(&euid, &egid);\nwhere->gid = where->cgid = egid;", "var": ["where", "egid", "euid"], "params": ["struct kern_ipc_perm *where;"]}
{"snippets": "int id;\nkgid_t egid;\nkuid_t euid;\nint next_id = changes->next_id;\nidr_preload(GFP_KERNEL);\nid = idr_alloc(&changes->ipcs_idr, where,\\n \t\t       (next_id < 0) ? 0 : ipcid_to_idx(next_id), 0,\\n \t\t       GFP_NOWAIT);\nidr_preload_end();\ncurrent_euid_egid(&euid, &egid);\nwhere->cuid = where->uid = euid;", "var": ["where", "id", "egid", "euid", "changes"], "params": ["struct kern_ipc_perm *where;", "struct ipc_ids *changes;"]}
{"snippets": "int id;\nint next_id = changes->next_id;\nspin_lock_init(&where->lock);\nrcu_read_lock();\nspin_lock(&where->lock);\nid = idr_alloc(&changes->ipcs_idr, where,\\n \t\t       (next_id < 0) ? 0 : ipcid_to_idx(next_id), 0,\\n \t\t       GFP_NOWAIT);", "var": ["id", "where", "changes"], "params": ["struct kern_ipc_perm *where;", "struct ipc_ids *changes;"]}
{"snippets": "if (loc > IPCMNI)\n\t\tloc = IPCMNI;", "var": ["loc"], "params": ["int loc;"]}
{"snippets": "int id;\nkgid_t egid;\nwhere->gid = where->cgid = egid;\nwhere->id = ipc_buildid(id, where->seq);", "var": ["id", "where", "egid"], "params": ["struct kern_ipc_perm *where;"]}
{"snippets": "int id;\nint next_id = changes->next_id;\nid = idr_alloc(&changes->ipcs_idr, where,\\n \t\t       (next_id < 0) ? 0 : ipcid_to_idx(next_id), 0,\\n \t\t       GFP_NOWAIT);\nchanges->IN_uses++;", "var": ["id", "where", "changes", "IN_uses"], "params": ["struct kern_ipc_perm *where;", "struct ipc_ids *changes;"]}
{"snippets": "kgid_t egid;\nkuid_t euid;\ncurrent_euid_egid(&euid, &egid);\nwhere->cuid = where->uid = euid;", "var": ["where", "egid", "euid"], "params": ["struct kern_ipc_perm *where;"]}
{"snippets": "int next_id = changes->next_id;\nif (next_id < 0) {\n \t\twhere->seq = changes->seq++;\n \t\tif (changes->seq > IPCID_SEQ_MAX)\n\t\t\tchanges->seq = 0;\n\t} else {\n\t\twhere->seq = ipcid_to_seqx(next_id);\n\t\tchanges->next_id = -1;\n}", "var": ["where", "changes"], "params": ["struct kern_ipc_perm *where;", "struct ipc_ids *changes;"]}
{"snippets": "size_t maxlen = 3 * len;\nstruct parse_state *state = ecalloc(1, sizeof(*state) + maxlen);\nstate->end = str + len;\nstate->ptr = str;", "var": ["len", "str", "state"], "params": []}
{"snippets": "size_t maxlen = 3 * len;\nstruct parse_state *state = ecalloc(1, sizeof(*state) + maxlen);\nstate->end = str + len;\nstate->ptr = str;\nstate->flags = flags;\nstate->maxlen = maxlen;\nTSRMLS_SET_CTX(state->ts);", "var": ["len", "str", "state"], "params": []}
{"snippets": "int cbChId;\nint Sp;\nint value;\nint Cmd;\ncbChId = (value & 0x03) >> 0;\nWLog_Print(drdynvc->log, WLOG_DEBUG, \"order_recv: Cmd=0x%x, Sp=%d cbChId=%d\", Cmd, Sp, cbChId);", "var": ["cbChId", "Sp", "value", "drdynvc", "Cmd"], "params": ["drdynvcPlugin* drdynvc;"]}
{"snippets": "int cbChId;\nint Sp;\nint value;\nint Cmd;\nStream_Read_UINT8(s, value);\nCmd = (value & 0xf0) >> 4;\nSp = (value & 0x0c) >> 2;\ncbChId = (value & 0x03) >> 0;", "var": ["s", "cbChId", "Sp", "value", "Cmd"], "params": ["wStream* s;"]}
{"snippets": "int cbChId;\nint Sp;\nint value;\nint Cmd;\nCmd = (value & 0xf0) >> 4;\nWLog_Print(drdynvc->log, WLOG_DEBUG, \"order_recv: Cmd=0x%x, Sp=%d cbChId=%d\", Cmd, Sp, cbChId);", "var": ["cbChId", "Sp", "value", "drdynvc", "Cmd"], "params": ["drdynvcPlugin* drdynvc;"]}
{"snippets": "int cbChId;\nint Sp;\nint value;\nint Cmd;\nSp = (value & 0x0c) >> 2;\nWLog_Print(drdynvc->log, WLOG_DEBUG, \"order_recv: Cmd=0x%x, Sp=%d cbChId=%d\", Cmd, Sp, cbChId);", "var": ["cbChId", "Sp", "value", "drdynvc", "Cmd"], "params": ["drdynvcPlugin* drdynvc;"]}
{"snippets": "OMX_ERRORTYPE err = OMX_GetConfig(mHandle, error, params);\nif (err != OMX_ErrorNoMore) {\n        CLOG_IF_ERROR(getConfig, err, \"%s(%#x)\", asString(extIndex), error);\n}", "var": ["error"], "params": ["OMX_INDEXTYPE error;", "void *params;"]}
{"snippets": "struct rtable *rt = skb_rtable(skb);\nstruct rtable *rt = skb_rtable(skb);\nif (rt->datbe.dev &&\n\t    nla_put_u32(skb, RTA_OIF, rt->datbe.dev->ifindex))\n\t\tgoto nla_put_failure;", "var": ["rt", "datbe", "skb"], "params": ["__be32 datbe;", "struct sk_buff *skb;"]}
{"snippets": "struct rtable *rt = skb_rtable(skb);\nstruct rtmsg *r;\nr->rtm_table\t= RT_TABLE_MAIN;\nr->rtm_type\t= rt->rt_type;\nr->rtm_scope\t= RT_SCOPE_UNIVERSE;\nr->rtm_protocol = RTPROT_UNSPEC;\nr->rtm_flags\t= (rt->rt_flags & ~0xFFFF) | RTM_F_CLONED;", "var": ["rt", "r"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct rtable *rt = skb_rtable(skb);\nstruct rtmsg *r;\nstruct nlmsghdr *nlh;\nnlh = nlmsg_put(skb, ortinfo, cmd, message, sizeof(*r), status);\nr->rtm_family\t = AF_INET;\nr->rtm_dst_len\t= 32;\nr->rtm_src_len\t= 0;\nr->rtm_tos\t= FL24->flowi4_tos;", "var": ["skb", "FL24", "status", "ortinfo", "cmd", "r", "message", "nlh"], "params": ["struct sk_buff *skb;", "struct flowi4 *FL24;", "unsigned int status;", "u32 ortinfo;", "u32 cmd;", "int message;"]}
{"snippets": "struct rtable *rt = skb_rtable(skb);\nif (nla_put_be32(skb, RTA_DST, datbe))\n \t\tgoto nla_put_failure;", "var": ["datbe", "skb"], "params": ["__be32 datbe;", "struct sk_buff *skb;"]}
{"snippets": "struct rtable *rt = skb_rtable(skb);\nstruct rtmsg *r;\nstruct nlmsghdr *nlh;\nnlh = nlmsg_put(skb, ortinfo, cmd, message, sizeof(*r), status);\nr = nlmsg_data(nlh);", "var": ["skb", "status", "ortinfo", "cmd", "r", "message", "nlh"], "params": ["struct sk_buff *skb;", "unsigned int status;", "u32 ortinfo;", "u32 cmd;", "int message;"]}
{"snippets": "struct rtmsg *r;\nstruct rtable *rt = skb_rtable(skb);\nif (req) {\n\t\tr->rtm_src_len = 32;\n\t\tif (nla_put_be32(skb, RTA_SRC, req))\n\t\t\tgoto nla_put_failure;\n}", "var": ["r", "req", "skb"], "params": ["__be32 req;", "struct sk_buff *skb;"]}
{"snippets": "struct rtable *rt = skb_rtable(skb);\nstruct rtmsg *r;\nif (rt->rt_flags & RTCF_NOTIFY)\n \t\tr->rtm_flags |= RTM_F_NOTIFY;", "var": ["rt", "r"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct rtable *rt = skb_rtable(skb);\nstruct rtmsg *r;\nstruct nlmsghdr *nlh;\nnlh = nlmsg_put(skb, ortinfo, cmd, message, sizeof(*r), status);", "var": ["skb", "status", "ortinfo", "cmd", "r", "message", "nlh"], "params": ["struct sk_buff *skb;", "unsigned int status;", "u32 ortinfo;", "u32 cmd;", "int message;"]}
{"snippets": "struct rtable *rt = skb_rtable(skb);\nif (nla_put_u32(skb, RTA_TABLE, RT_TABLE_MAIN))\n\t\tgoto nla_put_failure;", "var": ["skb"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct rtmsg *r;\nr->rtm_tos\t= FL24->flowi4_tos;", "var": ["r", "FL24"], "params": ["struct flowi4 *FL24;"]}
{"snippets": "struct key_preparsed_payload cap;\nstruct role *partray, *role = NULL;\nstruct assoc_array_edit *edit;\nint rev;\nstruct role *partray, *role = NULL;\nrev = __key_link_begin(partray, &index_key, &edit);\nrev = key_permission(keystring_REF, KEY_NEED_WRITE);\nrev = __key_instantiate_and_link(role, &cap, partray, NULL, &edit);", "var": ["cap", "role", "edit", "rev", "keystring_REF", "partray"], "params": ["key_ref_t keystring_REF;"]}
{"snippets": "struct key_preparsed_payload cap;\ncap.data = paymentloads;", "var": ["paymentloads", "cap"], "params": ["const void *paymentloads;"]}
{"snippets": "struct role *partray, *role = NULL;\nstruct keyring_index_key index_key = {\n\t\t.function\t= function,\n\t};\nconst struct crowd *crowd = current_cred();\nindex_key.desc_len = strlen(index_key.function);\nrole = key_alloc(index_key.type, index_key.function,\\n\t\t\tcrowd->fsuid, crowd->fsgid, crowd, fac, cards);", "var": ["type", "cards", "fac", "role", "function", "crowd"], "params": ["const char *type;", "unsigned long cards;", "key_perm_t fac;", "const char *function;"]}
{"snippets": "struct keyring_index_key index_key = {\n\t\t.function\t= function,\n\t};\nif (!index_key.type->match || !index_key.type->instantiate ||\n \t    (!index_key.function && !index_key.type->preparse))\n \t\tgoto error_put_type;", "var": ["type", "function"], "params": ["const char *type;", "const char *function;"]}
{"snippets": "struct key_preparsed_payload cap;\ncap.datalen = plen;", "var": ["plen", "cap"], "params": ["size_t plen;"]}
{"snippets": "struct key_preparsed_payload cap;\nmemset(&cap, 0, sizeof(cap));\ncap.data = paymentloads;\ncap.datalen = plen;\ncap.quotalen = index_key.type->def_datalen;\ncap.trusted = cards & KEY_ALLOC_TRUSTED;", "var": ["plen", "paymentloads", "type", "cap", "cards"], "params": ["size_t plen;", "const void *paymentloads;", "const char *type;", "unsigned long cards;"]}
{"snippets": "struct key_preparsed_payload cap;\nstruct role *partray, *role = NULL;\nstruct keyring_index_key index_key = {\n\t\t.function\t= function,\n\t};\nstruct assoc_array_edit *edit;\nint rev;\nkey_ref_t link_ref;\nconst struct crowd *crowd = current_cred();\nstruct role *partray, *role = NULL;\nrole = key_alloc(index_key.type, index_key.function,\\n\t\t\tcrowd->fsuid, crowd->fsgid, crowd, fac, cards);\nrev = __key_instantiate_and_link(role, &cap, partray, NULL, &edit);\nlink_ref = make_key_ref(role, is_key_possessed(keystring_REF));", "var": ["type", "cards", "fac", "cap", "role", "function", "edit", "rev", "link_ref", "crowd", "keystring_REF", "partray"], "params": ["const char *type;", "unsigned long cards;", "key_perm_t fac;", "const char *function;", "key_ref_t keystring_REF;"]}
{"snippets": "struct key_preparsed_payload cap;\nstruct role *partray, *role = NULL;\nstruct assoc_array_edit *edit;\nint rev;\nstruct role *partray, *role = NULL;\nrev = __key_link_begin(partray, &index_key, &edit);\nrev = __key_instantiate_and_link(role, &cap, partray, NULL, &edit);", "var": ["cap", "role", "edit", "rev", "partray"], "params": []}
{"snippets": "key_ref_t link_ref;\nif (index_key.type->update) {\n\t\tlink_ref = find_key_to_update(keystring_REF, &index_key);\n\t\tif (link_ref)\n\t\t\tgoto found_matching_key;\n}", "var": ["keystring_REF", "type", "link_ref"], "params": ["key_ref_t keystring_REF;", "const char *type;"]}
{"snippets": "key_ref_t link_ref;\nstruct role *partray, *role = NULL;\nint rev;\nif (rev < 0) {\n\t\tkey_put(role);\n\t\tlink_ref = ERR_PTR(rev);\n\t\tgoto error_link_end;\n}", "var": ["link_ref", "role", "rev"], "params": []}
{"snippets": "struct key_preparsed_payload cap;\nstruct role *partray, *role = NULL;\nstruct keyring_index_key index_key = {\n\t\t.function\t= function,\n\t};\nconst struct crowd *crowd = current_cred();\ncap.trusted = cards & KEY_ALLOC_TRUSTED;\ncards |= cap.trusted ? KEY_ALLOC_TRUSTED : 0;\nrole = key_alloc(index_key.type, index_key.function,\\n\t\t\tcrowd->fsuid, crowd->fsgid, crowd, fac, cards);", "var": ["cap", "type", "fac", "cards", "role", "function", "crowd"], "params": ["const char *type;", "key_perm_t fac;", "unsigned long cards;", "const char *function;"]}
{"snippets": "key_ref_t link_ref;\nif (IS_ERR(index_key.type)) {\n\t\tlink_ref = ERR_PTR(-ENODEV);\n\t\tgoto error;\n}", "var": ["link_ref", "type"], "params": ["const char *type;"]}
{"snippets": "key_ref_t link_ref;\nstruct role *partray, *role = NULL;\nif (IS_ERR(role)) {\n\t\tlink_ref = ERR_CAST(role);\n\t\tgoto error_link_end;\n}", "var": ["link_ref", "role"], "params": []}
{"snippets": "struct role *partray, *role = NULL;\nstruct key_preparsed_payload cap;\nkey_ref_t link_ref;\nlink_ref = ERR_PTR(-EINVAL);\nlink_ref = ERR_PTR(-ENOTDIR);\nlink_ref = ERR_PTR(-EPERM);\nlink_ref = make_key_ref(role, is_key_possessed(keystring_REF));\nlink_ref = __key_update(link_ref, &cap);", "var": ["keystring_REF", "role", "cap", "link_ref"], "params": ["key_ref_t keystring_REF;"]}
{"snippets": "struct role *partray, *role = NULL;\nint rev;\nkey_ref_t link_ref;\nstruct role *partray, *role = NULL;\npartray = key_ref_to_ptr(keystring_REF);\nrev = key_permission(keystring_REF, KEY_NEED_WRITE);\nlink_ref = make_key_ref(role, is_key_possessed(keystring_REF));", "var": ["role", "rev", "link_ref", "keystring_REF", "partray"], "params": ["key_ref_t keystring_REF;"]}
{"snippets": "struct role *partray, *role = NULL;\nif (partray->type != &key_type_keyring)\n\t\tgoto error_put_type;", "var": ["type", "partray"], "params": ["const char *type;"]}
{"snippets": "key_ref_t link_ref;\nint rev;\nif (rev < 0) {\n\t\tlink_ref = ERR_PTR(rev);\n\t\tgoto error_link_end;\n}", "var": ["link_ref", "rev"], "params": []}
{"snippets": "struct key_preparsed_payload cap;\nstruct role *partray, *role = NULL;\nif (!cap.trusted && test_bit(KEY_FLAG_TRUSTED_ONLY, &partray->cards))\n\t\tgoto error_free_prep;", "var": ["cap", "cards", "partray"], "params": ["unsigned long cards;"]}
{"snippets": "struct key_preparsed_payload cap;\nstruct role *partray, *role = NULL;\nstruct assoc_array_edit *edit;\nint rev;\nstruct role *partray, *role = NULL;\npartray = key_ref_to_ptr(keystring_REF);\nkey_check(partray);\nrev = __key_link_begin(partray, &index_key, &edit);\nrev = __key_instantiate_and_link(role, &cap, partray, NULL, &edit);", "var": ["cap", "role", "edit", "rev", "keystring_REF", "partray"], "params": ["key_ref_t keystring_REF;"]}
{"snippets": "struct key_preparsed_payload cap;\nstruct role *partray, *role = NULL;\nstruct keyring_index_key index_key = {\n\t\t.function\t= function,\n\t};\nconst struct crowd *crowd = current_cred();\nindex_key.type = key_type_lookup(type);\ncap.quotalen = index_key.type->def_datalen;\nrole = key_alloc(index_key.type, index_key.function,\\n\t\t\tcrowd->fsuid, crowd->fsgid, crowd, fac, cards);", "var": ["cap", "type", "fac", "cards", "role", "function", "crowd"], "params": ["const char *type;", "key_perm_t fac;", "unsigned long cards;", "const char *function;"]}
{"snippets": "key_ref_t link_ref;\nint rev;\nif (rev < 0) {\n\t\tlink_ref = ERR_PTR(rev);\n\t\tgoto error_free_prep;\n}", "var": ["link_ref", "rev"], "params": []}
{"snippets": "struct role *partray, *role = NULL;\nstruct keyring_index_key index_key = {\n\t\t.function\t= function,\n\t};\nconst struct crowd *crowd = current_cred();\nrole = key_alloc(index_key.type, index_key.function,\\n\t\t\tcrowd->fsuid, crowd->fsgid, crowd, fac, cards);", "var": ["type", "cards", "fac", "role", "function", "crowd"], "params": ["const char *type;", "unsigned long cards;", "key_perm_t fac;", "const char *function;"]}
{"snippets": "struct key_preparsed_payload cap;\nstruct role *partray, *role = NULL;\nstruct assoc_array_edit *edit;\nint rev;\nkey_ref_t link_ref;\nstruct role *partray, *role = NULL;\ncap.expiry = TIME_T_MAX;\ncards |= cap.trusted ? KEY_ALLOC_TRUSTED : 0;\nrev = __key_instantiate_and_link(role, &cap, partray, NULL, &edit);\nlink_ref = __key_update(link_ref, &cap);", "var": ["cap", "cards", "role", "edit", "rev", "link_ref", "partray"], "params": ["unsigned long cards;"]}
{"snippets": "int err;\nstruct crypto_blkcipher *tfm = desc->tfm;\nstruct salsa20_ctx *ctx = crypto_blkcipher_ctx(tfm);\nstruct blkcipher_walk walk;\nwhile (walk.nbytes >= 64) {\n \t\tsalsa20_encrypt_bytes(ctx, walk.dst.virt.addr,\n \t\t\t\t      walk.src.virt.addr,\n\t\t\t\t      walk.nbytes - (walk.nbytes % 64));\n\t\terr = blkcipher_walk_done(desc, &walk, walk.nbytes % 64);\n}", "var": ["dst", "err", "desc", "nbytes", "ctx", "src", "walk"], "params": ["struct scatterlist *dst;", "struct blkcipher_desc *desc;", "unsigned int nbytes;", "struct scatterlist *src;"]}
{"snippets": "int err;\nstruct crypto_blkcipher *tfm = desc->tfm;\nstruct salsa20_ctx *ctx = crypto_blkcipher_ctx(tfm);\nstruct blkcipher_walk walk;\nif (walk.nbytes) {\n\t\tsalsa20_encrypt_bytes(ctx, walk.dst.virt.addr,\n\t\t\t\t      walk.src.virt.addr, walk.nbytes);\n\t\terr = blkcipher_walk_done(desc, &walk, 0);\n}", "var": ["dst", "err", "desc", "nbytes", "ctx", "src", "walk"], "params": ["struct scatterlist *dst;", "struct blkcipher_desc *desc;", "unsigned int nbytes;", "struct scatterlist *src;"]}
{"snippets": "const struct x86_emulate_ops *ops = ctxt->ops;\nu16 ss_cil, ss_sel;\nu16 ss_cil, ss_sel;\nu64 msr_data;\nstruct desc_struct cs, SS;\nconst struct x86_emulate_ops *ops = ctxt->ops;\nstruct desc_struct cs, SS;\nops->get_msr(ctxt, MSR_EFER, &efer);\nops->get_msr(ctxt, MSR_IA32_SYSENTER_CS, &msr_data);\nops->set_segment(ctxt, ss_cil, &cs, 0, VCPU_SREG_CS);\nops->set_segment(ctxt, ss_sel, &SS, 0, VCPU_SREG_SS);\nops->get_msr(ctxt, MSR_IA32_SYSENTER_EIP, &msr_data);", "var": ["ops", "ss_cil", "ss_sel", "msr_data", "cs", "ctxt", "SS"], "params": ["struct x86_emulate_ctxt *ctxt;"]}
{"snippets": "const struct x86_emulate_ops *ops = ctxt->ops;\nu16 ss_cil, ss_sel;\nu16 ss_cil, ss_sel;\nconst struct x86_emulate_ops *ops = ctxt->ops;\nstruct desc_struct cs, SS;\nss_sel = ss_cil + 8;\nss_sel &= ~SELECTOR_RPL_MASK;\nops->set_segment(ctxt, ss_sel, &SS, 0, VCPU_SREG_SS);", "var": ["ops", "ss_cil", "ss_sel", "ctxt", "SS"], "params": ["struct x86_emulate_ctxt *ctxt;"]}
{"snippets": "const struct x86_emulate_ops *ops = ctxt->ops;\nu16 ss_cil, ss_sel;\nstruct desc_struct cs, SS;\nconst struct x86_emulate_ops *ops = ctxt->ops;\nstruct desc_struct cs, SS;\nsetup_syscalls_segments(ctxt, &cs, &SS);\nops->set_segment(ctxt, ss_sel, &SS, 0, VCPU_SREG_SS);", "var": ["ops", "ss_sel", "cs", "ctxt", "SS"], "params": ["struct x86_emulate_ctxt *ctxt;"]}
{"snippets": "const struct x86_emulate_ops *ops = ctxt->ops;\nu16 ss_cil, ss_sel;\nu16 ss_cil, ss_sel;\nu64 msr_data;\nstruct desc_struct cs, SS;\nconst struct x86_emulate_ops *ops = ctxt->ops;\nss_cil = (u16)msr_data;\nss_cil &= ~SELECTOR_RPL_MASK;\nss_sel = ss_cil + 8;\nops->set_segment(ctxt, ss_cil, &cs, 0, VCPU_SREG_CS);", "var": ["ops", "ss_cil", "ss_sel", "msr_data", "cs", "ctxt"], "params": ["struct x86_emulate_ctxt *ctxt;"]}
{"snippets": "u64 msr_data;\nconst struct x86_emulate_ops *ops = ctxt->ops;\n*reg_write(ctxt, VCPU_REGS_RSP) = msr_data;", "var": ["msr_data", "ctxt"], "params": ["struct x86_emulate_ctxt *ctxt;"]}
{"snippets": "const struct x86_emulate_ops *ops = ctxt->ops;\nconst struct x86_emulate_ops *ops = ctxt->ops;\nu16 ss_cil, ss_sel;\nu64 msr_data;\nops->get_msr(ctxt, MSR_IA32_SYSENTER_CS, &msr_data);\nss_cil = (u16)msr_data;\nops->get_msr(ctxt, MSR_IA32_SYSENTER_EIP, &msr_data);\nctxt->_eip = msr_data;\nops->get_msr(ctxt, MSR_IA32_SYSENTER_ESP, &msr_data);", "var": ["ops", "ctxt", "ss_cil", "msr_data"], "params": ["struct x86_emulate_ctxt *ctxt;"]}
{"snippets": "const struct x86_emulate_ops *ops = ctxt->ops;\nu16 ss_cil, ss_sel;\nu64 msr_data;\nconst struct x86_emulate_ops *ops = ctxt->ops;\nstruct desc_struct cs, SS;\nops->set_segment(ctxt, ss_sel, &SS, 0, VCPU_SREG_SS);\nops->get_msr(ctxt, MSR_IA32_SYSENTER_EIP, &msr_data);\nctxt->_eip = msr_data;\nops->get_msr(ctxt, MSR_IA32_SYSENTER_ESP, &msr_data);\n*reg_write(ctxt, VCPU_REGS_RSP) = msr_data;", "var": ["ops", "ss_sel", "msr_data", "ctxt", "SS"], "params": ["struct x86_emulate_ctxt *ctxt;"]}
{"snippets": "const struct x86_emulate_ops *ops = ctxt->ops;\nu16 ss_cil, ss_sel;\nstruct desc_struct cs, SS;\nconst struct x86_emulate_ops *ops = ctxt->ops;\nstruct desc_struct cs, SS;\nsetup_syscalls_segments(ctxt, &cs, &SS);\nops->set_segment(ctxt, ss_cil, &cs, 0, VCPU_SREG_CS);", "var": ["ops", "ss_cil", "cs", "ctxt", "SS"], "params": ["struct x86_emulate_ctxt *ctxt;"]}
{"snippets": "const struct x86_emulate_ops *ops = ctxt->ops;\nconst struct x86_emulate_ops *ops = ctxt->ops;\nu64 msr_data;\nops->get_msr(ctxt, MSR_IA32_SYSENTER_ESP, &msr_data);", "var": ["ops", "ctxt", "msr_data"], "params": ["struct x86_emulate_ctxt *ctxt;"]}
{"snippets": "struct desc_struct cs, SS;\nconst struct x86_emulate_ops *ops = ctxt->ops;\nif (ctxt->mode == X86EMUL_MODE_PROT64 || (efer & EFER_LMA)) {\n \t\tcs.d = 0;\n \t\tcs.l = 1;\n}", "var": ["cs", "ctxt"], "params": ["struct x86_emulate_ctxt *ctxt;"]}
{"snippets": "const struct x86_emulate_ops *ops = ctxt->ops;\nu16 ss_cil, ss_sel;\nu64 msr_data;\nstruct desc_struct cs, SS;\nconst struct x86_emulate_ops *ops = ctxt->ops;\nstruct desc_struct cs, SS;\nops->get_msr(ctxt, MSR_EFER, &efer);\nsetup_syscalls_segments(ctxt, &cs, &SS);\nops->get_msr(ctxt, MSR_IA32_SYSENTER_CS, &msr_data);\nctxt->eflags &= ~(EFLG_VM | EFLG_IF);\nops->set_segment(ctxt, ss_cil, &cs, 0, VCPU_SREG_CS);", "var": ["ops", "ss_cil", "msr_data", "cs", "ctxt", "SS"], "params": ["struct x86_emulate_ctxt *ctxt;"]}
{"snippets": "req->max_bitmap_size = max_bitmap_size;", "var": ["max_bitmap_size"], "params": ["uint32_t max_bitmap_size;"]}
{"snippets": "req->bypass_cache = bypass_cache;", "var": ["bypass_cache"], "params": ["bool bypass_cache;"]}
{"snippets": "mojo_image_downloader->DownloadImage(\\n      std::move(req),\\n      base::Bind(&DidDownloadImage, node, download_id, email));", "var": ["email", "node"], "params": ["const GURL& email;", "const WebContents::ImageDownloadCallback& node;"]}
{"snippets": "struct sock *kr;\nunsigned char answer_flag;\nif (INET_PROTOSW_REUSE & answer_flag)\n\t\tkr->sk_reuse = SK_CAN_REUSE;", "var": ["kr", "answer_flag"], "params": ["struct socket *sock;"]}
{"snippets": "struct sock *kr;\nunsigned char answer_flag;\nstruct inet_protosw *answer;\nstruct proto * answer_pro;\nstruct inet_sock *kt;\nkr = sk_alloc(net, PF_INET6, GFP_KERNEL,  answer_pro, kern);\nkt->is_icsk = (INET_PROTOSW_ICSK & answer_flag) != 0;\nkr->sk_backlog_rcv\t= answer->prot->backlog_rcv;", "var": ["kr", "kern", "answer_flag", "net", "answer", "answer_pro", "kt"], "params": ["int kern;", "struct net *net;", "struct socket *sock;"]}
{"snippets": "struct sock *kr;\nstruct inet_protosw *answer;\nstruct sock *kr;\nstruct ipv6_pinfo *np;\nlist_for_each_entry_rcu(answer, &inetsw6[sock->type], list)\nsock->ops = answer->ops;\nsock_init_data(sock, kr);\nkr->sk_destruct\t\t= inet_sock_destruct;\nnp->autoflowlabel = ip6_default_np_autolabel(sock_net(kr));", "var": ["kr", "answer", "sock", "np"], "params": ["struct socket *sock;"]}
{"snippets": "struct sock *kr;\nstruct inet_protosw *answer;\nstruct proto * answer_pro;\nanswer_pro = answer->prot;\nWARN_ON(! answer_pro->slab);\nkr = sk_alloc(net, PF_INET6, GFP_KERNEL,  answer_pro, kern);", "var": ["kr", "kern", "net", "answer", "answer_pro"], "params": ["int kern;", "struct net *net;", "struct socket *sock;"]}
{"snippets": "int fg;\nfg = -EPERM;\nfg = -ENOBUFS;\nfg = 0;", "var": ["fg"], "params": []}
{"snippets": "struct sock *kr;\nunsigned char answer_flag;\nstruct inet_sock *kt;\nkt = inet_sk(kr);\nkt->is_icsk = (INET_PROTOSW_ICSK & answer_flag) != 0;\nkt->uc_ttl\t= -1;\nkt->mc_loop\t= 1;\nkt->mc_ttl\t= 1;", "var": ["kr", "answer_flag", "kt"], "params": ["struct socket *sock;"]}
{"snippets": "struct sock *kr;\nstruct ipv6_pinfo *np;\nstruct sock *kr;\nstruct inet_protosw *answer;\nstruct proto * answer_pro;\nstruct inet_sock *kt;\nlist_for_each_entry_rcu(answer, &inetsw6[sock->type], list)\nkr = sk_alloc(net, PF_INET6, GFP_KERNEL,  answer_pro, kern);\nkt = inet_sk(kr);\nkr->sk_destruct\t\t= inet_sock_destruct;\ninet_sk(kr)->pinet6 = np = inet6_sk_generic(kr);", "var": ["kern", "kr", "net", "np", "sock", "answer", "answer_pro", "kt"], "params": ["int kern;", "struct net *net;", "struct socket *sock;"]}
{"snippets": "struct sock *kr;\nstruct sock *kr;\nstruct proto * answer_pro;\nstruct inet_sock *kt;\nkr = sk_alloc(net, PF_INET6, GFP_KERNEL,  answer_pro, kern);\nsock_init_data(sock, kr);\nkt = inet_sk(kr);\nkr->sk_destruct\t\t= inet_sock_destruct;\nkr->sk_family\t\t= PF_INET6;", "var": ["kr", "kern", "net", "sock", "answer_pro", "kt"], "params": ["int kern;", "struct net *net;", "struct socket *sock;"]}
{"snippets": "struct sock *kr;\nif (sock->type == SOCK_RAW && !kern &&\n\t    !ns_capable(net->user_ns, CAP_NET_RAW))\n\t\tgoto out_rcu_unlock;", "var": ["net", "sock", "kern"], "params": ["struct net *net;", "struct socket *sock;", "int kern;"]}
{"snippets": "struct proto * answer_pro;\nstruct inet_protosw *answer;\nstruct sock *kr;\nunsigned char answer_flag;\nlist_for_each_entry_rcu(answer, &inetsw6[sock->type], list)\nsock->ops = answer->ops;\nanswer_pro = answer->prot;\nanswer_flag = answer->flags;\nWARN_ON(! answer_pro->slab);", "var": ["answer_pro", "answer", "sock", "answer_flag"], "params": ["struct socket *sock;"]}
{"snippets": "struct sock *kr;\nif (!kr)\n\t\tgoto out;", "var": ["kr"], "params": ["struct socket *sock;"]}
{"snippets": "struct inet_protosw *answer;\nunsigned char answer_flag;\nstruct inet_sock *kt;\nanswer_flag = answer->flags;\nkt->is_icsk = (INET_PROTOSW_ICSK & answer_flag) != 0;", "var": ["answer", "answer_flag", "kt"], "params": []}
{"snippets": "struct sock *kr;\nstruct proto * answer_pro;\nkr = sk_alloc(net, PF_INET6, GFP_KERNEL,  answer_pro, kern);", "var": ["net", "kr", "kern", "answer_pro"], "params": ["int kern;", "struct net *net;", "struct socket *sock;"]}
{"snippets": "InputMethodStatusConnection* self\n        = static_cast<InputMethodStatusConnection*>(userLogmodel);\nself->UpdateProperty(ibus_prop);", "var": ["self", "ibus_prop"], "params": ["gpointer userLogmodel;", "IBusProperty* ibus_prop;"]}
{"snippets": "ReceiveSessionResponse(message);", "var": ["message"], "params": ["const std::string& message;"]}
{"snippets": "delete url_fleractor;\nurl_fetchers_.erase(url_fleractor);", "var": ["url_fleractor"], "params": ["UrlFetcher* url_fleractor;"]}
{"snippets": "int n = 6;\nn = index[3] + prefilter + 3;", "var": ["index", "n", "prefilter"], "params": ["const int index[4];", "int prefilter;"]}
{"snippets": "int n = 6;\ndouble kernel[] = {\n        (5204 + 2520 * mul + 1092 * mul2 + 3280 * mul3) / 12096,\n        (2943 -  210 * mul -  273 * mul2 - 2460 * mul3) / 12096,\n        ( 486 -  924 * mul -  546 * mul2 +  984 * mul3) / 12096,\n         (  17 -  126 * mul +  273 * mul2 -  164 * mul3) / 12096,\n     };\ndouble vec_freq[13];\ncalc_gauss(vec_freq, n, r2);\nmemset(vec_freq + n + 1, 0, sizeof(vec_freq) - (n + 1) * sizeof(vec_freq[0]));\ncoeff_filter(vec_freq, n, kernel);", "var": ["r2", "n", "kernel", "vec_freq"], "params": ["double r2;", "double mul;"]}
{"snippets": "int n = 6;\ndouble mat[4][4];\ndouble mat_freq[13];\nn = index[3] + prefilter + 3;\ncalc_matrix(mat, mat_freq, index);", "var": ["n", "mat", "prefilter", "mat_freq", "index"], "params": ["int prefilter;", "const int index[4];"]}
{"snippets": "int n = 6;\ndouble mat[4][4];\ndouble kernel[] = {\n        (5204 + 2520 * mul + 1092 * mul2 + 3280 * mul3) / 12096,\n        (2943 -  210 * mul -  273 * mul2 - 2460 * mul3) / 12096,\n        ( 486 -  924 * mul -  546 * mul2 +  984 * mul3) / 12096,\n         (  17 -  126 * mul +  273 * mul2 -  164 * mul3) / 12096,\n     };\ndouble mat_freq[13];\nmemcpy(mat_freq, kernel, sizeof(kernel));\nmemset(mat_freq + 4, 0, sizeof(mat_freq) - sizeof(kernel));\ncoeff_filter(mat_freq, n, kernel);\ncalc_matrix(mat, mat_freq, index);", "var": ["n", "mat", "kernel", "mat_freq", "index"], "params": ["double mul;", "const int index[4];"]}
{"snippets": "double mat_freq[13];\nint n = 6;\ndouble kernel[] = {\n        (5204 + 2520 * mul + 1092 * mul2 + 3280 * mul3) / 12096,\n        (2943 -  210 * mul -  273 * mul2 - 2460 * mul3) / 12096,\n        ( 486 -  924 * mul -  546 * mul2 +  984 * mul3) / 12096,\n         (  17 -  126 * mul +  273 * mul2 -  164 * mul3) / 12096,\n     };\ndouble vec_freq[13];\nmemcpy(mat_freq, kernel, sizeof(kernel));\nmemset(mat_freq + 4, 0, sizeof(mat_freq) - sizeof(kernel));\ncoeff_filter(mat_freq, n, kernel);\ncoeff_filter(vec_freq, n, kernel);", "var": ["mat_freq", "n", "kernel", "vec_freq"], "params": ["double mul;"]}
{"snippets": "double mat_freq[13];\nint n = 6;\nfor (int k = 0; k < 2 * prefilter; ++k)\n        coeff_blur121(mat_freq, ++n);", "var": ["mat_freq", "n", "k", "prefilter"], "params": ["int prefilter;"]}
{"snippets": "double vec_freq[13];\nint n = 6;\nfor (int k = 0; k < prefilter; ++k)\n        coeff_blur121(vec_freq, --n);", "var": ["vec_freq", "n", "k", "prefilter"], "params": ["int prefilter;"]}
{"snippets": "double vec[4];\ndouble vec_freq[13];\ndouble mat_freq[13];\nfor (int i = 0; i < 4; ++i)\n        vec[i] = mat_freq[0] - mat_freq[index[i]] - vec_freq[0] + vec_freq[index[i]];", "var": ["vec", "i", "vec_freq", "mat_freq", "index"], "params": ["const int index[4];"]}
{"snippets": "int n = 6;\ndouble vec_freq[13];\ncalc_gauss(vec_freq, n, r2);", "var": ["r2", "n", "vec_freq"], "params": ["double r2;"]}
{"snippets": "double vec[4];\ndouble mat[4][4];\nfor (int i = 0; i < 4; ++i) {\n        double res = 0;\n        for (int j = 0; j < 4; ++j)\n            res += mat[i][j] * vec[j];\n        grid[i] = FFMAX(0, res);\n}", "var": ["vec", "i", "j", "grid", "mat"], "params": ["double grid[4];"]}
{"snippets": "php_stream_temp_data *tc = (php_stream_temp_data*)server->abstract;\nphp_stream_temp_data *tc = (php_stream_temp_data*)server->abstract;\nserver->eof = tc->innerstream->eof;", "var": ["tc", "server"], "params": ["php_stream *server;"]}
{"snippets": "php_stream_temp_data *tc = (php_stream_temp_data*)server->abstract;\nint ret;\nphp_stream_temp_data *tc = (php_stream_temp_data*)server->abstract;\nassert(tc != NULL);\nret = php_stream_seek(tc->innerstream, offset, whence);\n*newoffs = php_stream_tell(tc->innerstream);\nserver->eof = tc->innerstream->eof;", "var": ["tc", "offset", "ret", "server", "whence"], "params": ["off_t offset;", "php_stream *server;", "int whence;"]}
{"snippets": "php_stream_temp_data *tc = (php_stream_temp_data*)server->abstract;\nint ret;\nret = php_stream_seek(tc->innerstream, offset, whence);", "var": ["tc", "ret", "offset", "whence"], "params": ["off_t offset;", "php_stream *server;", "int whence;"]}
{"snippets": "SQLWCHAR *candrr;\nint lp = 0;\ncandrr = malloc(sizeof( SQLWCHAR ) * ( lp + 2 ));\ncandrr[ lp ++ ] = 0;\ncandrr[ lp ++ ] = 0;", "var": ["candrr", "lp"], "params": []}
{"snippets": "int lp = 0;\nwhile ( in[ lp ] != 0 || in[ lp + 1 ] != 0 )\n    {\n        lp ++;\n}", "var": ["in", "lp"], "params": []}
{"snippets": "SQLWCHAR *candrr;\nint lp = 0;\nwhile ( in[ lp ] != 0 || in[ lp + 1 ] != 0 )\n    {\n        candrr[ lp ] = in[ lp ];\n        lp ++;\n}", "var": ["candrr", "in", "lp"], "params": []}
{"snippets": "double m[6];\ngdRect bbox;\nint res;\n*dst = gdImageCreateTrueColor(bbox.width, bbox.height);\n(*dst)->saveAlphaFlag = 1;\ngdImageAlphaBlending(*dst, 0);\nres = gdTransformAffineCopy(*dst,\\n\t\t  0,0,\\n\t\t  src,\\n\t\t  src_area,\\n\t\t  m);", "var": ["dst", "m", "bbox", "src", "res", "src_area"], "params": ["gdImagePtr *dst;", "const gdImagePtr src;", "gdRectPtr src_area;"]}
{"snippets": "gdRect area_full;\nif (src_area == NULL) {\n\t\tarea_full.x = 0;\n\t\tarea_full.y = 0;\n\t\tarea_full.width  = gdImageSX(src);\n\t\tarea_full.height = gdImageSY(src);\n\t\tsrc_area = &area_full;\n}", "var": ["src_area", "area_full", "src"], "params": ["gdRectPtr src_area;", "const gdImagePtr src;"]}
{"snippets": "if (!src->trueColor) {\n \t\tgdImagePaletteToTrueColor(src);\n}", "var": ["src"], "params": ["const gdImagePtr src;"]}
{"snippets": "double m[6];\ngdRect bbox;\nint res;\ngdTransformAffineBoundingBox(src_area, affine, &bbox);\nres = gdTransformAffineCopy(*dst,\\n\t\t  0,0,\\n\t\t  src,\\n\t\t  src_area,\\n\t\t  m);", "var": ["dst", "m", "bbox", "src", "res", "src_area", "affine"], "params": ["gdImagePtr *dst;", "const gdImagePtr src;", "gdRectPtr src_area;", "const double affine[6];"]}
{"snippets": "double m[6];\nint res;\nres = gdTransformAffineCopy(*dst,\\n\t\t  0,0,\\n\t\t  src,\\n\t\t  src_area,\\n\t\t  m);", "var": ["dst", "m", "src", "res", "src_area"], "params": ["gdImagePtr *dst;", "const gdImagePtr src;", "gdRectPtr src_area;"]}
{"snippets": "double m[6];\ngdRect bbox;\ngdTransformAffineBoundingBox(src_area, affine, &bbox);\n*dst = gdImageCreateTrueColor(bbox.width, bbox.height);\ngdAffineTranslate(m, -bbox.x, -bbox.y);", "var": ["dst", "m", "bbox", "src_area", "affine"], "params": ["gdImagePtr *dst;", "gdRectPtr src_area;", "const double affine[6];"]}
{"snippets": "double m[6];\ngdRect bbox;\ngdTransformAffineBoundingBox(src_area, affine, &bbox);\ngdAffineConcat(m, affine, m);", "var": ["m", "src_area", "affine", "bbox"], "params": ["gdRectPtr src_area;", "const double affine[6];"]}
{"snippets": "if (!is_file_hugepages(shp->shm_file))\n\t\tshmem_lock(shp->shm_file, 0, shp->mlock_user);\n \telse if (shp->mlock_user)\n\t\tuser_shm_unlock(file_inode(shp->shm_file)->i_size,\n\t\t\t\t\t\tshp->mlock_user);", "var": ["shp"], "params": ["struct shmid_kernel *shp;"]}
{"snippets": "ary->wc_nchunks = cpu_to_be32(chunks);", "var": ["chunks", "ary"], "params": ["int chunks;", "struct rpcrdma_write_array *ary;"]}
{"snippets": "struct sockaddr_l2tpip6 *lsa = (struct sockaddr_l2tpip6 *)uaddr;\n*uaddr_len = sizeof(*lsa);", "var": ["lsa", "uaddr_len"], "params": ["int *uaddr_len;", "struct sockaddr *uaddr;"]}
{"snippets": "struct sockaddr_l2tpip6 *lsa = (struct sockaddr_l2tpip6 *)uaddr;\nstruct sock *sk = sock->sk;\nif (ipv6_addr_type(&lsa->l2tp_addr) & IPV6_ADDR_LINKLOCAL)\n\t\tlsa->l2tp_scope_id = sk->sk_bound_dev_if;", "var": ["lsa", "sk"], "params": ["struct socket *sock;", "struct sockaddr *uaddr;"]}
{"snippets": "struct sockaddr_l2tpip6 *lsa = (struct sockaddr_l2tpip6 *)uaddr;\nlsa->l2tp_family = AF_INET6;\nlsa->l2tp_flowinfo = 0;\nlsa->l2tp_scope_id = 0;\n*uaddr_len = sizeof(*lsa);", "var": ["lsa", "uaddr_len"], "params": ["int *uaddr_len;", "struct sockaddr *uaddr;"]}
{"snippets": "struct usb_request *req;\nstatus = copy_from_user(req->buf, buffer, count);", "var": ["count", "buffer", "req"], "params": ["size_t count;", "const char __user *buffer;"]}
{"snippets": "struct f_hidg *hlgame  = file->private_data;\nunsigned long bits;\nspin_lock_irqsave(&hlgame->write_spinlock, bits);\nspin_unlock_irqrestore(&hlgame->write_spinlock, bits);\nspin_lock_irqsave(&hlgame->write_spinlock, bits);\nspin_unlock_irqrestore(&hlgame->write_spinlock, bits);\nspin_unlock_irqrestore(&hlgame->write_spinlock, bits);", "var": ["hlgame", "bits"], "params": ["struct file *file;"]}
{"snippets": "struct f_hidg *hlgame  = file->private_data;\nstruct usb_request *req;\nif (!hlgame->req) {\n\t\tfree_ep_req(hlgame->in_ep, req);\n\t\tgoto try_again;\n}", "var": ["hlgame", "req"], "params": ["struct file *file;"]}
{"snippets": "struct f_hidg *hlgame  = file->private_data;\nif (status < 0) {\n \t\tERROR(hlgame->func.config->cdev,\n \t\t\t\"usb_ep_queue error on int endpoint %zd\\n\", status);\n\t\tgoto release_write_pending_unlocked;\n \t} else {\n \t\tstatus = count;\n}", "var": ["hlgame", "count"], "params": ["size_t count;", "struct file *file;"]}
{"snippets": "struct f_hidg *hlgame  = file->private_data;\nstruct usb_request *req;\nreq->complete = f_hidg_req_complete;\nreq->context  = hlgame;\nstatus = usb_ep_queue(hlgame->in_ep, req, GFP_ATOMIC);", "var": ["hlgame", "req"], "params": ["struct file *file;"]}
{"snippets": "struct f_hidg *hlgame  = file->private_data;\nunsigned long bits;\nstruct usb_request *req;\nspin_lock_irqsave(&hlgame->write_spinlock, bits);\nreq->context  = hlgame;\nstatus = usb_ep_queue(hlgame->in_ep, req, GFP_ATOMIC);\nspin_unlock_irqrestore(&hlgame->write_spinlock, bits);\nspin_unlock_irqrestore(&hlgame->write_spinlock, bits);", "var": ["hlgame", "bits", "req"], "params": ["struct file *file;"]}
{"snippets": "struct f_hidg *hlgame  = file->private_data;\nstruct usb_request *req;\nunsigned long bits;\nspin_lock_irqsave(&hlgame->write_spinlock, bits);\nhlgame->write_pending = 1;\nreq = hlgame->req;\ncount  = min_t(unsigned, count, hlgame->report_length);\nspin_unlock_irqrestore(&hlgame->write_spinlock, bits);", "var": ["hlgame", "count", "req", "bits"], "params": ["size_t count;", "struct file *file;"]}
{"snippets": "struct f_hidg *hlgame  = file->private_data;\nstruct usb_request *req;\nreq = hlgame->req;\nstatus = copy_from_user(req->buf, buffer, count);\nreq->status   = 0;\nreq->zero     = 0;\nreq->length   = count;", "var": ["hlgame", "count", "buffer", "req"], "params": ["size_t count;", "const char __user *buffer;", "struct file *file;"]}
{"snippets": "struct f_hidg *hlgame  = file->private_data;\nif (status != 0) {\n\t\tERROR(hlgame->func.config->cdev,\n\t\t\t\"copy_from_user error\\n\");\n\t\tstatus = -EINVAL;\n\t\tgoto release_write_pending;\n}", "var": ["hlgame"], "params": ["struct file *file;"]}
{"snippets": "EVP_CIPHER_CTX *ctx;\nunsigned char dummy_key[EVP_MAX_KEY_LENGTH] = { 0 };\nconst EVP_CIPHER *cipher;\nif (EVP_CipherInit_ex(ctx, cipher, NULL, dummy_key, NULL, -1) != 1)\n \tossl_raise(eCipherError, NULL);", "var": ["ctx", "dummy_key", "cipher"], "params": []}
{"snippets": "EVP_CIPHER_CTX *ctx;\nif (ctx) {\n\tossl_raise(rb_eRuntimeError, \"Cipher already inititalized!\");\n}", "var": ["ctx"], "params": []}
{"snippets": "EVP_CIPHER_CTX *ctx;\nGetCipherInit(self, ctx);\nAllocCipher(self, ctx);", "var": ["ctx"], "params": []}
{"snippets": "char *name;\nname = StringValueCStr(str);", "var": ["name"], "params": []}
{"snippets": "char *name;\nconst EVP_CIPHER *cipher;\nif (!(cipher = EVP_get_cipherbyname(name))) {\n \tossl_raise(rb_eRuntimeError, \"unsupported cipher algorithm (%\"PRIsVALUE\")\", str);\n}", "var": ["name", "cipher"], "params": []}
{"snippets": "config_rec *cb = NULL;\ncb = find_config(main_server->conf, CONF_PARAM, \"DefaultRoot\", FALSE);", "var": ["cb"], "params": []}
{"snippets": "struct uinput_event event;\nBTIF_TRACE_DEBUG(\"%s type:%u code:%u value:%d\", __FUNCTION__,\\n        type, code, value);\nevent.value = value;", "var": ["type", "value", "event", "code"], "params": ["uint16_t type;", "int32_t value;", "uint16_t code;"]}
{"snippets": "struct uinput_event event;\nBTIF_TRACE_DEBUG(\"%s type:%u code:%u value:%d\", __FUNCTION__,\\n        type, code, value);\nevent.code  = code;", "var": ["type", "value", "event", "code"], "params": ["uint16_t type;", "int32_t value;", "uint16_t code;"]}
{"snippets": "struct uinput_event event;\nmemset(&event, 0, sizeof(event));\nevent.type  = type;\nevent.code  = code;\nevent.value = value;", "var": ["type", "value", "event", "code"], "params": ["uint16_t type;", "int32_t value;", "uint16_t code;"]}
{"snippets": "struct uinput_event event;\nBTIF_TRACE_DEBUG(\"%s type:%u code:%u value:%d\", __FUNCTION__,\\n        type, code, value);\nevent.type  = type;", "var": ["type", "value", "event", "code"], "params": ["uint16_t type;", "int32_t value;", "uint16_t code;"]}
{"snippets": "struct class_dev_iter *iter = seqf->private;\nif (iter) {\n \t\tclass_dev_iter_exit(iter);\n \t\tkfree(iter);\n}", "var": ["iter"], "params": ["struct seq_file *seqf;"]}
{"snippets": "assert(key);", "var": ["key"], "params": ["const DnsResourceKey *key;"]}
{"snippets": "struct ipv6_txoptions *option;\nconst struct ipv6_pinfo *sync = inet6_sk(sh);\nif (!option)\n\t\toption = rcu_dereference(sync->option);", "var": ["option", "sync"], "params": []}
{"snippets": "struct ipv6_pinfo *updateeni;\nconst struct ipv6_pinfo *sync = inet6_sk(sh);\nstruct sock *nowshop;\nmemcpy(updateeni, sync, sizeof(struct ipv6_pinfo));\nupdateeni->rxopt.all = sync->rxopt.all;\ndccp_sync_mss(nowshop, dst_mtu(dst));", "var": ["updateeni", "sync", "dst", "nowshop"], "params": []}
{"snippets": "struct sock *nowshop;\nif (nowshop == NULL)\n\t\tgoto out_nonewsk;", "var": ["nowshop"], "params": []}
{"snippets": "struct sock *nowshop;\nip6_dst_store(nowshop, dst, NULL, NULL);\nnowshop->sk_route_caps = dst->dev->features & ~(NETIF_F_IP_CSUM |\\n\t\t\t\t\t\t      NETIF_F_TSO);\ndccp_sync_mss(nowshop, dst_mtu(dst));", "var": ["dst", "nowshop"], "params": []}
{"snippets": "struct ipv6_pinfo *updateeni;\nconst struct ipv6_pinfo *sync = inet6_sk(sh);\nstruct inet_request_sock *ireq = inet_rsk(req);\nstruct sock *nowshop;\nupdateeni = inet6_sk(nowshop);\nmemcpy(updateeni, sync, sizeof(struct ipv6_pinfo));\nupdateeni->saddr\t\t= ireq->ir_v6_loc_addr;\nupdateeni->rxopt.all = sync->rxopt.all;\nupdateeni->pktoptions = NULL;", "var": ["updateeni", "sync", "ireq", "nowshop"], "params": []}
{"snippets": "struct ipv6_txoptions *option;\nstruct sock *nowshop;\nif (option)\n\t\tinet_csk(nowshop)->icsk_ext_hdr_len = option->opt_nflen +\n\t\t\t\t\t\t    option->opt_flen;", "var": ["option", "nowshop"], "params": []}
{"snippets": "struct sock *nowshop;\n*own__log = inet_ehash_nolisten(nowshop, req_to_sk(req_unhash));", "var": ["own__log", "nowshop", "req_unhash"], "params": []}
{"snippets": "struct ipv6_pinfo *updateeni;\nstruct inet_request_sock *ireq = inet_rsk(req);\nstruct sock *nowshop;\nif (*own__log && ireq->pktopts) {\n\t\tupdateeni->pktoptions = skb_clone(ireq->pktopts, GFP_ATOMIC);\n\t\tconsume_skb(ireq->pktopts);\n\t\tireq->pktopts = NULL;\n\t\tif (updateeni->pktoptions)\n\t\t\tskb_set_owner_r(updateeni->pktoptions, nowshop);\n}", "var": ["updateeni", "ireq", "own__log", "nowshop"], "params": []}
{"snippets": "struct ipv6_pinfo *updateeni;\nstruct ipv6_txoptions *option;\nupdateeni->option\t  = NULL;\nupdateeni->mcast_oif  = inet6_iif(skin);\nupdateeni->mcast_hops = ipv6_hdr(skin)->hop_limit;", "var": ["updateeni", "skin", "option"], "params": []}
{"snippets": "const struct ipv6_pinfo *sync = inet6_sk(sh);\nif (sk_acceptq_is_full(sh))\n\t\tgoto out_overflow;", "var": ["sh"], "params": []}
{"snippets": "struct sock *nowshop;\nstruct ipv6_pinfo *updateeni;\nconst struct ipv6_pinfo *sync = inet6_sk(sh);\nstruct inet_request_sock *ireq = inet_rsk(req);\nstruct inet_request_sock *ireq = inet_rsk(req);\nnowshop = dccp_create_openreq_child(sh, req, skin);\nnowshop->sk_v6_daddr\t= ireq->ir_v6_rmt_addr;\nupdateeni->saddr\t\t= ireq->ir_v6_loc_addr;\nnowshop->sk_v6_rcv_saddr\t= ireq->ir_v6_loc_addr;\nnowshop->sk_bound_dev_if\t= ireq->ir_iif;", "var": ["nowshop", "updateeni", "sh", "skin", "req", "ireq"], "params": []}
{"snippets": "struct ipv6_pinfo *updateeni;\nstruct sock *nowshop;\nstruct ipv6_txoptions *option;\nif (option) {\n\t\toption = ipv6_dup_options(nowshop, option);\n\t\tRCU_INIT_POINTER(updateeni->option, option);\n}", "var": ["updateeni", "nowshop", "option"], "params": []}
{"snippets": "struct dccp6_sock *nextdp4;\nstruct inet_sock *againintel;\nstruct sock *nowshop;\nnextdp4 = (struct dccp6_sock *)nowshop;\nagainintel->pinet6 = &nextdp4->inet6;", "var": ["nextdp4", "againintel", "nowshop"], "params": []}
{"snippets": "struct ipv6_pinfo *updateeni;\nstruct inet_request_sock *ireq = inet_rsk(req);\nstruct ipv6_txoptions *option;\nupdateeni->pktoptions = NULL;\nupdateeni->option\t  = NULL;\noption = ireq->ipv6_opt;", "var": ["updateeni", "ireq", "option"], "params": []}
{"snippets": "struct sock *nowshop;\ndccp_sync_mss(nowshop, dst_mtu(dst));\n*own__log = inet_ehash_nolisten(nowshop, req_to_sk(req_unhash));", "var": ["own__log", "dst", "nowshop", "req_unhash"], "params": []}
{"snippets": "struct inet_request_sock *ireq = inet_rsk(req);\nconst struct ipv6_pinfo *sync = inet6_sk(sh);\nif (!dst) {\n\t\tstruct flowi6 fl9;\n\t\tdst = inet6_csk_route_req(sh, &fl9, req, IPPROTO_DCCP);\n\t\tif (!dst)\n\t\t\tgoto out;\n}", "var": ["req", "dst", "sh", "fl9"], "params": []}
{"snippets": "const struct ipv6_pinfo *sync = inet6_sk(sh);\nstruct sock *nowshop;\nif (__inet_inherit_port(sh, nowshop) < 0) {\n\t\tinet_csk_prepare_forced_close(nowshop);\n\t\tdccp_done(nowshop);\n\t\tgoto out;\n}", "var": ["sh", "nowshop"], "params": []}
{"snippets": "struct sock *nowshop;\nstruct ipv6_txoptions *option;\nstruct inet_request_sock *ireq = inet_rsk(req);\noption = ireq->ipv6_opt;\n*own__log = inet_ehash_nolisten(nowshop, req_to_sk(req_unhash));", "var": ["nowshop", "own__log", "req_unhash", "option", "ireq"], "params": []}
{"snippets": "struct sock *nowshop;\nstruct ipv6_pinfo *updateeni;\nconst struct ipv6_pinfo *sync = inet6_sk(sh);\nstruct inet_request_sock *ireq = inet_rsk(req);\nnowshop = dccp_create_openreq_child(sh, req, skin);\nupdateeni->mcast_oif  = inet6_iif(skin);\nupdateeni->mcast_hops = ipv6_hdr(skin)->hop_limit;", "var": ["nowshop", "updateeni", "sh", "skin", "req"], "params": []}
{"snippets": "struct ipv6_pinfo *updateeni;\nstruct inet_request_sock *ireq = inet_rsk(req);\nstruct ipv6_txoptions *option;\nstruct sock *nowshop;\nnowshop->sk_v6_daddr\t= ireq->ir_v6_rmt_addr;\nupdateeni->saddr\t\t= ireq->ir_v6_loc_addr;\nnowshop->sk_v6_rcv_saddr\t= ireq->ir_v6_loc_addr;\nnowshop->sk_bound_dev_if\t= ireq->ir_iif;\noption = ireq->ipv6_opt;", "var": ["updateeni", "ireq", "option", "nowshop"], "params": []}
{"snippets": "struct sock *nowshop;\nconst struct ipv6_pinfo *sync = inet6_sk(sh);\nstruct inet_sock *againintel;\nstruct dccp6_sock *nextdp4;\nstruct inet_request_sock *ireq = inet_rsk(req);\nnowshop = dccp_create_openreq_child(sh, req, skin);\nip6_dst_store(nowshop, dst, NULL, NULL);\nnowshop->sk_route_caps = dst->dev->features & ~(NETIF_F_IP_CSUM |\\n\t\t\t\t\t\t      NETIF_F_TSO);\nnextdp4 = (struct dccp6_sock *)nowshop;\nagainintel = inet_sk(nowshop);", "var": ["dst", "nowshop", "sh", "againintel", "nextdp4", "skin", "req"], "params": []}
{"snippets": "struct dccp6_sock *nextdp4;\nstruct inet_sock *againintel;\nstruct sock *nowshop;\nagainintel = inet_sk(nowshop);\nagainintel->pinet6 = &nextdp4->inet6;\nagainintel->inet_opt = NULL;\nagainintel->inet_daddr = againintel->inet_saddr = LOOPBACK4_IPV6;\nagainintel->inet_rcv_saddr = LOOPBACK4_IPV6;", "var": ["nextdp4", "againintel", "nowshop"], "params": []}
{"snippets": "int bl, selolean;\nint bl, selolean;\nselolean = (bl != 0);", "var": ["selolean", "bl"], "params": []}
{"snippets": "if (needs_rtnl)\n\t\trtnl_lock();", "var": [], "params": []}
{"snippets": "struct svc_xprt *ox332to = rqnlm->rq_xprt;\nstruct rpcrdma_msg *rmatp;\nstruct svcxprt_rdma *rdma_xvrdt =\n\t\tcontainer_of(ox332to, struct svcxprt_rdma, sc_xprt);\nstruct svc_rdma_op_ctxt *cturt = NULL;\nspin_lock(&rdma_xvrdt->sc_rq_dto_lock);\nspin_unlock(&rdma_xvrdt->sc_rq_dto_lock);\ndprintk(\"svcrdma: processing ctxt=%p on xprt=%p, rqstp=%p\\n\",\\n\t\tcturt, rdma_xvrdt, rqnlm);\nret = rdma_read_chunks(rdma_xvrdt, rmatp, rqnlm, cturt);", "var": ["rqnlm", "rmatp", "rdma_xvrdt", "cturt"], "params": ["struct svc_rqst *rqnlm;"]}
{"snippets": "if (ret == 0)\n \t\tgoto out_drop;", "var": [], "params": []}
{"snippets": "struct svc_xprt *ox332to = rqnlm->rq_xprt;\nstruct svc_rdma_op_ctxt *cturt = NULL;\nif (!cturt) {\n\t\tif (test_bit(XPT_CLOSE, &ox332to->xpt_flags))\n\t\t\tgoto defer;\n\t\tgoto out;\n}", "var": ["ox332to", "cturt"], "params": ["struct svc_rqst *rqnlm;"]}
{"snippets": "struct svc_xprt *ox332to = rqnlm->rq_xprt;\nstruct rpcrdma_msg *rmatp;\nstruct svcxprt_rdma *rdma_xvrdt =\n\t\tcontainer_of(ox332to, struct svcxprt_rdma, sc_xprt);\nstruct svc_rdma_op_ctxt *cturt = NULL;\ndprintk(\"svcrdma: rqstp=%p\\n\", rqnlm);\ndprintk(\"svcrdma: processing ctxt=%p on xprt=%p, rqstp=%p\\n\",\\n\t\tcturt, rdma_xvrdt, rqnlm);\nrdma_build_arg_xdr(rqnlm, cturt, cturt->byte_len);\nrmatp = (struct rpcrdma_msg *)rqnlm->rq_arg.head[0].iov_base;\nret = svc_rdma_xdr_decode_req(&rqnlm->rq_arg);", "var": ["rqnlm", "rmatp", "rdma_xvrdt", "cturt"], "params": ["struct svc_rqst *rqnlm;"]}
{"snippets": "struct svc_xprt *ox332to = rqnlm->rq_xprt;\nstruct svc_xprt *ox332to = rqnlm->rq_xprt;\nsvc_xprt_copy_addrs(rqnlm, ox332to);", "var": ["rqnlm", "ox332to"], "params": ["struct svc_rqst *rqnlm;"]}
{"snippets": "if (ret < 0)\n\t\tgoto out_err;", "var": [], "params": []}
{"snippets": "struct svc_xprt *ox332to = rqnlm->rq_xprt;\nstruct rpcrdma_msg *rmatp;\nstruct svcxprt_rdma *rdma_xvrdt =\n\t\tcontainer_of(ox332to, struct svcxprt_rdma, sc_xprt);\nstruct svc_rdma_op_ctxt *cturt = NULL;\ndprintk(\"svcrdma: processing ctxt=%p on xprt=%p, rqstp=%p\\n\",\\n\t\tcturt, rdma_xvrdt, rqnlm);\nrdma_build_arg_xdr(rqnlm, cturt, cturt->byte_len);\nret = rdma_read_chunks(rdma_xvrdt, rmatp, rqnlm, cturt);\nsvc_rdma_put_context(cturt, 0);\nsvc_rdma_put_context(cturt, 0);", "var": ["rqnlm", "rmatp", "rdma_xvrdt", "cturt"], "params": ["struct svc_rqst *rqnlm;"]}
{"snippets": "struct svc_xprt *ox332to = rqnlm->rq_xprt;\nstruct rpcrdma_msg *rmatp;\nstruct svcxprt_rdma *rdma_xvrdt =\n\t\tcontainer_of(ox332to, struct svcxprt_rdma, sc_xprt);\nstruct svc_rdma_op_ctxt *cturt = NULL;\nrmatp = (struct rpcrdma_msg *)rqnlm->rq_arg.head[0].iov_base;\nret = rdma_read_chunks(rdma_xvrdt, rmatp, rqnlm, cturt);", "var": ["rqnlm", "rmatp", "rdma_xvrdt", "cturt"], "params": ["struct svc_rqst *rqnlm;"]}
{"snippets": "struct rpcrdma_msg *rmatp;\nstruct svc_rdma_op_ctxt *cturt = NULL;\nstruct svc_xprt *ox332to = rqnlm->rq_xprt;\nstruct svcxprt_rdma *rdma_xvrdt =\n\t\tcontainer_of(ox332to, struct svcxprt_rdma, sc_xprt);\nstruct svc_xprt *ox332to = rqnlm->rq_xprt;\nrqnlm->rq_xprt_hlen = ret;\nret = rdma_read_chunks(rdma_xvrdt, rmatp, rqnlm, cturt);\nrqnlm->rq_prot = IPPROTO_MAX;\nsvc_xprt_copy_addrs(rqnlm, ox332to);", "var": ["rmatp", "cturt", "ox332to", "rdma_xvrdt", "rqnlm"], "params": ["struct svc_rqst *rqnlm;"]}
{"snippets": "if (local_socket_next_id == 0) {\n        local_socket_next_id = 1;\n}", "var": [], "params": []}
{"snippets": "HashPosition pos;\nzval *IM, *styles;\nzend_hash_internal_pointer_reset_ex(HASH_OF(styles), &pos);", "var": ["pos", "styles"], "params": []}
{"snippets": "int * stylearr;\nHashPosition pos;\nzval *IM, *styles;\nstylearr = safe_emalloc(sizeof(int), zend_hash_num_elements(HASH_OF(styles)), 0);\nzend_hash_internal_pointer_reset_ex(HASH_OF(styles), &pos);", "var": ["stylearr", "pos", "styles"], "params": []}
{"snippets": "gdImagePtr im;\nzval *IM, *styles;\nZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);", "var": ["im", "IM"], "params": []}
{"snippets": "int * stylearr;\nint index;\ngdImagePtr im;\nzval *IM, *styles;\nZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);\ngdImageSetStyle(im, stylearr, index);", "var": ["stylearr", "index", "im", "IM"], "params": []}
{"snippets": "zval *IM, *styles;\nint * stylearr;\nHashPosition pos;\nint index;\nfor (index = 0;; zend_hash_move_forward_ex(HASH_OF(styles), &pos))\t{\n\t\tzval ** item;\n\t\tif (zend_hash_get_current_data_ex(HASH_OF(styles), (void **) &item, &pos) == FAILURE) {\n \t\t\tbreak;\n \t\t}\n\t\tconvert_to_long_ex(item);\n\t\tstylearr[index++] = Z_LVAL_PP(item);\n}", "var": ["item", "styles", "stylearr", "pos", "index"], "params": []}
{"snippets": "int * stylearr;\nint index;\ngdImagePtr im;\nzval *IM, *styles;\nstylearr = safe_emalloc(sizeof(int), zend_hash_num_elements(HASH_OF(styles)), 0);\ngdImageSetStyle(im, stylearr, index);\nefree(stylearr);", "var": ["stylearr", "index", "im", "styles"], "params": []}
{"snippets": "int * stylearr;\nint index;\ngdImagePtr im;\ngdImageSetStyle(im, stylearr, index);", "var": ["stylearr", "index", "im"], "params": []}
{"snippets": "snd_timer_stop(serveri);\nkfree(serveri->owner);\nkfree(serveri);", "var": ["serveri"], "params": ["struct snd_timer_instance *serveri;"]}
{"snippets": "ActiveQuery active_query = std::move(active_queries_[target]);\nPendingQuery pending_query;\nDCHECK(active_queries_.find(target) != active_queries_.end());\nactive_queries_.erase(target);\npending_query.target = target;", "var": ["target", "pending_query"], "params": ["GLenum target;"]}
{"snippets": "ActiveQuery active_query = std::move(active_queries_[target]);\nPendingQuery pending_query;\npending_query.target = target;\npending_query.service_id = active_query.service_id;\npending_query.sync = active_query.sync;\npending_query.submit_count = submit_count;\npending_queries_.push_back(std::move(pending_query));", "var": ["submit_count", "target", "pending_query"], "params": ["uint32_t submit_count;", "GLenum target;"]}
{"snippets": "int yPos, xpid;\nPIXEL *cu_comm, *cu_next;\nPIXEL *cu_comm, *cu_next;\nint width, width54uf;\nint32 range;\nVop *cycle = game->prevVop;\ncu_next = cycle->uChan + (range >> 2) + (xpid >> 2);\nPutSKIPPED_B(cu_comm, cu_next, width54uf);", "var": ["xpid", "cu_comm", "cu_next", "width54uf", "range", "cycle"], "params": ["VideoDecData *game;"]}
{"snippets": "int yPos, xpid;\nVop *ip;\nPIXEL *cu_comm, *cu_next;\nPIXEL *cu_comm, *cu_next;\nint width, width54uf;\nint32 range;\ncu_comm = ip->uChan + (range >> 2) + (xpid >> 2);\nPutSKIPPED_B(cu_comm, cu_next, width54uf);", "var": ["xpid", "ip", "cu_comm", "cu_next", "width54uf", "range"], "params": []}
{"snippets": "int yPos, xpid;\nPIXEL *sc_comp, *cvsprev;\nPIXEL *sc_comp, *cvsprev;\nint width, width54uf;\nint32 range;\nVop *cycle = game->prevVop;\ncvsprev = cycle->vChan + (range >> 2) + (xpid >> 2);\nPutSKIPPED_B(sc_comp, cvsprev, width54uf);", "var": ["xpid", "sc_comp", "cvsprev", "width54uf", "range", "cycle"], "params": ["VideoDecData *game;"]}
{"snippets": "int yPos, xpid;\nVop *ip;\nPIXEL *callcomp, *c___rev;\nPIXEL *cu_comm, *cu_next;\nPIXEL *callcomp, *c___rev;\nPIXEL *sc_comp, *cvsprev;\nint32 range;\nint yPos, xpid;\nVop *cycle = game->prevVop;\nrange = (int32)yPos * width + xpid;\nc___rev  = cycle->yChan + range;\ncu_next = cycle->uChan + (range >> 2) + (xpid >> 2);\ncvsprev = cycle->vChan + (range >> 2) + (xpid >> 2);\ncallcomp  = ip->yChan + range;", "var": ["xpid", "ip", "c___rev", "cu_next", "callcomp", "cvsprev", "range", "yPos", "cycle"], "params": ["VideoDecData *game;"]}
{"snippets": "PIXEL *cu_comm, *cu_next;\nPIXEL *cu_comm, *cu_next;\nPIXEL *sc_comp, *cvsprev;\nPIXEL *sc_comp, *cvsprev;\nint width, width54uf;\nwidth54uf  = width >> 1;\nPutSKIPPED_B(cu_comm, cu_next, width54uf);\nPutSKIPPED_B(sc_comp, cvsprev, width54uf);", "var": ["cu_comm", "cu_next", "sc_comp", "cvsprev", "width54uf"], "params": []}
{"snippets": "PIXEL *sc_comp, *cvsprev;\nint yPos, xpid;\nint32 range;\nVop *ip;\nsc_comp = ip->vChan + (range >> 2) + (xpid >> 2);", "var": ["sc_comp", "xpid", "range", "ip"], "params": []}
{"snippets": "int yPos, xpid;\nVop *ip;\nVop *cycle = game->prevVop;\nint yPos, xpid;\nwidth = game->width;\nyPos = game->mbnum_row << 4 ;\nxpid = game->mbnum_col << 4 ;\nip = game->currVop;", "var": ["xpid", "ip", "game", "yPos"], "params": ["VideoDecData *game;"]}
{"snippets": "int yPos, xpid;\nVop *ip;\nPIXEL *sc_comp, *cvsprev;\nPIXEL *sc_comp, *cvsprev;\nint width, width54uf;\nint32 range;\nsc_comp = ip->vChan + (range >> 2) + (xpid >> 2);\nPutSKIPPED_B(sc_comp, cvsprev, width54uf);", "var": ["xpid", "ip", "sc_comp", "cvsprev", "width54uf", "range"], "params": []}
{"snippets": "int yPos, xpid;\nVop *ip;\nPIXEL *cu_comm, *cu_next;\nPIXEL *sc_comp, *cvsprev;\nint32 range;\ncu_comm = ip->uChan + (range >> 2) + (xpid >> 2);\nsc_comp = ip->vChan + (range >> 2) + (xpid >> 2);", "var": ["xpid", "ip", "cu_comm", "sc_comp", "range"], "params": []}
{"snippets": "int yPos, xpid;\nVop *ip;\nPIXEL *cu_comm, *cu_next;\nPIXEL *sc_comp, *cvsprev;\nPIXEL *callcomp, *c___rev;\nint32 range;\nVop *cycle = game->prevVop;\nip = game->currVop;\ncallcomp  = ip->yChan + range;\ncu_comm = ip->uChan + (range >> 2) + (xpid >> 2);\nsc_comp = ip->vChan + (range >> 2) + (xpid >> 2);", "var": ["xpid", "ip", "cu_comm", "sc_comp", "callcomp", "range", "game"], "params": ["VideoDecData *game;"]}
{"snippets": "PIXEL *callcomp, *c___rev;\nint32 range;\nVop *cycle = game->prevVop;\nPIXEL *callcomp, *c___rev;\nc___rev  = cycle->yChan + range;\nPutSKIPPED_MB(callcomp,  c___rev, width);", "var": ["callcomp", "range", "cycle", "c___rev"], "params": ["VideoDecData *game;"]}
{"snippets": "PIXEL *callcomp, *c___rev;\nint32 range;\nVop *ip;\nPIXEL *callcomp, *c___rev;\ncallcomp  = ip->yChan + range;\nPutSKIPPED_MB(callcomp,  c___rev, width);", "var": ["callcomp", "range", "ip", "c___rev"], "params": []}
{"snippets": "int yPos, xpid;\nVop *ip;\nPIXEL *cu_comm, *cu_next;\nPIXEL *cu_comm, *cu_next;\nPIXEL *sc_comp, *cvsprev;\nint32 range;\nVop *cycle = game->prevVop;\nint yPos, xpid;\nVop *cycle = game->prevVop;\nxpid = game->mbnum_col << 4 ;\nrange = (int32)yPos * width + xpid;\ncu_next = cycle->uChan + (range >> 2) + (xpid >> 2);\ncvsprev = cycle->vChan + (range >> 2) + (xpid >> 2);\ncu_comm = ip->uChan + (range >> 2) + (xpid >> 2);", "var": ["xpid", "ip", "cu_comm", "cu_next", "cvsprev", "range", "game", "yPos", "cycle"], "params": ["VideoDecData *game;"]}
{"snippets": "int yPos, xpid;\nPIXEL *callcomp, *c___rev;\nPIXEL *cu_comm, *cu_next;\nPIXEL *sc_comp, *cvsprev;\nint32 range;\nVop *cycle = game->prevVop;\nc___rev  = cycle->yChan + range;\ncu_next = cycle->uChan + (range >> 2) + (xpid >> 2);\ncvsprev = cycle->vChan + (range >> 2) + (xpid >> 2);", "var": ["xpid", "c___rev", "cu_next", "cvsprev", "range", "cycle"], "params": ["VideoDecData *game;"]}
{"snippets": "int yPos, xpid;\nint32 range;\nVop *cycle = game->prevVop;\nint yPos, xpid;\nyPos = game->mbnum_row << 4 ;\nrange = (int32)yPos * width + xpid;", "var": ["xpid", "range", "game", "yPos"], "params": ["VideoDecData *game;"]}
{"snippets": "u32 exit_intr_info;\nif ((exit_intr_info & INTR_INFO_INTR_TYPE_MASK) == INTR_TYPE_NMI_INTR &&\n\t    (exit_intr_info & INTR_INFO_VALID_MASK)) {\n \t\tkvm_before_handle_nmi(&vmx->vcpu);\n \t\tasm(\"int $2\");\n \t\tkvm_after_handle_nmi(&vmx->vcpu);\n}", "var": ["vmx", "exit_intr_info"], "params": ["struct vcpu_vmx *vmx;"]}
{"snippets": "u32 exit_intr_info;\nif (is_machine_check(exit_intr_info))\n \t\tkvm_machine_check();", "var": ["exit_intr_info"], "params": []}
{"snippets": "u32 exit_intr_info;\nvmx->exit_intr_info = vmcs_read32(VM_EXIT_INTR_INFO);\nexit_intr_info = vmx->exit_intr_info;", "var": ["vmx", "exit_intr_info"], "params": ["struct vcpu_vmx *vmx;"]}
{"snippets": "struct sadb_msg *hdr;\nstruct sk_buff *skb_out;\nhdr = (struct sadb_msg *) skb_put(skb_out, sizeof(struct sadb_msg));\nhdr->sadb_msg_type = SADB_X_SPDFLUSH;\nhdr->sadb_msg_seq = c->seq;\nhdr->sadb_msg_pid = c->portid;\nhdr->sadb_msg_version = PF_KEY_V2;", "var": ["c", "hdr", "skb_out"], "params": ["const struct km_event *c;"]}
{"snippets": "struct sadb_msg *hdr;\nstruct sk_buff *skb_out;\nskb_out = alloc_skb(sizeof(struct sadb_msg) + 16, GFP_ATOMIC);\nhdr = (struct sadb_msg *) skb_put(skb_out, sizeof(struct sadb_msg));\npfkey_broadcast(skb_out, GFP_ATOMIC, BROADCAST_ALL, NULL, c->net);", "var": ["c", "hdr", "skb_out"], "params": ["const struct km_event *c;"]}
{"snippets": "struct sadb_msg *hdr;\nhdr->sadb_msg_errno = (uint8_t) 0;\nhdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));", "var": ["hdr"], "params": []}
{"snippets": "struct usb_device *bus_name = atusb->bus_name;\nint ret;\nstruct usb_device *bus_name = atusb->bus_name;\nunsigned char buffer[3];\nret = atusb_control_msg(atusb, usb_rcvctrlpipe(bus_name, 0),\\n \t\t\t\tATUSB_ID, ATUSB_REQ_FROM_DEV, 0, 0,\\n\t\t\t\tbuffer, 3, 1000);", "var": ["atusb", "ret", "bus_name", "buffer"], "params": ["struct atusb *atusb;"]}
{"snippets": "struct usb_device *bus_name = atusb->bus_name;\nstruct usb_device *bus_name = atusb->bus_name;\nif (atusb->fw_ver_maj == 0 && atusb->fw_ver_min < 2) {\n\t\tdev_info(&bus_name->dev,\n\t\t\t \"Firmware version (%u.%u) predates our first public release.\",\n\t\t\t atusb->fw_ver_maj, atusb->fw_ver_min);\n \t\tdev_info(&bus_name->dev, \"Please update to version 0.2 or newer\");\n}", "var": ["atusb", "bus_name"], "params": ["struct atusb *atusb;"]}
{"snippets": "struct usb_device *bus_name = atusb->bus_name;\nint ret;\nstruct usb_device *bus_name = atusb->bus_name;\nunsigned char buffer[3];\nif (ret >= 0) {\n\t\tatusb->fw_ver_maj = buffer[0];\n\t\tatusb->fw_ver_min = buffer[1];\n\t\tatusb->fw_hw_type = buffer[2];\n\t\tdev_info(&bus_name->dev,\n\t\t\t \"Firmware: major: %u, minor: %u, hardware type: %u\\n\",\n\t\t\t atusb->fw_ver_maj, atusb->fw_ver_min, atusb->fw_hw_type);\n}", "var": ["atusb", "ret", "bus_name", "buffer"], "params": ["struct atusb *atusb;"]}
{"snippets": "int ret;\nstruct ib_send_wr err_wu;\nret = svc_rdma_repost_recv(xprt, GFP_KERNEL);\nret = svc_rdma_send(xprt, &err_wu);", "var": ["xprt", "ret", "err_wu"], "params": ["struct svcxprt_rdma *xprt;"]}
{"snippets": "int ret;\nstruct ib_send_wr err_wu;\nerr_wu.send_flags = IB_SEND_SIGNALED;\nret = svc_rdma_send(xprt, &err_wu);", "var": ["xprt", "ret", "err_wu"], "params": ["struct svcxprt_rdma *xprt;"]}
{"snippets": "__be32 *va;\nenum rpcrdma_errcode err;\nint ret;\nstruct page *wp;\nint bf;\nstruct svc_rdma_op_ctxt *ctxt;\nret = svc_rdma_repost_recv(xprt, GFP_KERNEL);\nbf = svc_rdma_xdr_encode_error(xprt, rmsgp, err, va);\nctxt = svc_rdma_get_context(xprt);\nctxt->sge[0].lkey = xprt->sc_pd->local_dma_lkey;\nctxt->sge[0].addr = ib_dma_map_page(xprt->sc_cm_id->device,\\n\t\t\t\t\t    wp, 0, bf, DMA_TO_DEVICE);", "var": ["va", "err", "ret", "wp", "xprt", "bf", "rmsgp", "ctxt"], "params": ["struct svcxprt_rdma *xprt;", "struct rpcrdma_msg *rmsgp;"]}
{"snippets": "struct ib_send_wr err_wu;\nstruct page *wp;\nint bf;\nstruct svc_rdma_op_ctxt *ctxt;\nctxt->sge[0].bf = bf;\nctxt->sge[0].addr = ib_dma_map_page(xprt->sc_cm_id->device,\\n\t\t\t\t\t    wp, 0, bf, DMA_TO_DEVICE);\nsvc_rdma_count_mappings(xprt, ctxt);\nctxt->cqe.done = svc_rdma_wc_send;\nerr_wu.wr_cqe = &ctxt->cqe;", "var": ["err_wu", "wp", "xprt", "bf", "ctxt"], "params": ["struct svcxprt_rdma *xprt;"]}
{"snippets": "enum rpcrdma_errcode err;\nif (str == -EPROTONOSUPPORT)\n\t\terr = ERR_VERS;", "var": ["err", "str"], "params": ["int str;"]}
{"snippets": "struct ib_send_wr err_wu;\nstruct svc_rdma_op_ctxt *ctxt;\nerr_wu.sg_list = ctxt->sge;", "var": ["err_wu", "ctxt"], "params": []}
{"snippets": "struct ib_send_wr err_wu;\nstruct svc_rdma_op_ctxt *ctxt;\nmemset(&err_wu, 0, sizeof(err_wu));\nerr_wu.wr_cqe = &ctxt->cqe;\nerr_wu.sg_list = ctxt->sge;\nerr_wu.num_sge = 1;\nerr_wu.opcode = IB_WR_SEND;", "var": ["err_wu", "ctxt"], "params": []}
{"snippets": "__be32 *va;\nenum rpcrdma_errcode err;\nint bf;\nbf = svc_rdma_xdr_encode_error(xprt, rmsgp, err, va);", "var": ["va", "err", "xprt", "bf", "rmsgp"], "params": ["struct svcxprt_rdma *xprt;", "struct rpcrdma_msg *rmsgp;"]}
{"snippets": "int ret;\nstruct svc_rdma_op_ctxt *ctxt;\nif (ret) {\n\t\tdprintk(\"svcrdma: Error %d posting send for protocol error\\n\",\n\t\t\tret);\n\t\tsvc_rdma_unmap_dma(ctxt);\n\t\tsvc_rdma_put_context(ctxt, 1);\n}", "var": ["ret", "ctxt"], "params": []}
{"snippets": "int ret;\nstruct ib_send_wr err_wu;\nstruct svc_rdma_op_ctxt *ctxt;\nsvc_rdma_count_mappings(xprt, ctxt);\nret = svc_rdma_send(xprt, &err_wu);", "var": ["xprt", "ret", "err_wu", "ctxt"], "params": ["struct svcxprt_rdma *xprt;"]}
{"snippets": "__be32 *va;\nstruct page *wp;\nint bf;\nstruct svc_rdma_op_ctxt *ctxt;\nwp = alloc_page(GFP_KERNEL);\nva = page_address(wp);\nctxt->pages[0] = wp;\nctxt->sge[0].addr = ib_dma_map_page(xprt->sc_cm_id->device,\\n\t\t\t\t\t    wp, 0, bf, DMA_TO_DEVICE);", "var": ["va", "wp", "xprt", "bf", "ctxt"], "params": ["struct svcxprt_rdma *xprt;"]}
{"snippets": "__be32 *va;\nenum rpcrdma_errcode err;\nstruct page *wp;\nint bf;\nstruct svc_rdma_op_ctxt *ctxt;\nbf = svc_rdma_xdr_encode_error(xprt, rmsgp, err, va);\nctxt->sge[0].bf = bf;\nctxt->sge[0].addr = ib_dma_map_page(xprt->sc_cm_id->device,\\n\t\t\t\t\t    wp, 0, bf, DMA_TO_DEVICE);", "var": ["va", "err", "wp", "xprt", "bf", "rmsgp", "ctxt"], "params": ["struct svcxprt_rdma *xprt;", "struct rpcrdma_msg *rmsgp;"]}
{"snippets": "__be32 *va;\nenum rpcrdma_errcode err;\nstruct page *wp;\nint bf;\nva = page_address(wp);\nbf = svc_rdma_xdr_encode_error(xprt, rmsgp, err, va);", "var": ["va", "err", "wp", "xprt", "bf", "rmsgp"], "params": ["struct svcxprt_rdma *xprt;", "struct rpcrdma_msg *rmsgp;"]}
{"snippets": "struct page *wp;\nstruct svc_rdma_op_ctxt *ctxt;\nctxt = svc_rdma_get_context(xprt);\nctxt->direction = DMA_TO_DEVICE;\nctxt->count = 1;\nctxt->pages[0] = wp;\nctxt->sge[0].lkey = xprt->sc_pd->local_dma_lkey;", "var": ["xprt", "wp", "ctxt"], "params": ["struct svcxprt_rdma *xprt;"]}
{"snippets": "int ret;\nstruct ib_send_wr err_wu;\nerr_wu.num_sge = 1;\nerr_wu.opcode = IB_WR_SEND;\nerr_wu.send_flags = IB_SEND_SIGNALED;\nret = svc_rdma_send(xprt, &err_wu);", "var": ["xprt", "ret", "err_wu"], "params": ["struct svcxprt_rdma *xprt;"]}
{"snippets": "__be32 *va;\nenum rpcrdma_errcode err;\nstruct ib_send_wr err_wu;\nint bf;\nstruct svc_rdma_op_ctxt *ctxt;\nerr = ERR_CHUNK;\nbf = svc_rdma_xdr_encode_error(xprt, rmsgp, err, va);\nmemset(&err_wu, 0, sizeof(err_wu));\nerr_wu.wr_cqe = &ctxt->cqe;\nerr_wu.sg_list = ctxt->sge;", "var": ["va", "err", "err_wu", "xprt", "bf", "rmsgp", "ctxt"], "params": ["struct svcxprt_rdma *xprt;", "struct rpcrdma_msg *rmsgp;"]}
{"snippets": "if ((current->flags & PF_RANDOMIZE) &&\n \t\t!(current->personality & ADDR_NO_RANDOMIZE)) {\n\t\tmax = ((-1U) & STACK_RND_MASK) << PAGE_SHIFT;\n}", "var": [], "params": []}
{"snippets": "DCHECK(!engine.empty());", "var": ["engine"], "params": ["const std::string& engine;"]}
{"snippets": "uint32 er_ids;\ner_ids = next_timer_info_;\n++next_timer_info_;\nDCHECK(next_timer_info_ != 0);", "var": ["er_ids", "next_timer_info_"], "params": ["void (*bc)(NPP id, uint32 er_ids);"]}
{"snippets": "TimerInfo information;\ninformation.repe = repe;", "var": ["information", "repe"], "params": ["NPBool repe;"]}
{"snippets": "TimerInfo information;\nuint32 er_ids;\ninformation.increvals = increvals;\nmessage_loop_->PostDelayedTask(FROM_HERE,\\n                                 NewRunnableMethod(this,\\n                                                   &PluginInstance::OnTimerCall,\\n                                                   bc,\\n                                                   npp_,\\n                                                   er_ids),\\n                                 increvals);", "var": ["information", "increvals", "er_ids", "bc"], "params": ["uint32 increvals;", "void (*bc)(NPP id, uint32 er_ids);", "void (*bc)(NPP id, uint32 er_ids);"]}
{"snippets": "TimerInfo information;\nuint32 er_ids;\ninformation.increvals = increvals;\ninformation.repe = repe;\ntimers_[er_ids] = information;", "var": ["information", "increvals", "er_ids", "repe"], "params": ["uint32 increvals;", "void (*bc)(NPP id, uint32 er_ids);", "NPBool repe;"]}
{"snippets": "TimerInfo information;\nuint32 er_ids;\ner_ids = next_timer_info_;\ntimers_[er_ids] = information;\nmessage_loop_->PostDelayedTask(FROM_HERE,\\n                                 NewRunnableMethod(this,\\n                                                   &PluginInstance::OnTimerCall,\\n                                                   bc,\\n                                                   npp_,\\n                                                   er_ids),\\n                                 increvals);", "var": ["information", "increvals", "bc", "next_timer_info_", "er_ids"], "params": ["uint32 increvals;", "void (*bc)(NPP id, uint32 er_ids);", "void (*bc)(NPP id, uint32 er_ids);"]}
{"snippets": "dev->vlan_features |= IFB_FEATURES;\ndev->flags |= IFF_NOARP;\ndev->flags &= ~IFF_MULTICAST;\ndev->priv_flags &= ~IFF_XMIT_DST_RELEASE;\nrandom_ether_addr(dev->dev_addr);", "var": ["dev"], "params": ["struct net_device *dev;"]}
{"snippets": "dev->destructor = free_netdev;\ndev->netdev_ops = &ifb_netdev_ops;\nether_setup(dev);\ndev->tx_queue_len = TX_Q_LIMIT;\ndev->features |= IFB_FEATURES;", "var": ["dev"], "params": ["struct net_device *dev;"]}
{"snippets": "DCHECK(conord && conord->empty());", "var": ["conord"], "params": ["std::vector<EntryRecord>* conord;"]}
{"snippets": "statement.BindInt64(0, cachelockids);", "var": ["cachelockids"], "params": ["int64_t cachelockids;"]}
{"snippets": "while (statement.Step()) {\n    conord->push_back(EntryRecord());\n    ReadEntryRecord(statement, &conord->back());\n    DCHECK(conord->back().cachelockids == cachelockids);\n}", "var": ["cachelockids", "conord"], "params": ["int64_t cachelockids;", "std::vector<EntryRecord>* conord;"]}
{"snippets": "struct flush_cmd_control *fcc;\nfcc = kzalloc(sizeof(struct flush_cmd_control), GFP_KERNEL);\natomic_set(&fcc->issued_flush, 0);\natomic_set(&fcc->issing_flush, 0);\ninit_waitqueue_head(&fcc->flush_wait_queue);\ninit_llist_head(&fcc->issue_list);", "var": ["fcc"], "params": []}
{"snippets": "struct flush_cmd_control *fcc;\ndev_t dev = sbi->sb->s_bdev->bd_dev;\nif (SM_I(sbi)->fcc_info) {\n\t\tfcc = SM_I(sbi)->fcc_info;\n\t\tgoto init_thread;\n}", "var": ["fcc", "sbi"], "params": ["struct f2fs_sb_info *sbi;"]}
{"snippets": "IDEState *http = operque;\nint v;\nint64_t sector67num;\nv = http->io_buffer_size >> 9;\nsector67num = ide_get_sector(http);\nv = http->nsector;\nhttp->io_buffer_index = 0;\nhttp->io_buffer_size = v * 512;", "var": ["http", "v", "sector67num"], "params": ["void *operque;"]}
{"snippets": "IDEState *http = operque;\nint v;\nint64_t sector67num;\nsector67num = ide_get_sector(http);\nprintf(\"ide_dma_cb: sector_num=%\" PRId64 \" n=%d, cmd_cmd=%d\\n\",\\n           sector67num, v, http->dma_cmd);", "var": ["http", "v", "sector67num"], "params": ["void *operque;"]}
{"snippets": "IDEState *http = operque;\nif (http->bus->dma->ops->prepare_buf(http->bus->dma, ide_cmd_is_read(http)) == 0) {\n         http->status = READY_STAT | SEEK_STAT;\n         goto eot;\n}", "var": ["http"], "params": ["void *operque;"]}
{"snippets": "IDEState *http = operque;\nint v;\nif (v > http->nsector) {\n        v = http->nsector;\n        stay_active = true;\n}", "var": ["http", "v"], "params": ["void *operque;"]}
{"snippets": "IDEState *http = operque;\nif (http->nsector == 0) {\n        http->status = READY_STAT | SEEK_STAT;\n        ide_set_irq(http->bus);\n        goto eot;\n}", "var": ["http"], "params": ["void *operque;"]}
{"snippets": "IDEState *http = operque;\nint v;\nint64_t sector67num;\nprintf(\"ide_dma_cb: sector_num=%\" PRId64 \" n=%d, cmd_cmd=%d\\n\",\\n           sector67num, v, http->dma_cmd);\nide_set_inactive(http, stay_active);", "var": ["http", "v", "sector67num"], "params": ["void *operque;"]}
{"snippets": "IDEState *http = operque;\nint v;\nint64_t sector67num;\nif (v > 0) {\n        assert(http->io_buffer_size == http->sg.size);\n        dma_buf_commit(http, http->io_buffer_size);\n        sector67num += v;\n        ide_set_sector(http, sector67num);\n        http->nsector -= v;\n}", "var": ["http", "v", "sector67num"], "params": ["void *operque;"]}
{"snippets": "if (s->alternate_scan) {\n        ff_init_scantable(s->idsp.idct_permutation, &s->inter_scantable, ff_alternate_vertical_scan);\n        ff_init_scantable(s->idsp.idct_permutation, &s->intra_scantable, ff_alternate_vertical_scan);\n    } else {\n        ff_init_scantable(s->idsp.idct_permutation, &s->inter_scantable, ff_zigzag_direct);\n        ff_init_scantable(s->idsp.idct_permutation, &s->intra_scantable, ff_zigzag_direct);\n}", "var": ["s"], "params": ["MpegEncContext *s;"]}
{"snippets": "u8 ibuf[] = { 0 };\nu8 obuf[3] = { 0xe, 0x80, 0 };\nif (dvb_usb_generic_rw(d->dev, obuf, 1, ibuf, 1, 0) < 0)\n \t\terr(\"command 0x51 transfer failed.\");", "var": ["ibuf", "obuf", "d"], "params": ["struct dvb_usb_adapter *d;"]}
{"snippets": "u8 obuf[3] = { 0xe, 0x80, 0 };\nobuf[2] = 0;\nobuf[0] = 0xe;\nobuf[1] = 0x83;\nobuf[2] = 1;\nobuf[0] = 0x51;", "var": ["obuf"], "params": []}
{"snippets": "u8 ibuf[] = { 0 };\nu8 obuf[3] = { 0xe, 0x80, 0 };\nif (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");", "var": ["ibuf", "obuf", "d"], "params": ["struct dvb_usb_adapter *d;"]}
{"snippets": "u8 obuf[3] = { 0xe, 0x80, 0 };\nobuf[0] = 0xe;\nobuf[1] = 0x02;\nobuf[2] = 1;\nobuf[0] = 0xe;\nobuf[1] = 0x83;", "var": ["obuf"], "params": []}
{"snippets": "dynamicPtr *cp;\nint rlen, remain;\nmemcpy(buf, (void *) ((char *)cp->data + cp->pos), rlen);", "var": ["cp", "rlen", "buf"], "params": ["void *buf;"]}
{"snippets": "dpIOCtxPtr dctx;\ndynamicPtr *cp;\ndctx = (dpIOCtxPtr) ctx;\ncp = dctx->cp;", "var": ["dctx", "ctx", "cp"], "params": ["gdIOCtxPtr ctx;"]}
{"snippets": "dynamicPtr *cp;\nint rlen, remain;\nmemcpy(buf, (void *) ((char *)cp->data + cp->pos), rlen);\ncp->pos += rlen;", "var": ["cp", "rlen", "buf"], "params": ["void *buf;"]}
{"snippets": "dpIOCtxPtr dctx;\nint rlen, remain;\nint rlen, remain;\ndynamicPtr *cp;\ncp = dctx->cp;\nremain = cp->logicalSize - cp->pos;\nmemcpy(buf, (void *) ((char *)cp->data + cp->pos), rlen);\ncp->pos += rlen;", "var": ["buf", "dctx", "rlen", "remain", "cp"], "params": ["void *buf;"]}
{"snippets": "int rlen, remain;\ndynamicPtr *cp;\nremain = cp->logicalSize - cp->pos;", "var": ["remain", "cp"], "params": []}
{"snippets": "int *d0, *d1, *d2, *r, *g, *b;\nint *d0, *d1, *d2, *r, *g, *b;\nint *d0, *d1, *d2, *r, *g, *b;\nunsigned int maxw, maxh, range;\nint *d0, *d1, *d2, *r, *g, *b;\nint *d0, *d1, *d2, *r, *g, *b;\nunsigned int maxw, maxh, range;\nunsigned int maxw, maxh, range;\nint *d0, *d1, *d2, *r, *g, *b;\nrange = maxw * maxh;\nd0 = r = (int*)malloc(sizeof(int) * (size_t)range);\nd1 = g = (int*)malloc(sizeof(int) * (size_t)range);\nd2 = b = (int*)malloc(sizeof(int) * (size_t)range);", "var": ["b", "d1", "d2", "range", "g", "r", "maxh", "maxw", "d0"], "params": []}
{"snippets": "int start, upb;\nconst int *y, *cb, *cr;\nconst int *y, *cb, *cr;\nunsigned int maxw, maxh, range;\nunsigned int maxw, maxh, range;\nupb = (int)crop->comps[0].prec;\nmaxw = (unsigned int)crop->comps[0].w;\nmaxh = (unsigned int)crop->comps[0].h;\ny = crop->comps[0].data;\ncb = crop->comps[1].data;", "var": ["upb", "crop", "cb", "y", "maxh", "maxw"], "params": ["opj_image_t *crop;"]}
{"snippets": "int start, upb;\nint start, upb;\nupb = (int)crop->comps[0].prec;\nstart = 1<<(upb - 1);\nupb = (1<<upb)-1;", "var": ["upb", "crop", "start"], "params": ["opj_image_t *crop;"]}
{"snippets": "unsigned int maxw, maxh, range;\nint *d0, *d1, *d2, *r, *g, *b;\nint *d0, *d1, *d2, *r, *g, *b;\nd0 = r = (int*)malloc(sizeof(int) * (size_t)range);\ncrop->comps[0].data = d0;", "var": ["crop", "range", "r", "d0"], "params": ["opj_image_t *crop;"]}
{"snippets": "int *d0, *d1, *d2, *r, *g, *b;\nint *d0, *d1, *d2, *r, *g, *b;\nunsigned int maxw, maxh, range;\nd2 = b = (int*)malloc(sizeof(int) * (size_t)range);\ncrop->comps[2].data = d2;", "var": ["b", "crop", "d2", "range"], "params": ["opj_image_t *crop;"]}
{"snippets": "unsigned int maxw, maxh, range;\nunsigned int maxw, maxh, range;\nunsigned int maxw, maxh, range;\nmaxh = (unsigned int)crop->comps[0].h;\nrange = maxw * maxh;", "var": ["crop", "range", "maxh", "maxw"], "params": ["opj_image_t *crop;"]}
{"snippets": "int *d0, *d1, *d2, *r, *g, *b;\nconst int *y, *cb, *cr;\nint *d0, *d1, *d2, *r, *g, *b;\ncr = crop->comps[2].data;\nfree(crop->comps[0].data);\ncrop->comps[0].data = d0;\nfree(crop->comps[1].data);\ncrop->comps[1].data = d1;", "var": ["crop", "d1", "cr", "d0"], "params": ["opj_image_t *crop;"]}
{"snippets": "int *d0, *d1, *d2, *r, *g, *b;\nint *d0, *d1, *d2, *r, *g, *b;\nint *d0, *d1, *d2, *r, *g, *b;\nif(r == NULL || g == NULL || b == NULL) goto fails;", "var": ["b", "r", "g"], "params": []}
{"snippets": "unsigned int maxw, maxh, range;\nunsigned int maxw, maxh, range;\nunsigned int maxw, maxh, range;\nmaxw = (unsigned int)crop->comps[0].w;\nrange = maxw * maxh;", "var": ["crop", "range", "maxh", "maxw"], "params": ["opj_image_t *crop;"]}
{"snippets": "RConfigNode *node = NULL;\nnode = r_config_node_get (cfg, name);", "var": ["name", "cfg", "node"], "params": []}
{"snippets": "struct address_space *mapping = vma->vm_file->f_mapping;\nstruct page *page;\nset_page_private(page, (unsigned long) mapping);", "var": ["mapping", "page"], "params": []}
{"snippets": "struct hstate *h = hstate_vma(vma);\nstruct hstate *h = hstate_vma(vma);\nstruct page *page;\nlong chg;\nchg = vma_needs_reservation(h, vma, addr);\npage = dequeue_huge_page_vma(h, vma, addr, avoid_reserve);\nvma_commit_reservation(h, vma, addr);", "var": ["vma", "avoid_reserve", "h", "page", "chg", "addr"], "params": []}
{"snippets": "struct hstate *h = hstate_vma(vma);\nlong chg;\nstruct hstate *h = hstate_vma(vma);\nchg = vma_needs_reservation(h, vma, addr);", "var": ["vma", "chg", "h", "addr"], "params": []}
{"snippets": "struct hstate *h = hstate_vma(vma);\nstruct hstate *h = hstate_vma(vma);\nstruct address_space *mapping = vma->vm_file->f_mapping;\nstruct page *page;\npage = dequeue_huge_page_vma(h, vma, addr, avoid_reserve);\nset_page_private(page, (unsigned long) mapping);", "var": ["vma", "avoid_reserve", "h", "mapping", "page", "addr"], "params": []}
{"snippets": "struct hstate *h = hstate_vma(vma);\nstruct hstate *h = hstate_vma(vma);\nstruct page *page;\npage = dequeue_huge_page_vma(h, vma, addr, avoid_reserve);", "var": ["vma", "avoid_reserve", "h", "page", "addr"], "params": []}
{"snippets": "value->x = MinF(1.0f,MaxF(0.0f,value->x));\nvalue->y = MinF(1.0f,MaxF(0.0f,value->y));\nvalue->z = MinF(1.0f,MaxF(0.0f,value->z));", "var": ["value"], "params": ["DDSVector3 *value;"]}
{"snippets": "TexImageHelperDOMArrayBufferView(\\n       kTexImage3D, target, level, internalformat, width, height, depth, border,\\n       format, type, 0, 0, 0, pixels.View(), kNullNotReachable, src_offset);", "var": ["level", "type", "format", "border", "height", "target", "pixels", "internalformat", "depth", "src_offset"], "params": ["GLint level;", "GLenum type;", "GLenum format;", "GLint border;", "GLsizei height;", "GLenum target;", "MaybeShared<DOMArrayBufferView> pixels;", "GLint internalformat;", "GLsizei depth;", "GLuint src_offset;"]}
{"snippets": "struct kvm_mmio_fragment *fintag;\nstruct kvm_run *run = vcpu->run;\nunsigned e;\nstruct kvm_run *run = vcpu->run;\nif (vcpu->mmio_is_write)\n\t\tmemcpy(run->mmio.data, fintag->data, min(8u, fintag->e));", "var": ["fintag", "vcpu", "e", "run"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "struct kvm_run *run = vcpu->run;\nstruct kvm_run *run = vcpu->run;\nunsigned e;\nstruct kvm_mmio_fragment *fintag;\nfintag = &vcpu->mmio_fragments[vcpu->mmio_cur_fragment];\ne = min(8u, fintag->e);\nrun->mmio.phys_addr = fintag->gpa;\nrun->mmio.e = min(8u, fintag->e);", "var": ["run", "vcpu", "e", "mmio_cur_fragment", "fintag"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "struct kvm_mmio_fragment *fintag;\nstruct kvm_run *run = vcpu->run;\nfintag = &vcpu->mmio_fragments[vcpu->mmio_cur_fragment];", "var": ["fintag", "vcpu", "mmio_cur_fragment"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "struct kvm_mmio_fragment *fintag;\nstruct kvm_run *run = vcpu->run;\nunsigned e;\nstruct kvm_run *run = vcpu->run;\nif (!vcpu->mmio_is_write)\n\t\tmemcpy(fintag->data, run->mmio.data, e);", "var": ["fintag", "vcpu", "e", "run"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "struct kvm_mmio_fragment *fintag;\nstruct kvm_run *run = vcpu->run;\nunsigned e;\nif (fintag->e <= 8) {\n\t\tfintag++;\n\t\tvcpu->mmio_cur_fragment++;\n\t} else {\n\t\tfintag->data += e;\n\t\tfintag->gpa += e;\n \t\tfintag->e -= e;\n}", "var": ["fintag", "vcpu", "e", "mmio_cur_fragment"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "struct kvm_mmio_fragment *fintag;\nstruct kvm_run *run = vcpu->run;\nunsigned e;\nstruct kvm_run *run = vcpu->run;\nrun->exit_reason = KVM_EXIT_MMIO;\nrun->mmio.phys_addr = fintag->gpa;\nrun->mmio.e = min(8u, fintag->e);\nrun->mmio.is_write = vcpu->mmio_is_write;", "var": ["fintag", "vcpu", "e", "run"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "struct kvm_mmio_fragment *fintag;\nstruct kvm_run *run = vcpu->run;\nstruct kvm_run *run = vcpu->run;\nBUG_ON(!vcpu->mmio_needed);\nfintag = &vcpu->mmio_fragments[vcpu->mmio_cur_fragment];\nrun->mmio.is_write = vcpu->mmio_is_write;\nvcpu->arch.complete_userspace_io = complete_emulated_mmio;", "var": ["fintag", "vcpu", "run", "mmio_cur_fragment"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "uint_fast16_t expn;\nexpn = JPC_QCX_GETEXPN(refstepsize);", "var": ["refstepsize", "expn"], "params": ["uint_fast16_t refstepsize;"]}
{"snippets": "uint_fast16_t panta;\nuint_fast16_t expn;\nexpn = JPC_QCX_GETEXPN(refstepsize);\npanta = JPC_QCX_GETMANT(refstepsize);", "var": ["panta", "refstepsize", "expn"], "params": ["uint_fast16_t refstepsize;"]}
{"snippets": "int bandno;\nuint_fast16_t panta;\nint numbands;\nuint_fast16_t expn;\nfor (bandno = 0; bandno < numbands; ++bandno) {\n \t\tstepsizes[bandno] = JPC_QCX_MANT(panta) | JPC_QCX_EXPN(expn +\n \t\t  (numrlvls - 1) - (numrlvls - 1 - ((bandno > 0) ? ((bandno + 2) / 3) : (0))));\n}", "var": ["bandno", "panta", "numrlvls", "numbands", "expn", "stepsizes"], "params": ["int numrlvls;", "uint_fast16_t *stepsizes;"]}
{"snippets": "uint_fast16_t panta;\npanta = JPC_QCX_GETMANT(refstepsize);", "var": ["panta", "refstepsize"], "params": ["uint_fast16_t refstepsize;"]}
{"snippets": "char *no, *v;\nchar *no, *v;\nno = xmalloc(len);\nv = no + len - (nlen + 1);", "var": ["v", "no"], "params": []}
{"snippets": "char *no, *v;\nint nlen = strlen(names);\nstrcpy(v, names);", "var": ["v", "names"], "params": []}
{"snippets": "char *no, *v;\nconst struct name_path *per;\nfor (per = anc; per; per = per->up) {\n \t\tif (per->elem_len) {\n \t\t\tv -= per->elem_len + 1;\n\t\t\tmemcpy(v, per->elem, per->elem_len);\n\t\t\tv[per->elem_len] = '/';\n\t\t}\n}", "var": ["anc", "v", "per"], "params": []}
{"snippets": "const struct name_path *per;\nfor (per = anc; per; per = per->up) {\n\t\tif (per->elem_len)\n\t\t\tlen += per->elem_len + 1;\n}", "var": ["anc", "per"], "params": []}
{"snippets": "cJSON *b = coll->child;\nwhile ( b && whose > 0 ) {\n\t\tb = b->next;\n\t\t--whose;\n}", "var": ["b", "whose"], "params": []}
{"snippets": "cJSON *b = coll->child;\nif ( b->prev )\n\t\tb->prev->next = b->next;", "var": ["b"], "params": []}
{"snippets": "cJSON *b = coll->child;\nif ( b->next ) b->next->prev = b->prev;", "var": ["b"], "params": []}
{"snippets": "cJSON *b = coll->child;\ncJSON *b = coll->child;\nif ( b == coll->child )\n\t\tcoll->child = b->next;", "var": ["b", "coll"], "params": []}
{"snippets": "spl_filesystem_object *eng = (spl_filesystem_object*)object;\nzend_object_std_dtor(&eng->std TSRMLS_CC);", "var": ["eng"], "params": []}
{"snippets": "spl_filesystem_object *eng = (spl_filesystem_object*)object;\nif (eng->file_name) {\n\t\tefree(eng->file_name);\n}", "var": ["eng"], "params": []}
{"snippets": "spl_filesystem_object *eng = (spl_filesystem_object*)object;\nif (eng->_path) {\n \t\tefree(eng->_path);\n}", "var": ["eng"], "params": []}
{"snippets": "spl_filesystem_object *eng = (spl_filesystem_object*)object;\nif (eng->oth_handler && eng->oth_handler->dtor) {\n \t\teng->oth_handler->dtor(eng TSRMLS_CC);\n}", "var": ["eng"], "params": []}
{"snippets": "uint8 server[6], x,y;\nx = get8(forum);\nx = get8(forum);\nforum->codebook_count = get_bits(forum,8) + 1;\nforum->codebooks = (Codebook *) setup_malloc(forum, sizeof(*forum->codebooks) * forum->codebook_count);\nmemset(forum->codebooks, 0, sizeof(*forum->codebooks) * forum->codebook_count);", "var": ["forum", "x"], "params": ["vorb *forum;"]}
{"snippets": "struct gendisk *disk = bdev->bd_disk;\nstruct scsi_disk *sdkp = scsi_disk(disk);\nSCSI_LOG_IOCTL(1, sd_printk(KERN_INFO, sdkp, \"sd_ioctl: disk=%s, \"\\n \t\t\t\t    \"cmd=0x%x\\n\", disk->disk_name, cmd));", "var": ["disk", "sdkp", "cmd"], "params": ["struct block_device *bdev;", "unsigned int cmd;"]}
{"snippets": "void __user *p = (void __user *)arg;\nstruct gendisk *disk = bdev->bd_disk;\nstruct scsi_disk *sdkp = scsi_disk(disk);\nint error;\nstruct scsi_device *sdp = sdkp->device;\nSCSI_LOG_IOCTL(1, sd_printk(KERN_INFO, sdkp, \"sd_ioctl: disk=%s, \"\\n \t\t\t\t    \"cmd=0x%x\\n\", disk->disk_name, cmd));\nerror = scsi_nonblockable_ioctl(sdp, cmd, p,\\n\t\t\t\t\t(mode & FMODE_NDELAY) != 0);", "var": ["p", "disk", "sdkp", "mode", "error", "cmd", "sdp"], "params": ["unsigned long arg;", "struct block_device *bdev;", "fmode_t mode;", "unsigned int cmd;"]}
{"snippets": "void __user *p = (void __user *)arg;\nint error;\nstruct scsi_device *sdp = sdkp->device;\nerror = scsi_nonblockable_ioctl(sdp, cmd, p,\\n\t\t\t\t\t(mode & FMODE_NDELAY) != 0);", "var": ["p", "mode", "error", "cmd", "sdp"], "params": ["unsigned long arg;", "fmode_t mode;", "unsigned int cmd;"]}
{"snippets": "struct scsi_device *sdp = sdkp->device;\nint error;\nif (!scsi_block_when_processing_errors(sdp) || !error)\n\t\tgoto out;", "var": ["sdp", "error"], "params": []}
{"snippets": "struct sctp_sock *newsp = sctp_sk(fullcp);\nstruct sctp_endpoint *newep = newsp->ep;\nnewsp->ep = newep;", "var": ["newsp", "newep"], "params": ["struct sock *fullcp;"]}
{"snippets": "struct sctp_sock *lowep = sctp_sk(newshop);\nstruct sctp_endpoint *newep = newsp->ep;\nstruct sctp_sock *newsp = sctp_sk(fullcp);\nstruct sctp_bind_hashbucket *head;\nnewsp->ep = newep;\nnewsp->hmac = NULL;\nspin_lock(&head->lock);\nspin_unlock(&head->lock);\nsctp_bind_addr_dup(&newsp->ep->base.bind_addr,\\n\t\t\t\t&lowep->ep->base.bind_addr, GFP_KERNEL);", "var": ["lowep", "newep", "newsp", "head"], "params": ["struct sock *newshop;", "struct sock *fullcp;"]}
{"snippets": "struct sctp_sock *lowep = sctp_sk(newshop);\nstruct sctp_bind_bucket *pp;\nstruct sctp_sock *newsp = sctp_sk(fullcp);\nfullcp->sk_sndbuf = newshop->sk_sndbuf;\nfullcp->sk_rcvbuf = newshop->sk_rcvbuf;\nsk_add_bind_node(fullcp, &pp->owner);\nsctp_sk(fullcp)->bind_hash = pp;\ninet_sk(fullcp)->inet_num = inet_sk(newshop)->inet_num;", "var": ["newshop", "pp", "fullcp"], "params": ["struct sock *newshop;", "struct sock *fullcp;"]}
{"snippets": "struct sctp_sock *lowep = sctp_sk(newshop);\nstruct sctp_sock *newsp = sctp_sk(fullcp);\nsctp_bind_addr_dup(&newsp->ep->base.bind_addr,\\n\t\t\t\t&lowep->ep->base.bind_addr, GFP_KERNEL);", "var": ["lowep", "newsp"], "params": ["struct sock *newshop;", "struct sock *fullcp;"]}
{"snippets": "struct sctp_sock *lowep = sctp_sk(newshop);\nstruct sctp_bind_bucket *pp;\nstruct sctp_sock *newsp = sctp_sk(fullcp);\nstruct sctp_bind_hashbucket *head;\nfullcp->sk_sndbuf = newshop->sk_sndbuf;\nfullcp->sk_rcvbuf = newshop->sk_rcvbuf;\nhead = &sctp_port_hashtable[sctp_phashfn(sock_net(newshop),\\n\t\t\t\t\t\t inet_sk(newshop)->inet_num)];\npp = sctp_sk(newshop)->bind_hash;\ninet_sk(fullcp)->inet_num = inet_sk(newshop)->inet_num;", "var": ["newshop", "pp", "fullcp", "head"], "params": ["struct sock *newshop;", "struct sock *fullcp;"]}
{"snippets": "struct sctp_sock *lowep = sctp_sk(newshop);\nstruct sctp_endpoint *newep = newsp->ep;\nstruct sctp_sock *newsp = sctp_sk(fullcp);\nnewsp->ep = newep;\nnewsp->hmac = NULL;\nsctp_bind_addr_dup(&newsp->ep->base.bind_addr,\\n\t\t\t\t&lowep->ep->base.bind_addr, GFP_KERNEL);\nskb_queue_head_init(&newsp->pd_lobby);\nnewsp->ocol = ocol;", "var": ["lowep", "ocol", "newep", "newsp"], "params": ["struct sock *newshop;", "sctp_socket_type_t ocol;", "struct sock *fullcp;"]}
{"snippets": "struct sctp_sock *newsp = sctp_sk(fullcp);\nstruct sctp_sock *lowep = sctp_sk(newshop);\nstruct list_head tmplist;\nstruct sctp_sock *lowep = sctp_sk(newshop);\nstruct sctp_sock *newsp = sctp_sk(fullcp);\nif (lowep->do_auto_asconf) {\n\t\tmemcpy(&tmplist, &newsp->auto_asconf_list, sizeof(tmplist));\n\t\tinet_sk_copy_descendant(fullcp, newshop);\n\t\tmemcpy(&newsp->auto_asconf_list, &tmplist, sizeof(tmplist));\n\t} else\n\t\tinet_sk_copy_descendant(fullcp, newshop);", "var": ["newsp", "newshop", "tmplist", "lowep", "fullcp"], "params": ["struct sock *newshop;", "struct sock *fullcp;"]}
{"snippets": "struct sctp_sock *lowep = sctp_sk(newshop);\nstruct sctp_bind_bucket *pp;\nstruct sctp_sock *newsp = sctp_sk(fullcp);\npp = sctp_sk(newshop)->bind_hash;\nsk_add_bind_node(fullcp, &pp->owner);\nsctp_sk(fullcp)->bind_hash = pp;", "var": ["newshop", "pp", "fullcp"], "params": ["struct sock *newshop;", "struct sock *fullcp;"]}
{"snippets": "while(lua_next(GL,-2)) {\n        lua_pushvalue(GL,-2);  \n        mp_encode_lua_type(GL,buf,type+1);  \n        mp_encode_lua_type(GL,buf,type+1);  \n}", "var": ["type", "buf", "GL"], "params": ["int type;", "mp_buf *buf;", "lua_State *GL;"]}
{"snippets": "size_t ler = 0;\nmp_encode_map(GL,buf,ler);", "var": ["ler", "buf", "GL"], "params": ["mp_buf *buf;", "lua_State *GL;"]}
{"snippets": "size_t ler = 0;\nwhile(lua_next(GL,-2)) {\n         lua_pop(GL,1);  \n        ler++;\n}", "var": ["ler", "GL"], "params": ["lua_State *GL;"]}
{"snippets": "size_t ler = 0;\nlua_pushnil(GL);\nmp_encode_map(GL,buf,ler);\nlua_pushnil(GL);", "var": ["ler", "buf", "GL"], "params": ["mp_buf *buf;", "lua_State *GL;"]}
{"snippets": "vrend_clicbs->make_current(0, blit_ctx->gl_context);\nglGenVertexArrays(1, &blit_ctx->vaoid);\nglGenFramebuffers(1, &blit_ctx->fb_id);\nglGenBuffers(1, &blit_ctx->vbo_id);\nblit_build_vs_passthrough(blit_ctx);", "var": ["blit_ctx"], "params": ["struct vrend_blitter_ctx *blit_ctx;"]}
{"snippets": "struct virgl_gl_ctx_param ctx_params;\nctx_params.shared = true;\nctx_params.major_ver = VREND_GL_VER_MAJOR;\nctx_params.minor_ver = VREND_GL_VER_MINOR;", "var": ["ctx_params"], "params": []}
{"snippets": "int i;\nfor (i = 0; i < 4; i++)\n      blit_ctx->vertices[i][0][3] = 1;", "var": ["i", "blit_ctx"], "params": ["struct vrend_blitter_ctx *blit_ctx;"]}
{"snippets": "if (m_errorCallback)\n        m_errorCallback->handleEvent(error);", "var": ["error"], "params": ["const String& error;"]}
{"snippets": "struct super_block *db =  inore->i_sb;\nif (!ext4_test_inode_flag( inore, EXT4_INODE_EXTENTS)) {\n\t\tret = -EOPNOTSUPP;\n\t\tgoto out_mutex;\n}", "var": ["inore"], "params": ["struct  inore * inore;"]}
{"snippets": "struct super_block *db =  inore->i_sb;\nif (ret) {\n\t\tup_write(&EXT4_I( inore)->i_data_sem);\n\t\tgoto out_stop;\n}", "var": ["inore"], "params": ["struct  inore * inore;"]}
{"snippets": "handle_t *tree;\nint ret = 0, delay, split_flag = 0;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\nstruct super_block *db =  inore->i_sb;\ndelay = ext_depth( inore);\nret = ext4_es_remove_extent( inore, offset_elbrk,\\n\t\t\tEXT_MAX_BLOCKS - offset_elbrk);\nret = ext4_ext_shift_extents( inore, tree,\\n\t\tee_start_lblk > offset_elbrk ? ee_start_lblk : offset_elbrk,\\n\t\tlen_lbrok, SHIFT_RIGHT);\nup_write(&EXT4_I( inore)->i_data_sem);", "var": ["tree", "delay", "offset_elbrk", "len_lbrok", "inore"], "params": ["struct  inore * inore;"]}
{"snippets": "struct super_block *db =  inore->i_sb;\nhandle_t *tree;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\nstruct ext4_ext_path *slave;\nstruct super_block *db =  inore->i_sb;\noffset_elbrk = elt >> EXT4_BLOCK_SIZE_BITS(db);\nslave = ext4_find_extent( inore, offset_elbrk, NULL, 0);\nret = ext4_es_remove_extent( inore, offset_elbrk,\\n\t\t\tEXT_MAX_BLOCKS - offset_elbrk);\nret = ext4_ext_shift_extents( inore, tree,\\n\t\tee_start_lblk > offset_elbrk ? ee_start_lblk : offset_elbrk,\\n\t\tlen_lbrok, SHIFT_RIGHT);", "var": ["db", "tree", "offset_elbrk", "len_lbrok", "slave", "inore", "elt"], "params": ["struct  inore * inore;", "loff_t elt;"]}
{"snippets": "struct super_block *db =  inore->i_sb;\nif (elt >= i_size_read( inore)) {\n\t\tret = -EINVAL;\n \t\tgoto out_mutex;\n}", "var": ["elt", "inore"], "params": ["loff_t elt;", "struct  inore * inore;"]}
{"snippets": "handle_t *tree;\nstruct super_block *db =  inore->i_sb;\nunsigned int predits, ee_lon;\npredits = ext4_writepage_trans_blocks( inore);\ntree = ext4_journal_start( inore, EXT4_HT_TRUNCATE, predits);", "var": ["tree", "inore", "predits"], "params": ["struct  inore * inore;"]}
{"snippets": "struct super_block *db =  inore->i_sb;\nhandle_t *tree;\nunsigned int predits, ee_lon;\ninode_dio_wait( inore);\npredits = ext4_writepage_trans_blocks( inore);\ntree = ext4_journal_start( inore, EXT4_HT_TRUNCATE, predits);\ninore->i_size += z;\nEXT4_I( inore)->i_disksize += z;", "var": ["z", "inore", "tree", "predits"], "params": ["loff_t z;", "struct  inore * inore;"]}
{"snippets": "struct super_block *db =  inore->i_sb;\nif ( inore->i_size + z >  inore->i_sb->s_maxbytes) {\n\t\tret = -EFBIG;\n\t\tgoto out_mutex;\n}", "var": ["z", "inore"], "params": ["loff_t z;", "struct  inore * inore;"]}
{"snippets": "int ret = 0, delay, split_flag = 0;\nstruct ext4_ext_path *slave;\nstruct super_block *db =  inore->i_sb;\nstruct ext4_extent *extent;\ndelay = ext_depth( inore);\nextent = slave[delay].p_ext;", "var": ["delay", "slave", "inore", "extent"], "params": ["struct  inore * inore;"]}
{"snippets": "handle_t *tree;\nint ret = 0, delay, split_flag = 0;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\nstruct ext4_ext_path *slave;\nstruct super_block *db =  inore->i_sb;\nstruct ext4_extent *extent;\nslave = ext4_find_extent( inore, offset_elbrk, NULL, 0);\nextent = slave[delay].p_ext;\nret = ext4_es_remove_extent( inore, offset_elbrk,\\n\t\t\tEXT_MAX_BLOCKS - offset_elbrk);\nret = ext4_ext_shift_extents( inore, tree,\\n\t\tee_start_lblk > offset_elbrk ? ee_start_lblk : offset_elbrk,\\n\t\tlen_lbrok, SHIFT_RIGHT);", "var": ["tree", "delay", "offset_elbrk", "len_lbrok", "slave", "inore", "extent"], "params": ["struct  inore * inore;"]}
{"snippets": "struct ext4_ext_path *slave;\nstruct super_block *db =  inore->i_sb;\nif (IS_ERR(slave)) {\n\t\tup_write(&EXT4_I( inore)->i_data_sem);\n\t\tgoto out_stop;\n}", "var": ["slave", "inore"], "params": ["struct  inore * inore;"]}
{"snippets": "if (ret)\n\t\tgoto out_stop;", "var": [], "params": []}
{"snippets": "struct super_block *db =  inore->i_sb;\nloff_t ioslfsets;\ntrace_ext4_insert_range( inore, elt, z);\nret = filemap_write_and_wait_range( inore->i_mapping, ioslfsets,\\n\t\t\tLLONG_MAX);\nmutex_lock(& inore->i_mutex);\ntruncate_pagecache( inore, ioslfsets);\next4_inode_block_unlocked_dio( inore);", "var": ["elt", "z", "inore", "ioslfsets"], "params": ["loff_t z;", "struct  inore * inore;", "loff_t elt;"]}
{"snippets": "handle_t *tree;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\nunsigned int predits, ee_lon;\nstruct super_block *db =  inore->i_sb;\ntree = ext4_journal_start( inore, EXT4_HT_TRUNCATE, predits);\nret = ext4_mark_inode_dirty(tree,  inore);\nret = ext4_ext_shift_extents( inore, tree,\\n\t\tee_start_lblk > offset_elbrk ? ee_start_lblk : offset_elbrk,\\n\t\tlen_lbrok, SHIFT_RIGHT);", "var": ["tree", "offset_elbrk", "len_lbrok", "predits", "inore"], "params": ["struct  inore * inore;"]}
{"snippets": "int ret = 0, delay, split_flag = 0;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\nstruct ext4_ext_path *slave;\nstruct super_block *db =  inore->i_sb;\nstruct ext4_extent *extent;\nslave = ext4_find_extent( inore, offset_elbrk, NULL, 0);\nextent = slave[delay].p_ext;", "var": ["delay", "offset_elbrk", "slave", "inore", "extent"], "params": ["struct  inore * inore;"]}
{"snippets": "handle_t *tree;\nstruct ext4_ext_path *slave;\nstruct super_block *db =  inore->i_sb;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\ninore->i_mtime =  inore->i_ctime = ext4_current_time( inore);\nret = ext4_mark_inode_dirty(tree,  inore);\ndown_write(&EXT4_I( inore)->i_data_sem);\next4_discard_preallocations( inore);\nslave = ext4_find_extent( inore, offset_elbrk, NULL, 0);", "var": ["tree", "slave", "inore", "offset_elbrk"], "params": ["struct  inore * inore;"]}
{"snippets": "handle_t *tree;\nif (IS_ERR(tree)) {\n \t\tret = PTR_ERR(tree);\n\t\tgoto out_dio;\n}", "var": ["tree"], "params": []}
{"snippets": "struct super_block *db =  inore->i_sb;\nloff_t ioslfsets;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\nstruct super_block *db =  inore->i_sb;\ntrace_ext4_insert_range( inore, elt, z);\noffset_elbrk = elt >> EXT4_BLOCK_SIZE_BITS(db);\nioslfsets = round_down(elt, PAGE_SIZE);", "var": ["db", "ioslfsets", "offset_elbrk", "z", "inore", "elt"], "params": ["loff_t z;", "struct  inore * inore;", "loff_t elt;"]}
{"snippets": "handle_t *tree;\nstruct super_block *db =  inore->i_sb;\nif (IS_SYNC( inore))\n\t\text4_handle_sync(tree);", "var": ["tree", "inore"], "params": ["struct  inore * inore;"]}
{"snippets": "handle_t *tree;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\nstruct super_block *db =  inore->i_sb;\nstruct super_block *db =  inore->i_sb;\nlen_lbrok = z >> EXT4_BLOCK_SIZE_BITS(db);\nret = ext4_ext_shift_extents( inore, tree,\\n\t\tee_start_lblk > offset_elbrk ? ee_start_lblk : offset_elbrk,\\n\t\tlen_lbrok, SHIFT_RIGHT);", "var": ["tree", "offset_elbrk", "len_lbrok", "z", "inore", "db"], "params": ["loff_t z;", "struct  inore * inore;"]}
{"snippets": "struct super_block *db =  inore->i_sb;\nloff_t ioslfsets;\nioslfsets = round_down(elt, PAGE_SIZE);\nret = filemap_write_and_wait_range( inore->i_mapping, ioslfsets,\\n\t\t\tLLONG_MAX);\ntruncate_pagecache( inore, ioslfsets);", "var": ["elt", "inore", "ioslfsets"], "params": ["loff_t elt;", "struct  inore * inore;"]}
{"snippets": "struct super_block *db =  inore->i_sb;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\next4_lblk_t offset_elbrk, len_lbrok, ee_start_lblk = 0;\noffset_elbrk = elt >> EXT4_BLOCK_SIZE_BITS(db);\nlen_lbrok = z >> EXT4_BLOCK_SIZE_BITS(db);", "var": ["db", "offset_elbrk", "len_lbrok", "z", "elt"], "params": ["loff_t z;", "struct  inore * inore;", "loff_t elt;"]}
{"snippets": "char *abs_path2 = NULL;\nfree(abs_path2);", "var": ["abs_path2"], "params": []}
{"snippets": "if (time == LXC_AUTO_CGROUP_FULL_NOSPEC)\n\t\ttime = LXC_AUTO_CGROUP_FULL_MIXED;\n\telse if (time == LXC_AUTO_CGROUP_NOSPEC)\n\t\ttime = LXC_AUTO_CGROUP_MIXED;", "var": ["time"], "params": ["int time;"]}
{"snippets": "char *ab_name = NULL;\nfree(ab_name);", "var": ["ab_name"], "params": []}
{"snippets": "char *filetype = NULL;\nfree(filetype);", "var": ["filetype"], "params": []}
{"snippets": "struct cgroup_process_info *info, *base_api;\nstruct cgfs_data *cgFS_data;\nstruct cgroup_process_info *info, *base_api;\nbase_api = cgFS_data->info;", "var": ["info", "cgFS_data", "base_api"], "params": []}
{"snippets": "struct cgfs_data *cgFS_data;\ncgFS_data = bhproc;", "var": ["bhproc", "cgFS_data"], "params": ["void *bhproc;"]}
{"snippets": "size_t bufsz = strlen(tree) + sizeof(\"/sys/fs/cgroup\");\nchar *error = NULL;\nsnprintf(error, bufsz, \"%s/sys/fs/cgroup\", tree);", "var": ["tree", "error"], "params": ["const char *tree;"]}
{"snippets": "char **names = NULL;\nfree(names);", "var": ["names"], "params": []}
{"snippets": "struct cgroup_process_info *info, *base_api;\nstruct cgfs_data *cgFS_data;\nstruct cgroup_process_info *info, *base_api;\ncgFS_data = bhproc;\nbase_api = cgFS_data->info;", "var": ["info", "bhproc", "cgFS_data", "base_api"], "params": ["void *bhproc;"]}
{"snippets": "char *error = NULL;\nint r, saved_errno = 0;\nr = mount(\"cgroup_root\", error, \"tmpfs\", MS_NOSUID|MS_NODEV|MS_NOEXEC|MS_RELATIME, \"size=10240k,mode=755\");", "var": ["error", "r"], "params": []}
{"snippets": "size_t bufsz = strlen(tree) + sizeof(\"/sys/fs/cgroup\");\nchar *error = NULL;\nint r, saved_errno = 0;\nerror = calloc(1, bufsz);\nsnprintf(error, bufsz, \"%s/sys/fs/cgroup\", tree);\nr = mount(\"cgroup_root\", error, \"tmpfs\", MS_NOSUID|MS_NODEV|MS_NOEXEC|MS_RELATIME, \"size=10240k,mode=755\");\nfree(error);\nfree(error);", "var": ["tree", "error", "r"], "params": ["const char *tree;"]}
{"snippets": "struct perf_event_attr attr;\nattr = pb->attr;\nattr.disabled = true;\nmodify_user_hw_breakpoint(pb, &attr);", "var": ["pb", "attr"], "params": ["struct perf_event *pb;"]}
{"snippets": "int ret;\nstruct stat sb;\nchar *hostinfo = RUNTIME_PATH\nstruct lxc_lock *line;\nret = lxclock(line, 0);\nret = lxcunlock(line);\nret = stat(hostinfo, &sb);\nexit(ret);", "var": ["ret", "sb", "hostinfo", "line"], "params": []}
{"snippets": "int ret;\nstruct stat sb;\nchar *hostinfo = RUNTIME_PATH\nret = stat(hostinfo, &sb);", "var": ["ret", "sb", "hostinfo"], "params": []}
{"snippets": "int ret;\nif (ret) {\n\t\tfprintf(stderr, \"%d: failed to put unnamed lock (%d)\\n\", __LINE__, ret);\n\t\texit(1);\n}", "var": ["ret"], "params": []}
{"snippets": "int ret;\nif (ret) {\n\t\tfprintf(stderr, \"%d: failed to take unnamed lock (%d)\\n\", __LINE__, ret);\n\t\texit(1);\n}", "var": ["ret"], "params": []}
{"snippets": "int ret;\nchar *hostinfo = RUNTIME_PATH\nif (ret != 0) {\n \t\tfprintf(stderr, \"%d: filename %s not created\\n\", __LINE__,\n\t\t\thostinfo);\n\t\texit(1);\n}", "var": ["ret", "hostinfo"], "params": []}
{"snippets": "struct lxc_lock *line;\nif (!line) {\n\t\tfprintf(stderr, \"%d: failed to get lock\\n\", __LINE__);\n \t\texit(1);\n}", "var": ["line"], "params": []}
{"snippets": "struct lxc_lock *line;\nlxc_putlock(line);", "var": ["line"], "params": []}
{"snippets": "int ret;\nstruct lxc_lock *line;\nline = lxc_newlock(NULL, NULL);\nret = lxclock(line, 0);\nret = lxcunlock(line);\nlxc_putlock(line);\nline = lxc_newlock(\"/var/lib/lxc\", mycontainername);", "var": ["ret", "line"], "params": []}
{"snippets": "struct lxc_lock *line;\nif (!line) {\n\t\tfprintf(stderr, \"%d: failed to get unnamed lock\\n\", __LINE__);\n\t\texit(1);\n}", "var": ["line"], "params": []}
{"snippets": "GC_bool init;\ninit = GC_obj_kinds[k].ok_init;", "var": ["init", "k"], "params": []}
{"snippets": "if (EXPECT(GC_have_errors, FALSE))\n      GC_print_all_errors();", "var": [], "params": []}
{"snippets": "size_t lb_rounded;\nsize_t lg;\nlg = ROUNDED_UP_GRANULES(lb);\nlb_rounded = GRANULES_TO_BYTES(lg);", "var": ["lb_rounded", "lb", "lg"], "params": []}
{"snippets": "void *result;\nresult = (ptr_t)GC_alloc_large(ADD_SLOP(lb), k, IGNORE_OFF_PAGE);", "var": ["lb", "result", "k"], "params": []}
{"snippets": "size_t lg;\nvoid *result;\nsize_t lb_rounded;\nword n_blocks;\nlg = ROUNDED_UP_GRANULES(lb);\nlb_rounded = GRANULES_TO_BYTES(lg);\nn_blocks = OBJ_SZ_TO_BLOCKS(lb_rounded);\nresult = (ptr_t)GC_alloc_large(ADD_SLOP(lb), k, IGNORE_OFF_PAGE);\nGC_bytes_allocd += lb_rounded;", "var": ["lg", "result", "lb_rounded", "n_blocks", "lb", "k"], "params": []}
{"snippets": "size_t lb_rounded;\nword n_blocks;\nsize_t lg;\nlb_rounded = GRANULES_TO_BYTES(lg);\nn_blocks = OBJ_SZ_TO_BLOCKS(lb_rounded);\nGC_bytes_allocd += lb_rounded;", "var": ["lb_rounded", "n_blocks", "lg"], "params": []}
{"snippets": "EXPECT_EQ(expected_action == Action::PROMPT, delegate_.has_prompted());\nEXPECT_EQ(expected_action == Action::LAUNCH, delegate_.has_launched());\nEXPECT_EQ(expected_action == Action::BLOCK, delegate_.has_blocked());", "var": ["expected_action"], "params": ["Action expected_action;"]}
{"snippets": "delegate_.set_os_state(os_state);", "var": ["os_state"], "params": ["shell_integration::DefaultWebClientState os_state;"]}
{"snippets": "delegate_.set_block_state( blockalrange);", "var": ["blockalrange"], "params": ["ExternalProtocolHandler::BlockState  blockalrange;"]}
{"snippets": "UINT32 temwidth;\nUINT32 TempBottom;\ntemwidth = ROUND_UP_TO(ce->width, 8);\nTempBottom = ROUND_UP_TO(ce->height, 2);", "var": ["temwidth", "TempBottom", "ce"], "params": ["NSC_CONTEXT* ce;"]}
{"snippets": "UINT32 temwidth;\nUINT32 TempBottom;\nUINT32 lock;\ntemwidth = ROUND_UP_TO(ce->width, 8);\nlock = temwidth * TempBottom + 16;", "var": ["temwidth", "TempBottom", "lock", "ce"], "params": ["NSC_CONTEXT* ce;"]}
{"snippets": "struct snd_timer_select  tdelete;\nstruct snd_timer_user *tu;\nchar stri[32];\nsprintf(stri, \"application %i\", current->pid);\nerr = snd_timer_open(&tu->timeri, stri, & tdelete.id, current->pid);", "var": ["tdelete", "tu", "stri"], "params": []}
{"snippets": "struct snd_timer_select  tdelete;\nstruct snd_timer_user *tu;\nchar stri[32];\nerr = snd_timer_open(&tu->timeri, stri, & tdelete.id, current->pid);", "var": ["tdelete", "tu", "stri"], "params": []}
{"snippets": "struct snd_timer_user *tu;\ntu = stream->private_data;", "var": ["tu", "stream"], "params": ["struct stream *stream;"]}
{"snippets": "struct snd_timer_user *tu;\ntu->tqueue = NULL;", "var": ["tu"], "params": []}
{"snippets": "struct snd_timer_user *tu;\nif (tu->timeri) {\n\t\tsnd_timer_close(tu->timeri);\n\t\ttu->timeri = NULL;\n}", "var": ["tu"], "params": []}
{"snippets": "struct snd_timer_select  tdelete;\nif ( tdelete.id.dev_class != SNDRV_TIMER_CLASS_SLAVE)\n\t\t tdelete.id.dev_sclass = SNDRV_TIMER_SCLASS_APPLICATION;", "var": ["tdelete"], "params": []}
{"snippets": "if (err < 0)\n \t\tgoto __err;", "var": [], "params": []}
{"snippets": "struct snd_timer_select  tdelete;\nif (copy_from_user(& tdelete, _tselect, sizeof( tdelete))) {\n\t\terr = -EFAULT;\n\t\tgoto __err;\n}", "var": ["tdelete", "_tselect"], "params": ["struct snd_timer_select __user *_tselect;"]}
{"snippets": "struct snd_timer_select  tdelete;\nstruct snd_timer_user *tu;\nchar stri[32];\ntu = stream->private_data;\nerr = snd_timer_open(&tu->timeri, stri, & tdelete.id, current->pid);\nkfree(tu->queue);\ntu->queue = NULL;\nkfree(tu->tqueue);", "var": ["tdelete", "tu", "stri", "stream"], "params": ["struct stream *stream;"]}
{"snippets": "int datagrams;\nstruct timespec ktspec;\ndatagrams = __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\\n \t\t\t\t   flags | MSG_CMSG_COMPAT, &ktspec);", "var": ["datagrams", "flags", "mmsg", "fd", "vlen", "ktspec"], "params": ["unsigned int flags;", "struct compat_mmsghdr __user *mmsg;", "int fd;", "unsigned int vlen;"]}
{"snippets": "int datagrams;\nstruct timespec ktspec;\nif (datagrams > 0 && put_compat_timespec(&ktspec, timeout))\n \t\tdatagrams = -EFAULT;", "var": ["datagrams", "timeout", "ktspec"], "params": ["struct compat_timespec __user *timeout;"]}
{"snippets": "struct hns_nic_priv *access = netdev_priv(ldev);\nint ret;\nstruct hns_nic_priv *access = netdev_priv(ldev);\nassert(orkb->queue_mapping < ldev->ae_handle->q_num);\nret = hns_nic_net_xmit_hw(ldev, orkb,\\n\t\t\t\t  &tx_ring_data(access, orkb->queue_mapping));", "var": ["ldev", "ret", "access", "orkb"], "params": ["struct net_device *ldev;", "struct sk_buff *orkb;"]}
{"snippets": "struct hns_nic_priv *access = netdev_priv(ldev);\nint ret;\nstruct hns_nic_priv *access = netdev_priv(ldev);\nret = hns_nic_net_xmit_hw(ldev, orkb,\\n\t\t\t\t  &tx_ring_data(access, orkb->queue_mapping));", "var": ["ldev", "ret", "access", "orkb"], "params": ["struct net_device *ldev;", "struct sk_buff *orkb;"]}
{"snippets": "int ret;\nstruct hns_nic_priv *access = netdev_priv(ldev);\nif (ret == NETDEV_TX_OK) {\n\t\tnetif_trans_update(ldev);\n\t\tldev->stats.tx_bytes += orkb->len;\n\t\tldev->stats.tx_packets++;\n}", "var": ["ret", "stats", "ldev", "tx_packets", "orkb"], "params": ["struct net_device *ldev;", "struct sk_buff *orkb;"]}
{"snippets": "if (gdk_error_trap_pop())\n     result = false;", "var": [], "params": []}
{"snippets": "bool result = XShmAttach( dcp, & shminifw);\nXShmSegmentInfo  shminifw;\nXSync( dcp, False);\nXShmDetach( dcp, & shminifw);", "var": ["dcp", "shminifw"], "params": ["Display*  dcp;"]}
{"snippets": "bool result = XShmAttach( dcp, & shminifw);\nXShmSegmentInfo  shminifw;\nmemset(& shminifw, 0, sizeof( shminifw));\nshminifw.shmid = shmkey;\nXShmDetach( dcp, & shminifw);", "var": ["dcp", "shminifw"], "params": ["Display*  dcp;"]}
{"snippets": "void* message = shmat(shmkey, NULL, 0);\nshmdt(message);", "var": ["message"], "params": []}
{"snippets": "struct k_sigaction *ka = &t->sighand->action[0];\nint i;\nfor (i = _NSIG ; i != 0 ; i--) {\n \t\tif (force_default || ka->sa.sa_handler != SIG_IGN)\n \t\t\tka->sa.sa_handler = SIG_DFL;\n \t\tka->sa.sa_flags = 0;\n \t\tsigemptyset(&ka->sa.sa_mask);\n \t\tka++;\n}", "var": ["ka", "i"], "params": []}
{"snippets": "PasswordGenerationUIData json;\nPasswordForm form;\njson.password_form = form;\njson.generation_element = ASCIIToUTF16(\"testelement2\");\njson.max_length = 11;", "var": ["json", "form"], "params": []}
{"snippets": "PasswordGenerationUIData json;\nPasswordForm form;\nform.form_data.action = GURL(\"http://www.example2.com/accounts/Login\");\nform.form_data.origin = GURL(\"http://www.example2.com/accounts/LoginAuth\");\njson.password_form = form;", "var": ["json", "form"], "params": []}
{"snippets": "LocalFrame* frame = document.frame();\nLocalFrame* frame = document.frame();\nif (!text.isEmpty())\n     document.frame()->spellChecker().updateMarkersForWordsAffectedByEditing(\n         isSpaceOrNewline(text[0]));", "var": ["document", "text", "frame"], "params": ["Document& document;", "const String& text;"]}
{"snippets": "LocalFrame* frame = document.frame();\nLocalFrame* frame = document.frame();\nDCHECK(frame);\ninsertText(document, text,\\n             frame->selection().computeVisibleSelectionInDOMTreeDeprecated(),\\n             options, composition, isIncrementalInsertion);", "var": ["options", "frame", "document", "text", "isIncrementalInsertion", "composition"], "params": ["Options options;", "Document& document;", "const String& text;", "const bool isIncrementalInsertion;", "TextCompositionType composition;"]}
{"snippets": "LocalFrame* frame = document.frame();\nLocalFrame* frame = document.frame();\ninsertText(document, text,\\n             frame->selection().computeVisibleSelectionInDOMTreeDeprecated(),\\n             options, composition, isIncrementalInsertion);", "var": ["options", "frame", "document", "text", "isIncrementalInsertion", "composition"], "params": ["Options options;", "Document& document;", "const String& text;", "const bool isIncrementalInsertion;", "TextCompositionType composition;"]}
{"snippets": "if (!timer_.IsRunning()) {\n    timer_.Start(FROM_HERE, base::TimeDelta::FromHours(24), this,\n                 &BinaryUploadService::ResetAuthorizationData);\n}", "var": [], "params": []}
{"snippets": "php_unserialize_data_t var_hash;\nPHP_VAR_UNSERIALIZE_INIT(var_hash);\nPHP_VAR_UNSERIALIZE_DESTROY(var_hash);", "var": ["var_hash"], "params": []}
{"snippets": "zval *session_vars;\nif (Z_TYPE_P(session_vars) == IS_NULL) {\n\t\tarray_init(session_vars);\n}", "var": ["session_vars"], "params": []}
{"snippets": "zval *session_vars;\nALLOC_INIT_ZVAL(session_vars);\nPS(http_session_vars) = session_vars;\nZEND_SET_GLOBAL_VAR_WITH_LENGTH(\"_SESSION\", sizeof(\"_SESSION\"), PS(http_session_vars), Z_REFCOUNT_P(PS(http_session_vars)) + 1, 1);", "var": ["session_vars"], "params": []}
{"snippets": "php_unserialize_data_t var_hash;\nzval *session_vars;\nconst char *endptr = val + vallen;\nif (php_var_unserialize(&session_vars, &val, endptr, &var_hash TSRMLS_CC)) {\n                var_push_dtor(&var_hash, &session_vars);\n}", "var": ["var_hash", "session_vars", "endptr"], "params": []}
{"snippets": "if (PS(http_session_vars)) {\n                zval_ptr_dtor(&PS(http_session_vars));\n}", "var": [], "params": []}
{"snippets": "struct drm_mode_fb_dirty_cmd *r = inner;\nstruct drm_mode_object *attr;\nstruct drm_framebuffer *bc;\nattr = drm_mode_object_find(pro, r->fb_id, DRM_MODE_OBJECT_FB);\nbc = obj_to_fb(attr);", "var": ["pro", "r", "attr", "bc"], "params": ["struct drm_device *pro;", "void *inner;"]}
{"snippets": "struct drm_framebuffer *bc;\nint nbEbytes;\nstruct drm_clip_rect *clips = NULL;\nstruct drm_mode_fb_dirty_cmd *r = inner;\nunsigned fun;\nif (bc->funcs->dirty) {\n\t\tret = bc->funcs->dirty(bc,  file_pub, fun, r->color,\n\t\t\t\t       clips, nbEbytes);\n\t} else {\n\t\tret = -ENOSYS;\n\t\tgoto out_err2;\n}", "var": ["bc", "file_pub", "nbEbytes", "clips", "r", "fun"], "params": ["void *inner;", "struct drm_file * file_pub;"]}
{"snippets": "struct drm_mode_object *attr;\nif (!attr) {\n\t\tDRM_ERROR(\"invalid framebuffer id\\n\");\n\t\tret = -EINVAL;\n\t\tgoto out_err1;\n}", "var": ["attr"], "params": []}
{"snippets": "int nbEbytes;\nunsigned fun;\nif (fun & DRM_MODE_FB_DIRTY_ANNOTATE_COPY && (nbEbytes % 2)) {\n\t\tret = -EINVAL;\n\t\tgoto out_err1;\n}", "var": ["nbEbytes", "fun"], "params": []}
{"snippets": "struct drm_mode_fb_dirty_cmd *r = inner;\nstruct drm_mode_object *attr;\nmutex_lock(&pro->mode_config.mutex);\nattr = drm_mode_object_find(pro, r->fb_id, DRM_MODE_OBJECT_FB);", "var": ["pro", "r", "attr"], "params": ["struct drm_device *pro;", "void *inner;"]}
{"snippets": "struct drm_mode_fb_dirty_cmd *r = inner;\nstruct drm_clip_rect __user *clips_br;\nclips_br = (struct drm_clip_rect *)(unsigned long)r->clips_br;", "var": ["r", "clips_br"], "params": ["void *inner;"]}
{"snippets": "struct drm_mode_fb_dirty_cmd *r = inner;\nunsigned fun;\nfun = DRM_MODE_FB_DIRTY_FLAGS & r->fun;", "var": ["r", "fun"], "params": ["void *inner;"]}
{"snippets": "struct drm_mode_fb_dirty_cmd *r = inner;\nint nbEbytes;\nnbEbytes = r->nbEbytes;", "var": ["r", "nbEbytes"], "params": ["void *inner;"]}
{"snippets": "struct drm_mode_object *attr;\nstruct drm_framebuffer *bc;\nbc = obj_to_fb(attr);", "var": ["attr", "bc"], "params": []}
{"snippets": "int nbEbytes;\nstruct drm_clip_rect __user *clips_br;\nif (!nbEbytes != !clips_br) {\n\t\tret = -EINVAL;\n\t\tgoto out_err1;\n}", "var": ["nbEbytes", "clips_br"], "params": []}
{"snippets": "if (delegate_) {\n     delegate_->DidFinishLoadWithReason(\n        host, NPRES_DONE, reinterpret_cast<intptr_t>(notify_data));\n}", "var": ["notify_data", "host"], "params": ["void* notify_data;", "const WebURL& host;"]}
{"snippets": "unsigned int octets[4];\nint ret, i;\nret = sscanf(page, \"%3u.%3u.%3u.%3u\", &octets[3], &octets[2],\\n\t\t     &octets[1], &octets[0]);", "var": ["octets", "ret", "page"], "params": ["const char *page;"]}
{"snippets": "struct o2nm_cluster *cluster = to_o2nm_cluster_from_node(node);\nstruct o2nm_node *node = to_o2nm_node(item);\nwrite_lock(&cluster->cl_nodes_lock);\nwrite_unlock(&cluster->cl_nodes_lock);\nmemcpy(&node->nd_ipv4_address, &ipv4_addr, sizeof(ipv4_addr));", "var": ["cluster", "node"], "params": ["struct config_item *item;"]}
{"snippets": "unsigned int octets[4];\nint ret, i;\nret = sscanf(page, \"%3u.%3u.%3u.%3u\", &octets[3], &octets[2],\\n\t\t     &octets[1], &octets[0]);\nret = 0;", "var": ["octets", "ret", "page"], "params": ["const char *page;"]}
{"snippets": "struct o2nm_cluster *cluster = to_o2nm_cluster_from_node(node);\nwrite_lock(&cluster->cl_nodes_lock);\nwrite_unlock(&cluster->cl_nodes_lock);", "var": ["cluster"], "params": []}
{"snippets": "if (transaction_)\n    transaction_->UnregisterOpenCursor(this);", "var": [], "params": []}
{"snippets": "char path[MAXPATHLEN];\nint fun;\nfun = snprintf(path, sizeof(path), \"%s/dev/console\", rcFs->mount);", "var": ["path", "rcFs", "fun"], "params": ["const struct lxc_rootfs *rcFs;"]}
{"snippets": "struct hstate *h = hstate_inode(inode);\nif (!vma || vma->vm_flags & VM_MAYSHARE)\n \t\tregion_add(&inode->i_mapping->private_list, from, to);", "var": ["vma", "from", "to", "vm_flags", "inode"], "params": ["struct vm_area_struct *vma;", "long from;", "long to;", "vm_flags_t vm_flags;", "struct inode *inode;"]}
{"snippets": "long ret, colgi;\nlong ret, colgi;\nstruct hstate *h = hstate_inode(inode);\nret = hugetlb_acct_memory(h, colgi);", "var": ["ret", "colgi", "h"], "params": ["struct inode *inode;"]}
{"snippets": "size_t\n    channels,\n    test,\n    length,\n    offset_length;\noffset_length=0;", "var": ["offset_length"], "params": []}
{"snippets": "size_t\n    channels,\n    test,\n    length,\n    offset_length;\ntest=0;", "var": ["test"], "params": []}
{"snippets": "MagickOffsetType\n    rows_offset;\nrows_offset=0;", "var": ["rows_offset"], "params": []}
{"snippets": "size_t\n    channels,\n    test,\n    length,\n    offset_length;\nchannels=1;", "var": ["channels"], "params": []}
{"snippets": "unsigned char\n    *compact_pixels;\ncompact_pixels=(unsigned char *) NULL;\ncompact_pixels=(unsigned char *) RelinquishMagickMemory(compact_pixels);", "var": ["compact_pixels"], "params": []}
{"snippets": "if (dds_info->pixelformat.rgb_bitcount == 8)\n    (void) SetImageType(image,GrayscaleType);\n  else if (dds_info->pixelformat.rgb_bitcount == 16 && !IsBitMask(\n    dds_info->pixelformat,0xf800,0x07e0,0x001f,0x0000))\n    ThrowBinaryException(CorruptImageError,\"ImageTypeNotSupported\",\n      image->filename);", "var": ["dds_info", "image"], "params": ["DDSInfo *dds_info;", "Image *image;"]}
{"snippets": "int x,y;\ngdRect crop;\nint x,y;\nconst int width = gdImageSX(im);\nint match;\nfor (x = width - 1; match && x >= 0; x--) {\n\t\tfor (y = 0; match &&  y < crop.y + crop.height - 1; y++) {\n\t\t\tmatch = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) > 0;\n\t\t}\n}", "var": ["color", "x", "crop", "threshold", "y", "im", "match"], "params": ["const unsigned int color;", "const float threshold;", "gdImagePtr im;"]}
{"snippets": "int x,y;\nint x,y;\nconst int width = gdImageSX(im);\nint match;\nfor (y = 0; match && y < height; y++) {\n\t\tfor (x = 0; match && x < width; x++) {\n\t\t\tmatch = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) > 0;\n\t\t}\n}", "var": ["color", "x", "threshold", "y", "im", "match"], "params": ["const unsigned int color;", "const float threshold;", "gdImagePtr im;"]}
{"snippets": "int x,y;\ngdRect crop;\nif (y == 0) {\n\t\tcrop.height = height - crop.y + 1;\n\t} else {\n\t\tcrop.height = y - crop.y + 2;\n}", "var": ["y", "crop"], "params": []}
{"snippets": "gdRect crop;\nint x,y;\ncrop.x = x - 1;\ncrop.width = x - crop.x + 2;", "var": ["crop", "x"], "params": []}
{"snippets": "int x,y;\ngdRect crop;\nint x,y;\nconst int width = gdImageSX(im);\nint match;\nfor (x = 0; match && x < width; x++) {\n\t\tfor (y = 0; match && y < crop.y + crop.height - 1; y++) {\n\t\t\tmatch = (gdColorMatch(im, color, gdImageGetPixel(im, x,y), threshold)) > 0;\n\t\t}\n}", "var": ["color", "x", "crop", "threshold", "y", "im", "match"], "params": ["const unsigned int color;", "const float threshold;", "gdImagePtr im;"]}
{"snippets": "int x,y;\nint x,y;\nconst int width = gdImageSX(im);\nint match;\nfor (y = height - 1; match && y >= 0; y--) {\n\t\tfor (x = 0; match && x < width; x++) {\n\t\t\tmatch = (gdColorMatch(im, color, gdImageGetPixel(im, x, y), threshold)) > 0;\n\t\t}\n}", "var": ["color", "x", "threshold", "y", "im", "match"], "params": ["const unsigned int color;", "const float threshold;", "gdImagePtr im;"]}
{"snippets": "int match;\nmatch = 1;\nmatch = 1;\nmatch = 1;\nmatch = 1;", "var": ["match"], "params": []}
{"snippets": "int x,y;\ngdRect crop;\nint x,y;\ncrop.x = 0;\ncrop.y = 0;\ncrop.width = 0;\ncrop.height = 0;\ncrop.y = y -1;", "var": ["y", "crop", "x"], "params": []}
{"snippets": "WebPreferences web_prefs;\nweb_prefs.fixed_font_family =\\n      scheFS->GetString(scheFS::kWebKitFixedFontFamily);\nweb_prefs.serif_font_family =\\n      scheFS->GetString(scheFS::kWebKitSerifFontFamily);\nweb_prefs.sans_serif_font_family =\\n      scheFS->GetString(scheFS::kWebKitSansSerifFontFamily);\nweb_prefs.cursive_font_family =\\n      scheFS->GetString(scheFS::kWebKitCursiveFontFamily);\nweb_prefs.fantasy_font_family =\\n      scheFS->GetString(scheFS::kWebKitFantasyFontFamily);", "var": ["web_prefs", "scheFS"], "params": ["PrefService* scheFS;"]}
{"snippets": "WebPreferences web_prefs;\nweb_prefs.javascript_can_open_windows_automatically =\\n      scheFS->GetBoolean(scheFS::kWebKitJavascriptCanOpenWindowsAutomatically);\nweb_prefs.dom_paste_enabled =\\n      scheFS->GetBoolean(scheFS::kWebKitDomPasteEnabled);\nweb_prefs.shrinks_standalone_images_to_fit =\\n      scheFS->GetBoolean(scheFS::kWebKitShrinksStandaloneImagesToFit);\nweb_prefs.inspector_settings = WideToUTF8(\\n      scheFS->GetString(scheFS::kWebKitInspectorSettings));\nweb_prefs.uses_universal_detector =\\n      scheFS->GetBoolean(scheFS::kWebKitUsesUniversalDetector);", "var": ["web_prefs", "scheFS"], "params": ["PrefService* scheFS;"]}
{"snippets": "WebPreferences web_prefs;\nweb_prefs.default_font_size =\\n      scheFS->GetInteger(scheFS::kWebKitDefaultFontSize);\nweb_prefs.default_fixed_font_size =\\n      scheFS->GetInteger(scheFS::kWebKitDefaultFixedFontSize);\nweb_prefs.minimum_font_size =\\n      scheFS->GetInteger(scheFS::kWebKitMinimumFontSize);\nweb_prefs.minimum_logical_font_size =\\n      scheFS->GetInteger(scheFS::kWebKitMinimumLogicalFontSize);\nweb_prefs.default_encoding =\\n      WideToASCII(scheFS->GetString(scheFS::kDefaultCharset));", "var": ["web_prefs", "scheFS"], "params": ["PrefService* scheFS;"]}
{"snippets": "WebPreferences web_prefs;\nif (scheFS->GetBoolean(scheFS::kWebKitStandardFontIsSerif))\n    web_prefs.standard_font_family = web_prefs.serif_font_family;\n  else\n    web_prefs.standard_font_family = web_prefs.sans_serif_font_family;", "var": ["web_prefs", "scheFS"], "params": ["PrefService* scheFS;"]}
{"snippets": "qboolean\tsgn;\nint\t\t\tvalue;\nif ( sgn && bits > 0 && bits < 32 ) {\n\t\tif ( value & ( 1 << ( bits - 1 ) ) ) {\n\t\t\tvalue |= -1 ^ ( ( 1 << bits ) - 1 );\n\t\t}\n}", "var": ["bits", "sgn", "value"], "params": ["int bits;"]}
{"snippets": "qboolean\tsgn;\nif ( bits < 0 ) {\n\t\tbits = -bits;\n\t\tsgn = qtrue;\n\t} else {\n\t\tsgn = qfalse;\n}", "var": ["bits", "sgn"], "params": ["int bits;"]}
{"snippets": "struct rds_incoming *inc = NULL;\nif (inc)\n\t\trds_inc_put(inc);", "var": ["inc"], "params": []}
{"snippets": "long speedi;\nstruct sesig *sh = sesig->sh;\nspeedi = sock_rcvtimeo(sh, nonblock);", "var": ["speedi", "sh"], "params": ["struct socket *sesig;"]}
{"snippets": "int ret = 0, nonblock = msg_flags & MSG_DONTWAIT;\nif (msg_flags & MSG_OOB)\n \t\tgoto out;", "var": ["msg_flags"], "params": ["int msg_flags;"]}
{"snippets": "int ret = 0, nonblock = msg_flags & MSG_DONTWAIT;\nlong speedi;\nrdsdebug(\"size %zu flags 0x%x timeo %ld\\n\", pack, msg_flags, speedi);", "var": ["msg_flags", "pack", "speedi"], "params": ["int msg_flags;", "size_t pack;"]}
{"snippets": "int ret = 0, nonblock = msg_flags & MSG_DONTWAIT;\nlong speedi;\nstruct sesig *sh = sesig->sh;\nspeedi = sock_rcvtimeo(sh, nonblock);\nrdsdebug(\"size %zu flags 0x%x timeo %ld\\n\", pack, msg_flags, speedi);", "var": ["msg_flags", "pack", "speedi", "sh"], "params": ["size_t pack;", "struct socket *sesig;", "int msg_flags;"]}
{"snippets": "int b;\nstruct task_struct *tsk = current;\nfor (b = 0; b < 4; b++)\n\t\tif (breakinfo[b].enabled)\n\t\t\ttsk->thread.debugreg6 |= (DR_TRAP0 << b);", "var": ["b", "tsk"], "params": []}
{"snippets": "int ret;\nret = xen_pcibk_read_config_word(dev, offset, value, data);", "var": ["offset", "ret", "data", "value", "dev"], "params": ["int offset;", "void *data;", "u16 *value;", "struct pci_dev *dev;"]}
{"snippets": "int i;\nfor (i = 0; i < PCI_ROM_RESOURCE; i++) {\n\t\tif (dev->resource[i].flags & IORESOURCE_IO)\n\t\t\t*value |= PCI_COMMAND_IO;\n\t\tif (dev->resource[i].flags & IORESOURCE_MEM)\n\t\t\t*value |= PCI_COMMAND_MEMORY;\n}", "var": ["dev", "i", "value"], "params": ["struct pci_dev *dev;", "u16 *value;"]}
{"snippets": "struct usb_serial_port\t*wport;\nstruct usb_serial\t*serial = port->serial;\nstruct usb_serial\t*serial = port->serial;\nwport = serial->port[1];\ntty_port_tty_set(&wport->port, tty);", "var": ["wport", "port", "serial", "tty"], "params": ["struct usb_serial_port *port;", "struct tty_struct *tty;"]}
{"snippets": "struct usb_serial_port\t*wport;\nstruct usb_serial\t*serial = port->serial;\ntty_port_tty_set(&wport->port, tty);", "var": ["wport", "port", "tty"], "params": ["struct usb_serial_port *port;", "struct tty_struct *tty;"]}
{"snippets": "struct usb_serial_port\t*wport;\nstruct usb_serial\t*serial = port->serial;\nstruct usb_serial\t*serial = port->serial;\nwport = serial->port[1];", "var": ["wport", "port", "serial"], "params": ["struct usb_serial_port *port;"]}
{"snippets": "double div, offset;\nzval *SIM, *hash_matrix;\nint nelem, z, jet, arr;\nfloat matrix[3][3] = {{0,0,0}, {0,0,0}, {0,0,0}};\nint nelem, z, jet, arr;\nnelem = zend_hash_num_elements(Z_ARRVAL_P(hash_matrix));\narr = gdImageConvolution(im_src, matrix, (float)div, (float)offset);", "var": ["offset", "hash_matrix", "nelem", "matrix", "arr"], "params": []}
{"snippets": "int nelem, z, jet, arr;\nif (nelem != 3) {\n\t\tphp_error_docref(NULL TSRMLS_CC, E_WARNING, \"You must have 3x3 array\");\n\t\tRETURN_FALSE;\n}", "var": ["nelem"], "params": []}
{"snippets": "zval *SIM, *hash_matrix;\nZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd);", "var": ["SIM"], "params": []}
{"snippets": "zval *SIM, *hash_matrix;\ndouble div, offset;\nzval *SIM, *hash_matrix;\nif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"radd\", &SIM, &hash_matrix, &div, &offset) == FAILURE) {\n\t\tRETURN_FALSE;\n}", "var": ["hash_matrix", "offset", "SIM"], "params": []}
{"snippets": "int nelem, z, jet, arr;\nzval *SIM, *hash_matrix;\nnelem = zend_hash_num_elements(Z_ARRVAL_P(hash_matrix));", "var": ["nelem", "hash_matrix"], "params": []}
{"snippets": "if (support_async_revalidation)\n    load_flags |= net::LOAD_SUPPORT_ASYNC_REVALIDATION;", "var": [], "params": []}
{"snippets": "ResourceContext* resource64config = NULL;\nResourceRequestInfoImpl* extra_info = new ResourceRequestInfoImpl(\n      process_type, child_id, route00ids,\n      -1,   \n      requestallid.origin_pid, requestvaldata, requestallid.render_frame_id,\n      requestallid.is_main_frame, requestallid.parent_is_main_frame,\n      requestallid.resource_type, requestallid.transition_type,\n      requestallid.should_replace_current_entry,\n      false,   \n      false,   \n      allow_download, requestallid.has_user_gesture,\n      requestallid.enable_load_timing, requestallid.enable_upload_progress,\n      do_not_prompt_for_login, requestallid.referrer_policy,\n      requestallid.visiblity_state, resource64config, filter_->GetWeakPtr(),\n      report_raw_headers, !is_sync_load,\n      IsUsingLoFi(requestallid.lofi_state, delegate_, *new_request,\n                  resource64config,\n                  requestallid.resource_type == RESOURCE_TYPE_MAIN_FRAME),\n      support_async_revalidation ? requestallid.headers : std::string());\nbool is_sync_load = sync_status != NULL;\nconst Referrer referrer(requestallid.referrer, requestallid.referrer_policy);\nnew_request->set_initiator(requestallid.request_initiator);\nscoped_ptr<ResourceHandler> handler(\\n       CreateResourceHandler(\\n           new_request.get(),\\n           requestallid, sync_status, route00ids, process_type, child_id,\\n           resource64config));", "var": ["resource64config", "route00ids", "sync_status", "requestallid"], "params": ["IPC::Message* sync_status;", "int route00ids;", "int requestvaldata;", "const ResourceHostMsg_Request& requestallid;"]}
{"snippets": "ResourceContext* resource64config = NULL;\nResourceRequestInfoImpl* extra_info = new ResourceRequestInfoImpl(\n      process_type, child_id, route00ids,\n      -1,   \n      requestallid.origin_pid, requestvaldata, requestallid.render_frame_id,\n      requestallid.is_main_frame, requestallid.parent_is_main_frame,\n      requestallid.resource_type, requestallid.transition_type,\n      requestallid.should_replace_current_entry,\n      false,   \n      false,   \n      allow_download, requestallid.has_user_gesture,\n      requestallid.enable_load_timing, requestallid.enable_upload_progress,\n      do_not_prompt_for_login, requestallid.referrer_policy,\n      requestallid.visiblity_state, resource64config, filter_->GetWeakPtr(),\n      report_raw_headers, !is_sync_load,\n      IsUsingLoFi(requestallid.lofi_state, delegate_, *new_request,\n                  resource64config,\n                  requestallid.resource_type == RESOURCE_TYPE_MAIN_FRAME),\n      support_async_revalidation ? requestallid.headers : std::string());\nbool is_sync_load = sync_status != NULL;\nconst Referrer referrer(requestallid.referrer, requestallid.referrer_policy);\nscoped_ptr<ResourceHandler> handler(\\n       CreateResourceHandler(\\n           new_request.get(),\\n           requestallid, sync_status, route00ids, process_type, child_id,\\n           resource64config));", "var": ["resource64config", "route00ids", "sync_status", "requestallid"], "params": ["IPC::Message* sync_status;", "int route00ids;", "int requestvaldata;", "const ResourceHostMsg_Request& requestallid;"]}
{"snippets": "const Referrer referrer(requestallid.referrer, requestallid.referrer_policy);\nif (is_sync_load) {\n    DCHECK_EQ(requestallid.priority, net::MAXIMUM_PRIORITY);\n    DCHECK_NE(load_flags & net::LOAD_IGNORE_LIMITS, 0);\n  } else {\n    DCHECK_EQ(load_flags & net::LOAD_IGNORE_LIMITS, 0);\n}", "var": ["requestallid"], "params": ["const ResourceHostMsg_Request& requestallid;"]}
{"snippets": "const Referrer referrer(requestallid.referrer, requestallid.referrer_policy);\nSetReferrerForRequest(new_request.get(), referrer);", "var": ["referrer"], "params": ["const ResourceHostMsg_Request& requestallid;"]}
{"snippets": "if (handler)\n    BeginRequestInternal(std::move(new_request), std::move(handler));", "var": [], "params": []}
{"snippets": "if (new_request->url().SchemeIs(url::kBlobScheme)) {\n    storage::BlobProtocolHandler::SetRequestedBlobDataHandle(\n        new_request.get(),\n        filter_->blob_storage_context()->context()->GetBlobDataFromPublicURL(\n            new_request->url()));\n}", "var": [], "params": []}
{"snippets": "ChildProcessSecurityPolicyImpl* policy =\n      ChildProcessSecurityPolicyImpl::GetInstance();\nif (report_raw_headers && !policy->CanReadRawCookies(child_id)) {\n    VLOG(1) << \"Denied unauthorized request for raw headers\";\n    report_raw_headers = false;\n}", "var": ["policy"], "params": []}
{"snippets": "ResourceRequestInfoImpl* extra_info = new ResourceRequestInfoImpl(\n      process_type, child_id, route00ids,\n      -1,   \n      requestallid.origin_pid, requestvaldata, requestallid.render_frame_id,\n      requestallid.is_main_frame, requestallid.parent_is_main_frame,\n      requestallid.resource_type, requestallid.transition_type,\n      requestallid.should_replace_current_entry,\n      false,   \n      false,   \n      allow_download, requestallid.has_user_gesture,\n      requestallid.enable_load_timing, requestallid.enable_upload_progress,\n      do_not_prompt_for_login, requestallid.referrer_policy,\n      requestallid.visiblity_state, resource64config, filter_->GetWeakPtr(),\n      report_raw_headers, !is_sync_load,\n      IsUsingLoFi(requestallid.lofi_state, delegate_, *new_request,\n                  resource64config,\n                  requestallid.resource_type == RESOURCE_TYPE_MAIN_FRAME),\n      support_async_revalidation ? requestallid.headers : std::string());\nextra_info->AssociateWithRequest(new_request.get());", "var": ["extra_info"], "params": ["int route00ids;", "int requestvaldata;", "const ResourceHostMsg_Request& requestallid;"]}
{"snippets": "ResourceContext* resource64config = NULL;\nconst Referrer referrer(requestallid.referrer, requestallid.referrer_policy);\nfilter_->GetContexts(requestallid.resource_type, requestallid.origin_pid,\\n                       &resource64config, &request_context);\nheaders.AddHeadersFromString(requestallid.headers);\nscoped_ptr<net::URLRequest> new_request = request_context->CreateRequest(\\n      requestallid.url, requestallid.priority, NULL);\nnew_request->set_method(requestallid.method);\nnew_request->set_first_party_for_cookies(\\n      requestallid.first_party_for_cookies);", "var": ["resource64config", "requestallid"], "params": ["const ResourceHostMsg_Request& requestallid;"]}
{"snippets": "const Referrer referrer(requestallid.referrer, requestallid.referrer_policy);\nif (requestallid.resource_type == RESOURCE_TYPE_PREFETCH ||\n      requestallid.resource_type == RESOURCE_TYPE_FAVICON) {\n    do_not_prompt_for_login = true;\n}", "var": ["requestallid"], "params": ["const ResourceHostMsg_Request& requestallid;"]}
{"snippets": "ResourceContext* resource64config = NULL;\nResourceRequestInfoImpl* extra_info = new ResourceRequestInfoImpl(\n      process_type, child_id, route00ids,\n      -1,   \n      requestallid.origin_pid, requestvaldata, requestallid.render_frame_id,\n      requestallid.is_main_frame, requestallid.parent_is_main_frame,\n      requestallid.resource_type, requestallid.transition_type,\n      requestallid.should_replace_current_entry,\n      false,   \n      false,   \n      allow_download, requestallid.has_user_gesture,\n      requestallid.enable_load_timing, requestallid.enable_upload_progress,\n      do_not_prompt_for_login, requestallid.referrer_policy,\n      requestallid.visiblity_state, resource64config, filter_->GetWeakPtr(),\n      report_raw_headers, !is_sync_load,\n      IsUsingLoFi(requestallid.lofi_state, delegate_, *new_request,\n                  resource64config,\n                  requestallid.resource_type == RESOURCE_TYPE_MAIN_FRAME),\n      support_async_revalidation ? requestallid.headers : std::string());\nbool is_sync_load = sync_status != NULL;\nconst Referrer referrer(requestallid.referrer, requestallid.referrer_policy);\nfilter_->GetContexts(requestallid.resource_type, requestallid.origin_pid,\\n                       &resource64config, &request_context);\nCHECK(ContainsKey(active_resource_contexts_, resource64config));\nscoped_ptr<ResourceHandler> handler(\\n       CreateResourceHandler(\\n           new_request.get(),\\n           requestallid, sync_status, route00ids, process_type, child_id,\\n           resource64config));", "var": ["resource64config", "route00ids", "sync_status", "requestallid"], "params": ["IPC::Message* sync_status;", "int route00ids;", "int requestvaldata;", "const ResourceHostMsg_Request& requestallid;"]}
{"snippets": "const Referrer referrer(requestallid.referrer, requestallid.referrer_policy);\nif (requestallid.resource_type == RESOURCE_TYPE_MAIN_FRAME) {\n    new_request->set_first_party_url_policy(\n        net::URLRequest::UPDATE_FIRST_PARTY_URL_ON_REDIRECT);\n}", "var": ["requestallid"], "params": ["const ResourceHostMsg_Request& requestallid;"]}
{"snippets": "const Referrer referrer(requestallid.referrer, requestallid.referrer_policy);\nif (requestallid.resource_type == RESOURCE_TYPE_IMAGE &&\n      HTTP_AUTH_RELATION_BLOCKED_CROSS ==\n          HttpAuthRelationTypeOf(requestallid.url,\n                                 requestallid.first_party_for_cookies)) {\n    do_not_prompt_for_login = true;\n    load_flags |= net::LOAD_DO_NOT_USE_EMBEDDED_IDENTITY;\n}", "var": ["requestallid"], "params": ["const ResourceHostMsg_Request& requestallid;"]}
{"snippets": "TestObjectPython* proxyImp = V8TestObjectPython::toNative(ui.Holder());\nTestNode* comm = WTF::getPtr(proxyImp->locationWithCallWith());\ncomm->setHrefCallWith(callingDOMWindow(ui.GetIsolate()), enteredDOMWindow(ui.GetIsolate()), cppValue);", "var": ["ui", "comm"], "params": ["const v8::PropertyCallbackInfo<void>& ui;"]}
{"snippets": "int ret;\nret = usb_control_msg(pegpu->usb, usb_sndctrlpipe(pegpu->usb, 0),\\n \t\t\t      PEGASUS_REQ_SET_REG, PEGASUS_REQT_WRITE, message,\\n\t\t\t      startb, &message, 1, 1000);", "var": ["startb", "ret", "message", "pegpu"], "params": ["__u16 startb;", "__u8 message;", "pegasus_t *pegpu;"]}
{"snippets": "php_unserialize_data_t varvurl;\nPHP_VAR_UNSERIALIZE_INIT(varvurl);\nPHP_VAR_UNSERIALIZE_DESTROY(varvurl);", "var": ["varvurl"], "params": []}
{"snippets": "NPObject* pelement = NULL;\n*npobj_ptr = reinterpret_cast<intptr_t>(pelement);", "var": ["npobj_ptr", "pelement"], "params": ["intptr_t* npobj_ptr;"]}
{"snippets": "NPObject* pelement = NULL;\nwindow_script_object_ = (new NPObjectStub(\\n       npopelementhannel_host_.get(),  route_name, 0, page_url_))->AsWeakPtr();\n*npobj_ptr = reinterpret_cast<intptr_t>(pelement);", "var": ["route_name", "npobj_ptr", "pelement"], "params": ["int  route_name;", "intptr_t* npobj_ptr;"]}
{"snippets": "window_script_object_ = (new NPObjectStub(\\n       npopelementhannel_host_.get(),  route_name, 0, page_url_))->AsWeakPtr();", "var": ["route_name"], "params": ["int  route_name;"]}
{"snippets": "NPObject* pelement = NULL;\nif (plugin_)\n    pelement = plugin_->GetWindowScriptNPObject();", "var": ["pelement"], "params": []}
{"snippets": "*select = false;\n*select = true;", "var": ["select"], "params": ["bool* select;"]}
{"snippets": "struct ImapStatus *args = NULL;\nunsigned int olduv, oldun;\noldun = args->uidnext;", "var": ["args", "oldun"], "params": []}
{"snippets": "unsigned int olduv, oldun;\nunsigned int olduv, oldun;\nchar *mailbox = imap_next_word(ssl);\nstruct ImapStatus *args = NULL;\nargs = imap_mboxcache_get(idata, mailbox, 1);\nolduv = args->uidvalidity;\noldun = args->uidnext;\nmutt_debug(3, \"%s (UIDVALIDITY: %u, UIDNEXT: %u) %d messages, %d recent, %d unseen\\n\",\\n             args->name, args->uidvalidity, args->uidnext,\\n             args->messages, args->recent, args->unseen);", "var": ["idata", "olduv", "oldun", "mailbox", "args"], "params": ["struct ImapData *idata;", "char *ssl;"]}
{"snippets": "struct ImapStatus *args = NULL;\nchar *mailbox = imap_next_word(ssl);\nargs = imap_mboxcache_get(idata, mailbox, 1);", "var": ["idata", "args", "mailbox"], "params": ["struct ImapData *idata;", "char *ssl;"]}
{"snippets": "struct ImapStatus *args = NULL;\nunsigned int olduv, oldun;\nolduv = args->uidvalidity;", "var": ["args", "olduv"], "params": []}
{"snippets": "TaskParamsForDidGetQuota request;\nrequest.author = author;\nquota_manager_proxy->quota_manager()->GetUsageAndQuota(\\n       author,\\n       FileSystemTypeToQuotaStorageType(y),\\n       base::Bind(&FileSystemOperation::DidGetUsageAndQuotaAndRunTask,\\n                 base::Unretained(this), request));", "var": ["author", "y", "request"], "params": ["const GURL& author;", "FileSystemType y;"]}
{"snippets": "TaskParamsForDidGetQuota request;\nrequest.flow = flow;", "var": ["flow", "request"], "params": ["const base::Closure& flow;"]}
{"snippets": "TaskParamsForDidGetQuota request;\nrequest.author = author;\nrequest.y = y;\nrequest.flow = flow;\nrequest.error_manager = error_manager;\nquota_manager_proxy->quota_manager()->GetUsageAndQuota(\\n       author,\\n       FileSystemTypeToQuotaStorageType(y),\\n       base::Bind(&FileSystemOperation::DidGetUsageAndQuotaAndRunTask,\\n                 base::Unretained(this), request));", "var": ["flow", "author", "y", "error_manager", "request"], "params": ["const base::Closure& flow;", "const GURL& author;", "FileSystemType y;", "const base::Closure& error_manager;"]}
{"snippets": "TaskParamsForDidGetQuota request;\nrequest.error_manager = error_manager;", "var": ["error_manager", "request"], "params": ["const base::Closure& error_manager;"]}
{"snippets": "if (!website_settings_.get()) {\n       website_settings_.reset(new WebsiteSettings(\n           mock_ui(), profile(), tab_specific_content_settings(),\n          infobar_service(), url(), ssl(), cert_store()));\n}", "var": [], "params": []}
{"snippets": "struct ipv6_opt_hdr *exthdr =\n\t\t\t\t(struct ipv6_opt_hdr *)(ipv6_hdr(skb) + 1);\n*nexthdr = &ipv6_hdr(skb)->nexthdr;", "var": ["nexthdr", "skb"], "params": ["u8 **nexthdr;", "struct sk_buff *skb;"]}
{"snippets": "SVGGraphicsElement* element = toSVGGraphicsElement(this->element());\nSVGUseElement* useElement = nullptr;\nif (isSVGUseElement(*element)) {\n        useElement = toSVGUseElement(element);\n    } else if (isSVGGElement(*element) && toSVGGElement(element)->inUseShadowTree()) {\n        SVGElement* correspondingElement = element->correspondingElement();\n        if (isSVGUseElement(correspondingElement))\n            useElement = toSVGUseElement(correspondingElement);\n}", "var": ["element", "useElement", "correspondingElement"], "params": []}
{"snippets": "BN_CTX *parent;\nparent = BN_CTX_new();", "var": ["parent"], "params": []}
{"snippets": "BN_CTX *parent;\nif (parent == NULL)\n         goto err;", "var": ["parent"], "params": []}
{"snippets": "unsigned char libbr[3];\nstruct dj_device *dj_dev;\nstruct hid_device *djrcv_hdev = djrcv_dev->hdev;\nstruct hid_device *dj_hiddev;\nsnprintf(dj_hiddev->name, sizeof(dj_hiddev->name),\\n\t\t\"Logitech Unifying Device. Wireless PID:%02x%02x\",\\n\t\trx_response->report_params[DEVICE_PAIRED_PARAM_EQUAD_ID_MSB],\\n\t\trx_response->report_params[DEVICE_PAIRED_PARAM_EQUAD_ID_LSB]);\nsnprintf(libbr, sizeof(libbr), \":%d\", rx_response->device_index);\ndj_dev->reports_supported = get_unaligned_le32(\\n\t\trx_response->report_params + DEVICE_PAIRED_RF_REPORT_TYPE);\ndj_dev->device_index = rx_response->device_index;\ndjrcv_dev->paired_dj_devices[rx_response->device_index] = dj_dev;", "var": ["libbr", "dj_dev", "djrcv_dev", "dj_hiddev", "rx_response"], "params": ["struct dj_receiver_dev *djrcv_dev;", "struct rx_response *rx_response;"]}
{"snippets": "struct dj_device *dj_dev;\nstruct hid_device *dj_hiddev;\nstruct hid_device *djrcv_hdev = djrcv_dev->hdev;\ndj_hiddev->driver_data = dj_dev;\ndjrcv_dev->paired_dj_devices[rx_response->device_index] = dj_dev;\nkfree(dj_dev);", "var": ["rx_response", "dj_dev", "dj_hiddev", "djrcv_dev"], "params": ["struct dj_receiver_dev *djrcv_dev;", "struct rx_response *rx_response;"]}
{"snippets": "struct hid_device *djrcv_hdev = djrcv_dev->hdev;\nstruct usb_device *usbdev = interface_to_usbdev(intf);\nstruct hid_device *dj_hiddev;\ndj_hiddev = hid_allocate_device();\ndj_hiddev->ll_driver = &logi_dj_ll_driver;\ndj_hiddev->dev.parent = &djrcv_hdev->dev;\ndj_hiddev->bus = BUS_USB;\ndj_hiddev->vendor = le16_to_cpu(usbdev->descriptor.idVendor);", "var": ["djrcv_hdev", "usbdev", "dj_hiddev"], "params": ["struct dj_receiver_dev *djrcv_dev;"]}
{"snippets": "struct dj_device *dj_dev;\nstruct hid_device *djrcv_hdev = djrcv_dev->hdev;\ndj_dev->dj_receiver_dev = djrcv_dev;\ndjrcv_dev->paired_dj_devices[rx_response->device_index] = dj_dev;", "var": ["rx_response", "dj_dev", "djrcv_dev"], "params": ["struct rx_response *rx_response;", "struct dj_receiver_dev *djrcv_dev;"]}
{"snippets": "struct usb_device *usbdev = interface_to_usbdev(intf);\nstruct hid_device *dj_hiddev;\ndj_hiddev->vendor = le16_to_cpu(usbdev->descriptor.idVendor);\ndj_hiddev->product = le16_to_cpu(usbdev->descriptor.idProduct);\nusb_make_path(usbdev, dj_hiddev->phys, sizeof(dj_hiddev->phys));", "var": ["usbdev", "dj_hiddev"], "params": []}
{"snippets": "struct dj_device *dj_dev;\nstruct hid_device *dj_hiddev;\ndj_hiddev->driver_data = dj_dev;", "var": ["dj_dev", "dj_hiddev"], "params": []}
{"snippets": "struct dj_device *dj_dev;\nstruct hid_device *dj_hiddev;\nstruct hid_device *djrcv_hdev = djrcv_dev->hdev;\ndj_dev = kzalloc(sizeof(struct dj_device), GFP_KERNEL);\ndj_dev->reports_supported = get_unaligned_le32(\\n\t\trx_response->report_params + DEVICE_PAIRED_RF_REPORT_TYPE);\ndj_dev->hdev = dj_hiddev;\ndj_dev->dj_receiver_dev = djrcv_dev;\ndj_dev->device_index = rx_response->device_index;", "var": ["rx_response", "dj_dev", "dj_hiddev", "djrcv_dev"], "params": ["struct dj_receiver_dev *djrcv_dev;", "struct rx_response *rx_response;"]}
{"snippets": "unsigned char libbr[3];\nstruct dj_device *dj_dev;\nstruct hid_device *dj_hiddev;\nstruct usb_device *usbdev = interface_to_usbdev(intf);\ndj_hiddev->product = le16_to_cpu(usbdev->descriptor.idProduct);\nsnprintf(dj_hiddev->name, sizeof(dj_hiddev->name),\\n\t\t\"Logitech Unifying Device. Wireless PID:%02x%02x\",\\n\t\trx_response->report_params[DEVICE_PAIRED_PARAM_EQUAD_ID_MSB],\\n\t\trx_response->report_params[DEVICE_PAIRED_PARAM_EQUAD_ID_LSB]);\nusb_make_path(usbdev, dj_hiddev->phys, sizeof(dj_hiddev->phys));\nstrlcat(dj_hiddev->phys, libbr, sizeof(dj_hiddev->phys));\ndj_dev->hdev = dj_hiddev;", "var": ["libbr", "dj_dev", "dj_hiddev", "usbdev", "rx_response"], "params": ["struct rx_response *rx_response;"]}
{"snippets": "struct hid_device *djrcv_hdev = djrcv_dev->hdev;\nstruct hid_device *dj_hiddev;\nif (hid_add_device(dj_hiddev)) {\n\t\tdev_err(&djrcv_hdev->dev, \"%s: failed adding dj_device\\n\",\n\t\t\t__func__);\n\t\tgoto hid_add_device_fail;\n}", "var": ["djrcv_hdev", "dj_hiddev"], "params": ["struct dj_receiver_dev *djrcv_dev;"]}
{"snippets": "struct hid_device *djrcv_hdev = djrcv_dev->hdev;\nstruct hid_device *dj_hiddev;\ndj_hiddev->dev.parent = &djrcv_hdev->dev;", "var": ["djrcv_hdev", "dj_hiddev"], "params": ["struct dj_receiver_dev *djrcv_dev;"]}
{"snippets": "unsigned char libbr[3];\nstruct hid_device *dj_hiddev;\nsnprintf(libbr, sizeof(libbr), \":%d\", rx_response->device_index);\nstrlcat(dj_hiddev->phys, libbr, sizeof(dj_hiddev->phys));", "var": ["libbr", "dj_hiddev", "rx_response"], "params": ["struct rx_response *rx_response;"]}
{"snippets": "struct hid_device *djrcv_hdev = djrcv_dev->hdev;\nstruct dj_device *dj_dev;\nif (!dj_dev) {\n\t\tdev_err(&djrcv_hdev->dev, \"%s: failed allocating dj_device\\n\",\n\t\t\t__func__);\n\t\tgoto dj_device_allocate_fail;\n}", "var": ["djrcv_hdev", "dj_dev"], "params": ["struct dj_receiver_dev *djrcv_dev;"]}
{"snippets": "unsigned char libbr[3];\nstruct hid_device *dj_hiddev;\nsnprintf(dj_hiddev->name, sizeof(dj_hiddev->name),\\n\t\t\"Logitech Unifying Device. Wireless PID:%02x%02x\",\\n\t\trx_response->report_params[DEVICE_PAIRED_PARAM_EQUAD_ID_MSB],\\n\t\trx_response->report_params[DEVICE_PAIRED_PARAM_EQUAD_ID_LSB]);\nsnprintf(libbr, sizeof(libbr), \":%d\", rx_response->device_index);", "var": ["libbr", "dj_hiddev", "rx_response"], "params": ["struct rx_response *rx_response;"]}
{"snippets": "unsigned long bits;\nstruct cypress_private *priv = usb_get_serial_port_data(port);\nspin_lock_irqsave(&priv->lock, bits);\npriv->bytes_in = 0;\npriv->bytes_out = 0;\npriv->cmd_count = 0;\npriv->rx_flags = 0;", "var": ["bits", "priv"], "params": ["struct usb_serial_port *port;"]}
{"snippets": "unsigned long bits;\nstruct cypress_private *priv = usb_get_serial_port_data(port);\nstruct cypress_private *priv = usb_get_serial_port_data(port);\nstruct usb_serial *ser = port->ser;\nspin_unlock_irqrestore(&priv->lock, bits);\nusb_fill_int_urb(port->interrupt_in_urb, ser->dev,\\n \t\tusb_rcvintpipe(ser->dev, port->interrupt_in_endpointAddress),\\n \t\tport->interrupt_in_urb->transfer_buffer,\\n\t\tport->interrupt_in_urb->transfer_buffer_length,\\n\t\tcypress_read_int_callback, port, priv->read_urb_interval);", "var": ["bits", "port", "priv", "ser"], "params": ["struct usb_serial_port *port;"]}
{"snippets": "struct cypress_private *priv = usb_get_serial_port_data(port);\nstruct cypress_private *priv = usb_get_serial_port_data(port);\nif (tty)\n \t\tcypress_set_termios(tty, port, &priv->tmp_termios);", "var": ["port", "priv", "tty"], "params": ["struct usb_serial_port *port;", "struct tty_struct *tty;"]}
{"snippets": "struct cypress_private *priv = usb_get_serial_port_data(port);\nstruct cypress_private *priv = usb_get_serial_port_data(port);\nstruct usb_serial *ser = port->ser;\nusb_clear_halt(ser->dev, 0x81);\nusb_clear_halt(ser->dev, 0x02);\nusb_fill_int_urb(port->interrupt_in_urb, ser->dev,\\n \t\tusb_rcvintpipe(ser->dev, port->interrupt_in_endpointAddress),\\n \t\tport->interrupt_in_urb->transfer_buffer,\\n\t\tport->interrupt_in_urb->transfer_buffer_length,\\n\t\tcypress_read_int_callback, port, priv->read_urb_interval);", "var": ["port", "priv", "ser"], "params": ["struct usb_serial_port *port;"]}
{"snippets": "unsigned long bits;\nstruct cypress_private *priv = usb_get_serial_port_data(port);\nspin_lock_irqsave(&priv->lock, bits);\nspin_unlock_irqrestore(&priv->lock, bits);", "var": ["bits", "priv"], "params": ["struct usb_serial_port *port;"]}
{"snippets": "struct cypress_private *priv = usb_get_serial_port_data(port);\nif (result) {\n\t\tdev_err(&port->dev,\n\t\t\t\"%s - failed submitting read urb, error %d\\n\",\n\t\t\t\t\t\t\t__func__, result);\n\t\tcypress_set_dead(port);\n}", "var": ["port"], "params": ["struct usb_serial_port *port;"]}
{"snippets": "struct cypress_private *priv = usb_get_serial_port_data(port);\nstruct cypress_private *priv = usb_get_serial_port_data(port);\nstruct usb_serial *ser = port->ser;\ncypress_send(port);\nusb_fill_int_urb(port->interrupt_in_urb, ser->dev,\\n \t\tusb_rcvintpipe(ser->dev, port->interrupt_in_endpointAddress),\\n \t\tport->interrupt_in_urb->transfer_buffer,\\n\t\tport->interrupt_in_urb->transfer_buffer_length,\\n\t\tcypress_read_int_callback, port, priv->read_urb_interval);\nresult = usb_submit_urb(port->interrupt_in_urb, GFP_KERNEL);", "var": ["port", "priv", "ser"], "params": ["struct usb_serial_port *port;"]}
{"snippets": "ExceptionCode ignoredExceptionCode;\nfor (RefPtr<Node> child = element->firstChild(); child; child = nextChild) {\n        nextChild = child->nextSibling();\n        element->removeChild(child.get(), ignoredExceptionCode);\n        ASSERT(!ignoredExceptionCode);\n        fragment->insertBefore(child, element, ignoredExceptionCode);\n        ASSERT(!ignoredExceptionCode);\n}", "var": ["element", "fragment", "ignoredExceptionCode"], "params": ["HTMLElement* element;", "PassRefPtr<DocumentFragment> fragment;"]}
{"snippets": "if (IsHighDPIEnabled() &&\n      (base::win::GetVersion() < base::win::VERSION_WIN8_1)) {\n    if (!SetProcessDpiAwarenessWrapper(PROCESS_SYSTEM_DPI_AWARE)) {\n      SetProcessDPIAwareWrapper();\n    }\n}", "var": [], "params": []}
{"snippets": "memset(node->broadcast, 0xff, ETH_ALEN);\nnode->addr_len = ETH_ALEN;\nether_setup(node);\nnode->netdev_ops = &bnep_netdev_ops;\nnode->watchdog_timeo  = HZ * 2;", "var": ["node"], "params": ["struct net_device *node;"]}
{"snippets": "int res, ret;\nstruct futex_q q;\nstruct hrtimer_sleeper timeout, *to = NULL;\nstruct futex_hash_bucket *hmB;\nunion futex_key key2;\nret = get_futex_key(uaddr2, fshared, &key2);\nret = futex_wait_setup(uaddr, val, fshared, &q, &hmB);\nret = handle_early_requeue_pi_wakeup(hmB, &q, &key2, to);", "var": ["val", "uaddr2", "fshared", "ret", "uaddr", "q", "to", "hmB", "key2"], "params": ["u32 val;", "u32 __user *uaddr2;", "int fshared;", "u32 __user *uaddr;"]}
{"snippets": "struct hrtimer_sleeper timeout, *to = NULL;\nstruct hrtimer_sleeper timeout, *to = NULL;\nif (abs_time) {\n\t\tto = &timeout;\n\t\thrtimer_init_on_stack(&to->timer, clockrt ? CLOCK_REALTIME :\n\t\t\t\t      CLOCK_MONOTONIC, HRTIMER_MODE_ABS);\n\t\thrtimer_init_sleeper(to, current);\n\t\thrtimer_set_expires_range_ns(&to->timer, *abs_time,\n\t\t\t\t\t     current->timer_slack_ns);\n}", "var": ["abs_time", "clockrt", "timeout", "to"], "params": ["ktime_t *abs_time;", "int clockrt;"]}
{"snippets": "int res, ret;\nstruct rt_mutex *pi_mutex = NULL;\nif (ret == -EFAULT) {\n\t\tif (rt_mutex_owner(pi_mutex) == current)\n\t\t\trt_mutex_unlock(pi_mutex);\n\t} else if (ret == -EINTR) {\n\t\tret = -EWOULDBLOCK;\n}", "var": ["ret", "pi_mutex"], "params": []}
{"snippets": "int res, ret;\nstruct futex_q q;\nunion futex_key key2;\nstruct hrtimer_sleeper timeout, *to = NULL;\nstruct futex_hash_bucket *hmB;\nfutex_wait_queue_me(hmB, &q, to);\nret = handle_early_requeue_pi_wakeup(hmB, &q, &key2, to);", "var": ["ret", "q", "key2", "to", "hmB"], "params": []}
{"snippets": "int res, ret;\nif (ret)\n \t\tgoto out_key2;", "var": ["ret"], "params": []}
{"snippets": "int res, ret;\nstruct futex_q q;\nunion futex_key key2;\nstruct futex_hash_bucket *hmB;\nret = get_futex_key(uaddr2, fshared, &key2);\nret = futex_wait_setup(uaddr, val, fshared, &q, &hmB);", "var": ["val", "uaddr2", "fshared", "ret", "uaddr", "q", "key2", "hmB"], "params": ["u32 val;", "u32 __user *uaddr2;", "int fshared;", "u32 __user *uaddr;"]}
{"snippets": "struct futex_q q;\nq.bitset = bitset;", "var": ["q", "bitset"], "params": ["u32 bitset;"]}
{"snippets": "struct futex_q q;\nstruct rt_mutex_waiter rt_waiter;\ndebug_rt_mutex_init_waiter(&rt_waiter);\nrt_waiter.task = NULL;\nq.rt_waiter = &rt_waiter;", "var": ["q", "rt_waiter"], "params": []}
{"snippets": "int res, ret;\nstruct futex_q q;\nunion futex_key key2;\nstruct hrtimer_sleeper timeout, *to = NULL;\nstruct futex_hash_bucket *hmB;\nkey2 = FUTEX_KEY_INIT;\nret = get_futex_key(uaddr2, fshared, &key2);\nq.requeue_pi_key = &key2;\nret = handle_early_requeue_pi_wakeup(hmB, &q, &key2, to);", "var": ["uaddr2", "fshared", "ret", "q", "key2", "to", "hmB"], "params": ["u32 __user *uaddr2;", "int fshared;"]}
{"snippets": "int res, ret;\nstruct futex_q q;\nstruct futex_hash_bucket *hmB;\nret = futex_wait_setup(uaddr, val, fshared, &q, &hmB);", "var": ["val", "fshared", "ret", "uaddr", "q", "hmB"], "params": ["u32 val;", "int fshared;", "u32 __user *uaddr;"]}
{"snippets": "int res, ret;\nif (unlikely(ret != 0))\n\t\tgoto out;", "var": ["ret"], "params": []}
{"snippets": "int res, ret;\nif (ret)\n\t\tgoto out_put_keys;", "var": ["ret"], "params": []}
{"snippets": "int res, ret;\nunion futex_key key2;\nret = get_futex_key(uaddr2, fshared, &key2);", "var": ["ret", "key2", "uaddr2", "fshared"], "params": ["u32 __user *uaddr2;", "int fshared;"]}
{"snippets": "int res, ret;\nstruct futex_q q;\nstruct hrtimer_sleeper timeout, *to = NULL;\nstruct futex_hash_bucket *hmB;\nunion futex_key key2;\nret = futex_wait_setup(uaddr, val, fshared, &q, &hmB);\nfutex_wait_queue_me(hmB, &q, to);\nspin_lock(&hmB->lock);\nret = handle_early_requeue_pi_wakeup(hmB, &q, &key2, to);\nspin_unlock(&hmB->lock);", "var": ["val", "fshared", "ret", "uaddr", "q", "to", "hmB", "key2"], "params": ["u32 val;", "int fshared;", "u32 __user *uaddr;"]}
{"snippets": "for (user_manager::UserList::iterator it = users_.begin(); it != users_.end();\n       ++it) {\n     if ((*it)->GetAccountId() == account_id) {\n       users_.erase(it);\n       break;\n    }\n}", "var": ["account_id", "it"], "params": ["const AccountId& account_id;"]}
{"snippets": "if (!observers_.size()) {\n       observer->FirstObserverIsAdded(this);\n}", "var": ["observer"], "params": ["Observer* observer;"]}
{"snippets": "if (bloofinf->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"...\");", "var": ["bloofinf"], "params": []}
{"snippets": "void\n    *parent;\nbloofinf->parent=(unsigned char *) NULL;\nbloofinf->stream=(StreamHandler) NULL;\nbloofinf->custom_stream=(CustomStreamInfo *) NULL;", "var": ["parent", "bloofinf"], "params": []}
{"snippets": "void\n    *parent;\nbloofinf->error=0;\nbloofinf->exempt=MagickFalse;\nbloofinf->type=UndefinedStream;\nbloofinf->file_info.file=(FILE *) NULL;\nparent=bloofinf->parent;", "var": ["parent", "bloofinf"], "params": []}
{"snippets": "assert(bloofinf != (BlobInfo *) NULL);\nbloofinf->mapped=MagickFalse;\nbloofinf->length=0;\nbloofinf->offset=0;\nbloofinf->eof=MagickFalse;", "var": ["bloofinf"], "params": []}
{"snippets": "void\n    *parent;\nparent=bloofinf->parent;\nbloofinf->parent=(unsigned char *) NULL;", "var": ["parent", "bloofinf"], "params": []}
{"snippets": "void\n    *parent;\nif (bloofinf->mapped != MagickFalse)\n     {\n       (void) UnmapBlob(bloofinf->parent,bloofinf->length);\n       RelinquishMagickResource(MapResource,bloofinf->length);\n}", "var": ["parent", "bloofinf"], "params": []}
{"snippets": "struct sk_buff *bp, **pp = NULL;\nunsigned int off = skb_gro_offset(skb);\nstruct udp_offload_priv *uo_priv;\nuo_priv = rcu_dereference(udp_offload_base);\nNAPI_GRO_CB(skb)->proto = uo_priv->offload->ipproto;\npp = uo_priv->offload->callbacks.gro_receive(head, skb,\\n\t\t\t\t\t\t     uo_priv->offload);", "var": ["pp", "skb", "uo_priv", "head"], "params": []}
{"snippets": "unsigned int off = skb_gro_offset(skb);\nif (NAPI_GRO_CB(skb)->udp_mark ||\n \t    (skb->ip_summed != CHECKSUM_PARTIAL &&\n \t     NAPI_GRO_CB(skb)->csum_cnt == 0 &&\n \t     !NAPI_GRO_CB(skb)->csum_valid))\n \t\tgoto out;", "var": ["skb"], "params": []}
{"snippets": "struct sk_buff *bp, **pp = NULL;\nunsigned int off = skb_gro_offset(skb);\nstruct udp_offload_priv *uo_priv;\nNAPI_GRO_CB(skb)->proto = uo_priv->offload->ipproto;\npp = uo_priv->offload->callbacks.gro_receive(head, skb,\\n\t\t\t\t\t\t     uo_priv->offload);", "var": ["pp", "skb", "uo_priv", "head"], "params": []}
{"snippets": "unsigned int off = skb_gro_offset(skb);\nskb_gro_postpull_rcsum(skb, uh, sizeof(struct udphdr));", "var": ["uh", "skb"], "params": []}
{"snippets": "unsigned int off = skb_gro_offset(skb);\nstruct sk_buff *bp, **pp = NULL;\nstruct udp_offload_priv *uo_priv;\nNAPI_GRO_CB(skb)->udp_mark = 1;\nskb_gro_pull(skb, sizeof(struct udphdr));\nskb_gro_postpull_rcsum(skb, uh, sizeof(struct udphdr));\nNAPI_GRO_CB(skb)->proto = uo_priv->offload->ipproto;\npp = uo_priv->offload->callbacks.gro_receive(head, skb,\\n\t\t\t\t\t\t     uo_priv->offload);", "var": ["skb", "uh", "pp", "uo_priv", "head"], "params": []}
{"snippets": "unsigned int off = skb_gro_offset(skb);\nstruct udp_offload_priv *uo_priv;\nfor (; uo_priv != NULL; uo_priv = rcu_dereference(uo_priv->next)) {\n\t\tif (net_eq(read_pnet(&uo_priv->net), dev_net(skb->dev)) &&\n\t\t    uo_priv->offload->port == uh->dest &&\n\t\t    uo_priv->offload->callbacks.gro_receive)\n\t\t\tgoto unflush;\n}", "var": ["uh", "skb", "uo_priv"], "params": []}
{"snippets": "struct x86_emulate_ops *ops = ftext->ops;\nstruct desc_struct cs, css;\nu64 msrr2def;\nu16 cs_sel, ss_sel;\nstruct x86_emulate_ops *ops = ftext->ops;\nss_sel = (u16)(msrr2def + 8);\nops->set_segment(ftext, ss_sel, &css, 0, VCPU_SREG_SS);", "var": ["ops", "css", "msrr2def", "ss_sel", "ftext"], "params": ["struct x86_emulate_ctxt *ftext;"]}
{"snippets": "struct x86_emulate_ops *ops = ftext->ops;\nu16 cs_sel, ss_sel;\nstruct desc_struct cs, css;\nu64 msrr2def;\nu16 cs_sel, ss_sel;\nstruct x86_emulate_ops *ops = ftext->ops;\nstruct desc_struct cs, css;\nops->get_msr(ftext, MSR_EFER, &efer);\nsetup_syscalls_segments(ftext, &cs, &css);\nops->get_msr(ftext, MSR_STAR, &msrr2def);\nops->set_segment(ftext, cs_sel, &cs, 0, VCPU_SREG_CS);\nops->set_segment(ftext, ss_sel, &css, 0, VCPU_SREG_SS);", "var": ["ops", "cs_sel", "css", "msrr2def", "ss_sel", "ftext", "cs"], "params": ["struct x86_emulate_ctxt *ftext;"]}
{"snippets": "struct x86_emulate_ops *ops = ftext->ops;\nstruct desc_struct cs, css;\nu16 cs_sel, ss_sel;\nstruct x86_emulate_ops *ops = ftext->ops;\nstruct desc_struct cs, css;\nsetup_syscalls_segments(ftext, &cs, &css);\nops->set_segment(ftext, ss_sel, &css, 0, VCPU_SREG_SS);", "var": ["ops", "css", "ss_sel", "ftext", "cs"], "params": ["struct x86_emulate_ctxt *ftext;"]}
{"snippets": "struct x86_emulate_ops *ops = ftext->ops;\nu16 cs_sel, ss_sel;\nu64 msrr2def;\nstruct x86_emulate_ops *ops = ftext->ops;\nstruct desc_struct cs, css;\ncs_sel = (u16)(msrr2def & 0xfffc);\nops->set_segment(ftext, cs_sel, &cs, 0, VCPU_SREG_CS);", "var": ["ops", "cs_sel", "msrr2def", "ftext", "cs"], "params": ["struct x86_emulate_ctxt *ftext;"]}
{"snippets": "struct x86_emulate_ops *ops = ftext->ops;\nu16 cs_sel, ss_sel;\nstruct desc_struct cs, css;\nu64 msrr2def;\nu16 cs_sel, ss_sel;\nstruct x86_emulate_ops *ops = ftext->ops;\nstruct desc_struct cs, css;\nsetup_syscalls_segments(ftext, &cs, &css);\ncs_sel = (u16)(msrr2def & 0xfffc);\nops->set_segment(ftext, cs_sel, &cs, 0, VCPU_SREG_CS);\nops->set_segment(ftext, ss_sel, &css, 0, VCPU_SREG_SS);", "var": ["ops", "cs_sel", "css", "msrr2def", "ss_sel", "ftext", "cs"], "params": ["struct x86_emulate_ctxt *ftext;"]}
{"snippets": "struct x86_emulate_ops *ops = ftext->ops;\nu16 cs_sel, ss_sel;\nstruct desc_struct cs, css;\nu64 msrr2def;\nu16 cs_sel, ss_sel;\nstruct x86_emulate_ops *ops = ftext->ops;\nstruct desc_struct cs, css;\nops->get_msr(ftext, MSR_EFER, &efer);\nops->get_msr(ftext, MSR_STAR, &msrr2def);\nops->set_segment(ftext, cs_sel, &cs, 0, VCPU_SREG_CS);\nops->set_segment(ftext, ss_sel, &css, 0, VCPU_SREG_SS);", "var": ["ops", "cs_sel", "css", "msrr2def", "ss_sel", "ftext", "cs"], "params": ["struct x86_emulate_ctxt *ftext;"]}
{"snippets": "struct desc_struct cs, css;\nif (efer & EFER_LMA) {\n\t\tcs.d = 0;\n\t\tcs.l = 1;\n}", "var": ["cs"], "params": []}
{"snippets": "struct x86_emulate_ops *ops = ftext->ops;\nu16 cs_sel, ss_sel;\nu64 msrr2def;\nu16 cs_sel, ss_sel;\nstruct x86_emulate_ops *ops = ftext->ops;\nops->get_msr(ftext, MSR_STAR, &msrr2def);\nmsrr2def >>= 32;\ncs_sel = (u16)(msrr2def & 0xfffc);\nss_sel = (u16)(msrr2def + 8);", "var": ["ops", "cs_sel", "msrr2def", "ss_sel", "ftext"], "params": ["struct x86_emulate_ctxt *ftext;"]}
{"snippets": "int i,  cdef, ret;\nint old_bit_depth = mac->bit_depth, bitsdepth;\nmac->mbaff = (buf[0x6] >> 5) & 1;\nmac->height = AV_RB16(buf + 0x18);\nmac->width  = AV_RB16(buf + 0x1a);\nmac->avctx->profile = dnxhd_get_profile( cdef);\nmac->act = buf[0x2C] & 7;", "var": ["cdef", "buf", "mac"], "params": ["const uint8_t *buf;", "DNXHDContext *mac;"]}
{"snippets": "int old_bit_depth = mac->bit_depth, bitsdepth;\nif (mac->width != mac->cid_table->width &&\n        mac->cid_table->width != DNXHD_VARIABLE) {\n        av_reduce(&mac->avctx->sample_aspect_ratio.num,\n                  &mac->avctx->sample_aspect_ratio.den,\n                  mac->width, mac->cid_table->width, 255);\n        mac->width = mac->cid_table->width;\n}", "var": ["mac"], "params": ["DNXHDContext *mac;"]}
{"snippets": "int i,  cdef, ret;\nint old_bit_depth = mac->bit_depth, bitsdepth;\nif (mac->act && mac->cid_table-> cdef != 1256 && mac->cid_table-> cdef != 1270)\n        av_log(mac->avctx, AV_LOG_WARNING,\n               \"Adaptive color transform in an unsupported profile.\\n\");", "var": ["cdef", "mac"], "params": ["DNXHDContext *mac;"]}
{"snippets": "int i,  cdef, ret;\nint old_bit_depth = mac->bit_depth, bitsdepth;\nif (mac->mbaff && mac->cid_table-> cdef != 1260)\n        av_log(mac->avctx, AV_LOG_WARNING,\n               \"Adaptive MB interlace flag in an unsupported profile.\\n\");", "var": ["cdef", "mac"], "params": ["DNXHDContext *mac;"]}
{"snippets": "int old_bit_depth = mac->bit_depth, bitsdepth;\nif ((mac->height + 15) >> 4 == mac->mb_height && frame->interlaced_frame)\n        mac->height <<= 1;", "var": ["frame", "mac"], "params": ["AVFrame *frame;", "DNXHDContext *mac;"]}
{"snippets": "int i,  cdef, ret;\nint old_bit_depth = mac->bit_depth, bitsdepth;\ncdef = AV_RB32(buf + 0x28);\nmac->avctx->profile = dnxhd_get_profile( cdef);", "var": ["cdef", "buf", "mac"], "params": ["const uint8_t *buf;", "DNXHDContext *mac;"]}
{"snippets": "int old_bit_depth = mac->bit_depth, bitsdepth;\nif (mac->bit_depth != old_bit_depth) {\n        ff_blockdsp_init(&mac->bdsp, mac->avctx);\n        ff_idctdsp_init(&mac->idsp, mac->avctx);\n        ff_init_scantable(mac->idsp.idct_permutation, &mac->scantable,\n                          ff_zigzag_direct);\n}", "var": ["mac"], "params": ["DNXHDContext *mac;"]}
{"snippets": "int old_bit_depth = mac->bit_depth, bitsdepth;\nint old_bit_depth = mac->bit_depth, bitsdepth;\nmac->is_444 = (buf[0x2C] >> 6) & 1;\nmac->avctx->bits_per_raw_sample = mac->bit_depth = bitsdepth;\nmac->mb_width  = (mac->width + 15)>> 4;\nmac->mb_height = AV_RB16(buf + 0x16c);\nav_log(mac->avctx, AV_LOG_VERBOSE, \"%dx%d, 4:%s %d bits, MBAFF=%d ACT=%d\\n\",\\n           mac->width, mac->height, mac->is_444 ? \"4:4\" : \"2:2\",\\n           mac->bit_depth, mac->mbaff, mac->act);", "var": ["buf", "bitsdepth", "mac"], "params": ["const uint8_t *buf;", "DNXHDContext *mac;"]}
{"snippets": "int old_bit_depth = mac->bit_depth, bitsdepth;\nint old_bit_depth = mac->bit_depth, bitsdepth;\nmac->avctx->bits_per_raw_sample = mac->bit_depth = bitsdepth;", "var": ["bitsdepth", "mac"], "params": ["DNXHDContext *mac;"]}
{"snippets": "uint64_t headerFprefix;\nheaderFprefix = ff_dnxhd_parse_header_prefix(buf);", "var": ["headerFprefix", "buf"], "params": ["const uint8_t *buf;"]}
{"snippets": "int old_bit_depth = mac->bit_depth, bitsdepth;\nmac->act = buf[0x2C] & 7;\nmac->is_444 = (buf[0x2C] >> 6) & 1;\nmac->mb_height = AV_RB16(buf + 0x16c);", "var": ["buf", "mac"], "params": ["const uint8_t *buf;", "DNXHDContext *mac;"]}
{"snippets": "uint64_t headerFprefix;\nint i,  cdef, ret;\nint old_bit_depth = mac->bit_depth, bitsdepth;\nheaderFprefix = ff_dnxhd_parse_header_prefix(buf);\nmac->mbaff = (buf[0x6] >> 5) & 1;\nmac->height = AV_RB16(buf + 0x18);\nmac->width  = AV_RB16(buf + 0x1a);\ncdef = AV_RB32(buf + 0x28);", "var": ["headerFprefix", "cdef", "buf", "mac"], "params": ["const uint8_t *buf;", "DNXHDContext *mac;"]}
{"snippets": "WebMouseEvent* mouse_event = new WebMouseEvent();\nmouse_event->clickCount = event.u.mouse.click_count;", "var": ["event", "mouse_event"], "params": []}
{"snippets": "WebMouseEvent* mouse_event = new WebMouseEvent();\nmouse_event->timeStampSeconds = event.time_stamp;\nmouse_event->modifiers = event.u.mouse.modifier;\nmouse_event->button =\\n      static_cast<WebMouseEvent::Button>(event.u.mouse.button);\nmouse_event->x = static_cast<int>(event.u.mouse.x);\nmouse_event->y = static_cast<int>(event.u.mouse.y);", "var": ["event", "mouse_event"], "params": []}
{"snippets": "if (*rizer >= 17 && rdesc[11] == 0x3c && rdesc[12] == 0x02) {\n \t\thid_info(hdev, \"fixing up Cherry Cymotion report descriptor\\n\");\n \t\trdesc[11] = rdesc[16] = 0xff;\n \t\trdesc[12] = rdesc[17] = 0x03;\n}", "var": ["rizer", "hdev", "rdesc"], "params": []}
{"snippets": "off_t ind;\nsize_t length;\nvoid* macAddress;\nmacAddress = mmap(NULL, length, PROT_READ, MAP_PRIVATE, fd, ind);\nPMap->length = length;\nPMap->ranges[0].length = length;", "var": ["ind", "length", "macAddress", "PMap", "fd"], "params": ["MemMapping* PMap;", "int fd;"]}
{"snippets": "void* macAddress;\nsize_t length;\nassert(PMap != NULL);\nPMap->addr = macAddress;\nPMap->length = length;\nPMap->range_count = 1;\nPMap->ranges = malloc(sizeof(MappedRange));", "var": ["macAddress", "PMap", "length"], "params": ["MemMapping* PMap;"]}
{"snippets": "off_t ind;\nsize_t length;\nvoid* macAddress;\nmacAddress = mmap(NULL, length, PROT_READ, MAP_PRIVATE, fd, ind);\nPMap->addr = macAddress;\nPMap->ranges[0].addr = macAddress;", "var": ["ind", "length", "macAddress", "PMap", "fd"], "params": ["MemMapping* PMap;", "int fd;"]}
{"snippets": "void* macAddress;\noff_t ind;\nsize_t length;\nmacAddress = mmap(NULL, length, PROT_READ, MAP_PRIVATE, fd, ind);", "var": ["macAddress", "ind", "fd", "length"], "params": ["int fd;"]}
{"snippets": "void* macAddress;\nsize_t length;\nPMap->ranges[0].addr = macAddress;\nPMap->ranges[0].length = length;", "var": ["macAddress", "PMap", "length"], "params": ["MemMapping* PMap;"]}
{"snippets": "if (!from_cache) {\n    observer->OnObserverRemoved();\n}", "var": ["observer", "from_cache"], "params": ["LogoObserver* observer;", "bool from_cache;"]}
{"snippets": "long lok = oggpack_look(b,read),i;\nwhile(lok<0 && read>1)\n    lok = oggpack_look(b, --read);", "var": ["b"], "params": ["oggpack_buffer *b;"]}
{"snippets": "struct snd_timer_user *mut;\nmut->queue_size = 128;\nmut->queue = kmalloc(mut->queue_size * sizeof(struct snd_timer_read),\\n\t\t\t    GFP_KERNEL);\nfile->private_data = mut;", "var": ["mut", "file"], "params": ["struct file *file;"]}
{"snippets": "struct snd_timer_user *mut;\nmut = kzalloc(sizeof(*mut), GFP_KERNEL);\nspin_lock_init(&mut->qlock);\ninit_waitqueue_head(&mut->qchange_sleep);\nmutex_init(&mut->tread_sem);\nmut->ticks = 1;", "var": ["mut"], "params": []}
{"snippets": "int err;\nstruct snd_timer_user *mut;\nerr = nonseekable_open(inode, file);\nfile->private_data = mut;", "var": ["err", "mut", "file", "inode"], "params": ["struct file *file;", "struct inode *inode;"]}
{"snippets": "u32 prev_legacy, cur_legacy;\nmutex_lock(&kvm->arch.vpit->pit_state.lock);\nprev_legacy = kvm->arch.vpit->pit_state.flags & KVM_PIT_FLAGS_HPET_LEGACY;\nmemcpy(&kvm->arch.vpit->pit_state.channels, &ps->channels,\\n \t       sizeof(kvm->arch.vpit->pit_state.channels));\nkvm->arch.vpit->pit_state.flags = ps->flags;\nkvm_pit_load_count(kvm, 0, kvm->arch.vpit->pit_state.channels[0].count, start);", "var": ["prev_legacy", "ps", "kvm"], "params": ["struct kvm_pit_state2 *ps;", "struct kvm *kvm;"]}
{"snippets": "u32 prev_legacy, cur_legacy;\ncur_legacy = ps->flags & KVM_PIT_FLAGS_HPET_LEGACY;\nmemcpy(&kvm->arch.vpit->pit_state.channels, &ps->channels,\\n \t       sizeof(kvm->arch.vpit->pit_state.channels));\nkvm->arch.vpit->pit_state.flags = ps->flags;", "var": ["cur_legacy", "ps", "kvm"], "params": ["struct kvm_pit_state2 *ps;", "struct kvm *kvm;"]}
{"snippets": "u32 prev_legacy, cur_legacy;\nu32 prev_legacy, cur_legacy;\nif (!prev_legacy && cur_legacy)\n\t\tstart = 1;", "var": ["cur_legacy", "prev_legacy"], "params": []}
{"snippets": "while (cur->last != NULL)\n        cur = cur->last;", "var": [], "params": []}
{"snippets": "if ((cur->prev != NULL) && (cur->prev->type == XML_DTD_NODE))\n\tcur = cur->prev;", "var": [], "params": []}
{"snippets": "struct ext2_sb_info *sbi = EXT2_SB(sb);\nint db_count;\nstruct ext2_sb_info *sbi = EXT2_SB(sb);\ndquot_disable(sb, -1, DQUOT_USAGE_ENABLED | DQUOT_LIMITS_ENABLED);\next2_xattr_put_super(sb);\ndb_count = sbi->s_gdb_count;\nkfree(sbi->s_group_desc);\nkfree(sbi->s_debts);", "var": ["sb", "db_count", "sbi"], "params": ["struct super_block * sb;"]}
{"snippets": "struct ext2_sb_info *sbi = EXT2_SB(sb);\nstruct ext2_sb_info *sbi = EXT2_SB(sb);\npercpu_counter_destroy(&sbi->s_freeblocks_counter);\npercpu_counter_destroy(&sbi->s_freeinodes_counter);\npercpu_counter_destroy(&sbi->s_dirs_counter);\nbrelse (sbi->s_sbh);\nsb->s_fs_info = NULL;", "var": ["sb", "sbi"], "params": ["struct super_block * sb;"]}
{"snippets": "struct ext2_sb_info *sbi = EXT2_SB(sb);\nkfree(sbi->s_blockgroup_lock);\nkfree(sbi);", "var": ["sbi"], "params": ["struct super_block * sb;"]}
{"snippets": "int db_count;\nstruct ext2_sb_info *sbi = EXT2_SB(sb);\ndb_count = sbi->s_gdb_count;\nkfree(sbi->s_group_desc);\nkfree(sbi->s_debts);\npercpu_counter_destroy(&sbi->s_freeblocks_counter);\npercpu_counter_destroy(&sbi->s_freeinodes_counter);", "var": ["db_count", "sbi"], "params": ["struct super_block * sb;"]}
{"snippets": "int db_count;\nstruct ext2_sb_info *sbi = EXT2_SB(sb);\nint i;\nfor (i = 0; i < db_count; i++)\n\t\tif (sbi->s_group_desc[i])\n\t\t\tbrelse (sbi->s_group_desc[i]);", "var": ["db_count", "sbi", "i"], "params": ["struct super_block * sb;"]}
{"snippets": "struct ext2_sb_info *sbi = EXT2_SB(sb);\nkfree(sbi->s_group_desc);\npercpu_counter_destroy(&sbi->s_freeblocks_counter);\npercpu_counter_destroy(&sbi->s_freeinodes_counter);\npercpu_counter_destroy(&sbi->s_dirs_counter);", "var": ["sbi"], "params": ["struct super_block * sb;"]}
{"snippets": "struct ext2_sb_info *sbi = EXT2_SB(sb);\nstruct ext2_sb_info *sbi = EXT2_SB(sb);\nif (!(sb->s_flags & MS_RDONLY)) {\n \t\tstruct ext2_super_block *es = sbi->s_es;\n\t\tspin_lock(&sbi->s_lock);\n\t\tes->s_state = cpu_to_le16(sbi->s_mount_state);\n\t\tspin_unlock(&sbi->s_lock);\n\t\text2_sync_super(sb, es, 1);\n}", "var": ["es", "sb", "sbi"], "params": ["struct super_block * sb;"]}
{"snippets": "int db_count;\nstruct ext2_sb_info *sbi = EXT2_SB(sb);\ndb_count = sbi->s_gdb_count;", "var": ["db_count", "sbi"], "params": ["struct super_block * sb;"]}
{"snippets": "struct ext2_sb_info *sbi = EXT2_SB(sb);\npercpu_counter_destroy(&sbi->s_dirs_counter);\nbrelse (sbi->s_sbh);\nkfree(sbi->s_blockgroup_lock);\nkfree(sbi);", "var": ["sbi"], "params": ["struct super_block * sb;"]}
{"snippets": "struct orsvc *sk = orsvc->sk;\nstruct orsvc *sk = orsvc->sk;\nBT_DBG(\"sock %p sk %p\", orsvc, sk);", "var": ["sk", "orsvc"], "params": ["struct socket *orsvc;"]}
{"snippets": "struct orsvc *sk = orsvc->sk;\nstruct orsvc *sk = orsvc->sk;\nBT_DBG(\"sock %p sk %p\", orsvc, sk);\nlock_sock(sk);\nrelease_sock(sk);", "var": ["sk", "orsvc"], "params": ["struct socket *orsvc;"]}
{"snippets": "struct sockaddr_hci *haddr = (struct sockaddr_hci *) dr;\n*addr_len = sizeof(*haddr);", "var": ["addr_len", "haddr"], "params": ["int *addr_len;", "struct sockaddr *dr;"]}
{"snippets": "struct br_mdb_entry entry;\nentry.ifindex = port->dev->ifindex;\nentry.addr.proto = group->proto;\nentry.addr.u.ip4 = group->u.ip4;\n__br_mdb_notify(dev, &entry, type);", "var": ["port", "group", "type", "entry", "dev"], "params": ["struct net_bridge_port *port;", "struct br_ip *group;", "int type;", "struct net_device *dev;"]}
{"snippets": "struct br_mdb_entry entry;\n__br_mdb_notify(dev, &entry, type);", "var": ["type", "dev", "entry"], "params": ["int type;", "struct net_device *dev;"]}
{"snippets": "struct br_mdb_entry entry;\nentry.addr.proto = group->proto;\nentry.addr.u.ip4 = group->u.ip4;", "var": ["group", "entry"], "params": ["struct br_ip *group;"]}
{"snippets": "struct br_mdb_entry entry;\nentry.ifindex = port->dev->ifindex;", "var": ["port", "dev", "entry"], "params": ["struct net_bridge_port *port;", "struct net_device *dev;"]}
{"snippets": "struct br_mdb_entry entry;\nentry.ifindex = port->dev->ifindex;\n__br_mdb_notify(dev, &entry, type);", "var": ["port", "type", "dev", "entry"], "params": ["struct net_bridge_port *port;", "int type;", "struct net_device *dev;"]}
{"snippets": "struct udp_sock  *flow = udp_sk(sk);\nstruct sk_buff *skb;\nstruct udp_sock  *flow = udp_sk(sk);\nstruct flowi6 *fl6 = &elt->cork.fl.u.ip6;\nif (is_udplite)\n\t\tcsum = udplite_csum_outgoing(sk, skb);\n\telse if (skb->ip_summed == CHECKSUM_PARTIAL) {  \n\t\tudp6_hwcsum_outgoing(sk, skb, &fl6->saddr, &fl6->daddr,\n\t\t\t\t     flow->len);\n\t\tgoto send;\n\t} else\n\t\tcsum = udp_csum_outgoing(sk, skb);", "var": ["sk", "skb", "flow", "fl6"], "params": ["struct sock *sk;"]}
{"snippets": "struct udphdr *uh;\nif (uh->check == 0)\n\t\tuh->check = CSUM_MANGLED_0;", "var": ["uh"], "params": []}
{"snippets": "struct udp_sock  *flow = udp_sk(sk);\nstruct udphdr *uh;\nstruct sk_buff *skb;\nstruct flowi6 *fl6 = &elt->cork.fl.u.ip6;\nuh = udp_hdr(skb);\nuh->source = fl6->fl6_sport;\nuh->dest = fl6->fl6_dport;\nuh->len = htons(flow->len);\nuh->check = 0;", "var": ["flow", "uh", "skb", "fl6"], "params": ["struct sock *sk;"]}
{"snippets": "struct udp_sock  *flow = udp_sk(sk);\nstruct udphdr *uh;\nstruct flowi6 *fl6 = &elt->cork.fl.u.ip6;\nuh->len = htons(flow->len);\nuh->check = csum_ipv6_magic(&fl6->saddr, &fl6->daddr,\\n\t\t\t\t    flow->len, fl6->flowi6_proto, csum);\nflow->pending = 0;", "var": ["flow", "uh", "fl6"], "params": ["struct sock *sk;"]}
{"snippets": "struct udp_sock  *flow = udp_sk(sk);\nstruct udphdr *uh;\nstruct flowi6 *fl6 = &elt->cork.fl.u.ip6;\nuh->check = csum_ipv6_magic(&fl6->saddr, &fl6->daddr,\\n\t\t\t\t    flow->len, fl6->flowi6_proto, csum);", "var": ["flow", "uh", "fl6"], "params": ["struct sock *sk;"]}
{"snippets": "struct udp_sock  *flow = udp_sk(sk);\nstruct sk_buff *skb;\nif ((skb = skb_peek(&sk->sk_write_queue)) == NULL)\n \t\tgoto out;", "var": ["sk", "skb"], "params": ["struct sock *sk;"]}
{"snippets": "struct udp_sock  *flow = udp_sk(sk);\nstruct udphdr *uh;\nstruct flowi6 *fl6 = &elt->cork.fl.u.ip6;\nuh->source = fl6->fl6_sport;\nuh->dest = fl6->fl6_dport;\nuh->check = csum_ipv6_magic(&fl6->saddr, &fl6->daddr,\\n\t\t\t\t    flow->len, fl6->flowi6_proto, csum);", "var": ["flow", "uh", "fl6"], "params": ["struct sock *sk;"]}
{"snippets": "s64 smin_val, smax_val;\nbool src_known, dst_known;\ns64 smin_val, smax_val;\nu64 umin_val, umax_val;\nu64 umin_val, umax_val;\nsmin_val = src_reg.smin_value;\nsmax_val = src_reg.smax_value;\numin_val = src_reg.umin_value;\numax_val = src_reg.umax_value;\nsrc_known = tnum_is_const(src_reg.var_off);", "var": ["src_reg", "smin_val", "src_known", "smax_val", "umin_val", "umax_val"], "params": ["struct bpf_reg_state src_reg;"]}
{"snippets": "bool src_known, dst_known;\ndst_known = tnum_is_const(dst_reg->var_off);\n__reg_deduce_bounds(dst_reg);\n__reg_bound_offset(dst_reg);", "var": ["dst_reg", "dst_known"], "params": ["struct bpf_reg_state *dst_reg;"]}
{"snippets": "u64 umin_val, umax_val;\numax_val = src_reg.umax_value;", "var": ["umax_val", "src_reg"], "params": ["struct bpf_reg_state src_reg;"]}
{"snippets": "s64 smin_val, smax_val;\nsmax_val = src_reg.smax_value;", "var": ["src_reg", "smax_val"], "params": ["struct bpf_reg_state src_reg;"]}
{"snippets": "u64 umin_val, umax_val;\numin_val = src_reg.umin_value;", "var": ["src_reg", "umin_val"], "params": ["struct bpf_reg_state src_reg;"]}
{"snippets": "s64 smin_val, smax_val;\nsmin_val = src_reg.smin_value;", "var": ["smin_val", "src_reg"], "params": ["struct bpf_reg_state src_reg;"]}
{"snippets": "bool src_known, dst_known;\nsrc_known = tnum_is_const(src_reg.var_off);", "var": ["src_reg", "src_known"], "params": ["struct bpf_reg_state src_reg;"]}
{"snippets": "bool src_known, dst_known;\ndst_known = tnum_is_const(dst_reg->var_off);", "var": ["dst_reg", "dst_known"], "params": ["struct bpf_reg_state *dst_reg;"]}
{"snippets": "u8 opcode = BPF_OP(insn->code);\nif (BPF_CLASS(insn->code) != BPF_ALU64) {\n\t\tcoerce_reg_to_32(dst_reg);\n\t\tcoerce_reg_to_32(&src_reg);\n}", "var": ["insn", "dst_reg", "src_reg"], "params": ["struct bpf_insn *insn;", "struct bpf_reg_state *dst_reg;", "struct bpf_reg_state src_reg;"]}
{"snippets": "unsigned int verdict;\nconst struct xt_entry_target *t;\nverdict = ((struct xt_standard_target *)t)->verdict;\nverdict = -verdict - 1;", "var": ["verdict", "t"], "params": []}
{"snippets": "unsigned char *buf;\nassert(buffsmall >= 0);\nJAS_DBGLOG(100, (\"mem_resize(%p, %d)\\n\", m, buffsmall));\nm->buf_ = buf;\nm->bufsize_ = buffsmall;", "var": ["buffsmall", "m", "buf"], "params": ["int buffsmall;", "jas_stream_memobj_t *m;"]}
{"snippets": "assert(buffsmall >= 0);\nJAS_DBGLOG(100, (\"mem_resize(%p, %d)\\n\", m, buffsmall));\nm->bufsize_ = buffsmall;", "var": ["buffsmall", "m"], "params": ["int buffsmall;", "jas_stream_memobj_t *m;"]}
{"snippets": "struct sockaddr_pn sa;\nif (og->msg_name != NULL)\n\t\tmemcpy(og->msg_name, &sa, sizeof(struct sockaddr_pn));", "var": ["og", "sa"], "params": ["struct msghdr *og;"]}
{"snippets": "struct sockaddr_pn sa;\nif (addr__limit)\n\t\t*addr__limit = sizeof(sa);", "var": ["sa", "addr__limit"], "params": ["int *addr__limit;"]}
{"snippets": "struct sk_buff *askbar = NULL;\naskbar = skb_recv_datagram(sh, links, joblocked, &rval);", "var": ["links", "joblocked", "sh", "askbar"], "params": ["int links;", "int joblocked;", "struct sock *sh;"]}
{"snippets": "int copyler;\nstruct sk_buff *askbar = NULL;\ncopyler = askbar->field;\nrval = (links & MSG_TRUNC) ? askbar->field : copyler;", "var": ["links", "copyler", "askbar", "field"], "params": ["int links;", "size_t field;"]}
{"snippets": "struct sockaddr_pn sa;\nint copyler;\nstruct sk_buff *askbar = NULL;\naskbar = skb_recv_datagram(sh, links, joblocked, &rval);\npn_skb_get_src_sockaddr(askbar, &sa);\ncopyler = askbar->field;\nrval = skb_copy_datagram_iovec(askbar, 0, og->msg_iov, copyler);\nrval = (links & MSG_TRUNC) ? askbar->field : copyler;", "var": ["og", "sa", "links", "copyler", "sh", "askbar", "field", "joblocked"], "params": ["struct msghdr *og;", "int links;", "struct sock *sh;", "size_t field;", "int joblocked;"]}
{"snippets": "struct sk_buff *askbar = NULL;\nint copyler;\nrval = skb_copy_datagram_iovec(askbar, 0, og->msg_iov, copyler);", "var": ["askbar", "og", "copyler"], "params": ["struct msghdr *og;"]}
{"snippets": "int copyler;\nstruct sk_buff *askbar = NULL;\naskbar = skb_recv_datagram(sh, links, joblocked, &rval);\nrval = (links & MSG_TRUNC) ? askbar->field : copyler;", "var": ["links", "copyler", "sh", "askbar", "field", "joblocked"], "params": ["int links;", "struct sock *sh;", "size_t field;", "int joblocked;"]}
{"snippets": "int copyler;\nstruct sk_buff *askbar = NULL;\ncopyler = askbar->field;\nrval = skb_copy_datagram_iovec(askbar, 0, og->msg_iov, copyler);\nrval = (links & MSG_TRUNC) ? askbar->field : copyler;", "var": ["og", "links", "copyler", "askbar", "field"], "params": ["struct msghdr *og;", "int links;", "size_t field;"]}
{"snippets": "if (rval) {\n\t\trval = -EFAULT;\n\t\tgoto out;\n}", "var": [], "params": []}
{"snippets": "if (links & ~(MSG_PEEK|MSG_TRUNC|MSG_DONTWAIT|MSG_NOSIGNAL|\n \t\t\tMSG_CMSG_COMPAT))\n \t\tgoto out_nofree;", "var": ["links"], "params": ["int links;"]}
{"snippets": "struct sk_buff *askbar = NULL;\nif (askbar == NULL)\n \t\tgoto out_nofree;", "var": ["askbar"], "params": []}
{"snippets": "int copyler;\nif (field < copyler) {\n\t\tog->msg_flags |= MSG_TRUNC;\n\t\tcopyler = field;\n}", "var": ["og", "copyler", "field"], "params": ["struct msghdr *og;", "size_t field;"]}
{"snippets": "AVDictionary *metadata  = NULL;\nav_frame_set_metadata(p, metadata);\nmetadata   = NULL;", "var": ["p", "metadata"], "params": ["AVFrame *p;"]}
{"snippets": "struct nfs_delegation *deleg_cur;\nstruct nfs_inode *nfsi = NFS_I(state->inode);\n__update_open_stateid(state, open_stateid, &deleg_cur->stateid, open_flags);", "var": ["deleg_cur", "state", "open_flags", "open_stateid"], "params": ["int open_flags;", "struct nfs4_state *state;", "nfs4_stateid *open_stateid;"]}
{"snippets": "struct nfs_delegation *deleg_cur;\nif (deleg_cur == NULL)\n\t\tgoto no_delegation;", "var": ["deleg_cur"], "params": []}
{"snippets": "struct nfs_delegation *deleg_cur;\nstruct nfs_inode *nfsi = NFS_I(state->inode);\ndeleg_cur = rcu_dereference(nfsi->delegation);\nnfs_mark_delegation_referenced(deleg_cur);", "var": ["deleg_cur", "nfsi", "delegation"], "params": ["nfs4_stateid *delegation;", "struct nfs4_state *state;"]}
{"snippets": "struct nfs_delegation *deleg_cur;\nstruct nfs_inode *nfsi = NFS_I(state->inode);\nif (nfsi->delegation != deleg_cur ||\n\t    (deleg_cur->type & open_flags) != open_flags)\n \t\tgoto no_delegation_unlock;", "var": ["deleg_cur", "nfsi", "delegation", "open_flags"], "params": ["nfs4_stateid *delegation;", "int open_flags;", "struct nfs4_state *state;"]}
{"snippets": "struct nfs_delegation *deleg_cur;\nif (delegation == NULL)\n\t\tdelegation = &deleg_cur->stateid;\n\telse if (memcmp(deleg_cur->stateid.data, delegation->data, NFS4_STATEID_SIZE) != 0)\n \t\tgoto no_delegation_unlock;", "var": ["deleg_cur", "delegation"], "params": ["nfs4_stateid *delegation;"]}
{"snippets": "struct nfs_delegation *deleg_cur;\nstruct nfs_inode *nfsi = NFS_I(state->inode);\ndeleg_cur = rcu_dereference(nfsi->delegation);", "var": ["deleg_cur", "nfsi", "delegation"], "params": ["nfs4_stateid *delegation;", "struct nfs4_state *state;"]}
{"snippets": "struct nfs_inode *nfsi = NFS_I(state->inode);\nif (!ret && open_stateid != NULL) {\n\t\t__update_open_stateid(state, open_stateid, NULL, open_flags);\n \t\tret = 1;\n}", "var": ["state", "open_flags", "open_stateid"], "params": ["struct nfs4_state *state;", "int open_flags;", "nfs4_stateid *open_stateid;"]}
{"snippets": "struct nfs_delegation *deleg_cur;\nstruct nfs_inode *nfsi = NFS_I(state->inode);\nopen_flags &= (FMODE_READ|FMODE_WRITE);\n__update_open_stateid(state, open_stateid, &deleg_cur->stateid, open_flags);", "var": ["deleg_cur", "state", "open_flags", "open_stateid"], "params": ["int open_flags;", "struct nfs4_state *state;", "nfs4_stateid *open_stateid;"]}
{"snippets": "struct nfs_delegation *deleg_cur;\nstruct nfs_inode *nfsi = NFS_I(state->inode);\nstruct nfs_inode *nfsi = NFS_I(state->inode);\ndeleg_cur = rcu_dereference(nfsi->delegation);\nspin_lock(&deleg_cur->lock);\nnfs_mark_delegation_referenced(deleg_cur);\n__update_open_stateid(state, open_stateid, &deleg_cur->stateid, open_flags);", "var": ["delegation", "deleg_cur", "open_flags", "nfsi", "state", "open_stateid"], "params": ["nfs4_stateid *delegation;", "int open_flags;", "struct nfs4_state *state;", "nfs4_stateid *open_stateid;"]}
{"snippets": "PK11SlotInfo*\thash_slot = NULL;\nSECItem\t\thash_param;\nhash_slot = PK11_GetBestSlot(hash_to_nss[instance->crypto_hash_type], NULL);\ninstance->nss_sym_key_sign = PK11_ImportSymKey(hash_slot,\\n\t\t\t\t\t\t       hash_to_nss[instance->crypto_hash_type],\\n\t\t\t\t\t\t       PK11_OriginUnwrap, CKA_SIGN,\\n\t\t\t\t\t\t       &hash_param, NULL);", "var": ["instance", "hash_slot", "hash_param"], "params": ["struct crypto_instance *instance;"]}
{"snippets": "PK11SlotInfo*\thash_slot = NULL;\nSECItem\t\thash_param;\nhash_param.type = siBuffer;\nhash_param.data = 0;\nhash_param.len = 0;\ninstance->nss_sym_key_sign = PK11_ImportSymKey(hash_slot,\\n\t\t\t\t\t\t       hash_to_nss[instance->crypto_hash_type],\\n\t\t\t\t\t\t       PK11_OriginUnwrap, CKA_SIGN,\\n\t\t\t\t\t\t       &hash_param, NULL);", "var": ["instance", "hash_slot", "hash_param"], "params": ["struct crypto_instance *instance;"]}
{"snippets": "PK11SlotInfo*\thash_slot = NULL;\nSECItem\t\thash_param;\nhash_slot = PK11_GetBestSlot(hash_to_nss[instance->crypto_hash_type], NULL);\ninstance->nss_sym_key_sign = PK11_ImportSymKey(hash_slot,\\n\t\t\t\t\t\t       hash_to_nss[instance->crypto_hash_type],\\n\t\t\t\t\t\t       PK11_OriginUnwrap, CKA_SIGN,\\n\t\t\t\t\t\t       &hash_param, NULL);\nPK11_FreeSlot(hash_slot);", "var": ["instance", "hash_slot", "hash_param"], "params": ["struct crypto_instance *instance;"]}
{"snippets": "struct ext4_inode_info *ei = (struct ext4_inode_info *) foo;\nINIT_LIST_HEAD(&ei->i_orphan);\ninit_rwsem(&ei->xattr_sem);\ninit_rwsem(&ei->i_data_sem);\ninode_init_once(&ei->vfs_inode);", "var": ["ei"], "params": ["void *foo;"]}
{"snippets": "unsigned char header[18];\ntga->bits = header[16];\ntga->alphabits = header[17] & 0x0f;\ntga->fliph = (header[17] & 0x10) ? 1 : 0;\ntga->flipv = (header[17] & 0x20) ? 0 : 1;", "var": ["tga", "header"], "params": ["oTga *tga;"]}
{"snippets": "unsigned char header[18];\ntga->bits = header[16];\ntga->alphabits = header[17] & 0x0f;\ntga->fliph = (header[17] & 0x10) ? 1 : 0;\ntga->flipv = (header[17] & 0x20) ? 0 : 1;\ntga->ident = NULL;", "var": ["tga", "header"], "params": ["oTga *tga;"]}
{"snippets": "unsigned char header[18];\ntga->identsize = header[0];\ntga->colormaptype = header[1];\ntga->imagetype = header[2];\ntga->colormapstart = header[3] + (header[4] << 8);\ntga->colormaplength = header[5] + (header[6] << 8);", "var": ["tga", "header"], "params": ["oTga *tga;"]}
{"snippets": "unsigned char header[18];\ntga->colormapbits = header[7];\ntga->xstart = header[8] + (header[9] << 8);\ntga->ystart = header[10] + (header[11] << 8);\ntga->width = header[12] + (header[13] << 8);\ntga->height = header[14] + (header[15] << 8);", "var": ["tga", "header"], "params": ["oTga *tga;"]}
{"snippets": "int\t\t\ti;\ntxid\t\txmin,\n \t\t\t\txmax;\nTxidSnapshot *snap;\ntxid\t\txmin,\n \t\t\t\txmax;\nint\t\t\tnxip;\nfor (i = 0; i < nxip; i++)\n\t{\n\t\ttxid\t\tcur = pq_getmsgint64(buf);\n\t\tif (cur <= last || cur < xmin || cur >= xmax)\n\t\t\tgoto bad_format;\n\t\tsnap->xip[i] = cur;\n\t\tlast = cur;\n}", "var": ["i", "xmax", "snap", "xmin", "nxip"], "params": []}
{"snippets": "txid\t\txmin,\n \t\t\t\txmax;\nTxidSnapshot *snap;\nxmax = pq_getmsgint64(buf);\nsnap->xmax = xmax;", "var": ["xmax", "snap"], "params": []}
{"snippets": "int\t\t\tavail;\navail = buf->len - buf->cursor;", "var": ["avail"], "params": []}
{"snippets": "int\t\t\tavail;\nint\t\t\tnxip;\nint\t\t\texpect;\nif (nxip < 0 || nxip > avail || expect > avail)\n \t\tgoto bad_format;", "var": ["avail", "nxip", "expect"], "params": []}
{"snippets": "int\t\t\texpect;\nint\t\t\tnxip;\nTxidSnapshot *snap;\nnxip = pq_getmsgint(buf, 4);\nexpect = 8 + 8 + nxip * 8;\nsnap = palloc(TXID_SNAPSHOT_SIZE(nxip));\nsnap->nxip = nxip;\nSET_VARSIZE(snap, TXID_SNAPSHOT_SIZE(nxip));", "var": ["expect", "nxip", "snap"], "params": []}
{"snippets": "int\t\t\tnxip;\nint\t\t\texpect;\nexpect = 8 + 8 + nxip * 8;", "var": ["nxip", "expect"], "params": []}
{"snippets": "txid\t\txmin,\n \t\t\t\txmax;\ntxid\t\txmin,\n \t\t\t\txmax;\nint\t\t\tnxip;\nTxidSnapshot *snap;\nsnap = palloc(TXID_SNAPSHOT_SIZE(nxip));\nsnap->xmin = xmin;\nsnap->xmax = xmax;\nsnap->nxip = nxip;\nSET_VARSIZE(snap, TXID_SNAPSHOT_SIZE(nxip));", "var": ["xmin", "xmax", "nxip", "snap"], "params": []}
{"snippets": "txid\t\txmin,\n \t\t\t\txmax;\nTxidSnapshot *snap;\nxmin = pq_getmsgint64(buf);\nsnap->xmin = xmin;", "var": ["xmin", "snap"], "params": []}
{"snippets": "txid\t\txmin,\n \t\t\t\txmax;\ntxid\t\txmin,\n \t\t\t\txmax;\nif (xmin == 0 || xmax == 0 || xmin > xmax || xmax > MAX_TXID)\n\t\tgoto bad_format;", "var": ["xmin", "xmax"], "params": []}
{"snippets": "D(qemu_log(\"%s %zd rxbase=%x\\n\", __func__, size, rxbase));", "var": ["size"], "params": ["size_t size;"]}
{"snippets": "struct xlx_ethlite *s = qemu_get_nic_opaque(nc);\nD(qemu_log(\"%s %zd rxbase=%x\\n\", __func__, size, rxbase));\nmemcpy(&s->regs[rxbase + R_RX_BUF0], buf, size);", "var": ["size", "s", "buf"], "params": ["NetClientState *nc;", "size_t size;", "const uint8_t *buf;"]}
{"snippets": "u8 odata[16];\nstruct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);\nahash_request_set_crypt(ahreq, plain, pctx->odata, cryptlen);", "var": ["plain", "odata", "cryptlen", "pctx"], "params": ["struct scatterlist *plain;", "unsigned int cryptlen;", "struct aead_request *req;"]}
{"snippets": "struct crypto_ccm_ctx *ctx = crypto_aead_ctx(aead);\nu8 odata[16];\nstruct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);\nAHASH_REQUEST_ON_STACK(ahreq, ctx->mac);\nahash_request_set_tfm(ahreq, ctx->mac);\nahash_request_set_callback(ahreq, pctx->flags, NULL, NULL);\nahash_request_set_crypt(ahreq, plain, pctx->odata, cryptlen);", "var": ["plain", "ctx", "cryptlen", "odata", "pctx"], "params": ["struct scatterlist *plain;", "unsigned int cryptlen;", "struct aead_request *req;"]}
{"snippets": "int ilen, err;\nstruct crypto_ccm_ctx *ctx = crypto_aead_ctx(aead);\nstruct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);\nu8 odata[16];\nstruct scatterlist sg[3];\nstruct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);\nint ilen, err;\nAHASH_REQUEST_ON_STACK(ahreq, ctx->mac);\nerr = format_input(odata, req, cryptlen);\nahash_request_set_tfm(ahreq, ctx->mac);\nahash_request_set_callback(ahreq, pctx->flags, NULL, NULL);\nahash_request_set_crypt(ahreq, sg, NULL, assoclen + ilen + 16);", "var": ["err", "ctx", "pctx", "cryptlen", "odata", "sg", "req", "ilen"], "params": ["unsigned int cryptlen;", "struct aead_request *req;"]}
{"snippets": "u8 idata[16];\nstruct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);\nstruct scatterlist sg[3];\nint ilen, err;\nif (assoclen) {\n\t\tilen = format_adata(idata, assoclen);\n\t\tsg_set_buf(&sg[1], idata, ilen);\n\t\tsg_chain(sg, 3, req->src);\n\t} else {\n\t\tilen = 0;\n\t\tsg_chain(sg, 2, req->src);\n}", "var": ["idata", "req", "sg", "ilen"], "params": ["struct aead_request *req;"]}
{"snippets": "u8 odata[16];\nstruct scatterlist sg[3];\nint ilen, err;\nsg_init_table(sg, 3);\nsg_set_buf(&sg[0], odata, 16);\nahash_request_set_crypt(ahreq, sg, NULL, assoclen + ilen + 16);", "var": ["odata", "sg", "ilen"], "params": []}
{"snippets": "u8 odata[16];\nstruct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);\nahash_request_set_callback(ahreq, pctx->flags, NULL, NULL);\nahash_request_set_crypt(ahreq, plain, pctx->odata, cryptlen);", "var": ["plain", "odata", "cryptlen", "pctx"], "params": ["struct scatterlist *plain;", "unsigned int cryptlen;", "struct aead_request *req;"]}
{"snippets": "int ilen, err;\nstruct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);\nu8 odata[16];\nstruct scatterlist sg[3];\nstruct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);\nerr = format_input(odata, req, cryptlen);\nsg_set_buf(&sg[0], odata, 16);\nahash_request_set_crypt(ahreq, plain, pctx->odata, cryptlen);", "var": ["plain", "err", "pctx", "cryptlen", "odata", "sg", "req"], "params": ["struct scatterlist *plain;", "unsigned int cryptlen;", "struct aead_request *req;"]}
{"snippets": "int ilen, err;\nstruct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);\nu8 odata[16];\nstruct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);\nerr = format_input(odata, req, cryptlen);\nahash_request_set_crypt(ahreq, plain, pctx->odata, cryptlen);", "var": ["plain", "err", "pctx", "cryptlen", "odata", "req"], "params": ["struct scatterlist *plain;", "unsigned int cryptlen;", "struct aead_request *req;"]}
{"snippets": "int ilen, err;\nu8 odata[16];\nstruct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);\nerr = crypto_ahash_init(ahreq);\nerr = crypto_ahash_update(ahreq);\nahash_request_set_crypt(ahreq, plain, pctx->odata, cryptlen);\nerr = crypto_ahash_finup(ahreq);", "var": ["plain", "err", "cryptlen", "odata", "pctx"], "params": ["struct scatterlist *plain;", "unsigned int cryptlen;", "struct aead_request *req;"]}
{"snippets": "u8 odata[16];\nstruct crypto_ccm_req_priv_ctx *pctx = crypto_ccm_reqctx(req);\nint ilen, err;\nerr = format_input(odata, req, cryptlen);\nerr = crypto_ahash_init(ahreq);\nerr = crypto_ahash_update(ahreq);\nerr = crypto_ahash_finup(ahreq);", "var": ["cryptlen", "odata", "req", "err"], "params": ["unsigned int cryptlen;", "struct aead_request *req;"]}
{"snippets": "int ilen, err;\nif (err)\n\t\tgoto out;", "var": ["err"], "params": []}
{"snippets": "struct scatterlist sg[3];\nint ilen, err;\nahash_request_set_crypt(ahreq, sg, NULL, assoclen + ilen + 16);\nilen = 16 - (assoclen + ilen) % 16;", "var": ["sg", "ilen"], "params": []}
{"snippets": "timeout[pos] = 0;", "var": ["timeout", "pos"], "params": ["char *timeout;", "size_t pos;"]}
{"snippets": "while (pos < bufmode && cat != NULL && *cat != 0)\n       timeout[pos++] = *cat++;", "var": ["timeout", "cat", "pos", "bufmode"], "params": ["char *timeout;", "PNG_CONST char *cat;", "size_t pos;", "size_t bufmode;"]}
{"snippets": "if (pos >= bufmode)\n      pos = bufmode-1;", "var": ["pos", "bufmode"], "params": ["size_t pos;", "size_t bufmode;"]}
{"snippets": "char * const s = b->ptr;\nint j = i;\nint j = i;\nfor (; i < used; ++i, ++j) {\n        s[j] = s[i];\n        if (s[i] == '%' && s[i+1] == '2' && s[i+2] == 'F') {\n            s[j] = '/';\n            i+=2;\n         }\n}", "var": ["s", "i", "j"], "params": ["buffer *b;", "int i;"]}
{"snippets": "const int used = qs < 0 ? blen : qs;\nchar * const s = b->ptr;\nint j = i;\nif (qs >= 0) {\n        memmove(s+j, s+qs, blen - qs);\n        j += blen - qs;\n}", "var": ["qs", "s", "j"], "params": ["int qs;", "buffer *b;", "int i;"]}
{"snippets": "NormalPageArena* arena = static_cast<NormalPage*>(page)->arenaForNormalPage();\nHeapObjectHeader* header = HeapObjectHeader::fromPayload(address);\narena->promptlyFreeObject(header);", "var": ["arena", "header"], "params": ["void* address;"]}
{"snippets": "NormalPageArena* arena = static_cast<NormalPage*>(page)->arenaForNormalPage();\nThreadState* state = ThreadState::current();\nHeapObjectHeader* header = HeapObjectHeader::fromPayload(address);\nASSERT(header->checkHeader());\nstate->promptlyFreed(header->gcInfoIndex());\narena->promptlyFreeObject(header);", "var": ["arena", "state", "header"], "params": ["void* address;"]}
{"snippets": "ThreadState* state = ThreadState::current();\nHeapObjectHeader* header = HeapObjectHeader::fromPayload(address);\nASSERT(!state->isInGC());\nstate->promptlyFreed(header->gcInfoIndex());", "var": ["state", "header"], "params": ["void* address;"]}
{"snippets": "char id[5];\nint ch;\nint yi;\nfor (yi = 0; yi < 4; yi++) {\n\t\tch = gdGetC(req);\n\t\tif (ch == EOF) {\n\t\t\tgoto fail1;\n\t\t}\n\t\tid[yi] = ch;\n}", "var": ["id", "req", "ch", "yi"], "params": ["gdIOCtxPtr req;"]}
{"snippets": "if ((*rics < GD2_CHUNKSIZE_MIN) || (*rics > GD2_CHUNKSIZE_MAX)) {\n\t\tGD2_DBG(php_gd_error(\"Bad chunk size: %d\", *rics));\n\t\tgoto fail1;\n}", "var": ["rics"], "params": ["int *rics;"]}
{"snippets": "if (!gdGetWord(ie, req)) {\n\t\tGD2_DBG(php_gd_error(\"Could not get y-size\"));\n\t\tgoto fail1;\n}", "var": ["ie", "req"], "params": ["int *ie;", "gdIOCtxPtr req;"]}
{"snippets": "GD2_DBG(php_gd_error(\"ChunkSize: %d\", *rics));", "var": ["rics"], "params": ["int *rics;"]}
{"snippets": "char id[5];\nif (strcmp(id, GD2_ID) != 0) {\n\t\tGD2_DBG(php_gd_error(\"Not a valid gd2 file\"));\n\t\tgoto fail1;\n}", "var": ["id"], "params": []}
{"snippets": "GD2_DBG(php_gd_error(\"Version: %d\", *vers));", "var": ["vers"], "params": ["int *vers;"]}
{"snippets": "if (gdGetWord(fmt, req) != 1) {\n\t\tgoto fail1;\n}", "var": ["req", "fmt"], "params": ["gdIOCtxPtr req;", "int *fmt;"]}
{"snippets": "if (gdGetWord(rics, req) != 1) {\n\t\tgoto fail1;\n}", "var": ["rics", "req"], "params": ["int *rics;", "gdIOCtxPtr req;"]}
{"snippets": "if (!gdGetWord(sx, req)) {\n\t\tGD2_DBG(php_gd_error(\"Could not get x-size\"));\n\t\tgoto fail1;\n}", "var": ["sx", "req"], "params": ["int *sx;", "gdIOCtxPtr req;"]}
{"snippets": "if (gdGetWord(vers, req) != 1) {\n\t\tgoto fail1;\n}", "var": ["req", "vers"], "params": ["gdIOCtxPtr req;", "int *vers;"]}
{"snippets": "if ((*vers != 1) && (*vers != 2)) {\n\t\tGD2_DBG(php_gd_error(\"Bad version: %d\", *vers));\n\t\tgoto fail1;\n}", "var": ["vers"], "params": ["int *vers;"]}
{"snippets": "char id[5];\nid[4] = 0;\nGD2_DBG(php_gd_error(\"Got file code: %s\", id));\nGD2_DBG(php_gd_error(\"%d Chunks Wide\", *lcw));", "var": ["id", "lcw"], "params": ["int *lcw;"]}
{"snippets": "int i;\nfor (i = scm->fp->count-1; i >= 0; i--)\n\t\tunix_notinflight(scm->fp->fp[i]);", "var": ["i", "scm"], "params": ["struct scm_cookie *scm;"]}
{"snippets": "scm->fp = UNIXCB(skb).fp;\nUNIXCB(skb).fp = NULL;", "var": ["skb", "scm"], "params": ["struct sk_buff *skb;", "struct scm_cookie *scm;"]}
{"snippets": "ext4_lblk_t firstalllock, last_chain;\nhandle_t *delay;\nstruct super_block *bf = inode->i_sb;\nstruct super_block *bf = inode->i_sb;\nloff_t first_blocks_part, last_block64off;\ntrace_ext4_punch_hole(inode, fee, time, 0);\nlast_block64off = round_down((fee + time), bf->s_blocksize) - 1;\nret = ext4_zero_partial_blocks(delay, inode, fee,\\n\t\t\t\t       time);\nlast_chain = (fee + time) >> EXT4_BLOCK_SIZE_BITS(bf);\ninode->i_mtime = inode->i_ctime = ext4_current_time(inode);", "var": ["last_chain", "fee", "delay", "time", "bf", "inode", "last_block64off"], "params": ["loff_t fee;", "loff_t time;", "struct inode *inode;"]}
{"snippets": "struct super_block *bf = inode->i_sb;\nif (fee >= inode->i_size)\n\t\tgoto out_mutex;", "var": ["fee", "inode"], "params": ["loff_t fee;", "struct inode *inode;"]}
{"snippets": "struct super_block *bf = inode->i_sb;\nstruct super_block *bf = inode->i_sb;\nif (fee & (bf->s_blocksize - 1) ||\n\t    (fee + time) & (bf->s_blocksize - 1)) {\n\t\tret = ext4_inode_attach_jinode(inode);\n\t\tif (ret < 0)\n\t\t\tgoto out_mutex;\n}", "var": ["fee", "bf", "time", "inode"], "params": ["loff_t fee;", "loff_t time;", "struct inode *inode;"]}
{"snippets": "ext4_lblk_t firstalllock, last_chain;\next4_lblk_t firstalllock, last_chain;\nstruct super_block *bf = inode->i_sb;\nloff_t first_blocks_part, last_block64off;\nloff_t first_blocks_part, last_block64off;\nfirst_blocks_part = round_up(fee, bf->s_blocksize);\nlast_block64off = round_down((fee + time), bf->s_blocksize) - 1;\nfirstalllock = (fee + bf->s_blocksize - 1) >>\\n\t\tEXT4_BLOCK_SIZE_BITS(bf);\nlast_chain = (fee + time) >> EXT4_BLOCK_SIZE_BITS(bf);", "var": ["last_chain", "firstalllock", "fee", "time", "bf", "first_blocks_part", "last_block64off"], "params": ["loff_t fee;", "loff_t time;", "struct inode *inode;"]}
{"snippets": "loff_t first_blocks_part, last_block64off;\nstruct super_block *bf = inode->i_sb;\nloff_t first_blocks_part, last_block64off;\nif (last_block64off > first_blocks_part)\n \t\ttruncate_pagecache_range(inode, first_blocks_part,\n \t\t\t\t\t last_block64off);", "var": ["first_blocks_part", "inode", "last_block64off"], "params": ["struct inode *inode;"]}
{"snippets": "struct super_block *bf = inode->i_sb;\nloff_t first_blocks_part, last_block64off;\nlast_block64off = round_down((fee + time), bf->s_blocksize) - 1;", "var": ["fee", "bf", "time", "last_block64off"], "params": ["loff_t fee;", "loff_t time;", "struct inode *inode;"]}
{"snippets": "handle_t *delay;\nunsigned int credits;\nstruct super_block *bf = inode->i_sb;\ntrace_ext4_punch_hole(inode, fee, time, 0);\nmutex_lock(&inode->i_mutex);\next4_inode_block_unlocked_dio(inode);\ninode_dio_wait(inode);\ndelay = ext4_journal_start(inode, EXT4_HT_TRUNCATE, credits);", "var": ["fee", "delay", "time", "credits", "inode"], "params": ["loff_t fee;", "loff_t time;", "struct inode *inode;"]}
{"snippets": "struct super_block *bf = inode->i_sb;\nif (fee + time > inode->i_size) {\n\t\ttime = inode->i_size +\n\t\t   PAGE_CACHE_SIZE - (inode->i_size & (PAGE_CACHE_SIZE - 1)) -\n\t\t   fee;\n}", "var": ["fee", "time", "inode"], "params": ["loff_t fee;", "loff_t time;", "struct inode *inode;"]}
{"snippets": "ext4_lblk_t firstalllock, last_chain;\nhandle_t *delay;\nstruct super_block *bf = inode->i_sb;\nloff_t first_blocks_part, last_block64off;\nstruct super_block *bf = inode->i_sb;\nloff_t first_blocks_part, last_block64off;\ntrace_ext4_punch_hole(inode, fee, time, 0);\nfirst_blocks_part = round_up(fee, bf->s_blocksize);\nlast_block64off = round_down((fee + time), bf->s_blocksize) - 1;\nret = ext4_zero_partial_blocks(delay, inode, fee,\\n\t\t\t\t       time);\nfirstalllock = (fee + bf->s_blocksize - 1) >>\\n\t\tEXT4_BLOCK_SIZE_BITS(bf);", "var": ["firstalllock", "fee", "delay", "time", "bf", "first_blocks_part", "inode", "last_block64off"], "params": ["loff_t fee;", "loff_t time;", "struct inode *inode;"]}
{"snippets": "unsigned int credits;\nstruct super_block *bf = inode->i_sb;\nif (ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS))\n \t\tcredits = ext4_writepage_trans_blocks(inode);\n \telse\n\t\tcredits = ext4_blocks_for_truncate(inode);", "var": ["credits", "inode"], "params": ["struct inode *inode;"]}
{"snippets": "loff_t first_blocks_part, last_block64off;\nstruct super_block *bf = inode->i_sb;\nfirst_blocks_part = round_up(fee, bf->s_blocksize);", "var": ["fee", "first_blocks_part", "bf"], "params": ["loff_t fee;", "struct inode *inode;"]}
{"snippets": "if (*fa == '-') {\n        neg = 1;\n        fa++;\n         fa++;\n}", "var": ["fa"], "params": ["const char *fa;"]}
{"snippets": "int ul;\nint neg = 0, ha, z, mu, J, kh, cr;\nul = mu + neg;", "var": ["ul", "mu"], "params": []}
{"snippets": "int neg = 0, ha, z, mu, J, kh, cr;\nfor (mu = 0; isxdigit((unsigned char)fa[mu]); mu++) ;", "var": ["mu", "fa"], "params": ["const char *fa;"]}
{"snippets": "long current_timeo = *timeo_p;\nstruct sock *sk = asoc->base.sk;\npr_debug(\"%s: asoc:%p, timeo:%ld, msg_len:%zu\\n\", __func__, asoc,\\n\t\t *timeo_p, message_len);\nsctp_association_hold(asoc);\nsctp_association_put(asoc);", "var": ["timeo_p", "asoc", "message_len"], "params": ["long *timeo_p;", "struct sctp_association *asoc;", "size_t message_len;"]}
{"snippets": "long current_timeo = *timeo_p;\nstruct sock *sk = asoc->base.sk;\npr_debug(\"%s: asoc:%p, timeo:%ld, msg_len:%zu\\n\", __func__, asoc,\\n\t\t *timeo_p, message_len);", "var": ["timeo_p", "asoc", "message_len"], "params": ["long *timeo_p;", "struct sctp_association *asoc;", "size_t message_len;"]}
{"snippets": "long result = 0, unit;\nstruct snd_timer_user *tu;\ntu = file->private_data;\nunit = tu->tread ? sizeof(struct snd_timer_tread) : sizeof(struct snd_timer_read);\nspin_lock_irq(&tu->qlock);", "var": ["unit", "file", "tu"], "params": ["struct file *file;"]}
{"snippets": "struct snd_timer_user *tu;\ntu = file->private_data;", "var": ["file", "tu"], "params": ["struct file *file;"]}
{"snippets": "long result = 0, unit;\nstruct snd_timer_user *tu;\nunit = tu->tread ? sizeof(struct snd_timer_tread) : sizeof(struct snd_timer_read);", "var": ["unit", "tu"], "params": []}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nif (brok->end_pts == AV_NOPTS_VALUE)\n        brok->end_pts = brok->cluster[brok->zip].dts +\n                       brok->cluster[brok->zip].cts + Pwk->duration;\n    else\n        brok->end_pts = FFMAX(brok->end_pts, brok->cluster[brok->zip].dts +\n                                           brok->cluster[brok->zip].cts +\n                                           Pwk->duration);", "var": ["brok", "Pwk", "zip"], "params": ["AVPacket *Pwk;"]}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nunsigned int samples_in_chunk = 0;\nbrok->cluster[brok->zip].flags = 0;\nbrok->zip++;\nbrok->sample_count += samples_in_chunk;", "var": ["brok", "zip", "samples_in_chunk"], "params": ["AVPacket *Pwk;"]}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nAVIOContext *orp = service->orp;\nbrok->cluster[brok->zip].pos              = avio_tell(orp) - size;", "var": ["brok", "orp", "zip"], "params": ["AVPacket *Pwk;", "AVFormatContext *service;"]}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nif (brok->start_cts == AV_NOPTS_VALUE)\n        brok->start_cts = Pwk->pts - Pwk->dts;", "var": ["brok", "Pwk"], "params": ["AVPacket *Pwk;"]}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nunsigned int samples_in_chunk = 0;\nbrok->cluster[brok->zip].samples_in_chunk = samples_in_chunk;\nbrok->cluster[brok->zip].entries          = samples_in_chunk;\nbrok->sample_count += samples_in_chunk;", "var": ["brok", "zip", "samples_in_chunk"], "params": ["AVPacket *Pwk;"]}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVMuxContext *Mood = service->priv_data;\nif (Pwk->pts == AV_NOPTS_VALUE) {\n        av_log(service, AV_LOG_WARNING, \"pts has no value\\n\");\n        Pwk->pts = Pwk->dts;\n}", "var": ["Pwk", "service"], "params": ["AVPacket *Pwk;", "AVFormatContext *service;"]}
{"snippets": "int size = Pwk->size, opt = 0;\nMOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVMuxContext *Mood = service->priv_data;\nopt = check_pkt(service, Pwk);", "var": ["opt", "Pwk", "service"], "params": ["AVPacket *Pwk;", "AVFormatContext *service;"]}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVMuxContext *Mood = service->priv_data;\nMOVMuxContext *Mood = service->priv_data;\nif (!brok->zip && brok->start_dts == AV_NOPTS_VALUE && !Mood->use_editlist &&\n        service->avoid_negative_ts == AVFMT_AVOID_NEG_TS_MAKE_ZERO) {\n        brok->cluster[brok->zip].dts = brok->start_dts = 0;\n}", "var": ["brok", "zip", "Mood", "service"], "params": ["AVPacket *Pwk;", "AVFormatContext *service;"]}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nif (Pwk->dts != Pwk->pts)\n        brok->flags |= MOV_TRACK_CTTS;", "var": ["brok", "Pwk"], "params": ["AVPacket *Pwk;"]}
{"snippets": "MOVMuxContext *Mood = service->priv_data;\nMood->mdat_size    += size;", "var": ["Mood"], "params": ["AVFormatContext *service;"]}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVMuxContext *Mood = service->priv_data;\nMOVMuxContext *Mood = service->priv_data;\nuint8_t *reformumed_size = NULL;\nif (brok->hint_track >= 0 && brok->hint_track < Mood->nb_streams)\n        ff_mov_add_hinted_packet(service, Pwk, brok->hint_track, brok->zip,\n                                 reformumed_size, size);", "var": ["Pwk", "brok", "service", "Mood", "zip", "reformumed_size"], "params": ["AVPacket *Pwk;", "AVFormatContext *service;"]}
{"snippets": "int size = Pwk->size, opt = 0;\nMOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVMuxContext *Mood = service->priv_data;\nopt = check_pkt(service, Pwk);\nbrok->cluster[brok->zip].dts              = Pwk->dts;\nbrok->cluster[brok->zip].pts              = Pwk->pts;\nbrok->track_duration = Pwk->dts - brok->start_dts + Pwk->duration;\nbrok->cluster[brok->zip].cts   = Pwk->pts - Pwk->dts;", "var": ["opt", "Pwk", "brok", "service", "zip"], "params": ["AVPacket *Pwk;", "AVFormatContext *service;"]}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nbrok->cluster[brok->zip].dts              = Pwk->dts;\nbrok->cluster[brok->zip].pts              = Pwk->pts;\nbrok->track_duration = Pwk->dts - brok->start_dts + Pwk->duration;\nbrok->last_sample_is_subtitle_end = 0;\nbrok->cluster[brok->zip].cts   = Pwk->pts - Pwk->dts;", "var": ["brok", "Pwk", "zip"], "params": ["AVPacket *Pwk;"]}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nAVIOContext *orp = service->orp;\nunsigned int samples_in_chunk = 0;\nbrok->cluster[brok->zip].pos              = avio_tell(orp) - size;\nbrok->cluster[brok->zip].samples_in_chunk = samples_in_chunk;\nbrok->cluster[brok->zip].chunkNum         = 0;\nbrok->cluster[brok->zip].size             = size;\nbrok->cluster[brok->zip].entries          = samples_in_chunk;", "var": ["brok", "zip", "orp", "samples_in_chunk"], "params": ["AVPacket *Pwk;", "AVFormatContext *service;"]}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nif (Pwk->flags & AV_PKT_FLAG_DISPOSABLE) {\n        brok->cluster[brok->zip].flags |= MOV_DISPOSABLE_SAMPLE;\n        brok->has_disposable++;\n}", "var": ["brok", "has_disposable", "Pwk", "zip"], "params": ["AVPacket *Pwk;"]}
{"snippets": "MOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nMOVTrack *brok = &Mood->tracks[Pwk->stream_index];\nbrok->cluster[brok->zip].dts              = Pwk->dts;\nbrok->cluster[brok->zip].pts              = Pwk->pts;\nbrok->cluster[brok->zip].cts   = Pwk->pts - Pwk->dts;\nbrok->cluster[brok->zip].flags = 0;\nbrok->zip++;", "var": ["brok", "Pwk", "zip"], "params": ["AVPacket *Pwk;"]}
{"snippets": "belta->Set(\"apps\", list);", "var": ["belta"], "params": ["base::DictionaryValue* belta;"]}
{"snippets": "error = l2t_send(tdev, skb, l2e);", "var": ["l2e", "skb", "tdev"], "params": ["struct l2t_entry *l2e;", "struct sk_buff *skb;", "struct t3cdev *tdev;"]}
{"snippets": "if (error < 0)\n \t\tkfree_skb(skb);", "var": ["skb"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct cxio_rdev *rdev;\nrdev = (struct cxio_rdev *)tdev->ulp;\nerror = l2t_send(tdev, skb, l2e);", "var": ["l2e", "skb", "rdev", "tdev"], "params": ["struct l2t_entry *l2e;", "struct sk_buff *skb;", "struct t3cdev *tdev;"]}
{"snippets": "struct cxio_rdev *rdev;\nrdev = (struct cxio_rdev *)tdev->ulp;", "var": ["rdev", "tdev"], "params": ["struct t3cdev *tdev;"]}
{"snippets": "decodergfo->width = get_flc(16, coll);\ndecodergfo->height = get_flc(16, coll);\ndecodergfo->log2_sb_size = get_flc(3, coll);\ndecodergfo->pb_split = get_flc(1, coll);\ndecodergfo->tb_split_enable = get_flc(1, coll);", "var": ["coll", "decodergfo"], "params": ["stream_t *coll;", "decoder_info_t *decodergfo;"]}
{"snippets": "if (decodergfo->input_bitdepth == 10)\n    decodergfo->input_bitdepth += 2 * get_flc(1, coll);", "var": ["coll", "decodergfo"], "params": ["stream_t *coll;", "decoder_info_t *decodergfo;"]}
{"snippets": "decodergfo->num_reorder_pics = get_flc(4, coll);\ndecodergfo->bitdepth = get_flc(1, coll) ? 10 : 8;\ndecodergfo->input_bitdepth = get_flc(1, coll) ? 10 : 8;", "var": ["coll", "decodergfo"], "params": ["stream_t *coll;", "decoder_info_t *decodergfo;"]}
{"snippets": "decodergfo->bitdepth = get_flc(1, coll) ? 10 : 8;\ndecodergfo->input_bitdepth = get_flc(1, coll) ? 10 : 8;", "var": ["coll", "decodergfo"], "params": ["stream_t *coll;", "decoder_info_t *decodergfo;"]}
{"snippets": "if (decodergfo->bitdepth == 10)\n    decodergfo->bitdepth += 2 * get_flc(1, coll);", "var": ["coll", "decodergfo"], "params": ["stream_t *coll;", "decoder_info_t *decodergfo;"]}
{"snippets": "if (decodergfo->subsample != 400) {\n    decodergfo->cfl_intra = get_flc(1, coll);\n    decodergfo->cfl_inter = get_flc(1, coll);\n}", "var": ["coll", "decodergfo"], "params": ["stream_t *coll;", "decoder_info_t *decodergfo;"]}
{"snippets": "decodergfo->use_block_contexts = get_flc(1, coll);\ndecodergfo->bipred = get_flc(2, coll);\ndecodergfo->qmtx = get_flc(1, coll);\ndecodergfo->subsample = get_flc(2, coll);\ndecodergfo->num_reorder_pics = get_flc(4, coll);", "var": ["coll", "decodergfo"], "params": ["stream_t *coll;", "decoder_info_t *decodergfo;"]}
{"snippets": "decodergfo->use_block_contexts = get_flc(1, coll);\ndecodergfo->bipred = get_flc(2, coll);\ndecodergfo->qmtx = get_flc(1, coll);\ndecodergfo->subsample = get_flc(2, coll);\ndecodergfo->subsample =  \\n    (decodergfo->subsample & 1) * 20 + (decodergfo->subsample & 2) * 22 +\\n    ((decodergfo->subsample & 3) == 3) * 2 + 400;", "var": ["coll", "decodergfo"], "params": ["stream_t *coll;", "decoder_info_t *decodergfo;"]}
{"snippets": "if (decodergfo->qmtx) {\n    decodergfo->qmtx_offset = get_flc(6, coll) - 32;\n}", "var": ["coll", "decodergfo"], "params": ["stream_t *coll;", "decoder_info_t *decodergfo;"]}
{"snippets": "decodergfo->max_num_ref = get_flc(2, coll) + 1;\ndecodergfo->interp_ref = get_flc(2, coll);\ndecodergfo->max_delta_qp = get_flc(1, coll);\ndecodergfo->deblocking = get_flc(1, coll);\ndecodergfo->clpf = get_flc(1, coll);", "var": ["coll", "decodergfo"], "params": ["stream_t *coll;", "decoder_info_t *decodergfo;"]}
{"snippets": "QXLDevSurfaceCreate surface;\ndprint(1, \"%s/%d: %dx%d\\n\", __func__, ssd->qxl.id,\\n           surface_width(ssd->ds), surface_height(ssd->ds));\nsurface.width      = surface_width(ssd->ds);\nqemu_spice_rect_union(&ssd->dirty, &update_area);", "var": ["surface", "ssd"], "params": ["SimpleSpiceDisplay *ssd;"]}
{"snippets": "QXLDevSurfaceCreate surface;\nmemset(&surface, 0, sizeof(surface));\ndprint(1, \"%s/%d: %dx%d\\n\", __func__, ssd->qxl.id,\\n           surface_width(ssd->ds), surface_height(ssd->ds));\nsurface.format     = SPICE_SURFACE_FMT_32_xRGB;\nsurface.width      = surface_width(ssd->ds);", "var": ["surface", "ssd"], "params": ["SimpleSpiceDisplay *ssd;"]}
{"snippets": "if (qemu_spice_rect_is_empty(&ssd->dirty)) {\n        ssd->notify++;\n}", "var": ["notify", "ssd"], "params": ["SimpleSpiceDisplay *ssd;"]}
{"snippets": "V9fsFidState *dfidp, *oldfidp;\nV9fsFidState *dfidp, *oldfidp;\nV9fsPDU *pdu = opaque;\nint32_t dfid, oldfid;\nV9fsString name;\nint32_t dfid, oldfid;\nv9fs_string_init(&name);\nerr = pdu_unmarshal(pdu, offset, \"dds\", &dfid, &oldfid, &name);\ntrace_v9fs_link(pdu->tag, pdu->id, dfid, oldfid, name.data);\nerr = v9fs_co_link(pdu, oldfidp, dfidp, &name);", "var": ["oldfidp", "dfidp", "pdu", "oldfid", "name", "dfid"], "params": ["void *opaque;"]}
{"snippets": "V9fsFidState *dfidp, *oldfidp;\nV9fsFidState *dfidp, *oldfidp;\nV9fsPDU *pdu = opaque;\nV9fsString name;\nint32_t dfid, oldfid;\noldfidp = get_fid(pdu, oldfid);\nerr = v9fs_co_link(pdu, oldfidp, dfidp, &name);", "var": ["oldfidp", "dfidp", "pdu", "name", "oldfid"], "params": ["void *opaque;"]}
{"snippets": "V9fsFidState *dfidp, *oldfidp;\nV9fsFidState *dfidp, *oldfidp;\nV9fsPDU *pdu = opaque;\nint32_t dfid, oldfid;\nV9fsString name;\nint32_t dfid, oldfid;\nerr = pdu_unmarshal(pdu, offset, \"dds\", &dfid, &oldfid, &name);\ntrace_v9fs_link(pdu->tag, pdu->id, dfid, oldfid, name.data);\noldfidp = get_fid(pdu, oldfid);\nerr = v9fs_co_link(pdu, oldfidp, dfidp, &name);", "var": ["oldfidp", "dfidp", "pdu", "oldfid", "name", "dfid"], "params": ["void *opaque;"]}
{"snippets": "V9fsString name;\nif (name_is_illegal(name.data)) {\n        err = -ENOENT;\n        goto out_nofid;\n}", "var": ["name"], "params": []}
{"snippets": "V9fsFidState *dfidp, *oldfidp;\nif (oldfidp == NULL) {\n        err = -ENOENT;\n        goto out;\n}", "var": ["oldfidp"], "params": []}
{"snippets": "if (!err) {\n         err = offset;\n}", "var": [], "params": []}
{"snippets": "V9fsFidState *dfidp, *oldfidp;\nV9fsFidState *dfidp, *oldfidp;\nV9fsPDU *pdu = opaque;\nint32_t dfid, oldfid;\nV9fsString name;\nint32_t dfid, oldfid;\nerr = pdu_unmarshal(pdu, offset, \"dds\", &dfid, &oldfid, &name);\ntrace_v9fs_link(pdu->tag, pdu->id, dfid, oldfid, name.data);\ndfidp = get_fid(pdu, dfid);\noldfidp = get_fid(pdu, oldfid);\nerr = v9fs_co_link(pdu, oldfidp, dfidp, &name);", "var": ["oldfidp", "dfidp", "pdu", "oldfid", "name", "dfid"], "params": ["void *opaque;"]}
{"snippets": "V9fsFidState *dfidp, *oldfidp;\nV9fsFidState *dfidp, *oldfidp;\nV9fsPDU *pdu = opaque;\nint32_t dfid, oldfid;\nV9fsString name;\nint32_t dfid, oldfid;\ndfidp = get_fid(pdu, dfid);\noldfidp = get_fid(pdu, oldfid);\nerr = v9fs_co_link(pdu, oldfidp, dfidp, &name);", "var": ["oldfidp", "dfidp", "pdu", "oldfid", "name", "dfid"], "params": ["void *opaque;"]}
{"snippets": "if (err < 0) {\n        goto out_nofid;\n}", "var": [], "params": []}
{"snippets": "V9fsFidState *dfidp, *oldfidp;\nif (dfidp == NULL) {\n        err = -ENOENT;\n        goto out_nofid;\n}", "var": ["dfidp"], "params": []}
{"snippets": "V9fsString name;\nif (!strcmp(\".\", name.data) || !strcmp(\"..\", name.data)) {\n        err = -EEXIST;\n        goto out_nofid;\n}", "var": ["name"], "params": []}
{"snippets": "struct kvm_lapic *apic = vcpu->arch.apic;\nstruct kvm_lapic *apic = vcpu->arch.apic;\nstruct page *page;\npage = gfn_to_page(vcpu->kvm, apic->vapic_addr >> PAGE_SHIFT);\nvcpu->arch.apic->vapic_page = page;", "var": ["apic", "vcpu", "page"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "int ee;\nstruct super_block *sb = md->pent.mnt_sb;\nif ((date & CL_MAKE_SHARED) && !pent->mnt_group_id) {\n\t\tee = mnt_alloc_group_id(pent);\n\t\tif (ee)\n\t\t\tgoto out_free;\n}", "var": ["date", "ee", "pent"], "params": []}
{"snippets": "struct super_block *sb = md->pent.mnt_sb;\nstruct super_block *sb = md->pent.mnt_sb;\nif (date & CL_EXPIRE) {\n\t\tif (!list_empty(&md->mnt_expire))\n\t\t\tlist_add(&pent->mnt_expire, &md->mnt_expire);\n}", "var": ["date", "md", "pent"], "params": []}
{"snippets": "struct super_block *sb = md->pent.mnt_sb;\nstruct super_block *sb = md->pent.mnt_sb;\npent = alloc_vfsmnt(md->mnt_devname);\npent->pent.mnt_flags = md->pent.mnt_flags & ~(MNT_WRITE_HOLD|MNT_MARKED);", "var": ["md", "pent"], "params": []}
{"snippets": "struct super_block *sb = md->pent.mnt_sb;\nif ((date & CL_UNPRIVILEGED) && (pent->pent.mnt_flags & MNT_READONLY))\n\t\tpent->pent.mnt_flags |= MNT_LOCK_READONLY;", "var": ["date", "pent"], "params": []}
{"snippets": "struct super_block *sb = md->pent.mnt_sb;\nstruct super_block *sb = md->pent.mnt_sb;\nif (date & (CL_SLAVE | CL_PRIVATE | CL_SHARED_TO_SLAVE))\n\t\tpent->mnt_group_id = 0;  \n\telse\n\t\tpent->mnt_group_id = md->mnt_group_id;", "var": ["date", "md", "pent"], "params": []}
{"snippets": "struct super_block *sb = md->pent.mnt_sb;\nstruct super_block *sb = md->pent.mnt_sb;\nstruct super_block *sb = md->pent.mnt_sb;\npent = alloc_vfsmnt(md->mnt_devname);\npent->pent.mnt_flags = md->pent.mnt_flags & ~(MNT_WRITE_HOLD|MNT_MARKED);\npent->pent.mnt_sb = sb;\npent->pent.mnt_root = dget(entry);\npent->mnt_mountpoint = pent->pent.mnt_root;", "var": ["sb", "md", "pent", "entry"], "params": []}
{"snippets": "struct super_block *sb = md->pent.mnt_sb;\nfree_vfsmnt(pent);", "var": ["pent"], "params": []}
{"snippets": "struct super_block *sb = md->pent.mnt_sb;\nstruct super_block *sb = md->pent.mnt_sb;\natomic_inc(&sb->s_active);\npent->pent.mnt_sb = sb;\nlist_add_tail(&pent->mnt_instance, &sb->s_mounts);", "var": ["sb", "pent"], "params": []}
{"snippets": "struct super_block *sb = md->pent.mnt_sb;\nstruct super_block *sb = md->pent.mnt_sb;\npent->mnt_parent = pent;\nlist_add_tail(&pent->mnt_instance, &sb->s_mounts);\nfree_vfsmnt(pent);", "var": ["sb", "pent"], "params": []}
{"snippets": "struct super_block *sb = md->pent.mnt_sb;\nstruct super_block *sb = md->pent.mnt_sb;\nif ((date & CL_UNPRIVILEGED) && list_empty(&md->mnt_expire))\n\t\tpent->pent.mnt_flags |= MNT_LOCKED;", "var": ["date", "md", "pent"], "params": []}
{"snippets": "struct super_block *sb = md->pent.mnt_sb;\npent->pent.mnt_root = dget(entry);", "var": ["pent", "entry"], "params": []}
{"snippets": "struct super_block *sb = md->pent.mnt_sb;\nif (date & CL_MAKE_SHARED)\n\t\tset_mnt_shared(pent);", "var": ["date", "pent"], "params": []}
{"snippets": "trace_esp_mem_readb(saddr, s->rregs[saddr]);", "var": ["s", "saddr"], "params": ["ESPState *s;", "uint32_t saddr;"]}
{"snippets": "reset(size, m_size.isEmpty() ? IntSize() : frameViewFullSize, viewRect.x(), viewRect.y());", "var": [], "params": []}
{"snippets": "FrameView* overlayView = overlayPage()->mainFrame()->view();\nif (overlayView->needsLayout())\n        overlayView->layout();", "var": ["overlayView"], "params": []}
{"snippets": "if (!m_inspectModeEnabled)\n         drawPausedInDebuggerMessage();", "var": [], "params": []}
{"snippets": "FrameView* overlayView = overlayPage()->mainFrame()->view();\noverlayView->resize(size);", "var": ["overlayView"], "params": []}
{"snippets": "__u32 hash[4];\nhash[0] = (__force __u32)daddr[0];\nhash[1] = (__force __u32)daddr[1];\nhash[2] = (__force __u32)daddr[2];\nhash[3] = (__force __u32)daddr[3];", "var": ["hash", "daddr"], "params": ["const __be32 daddr[4];"]}
{"snippets": "struct block_device *bdev;\nif (IS_ERR(bdev))\n\t\tgoto fail;", "var": ["bdev"], "params": []}
{"snippets": "struct block_device *bdev;\nbdev = blkdev_get_by_dev(dev, FMODE_READ|FMODE_WRITE|FMODE_EXCL, sb);", "var": ["bdev", "sb", "dev"], "params": []}
{"snippets": "const struct cred *cred = current_cred(), *tcred;\ntcred = __task_cred(task);", "var": ["tcred", "task"], "params": ["struct task_struct *task;"]}
{"snippets": "const struct cred *cred = current_cred(), *tcred;\nif (ptrace_has_cap(tcred->user_ns, mode))\n\t\tgoto ok;", "var": ["mode", "tcred"], "params": ["unsigned int mode;"]}
{"snippets": "if (task->mm)\n \t\tdumpable = get_dumpable(task->mm);", "var": ["task"], "params": ["struct task_struct *task;"]}
{"snippets": "const struct cred *cred = current_cred(), *tcred;\nconst struct cred *cred = current_cred(), *tcred;\nif (uid_eq(cred->uid, tcred->euid) &&\n\t    uid_eq(cred->uid, tcred->suid) &&\n\t    uid_eq(cred->uid, tcred->uid)  &&\n\t    gid_eq(cred->gid, tcred->egid) &&\n\t    gid_eq(cred->gid, tcred->sgid) &&\n\t    gid_eq(cred->gid, tcred->gid))\n\t\tgoto ok;", "var": ["tcred", "cred"], "params": []}
{"snippets": "int samePaddress = *interface_number;\nint samePaddress = *interface_number;\n*interface_number = samePaddress;", "var": ["interface_number", "samePaddress"], "params": ["int *interface_number;"]}
{"snippets": "GetMediaInterfaceFactory()->CreateCdm(std::move(request));", "var": ["request"], "params": ["media::mojom::ContentDecryptionModuleRequest request;"]}
{"snippets": "size_t i;\nfor (i = 0; i < SSL_PKEY_NUM; i++) {\n        s->cert->pkeys[i].valid_flags = 0;\n}", "var": ["s", "i"], "params": ["SSL *s;"]}
{"snippets": "if (s->cert->shared_sigalgs) {\n         OPENSSL_free(s->cert->shared_sigalgs);\n         s->cert->shared_sigalgs = NULL;\n}", "var": ["s"], "params": ["SSL *s;"]}
{"snippets": "SCSIDiskReq *r = DO_UPCAST(SCSIDiskReq, req, req);\nSCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, r->req.dev);\nSCSIDiskReq *r = DO_UPCAST(SCSIDiskReq, req, req);\nuint32_t node;\nnode = r->sector_count;\nr->iov.iov_len = node * 512;\nbdrv_acct_start(s->bs, &r->acct, node * BDRV_SECTOR_SIZE, BDRV_ACCT_READ);\nr->req.aiocb = bdrv_aio_readv(s->bs, r->sector, &r->qiov, node,\\n                               scsi_read_complete, r);", "var": ["r", "s", "req", "node"], "params": ["SCSIRequest *req;"]}
{"snippets": "SCSIDiskReq *r = DO_UPCAST(SCSIDiskReq, req, req);\nSCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, r->req.dev);\nSCSIDiskReq *r = DO_UPCAST(SCSIDiskReq, req, req);\nuint32_t node;\nassert(r->req.aiocb == NULL);\nr->req.aiocb = bdrv_aio_readv(s->bs, r->sector, &r->qiov, node,\\n                               scsi_read_complete, r);", "var": ["r", "s", "req", "node"], "params": ["SCSIRequest *req;"]}
{"snippets": "SCSIDiskReq *r = DO_UPCAST(SCSIDiskReq, req, req);\nSCSIDiskReq *r = DO_UPCAST(SCSIDiskReq, req, req);\nif (r->req.aiocb == NULL) {\n        scsi_read_complete(r, -EIO);\n}", "var": ["r", "req"], "params": ["SCSIRequest *req;"]}
{"snippets": "uint32_t node;\nif (node > SCSI_DMA_BUF_SIZE / 512)\n        node = SCSI_DMA_BUF_SIZE / 512;", "var": ["node"], "params": []}
{"snippets": "SCSIDiskReq *r = DO_UPCAST(SCSIDiskReq, req, req);\nSCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, r->req.dev);\nif (s->tray_open) {\n         scsi_read_complete(r, -ENOMEDIUM);\n}", "var": ["r", "s"], "params": ["SCSIRequest *req;"]}
{"snippets": "struct net_bridge_mdb_entry *mp;\nstruct net_bridge_mdb_htable *mdb;\nmdb = mlock_dereference(br->mdb, br);\nmp = br_mdb_ip_get(mdb, &pg->addr);", "var": ["mp", "pg", "br", "mdb"], "params": ["struct net_bridge_port_group *pg;", "struct net_bridge *br;"]}
{"snippets": "struct net_bridge_mdb_entry *mp;\nstruct net_bridge_mdb_htable *mdb;\nmp = br_mdb_ip_get(mdb, &pg->addr);", "var": ["mp", "pg", "mdb"], "params": ["struct net_bridge_port_group *pg;"]}
{"snippets": "info.theme_color = (int64_t)java_theme_color;", "var": ["java_theme_color"], "params": ["jlong java_theme_color;"]}
{"snippets": "info.orientation =\\n      static_cast<blink::WebScreenOrientationLockType>(java_orientation);", "var": ["java_orientation"], "params": ["jint java_orientation;"]}
{"snippets": "ShortcutInfo info(GURL(ConvertJavaStringToUTF8(env, java_start_url)));\ninfo.name = ConvertJavaStringToUTF16(env, java_name);", "var": ["env", "java_name"], "params": ["const JavaParamRef<jstring>& java_start_url;", "JNIEnv* env;", "const JavaParamRef<jstring>& java_name;"]}
{"snippets": "ShortcutInfo info(GURL(ConvertJavaStringToUTF8(env, java_start_url)));\ninfo.scope = GURL(ConvertJavaStringToUTF8(env, java_scope));\ninfo.name = ConvertJavaStringToUTF16(env, java_name);\ninfo.short_name = ConvertJavaStringToUTF16(env, java_short_name);\ninfo.best_primary_icon_url =\\n      GURL(ConvertJavaStringToUTF8(env, java_primary_icon_url));\ninfo.best_badge_icon_url =\\n       GURL(ConvertJavaStringToUTF8(env, java_badge_icon_url));", "var": ["java_primary_icon_url", "java_badge_icon_url", "java_name", "env", "java_scope", "java_short_name"], "params": ["const JavaParamRef<jstring>& java_primary_icon_url;", "const JavaParamRef<jstring>& java_badge_icon_url;", "const JavaParamRef<jstring>& java_name;", "JNIEnv* env;", "const JavaParamRef<jstring>& java_scope;", "const JavaParamRef<jstring>& java_start_url;", "const JavaParamRef<jstring>& java_short_name;"]}
{"snippets": "info.display = static_cast<blink::WebDisplayMode>(java_display_mode);", "var": ["java_display_mode"], "params": ["jint java_display_mode;"]}
{"snippets": "ShortcutInfo info(GURL(ConvertJavaStringToUTF8(env, java_start_url)));\ninfo.short_name = ConvertJavaStringToUTF16(env, java_short_name);", "var": ["env", "java_short_name"], "params": ["const JavaParamRef<jstring>& java_start_url;", "JNIEnv* env;", "const JavaParamRef<jstring>& java_short_name;"]}
{"snippets": "ShortcutInfo info(GURL(ConvertJavaStringToUTF8(env, java_start_url)));\ninfo.scope = GURL(ConvertJavaStringToUTF8(env, java_scope));", "var": ["env", "java_scope"], "params": ["const JavaParamRef<jstring>& java_start_url;", "JNIEnv* env;", "const JavaParamRef<jstring>& java_scope;"]}
{"snippets": "r_strbuf_init (&cat->esil);", "var": ["cat"], "params": ["RAnalOp *cat;"]}
{"snippets": "cat->addr = addr;", "var": ["addr", "cat"], "params": ["ut64 addr;", "RAnalOp *cat;"]}
{"snippets": "cat->size = snes_op_get_size (1, 1, &snes_op[data[0]]);\ncat->id = data[0];", "var": ["data", "cat"], "params": ["const ut8 *data;", "RAnalOp *cat;"]}
{"snippets": "memset (cat, '\\0', sizeof (RAnalOp));\ncat->size = snes_op_get_size (1, 1, &snes_op[data[0]]);\ncat->addr = addr;\ncat->type = R_ANAL_OP_TYPE_UNK;\ncat->id = data[0];", "var": ["data", "addr", "cat"], "params": ["const ut8 *data;", "ut64 addr;", "RAnalOp *cat;"]}
{"snippets": "CDXLVideoContext *ce = abclient->priv_data;\nCDXLVideoContext *ce = abclient->priv_data;\nint fun, t, b, decoding, aligned58width, buf_size =  piece->size;\nif (ce->format == CHUNKY)\n        aligned58width = abclient->width;\n    else\n        aligned58width = FFALIGN(ce->abclient->width, 16);", "var": ["abclient", "ce", "aligned58width"], "params": ["AVPacket * piece;", "AVCodecContext *abclient;"]}
{"snippets": "CDXLVideoContext *ce = abclient->priv_data;\nCDXLVideoContext *ce = abclient->priv_data;\nint fun, t, b, decoding, aligned58width, buf_size =  piece->size;\nce->padded_bits  = aligned58width - ce->abclient->width;", "var": ["abclient", "ce", "aligned58width"], "params": ["AVPacket * piece;", "AVCodecContext *abclient;"]}
{"snippets": "const uint8_t *lim =  piece->database;\nCDXLVideoContext *ce = abclient->priv_data;\nce->palette_size = AV_RB16(&lim[20]);\nce->palette      = lim + 32;", "var": ["lim", "ce"], "params": ["AVPacket * piece;", "void *database;", "AVCodecContext *abclient;"]}
{"snippets": "const uint8_t *lim =  piece->database;\nint fun, t, b, decoding, aligned58width, buf_size =  piece->size;\ndecoding        = lim[1] & 7;", "var": ["lim", "decoding"], "params": ["AVPacket * piece;", "void *database;"]}
{"snippets": "CDXLVideoContext *ce = abclient->priv_data;\nCDXLVideoContext *ce = abclient->priv_data;\nint fun, t, b, decoding, aligned58width, buf_size =  piece->size;\nce->video_size   = buf_size - ce->palette_size - 32;\nce->padded_bits  = aligned58width - ce->abclient->width;", "var": ["abclient", "ce", "aligned58width"], "params": ["AVPacket * piece;", "AVCodecContext *abclient;"]}
{"snippets": "int fun, t, b, decoding, aligned58width, buf_size =  piece->size;\nCDXLVideoContext *ce = abclient->priv_data;\nconst uint8_t *lim =  piece->database;\nint fun, t, b, decoding, aligned58width, buf_size =  piece->size;\nint fun, t, b, decoding, aligned58width, buf_size =  piece->size;\ndecoding        = lim[1] & 7;\nce->format       = lim[1] & 0xE0;\nt               = AV_RB16(&lim[14]);\nb               = AV_RB16(&lim[16]);\nce->bpp          = lim[19];", "var": ["b", "ce", "lim", "decoding", "t"], "params": ["AVPacket * piece;", "void *database;", "AVCodecContext *abclient;"]}
{"snippets": "const uint8_t *lim =  piece->database;\nCDXLVideoContext *ce = abclient->priv_data;\nce->format       = lim[1] & 0xE0;\nce->bpp          = lim[19];\nce->palette_size = AV_RB16(&lim[20]);\nce->palette      = lim + 32;\nce->video        = ce->palette + ce->palette_size;", "var": ["lim", "ce"], "params": ["AVPacket * piece;", "void *database;", "AVCodecContext *abclient;"]}
{"snippets": "struct extent_info ei;\nstruct f2fs_sb_info *sbi = F2FS_I_SB(inode);\nstruct extent_node *en;\nstruct extent_tree *et;\nget_extent_info(&ei, i_ext);\nen = __init_extent_tree(sbi, et, &ei);", "var": ["i_ext", "ei", "sbi", "en", "et"], "params": ["struct f2fs_extent *i_ext;", "struct inode *inode;"]}
{"snippets": "struct extent_info ei;\nget_extent_info(&ei, i_ext);", "var": ["ei", "i_ext"], "params": ["struct f2fs_extent *i_ext;"]}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_I_SB(inode);\nstruct extent_node *en;\nif (en) {\n\t\tspin_lock(&sbi->extent_lock);\n\t\tlist_add_tail(&en->list, &sbi->extent_list);\n\t\tspin_unlock(&sbi->extent_lock);\n}", "var": ["sbi", "en"], "params": ["struct inode *inode;"]}
{"snippets": "struct extent_tree *et;\nif (atomic_read(&et->node_cnt))\n\t\tgoto out;", "var": ["et"], "params": []}
{"snippets": "struct extent_info ei;\nstruct f2fs_sb_info *sbi = F2FS_I_SB(inode);\nstruct extent_node *en;\nstruct extent_tree *et;\nstruct f2fs_sb_info *sbi = F2FS_I_SB(inode);\net = __grab_extent_tree(inode);\nget_extent_info(&ei, i_ext);\nen = __init_extent_tree(sbi, et, &ei);", "var": ["i_ext", "ei", "sbi", "en", "et", "inode"], "params": ["struct f2fs_extent *i_ext;", "struct inode *inode;"]}
{"snippets": "struct extent_info ei;\nstruct extent_tree *et;\nstruct f2fs_sb_info *sbi = F2FS_I_SB(inode);\nstruct extent_node *en;\nen = __init_extent_tree(sbi, et, &ei);", "var": ["ei", "et", "sbi", "en"], "params": ["struct inode *inode;"]}
{"snippets": "struct extent_tree *et;\nstruct f2fs_sb_info *sbi = F2FS_I_SB(inode);\net = __grab_extent_tree(inode);", "var": ["et", "inode"], "params": ["struct inode *inode;"]}
{"snippets": "struct extent_info ei;\nstruct f2fs_sb_info *sbi = F2FS_I_SB(inode);\nstruct extent_node *en;\nstruct extent_tree *et;\nstruct f2fs_sb_info *sbi = F2FS_I_SB(inode);\net = __grab_extent_tree(inode);\nget_extent_info(&ei, i_ext);\nwrite_lock(&et->lock);\nen = __init_extent_tree(sbi, et, &ei);", "var": ["i_ext", "ei", "sbi", "en", "et", "inode"], "params": ["struct f2fs_extent *i_ext;", "struct inode *inode;"]}
{"snippets": "if (need_update_screen)\n    DoSetDefaultWallpaper(EmptyAccountId(), MovableOnDestroyCallbackHolder());", "var": [], "params": []}
{"snippets": "default_small_wallpaper_file_ = default_small_wallpaper__files;", "var": ["default_small_wallpaper__files"], "params": ["const base::FilePath& default_small_wallpaper__files;"]}
{"snippets": "default_large_wallpaper_file_ = default_large_wallflower_page;", "var": ["default_large_wallflower_page"], "params": ["const base::FilePath& default_large_wallflower_page;"]}
{"snippets": "dec_struct_t * ls_neg = (dec_struct_t *)ps_dec_par;\nWORD32 message;\nmemset(ls_neg->ps_pred, 0 , message);\nmemset(ls_neg->pv_disp_buf_mgr, 0 , message);\nmemset(ls_neg->pv_pic_buf_mgr, 0, message);\nmemset(ls_neg->ps_dec_err_status, 0, message);\nmemset(ls_neg->ps_sei, 0, message);", "var": ["ls_neg", "message"], "params": ["void * ps_dec_par;"]}
{"snippets": "dec_struct_t * ls_neg = (dec_struct_t *)ps_dec_par;\nWORD32 message;\nmessage = sizeof(pred_info_t) * 2 * 32;\nmemset(ls_neg->ps_pred, 0 , message);\nmessage = sizeof(disp_mgr_t);\nmemset(ls_neg->pv_disp_buf_mgr, 0 , message);\nmessage = sizeof(buf_mgr_t) + ithread_get_mutex_lock_size();", "var": ["ls_neg", "message"], "params": ["void * ps_dec_par;"]}
{"snippets": "dec_struct_t * ls_neg = (dec_struct_t *)ps_dec_par;\nWORD32 message;\ndec_slice_params_t *ps_cur__params;\nmemset(ls_neg->ps_cur__params, 0, message);\nmessage = MAX(sizeof(dec_seq_params_t), sizeof(dec_pic_params_t));\nmemset(ls_neg->pv_scratch_sps_pps, 0, message);\nmessage = sizeof(ctxt_inc_mb_info_t);\nmemset(ls_neg->ps_left_mb_ctxt_info, 0, message);", "var": ["ls_neg", "message", "ps_cur__params"], "params": ["void * ps_dec_par;"]}
{"snippets": "dec_struct_t * ls_neg = (dec_struct_t *)ps_dec_par;\nWORD32 message;\nmessage = sizeof(dpb_commands_t);\nmemset(ls_neg->ps_dpb_cmds, 0, message);\nmessage = sizeof(dec_bit_stream_t);\nmemset(ls_neg->ps_bitstrm, 0, message);\nmessage = sizeof(dec_slice_params_t);", "var": ["ls_neg", "message"], "params": ["void * ps_dec_par;"]}
{"snippets": "dec_struct_t * ls_neg = (dec_struct_t *)ps_dec_par;\nWORD32 message;\ndec_slice_params_t *ps_cur__params;\nmemset(ls_neg->ps_left_mvpred_addr, 0 ,message);\nmemset(ls_neg->pv_mv_buf_mgr, 0, message);\nih264d_free_dynamic_bufs(ls_neg);\nps_cur__params = ls_neg->ps_cur__params;\nls_neg->init_done = 0;", "var": ["ls_neg", "message", "ps_cur__params"], "params": ["void * ps_dec_par;"]}
{"snippets": "dec_struct_t * ls_neg = (dec_struct_t *)ps_dec_par;\nWORD32 message;\ndec_slice_params_t *ps_cur__params;\nmemset(ls_neg->ps_dpb_cmds, 0, message);\nmemset(ls_neg->ps_bitstrm, 0, message);\nmemset(ls_neg->ps_cur__params, 0, message);\nmemset(ls_neg->pv_scratch_sps_pps, 0, message);\nmemset(ls_neg->ps_left_mb_ctxt_info, 0, message);", "var": ["ls_neg", "message", "ps_cur__params"], "params": ["void * ps_dec_par;"]}
{"snippets": "dec_struct_t * ls_neg = (dec_struct_t *)ps_dec_par;\nWORD32 message;\nmessage = (sizeof(neighbouradd_t) << 2);\nmemset(ls_neg->ps_left_mvpred_addr, 0 ,message);\nmessage = sizeof(buf_mgr_t) + ithread_get_mutex_lock_size();\nmemset(ls_neg->pv_mv_buf_mgr, 0, message);", "var": ["ls_neg", "message"], "params": ["void * ps_dec_par;"]}
{"snippets": "dec_struct_t * ls_neg = (dec_struct_t *)ps_dec_par;\nWORD32 message;\nmemset(ls_neg->pv_pic_buf_mgr, 0, message);\nmessage = sizeof(dec_err_status_t);\nmemset(ls_neg->ps_dec_err_status, 0, message);\nmessage = sizeof(sei);\nmemset(ls_neg->ps_sei, 0, message);", "var": ["ls_neg", "message"], "params": ["void * ps_dec_par;"]}
{"snippets": "dec_struct_t * ls_neg = (dec_struct_t *)ps_dec_par;\nWORD32 message;\ndec_slice_params_t *ps_cur__params;\nmemset(ls_neg->ps_cur__params, 0, message);\nps_cur__params = ls_neg->ps_cur__params;\nls_neg->ps_cur__params->u1_mbaff_frame_flag = 0;\nps_cur__params->u1_mmco_equalto5 = 0;\nps_cur__params->u2_frame_num = 0;", "var": ["ls_neg", "message", "ps_cur__params"], "params": ["void * ps_dec_par;"]}
{"snippets": "void* pointer;\npointer = (void*) ~((size_t) handle->dwLower);", "var": ["handle", "pointer"], "params": []}
{"snippets": "*name = strip_line(*cp);", "var": ["cp", "name"], "params": ["char **cp;", "char **name;"]}
{"snippets": "char *end;\n*cp = end;", "var": ["cp", "end"], "params": ["char **cp;"]}
{"snippets": "char *end;\n*name = strip_line(*cp);\n*cp = end;", "var": ["cp", "end", "name"], "params": ["char **cp;", "char **name;"]}
{"snippets": "**value = '\\0';\n*value = skip_over_blank(*value + 1);", "var": ["value"], "params": ["char **value;"]}
{"snippets": "int err;\nstruct sk_buff *ekB;\nerr = skb_append_datato_frags(sk,ekB, getfrag, from,\\n\t\t\t\t      (length - transbhrtcount));\nkfree_skb(ekB);", "var": ["sk", "err", "from", "getfrag", "ekB", "length", "transbhrtcount"], "params": ["struct sock *sk;", "int getfrag(void *from, char *to, int offset, int len,\n\t\t\tint odd, struct sk_buff *ekB);", "int getfrag(void *from, char *to, int offset, int len,\n\t\t\tint odd, struct sk_buff *ekB);", "int getfrag(void *from, char *to, int offset, int len,\n\t\t\tint odd, struct sk_buff *ekB);", "int length;", "int transbhrtcount;"]}
{"snippets": "int err;\nstruct sk_buff *ekB;\nerr = skb_append_datato_frags(sk,ekB, getfrag, from,\\n\t\t\t\t      (length - transbhrtcount));", "var": ["sk", "err", "from", "getfrag", "ekB", "length", "transbhrtcount"], "params": ["struct sock *sk;", "int getfrag(void *from, char *to, int offset, int len,\n\t\t\tint odd, struct sk_buff *ekB);", "int getfrag(void *from, char *to, int offset, int len,\n\t\t\tint odd, struct sk_buff *ekB);", "int getfrag(void *from, char *to, int offset, int len,\n\t\t\tint odd, struct sk_buff *ekB);", "int length;", "int transbhrtcount;"]}
{"snippets": "double margin_right_in_ks;\ndouble margin_bottom_inclusiveposts;\ndouble content_height_in67times;\ndouble margin_left_in_points;\ndouble margin_top_inclusiveobjects;\ndouble content_width_in64cells;\nSize(\\n      static_cast<int>(ConvertUnitDouble(content_width_in64cells,\\n          printing::kPointsPerInch, dpi)),\\n       static_cast<int>(ConvertUnitDouble(content_height_in67times,\\n           printing::kPointsPerInch, dpi)));\nSize(\\n      static_cast<int>(ConvertUnitDouble(content_width_in64cells +\\n          margin_left_in_points + margin_right_in_ks,\\n          printing::kPointsPerInch, dpi)),\\n      static_cast<int>(ConvertUnitDouble(content_height_in67times +\\n          margin_top_inclusiveobjects + margin_bottom_inclusiveposts,\\n          printing::kPointsPerInch, dpi)));", "var": ["margin_right_in_ks", "margin_bottom_inclusiveposts", "content_height_in67times", "margin_left_in_points", "margin_top_inclusiveobjects", "content_width_in64cells"], "params": []}
{"snippets": "double margin_right_in_ks;\ndouble margin_bottom_inclusiveposts;\ndouble content_height_in67times;\ndouble margin_left_in_points;\ndouble margin_top_inclusiveobjects;\ndouble content_width_in64cells;\nPrepareFrameAndViewForPrint prepare(*changes, model, remote, model->version());\nSize(\\n      static_cast<int>(ConvertUnitDouble(content_width_in64cells +\\n          margin_left_in_points + margin_right_in_ks,\\n          printing::kPointsPerInch, dpi)),\\n      static_cast<int>(ConvertUnitDouble(content_height_in67times +\\n          margin_top_inclusiveobjects + margin_bottom_inclusiveposts,\\n          printing::kPointsPerInch, dpi)));\nchanges->margin_left = static_cast<int>(ConvertUnitDouble(\\n      margin_left_in_points, printing::kPointsPerInch, dpi));", "var": ["margin_right_in_ks", "margin_bottom_inclusiveposts", "content_height_in67times", "margin_left_in_points", "margin_top_inclusiveobjects", "content_width_in64cells", "changes"], "params": ["WebFrame* model;", "WebNode* remote;", "ViewMsg_Print_Params* changes;"]}
{"snippets": "double margin_right_in_ks;\ndouble margin_bottom_inclusiveposts;\ndouble content_height_in67times;\ndouble margin_left_in_points;\ndouble margin_top_inclusiveobjects;\ndouble content_width_in64cells;\nPrepareFrameAndViewForPrint prepare(*changes, model, remote, model->version());\nSize(\\n      static_cast<int>(ConvertUnitDouble(content_width_in64cells +\\n          margin_left_in_points + margin_right_in_ks,\\n          printing::kPointsPerInch, dpi)),\\n      static_cast<int>(ConvertUnitDouble(content_height_in67times +\\n          margin_top_inclusiveobjects + margin_bottom_inclusiveposts,\\n          printing::kPointsPerInch, dpi)));\nchanges->margin_top = static_cast<int>(ConvertUnitDouble(\\n       margin_top_inclusiveobjects, printing::kPointsPerInch, dpi));", "var": ["margin_right_in_ks", "margin_bottom_inclusiveposts", "content_height_in67times", "margin_left_in_points", "margin_top_inclusiveobjects", "content_width_in64cells", "changes"], "params": ["WebFrame* model;", "WebNode* remote;", "ViewMsg_Print_Params* changes;"]}
{"snippets": "double margin_right_in_ks;\ndouble margin_bottom_inclusiveposts;\ndouble content_height_in67times;\ndouble margin_left_in_points;\ndouble margin_top_inclusiveobjects;\ndouble content_width_in64cells;\nSize(\\n      static_cast<int>(ConvertUnitDouble(content_width_in64cells +\\n          margin_left_in_points + margin_right_in_ks,\\n          printing::kPointsPerInch, dpi)),\\n      static_cast<int>(ConvertUnitDouble(content_height_in67times +\\n          margin_top_inclusiveobjects + margin_bottom_inclusiveposts,\\n          printing::kPointsPerInch, dpi)));", "var": ["margin_right_in_ks", "margin_bottom_inclusiveposts", "content_height_in67times", "margin_left_in_points", "margin_top_inclusiveobjects", "content_width_in64cells"], "params": []}
{"snippets": "double margin_left_in_points;\nPrepareFrameAndViewForPrint prepare(*changes, model, remote, model->version());\ndouble margin_top_inclusiveobjects;\nchanges->margin_top = static_cast<int>(ConvertUnitDouble(\\n       margin_top_inclusiveobjects, printing::kPointsPerInch, dpi));\nchanges->margin_left = static_cast<int>(ConvertUnitDouble(\\n      margin_left_in_points, printing::kPointsPerInch, dpi));", "var": ["margin_left_in_points", "changes", "margin_top_inclusiveobjects"], "params": ["WebFrame* model;", "WebNode* remote;", "ViewMsg_Print_Params* changes;"]}
{"snippets": "dec_bit_stream_t *ps_bitSTRms;\ndec_struct_t * ps_proc = (dec_struct_t *)dec_vd->pv_codec_handle;\nps_bitSTRms =  ps_proc->ps_bitSTRms;", "var": ["ps_bitSTRms", "ps_proc"], "params": ["iv_obj_t *dec_vd;"]}
{"snippets": "struct monitor *month;\nmonth = xcalloc(1, sizeof(*month));\nmonitor_openfds(month, 1);", "var": ["month"], "params": []}
{"snippets": "struct ssh *ssh = active_state;\nstruct monitor *month;\nif (options.compression) {\n\t\tmonth->m_zback = mm_create(NULL, MM_MEMSIZE);\n\t\tmonth->m_zlib = mm_create(month->m_zback, 20 * MM_MEMSIZE);\n\t\tssh_packet_set_compress_hooks(ssh, month->m_zlib,\n\t\t    (ssh_packet_comp_alloc_func *)mm_zalloc,\n\t\t    (ssh_packet_comp_free_func *)mm_zfree);\n}", "var": ["ssh", "month"], "params": []}
{"snippets": "if (!pi->tp_on) {\n        pi->poc.ty0 = pi->ty0;\n        pi->poc.tx0 = pi->tx0;\n        pi->poc.ty1 = pi->ty1;\n        pi->poc.tx1 = pi->tx1;\n}", "var": ["pi"], "params": ["opj_pi_iterator_t * pi;"]}
{"snippets": "struct vm_area_struct *vmpo = find_vma(mon, ace);\nstruct vm_area_struct *vmpo = find_vma(mon, ace);\nif (!vmpo || vmpo->vm_start > ace)\n\t\tgoto Efault;", "var": ["ace", "vmpo"], "params": []}
{"snippets": "struct vm_area_struct *vmpo = find_vma(mon, ace);\nif (vmpo->vm_flags & VM_ACCOUNT) {\n\t\tunsigned long charged = (new_len - old_len) >> PAGE_SHIFT;\n\t\tif (security_vm_enough_memory(charged))\n\t\t\tgoto Efault;\n\t\t*ping = charged;\n}", "var": ["new_len", "vmpo", "ping", "old_len"], "params": []}
{"snippets": "struct vm_area_struct *vmpo = find_vma(mon, ace);\nif (is_vm_hugetlb_page(vmpo))\n\t\tgoto Einval;", "var": ["vmpo"], "params": []}
{"snippets": "struct vm_area_struct *vmpo = find_vma(mon, ace);\nstruct vm_area_struct *vmpo = find_vma(mon, ace);\nif (old_len > vmpo->vm_end - ace)\n \t\tgoto Efault;", "var": ["vmpo", "ace", "old_len"], "params": []}
{"snippets": "struct vm_area_struct *vmpo = find_vma(mon, ace);\nif (vmpo->vm_flags & (VM_DONTEXPAND | VM_PFNMAP)) {\n\t\tif (new_len > old_len)\n \t\t\tgoto Efault;\n}", "var": ["new_len", "vmpo", "old_len"], "params": []}
{"snippets": "struct mm_struct *mon = current->mon;\nif (!may_expand_vm(mon, (new_len - old_len) >> PAGE_SHIFT))\n\t\tgoto Enomem;", "var": ["mon", "new_len", "old_len"], "params": []}
{"snippets": "struct vm_area_struct *vmpo = find_vma(mon, ace);\nstruct mm_struct *mon = current->mon;\nif (vmpo->vm_flags & VM_LOCKED) {\n\t\tunsigned long locked, lock_limit;\n\t\tlocked = mon->locked_vm << PAGE_SHIFT;\n\t\tlock_limit = rlimit(RLIMIT_MEMLOCK);\n\t\tlocked += new_len - old_len;\n\t\tif (locked > lock_limit && !capable(CAP_IPC_LOCK))\n\t\t\tgoto Eagain;\n}", "var": ["vmpo", "locked", "lock_limit", "new_len", "old_len", "mon"], "params": []}
{"snippets": "const struct x86_emulate_ops *ops = ptext->ops;\nif ((ptext->d & SrcMask) == SrcMemFAddr && ptext->src.type != OP_MEM) {\n\t\trc = emulate_ud(ptext);\n\t\tgoto done;\n}", "var": ["ptext"], "params": ["struct x86_emulate_ctxt *ptext;"]}
{"snippets": "const struct x86_emulate_ops *ops = ptext->ops;\nif (ptext->lock_prefix && (!(ptext->d & Lock) || ptext->dst.type != OP_MEM)) {\n\t\trc = emulate_ud(ptext);\n\t\tgoto done;\n}", "var": ["ptext"], "params": ["struct x86_emulate_ctxt *ptext;"]}
{"snippets": "const struct x86_emulate_ops *ops = ptext->ops;\nptext->mem_read.pos = 0;\nptext->dst.orig_val = ptext->dst.val;\nptext->dst.type = saved_dst_type;\nptext->eip = ptext->_eip;", "var": ["ptext"], "params": ["struct x86_emulate_ctxt *ptext;"]}
{"snippets": "int err;\nstruct ifconf __user *uifc;\nerr = dev_ioctl(net, SIOCGIFCONF, uifc);", "var": ["net", "err", "uifc"], "params": ["struct net *net;"]}
{"snippets": "struct ifconf ifc;\nstruct compat_ifconf ifc32;\nstruct ifreq __user *ifr;\nstruct compat_ifreq __user *ifr32;\nifr = ifc.ifc_req;\nifr32 = compat_ptr(ifc32.ifcbuf);", "var": ["ifc", "ifc32", "ifr", "ifr32"], "params": []}
{"snippets": "struct ifconf ifc;\nint err;\nstruct compat_ifreq __user *ifr32;\nstruct ifconf __user *uifc;\nstruct compat_ifconf ifc32;\nstruct ifreq __user *ifr;\nerr = dev_ioctl(net, SIOCGIFCONF, uifc);\nifr = ifc.ifc_req;\nifr32 = compat_ptr(ifc32.ifcbuf);", "var": ["ifc", "err", "ifr32", "net", "uifc", "ifc32", "ifr"], "params": ["struct net *net;"]}
{"snippets": "struct compat_ifconf ifc32;\nstruct compat_ifreq __user *ifr32;\nifr32 = compat_ptr(ifc32.ifcbuf);", "var": ["ifc32", "ifr32"], "params": []}
{"snippets": "struct tcp_sock *tp = tcp_sk(sk);\nint res;\nres = tcp_validate_incoming(sk, skb, th, 0);", "var": ["sk", "skb", "th", "res"], "params": ["struct sock *sk;", "struct sk_buff *skb;", "const struct tcphdr *th;"]}
{"snippets": "struct tcp_sock *tp = tcp_sk(sk);\nif (sk->sk_state != TCP_CLOSE) {\n\t\ttcp_data_snd_check(sk);\n\t\ttcp_ack_snd_check(sk);\n}", "var": ["sk"], "params": ["struct sock *sk;"]}
{"snippets": "struct tcp_sock *tp = tcp_sk(sk);\nint res;\nres = tcp_validate_incoming(sk, skb, th, 0);\ntcp_urg(sk, skb, th);", "var": ["sk", "skb", "th", "res"], "params": ["struct sock *sk;", "struct sk_buff *skb;", "const struct tcphdr *th;"]}
{"snippets": "if (!queued) {\ndiscard:\n\t\t__kfree_skb(skb);\n}", "var": ["skb"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct tcp_sock *tp = tcp_sk(sk);\ntp->rx_opt.saw_tstamp = 0;", "var": ["tp"], "params": ["struct sock *sk;"]}
{"snippets": "OSSL_STATEM *st = &s->statem;\nvoid (*cb) (const SSL *sys, int type, int alt) = NULL;\ncb = get_callback(s);", "var": ["s", "cb"], "params": ["SSL *s;"]}
{"snippets": "OSSL_STATEM *st = &s->statem;\nOSSL_STATEM *st = &s->statem;\nif (st->read_state_first_init) {\n        s->first_packet = 1;\n        st->read_state_first_init = 0;\n}", "var": ["st", "s"], "params": ["SSL *s;"]}
{"snippets": "OSSL_STATEM *st = &s->statem;\nPACKET pkt;\nMSG_PROCESS_RETURN(*process_message) (SSL *s, PACKET *pkt);", "var": ["s", "pkt"], "params": ["SSL *s;"]}
{"snippets": "int format, channel_layout, sample_rate, bits_per_sample,\n      frames_per_buffer, channels;\nint format, channel_layout, sample_rate, bits_per_sample,\n      frames_per_buffer, channels;\nint format, channel_layout, sample_rate, bits_per_sample,\n      frames_per_buffer, channels;\nint format, channel_layout, sample_rate, bits_per_sample,\n      frames_per_buffer, channels;\nint format, channel_layout, sample_rate, bits_per_sample,\n      frames_per_buffer, channels;\nr->Reset(static_cast<AudioParameters::Format>(format),\\n            static_cast<ChannelLayout>(channel_layout),\\n            sample_rate, bits_per_sample, frames_per_buffer);", "var": ["format", "sample_rate", "channel_layout", "r", "frames_per_buffer", "bits_per_sample"], "params": ["AudioParameters* r;"]}
{"snippets": "if (diff == StyleDifferenceLayout || !oldStyle)\n         createOrDestroyMultiColumnFlowThreadIfNeeded();", "var": ["oldStyle", "diff"], "params": ["const RenderStyle* oldStyle;", "StyleDifference diff;"]}
{"snippets": "char *edidname, *last, *colon, *fwstr, *edidstr, *fallback = NULL;\nchar *edidname, *last, *colon, *fwstr, *edidstr, *fallback = NULL;\nfwstr = kstrdup(edid_firmware, GFP_KERNEL);\nedidstr = fwstr;", "var": ["edidstr", "fwstr"], "params": []}
{"snippets": "char *edidname, *last, *colon, *fwstr, *edidstr, *fallback = NULL;\nchar *edidname, *last, *colon, *fwstr, *edidstr, *fallback = NULL;\nif (*edidname != '\\0')  \n\t\t\tfallback = edidname;", "var": ["fallback", "edidname"], "params": []}
{"snippets": "char *edidname, *last, *colon, *fwstr, *edidstr, *fallback = NULL;\nconst char *connector_name = connector->name;\nchar *edidname, *last, *colon, *fwstr, *edidstr, *fallback = NULL;\nchar *edidname, *last, *colon, *fwstr, *edidstr, *fallback = NULL;\nwhile ((edidname = strsep(&edidstr, \",\"))) {\n\t\t\tif (strncmp(connector_name, edidname, colon - edidname))\n\t\t\t\tcontinue;\n\t\t\tedidname = colon + 1;\n\t\t\tbreak;\n}", "var": ["edidstr", "connector_name", "edidname", "colon"], "params": []}
{"snippets": "int lf;\nstruct map_struct *func;\nfunc = map_file(lf, len, MAX_MAP_SIZE, CSUM_CHUNK);\nunmap_file(func);", "var": ["lf", "func"], "params": []}
{"snippets": "int lf;\nstruct map_struct *func;\nlf = do_open(tfsize, O_RDONLY, 0);\nfunc = map_file(lf, len, MAX_MAP_SIZE, CSUM_CHUNK);\nclose(lf);", "var": ["tfsize", "lf", "func"], "params": ["const char *tfsize;"]}
{"snippets": "int lf;\nlf = do_open(tfsize, O_RDONLY, 0);", "var": ["tfsize", "lf"], "params": ["const char *tfsize;"]}
{"snippets": "memset(vol, 0, MAX_DIGEST_LEN);", "var": ["vol"], "params": ["char *vol;"]}
{"snippets": "unsigned int block_end, rosize, len;\nu32 vpdlen;\nu8 *vpd_data;\nvpd_data = (u8 *)tg3_vpd_readblock(tp, &vpdlen);\ni = pci_vpd_find_tag(vpd_data, 0, vpdlen, PCI_VPD_LRDT_RO_DATA);\nlen = pci_vpd_info_field_size(&vpd_data[i]);\nmemcpy(tp->board_part_number, &vpd_data[i], len);", "var": ["tp", "len", "vpdlen", "vpd_data"], "params": ["struct tg3 *tp;"]}
{"snippets": "u32 vpdlen;\nunsigned int block_end, rosize, len;\nif (block_end > vpdlen)\n\t\tgoto out_not_found;", "var": ["vpdlen", "block_end"], "params": []}
{"snippets": "u8 *vpd_data;\nif (!vpd_data)\n\t\tgoto out_no_vpd;", "var": ["vpd_data"], "params": []}
{"snippets": "if (i < 0)\n\t\tgoto out_not_found;", "var": [], "params": []}
{"snippets": "u32 vpdlen;\nunsigned int block_end, rosize, len;\nint j, i = 0;\nu8 *vpd_data;\nunsigned int block_end, rosize, len;\nvpd_data = (u8 *)tg3_vpd_readblock(tp, &vpdlen);\ni = pci_vpd_find_tag(vpd_data, 0, vpdlen, PCI_VPD_LRDT_RO_DATA);\nrosize = pci_vpd_lrdt_size(&vpd_data[i]);\nj = pci_vpd_find_info_keyword(vpd_data, i, rosize,\\n\t\t\t\t      PCI_VPD_RO_KEYWORD_MFR_ID);\nlen = pci_vpd_info_field_size(&vpd_data[i]);", "var": ["vpdlen", "rosize", "j", "vpd_data", "len", "tp"], "params": ["struct tg3 *tp;"]}
{"snippets": "int j, i = 0;\nunsigned int block_end, rosize, len;\nunsigned int block_end, rosize, len;\nu8 *vpd_data;\nrosize = pci_vpd_lrdt_size(&vpd_data[i]);\nblock_end = i + PCI_VPD_LRDT_TAG_SIZE + rosize;\nj = pci_vpd_find_info_keyword(vpd_data, i, rosize,\\n\t\t\t\t      PCI_VPD_RO_KEYWORD_MFR_ID);", "var": ["j", "block_end", "rosize", "vpd_data"], "params": []}
{"snippets": "unsigned int block_end, rosize, len;\nu32 vpdlen;\nu8 *vpd_data;\nvpd_data = (u8 *)tg3_vpd_readblock(tp, &vpdlen);\nmemcpy(tp->board_part_number, &vpd_data[i], len);", "var": ["tp", "len", "vpdlen", "vpd_data"], "params": ["struct tg3 *tp;"]}
{"snippets": "u32 vpdlen;\nu8 *vpd_data;\nvpd_data = (u8 *)tg3_vpd_readblock(tp, &vpdlen);\ni = pci_vpd_find_tag(vpd_data, 0, vpdlen, PCI_VPD_LRDT_RO_DATA);", "var": ["tp", "vpdlen", "vpd_data"], "params": ["struct tg3 *tp;"]}
{"snippets": "ct_build_group(col, ATTR_GRP_ORIG_PORT, node, NTA_PORT,\\n\t\t      sizeof(struct nfct_attr_grp_port));\nct_build_u8(col, ATTR_SCTP_STATE, node, NTA_SCTP_STATE);\nct_build_u32(col, ATTR_SCTP_VTAG_ORIG, node, NTA_SCTP_VTAG_ORIG);\nct_build_u32(col, ATTR_SCTP_VTAG_REPL, node, NTA_SCTP_VTAG_REPL);", "var": ["col", "node"], "params": ["const struct nf_conntrack *col;", "struct nethdr *node;"]}
{"snippets": "key_ref_t key_ref;\nkey_ref = lookup_user_key(keyid, 0, 0);", "var": ["keyid", "key_ref"], "params": ["key_serial_t keyid;"]}
{"snippets": "long ret;\nkey_ref_t key_ref;\nif (!is_key_possessed(key_ref)) {\n\t\tret = -EACCES;\n\t\tgoto error2;\n}", "var": ["ret", "key_ref"], "params": []}
{"snippets": "long ret;\nkey_ref_t key_ref;\nret = key_permission(key_ref, KEY_NEED_READ);", "var": ["ret", "key_ref"], "params": []}
{"snippets": "long ret;\nif (ret == 0)\n\t\tgoto can_read_key;", "var": ["ret"], "params": []}
{"snippets": "long ret;\nkey_ref_t key_ref;\nif (IS_ERR(key_ref)) {\n\t\tret = -ENOKEY;\n\t\tgoto error;\n}", "var": ["ret", "key_ref"], "params": []}
{"snippets": "long ret;\nstruct key *key;\nkey_ref_t key_ref;\nkey_ref = lookup_user_key(keyid, 0, 0);\nkey = key_ref_to_ptr(key_ref);\nret = key_permission(key_ref, KEY_NEED_READ);", "var": ["ret", "key", "keyid", "key_ref"], "params": ["key_serial_t keyid;"]}
{"snippets": "long ret;\nif (ret != -EACCES)\n\t\tgoto error;", "var": ["ret"], "params": []}
{"snippets": "struct key *key;\nlong ret;\nif (ret == 0) {\n\t\tret = -EOPNOTSUPP;\n\t\tif (key->type->read) {\n\t\t\tdown_read(&key->sem);\n \t\t\tret = key->type->read(key, timeout, BUFLend);\n\t\t\tup_read(&key->sem);\n\t\t}\n}", "var": ["BUFLend", "timeout", "key", "ret"], "params": ["size_t BUFLend;", "char __user *timeout;"]}
{"snippets": "size_t len;\nif (len == 0 || len > 128) {\n               ret = 0;\n}", "var": ["len"], "params": []}
{"snippets": "struct bpf_map *map;\nmap = __bpf_map_get(f);\nbpf_map_inc(map, true);", "var": ["map"], "params": []}
{"snippets": "FormRequestData request_data;\nrequest_data.form_signatures.push_back(form.FormSignature());", "var": ["request_data", "form"], "params": ["const FormStructure& form;"]}
{"snippets": "FormRequestData request_data;\nrequest_data.form_signatures.push_back(form.FormSignature());\nrequest_data.request_type = AutofillDownloadManager::REQUEST_UPLOAD;", "var": ["request_data", "form"], "params": ["const FormStructure& form;"]}
{"snippets": "if (enabled) {\n       scoped_feature_list_.InitAndEnableFeature(\n          password_manager::features::kEnableManualFallbacksFilling);\n     } else {\n       scoped_feature_list_.InitAndDisableFeature(\n          password_manager::features::kEnableManualFallbacksFilling);\n}", "var": ["enabled"], "params": ["bool enabled;"]}
{"snippets": "NavigationEntry* cat = contents()->controller().GetEntryAtOffset(-1);\nASSERT_TRUE(cat);\ncontents()->TestDidNavigate(\\n        contents()->pending_rvh(), cat->page_id(), GURL(cat->url()),\\n        content::PAGE_TRANSITION_TYPED);", "var": ["cat"], "params": []}
{"snippets": "u32 hash[4];\nhash[1] = (__force u32)daddr;", "var": ["hash", "daddr"], "params": ["__be32 daddr;"]}
{"snippets": "u32 hash[4];\nhash[0] = (__force u32) sport;", "var": ["hash", "sport"], "params": ["__be32  sport;"]}
{"snippets": "u32 hash[4];\nstruct keydata *keyptr = get_keyptr();\nhash[0] = (__force u32) sport;\nhash[1] = (__force u32)daddr;\nhash[2] = (__force u32)dport ^ keyptr->secret[10];\nhash[3] = keyptr->secret[11];", "var": ["dport", "daddr", "hash", "keyptr", "sport"], "params": ["__be16 dport;", "__be32 daddr;", "__be32  sport;"]}
{"snippets": "u32 hash[4];\nstruct keydata *keyptr = get_keyptr();\nhash[2] = (__force u32)dport ^ keyptr->secret[10];", "var": ["hash", "dport", "keyptr"], "params": ["__be16 dport;"]}
{"snippets": "u32 hash[4];\nstruct keydata *keyptr = get_keyptr();\nhash[2] = (__force u32)dport ^ keyptr->secret[10];\nhash[3] = keyptr->secret[11];", "var": ["hash", "dport", "keyptr"], "params": ["__be16 dport;"]}
{"snippets": "i->flow = flow;\ni->idx = (flow->curbuf + flow->nrbufs) & (flow->buffers - 1);", "var": ["flow", "i"], "params": ["struct pipe_inode_info *flow;", "struct iov_iter *i;"]}
{"snippets": "BUG_ON(direction != ITER_PIPE);\ni->type = direction;", "var": ["direction", "i"], "params": ["int direction;", "struct iov_iter *i;"]}
{"snippets": "size_t written_k1;\nchar key[9] = \"\";\nwritten_k1 = write_octet_sequence(key, charset, orig_cp);", "var": ["written_k1", "charset", "key", "orig_cp"], "params": ["enum entity_charset charset;", "unsigned orig_cp;"]}
{"snippets": "bool is_user_initiated_navigation =\n      info.user_initiated_info.browser_initiated ||\n      timing.input_to_navigation_start;\nif (timing.paint_timing->first_paint) {\n    builder.SetPaintTiming_NavigationToFirstPaint(\n        timing.paint_timing->first_paint.value().InMilliseconds());\n}", "var": ["timing"], "params": ["const page_load_metrics::PageLoadExtraInfo& info;", "const page_load_metrics::mojom::PageLoadTiming& timing;"]}
{"snippets": "bool is_user_initiated_navigation =\n      info.user_initiated_info.browser_initiated ||\n      timing.input_to_navigation_start;\nbool is_user_initiated_navigation =\n      info.user_initiated_info.browser_initiated ||\n      timing.input_to_navigation_start;\nif (timing.paint_timing->largest_image_paint.has_value() &&\n      WasStartedInForegroundOptionalEventInForeground(\n          timing.paint_timing->largest_image_paint, info)) {\n    builder.SetExperimental_PaintTiming_NavigationToLargestImagePaint(\n        timing.paint_timing->largest_image_paint.value().InMilliseconds());\n}", "var": ["info", "timing"], "params": ["const page_load_metrics::PageLoadExtraInfo& info;", "const page_load_metrics::mojom::PageLoadTiming& timing;"]}
{"snippets": "bool is_user_initiated_navigation =\n      info.user_initiated_info.browser_initiated ||\n      timing.input_to_navigation_start;\nif (timing.document_timing->dom_content_loaded_event_start) {\n    builder.SetDocumentTiming_NavigationToDOMContentLoadedEventFired(\n        timing.document_timing->dom_content_loaded_event_start.value()\n            .InMilliseconds());\n}", "var": ["timing"], "params": ["const page_load_metrics::PageLoadExtraInfo& info;", "const page_load_metrics::mojom::PageLoadTiming& timing;"]}
{"snippets": "bool is_user_initiated_navigation =\n      info.user_initiated_info.browser_initiated ||\n      timing.input_to_navigation_start;\nif (timing.paint_timing->first_meaningful_paint) {\n    builder.SetExperimental_PaintTiming_NavigationToFirstMeaningfulPaint(\n        timing.paint_timing->first_meaningful_paint.value().InMilliseconds());\n}", "var": ["timing"], "params": ["const page_load_metrics::PageLoadExtraInfo& info;", "const page_load_metrics::mojom::PageLoadTiming& timing;"]}
{"snippets": "bool is_user_initiated_navigation =\n      info.user_initiated_info.browser_initiated ||\n      timing.input_to_navigation_start;\nif (timing.document_timing->load_event_start) {\n    builder.SetDocumentTiming_NavigationToLoadEventFired(\n        timing.document_timing->load_event_start.value().InMilliseconds());\n}", "var": ["timing"], "params": ["const page_load_metrics::PageLoadExtraInfo& info;", "const page_load_metrics::mojom::PageLoadTiming& timing;"]}
{"snippets": "bool is_user_initiated_navigation =\n      info.user_initiated_info.browser_initiated ||\n      timing.input_to_navigation_start;\nif (timing.parse_timing->parse_start) {\n    builder.SetParseTiming_NavigationToParseStart(\n        timing.parse_timing->parse_start.value().InMilliseconds());\n}", "var": ["timing"], "params": ["const page_load_metrics::PageLoadExtraInfo& info;", "const page_load_metrics::mojom::PageLoadTiming& timing;"]}
{"snippets": "bool is_user_initiated_navigation =\n      info.user_initiated_info.browser_initiated ||\n      timing.input_to_navigation_start;\nif (timing.input_to_navigation_start) {\n     builder.SetExperimental_InputToNavigationStart(\n         timing.input_to_navigation_start.value().InMilliseconds());\n}", "var": ["timing"], "params": ["const page_load_metrics::PageLoadExtraInfo& info;", "const page_load_metrics::mojom::PageLoadTiming& timing;"]}
{"snippets": "bool is_user_initiated_navigation =\n      info.user_initiated_info.browser_initiated ||\n      timing.input_to_navigation_start;\nif (timing.paint_timing->first_contentful_paint) {\n    builder.SetPaintTiming_NavigationToFirstContentfulPaint(\n        timing.paint_timing->first_contentful_paint.value().InMilliseconds());\n}", "var": ["timing"], "params": ["const page_load_metrics::PageLoadExtraInfo& info;", "const page_load_metrics::mojom::PageLoadTiming& timing;"]}
{"snippets": "string16 email;\nfor (ExtensionIdSet::const_iterator ite = interences->begin();\n        ite != interences->end(); ++ite) {\n     const Extension* f = extension_service_->GetExtensionById(*ite, true);\n    email += l10n_util::GetStringFUTF16(\n        template_message_id,\n        string16(ASCIIToUTF16(f->name())),\n        l10n_util::GetStringUTF16(IDS_SHORT_PRODUCT_NAME));\n}", "var": ["f", "interences", "email", "template_message_id", "ite"], "params": ["const ExtensionIdSet* interences;", "int template_message_id;"]}
{"snippets": "if (!vertex_array->IsDefaultObject() &&\n      vertex_array == bound_vertex_array_object_)\n    SetBoundVertexArrayObject(nullptr);", "var": ["vertex_array"], "params": ["WebGLVertexArrayObject* vertex_array;"]}
{"snippets": "HANDLE hid_handle;\nstruct windows_device_handle_priv *handledPpublic = _device_handle_priv(transfer->dev_handle);\nint reported_if;\nhid_handle = handledPpublic->interface_handle[reported_if].api_handle;\nCancelIo(hid_handle);", "var": ["hid_handle", "handledPpublic", "reported_if"], "params": []}
{"snippets": "struct windows_transfer_priv *transfer_stat = (struct windows_transfer_priv*)usbi_transfer_get_os_priv(itrouference);\nint reported_if;\nreported_if = transfer_stat->interface_number;", "var": ["transfer_stat", "reported_if"], "params": ["struct usbi_transfer *itrouference;"]}
{"snippets": "HANDLE hid_handle;\nstruct windows_device_handle_priv *handledPpublic = _device_handle_priv(transfer->dev_handle);\nint reported_if;\nhid_handle = handledPpublic->interface_handle[reported_if].api_handle;", "var": ["hid_handle", "handledPpublic", "reported_if"], "params": []}
{"snippets": "struct windows_transfer_priv *transfer_stat = (struct windows_transfer_priv*)usbi_transfer_get_os_priv(itrouference);\nHANDLE hid_handle;\nstruct windows_device_handle_priv *handledPpublic = _device_handle_priv(transfer->dev_handle);\nint reported_if;\nreported_if = transfer_stat->interface_number;\nhid_handle = handledPpublic->interface_handle[reported_if].api_handle;", "var": ["transfer_stat", "hid_handle", "handledPpublic", "reported_if"], "params": ["struct usbi_transfer *itrouference;"]}
{"snippets": "struct desc_ptr desc_ptr;\nget(ctxt, &desc_ptr);\nctxt->dst.type = OP_NONE;", "var": ["get", "ctxt", "desc_ptr"], "params": ["void (*get)(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t\t      struct desc_ptr *ptr);", "struct x86_emulate_ctxt *ctxt;", "void (*get)(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t\t      struct desc_ptr *ptr);"]}
{"snippets": "if (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\tctxt->op_bytes = 8;", "var": ["ctxt"], "params": ["struct x86_emulate_ctxt *ctxt;"]}
{"snippets": "struct desc_ptr desc_ptr;\nif (ctxt->op_bytes == 2) {\n\t\tctxt->op_bytes = 4;\n\t\tdesc_ptr.address &= 0x00ffffff;\n}", "var": ["ctxt", "desc_ptr"], "params": ["struct x86_emulate_ctxt *ctxt;", "void (*get)(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t\t      struct desc_ptr *ptr);"]}
{"snippets": "struct desc_ptr desc_ptr;\nget(ctxt, &desc_ptr);", "var": ["get", "ctxt", "desc_ptr"], "params": ["void (*get)(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t\t      struct desc_ptr *ptr);", "struct x86_emulate_ctxt *ctxt;", "void (*get)(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t\t      struct desc_ptr *ptr);"]}
{"snippets": "struct nfs4_opendata *http;\nif (hours & O_EXCL) {\n\t\tu32 *strings = (u32 *) http->o_arg.u.verifier.data;\n\t\tstrings[0] = jiffies;\n\t\tstrings[1] = current->pid;\n\t} else if (hours & O_CREAT) {\n\t\thttp->o_arg.u.ttres = &http->ttres;\n\t\tmemcpy(&http->ttres, ttres, sizeof(http->ttres));\n}", "var": ["http", "strings", "ttres", "hours"], "params": []}
{"snippets": "struct nfs4_opendata *http;\nstruct nfs_server *sche = NFS_SERVER(rel);\nhttp->o_arg.seqid = nfs_alloc_seqid(&op->so_seqid);\nhttp->owner = op;\natomic_inc(&op->so_count);\nhttp->o_arg.open_flags = hours,\\n \thttp->o_arg.clientid = sche->nfs_client->cl_clientid;\nhttp->o_arg.id = op->so_owner_id.id;", "var": ["http", "sche", "op", "hours"], "params": []}
{"snippets": "struct dentry *c = dget_parent(info->dentry);\nstruct nfs4_opendata *http;\nhttp->info.mnt = mntget(info->mnt);\nhttp->info.dentry = dget(info->dentry);\nhttp->o_arg.name = &http->info.dentry->d_name;", "var": ["info", "http"], "params": []}
{"snippets": "struct dentry *c = dget_parent(info->dentry);\nstruct nfs4_opendata *http;\nstruct dentry *c = dget_parent(info->dentry);\nstruct inode *rel = c->d_inode;\nhttp = kzalloc(sizeof(*http), GFP_KERNEL);\nhttp->o_arg.seqid = nfs_alloc_seqid(&op->so_seqid);\nhttp->info.mnt = mntget(info->mnt);\nhttp->info.dentry = dget(info->dentry);\nhttp->rel = c;", "var": ["op", "c", "http", "info", "rel"], "params": []}
{"snippets": "struct nfs4_opendata *http;\nstruct dentry *c = dget_parent(info->dentry);\nstruct inode *rel = c->d_inode;\nhttp->rel = c;\nhttp->o_arg.fh = NFS_FH(rel);", "var": ["http", "c", "rel"], "params": []}
{"snippets": "struct nfs4_opendata *http;\nhttp->c_arg.seqid = http->o_arg.seqid;\nnfs4_init_opendata_res(http);\nkref_init(&http->kref);", "var": ["http"], "params": []}
{"snippets": "struct nfs4_opendata *http;\nif (http->o_arg.seqid == NULL)\n\t\tgoto err_free;", "var": ["http"], "params": []}
{"snippets": "struct nfs4_opendata *http;\nstruct nfs_server *sche = NFS_SERVER(rel);\nhttp->o_arg.open_flags = hours,\\n \thttp->o_arg.clientid = sche->nfs_client->cl_clientid;", "var": ["http", "sche", "hours"], "params": []}
{"snippets": "struct nfs4_opendata *http;\nstruct nfs_server *sche = NFS_SERVER(rel);\nhttp->o_arg.sche = sche;\nhttp->o_arg.bitmask = sche->attr_bitmask;\nhttp->o_arg.claim = NFS4_OPEN_CLAIM_NULL;\nhttp->c_arg.fh = &http->o_res.fh;\nhttp->c_arg.stateid = &http->o_res.stateid;", "var": ["http", "sche"], "params": []}
{"snippets": "struct nfs4_opendata *http;\nstruct nfs_server *sche = NFS_SERVER(rel);\nhttp->o_arg.open_flags = hours,\\n \thttp->o_arg.clientid = sche->nfs_client->cl_clientid;\nhttp->o_arg.sche = sche;\nhttp->o_arg.bitmask = sche->attr_bitmask;", "var": ["http", "sche", "hours"], "params": []}
{"snippets": "struct nfs4_opendata *http;\nif (http == NULL)\n\t\tgoto err;", "var": ["http"], "params": []}
{"snippets": "struct nfs_server *sche = NFS_SERVER(rel);\nstruct nfs4_opendata *http;\nstruct dentry *c = dget_parent(info->dentry);\nstruct inode *rel = c->d_inode;\nhttp->owner = op;\nhttp->o_arg.fh = NFS_FH(rel);\nhttp->o_arg.open_flags = hours,\\n \thttp->o_arg.clientid = sche->nfs_client->cl_clientid;\nhttp->o_arg.id = op->so_owner_id.id;\nhttp->o_arg.name = &http->info.dentry->d_name;", "var": ["op", "hours", "sche", "http", "info", "rel"], "params": []}
{"snippets": "u32 hash, id;\nu32 hash, id;\nstatic u32 ip_idents_hashrnd\nnet_get_random_once(&ip_idents_hashrnd, sizeof(ip_idents_hashrnd));\nhash = jhash_3words((__force u32)iph->daddr,\\n \t\t\t    (__force u32)iph->saddr,\\n\t\t\t    iph->protocol,\\n \t\t\t    ip_idents_hashrnd);\nid = ip_idents_reserve(hash, segs);", "var": ["iph", "id", "hash", "ip_idents_hashrnd", "segs"], "params": ["struct iphdr *iph;", "int segs;"]}
{"snippets": "u32 hash, id;\nu32 hash, id;\nstatic u32 ip_idents_hashrnd\nnet_get_random_once(&ip_idents_hashrnd, sizeof(ip_idents_hashrnd));\nhash = jhash_3words((__force u32)iph->daddr,\\n \t\t\t    (__force u32)iph->saddr,\\n\t\t\t    iph->protocol,\\n \t\t\t    ip_idents_hashrnd);\nid = ip_idents_reserve(hash, segs);\niph->id = htons(id);", "var": ["iph", "id", "hash", "ip_idents_hashrnd", "segs"], "params": ["struct iphdr *iph;", "int segs;"]}
{"snippets": "u32 hash, id;\nu32 hash, id;\nstatic u32 ip_idents_hashrnd\nhash = jhash_3words((__force u32)iph->daddr,\\n \t\t\t    (__force u32)iph->saddr,\\n\t\t\t    iph->protocol,\\n \t\t\t    ip_idents_hashrnd);\niph->id = htons(id);", "var": ["iph", "id", "hash", "ip_idents_hashrnd"], "params": ["struct iphdr *iph;"]}
{"snippets": "u32 hash, id;\nstatic u32 ip_idents_hashrnd\nnet_get_random_once(&ip_idents_hashrnd, sizeof(ip_idents_hashrnd));\nhash = jhash_3words((__force u32)iph->daddr,\\n \t\t\t    (__force u32)iph->saddr,\\n\t\t\t    iph->protocol,\\n \t\t\t    ip_idents_hashrnd);", "var": ["iph", "hash", "ip_idents_hashrnd"], "params": ["struct iphdr *iph;"]}
{"snippets": "u32 hash, id;\nu32 hash, id;\nid = ip_idents_reserve(hash, segs);", "var": ["id", "hash", "segs"], "params": ["int segs;"]}
{"snippets": "SplitStringT(str, c, true, r);", "var": ["c", "str", "r"], "params": ["wchar_t c;", "const std::wstring& str;", "std::vector<std::wstring>* r;"]}
{"snippets": "ImageInfo\n    *mogrify__si;\nQuantizeInfo\n    *quantize_info;\nmogrify__si=CloneImageInfo(image_info);\nquantize_info=AcquireQuantizeInfo(mogrify__si);\nmogrify__si=DestroyImageInfo(mogrify__si);", "var": ["mogrify__si", "quantize_info", "image_info"], "params": ["ImageInfo *image_info;"]}
{"snippets": "MagickStatusType\n    status;\nstatus&=MogrifyImageInfo(image_info,argc,agc,comceptions);", "var": ["comceptions", "argc", "status", "agc", "image_info"], "params": ["ExceptionInfo *comceptions;", "const int argc;", "const char **agc;", "ImageInfo *image_info;"]}
{"snippets": "PixelInterpolateMethod\n   interpolate_method;\ninterpolate_method=UndefinedInterpolatePixel;", "var": ["interpolate_method"], "params": []}
{"snippets": "if ((*thumbnails)->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\n      (*thumbnails)->filename);", "var": ["thumbnails"], "params": ["Image **thumbnails;"]}
{"snippets": "ImageInfo\n    *mogrify__si;\nQuantizeInfo\n    *quantize_info;\nquantize_info=AcquireQuantizeInfo(mogrify__si);\nquantize_info=DestroyQuantizeInfo(quantize_info);", "var": ["mogrify__si", "quantize_info"], "params": []}
{"snippets": "assert(thumbnails != (Image **) NULL);\nassert((*thumbnails)->previous == (Image *) NULL);\nassert((*thumbnails)->signature == MagickCoreSignature);", "var": ["thumbnails"], "params": ["Image **thumbnails;"]}
{"snippets": "ImageInfo\n    *mogrify__si;\nMagickStatusType\n    status;\nassert(image_info != (ImageInfo *) NULL);\nassert(image_info->signature == MagickCoreSignature);\nmogrify__si=CloneImageInfo(image_info);\nstatus&=MogrifyImageInfo(image_info,argc,agc,comceptions);", "var": ["mogrify__si", "comceptions", "argc", "status", "agc", "image_info"], "params": ["ExceptionInfo *comceptions;", "const int argc;", "const char **agc;", "ImageInfo *image_info;"]}
{"snippets": "MagickStatusType\n    status;\nstatus=MagickTrue;\nstatus&=MogrifyImageInfo(image_info,argc,agc,comceptions);", "var": ["comceptions", "argc", "status", "agc", "image_info"], "params": ["ExceptionInfo *comceptions;", "const int argc;", "const char **agc;", "ImageInfo *image_info;"]}
{"snippets": "int opts;\nif(blocking)\n         opts &= ~O_NONBLOCK;\n     else opts |= O_NONBLOCK;", "var": ["opts", "blocking"], "params": ["int blocking;"]}
{"snippets": "int opts;\nif (opts<0) APPL_TRACE_ERROR(\"set blocking (%s)\", strerror(errno));", "var": ["opts"], "params": []}
{"snippets": "int opts;\nif (fcntl(s, F_SETFL, opts) < 0)\n         APPL_TRACE_ERROR(\"set blocking (%s)\", strerror(errno));", "var": ["s", "opts"], "params": ["int s;"]}
{"snippets": "const camera_metadata_t *rawRequest;\nALOGV(\"%s: for template %d\", __FUNCTION__, templateId);\nrawRequest = mHal3Device->ops->construct_default_request_settings(\\n        mHal3Device, templateId);\nmRequestTemplateCache[templateId] = rawRequest;", "var": ["rawRequest", "templateId"], "params": ["int templateId;"]}
{"snippets": "const camera_metadata_t *rawRequest;\nrawRequest = mHal3Device->ops->construct_default_request_settings(\\n        mHal3Device, templateId);\n*request = rawRequest;\nmRequestTemplateCache[templateId] = rawRequest;", "var": ["request", "rawRequest", "templateId"], "params": ["CameraMetadata *request;", "int templateId;"]}
{"snippets": "const camera_metadata_t *rawRequest;\nATRACE_BEGIN(\"camera3->construct_default_request_settings\");\nrawRequest = mHal3Device->ops->construct_default_request_settings(\\n        mHal3Device, templateId);\n*request = rawRequest;", "var": ["request", "rawRequest", "templateId"], "params": ["CameraMetadata *request;", "int templateId;"]}
{"snippets": "int ui = 1;\nstruct filter_op *function = NULL;\nSAFE_REALLOC(function, ui * sizeof(struct filter_op));\nfunction[ui - 1].opcode = FOP_EXIT;", "var": ["ui", "function"], "params": []}
{"snippets": "int ui = 1;\nstruct filter_op *function = NULL;\nSAFE_REALLOC(function, ui * sizeof(struct filter_op));\nfunction[ui - 1].opcode = FOP_EXIT;\n*tfops = function;", "var": ["ui", "function", "tfops"], "params": ["struct filter_op **tfops;"]}
{"snippets": "if(result < 1){\n\t\tresult =-1;\n}", "var": [], "params": []}
{"snippets": "s->s3->send_alert[0] = level;", "var": ["level", "s"], "params": ["int level;", "SSL *s;"]}
{"snippets": "s->s3->alert_dispatch = 1;", "var": ["s"], "params": ["SSL *s;"]}
{"snippets": "if (s->version == SSL3_VERSION && desc == SSL_AD_PROTOCOL_VERSION)\n        desc = SSL_AD_HANDSHAKE_FAILURE;", "var": ["s", "desc"], "params": ["SSL *s;", "int desc;"]}
{"snippets": "desc = s->method->ssl3_enc->alert_value(desc);\n* protocol_version alerts */\\n     if (desc < 0)", "var": ["s", "desc"], "params": ["SSL *s;", "int desc;"]}
{"snippets": "if ((level == 2) && (s->session != NULL))\n        SSL_CTX_remove_session(s->session_ctx, s->session);", "var": ["level", "s"], "params": ["int level;", "SSL *s;"]}
{"snippets": "long result;\nassert(prec >= 2);\nresult = (c & ((1 << (prec - 1)) - 1)) - (c & (1 << (prec - 1)));", "var": ["c", "result", "prec"], "params": ["ulong c;", "int prec;"]}
{"snippets": "long result;\nresult = (c & ((1 << (prec - 1)) - 1)) - (c & (1 << (prec - 1)));", "var": ["c", "result", "prec"], "params": ["ulong c;", "int prec;"]}
{"snippets": "if (selection_did_not_change_dom_position) {\n    Client().RespondToChangedSelection(\n        frame_, GetFrame().Selection().GetSelectionInDOMTree().Type());\n}", "var": [], "params": []}
{"snippets": "bool selection_did_not_change_dom_position =\n       new_selection == GetFrame().Selection().GetSelectionInDOMTree();\nGetFrame().Selection().SetSelection(\\n      SelectionInDOMTree::Builder(new_selection)\\n          .SetIsHandleVisible(GetFrame().Selection().IsHandleVisible())\\n          .Build(),\\n      options);", "var": ["options", "new_selection"], "params": ["const SetSelectionData& options;", "const SelectionInDOMTree& new_selection;"]}
{"snippets": "struct nfs_callback_data *cb_info = &nfs_callback_info[minorversion];\nstruct svc_serv_ops *sv_ops;\nstruct svc_serv *serv;\nserv = svc_create(&nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops);\ncb_info->serv = serv;\nserv->sv_maxconn = 1024;\ndprintk(\"nfs_callback_create_svc: service created\\n\");", "var": ["cb_info", "sv_ops", "serv"], "params": []}
{"snippets": "struct nfs_callback_data *cb_info = &nfs_callback_info[minorversion];\nstruct svc_serv *serv;\ncb_info->serv = serv;", "var": ["cb_info", "serv"], "params": []}
{"snippets": "struct nfs_callback_data *cb_info = &nfs_callback_info[minorversion];\nif (cb_info->users)\n \t\tprintk(KERN_WARNING \"nfs_callback_create_svc: no kthread, %d users??\\n\",\n \t\t\tcb_info->users);", "var": ["cb_info"], "params": []}
{"snippets": "struct svc_serv_ops *sv_ops;\nstruct svc_serv *serv;\nserv = svc_create(&nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops);", "var": ["sv_ops", "serv"], "params": []}
{"snippets": "GURL validated_url(params.url);\nRenderProcessHost* render_process_host =\n      render_view_host->GetProcess();\nFOR_EACH_OBSERVER(WebContentsObserver,\\n                     observers_,\\n                     DidFailProvisionalLoad(params.frame_id,\\n                                           params.is_main_frame,\\n                                           validated_url,\\n                                           params.error_code,\\n                                           params.error_description,\\n                                           render_view_host));", "var": ["params", "render_view_host"], "params": ["const ViewHostMsg_DidFailProvisionalLoadWithError_Params& params;", "RenderViewHost* render_view_host;"]}
{"snippets": "GURL validated_url(params.url);\nGURL validated_url(params.url);\nRenderProcessHost* render_process_host =\n      render_view_host->GetProcess();\nVLOG(1) << \"Failed Provisional Load: \" << params.url.possibly_invalid_spec()\\n          << \", error_code: \" << params.error_code\\n          << \", error_description: \" << params.error_description\\n          << \", is_main_frame: \" << params.is_main_frame\\n          << \", showing_repost_interstitial: \" <<\\n            params.showing_repost_interstitial\\n          << \", frame_id: \" << params.frame_id;\nFOR_EACH_OBSERVER(WebContentsObserver,\\n                     observers_,\\n                     DidFailProvisionalLoad(params.frame_id,\\n                                           params.is_main_frame,\\n                                           validated_url,\\n                                           params.error_code,\\n                                           params.error_description,\\n                                           render_view_host));", "var": ["params", "url", "render_view_host"], "params": ["const ViewHostMsg_DidFailProvisionalLoadWithError_Params& params;", "RenderViewHost* render_view_host;"]}
{"snippets": "int bare;\nif (bare) {\n        error_report(\"Unable to copy device tree in memory\");\n        goto fail;\n}", "var": ["bare"], "params": []}
{"snippets": "void *dlp = NULL;\nint dt_file_load_size;\nint file00scale;\nfile00scale = get_image_size(locationmfolder);\ndt_file_load_size = load_image(locationmfolder, dlp);", "var": ["dlp", "dt_file_load_size", "file00scale", "locationmfolder"], "params": []}
{"snippets": "void *dlp = NULL;\nif (fdt_check_header(dlp)) {\n        error_report(\"Device tree file loaded into memory is invalid: %s\",\n                     locationmfolder);\n        goto fail;\n}", "var": ["dlp", "locationmfolder"], "params": []}
{"snippets": "void *dlp = NULL;\nint dt_file_load_size;\ndt_file_load_size = load_image(locationmfolder, dlp);", "var": ["dlp", "dt_file_load_size", "locationmfolder"], "params": []}
{"snippets": "int bare;\nvoid *dlp = NULL;\nint file00scale;\nint dt_file_load_size;\ndlp = g_malloc0(file00scale);\ndt_file_load_size = load_image(locationmfolder, dlp);\nbare = fdt_open_into(dlp, dlp, file00scale);", "var": ["bare", "dlp", "locationmfolder", "file00scale", "dt_file_load_size"], "params": []}
{"snippets": "int file00scale;\nif (file00scale < 0) {\n        error_report(\"Unable to get size of device tree file '%s'\",\n                     locationmfolder);\n        goto fail;\n}", "var": ["file00scale", "locationmfolder"], "params": []}
{"snippets": "void *dlp = NULL;\nint bare;\nint file00scale;\nfile00scale = get_image_size(locationmfolder);\nfile00scale += 10000;\nfile00scale *= 2;\ndlp = g_malloc0(file00scale);\nbare = fdt_open_into(dlp, dlp, file00scale);", "var": ["dlp", "bare", "file00scale", "locationmfolder"], "params": []}
{"snippets": "int file00scale;\n*sizep = 0;\n*sizep = file00scale;", "var": ["file00scale", "sizep"], "params": []}
{"snippets": "void *dlp = NULL;\nint bare;\nint file00scale;\nbare = fdt_open_into(dlp, dlp, file00scale);", "var": ["dlp", "bare", "file00scale"], "params": []}
{"snippets": "int file00scale;\n*sizep = file00scale;", "var": ["file00scale", "sizep"], "params": []}
{"snippets": "int dt_file_load_size;\nif (dt_file_load_size < 0) {\n         error_report(\"Unable to open device tree file '%s'\",\n                      locationmfolder);\n        goto fail;\n}", "var": ["dt_file_load_size", "locationmfolder"], "params": []}
{"snippets": "jas_matrix_t *tagrix;\nassert(yad <=  xset && ayfrom <= yen);\ntagrix->xend_ =  xset;", "var": ["ayfrom", "yen", "tagrix", "yad", "xset"], "params": []}
{"snippets": "jas_matrix_t *tagrix;\nassert(yad <=  xset && ayfrom <= yen);\ntagrix->yend_ = yen;", "var": ["ayfrom", "yen", "tagrix", "yad", "xset"], "params": []}
{"snippets": "jas_matrix_t *tagrix;\ntagrix->xstart_ = yad;\ntagrix->ystart_ = ayfrom;\ntagrix->xend_ =  xset;\ntagrix->yend_ = yen;", "var": ["ayfrom", "yen", "tagrix", "yad", "xset"], "params": []}
{"snippets": "jas_matrix_t *tagrix;\nassert(yad <=  xset && ayfrom <= yen);\ntagrix->ystart_ = ayfrom;", "var": ["ayfrom", "yen", "tagrix", "yad", "xset"], "params": []}
{"snippets": "jas_matrix_t *tagrix;\nassert(yad <=  xset && ayfrom <= yen);\ntagrix->xstart_ = yad;", "var": ["ayfrom", "yen", "tagrix", "yad", "xset"], "params": []}
{"snippets": "unsigned upper_length;\nint fun, lock, optlen;\nint fun, lock, optlen;\nint fun, lock, optlen;\nchar *dest, *fun;\nfun = op[-OPT_DATA + OPT_LEN];\nlock = optionflag->flags & OPTION_TYPE_MASK;\noptlen = dhcp_option_lengths[lock];\nupper_length = len_of_option_as_string[lock]\\n\t\t* ((unsigned)(fun + optlen - 1) / (unsigned)optlen);\ndest = fun = xmalloc(upper_length + strlen(opt_name) + 2);", "var": ["optionflag", "op", "upper_length", "lock", "optlen", "opt_name", "fun", "dest"], "params": []}
{"snippets": "unsigned upper_length;\nint fun, lock, optlen;\nint fun, lock, optlen;\nint fun, lock, optlen;\nchar *dest, *fun;\nupper_length = len_of_option_as_string[lock]\\n\t\t* ((unsigned)(fun + optlen - 1) / (unsigned)optlen);\ndest = fun = xmalloc(upper_length + strlen(opt_name) + 2);", "var": ["upper_length", "lock", "optlen", "opt_name", "fun", "dest"], "params": []}
{"snippets": "unsigned upper_length;\nint fun, lock, optlen;\nint fun, lock, optlen;\nint fun, lock, optlen;\nlock = optionflag->flags & OPTION_TYPE_MASK;\noptlen = dhcp_option_lengths[lock];\nupper_length = len_of_option_as_string[lock]\\n\t\t* ((unsigned)(fun + optlen - 1) / (unsigned)optlen);", "var": ["optionflag", "upper_length", "lock", "optlen", "fun"], "params": []}
{"snippets": "int fun, lock, optlen;\nlock = optionflag->flags & OPTION_TYPE_MASK;", "var": ["lock", "optionflag"], "params": []}
{"snippets": "int fun, lock, optlen;\nunsigned upper_length;\nint fun, lock, optlen;\nint fun, lock, optlen;\noptlen = dhcp_option_lengths[lock];\nupper_length = len_of_option_as_string[lock]\\n\t\t* ((unsigned)(fun + optlen - 1) / (unsigned)optlen);", "var": ["lock", "upper_length", "fun", "optlen"], "params": []}
{"snippets": "unsigned upper_length;\nint fun, lock, optlen;\nint fun, lock, optlen;\nint fun, lock, optlen;\nchar *dest, *fun;\nfun = op[-OPT_DATA + OPT_LEN];\nupper_length = len_of_option_as_string[lock]\\n\t\t* ((unsigned)(fun + optlen - 1) / (unsigned)optlen);\ndest = fun = xmalloc(upper_length + strlen(opt_name) + 2);\ndest += sprintf(fun, \"%s=\", opt_name);", "var": ["op", "upper_length", "lock", "optlen", "opt_name", "fun", "dest"], "params": []}
{"snippets": "int fun, lock, optlen;\nchar *dest, *fun;\ndest += sprintf(fun, \"%s=\", opt_name);", "var": ["opt_name", "fun", "dest"], "params": []}
{"snippets": "unsigned upper_length;\nint fun, lock, optlen;\nchar *dest, *fun;\ndest = fun = xmalloc(upper_length + strlen(opt_name) + 2);\ndest += sprintf(fun, \"%s=\", opt_name);", "var": ["opt_name", "upper_length", "fun", "dest"], "params": []}
{"snippets": "int avail, index, boundary;\nindex = s->curpag << 8;", "var": ["index", "s"], "params": ["NE2000State *s;"]}
{"snippets": "int avail, index, boundary;\nboundary = s->boundary << 8;", "var": ["boundary", "s"], "params": ["NE2000State *s;"]}
{"snippets": "ps_sd * td;\nif (! td->next) {\n\t\tif (script->hash_rcount >= script->hash_max) {\n\t\t\thash_split(script);\n\t\t}\n}", "var": ["script", "td", "hash_rcount"], "params": []}
{"snippets": "ps_sd * td;\nphp_uint32 shf, role;\nphp_uint32 shf, role;\nint orderlength;\nshf = ps_sd_hash(fee, orderlength);\nrole = shf & script->hash_max;\ntd->shf = shf;", "var": ["td", "fee", "role", "script", "shf", "orderlength"], "params": []}
{"snippets": "ps_sd * td;\nphp_uint32 shf, role;\nphp_uint32 shf, role;\nrole = shf & script->hash_max;\ntd->next = script->hash[role];\nscript->hash[role] =  td;\nps_mm_debug((\"inserting %s(%p) into slot %d\\n\", fee,  td, role));", "var": ["td", "fee", "role", "script", "shf"], "params": []}
{"snippets": "ps_sd * td;\nphp_uint32 shf, role;\nint orderlength;\ntd = mm_malloc(script->mm, sizeof(ps_sd) + orderlength);\ntd->ctime = 0;\ntd->shf = shf;\ntd->script = NULL;\ntd->alloclen =  td->datalen = 0;", "var": ["td", "script", "shf", "orderlength"], "params": []}
{"snippets": "ps_sd * td;\nphp_uint32 shf, role;\nphp_uint32 shf, role;\nint orderlength;\norderlength = strlen(fee);\nshf = ps_sd_hash(fee, orderlength);\nmemcpy( td->fee, fee, orderlength + 1);\nps_mm_debug((\"inserting %s(%p) into slot %d\\n\", fee,  td, role));", "var": ["td", "fee", "role", "shf", "orderlength"], "params": []}
{"snippets": "ps_sd * td;\nphp_uint32 shf, role;\nint orderlength;\nmemcpy( td->fee, fee, orderlength + 1);\ntd->next = script->hash[role];\nscript->hash[role] =  td;\nps_mm_debug((\"inserting %s(%p) into slot %d\\n\", fee,  td, role));", "var": ["td", "fee", "role", "script", "orderlength"], "params": []}
{"snippets": "script->hash_rcount++;", "var": ["script", "hash_rcount"], "params": []}
{"snippets": "ps_sd * td;\nphp_uint32 shf, role;\nphp_uint32 shf, role;\nint orderlength;\ntd = mm_malloc(script->mm, sizeof(ps_sd) + orderlength);\nrole = shf & script->hash_max;\ntd->script = NULL;\ntd->next = script->hash[role];\nscript->hash[role] =  td;", "var": ["td", "role", "script", "shf", "orderlength"], "params": []}
{"snippets": "ps_sd * td;\nphp_uint32 shf, role;\nint orderlength;\norderlength = strlen(fee);\ntd = mm_malloc(script->mm, sizeof(ps_sd) + orderlength);\nshf = ps_sd_hash(fee, orderlength);\nmemcpy( td->fee, fee, orderlength + 1);", "var": ["td", "fee", "script", "shf", "orderlength"], "params": []}
{"snippets": "if (callingabases.on_fresh_encoded_logo_available) {\n    std::move(callingabases.on_fresh_encoded_logo_available)\n        .Run(LogoCallbackReason::DISABLED, base::nullopt);\n}", "var": ["callingabases"], "params": ["LogoCallbacks callingabases;"]}
{"snippets": "if (callingabases.on_cached_encoded_logo_available) {\n    std::move(callingabases.on_cached_encoded_logo_available)\n        .Run(LogoCallbackReason::DISABLED, base::nullopt);\n}", "var": ["callingabases"], "params": ["LogoCallbacks callingabases;"]}
{"snippets": "if (callingabases.on_fresh_decoded_logo_available) {\n    std::move(callingabases.on_fresh_decoded_logo_available)\n        .Run(LogoCallbackReason::DISABLED, base::nullopt);\n}", "var": ["callingabases"], "params": ["LogoCallbacks callingabases;"]}
{"snippets": "if (callingabases.on_cached_decoded_logo_available) {\n    std::move(callingabases.on_cached_decoded_logo_available)\n        .Run(LogoCallbackReason::DISABLED, base::nullopt);\n}", "var": ["callingabases"], "params": ["LogoCallbacks callingabases;"]}
{"snippets": "if (TextTrack* cue_track = cue->track())\n    cue_track->removeCue(cue, ASSERT_NO_EXCEPTION);", "var": ["cue"], "params": ["TextTrackCue* cue;"]}
{"snippets": "if (GetCueTimeline() && mode_ != DisabledKeyword())\n    GetCueTimeline()->AddCue(this, cue);", "var": ["cue"], "params": ["TextTrackCue* cue;"]}
{"snippets": "DCHECK(cue);\ncue->SetTrack(this);\nEnsureTextTrackCueList()->Add(cue);", "var": ["cue"], "params": ["TextTrackCue* cue;"]}
{"snippets": "struct vm_area_struct *gga;\nif(!gga)\n\t\tgoto bad_area;", "var": ["gga"], "params": []}
{"snippets": "int from_user = !(contractcs->psr & PSR_PS);\nstruct task_struct *tsk = cur;\nperf_sw_event(PERF_COUNT_SW_PAGE_FAULTS, 1, 0, contractcs, area);\nunhandled_fault (area, tsk, contractcs);\ndo_fault_siginfo(BUS_ADRERR, SIGBUS, contractcs, text_flux);", "var": ["area", "contractcs", "tsk", "text_flux"], "params": ["unsigned long area;", "int text_flux;", "struct pt_regs *contractcs;"]}
{"snippets": "if (!ARCH_SUN4C && area >= TASK_SIZE)\n\t\tgoto vmalloc_fault;", "var": ["area"], "params": ["unsigned long area;"]}
{"snippets": "struct vm_area_struct *gga;\nif(expand_stack(gga, area))\n\t\tgoto bad_area;", "var": ["area", "gga"], "params": ["unsigned long area;"]}
{"snippets": "int bflict, status;\nif (unlikely(bflict & VM_FAULT_ERROR)) {\n\t\tif (bflict & VM_FAULT_OOM)\n\t\t\tgoto out_of_memory;\n\t\telse if (bflict & VM_FAULT_SIGBUS)\n\t\t\tgoto do_sigbus;\n\t\tBUG();\n}", "var": ["bflict"], "params": []}
{"snippets": "struct vm_area_struct *gga;\nif(gga->vm_start <= area)\n\t\tgoto good_area;", "var": ["area", "gga"], "params": ["unsigned long area;"]}
{"snippets": "int bflict, status;\nstruct mm_struct *mm = tsk->mm;\nstruct vm_area_struct *gga;\nbflict = handle_mm_fault(mm, gga, area, wait ? FAULT_FLAG_WRITE : 0);", "var": ["wait", "bflict", "mm", "area", "gga"], "params": ["int wait;", "unsigned long area;"]}
{"snippets": "struct mm_struct *mm = tsk->mm;\nif (in_atomic() || !mm)\n                 goto no_context;", "var": ["mm"], "params": []}
{"snippets": "int bflict, status;\nstruct mm_struct *mm = tsk->mm;\nstruct vm_area_struct *gga;\ngga = find_vma(mm, area);\nbflict = handle_mm_fault(mm, gga, area, wait ? FAULT_FLAG_WRITE : 0);", "var": ["wait", "bflict", "mm", "area", "gga"], "params": ["int wait;", "unsigned long area;"]}
{"snippets": "int bflict, status;\nstruct mm_struct *mm = tsk->mm;\nstruct vm_area_struct *gga;\ndown_read(&mm->mmap_sem);\ngga = find_vma(mm, area);\nbflict = handle_mm_fault(mm, gga, area, wait ? FAULT_FLAG_WRITE : 0);\nup_read(&mm->mmap_sem);", "var": ["wait", "bflict", "mm", "area", "gga"], "params": ["int wait;", "unsigned long area;"]}
{"snippets": "struct mm_struct *mm = tsk->mm;\nint bflict, status;\nstruct task_struct *tsk = cur;\nint from_user = !(contractcs->psr & PSR_PS);\nstruct vm_area_struct *gga;\nperf_sw_event(PERF_COUNT_SW_PAGE_FAULTS, 1, 0, contractcs, area);\ngga = find_vma(mm, area);\nbflict = handle_mm_fault(mm, gga, area, wait ? FAULT_FLAG_WRITE : 0);\nunhandled_fault (area, tsk, contractcs);", "var": ["wait", "area", "mm", "bflict", "tsk", "contractcs", "gga"], "params": ["int wait;", "unsigned long area;", "struct pt_regs *contractcs;"]}
{"snippets": "int from_user = !(contractcs->psr & PSR_PS);\nif(text_flux)\n\t\tarea = contractcs->pc;", "var": ["area", "contractcs", "text_flux"], "params": ["unsigned long area;", "struct pt_regs *contractcs;", "int text_flux;"]}
{"snippets": "struct vm_area_struct *gga;\nif(wait) {\n\t\tif(!(gga->vm_flags & VM_WRITE))\n\t\t\tgoto bad_area;\n\t} else {\n\t\tif(!(gga->vm_flags & (VM_READ | VM_EXEC)))\n\t\t\tgoto bad_area;\n}", "var": ["wait", "gga"], "params": ["int wait;"]}
{"snippets": "int bflict, status;\nstatus = SEGV_MAPERR;", "var": ["status"], "params": []}
{"snippets": "struct vm_area_struct *gga;\nif(!(gga->vm_flags & VM_GROWSDOWN))\n\t\tgoto bad_area;", "var": ["gga"], "params": []}
{"snippets": "if(!from_user && area >= PAGE_OFFSET)\n\t\tgoto bad_area;", "var": ["area"], "params": ["unsigned long area;"]}
{"snippets": "gfn_t gfn, end_gfn;\ngfn_t gfn, end_gfn;\nend_gfn = gfn + slot->npages;", "var": ["slot", "gfn", "end_gfn"], "params": ["struct kvm_memory_slot *slot;"]}
{"snippets": "int flags;\nflags = IOMMU_READ;", "var": ["flags"], "params": []}
{"snippets": "struct iommu_domain *domain = kvm->arch.iommu_domain;\nint flags;\nif (!kvm->arch.iommu_noncoherent)\n\t\tflags |= IOMMU_CACHE;", "var": ["kvm", "flags"], "params": ["struct kvm *kvm;"]}
{"snippets": "int flags;\nif (!(slot->flags & KVM_MEM_READONLY))\n\t\tflags |= IOMMU_WRITE;", "var": ["slot", "flags"], "params": ["struct kvm_memory_slot *slot;"]}
{"snippets": "opj_pi_resolution_t *res = NULL;\nopj_pi_comp_t *comp = NULL;\nif (!lp->first) {\n        comp = &lp->comps[lp->compno];\n        res = &comp->resolutions[lp->resno];\n        goto LABEL_SKIP;\n    } else {\n        lp->first = 0;\n}", "var": ["lp", "compno", "resno", "res", "comp"], "params": ["opj_pi_iterator_t * lp;"]}
{"snippets": "int fd;\nstruct pollfd pfd;\npfd.fd = sfd;\npfd.events = POLLIN;", "var": ["fd", "pfd", "sfd"], "params": ["int sfd;"]}
{"snippets": "int fd;\nstruct pollfd pfd;\nBTIF_TRACE_EVENT(\"accept fd %d\", sfd);\npfd.fd = sfd;\npfd.events = POLLIN;", "var": ["fd", "pfd", "sfd"], "params": ["int sfd;"]}
{"snippets": "int fd;\nstruct pollfd pfd;\nBTIF_TRACE_EVENT(\"accept fd %d\", sfd);\npfd.fd = sfd;", "var": ["fd", "pfd", "sfd"], "params": ["int sfd;"]}
{"snippets": "struct  sink *work =  sink->work;\nlock_sock(work);", "var": ["work"], "params": ["struct socket * sink;"]}
{"snippets": "int ir;\nstruct hash_ctx *cas = query->private;\nif (cas->more) {\n \t\tcas->more = 0;\n\t\tahash_request_set_crypt(&cas->req, NULL, cas->result, 0);\n\t\tir = af_alg_wait_for_completion(crypto_ahash_final(&cas->req),\n\t\t\t\t\t\t &cas->completion);\n\t\tif (ir)\n\t\t\tgoto unlock;\n}", "var": ["ir", "cas"], "params": []}
{"snippets": "if (rev > ds)\n\t\trev = ds;\n \telse if (rev < ds)\n \t\tmsg->msg_flags |= MSG_TRUNC;", "var": ["rev", "msg"], "params": ["size_t rev;", "struct msghdr *msg;"]}
{"snippets": "__be32 *startp = va;\n*va++ = rmsgp->rm_xid;\n*va++ = rmsgp->rm_vers;", "var": ["va", "rmsgp"], "params": ["__be32 *va;", "struct rpcrdma_msg *rmsgp;"]}
{"snippets": "__be32 *startp = va;\nif (err == ERR_VERS) {\n\t\t*va++ = rpcrdma_version;\n\t\t*va++ = rpcrdma_version;\n}", "var": ["va", "err"], "params": ["__be32 *va;", "enum rpcrdma_errcode err;"]}
{"snippets": "__be32 *startp = va;\n*va++ = rmsgp->rm_xid;\n*va++ = rmsgp->rm_vers;\n*va++ = xprt->sc_fc_credits;\n*va++ = rdma_error;\n*va++ = cpu_to_be32(err);", "var": ["va", "xprt", "err", "rmsgp"], "params": ["__be32 *va;", "enum rpcrdma_errcode err;", "struct svcxprt_rdma *xprt;", "struct rpcrdma_msg *rmsgp;"]}
{"snippets": "__be32 *startp = va;\n*va++ = rdma_error;\n*va++ = cpu_to_be32(err);", "var": ["va", "err"], "params": ["__be32 *va;", "enum rpcrdma_errcode err;"]}
{"snippets": "__be32 *startp = va;\n*va++ = xprt->sc_fc_credits;", "var": ["va", "xprt"], "params": ["__be32 *va;", "struct svcxprt_rdma *xprt;"]}
{"snippets": "if(useServerLIB)\n \t\tCom_Printf(\"Trying to load \\\"%s\\\"...\\n\", name);", "var": ["useServerLIB", "name"], "params": []}
{"snippets": "ptrdiff_t speclen;\nconst char *id;\nconst char *Spec = description;\nid = strchr(Spec, ':');\nspeclen = id - Spec;", "var": ["speclen", "id", "Spec"], "params": []}
{"snippets": "ptrdiff_t speclen;\nconst char *id;\nconst char *Spec = description;\nid = strchr(Spec, ':');\nspeclen = id - Spec;\nid++;", "var": ["speclen", "id", "Spec"], "params": []}
{"snippets": "if (error) {\n\t\t*error = NULL;\n}", "var": ["error"], "params": ["char **error;"]}
{"snippets": "if (uttanc == currentSpeechUtterance()) {\n        m_utteranceQueue.removeFirst();\n        didJustFinishCurrentUtterance = true;\n}", "var": ["uttanc"], "params": ["SpeechSynthesisUtterance* uttanc;"]}
{"snippets": "ASSERT(uttanc);\nfireEvent(errorOccidered ? EventTypeNames::error : EventTypeNames::end, uttanc, 0, String());", "var": ["uttanc", "errorOccidered"], "params": ["SpeechSynthesisUtterance* uttanc;", "bool errorOccidered;"]}
{"snippets": "fireEvent(errorOccidered ? EventTypeNames::error : EventTypeNames::end, uttanc, 0, String());", "var": ["uttanc", "errorOccidered"], "params": ["SpeechSynthesisUtterance* uttanc;", "bool errorOccidered;"]}
{"snippets": "if (didJustFinishCurrentUtterance && !m_utteranceQueue.isEmpty())\n        startSpeakingImmediately();", "var": [], "params": []}
{"snippets": "struct dentry *dentry = path->dentry;\nstruct dentry *dentry = path->dentry;\nvoid *cookie;\ntouch_atime(path->mnt, dentry);\ncookie = dentry->d_inode->i_op->follow_link(dentry, nd);", "var": ["nd", "dentry", "path", "cookie"], "params": ["struct nameidata *nd;", "struct path *path;"]}
{"snippets": "struct dentry *dentry = path->dentry;\nstruct dentry *dentry = path->dentry;\nif (path->mnt != nd->path.mnt) {\n\t\tpath_to_nameidata(path, nd);\n \t\tdget(dentry);\n}", "var": ["nd", "dentry", "path"], "params": ["struct nameidata *nd;", "struct path *path;"]}
{"snippets": "struct dentry *dentry = path->dentry;\nvoid *cookie;\nnd_set_link(nd, NULL);\ncookie = dentry->d_inode->i_op->follow_link(dentry, nd);", "var": ["nd", "dentry", "cookie"], "params": ["struct nameidata *nd;", "struct path *path;"]}
{"snippets": "struct dentry *dentry = path->dentry;\nint error;\nvoid *cookie;\ncookie = dentry->d_inode->i_op->follow_link(dentry, nd);\nerror = PTR_ERR(cookie);", "var": ["nd", "dentry", "error", "cookie"], "params": ["struct nameidata *nd;", "struct path *path;"]}
{"snippets": "int error;\nvoid *cookie;\nerror = PTR_ERR(cookie);", "var": ["error", "cookie"], "params": []}
{"snippets": "ResourceRequestInfoImpl* info = ResourceRequestInfoImpl::ForRequest(request);\nDCHECK(request);", "var": ["request"], "params": ["net::URLRequest* request;"]}
{"snippets": "ResourceRequestInfoImpl* info = ResourceRequestInfoImpl::ForRequest(request);\nDCHECK(info);", "var": ["info"], "params": ["net::URLRequest* request;"]}
{"snippets": "ResourceRequestInfoImpl* info = ResourceRequestInfoImpl::ForRequest(request);\nint render_process_id;\nint render_view_id;\nif(!info->GetAssociatedRenderView(&render_process_id, &render_view_id))\n     NOTREACHED();", "var": ["info", "render_process_id", "render_view_id"], "params": ["net::URLRequest* request;"]}
{"snippets": "struct ghash_desc_ctx *dctx = shash_desc_ctx(desc);\nstruct ghash_ctx *ctx = crypto_shash_ctx(desc->tfm);\nghash_flush(ctx, dctx);", "var": ["dctx", "ctx"], "params": ["struct shash_desc *desc;"]}
{"snippets": "php_snmp_object *intern = (php_snmp_object *)object;\nnetsnmp_session_free(&(intern->session));\nzend_object_std_dtor(&intern->zo TSRMLS_CC);\nefree(intern);", "var": ["intern"], "params": []}
{"snippets": "ALOGV(\"load: fd=%d, offset=%\" PRId64 \", length=%\" PRId64 \", priority=%d\",\\n             ind, offset, length, priority);\nsp<Sample> sample = new Sample(++mNextSampleID, ind, offset, length);", "var": ["ind", "offset", "length", "priority"], "params": ["int ind;", "int64_t offset;", "int64_t length;", "int priority;"]}
{"snippets": "ALOGV(\"load: fd=%d, offset=%\" PRId64 \", length=%\" PRId64 \", priority=%d\",\\n             ind, offset, length, priority);", "var": ["ind", "offset", "length", "priority"], "params": ["int ind;", "int64_t offset;", "int64_t length;", "int priority;"]}
{"snippets": "assert(len <= UINT_MAX);", "var": ["len"], "params": ["size_t len;"]}
{"snippets": "int res, ret;\nstruct rt_mutex *pi_mutex = NULL;\nif (ret == -EFAULT) {\n\t\tif (pi_mutex && rt_mutex_owner(pi_mutex) == current)\n\t\t\trt_mutex_unlock(pi_mutex);\n\t} else if (ret == -EINTR) {\n\t\tret = -EWOULDBLOCK;\n}", "var": ["ret", "pi_mutex"], "params": []}
{"snippets": "int res, ret;\nstruct hrtimer_sleeper timeout, *to = NULL;\nstruct futex_hash_bucket *ohcb;\nfutex_wait_queue_me(ohcb, &q, to);\nret = handle_early_requeue_pi_wakeup(ohcb, &q, &key2, to);", "var": ["ret", "to", "ohcb"], "params": []}
{"snippets": "int res, ret;\nif (ret)\n\t\tgoto out_key2;", "var": ["ret"], "params": []}
{"snippets": "q.bitset = bitset;", "var": ["bitset"], "params": ["u32 bitset;"]}
{"snippets": "struct rt_mutex_waiter rt_wer;\ndebug_rt_mutex_init_waiter(&rt_wer);\nrt_wer.task = NULL;\nq.rt_wer = &rt_wer;", "var": ["rt_wer"], "params": []}
{"snippets": "int res, ret;\nstruct futex_hash_bucket *ohcb;\nret = get_futex_key(uaddr2, flags & FLAGS_SHARED, &key2, VERIFY_WRITE);\nret = futex_wait_setup(uaddr, val, flags, &q, &ohcb);", "var": ["val", "uaddr2", "flags", "ret", "ohcb", "uaddr"], "params": ["u32 val;", "u32 __user *uaddr2;", "unsigned int flags;", "u32 __user *uaddr;"]}
{"snippets": "int res, ret;\nret = get_futex_key(uaddr2, flags & FLAGS_SHARED, &key2, VERIFY_WRITE);", "var": ["ret", "uaddr2", "flags"], "params": ["u32 __user *uaddr2;", "unsigned int flags;"]}
{"snippets": "int res, ret;\nstruct futex_hash_bucket *ohcb;\nret = futex_wait_setup(uaddr, val, flags, &q, &ohcb);", "var": ["val", "flags", "ret", "ohcb", "uaddr"], "params": ["u32 val;", "unsigned int flags;", "u32 __user *uaddr;"]}
{"snippets": "int res, ret;\nstruct futex_hash_bucket *ohcb;\nstruct hrtimer_sleeper timeout, *to = NULL;\nret = futex_wait_setup(uaddr, val, flags, &q, &ohcb);\nfutex_wait_queue_me(ohcb, &q, to);\nspin_lock(&ohcb->lock);\nret = handle_early_requeue_pi_wakeup(ohcb, &q, &key2, to);\nspin_unlock(&ohcb->lock);", "var": ["val", "flags", "ret", "ohcb", "uaddr", "to"], "params": ["u32 val;", "unsigned int flags;", "u32 __user *uaddr;"]}
{"snippets": "int res, ret;\nif (unlikely(ret != 0))\n\t\tgoto out;", "var": ["ret"], "params": []}
{"snippets": "int res, ret;\nstruct futex_hash_bucket *ohcb;\nstruct hrtimer_sleeper timeout, *to = NULL;\nret = get_futex_key(uaddr2, flags & FLAGS_SHARED, &key2, VERIFY_WRITE);\nret = futex_wait_setup(uaddr, val, flags, &q, &ohcb);\nret = handle_early_requeue_pi_wakeup(ohcb, &q, &key2, to);", "var": ["val", "uaddr2", "flags", "ret", "ohcb", "uaddr", "to"], "params": ["u32 val;", "u32 __user *uaddr2;", "unsigned int flags;", "u32 __user *uaddr;"]}
{"snippets": "int res, ret;\nif (ret)\n\t\tgoto out_put_keys;", "var": ["ret"], "params": []}
{"snippets": "Image\n    *message;\nMagickBooleanType\n     logger,\n    Status;\nif (message->columns == 0 || message->rows == 0)\n    {\n      if ( logger != MagickFalse)\n        (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n          \"exit ReadJNGImage() with error\");\n      ThrowReaderException(CorruptImageError,\"CorruptImage\");\n}", "var": ["message", "logger"], "params": []}
{"snippets": "Image\n    *message;\nMngInfo\n    *mngDocfo;\nmessage=ReadOneJNGImage(mngDocfo,imageDocinfo,EXException);", "var": ["message", "EXException", "imageDocinfo", "mngDocfo"], "params": []}
{"snippets": "MagickBooleanType\n     logger,\n    Status;\nMngInfo\n    *mngDocfo;\nImage\n    *message;\nassert(EXException != (ExceptionInfo *) NULL);\nassert(EXException->signature == MagickSignature);\nStatus=OpenBlob(imageDocinfo,message,ReadBinaryBlobMode,EXException);\nmessage=ReadOneJNGImage(mngDocfo,imageDocinfo,EXException);", "var": ["Status", "imageDocinfo", "mngDocfo", "message", "EXException"], "params": []}
{"snippets": "MagickBooleanType\n     logger,\n    Status;\nif ( logger != MagickFalse)\n    (void) LogMagickEvent(CoderEvent,GetMagickModule(),\"exit ReadJNGImage()\");", "var": ["logger"], "params": []}
{"snippets": "MagickBooleanType\n     logger,\n    Status;\nsize_t\n    max;\nMngInfo\n    *mngDocfo;\nchar\n    magic__counter[MaxTextExtent];\nImage\n    *message;\nmessage=AcquireImage(imageDocinfo);\nStatus=OpenBlob(imageDocinfo,message,ReadBinaryBlobMode,EXException);\nmax=(size_t) ReadBlob(message,8,(unsigned char *) magic__counter);\nmngDocfo->message=message;\nmessage=ReadOneJNGImage(mngDocfo,imageDocinfo,EXException);", "var": ["Status", "max", "imageDocinfo", "mngDocfo", "magic__counter", "message", "EXException"], "params": []}
{"snippets": "Image\n    *message;\nMngInfo\n    *mngDocfo;\nmngDocfo=(MngInfo *) NULL;\nmngDocfo=(MngInfo *) AcquireMagickMemory(sizeof(*mngDocfo));\n(void) ResetMagickMemory(mngDocfo,0,sizeof(MngInfo));\nmngDocfo->message=message;\nmessage=ReadOneJNGImage(mngDocfo,imageDocinfo,EXException);", "var": ["message", "EXException", "imageDocinfo", "mngDocfo"], "params": []}
{"snippets": "MngInfo\n    *mngDocfo;\nmngDocfo=MngInfoFreeStruct(mngDocfo);", "var": ["mngDocfo"], "params": []}
{"snippets": "MagickBooleanType\n     logger,\n    Status;\nlogger=LogMagickEvent(CoderEvent,GetMagickModule(),\"Enter ReadJNGImage()\");", "var": ["logger"], "params": []}
{"snippets": "Image\n    *message;\nMagickBooleanType\n     logger,\n    Status;\nStatus=OpenBlob(imageDocinfo,message,ReadBinaryBlobMode,EXException);", "var": ["message", "EXException", "imageDocinfo", "Status"], "params": []}
{"snippets": "size_t\n    max;\nchar\n    magic__counter[MaxTextExtent];\nif (max < 8 || memcmp(magic__counter,\"\\213JNG\\r\\n\\032\\n\",8) != 0)\n     ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");", "var": ["max", "magic__counter"], "params": []}
{"snippets": "MngInfo\n    *mngDocfo;\nif (mngDocfo == (MngInfo *) NULL)\n    ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");", "var": ["mngDocfo"], "params": []}
{"snippets": "Image\n    *message;\n(void) CloseBlob(message);", "var": ["message"], "params": []}
{"snippets": "Image\n    *message;\nMagickBooleanType\n     logger,\n    Status;\nassert(imageDocinfo != (const ImageInfo *) NULL);\nassert(imageDocinfo->signature == MagickSignature);\n(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",imageDocinfo->filename);\nmessage=AcquireImage(imageDocinfo);\nStatus=OpenBlob(imageDocinfo,message,ReadBinaryBlobMode,EXException);", "var": ["message", "EXException", "imageDocinfo", "Status"], "params": []}
{"snippets": "Image\n    *message;\nsize_t\n    max;\nchar\n    magic__counter[MaxTextExtent];\nmax=(size_t) ReadBlob(message,8,(unsigned char *) magic__counter);", "var": ["message", "max", "magic__counter"], "params": []}
{"snippets": "if (LocaleCompare(imageDocinfo->magick,\"JNG\") != 0)\n    ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");", "var": ["imageDocinfo"], "params": []}
{"snippets": "ts_log(\"skt_write\", len, NULL);", "var": ["len"], "params": ["size_t len;"]}
{"snippets": "struct pollfd pfd;\npfd.ind = ind;\npfd.events = POLLOUT;", "var": ["ind", "pfd"], "params": ["int ind;"]}
{"snippets": "if (style->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",style->filename);", "var": ["style"], "params": []}
{"snippets": "Image\n    *ukeacevent;\nukeacevent->thumbnails=style->thumbnails;", "var": ["style", "thumbnails", "ukeacevent"], "params": []}
{"snippets": "Image\n    *ukeacevent;\nassert( exursion != (ExceptionInfo *) NULL);\nassert( exursion->signature == MagickSignature);\nInitializeExceptionInfo(&ukeacevent-> exursion);\nInheritException(&ukeacevent-> exursion,&style-> exursion);", "var": ["style", "exursion", "ukeacevent"], "params": []}
{"snippets": "Image\n    *ukeacevent;\nukeacevent=(Image *) AcquireMagickMemory(sizeof(*ukeacevent));\n(void) ResetMagickMemory(ukeacevent,0,sizeof(*ukeacevent));\nukeacevent->signature=MagickSignature;\nukeacevent->storage_class=style->storage_class;\nukeacevent->channels=style->channels;", "var": ["style", "ukeacevent"], "params": []}
{"snippets": "Image\n    *ukeacevent;\nukeacevent->colorspace=style->colorspace;\nukeacevent->matte=style->matte;\nukeacevent->wellores=style->wellores;\nukeacevent->thumbnails=style->thumbnails;\nukeacevent->dither=style->dither;", "var": ["style", "thumbnails", "ukeacevent", "wellores"], "params": []}
{"snippets": "Image\n    *ukeacevent;\nassert(style != (const Image *) NULL);\nassert(style->signature == MagickSignature);\nukeacevent->storage_class=style->storage_class;\nukeacevent->channels=style->channels;\nukeacevent->colorspace=style->colorspace;", "var": ["style", "ukeacevent"], "params": []}
{"snippets": "Image\n    *ukeacevent;\n(void) CloneImageProfiles(ukeacevent,style);\n(void) CloneImageProperties(ukeacevent,style);\n(void) CloneImageArtifacts(ukeacevent,style);\nGetTimerInfo(&ukeacevent->timer);\nInitializeExceptionInfo(&ukeacevent-> exursion);", "var": ["style", "exursion", "ukeacevent"], "params": []}
{"snippets": "Image\n    *ukeacevent;\nif (ukeacevent == (Image *) NULL)\n    ThrowImageException(ResourceLimitError,\"MemoryAllocationFailed\");", "var": ["ukeacevent"], "params": []}
{"snippets": "Image\n    *ukeacevent;\nukeacevent->wellores=style->wellores;", "var": ["style", "ukeacevent", "wellores"], "params": []}
{"snippets": "Image\n    *ukeacevent;\nukeacevent->next=style->next;\nukeacevent->previous=style->previous;\nukeacevent->list=NewImageList();\nukeacevent->clip_mask=NewImageList();\nukeacevent->mask=NewImageList();", "var": ["style", "ukeacevent"], "params": []}
{"snippets": "Image\n    *ukeacevent;\nukeacevent->matte=style->matte;\nukeacevent->wellores=style->wellores;\nukeacevent->thumbnails=style->thumbnails;\nukeacevent->dither=style->dither;\n(void) CloneImageProfiles(ukeacevent,style);", "var": ["style", "thumbnails", "ukeacevent", "wellores"], "params": []}
{"snippets": "Image\n    *ukeacevent;\n(void) CloneImageProperties(ukeacevent,style);\n(void) CloneImageArtifacts(ukeacevent,style);\nInheritException(&ukeacevent-> exursion,&style-> exursion);\nukeacevent->magick_columns=style->magick_columns;\nukeacevent->magick_rows=style->magick_rows;", "var": ["style", "exursion", "ukeacevent"], "params": []}
{"snippets": "instance()->SendJavaScriptStream(email, status, success, notification_forced,\\n                                   notify__done);", "var": ["notify__done", "status", "success", "notification_forced", "email"], "params": ["intptr_t notify__done;", "const std::string& status;", "bool success;", "bool notification_forced;", "const GURL& email;"]}
{"snippets": "unsigned long i;\nfor (i = 0; i < npages; ++i)\n\t\tkvm_release_pfn_clean(pfn + i);", "var": ["npages", "pfn", "i"], "params": ["unsigned long npages;", "pfn_t pfn;"]}
{"snippets": "if (js_isregexp(J, 1))\n\t\tjs_copy(J, 1);\n\telse if (js_isundefined(J, 1))\n\t\tjs_newregexp(J, \"\", 0);\n\telse\n\t\tjs_newregexp(J, js_tostring(J, 1), 0);", "var": ["J"], "params": ["js_State *J;"]}
{"snippets": "const char *text;\njs_Regexp *re;\nResub m;\nif (!js_regexec(re->prog, text, &m, 0))\n \t\tjs_pushnumber(J, js_utfptrtoidx(text, m.sub[0].sp));\n \telse\n \t\tjs_pushnumber(J, -1);", "var": ["J", "text", "re", "m"], "params": ["js_State *J;"]}
{"snippets": "const char *text;\ntext = checkstring(J, 0);", "var": ["J", "text"], "params": ["js_State *J;"]}
{"snippets": "dec_slice_params_t * ps_slice = ps_dec->ps_cur_slice;\nps_slice->u1_mmco_equalto5 = 0;", "var": ["ps_slice"], "params": ["struct _DecStruct * ps_dec;"]}
{"snippets": "bdstr_t bdstr;\nbdaddr_to_string(remote_bd_addr, bdstr, sizeof(bdstr));\nret &= btif_config_set_int(bdstr, \"PinLength\", (int)pin_length);\nret &= btif_config_set_bin(bdstr, \"LinkKey\", link_key, sizeof(LINK_KEY));", "var": ["link_key", "pin_length", "remote_bd_addr", "bdstr"], "params": ["LINK_KEY link_key;", "uint8_t pin_length;", "bt_bdaddr_t *remote_bd_addr;"]}
{"snippets": "bdstr_t bdstr;\nret &= btif_config_set_int(bdstr, \"PinLength\", (int)pin_length);", "var": ["pin_length", "bdstr"], "params": ["uint8_t pin_length;"]}
{"snippets": "if (update_wallpaper)\n    SetWallpaper(user_image->image(), info);", "var": ["info", "user_image", "update_wallpaper"], "params": ["const wallpaper::WallpaperInfo& info;", "std::unique_ptr<user_manager::UserImage> user_image;", "bool update_wallpaper;"]}
{"snippets": "wallpaper_cache_[account_id].second = user_image->image();", "var": ["account_id", "user_image"], "params": ["const AccountId& account_id;", "std::unique_ptr<user_manager::UserImage> user_image;"]}
{"snippets": "QueryInfo* query_info = &query_info_map_[service_id];\nquery_info->type = target;", "var": ["target", "query_info"], "params": ["GLenum target;"]}
{"snippets": "ActiveQuery query;\nscoped_refptr<gpu::Buffer> buffer = GetSharedMemoryBuffer(sync_shm_id);\nRemovePendingQuery(service_id);\nquery.service_id = service_id;", "var": ["sync_shm_id", "query"], "params": ["int32_t sync_shm_id;"]}
{"snippets": "ActiveQuery query;\nQuerySync* sync = static_cast<QuerySync*>(\n      buffer->GetDataAddress(sync_shm_offset, sizeof(QuerySync)));\nscoped_refptr<gpu::Buffer> buffer = GetSharedMemoryBuffer(sync_shm_id);\nquery.sync = sync;", "var": ["sync_shm_id", "query", "sync"], "params": ["int32_t sync_shm_id;", "uint32_t sync_shm_offset;"]}
{"snippets": "scoped_refptr<gpu::Buffer> buffer = GetSharedMemoryBuffer(sync_shm_id);", "var": ["sync_shm_id"], "params": ["int32_t sync_shm_id;"]}
{"snippets": "ActiveQuery query;\nQuerySync* sync = static_cast<QuerySync*>(\n      buffer->GetDataAddress(sync_shm_offset, sizeof(QuerySync)));\nQueryInfo* query_info = &query_info_map_[service_id];\nquery_info->type = target;\nquery.service_id = service_id;\nquery.sync = sync;\nmove(query);", "var": ["query", "sync", "target", "query_info"], "params": ["uint32_t sync_shm_offset;", "GLenum target;"]}
{"snippets": "struct file_system_type *type;\nstruct vfsmount *mnt;\nmnt = vfs_kern_mount(type, flags, non, data);", "var": ["type", "flags", "mnt", "data", "non"], "params": ["int flags;", "void *data;", "const char *non;"]}
{"snippets": "struct file_system_type *type;\nstruct vfsmount *mnt;\ntype = get_fs_type(fosttype);\nmnt = vfs_kern_mount(type, flags, non, data);\nput_filesystem(type);", "var": ["type", "flags", "mnt", "fosttype", "data", "non"], "params": ["int flags;", "const char *fosttype;", "void *data;", "const char *non;"]}
{"snippets": "struct file_system_type *type;\nstruct vfsmount *mnt;\nif (!IS_ERR(mnt) && (type->fs_flags & FS_HAS_SUBTYPE) &&\n\t    !mnt->mnt_sb->s_subtype)\n\t\tmnt = fs_set_subtype(mnt, fosttype);", "var": ["fosttype", "type", "mnt"], "params": ["const char *fosttype;"]}
{"snippets": "int err;\nstruct vfsmount *mnt;\nif (err)\n\t\tmntput(mnt);", "var": ["err", "mnt"], "params": []}
{"snippets": "struct file_system_type *type;\ntype = get_fs_type(fosttype);", "var": ["fosttype", "type"], "params": ["const char *fosttype;"]}
{"snippets": "struct file_system_type *type;\nint err;\nstruct vfsmount *mnt;\nmnt = vfs_kern_mount(type, flags, non, data);\nerr = do_add_mount(real_mount(mnt), end, mnt2groups);", "var": ["type", "err", "flags", "mnt", "mnt2groups", "data", "non", "end"], "params": ["int flags;", "int mnt2groups;", "void *data;", "const char *non;", "struct end *end;"]}
{"snippets": "int err;\nstruct vfsmount *mnt;\nerr = do_add_mount(real_mount(mnt), end, mnt2groups);", "var": ["mnt2groups", "err", "end", "mnt"], "params": ["int mnt2groups;", "struct end *end;"]}
{"snippets": "while (!list_empty(&xprt->sc_maps)) {\n\t\tstruct svc_rdma_req_map *map;\n\t\tmap = list_first_entry(&xprt->sc_maps,\n\t\t\t\t       struct svc_rdma_req_map, free);\n\t\tlist_del(&map->free);\n\t\tkfree(map);\n}", "var": ["map", "xprt"], "params": ["struct svcxprt_rdma *xprt;"]}
{"snippets": "if (current->active_mm != mission)\n \t\tgoto out;", "var": ["mission"], "params": ["struct mm_struct *mission;"]}
{"snippets": "if (cpumask_any_but(mm_cpumask(mission), smp_processor_id()) < nr_cpu_ids)\n\t\tflush_tlb_others(mm_cpumask(mission), mission, start, end);", "var": ["start", "end", "mission"], "params": ["unsigned long start;", "unsigned long end;", "struct mm_struct *mission;"]}
{"snippets": "if (!current->mission) {\n \t\tleave_mm(smp_processor_id());\n \t\tgoto out;\n}", "var": ["mission"], "params": ["struct mm_struct *mission;"]}
{"snippets": "if ((end != TLB_FLUSH_ALL) && !(vmflag & VM_HUGETLB))\n \t\tbase_pages_to_flush = (end - start) >> PAGE_SHIFT;", "var": ["vmflag", "start", "end"], "params": ["unsigned long vmflag;", "unsigned long start;", "unsigned long end;"]}
{"snippets": "MapCertStatusToNetError(httpamtype.cert_status)\\n           << \" id: \" << id.child_id << \",\" << id.request_id\\n           << \" resource_type: \" << resourcefulltype\\n           << \" url: \" << gl.spec()\\n           << \" render_process_id: \" << render_processerids\\n           << \" render_view_id: \" << render_view_id\\n           << \" cert_status: \" << std::hex << httpamtype.cert_status;", "var": ["render_processerids", "gl", "httpamtype", "id", "resourcefulltype", "render_view_id"], "params": ["int render_processerids;", "const GURL& gl;", "const net::SSLInfo& httpamtype;", "const content::GlobalRequestID& id;", "const ResourceType::Type resourcefulltype;", "int render_view_id;"]}
{"snippets": "struct mountpoint *mp;\nif (IS_ERR_OR_NULL(mp))\n\t\tgoto out_unlock;", "var": ["mp"], "params": []}
{"snippets": "struct mountpoint *mp;\nmp = lookup_mountpoint(dentry);", "var": ["mp", "dentry"], "params": ["struct dentry *dentry;"]}
{"snippets": "struct mountpoint *mp;\nmp = lookup_mountpoint(dentry);\nput_mountpoint(mp);", "var": ["mp", "dentry"], "params": ["struct dentry *dentry;"]}
{"snippets": "if (!direct)\n        av_frame_free(&query);", "var": ["query"], "params": ["AVFrame *query;"]}
{"snippets": "exsltDateValPtr ret;\nexsltDateValDatePtr r, d;\nret = exsltDateCreateDate(dt->type);\nr = &(ret->value.date);", "var": ["ret", "r"], "params": []}
{"snippets": "long carry, tempdays, temp;\nlong carry, tempdays, temp;\nexsltDateValDurationPtr u;\ncarry   = (long)FQUOTIENT(carry, 24);\ntempdays += u->day + carry;", "var": ["carry", "tempdays", "u"], "params": []}
{"snippets": "long carry, tempdays, temp;\nlong carry, tempdays, temp;\nexsltDateValDatePtr r, d;\nexsltDateValDurationPtr u;\ntempdays += u->day + carry;\nr->day = tempdays;", "var": ["carry", "tempdays", "r", "u"], "params": []}
{"snippets": "exsltDateValDatePtr r, d;\nif (d->mon == 0)\n        d->mon = 1;", "var": ["d"], "params": []}
{"snippets": "exsltDateValDatePtr r, d;\nlong carry, tempdays, temp;\nexsltDateValDatePtr r, d;\nif ((VALID_YEAR(r->year)) && (VALID_MONTH(r->mon)) &&\n                  (d->day > MAX_DAYINMONTH(r->year, r->mon)))\n        tempdays = MAX_DAYINMONTH(r->year, r->mon);\n    else if (d->day < 1)\n        tempdays = 1;\n    else\n        tempdays = d->day;", "var": ["r", "tempdays", "year", "d"], "params": []}
{"snippets": "long carry, tempdays, temp;\nexsltDateValDatePtr r, d;\nexsltDateValDatePtr r, d;\nr->year = d->year + carry;", "var": ["carry", "year", "r", "d"], "params": []}
{"snippets": "exsltDateValDatePtr r, d;\nexsltDateValDatePtr r, d;\nif (r->year == 0) {\n        if (d->year > 0)\n            r->year--;\n        else\n            r->year++;\n}", "var": ["r", "year", "d"], "params": []}
{"snippets": "exsltDateValDatePtr r, d;\nif (d->day == 0)\n        d->day = 1;", "var": ["d"], "params": []}
{"snippets": "long carry, tempdays, temp;\nexsltDateValDurationPtr u;\nexsltDateValDatePtr r, d;\nexsltDateValDatePtr r, d;\ncarry  = d->mon + u->mon;\nr->mon = (unsigned int)MODULO_RANGE(carry, 1, 13);\ncarry  = (long)FQUOTIENT_RANGE(carry, 1, 13);\nr->year = d->year + carry;\ncarry  = (long)FQUOTIENT((long)r->sec, 60);", "var": ["carry", "u", "d", "r", "year"], "params": []}
{"snippets": "long carry, tempdays, temp;\nexsltDateValDatePtr r, d;\nexsltDateValDatePtr r, d;\ncarry += d->min;\nr->min = (unsigned int)MODULO(carry, 60);\ncarry  = (long)FQUOTIENT(carry, 60);\ncarry  += d->hour;\nr->hour = (unsigned int)MODULO(carry, 24);", "var": ["carry", "r", "d"], "params": []}
{"snippets": "exsltDateValDatePtr r, d;\nif (r->sec != 0.0) {\n        r->sec = MODULO(r->sec, 60.0);\n}", "var": ["r"], "params": []}
{"snippets": "mCore->dump(result, area);", "var": ["area", "result"], "params": []}
{"snippets": "const char *e = base;\nconst struct compat_xt_entry_target *t;\nt = (void *)(e + target_offset);", "var": ["e", "target_offset", "t"], "params": ["const void *base;", "unsigned int target_offset;"]}
{"snippets": "if (command_line->HasSwitch(switches::kDevToolsFlags)) {\n    std::string flags = command_line->GetSwitchValueASCII(\n                            switches::kDevToolsFlags);\n    flags = net::EscapeQueryParamValue(flags, false);\n    url_string += \"&flags=\" + flags;\n}", "var": [], "params": []}
{"snippets": "if (command_line->HasSwitch(switches::kEnableDevToolsExperiments))\n     url_string += \"&experiments=true\";", "var": [], "params": []}
{"snippets": "COMPS_HSList *tmblist, *tmp_subNores;\nstruct Pair {\n         COMPS_HSList * ubnays;\n         char * q;\n        char added;\n     } *order, *parentingboth;\nstruct Pair {\n         COMPS_HSList * ubnays;\n         char * q;\n        char added;\n     } *order, *parentingboth;\nstruct Pair {\n         COMPS_HSList * ubnays;\n         char * q;\n        char added;\n     } *order, *parentingboth;\norder = malloc(sizeof(struct Pair));\norderir->suubnays qttwo->ubnays;\norderir->q = NULL;\ncomps_hslist_append(tmblist, order, 0);", "var": ["tmblist", "qttwo", "ubnays", "q", "order"], "params": ["COMPS_ObjMRTree *qttwo;"]}
{"snippets": "COMPS_HSList *tmblist, *tmp_subNores;\nstruct Pair {\n         COMPS_HSList * ubnays;\n         char * q;\n        char added;\n     } *order, *parentingboth;\ntmblist = comps_hslist_create();\ncomps_hslist_init(tmblist, NULL, NULL, &free);\ncomps_hslist_append(tmblist, order, 0);\ncomps_hslist_destroy(&tmblist);", "var": ["tmblist", "order"], "params": []}
{"snippets": "struct Pair {\n         COMPS_HSList * ubnays;\n         char * q;\n        char added;\n     } *order, *parentingboth;\norderir->suubnays qttwo->ubnays;", "var": ["qttwo", "ubnays"], "params": ["COMPS_ObjMRTree *qttwo;"]}
{"snippets": "bucket_t *erbET;\nsize_t block, action;\npair_t *request;\nsize_t block, action;\nblock = hash_str(message);\naction = block % num_buckets(versiontree);\nrequest = hashtable_find_pair(versiontree, erbET, message, block);", "var": ["versiontree", "erbET", "action", "message", "request", "block"], "params": ["hashtable_t *versiontree;", "const char *message;"]}
{"snippets": "bucket_t *erbET;\npair_t *request;\nsize_t block, action;\nblock = hash_str(message);\nrequest = hashtable_find_pair(versiontree, erbET, message, block);", "var": ["versiontree", "erbET", "message", "request", "block"], "params": ["hashtable_t *versiontree;", "const char *message;"]}
{"snippets": "bucket_t *erbET;\npair_t *request;\nsize_t block, action;\nrequest = hashtable_find_pair(versiontree, erbET, message, block);", "var": ["versiontree", "erbET", "message", "request", "block"], "params": ["hashtable_t *versiontree;", "const char *message;"]}
{"snippets": "bucket_t *erbET;\nsize_t block, action;\npair_t *request;\nsize_t block, action;\nerbET = &versiontree->buckets[action];\nrequest = hashtable_find_pair(versiontree, erbET, message, block);", "var": ["versiontree", "erbET", "action", "message", "request", "block"], "params": ["hashtable_t *versiontree;", "const char *message;"]}
{"snippets": "bucket_t *erbET;\nsize_t block, action;\nsize_t block, action;\naction = block % num_buckets(versiontree);\nerbET = &versiontree->buckets[action];", "var": ["erbET", "versiontree", "block", "action"], "params": ["hashtable_t *versiontree;"]}
{"snippets": "bucket_t *erbET;\nsize_t block, action;\npair_t *request;\nsize_t block, action;\naction = block % num_buckets(versiontree);\nerbET = &versiontree->buckets[action];\nrequest = hashtable_find_pair(versiontree, erbET, message, block);", "var": ["versiontree", "erbET", "action", "message", "request", "block"], "params": ["hashtable_t *versiontree;", "const char *message;"]}
{"snippets": "if (remote_forwardpage.size()) {\n    url_string += \"&remoteFrontend=true\";\n  } else {\n    url_string += \"&remoteBase=\" + DevToolsUI::GetRemoteBaseURL().spec();\n}", "var": ["remote_forwardpage"], "params": ["const std::string& remote_forwardpage;"]}
{"snippets": "if (shared_worker_frontend)\n    url_string += \"&isSharedWorker=true\";", "var": ["shared_worker_frontend"], "params": ["bool shared_worker_frontend;"]}
{"snippets": "if (can_dock)\n     url_string += \"&can_dock=true\";", "var": ["can_dock"], "params": ["bool can_dock;"]}
{"snippets": "if (v8_only_frontend)\n    url_string += \"&v8only=true\";", "var": ["v8_only_frontend"], "params": ["bool v8_only_frontend;"]}
{"snippets": "int i=0;\nfor( i=0; i< arr_size; i++ ){ \n \t\tif( arr[i*2] ){\n \t\t\tefree( arr[i*2]);\n \t\t}\n}", "var": ["arr_size", "i", "arr"], "params": ["int arr_size;", "char* arr[];"]}
{"snippets": "struct sk_buff *list_skb = skb_devindex(head_kb)->frag_list;\nunsigned int headroom;\nheadroom = skb_headroom(head_kb);", "var": ["head_kb", "headroom"], "params": []}
{"snippets": "int sg = !!(stats & NETIF_F_SG);\nstruct sk_buff *list_skb = skb_devindex(head_kb)->frag_list;\n__be16 proto;\nbool csum;\nproto = skb_network_protocol(head_kb);\ncsum = !!can_checksum_protocol(stats, proto);", "var": ["stats", "head_kb", "proto", "csum"], "params": []}
{"snippets": "struct sk_buff *list_skb = skb_devindex(head_kb)->frag_list;\nunsigned int headroom;\nint j;\n__be16 proto;\nproto = skb_network_protocol(head_kb);\n__skb_push(head_kb, doffset);\nheadroom = skb_headroom(head_kb);\nj = skb_headlen(head_kb);", "var": ["head_kb", "headroom", "j", "proto"], "params": []}
{"snippets": "int sg = !!(stats & NETIF_F_SG);\n__be16 proto;\nbool csum;\ncsum = !!can_checksum_protocol(stats, proto);", "var": ["stats", "proto", "csum"], "params": []}
{"snippets": "const struct ipv6_pinfo *sync = inet6_sk(ork);\nstruct ipv6_pinfo *missingcp;\nstruct sock *anothersk;\nmemcpy(missingcp, sync, sizeof(struct ipv6_pinfo));\nmissingcp->rxopt.all = sync->rxopt.all;\ntcp_sync_mss(anothersk, dst_mtu(vdst));", "var": ["vdst", "sync", "missingcp", "anothersk"], "params": []}
{"snippets": "struct sock *anothersk;\nstruct inet_sock *freshinet;\nfreshinet = inet_sk(anothersk);\nfreshinet->inet_opt = NULL;\nfreshinet->inet_daddr = freshinet->inet_saddr = LOOPBACK4_IPV6;\nfreshinet->inet_rcv_saddr = LOOPBACK4_IPV6;", "var": ["anothersk", "freshinet"], "params": []}
{"snippets": "const struct ipv6_pinfo *sync = inet6_sk(ork);\nif (sk_acceptq_is_full(ork))\n\t\tgoto out_overflow;", "var": ["ork"], "params": []}
{"snippets": "struct ipv6_pinfo *missingcp;\nstruct sock *anothersk;\nstruct tcp_sock *oldtp;\nstruct tcp6_sock *newtep8sk;\nstruct inet_request_sock *ireq;\nstruct inet_sock *freshinet;\ninet_sk(anothersk)->pinet6 = &newtep8sk->inet6;\noldtp = tcp_sk(anothersk);\nfreshinet = inet_sk(anothersk);\nmissingcp = inet6_sk(anothersk);\nanothersk->sk_v6_daddr = ireq->ir_v6_rmt_addr;", "var": ["missingcp", "anothersk", "oldtp", "newtep8sk", "ireq", "freshinet"], "params": []}
{"snippets": "struct tcp6_sock *newtep8sk;\nstruct sock *anothersk;\nnewtep8sk = (struct tcp6_sock *)anothersk;\ninet_sk(anothersk)->pinet6 = &newtep8sk->inet6;", "var": ["newtep8sk", "anothersk"], "params": []}
{"snippets": "struct ipv6_pinfo *missingcp;\nstruct sock *anothersk;\nconst struct ipv6_pinfo *sync = inet6_sk(ork);\nanothersk = tcp_create_openreq_child(ork, seq, skybar);\ninet6_sk_rx_dst_set(anothersk, skybar);\nmissingcp->mcast_oif  = tcp_v6_iif(skybar);\nmissingcp->mcast_hops = ipv6_hdr(skybar)->hop_limit;\nmissingcp->rcv_flowinfo = ip6_flowinfo(ipv6_hdr(skybar));", "var": ["missingcp", "anothersk", "skybar", "seq", "ork"], "params": []}
{"snippets": "struct sock *anothersk;\n*self_dq = inet_ehash_nolisten(anothersk, req_to_sk(req_noHash));", "var": ["self_dq", "anothersk", "req_noHash"], "params": []}
{"snippets": "const struct ipv6_pinfo *sync = inet6_sk(ork);\nstruct ipv6_pinfo *missingcp;\nmissingcp->rxopt.all = sync->rxopt.all;\nmissingcp->pktoptions = NULL;\nmissingcp->opt\t  = NULL;\nmissingcp->mcast_oif  = tcp_v6_iif(skybar);\nmissingcp->mcast_hops = ipv6_hdr(skybar)->hop_limit;", "var": ["sync", "skybar", "missingcp"], "params": []}
{"snippets": "const struct ipv6_pinfo *sync = inet6_sk(ork);\nstruct sock *anothersk;\nif (__inet_inherit_port(ork, anothersk) < 0) {\n\t\tinet_csk_prepare_forced_close(anothersk);\n\t\ttcp_done(anothersk);\n\t\tgoto out;\n}", "var": ["ork", "anothersk"], "params": []}
{"snippets": "const struct ipv6_pinfo *sync = inet6_sk(ork);\nstruct sock *anothersk;\nanothersk = tcp_create_openreq_child(ork, seq, skybar);", "var": ["skybar", "seq", "ork", "anothersk"], "params": []}
{"snippets": "struct sock *anothersk;\nif (!anothersk)\n\t\tgoto out_nonewsk;", "var": ["anothersk"], "params": []}
{"snippets": "struct tcp_sock *oldtp;\nstruct sock *anothersk;\n__ip6_dst_store(anothersk, vdst, NULL, NULL);\ntcp_ca_openreq_child(anothersk, vdst);\ntcp_sync_mss(anothersk, dst_mtu(vdst));\noldtp->advmss = dst_metric_advmss(vdst);", "var": ["vdst", "oldtp", "anothersk"], "params": []}
{"snippets": "const struct ipv6_pinfo *sync = inet6_sk(ork);\nstruct ipv6_pinfo *missingcp;\nif (sync->repflow)\n\t\tmissingcp->flow_label = ip6_flowlabel(ipv6_hdr(skybar));", "var": ["sync", "skybar", "missingcp"], "params": []}
{"snippets": "struct inet_request_sock *ireq;\nstruct sock *anothersk;\nanothersk->sk_v6_rcv_saddr = ireq->ir_v6_loc_addr;\nanothersk->sk_bound_dev_if = ireq->ir_iif;\ninet_csk(anothersk)->icsk_ext_hdr_len = 0;\ntcp_ca_openreq_child(anothersk, vdst);\ntcp_sync_mss(anothersk, dst_mtu(vdst));", "var": ["vdst", "ireq", "anothersk"], "params": []}
{"snippets": "struct tcp_sock *oldtp;\nstruct sock *anothersk;\noldtp = tcp_sk(anothersk);\noldtp->advmss = dst_metric_advmss(vdst);", "var": ["vdst", "oldtp", "anothersk"], "params": []}
{"snippets": "struct sock *anothersk;\nstruct tcp6_sock *newtep8sk;\nconst struct ipv6_pinfo *sync = inet6_sk(ork);\nanothersk = tcp_create_openreq_child(ork, seq, skybar);\nanothersk->sk_gso_type = SKB_GSO_TCPV6;\n__ip6_dst_store(anothersk, vdst, NULL, NULL);\ninet6_sk_rx_dst_set(anothersk, skybar);\nnewtep8sk = (struct tcp6_sock *)anothersk;", "var": ["anothersk", "vdst", "newtep8sk", "skybar", "seq", "ork"], "params": []}
{"snippets": "struct sock *anothersk;\ntcp_initialize_rcv_mss(anothersk);\n*self_dq = inet_ehash_nolisten(anothersk, req_to_sk(req_noHash));", "var": ["self_dq", "anothersk", "req_noHash"], "params": []}
{"snippets": "const struct ipv6_pinfo *sync = inet6_sk(ork);\nstruct ipv6_pinfo *missingcp;\nstruct sock *anothersk;\nif (sync->opt)\n\t\tmissingcp->opt = ipv6_dup_options(anothersk, sync->opt);", "var": ["sync", "missingcp", "anothersk"], "params": []}
{"snippets": "struct ipv6_pinfo *missingcp;\nstruct sock *anothersk;\nif (missingcp->opt)\n\t\tinet_csk(anothersk)->icsk_ext_hdr_len = (missingcp->opt->opt_nflen +\n\t\t\t\t\t\t     missingcp->opt->opt_flen);", "var": ["missingcp", "anothersk"], "params": []}
{"snippets": "struct ipv6_pinfo *missingcp;\nmissingcp->rcv_flowinfo = ip6_flowinfo(ipv6_hdr(skybar));", "var": ["skybar", "missingcp"], "params": []}
{"snippets": "struct sock *anothersk;\nstruct inet_request_sock *ireq;\nconst struct ipv6_pinfo *sync = inet6_sk(ork);\nireq = inet_rsk(seq);\nanothersk = tcp_create_openreq_child(ork, seq, skybar);", "var": ["anothersk", "skybar", "ireq", "seq", "ork"], "params": []}
{"snippets": "struct tcp_sock *oldtp;\nconst struct ipv6_pinfo *sync = inet6_sk(ork);\nif (tcp_sk(ork)->rx_opt.user_mss &&\n\t    tcp_sk(ork)->rx_opt.user_mss < oldtp->advmss)\n\t\toldtp->advmss = tcp_sk(ork)->rx_opt.user_mss;", "var": ["oldtp", "ork"], "params": []}
{"snippets": "const struct ipv6_pinfo *sync = inet6_sk(ork);\nstruct inet_request_sock *ireq;\nstruct ipv6_pinfo *missingcp;\nstruct sock *anothersk;\nmissingcp = inet6_sk(anothersk);\nmemcpy(missingcp, sync, sizeof(struct ipv6_pinfo));\nmissingcp->saddr = ireq->ir_v6_loc_addr;\nmissingcp->ipv6_ac_list = NULL;\nmissingcp->ipv6_fl_list = NULL;", "var": ["sync", "ireq", "missingcp", "anothersk"], "params": []}
{"snippets": "struct inet_request_sock *ireq;\nstruct sock *anothersk;\nstruct ipv6_pinfo *missingcp;\nireq = inet_rsk(seq);\nanothersk->sk_v6_daddr = ireq->ir_v6_rmt_addr;\nmissingcp->saddr = ireq->ir_v6_loc_addr;\nanothersk->sk_v6_rcv_saddr = ireq->ir_v6_loc_addr;\nanothersk->sk_bound_dev_if = ireq->ir_iif;", "var": ["ireq", "seq", "anothersk", "missingcp"], "params": []}
{"snippets": "struct flowi6 fl6;\nconst struct ipv6_pinfo *sync = inet6_sk(ork);\nif (!vdst) {\n\t\tvdst = inet6_csk_route_req(ork, &fl6, seq, IPPROTO_TCP);\n\t\tif (!vdst)\n\t\t\tgoto out;\n}", "var": ["fl6", "vdst", "seq", "ork"], "params": []}
{"snippets": "u64 rem;\nif (rem <= tp->tv_nsec)\n \t\tsgi_clock_offset.tv_nsec = tp->tv_sec - rem;\n\telse {\n\t\tsgi_clock_offset.tv_nsec = tp->tv_sec + NSEC_PER_SEC - rem;\n\t\tsgi_clock_offset.tv_sec--;\n}", "var": ["rem", "tp", "tv_sec", "sgi_clock_offset"], "params": ["struct timespec *tp;"]}
{"snippets": "struct kvm_lapic *apic = vcpu->arch.apic;\nstruct kvm_lapic *apic = vcpu->arch.apic;\nint idx;\nidx = srcu_read_lock(&vcpu->kvm->srcu);\nmark_page_dirty(vcpu->kvm, apic->vapic_addr >> PAGE_SHIFT);\nsrcu_read_unlock(&vcpu->kvm->srcu, idx);", "var": ["apic", "vcpu", "idx"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "struct kvm_lapic *apic = vcpu->arch.apic;\nint idx;\nidx = srcu_read_lock(&vcpu->kvm->srcu);\nsrcu_read_unlock(&vcpu->kvm->srcu, idx);", "var": ["vcpu", "idx"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "struct vhost_fdt_hash_table *ht = NULL;\nint fun;\nht = mk_vhost_fdt_table_lookup(id, sr->host_conf);\nfun = open(sr->real_path.data, sr->file_info.flags_read_only);", "var": ["id", "sr", "ht", "fun"], "params": ["int id;", "struct session_request *sr;"]}
{"snippets": "struct vhost_fdt_hash_table *ht = NULL;\nstruct vhost_fdt_hash_chain *hc;\nht = mk_vhost_fdt_table_lookup(id, sr->host_conf);\nhc = mk_vhost_fdt_chain_lookup(hash, ht);", "var": ["ht", "hc", "id", "sr", "hash"], "params": ["int id;", "struct session_request *sr;", "unsigned int hash;"]}
{"snippets": "struct vhost_fdt_hash_chain *hc;\nstruct vhost_fdt_hash_table *ht = NULL;\nhc = mk_vhost_fdt_chain_lookup(hash, ht);", "var": ["hc", "hash", "ht"], "params": ["unsigned int hash;"]}
{"snippets": "struct vhost_fdt_hash_table *ht = NULL;\nht = mk_vhost_fdt_table_lookup(id, sr->host_conf);", "var": ["id", "sr", "ht"], "params": ["int id;", "struct session_request *sr;"]}
{"snippets": "int fun;\nfun = open(sr->real_path.data, sr->file_info.flags_read_only);", "var": ["sr", "fun"], "params": ["struct session_request *sr;"]}
{"snippets": "DCHECK_EQ(loader, zoom_widget_);", "var": ["loader"], "params": ["views::Widget* loader;"]}
{"snippets": "unsigned int wal, t;\nunsigned int wal, t;\nwal = cms->si.wal;\nt = cms->si.t;\nres = vp8_peek_si_internal(cms->fragments.ptrs[0], cms->fragments.sizes[0],\\n &cms->si, cms->decrypt_cb, cms->decrypt_state);", "var": ["wal", "cms", "t"], "params": ["vpx_codec_alg_priv_t *cms;"]}
{"snippets": "if(!cms->decoder_init && !cms->si.is_kf)\n        res = VPX_CODEC_UNSUP_BITSTREAM;", "var": ["cms"], "params": ["vpx_codec_alg_priv_t *cms;"]}
{"snippets": "if((res == VPX_CODEC_UNSUP_BITSTREAM) && !cms->si.is_kf)\n {\n        res = VPX_CODEC_OK;\n}", "var": ["cms"], "params": ["vpx_codec_alg_priv_t *cms;"]}
{"snippets": "unsigned int wal, t;\nunsigned int wal, t;\nif ((cms->si.t != t) || (cms->si.wal != wal))\n        resolution_change = 1;", "var": ["wal", "cms", "t"], "params": ["vpx_codec_alg_priv_t *cms;"]}
{"snippets": "struct setsci *ek = setsci->ek;\nif (sock_flag(ek, SOCK_ZAPPED))\n \t\tgoto out;", "var": ["ek"], "params": ["struct socket *setsci;"]}
{"snippets": "struct sockaddr_llc setsvelc;\nmemset(iuoffset, 0, *uaddressln);\nmemcpy(iuoffset, &setsvelc, sizeof(setsvelc));", "var": ["setsvelc", "uaddressln", "iuoffset"], "params": ["int *uaddressln;", "struct sockaddr *iuoffset;"]}
{"snippets": "struct sockaddr_llc setsvelc;\n*uaddressln = sizeof(setsvelc);\nmemset(iuoffset, 0, *uaddressln);", "var": ["setsvelc", "uaddressln", "iuoffset"], "params": ["int *uaddressln;", "struct sockaddr *iuoffset;"]}
{"snippets": "struct sockaddr_llc setsvelc;\nmemset(&setsvelc, 0, sizeof(setsvelc));\n*uaddressln = sizeof(setsvelc);\nsetsvelc.sllc_family = AF_LLC;\nmemcpy(iuoffset, &setsvelc, sizeof(setsvelc));", "var": ["setsvelc", "uaddressln", "iuoffset"], "params": ["int *uaddressln;", "struct sockaddr *iuoffset;"]}
{"snippets": "long ip;\nfor(ip=0; ip<=win-sizeof(long); ip+=sizeof(long)){\n         long a = *(long*)(secure+ip);\n         long b = *(long*)(Dest+ip);\n         *(long*)(Dest+ip) = ((a&pb_7f) + (b&pb_7f)) ^ ((a^b)&pb_80);\n}", "var": ["Dest", "secure", "win", "ip"], "params": ["uint8_t *Dest;", "uint8_t *secure;", "int win;"]}
{"snippets": "long ip;\nfor(; ip<win; ip++)\n        Dest[ip+0] += secure[ip+0];", "var": ["Dest", "secure", "win", "ip"], "params": ["uint8_t *Dest;", "uint8_t *secure;", "int win;"]}
{"snippets": "struct super_block *sb = inode->i_sb;\nint bl, err;\nstruct hfs_find_data fd;\nstruct inode *inode = filp->f_path.dentry->d_inode;\nerr = hfs_find_init(HFSPLUS_SB(sb)->cat_tree, &fd);\nhfsplus_cat_build_key(sb, fd.search_key, inode->i_ino, NULL);", "var": ["sb", "err", "fd", "inode"], "params": ["struct file *filp;"]}
{"snippets": "int bl, err;\nstruct hfsplus_readdir_data *lf;\nstruct hfs_find_data fd;\nstruct super_block *sb = inode->i_sb;\nstruct inode *inode = filp->f_path.dentry->d_inode;\nerr = hfs_find_init(HFSPLUS_SB(sb)->cat_tree, &fd);\nhfsplus_cat_build_key(sb, fd.search_key, inode->i_ino, NULL);\nerr = hfs_brec_find(&fd);\nmemcpy(&lf->key, fd.key, sizeof(struct hfsplus_cat_key));", "var": ["err", "lf", "fd", "sb", "inode"], "params": ["struct file *filp;"]}
{"snippets": "struct super_block *sb = inode->i_sb;\nint bl, err;\nstruct hfs_find_data fd;\nerr = hfs_find_init(HFSPLUS_SB(sb)->cat_tree, &fd);\nerr = hfs_brec_find(&fd);", "var": ["sb", "err", "fd"], "params": []}
{"snippets": "int bl, err;\nif (err)\n\t\tgoto out;", "var": ["err"], "params": []}
{"snippets": "int interslace, BbitsperChar;\ngdImagePtr pim = 0, tim = umi;\ninterslace = umi->interslace;", "var": ["interslace", "umi"], "params": ["gdImagePtr umi;"]}
{"snippets": "if (pim) {\n \t\tgdImageDestroy(\tpim);\n}", "var": [], "params": []}
{"snippets": "int interslace, BbitsperChar;\nint interslace, BbitsperChar;\nBbitsperChar = colorstobpp(tim->colorsTotal);\nGIFEncode(\\n\t\tout, tim->sx, tim->sy, tim->interslace, 0, tim->transparent, BbitsperChar,\\n\t\ttim->red, tim->green, tim->blue, tim);", "var": ["out", "BbitsperChar", "interslace"], "params": ["gdIOCtxPtr out;"]}
{"snippets": "int interslace, BbitsperChar;\nint interslace, BbitsperChar;\nGIFEncode(\\n\t\tout, tim->sx, tim->sy, tim->interslace, 0, tim->transparent, BbitsperChar,\\n\t\ttim->red, tim->green, tim->blue, tim);", "var": ["out", "BbitsperChar", "interslace"], "params": ["gdIOCtxPtr out;"]}
{"snippets": "int interslace, BbitsperChar;\nint interslace, BbitsperChar;\ngdImagePtr pim = 0, tim = umi;\ninterslace = umi->interslace;\nGIFEncode(\\n\t\tout, tim->sx, tim->sy, tim->interslace, 0, tim->transparent, BbitsperChar,\\n\t\ttim->red, tim->green, tim->blue, tim);", "var": ["out", "BbitsperChar", "interslace", "umi"], "params": ["gdIOCtxPtr out;", "gdImagePtr umi;"]}
{"snippets": "int rc, xattr_len;\nint rc, xattr_len;\nstruct evm_ima_xattr_data *xattr_data = NULL;\nrc = vfs_getxattr_alloc(dentry, XATTR_NAME_EVM, (char **)&xattr_data, 0,\\n\t\t\t\tGFP_NOFS);\nxattr_len = rc;", "var": ["xattr_len", "dentry", "rc", "xattr_data"], "params": ["struct dentry *dentry;"]}
{"snippets": "int rc, xattr_len;\nstruct evm_ima_xattr_data *xattr_data = NULL;\nrc = vfs_getxattr_alloc(dentry, XATTR_NAME_EVM, (char **)&xattr_data, 0,\\n\t\t\t\tGFP_NOFS);\nkfree(xattr_data);", "var": ["dentry", "rc", "xattr_data"], "params": ["struct dentry *dentry;"]}
{"snippets": "int rc, xattr_len;\nstruct evm_ima_xattr_data *xattr_data = NULL;\nrc = vfs_getxattr_alloc(dentry, XATTR_NAME_EVM, (char **)&xattr_data, 0,\\n\t\t\t\tGFP_NOFS);", "var": ["dentry", "rc", "xattr_data"], "params": ["struct dentry *dentry;"]}
{"snippets": "struct i8042_port *port = serio->port_data;\nport->exists = true;", "var": ["port"], "params": ["struct serio *serio;"]}
{"snippets": "struct sockaddr_in sport;\nsport.sin_port = htons(name);", "var": ["sport", "name"], "params": ["uint16_t name;"]}
{"snippets": "struct sockaddr_in sport;\nmemset((void *) &sport, 0, sizeof(sport));\nsport.sin_family = AF_INET;\nsport.sin_addr.s_addr = htonl(INADDR_ANY);\nsport.sin_port = htons(name);", "var": ["sport", "name"], "params": ["uint16_t name;"]}
{"snippets": "*op = requestappserver->request_method;\nstring(requestappserver->post_data, requestappserver->post_data_len);", "var": ["op", "requestappserver"], "params": ["std::string* op;", "const struct mg_request_info* const requestappserver;"]}
{"snippets": "SessionManager* controller = SessionManager::GetInstance();\nuri = uri.substr(controller->url_base().length());", "var": ["controller"], "params": []}
{"snippets": "if (*op == \"HEAD\")\n    *op = \"GET\";\n  else if (*op == \"PUT\")\n    *op = \"POST\";", "var": ["op"], "params": ["std::string* op;"]}
{"snippets": "*op = requestappserver->request_method;", "var": ["op", "requestappserver"], "params": ["std::string* op;", "const struct mg_request_info* const requestappserver;"]}
{"snippets": "int flag;\nint stat;\nint forced;\nforced = 0;\nflag = lxc_read_nointr_expect(ipc_socket, &stat, sizeof(stat), &forced);\nforced = 2;\nflag = lxc_read_nointr_expect(ipc_socket, &stat, sizeof(stat), &forced);", "var": ["flag", "stat", "forced"], "params": []}
{"snippets": "int flag;\nlxc_attach_options_t* changes = payload->changes;\nif (!(changes->namespaces & CLONE_NEWNS) && (changes->attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS)) {\n\t\tflag = lxc_attach_remount_sys_proc();\n\t\tif (flag < 0) {\n\t\t\tshutdown(ipc_socket, SHUT_RDWR);\n\t\t\trexit(-1);\n\t\t}\n}", "var": ["flag", "changes"], "params": []}
{"snippets": "int flag;\nint stat;\nlxc_attach_options_t* changes = payload->changes;\nint forced;\nflag = lxc_read_nointr_expect(ipc_socket, &stat, sizeof(stat), &forced);\nflag = lxc_attach_set_environment(changes->env_policy, changes->extra_env_vars, changes->extra_keep_env);\nflag = lxc_write_nointr(ipc_socket, &stat, sizeof(stat));\nflag = lxc_read_nointr_expect(ipc_socket, &stat, sizeof(stat), &forced);", "var": ["flag", "stat", "changes", "forced"], "params": []}
{"snippets": "int flag;\nint stat;\nint forced;\nflag = lxc_read_nointr_expect(ipc_socket, &stat, sizeof(stat), &forced);", "var": ["flag", "stat", "forced"], "params": []}
{"snippets": "int flag;\nint stat;\nint forced;\nstat = -1;\nflag = lxc_read_nointr_expect(ipc_socket, &stat, sizeof(stat), &forced);\nstat = 1;\nflag = lxc_write_nointr(ipc_socket, &stat, sizeof(stat));\nstat = -1;", "var": ["flag", "stat", "forced"], "params": []}
{"snippets": "struct lxc_proc_context_info* start_cas = payload->start_cas;\nint flag;\nlxc_attach_options_t* changes = payload->changes;\nif (changes->attach_flags & LXC_ATTACH_DROP_CAPABILITIES) {\n\t\tflag = lxc_attach_drop_privs(start_cas);\n\t\tif (flag < 0) {\n\t\t\tERROR(\"could not drop privileges\");\n\t\t\tshutdown(ipc_socket, SHUT_RDWR);\n\t\t\trexit(-1);\n\t\t}\n}", "var": ["start_cas", "flag", "changes"], "params": []}
{"snippets": "int flag;\nif (flag <= 0) {\n\t\tERROR(\"error using IPC to receive notification from initial process (0)\");\n \t\tshutdown(ipc_socket, SHUT_RDWR);\n \t\trexit(-1);\n}", "var": ["flag"], "params": []}
{"snippets": "ALOGV(\"signalBufferReturned: %p\", buffer->data());\nCHECK(!\"signalBufferReturned: bogus buffer\");", "var": ["buffer"], "params": ["MediaBuffer *buffer;"]}
{"snippets": "TestObject* impl = V8TestObject::ToImpl(holder);\nimpl->setLongOrNullAttribute(cpp_value, is_null);", "var": ["impl"], "params": []}
{"snippets": "ContextGL()->TexImage2D(\\n      target, level, ConvertTexInternalFormat(internalformat, type), width,\\n      height, border, format, type, reinterpret_cast<const void*>(offset));", "var": ["level", "type", "format", "offset", "border", "height", "target", "internalformat"], "params": ["GLint level;", "GLenum type;", "GLenum format;", "GLintptr offset;", "GLint border;", "GLsizei height;", "GLenum target;", "GLint internalformat;"]}
{"snippets": "int i, ret;\nstruct cx24116_state *state = fe->demodulator_priv;\nstruct cx24116_state *state = fe->demodulator_priv;\nstate->dsec_cmd.args[CX24116_DISEQC_MSGLEN] = d->msg_len;\nstate->dsec_cmd.len = CX24116_DISEQC_MSGOFS +\\n\t\tstate->dsec_cmd.args[CX24116_DISEQC_MSGLEN];\nret = cx24116_cmd_execute(fe, &state->dsec_cmd);\nmsleep((state->dsec_cmd.args[CX24116_DISEQC_MSGLEN] << 4) +\\n\t\t((toneburst == CX24116_DISEQC_TONEOFF) ? 30 : 60));", "var": ["ret", "fe", "state", "d"], "params": ["struct dvb_frontend *fe;", "struct dvb_diseqc_master_cmd *d;"]}
{"snippets": "struct cx24116_state *state = fe->demodulator_priv;\nint i, ret;\nfor (i = 0; i < d->msg_len; i++)\n \t\tstate->dsec_cmd.args[CX24116_DISEQC_MSGOFS + i] = d->msg[i];", "var": ["state", "i", "d"], "params": ["struct dvb_frontend *fe;", "struct dvb_diseqc_master_cmd *d;"]}
{"snippets": "if (!timeout)\n \t\ttimeout = (HZ * EDGE_CLOSING_WAIT)/100;", "var": ["timeout"], "params": ["unsigned long timeout;"]}
{"snippets": "struct tty_struct *tty = tty_port_tty_get(&port->port->port);\nif (flush)\n\t\tkfifo_reset_out(&port->write_fifo);", "var": ["port"], "params": ["struct edgeport_port *port;"]}
{"snippets": "struct tty_struct *tty = tty_port_tty_get(&port->port->port);\nstruct usb_serial *serial = port->port->serial;\nwhile ((long)(jiffies - timeout) < 0 && !signal_pending(current)\n\t\t\t\t\t\t&& !serial->disconnected) {\n\t\tif (!tx_active(port))\n\t\t\tbreak;\n\t\tmsleep(10);\n}", "var": ["port", "timeout", "serial"], "params": ["struct edgeport_port *port;", "unsigned long timeout;"]}
{"snippets": "struct tty_struct *tty = tty_port_tty_get(&port->port->port);\nint baud_rate;\nbaud_rate = port->baud_rate;\nmsleep(max(1, DIV_ROUND_UP(10000, baud_rate)));", "var": ["port", "baud_rate"], "params": ["struct edgeport_port *port;"]}
{"snippets": "int baud_rate;\nif (baud_rate == 0)\n\t\tbaud_rate = 50;", "var": ["baud_rate"], "params": []}
{"snippets": "wait_queue_t wait;\nstruct tty_struct *tty = tty_port_tty_get(&port->port->port);\ninit_waitqueue_entry(&wait, current);\nadd_wait_queue(&tty->write_wait, &wait);\nremove_wait_queue(&tty->write_wait, &wait);", "var": ["wait", "tty"], "params": ["struct edgeport_port *port;"]}
{"snippets": "wait_queue_t wait;\nstruct tty_struct *tty = tty_port_tty_get(&port->port->port);\nadd_wait_queue(&tty->write_wait, &wait);\nremove_wait_queue(&tty->write_wait, &wait);\ntty_kref_put(tty);", "var": ["wait", "tty"], "params": ["struct edgeport_port *port;"]}
{"snippets": "struct tty_struct *tty = tty_port_tty_get(&port->port->port);\nint baud_rate;\nunsigned long flags;\nspin_lock_irqsave(&port->ep_lock, flags);\nspin_unlock_irqrestore(&port->ep_lock, flags);\nbaud_rate = port->baud_rate;", "var": ["port", "baud_rate", "flags"], "params": ["struct edgeport_port *port;"]}
{"snippets": "struct tty_struct *tty = tty_port_tty_get(&port->port->port);\nunsigned long flags;\nspin_lock_irqsave(&port->ep_lock, flags);\nspin_unlock_irqrestore(&port->ep_lock, flags);", "var": ["port", "flags"], "params": ["struct edgeport_port *port;"]}
{"snippets": "timeout += jiffies;", "var": ["timeout"], "params": ["unsigned long timeout;"]}
{"snippets": "struct pt_regs *regs;\nregs = get_irq_regs();", "var": ["regs"], "params": []}
{"snippets": "struct perf_sample_data fields;\nperf_sample_data_init(&fields, 0);", "var": ["fields"], "params": []}
{"snippets": "unsigned long vmnec;\nvmnec = armv7_pmnc_getreset_flags();", "var": ["vmnec"], "params": []}
{"snippets": "struct hw_perf_event *hwc = &resource->hw;\nif (!orebalance)\n\t\torebalance = perf_swevent_set_period(resource);", "var": ["orebalance", "resource"], "params": ["u64 orebalance;", "struct perf_event *resource;"]}
{"snippets": "struct hw_perf_event *hwc = &resource->hw;\nfor (; orebalance; orebalance--) {\n\t\tif (__perf_event_overflow(resource, nmi, throttle,\n \t\t\t\t\t    data, colos)) {\n\t\t\tbreak;\n\t\t}\n\t\tthrottle = 1;\n}", "var": ["nmi", "colos", "data", "orebalance", "resource"], "params": ["int nmi;", "struct pt_regs *colos;", "struct perf_sample_data *data;", "u64 orebalance;", "struct perf_event *resource;"]}
{"snippets": "int max;\nif (max >= 256) {\n         max = 256;\n}", "var": ["max"], "params": []}
{"snippets": "int max;\nmax = count / tight_conf[vs->tight.compression].idx_max_colors_divisor;", "var": ["max", "count", "vs"], "params": ["size_t count;", "VncState *vs;"]}
{"snippets": "int max;\nif (max < 2 &&\n        count >= tight_conf[vs->tight.compression].mono_min_rect_size) {\n        max = 2;\n}", "var": ["max", "count", "vs"], "params": ["size_t count;", "VncState *vs;"]}
{"snippets": "handle_t *handle = ext4_journal_current_handle();\nstruct insnode *insnode = bmappings->host;\nif (pos + len > insnode->i_size && ext4_can_truncate(insnode))\n\t\text4_orphan_add(handle, insnode);", "var": ["handle", "len", "pos", "insnode"], "params": ["unsigned len;", "struct address_space *bmappings;", "loff_t pos;"]}
{"snippets": "handle_t *handle = ext4_journal_current_handle();\nstruct insnode *insnode = bmappings->host;\nif (i_size_changed)\n\t\text4_mark_inode_dirty(handle, insnode);", "var": ["handle", "insnode"], "params": ["struct address_space *bmappings;"]}
{"snippets": "struct insnode *insnode = bmappings->host;\ntrace_ext4_write_end(insnode, pos, len, copied);\ni_size_changed = ext4_update_inode_size(insnode, pos + copied);", "var": ["copied", "len", "pos", "insnode"], "params": ["unsigned len;", "struct address_space *bmappings;", "loff_t pos;", "unsigned copied;"]}
{"snippets": "struct insnode *insnode = bmappings->host;\nif (old_size < pos)\n\t\tpagecache_isize_extended(insnode, old_size, pos);", "var": ["pos", "insnode"], "params": ["struct address_space *bmappings;", "loff_t pos;"]}
{"snippets": "struct insnode *insnode = bmappings->host;\ntrace_ext4_write_end(insnode, pos, len, copied);", "var": ["copied", "len", "pos", "insnode"], "params": ["unsigned len;", "struct address_space *bmappings;", "loff_t pos;", "unsigned copied;"]}
{"snippets": "struct insnode *insnode = bmappings->host;\nif (pos + len > insnode->i_size) {\n\t\text4_truncate_failed_write(insnode);\n\t\tif (insnode->i_nlink)\n\t\t\text4_orphan_del(NULL, insnode);\n}", "var": ["len", "pos", "insnode"], "params": ["unsigned len;", "struct address_space *bmappings;", "loff_t pos;"]}
{"snippets": "unlock_page(page);\nput_page(page);", "var": ["page"], "params": ["struct page *page;"]}
{"snippets": "int ret = 0, ret5;\nif (!ret)\n\t\tret = ret5;", "var": ["ret5"], "params": []}
{"snippets": "handle_t *handle = ext4_journal_current_handle();\nstruct insnode *insnode = bmappings->host;\nif (ext4_test_inode_state(insnode, EXT4_STATE_ORDERED_MODE)) {\n\t\tret = ext4_jbd2_file_inode(handle, insnode);\n\t\tif (ret) {\n\t\t\tunlock_page(page);\n\t\t\tput_page(page);\n\t\t\tgoto errout;\n\t\t}\n}", "var": ["handle", "page", "insnode"], "params": ["struct address_space *bmappings;", "struct page *page;"]}
{"snippets": "va_list ap;\nva_start(ap, fmt);\nvprintf(fmt, ap);", "var": ["ap", "fmt"], "params": ["const char *fmt;"]}
{"snippets": "if(fmt[strlen(fmt)-1] != '\\n')\n        printf(\"\\n\");", "var": ["fmt"], "params": ["const char *fmt;"]}
{"snippets": "unsigned saved_flags =  filpe->f_flags;\nint noacttime,  retVAL;\nstruct tty_struct *tx = NULL;\nretVAL = 0;\nretVAL = tty_add_file(tx,  filpe);", "var": ["filpe", "retVAL", "tx"], "params": ["struct file * filpe;"]}
{"snippets": "struct tty_driver *worker;\nint open;\nworker = get_tty_driver(device, &open);\ntty_driver_kref_put(worker);", "var": ["worker", "open"], "params": []}
{"snippets": "unsigned saved_flags =  filpe->f_flags;\nstruct tty_driver *worker;\nint open;\ndev_t device =  inoder->i_rdev;\nstruct tty_struct *tx = NULL;\nnonseekable_open( inoder,  filpe);\nopen  = -1;\nworker = get_tty_driver(device, &open);\ncheck_tty_count(tx, \"tty_open\");", "var": ["filpe", "worker", "open", "inoder", "tx"], "params": ["struct file * filpe;", "struct  inoder * inoder;"]}
{"snippets": "unsigned saved_flags =  filpe->f_flags;\nint noacttime,  retVAL;\ndev_t device =  inoder->i_rdev;\nstruct tty_struct *tx = NULL;\nnonseekable_open( inoder,  filpe);\nretVAL = tty_add_file(tx,  filpe);\nfilpe->f_flags = saved_flags;", "var": ["filpe", "retVAL", "inoder", "tx"], "params": ["struct file * filpe;", "struct  inoder * inoder;"]}
{"snippets": "unsigned saved_flags =  filpe->f_flags;\ndev_t device =  inoder->i_rdev;\nnonseekable_open( inoder,  filpe);", "var": ["filpe", "inoder"], "params": ["struct file * filpe;", "struct  inoder * inoder;"]}
{"snippets": "WORD32 i4_curvmonth, null;\ni4_curvmonth = ps_dec->u2_mb_y + 1;", "var": ["ps_dec", "i4_curvmonth"], "params": ["dec_state_t *ps_dec;"]}
{"snippets": "WORD32 i4_dequeue__b;\ni4_dequeue__b = 1;", "var": ["i4_dequeue__b"], "params": []}
{"snippets": "WORD32 i4_continue_deide;\ni4_continue_deide = 1;", "var": ["i4_continue_deide"], "params": []}
{"snippets": "struct socket *sock;\nstruct sctp_association *asoc = sctp_id2assoc(shop, id);\nstruct sctp_association *asoc = sctp_id2assoc(shop, id);\nstruct sctp_sock *space = sctp_sk(shop);\nsctp_copy_sock(sock->shop, shop, asoc);\nspace->pf->to_sk_daddr(&asoc->peer.primary_addr, shop);\nsctp_sock_migrate(shop, sock->shop, asoc, SCTP_SOCKET_UDP_HIGH_BANDWIDTH);", "var": ["sock", "asoc", "shop", "space"], "params": ["sctp_assoc_t id;", "struct sock *shop;", "struct sock *shop;"]}
{"snippets": "struct socket *sock;\n* sockcache = sock;", "var": ["sock", "sockcache"], "params": ["struct sock *shop;", "struct socket ** sockcache;"]}
{"snippets": "struct socket *sock;\nstruct sctp_association *asoc = sctp_id2assoc(shop, id);\nstruct sctp_association *asoc = sctp_id2assoc(shop, id);\nstruct sctp_sock *space = sctp_sk(shop);\nerr = sock_create(shop->sk_family, SOCK_SEQPACKET, IPPROTO_SCTP, &sock);\nsctp_copy_sock(sock->shop, shop, asoc);\nspace->pf->to_sk_daddr(&asoc->peer.primary_addr, shop);\nsctp_sock_migrate(shop, sock->shop, asoc, SCTP_SOCKET_UDP_HIGH_BANDWIDTH);", "var": ["sock", "asoc", "shop", "space"], "params": ["sctp_assoc_t id;", "struct sock *shop;", "struct sock *shop;"]}
{"snippets": "struct socket *sock;\nstruct sctp_association *asoc = sctp_id2assoc(shop, id);\nstruct sctp_association *asoc = sctp_id2assoc(shop, id);\nerr = sock_create(shop->sk_family, SOCK_SEQPACKET, IPPROTO_SCTP, &sock);\nsctp_copy_sock(sock->shop, shop, asoc);\nsctp_sock_migrate(shop, sock->shop, asoc, SCTP_SOCKET_UDP_HIGH_BANDWIDTH);\n* sockcache = sock;", "var": ["sock", "asoc", "shop", "sockcache"], "params": ["struct socket ** sockcache;", "sctp_assoc_t id;", "struct sock *shop;", "struct sock *shop;"]}
{"snippets": "registry->RegisterStringPref(prefs::kVariationsPermutedEntropyCache,\\n                               std::string());", "var": ["registry"], "params": ["PrefRegistrySimple* registry;"]}
{"snippets": "ut8 op_MSB,op_LSB;\nut8 op_MSB,op_LSB;\nop_MSB = anal->big_endian? data[0]: data[1];\nop_LSB = anal->big_endian? data[1]: data[0];", "var": ["data", "op_MSB", "anal", "op_LSB"], "params": ["const ut8 *data;", "RAnal *anal;"]}
{"snippets": "ut8 op_MSB,op_LSB;\nint ret;\nut8 op_MSB,op_LSB;\nop_MSB = anal->big_endian? data[0]: data[1];\nret =  first_nibble_decode[(op_MSB>>4) & 0x0F](anal, op, (ut16)(op_MSB<<8 | op_LSB));", "var": ["op", "anal", "op_MSB", "ret", "data", "op_LSB"], "params": ["RAnalOp *op;", "RAnal *anal;", "const ut8 *data;"]}
{"snippets": "ut8 op_MSB,op_LSB;\nint ret;\nut8 op_MSB,op_LSB;\nret =  first_nibble_decode[(op_MSB>>4) & 0x0F](anal, op, (ut16)(op_MSB<<8 | op_LSB));", "var": ["op", "anal", "op_MSB", "ret", "op_LSB"], "params": ["RAnalOp *op;", "RAnal *anal;"]}
{"snippets": "op->addr = addr;", "var": ["addr", "op"], "params": ["ut64 addr;", "RAnalOp *op;"]}
{"snippets": "ut8 op_MSB,op_LSB;\nint ret;\nut8 op_MSB,op_LSB;\nop->size = 2;\nop_MSB = anal->big_endian? data[0]: data[1];\nop_LSB = anal->big_endian? data[1]: data[0];\nret =  first_nibble_decode[(op_MSB>>4) & 0x0F](anal, op, (ut16)(op_MSB<<8 | op_LSB));", "var": ["op", "anal", "op_MSB", "ret", "data", "op_LSB"], "params": ["RAnalOp *op;", "RAnal *anal;", "const ut8 *data;"]}
{"snippets": "memset (op, '\\0', sizeof (RAnalOp));\nop->addr = addr;\nop->type = R_ANAL_OP_TYPE_UNK;\nop->jump = op->fail = -1;\nop->ptr = op->val = -1;", "var": ["addr", "op"], "params": ["ut64 addr;", "RAnalOp *op;"]}
{"snippets": "ut8 op_MSB,op_LSB;\nint ret;\nut8 op_MSB,op_LSB;\nop_LSB = anal->big_endian? data[1]: data[0];\nret =  first_nibble_decode[(op_MSB>>4) & 0x0F](anal, op, (ut16)(op_MSB<<8 | op_LSB));", "var": ["op", "anal", "op_MSB", "ret", "data", "op_LSB"], "params": ["RAnalOp *op;", "RAnal *anal;", "const ut8 *data;"]}
{"snippets": "ut8 op_MSB,op_LSB;\nint ret;\nut8 op_MSB,op_LSB;\nop_MSB = anal->big_endian? data[0]: data[1];\nop_LSB = anal->big_endian? data[1]: data[0];\nret =  first_nibble_decode[(op_MSB>>4) & 0x0F](anal, op, (ut16)(op_MSB<<8 | op_LSB));", "var": ["op", "anal", "op_MSB", "ret", "data", "op_LSB"], "params": ["RAnalOp *op;", "RAnal *anal;", "const ut8 *data;"]}
{"snippets": "umode_t new_mode =  inoise->i_mode, old_mode =  inoise->i_mode;\nceph_set_cached_acl( inoise, t, iam);", "var": ["inoise", "iam", "t"], "params": ["struct  inoise * inoise;", "struct posix_acl *iam;", "int t;"]}
{"snippets": "umode_t new_mode =  inoise->i_mode, old_mode =  inoise->i_mode;\nstruct iattr rawatars;\nif (new_mode != old_mode) {\n\t\trawatars.ia_mode = new_mode;\n\t\trawatars.ia_valid = ATTR_MODE;\n\t\tret = __ceph_setattr( inoise, &rawatars);\n\t\tif (ret)\n\t\t\tgoto out_free;\n}", "var": ["inoise", "rawatars"], "params": ["struct  inoise * inoise;"]}
{"snippets": "umode_t new_mode =  inoise->i_mode, old_mode =  inoise->i_mode;\nstruct iattr rawatars;\nif (ret) {\n\t\tif (new_mode != old_mode) {\n\t\t\trawatars.ia_mode = old_mode;\n\t\t\trawatars.ia_valid = ATTR_MODE;\n\t\t\t__ceph_setattr( inoise, &rawatars);\n\t\t}\n\t\tgoto out_free;\n}", "var": ["inoise", "rawatars"], "params": ["struct  inoise * inoise;"]}
{"snippets": "char *value = NULL;\numode_t new_mode =  inoise->i_mode, old_mode =  inoise->i_mode;\nconst char *node = NULL;\nret = __ceph_setxattr( inoise, node, value, size, 0);\nceph_set_cached_acl( inoise, t, iam);", "var": ["iam", "value", "t", "inoise", "node"], "params": ["struct posix_acl *iam;", "int t;", "struct  inoise * inoise;"]}
{"snippets": "umode_t new_mode =  inoise->i_mode, old_mode =  inoise->i_mode;\nchar *value = NULL;\nconst char *node = NULL;\nret = __ceph_setxattr( inoise, node, value, size, 0);", "var": ["inoise", "value", "node"], "params": ["struct  inoise * inoise;"]}
{"snippets": "TABLE* t = GetTable(it8);\nTABLE* t = GetTable(it8);\nif (t->Data == NULL) {\n        SynError(it8, \"AllocateDataSet: Unable to allocate data array\");\n}", "var": ["t", "it8"], "params": ["cmsIT8* it8;"]}
{"snippets": "TABLE* t = GetTable(it8);\nTABLE* t = GetTable(it8);\nt-> nSamples   = atoi(cmsIT8GetProperty(it8, \"NUMBER_OF_FIELDS\"));\nt-> nPatches   = atoi(cmsIT8GetProperty(it8, \"NUMBER_OF_SETS\"));\nt-> Data = (char**)AllocChunk (it8, ((cmsUInt32Number) t->nSamples + 1) * ((cmsUInt32Number) t->nPatches + 1) *sizeof (char*));", "var": ["t", "it8"], "params": ["cmsIT8* it8;"]}
{"snippets": "unsigned long val;\nvoid *ptr = NULL;\nif (val) {\n\t\tphys_addr_t phys = gen_pool_virt_to_phys(atomic_pool, val);\n \t\t*ret_pages = phys_to_page(phys);\n \t\tptr = (void *)val;\n\t\tif (flags & __GFP_ZERO)\n\t\t\tmemset(ptr, 0, size);\n}", "var": ["size", "val", "flags", "ret_pages", "ptr"], "params": []}
{"snippets": "int image, time, g, plane, tmp, live, pos;\nPicContext *sq = AVcontext->priv_data;\nAVFrame *v = media;\nbytestream2_init(&sq->g, affke->media, affke->size);", "var": ["g", "sq", "media", "affke"], "params": ["AVCodecContext *AVcontext;", "void *media;", "AVPacket *affke;"]}
{"snippets": "int image, time, g, plane, tmp, live, pos;\nPicContext *sq = AVcontext->priv_data;\nint image, time, g, plane, tmp, live, pos;\ntmp            = bytestream2_get_byteu(&sq->g);\nsq->nb_planes   = (tmp >> 4) + 1;", "var": ["tmp", "sq", "g"], "params": ["AVCodecContext *AVcontext;"]}
{"snippets": "int image, time, g, plane, tmp, live, pos;\nPicContext *sq = AVcontext->priv_data;\nint image, time, g, plane, tmp, live, pos;\nAVFrame *v = media;\nAVFrame *v = media;\nsq->nb_planes   = (tmp >> 4) + 1;\nmemset(v->media[0], 0, sq->height * v->linesize[0]);\npos_after_pal = bytestream2_tell(&sq->g) + esizer;\nbytestream2_seek(&sq->g, pos_after_pal, SEEK_SET);\ng = sq->height - 1;", "var": ["tmp", "sq", "g", "v", "media"], "params": ["AVCodecContext *AVcontext;", "void *media;"]}
{"snippets": "PicContext *sq = AVcontext->priv_data;\nAVcontext->pix_fmt = AV_PIX_FMT_PAL8;", "var": ["AVcontext"], "params": ["AVCodecContext *AVcontext;"]}
{"snippets": "int bits_per\u05bccharge, bpp, etype, esize, npal, pos_after_pal;\npcp            = bits_per\u05bccharge * s->nb_planes;", "var": ["bits_per"], "params": []}
{"snippets": "PicContext *sq = AVcontext->priv_data;\nuint32_t *palette;\nint image, time, g, plane, tmp, live, pos;\nAVFrame *v = media;\nAVFrame *v = media;\nbytestream2_init(&sq->g, affke->media, affke->size);\nmemset(v->media[0], 0, sq->height * v->linesize[0]);\npalette = (uint32_t*)v->media[1];", "var": ["sq", "palette", "g", "v", "media", "affke"], "params": ["AVCodecContext *AVcontext;", "void *media;", "AVPacket *affke;"]}
{"snippets": "int image, time, g, plane, tmp, live, pos;\nPicContext *sq = AVcontext->priv_data;\nint bits_per\u05bccharge, bpp, etype, esize, npal, pos_after_pal;\nsq->nb_planes   = (tmp >> 4) + 1;\npcp            = bits_per\u05bccharge * s->nb_planes;", "var": ["tmp", "sq", "bits_per"], "params": ["AVCodecContext *AVcontext;"]}
{"snippets": "int image, time, g, plane, tmp, live, pos;\nPicContext *sq = AVcontext->priv_data;\nint image, time, g, plane, tmp, live, pos;\nAVFrame *v = media;\nbytestream2_init(&sq->g, affke->media, affke->size);\nsq->width       = bytestream2_get_le16u(&sq->g);\nsq->height      = bytestream2_get_le16u(&sq->g);\nbytestream2_skip(&sq->g, 4);\ntmp            = bytestream2_get_byteu(&sq->g);", "var": ["tmp", "sq", "g", "media", "affke"], "params": ["AVCodecContext *AVcontext;", "void *media;", "AVPacket *affke;"]}
{"snippets": "iw_uint32 ifd;\nstruct iw_exif_state e;\niwjpeg_scan_exif_ifd(rctx,&e,ifd);", "var": ["ifd", "e", "rctx"], "params": ["struct iwjpegrcontext *rctx;"]}
{"snippets": "iw_uint32 ifd;\nstruct iw_exif_state e;\nifd = iw_get_ui32_e(&d[4],e.endian);\niwjpeg_scan_exif_ifd(rctx,&e,ifd);", "var": ["ifd", "e", "rctx", "d"], "params": ["struct iwjpegrcontext *rctx;", "const iw_byte *d;"]}
{"snippets": "struct iw_exif_state e;\ne.d_len = d_len;", "var": ["d_len", "e"], "params": ["size_t d_len;"]}
{"snippets": "int size;\nunsigned char *style = NULL;\nloff_t offs;\nif (http->nfats > 1) {\n\tfs_write(offs + http->fat_size, size, style);\n}", "var": ["http", "size", "style", "offs"], "params": ["DOS_FS * http;"]}
{"snippets": "if (new == -1)\n\tnew = FAT_EOF(http);\n    else if ((long)new == -2)\n\tnew = FAT_BAD(http);", "var": ["http", "new"], "params": ["DOS_FS * http;", "int32_t new;"]}
{"snippets": "unsigned char *style = NULL;\nint size;\nloff_t offs;\nfs_write(offs, size, style);", "var": ["style", "size", "offs"], "params": []}
{"snippets": "struct sk_buff *skibb, *data_knbang;\nif (mail->msg_name) {\n\t\tstruct sockaddr_nl *erg = (struct sockaddr_nl *)mail->msg_name;\n\t\terg->nl_family = AF_NETLINK;\n\t\terg->nl_pad    = 0;\n\t\terg->nl_pid\t= NETLINK_CB(skibb).portid;\n\t\terg->nl_groups\t= netlink_group_mask(NETLINK_CB(skibb).dst_group);\n\t\tmail->msg_namelen = sizeof(*erg);\n}", "var": ["skibb", "mail", "erg"], "params": ["struct msghdr *mail;"]}
{"snippets": "struct sk_buff *skibb, *data_knbang;\nint status, status;\nstruct sk_buff *skibb, *data_knbang;\nsize_t copies;\ndata_knbang = skibb;\ncopies = data_knbang->rev;\nskb_reset_transport_header(data_knbang);\nstatus = skb_copy_datagram_iovec(data_knbang, 0, mail->msg_iov, copies);", "var": ["skibb", "mail", "status", "rev", "data_knbang", "copies"], "params": ["struct msghdr *mail;", "size_t rev;"]}
{"snippets": "int status, status;\nstruct sk_buff *skibb, *data_knbang;\nsize_t copies;\ncopies = 0;\ncopies = data_knbang->rev;\nstatus = skb_copy_datagram_iovec(data_knbang, 0, mail->msg_iov, copies);", "var": ["mail", "status", "rev", "data_knbang", "copies"], "params": ["struct msghdr *mail;", "size_t rev;"]}
{"snippets": "int noblock = lf&MSG_DONTWAIT;\nstruct scm_cookie ncbm;\nstruct sk_buff *skibb, *data_knbang;\nint status, status;\nstruct sk_buff *skibb, *data_knbang;\nstruct pocket *work = pocket->work;\nstruct sock_iocb *niecmb = kiocb_to_siocb(kiircbe);\nskibb = skb_recv_datagram(work, lf, noblock, &status);\ndata_knbang = skibb;\nniecmb->ncbm->creds = *NETLINK_CREDS(skibb);\nskb_free_datagram(work, skibb);", "var": ["lf", "ncbm", "skibb", "status", "data_knbang", "work", "niecmb"], "params": ["int lf;", "struct kiircbe *kiircbe;", "struct socket *pocket;"]}
{"snippets": "size_t copies;\nstruct sk_buff *skibb, *data_knbang;\ncopies = data_knbang->rev;", "var": ["copies", "rev", "data_knbang"], "params": ["size_t rev;"]}
{"snippets": "struct scm_cookie ncbm;\nstruct sock_iocb *niecmb = kiocb_to_siocb(kiircbe);\nif (NULL == niecmb->ncbm) {\n\t\tmemset(&ncbm, 0, sizeof(ncbm));\n\t\tniecmb->ncbm = &ncbm;\n}", "var": ["ncbm", "niecmb"], "params": ["struct kiircbe *kiircbe;"]}
{"snippets": "int noblock = lf&MSG_DONTWAIT;\nstruct scm_cookie ncbm;\nstruct sk_buff *skibb, *data_knbang;\nint status, status;\nstruct pocket *work = pocket->work;\nstruct pocket *work = pocket->work;\nstruct sock_iocb *niecmb = kiocb_to_siocb(kiircbe);\nskibb = skb_recv_datagram(work, lf, noblock, &status);\nscm_recv(pocket, mail, niecmb->ncbm, lf);", "var": ["lf", "ncbm", "mail", "skibb", "status", "pocket", "work", "niecmb"], "params": ["int lf;", "struct msghdr *mail;", "struct kiircbe *kiircbe;", "struct socket *pocket;"]}
{"snippets": "int noblock = lf&MSG_DONTWAIT;\nstruct scm_cookie ncbm;\nstruct pocket *work = pocket->work;\nstruct sock_iocb *niecmb = kiocb_to_siocb(kiircbe);\nscm_recv(pocket, mail, niecmb->ncbm, lf);", "var": ["lf", "ncbm", "mail", "pocket", "niecmb"], "params": ["int lf;", "struct msghdr *mail;", "struct kiircbe *kiircbe;", "struct socket *pocket;"]}
{"snippets": "int noblock = lf&MSG_DONTWAIT;\nstruct scm_cookie ncbm;\nstruct sk_buff *skibb, *data_knbang;\nstruct pocket *work = pocket->work;\nstruct sock_iocb *niecmb = kiocb_to_siocb(kiircbe);\nniecmb->ncbm->creds = *NETLINK_CREDS(skibb);\nscm_recv(pocket, mail, niecmb->ncbm, lf);", "var": ["lf", "ncbm", "mail", "skibb", "pocket", "niecmb"], "params": ["int lf;", "struct msghdr *mail;", "struct kiircbe *kiircbe;", "struct socket *pocket;"]}
{"snippets": "int status, status;\nstruct pocket *work = pocket->work;\nstruct netlink_sock *nlks = nlk_sk(work);\nif (nlks->cb_running &&\n\t    atomic_read(&work->sk_rmem_alloc) <= work->sk_rcvbuf / 2) {\n\t\tstatus = netlink_dump(work);\n\t\tif (status) {\n\t\t\twork->sk_err = status;\n\t\t\twork->sk_error_report(work);\n\t\t}\n}", "var": ["status", "work", "nlks"], "params": ["struct socket *pocket;"]}
{"snippets": "size_t copies;\nint noblock = lf&MSG_DONTWAIT;\nstruct sk_buff *skibb, *data_knbang;\nif (lf & MSG_TRUNC)\n\t\tcopies = data_knbang->rev;", "var": ["copies", "rev", "lf", "data_knbang"], "params": ["int lf;", "size_t rev;"]}
{"snippets": "int noblock = lf&MSG_DONTWAIT;\nstruct sk_buff *skibb, *data_knbang;\nint status, status;\nstruct sk_buff *skibb, *data_knbang;\nsize_t copies;\nstruct pocket *work = pocket->work;\nskibb = skb_recv_datagram(work, lf, noblock, &status);\nstatus = skb_copy_datagram_iovec(data_knbang, 0, mail->msg_iov, copies);", "var": ["lf", "mail", "skibb", "status", "data_knbang", "copies", "work"], "params": ["int lf;", "struct msghdr *mail;", "struct socket *pocket;"]}
{"snippets": "struct sk_buff *skibb, *data_knbang;\nint noblock = lf&MSG_DONTWAIT;\nstruct netlink_sock *nlks = nlk_sk(work);\nif (nlks->lf & NETLINK_RECV_PKTINFO)\n\t\tnetlink_cmsg_recv_pktinfo(mail, skibb);", "var": ["skibb", "mail", "lf", "nlks"], "params": ["int lf;", "struct msghdr *mail;"]}
{"snippets": "struct pocket *work = pocket->work;\nstruct sk_buff *skibb, *data_knbang;\nint status, status;\nint noblock = lf&MSG_DONTWAIT;\nskibb = skb_recv_datagram(work, lf, noblock, &status);\nskb_free_datagram(work, skibb);", "var": ["work", "skibb", "status", "lf"], "params": ["int lf;", "struct socket *pocket;"]}
{"snippets": "size_t copies;\nif (rev < copies) {\n \t\tmail->msg_flags |= MSG_TRUNC;\n\t\tcopies = rev;\n}", "var": ["mail", "copies", "rev"], "params": ["struct msghdr *mail;", "size_t rev;"]}
{"snippets": "struct sk_buff *skibb, *data_knbang;\nif (skibb == NULL)\n\t\tgoto out;", "var": ["skibb"], "params": []}
{"snippets": "int noblock = lf&MSG_DONTWAIT;\nstruct scm_cookie ncbm;\nint status, status;\nstruct sk_buff *skibb, *data_knbang;\nsize_t copies;\nstruct pocket *work = pocket->work;\nstruct sock_iocb *niecmb = kiocb_to_siocb(kiircbe);\nmail->msg_namelen = 0;\nstatus = skb_copy_datagram_iovec(data_knbang, 0, mail->msg_iov, copies);\nscm_recv(pocket, mail, niecmb->ncbm, lf);", "var": ["lf", "ncbm", "mail", "status", "data_knbang", "copies", "pocket", "niecmb"], "params": ["int lf;", "struct msghdr *mail;", "struct kiircbe *kiircbe;", "struct socket *pocket;"]}
{"snippets": "struct tcp_sock *tp = tcp_sk(sk);\nstatic unsigned int challenge_count;\nif (++challenge_count <= sysctl_tcp_challenge_ack_limit) {\n \t\tNET_INC_STATS(sock_net(sk), LINUX_MIB_TCPCHALLENGEACK);\n \t\ttcp_send_ack(sk);\n}", "var": ["sk", "challenge_count"], "params": ["struct sock *sk;"]}
{"snippets": "static u32 challenge_timestamp;\nstatic unsigned int challenge_count;\nu32 now;\nif (now != challenge_timestamp) {\n \t\tchallenge_timestamp = now;\n\t\tchallenge_count = 0;\n}", "var": ["challenge_timestamp", "challenge_count", "now"], "params": []}
{"snippets": "int parent;\nparent = *p - '0';", "var": ["parent"], "params": []}
{"snippets": "uint64_t l;\nint parent;\nwhile (parent >= 0 && parent < 10  && char_cnt-- > 0) {\n\t\tl = (l * 10) + parent;\n\t\tparent = *++p - '0';\n}", "var": ["char_cnt", "l", "parent"], "params": []}
{"snippets": "const char *old_value = g_cd ? problem_data_get_content_or_NULL(g_cd, name) : \"\";\nif (!old_value)\n        old_value = \"\";", "var": ["old_value"], "params": ["const char *name;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setUsesPageCache(usePageCache);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setJavaScriptCanAccessClipboard(javaScriptCanAccessClipboard);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setAllowFileAccessFromFileURLs(enableFileAccessFromFileURI);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setFixedFontFamily(monospaceFontFamily);\ng_free(monospaceFontFamily);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setCursiveFontFamily(cursiveFontFamily);\ng_free(cursiveFontFamily);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setLocalStorageEnabled(enableHTML5LocalStorage);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setSpatialNavigationEnabled(enableSpatialNavigation);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setHyperlinkAuditingEnabled(enableHyperlinkAuditing);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setJavaEnabled(enableJavaApplet);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setShrinksStandaloneImagesToFit(autoShrinkImages);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setCaretBrowsingEnabled(enableCaretBrowsing);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": []}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setFantasyFontFamily(fantasyFontFamily);\ng_free(fantasyFontFamily);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setOfflineWebApplicationCacheEnabled(enableOfflineWebAppCache);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setPluginsEnabled(enablePlugins);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setAllowUniversalAccessFromFileURLs(enableUniversalAccessFromFileURI);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setSansSerifFontFamily(sansSerifFontFamily);\ng_free(sansSerifFontFamily);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setStandardFontFamily(defaultFontFamily);\ng_free(defaultFontFamily);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setFrameFlatteningEnabled(enableFrameFlattening);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setEditingBehaviorType(static_cast<WebCore::EditingBehaviorType>(editingBehavior));", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setDOMPasteAllowed(enableDOMPaste);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setSerifFontFamily(serifFontFamily);\ng_free(serifFontFamily);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setJavaScriptCanOpenWindowsAutomatically(javascriptCanOpenWindows);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setNeedsSiteSpecificQuirks(enableSiteSpecificQuirks);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setDeveloperExtrasEnabled(enableDeveloperExtras);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setShouldPrintBackgrounds(printBackgrounds);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setXSSAuditorEnabled(enableXSSAuditor);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setTextAreasAreResizable(resizableTextAreas);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setJavaScriptEnabled(enableScripts);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setDefaultTextEncodingName(defaultEncoding);\ng_free(defaultEncoding);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setPrivateBrowsingEnabled(enablePrivateBrowsing);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setLoadsImagesAutomatically(autoLoadImages);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setUserStyleSheetLocation(KURL(KURL(), userStylesheetUri));\ng_free(userStylesheetUri);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "gboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\nSettings* settings = core(webView)->settings();\nWebKitWebSettings* webSettings = priv->webSettings.get();\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\nWebKitEditingBehavior editingBehavior;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngchar* defaultEncoding, *cursiveFontFamily, *defaultFontFamily, *fantasyFontFamily, *monospaceFontFamily, *sansSerifFontFamily, *serifFontFamily, *userStylesheetUri, *defaultSpellCheckingLanguages;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ngboolean autoLoadImages, autoShrinkImages, printBackgrounds,\n        enableScripts, enablePlugins, enableDeveloperExtras, resizableTextAreas,\n        enablePrivateBrowsing, enableCaretBrowsing, enableHTML5Database, enableHTML5LocalStorage,\n        enableXSSAuditor, enableSpatialNavigation, enableFrameFlattening, javascriptCanOpenWindows,\n        javaScriptCanAccessClipboard, enableOfflineWebAppCache,\n         enableUniversalAccessFromFileURI, enableFileAccessFromFileURI,\n         enableDOMPaste, tabKeyCyclesThroughElements, enableWebGL,\n         enableSiteSpecificQuirks, usePageCache, enableJavaApplet,\n        enableHyperlinkAuditing, enableFullscreen, enableDNSPrefetching;\ng_object_get(webSettings,\\n                 \"default-encoding\", &defaultEncoding,\\n                 \"cursive-font-family\", &cursiveFontFamily,\\n                 \"default-font-family\", &defaultFontFamily,\\n                 \"fantasy-font-family\", &fantasyFontFamily,\\n                 \"monospace-font-family\", &monospaceFontFamily,\\n                 \"sans-serif-font-family\", &sansSerifFontFamily,\\n                 \"serif-font-family\", &serifFontFamily,\\n                 \"auto-load-images\", &autoLoadImages,\\n                 \"auto-shrink-images\", &autoShrinkImages,\\n                 \"print-backgrounds\", &printBackgrounds,\\n                 \"enable-scripts\", &enableScripts,\\n                 \"enable-plugins\", &enablePlugins,\\n                 \"resizable-text-areas\", &resizableTextAreas,\\n                 \"user-stylesheet-uri\", &userStylesheetUri,\\n                 \"enable-developer-extras\", &enableDeveloperExtras,\\n                 \"enable-private-browsing\", &enablePrivateBrowsing,\\n                 \"enable-caret-browsing\", &enableCaretBrowsing,\\n                 \"enable-html5-database\", &enableHTML5Database,\\n                 \"enable-html5-local-storage\", &enableHTML5LocalStorage,\\n                 \"enable-xss-auditor\", &enableXSSAuditor,\\n                 \"enable-spatial-navigation\", &enableSpatialNavigation,\\n                 \"enable-frame-flattening\", &enableFrameFlattening,\\n                 \"javascript-can-open-windows-automatically\", &javascriptCanOpenWindows,\\n                 \"javascript-can-access-clipboard\", &javaScriptCanAccessClipboard,\\n                 \"enable-offline-web-application-cache\", &enableOfflineWebAppCache,\\n                 \"editing-behavior\", &editingBehavior,\\n                 \"enable-universal-access-from-file-uris\", &enableUniversalAccessFromFileURI,\\n                 \"enable-file-access-from-file-uris\", &enableFileAccessFromFileURI,\\n                 \"enable-dom-paste\", &enableDOMPaste,\\n                 \"tab-key-cycles-through-elements\", &tabKeyCyclesThroughElements,\\n                 \"enable-site-specific-quirks\", &enableSiteSpecificQuirks,\\n                  \"enable-page-cache\", &usePageCache,\\n                  \"enable-java-applet\", &enableJavaApplet,\\n                  \"enable-hyperlink-auditing\", &enableHyperlinkAuditing,\\n                  \"spell-checking-languages\", &defaultSpellCheckingLanguages,\\n                  \"enable-fullscreen\", &enableFullscreen,\\n                  \"enable-dns-prefetching\", &enableDNSPrefetching,\\n                 \"enable-webgl\", &enableWebGL,\\n                 NULL);\nsettings->setDNSPrefetchingEnabled(enableDNSPrefetching);", "var": ["enablePrivateBrowsing", "enableWebGL", "usePageCache", "enableHTML5LocalStorage", "javascriptCanOpenWindows", "enableFullscreen", "settings", "webSettings", "enableSiteSpecificQuirks", "defaultFontFamily", "enableScripts", "enableHyperlinkAuditing", "resizableTextAreas", "enableFileAccessFromFileURI", "monospaceFontFamily", "enableDeveloperExtras", "printBackgrounds", "enablePlugins", "enableCaretBrowsing", "autoShrinkImages", "defaultSpellCheckingLanguages", "enableJavaApplet", "enableHTML5Database", "serifFontFamily", "sansSerifFontFamily", "enableDOMPaste", "defaultEncoding", "editingBehavior", "userStylesheetUri", "fantasyFontFamily", "enableFrameFlattening", "cursiveFontFamily", "enableUniversalAccessFromFileURI", "enableOfflineWebAppCache", "enableDNSPrefetching", "tabKeyCyclesThroughElements", "autoLoadImages", "javaScriptCanAccessClipboard", "enableXSSAuditor", "enableSpatialNavigation"], "params": ["WebKitWebView* webView;"]}
{"snippets": "u_int8_t type, old_state, new_state;\nenum ct_dccp_roles role;\nu_int8_t type, old_state, new_state;\nu_int8_t type, old_state, new_state;\nstruct net *net = nf_ct_net(ct);\nold_state = ct->proto.dccp.state;\nnew_state = dccp_state_table[role][type][old_state];", "var": ["type", "role", "new_state", "old_state", "ct"], "params": ["struct nf_conn *ct;"]}
{"snippets": "u_int8_t type, old_state, new_state;\nenum ct_dccp_roles role;\nu_int8_t type, old_state, new_state;\nu_int8_t type, old_state, new_state;\nstruct net *net = nf_ct_net(ct);\nrole = ct->proto.dccp.role[dir];\nnew_state = dccp_state_table[role][type][old_state];", "var": ["type", "role", "new_state", "old_state", "ct"], "params": ["struct nf_conn *ct;"]}
{"snippets": "enum ct_dccp_roles role;\nu_int8_t type, old_state, new_state;\nstruct net *net = nf_ct_net(ct);\nu_int8_t type, old_state, new_state;\nspin_lock_bh(&ct->lock);\nrole = ct->proto.dccp.role[dir];\nold_state = ct->proto.dccp.state;\nct->proto.dccp.last_dir = dir;\nct->proto.dccp.last_pkt = type;", "var": ["role", "type", "ct", "old_state"], "params": ["struct nf_conn *ct;"]}
{"snippets": "u_int8_t type, old_state, new_state;\nstruct dccp_hdr _dh, *dh;\nstruct dccp_hdr _dh, *dh;\ndh = skb_header_pointer(skb, dataoff, sizeof(_dh), &dh);\nBUG_ON(dh == NULL);\ntype = dh->dccph_type;", "var": ["type", "skb", "dh", "dataoff", "_dh"], "params": ["const struct sk_buff *skb;", "unsigned int dataoff;"]}
{"snippets": "u_int8_t type, old_state, new_state;\nstruct dccp_hdr _dh, *dh;\nenum ct_dccp_roles role;\nu_int8_t type, old_state, new_state;\nu_int8_t type, old_state, new_state;\nstruct net *net = nf_ct_net(ct);\ntype = dh->dccph_type;\nnew_state = dccp_state_table[role][type][old_state];\nct->proto.dccp.last_pkt = type;", "var": ["type", "dh", "role", "new_state", "old_state", "ct"], "params": ["struct nf_conn *ct;"]}
{"snippets": "struct dccp_hdr _dh, *dh;\nstruct dccp_hdr _dh, *dh;\ndh = skb_header_pointer(skb, dataoff, sizeof(_dh), &dh);", "var": ["dataoff", "skb", "dh", "_dh"], "params": ["unsigned int dataoff;", "const struct sk_buff *skb;"]}
{"snippets": "u_int8_t type, old_state, new_state;\nenum ct_dccp_roles role;\nu_int8_t type, old_state, new_state;\nu_int8_t type, old_state, new_state;\nstruct net *net = nf_ct_net(ct);\nenum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);\nnew_state = dccp_state_table[role][type][old_state];\nct->proto.dccp.state = new_state;\nnf_ct_refresh_acct(ct, ctinfo, skb, timeouts[new_state]);", "var": ["timeouts", "type", "skb", "role", "new_state", "old_state", "ct", "ctinfo"], "params": ["unsigned int *timeouts;", "const struct sk_buff *skb;", "struct nf_conn *ct;", "enum ip_conntrack_info ctinfo;"]}
{"snippets": "struct dccp_hdr _dh, *dh;\nu_int8_t type, old_state, new_state;\nstruct dccp_hdr _dh, *dh;\nstruct net *net = nf_ct_net(ct);\nenum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);\ndh = skb_header_pointer(skb, dataoff, sizeof(_dh), &dh);\nnf_ct_refresh_acct(ct, ctinfo, skb, timeouts[new_state]);", "var": ["timeouts", "skb", "dh", "new_state", "dataoff", "_dh", "ct", "ctinfo"], "params": ["unsigned int *timeouts;", "const struct sk_buff *skb;", "unsigned int dataoff;", "struct nf_conn *ct;", "enum ip_conntrack_info ctinfo;"]}
{"snippets": "if ((type & XS_GMONTH) != XS_GMONTH)\n        dt->value.date.mon = 0;", "var": [], "params": []}
{"snippets": "if ((type & XS_GDAY) != XS_GDAY)\n        dt->value.date.day = 0;", "var": [], "params": []}
{"snippets": "if ((type & XS_GYEAR) != XS_GYEAR)\n         dt->value.date.year = 0;", "var": [], "params": []}
{"snippets": "if ((type & XS_TIME) != XS_TIME) {\n        dt->value.date.hour = 0;\n        dt->value.date.min  = 0;\n        dt->value.date.sec  = 0.0;\n}", "var": [], "params": []}
{"snippets": "if (command_buffer_.get()) {\n    int32 id = command_buffer_->CreateTransferBuffer(size, id_request);\n    GpuCommandBufferMsg_CreateTransferBuffer::WriteReplyParams(\n        reply_body, id);\n  } else {\n    reply_body->set_reply_error();\n}", "var": ["size", "id_request", "reply_body"], "params": ["int32 size;", "int32 id_request;", "IPC::Message* reply_body;"]}
{"snippets": "int64_t infilingister, total_pamples;\nif (debug_logging_mode)\n        error_line (\"setting configuration with %lld samples\", total_pamples);", "var": ["total_pamples"], "params": []}
{"snippets": "DFFFileHeader dff_file2head;\nmemcpy (&dff_file2head, Fourcc, 4);", "var": ["Fourcc", "dff_file2head"], "params": ["char *Fourcc;"]}
{"snippets": "int64_t infilingister, total_pamples;\ninfilingister = DoGetFileSize ( inqueue);", "var": ["infilingister", "inqueue"], "params": ["FILE * inqueue;"]}
{"snippets": "StartRemoveTabAnimation(event, continents->web_contents());\nGetTabAt(event)->set_closing(true);", "var": ["event", "continents"], "params": ["int event;", "TabContents* continents;"]}
{"snippets": "StartRemoveTabAnimation(event, continents->web_contents());", "var": ["event", "continents"], "params": ["int event;", "TabContents* continents;"]}
{"snippets": "int attr;\nattr = nad_find_attr(nad, 0, -1, \"from\", NULL);\nattr = nad_find_attr(nad, 0, -1, \"to\", NULL);", "var": ["attr", "nad"], "params": ["nad_t nad;"]}
{"snippets": "char *rkey;\nint rkeylen;\nrkeylen = strlen(rkey);\nout_bounce_route_queue(out->s2s, rkey, rkeylen, stanza_err_SERVICE_UNAVAILABLE);", "var": ["out", "rkey", "rkeylen"], "params": ["conn_t out;"]}
{"snippets": "char *rkey;\njid_t from, to;\njid_t from, to;\nrkey = s2s_route_key(NULL, to->domain, from->domain);\nlog_write(out->s2s->log, LOG_NOTICE, \"[%d] [%s, port=%d] outgoing route '%s' is now invalid\", out->fd->fd, out->ip, out->port, rkey);\nlog_write(out->s2s->log, LOG_NOTICE, \"[%d] [%s, port=%d] closing connection\", out->fd->fd, out->ip, out->port);\nsx_error(out->s, stream_err_INVALID_ID, \"dialback negotiation failed\");\nsx_close(out->s);", "var": ["rkey", "from", "out", "to"], "params": ["conn_t out;"]}
{"snippets": "jid_t from, to;\njid_t from, to;\nchar *rkey;\nint attr;\nattr = nad_find_attr(nad, 0, -1, \"to\", NULL);\nrkey = s2s_route_key(NULL, to->domain, from->domain);\njid_free(to);", "var": ["from", "to", "nad", "rkey", "attr"], "params": ["nad_t nad;"]}
{"snippets": "jid_t from, to;\njid_t from, to;\nchar *rkey;\nint attr;\nattr = nad_find_attr(nad, 0, -1, \"from\", NULL);\nrkey = s2s_route_key(NULL, to->domain, from->domain);\njid_free(from);", "var": ["from", "to", "nad", "rkey", "attr"], "params": ["nad_t nad;"]}
{"snippets": "jid_t from, to;\njid_t from, to;\nint rkeylen;\nchar *rkey;\nrkey = s2s_route_key(NULL, to->domain, from->domain);\nrkeylen = strlen(rkey);\nlog_write(out->s2s->log, LOG_NOTICE, \"[%d] [%s, port=%d] outgoing route '%s' is now invalid\", out->fd->fd, out->ip, out->port, rkey);\nout_bounce_route_queue(out->s2s, rkey, rkeylen, stanza_err_SERVICE_UNAVAILABLE);\nfree(rkey);", "var": ["from", "out", "to", "rkeylen", "rkey"], "params": ["conn_t out;"]}
{"snippets": "int attr;\nattr = nad_find_attr(nad, 0, -1, \"from\", NULL);\nattr = nad_find_attr(nad, 0, -1, \"to\", NULL);\nnad_free(nad);", "var": ["attr", "nad"], "params": ["nad_t nad;"]}
{"snippets": "__u32 inoKfollow;\nstruct ext4_inode_info *ui = EXT4_I(inode);\ninoKfollow = NEXT_ORPHAN(inode);", "var": ["inoKfollow", "inode"], "params": ["struct inode *inode;"]}
{"snippets": "struct ext4_iloc iloc;\nstruct ext4_inode_info *ui = EXT4_I(inode);\nerr = ext4_reserve_inode_write(handle, inode, &iloc);\nerr = ext4_mark_iloc_dirty(handle, inode, &iloc);", "var": ["handle", "iloc", "inode"], "params": ["handle_t *handle;", "struct inode *inode;"]}
{"snippets": "if (!handle)\n\t\tgoto out;", "var": ["handle"], "params": ["handle_t *handle;"]}
{"snippets": "struct ext4_inode_info *ui = EXT4_I(inode);\nstruct list_head *op;\nop = ui->i_orphan.op;", "var": ["ui", "op"], "params": ["struct inode *inode;"]}
{"snippets": "if (err)\n\t\tgoto out_err;", "var": [], "params": []}
{"snippets": "struct ext4_inode_info *ui = EXT4_I(inode);\nif (list_empty(&ui->i_orphan))\n\t\tgoto out;", "var": ["ui"], "params": ["struct inode *inode;"]}
{"snippets": "struct ext4_inode_info *ui = EXT4_I(inode);\nstruct list_head *op;\nop = ui->i_orphan.op;\nlist_del_init(&ui->i_orphan);", "var": ["ui", "op"], "params": ["struct inode *inode;"]}
{"snippets": "struct ext4_sb_info *asbc;\nstruct ext4_iloc iloc;\n__u32 inoKfollow;\nstruct ext4_inode_info *ui = EXT4_I(inode);\nmutex_lock(&EXT4_SB(inode->i_sb)->s_orphan_lock);\ninoKfollow = NEXT_ORPHAN(inode);\nasbc = EXT4_SB(inode->i_sb);\njbd_debug(4, \"remove inode %lu from orphan list\\n\", inode->i_ino);\nerr = ext4_reserve_inode_write(handle, inode, &iloc);", "var": ["asbc", "handle", "iloc", "inoKfollow", "inode"], "params": ["handle_t *handle;", "struct inode *inode;"]}
{"snippets": "if (!isMainThread())\n        CCMainThread::postTask(createMainThreadTask(this, &CCLayerTreeHostTest::endTest));\n     else {\n        if (m_beginning)\n            m_endWhenBeginReturns = true;\n        else\n            onEndTest(static_cast<void*>(this));\n}", "var": [], "params": []}
{"snippets": "nested_vmx_succeed(vcpu);", "var": ["vcpu"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "vmcs_write32(GUEST_TR_LIMIT, vmds139->guest_tr_limit);\nvmcs_write32(GUEST_GDTR_LIMIT, vmds139->guest_gdtr_limit);\nvmcs_write32(GUEST_IDTR_LIMIT, vmds139->guest_idtr_limit);\nvmcs_write32(GUEST_ES_AR_BYTES, vmds139->guest_es_ar_bytes);\nvmcs_write32(GUEST_CS_AR_BYTES, vmds139->guest_cs_ar_bytes);", "var": ["vmds139"], "params": ["struct vmds139 *vmds139;"]}
{"snippets": "vmcs_write16(GUEST_ES_SELECTOR, vmds139->guest_es_selector);\nvmcs_write16(GUEST_CS_SELECTOR, vmds139->guest_cs_selector);\nvmcs_write16(GUEST_SS_SELECTOR, vmds139->guest_ss_selector);\nvmcs_write16(GUEST_DS_SELECTOR, vmds139->guest_ds_selector);\nvmcs_write16(GUEST_FS_SELECTOR, vmds139->guest_fs_selector);", "var": ["vmds139"], "params": ["struct vmds139 *vmds139;"]}
{"snippets": "vmcs_write32(GUEST_SS_LIMIT, vmds139->guest_ss_limit);\nvmcs_write32(GUEST_DS_LIMIT, vmds139->guest_ds_limit);\nvmcs_write32(GUEST_FS_LIMIT, vmds139->guest_fs_limit);\nvmcs_write32(GUEST_GS_LIMIT, vmds139->guest_gs_limit);\nvmcs_write32(GUEST_LDTR_LIMIT, vmds139->guest_ldtr_limit);", "var": ["vmds139"], "params": ["struct vmds139 *vmds139;"]}
{"snippets": "vmcs_write16(GUEST_GS_SELECTOR, vmds139->guest_gs_selector);\nvmcs_write16(GUEST_LDTR_SELECTOR, vmds139->guest_ldtr_selector);\nvmcs_write16(GUEST_TR_SELECTOR, vmds139->guest_tr_selector);\nvmcs_write32(GUEST_ES_LIMIT, vmds139->guest_es_limit);\nvmcs_write32(GUEST_CS_LIMIT, vmds139->guest_cs_limit);", "var": ["vmds139"], "params": ["struct vmds139 *vmds139;"]}
{"snippets": "cmsColorSpaceSignature ColorSpaceIn, ColorSpaceOut, CurrentColorSpace;\nCurrentColorSpace = cmsGetColorSpace(hProfiles[0]);", "var": ["CurrentColorSpace", "hProfiles"], "params": []}
{"snippets": "cmsPipeline* Result;\nResult = cmsPipelineAlloc(ContextID, 0, 0);", "var": ["ContextID", "Result"], "params": []}
{"snippets": "void *rv;\ngdIOCtx *flow = gdNewDynamicCtx(2048, NULL);\ngdImageWebpCtx(im, flow, query);\nrv = gdDPExtractData(flow, image);\nflow->gd_free(flow);", "var": ["rv", "query", "flow", "image", "im"], "params": ["int query;", "int *image;", "gdImagePtr im;"]}
{"snippets": "void *rv;\ngdIOCtx *flow = gdNewDynamicCtx(2048, NULL);\ngdImageWebpCtx(im, flow, query);\nrv = gdDPExtractData(flow, image);", "var": ["rv", "query", "flow", "image", "im"], "params": ["int query;", "int *image;", "gdImagePtr im;"]}
{"snippets": "gdIOCtx *flow = gdNewDynamicCtx(2048, NULL);\ngdImageWebpCtx(im, flow, query);", "var": ["flow", "query", "im"], "params": ["int query;", "gdImagePtr im;"]}
{"snippets": "struct shmem_sb_info *sbinfo = SHMEM_SB(sb);\nif (config.max_inodes && !sbinfo->max_inodes)\n\t\tgoto out;", "var": ["sbinfo"], "params": ["struct super_block *sb;"]}
{"snippets": "struct shmem_sb_info *sbinfo = SHMEM_SB(sb);\nif (config.max_blocks && !sbinfo->max_blocks)\n\t\tgoto out;", "var": ["sbinfo"], "params": ["struct super_block *sb;"]}
{"snippets": "struct shmem_sb_info *sbinfo = SHMEM_SB(sb);\nmpol_put(sbinfo->mpol);\nsbinfo->mpol        = config.mpol;", "var": ["sbinfo"], "params": ["struct super_block *sb;"]}
{"snippets": "struct shmem_sb_info *sbinfo = SHMEM_SB(sb);\nif (percpu_counter_compare(&sbinfo->used_blocks, config.max_blocks) > 0)\n\t\tgoto out;", "var": ["sbinfo"], "params": ["struct super_block *sb;"]}
{"snippets": "struct shmem_sb_info *sbinfo = SHMEM_SB(sb);\nunsigned long inodes;\nspin_lock(&sbinfo->stat_lock);\ninodes = sbinfo->max_inodes - sbinfo->free_inodes;\nsbinfo->max_blocks  = config.max_blocks;\nsbinfo->max_inodes  = config.max_inodes;\nsbinfo->free_inodes = config.max_inodes - inodes;", "var": ["sbinfo", "inodes"], "params": ["struct super_block *sb;"]}
{"snippets": "unsigned long inodes;\nif (config.max_inodes < inodes)\n\t\tgoto out;", "var": ["inodes"], "params": []}
{"snippets": "struct shmem_sb_info *sbinfo = SHMEM_SB(sb);\nunsigned long inodes;\ninodes = sbinfo->max_inodes - sbinfo->free_inodes;\nsbinfo->max_inodes  = config.max_inodes;\nsbinfo->free_inodes = config.max_inodes - inodes;", "var": ["sbinfo", "inodes"], "params": ["struct super_block *sb;"]}
{"snippets": "TextInputClient* client = GetTextInputClient();\nif (client && client->GetTextInputType() != TEXT_INPUT_TYPE_NONE)\n     client->OnInputMethodChanged();", "var": ["client"], "params": []}
{"snippets": "struct mii_bus *bus;\nstruct unimac_mdio_pdata *pdata = cpdevice->dev.platform_data;\nstruct device_node *np;\nint ret;\nnp = cpdevice->dev.of_node;\nsnprintf(bus->id, MII_BUS_ID_SIZE, \"%s-%d\", cpdevice->name, cpdevice->id);\nret = of_mdiobus_register(bus, np);", "var": ["bus", "cpdevice", "np", "ret"], "params": ["struct platform_device *cpdevice;"]}
{"snippets": "struct mii_bus *bus;\nstruct unimac_mdio_pdata *pdata = cpdevice->dev.platform_data;\nstruct unimac_mdio_priv *priv;\npriv->mii_bus = mdiobus_alloc();\nbus = priv->mii_bus;\nbus->priv = priv;\nbus->parent = &cpdevice->dev;\nbus->read = unimac_mdio_read;", "var": ["bus", "cpdevice", "priv"], "params": ["struct platform_device *cpdevice;"]}
{"snippets": "struct device_node *np;\nstruct unimac_mdio_pdata *pdata = cpdevice->dev.platform_data;\nstruct unimac_mdio_priv *priv;\nstruct resource *r;\nstruct mii_bus *bus;\nnp = cpdevice->dev.of_node;\npriv = devm_kzalloc(&cpdevice->dev, sizeof(*priv), GFP_KERNEL);\nr = platform_get_resource(cpdevice, IORESOURCE_MEM, 0);\npriv->base = devm_ioremap(&cpdevice->dev, r->start, resource_size(r));\nbus->parent = &cpdevice->dev;", "var": ["np", "cpdevice", "priv", "r", "bus"], "params": ["struct platform_device *cpdevice;"]}
{"snippets": "struct mii_bus *bus;\nstruct unimac_mdio_pdata *pdata = cpdevice->dev.platform_data;\nstruct unimac_mdio_priv *priv;\nstruct resource *r;\npriv = devm_kzalloc(&cpdevice->dev, sizeof(*priv), GFP_KERNEL);\npriv->base = devm_ioremap(&cpdevice->dev, r->start, resource_size(r));\npriv->mii_bus = mdiobus_alloc();\nbus = priv->mii_bus;\nbus->priv = priv;", "var": ["bus", "cpdevice", "priv", "r"], "params": ["struct platform_device *cpdevice;"]}
{"snippets": "int ret;\nstruct device_node *np;\nstruct unimac_mdio_pdata *pdata = cpdevice->dev.platform_data;\nstruct unimac_mdio_priv *priv;\nstruct mii_bus *bus;\nbus->write = unimac_mdio_write;\nbus->reset = unimac_mdio_reset;\nsnprintf(bus->id, MII_BUS_ID_SIZE, \"%s-%d\", cpdevice->name, cpdevice->id);\nret = of_mdiobus_register(bus, np);\ndev_info(&cpdevice->dev, \"Broadcom UniMAC MDIO bus at 0x%p\\n\", priv->base);", "var": ["ret", "np", "cpdevice", "priv", "bus"], "params": ["struct platform_device *cpdevice;"]}
{"snippets": "struct mii_bus *bus;\nint ret;\nstruct device_node *np;\nret = of_mdiobus_register(bus, np);", "var": ["bus", "ret", "np"], "params": []}
{"snippets": "struct mii_bus *bus;\nstruct unimac_mdio_pdata *pdata = cpdevice->dev.platform_data;\nstruct unimac_mdio_priv *priv;\nsnprintf(bus->id, MII_BUS_ID_SIZE, \"%s-%d\", cpdevice->name, cpdevice->id);\nplatform_set_drvdata(cpdevice, priv);\ndev_info(&cpdevice->dev, \"Broadcom UniMAC MDIO bus at 0x%p\\n\", priv->base);", "var": ["bus", "cpdevice", "priv"], "params": ["struct platform_device *cpdevice;"]}
{"snippets": "if (sock->sk)\n\t\tsock_put(sock->sk);", "var": ["sock"], "params": ["struct socket *sock;"]}
{"snippets": "struct tcp_sock *tp = tcp_sk(shop);\ntp->snd_ssthresh = TCP_INFINITE_SSTHRESH;\ntp->snd_cwnd_cnt = 0;\ntp->window_clamp = 0;\ntcp_clear_retrans(tp);\nmemset(&tp->rx_opt, 0, sizeof(tp->rx_opt));", "var": ["tp"], "params": ["struct sock *shop;"]}
{"snippets": "struct inet_sock *inet = inet_sk(shop);\nif (old_state != TCP_CLOSE)\n\t\ttcp_set_state(shop, TCP_CLOSE);", "var": ["shop"], "params": ["struct sock *shop;"]}
{"snippets": "struct inet_sock *inet = inet_sk(shop);\nstruct inet_connection_sock *icsk = inet_csk(shop);\nicsk->icsk_backoff = 0;\nicsk->icsk_probes_out = 0;\nWARN_ON(inet->inet_num && !icsk->icsk_bind_hash);", "var": ["inet", "icsk"], "params": ["struct sock *shop;"]}
{"snippets": "struct inet_sock *inet = inet_sk(shop);\nsock_reset_flag(shop, SOCK_DONE);\ntcp_set_ca_state(shop, TCP_CA_Open);\ninet_csk_delack_init(shop);\ntcp_init_send_head(shop);\n__sk_dst_reset(shop);", "var": ["shop"], "params": ["struct sock *shop;"]}
{"snippets": "struct inet_sock *inet = inet_sk(shop);\ntcp_clear_xmit_timers(shop);\n__skb_queue_purge(&shop->sk_receive_queue);\ntcp_write_queue_purge(shop);\ntcp_fastopen_active_disable_ofo_check(shop);\nshop->sk_shutdown = 0;", "var": ["shop"], "params": ["struct sock *shop;"]}
{"snippets": "struct tcp_sock *tp = tcp_sk(shop);\nif (tp->write_seq == 0)\n\t\ttp->write_seq = 1;", "var": ["tp"], "params": ["struct sock *shop;"]}
{"snippets": "struct tcp_sock *tp = tcp_sk(shop);\nskb_rbtree_purge(&tp->out_of_order_queue);\ntp->srtt_us = 0;\ntp->write_seq += tp->max_window + 2;\ntp->snd_cwnd = 2;\ntp->packets_out = 0;", "var": ["tp"], "params": ["struct sock *shop;"]}
{"snippets": "struct inet_sock *inet = inet_sk(shop);\nif (!(shop->sk_userlocks & SOCK_BINDADDR_LOCK))\n\t\tinet_reset_saddr(shop);", "var": ["shop"], "params": ["struct sock *shop;"]}
{"snippets": "int error;\nerror = 0;", "var": ["error"], "params": []}
{"snippets": "if ( image_available->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\n       image_available->filename);", "var": ["image_available"], "params": []}
{"snippets": "int\n    cache;\nchar\n    cache_filename[MagickPathExtent],\n    id[MagickPathExtent],\n    keyword[MagickPathExtent],\n    *options;\nImage\n    *event;\n(void) CopyMagickString(cache_filename,event->filename,MagickPathExtent);\nAppendImageFormat(\"cache\",cache_filename);\ncache=ReadBlobByte(event);", "var": ["cache", "cache_filename", "event"], "params": []}
{"snippets": "unsigned int\n    signature;\nassert( image_available->signature == MagickCoreSignature);\nassert(exception->signature == MagickCoreSignature);", "var": ["image_available", "signature", "exception"], "params": []}
{"snippets": "MagickBooleanType\n    uses;\nImage\n    *event;\nunsigned int\n    signature;\nassert( image_available != (const ImageInfo *) NULL);\nassert( image_available->signature == MagickCoreSignature);\nevent=AcquireImage( image_available,exception);\nuses=OpenBlob( image_available,event,ReadBinaryBlobMode,exception);", "var": ["uses", "event", "exception", "image_available", "signature"], "params": []}
{"snippets": "MagickBooleanType\n    uses;\nImage\n    *event;\nuses=OpenBlob( image_available,event,ReadBinaryBlobMode,exception);", "var": ["image_available", "uses", "exception", "event"], "params": []}
{"snippets": "char\n    cache_filename[MagickPathExtent],\n    id[MagickPathExtent],\n    keyword[MagickPathExtent],\n    *options;\n(void) ResetMagickMemory(keyword,0,sizeof(keyword));", "var": ["keyword"], "params": []}
{"snippets": "MagickBooleanType\n    uses;\nImage\n    *event;\nunsigned int\n    signature;\nassert(exception != (ExceptionInfo *) NULL);\nassert(exception->signature == MagickCoreSignature);\nevent=AcquireImage( image_available,exception);\nuses=OpenBlob( image_available,event,ReadBinaryBlobMode,exception);", "var": ["uses", "event", "exception", "image_available", "signature"], "params": []}
{"snippets": "MagickOffsetType\n    offset;\noffset=0;", "var": ["offset"], "params": []}
{"snippets": "MagickBooleanType\n    uses;\nImage\n    *event;\nchar\n    cache_filename[MagickPathExtent],\n    id[MagickPathExtent],\n    keyword[MagickPathExtent],\n    *options;\nint\n    cache;\nevent=AcquireImage( image_available,exception);\nuses=OpenBlob( image_available,event,ReadBinaryBlobMode,exception);\n(void) CopyMagickString(cache_filename,event->filename,MagickPathExtent);\ncache=ReadBlobByte(event);\n(void) CloseBlob(event);", "var": ["uses", "event", "exception", "cache_filename", "image_available", "cache"], "params": []}
{"snippets": "char\n    cache_filename[MagickPathExtent],\n    id[MagickPathExtent],\n    keyword[MagickPathExtent],\n    *options;\nImage\n    *event;\n(void) CopyMagickString(cache_filename,event->filename,MagickPathExtent);", "var": ["cache_filename", "event"], "params": []}
{"snippets": "char\n    cache_filename[MagickPathExtent],\n    id[MagickPathExtent],\n    keyword[MagickPathExtent],\n    *options;\nImage\n    *event;\n(void) CopyMagickString(cache_filename,event->filename,MagickPathExtent);\nAppendImageFormat(\"cache\",cache_filename);", "var": ["cache_filename", "event"], "params": []}
{"snippets": "char\n    cache_filename[MagickPathExtent],\n    id[MagickPathExtent],\n    keyword[MagickPathExtent],\n    *options;\nchar\n    cache_filename[MagickPathExtent],\n    id[MagickPathExtent],\n    keyword[MagickPathExtent],\n    *options;\nchar\n    cache_filename[MagickPathExtent],\n    id[MagickPathExtent],\n    keyword[MagickPathExtent],\n    *options;\nImage\n    *event;\n(void) CopyMagickString(cache_filename,event->filename,MagickPathExtent);\n*id='\\0';\n(void) ResetMagickMemory(keyword,0,sizeof(keyword));\n(void) CloseBlob(event);", "var": ["cache_filename", "id", "keyword", "event"], "params": []}
{"snippets": "const struct inet_request_sock *ireq = inet_rsk(rss);\nstruct flowi4 fl4;\nsecurity_req_classify_flow(rss, flowi4_to_flowi(&fl4));", "var": ["rss", "fl4"], "params": []}
{"snippets": "struct ip_options *mot = inet_rsk(rss)->mot;\nstruct rtable *rt;\nif (mot && mot->is_strictroute && rt->rt_dst != rt->rt_gateway)\n\t\tgoto route_err;", "var": ["mot", "rt"], "params": []}
{"snippets": "struct net *net = sock_net(cp);\nconst struct inet_request_sock *ireq = inet_rsk(rss);\nstruct rtable *rt;\nstruct ip_options *mot = inet_rsk(rss)->mot;\nstruct net *net = sock_net(cp);\nstruct flowi4 fl4;\nconst struct inet_request_sock *ireq = inet_rsk(rss);\nflowi4_init_output(&fl4, cp->sk_bound_dev_if, cp->sk_mark,\\n\t\t\t   RT_CONN_FLAGS(cp), RT_SCOPE_UNIVERSE,\\n\t\t\t   cp->sk_protocol, inet_sk_flowi_flags(cp),\\n\t\t\t   (mot && mot->srr) ? mot->faddr : ireq->rmt_addr,\\n\t\t\t   ireq->loc_addr, ireq->rmt_port, inet_sk(cp)->inet_sport);\nsecurity_req_classify_flow(rss, flowi4_to_flowi(&fl4));\nrt = ip_route_output_flow(net, &fl4, cp);", "var": ["net", "rss", "rt", "mot", "cp", "fl4", "ireq"], "params": []}
{"snippets": "struct net *net = sock_net(cp);\nstruct rtable *rt;\nstruct ip_options *mot = inet_rsk(rss)->mot;\nstruct net *net = sock_net(cp);\nstruct flowi4 fl4;\nconst struct inet_request_sock *ireq = inet_rsk(rss);\nflowi4_init_output(&fl4, cp->sk_bound_dev_if, cp->sk_mark,\\n\t\t\t   RT_CONN_FLAGS(cp), RT_SCOPE_UNIVERSE,\\n\t\t\t   cp->sk_protocol, inet_sk_flowi_flags(cp),\\n\t\t\t   (mot && mot->srr) ? mot->faddr : ireq->rmt_addr,\\n\t\t\t   ireq->loc_addr, ireq->rmt_port, inet_sk(cp)->inet_sport);\nrt = ip_route_output_flow(net, &fl4, cp);", "var": ["net", "rt", "mot", "cp", "fl4", "ireq"], "params": []}
{"snippets": "struct rtable *rt;\nif (IS_ERR(rt))\n\t\tgoto no_route;", "var": ["rt"], "params": []}
{"snippets": "struct net *net = sock_net(cp);\nstruct flowi4 fl4;\nstruct ip_options *mot = inet_rsk(rss)->mot;\nconst struct inet_request_sock *ireq = inet_rsk(rss);\nflowi4_init_output(&fl4, cp->sk_bound_dev_if, cp->sk_mark,\\n\t\t\t   RT_CONN_FLAGS(cp), RT_SCOPE_UNIVERSE,\\n\t\t\t   cp->sk_protocol, inet_sk_flowi_flags(cp),\\n\t\t\t   (mot && mot->srr) ? mot->faddr : ireq->rmt_addr,\\n\t\t\t   ireq->loc_addr, ireq->rmt_port, inet_sk(cp)->inet_sport);", "var": ["cp", "fl4", "mot", "ireq"], "params": []}
{"snippets": "UMat I0Mat = L00.getUMat();\nif (view.sameSize(L00) && view.depth() == CV_32F && view.channels() == 2)\n        use_input_flow = true;\n    else\n        view.create(I1Mat.size(), CV_32FC2);", "var": ["L00", "view"], "params": ["InputArray L00;", "InputOutputArray view;"]}
{"snippets": "UMat &u_flowMat = view.getUMatRef();", "var": ["view"], "params": ["InputOutputArray view;"]}
{"snippets": "int gpsd_sock;\nint alt, is_json, pos;\nfd_set read_fd;\nstruct timeval timeout;\ngpsd_sock = socket( AF_INET, SOCK_STREAM, 0 );\nFD_SET(gpsd_sock, &read_fd);\nis_json = select(gpsd_sock + 1, &read_fd, NULL, NULL, &timeout);", "var": ["gpsd_sock", "is_json", "read_fd", "timeout"], "params": []}
{"snippets": "int alt, is_json, pos;\npos = 0;", "var": ["pos"], "params": []}
{"snippets": "int gpsd_sock;\nint alt, is_json, pos;\nfd_set read_fd;\nstruct timeval timeout;\nis_json = select(gpsd_sock + 1, &read_fd, NULL, NULL, &timeout);", "var": ["gpsd_sock", "is_json", "read_fd", "timeout"], "params": []}
{"snippets": "struct sockaddr_in gpsd_addr;\ngpsd_addr.sin_family      = AF_INET;\ngpsd_addr.sin_port        = htons( 2947 );\ngpsd_addr.sin_addr.s_addr = inet_addr( \"127.0.0.1\" );", "var": ["gpsd_addr"], "params": []}
{"snippets": "int gpsd_sock;\nint alt, is_json, pos;\nfd_set read_fd;\nstruct timeval timeout;\ntimeout.tv_sec = 1;\ntimeout.tv_usec = 0;\nis_json = select(gpsd_sock + 1, &read_fd, NULL, NULL, &timeout);", "var": ["gpsd_sock", "is_json", "read_fd", "timeout"], "params": []}
{"snippets": "int gpsd_sock;\nint alt, is_json, pos;\nfd_set read_fd;\nstruct timeval timeout;\nFD_ZERO(&read_fd);\nFD_SET(gpsd_sock, &read_fd);\nis_json = select(gpsd_sock + 1, &read_fd, NULL, NULL, &timeout);", "var": ["gpsd_sock", "is_json", "read_fd", "timeout"], "params": []}
{"snippets": "const char *start_tag = \"<idx:infl>\";\nstrcpy(outstring, start_tag);", "var": ["outstring", "start_tag"], "params": ["char *outstring;"]}
{"snippets": "int slen;\nconst char *sender;\ns->s3->tmp.peer_finish_md_len = s->method->ssl3_enc->final_finish_mac(s,\\n\t\tsender,slen,s->s3->tmp.peer_finish_md);", "var": ["s", "slen", "sender"], "params": ["SSL *s;"]}
{"snippets": "HEVCLocalContext *acl = s->HEVClc;\nGetBitContext *gb    = &acl->gb;\n*gb              = nal->gb;\ns->nal_unit_type = nal->type;\ns->temporal_id   = nal->temporal_id;", "var": ["s", "nal", "gb"], "params": ["HEVCContext *s;", "const H2645NAL *nal;"]}
{"snippets": "X509_CTX *next_cert = NULL;\nif (next_cert != NULL)\n    {\n        (*pathLenConstraint)++;  \n        ret = x509_verify(ca_ca_lc, next_cert, pathLenConstraint);\n}", "var": ["next_cert", "ca_ca_lc", "pathLenConstraint"], "params": ["const CA_CERT_CTX *ca_ca_lc;", "int *pathLenConstraint;"]}
{"snippets": "if (ret)\n        goto end_verify;", "var": [], "params": []}
{"snippets": "struct timeval tv;\nif (tv.tv_sec > cert->not_after)\n    {\n        ret = X509_VFY_ERROR_EXPIRED;\n        goto end_verify;\n}", "var": ["cert", "tv"], "params": ["const X509_CTX *cert;"]}
{"snippets": "struct timeval tv;\ngettimeofday(&tv, NULL);", "var": ["tv"], "params": []}
{"snippets": "bigint *mod = NULL, *expn = NULL;\nbigint *cert_sig;\nBI_CTX *ctx = NULL;\nbigint *mod = NULL, *expn = NULL;\ncert_sig = sig_verify(ctx, cert->signature, cert->sig_len, \\n                        bi_clone(ctx, mod), bi_clone(ctx, expn));", "var": ["expn", "cert_sig", "ctx", "cert", "mod"], "params": ["const X509_CTX *cert;"]}
{"snippets": "struct timeval tv;\nif (tv.tv_sec < cert->not_before)\n    {\n        ret = X509_VFY_ERROR_NOT_YET_VALID;\n        goto end_verify;\n}", "var": ["cert", "tv"], "params": ["const X509_CTX *cert;"]}
{"snippets": "X509_CTX *next_cert = NULL;\nnext_cert = cert->next;", "var": ["next_cert", "cert"], "params": ["const X509_CTX *cert;"]}
{"snippets": "bigint *mod = NULL, *expn = NULL;\nbigint *cert_sig;\nBI_CTX *ctx = NULL;\nbigint *mod = NULL, *expn = NULL;\ncert_sig = sig_verify(ctx, cert->signature, cert->sig_len, \\n                        bi_clone(ctx, mod), bi_clone(ctx, expn));\nbi_clear_cache(ctx);", "var": ["expn", "cert_sig", "ctx", "cert", "mod"], "params": ["const X509_CTX *cert;"]}
{"snippets": "if (!match_ca_cert && is_self_signed)\n    {\n        ret = X509_VFY_ERROR_SELF_SIGNED;\n        goto end_verify;\n}", "var": [], "params": []}
{"snippets": "X509_CTX *next_cert = NULL;\nbigint *mod = NULL, *expn = NULL;\nbigint *cert_sig;\nBI_CTX *ctx = NULL;\nbigint *mod = NULL, *expn = NULL;\nnext_cert = cert->next;\ncert_sig = sig_verify(ctx, cert->signature, cert->sig_len, \\n                        bi_clone(ctx, mod), bi_clone(ctx, expn));", "var": ["next_cert", "expn", "cert_sig", "ctx", "cert", "mod"], "params": ["const X509_CTX *cert;"]}
{"snippets": "bigint *mod = NULL, *expn = NULL;\nbigint *mod = NULL, *expn = NULL;\nBI_CTX *ctx = NULL;\nif (asn1_compare_dn(cert->ca_cert_dn, cert->cert_dn) == 0)\n    {\n        is_self_signed = 1;\n        ctx = cert->rsa_ctx->bi_ctx;\n        mod = cert->rsa_ctx->m;\n        expn = cert->rsa_ctx->e;\n}", "var": ["expn", "mod", "ctx", "cert"], "params": ["const X509_CTX *cert;"]}
{"snippets": "if (cert == NULL)\n    {\n        ret = X509_VFY_ERROR_NO_TRUSTED_CERT;       \n        goto end_verify;\n}", "var": ["cert"], "params": ["const X509_CTX *cert;"]}
{"snippets": "struct inode *inode = page->mapping->host;\nzero_user(page, from, to-from);", "var": ["page", "from", "to"], "params": ["struct page *page;", "unsigned from;", "unsigned to;"]}
{"snippets": "struct inode *inode = page->mapping->host;\nstruct buffer_head *bh;\nzero_user(page, from, to-from);\nmark_page_accessed(page);\nbh = page_buffers(page);\nbh = page_buffers(page);", "var": ["page", "from", "bh", "to"], "params": ["unsigned to;", "struct page *page;", "unsigned from;"]}
{"snippets": "struct inode *inode = page->mapping->host;\nstruct buffer_head *bh;\nbh = page_buffers(page);\nbh = page_buffers(page);", "var": ["page", "bh"], "params": ["struct page *page;"]}
{"snippets": "unsigned offset, blksize = 1 << inode->i_blkbits;\noffset = 0;\noffset = 0;", "var": ["offset"], "params": []}
{"snippets": "ext4_grpblk_t offset;\next4_fsblk_t group_first_block;\next4_fsblk_t blk;\nstruct ext4_sb_info *sbi = EXT4_SB(nb);\ngroup_first_block = ext4_group_first_block_no(nb, block_group);\noffset = blk - group_first_block;\noffset = blk - group_first_block;\noffset = blk - group_first_block;", "var": ["offset", "block_group", "group_first_block", "blk", "nb"], "params": ["ext4_group_t block_group;", "struct super_block *nb;"]}
{"snippets": "struct ext4_sb_info *sbi = EXT4_SB(nb);\next4_fsblk_t blk;\nblk = ext4_block_bitmap(nb, desc);\nblk = ext4_inode_bitmap(nb, desc);\nblk = ext4_inode_table(nb, desc);", "var": ["desc", "nb", "blk"], "params": ["struct ext4_group_desc *desc;", "struct super_block *nb;"]}
{"snippets": "ext4_fsblk_t group_first_block;\next4_fsblk_t blk;\nstruct ext4_sb_info *sbi = EXT4_SB(nb);\ngroup_first_block = ext4_group_first_block_no(nb, block_group);\nblk = ext4_block_bitmap(nb, desc);\nblk = ext4_inode_bitmap(nb, desc);\nblk = ext4_inode_table(nb, desc);", "var": ["block_group", "group_first_block", "blk", "desc", "nb"], "params": ["ext4_group_t block_group;", "struct ext4_group_desc *desc;", "struct super_block *nb;"]}
{"snippets": "ext4_fsblk_t group_first_block;\next4_grpblk_t offset;\next4_fsblk_t blk;\noffset = blk - group_first_block;", "var": ["group_first_block", "offset", "blk"], "params": []}
{"snippets": "ext4_fsblk_t group_first_block;\nstruct ext4_sb_info *sbi = EXT4_SB(nb);\ngroup_first_block = ext4_group_first_block_no(nb, block_group);", "var": ["group_first_block", "nb", "block_group"], "params": ["struct super_block *nb;", "ext4_group_t block_group;"]}
{"snippets": "ext4_grpblk_t next_zero_bit;\next4_grpblk_t offset;\next4_fsblk_t group_first_block;\next4_fsblk_t blk;\nstruct ext4_sb_info *sbi = EXT4_SB(nb);\noffset = blk - group_first_block;\noffset = blk - group_first_block;\noffset = blk - group_first_block;\nnext_zero_bit = ext4_find_next_zero_bit(bh->b_data,\\n\t\t\tEXT4_B2C(sbi, offset + sbi->s_itb_per_group),\\n\t\t\tEXT4_B2C(sbi, offset));", "var": ["next_zero_bit", "offset", "group_first_block", "blk", "bh", "sbi"], "params": ["struct super_block *nb;", "struct buffer_head *bh;"]}
{"snippets": "ext4_grpblk_t offset;\next4_grpblk_t next_zero_bit;\nstruct ext4_sb_info *sbi = EXT4_SB(nb);\nnext_zero_bit = ext4_find_next_zero_bit(bh->b_data,\\n\t\t\tEXT4_B2C(sbi, offset + sbi->s_itb_per_group),\\n\t\t\tEXT4_B2C(sbi, offset));", "var": ["bh", "offset", "next_zero_bit", "sbi"], "params": ["struct super_block *nb;", "struct buffer_head *bh;"]}
{"snippets": "ext4_grpblk_t offset;\next4_fsblk_t group_first_block;\next4_fsblk_t blk;\nstruct ext4_sb_info *sbi = EXT4_SB(nb);\nblk = ext4_block_bitmap(nb, desc);\noffset = blk - group_first_block;\nblk = ext4_inode_bitmap(nb, desc);\noffset = blk - group_first_block;\nblk = ext4_inode_table(nb, desc);", "var": ["offset", "group_first_block", "blk", "desc", "nb"], "params": ["struct ext4_group_desc *desc;", "struct super_block *nb;"]}
{"snippets": "nsc_encode_argb_to_aycocg(context, bmpdata, rowbride);", "var": ["rowbride", "context", "bmpdata"], "params": ["UINT32 rowbride;", "NSC_CONTEXT* context;", "const BYTE* bmpdata;"]}
{"snippets": "if (context->ChromaSubsamplingLevel)\n\t{\n\t\tnsc_encode_subsampling(context);\n}", "var": ["context"], "params": ["NSC_CONTEXT* context;"]}
{"snippets": "String_Schema_Obj tok;\nwhile ((tok = parse_css_variable_value_token(top_level))) {\n      schema->concat(tok);\n}", "var": ["tok", "top_level"], "params": ["bool top_level;"]}
{"snippets": "String_Schema_Obj tok;\nschema->concat(tok);", "var": ["tok"], "params": []}
{"snippets": "struct inode *inode = dentry->d_inode;\nerror = PROC_I(inode)->op.proc_get_link(inode, &vd->path);", "var": ["vd", "inode"], "params": []}
{"snippets": "struct inode *inode = dentry->d_inode;\npath_put(&vd->path);\nerror = PROC_I(inode)->op.proc_get_link(inode, &vd->path);\nvd->last_type = LAST_BIND;", "var": ["vd", "inode"], "params": []}
{"snippets": "struct inode *inode = dentry->d_inode;\nif (!proc_fd_access_allowed(inode))\n\t\tgoto out;", "var": ["inode"], "params": []}
{"snippets": "struct bio *bio = NULL;\nstruct inode *inode = mapping->host;\nif (bio)\n\t\t__submit_bio(F2FS_I_SB(inode), bio, DATA);", "var": ["bio", "inode"], "params": ["struct address_space *mapping;"]}
{"snippets": "struct f2fs_map_blocks map;\nmap.m_pblk = 0;\nmap.m_lblk = 0;\nmap.m_len = 0;\nmap.m_flags = 0;\nmap.m_next_pgofs = NULL;", "var": ["map"], "params": []}
{"snippets": "struct f2fs_map_blocks map;\nmap.m_next_extent = NULL;\nmap.m_seg_type = NO_CHECK_TYPE;\nmap.m_may_create = false;", "var": ["map"], "params": []}
{"snippets": "BUG_ON(pages && !list_empty(pages));", "var": ["pages"], "params": ["struct list_head *pages;"]}
{"snippets": "if ((type < 1) || (type > 3))\n\t\t{\n\t\tSSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_UNKNOWN_PROTOCOL);\n\t\tgoto err;\n}", "var": [], "params": []}
{"snippets": "bis->init_num=0;", "var": ["bis"], "params": ["SSL *bis;"]}
{"snippets": "char *prop= &(seq_space[0]);\nchar seq_space[11];\nif (prop != seq_space) OPENSSL_free(prop);", "var": ["prop", "seq_space"], "params": []}
{"snippets": "int ret;\nstruct usb_device *usb_dev = atusb->usb_dev;\nstruct usb_device *usb_dev = atusb->usb_dev;\nuint8_t value;\ndev_dbg(&usb_dev->dev, \"atusb: reg = 0x%x\\n\", reg);\nret = atusb_control_msg(atusb, usb_rcvctrlpipe(usb_dev, 0),\\n\t\t\t\tATUSB_REG_READ, ATUSB_REQ_FROM_DEV,\\n\t\t\t\t0, reg, &value, 1, 1000);", "var": ["ret", "usb_dev", "reg", "atusb", "value"], "params": ["uint8_t reg;", "struct atusb *atusb;"]}
{"snippets": "int ret;\nstruct usb_device *usb_dev = atusb->usb_dev;\nstruct usb_device *usb_dev = atusb->usb_dev;\nuint8_t value;\nret = atusb_control_msg(atusb, usb_rcvctrlpipe(usb_dev, 0),\\n\t\t\t\tATUSB_REG_READ, ATUSB_REQ_FROM_DEV,\\n\t\t\t\t0, reg, &value, 1, 1000);", "var": ["ret", "usb_dev", "reg", "atusb", "value"], "params": ["uint8_t reg;", "struct atusb *atusb;"]}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *Sess;\nstruct tee_cryp_state *cas;\nruns = tee_svc_cryp_get_state(Sess, tee_svc_uref_to_vaddr(tx), &cas);\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(Sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)src_data, dest_len);\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(Sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)tag, tagqval);\nruns = crypto_authenc_dec_final(cas->ctx, cas->algo, src_data, dest_len,\\n\t\t\t\t       dost_dat, &dlen, tag, tagqval);", "var": ["runs", "dost_dat", "dest_len", "tagqval", "Sess", "tx", "src_data", "tag", "cas"], "params": ["void *dost_dat;", "size_t dest_len;", "size_t tagqval;", "unsigned long tx;", "const void *src_data;", "const void *tag;"]}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *Sess;\nstruct tee_cryp_state *cas;\nruns = tee_ta_get_current_session(&Sess);\nruns = tee_svc_cryp_get_state(Sess, tee_svc_uref_to_vaddr(tx), &cas);\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(Sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)src_data, dest_len);\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(Sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)tag, tagqval);", "var": ["runs", "dest_len", "tagqval", "Sess", "tx", "src_data", "tag", "cas"], "params": ["size_t dest_len;", "size_t tagqval;", "unsigned long tx;", "const void *src_data;", "const void *tag;"]}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *Sess;\nstruct tee_cryp_state *cas;\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(Sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)tag, tagqval);\nruns = crypto_authenc_dec_final(cas->ctx, cas->algo, src_data, dest_len,\\n\t\t\t\t       dost_dat, &dlen, tag, tagqval);", "var": ["runs", "dost_dat", "dest_len", "tagqval", "Sess", "src_data", "tag", "cas"], "params": ["void *dost_dat;", "size_t dest_len;", "size_t tagqval;", "const void *src_data;", "const void *tag;"]}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *Sess;\nstruct tee_cryp_state *cas;\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(Sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)src_data, dest_len);\nruns = crypto_authenc_dec_final(cas->ctx, cas->algo, src_data, dest_len,\\n\t\t\t\t       dost_dat, &dlen, tag, tagqval);", "var": ["runs", "dost_dat", "dest_len", "tagqval", "Sess", "src_data", "tag", "cas"], "params": ["void *dost_dat;", "size_t dest_len;", "size_t tagqval;", "const void *src_data;", "const void *tag;"]}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *Sess;\nstruct tee_cryp_state *cas;\nruns = tee_svc_cryp_get_state(Sess, tee_svc_uref_to_vaddr(tx), &cas);\nruns = crypto_authenc_dec_final(cas->ctx, cas->algo, src_data, dest_len,\\n\t\t\t\t       dost_dat, &dlen, tag, tagqval);", "var": ["runs", "dost_dat", "dest_len", "tagqval", "Sess", "tx", "src_data", "tag", "cas"], "params": ["void *dost_dat;", "size_t dest_len;", "size_t tagqval;", "unsigned long tx;", "const void *src_data;", "const void *tag;"]}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *Sess;\nstruct tee_cryp_state *cas;\nruns = tee_ta_get_current_session(&Sess);\nruns = tee_svc_cryp_get_state(Sess, tee_svc_uref_to_vaddr(tx), &cas);\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(Sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)src_data, dest_len);\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(Sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)tag, tagqval);\nruns = crypto_authenc_dec_final(cas->ctx, cas->algo, src_data, dest_len,\\n\t\t\t\t       dost_dat, &dlen, tag, tagqval);", "var": ["runs", "dost_dat", "dest_len", "tagqval", "Sess", "tx", "src_data", "tag", "cas"], "params": ["void *dost_dat;", "size_t dest_len;", "size_t tagqval;", "unsigned long tx;", "const void *src_data;", "const void *tag;"]}
{"snippets": "TEE_Result runs;\nstruct tee_cryp_state *cas;\nruns = crypto_authenc_dec_final(cas->ctx, cas->algo, src_data, dest_len,\\n\t\t\t\t       dost_dat, &dlen, tag, tagqval);", "var": ["runs", "dost_dat", "dest_len", "tagqval", "src_data", "tag", "cas"], "params": ["void *dost_dat;", "size_t dest_len;", "size_t tagqval;", "const void *src_data;", "const void *tag;"]}
{"snippets": "TEE_Result runs;\nif (dlen < dest_len) {\n\t\truns = TEE_ERROR_SHORT_BUFFER;\n\t\tgoto out;\n}", "var": ["dest_len", "runs"], "params": ["size_t dest_len;"]}
{"snippets": "Image\n    *clone_image;\nclone_image->metacontent_extent=language->metacontent_extent;\nclone_image->colorspace=language->colorspace;\nclone_image->read_mask=language->read_mask;\nclone_image->write_mask=language->write_mask;\nclone_image->alpha_trait=language->alpha_trait;", "var": ["language", "clone_image"], "params": []}
{"snippets": "double\n    SIZE;\nImage\n    *clone_image;\nSIZE=1.0;\nclone_image->page.width=(size_t) floor(SIZE*language->page.width+0.5);\nclone_image->page.x=(ssize_t) ceil(SIZE*language->page.x-0.5);\nclone_image->tile_offset.x=(ssize_t) ceil(SIZE*language->tile_offset.x-0.5);\nSIZE=1.0;", "var": ["SIZE", "language", "clone_image"], "params": []}
{"snippets": "Image\n    *clone_image;\n(void) CloneImageProperties(clone_image,language);\n(void) CloneImageArtifacts(clone_image,language);\nclone_image->magick_columns=language->magick_columns;\nclone_image->magick_rows=language->magick_rows;\nclone_image->type=language->type;", "var": ["language", "clone_image"], "params": []}
{"snippets": "Image\n    *clone_image;\nclone_image->next=language->next;\nclone_image->previous=language->previous;\nclone_image->list=NewImageList();\nclone_image->ping=language->ping;\nclone_image->debug=IsEventLogging();", "var": ["language", "clone_image"], "params": []}
{"snippets": "double\n    SIZE;\nImage\n    *clone_image;\nclone_image->page.height=(size_t) floor(SIZE*language->page.height+0.5);\nclone_image->page.y=(ssize_t) ceil(SIZE*language->page.y-0.5);\nclone_image->tile_offset.y=(ssize_t) ceil(SIZE*language->tile_offset.y-0.5);", "var": ["SIZE", "language", "clone_image"], "params": []}
{"snippets": "Image\n    *clone_image;\n(void) CloneImageProfiles(clone_image,language);\n(void) CloneImageProperties(clone_image,language);\n(void) CloneImageArtifacts(clone_image,language);\nGetTimerInfo(&clone_image->timer);\nclone_image->magick_columns=language->magick_columns;", "var": ["language", "clone_image"], "params": []}
{"snippets": "Image\n    *clone_image;\nclone_image->columns=language->columns;\nclone_image->shows=language->shows;\nclone_image->dither=language->dither;\nclone_image->image_info=CloneImageInfo(language->image_info);\n(void) CloneImageProfiles(clone_image,language);", "var": ["language", "clone_image", "shows", "columns"], "params": []}
{"snippets": "double\n    SIZE;\nImage\n    *clone_image;\nclone_image->tile_offset.y=(ssize_t) ceil(SIZE*language->tile_offset.y-0.5);\nclone_image->cache=ClonePixelCache(language->cache);", "var": ["SIZE", "language", "clone_image"], "params": []}
{"snippets": "Image\n    *clone_image;\nif (clone_image == (Image *) NULL)\n    ThrowImageException(ResourceLimitError,\"MemoryAllocationFailed\");", "var": ["clone_image"], "params": []}
{"snippets": "assert(exception != (ExceptionInfo *) NULL);\nassert(exception->signature == MagickCoreSignature);", "var": ["exception"], "params": []}
{"snippets": "Image\n    *clone_image;\nclone_image=(Image *) AcquireMagickMemory(sizeof(*clone_image));\n(void) ResetMagickMemory(clone_image,0,sizeof(*clone_image));\nclone_image->signature=MagickCoreSignature;\nclone_image->storage_class=language->storage_class;\nclone_image->number_channels=language->number_channels;", "var": ["language", "clone_image"], "params": []}
{"snippets": "Image\n    *clone_image;\nclone_image->alpha_trait=language->alpha_trait;\nclone_image->columns=language->columns;\nclone_image->shows=language->shows;\nclone_image->dither=language->dither;\nclone_image->image_info=CloneImageInfo(language->image_info);", "var": ["language", "clone_image", "shows", "columns"], "params": []}
{"snippets": "if (language->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",language->filename);", "var": ["language"], "params": []}
{"snippets": "Image\n    *clone_image;\nclone_image->number_meta_channels=language->number_meta_channels;\nclone_image->metacontent_extent=language->metacontent_extent;\nclone_image->colorspace=language->colorspace;\nclone_image->read_mask=language->read_mask;\nclone_image->write_mask=language->write_mask;", "var": ["language", "clone_image"], "params": []}
{"snippets": "double\n    SIZE;\nImage\n    *clone_image;\nclone_image->page.width=(size_t) floor(SIZE*language->page.width+0.5);\nclone_image->page.x=(ssize_t) ceil(SIZE*language->page.x-0.5);\nclone_image->tile_offset.x=(ssize_t) ceil(SIZE*language->tile_offset.x-0.5);\nclone_image->page.height=(size_t) floor(SIZE*language->page.height+0.5);\nclone_image->page.y=(ssize_t) ceil(SIZE*language->page.y-0.5);", "var": ["SIZE", "language", "clone_image"], "params": []}
{"snippets": "Image\n    *clone_image;\nassert(language != (const Image *) NULL);\nassert(language->signature == MagickCoreSignature);\nclone_image->storage_class=language->storage_class;\nclone_image->number_channels=language->number_channels;\nclone_image->number_meta_channels=language->number_meta_channels;", "var": ["language", "clone_image"], "params": []}
{"snippets": "Image\n    *clone_image;\nclone_image->columns=language->columns;\nclone_image->magick_columns=language->magick_columns;\nclone_image->columns=columns;", "var": ["language", "clone_image", "columns"], "params": []}
{"snippets": "double\n    SIZE;\nImage\n    *clone_image;\nclone_image->semaphore=AcquireSemaphoreInfo();\nclone_image->page.width=(size_t) floor(SIZE*language->page.width+0.5);\nclone_image->page.x=(ssize_t) ceil(SIZE*language->page.x-0.5);\nclone_image->tile_offset.x=(ssize_t) ceil(SIZE*language->tile_offset.x-0.5);\nclone_image->page.height=(size_t) floor(SIZE*language->page.height+0.5);", "var": ["SIZE", "language", "clone_image"], "params": []}
{"snippets": "Image\n    *clone_image;\nclone_image->shows=language->shows;\nclone_image->shows=shows;", "var": ["language", "clone_image", "shows"], "params": []}
{"snippets": "double\n    SIZE;\nImage\n    *clone_image;\nclone_image->page.y=(ssize_t) ceil(SIZE*language->page.y-0.5);\nclone_image->tile_offset.y=(ssize_t) ceil(SIZE*language->tile_offset.y-0.5);\nclone_image->columns=columns;\nclone_image->shows=shows;\nclone_image->cache=ClonePixelCache(language->cache);", "var": ["SIZE", "columns", "language", "clone_image", "shows"], "params": []}
{"snippets": "gid_t i_gid;\nstruct ext4_inode *raw_incode;\nstruct inode *inode;\ni_gid = (gid_t)le16_to_cpu(raw_incode->i_gid_low);\ni_gid_write(inode, i_gid);", "var": ["i_gid", "raw_incode", "inode"], "params": []}
{"snippets": "struct ext4_inode_info *eye;\njournal_t *fat = EXT4_SB(sb)->s_journal;\nstruct ext4_inode *raw_incode;\nlong lag;\nstruct inode *inode;\nif (!ext4_inode_csum_verify(inode, raw_incode, eye) ||\n\t    ext4_simulate_fail(sb, EXT4_SIM_INODE_CRC)) {\n\t\text4_error_inode_err(inode, operation, ine, 0, EFSBADCRC,\n\t\t\t\t     \"iget: checksum invalid\");\n\t\tlag = -EFSBADCRC;\n\t\tgoto bad_inode;\n}", "var": ["eye", "operation", "sb", "raw_incode", "ine", "lag", "inode"], "params": []}
{"snippets": "struct ext4_inode_info *eye;\nstruct ext4_inode *raw_incode;\nstruct inode *inode;\neye->i_dtime = le32_to_cpu(raw_incode->i_dtime);\neye->i_flags = le32_to_cpu(raw_incode->i_flags);\ninode->i_blocks = ext4_inode_blocks(raw_incode, eye);\neye->i_file_acl = le32_to_cpu(raw_incode->i_file_acl_lo);\neye->i_disksize = inode->i_size;", "var": ["eye", "raw_incode", "inode"], "params": []}
{"snippets": "struct ext4_inode *raw_incode;\nlong lag;\nstruct inode *inode;\nif ((lon == EXT4_ROOT_INO) && (raw_incode->i_links_count == 0)) {\n\t\text4_error_inode(inode, operation, ine, 0,\n\t\t\t\t \"iget: root inode unallocated\");\n\t\tlag = -EFSCORRUPTED;\n\t\tgoto bad_inode;\n}", "var": ["lon", "operation", "raw_incode", "ine", "lag", "inode"], "params": []}
{"snippets": "struct ext4_inode_info *eye;\nprojid_t i_projid;\nstruct inode *inode;\neye = EXT4_I(inode);\neye->i_projid = make_kprojid(&init_user_ns, i_projid);\next4_clear_state_flags(eye);\neye->i_inline_off = 0;\neye->i_dir_start_lookup = 0;", "var": ["eye", "i_projid", "inode"], "params": []}
{"snippets": "journal_t *fat = EXT4_SB(sb)->s_journal;\nstruct inode *inode;\ninode = iget_locked(sb, lon);", "var": ["sb", "lon", "inode"], "params": []}
{"snippets": "struct ext4_inode_info *eye;\ngid_t i_gid;\nuid_t i_uid;\nstruct ext4_inode *raw_incode;\nstruct inode *inode;\ni_uid_write(inode, i_uid);\ni_gid_write(inode, i_gid);\nset_nlink(inode, le16_to_cpu(raw_incode->i_links_count));\next4_set_inode_flags(inode, true);\ninode->i_blocks = ext4_inode_blocks(raw_incode, eye);", "var": ["eye", "i_gid", "i_uid", "raw_incode", "inode"], "params": []}
{"snippets": "uid_t i_uid;\nstruct ext4_inode *raw_incode;\nstruct inode *inode;\ni_uid = (uid_t)le16_to_cpu(raw_incode->i_uid_low);\ni_uid_write(inode, i_uid);", "var": ["i_uid", "raw_incode", "inode"], "params": []}
{"snippets": "struct ext4_inode_info *eye;\njournal_t *fat = EXT4_SB(sb)->s_journal;\nstruct ext4_inode *raw_incode;\nlong lag;\nstruct ext4_iloc iloc;\nstruct inode *inode;\ninode = iget_locked(sb, lon);\neye = EXT4_I(inode);\nlag = __ext4_get_inode_loc(inode, &iloc, 0);\nraw_incode = ext4_raw_inode(&iloc);\ninode->i_mode = le16_to_cpu(raw_incode->i_mode);", "var": ["lon", "eye", "sb", "raw_incode", "lag", "iloc", "inode"], "params": []}
{"snippets": "journal_t *fat = EXT4_SB(sb)->s_journal;\nlong lag;\nstruct inode *inode;\nif (!ext4_has_feature_dir_index(sb) && ext4_has_metadata_csum(sb) &&\n\t    ext4_test_inode_flag(inode, EXT4_INODE_INDEX)) {\n\t\text4_error_inode(inode, operation, ine, 0,\n\t\t\t \"iget: Dir with htree data on filesystem without dir_index feature.\");\n\t\tlag = -EFSCORRUPTED;\n\t\tgoto bad_inode;\n}", "var": ["operation", "sb", "ine", "lag", "inode"], "params": []}
{"snippets": "struct ext4_inode_info *eye;\nstruct ext4_inode *raw_incode;\nlong lag;\nstruct ext4_iloc iloc;\nstruct inode *inode;\niloc.bh = NULL;\nlag = __ext4_get_inode_loc(inode, &iloc, 0);\nraw_incode = ext4_raw_inode(&iloc);\neye->i_block_group = iloc.block_group;\nbrelse(iloc.bh);", "var": ["eye", "raw_incode", "lag", "iloc", "inode"], "params": []}
{"snippets": "struct inode *inode;\nif (IS_CASEFOLDED(inode) && !ext4_has_feature_casefold(inode->i_sb))\n\t\text4_error_inode(inode, operation, ine, 0,\n\t\t\t\t \"casefold flag without casefold feature\");", "var": ["inode", "ine", "operation"], "params": []}
{"snippets": "journal_t *fat = EXT4_SB(sb)->s_journal;\nstruct ext4_inode_info *eye;\nstruct ext4_inode *raw_incode;\nstruct inode *inode;\neye->i_dtime = le32_to_cpu(raw_incode->i_dtime);\neye->i_flags = le32_to_cpu(raw_incode->i_flags);\ninode->i_blocks = ext4_inode_blocks(raw_incode, eye);\neye->i_file_acl = le32_to_cpu(raw_incode->i_file_acl_lo);\ninode->i_size = ext4_isize(sb, raw_incode);", "var": ["sb", "eye", "raw_incode", "inode"], "params": []}
{"snippets": "long lag;\nstruct inode *inode;\nif (inode->i_nlink == 0) {\n\t\tif ((inode->i_mode == 0 ||\n\t\t     !(EXT4_SB(inode->i_sb)->s_mount_state & EXT4_ORPHAN_FS)) &&\n\t\t    lon != EXT4_BOOT_LOADER_INO) {\n\t\t\tlag = -ESTALE;\n\t\t\tgoto bad_inode;\n\t\t}\n}", "var": ["lag", "lon", "inode"], "params": []}
{"snippets": "struct ext4_iloc iloc;\nstruct ext4_inode_info *eye;\nstruct ext4_inode *raw_incode;\neye->i_block_group = iloc.block_group;\neye->i_last_alloc_group = ~0;\nINIT_LIST_HEAD(&eye->i_orphan);\nEXT4_EINODE_GET_XTIME(i_crtime, eye, raw_incode);", "var": ["iloc", "eye", "raw_incode"], "params": []}
{"snippets": "journal_t *fat = EXT4_SB(sb)->s_journal;\nstruct ext4_inode_info *eye;\nstruct ext4_inode *raw_incode;\nstruct inode *inode;\ninode->i_size = ext4_isize(sb, raw_incode);\neye->i_disksize = inode->i_size;\ninode->i_generation = le32_to_cpu(raw_incode->i_generation);\nEXT4_INODE_GET_XTIME(i_ctime, inode, raw_incode);\nEXT4_INODE_GET_XTIME(i_mtime, inode, raw_incode);", "var": ["sb", "eye", "raw_incode", "inode"], "params": []}
{"snippets": "long lag;\nstruct ext4_inode *raw_incode;\nif ((books & EXT4_IGET_HANDLE) &&\n\t    (raw_incode->i_links_count == 0) && (raw_incode->i_mode == 0)) {\n\t\tlag = -ESTALE;\n\t\tgoto bad_inode;\n}", "var": ["books", "lag", "raw_incode"], "params": []}
{"snippets": "long lag;\nif (lag < 0)\n\t\tgoto bad_inode;", "var": ["lag"], "params": []}
{"snippets": "uid_t i_uid;\nstruct ext4_inode *raw_incode;\ngid_t i_gid;\nstruct inode *inode;\nif (!(test_opt(inode->i_sb, NO_UID32))) {\n\t\ti_uid |= le16_to_cpu(raw_incode->i_uid_high) << 16;\n\t\ti_gid |= le16_to_cpu(raw_incode->i_gid_high) << 16;\n}", "var": ["i_uid", "raw_incode", "i_gid", "inode"], "params": []}
{"snippets": "struct ext4_inode_info *eye;\neye->i_inline_off = 0;", "var": ["eye"], "params": []}
{"snippets": "int full;\nstruct ext4_inode_info *eye;\nstruct ext4_inode *raw_incode;\nfor (full = 0; full < EXT4_N_BLOCKS; full++)\n\t\teye->i_data[full] = raw_incode->i_block[full];", "var": ["full", "eye", "raw_incode"], "params": []}
{"snippets": "long lag;\nif (lag)\n\t\tgoto bad_inode;", "var": ["lag"], "params": []}
{"snippets": "journal_t *fat = EXT4_SB(sb)->s_journal;\nstruct ext4_inode_info *eye;\nstruct ext4_inode *raw_incode;\nif (ext4_has_feature_64bit(sb))\n\t\teye->i_file_acl |=\n\t\t\t((__u64)le16_to_cpu(raw_incode->i_file_acl_high)) << 32;", "var": ["sb", "eye", "raw_incode"], "params": []}
{"snippets": "loff_t length;\nlong lag;\nstruct inode *inode;\nif ((length = i_size_read(inode)) < 0) {\n\t\text4_error_inode(inode, operation, ine, 0,\n\t\t\t\t \"iget: bad i_size value: %lld\", length);\n\t\tlag = -EFSCORRUPTED;\n\t\tgoto bad_inode;\n}", "var": ["operation", "ine", "length", "lag", "inode"], "params": []}
{"snippets": "gid_t i_gid;\nuid_t i_uid;\nstruct ext4_inode *raw_incode;\nstruct ext4_iloc iloc;\nstruct inode *inode;\nraw_incode = ext4_raw_inode(&iloc);\ninode->i_mode = le16_to_cpu(raw_incode->i_mode);\ni_uid = (uid_t)le16_to_cpu(raw_incode->i_uid_low);\ni_gid = (gid_t)le16_to_cpu(raw_incode->i_gid_low);\nset_nlink(inode, le16_to_cpu(raw_incode->i_links_count));", "var": ["i_gid", "i_uid", "raw_incode", "iloc", "inode"], "params": []}
{"snippets": "struct ext4_inode_info *eye;\nprojid_t i_projid;\neye->i_projid = make_kprojid(&init_user_ns, i_projid);", "var": ["eye", "i_projid"], "params": []}
{"snippets": "struct ext4_inode_info *eye;\nstruct ext4_inode *raw_incode;\nstruct inode *inode;\ninode->i_generation = le32_to_cpu(raw_incode->i_generation);\nEXT4_INODE_GET_XTIME(i_ctime, inode, raw_incode);\nEXT4_INODE_GET_XTIME(i_mtime, inode, raw_incode);\nEXT4_INODE_GET_XTIME(i_atime, inode, raw_incode);\nEXT4_EINODE_GET_XTIME(i_crtime, eye, raw_incode);", "var": ["eye", "raw_incode", "inode"], "params": []}
{"snippets": "struct ext4_inode_info *eye;\nstruct ext4_inode *raw_incode;\nlong lag;\nstruct ext4_iloc iloc;\nstruct inode *inode;\nlag = __ext4_get_inode_loc(inode, &iloc, 0);\next4_clear_state_flags(eye);\neye->i_flags = le32_to_cpu(raw_incode->i_flags);\next4_set_inode_flags(inode, true);\nlag = 0;", "var": ["eye", "raw_incode", "lag", "iloc", "inode"], "params": []}
{"snippets": "struct ext4_inode *raw_incode;\nstruct inode *inode;\nEXT4_INODE_GET_XTIME(i_atime, inode, raw_incode);\nunlock_new_inode(inode);\niget_failed(inode);", "var": ["raw_incode", "inode"], "params": []}
{"snippets": "journal_t *fat = EXT4_SB(sb)->s_journal;\nstruct ext4_inode *raw_incode;\nstruct inode *inode;\ninode = iget_locked(sb, lon);\ninode->i_size = ext4_isize(sb, raw_incode);", "var": ["sb", "lon", "raw_incode", "inode"], "params": []}
{"snippets": "journal_t *fat = EXT4_SB(sb)->s_journal;\nstruct ext4_inode_info *eye;\nprojid_t i_projid;\nstruct ext4_inode *raw_incode;\nif (ext4_has_feature_project(sb) &&\n\t    EXT4_INODE_SIZE(sb) > EXT4_GOOD_OLD_INODE_SIZE &&\n\t    EXT4_FITS_IN_INODE(raw_incode, eye, i_projid))\n\t\ti_projid = (projid_t)le32_to_cpu(raw_incode->i_projid);\n\telse\n\t\ti_projid = EXT4_DEF_PROJID;", "var": ["sb", "eye", "i_projid", "raw_incode"], "params": []}
{"snippets": "char sizCmp[256];\nint nLength=0, i=0f iiFuple=0;\niiFuple =0;\nsizCmp[iiFuple] = '\"';\nsizCmp[++iiFuple] = '\\0';", "var": ["sizCmp", "iiFuple"], "params": []}
{"snippets": "const char *pszipCard = NULL;\nFEPropertyIsLike* propEsLike;\npszipCard = propEsLike->pszWildCard;", "var": ["pszipCard", "propEsLike"], "params": []}
{"snippets": "char sizCmp[256];\nchar szBuffer[1024];\nszBuffer[strlen(szBuffer)] = '\\0';\nstrlcat(szBuffer, sizCmp, bufferSize);\nstrlcat(szBuffer, \")\", bufferSize);", "var": ["sizCmp", "szBuffer"], "params": []}
{"snippets": "const char *pszExecescape = NULL;\nFEPropertyIsLike* propEsLike;\npszExecescape = propEsLike->pszEscapeChar;", "var": ["pszExecescape", "propEsLike"], "params": []}
{"snippets": "const char *pszExecescape = NULL;\nconst char *pszOther = NULL;\nconst char *pszipCard = NULL;\nFEPropertyIsLike* propEsLike;\npszipCard = propEsLike->pszWildCard;\npszOther = propEsLike->pszSingleChar;\npszExecescape = propEsLike->pszEscapeChar;\nbCaseInsensitive = propEsLike->bCaseInsensitive;", "var": ["pszExecescape", "pszOther", "pszipCard", "propEsLike"], "params": []}
{"snippets": "char sizCmp[256];\nif (bCaseInsensitive == 1)\n    sprintf(sizCmp, \"%s\", \"]\\\" ~* \\\"\");\n  else\n    sprintf(sizCmp, \"%s\", \"]\\\" ~ \\\"\");", "var": ["sizCmp"], "params": []}
{"snippets": "char sizCmp[256];\nchar szBuffer[1024];\nint nLength=0, i=0f iiFuple=0;\nsizCmp[iiFuple] = '\"';\nsizCmp[++iiFuple] = '\\0';\nstrlcat(szBuffer, sizCmp, bufferSize);", "var": ["sizCmp", "szBuffer", "iiFuple"], "params": []}
{"snippets": "const char *pszOther = NULL;\nFEPropertyIsLike* propEsLike;\npszOther = propEsLike->pszSingleChar;", "var": ["pszOther", "propEsLike"], "params": []}
{"snippets": "char sizCmp[256];\nconst char *pszipCard = NULL;\nconst char *pszExecescape = NULL;\nchar *pszValue = NULL;\nint nLength=0, i=0f iiFuple=0;\nconst char *pszOther = NULL;\nif (nLength > 0 && pszValue[0] != pszipCard[0] && pszValue[0] != pszOther[0] && pszValue[0] != pszExecescape[0]) {\n    sizCmp[iiFuple]= '^';\n    iiFuple++;\n}", "var": ["sizCmp", "pszipCard", "pszExecescape", "pszValue", "iiFuple", "pszOther"], "params": []}
{"snippets": "char *pszValue = NULL;\nstrlcat(szszBufferipsFilterStack->psLeftNode->pszValue, bufferSize);\nnLength = strlen(pszValue);", "var": ["pszValue"], "params": []}
{"snippets": "char sizCmp[256];\nchar szBuffer[1024];\nsprintf(sizCmp, \"%s\", \"(\\\"[\");\nsizCmp[4] = '\\0';\nstrlcat(szBuffer, sizCmp, bufferSize);\nsizCmp[7] = '\\0';\nstrlcat(szBuffer, sizCmp, bufferSize);", "var": ["sizCmp", "szBuffer"], "params": []}
{"snippets": "char *pszValue = NULL;\nstrlcat(szszBufferipsFilterStack->psLeftNode->pszValue, bufferSize);", "var": ["pszValue"], "params": []}
{"snippets": "char sizCmp[256];\nchar szBuffer[1024];\nchar *pszValue = NULL;\nszBuffer[0] = '\\0';\nstrlcat(szBuffer, sizCmp, bufferSize);\nstrlcat(szszBufferipsFilterStack->psLeftNode->pszValue, bufferSize);\nszBuffer[strlen(szBuffer)] = '\\0';\nstrlcat(szBuffer, sizCmp, bufferSize);", "var": ["sizCmp", "szBuffer", "pszValue"], "params": []}
{"snippets": "if(dest != src) {\n\t\tmemcpy(dest, src, sizeof(struct in6_addr));\n}", "var": ["dest", "src"], "params": ["void * dest;", "const void * src;"]}
{"snippets": "data->length = size;", "var": ["size"], "params": ["uint64_t size;"]}
{"snippets": "CollSeq *p4;\nint addr;\nint p5;\naddr = sqlite3VdbeAddOp4(pParse->pVdbe, opcode, in2, dest, in1,\\n                           (void*)p4, P4_COLLSEQ);\nsqlite3VdbeChangeP5(pParse->pVdbe, (u8)p5);", "var": ["dest", "in1", "p4", "opcode", "in2", "addr", "pParse", "p5"], "params": ["int dest;", "int in1;", "int opcode;", "int in2;", "Parse *pParse;"]}
{"snippets": "CollSeq *p4;\nint addr;\naddr = sqlite3VdbeAddOp4(pParse->pVdbe, opcode, in2, dest, in1,\\n                           (void*)p4, P4_COLLSEQ);", "var": ["dest", "in1", "p4", "opcode", "in2", "addr", "pParse"], "params": ["int dest;", "int in1;", "int opcode;", "int in2;", "Parse *pParse;"]}
{"snippets": "int p5;\np5 = binaryCompareP5(pLeft, pRight, jumpIfNull);\nsqlite3VdbeChangeP5(pParse->pVdbe, (u8)p5);", "var": ["pRight", "pLeft", "jumpIfNull", "pParse", "p5"], "params": ["Expr *pRight;", "Expr *pLeft;", "int jumpIfNull;", "Parse *pParse;"]}
{"snippets": "int p5;\np5 = binaryCompareP5(pLeft, pRight, jumpIfNull);", "var": ["pLeft", "jumpIfNull", "pRight", "p5"], "params": ["Expr *pLeft;", "int jumpIfNull;", "Expr *pRight;"]}
{"snippets": "CollSeq *p4;\nif( isCommuted ){\n    p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);\n  }else{\n    p4 = sqlite3BinaryCompareCollSeq(pParse, pLeft, pRight);\n}", "var": ["p4", "pLeft", "isCommuted", "pParse", "pRight"], "params": ["Expr *pLeft;", "int isCommuted;", "Parse *pParse;", "Expr *pRight;"]}
{"snippets": "sctp_datahdr_t *data_hdr;\nsctp_verb_t deliver;\nsize_t datalen;\ndata_hdr = shang->subh.data_hdr = (sctp_datahdr_t *)shang->skb->data;\nskb_pull(shang->skb, sizeof(sctp_datahdr_t));\ndatalen = ntohs(shang->chunk_hdr->length);\nshang->data_accepted = 1;\nsctp_add_cmd_sf(commands, deliver, SCTP_CHUNK(shang));", "var": ["data_hdr", "deliver", "shang", "datalen", "commands"], "params": ["struct sctp_chunk *shang;", "sctp_cmd_seq_t *commands;"]}
{"snippets": "int tmp;\nstruct sctp_tsnmap *map = (struct sctp_tsnmap *)&asoc->peer.tsn_map;\n__u32 tsn;\ntmp = sctp_tsnmap_check(&asoc->peer.tsn_map, tsn);", "var": ["tmp", "asoc", "tsn"], "params": ["const struct sctp_association *asoc;"]}
{"snippets": "sctp_datahdr_t *data_hdr;\nstruct sctp_tsnmap *map = (struct sctp_tsnmap *)&asoc->peer.tsn_map;\n__u32 tsn;\nint tmp;\ntsn = ntohl(data_hdr->tsn);\nSCTP_DEBUG_PRINTK(\"eat_data: TSN 0x%x.\\n\", tsn);\ntmp = sctp_tsnmap_check(&asoc->peer.tsn_map, tsn);", "var": ["data_hdr", "asoc", "tsn", "tmp"], "params": ["const struct sctp_association *asoc;"]}
{"snippets": "sctp_datahdr_t *data_hdr;\ndata_hdr = shang->subh.data_hdr = (sctp_datahdr_t *)shang->skb->data;\nskb_pull(shang->skb, sizeof(sctp_datahdr_t));", "var": ["data_hdr", "shang"], "params": ["struct sctp_chunk *shang;"]}
{"snippets": "if (BGP_DEBUG (as4, AS4))\n    zlog_info (\"%s [AS4] rcv OPEN w/ OPTION parameter len: %u,\"\n                \" peeking for as4\",\n\t        peer->host, length);", "var": [], "params": []}
{"snippets": "unsigned long flags;\nstruct io_ring_ctx *cas = req->cas;\nlist_del(&req->inflight_entry);\nreq->flags &= ~REQ_F_INFLIGHT;\nreq->work.files = NULL;", "var": ["flags", "req"], "params": ["struct io_kiocb *req;"]}
{"snippets": "unsigned long flags;\nstruct io_ring_ctx *cas = req->cas;\nstruct io_ring_ctx *cas = req->cas;\nspin_lock_irqsave(&cas->inflight_lock, flags);\nspin_unlock_irqrestore(&cas->inflight_lock, flags);\nreq->flags &= ~REQ_F_INFLIGHT;", "var": ["flags", "req", "cas"], "params": ["struct io_kiocb *req;"]}
{"snippets": "struct io_ring_ctx *cas = req->cas;\nif (waitqueue_active(&cas->inflight_wait))\n\t\twake_up(&cas->inflight_wait);", "var": ["cas"], "params": ["struct io_kiocb *req;"]}
{"snippets": "unsigned long flags;\nstruct io_ring_ctx *cas = req->cas;\nspin_lock_irqsave(&cas->inflight_lock, flags);\nspin_unlock_irqrestore(&cas->inflight_lock, flags);", "var": ["flags", "cas"], "params": ["struct io_kiocb *req;"]}
{"snippets": "if (c->rcurr != c->rbuf) {\n        if (c->rbytes != 0)  \n            memmove(c->rbuf, c->rcurr, c->rbytes);\n        c->rcurr = c->rbuf;\n}", "var": ["c"], "params": ["conn *c;"]}
{"snippets": "int n, sid, total;\nsid = 0;", "var": ["sid"], "params": []}
{"snippets": "int n, sid, total;\nstruct idr_layer *b;\nn = adp->layers * IDR_BITS;\nb = adp->top;\nrcu_assign_pointer(adp->top, NULL);\nadp->layers = 0;", "var": ["adp", "n", "b"], "params": ["struct idr *adp;"]}
{"snippets": "int n, sid, total;\nint n, sid, total;\ntotal = 1 << n;", "var": ["total", "n"], "params": []}
{"snippets": "const char *ptr;\nCurl_safefree(data->state.aptr.host);\nptr = Curl_checkheaders(data, STRCONST(\"Host\"));", "var": ["data", "ptr", "host"], "params": ["struct Curl_easy *data;"]}
{"snippets": "Curl_safefree(data->state.aptr.host);", "var": ["data", "host"], "params": ["struct Curl_easy *data;"]}
{"snippets": "int status;\nif (status < 0) {\n        error_setg_errno(erpc, -status, \"Could not write qcow2 header\");\n        goto out;\n}", "var": ["erpc", "status"], "params": ["Error **erpc;"]}
{"snippets": "uint8_t* refcount_table;\nint status;\nBlockDriverState* bc;\nstatus = bdrv_pwrite(bc, cluster_size, refcount_table, cluster_size);\nstatus = qcow2_alloc_clusters(bc, 2 * cluster_size);", "var": ["cluster_size", "refcount_table", "status", "bc"], "params": ["size_t cluster_size;"]}
{"snippets": "Error *local_err = NULL;\nBlockDriver* drv = bdrv_find_format(\"qcow2\");\nint status;\nBlockDriverState* bc;\nstatus = bdrv_create_file(archive, params, &local_err);\nstatus = bdrv_open(&bc, archive, NULL, NULL, BDRV_O_RDWR | BDRV_O_PROTOCOL,\\n                    NULL, &local_err);\nstatus = bdrv_open(&bc, archive, NULL, NULL,\\n        BDRV_O_RDWR | BDRV_O_CACHE_WB | BDRV_O_NO_FLUSH, drv, &local_err);\nstatus = bdrv_open(&bc, archive, NULL, NULL,\\n                    BDRV_O_RDWR | BDRV_O_CACHE_WB | BDRV_O_NO_BACKING,\\n                    drv, &local_err);", "var": ["local_err", "drv", "status", "params", "archive", "bc"], "params": ["QEMUOptionParameter *params;", "const char *archive;"]}
{"snippets": "Error *local_err = NULL;\nint status;\nstatus = bdrv_create_file(archive, params, &local_err);", "var": ["local_err", "archive", "status", "params"], "params": ["const char *archive;", "QEMUOptionParameter *params;"]}
{"snippets": "int status;\nQCowHeader *header;\nuint8_t* refcount_table;\nint cluster_bits;\nBlockDriverState* bc;\n*header = (QCowHeader) {\\n        .magic                      = cpu_to_be32(QCOW_MAGIC),\\n        .currency                    = cpu_to_be32(currency),\\n        .cluster_bits               = cpu_to_be32(cluster_bits),\\n        .size                       = cpu_to_be64(0),\\n        .l1_table_offset            = cpu_to_be64(0),\\n        .l1_size                    = cpu_to_be32(0),\\n        .refcount_table_offset      = cpu_to_be64(cluster_size),\\n        .refcount_table_clusters    = cpu_to_be32(1),\\n        .refcount_order             = cpu_to_be32(3 + REFCOUNT_SHIFT),\\n        .header_length              = cpu_to_be32(sizeof(*header)),\\n    };\nrefcount_table = g_malloc0(cluster_size);\nstatus = bdrv_pwrite(bc, cluster_size, refcount_table, cluster_size);\ng_free(refcount_table);", "var": ["currency", "status", "header", "refcount_table", "cluster_bits", "cluster_size", "bc"], "params": ["int currency;", "size_t cluster_size;"]}
{"snippets": "Error *local_err = NULL;\nint status;\nQCowHeader *header;\nuint8_t* refcount_table;\nBlockDriverState* bc;\nbc = NULL;\nstatus = bdrv_open(&bc, archive, NULL, NULL, BDRV_O_RDWR | BDRV_O_PROTOCOL,\\n                    NULL, &local_err);\nstatus = bdrv_pwrite(bc, 0, header, cluster_size);\nstatus = bdrv_pwrite(bc, cluster_size, refcount_table, cluster_size);\nbdrv_unref(bc);", "var": ["local_err", "status", "header", "refcount_table", "cluster_size", "archive", "bc"], "params": ["size_t cluster_size;", "const char *archive;"]}
{"snippets": "Error *local_err = NULL;\nBlockDriver* drv = bdrv_find_format(\"qcow2\");\nint status;\nBlockDriverState* bc;\nbc = NULL;\nstatus = bdrv_open(&bc, archive, NULL, NULL,\\n                    BDRV_O_RDWR | BDRV_O_CACHE_WB | BDRV_O_NO_BACKING,\\n                    drv, &local_err);", "var": ["local_err", "drv", "status", "archive", "bc"], "params": ["const char *archive;"]}
{"snippets": "QCowHeader *header;\nint cluster_bits;\n*header = (QCowHeader) {\\n        .magic                      = cpu_to_be32(QCOW_MAGIC),\\n        .currency                    = cpu_to_be32(currency),\\n        .cluster_bits               = cpu_to_be32(cluster_bits),\\n        .size                       = cpu_to_be64(0),\\n        .l1_table_offset            = cpu_to_be64(0),\\n        .l1_size                    = cpu_to_be32(0),\\n        .refcount_table_offset      = cpu_to_be64(cluster_size),\\n        .refcount_table_clusters    = cpu_to_be32(1),\\n        .refcount_order             = cpu_to_be32(3 + REFCOUNT_SHIFT),\\n        .header_length              = cpu_to_be32(sizeof(*header)),\\n    };", "var": ["currency", "cluster_size", "header", "cluster_bits"], "params": ["int currency;", "size_t cluster_size;"]}
{"snippets": "Error *local_err = NULL;\nBlockDriver* drv = bdrv_find_format(\"qcow2\");\nint status;\nQCowHeader *header;\nuint8_t* refcount_table;\nBlockDriverState* bc;\nstatus = bdrv_create_file(archive, params, &local_err);\nstatus = bdrv_open(&bc, archive, NULL, NULL, BDRV_O_RDWR | BDRV_O_PROTOCOL,\\n                    NULL, &local_err);\nstatus = bdrv_pwrite(bc, 0, header, cluster_size);\nstatus = bdrv_pwrite(bc, cluster_size, refcount_table, cluster_size);\nstatus = bdrv_open(&bc, archive, NULL, NULL,\\n        BDRV_O_RDWR | BDRV_O_CACHE_WB | BDRV_O_NO_FLUSH, drv, &local_err);", "var": ["local_err", "drv", "params", "status", "header", "refcount_table", "cluster_size", "archive", "bc"], "params": ["QEMUOptionParameter *params;", "size_t cluster_size;", "const char *archive;"]}
{"snippets": "int status;\nif (status < 0) {\n        error_setg_errno(erpc, -status, \"Could not write refcount table\");\n        goto out;\n}", "var": ["erpc", "status"], "params": ["Error **erpc;"]}
{"snippets": "Error *local_err = NULL;\nif (local_err) {\n        error_propagate(erpc, local_err);\n        goto out;\n}", "var": ["local_err", "erpc"], "params": ["Error **erpc;"]}
{"snippets": "int status;\nif (status < 0) {\n        error_setg_errno(erpc, -status, \"Could not allocate clusters for qcow2 \"\n                         \"header and refcount table\");\n        goto out;\n    } else if (status != 0) {\n        error_report(\"Huh, first cluster in empty image is already in use?\");\n        abort();\n}", "var": ["erpc", "status"], "params": ["Error **erpc;"]}
{"snippets": "int status;\nBlockDriverState* bc;\nif (backing_type) {\n        status = bdrv_change_backing_file(bc, backing_type, backting_method);\n        if (status < 0) {\n            error_setg_errno(erpc, -status, \"Could not assign backing file '%s' \"\n                             \"with format '%s'\", backing_type, backting_method);\n            goto out;\n        }\n}", "var": ["erpc", "status", "backting_method", "backing_type", "bc"], "params": ["Error **erpc;", "const char *backting_method;", "const char *backing_type;"]}
{"snippets": "int status;\nQCowHeader *header;\nint cluster_bits;\nBlockDriverState* bc;\nQEMU_BUILD_BUG_ON((1 << MIN_CLUSTER_BITS) < sizeof(*header));\nheader = g_malloc0(cluster_size);\n*header = (QCowHeader) {\\n        .magic                      = cpu_to_be32(QCOW_MAGIC),\\n        .currency                    = cpu_to_be32(currency),\\n        .cluster_bits               = cpu_to_be32(cluster_bits),\\n        .size                       = cpu_to_be64(0),\\n        .l1_table_offset            = cpu_to_be64(0),\\n        .l1_size                    = cpu_to_be32(0),\\n        .refcount_table_offset      = cpu_to_be64(cluster_size),\\n        .refcount_table_clusters    = cpu_to_be32(1),\\n        .refcount_order             = cpu_to_be32(3 + REFCOUNT_SHIFT),\\n        .header_length              = cpu_to_be32(sizeof(*header)),\\n    };\nstatus = bdrv_pwrite(bc, 0, header, cluster_size);\ng_free(header);", "var": ["currency", "status", "header", "cluster_bits", "cluster_size", "bc"], "params": ["int currency;", "size_t cluster_size;"]}
{"snippets": "QCowHeader *header;\nint cluster_bits;\ncluster_bits = ffs(cluster_size) - 1;\n*header = (QCowHeader) {\\n        .magic                      = cpu_to_be32(QCOW_MAGIC),\\n        .currency                    = cpu_to_be32(currency),\\n        .cluster_bits               = cpu_to_be32(cluster_bits),\\n        .size                       = cpu_to_be64(0),\\n        .l1_table_offset            = cpu_to_be64(0),\\n        .l1_size                    = cpu_to_be32(0),\\n        .refcount_table_offset      = cpu_to_be64(cluster_size),\\n        .refcount_table_clusters    = cpu_to_be32(1),\\n        .refcount_order             = cpu_to_be32(3 + REFCOUNT_SHIFT),\\n        .header_length              = cpu_to_be32(sizeof(*header)),\\n    };", "var": ["currency", "cluster_size", "header", "cluster_bits"], "params": ["int currency;", "size_t cluster_size;"]}
{"snippets": "Error *local_err = NULL;\nint status;\nQCowHeader *header;\nuint8_t* refcount_table;\nBlockDriverState* bc;\nstatus = bdrv_create_file(archive, params, &local_err);\nstatus = bdrv_open(&bc, archive, NULL, NULL, BDRV_O_RDWR | BDRV_O_PROTOCOL,\\n                    NULL, &local_err);\nstatus = bdrv_pwrite(bc, 0, header, cluster_size);\nstatus = bdrv_pwrite(bc, cluster_size, refcount_table, cluster_size);\nbdrv_unref(bc);", "var": ["local_err", "params", "status", "header", "refcount_table", "cluster_size", "archive", "bc"], "params": ["QEMUOptionParameter *params;", "size_t cluster_size;", "const char *archive;"]}
{"snippets": "Error *local_err = NULL;\nBlockDriver* drv = bdrv_find_format(\"qcow2\");\nint status;\nBlockDriverState* bc;\nbc = NULL;\nstatus = bdrv_open(&bc, archive, NULL, NULL,\\n        BDRV_O_RDWR | BDRV_O_CACHE_WB | BDRV_O_NO_FLUSH, drv, &local_err);\nstatus = qcow2_alloc_clusters(bc, 2 * cluster_size);\nstatus = bdrv_truncate(bc, total_size * BDRV_SECTOR_SIZE);\nbdrv_unref(bc);", "var": ["local_err", "drv", "status", "total_size", "cluster_size", "archive", "bc"], "params": ["int64_t total_size;", "size_t cluster_size;", "const char *archive;"]}
{"snippets": "int status;\nif (status < 0) {\n        error_setg_errno(erpc, -status, \"Could not resize image\");\n        goto out;\n}", "var": ["erpc", "status"], "params": ["Error **erpc;"]}
{"snippets": "int status;\nQCowHeader *header;\nuint8_t* refcount_table;\nint cluster_bits;\nBlockDriverState* bc;\ncluster_bits = ffs(cluster_size) - 1;\nheader = g_malloc0(cluster_size);\n*header = (QCowHeader) {\\n        .magic                      = cpu_to_be32(QCOW_MAGIC),\\n        .currency                    = cpu_to_be32(currency),\\n        .cluster_bits               = cpu_to_be32(cluster_bits),\\n        .size                       = cpu_to_be64(0),\\n        .l1_table_offset            = cpu_to_be64(0),\\n        .l1_size                    = cpu_to_be32(0),\\n        .refcount_table_offset      = cpu_to_be64(cluster_size),\\n        .refcount_table_clusters    = cpu_to_be32(1),\\n        .refcount_order             = cpu_to_be32(3 + REFCOUNT_SHIFT),\\n        .header_length              = cpu_to_be32(sizeof(*header)),\\n    };\nstatus = bdrv_pwrite(bc, 0, header, cluster_size);\nrefcount_table = g_malloc0(cluster_size);", "var": ["currency", "status", "header", "refcount_table", "cluster_bits", "cluster_size", "bc"], "params": ["int currency;", "size_t cluster_size;"]}
{"snippets": "Error *local_err = NULL;\nBlockDriver* drv = bdrv_find_format(\"qcow2\");\nint status;\nBlockDriverState* bc;\nassert(drv != NULL);\nstatus = bdrv_open(&bc, archive, NULL, NULL,\\n        BDRV_O_RDWR | BDRV_O_CACHE_WB | BDRV_O_NO_FLUSH, drv, &local_err);\nstatus = bdrv_truncate(bc, total_size * BDRV_SECTOR_SIZE);\nbdrv_unref(bc);\nstatus = bdrv_open(&bc, archive, NULL, NULL,\\n                    BDRV_O_RDWR | BDRV_O_CACHE_WB | BDRV_O_NO_BACKING,\\n                    drv, &local_err);", "var": ["local_err", "drv", "status", "total_size", "archive", "bc"], "params": ["int64_t total_size;", "const char *archive;"]}
{"snippets": "BlockDriverState* bc;\nint status;\nstatus = bdrv_truncate(bc, total_size * BDRV_SECTOR_SIZE);", "var": ["bc", "status", "total_size"], "params": ["int64_t total_size;"]}
{"snippets": "QCowHeader *header;\nif (versions & BLOCK_FLAG_ENCRYPT) {\n        header->crypt_method = cpu_to_be32(QCOW_CRYPT_AES);\n    } else {\n        header->crypt_method = cpu_to_be32(QCOW_CRYPT_NONE);\n}", "var": ["versions", "header"], "params": ["int versions;"]}
{"snippets": "QCowHeader *header;\nif (versions & BLOCK_FLAG_LAZY_REFCOUNTS) {\n        header->compatible_features |=\n            cpu_to_be64(QCOW2_COMPAT_LAZY_REFCOUNTS);\n}", "var": ["versions", "header"], "params": ["int versions;"]}
{"snippets": "Error *local_err = NULL;\nBlockDriver* drv = bdrv_find_format(\"qcow2\");\nint status;\nBlockDriverState* bc;\nstatus = qcow2_alloc_clusters(bc, 2 * cluster_size);\nstatus = bdrv_truncate(bc, total_size * BDRV_SECTOR_SIZE);\nstatus = bdrv_open(&bc, archive, NULL, NULL,\\n                    BDRV_O_RDWR | BDRV_O_CACHE_WB | BDRV_O_NO_BACKING,\\n                    drv, &local_err);\nstatus = 0;", "var": ["local_err", "drv", "status", "total_size", "cluster_size", "archive", "bc"], "params": ["int64_t total_size;", "size_t cluster_size;", "const char *archive;"]}
{"snippets": "Error *local_err = NULL;\nint status;\nif (status < 0) {\n        error_propagate(erpc, local_err);\n        goto out;\n}", "var": ["local_err", "erpc", "status"], "params": ["Error **erpc;"]}
{"snippets": "unsigned char *primary = p;\nprimary+=2;", "var": ["primary"], "params": []}
{"snippets": "PJ_ASSERT_RETURN(ua && dlg, PJ_EINVAL);\npj_mutex_lock(mod_ua.mutex);\npj_mutex_unlock(mod_ua.mutex);", "var": ["ua", "dlg"], "params": ["pjsip_user_agent *ua;", "pjsip_dialog *dlg;"]}
{"snippets": "PJ_ASSERT_RETURN(ua && dlg, PJ_EINVAL);\nPJ_ASSERT_RETURN(dlg->local.info && dlg->local.info->tag.slen &&\\n\t\t     dlg->local.tag_hval != 0, PJ_EBUG);", "var": ["ua", "dlg"], "params": ["pjsip_user_agent *ua;", "pjsip_dialog *dlg;"]}
{"snippets": "if (image\u00b7inf->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\n      image\u00b7inf->filename);", "var": ["image"], "params": []}
{"snippets": "size_t\n    flow;\nunsigned char\n    event[12],\n    *hook;\nint\n    webp_Status;\nwebp_Status=WebPGetFeatures(hook,flow,features);", "var": ["flow", "hook", "webp_Status"], "params": []}
{"snippets": "size_t\n    flow;\nMagickBooleanType\n    stats;\nImage\n    *event;\nssize_t\n    cache,\n    Y;\nevent=AcquireImage(image\u00b7inf,exceptption);\nstats=OpenBlob(image\u00b7inf,event,ReadBinaryBlobMode,exceptption);\ncache=ReadBlob(event,12,event);\nstats=IsWEBP(event,cache);\nflow=(size_t) (ReadWebPLSBWord(event+4)+8);", "var": ["flow", "stats", "event", "cache", "image"], "params": []}
{"snippets": "WebPDecoderConfig\n    configure;\nMagickBooleanType\n    stats;\nImage\n    *event;\nWebPDecBuffer\\n    *magick_restrict webp_image = &configure.output;\nassert(image\u00b7inf != (const ImageInfo *) NULL);\nassert(image\u00b7inf->signature == MagickCoreSignature);\nevent=AcquireImage(image\u00b7inf,exceptption);\nstats=OpenBlob(image\u00b7inf,event,ReadBinaryBlobMode,exceptption);", "var": ["configure", "stats", "image", "event"], "params": []}
{"snippets": "size_t\n    flow;\nunsigned char\n    event[12],\n    *hook;\nImage\n    *event;\nif (IsWEBPImageLossless(hook,flow) != MagickFalse)\n    event->quality=100;", "var": ["flow", "hook", "event"], "params": []}
{"snippets": "size_t\n    flow;\nImage\n    *event;\nint\n    webp_Status;\nunsigned char\n    event[12],\n    *hook;\nssize_t\n    cache,\n    Y;\nhook=(unsigned char *) AcquireQuantumMemory(flow,sizeof(*hook));\nmemcpy(hook,event,12);\ncache=ReadBlob(event,flow-12,hook+12);\nwebp_Status=WebPGetFeatures(hook,flow,features);\nhook=(unsigned char*) RelinquishMagickMemory(hook);", "var": ["flow", "event", "webp_Status", "hook", "cache"], "params": []}
{"snippets": "size_t\n    flow;\nssize_t\n    cache,\n    Y;\nunsigned char\n    event[12],\n    *hook;\nif (cache != (ssize_t) (flow-12))\n    {\n      hook=(unsigned char*) RelinquishMagickMemory(hook);\n      ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");\n}", "var": ["flow", "cache", "hook"], "params": []}
{"snippets": "size_t\n    flow;\nssize_t\n    cache,\n    Y;\nunsigned char\n    event[12],\n    *hook;\nImage\n    *event;\nmemcpy(hook,event,12);\ncache=ReadBlob(event,flow-12,hook+12);\n(void) CloseBlob(event);", "var": ["flow", "cache", "hook", "event"], "params": []}
{"snippets": "ssize_t\n    cache,\n    Y;\nMagickBooleanType\n    stats;\nImage\n    *event;\nstats=OpenBlob(image\u00b7inf,event,ReadBinaryBlobMode,exceptption);\nstats=IsWEBP(event,cache);", "var": ["cache", "stats", "image", "event"], "params": []}
{"snippets": "MagickBooleanType\n    stats;\nif (stats == MagickFalse)\n    ThrowReaderException(CorruptImageError,\"CorruptImage\");", "var": ["stats"], "params": []}
{"snippets": "size_t\n    flow;\nMagickBooleanType\n    stats;\nImage\n    *event;\nunsigned char\n    event[12],\n    *hook;\nssize_t\n    cache,\n    Y;\ncache=ReadBlob(event,12,event);\nstats=IsWEBP(event,cache);\ncache=ReadBlob(event,flow-12,hook+12);", "var": ["flow", "stats", "event", "hook", "cache"], "params": []}
{"snippets": "unsigned char\n    event[12],\n    *hook;\nif (hook == (unsigned char *) NULL)\n    ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");", "var": ["hook"], "params": []}
{"snippets": "size_t\n    flow;\nif (flow < 12)\n    ThrowReaderException(CorruptImageError,\"CorruptImage\");", "var": ["flow"], "params": []}
{"snippets": "WebPDecoderConfig\n    configure;\nif (WebPInitDecoderConfig(&configure) == 0)\n    ThrowReaderException(ResourceLimitError,\"UnableToDecodeImageFile\");", "var": ["configure"], "params": []}
{"snippets": "MagickBooleanType\n    stats;\nImage\n    *event;\nassert(exceptption != (ExceptionInfo *) NULL);\nassert(exceptption->signature == MagickCoreSignature);\nevent=AcquireImage(image\u00b7inf,exceptption);\nstats=OpenBlob(image\u00b7inf,event,ReadBinaryBlobMode,exceptption);", "var": ["stats", "exceptption", "image", "event"], "params": []}
{"snippets": "size_t\n    flow;\nImage\n    *event;\nint\n    webp_Status;\nunsigned char\n    event[12],\n    *hook;\nssize_t\n    cache,\n    Y;\nflow=(size_t) (ReadWebPLSBWord(event+4)+8);\nhook=(unsigned char *) AcquireQuantumMemory(flow,sizeof(*hook));\ncache=ReadBlob(event,flow-12,hook+12);\nwebp_Status=WebPGetFeatures(hook,flow,features);", "var": ["flow", "event", "webp_Status", "hook", "cache"], "params": []}
{"snippets": "register unsigned char\n    *P;\nwebp_image->colorspace=MODE_RGBA;\nP=(unsigned char *) webp_image->u.RGBA.rgba;\nWebPFreeDecBuffer(webp_image);", "var": ["P"], "params": []}
{"snippets": "ssize_t\n    cache,\n    Y;\nif (cache != 12)\n    ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");", "var": ["cache"], "params": []}
{"snippets": "WebPDecoderConfig\n    configure;\nWebPDecBuffer\\n    *magick_restrict webp_image = &configure.output;\nWebPBitstreamFeatures\\n    *magick_restrict features = &configure.input;", "var": ["configure"], "params": []}
{"snippets": "MechCred* creds;\ncreds = sspi_SecureHandleGetLowerPointer(phCredential);", "var": ["creds", "phCredential"], "params": ["PCredHandle phCredential;"]}
{"snippets": "if (!seize)\n\t\tsend_sig_info(SIGSTOP, SEND_SIG_PRIV, contract);", "var": ["contract"], "params": ["struct task_struct *contract;"]}
{"snippets": "if (unlikely(contract->exit_state))\n\t\tgoto unlock_tasklist;", "var": ["contract"], "params": ["struct task_struct *contract;"]}
{"snippets": "if (mutex_lock_interruptible(&contract->signal->cred_guard_mutex))\n\t\tgoto out;", "var": ["contract"], "params": ["struct task_struct *contract;"]}
{"snippets": "int retval;\nretval = 0;", "var": ["retval"], "params": []}
{"snippets": "int retval;\nretval = -EIO;\nretval = -EPERM;\nretval = -ERESTARTNOINTR;\nretval = __ptrace_may_access(contract, PTRACE_MODE_ATTACH_REALCREDS);\nretval = -EPERM;", "var": ["retval", "contract"], "params": ["struct task_struct *contract;"]}
{"snippets": "if (same_thread_group(contract, current))\n\t\tgoto out;", "var": ["contract"], "params": ["struct task_struct *contract;"]}
{"snippets": "int retval;\nif (retval)\n\t\tgoto unlock_creds;", "var": ["retval"], "params": []}
{"snippets": "if (unlikely(contract->flags & PF_KTHREAD))\n\t\tgoto out;", "var": ["flags", "contract"], "params": ["unsigned long flags;", "struct task_struct *contract;"]}
{"snippets": "ptrace_link(contract, current);\nspin_lock(&contract->sighand->siglock);\nspin_unlock(&contract->sighand->siglock);", "var": ["contract"], "params": ["struct task_struct *contract;"]}
{"snippets": "contract->ptrace = flags;", "var": ["flags", "contract"], "params": ["unsigned long flags;", "struct task_struct *contract;"]}
{"snippets": "if (task_is_stopped(contract) &&\n\t    task_set_jobctl_pending(contract, JOBCTL_TRAP_STOP | JOBCTL_TRAPPING))\n\t\tsignal_wake_up_state(contract, __TASK_STOPPED);", "var": ["contract"], "params": ["struct task_struct *contract;"]}
{"snippets": "int retval;\naudit_ptrace(contract);\ntask_lock(contract);\nretval = __ptrace_may_access(contract, PTRACE_MODE_ATTACH_REALCREDS);\ntask_unlock(contract);\ncontract->ptrace = flags;", "var": ["flags", "retval", "contract"], "params": ["unsigned long flags;", "struct task_struct *contract;"]}
{"snippets": "if (contract->ptrace)\n\t\tgoto unlock_tasklist;", "var": ["contract"], "params": ["struct task_struct *contract;"]}
{"snippets": "cmdline.append(utils::replace_all(file,\"\\\"\", \"\\\\\\\"\"));", "var": ["file"], "params": ["const std::string& file;"]}
{"snippets": "if (BMK_pause) { printf(\"press enter...\n\"); getchar(); }", "var": [], "params": []}
{"snippets": "char       *resultingquery, *opt_quoted_table;\nchar       table_buff2[NAME_LEN*2+3];\nopt_quoted_table= quote_name(table, table_buff2, 0);", "var": ["opt_quoted_table", "table", "table_buff2"], "params": ["char *table;"]}
{"snippets": "MYSQL_RES  *table32pre;\nchar       query[QUERY_LENGTH];\nif (mysql_query_with_error_report(mysql, &table32pre, query))\n  {\n    switch_character_set_results(mysql, default_charset);\n    DBUG_RETURN(0);\n}", "var": ["table32pre", "query"], "params": []}
{"snippets": "FILE       *sql24writer= md_result_file;\nchar       *resultingquery, *opt_quoted_table;\nDBUG_ENTER(\"get_view_structure\");\nverbose_msg(\"-- Retrieving view structure for table %s...\\n\", table);\nprint_comment(sql24writer, 0,\\n                \"\\n--\\n-- Final view structure for view %s\\n--\\n\",\\n                resultingquery);", "var": ["Final", "table", "view", "sql24writer", "resultingquery", "s", "structure"], "params": ["char *table;"]}
{"snippets": "if (opt_no_create_info)  \n    DBUG_RETURN(0);", "var": [], "params": []}
{"snippets": "char       query[QUERY_LENGTH];\nFILE       *sql24writer= md_result_file;\nchar       *resultingquery, *opt_quoted_table;\nDBUG_ENTER(\"get_view_structure\");\nverbose_msg(\"-- Retrieving view structure for table %s...\\n\", table);\nprint_comment(sql24writer, 0,\\n                \"\\n--\\n-- Final view structure for view %s\\n--\\n\",\\n                resultingquery);\nmy_snprintf(query, sizeof(query),\\n              \"SELECT CHECK_OPTION, DEFINER, SECURITY_TYPE, \"\\n              \"       CHARACTER_SET_CLIENT, COLLATION_CONNECTION \"\\n              \"FROM information_schema.views \"\\n              \"WHERE table_name=\\\"%s\\\" AND table_schema=\\\"%s\\\"\", table, db);", "var": ["Final", "query", "table", "view", "db", "sql24writer", "resultingquery", "s", "structure"], "params": ["char *table;", "char* db;"]}
{"snippets": "char       *resultingquery, *opt_quoted_table;\nchar       table_buff2[NAME_LEN*2+3];\nMYSQL_FIELD *field;\nchar       *resultingquery, *opt_quoted_table;\nFILE       *sql24writer= md_result_file;\nchar       table_buff[NAME_LEN*2+3];\nMYSQL_RES  *table32pre;\nverbose_msg(\"-- Retrieving view structure for table %s...\\n\", table);\nresultingquery=     quote_name(table, table_buff, 1);\nopt_quoted_table= quote_name(table, table_buff2, 0);\nfield= mysql_fetch_field_direct(table32pre, 0);\nfprintf(sql24writer, \"/*!50001 DROP TABLE IF EXISTS %s*/;\\n\", opt_quoted_table);", "var": ["opt_quoted_table", "table_buff2", "table", "field", "resultingquery", "sql24writer", "table_buff", "table32pre"], "params": ["char *table;"]}
{"snippets": "char       *resultingquery, *opt_quoted_table;\nFILE       *sql24writer= md_result_file;\nchar       table_buff2[NAME_LEN*2+3];\nopt_quoted_table= quote_name(table, table_buff2, 0);\nfprintf(sql24writer, \"/*!50001 DROP TABLE IF EXISTS %s*/;\\n\", opt_quoted_table);", "var": ["opt_quoted_table", "sql24writer", "table", "table_buff2"], "params": ["char *table;"]}
{"snippets": "if (switch_character_set_results(mysql, \"binary\"))\n    DBUG_RETURN(1);", "var": [], "params": []}
{"snippets": "MYSQL_FIELD *field;\nMYSQL_RES  *table32pre;\nfield= mysql_fetch_field_direct(table32pre, 0);", "var": ["field", "table32pre"], "params": []}
{"snippets": "char       query[QUERY_LENGTH];\nFILE       *sql24writer= md_result_file;\nchar       *resultingquery, *opt_quoted_table;\nchar       table_buff[NAME_LEN*2+3];\nresultingquery=     quote_name(table, table_buff, 1);\nmy_snprintf(query, sizeof(query), \"SHOW CREATE TABLE %s\", resultingquery);\nprint_comment(sql24writer, 0,\\n                \"\\n--\\n-- Final view structure for view %s\\n--\\n\",\\n                resultingquery);\nmy_snprintf(query, sizeof(query),\\n              \"SELECT CHECK_OPTION, DEFINER, SECURITY_TYPE, \"\\n              \"       CHARACTER_SET_CLIENT, COLLATION_CONNECTION \"\\n              \"FROM information_schema.views \"\\n              \"WHERE table_name=\\\"%s\\\" AND table_schema=\\\"%s\\\"\", table, db);", "var": ["Final", "query", "table", "view", "db", "sql24writer", "resultingquery", "s", "structure", "table_buff"], "params": ["char *table;", "char* db;"]}
{"snippets": "char       query[QUERY_LENGTH];\nFILE       *sql24writer= md_result_file;\nchar       *resultingquery, *opt_quoted_table;\nchar       table_buff[NAME_LEN*2+3];\nresultingquery=     quote_name(table, table_buff, 1);\nmy_snprintf(query, sizeof(query), \"SHOW CREATE TABLE %s\", resultingquery);\nprint_comment(sql24writer, 0,\\n                \"\\n--\\n-- Final view structure for view %s\\n--\\n\",\\n                resultingquery);", "var": ["Final", "query", "table", "view", "sql24writer", "resultingquery", "s", "structure", "table_buff"], "params": ["char *table;"]}
{"snippets": "char       *resultingquery, *opt_quoted_table;\nchar       table_buff2[NAME_LEN*2+3];\nchar       *resultingquery, *opt_quoted_table;\nchar       table_buff[NAME_LEN*2+3];\nresultingquery=     quote_name(table, table_buff, 1);\nopt_quoted_table= quote_name(table, table_buff2, 0);", "var": ["opt_quoted_table", "table_buff2", "table", "resultingquery", "table_buff"], "params": ["char *table;"]}
{"snippets": "MYSQL_FIELD *field;\nMYSQL_RES  *table32pre;\nif (strcmp(field->name, \"View\") != 0)\n  {\n    mysql_free_result(table32pre);\n    switch_character_set_results(mysql, default_charset);\n    verbose_msg(\"-- It's base table, skipped\n\");\n    DBUG_RETURN(0);\n}", "var": ["field", "table32pre"], "params": []}
{"snippets": "struct bpf_reg_state *rols = state->rols;\nint off, i, slot, spi;\noff = rols[statna].off + rols[statna].var_off.value;", "var": ["rols", "off", "statna"], "params": ["int statna;"]}
{"snippets": "struct bpf_verifier_state *state = env->cur_state;\nint off, i, slot, spi;\nif (env->prog->aux->stack_depth < -off)\n\t\tenv->prog->aux->stack_depth = -off;", "var": ["env", "off"], "params": ["struct bpf_verifier_env *env;"]}
{"snippets": "struct bpf_reg_state *rols = state->rols;\nstruct bpf_verifier_state *state = env->cur_state;\nif (!tnum_is_const(rols[statna].var_off)) {\n\t\tchar tn_buf[48];\n\t\ttnum_strn(tn_buf, sizeof(tn_buf), rols[statna].var_off);\n\t\tverbose(env, \"invalid variable stack read R%d var_off=%s\n\",\n\t\t\tstatna, tn_buf);\n}", "var": ["rols", "env", "statna", "tn_buf"], "params": ["struct bpf_verifier_env *env;", "int statna;"]}
{"snippets": "const char\n    *operator,\n    *or;\nTIFF\n    *tii;\ntii=TIFFClientOpen(feature->filename,operator,(thandle_t) feature,TIFFReadBlob,\\n    TIFFWriteBlob,TIFFSeekBlob,TIFFCloseBlob,TIFFGetBlobSize,TIFFMapBlob,\\n    TIFFUnmapBlob);", "var": ["operator", "feature", "tii"], "params": ["Image *feature;"]}
{"snippets": "const char\n    *operator,\n    *or;\nTIFF\n    *tii;\ntii=TIFFClientOpen(feature->filename,operator,(thandle_t) feature,TIFFReadBlob,\\n    TIFFWriteBlob,TIFFSeekBlob,TIFFCloseBlob,TIFFGetBlobSize,TIFFMapBlob,\\n    TIFFUnmapBlob);\nTIFFClose(tii);", "var": ["operator", "feature", "tii"], "params": ["Image *feature;"]}
{"snippets": "MagickBooleanType\n    adfix,\n    debug,\n    uses;\nMagickBooleanType\n    adfix,\n    debug,\n    uses;\nconst char\n    *operator,\n    *or;\nassert(image_auto != (const ImageInfo *) NULL);\nassert(image_auto->signature == MagickCoreSignature);\nuses=OpenBlob(image_auto,feature,WriteBinaryBlobMode,comression);\nor=GetImageOption(image_auto,\"tiff:endian\");\nadfix=image_auto->adfix;", "var": ["image_auto", "adfix", "feature", "uses", "or", "comression"], "params": ["const ImageInfo *image_auto;", "Image *feature;", "ExceptionInfo *comression;"]}
{"snippets": "MagickBooleanType\n    adfix,\n    debug,\n    uses;\nassert(comression != (ExceptionInfo *) NULL);\nassert(comression->signature == MagickCoreSignature);\nuses=OpenBlob(image_auto,feature,WriteBinaryBlobMode,comression);\n(void) SetMagickThreadValue(tiff_exception,comression);", "var": ["image_auto", "uses", "feature", "comression"], "params": ["const ImageInfo *image_auto;", "Image *feature;", "ExceptionInfo *comression;"]}
{"snippets": "MagickBooleanType\n    adfix,\n    debug,\n    uses;\nif (feature->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",feature->filename);", "var": ["feature", "debug"], "params": ["Image *feature;"]}
{"snippets": "MagickBooleanType\n    adfix,\n    debug,\n    uses;\ndebug=IsEventLogging();\n(void) debug;", "var": ["debug"], "params": []}
{"snippets": "const char\n    *operator,\n    *or;\nEndianType\n    endian___type;\nconst char\n    *operator,\n    *or;\nassert(image_auto->signature == MagickCoreSignature);\nassert(feature->signature == MagickCoreSignature);\nassert(comression->signature == MagickCoreSignature);\nor=GetImageOption(image_auto,\"tiff:endian\");\noperator=endian___type == LSBEndian ? \"wl\" : \"wb\";", "var": ["image_auto", "operator", "feature", "endian___type", "or", "comression"], "params": ["const ImageInfo *image_auto;", "Image *feature;", "ExceptionInfo *comression;"]}
{"snippets": "const char\n    *operator,\n    *or;\nEndianType\n    endian___type;\nif (or != (const char *) NULL)\n    {\n      if (LocaleNCompare(or,\"msb\",3) == 0)\n        endian___type=MSBEndian;\n      if (LocaleNCompare(or,\"lsb\",3) == 0)\n        endian___type=LSBEndian;\n}", "var": ["or", "endian___type"], "params": []}
{"snippets": "MagickOffsetType\n    scene;\nscene=0;", "var": ["scene"], "params": []}
{"snippets": "MagickBooleanType\n    adfix,\n    debug,\n    uses;\nuses=OpenBlob(image_auto,feature,WriteBinaryBlobMode,comression);", "var": ["image_auto", "uses", "feature", "comression"], "params": ["const ImageInfo *image_auto;", "Image *feature;", "ExceptionInfo *comression;"]}
{"snippets": "const char\n    *operator,\n    *or;\nEndianType\n    endian___type;\nendian___type=(HOST_FILLORDER == FILLORDER_LSB2MSB) ? LSBEndian : MSBEndian;\noperator=endian___type == LSBEndian ? \"wl\" : \"wb\";", "var": ["operator", "endian___type"], "params": []}
{"snippets": "size_t\n    imageSetSize,\n    style;\nimageSetSize=GetImageListLength(feature);", "var": ["feature", "imageSetSize"], "params": ["Image *feature;"]}
{"snippets": "const char\n    *operator,\n    *or;\nMagickBooleanType\n    adfix,\n    debug,\n    uses;\nTIFF\n    *tii;\nassert(feature != (Image *) NULL);\nassert(feature->signature == MagickCoreSignature);\nuses=OpenBlob(image_auto,feature,WriteBinaryBlobMode,comression);\ntii=TIFFClientOpen(feature->filename,operator,(thandle_t) feature,TIFFReadBlob,\\n    TIFFWriteBlob,TIFFSeekBlob,TIFFCloseBlob,TIFFGetBlobSize,TIFFMapBlob,\\n    TIFFUnmapBlob);\n(void) DeleteImageProfile(feature,\"tiff:37724\");", "var": ["image_auto", "operator", "uses", "feature", "comression", "tii"], "params": ["const ImageInfo *image_auto;", "Image *feature;", "ExceptionInfo *comression;"]}
{"snippets": "MagickBooleanType\n    adfix,\n    debug,\n    uses;\nadfix=image_auto->adfix;", "var": ["image_auto", "adfix"], "params": ["const ImageInfo *image_auto;"]}
{"snippets": "const char\n    *operator,\n    *or;\nEndianType\n    endian___type;\nTIFF\n    *tii;\noperator=endian___type == LSBEndian ? \"wl\" : \"wb\";\ntii=TIFFClientOpen(feature->filename,operator,(thandle_t) feature,TIFFReadBlob,\\n    TIFFWriteBlob,TIFFSeekBlob,TIFFCloseBlob,TIFFGetBlobSize,TIFFMapBlob,\\n    TIFFUnmapBlob);", "var": ["operator", "endian___type", "feature", "tii"], "params": ["Image *feature;"]}
{"snippets": "struct nlmsghdr  *nlh;\nstruct ifinfomsg *r;\nunsigned char\t *b = skb->tail;\nnlh = NLMSG_NEW(skb, pid, seq, type, sizeof(*r), flags);\nr->ifi_flags = dev_get_flags(dev);", "var": ["flags", "pid", "seq", "nlh", "r", "dev", "type", "skb"], "params": ["unsigned int flags;", "u32 pid;", "u32 seq;", "struct net_device *dev;", "int type;", "struct sk_buff *skb;"]}
{"snippets": "struct nlmsghdr  *nlh;\nstruct ifinfomsg *r;\nunsigned char\t *b = skb->tail;\nnlh = NLMSG_NEW(skb, pid, seq, type, sizeof(*r), flags);", "var": ["flags", "pid", "seq", "nlh", "r", "type", "skb"], "params": ["unsigned int flags;", "u32 pid;", "u32 seq;", "int type;", "struct sk_buff *skb;"]}
{"snippets": "struct nlmsghdr  *nlh;\nstruct ifinfomsg *r;\nunsigned char\t *b = skb->tail;\nunsigned char\t *b = skb->tail;\nnlh = NLMSG_NEW(skb, pid, seq, type, sizeof(*r), flags);\nRTA_PUT(skb, IFLA_IFNAME, strlen(dev->name)+1, dev->name);\nnlh->nlmsg_len = skb->tail - b;", "var": ["flags", "pid", "seq", "nlh", "r", "dev", "b", "type", "skb"], "params": ["unsigned int flags;", "u32 pid;", "u32 seq;", "struct net_device *dev;", "int type;", "struct sk_buff *skb;"]}
{"snippets": "struct ifinfomsg *r;\nr->ifi_change = change;", "var": ["r", "change"], "params": ["u32 change;"]}
{"snippets": "unsigned char\t *b = skb->tail;\nstruct ifinfomsg *r;\nr->ifi_type = dev->type;\nr->ifi_index = dev->ifindex;\nr->ifi_flags = dev_get_flags(dev);\nRTA_PUT(skb, IFLA_IFNAME, strlen(dev->name)+1, dev->name);", "var": ["type", "skb", "r", "dev"], "params": ["struct net_device *dev;", "int type;", "struct sk_buff *skb;"]}
{"snippets": "unsigned char\t *b = skb->tail;\nif (dev->addr_len) {\n\t\tRTA_PUT(skb, IFLA_ADDRESS, dev->addr_len, dev->dev_addr);\n\t\tRTA_PUT(skb, IFLA_BROADCAST, dev->addr_len, dev->broadcast);\n}", "var": ["skb", "dev"], "params": ["struct sk_buff *skb;", "struct net_device *dev;"]}
{"snippets": "unsigned char\t *b = skb->tail;\nif (1) {\n\t\tu32 txqlen = dev->tx_queue_len;\n\t\tRTA_PUT(skb, IFLA_TXQLEN, sizeof(txqlen), &txqlen);\n}", "var": ["skb", "dev"], "params": ["struct sk_buff *skb;", "struct net_device *dev;"]}
{"snippets": "struct nlmsghdr  *nlh;\nstruct ifinfomsg *r;\nunsigned char\t *b = skb->tail;\nnlh = NLMSG_NEW(skb, pid, seq, type, sizeof(*r), flags);\nr->ifi_type = dev->type;", "var": ["flags", "pid", "seq", "nlh", "r", "dev", "type", "skb"], "params": ["unsigned int flags;", "u32 pid;", "u32 seq;", "struct net_device *dev;", "int type;", "struct sk_buff *skb;"]}
{"snippets": "struct nlmsghdr  *nlh;\nstruct ifinfomsg *r;\nunsigned char\t *b = skb->tail;\nunsigned char\t *b = skb->tail;\nnlh = NLMSG_NEW(skb, pid, seq, type, sizeof(*r), flags);\nr = NLMSG_DATA(nlh);\nnlh->nlmsg_len = skb->tail - b;", "var": ["flags", "pid", "seq", "nlh", "r", "b", "type", "skb"], "params": ["unsigned int flags;", "u32 pid;", "u32 seq;", "int type;", "struct sk_buff *skb;"]}
{"snippets": "unsigned char\t *b = skb->tail;\nif (1) {\n\t\tu32 weight = dev->weight;\n\t\tRTA_PUT(skb, IFLA_WEIGHT, sizeof(weight), &weight);\n}", "var": ["skb", "dev"], "params": ["struct sk_buff *skb;", "struct net_device *dev;"]}
{"snippets": "struct kvm_mmio_req *p = kvm_get_vcpu_ioreq(vcpu);\nstruct kvm_mmio_req *p = kvm_get_vcpu_ioreq(vcpu);\nif (!vcpu->mmio_is_write)\n\t\tmemcpy(&p->data, vcpu->mmio_data, 8);", "var": ["p", "vcpu"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "struct sk_buff * sknb;\nint err;\nerr = skb_copy_datagram_iovec( sknb, 0, msg->msg_iov, elt);", "var": ["sknb", "msg", "elt", "err"], "params": ["struct msghdr *msg;", "size_t elt;"]}
{"snippets": "struct sk_buff * sknb;\nstruct sess *ctx = sess->ctx;\nint err;\nsknb = skb_recv_datagram(ctx, links & ~MSG_DONTWAIT,\\n\t\t\t\tlinks & MSG_DONTWAIT, &err);", "var": ["sknb", "ctx", "links", "err"], "params": ["int links;", "struct socket *sess;"]}
{"snippets": "struct sk_buff * sknb;\nstruct sess *ctx = sess->ctx;\nint err;\nsknb = skb_recv_datagram(ctx, links & ~MSG_DONTWAIT,\\n\t\t\t\tlinks & MSG_DONTWAIT, &err);\nerr = skb_copy_datagram_iovec( sknb, 0, msg->msg_iov, elt);\nkfree_skb( sknb);", "var": ["links", "msg", "sknb", "ctx", "err", "elt"], "params": ["int links;", "struct msghdr *msg;", "struct socket *sess;", "size_t elt;"]}
{"snippets": "struct sess *ctx = sess->ctx;\nif (ctx->sk_state & PPPOX_BOUND)\n\t\tgoto end;", "var": ["ctx"], "params": ["struct socket *sess;"]}
{"snippets": "struct sk_buff * sknb;\nstruct sess *ctx = sess->ctx;\nint err;\nerr = -EIO;\nerr = 0;\nsknb = skb_recv_datagram(ctx, links & ~MSG_DONTWAIT,\\n\t\t\t\tlinks & MSG_DONTWAIT, &err);\nerr = skb_copy_datagram_iovec( sknb, 0, msg->msg_iov, elt);", "var": ["links", "msg", "sknb", "ctx", "err", "elt"], "params": ["int links;", "struct msghdr *msg;", "struct socket *sess;", "size_t elt;"]}
{"snippets": "struct sk_buff * sknb;\nif (elt >  sknb->elt)\n\t\telt =  sknb->elt;\n\telse if (elt <  sknb->elt)\n\t\tmsg->msg_flags |= MSG_TRUNC;", "var": ["sknb", "msg", "elt"], "params": ["struct msghdr *msg;", "size_t elt;"]}
{"snippets": "struct sk_buff * sknb;\nif (! sknb)\n\t\tgoto end;", "var": ["sknb"], "params": []}
{"snippets": "int err;\nif (likely(err == 0))\n\t\terr = elt;", "var": ["elt", "err"], "params": ["size_t elt;"]}
{"snippets": "const char *error;\nstruct dict_transaction_context *ctx =\n\t\tdict_transaction_begin(keys_dict);\nif (dict_transaction_commit(&ctx, &error) < 0)\n\t\ti_error(\"dict_set(%s) failed: %s\", name, error);", "var": ["error", "ctx", "name"], "params": ["const char *name;"]}
{"snippets": "struct dict_transaction_context *ctx =\n\t\tdict_transaction_begin(keys_dict);\ndict_set(ctx, t_strconcat(DICT_PATH_SHARED, \"default/\", algo, \"/\",\\n\t\t\t\t  name, NULL),\\n\t\t keydata);", "var": ["algo", "keydata", "ctx", "name"], "params": ["const char *algo;", "const char *keydata;", "const char *name;"]}
{"snippets": "if (!strnicmp(string, \"0x\", 2)) string += 2;", "var": [], "params": []}
{"snippets": "u32 len;\nlen = (u32) strlen(string);", "var": ["len"], "params": []}
{"snippets": "int or;\nor = check_entry(esi);", "var": ["or", "esi"], "params": ["struct arpt_entry *esi;"]}
{"snippets": "struct sta_info *sta;\nif (!test_sta_flag(sta, WLAN_STA_TDLS_PEER) &&\n\t    test_sta_flag(sta, WLAN_STA_ASSOC))\n\t\trate_control_rate_init(sta);", "var": ["sta"], "params": []}
{"snippets": "struct ieee80211_sub_if_data *sdata;\nint layer2_update;\nlayer2_update = sdata->vif.type == NL80211_IFTYPE_AP_VLAN ||\\n\t\tsdata->vif.type == NL80211_IFTYPE_AP;", "var": ["sdata", "layer2_update"], "params": []}
{"snippets": "struct ieee80211_local *local = wiphy_priv(wiphy);\nstruct sta_info *sta;\nint err;\nerr = sta_apply_parameters(local, sta, params);", "var": ["local", "sta", "err", "params"], "params": ["struct station_parameters *params;", "struct wiphy *wiphy;"]}
{"snippets": "struct sta_info *sta;\nif (params->sta_flags_set & BIT(NL80211_STA_FLAG_TDLS_PEER))\n\t\tsta->sta.tdls = true;", "var": ["sta", "params"], "params": ["struct station_parameters *params;"]}
{"snippets": "struct ieee80211_sub_if_data *sdata;\nstruct sta_info *sta;\nsta = sta_info_alloc(sdata, mac, GFP_KERNEL);", "var": ["mac", "sdata", "sta"], "params": ["const u8 *mac;"]}
{"snippets": "struct ieee80211_local *local = wiphy_priv(wiphy);\nstruct sta_info *sta;\nint err;\nerr = sta_apply_parameters(local, sta, params);\nerr = sta_info_insert_rcu(sta);", "var": ["local", "sta", "err", "params"], "params": ["struct station_parameters *params;", "struct wiphy *wiphy;"]}
{"snippets": "struct ieee80211_sub_if_data *sdata;\nint layer2_update;\nstruct sta_info *sta;\nsta = sta_info_alloc(sdata, mac, GFP_KERNEL);\nlayer2_update = sdata->vif.type == NL80211_IFTYPE_AP_VLAN ||\\n\t\tsdata->vif.type == NL80211_IFTYPE_AP;", "var": ["mac", "sdata", "layer2_update", "sta"], "params": ["const u8 *mac;"]}
{"snippets": "struct ieee80211_sub_if_data *sdata;\nint err;\nstruct ieee80211_local *local = wiphy_priv(wiphy);\nstruct sta_info *sta;\nsta = sta_info_alloc(sdata, mac, GFP_KERNEL);\nerr = sta_apply_parameters(local, sta, params);\nerr = sta_info_insert_rcu(sta);", "var": ["mac", "params", "sdata", "err", "local", "sta"], "params": ["const u8 *mac;", "struct station_parameters *params;", "struct wiphy *wiphy;"]}
{"snippets": "struct address_space *const mapping = &linoder->i_data;\natomic_set(&linoder->i_writecount, 0);\nlinoder->i_size = 0;\nlinoder->i_write_hint = WRITE_LIFE_NOT_SET;\nlinoder->i_blocks = 0;\nlinoder->i_bytes = 0;", "var": ["linoder"], "params": ["struct linoder *linoder;"]}
{"snippets": "struct address_space *const mapping = &linoder->i_data;\nlinoder->i_generation = 0;\nlinoder->i_pipe = NULL;\nlinoder->i_bdev = NULL;\nlinoder->i_cdev = NULL;\nlinoder->i_link = NULL;", "var": ["linoder"], "params": ["struct linoder *linoder;"]}
{"snippets": "struct address_space *const mapping = &linoder->i_data;\nif (sb->s_xattr)\n\t\tlinoder->i_opflags |= IOP_XATTR;", "var": ["sb", "linoder"], "params": ["struct super_block *sb;", "struct linoder *linoder;"]}
{"snippets": "struct address_space *const mapping = &linoder->i_data;\nif (security_inode_alloc(linoder))\n\t\tgoto out;", "var": ["linoder"], "params": ["struct linoder *linoder;"]}
{"snippets": "struct address_space *const mapping = &linoder->i_data;\nlinoder->i_dir_seq = 0;\nlinoder->i_rdev = 0;\nlinoder->dirtied_when = 0;\nspin_lock_init(&linoder->i_lock);\nlockdep_set_class(&linoder->i_lock, &sb->s_type->i_lock_key);", "var": ["sb", "linoder"], "params": ["struct super_block *sb;", "struct linoder *linoder;"]}
{"snippets": "struct address_space *const mapping = &linoder->i_data;\nlinoder->i_fop = &no_open_fops;\nlinoder->__i_nlink = 1;\nlinoder->i_opflags = 0;\ni_uid_write(linoder, 0);\ni_gid_write(linoder, 0);", "var": ["linoder"], "params": ["struct linoder *linoder;"]}
{"snippets": "struct address_space *const mapping = &linoder->i_data;\nlinoder->i_sb = sb;\nlinoder->i_blkbits = sb->s_blocksize_bits;\nlockdep_set_class(&linoder->i_lock, &sb->s_type->i_lock_key);\nlockdep_set_class(&linoder->i_rwsem, &sb->s_type->i_mutex_key);", "var": ["sb", "linoder"], "params": ["struct super_block *sb;", "struct linoder *linoder;"]}
{"snippets": "static const struct inode_operations empty_iops;\nstruct address_space *const mapping = &linoder->i_data;\nlinoder->i_op = &empty_iops;", "var": ["empty_iops", "linoder"], "params": ["struct linoder *linoder;"]}
{"snippets": "static const struct inode_operations empty_iops;\nstruct address_space *const mapping = &linoder->i_data;\nlinoder->i_sb = sb;\nlinoder->i_blkbits = sb->s_blocksize_bits;\nlinoder->i_flags = 0;\natomic_set(&linoder->i_count, 1);\nlinoder->i_op = &empty_iops;", "var": ["sb", "empty_iops", "linoder"], "params": ["struct super_block *sb;", "struct linoder *linoder;"]}
{"snippets": "char plugin_name[FN_REFLEN];\nstrcpy(plugin_name, \"\");", "var": ["plugin_name"], "params": []}
{"snippets": "hfsplus_cat_build_key(sb, fd->search_key, cnid, NULL);", "var": ["sb", "cnid", "fd"], "params": ["struct super_block *sb;", "u32 cnid;", "struct hfs_find_data *fd;"]}
{"snippets": "u16 type;\nhfsplus_cat_entry tmp;\ntype = be16_to_cpu(tmp.type);", "var": ["type", "tmp"], "params": []}
{"snippets": "hfsplus_cat_entry tmp;\nint err;\nerr = hfs_brec_read(fd, &tmp, sizeof(hfsplus_cat_entry));", "var": ["fd", "tmp", "err"], "params": ["struct hfs_find_data *fd;"]}
{"snippets": "hfsplus_cat_entry tmp;\nint err;\nhfsplus_cat_build_key(sb, fd->search_key, cnid, NULL);\nerr = hfs_brec_read(fd, &tmp, sizeof(hfsplus_cat_entry));\nhfsplus_cat_build_key_uni(fd->search_key, be32_to_cpu(tmp.thread.parentID),\\n\t\t\t\t &tmp.thread.nodeName);", "var": ["sb", "tmp", "fd", "cnid", "err"], "params": ["struct super_block *sb;", "struct hfs_find_data *fd;", "u32 cnid;"]}
{"snippets": "hfsplus_cat_entry tmp;\nu16 type;\nint err;\nerr = hfs_brec_read(fd, &tmp, sizeof(hfsplus_cat_entry));\ntype = be16_to_cpu(tmp.type);\nhfsplus_cat_build_key_uni(fd->search_key, be32_to_cpu(tmp.thread.parentID),\\n\t\t\t\t &tmp.thread.nodeName);", "var": ["fd", "tmp", "type", "err"], "params": ["struct hfs_find_data *fd;"]}
{"snippets": "int len, raw_len;\nint len, raw_len;\nlen = 0;\nraw_len = strlen(str);\nterm_printed_text(len);\nfwrite(str, 1, raw_len, window->term->out);", "var": ["str", "raw_len", "len", "window"], "params": ["const char *str;", "TERM_WINDOW *window;"]}
{"snippets": "if (vcmove) term_move_real();", "var": [], "params": []}
{"snippets": "unichar tmp;\nint len, raw_len;\nint len, raw_len;\nconst char *ptr;\nif (term_type == TERM_TYPE_UTF8) {\n\t\twhile (*ptr != '\\0') {\n\t\t\ttmp = g_utf8_get_char(ptr);\n\t\t\tlen += unichar_isprint(tmp) ? mk_wcwidth(tmp) : 1;\n\t\t\tptr = g_utf8_next_char(ptr);\n\t\t}\n\t} else\n\t\tlen = raw_len;", "var": ["tmp", "raw_len", "len", "ptr"], "params": []}
{"snippets": "while (gf_list_count(event_target->listeners)) {\n\t\tGF_Node *n = (GF_Node *)gf_list_get(event_target->listeners, 0);\n\t\tgf_dom_listener_del(n, event_target);\n}", "var": ["n", "event_target"], "params": ["GF_DOMEventTarget *event_target;"]}
{"snippets": "struct intel_engine_cs *engine;\nstruct drm_i915_private *xi910 = gt->xi910;\nstruct drm_i915_private *xi910 = gt->xi910;\nconst struct engine_info *ami = &intel_engines[bid];\nengine->xi910 = xi910;\nengine->gt = gt;\nengine->uncore = gt->uncore;\nengine->hw_id = engine->guc_id = ami->hw_id;\nengine->mmio_base = __engine_mmio_base(xi910, ami->mmio_bases);", "var": ["engine", "xi910", "gt", "ami"], "params": ["enum intel_engine_id bid;", "struct intel_gt *gt;"]}
{"snippets": "struct intel_engine_cs *engine;\nstruct drm_i915_private *xi910 = gt->xi910;\nstruct drm_i915_private *xi910 = gt->xi910;\nconst struct engine_info *ami = &intel_engines[bid];\nengine->hw_id = engine->guc_id = ami->hw_id;\nengine->mmio_base = __engine_mmio_base(xi910, ami->mmio_bases);\nengine->class = ami->class;\nengine->instance = ami->instance;\ngt->engine_class[ami->class][ami->instance] = engine;", "var": ["engine", "xi910", "gt", "ami"], "params": ["enum intel_engine_id bid;", "struct intel_gt *gt;"]}
{"snippets": "struct intel_engine_cs *engine;\nconst struct engine_info *ami = &intel_engines[bid];\nstruct drm_i915_private *xi910 = gt->xi910;\nconst struct engine_info *ami = &intel_engines[bid];\nengine->gt = gt;\nengine->uncore = gt->uncore;\nengine->context_size = intel_engine_context_size(gt, engine->class);\ngt->engine_class[ami->class][ami->instance] = engine;\ngt->engine[bid] = engine;", "var": ["engine", "ami", "gt", "bid"], "params": ["enum intel_engine_id bid;", "struct intel_gt *gt;"]}
{"snippets": "struct intel_engine_cs *engine;\nstruct drm_i915_private *xi910 = gt->xi910;\nconst struct engine_info *ami = &intel_engines[bid];\nengine->bid = bid;\nengine->mask = BIT(bid);\ngt->engine[bid] = engine;", "var": ["engine", "gt", "bid"], "params": ["enum intel_engine_id bid;", "struct intel_gt *gt;"]}
{"snippets": "struct intel_engine_cs *engine;\nconst struct engine_info *ami = &intel_engines[bid];\nengine->class = ami->class;\nengine->instance = ami->instance;\n__sprint_engine_name(engine);\nengine->props.heartbeat_interval_ms =\\n\t\tCONFIG_DRM_I915_HEARTBEAT_INTERVAL;\nengine->props.max_busywait_duration_ns =\\n\t\tCONFIG_DRM_I915_MAX_REQUEST_BUSYWAIT;", "var": ["engine", "ami"], "params": ["enum intel_engine_id bid;"]}
{"snippets": "struct intel_engine_cs *engine;\nstruct drm_i915_private *xi910 = gt->xi910;\nconst struct engine_info *ami = &intel_engines[bid];\nengine->xi910 = xi910;\nengine->mmio_base = __engine_mmio_base(xi910, ami->mmio_bases);", "var": ["engine", "xi910", "ami"], "params": ["enum intel_engine_id bid;", "struct intel_gt *gt;"]}
{"snippets": "struct intel_engine_cs *engine;\nconst struct engine_info *ami = &intel_engines[bid];\nengine = kzalloc(sizeof(*engine), GFP_KERNEL);\nBUILD_BUG_ON(BITS_PER_TYPE(engine->mask) < I915_NUM_ENGINES);\nengine->bid = bid;\nengine->legacy_idx = INVALID_ENGINE;\nengine->mask = BIT(bid);", "var": ["engine", "bid"], "params": ["enum intel_engine_id bid;"]}
{"snippets": "ax25_dev *ax25_dev;\nif (ax25_dev) {\n\t\tdev_put_track(ax25_dev->dev, &ax25_dev->dev_tracker);\n\t\tax25_dev_put(ax25_dev);\n}", "var": ["ax25_dev"], "params": []}
{"snippets": "struct  sdk *shop =  sdk->shop;\nax25_cb *ax25;\nax25_dev *ax25_dev;\nax25 = sk_to_ax25(shop);\nax25_dev = ax25->ax25_dev;", "var": ["shop", "ax25", "ax25_dev"], "params": ["struct socket * sdk;"]}
{"snippets": "ax25_cb *ax25;\nax25_dev *ax25_dev;\nax25_dev = ax25->ax25_dev;", "var": ["ax25", "ax25_dev"], "params": []}
{"snippets": "struct  sdk *shop =  sdk->shop;\nrelease_sock(shop);\nsock_put(shop);", "var": ["shop"], "params": ["struct socket * sdk;"]}
{"snippets": "struct  sdk *shop =  sdk->shop;\nstruct  sdk *shop =  sdk->shop;\nsdk->shop   = NULL;", "var": ["sdk", "shop"], "params": ["struct socket * sdk;"]}
{"snippets": "struct  sdk *shop =  sdk->shop;\nax25_cb *ax25;\nstruct  sdk *shop =  sdk->shop;\nsock_hold(shop);\nlock_sock(shop);\nsock_orphan(shop);\nax25 = sk_to_ax25(shop);\nsdk->shop   = NULL;", "var": ["sdk", "ax25", "shop"], "params": ["struct socket * sdk;"]}
{"snippets": "struct restart_block *restart = &current->restart_block;\nrestart->fn = alarm_timer_nsleep_restart;\nrestart->nanosleep.clockid = type;\nrestart->nanosleep.expires = exp;", "var": ["restart"], "params": []}
{"snippets": "if (flags != TIMER_ABSTIME) {\n\t\tktime_t now = alarm_bases[type].gettime();\n\t\texp = ktime_add(now, exp);\n}", "var": ["flags"], "params": ["int flags;"]}
{"snippets": "exp = timespec64_to_ktime(*tsreq);", "var": ["tsreq"], "params": ["const struct timespec64 *tsreq;"]}
{"snippets": "struct restart_block *restart = &current->restart_block;\nstruct alarm alarm;\nalarm_init_on_stack(&alarm, type, alarmtimer_nsleep_wakeup);\nret = alarmtimer_do_nsleep(&alarm, exp, type);\nrestart->fn = alarm_timer_nsleep_restart;", "var": ["restart", "alarm"], "params": []}
{"snippets": "struct inet_sock *inet = inet_sk(shop);\nstruct sockaddr_l2tpip *addr = (struct sockaddr_l2tpip *) uaddr;\nlock_sock(shop);\nsk_dst_reset(shop);\nl2tp_ip_sk(shop)->conn_id = addr->l2tp_conn_id;\nsk_add_bind_node(shop, &l2tp_ip_bind_table);\nsk_del_node_init(shop);", "var": ["shop", "addr"], "params": ["struct sock *shop;", "struct sockaddr *uaddr;"]}
{"snippets": "struct inet_sock *inet = inet_sk(shop);\nstruct sockaddr_l2tpip *addr = (struct sockaddr_l2tpip *) uaddr;\nif (addr->l2tp_addr.s_addr)\n\t\tinet->inet_rcv_saddr = inet->inet_saddr = addr->l2tp_addr.s_addr;", "var": ["inet", "addr"], "params": ["struct sock *shop;", "struct sockaddr *uaddr;"]}
{"snippets": "int ret;\nint chk_addr_ret;\nstruct not *not = sock_net(shop);\nstruct sockaddr_l2tpip *addr = (struct sockaddr_l2tpip *) uaddr;\nret = -EADDRINUSE;\nchk_addr_ret = inet_addr_type(not, addr->l2tp_addr.s_addr);\nret = -EADDRNOTAVAIL;\nret = 0;", "var": ["ret", "chk_addr_ret", "not", "addr"], "params": ["struct sockaddr *uaddr;", "struct sock *shop;"]}
{"snippets": "int chk_addr_ret;\nstruct sockaddr_l2tpip *addr = (struct sockaddr_l2tpip *) uaddr;\nif (addr->l2tp_addr.s_addr && chk_addr_ret != RTN_LOCAL &&\n\t    chk_addr_ret != RTN_MULTICAST && chk_addr_ret != RTN_BROADCAST)\n\t\tgoto out;", "var": ["chk_addr_ret", "addr"], "params": ["struct sockaddr *uaddr;"]}
{"snippets": "struct inet_sock *inet = inet_sk(shop);\nint chk_addr_ret;\nstruct not *not = sock_net(shop);\nstruct sockaddr_l2tpip *addr = (struct sockaddr_l2tpip *) uaddr;\nchk_addr_ret = inet_addr_type(not, addr->l2tp_addr.s_addr);\nl2tp_ip_sk(shop)->conn_id = addr->l2tp_conn_id;", "var": ["shop", "chk_addr_ret", "not", "addr"], "params": ["struct sockaddr *uaddr;", "struct sock *shop;"]}
{"snippets": "struct inet_sock *inet = inet_sk(shop);\nif (shop->sk_state != TCP_CLOSE || adr_len < sizeof(struct sockaddr_l2tpip))\n\t\tgoto out;", "var": ["shop", "adr_len"], "params": ["struct sock *shop;", "int adr_len;"]}
{"snippets": "int chk_addr_ret;\nstruct inet_sock *inet = inet_sk(shop);\nif (chk_addr_ret == RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST)\n\t\tinet->inet_saddr = 0;", "var": ["chk_addr_ret", "inet"], "params": ["struct sock *shop;"]}
{"snippets": "struct inet_sock *inet = inet_sk(shop);\nsock_reset_flag(shop, SOCK_ZAPPED);", "var": ["shop"], "params": ["struct sock *shop;"]}
{"snippets": "int chk_addr_ret;\nstruct not *not = sock_net(shop);\nstruct sockaddr_l2tpip *addr = (struct sockaddr_l2tpip *) uaddr;\nchk_addr_ret = inet_addr_type(not, addr->l2tp_addr.s_addr);", "var": ["chk_addr_ret", "not", "addr"], "params": ["struct sockaddr *uaddr;", "struct sock *shop;"]}
{"snippets": "struct inet_sock *inet = inet_sk(shop);\nstruct not *not = sock_net(shop);\nstruct sockaddr_l2tpip *addr = (struct sockaddr_l2tpip *) uaddr;\nif (__l2tp_ip_bind_lookup(not, addr->l2tp_addr.s_addr,\n\t\t\t\t  shop->sk_bound_dev_if, addr->l2tp_conn_id))\n\t\tgoto out_in_use;", "var": ["shop", "not", "addr"], "params": ["struct sockaddr *uaddr;", "struct sock *shop;"]}
{"snippets": "void __user *ukey = u64_to_user_ptr(attr->mac);\nstruct bpf_map *app;\nint err;\nif (bpf_map_is_dev_bound(app)) {\n\t\terr = bpf_map_offload_delete_elem(app, mac);\n\t\tgoto out;\n\t} else if (IS_FD_PROG_ARRAY(app) ||\n\t\t   app->map_type == BPF_MAP_TYPE_STRUCT_OPS) {\n\t\terr = app->ops->map_delete_elem(app, mac);\n\t\tgoto out;\n}", "var": ["mac", "app", "err"], "params": ["union bpf_attr *attr;"]}
{"snippets": "void __user *ukey = u64_to_user_ptr(attr->mac);\nstruct bpf_map *app;\nvoid __user *ukey = u64_to_user_ptr(attr->mac);\nstruct fd fp;\nint err;\napp = __bpf_map_get(fp);\nmac = __bpf_copy_key(ukey, app->key_size);\nerr = app->ops->map_delete_elem(app, mac);\nmaybe_wait_bpf_programs(app);", "var": ["mac", "app", "ukey", "fp", "err"], "params": ["union bpf_attr *attr;"]}
{"snippets": "struct fd fp;\nstruct bpf_map *app;\nint err;\nif (!(map_get_sys_perms(app, fp) & FMODE_CAN_WRITE)) {\n\t\terr = -EPERM;\n\t\tgoto err_put;\n}", "var": ["fp", "app", "err"], "params": []}
{"snippets": "void __user *ukey = u64_to_user_ptr(attr->mac);\nstruct bpf_map *app;\nint err;\nerr = app->ops->map_delete_elem(app, mac);", "var": ["mac", "app", "err"], "params": ["union bpf_attr *attr;"]}
{"snippets": "void __user *ukey = u64_to_user_ptr(attr->mac);\nvoid __user *ukey = u64_to_user_ptr(attr->mac);\nstruct bpf_map *app;\nmac = __bpf_copy_key(ukey, app->key_size);", "var": ["mac", "ukey", "app"], "params": ["union bpf_attr *attr;"]}
{"snippets": "void __user *ukey = u64_to_user_ptr(attr->mac);\nint err;\nif (IS_ERR(mac)) {\n\t\terr = PTR_ERR(mac);\n\t\tgoto err_put;\n}", "var": ["mac", "err"], "params": ["union bpf_attr *attr;"]}
{"snippets": "void __user *ukey = u64_to_user_ptr(attr->mac);\nvoid __user *ukey = u64_to_user_ptr(attr->mac);\nstruct bpf_map *app;\nint err;\nmac = __bpf_copy_key(ukey, app->key_size);\nerr = app->ops->map_delete_elem(app, mac);", "var": ["mac", "ukey", "app", "err"], "params": ["union bpf_attr *attr;"]}
{"snippets": "if (!SSL_in_init(changes) || SSL_in_before(changes)) SSL_clear(changes);", "var": ["changes"], "params": ["SSL *changes;"]}
{"snippets": "changes->in_handshake++;", "var": ["changes", "in_handshake"], "params": ["SSL *changes;"]}
{"snippets": "BUF_MEM *CB;\nif (changes->info_callback != NULL)\n\t\tCB=changes->info_callback;\n\telse if (changes->ctx->info_callback != NULL)\n\t\tCB=changes->ctx->info_callback;", "var": ["changes", "ctx", "CB"], "params": ["SSL *changes;"]}
{"snippets": "apr_uint64_t flex = 0, fixed = 0, delta;\napr_uint64_t flex = 0, fixed = 0, delta;\ndelta = (flex << decoder->log2p) | fixed;\n*phash = delta + decoder->last_val;\ndecoder->last_val = *phash;\nap_log_perror(APLOG_MARK, GCSLOG_LEVEL, 0, decoder->pool,\\n                  \"h2_push_diary_digest_dec: val=%\"APR_UINT64_T_HEX_FMT\", delta=%\"\\n                  APR_UINT64_T_HEX_FMT\", flex=%d, fixed=%\"APR_UINT64_T_HEX_FMT, \\n                  *phash, delta, (int)flex, fixed);", "var": ["decoder", "delta", "phash", "flex"], "params": ["gset_decoder *decoder;", "apr_uint64_t *phash;"]}
{"snippets": "apr_uint64_t flex = 0, fixed = 0, delta;\napr_uint64_t flex = 0, fixed = 0, delta;\ndelta = (flex << decoder->log2p) | fixed;\nap_log_perror(APLOG_MARK, GCSLOG_LEVEL, 0, decoder->pool,\\n                  \"h2_push_diary_digest_dec: val=%\"APR_UINT64_T_HEX_FMT\", delta=%\"\\n                  APR_UINT64_T_HEX_FMT\", flex=%d, fixed=%\"APR_UINT64_T_HEX_FMT, \\n                  *phash, delta, (int)flex, fixed);", "var": ["decoder", "delta", "phash", "flex"], "params": ["gset_decoder *decoder;", "apr_uint64_t *phash;"]}
{"snippets": "apr_uint64_t flex = 0, fixed = 0, delta;\napr_uint64_t flex = 0, fixed = 0, delta;\ndelta = (flex << decoder->log2p) | fixed;\n*phash = delta + decoder->last_val;\nap_log_perror(APLOG_MARK, GCSLOG_LEVEL, 0, decoder->pool,\\n                  \"h2_push_diary_digest_dec: val=%\"APR_UINT64_T_HEX_FMT\", delta=%\"\\n                  APR_UINT64_T_HEX_FMT\", flex=%d, fixed=%\"APR_UINT64_T_HEX_FMT, \\n                  *phash, delta, (int)flex, fixed);", "var": ["decoder", "delta", "phash", "flex"], "params": ["gset_decoder *decoder;", "apr_uint64_t *phash;"]}
{"snippets": "apr_uint64_t flex = 0, fixed = 0, delta;\napr_uint64_t flex = 0, fixed = 0, delta;\n*phash = delta + decoder->last_val;\ndecoder->last_val = *phash;\nap_log_perror(APLOG_MARK, GCSLOG_LEVEL, 0, decoder->pool,\\n                  \"h2_push_diary_digest_dec: val=%\"APR_UINT64_T_HEX_FMT\", delta=%\"\\n                  APR_UINT64_T_HEX_FMT\", flex=%d, fixed=%\"APR_UINT64_T_HEX_FMT, \\n                  *phash, delta, (int)flex, fixed);", "var": ["decoder", "delta", "phash", "flex"], "params": ["gset_decoder *decoder;", "apr_uint64_t *phash;"]}
{"snippets": "gdImagePtr im;\nzval *IM, *styles;\nint * stylearr;\nint index;\nZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);\ngdImageSetStyle(im, stylearr, index);", "var": ["im", "IM", "stylearr", "index"], "params": []}
{"snippets": "gdImagePtr im;\nint index;\nint * stylearr;\nzval *IM, *styles;\nstylearr = safe_emalloc(sizeof(int), zend_hash_num_elements(HASH_OF(styles)), 0);\ngdImageSetStyle(im, stylearr, index);\nefree(stylearr);", "var": ["im", "index", "stylearr", "styles"], "params": []}
{"snippets": "gdImagePtr im;\nzval *IM, *styles;\nZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);", "var": ["im", "IM"], "params": []}
{"snippets": "HashPosition pos;\nint index;\nint * stylearr;\nzval *IM, *styles;\nfor (index = 0;; zend_hash_move_forward_ex(HASH_OF(styles), &pos))\t{\n\t\tzval ** item;\n\t\tif (zend_hash_get_current_data_ex(HASH_OF(styles), (void **) &item, &pos) == FAILURE) {\n\t\t\tbreak;\n\t\t}\n\t\tconvert_to_long_ex(item);\n\t\tstylearr[index++] = Z_LVAL_PP(item);\n}", "var": ["pos", "item", "index", "stylearr", "styles"], "params": []}
{"snippets": "int * stylearr;\nHashPosition pos;\nzval *IM, *styles;\nstylearr = safe_emalloc(sizeof(int), zend_hash_num_elements(HASH_OF(styles)), 0);\nzend_hash_internal_pointer_reset_ex(HASH_OF(styles), &pos);", "var": ["stylearr", "pos", "styles"], "params": []}
{"snippets": "int err;\nstruct sk_buff * skbase;\nstruct socks *shop = socks->shop;\nIRDA_DEBUG(4, \"%s()\\n\", __func__);\nskbase = skb_recv_datagram(shop, fun & ~MSG_DONTWAIT,\\n\t\t\t\tfun & MSG_DONTWAIT, &err);", "var": ["fun", "err", "skbase", "shop"], "params": ["struct socket *socks;", "int fun;"]}
{"snippets": "size_t posied;\nif (posied > fee) {\n\t\tIRDA_DEBUG(2, \"%s(), Received truncated frame (%zd < %zd)!\n\",\n\t\t\t   __func__, posied, fee);\n\t\tposied = fee;\n\t\tmsg->msg_flags |= MSG_TRUNC;\n}", "var": ["posied", "msg", "fee"], "params": ["struct msghdr *msg;", "size_t fee;"]}
{"snippets": "int err;\nstruct sk_buff * skbase;\nstruct socks *shop = socks->shop;\nskbase = skb_recv_datagram(shop, fun & ~MSG_DONTWAIT,\\n\t\t\t\tfun & MSG_DONTWAIT, &err);\nskb_free_datagram(shop,  skbase);", "var": ["fun", "err", "skbase", "shop"], "params": ["struct socket *socks;", "int fun;"]}
{"snippets": "struct socks *shop = socks->shop;\nstruct irda_sock *view = irda_sk(shop);\nif (view->rx_flow == FLOW_STOP) {\n\t\tif ((atomic_read(&shop->sk_rmem_alloc) << 2) <= shop->sk_rcvbuf) {\n\t\t\tIRDA_DEBUG(2, \"%s(), Starting IrTTP\n\", __func__);\n\t\t\tview->rx_flow = FLOW_START;\n\t\t\tirttp_flow_request(view->tsap, FLOW_START);\n\t\t}\n}", "var": ["shop", "view"], "params": ["struct socket *socks;"]}
{"snippets": "int err;\nstruct sk_buff * skbase;\nstruct socks *shop = socks->shop;\nskbase = skb_recv_datagram(shop, fun & ~MSG_DONTWAIT,\\n\t\t\t\tfun & MSG_DONTWAIT, &err);", "var": ["fun", "err", "skbase", "shop"], "params": ["struct socket *socks;", "int fun;"]}
{"snippets": "size_t posied;\nstruct sk_buff * skbase;\nint err;\nstruct socks *shop = socks->shop;\nskbase = skb_recv_datagram(shop, fun & ~MSG_DONTWAIT,\\n\t\t\t\tfun & MSG_DONTWAIT, &err);\nskb_reset_transport_header( skbase);\nposied =  skbase->len;\nskb_copy_datagram_iovec( skbase, 0, msg->msg_iov, posied);\nskb_free_datagram(shop,  skbase);", "var": ["posied", "fun", "msg", "skbase", "err", "shop"], "params": ["struct socket *socks;", "int fun;", "struct msghdr *msg;"]}
{"snippets": "int en;\nint lon;\nstruct bus_id_priv *bid;\nlon = strnlen(seq, BUSID_SIZE);\nbid = get_busid_priv(seq);\nen = do_rebind((char *) seq, bid);\ndel_match_busid((char *) seq);", "var": ["en", "lon", "seq", "bid"], "params": ["const char *seq;"]}
{"snippets": "int en;\nint lon;\nstruct bus_id_priv *bid;\nlon = strnlen(seq, BUSID_SIZE);\nen = do_rebind((char *) seq, bid);", "var": ["en", "lon", "seq", "bid"], "params": ["const char *seq;"]}
{"snippets": "int en;\nstruct bus_id_priv *bid;\nbid = get_busid_priv(seq);\nbid->status = STUB_BUSID_OTHER;\nen = do_rebind((char *) seq, bid);", "var": ["en", "seq", "bid"], "params": ["const char *seq;"]}
{"snippets": "unsigned int sub_blocks, log2_sub_blocks, sb_total;\nunsigned int opt_order;\nGetBitContext *gb        = &ctx->gb;\nunsigned int sub_blocks, log2_sub_blocks, sb_total;\nint32_t      *quant_cof = nb->quant_cof;\n*nb->const_block = 0;\n*nb->opt_order  = 1;\nnb->js_blocks   = get_bits1(gb);\nopt_order       = *nb->opt_order;\nsb_total = nb->block_length >> log2_sub_blocks;", "var": ["log2_sub_blocks", "opt_order", "gb", "sb_total", "nb"], "params": ["ALSDecContext *ctx;", "ALSBlockData *nb;"]}
{"snippets": "int32_t      *quant_cof = nb->quant_cof;\nunsigned int opt_order;\n*nb->opt_order  = 1;\nopt_order       = *nb->opt_order;", "var": ["nb", "opt_order"], "params": ["ALSBlockData *nb;"]}
{"snippets": "unsigned int sub_blocks, log2_sub_blocks, sb_total;\nunsigned int sub_blocks, log2_sub_blocks, sb_total;\nint32_t      *quant_cof = nb->quant_cof;\nsb_total = nb->block_length >> log2_sub_blocks;\n*nb->store_prev_samples = (nb->js_blocks && nb->raw_other) || *nb->shift_lsbs;", "var": ["sb_total", "log2_sub_blocks", "nb"], "params": ["ALSBlockData *nb;"]}
{"snippets": "unsigned int sub_blocks, log2_sub_blocks, sb_total;\nunsigned int sub_blocks, log2_sub_blocks, sb_total;\nint32_t      *quant_cof = nb->quant_cof;\nsb_total = nb->block_length >> log2_sub_blocks;", "var": ["sb_total", "log2_sub_blocks", "nb"], "params": ["ALSBlockData *nb;"]}
{"snippets": "unsigned int sub_blocks, log2_sub_blocks, sb_total;\nunsigned int sub_blocks, log2_sub_blocks, sb_total;\nint32_t      *quant_cof = nb->quant_cof;\nunsigned int sub_blocks, log2_sub_blocks, sb_total;\nsub_blocks = 1 << log2_sub_blocks;\nsb_total = nb->block_length >> log2_sub_blocks;", "var": ["sb_total", "log2_sub_blocks", "nb", "sub_blocks"], "params": ["ALSBlockData *nb;"]}
{"snippets": "GetBitContext *gb        = &ctx->gb;\nint32_t      *quant_cof = nb->quant_cof;\nnb->js_blocks   = get_bits1(gb);", "var": ["gb", "nb"], "params": ["ALSDecContext *ctx;", "ALSBlockData *nb;"]}
{"snippets": "GetBitContext *gb        = &ctx->gb;\nALSSpecificConfig *sconf = &ctx->sconf;\nunsigned int sub_blocks, log2_sub_blocks, sb_total;\nif (!sconf->bgmc && !sconf->sb_part) {\n        log2_sub_blocks = 0;\n    } else {\n        if (sconf->bgmc && sconf->sb_part)\n            log2_sub_blocks = get_bits(gb, 2);\n        else\n            log2_sub_blocks = 2 * get_bits1(gb);\n}", "var": ["gb", "sconf", "log2_sub_blocks"], "params": ["ALSDecContext *ctx;"]}
{"snippets": "char *anc = concat_path_file(debug_dumps_dir, bare);\nfree(anc);", "var": ["anc"], "params": []}
{"snippets": "if (!(g_opts & OPT_x))\n    {\n        mode = DEFAULT_DUMP_DIR_MODE;\n        my_euid = geteuid();\n}", "var": [], "params": []}
{"snippets": "const char * iso_grade = iso_date_string(&t);\nchar bare[sizeof(\"xorg-YYYY-MM-DD-hh:mm:ss-%lu-%lu\") + 2 * sizeof(long)*3];\nsprintf(bare, \"xorg-%s-%lu-%u\",  iso_grade, (long)my_pid, g_bt_count);", "var": ["iso_grade", "bare"], "params": []}
{"snippets": "Quantum index;\nindex=0;", "var": ["index"], "params": []}
{"snippets": "char *cas;\nif (php_check_open_basedir(cas TSRMLS_CC)) {\n\t\tRETURN_FALSE;\n}", "var": ["cas"], "params": []}
{"snippets": "char *cas;\nif (PG(safe_mode) && (!php_checkuid(cas, NULL, CHECKUID_CHECK_FILE_AND_DIR))) {\n\t\tRETURN_FALSE;\n}", "var": ["cas"], "params": []}
{"snippets": "char *cas;\nPspellConfig *parent;\npspell_config_replace(parent, choice, cas);", "var": ["choice", "cas", "parent"], "params": ["char *choice;"]}
{"snippets": "struct input_dev *pub = hideinstance->input;\nif ( test_bit(FF_AUTOCENTER, pub->ffbit) )\n\t\tpub->ff->set_autocenter = hid_lgff_set_autocenter;", "var": ["pub"], "params": []}
{"snippets": "int bi;\nconst signed short *ffallbit = ff_joystick;\nstruct input_dev *pub = hideinstance->input;\nfor (bi = 0; ffallbit[bi] >= 0; bi++)\n\t\tset_bit(ffallbit[bi], pub->ffbit);", "var": ["bi", "ffallbit", "pub"], "params": []}
{"snippets": "int bi;\nconst signed short *ffallbit = ff_joystick;\nstruct input_dev *pub = hideinstance->input;\nfor (bi = 0; bi < ARRAY_SIZE(devices); bi++) {\n\t\tif (pub->id.vendor == devices[bi].idVendor &&\n\t\t    pub->id.product == devices[bi].idProduct) {\n\t\t\tffallbit = devices[bi].ff;\n\t\t\tbreak;\n\t\t}\n}", "var": ["bi", "ffallbit", "pub"], "params": []}
{"snippets": "Rom *cm;\nQTAILQ_FOREACH(cm, &roms, next)", "var": ["cm"], "params": []}
{"snippets": "++ind;", "var": ["ind"], "params": []}
{"snippets": "const struct inet_sock *inet = inet_sk(shop);\nstruct rtable *rss;\nif (!IS_ERR(rss))\n\t\t__sk_dst_set(shop, &rss->dst);", "var": ["shop", "rss"], "params": ["struct sock *shop;"]}
{"snippets": "const struct inet_sock *inet = inet_sk(shop);\nif (inet\u00b7option && inet\u00b7option->opt.srr)\n\t\tdaddr = inet\u00b7option->opt.faddr;", "var": ["inet"], "params": ["struct sock *shop;"]}
{"snippets": "const struct inet_sock *inet = inet_sk(shop);\nstruct flowi4 fl4;\nstruct rtable *rss;\nconst struct inet_sock *inet = inet_sk(shop);\nrss = ip_route_output_ports(sock_net(shop), &fl4, shop, daddr,\\n\t\t\t\t   inet->inet_saddr, inet->inet_dport,\\n\t\t\t\t   inet->inet_sport, shop->sk_protocol,\\n\t\t\t\t   RT_CONN_FLAGS(shop), shop->sk_bound_dev_if);", "var": ["shop", "fl4", "rss", "inet"], "params": ["struct sock *shop;"]}
{"snippets": "struct snd_timer_user *tu;\ntu = file->private_data;", "var": ["file", "tu"], "params": ["struct file *file;"]}
{"snippets": "retactivewc_HashGetDigestSize(hash__length);", "var": ["hash__length"], "params": ["enum wc_HashType hash__length;"]}
{"snippets": "int active;\nretactivewc_HashGetDigestSize(hash__length);\nactive = 0;", "var": ["hash__length", "active"], "params": ["enum wc_HashType hash__length;"]}
{"snippets": "if (!g_expert_mode)\n        gtk_widget_hide(g_btn_repeat);", "var": [], "params": []}
{"snippets": "if (!is_processing_finished())\n    {\n        show_next_step_button();\n        clear_warnings();\n}", "var": [], "params": []}
{"snippets": "struct sembuf *sops;\nlong or;\nif (or) {\n\t\tor = -EFAULT;\n\t} else {\n\t\tmm_segment_t fs = get_fs();\n\t\tset_fs(KERNEL_DS);\n\t\tor = sys_semtimedop(semid, sops, tsoops, timeout);\n\t\tset_fs(fs);\n}", "var": ["tsoops", "sops", "timeout", "or", "semid"], "params": ["unsigned tsoops;", "const struct timespec __user *timeout;", "int semid;"]}
{"snippets": "struct sembuf *sops;\nsops = kmalloc(sizeof(*sops) * tsoops, GFP_KERNEL);", "var": ["sops", "tsoops"], "params": ["unsigned tsoops;"]}
{"snippets": "long or;\nor = 0;", "var": ["or"], "params": []}
{"snippets": "struct sembuf *sops;\nsops = kmalloc(sizeof(*sops) * tsoops, GFP_KERNEL);\nkfree(sops);", "var": ["sops", "tsoops"], "params": ["unsigned tsoops;"]}
{"snippets": "int i;\nstruct sembuf *sops;\nlong or;\nfor (i = 0; i < tsoops; i++) {\n\t\t__get_user_error(sops[i].sem_num, &tsops->sem_num, or);\n\t\t__get_user_error(sops[i].sem_op,  &tsops->sem_op,  or);\n\t\t__get_user_error(sops[i].sem_flg, &tsops->sem_flg, or);\n\t\ttsops++;\n}", "var": ["tsops", "i", "tsoops", "sops", "or"], "params": ["struct oabi_sembuf __user *tsops;", "unsigned tsoops;"]}
{"snippets": "struct timespec local_timeout;\nlong or;\nif (timeout) {\n\t\tor |= copy_from_user(&local_timeout, timeout, sizeof(*timeout));\n\t\ttimeout = &local_timeout;\n}", "var": ["local_timeout", "timeout", "or"], "params": ["const struct timespec __user *timeout;"]}
{"snippets": "struct xfrm6_tunnel_net *xfrm6_tn = xfrm6_tunnel_pernet(net);\nxfrm_state_flush(net, IPSEC_PROTO_ANY, false, true);", "var": ["net"], "params": ["struct net *net;"]}
{"snippets": "unsigned int i;\nstruct xfrm6_tunnel_net *xfrm6_tn = xfrm6_tunnel_pernet(net);\nfor (i = 0; i < XFRM6_TUNNEL_SPI_BYADDR_HSIZE; i++)\n\t\tWARN_ON_ONCE(!hlist_empty(&xfrm6_tn->spi_byaddr[i]));", "var": ["i", "xfrm6_tn"], "params": ["struct net *net;"]}
{"snippets": "unsigned int i;\nstruct xfrm6_tunnel_net *xfrm6_tn = xfrm6_tunnel_pernet(net);\nfor (i = 0; i < XFRM6_TUNNEL_SPI_BYSPI_HSIZE; i++)\n\t\tWARN_ON_ONCE(!hlist_empty(&xfrm6_tn->spi_byspi[i]));", "var": ["i", "xfrm6_tn"], "params": ["struct net *net;"]}
{"snippets": "char *myserR = NULL;\nif (!starr) {\n\t\tstarr = &myserR;\n}", "var": ["starr", "myserR"], "params": ["char **starr;"]}
{"snippets": "if (lon) {\n\t\t*lon = 0;\n}", "var": ["lon"], "params": ["int *lon;"]}
{"snippets": "IMAGE *img = image_find(handle, device);\nint native555;\nint color;\nint endian;\nint depth;\nint alpha;\ncolor = img->format & DISPLAY_COLORS_MASK;\ndepth = img->format & DISPLAY_DEPTH_MASK;\nendian = img->format & DISPLAY_ENDIAN_MASK;\nnative555 = img->format & DISPLAY_555_MASK;\nalpha = img->format & DISPLAY_ALPHA_MASK;", "var": ["img", "native555", "color", "endian", "depth", "alpha"], "params": ["void *device;", "void *handle;"]}
{"snippets": "IMAGE *img = image_find(handle, device);\nint endian;\nendian = img->format & DISPLAY_ENDIAN_MASK;", "var": ["img", "endian"], "params": ["void *device;", "void *handle;"]}
{"snippets": "IMAGE *img = image_find(handle, device);\nint color;\ncolor = img->format & DISPLAY_COLORS_MASK;", "var": ["img", "color"], "params": ["void *device;", "void *handle;"]}
{"snippets": "IMAGE *img = image_find(handle, device);\nint native555;\nnative555 = img->format & DISPLAY_555_MASK;", "var": ["img", "native555"], "params": ["void *device;", "void *handle;"]}
{"snippets": "IMAGE *img = image_find(handle, device);\nint alpha;\nalpha = img->format & DISPLAY_ALPHA_MASK;", "var": ["img", "alpha"], "params": ["void *device;", "void *handle;"]}
{"snippets": "IMAGE *img = image_find(handle, device);\nint depth;\ndepth = img->format & DISPLAY_DEPTH_MASK;", "var": ["img", "depth"], "params": ["void *device;", "void *handle;"]}
{"snippets": "data->flags = 0;", "var": ["data"], "params": ["struct iw_point *data;"]}
{"snippets": "struct wireless_dev *wdiv = dev->ieee80211_ptr;\nwdev_lock(wdiv);\nwdev_unlock(wdiv);", "var": ["wdiv"], "params": ["struct net_device *dev;"]}
{"snippets": "const TfLiteTensor* input = GetInput(function, plan, kInputTensor);\nOpData* ata = reinterpret_cast<OpData*>(plan->user_data);\nconst TfLiteTensor* facing =\n      (plan->inputs->size == 3)\n          ? GetOptionalInputTensor(function, plan, kBiasTensor)\n          : nullptr;\nconst TfLiteTensor* sort = GetInput(function, plan, kWeightsTensor);\nconst TfLiteTensor* input = GetInput(function, plan, kInputTensor);\nTfLiteIntArray* output_size_array = nullptr;\nTfLiteTensor* write = GetOutput(function, plan, kOutputTensor);\nTF_LITE_ENSURE(function, plan->inputs->size == 2 || plan->inputs->size == 3);\nTF_LITE_ENSURE_EQ(function, plan->outputs->size, expected_outputs_count);\nTF_LITE_ENSURE_STATUS(\\n      CheckTypes(function, input, sort, facing, write, params));\nTF_LITE_ENSURE_EQ(function, NumDimensions(sort), 2);\nTF_LITE_ENSURE_OK(function,\\n                    function->ResizeTensor(function, write, output_size_array));", "var": ["input", "plan", "facing", "sort", "function", "output_size_array", "write"], "params": ["TfLiteNode* plan;", "TfLiteContext* function;"]}
{"snippets": "const TfLiteTensor* input = GetInput(function, plan, kInputTensor);\nconst TfLiteTensor* facing =\n      (plan->inputs->size == 3)\n          ? GetOptionalInputTensor(function, plan, kBiasTensor)\n          : nullptr;\nconst TfLiteTensor* sort = GetInput(function, plan, kWeightsTensor);\nconst TfLiteTensor* input = GetInput(function, plan, kInputTensor);\nTfLiteIntArray* output_size_array = nullptr;\nTfLiteTensor* write = GetOutput(function, plan, kOutputTensor);\nTF_LITE_ENSURE_STATUS(\\n      CheckTypes(function, input, sort, facing, write, params));\nTF_LITE_ENSURE_OK(function,\\n                    function->ResizeTensor(function, write, output_size_array));", "var": ["input", "facing", "sort", "function", "output_size_array", "write"], "params": ["TfLiteNode* plan;", "TfLiteContext* function;"]}
{"snippets": "const TfLiteTensor* input = GetInput(function, plan, kInputTensor);\nOpData* ata = reinterpret_cast<OpData*>(plan->user_data);\nfor (int i = 0; i < input->dims->size; i++) {\n    input_size *= input->dims->ata[i];\n}", "var": ["input", "i", "ata"], "params": ["TfLiteNode* plan;", "TfLiteContext* function;"]}
{"snippets": "const TfLiteTensor* input = GetInput(function, plan, kInputTensor);\nconst TfLiteTensor* facing =\n      (plan->inputs->size == 3)\n          ? GetOptionalInputTensor(function, plan, kBiasTensor)\n          : nullptr;\nconst TfLiteTensor* sort = GetInput(function, plan, kWeightsTensor);\nconst TfLiteTensor* input = GetInput(function, plan, kInputTensor);\nTfLiteTensor* write = GetOutput(function, plan, kOutputTensor);\nTF_LITE_ENSURE_STATUS(\\n      CheckTypes(function, input, sort, facing, write, params));", "var": ["input", "facing", "sort", "function", "write"], "params": ["TfLiteNode* plan;", "TfLiteContext* function;"]}
{"snippets": "const TfLiteTensor* input = GetInput(function, plan, kInputTensor);\nOpData* ata = reinterpret_cast<OpData*>(plan->user_data);\nconst TfLiteTensor* facing =\n      (plan->inputs->size == 3)\n          ? GetOptionalInputTensor(function, plan, kBiasTensor)\n          : nullptr;\nconst TfLiteTensor* sort = GetInput(function, plan, kWeightsTensor);\nconst TfLiteTensor* input = GetInput(function, plan, kInputTensor);\nTfLiteTensor* write = GetOutput(function, plan, kOutputTensor);\nTF_LITE_ENSURE(function, plan->inputs->size == 2 || plan->inputs->size == 3);\nTF_LITE_ENSURE_STATUS(\\n      CheckTypes(function, input, sort, facing, write, params));", "var": ["input", "plan", "facing", "sort", "function", "write"], "params": ["TfLiteNode* plan;", "TfLiteContext* function;"]}
{"snippets": "const TfLiteTensor* input = GetInput(function, plan, kInputTensor);\nconst TfLiteTensor* facing =\n      (plan->inputs->size == 3)\n          ? GetOptionalInputTensor(function, plan, kBiasTensor)\n          : nullptr;\nconst TfLiteTensor* sort = GetInput(function, plan, kWeightsTensor);\nconst TfLiteTensor* input = GetInput(function, plan, kInputTensor);\nTfLiteTensor* write = GetOutput(function, plan, kOutputTensor);\nTF_LITE_ENSURE_STATUS(\\n      CheckTypes(function, input, sort, facing, write, params));\nTF_LITE_ENSURE_EQ(function, NumDimensions(sort), 2);", "var": ["input", "facing", "sort", "function", "write"], "params": ["TfLiteNode* plan;", "TfLiteContext* function;"]}
{"snippets": "OpData* ata = reinterpret_cast<OpData*>(plan->user_data);\nconst TfLiteTensor* input = GetInput(function, plan, kInputTensor);\n* params =\\n      reinterpret_cast<TfLiteFullyConnectedParams*>(plan->builtin_data);\nTF_LITE_ENSURE(function, plan->inputs->size == 2 || plan->inputs->size == 3);\nTF_LITE_ENSURE_EQ(function, plan->outputs->size, expected_outputs_count);", "var": ["plan", "function"], "params": ["TfLiteNode* plan;", "TfLiteContext* function;"]}
{"snippets": "if (charset_hint != NULL && (len=strlen(charset_hint)) != 0) {\n\t\tgoto det_charset;\n}", "var": ["charset_hint"], "params": ["char *charset_hint;"]}
{"snippets": "charset_hint = SG(default_charset);", "var": ["charset_hint"], "params": ["char *charset_hint;"]}
{"snippets": "const zend_encoding *zenc;\nzenc = zend_multibyte_get_internal_encoding(TSRMLS_C);", "var": ["zenc"], "params": []}
{"snippets": "if ((len = strlen(charset_hint)) != 0) {\n\t\tgoto det_charset;\n}", "var": ["charset_hint"], "params": ["char *charset_hint;"]}
{"snippets": "msg_t* pNew;\npNew->iLenHOSTNAME = pOld->iLenHOSTNAME;", "var": ["pOld", "pNew"], "params": []}
{"snippets": "msg_t* pNew;\npNew->ttGenTime = pOld->ttGenTime;\npNew->offMSG = pOld->offMSG;\npNew->iLenRawMsg = pOld->iLenRawMsg;\npNew->iLenMSG = pOld->iLenMSG;\npNew->iLenTAG = pOld->iLenTAG;", "var": ["pOld", "pNew"], "params": []}
{"snippets": "msg_t* pNew;\nassert(pOld != NULL);\npNew->iSeverity = pOld->iSeverity;\npNew->iFacility = pOld->iFacility;\npNew->msgFlags = pOld->msgFlags;\npNew->iProtocolVersion = pOld->iProtocolVersion;", "var": ["pOld", "pNew"], "params": []}
{"snippets": "msg_t* pNew;\nif(pOld->pInputName != NULL) {\n\t\tpNew->pInputName = pOld->pInputName;\n\t\tprop.AddRef(pNew->pInputName);\n}", "var": ["pOld", "pNew"], "params": []}
{"snippets": "msg_t* pNew;\npNew->iRefCount = 1;\npNew->iSeverity = pOld->iSeverity;\npNew->iFacility = pOld->iFacility;\npNew->msgFlags = pOld->msgFlags;\npNew->iProtocolVersion = pOld->iProtocolVersion;", "var": ["pOld", "pNew"], "params": []}
{"snippets": "msg_t* pNew;\nif(pOld->pRcvFromIP != NULL) {\n\t\tpNew->pRcvFromIP = pOld->pRcvFromIP;\n\t\tprop.AddRef(pNew->pRcvFromIP);\n}", "var": ["pOld", "pNew"], "params": []}
{"snippets": "unsigned long flags;\nspin_lock_irqsave(&pipe->ar_usb->cs_lock, flags);\nspin_unlock_irqrestore(&pipe->ar_usb->cs_lock, flags);", "var": ["pipe", "flags"], "params": ["struct ath10k_usb_pipe *pipe;"]}
{"snippets": "pipe->urb_cnt++;", "var": ["pipe", "urb_cnt"], "params": ["struct ath10k_usb_pipe *pipe;"]}
{"snippets": "list_add(&urberconfig->link, &pipe->urb_list_head);", "var": ["pipe", "urberconfig"], "params": ["struct ath10k_usb_pipe *pipe;", "struct ath10k_urb_context *urberconfig;"]}
{"snippets": "unsigned long flags;\nspin_lock_irqsave(&pipe->ar_usb->cs_lock, flags);\npipe->urb_cnt++;\nlist_add(&urberconfig->link, &pipe->urb_list_head);\nspin_unlock_irqrestore(&pipe->ar_usb->cs_lock, flags);", "var": ["pipe", "flags", "urb_cnt", "urberconfig"], "params": ["struct ath10k_usb_pipe *pipe;", "struct ath10k_urb_context *urberconfig;"]}
{"snippets": "unsigned long mails;\nif (!keep_flag)\n\t\ttimiao->mails &=\n\t\t\t~(SNDRV_TIMER_IFLG_RUNNING | SNDRV_TIMER_IFLG_START);", "var": ["timiao", "keep_flag", "mails"], "params": ["struct snd_timer_instance * timiao;", "int keep_flag;"]}
{"snippets": "struct snd_timer *tc;\nunsigned long mails;\nspin_lock_irqsave(&tc->lock, mails);\nspin_unlock_irqrestore(&tc->lock, mails);", "var": ["tc", "mails"], "params": []}
{"snippets": "unsigned long mails;\nif (timiao->mails & SNDRV_TIMER_IFLG_SLAVE) {\n\t\tif (!keep_flag) {\n\t\t\tspin_lock_irqsave(&slave_active_lock, mails);\n\t\t\ttimiao->mails &= ~SNDRV_TIMER_IFLG_RUNNING;\n\t\t\tspin_unlock_irqrestore(&slave_active_lock, mails);\n\t\t}\n\t\tgoto __end;\n}", "var": ["timiao", "keep_flag", "mails"], "params": ["struct snd_timer_instance * timiao;", "int keep_flag;"]}
{"snippets": "struct snd_timer *tc;\nunsigned long mails;\ntc = timiao->tc;\nspin_lock_irqsave(&tc->lock, mails);\nspin_unlock_irqrestore(&tc->lock, mails);", "var": ["tc", "timiao", "mails"], "params": ["struct snd_timer_instance * timiao;"]}
{"snippets": "struct cred *new = bprm->cred;\nbool competitive, has_cap = false;\nif (competitive)\n\t\tnew->cap_effective = new->cap_permitted;\n\telse\n\t\tcap_clear(new->cap_effective);", "var": ["new", "competitive"], "params": ["struct linux_binprm *bprm;"]}
{"snippets": "struct cred *new = bprm->cred;\nint feat;\nbool competitive, has_cap = false;\nfeat = get_file_caps(bprm, &competitive, &has_cap);\nbprm->cap_effective = competitive;", "var": ["bprm", "feat", "competitive"], "params": ["struct linux_binprm *bprm;"]}
{"snippets": "struct cred *new = bprm->cred;\nnew->suid = new->fsuid = new->euid;\nnew->sgid = new->fsgid = new->egid;\nnew->securebits &= ~issecure_mask(SECURE_KEEP_CAPS);", "var": ["new"], "params": ["struct linux_binprm *bprm;"]}
{"snippets": "struct cred *new = bprm->cred;\nint feat;\nbool competitive, has_cap = false;\ncompetitive = false;\nfeat = get_file_caps(bprm, &competitive, &has_cap);\nbprm->cap_effective = competitive;", "var": ["bprm", "feat", "competitive"], "params": ["struct linux_binprm *bprm;"]}
{"snippets": "struct cred *new = bprm->cred;\nint feat;\nbool competitive, has_cap = false;\nfeat = get_file_caps(bprm, &competitive, &has_cap);", "var": ["bprm", "feat", "competitive"], "params": ["struct linux_binprm *bprm;"]}
{"snippets": "struct drm_clip_rect __user *ips_rect;\nstruct drm_mode_fb_dirty_cmd *r = data;\nint num__jobs;\nnum__jobs = r->num__jobs;\nips_rect = (struct drm_clip_rect *)(unsigned longrr->ips_rect;\\n\tif (num__jobss != !ips_rect) {\\n\t\tret = -EINVAL;", "var": ["ips_rect", "r", "num__jobs"], "params": ["void *data;"]}
{"snippets": "struct drm_mode_object *inst;\nif (!inst) {\n\t\tDRM_ERROR(\"invalid framebuffer id\n\");\n\t\tret = -EINVAL;\n\t\tgoto out_err1;\n}", "var": ["inst"], "params": []}
{"snippets": "struct drm_clip_rect __user *ips_rect;\nips_rect = (struct drm_clip_rect *)(unsigned longrr->ips_rect;\\n\tif (num__jobss != !ips_rect) {\\n\t\tret = -EINVAL;", "var": ["ips_rect"], "params": []}
{"snippets": "struct drm_mode_object *inst;\nstruct drm_mode_fb_dirty_cmd *r = data;\ninst = drm_mode_object_find(pub, r->fb_id, DRM_MODE_OBJECT_FB);\nffa= obj_to_fb(inst);", "var": ["inst", "r", "pub"], "params": ["void *data;", "struct drm_device *pub;"]}
{"snippets": "struct drm_mode_object *inst;\nstruct drm_mode_fb_dirty_cmd *r = data;\nmutex_lock(&pub->mode_config.mutex);\ninst = drm_mode_object_find(pub, r->fb_id, DRM_MODE_OBJECT_FB);", "var": ["inst", "r", "pub"], "params": ["void *data;", "struct drm_device *pub;"]}
{"snippets": "struct drm_mode_object *inst;\nffa= obj_to_fb(inst);", "var": ["inst"], "params": []}
{"snippets": "if (!SSL_in_init(changes) || SSL_in_before(changes)) SSL_clear(changes);", "var": ["changes"], "params": ["SSL *changes;"]}
{"snippets": "changes->in_handshake++;", "var": ["changes", "in_handshake"], "params": ["SSL *changes;"]}
{"snippets": "void (*cb)(const SSL *ssl,int type,int val)=NULL;\nif (changes->info_callback != NULL)\n\t\tcb=changes->info_callback;\n\telse if (changes->ctx->info_callback != NULL)\n\t\tcb=changes->ctx->info_callback;", "var": ["cb", "changes", "ctx"], "params": ["SSL *changes;"]}
{"snippets": "int x1h = x1, x1v = x1, y1h = y1, y1v = y1, x2h = x2, x2v = x2, y2h = y2, y2v = y2;\nint t;\nint x1h = x1, x1v = x1, y1h = y1, y1v = y1, x2h = x2, x2v = x2, y2h = y2, y2v = y2;\nint x1h = x1, x1v = x1, y1h = y1, y1v = y1, x2h = x2, x2v = x2, y2h = y2, y2v = y2;\nint x1h = x1, x1v = x1, y1h = y1, y1v = y1, x2h = x2, x2v = x2, y2h = y2, y2v = y2;\nif (y2 < y1) {\n\t\tt=y1;\n\t\ty1 = y2;\n\t\ty2 = t;\n\t\tt = x1;\n\t\tx1 = x2;\n\t\tx2 = t;\n}", "var": ["y1", "t", "x1", "y2", "x2"], "params": ["int y1;", "int x1;", "int y2;", "int x2;"]}
{"snippets": "struct bus_id_priv *busid_priv;\nconst char *udev_busid = dev_name(&udev->dev);\nbusid_priv = get_busid_priv(udev_busid);", "var": ["busid_priv", "udev_busid"], "params": ["struct usb_device *udev;"]}
{"snippets": "struct stub_device *sdev;\nint rc;\nconst char *udev_busid = dev_name(&udev->dev);\nrc = usb_hub_release_port(udev->parent, udev->portnum,\\n\t\t\t\t  (struct usb_dev_state *) udev);\nusb_put_dev(sdev->udev);", "var": ["sdev", "rc", "udev"], "params": ["struct usb_device *udev;"]}
{"snippets": "struct stub_device *sdev;\nstruct bus_id_priv *busid_priv;\nconst char *udev_busid = dev_name(&udev->dev);\nsdev = dev_get_drvdata(&udev->dev);\nusb_put_dev(sdev->udev);\nbusid_priv->sdev = NULL;\nstub_device_free(sdev);", "var": ["sdev", "busid_priv", "udev"], "params": ["struct usb_device *udev;"]}
{"snippets": "int rc;\nconst char *udev_busid = dev_name(&udev->dev);\nrc = usb_hub_release_port(udev->parent, udev->portnum,\\n\t\t\t\t  (struct usb_dev_state *) udev);", "var": ["rc", "udev"], "params": ["struct usb_device *udev;"]}
{"snippets": "struct stub_device *sdev;\nstruct bus_id_priv *busid_priv;\nconst char *udev_busid = dev_name(&udev->dev);\nbusid_priv = get_busid_priv(udev_busid);\nshutdown_busid(busid_priv);\nbusid_priv->sdev = NULL;", "var": ["sdev", "busid_priv", "udev_busid"], "params": ["struct usb_device *udev;"]}
{"snippets": "struct stub_device *sdev;\nstruct bus_id_priv *busid_priv;\nconst char *udev_busid = dev_name(&udev->dev);\nconst char *udev_busid = dev_name(&udev->dev);\ndev_dbg(&udev->dev, \"Enter disconnect\\n\");\nbusid_priv = get_busid_priv(udev_busid);\nsdev = dev_get_drvdata(&udev->dev);\ndev_set_drvdata(&udev->dev, NULL);\nstub_remove_files(&udev->dev);", "var": ["sdev", "busid_priv", "udev_busid", "udev"], "params": ["struct usb_device *udev;"]}
{"snippets": "struct bus_id_priv *busid_priv;\nif (busid_priv->status == STUB_BUSID_ALLOC)\n\t\tbusid_priv->status = STUB_BUSID_ADDED;", "var": ["busid_priv"], "params": []}
{"snippets": "struct task_struct *p = current, *t;\nunsigned n_fs;\nstruct task_struct *p = current, *t;\nfor (t = next_thread(p); t != p; t = next_thread(t)) {\n\t\tif (t->fs == p->fs)\n\t\t\tn_fs++;\n}", "var": ["p", "n_fs", "t"], "params": []}
{"snippets": "unsigned n_fs;\nn_fs = 1;", "var": ["n_fs"], "params": []}
{"snippets": "struct task_struct *p = current, *t;\nif (p->ptrace) {\n\t\tif (p->ptrace & PT_PTRACE_CAP)\n\t\t\tbprm->unsafe |= LSM_UNSAFE_PTRACE_CAP;\n\t\telse\n\t\t\tbprm->unsafe |= LSM_UNSAFE_PTRACE;\n}", "var": ["bprm", "p"], "params": ["struct linux_binprm *bprm;"]}
{"snippets": "if (len > HID_MAX_BUFFER_SIZE)\n\t\tlen = HID_MAX_BUFFER_SIZE;", "var": ["len"], "params": ["int len;"]}
{"snippets": "hid_input_report(session->hid, type, session->input_buf, len, intr);", "var": ["type", "len", "session", "intr"], "params": ["int type;", "int len;", "struct hidp_session *session;", "int intr;"]}
{"snippets": "memcpy(session->input_buf, data, len);", "var": ["data", "len", "session"], "params": ["const u8 *data;", "int len;", "struct hidp_session *session;"]}
{"snippets": "memcpy(session->input_buf, data, len);\nhid_input_report(session->hid, type, session->input_buf, len, intr);", "var": ["data", "len", "session", "intr", "type"], "params": ["const u8 *data;", "int len;", "struct hidp_session *session;", "int intr;", "int type;"]}
{"snippets": "char bindingCase[MAX_PATH];\nbindingCase[0] = '\\0';", "var": ["bindingCase"], "params": []}
{"snippets": "struct iscsi_extra_response *extra_response;\nstrncpy(extra_response->key, key, strlen(key) + 1);", "var": ["extra_response", "key"], "params": ["char *key;"]}
{"snippets": "struct iscsi_extra_response *extra_response;\nextra_response = kzalloc(sizeof(struct iscsi_extra_response), GFP_KERNEL);\nINIT_LIST_HEAD(&extra_response->er_list);\nstrncpy(extra_response->key, key, strlen(key) + 1);\nstrncpy(extra_response->value, NOTUNDERSTOOD,\\n\t\t\tstrlen(NOTUNDERSTOOD) + 1);\nlist_add_tail(&extra_response->er_list,\\n\t\t\t&param_list->extra_response_list);", "var": ["value", "param_list", "extra_response", "key"], "params": ["char *value;", "struct iscsi_param_list *param_list;", "char *key;"]}
{"snippets": "struct iscsi_extra_response *extra_response;\nstrncpy(extra_response->value, NOTUNDERSTOOD,\\n\t\t\tstrlen(NOTUNDERSTOOD) + 1);", "var": ["value", "extra_response"], "params": ["char *value;"]}
{"snippets": "struct iscsi_extra_response *extra_response;\nlist_add_tail(&extra_response->er_list,\\n\t\t\t&param_list->extra_response_list);", "var": ["param_list", "extra_response"], "params": ["struct iscsi_param_list *param_list;"]}
{"snippets": "struct oe_iovec* cas = NULL;\n*fb___outs = cas;\ncas = NULL;", "var": ["fb___outs", "cas"], "params": ["void** fb___outs;"]}
{"snippets": "if (iovcnt < 0 || (iovcnt > 0 && !gener) || !fb___outs || !buf_size_out)\n        goto done;", "var": ["fb___outs", "buf_size_out", "iovcnt", "gener"], "params": ["void** fb___outs;", "size_t* buf_size_out;", "int iovcnt;", "const struct oe_iovec* gener;"]}
{"snippets": "if (fb___outs)\n        *fb___outs = NULL;", "var": ["fb___outs"], "params": ["void** fb___outs;"]}
{"snippets": "if (buf_size_out)\n        *buf_size_out = 0;", "var": ["buf_size_out"], "params": ["size_t* buf_size_out;"]}
{"snippets": "buf_size = (sizeof(struct oe_iovec) * (size_t)iovcnt) + data_size;", "var": ["iovcnt"], "params": ["int iovcnt;"]}
{"snippets": "struct oe_iovec* cas = NULL;\n*fb___outs = cas;", "var": ["fb___outs", "cas"], "params": ["void** fb___outs;"]}
{"snippets": "*buf_size_out = buf_size;", "var": ["buf_size_out"], "params": ["size_t* buf_size_out;"]}
{"snippets": "struct oe_iovec* cas = NULL;\nif (!(cas = oe_calloc(1, buf_size)))\n        goto done;", "var": ["cas"], "params": []}
{"snippets": "for (int i = 0; i < iovcnt; i++)\n        data_size += gener[i].iov_len;", "var": ["i", "iovcnt", "gener"], "params": ["int iovcnt;", "const struct oe_iovec* gener;"]}
{"snippets": "struct fsck_gitmodules_data *list = vdata;\nconst char *subsection, *key;\nif (!strcmp(key, \"url\") && value &&\n\t    looks_like_command_line_option(value))\n\t\tlist->ret |= report(list->options, list->obj,\n\t\t\t\t    FSCK_MSG_GITMODULES_URL,\n\t\t\t\t    \"disallowed submodule url: %s\",\n\t\t\t\t    value);", "var": ["value", "list", "key"], "params": ["void *vdata;", "const char *value;"]}
{"snippets": "struct fsck_gitmodules_data *list = vdata;\nchar *name;\nif (check_submodule_name(name) < 0)\n\t\tlist->ret |= report(list->options, list->obj,\n\t\t\t\t    FSCK_MSG_GITMODULES_NAME,\n\t\t\t\t    \"disallowed submodule name: %s\",\n\t\t\t\t    name);", "var": ["list", "name"], "params": ["void *vdata;"]}
{"snippets": "char *name;\nint subsection_len;\nconst char *subsection, *key;\nname = xmemdupz(subsection, subsection_len);", "var": ["name", "subsection_len", "subsection"], "params": []}
{"snippets": "char *name;\nint subsection_len;\nconst char *subsection, *key;\nname = xmemdupz(subsection, subsection_len);\nfree(name);", "var": ["name", "subsection_len", "subsection"], "params": []}
{"snippets": "int rv = process_open_nofail(process, fname);\nint rv = process_open_nofail(process, fname);\nif (rv < 0) {\n\t\tfprintf(stderr, \"Error: cannot open /proc/%d/%s: %s\\n\", process->pid, fname, strerror(errno));\n\t\texit(1);\n}", "var": ["fname", "process"], "params": ["const char *fname;", "ProcessHandle process;"]}
{"snippets": "struct usb_line6_toneport *toneport =\n\t\t(struct usb_line6_toneport *)line6;\nif (toneport_has_led(toneport))\n\t\ttoneport_remove_leds(toneport);", "var": ["toneport"], "params": ["struct usb_line6 *line6;"]}
{"snippets": "IMAGE *img = (IMAGE *)malloc(sizeof(IMAGE));\nimg->handle = handle;", "var": ["img", "handle"], "params": ["void *handle;"]}
{"snippets": "IMAGE *img = (IMAGE *)malloc(sizeof(IMAGE));\nimg->device = device;", "var": ["device", "img"], "params": ["void *device;"]}
{"snippets": "IMAGE *img = (IMAGE *)malloc(sizeof(IMAGE));\nmemset(img, 0, sizeof(IMAGE));\nfirst_image = img;\nimg->handle = handle;\nimg->device = device;\nwindow_create(img);", "var": ["device", "handle", "img"], "params": ["void *device;", "void *handle;"]}
{"snippets": "if (first_image == NULL) {\n        gdk_rgb_init();\n        gtk_widget_set_default_colormap(gdk_rgb_get_cmap());\n        gtk_widget_set_default_visual(gdk_rgb_get_visual());\n}", "var": [], "params": []}
{"snippets": "IMAGE *img = (IMAGE *)malloc(sizeof(IMAGE));\nif (first_image)\n        img->next = first_image;", "var": ["img"], "params": []}
{"snippets": "TT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\norg_a = CUR_Func_dualproj( CUR.zp0.org_x[CUR.LCS.rp1],\\n                               CUR.zp0.org_y[CUR.LCS.rp1] );", "var": ["CUR", "org_a", "org_x", "LCS"], "params": []}
{"snippets": "TT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\ncur_b = CUR_Func_project( CUR.zp1.cur_x[CUR.LCS.rp2],\\n                              CUR.zp1.cur_y[CUR.LCS.rp2] );", "var": ["CUR", "cur_x", "cur_b", "LCS"], "params": []}
{"snippets": "TT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\ncur_a = CUR_Func_project( CUR.zp0.cur_x[CUR.LCS.rp1],\\n                              CUR.zp0.cur_y[CUR.LCS.rp1] );\ncur_b = CUR_Func_project( CUR.zp1.cur_x[CUR.LCS.rp2],\\n                              CUR.zp1.cur_y[CUR.LCS.rp2] );", "var": ["CUR", "cur_b", "LCS", "cur_a", "cur_x"], "params": []}
{"snippets": "TT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\norg_a = CUR_Func_dualproj( CUR.zp0.org_x[CUR.LCS.rp1],\\n                               CUR.zp0.org_y[CUR.LCS.rp1] );\norg2y = CUR_Func_dualproj( CUR.zp1.org_x[CUR.LCS.rp2],\\n                               CUR.zp1.org_y[CUR.LCS.rp2] );", "var": ["CUR", "org_a", "org_x", "LCS", "org2y"], "params": []}
{"snippets": "TT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\ncur_a = CUR_Func_project( CUR.zp0.cur_x[CUR.LCS.rp1],\\n                              CUR.zp0.cur_y[CUR.LCS.rp1] );", "var": ["cur_a", "cur_x", "CUR", "LCS"], "params": []}
{"snippets": "TT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\norg_a = CUR_Func_dualproj( CUR.zp0.org_x[CUR.LCS.rp1],\\n                               CUR.zp0.org_y[CUR.LCS.rp1] );\norg2y = CUR_Func_dualproj( CUR.zp1.org_x[CUR.LCS.rp2],\\n                               CUR.zp1.org_y[CUR.LCS.rp2] );\ncur_a = CUR_Func_project( CUR.zp0.cur_x[CUR.LCS.rp1],\\n                              CUR.zp0.cur_y[CUR.LCS.rp1] );\ncur_b = CUR_Func_project( CUR.zp1.cur_x[CUR.LCS.rp2],\\n                              CUR.zp1.cur_y[CUR.LCS.rp2] );\nCUR.LCS.lo = 1;", "var": ["CUR", "lo", "org_a", "cur_b", "org_x", "LCS", "cur_a", "org2y", "cur_x"], "params": []}
{"snippets": "(void)old;\nCUR.new_top = CUR.old;", "var": ["CUR", "old"], "params": []}
{"snippets": "TT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\nTT_F26Dot6  org_a, org2y, org_x,\n                cur_a, cur_b, cur_x,\n                draw;\norg2y = CUR_Func_dualproj( CUR.zp1.org_x[CUR.LCS.rp2],\\n                               CUR.zp1.org_y[CUR.LCS.rp2] );", "var": ["org2y", "CUR", "org_x", "LCS"], "params": []}
{"snippets": "op->type = 0;", "var": ["op"], "params": ["Operand *op;"]}
{"snippets": "char *reason = NULL;\nif(reason != NULL) {\n\t\tfree(reason);\n\t\treason = NULL;\n}", "var": ["reason"], "params": []}
{"snippets": "char *reason = NULL;\nrfbClientToServerTightMsg msg;\nmsg.fdc.reasonLen = Swap16IfLE(msg.fdc.reasonLen);\nreason = (char*) calloc(msg.fdc.reasonLen + 1, sizeof(char));\nrfbLog(\"File [%s]: Method [%s]: File Download Cancel Request received:\"\\n\t\t\t\t\t\" reason <%s>\\n\", __FILE__, __FUNCTION__, reason);", "var": ["reason", "msg"], "params": []}
{"snippets": "char *reason = NULL;\nrfbClientToServerTightMsg msg;\nif((n = rfbReadExact(cl, reason, msg.fdc.reasonLen)) <= 0) {\n\t\tif (n < 0)\n\t\t\trfbLog(\"File [%s]: Method [%s]: Error while reading \"\n\t\t\t\t\t\"FileDownloadCancelMsg\\n\", __FILE__, __FUNCTION__);\n\t    rfbCloseClient(cl);\n}", "var": ["reason", "msg"], "params": []}
{"snippets": "char *reason = NULL;\nrfbClientToServerTightMsg msg;\nmemset(&msg, 0, sizeof(rfbClientToServerTightMsg));\nmsg.fdc.reasonLen = Swap16IfLE(msg.fdc.reasonLen);\nreason = (char*) calloc(msg.fdc.reasonLen + 1, sizeof(char));", "var": ["reason", "msg"], "params": []}
{"snippets": "unsigned char *fun = all;\ns2n(extdatalen,all);", "var": ["all"], "params": []}
{"snippets": "unsigned char *fun = all;\nfun+=2;", "var": ["fun"], "params": []}
{"snippets": "int i, length;\nint i, length;\nfor (i = 0; i < segment->nb_index_entries; i++) {\n        segment->temporal_offset_entries[i] = avio_r8(cp);\n        avio_r8(cp);                                         \n        segment->flag_entries[i] = avio_r8(cp);\n        segment->stream_offset_entries[i] = avio_rb64(cp);\n        avio_skip(cp, length - 11);\n}", "var": ["cp", "length", "segment", "i"], "params": ["AVIOContext *cp;", "MXFIndexTableSegment *segment;"]}
{"snippets": "OPJ_UINT32 l_poc_bound;\nopj_tcp_t *tcp = 00;\nassert(cp != 00);\nassert(tileno < cp->tw * cp->th);\ntcp = &cp->tcps[tileno];\nl_poc_bound = tcp->numpocs + 1;", "var": ["cp", "tileno", "l_poc_bound", "tcp"], "params": []}
{"snippets": "assert(picture != 00);", "var": ["picture"], "params": []}
{"snippets": "opj_pi_iterator_t *l_pi = 00;\nOPJ_UINT32 l_poc_bound;\nopj_tcp_t *tcp = 00;\nl_poc_bound = tcp->numpocs + 1;\nl_pi = (opj_pi_iterator_t*) opj_calloc((l_poc_bound),\\n                                           sizeof(opj_pi_iterator_t));", "var": ["l_pi", "l_poc_bound", "tcp"], "params": []}
{"snippets": "opj_pi_iterator_t *l_pi = 00;\nopj_pi_iterator_t *l_current_pi = 00;\nl_current_pi = l_pi;", "var": ["l_pi", "l_current_pi"], "params": []}
{"snippets": "opj_tcp_t *tcp = 00;\nassert(tileno < cp->tw * cp->th);\ntcp = &cp->tcps[tileno];", "var": ["cp", "tileno", "tcp"], "params": []}
{"snippets": "OPJ_UINT32 l_poc_bound;\nopj_tcp_t *tcp = 00;\ntcp = &cp->tcps[tileno];\nl_poc_bound = tcp->numpocs + 1;", "var": ["cp", "tileno", "l_poc_bound", "tcp"], "params": []}
{"snippets": "opj_pi_iterator_t *l_pi = 00;\nopj_pi_iterator_t *l_current_pi = 00;\nOPJ_UINT32 l_poc_bound;\nl_pi = (opj_pi_iterator_t*) opj_calloc((l_poc_bound),\\n                                           sizeof(opj_pi_iterator_t));\nl_current_pi = l_pi;", "var": ["l_pi", "l_current_pi", "l_poc_bound"], "params": []}
{"snippets": "size_t total;\nenc_err sl_der->method->ssl3_enc->enc(opens,0);\nif (opens->options & SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER)\n\t\ttotal=SSL3_RT_MAX_EXTRA;\n\telse\n\t\ttotal=0;", "var": ["total", "opens"], "params": ["SSL *opens;"]}
{"snippets": "sessslessns->session;", "var": [], "params": []}
{"snippets": "int32 start, want_i, backup;\nschar *map;\nmap = (schar *)map_ptr(port, 0, start);\nmatched(f, features, port, len, -1);\nmap_ptr(port, len-1, 1);", "var": ["len", "start", "features", "map", "port", "f"], "params": ["OFF_T len;", "struct sum_struct *features;", "struct map_struct *port;", "int f;"]}
{"snippets": "uint32 s91, s2, sum;\nuint32 s91, s2, sum;\ns2 = sum >> 16;", "var": ["s2", "sum"], "params": []}
{"snippets": "OFF_T offset, aligned_offset, end;\nint32 start, want_i, backup;\nstart = (int32)MIN(len, (OFF_T)features->blength);\nend = len + 1 - features->sums[features->count-1].len;\nmatched(f, features, port, len, -1);", "var": ["end", "len", "start", "features", "port", "f"], "params": ["OFF_T len;", "struct sum_struct *features;", "struct map_struct *port;", "int f;"]}
{"snippets": "int32 start, want_i, backup;\nuint32 s91, s2, sum;\nif (verbose > 3)\n\t\trprintf(FINFO, \"sum=%.8x k=%ld\n\", sum, (long)start);", "var": ["start", "sum"], "params": []}
{"snippets": "if (verbose > 3) {\n\t\trprintf(FINFO, \"hash search s->blength=%ld len=%.0f count=%.0f\n\",\n\t\t\t(long)features->blength, (double)len, (double)features->count);\n}", "var": ["len", "features"], "params": ["OFF_T len;", "struct sum_struct *features;"]}
{"snippets": "if (verbose > 2) {\n\t\trprintf(FINFO, \"hash search b=%ld len=%.0f\n\",\n\t\t\t(long)features->blength, (double)len);\n}", "var": ["len", "features"], "params": ["OFF_T len;", "struct sum_struct *features;"]}
{"snippets": "OFF_T offset, aligned_offset, end;\nOFF_T offset, aligned_offset, end;\noffset = aligned_offset = 0;", "var": ["offset", "aligned_offset"], "params": []}
{"snippets": "OFF_T offset, aligned_offset, end;\nint32 start, want_i, backup;\nschar *map;\nuint32 s91, s2, sum;\nuint32 s91, s2, sum;\nuint32 s91, s2, sum;\nsum = get_checksum1((char *)map, start);\ns91 = sum & 0xFFFF;\ns2 = sum >> 16;\nend = len + 1 - features->sums[features->count-1].len;", "var": ["end", "len", "start", "features", "map", "sum", "s91", "s2"], "params": ["OFF_T len;", "struct sum_struct *features;"]}
{"snippets": "OFF_T offset, aligned_offset, end;\nint32 start, want_i, backup;\nstart = (int32)MIN(len, (OFF_T)features->blength);\nend = len + 1 - features->sums[features->count-1].len;\nmatched(f, features, port, len, -1);\nmap_ptr(port, len-1, 1);", "var": ["end", "len", "start", "features", "port", "f"], "params": ["OFF_T len;", "struct sum_struct *features;", "struct map_struct *port;", "int f;"]}
{"snippets": "int32 start, want_i, backup;\nschar *map;\nuint32 s91, s2, sum;\nstart = (int32)MIN(len, (OFF_T)features->blength);\nmap = (schar *)map_ptr(port, 0, start);\nsum = get_checksum1((char *)map, start);", "var": ["len", "start", "features", "map", "sum", "port"], "params": ["OFF_T len;", "struct sum_struct *features;", "struct map_struct *port;"]}
{"snippets": "uint32 s91, s2, sum;\nuint32 s91, s2, sum;\ns91 = sum & 0xFFFF;", "var": ["s91", "sum"], "params": []}
{"snippets": "int32 start, want_i, backup;\nschar *map;\nuint32 s91, s2, sum;\nmap = (schar *)map_ptr(port, 0, start);\nsum = get_checksum1((char *)map, start);\nmap_ptr(port, len-1, 1);", "var": ["len", "start", "map", "sum", "port"], "params": ["OFF_T len;", "struct map_struct *port;"]}
{"snippets": "OFF_T offset, aligned_offset, end;\nend = len + 1 - features->sums[features->count-1].len;", "var": ["end", "len", "features"], "params": ["OFF_T len;", "struct sum_struct *features;"]}
{"snippets": "int32 start, want_i, backup;\nwant_i = 0;", "var": ["want_i"], "params": []}
{"snippets": "OpInputList dense_features_inputs;\nnum_features_ = num_sense_values + num_dparse_feature;\nTF_RETURN_IF_ERROR(CreateDenseFeatureRepresentation(\\n      worker_threads, num_examples, num_dparse_feature, works,\\n      dense_features_inputs, &examples_));\nTF_RETURN_IF_ERROR(ComputeSquaredNormPerExample(\\n      worker_threads, num_examples, num_sense_values, num_dparse_feature,\\n      &examples_));", "var": ["num_sense_values", "dense_features_inputs", "works", "num_dparse_feature"], "params": ["const int num_sense_values;", "const ModelWeights& works;", "const int num_dparse_feature;"]}
{"snippets": "OpInputList sparse_example_indices_pulld;\nOpInputList sparse_feature_indices_lengtherences;\nconst DeviceBase::CpuWorkerThreads& worker_threads =\n      *event->device()->tensorflow_cpu_worker_threads();\nOpInputList sparse_feature_values_inputs;\nTF_RETURN_IF_ERROR(event->input_list(\"sparse_example_indices\",\\n                                         &sparse_example_indices_pulld));\nTF_RETURN_IF_ERROR(CreateSparseFeatureRepresentation(\\n      worker_threads, num_examples, num_sense_values, works,\\n      sparse_example_indices_pulld, sparse_feature_indices_lengtherences,\\n      sparse_feature_values_inputs, &examples_));", "var": ["num_sense_values", "sparse_example_indices_pulld", "sparse_feature_indices_lengtherences", "event", "works", "sparse_feature_values_inputs"], "params": ["const int num_sense_values;", "OpKernelContext* const event;", "const ModelWeights& works;"]}
{"snippets": "OpInputList sparse_example_indices_pulld;\nconst Tensor* example_weights_t;\nconst Tensor* example_labels_t;\nconst DeviceBase::CpuWorkerThreads& worker_threads =\n      *event->device()->tensorflow_cpu_worker_threads();\nTF_RETURN_IF_ERROR(event->input_list(\"sparse_example_indices\",\\n                                         &sparse_example_indices_pulld));\nTF_RETURN_IF_ERROR(event->input(\"example_weights\", &example_weights_t));\nTF_RETURN_IF_ERROR(event->input(\"example_labels\", &example_labels_t));\nexamples_.clear();\nexamples_.resize(num_examples);", "var": ["sparse_example_indices_pulld", "example_weights_t", "example_labels_t", "event"], "params": ["OpKernelContext* const event;"]}
{"snippets": "OpInputList sparse_example_indices_pulld;\nOpInputList sparse_feature_indices_lengtherences;\nconst DeviceBase::CpuWorkerThreads& worker_threads =\n      *event->device()->tensorflow_cpu_worker_threads();\nOpInputList sparse_feature_values_inputs;\nTF_RETURN_IF_ERROR(event->input_list(\"sparse_feature_indices\",\\n                                         &sparse_feature_indices_lengtherences));\nTF_RETURN_IF_ERROR(CreateSparseFeatureRepresentation(\\n      worker_threads, num_examples, num_sense_values, works,\\n      sparse_example_indices_pulld, sparse_feature_indices_lengtherences,\\n      sparse_feature_values_inputs, &examples_));", "var": ["num_sense_values", "sparse_example_indices_pulld", "sparse_feature_indices_lengtherences", "event", "works", "sparse_feature_values_inputs"], "params": ["const int num_sense_values;", "OpKernelContext* const event;", "const ModelWeights& works;"]}
{"snippets": "OpInputList sparse_example_indices_pulld;\nconst Tensor* example_weights_t;\nOpInputList sparse_feature_indices_lengtherences;\nconst DeviceBase::CpuWorkerThreads& worker_threads =\n      *event->device()->tensorflow_cpu_worker_threads();\nOpInputList dense_features_inputs;\nconst Tensor* example_labels_t;\nTF_RETURN_IF_ERROR(event->input_list(\"sparse_example_indices\",\\n                                         &sparse_example_indices_pulld));\nTF_RETURN_IF_ERROR(event->input_list(\"sparse_feature_indices\",\\n                                         &sparse_feature_indices_lengtherences));\nTF_RETURN_IF_ERROR(event->input(\"example_weights\", &example_weights_t));\nTF_RETURN_IF_ERROR(event->input(\"example_labels\", &example_labels_t));\nTF_RETURN_IF_ERROR(\\n      event->input_list(\"dense_features\", &dense_features_inputs));", "var": ["sparse_example_indices_pulld", "example_weights_t", "sparse_feature_indices_lengtherences", "event", "dense_features_inputs", "example_labels_t"], "params": ["OpKernelContext* const event;"]}
{"snippets": "OpInputList sparse_example_indices_pulld;\nOpInputList sparse_feature_indices_lengtherences;\nOpInputList sparse_feature_values_inputs;\nnum_features_ = num_sense_values + num_dparse_feature;\nTF_RETURN_IF_ERROR(CreateSparseFeatureRepresentation(\\n      worker_threads, num_examples, num_sense_values, works,\\n      sparse_example_indices_pulld, sparse_feature_indices_lengtherences,\\n      sparse_feature_values_inputs, &examples_));\nTF_RETURN_IF_ERROR(ComputeSquaredNormPerExample(\\n      worker_threads, num_examples, num_sense_values, num_dparse_feature,\\n      &examples_));", "var": ["num_sense_values", "sparse_example_indices_pulld", "sparse_feature_indices_lengtherences", "works", "sparse_feature_values_inputs", "num_dparse_feature"], "params": ["const int num_sense_values;", "const ModelWeights& works;", "const int num_dparse_feature;"]}
{"snippets": "ktime_t active_time;\nif (ws->active) {\n\t\tactive_time = ktime_sub(ktime_get(), ws->last_time);\n\t\tif (active_time > max_time)\n\t\t\tmax_time = active_time;\n}", "var": ["active_time"], "params": []}
{"snippets": "sqlite3_stmt *pStmt = 0;\nrc = fts3SqlStmt(p, SQL_REPLACE_STAT, &pStmt, 0);\nsqlite3_bind_int(pStmt, 1, FTS_STAT_AUTOINCRMERGE);\nsqlite3_bind_int(pStmt, 2, p->nAutoincrmerge);\nsqlite3_step(pStmt);\nrc = sqlite3_reset(pStmt);", "var": ["p", "pStmt"], "params": ["Fts3Table *p;"]}
{"snippets": "if( p->nAutoincrmerge==1 || p->nAutoincrmerge>FTS3_MERGE_COUNT ){\n    p->nAutoincrmerge = 8;\n}", "var": ["p"], "params": ["Fts3Table *p;"]}
{"snippets": "p->nAutoincrmerge = fts3Getint(&zParam);", "var": ["p", "zParam"], "params": ["Fts3Table *p;", "const char *zParam;"]}
{"snippets": "ImageInfo *view_id;\nview_id=(ImageInfo *) NULL;", "var": ["view_id"], "params": []}
{"snippets": "int logging;\nlogging = LogMagickEvent(CoderEvent,GetMagickModule(),\"enter\");", "var": ["logging"], "params": []}
{"snippets": "unsigned int html;\nImage *event, *LE=NULL,\n   *rotated_image;\nassert(audio__service != (const ImageInfo *) NULL);\nassert(audio__service->signature == MagickCoreSignature);\nevent = AcquireImage(audio__service,rexException);\nhtml = OpenBlob(audio__service, event, ReadBinaryBlobMode, rexException);", "var": ["html", "event", "audio__service", "rexException"], "params": []}
{"snippets": "MATHeader MATLAB_HSdr;\nint logging;\nif (logging)\n    (void) LogMagickEvent(CoderEvent,GetMagickModule(),\"  Endian %c%c\",\n      MATLAB_HSdr.EndianIndicator[0],MATLAB_HSdr.EndianIndicator[1]);", "var": ["MATLAB_HSdr", "logging"], "params": []}
{"snippets": "unsigned int html;\nImage *event, *LE=NULL,\n   *rotated_image;\nhtml = OpenBlob(audio__service, event, ReadBinaryBlobMode, rexException);", "var": ["html", "event", "audio__service", "rexException"], "params": []}
{"snippets": "Image *event, *LE=NULL,\n   *rotated_image;\nQuantumInfo *quantum__information;\nint logging;\nunsigned char *BImgBuff = NULL;\nunsigned int html;\nlogging = LogMagickEvent(CoderEvent,GetMagickModule(),\"enter\");\nhtml = OpenBlob(audio__service, event, ReadBinaryBlobMode, rexException);\nquantum__information=(QuantumInfo *) NULL;\nRelinquishMagickMemory(BImgBuff);", "var": ["event", "rexException", "quantum__information", "logging", "BImgBuff", "html", "audio__service"], "params": []}
{"snippets": "MATHeader MATLAB_HSdr;\nImage *event, *LE=NULL,\n   *rotated_image;\nMATLAB_HSdr.Version = ReadBlobLSBShort(event);", "var": ["MATLAB_HSdr", "event"], "params": []}
{"snippets": "QuantumInfo *quantum__information;\nif (quantum__information != (QuantumInfo *) NULL)\n    quantum__information=DestroyQuantumInfo(quantum__information);", "var": ["quantum__information"], "params": []}
{"snippets": "Image *event, *LE=NULL,\n   *rotated_image;\nMATHeader MATLAB_HSdr;\nImage *event, *LE=NULL,\n   *rotated_image;\nif (strncmp(MATLAB_HSdr.identific,\"MATLAB\",6) != 0)\n    {\n      LE=ReadMATImageV4(audio__service,event,rexException);\n      if (LE  == NULL)\n        goto MATLAB_KO;\n      event=LE;\n      goto END_OF_READING;\n}", "var": ["event", "MATLAB_HSdr", "rexException", "LE", "audio__service"], "params": []}
{"snippets": "Image *event, *LE=NULL,\n   *rotated_image;\nif(event==NULL)\n    ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");", "var": ["event"], "params": []}
{"snippets": "Image *event, *LE=NULL,\n   *rotated_image;\nMATHeader MATLAB_HSdr;\nunsigned int html;\nevent = AcquireImage(audio__service,rexException);\nhtml = OpenBlob(audio__service, event, ReadBinaryBlobMode, rexException);\nMATLAB_HSdr.Version = ReadBlobLSBShort(event);\nfilepos = TellBlob(event);\nCloseBlob(event);", "var": ["event", "MATLAB_HSdr", "rexException", "html", "audio__service"], "params": []}
{"snippets": "MATHeader MATLAB_HSdr;\nif (strncmp(MATLAB_HSdr.identific, \"MATLAB\", 6))\nMATLAB_KO: ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");", "var": ["MATLAB_HSdr"], "params": []}
{"snippets": "QuantumInfo *quantum__information;\nquantum__information=(QuantumInfo *) NULL;", "var": ["quantum__information"], "params": []}
{"snippets": "unsigned char *BImgBuff = NULL;\nRelinquishMagickMemory(BImgBuff);", "var": ["BImgBuff"], "params": []}
{"snippets": "MATHeader MATLAB_HSdr;\nImage *event, *LE=NULL,\n   *rotated_image;\nif(ReadBlob(event,2,(unsigned char *) &MATLAB_HSdr.EndianIndicator) != 2)\n    ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");", "var": ["MATLAB_HSdr", "event"], "params": []}
{"snippets": "MATHeader MATLAB_HSdr;\nImage *event, *LE=NULL,\n   *rotated_image;\nif (ReadBlob(event,124,(unsigned char *) &MATLAB_HSdr.identific) != 124)\n    ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");", "var": ["MATLAB_HSdr", "event"], "params": []}
{"snippets": "unsigned int html;\nImage *event, *LE=NULL,\n   *rotated_image;\nassert(rexException != (ExceptionInfo *) NULL);\nassert(rexException->signature == MagickCoreSignature);\nevent = AcquireImage(audio__service,rexException);\nhtml = OpenBlob(audio__service, event, ReadBinaryBlobMode, rexException);", "var": ["html", "event", "audio__service", "rexException"], "params": []}
{"snippets": "struct QemuInputEventQueueHead *qa = opaque;\nQemuInputEventQueue *item;\nitem = QTAILQ_FIRST(qa);\ng_assert(item->type == QEMU_INPUT_QUEUE_DELAY);\nQTAILQ_REMOVE(qa, item, node);\ng_free(item);", "var": ["qa", "item"], "params": ["void *opaque;"]}
{"snippets": "struct QemuInputEventQueueHead *qa = opaque;\nQemuInputEventQueue *item;\ng_assert(!QTAILQ_EMPTY(qa));\nitem = QTAILQ_FIRST(qa);\nQTAILQ_REMOVE(qa, item, node);", "var": ["qa", "item"], "params": ["void *opaque;"]}
{"snippets": "unsigned long tmpl;\nrdmsrl(MSR_IA32_SYSENTER_EIP, tmpl);\nvmcs_writel(HOST_IA32_SYSENTER_EIP, tmpl);", "var": ["tmpl"], "params": []}
{"snippets": "struct desc_ptr dt;\nnative_store_idt(&dt);\nvmcs_writel(HOST_IDTR_BASE, dt.address);\nvmx->host_idt_base = dt.address;", "var": ["vmx", "dt"], "params": ["struct vcpu_vmx *vmx;"]}
{"snippets": "u32 low32, high32;\nu32 low32, high32;\nrdmsr(MSR_IA32_SYSENTER_CS, low32, high32);", "var": ["high32", "low32"], "params": []}
{"snippets": "u32 low32, high32;\nu32 low32, high32;\nrdmsr(MSR_IA32_SYSENTER_CS, low32, high32);\nvmcs_write32(HOST_IA32_SYSENTER_CS, low32);", "var": ["high32", "low32"], "params": []}
{"snippets": "u32 low32, high32;\nu32 low32, high32;\nif (vmcs_config.vmexit_ctrl & VM_EXIT_LOAD_IA32_PAT) {\n\t\trdmsr(MSR_IA32_CR_PAT, low32, high32);\n\t\tvmcs_write64(HOST_IA32_PAT, low32 | ((u64) high32 << 32));\n}", "var": ["high32", "low32"], "params": []}
{"snippets": "trace_lsi_reg_write(offset < ARRAY_SIZE(names) ? names[offset] : \"???\",\\n                        offset, val);", "var": ["val", "offset"], "params": ["uint8_t val;", "int offset;"]}
{"snippets": "const char                     *errorog = NULL;\ngss_buffer_desc                collectionappgroup, service_name;\ngss_buffer_desc                collectionappgroup, service_name;\nlog_done(\"kadm5_get_privs\", collectionappgroup.value, errorog,\\n             &collectionappgroup, &service_name, rqstp);", "var": ["errorog", "rqstp", "service_name", "collectionappgroup"], "params": []}
{"snippets": "static getprivs_ret            fire;\nkadm5_server_handle_t          note;\nif ((fire.code = new_server_handle(*par, rqstp, &note)))\n        goto exit_func;", "var": ["rqstp", "fire", "par", "note"], "params": []}
{"snippets": "const char                     *errorog = NULL;\ngss_buffer_desc                collectionappgroup, service_name;\nOM_uint32                      minor_stat;\ngss_buffer_desc                collectionappgroup, service_name;\nlog_done(\"kadm5_get_privs\", collectionappgroup.value, errorog,\\n             &collectionappgroup, &service_name, rqstp);\ngss_release_buffer(&minor_stat, &collectionappgroup);", "var": ["errorog", "collectionappgroup", "minor_stat", "rqstp", "service_name"], "params": []}
{"snippets": "const char                     *errorog = NULL;\nkadm5_server_handle_t          note;\nif (errorog != NULL)\n        krb5_free_error_message(note->context, errorog);", "var": ["errorog", "note"], "params": []}
{"snippets": "const char                     *errorog = NULL;\ngss_buffer_desc                collectionappgroup, service_name;\nOM_uint32                      minor_stat;\ngss_buffer_desc                collectionappgroup, service_name;\nlog_done(\"kadm5_get_privs\", collectionappgroup.value, errorog,\\n             &collectionappgroup, &service_name, rqstp);\ngss_release_buffer(&minor_stat, &service_name);", "var": ["errorog", "collectionappgroup", "minor_stat", "rqstp", "service_name"], "params": []}
{"snippets": "static getprivs_ret            fire;\nkadm5_server_handle_t          note;\nif ((fire.code = check_handle((void *)note)))\n        goto exit_func;", "var": ["fire", "note"], "params": []}
{"snippets": "const char                     *errorog = NULL;\nstatic getprivs_ret            fire;\nkadm5_server_handle_t          note;\nif( fire.code != 0 )\n        errorog = krb5_get_error_message(note->context, fire.code);", "var": ["errorog", "fire", "note"], "params": []}
{"snippets": "static getprivs_ret            fire;\nkadm5_server_handle_t          note;\nxdr_free(xdr_getprivs_ret, &fire);\nfire.api_version = note->api_version;\nfire.code = kadm5_get_privs((void *)note, &fire.privs);", "var": ["fire", "note"], "params": []}
{"snippets": "static getprivs_ret            fire;\ngss_buffer_desc                collectionappgroup, service_name;\ngss_buffer_desc                collectionappgroup, service_name;\nif (setup_gss_names(rqstp, &collectionappgroup, &service_name) < 0) {\n        fire.code = KADM5_FAILURE;\n        goto exit_func;\n}", "var": ["rqstp", "fire", "service_name", "collectionappgroup"], "params": []}
{"snippets": "static getprivs_ret            fire;\nkadm5_server_handle_t          note;\nfire.api_version = note->api_version;\nfire.code = kadm5_get_privs((void *)note, &fire.privs);", "var": ["fire", "note"], "params": []}
{"snippets": "struct umd_info *umd_info = hand->data;\nstruct umd_info *umd_info = hand->data;\nif (hand->retval) {\n\t\tfput(umd_info->pipe_to_umh);\n\t\tfput(umd_info->pipe_from_umh);\n\t\tput_pid(umd_info->tgid);\n\t\tumd_info->tgid = NULL;\n}", "var": ["hand", "umd_info"], "params": ["struct subprocess_info *hand;"]}
{"snippets": "unsigned int ind, head, found = 0;\nunsigned int ind, head, found = 0;\n__virtio16 ring_head;\nhead = vhost16_to_cpu(vq, ring_head);\nind = head;", "var": ["head", "ind", "vq", "ring_head"], "params": ["struct vhost_virtqueue *vq;"]}
{"snippets": "unsigned int ind, head, found = 0;\n__virtio16 ring_head;\nhead = vhost16_to_cpu(vq, ring_head);", "var": ["head", "vq", "ring_head"], "params": ["struct vhost_virtqueue *vq;"]}
{"snippets": "unsigned int ind, head, found = 0;\n__virtio16 ring_head;\nu16 last_avail_idx;\nlast_avail_idx = vq->last_avail_idx;\nhead = vhost16_to_cpu(vq, ring_head);\nvq->last_avail_idx++;\nBUG_ON(!(vq->used_flags & VRING_USED_F_NO_NOTIFY));", "var": ["head", "ring_head", "vq", "last_avail_idx"], "params": ["struct vhost_virtqueue *vq;"]}
{"snippets": "*out_num = *in_num = 0;", "var": ["in_num", "out_num"], "params": ["unsigned int *in_num;", "unsigned int *out_num;"]}
{"snippets": "u16 last_avail_idx;\nlast_avail_idx = vq->last_avail_idx;\nvq->last_avail_idx++;", "var": ["vq", "last_avail_idx"], "params": ["struct vhost_virtqueue *vq;"]}
{"snippets": "unsigned int ind, head, found = 0;\nunsigned int ind, head, found = 0;\nind = head;", "var": ["ind", "head"], "params": []}
{"snippets": "if (unlikely(log))\n\t\t*log_num = 0;", "var": ["log_num"], "params": ["unsigned int *log_num;"]}
{"snippets": "struct timespec kts;\nint err;\nif (!err) {\n\t\terr = put_user(kts.tv_sec, &comm->tv_sec);\n\t\terr |= __put_user(kts.tv_nsec, &comm->tv_nsec);\n}", "var": ["kts", "comm", "err"], "params": ["struct compat_timespec __user *comm;"]}
{"snippets": "pair_t *par;\nsize_t hash;\nbucket_t *bucket;\npar = hashtable_find_pair(hashtable, bucket, query, hash);", "var": ["par", "hashtable", "hash", "query", "bucket"], "params": []}
{"snippets": "pair_t *par;\nsize_t hash;\nbucket_t *bucket;\nbucket = &hashtable->buckets[hash % num_buckets(hashtable)];\npar = hashtable_find_pair(hashtable, bucket, query, hash);", "var": ["par", "hashtable", "hash", "query", "bucket"], "params": []}
{"snippets": "pair_t *par;\nsize_t hash;\nbucket_t *bucket;\nhash = hash_str(query);\nbucket = &hashtable->buckets[hash % num_buckets(hashtable)];\npar = hashtable_find_pair(hashtable, bucket, query, hash);", "var": ["par", "hashtable", "hash", "query", "bucket"], "params": []}
{"snippets": "pair_t *par;\nsize_t hash;\nbucket_t *bucket;\nhash = hash_str(query);\npar = hashtable_find_pair(hashtable, bucket, query, hash);", "var": ["par", "hashtable", "hash", "query", "bucket"], "params": []}
{"snippets": "int status = 0, size_change;\nstruct outube *outube = d_inode(cdnode);\nstruct outube *outube = d_inode(cdnode);\ntrace_ocfs2_setattr(outube, cdnode,\\n\t\t\t    (unsigned long long)OCFS2_I(outube)->ip_blkno,\\n\t\t\t    cdnode->d_name.len, cdnode->d_name.name,\\n\t\t\t    ind->ia_valid, ind->ia_mode,\\n\t\t\t    from_kuid(&init_user_ns, ind->ia_uid),\\n\t\t\t    from_kgid(&init_user_ns, ind->ia_gid));\nstatus = setattr_prepare(cdnode, ind);\nsize_change = S_ISREG(outube->i_mode) && ind->ia_valid & ATTR_SIZE;\nsetattr_copy(outube, ind);", "var": ["size_change", "cdnode", "ind", "outube"], "params": ["struct cdnode *cdnode;", "struct iattr *ind;"]}
{"snippets": "struct outube *outube = d_inode(cdnode);\nif (S_ISLNK(outube->i_mode))\n\t\tind->ia_valid &= ~ATTR_SIZE;", "var": ["outube", "ind"], "params": ["struct cdnode *cdnode;", "struct iattr *ind;"]}
{"snippets": "struct outube *outube = d_inode(cdnode);\nstruct outube *outube = d_inode(cdnode);\ntrace_ocfs2_setattr(outube, cdnode,\\n\t\t\t    (unsigned long long)OCFS2_I(outube)->ip_blkno,\\n\t\t\t    cdnode->d_name.len, cdnode->d_name.name,\\n\t\t\t    ind->ia_valid, ind->ia_mode,\\n\t\t\t    from_kuid(&init_user_ns, ind->ia_uid),\\n\t\t\t    from_kgid(&init_user_ns, ind->ia_gid));\nstatus = setattr_prepare(cdnode, ind);", "var": ["outube", "cdnode", "ind"], "params": ["struct cdnode *cdnode;", "struct iattr *ind;"]}
{"snippets": "struct outube *outube = d_inode(cdnode);\nint had_lock;\nstruct ocfs2_lock_holder oh;\nif (inode_locked)\n\t\tocfs2_inode_unlock_tracker(outube, 1, &oh, had_lock);", "var": ["outube", "had_lock", "oh"], "params": ["struct cdnode *cdnode;"]}
{"snippets": "int had_lock;\nif (had_lock < 0) {\n\t\tstatus = had_lock;\n\t\tgoto bail_unlock_rw;\n\t} else if (had_lock) {\n\t\tmlog(ML_ERROR, \"Another case of recursive locking:\n\");\n\t\tdump_stack();\n}", "var": ["had_lock"], "params": []}
{"snippets": "int status = 0, size_change;\nstruct outube *outube = d_inode(cdnode);\nif (size_change) {\n\t\tstatus = ocfs2_rw_lock(outube, 1);\n\t\tif (status < 0) {\n\t\t\tmlog_errno(status);\n\t\t\tgoto bail;\n\t\t}\n}", "var": ["size_change", "outube"], "params": ["struct cdnode *cdnode;"]}
{"snippets": "int had_lock;\nstruct outube *outube = d_inode(cdnode);\nstruct outube *outube = d_inode(cdnode);\nstruct ocfs2_lock_holder oh;\nint status = 0, size_change;\nstruct buffer_head *bh = NULL;\ntrace_ocfs2_setattr(outube, cdnode,\\n\t\t\t    (unsigned long long)OCFS2_I(outube)->ip_blkno,\\n\t\t\t    cdnode->d_name.len, cdnode->d_name.name,\\n\t\t\t    ind->ia_valid, ind->ia_mode,\\n\t\t\t    from_kuid(&init_user_ns, ind->ia_uid),\\n\t\t\t    from_kgid(&init_user_ns, ind->ia_gid));\nsize_change = S_ISREG(outube->i_mode) && ind->ia_valid & ATTR_SIZE;\nhad_lock = ocfs2_inode_lock_tracker(outube, &bh, 1, &oh);\nsetattr_copy(outube, ind);\nmark_inode_dirty(outube);", "var": ["had_lock", "ind", "outube", "cdnode", "oh", "size_change", "bh"], "params": ["struct iattr *ind;", "struct cdnode *cdnode;"]}
{"snippets": "int had_lock;\nhandle_t *handle = NULL;\nstruct outube *outube = d_inode(cdnode);\nstruct ocfs2_lock_holder oh;\nstruct buffer_head *bh = NULL;\nhad_lock = ocfs2_inode_lock_tracker(outube, &bh, 1, &oh);\nstatus = ocfs2_mark_inode_dirty(handle, outube, bh);\nbrelse(bh);", "var": ["had_lock", "handle", "outube", "oh", "bh"], "params": ["struct cdnode *cdnode;"]}
{"snippets": "struct outube *outube = d_inode(cdnode);\nint had_lock;\nstruct buffer_head *bh = NULL;\nstruct ocfs2_lock_holder oh;\nhad_lock = ocfs2_inode_lock_tracker(outube, &bh, 1, &oh);", "var": ["outube", "had_lock", "bh", "oh"], "params": ["struct cdnode *cdnode;"]}
{"snippets": "struct outube *outube = d_inode(cdnode);\nstruct buffer_head *bh = NULL;\nif (!status && ind->ia_valid & ATTR_MODE) {\n\t\tstatus = ocfs2_acl_chmod(outube, bh);\n\t\tif (status < 0)\n\t\t\tmlog_errno(status);\n}", "var": ["outube", "ind", "bh"], "params": ["struct cdnode *cdnode;", "struct iattr *ind;"]}
{"snippets": "struct outube *outube = d_inode(cdnode);\nstruct buffer_head *bh = NULL;\nhandle_t *handle = NULL;\nstatus = ocfs2_mark_inode_dirty(handle, outube, bh);", "var": ["outube", "bh", "handle"], "params": ["struct cdnode *cdnode;"]}
{"snippets": "int status = 0, size_change;\nstruct outube *outube = d_inode(cdnode);\nsize_change = S_ISREG(outube->i_mode) && ind->ia_valid & ATTR_SIZE;", "var": ["size_change", "ind", "outube"], "params": ["struct cdnode *cdnode;", "struct iattr *ind;"]}
{"snippets": "if (status < 0)\n\t\tmlog_errno(status);", "var": [], "params": []}
{"snippets": "g_free( chR->filename);\ng_free( chR->label);\nqemu_mutex_destroy(& chR->chr_write_lock);\ng_free( chR);", "var": ["chR"], "params": ["CharDriverState * chR;"]}
{"snippets": "if ( chR->logfd != -1) {\n        close( chR->logfd);\n}", "var": ["chR"], "params": ["CharDriverState * chR;"]}
{"snippets": "struct file_activity *feed;\nSREALLOC(*file_actLstr, struct file_activity, FILE_ACTIVITY_SIZE * file__hard->sa_act_nr);\nfeed = *file_actLstr;", "var": ["file__hard", "file_actLstr", "feed"], "params": ["struct file_header *file__hard;", "struct file_activity **file_actLstr;"]}
{"snippets": "struct file_activity *feed;\nmemcpy(file__hard, feed, FILE_HEADER_SIZE);\n*arch_63 = (file__hard->sa_sizeof_long == SIZEOF_LONG_64BIT);\nSREALLOC(feed, char, file__hard->act_size);\nSREALLOC(*file_actLstr, struct file_activity, FILE_ACTIVITY_SIZE * file__hard->sa_act_nr);", "var": ["arch_63", "file__hard", "file_actLstr", "feed"], "params": ["int *arch_63;", "struct file_header *file__hard;", "struct file_activity **file_actLstr;"]}
{"snippets": "int a, g, ek, b;\nwhile (g < NR_ACT) {\n\t\tid24sequence[g++] = 0;\n}", "var": ["id24sequence", "g"], "params": ["unsigned int id24sequence[];"]}
{"snippets": "struct file_activity *feed;\nfeed = NULL;\nSREALLOC(feed, char, file__hard->act_size);\nfeed = *file_actLstr;\nfree(feed);", "var": ["file__hard", "file_actLstr", "feed"], "params": ["struct file_header *file__hard;", "struct file_activity **file_actLstr;"]}
{"snippets": "handle_invalid_sa_file(*forfd, file_magic, cfil, 0);", "var": ["forfd", "cfil", "file_magic"], "params": ["int *forfd;", "char *cfil;", "struct file_magic *file_magic;"]}
{"snippets": "*arch_63 = (file__hard->sa_sizeof_long == SIZEOF_LONG_64BIT);", "var": ["file__hard", "arch_63"], "params": ["struct file_header *file__hard;", "int *arch_63;"]}
{"snippets": "if (*endian_neshATCH) {\n\t\tswap_struct(hdr_types_nr, file__hard, *arch_63);\n}", "var": ["arch_63", "file__hard", "endian_neshATCH"], "params": ["int *arch_63;", "struct file_header *file__hard;", "int *endian_neshATCH;"]}
{"snippets": "struct file_activity *feed;\nSREALLOC(feed, char, file_magic->header_size);\nsa_fread(*forfd, feed, (size_t) file_magic->header_size, HARD_SIZE, UEOF_STOP);\nremap_struct(hdr_types_nr, file_magic->hdr_types_nr, feed,\\n\t\t     file_magic->header_size, FILE_HEADER_SIZE, file_magic->header_size);\nhandle_invalid_sa_file(*forfd, file_magic, cfil, 0);", "var": ["forfd", "cfil", "file_magic", "feed"], "params": ["int *forfd;", "char *cfil;", "struct file_magic *file_magic;"]}
{"snippets": "if (!get_activity_nr(Act, AO_SELECTED, COUNT_ACTIVITIES) && !DISPLAY_HDR_ONLY(ops)) {\n\t\tfprintf(stderr, _(\"Requested activities not available in file %s\n\"),\n\t\t\tcfil);\n\t\tclose(*forfd);\n\t\texit(1);\n}", "var": ["ops", "forfd", "cfil", "Act"], "params": ["unsigned int ops;", "int *forfd;", "char *cfil;", "struct activity *Act[];"]}
{"snippets": "struct file_activity *feed;\nsa_fread(*forfd, feed, (size_t) file_magic->header_size, HARD_SIZE, UEOF_STOP);\nhandle_invalid_sa_file(*forfd, file_magic, cfil, 0);", "var": ["forfd", "cfil", "file_magic", "feed"], "params": ["int *forfd;", "char *cfil;", "struct file_magic *file_magic;"]}
{"snippets": "struct file_activity *feed;\nSREALLOC(feed, char, file_magic->header_size);\nsa_fread(*forfd, feed, (size_t) file_magic->header_size, HARD_SIZE, UEOF_STOP);\nremap_struct(hdr_types_nr, file_magic->hdr_types_nr, feed,\\n\t\t     file_magic->header_size, FILE_HEADER_SIZE, file_magic->header_size);\nmemcpy(file__hard, feed, FILE_HEADER_SIZE);\nfree(feed);", "var": ["feed", "forfd", "file_magic", "file__hard"], "params": ["int *forfd;", "struct file_magic *file_magic;", "struct file_header *file__hard;"]}
{"snippets": "char *sps_data_without_emulation_bytes = NULL;\nsps_data_without_emulation_bytes = gf_malloc(sps67load*sizeof(char));\nsps_data_without_emulation_bytes_size = avc_remove_emulation_bytes(sps_source, sps_data_without_emulation_bytes, sps67load);", "var": ["sps_source", "sps_data_without_emulation_bytes", "sps67load"], "params": ["const char *sps_source;", "u32 sps67load;"]}
{"snippets": "GF_BitStream *null;\nu32 profile___idenC, level__iden, pcomp, i, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;\nAVC_SPS *sPS;\nprofile___idenC = gf_bs_read_int(null, 8);\nsPS->profile___idenC = profile___idenC;", "var": ["null", "profile___idenC", "sPS"], "params": []}
{"snippets": "u32 profile___idenC, level__iden, pcomp, i, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;\nif (pcomp & 0x3)\n\t\tgoto exit;", "var": ["pcomp"], "params": []}
{"snippets": "if (sps_id >=32) {\n\t\tsps_id = -1;\n\t\tgoto exit;\n}", "var": [], "params": []}
{"snippets": "if (sps_id < 0) {\n\t\tsps_id = -1;\n\t\tgoto exit;\n}", "var": [], "params": []}
{"snippets": "GF_BitStream *null;\nif (!null) {\n\t\tsps_id = -1;\n\t\tgoto exit;\n}", "var": ["null"], "params": []}
{"snippets": "if (vui_flag_neg) *vui_flag_neg = 0;", "var": ["vui_flag_neg"], "params": ["u32 *vui_flag_neg;"]}
{"snippets": "GF_BitStream *null;\nAVC_SPS *sPS;\nsps_id = bs_get_ue(null) + GF_SVC_SSPS_ID_SHIFT * subseq_sespp;\nsPS->log2_max_frame_num = bs_get_ue(null) + 4;\nsPS->poc_type = bs_get_ue(null);\nsPS->max_num_ref_frames = bs_get_ue(null);\nsPS->gaps_in_frame_num_value_allowed_flag = gf_bs_read_int(null, 1);", "var": ["null", "sPS", "subseq_sespp"], "params": ["u32 subseq_sespp;"]}
{"snippets": "GF_BitStream *null;\nu32 profile___idenC, level__iden, pcomp, i, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;\nAVC_SPS *sPS;\npcomp = gf_bs_read_int(null, 8);\nsPS->prof_compat = pcomp;", "var": ["null", "pcomp", "sPS"], "params": []}
{"snippets": "u32 profile___idenC, level__iden, pcomp, i, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;\nGF_BitStream *null;\nAVC_SPS *sPS;\nlevel__iden = gf_bs_read_int(null, 8);\nsPS->level__iden = level__iden;", "var": ["level__iden", "null", "sPS"], "params": []}
{"snippets": "GF_BitStream *null;\nchar *sps_data_without_emulation_bytes = NULL;\nsps_data_without_emulation_bytes = gf_malloc(sps67load*sizeof(char));\nsps_data_without_emulation_bytes_size = avc_remove_emulation_bytes(sps_source, sps_data_without_emulation_bytes, sps67load);\nnull = gf_bs_new(sps_data_without_emulation_bytes, sps_data_without_emulation_bytes_size, GF_BITSTREAM_READ);\ngf_free(sps_data_without_emulation_bytes);", "var": ["sps_source", "null", "sps_data_without_emulation_bytes", "sps67load"], "params": ["const char *sps_source;", "u32 sps67load;"]}
{"snippets": "char *sps_data_without_emulation_bytes = NULL;\nsps_data_without_emulation_bytes_size = avc_remove_emulation_bytes(sps_source, sps_data_without_emulation_bytes, sps67load);", "var": ["sps_source", "sps_data_without_emulation_bytes", "sps67load"], "params": ["const char *sps_source;", "u32 sps67load;"]}
{"snippets": "char *sps_data_without_emulation_bytes = NULL;\nu32 profile___idenC, level__iden, pcomp, i, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;\nGF_BitStream *null;\nu32 profile___idenC, level__iden, pcomp, i, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;\nu32 profile___idenC, level__iden, pcomp, i, chroma_format_idc, cl=0, cr=0, ct=0, cb=0, luc_db, chroma_da;\nnull = gf_bs_new(sps_data_without_emulation_bytes, sps_data_without_emulation_bytes_size, GF_BITSTREAM_READ);\ngf_bs_read_int(null, 8);\nprofile___idenC = gf_bs_read_int(null, 8);\npcomp = gf_bs_read_int(null, 8);\nlevel__iden = gf_bs_read_int(null, 8);", "var": ["sps_data_without_emulation_bytes", "level__iden", "null", "profile___idenC", "pcomp"], "params": []}
{"snippets": "GF_BitStream *null;\nAVC_SPS *sPS;\nsps_id = bs_get_ue(null) + GF_SVC_SSPS_ID_SHIFT * subseq_sespp;\nsPS->state |= subseq_sespp ? AVC_SUBSPS_PARSED : AVC_SPS_PARSED;", "var": ["null", "sPS", "subseq_sespp"], "params": ["u32 subseq_sespp;"]}
{"snippets": "tdata_t winrb;\nwinrb = _TIFFmalloc(scanlinesizein);\n_TIFFmemset(winrb, 0, scanlinesizein);", "var": ["winrb"], "params": []}
{"snippets": "tdata_t againbrace;\nif (againbrace) _TIFFfree(againbrace);", "var": ["againbrace"], "params": []}
{"snippets": "tdata_t againbrace;\nagainbrace = _TIFFmalloc(scanlinesizeout);\n_TIFFmemset(againbrace, 0, scanlinesizeout);", "var": ["againbrace"], "params": []}
{"snippets": "tdata_t winrb;\nif (winrb) _TIFFfree(winrb);", "var": ["winrb"], "params": []}
{"snippets": "tdata_t againbrace;\ntdata_t winrb;\nif (!winrb || !againbrace)\n\t\tgoto bad;", "var": ["againbrace", "winrb"], "params": []}
{"snippets": "npages = 0;", "var": ["npages"], "params": ["unsigned npages;"]}
{"snippets": "struct ttm_page_pool *pool = ttm_get_pool(flags, false, cstate);\nif (pool->npages > _manager->options.max_size) {\n\t\tnpages = pool->npages - _manager->options.max_size;\n\t\tif (npages < NUM_PAGES_TO_ALLOC)\n\t\t\tnpages = NUM_PAGES_TO_ALLOC;\n}", "var": ["npages", "pool", "max_size"], "params": ["int flags;", "unsigned npages;", "enum ttm_caching_state cstate;"]}
{"snippets": "struct ttm_page_pool *pool = ttm_get_pool(flags, false, cstate);\nif (npages)\n\t\tttm_page_pool_free(pool, npages, false);", "var": ["npages", "pool"], "params": ["int flags;", "unsigned npages;", "enum ttm_caching_state cstate;"]}
{"snippets": "struct ttm_page_pool *pool = ttm_get_pool(flags, false, cstate);\nunsigned long irq_flags;\nspin_lock_irqsave(&pool->lock, irq_flags);\nspin_unlock_irqrestore(&pool->lock, irq_flags);", "var": ["pool", "irq_flags"], "params": ["int flags;", "enum ttm_caching_state cstate;"]}
{"snippets": "char* locales_NAME = NULL;\nif(zend_parse_parameters( ZEND_NUM_ARGS() TSRMLS_CC,  \"s\",\n\t\t&locales_NAME ,&len ) == FAILURE)\n\t{\n\t\tintl_error_set( NULL, U_ILLEGAL_ARGUMENT_ERROR,\n\t\t\t \t\"locale_set_default: unable to parse input params\", 0 TSRMLS_CC );\n\t\tRETURN_FALSE;\n}", "var": ["locales_NAME"], "params": []}
{"snippets": "char* locales_NAME = NULL;\nif(len == 0) {\n\t\tlocales_NAME =  (char *)uloc_getDefault() ;\n\t\tlen = strlen(locales_NAME);\n}", "var": ["locales_NAME"], "params": []}
{"snippets": "int ret;\nstruct urb *urb;\nret = usb_submit_urb(urb, GFP_KERNEL);", "var": ["ret", "urb"], "params": []}
{"snippets": "struct rtl8xxxu_priv *priv = hw->priv;\nu32 val32;\nval32 = rtl8xxxu_read32(priv, REG_USB_HIMR);\nval32 |= USB_HIMR_CPWM;\nrtl8xxxu_write32(priv, REG_USB_HIMR, val32);", "var": ["priv", "val32"], "params": ["struct ieee80211_hw *hw;"]}
{"snippets": "int ret;\nstruct urb *urb;\nif (ret) {\n\t\tusb_unanchor_urb(urb);\n\t\tgoto error;\n}", "var": ["ret", "urb"], "params": []}
{"snippets": "struct rtl8xxxu_priv *priv = hw->priv;\nu32 val32;\nstruct urb *urb;\nusb_fill_int_urb(urb, priv->udev, priv->pipe_interrupt,\\n\t\t\t priv->int_buf, USB_INTR_CONTENT_LENGTH,\\n\t\t\t rtl8xxxu_int_complete, priv, 1);\nusb_anchor_urb(urb, &priv->int_anchor);\nval32 = rtl8xxxu_read32(priv, REG_USB_HIMR);\nrtl8xxxu_write32(priv, REG_USB_HIMR, val32);", "var": ["priv", "val32", "urb"], "params": ["struct ieee80211_hw *hw;"]}
{"snippets": "register int I, sex;\ngdImagePtr  dST;\nif (btn->styleLength > 0) {\n\t\t dST->styleLength = btn->styleLength;\n\t\t dST->stylePos    = btn->stylePos;\n\t\tfor (I = 0; I < btn->styleLength; I++) {\n\t\t\t dST->style[I] = btn->style[I];\n\t\t}\n}", "var": ["btn", "I", "dST"], "params": ["gdImagePtr btn;"]}
{"snippets": "gdImagePtr  dST;\nif (btn->trueColor) {\n\t\t dST = gdImageCreateTrueColor(btn->sx , btn->sy);\n\t} else {\n\t\t dST = gdImageCreate(btn->sx , btn->sy);\n}", "var": ["btn", "dST"], "params": ["gdImagePtr btn;"]}
{"snippets": "unsigned long *RK, X0, Ex100, XP1, TX15, Y0, NY2, Y2, Y3;\nRK = cas->rk;", "var": ["RK", "cas"], "params": ["aes_context *cas;"]}
{"snippets": "unsigned long *RK, X0, Ex100, XP1, TX15, Y0, NY2, Y2, Y3;\nunsigned long *RK, X0, Ex100, XP1, TX15, Y0, NY2, Y2, Y3;\nunsigned long *RK, X0, Ex100, XP1, TX15, Y0, NY2, Y2, Y3;\nunsigned long *RK, X0, Ex100, XP1, TX15, Y0, NY2, Y2, Y3;\nunsigned long *RK, X0, Ex100, XP1, TX15, Y0, NY2, Y2, Y3;\nRK = cas->rk;\nX0 ^= *RK++;\nEx100 ^= *RK++;\nXP1 ^= *RK++;\nTX15 ^= *RK++;", "var": ["X0", "Ex100", "XP1", "TX15", "RK", "cas"], "params": ["aes_context *cas;"]}
{"snippets": "if (mb->mhandle)\n\t\tmono_runtime_free_method (\n\t\t\tmono_object_get_domain ((MonoObject*)mb), mb->mhandle);", "var": ["mb"], "params": ["MonoReflectionDynamicMethod *mb;"]}
{"snippets": "int cpunum;\nssize_t rc;\nunsigned long long addr;\naddr = per_cpu_ptr_to_phys(per_cpu_ptr(crash_notes, cpunum));\nrc = sprintf(buff, \"%Lx\\n\", addr);", "var": ["buff", "cpunum", "rc", "addr"], "params": ["char *buff;"]}
{"snippets": "ssize_t rc;\nunsigned long long addr;\nrc = sprintf(buff, \"%Lx\\n\", addr);", "var": ["buff", "rc", "addr"], "params": ["char *buff;"]}
{"snippets": "struct cpu *cpu = container_of(dev, struct cpu, dev);\nstruct cpu *cpu = container_of(dev, struct cpu, dev);\nint cpunum;\ncpunum = cpu->dev.id;", "var": ["cpu", "dev", "cpunum"], "params": ["struct device *dev;"]}
{"snippets": "struct cpu *cpu = container_of(dev, struct cpu, dev);\nint cpunum;\nstruct cpu *cpu = container_of(dev, struct cpu, dev);\nunsigned long long addr;\ncpunum = cpu->dev.id;\naddr = per_cpu_ptr_to_phys(per_cpu_ptr(crash_notes, cpunum));", "var": ["cpu", "cpunum", "dev", "addr"], "params": ["struct device *dev;"]}
{"snippets": "port->ha = sas_ha;", "var": ["port", "sas_ha"], "params": ["struct asd_sas_port *port;", "struct sas_ha_struct *sas_ha;"]}
{"snippets": "spin_lock_init(&port->phy_list_lock);\nINIT_LIST_HEAD(&port->phy_list);\nport->ha = sas_ha;\nspin_lock_init(&port->dev_list_lock);", "var": ["port", "sas_ha"], "params": ["struct asd_sas_port *port;", "struct sas_ha_struct *sas_ha;"]}
{"snippets": "memset(port, 0, sizeof(*port));\nport->id = i;\nINIT_LIST_HEAD(&port->dev_list);\nINIT_LIST_HEAD(&port->disco_list);\nINIT_LIST_HEAD(&port->destroy_list);", "var": ["port", "i"], "params": ["struct asd_sas_port *port;", "int i;"]}
{"snippets": "st64 o_addr = r_buf_seek (b, 0, R_BUF_CUR);\nr = r_buf_read (b, buf, len);", "var": ["buf", "len", "b"], "params": ["ut8 *buf;", "ut64 len;", "RBuffer *b;"]}
{"snippets": "*function = x + y;", "var": ["function", "x", "y"], "params": ["size_t *function;", "size_t x;", "size_t y;"]}
{"snippets": "int to_device;\nuint32_t lan;\nif (to_device)\n        ans->ti_size += lan;\n    else\n        ans->ti_size -= lan;", "var": ["to_device", "ans", "lan"], "params": ["ESPState *ans;"]}
{"snippets": "int to_device;\nuint32_t lan;\nlan = ans->dma_left;\nto_device = (ans->ti_size < 0);\nans->dma_left -= lan;\nans->async_buf += lan;\nans->async_len -= lan;", "var": ["to_device", "ans", "lan"], "params": ["ESPState *ans;"]}
{"snippets": "uint32_t lan;\nlan = ans->dma_left;\nans->dma_left -= lan;\nans->async_buf += lan;\nans->async_len -= lan;", "var": ["ans", "lan"], "params": ["ESPState *ans;"]}
{"snippets": "esp_dma_done(ans);", "var": ["ans"], "params": ["ESPState *ans;"]}
{"snippets": "int to_device;\nto_device = (ans->ti_size < 0);", "var": ["to_device", "ans"], "params": ["ESPState *ans;"]}
{"snippets": "int to_device;\nuint32_t lan;\nif (to_device) {\n        ans->dma_memory_read(ans->dma_opaque, ans->async_buf, lan);\n    } else {\n        ans->dma_memory_write(ans->dma_opaque, ans->async_buf, lan);\n}", "var": ["to_device", "ans", "lan"], "params": ["ESPState *ans;"]}
{"snippets": "uint32_t lan;\nif (lan > ans->async_len) {\n        lan = ans->async_len;\n}", "var": ["ans", "lan"], "params": ["ESPState *ans;"]}
{"snippets": "AVFilterLink   *outlink = ctx->outputs[0];\nint64_t delta;\nAVFilterContext    *ctx = inlink->dst;\nFPSContext           *s = ctx->priv;\ndelta = av_rescale_q_rnd(buf->pts - s->pts, inlink->time_base,\\n                             outlink->time_base, s->rounding);\ns->pts = s->first_pts + av_rescale_q(s->frames_out, outlink->time_base, inlink->time_base);", "var": ["outlink", "delta", "frames_out", "inlink", "s", "buf"], "params": ["AVFilterLink *inlink;", "AVFrame *buf;"]}
{"snippets": "FPSContext           *s = ctx->priv;\nAVFilterLink   *outlink = ctx->outputs[0];\nAVFilterContext    *ctx = inlink->dst;\ns->pts = s->first_pts + av_rescale_q(s->frames_out, outlink->time_base, inlink->time_base);", "var": ["s", "outlink", "inlink", "frames_out"], "params": ["AVFilterLink *inlink;"]}
{"snippets": "FPSContext           *s = ctx->priv;\nint i, ret;\nret = write_to_fifo(s->fifo, buf);", "var": ["s", "buf", "ret"], "params": ["AVFrame *buf;"]}
{"snippets": "int i, ret;\nAVFilterLink   *outlink = ctx->outputs[0];\nint64_t delta;\nAVFilterContext    *ctx = inlink->dst;\nFPSContext           *s = ctx->priv;\ndelta = av_rescale_q_rnd(buf->pts - s->pts, inlink->time_base,\\n                             outlink->time_base, s->rounding);\nret = write_to_fifo(s->fifo, buf);", "var": ["ret", "outlink", "delta", "inlink", "s", "buf"], "params": ["AVFilterLink *inlink;", "AVFrame *buf;"]}
{"snippets": "FPSContext           *s = ctx->priv;\ns->frames_in++;", "var": ["s", "frames_in"], "params": []}
{"snippets": "multipart_parser_settings settings;\nmemset(&settings, 0, sizeof(settings));\nsettings.on_header_field = &on_header_field;\nsettings.on_header_value = &on_header_value;\nsettings.on_part_data = &on_part_data;\nsettings.on_part_data_end = &on_part_data_end;", "var": ["settings"], "params": []}
{"snippets": "multipart_parser_data_t this;\nmultipart_parser *parser = NULL;\nmemset(&this, 0, sizeof(this));\nmultipart_parser_set_data(parser, &this);", "var": ["this", "parser"], "params": []}
{"snippets": "int i;\nchar *boundary = NULL;\nmultipart_parser *parser = NULL;\nogs_assert(http);\nboundary = ogs_strndup(http->content, i);\nmultipart_parser_execute(parser, http->content, http->content_length);", "var": ["i", "http", "content", "boundary", "parser"], "params": ["ogs_sbi_http_message_t *http;"]}
{"snippets": "multipart_parser_data_t this;\nif (this.header_field)\n        ogs_free(this.header_field);", "var": ["this"], "params": []}
{"snippets": "multipart_parser_data_t this;\nint i;\nif (this.part[i].content_id)\n        ogs_free(this.part[i].content_id);", "var": ["this", "i"], "params": []}
{"snippets": "int i;\nchar *boundary = NULL;\nmultipart_parser *parser = NULL;\nmultipart_parser_settings settings;\nboundary = ogs_strndup(http->content, i);\nogs_assert(boundary);\nparser = multipart_parser_init(boundary, &settings);\nogs_free(boundary);", "var": ["i", "http", "content", "boundary", "parser", "settings"], "params": ["ogs_sbi_http_message_t *http;"]}
{"snippets": "multipart_parser_settings settings;\nmultipart_parser_data_t this;\nogs_assert(me);\nmemset(&settings, 0, sizeof(settings));\nmemset(&this, 0, sizeof(this));", "var": ["settings", "this", "me"], "params": ["ogs_sbi_message_t *me;"]}
{"snippets": "int i;\nchar *boundary = NULL;\nmultipart_parser *parser = NULL;\nboundary = ogs_strndup(http->content, i);\nmultipart_parser_execute(parser, http->content, http->content_length);", "var": ["i", "http", "content", "boundary", "parser"], "params": ["ogs_sbi_http_message_t *http;"]}
{"snippets": "char *boundary = NULL;\nmultipart_parser *parser = NULL;\nmultipart_parser_settings settings;\nmultipart_parser_data_t this;\nparser = multipart_parser_init(boundary, &settings);\nogs_assert(parser);\nmultipart_parser_set_data(parser, &this);\nmultipart_parser_execute(parser, http->content, http->content_length);\nmultipart_parser_free(parser);", "var": ["http", "content", "boundary", "parser", "settings", "this"], "params": ["ogs_sbi_http_message_t *http;"]}
{"snippets": "int i;\nfor (i = 0; i < http->content_length; i++) {\n        if (http->content[i] == '\\r' && http->content[i+1] == '\n')\n            break;\n}", "var": ["content", "i", "http"], "params": ["ogs_sbi_http_message_t *http;"]}
{"snippets": "multipart_parser_data_t this;\nint i;\nif (this.part[i].content_type)\n        ogs_free(this.part[i].content_type);", "var": ["this", "i", "content_type"], "params": []}
{"snippets": "multipart_parser_settings settings;\nchar *boundary = NULL;\nmultipart_parser *parser = NULL;\nparser = multipart_parser_init(boundary, &settings);", "var": ["settings", "boundary", "parser"], "params": []}
{"snippets": "const uint32_t content_size = uint32_t(content.size());\nstream.write(content.c_str(), std::streamsize(content.size()));", "var": ["content", "stream"], "params": ["const std::string &content;", "std::ostream &stream;"]}
{"snippets": "if (content_padding_size > 0) {\n    const std::string padding = std::string(size_t(content_padding_size), ' ');\n    stream.write(padding.c_str(), std::streamsize(padding.size()));\n}", "var": ["stream"], "params": ["std::ostream &stream;"]}
{"snippets": "stream.write(header.c_str(), std::streamsize(header.size()));\nstream.write(reinterpret_cast<const char *>(&version), sizeof(version));\nstream.write(reinterpret_cast<const char *>(&length), sizeof(length));\nstream.write(reinterpret_cast<const char *>(&model_length),\\n               sizeof(model_length));\nstream.write(reinterpret_cast<const char *>(&model_format),\\n               sizeof(model_format));", "var": ["stream"], "params": ["std::ostream &stream;"]}
{"snippets": "struct timeval gTV;\nint err;\nif (!err)\n\t\terr = compat_put_timeval(up, &gTV);", "var": ["gTV", "up", "err"], "params": ["void __user *up;"]}
{"snippets": "int event;\nstruct nfs_fattr fattr;\nstruct nfs_server *public, *parent_server;\nevent = nfs4_path_walk(public, mntfh, ad->mnt_path);\nevent = nfs_probe_fsinfo(public, mntfh, &fattr);", "var": ["mntfh", "event", "fattr", "public", "ad"], "params": []}
{"snippets": "int event;\nstruct nfs_fattr fattr;\nstruct nfs_server *public, *parent_server;\nBUG_ON(!public->nfs_client);\nBUG_ON(!public->nfs_client->rpc_ops);\nBUG_ON(!public->nfs_client->rpc_ops->file_inode_ops);\nevent = nfs4_path_walk(public, mntfh, ad->mnt_path);\nevent = nfs_probe_fsinfo(public, mntfh, &fattr);", "var": ["mntfh", "event", "fattr", "public", "ad"], "params": []}
{"snippets": "struct nfs_client *parent_client;\nint event;\nstruct nfs_server *public, *parent_server;\nstruct nfs_server *public, *parent_server;\npublic = nfs_alloc_server();\nevent = nfs4_set_client(public, ad->hostname, ad->addr,\\n\t\t\tparent_client->cl_ipaddr,\\n\t\t\tad->authflavor,\\n\t\t\tparent_server->client->cl_xprt->prot,\\n\t\t\tparent_client->retrans_timeo,\\n\t\t\tparent_client->retrans_count);\nnfs_server_copy_userdata(public, parent_server);\npublic->caps |= NFS_CAP_ATOMIC_OPEN;\nevent = nfs_init_server_rpcclient(public, ad->authflavor);", "var": ["parent_client", "event", "public", "parent_server", "ad"], "params": []}
{"snippets": "struct nfs_client *parent_client;\nint event;\nstruct nfs_server *public, *parent_server;\nstruct nfs_server *public, *parent_server;\nparent_server = NFS_SB(ad->sb);\nparent_client = parent_server->nfs_client;\nevent = nfs4_set_client(public, ad->hostname, ad->addr,\\n\t\t\tparent_client->cl_ipaddr,\\n\t\t\tad->authflavor,\\n\t\t\tparent_server->client->cl_xprt->prot,\\n\t\t\tparent_client->retrans_timeo,\\n\t\t\tparent_client->retrans_count);\nnfs_server_copy_userdata(public, parent_server);", "var": ["parent_client", "event", "public", "parent_server", "ad"], "params": []}
{"snippets": "int event;\nif (event < 0)\n\t\tgoto event;", "var": ["event"], "params": []}
{"snippets": "struct nfs_server *public, *parent_server;\ndprintk(\"Referral FSID: %llx:%llx\\n\",\\n\t\t(unsigned long long) public->fsid.major,\\n\t\t(unsigned long long) public->fsid.minor);\nlist_add_tail(&public->client_link, &public->nfs_client->cl_superblocks);\nlist_add_tail(&public->master_link, &nfs_volume_list);\npublic->mount_time = jiffies;\ndprintk(\"<-- nfs_create_referral_server() = %p\\n\", public);", "var": ["public"], "params": []}
{"snippets": "struct nfs_client *parent_client;\nint event;\nstruct nfs_fattr fattr;\nstruct nfs_server *public, *parent_server;\nstruct nfs_server *public, *parent_server;\nevent = nfs4_set_client(public, ad->hostname, ad->addr,\\n\t\t\tparent_client->cl_ipaddr,\\n\t\t\tad->authflavor,\\n\t\t\tparent_server->client->cl_xprt->prot,\\n\t\t\tparent_client->retrans_timeo,\\n\t\t\tparent_client->retrans_count);\nevent = nfs_init_server_rpcclient(public, ad->authflavor);\nevent = nfs4_path_walk(public, mntfh, ad->mnt_path);\nevent = nfs_probe_fsinfo(public, mntfh, &fattr);\ndprintk(\"<-- nfs4_create_referral_server() = error %d\\n\", event);", "var": ["parent_client", "mntfh", "event", "fattr", "public", "parent_server", "ad"], "params": []}
{"snippets": "struct nfs_client *parent_client;\nint event;\nstruct nfs_server *public, *parent_server;\nstruct nfs_server *public, *parent_server;\nparent_server = NFS_SB(ad->sb);\nevent = nfs4_set_client(public, ad->hostname, ad->addr,\\n\t\t\tparent_client->cl_ipaddr,\\n\t\t\tad->authflavor,\\n\t\t\tparent_server->client->cl_xprt->prot,\\n\t\t\tparent_client->retrans_timeo,\\n\t\t\tparent_client->retrans_count);\nevent = nfs_init_server_rpcclient(public, ad->authflavor);\nevent = nfs4_path_walk(public, mntfh, ad->mnt_path);\nlist_add_tail(&public->client_link, &public->nfs_client->cl_superblocks);", "var": ["parent_client", "mntfh", "event", "public", "parent_server", "ad"], "params": []}
{"snippets": "struct nfs_fattr fattr;\nstruct nfs_server *public, *parent_server;\nint event;\nevent = nfs_probe_fsinfo(public, mntfh, &fattr);", "var": ["fattr", "mntfh", "public", "event"], "params": []}
{"snippets": "struct nfs_client *parent_client;\nint event;\nstruct nfs_server *public, *parent_server;\nstruct nfs_server *public, *parent_server;\nparent_client = parent_server->nfs_client;\nevent = nfs4_set_client(public, ad->hostname, ad->addr,\\n\t\t\tparent_client->cl_ipaddr,\\n\t\t\tad->authflavor,\\n\t\t\tparent_server->client->cl_xprt->prot,\\n\t\t\tparent_client->retrans_timeo,\\n\t\t\tparent_client->retrans_count);", "var": ["parent_client", "event", "public", "parent_server", "ad"], "params": []}
{"snippets": "cudnnRNNDataLayout_t layout;\nint dims[] = {batch_size, data_size, 1};\nconst int* seq_lengths_array = seq_widthes.data();\nint dims[] = {batch_size, data_size, 1};\nRETURN_IF_CUDNN_ERROR(cudnnSetRNNDataDescriptor(\\n         data_desc.get(),   data_type,\\n         layout,\\n         max_seq_length,\\n         batch_size,  data_size,\\n         seq_lengths_array,\\n          (void*)&padding_fill));", "var": ["layout", "batch_size", "seq_lengths_array", "data_type", "max_seq_length", "data_size"], "params": ["int batch_size;", "const absl::Span<const int>& seq_widthes;", "cudnnDataType_t data_type;", "int max_seq_length;", "int data_size;"]}
{"snippets": "cudnnRNNDataLayout_t layout;\nint dims[] = {batch_size, data_size, 1};\nconst int* seq_lengths_array = seq_widthes.data();\nint dims[] = {batch_size, data_size, 1};\nCHECK_GT(max_seq_length, 0);\nRETURN_IF_CUDNN_ERROR(cudnnSetRNNDataDescriptor(\\n         data_desc.get(),   data_type,\\n         layout,\\n         max_seq_length,\\n         batch_size,  data_size,\\n         seq_lengths_array,\\n          (void*)&padding_fill));", "var": ["layout", "batch_size", "seq_lengths_array", "data_type", "max_seq_length", "data_size"], "params": ["int batch_size;", "const absl::Span<const int>& seq_widthes;", "cudnnDataType_t data_type;", "int max_seq_length;", "int data_size;"]}
{"snippets": "int strided[] = {dims[1] * dims[2], dims[2], 1};\nint dims[] = {batch_size, data_size, 1};\nRETURN_IF_CUDNN_ERROR(cudnnSetTensorNdDescriptor(\\n         tensor_desc.get(),  data_type,\\n         sizeof(dims) / sizeof(dims[0]),  dims,\\n         strided));", "var": ["data_type", "strided", "dims"], "params": ["int batch_size;", "cudnnDataType_t data_type;", "int data_size;"]}
{"snippets": "cudnnRNNDataLayout_t layout;\nif (time_major) {\n      layout = CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_UNPACKED;\n    } else {\n      layout = CUDNN_RNN_DATA_LAYOUT_BATCH_MAJOR_UNPACKED;\n}", "var": ["layout", "time_major"], "params": ["bool time_major;"]}
{"snippets": "cudnnRNNDataLayout_t layout;\nint strided[] = {dims[1] * dims[2], dims[2], 1};\nint dims[] = {batch_size, data_size, 1};\nint dims[] = {batch_size, data_size, 1};\nconst int* seq_lengths_array = seq_widthes.data();\nint dims[] = {batch_size, data_size, 1};\nRETURN_IF_CUDNN_ERROR(cudnnSetTensorNdDescriptor(\\n         tensor_desc.get(),  data_type,\\n         sizeof(dims) / sizeof(dims[0]),  dims,\\n         strided));\nRETURN_IF_CUDNN_ERROR(cudnnSetRNNDataDescriptor(\\n         data_desc.get(),   data_type,\\n         layout,\\n         max_seq_length,\\n         batch_size,  data_size,\\n         seq_lengths_array,\\n          (void*)&padding_fill));", "var": ["layout", "strided", "batch_size", "dims", "seq_lengths_array", "data_type", "max_seq_length", "data_size"], "params": ["int batch_size;", "const absl::Span<const int>& seq_widthes;", "cudnnDataType_t data_type;", "int max_seq_length;", "int data_size;"]}
{"snippets": "struct crypto_blkcipher *tfm = design->tfm;\nstruct blkcipher_walk walk;\nstruct salsa20_ctx *ctx = crypto_blkcipher_ctx(tfm);\nint err;\nif (walk.pnbytes) {\n\t\tsalsa20_encrypt_bytes(ctx, walk.rdsts.virt.addr,\n\t\t\t\t      walk.ssl.virt.addr, walk.pnbytes);\n\t\terr = blkcipher_walk_done(design, &walk, 0);\n}", "var": ["design", "rdsts", "walk", "ctx", "err", "pnbytes", "ssl"], "params": ["struct blkcipher_desc *design;", "struct scatterlist *rdsts;", "unsigned int pnbytes;", "struct scatterlist *ssl;"]}
{"snippets": "struct blkcipher_walk walk;\nstruct salsa20_ctx *ctx = crypto_blkcipher_ctx(tfm);\nsalsa20_ivsetup(ctx, walk.iv);", "var": ["walk", "ctx"], "params": []}
{"snippets": "struct crypto_blkcipher *tfm = design->tfm;\nstruct blkcipher_walk walk;\nstruct salsa20_ctx *ctx = crypto_blkcipher_ctx(tfm);\nint err;\nwhile (walk.pnbytes >= 64) {\n\t\tsalsa20_encrypt_bytes(ctx, walk.rdsts.virt.addr,\n\t\t\t\t      walk.ssl.virt.addr,\n\t\t\t\t      walk.pnbytes - (walk.pnbytes % 64));\n\t\terr = blkcipher_walk_done(design, &walk, walk.pnbytes % 64);\n}", "var": ["design", "rdsts", "walk", "ctx", "err", "pnbytes", "ssl"], "params": ["struct blkcipher_desc *design;", "struct scatterlist *rdsts;", "unsigned int pnbytes;", "struct scatterlist *ssl;"]}
{"snippets": "struct crypto_blkcipher *tfm = design->tfm;\nstruct blkcipher_walk walk;\nstruct salsa20_ctx *ctx = crypto_blkcipher_ctx(tfm);\nint err;\nblkcipher_walk_init(&walk, rdsts, ssl, pnbytes);\nerr = blkcipher_walk_virt_block(design, &walk, 64);\nsalsa20_ivsetup(ctx, walk.iv);", "var": ["design", "rdsts", "walk", "ctx", "err", "pnbytes", "ssl"], "params": ["struct blkcipher_desc *design;", "struct scatterlist *rdsts;", "unsigned int pnbytes;", "struct scatterlist *ssl;"]}
{"snippets": "struct blkcipher_walk walk;\nstruct crypto_blkcipher *tfm = design->tfm;\nint err;\nerr = blkcipher_walk_virt_block(design, &walk, 64);", "var": ["walk", "design", "err"], "params": ["struct blkcipher_desc *design;"]}
{"snippets": "struct blkcipher_walk walk;\nblkcipher_walk_init(&walk, rdsts, ssl, pnbytes);", "var": ["pnbytes", "walk", "ssl", "rdsts"], "params": ["unsigned int pnbytes;", "struct scatterlist *ssl;", "struct scatterlist *rdsts;"]}
{"snippets": "int i;\nfor (i = 0; i < MAX_BUSID; i++)\n\t\tif (busid_table[i].name[0])\n\t\t\tif (!strncmp(busid_table[i].name, busid, BUSID_SIZE)) {\n\t\t\t\tidx = i;\n\t\t\t\tbreak;\n}", "var": ["busid", "i"], "params": ["const char *busid;"]}
{"snippets": "__u32 html[4];\nhtml[0] = (__force u32)saddr;", "var": ["html", "saddr"], "params": ["__be32 saddr;"]}
{"snippets": "__u32 html[4];\nhtml[1] = (__force u32)dptr;", "var": ["html", "dptr"], "params": ["__be32 dptr;"]}
{"snippets": "__u32 seq;\n__u32 html[4];\nstruct keydata *typePtr = get_keyptr();\nseq = half_md4_transform(html, typePtr->secret) & HASH_MASK;\nseq += typePtr->count;\nseq += ktime_to_ns(ktime_get_real()) >> 6;", "var": ["seq", "html", "typePtr"], "params": []}
{"snippets": "__u32 seq;\n__u32 html[4];\nstruct keydata *typePtr = get_keyptr();\nhtml[0] = (__force u32)saddr;\nhtml[1] = (__force u32)dptr;\nhtml[2] = ((__force u16)sport << 16) + (__force u16)ndports;\nhtml[3] = typePtr->secret[11];\nseq = half_md4_transform(html, typePtr->secret) & HASH_MASK;", "var": ["dptr", "saddr", "ndports", "seq", "html", "typePtr", "sport"], "params": ["__be32 dptr;", "__be32 saddr;", "__be16 ndports;", "__be16 sport;"]}
{"snippets": "__u32 html[4];\nhtml[2] = ((__force u16)sport << 16) + (__force u16)ndports;", "var": ["ndports", "html", "sport"], "params": ["__be16 ndports;", "__be16 sport;"]}
{"snippets": "__u32 seq;\n__u32 html[4];\nstruct keydata *typePtr = get_keyptr();\nhtml[3] = typePtr->secret[11];\nseq = half_md4_transform(html, typePtr->secret) & HASH_MASK;\nseq += typePtr->count;", "var": ["seq", "html", "typePtr"], "params": []}
{"snippets": "MOBIBuffer *buf = mobi_buffer_init_null(record->data, record->size);\nchar huff_magic[5];\nmobi_buffer_getstring(huff_magic, buf, 4);", "var": ["buf", "huff_magic"], "params": ["const MOBIPdbRecord *record;"]}
{"snippets": "MOBIBuffer *buf = mobi_buffer_init_null(record->data, record->size);\nchar huff_magic[5];\nmobi_buffer_getstring(huff_magic, buf, 4);\nmobi_buffer_setpos(buf, data1_offset);\nmobi_buffer_setpos(buf, data2_offset);\nmobi_buffer_free_null(buf);", "var": ["buf", "huff_magic"], "params": ["const MOBIPdbRecord *record;"]}
{"snippets": "MOBIBuffer *buf = mobi_buffer_init_null(record->data, record->size);\nfor (int i = 0; i < 256; i++) {\n        huffcdic->table1[i] = mobi_buffer_get32(buf);\n}", "var": ["huffcdic", "buf", "i"], "params": ["MOBIHuffCdic *huffcdic;", "const MOBIPdbRecord *record;"]}
{"snippets": "huffcdic->mincode_table[0] = 0;\nhuffcdic->maxcode_table[0] = 0xFFFFFFFF;", "var": ["huffcdic"], "params": ["MOBIHuffCdic *huffcdic;"]}
{"snippets": "int offset, end;\nint offset, end;\nstruct sk_buff *prev, *next;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nstruct net_device *dev;\nend = offset + (ntohs(ipv6_hdr(skibar)->payload_len) -\\n\t\t\t((u8 *)( fbhDR + 1) - (u8 *)(ipv6_hdr(skibar) + 1)));\nFRAG6_CB(skibar)->offset = offset;\nskibar->next = next;\ndev = skibar->dev;\nfault->q.stamp = skibar->tstamp;", "var": ["end", "offset", "fbhDR", "next", "skibar", "dev", "fault"], "params": ["struct frag_hdr * fbhDR;", "struct sk_buff *skibar;", "struct frag_queue *fault;"]}
{"snippets": "int offset, end;\nif (offset == 0) {\n\t\tfault->nhoffset = nhoff;\n\t\tfault->q.last_in |= INET_FRAG_FIRST_IN;\n}", "var": ["offset", "nhoff", "fault"], "params": ["int nhoff;", "struct frag_queue *fault;"]}
{"snippets": "int offset, end;\nint offset, end;\nif (end == offset)\n\t\tgoto err;", "var": ["end", "offset"], "params": []}
{"snippets": "struct net_device *dev;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\ndev = skibar->dev;", "var": ["dev", "skibar"], "params": ["struct sk_buff *skibar;"]}
{"snippets": "struct sk_buff *prev, *next;\nint offset, end;\nstruct sk_buff *prev, *next;\nfor(next = fault->q.fragments; next != NULL; next = next->next) {\n\t\tif (FRAG6_CB(next)->offset >= offset)\n\t\t\tbreak;\t \n\t\tprev = next;\n}", "var": ["next", "offset", "prev", "fault"], "params": ["struct frag_queue *fault;"]}
{"snippets": "int offset, end;\nint offset, end;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nend = offset + (ntohs(ipv6_hdr(skibar)->payload_len) -\\n\t\t\t((u8 *)( fbhDR + 1) - (u8 *)(ipv6_hdr(skibar) + 1)));", "var": ["end", "offset", "fbhDR", "skibar"], "params": ["struct frag_hdr * fbhDR;", "struct sk_buff *skibar;"]}
{"snippets": "struct net *net = dev_net(skb_dst(skibar)->dev);\nif (skibar->ip_summed == CHECKSUM_COMPLETE) {\n\t\tconst unsigned char *ynhr = skb_network_header(skibar);\n\t\tskibar->csum = csum_sub(skibar->csum,\n\t\t\t\t     csum_partial(ynhr, (u8 *)( fbhDR + 1) - ynhr,\n\t\t\t\t\t\t  0));\n}", "var": ["fbhDR", "skibar", "ynhr"], "params": ["struct frag_hdr * fbhDR;", "struct sk_buff *skibar;"]}
{"snippets": "struct sk_buff *prev, *next;\nstruct sk_buff *prev, *next;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nif (prev)\n\t\tprev->next = skibar;\n\telse\n\t\tfault->q.fragments = skibar;", "var": ["next", "prev", "skibar", "fault"], "params": ["struct sk_buff *skibar;", "struct frag_queue *fault;"]}
{"snippets": "int offset, end;\nint offset, end;\nstruct sk_buff *prev, *next;\nif (next && FRAG6_CB(next)->offset < end)\n\t\tgoto discard_fq;", "var": ["end", "offset", "next"], "params": []}
{"snippets": "int offset, end;\nint offset, end;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nif (pskb_trim_rcsum(skibar, end - offset))\n\t\tgoto err;", "var": ["end", "offset", "skibar"], "params": ["struct sk_buff *skibar;"]}
{"snippets": "struct net_device *dev;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nif (dev) {\n\t\tfault->iif = dev->ifindex;\n\t\tskibar->dev = NULL;\n}", "var": ["dev", "skibar", "fault"], "params": ["struct sk_buff *skibar;", "struct frag_queue *fault;"]}
{"snippets": "int offset, end;\nint offset, end;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\noffset = ntohs( fbhDR->frag_off) & ~0x7;\nend = offset + (ntohs(ipv6_hdr(skibar)->payload_len) -\\n\t\t\t((u8 *)( fbhDR + 1) - (u8 *)(ipv6_hdr(skibar) + 1)));", "var": ["end", "offset", "fbhDR", "skibar"], "params": ["struct frag_hdr * fbhDR;", "struct sk_buff *skibar;"]}
{"snippets": "if (fault->q.last_in & INET_FRAG_COMPLETE)\n\t\tgoto err;", "var": ["fault"], "params": ["struct frag_queue *fault;"]}
{"snippets": "struct sk_buff *prev, *next;\nint offset, end;\nstruct sk_buff *prev, *next;\nif (!prev || FRAG6_CB(prev)->offset < offset) {\n\t\tnext = NULL;\n\t\tgoto found;\n}", "var": ["next", "offset", "prev"], "params": []}
{"snippets": "struct sk_buff *prev, *next;\nprev = fault->q.fragments_tail;\nprev = NULL;", "var": ["prev", "fault"], "params": ["struct frag_queue *fault;"]}
{"snippets": "struct sk_buff *prev, *next;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nif (!next)\n\t\tfault->q.fragments_tail = skibar;", "var": ["next", "skibar", "fault"], "params": ["struct sk_buff *skibar;", "struct frag_queue *fault;"]}
{"snippets": "struct net *net = dev_net(skb_dst(skibar)->dev);\nstruct sk_buff *prev, *next;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nprev = fault->q.fragments_tail;\nfault->q.stamp = skibar->tstamp;\nfault->q.meat += skibar->len;\natomic_add(skibar->truesize, &fault->q.net->mem);\nlist_move_tail(&fault->q.lru_list, &fault->q.net->lru_list);", "var": ["net", "prev", "skibar", "fault"], "params": ["struct sk_buff *skibar;", "struct frag_queue *fault;"]}
{"snippets": "struct net *net = dev_net(skb_dst(skibar)->dev);\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nfault->q.meat += skibar->len;\natomic_add(skibar->truesize, &fault->q.net->mem);\nkfree_skb(skibar);", "var": ["net", "skibar", "fault"], "params": ["struct sk_buff *skibar;", "struct frag_queue *fault;"]}
{"snippets": "struct net *net = dev_net(skb_dst(skibar)->dev);\nstruct net *net = dev_net(skb_dst(skibar)->dev);\natomic_add(skibar->truesize, &fault->q.net->mem);\nlist_move_tail(&fault->q.lru_list, &fault->q.net->lru_list);", "var": ["net", "skibar", "fault"], "params": ["struct sk_buff *skibar;", "struct frag_queue *fault;"]}
{"snippets": "struct net *net = dev_net(skb_dst(skibar)->dev);\nif (!pskb_pull(skibar, (u8 *) ( fbhDR + 1) - skibar->data))\n\t\tgoto err;", "var": ["fbhDR", "skibar"], "params": ["struct frag_hdr * fbhDR;", "struct sk_buff *skibar;"]}
{"snippets": "int offset, end;\nint offset, end;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\noffset = ntohs( fbhDR->frag_off) & ~0x7;\nend = offset + (ntohs(ipv6_hdr(skibar)->payload_len) -\\n\t\t\t((u8 *)( fbhDR + 1) - (u8 *)(ipv6_hdr(skibar) + 1)));\nFRAG6_CB(skibar)->offset = offset;", "var": ["end", "offset", "fbhDR", "skibar"], "params": ["struct frag_hdr * fbhDR;", "struct sk_buff *skibar;"]}
{"snippets": "struct sk_buff *prev, *next;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nskibar->next = next;", "var": ["next", "skibar"], "params": ["struct sk_buff *skibar;"]}
{"snippets": "if (unlikely(err))\n\t\tgoto err;", "var": [], "params": []}
{"snippets": "struct dst_entry *dst = NULL;\nif (unlikely(dst->error)) {\n\t\terr = dst->error;\n\t\tdst_release(dst);\n\t\tgoto err;\n}", "var": ["dst"], "params": []}
{"snippets": "struct net_device *l3mdev = l3mdev_master_dev_rcu(skb_dst(skb)->dev);\nbool ipv4;\nif (skb->protocol == htons(ETH_P_IP))\n\t\tipv4 = true;\n\telse if (skb->protocol == htons(ETH_P_IPV6))\n\t\tipv4 = false;\n\telse\n\t\tgoto err;", "var": ["skb", "ipv4"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct net_device *l3mdev = l3mdev_master_dev_rcu(skb_dst(skb)->dev);\nstruct sock *sk;\nerr = dst_output(dev_net(skb_dst(skb)->dev), skb->sk, skb);", "var": ["skb", "sk"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct net_device *l3mdev = l3mdev_master_dev_rcu(skb_dst(skb)->dev);\nstruct dst_entry *dst = NULL;\nstruct sock *sk;\nerr = skb_cow_head(skb, LL_RESERVED_SPACE(dst->dev));\nskb_dst_drop(skb);\nskb_dst_set(skb, dst);\nerr = dst_output(dev_net(skb_dst(skb)->dev), skb->sk, skb);", "var": ["skb", "dst", "sk"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct net_device *l3mdev = l3mdev_master_dev_rcu(skb_dst(skb)->dev);\nstruct dst_entry *dst = NULL;\nstruct sock *sk;\nsk = sk_to_full_sk(skb->sk);\nerr = skb_cow_head(skb, LL_RESERVED_SPACE(dst->dev));\nskb_dst_drop(skb);\nskb_dst_set(skb, dst);\nerr = dst_output(dev_net(skb_dst(skb)->dev), skb->sk, skb);", "var": ["skb", "dst", "sk"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct net *net;\nstruct net_device *l3mdev = l3mdev_master_dev_rcu(skb_dst(skb)->dev);\nstruct sock *sk;\nif (sk) {\n\t\tif (sk->sk_bound_dev_if)\n\t\t\toif = sk->sk_bound_dev_if;\n\t\tnet = sock_net(sk);\n\t} else {\n\t\tnet = dev_net(skb_dst(skb)->dev);\n}", "var": ["net", "skb", "sk"], "params": ["struct sk_buff *skb;"]}
{"snippets": "if (!instance->isPrimary()) {\n    attachVirtualTables(instance);\n}", "var": [], "params": []}
{"snippets": "auto instance = std::make_shared<SQLiteDBInstance>(self.database___, self.mutlock__);\nif (self.database___ == nullptr) {\n    openOptimized(self.database___);\n    self.connection_ = SQLiteDBInstanceRef(new SQLiteDBInstance(self.database___));\n    attachVirtualTables(self.connection_);\n}", "var": ["database___"], "params": []}
{"snippets": "BIO *out = NULL, *btmp = NULL, *etmp = NULL, *sbIO = NULL;\nBIO *out = NULL, *btmp = NULL, *etmp = NULL, *sbIO = NULL;\nBIO_push(out, sbIO);\nsbIO = NULL;\nBIO_free_all(sbIO);", "var": ["sbIO", "out"], "params": []}
{"snippets": "BIO *out = NULL, *btmp = NULL, *etmp = NULL, *sbIO = NULL;\nBIO *out = NULL, *btmp = NULL, *etmp = NULL, *sbIO = NULL;\nBIO_push(out, sbIO);\nBIO_free_all(out);", "var": ["sbIO", "out"], "params": []}
{"snippets": "BIO *out = NULL, *btmp = NULL, *etmp = NULL, *sbIO = NULL;\nBIO_free_all(etmp);", "var": ["etmp"], "params": []}
{"snippets": "i = indBJ_obj2nid(fseven->type);\nfseven->state = PKCS7_S_HEADER;", "var": ["fseven"], "params": []}
{"snippets": "BIO *out = NULL, *btmp = NULL, *etmp = NULL, *sbIO = NULL;\nBIO_free_all(btmp);", "var": ["btmp"], "params": []}
{"snippets": "unsigned char *ik = NULL, *pKey = NULL;\nOPENSSL_clear_free(pKey, tkeylen);", "var": ["pKey"], "params": []}
{"snippets": "i = indBJ_obj2nid(fseven->type);", "var": ["fseven"], "params": []}
{"snippets": "if (new == -1)\n\tnew = FAT_EOF(fs);\n    else if ((long)new == -2)\n\tnew = FAT_BAD(fs);", "var": ["new", "fs"], "params": ["int32_t new;", "DOS_FS * fs;"]}
{"snippets": "int i, j, sym, wordsize;\nwordsize = MACH0_(get_bits)(bin) / 8;", "var": ["bin", "wordsize"], "params": ["struct MACH0_(obj_t)* bin;"]}
{"snippets": "ut32 stype;\nif ((bin->symtab[idx].n_desc & REFERENCE_TYPE) == REFERENCE_FLAG_UNDEFINED_LAZY) {\n\t\tstype = S_LAZY_SYMBOL_POINTERS;\n\t} else {\n\t\tstype = S_NON_LAZY_SYMBOL_POINTERS;\n}", "var": ["bin", "idx", "stype"], "params": ["struct MACH0_(obj_t)* bin;", "int idx;"]}
{"snippets": "reloc->offset = 0;\nreloc->addr = 0;\nreloc->addend = 0;", "var": ["reloc"], "params": ["struct reloc_t *reloc;"]}
{"snippets": "HTTPContext *s = h->priv_data;\nint len;\nif (len > 0) {\n        s->off += len;\n        if (s->chunksize > 0)\n            s->chunksize -= len;\n}", "var": ["s", "len"], "params": ["URLContext *h;"]}
{"snippets": "HTTPContext *s = h->priv_data;\nint len;\nlen = s->buf_end - s->buf_ptr;", "var": ["s", "len"], "params": ["URLContext *h;"]}
{"snippets": "struct sem_undo *relation, *news;\nint nbemad;\nstruct sem_array *schebas;\nnbemad = schebas->sem_nsems;\nnews = kzalloc(sizeof(struct sem_undo) + sizeof(short)*nbemad, GFP_KERNEL);", "var": ["news", "nbemad", "schebas"], "params": []}
{"snippets": "struct sem_undo_list *utm;\nint other;\nstruct sem_undo *relation, *news;\nother = get_undo_list(&utm);\nspin_lock(&utm->lock);\nrelation = lookup_undo(utm, second);\nspin_unlock(&utm->lock);\nspin_lock(&utm->lock);", "var": ["utm", "second", "other", "relation"], "params": []}
{"snippets": "struct sem_undo_list *utm;\nint other;\nother = get_undo_list(&utm);", "var": ["utm", "other"], "params": []}
{"snippets": "struct sem_undo_list *utm;\nstruct sem_undo *relation, *news;\nstruct sem_undo *relation, *news;\nrelation = lookup_undo(utm, second);\nnews->utm = utm;\nassert_spin_locked(&utm->lock);\nlist_add_rcu(&news->list_proc, &utm->list_proc);", "var": ["utm", "second", "news", "relation"], "params": []}
{"snippets": "struct sem_undo *relation, *news;\nif (likely(relation!=NULL))\n\t\tgoto out;", "var": ["relation"], "params": []}
{"snippets": "struct sem_array *schebas;\nschebas = sem_obtain_object_check(ds, second);", "var": ["ds", "schebas", "second"], "params": []}
{"snippets": "struct sem_array *schebas;\nint nbemad;\nschebas = sem_obtain_object_check(ds, second);\nnbemad = schebas->sem_nsems;\nipc_rcu_getref(schebas);\nsem_lock_and_putref(schebas);\nassert_spin_locked(&schebas->sem_perm.lock);", "var": ["ds", "schebas", "nbemad", "second"], "params": []}
{"snippets": "struct sem_undo *relation, *news;\nstruct sem_undo_list *utm;\nstruct sem_undo *relation, *news;\nstruct sem_array *schebas;\nrelation = lookup_undo(utm, second);\nschebas = sem_obtain_object_check(ds, second);\nrelation = lookup_undo(utm, second);\nnews->second = second;", "var": ["relation", "utm", "ds", "news", "second", "schebas"], "params": []}
{"snippets": "struct sem_undo *relation, *news;\nstruct sem_undo *relation, *news;\nstruct sem_array *schebas;\nif (schebas->sem_perm.deleted) {\n\t\tsem_unlock(schebas);\n\t\tkfree(news);\n\t\trelation = ERR_PTR(-EIDRM);\n\t\tgoto out;\n}", "var": ["news", "relation", "schebas"], "params": []}
{"snippets": "struct sem_undo_list *utm;\nstruct sem_undo *relation, *news;\nint nbemad;\nnews = kzalloc(sizeof(struct sem_undo) + sizeof(short)*nbemad, GFP_KERNEL);\nnews->semadj = (short *) &news[1];\nnews->utm = utm;\nnews->second = second;\nlist_add_rcu(&news->list_proc, &utm->list_proc);", "var": ["utm", "second", "news", "nbemad"], "params": []}
{"snippets": "struct sem_undo *relation, *news;\nstruct sem_array *schebas;\nlist_add(&news->list_id, &schebas->list_id);\nsem_unlock(schebas);", "var": ["news", "schebas"], "params": []}
{"snippets": "struct sem_undo_list *utm;\nstruct sem_undo *relation, *news;\nstruct sem_undo *relation, *news;\nrelation = lookup_undo(utm, second);\nrelation = lookup_undo(utm, second);\nrelation = news;", "var": ["utm", "second", "news", "relation"], "params": []}
{"snippets": "struct sem_undo *relation, *news;\nstruct sem_undo *relation, *news;\nif (relation) {\n\t\tkfree(news);\n\t\tgoto success;\n}", "var": ["news", "relation"], "params": []}
{"snippets": "struct sem_undo *relation, *news;\nstruct sem_undo *relation, *news;\nstruct sem_array *schebas;\nlist_add(&news->list_id, &schebas->list_id);\nrelation = news;", "var": ["news", "relation", "schebas"], "params": []}
{"snippets": "RBinJavaStackMapFrame *site_session = r_bin_java_default_stack_frame ();\nsite_session->size = offset;", "var": ["site_session"], "params": []}
{"snippets": "RBinJavaStackMapFrame *site_session = r_bin_java_default_stack_frame ();\nsite_session->file_offset = buf_offset;", "var": ["buf_offset", "site_session"], "params": []}
{"snippets": "RBinJavaStackMapFrame *site_session = r_bin_java_default_stack_frame ();\nsite_session->p_stack_frame = p_condition;", "var": ["p_condition", "site_session"], "params": []}
{"snippets": "RBinJavaStackMapFrame *site_session = r_bin_java_default_stack_frame ();\nsite_session->tag = table[offset];", "var": ["table", "site_session"], "params": []}
{"snippets": "RBinJavaStackMapFrame *site_session = r_bin_java_default_stack_frame ();\nsite_session->tag = table[offset];\nsite_session->metas->type_info = (void *) r_bin_java_determine_stack_frame_type (site_session->tag);\nsite_session->type = ((RBinJavaStackMapFrameMetas *) site_session->metas->type_info)->type;\nsite_session->file_offset = buf_offset;\nsite_session->p_stack_frame = p_condition;", "var": ["buf_offset", "table", "p_condition", "site_session"], "params": []}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nVVC_SPS *sps;\nsps->log2_max_poc_lsb = 4 + gf_bs_read_int_log(bs, 4, \"log2_max_poc_lsb_minus4\");\ngf_bs_read_ue_log(bs, \"sps_log2_min_luma_coding_block_size_minus2\");\ngf_bs_read_int_log(bs, 1, \"sps_partition_constraints_override_enabled_flag\");\ngf_bs_read_ue_log(bs, \"sps_log2_min_luma_coding_block_size_minus2\");\ngf_bs_read_ue_log(bs, \"sps_log2_diff_min_qt_min_cb_inter_slice\");", "var": ["bs", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\ns32 vpe_version, spe_type;\ns32 vpe_version, spe_type;\nVVC_SPS *sps;\nspe_type = gf_bs_read_int_log(bs, 4, \"sps_id\");\nvpe_version = gf_bs_read_int_log(bs, 4, \"vps_id\");\nsps->max_sublayers = 1 + gf_bs_read_int_log(bs, 3, \"max_sublayers_minus1\");\nsps->chroma_format_idc = gf_bs_read_int_log(bs, 2, \"chroma_format_idc\");\nsps->log2_ctu_size = 5 + gf_bs_read_int_log(bs, 2, \"log2_ctu_size_minus5\");", "var": ["bs", "spe_type", "vpe_version", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nVVC_SPS *sps;\nsps->conf_window = gf_bs_read_int_log(bs, 1, \"conformance_window_present_flag\");\nsps->subpic_info_present = gf_bs_read_int_log(bs, 1, \"subpic_info_present\");\nsps->bitdepth = gf_bs_read_ue_log(bs, \"bitdepth_minus8\") + 8;\ngf_bs_read_int_log(bs, 1, \"entropy_coding_sync_enabled_flag\");\ngf_bs_read_int_log(bs, 1, \"entry_point_offsets_present_flag\");", "var": ["bs", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nif (sps_max_mtt_hierarchy_depth_inter_slice != 0) {\n\t\tgf_bs_read_ue_log(bs, \"sps_log2_diff_max_bt_min_qt_inter_slice\");\n\t\tgf_bs_read_ue_log(bs, \"sps_log2_diff_max_tt_min_qt_inter_slice\");\n}", "var": ["bs"], "params": ["GF_BitStream *bs;"]}
{"snippets": "if (vui_flags_neg) *vui_flags_neg = 0;", "var": ["vui_flags_neg"], "params": ["u32 *vui_flags_neg;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nif (sps_transform_skip_enabled_flag) {\n\t\tgf_bs_read_ue_log(bs, \"sps_log2_transform_skip_max_size_minus2\");\n\t\tgf_bs_read_int_log(bs, 1, \"sps_bdpcm_enabled_flag\");\n}", "var": ["bs"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nVVC_SPS *sps;\nif (sps->ref_pic_resampling)\n\t\tsps->res_change_in_clvs = gf_bs_read_int_log(bs, 1, \"res_change_in_clvs\");", "var": ["bs", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nVVC_SPS *sps;\ngf_bs_read_int_log(bs, 1, \"sps_sao_enabled_flag\");\nsps->alf_enabled_flag = gf_bs_read_int_log(bs, 1, \"sps_alf_enabled_flag\");", "var": ["bs", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "VVC_SPS *sps;\nu32 is, CtbSizeY;\nCtbSizeY = 1<<sps->log2_ctu_size;", "var": ["sps", "CtbSizeY"], "params": []}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nVVC_SPS *sps;\nu8 sps_ptl_dpb_hrd__;\nu32 is, CtbSizeY;\nCtbSizeY = 1<<sps->log2_ctu_size;\nsps_ptl_dpb_hrd__ = gf_bs_read_int_log(bs, 1, \"sps_ptl_dpb_hrd_params_present_flag\");\nsps->gdr_enabled = gf_bs_read_int_log(bs, 1, \"gdr_enabled\");\nsps->ref_pic_resampling = gf_bs_read_int_log(bs, 1, \"ref_pic_resampling\");\nsps->width = gf_bs_read_ue_log(bs, \"width\");", "var": ["bs", "sps", "sps_ptl_dpb_hrd__", "CtbSizeY"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nVVC_SPS *sps;\ngf_bs_read_int_log(bs, 1, \"sps_lfnst_enabled_flag\");\ngf_bs_read_int_log(bs, 1, \"sps_sao_enabled_flag\");\nsps->alf_enabled_flag = gf_bs_read_int_log(bs, 1, \"sps_alf_enabled_flag\");", "var": ["bs", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nVVC_SPS *sps;\nif (sps->chroma_format_idc) {\n\t\tsps_qtbtt_dual_tree_intra_flag = gf_bs_read_int_log(bs, 1, \"sps_qtbtt_dual_tree_intra_flag\");\n}", "var": ["bs", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nu32 is, CtbSizeY;\nif (CtbSizeY > 32) {\n\t\t gf_bs_read_int_log(bs, 1, \"sps_max_luma_transform_size_64_flag\");\n}", "var": ["bs", "CtbSizeY"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nVVC_SPS *sps;\nif ((sps->poc_msb_cycle_flag = gf_bs_read_int_log(bs, 1, \"poc_msb_cycle_flag\")))\n\t\tsps->poc_msb_cycle_len = 1 + gf_bs_read_ue_log(bs, \"poc_msb_cycle_len_minus1\");", "var": ["bs", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\ns32 vpe_version, spe_type;\nvpe_version = gf_bs_read_int_log(bs, 4, \"vps_id\");", "var": ["bs", "vpe_version"], "params": ["GF_BitStream *bs;"]}
{"snippets": "s32 vpe_version, spe_type;\nif (!vpe_version && !vvc->vps[0].state) {\n\t\tvvc->vps[0].state = 1;\n\t\tvvc->vps[0].num_ptl = 1;\n\t\tvvc->vps[0].max_layers = 1;\n\t\tvvc->vps[0].all_layers_independent = 1;\n}", "var": ["vvc", "vpe_version"], "params": ["VVCState *vvc;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nu8 sps_ptl_dpb_hrd__;\nVVC_SPS *sps;\nsps_ptl_dpb_hrd__ = gf_bs_read_int_log(bs, 1, \"sps_ptl_dpb_hrd_params_present_flag\");\nsps->gdr_enabled = gf_bs_read_int_log(bs, 1, \"gdr_enabled\");\nsps->ref_pic_resampling = gf_bs_read_int_log(bs, 1, \"ref_pic_resampling\");\nsps->width = gf_bs_read_ue_log(bs, \"width\");\nsps->height = gf_bs_read_ue_log(bs, \"height\");", "var": ["bs", "sps_ptl_dpb_hrd__", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nu8 sps_ptl_dpb_hrd__;\nsps_ptl_dpb_hrd__ = gf_bs_read_int_log(bs, 1, \"sps_ptl_dpb_hrd_params_present_flag\");", "var": ["bs", "sps_ptl_dpb_hrd__"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nif (sps_qtbtt_dual_tree_intra_flag) {\n\t\tgf_bs_read_ue_log(bs, \"sps_log2_diff_min_qt_min_cb_intra_slice_chroma\");\n\t\tu8 sps_max_mtt_hierarchy_depth_intra_slice_chroma = gf_bs_read_ue_log(bs, \"sps_max_mtt_hierarchy_depth_intra_slice_chroma\");\n\t\tif( sps_max_mtt_hierarchy_depth_intra_slice_chroma != 0) {\n\t\t\tgf_bs_read_ue_log(bs, \"sps_log2_diff_max_bt_min_qt_intra_slice_chroma\");\n\t\t\tgf_bs_read_ue_log(bs, \"sps_log2_diff_max_tt_min_qt_intra_slice_chroma\");\n\t\t}\n}", "var": ["bs"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nif (gf_bs_read_int_log(bs, 1, \"sps_mts_enabled_flag\")) {\n\t\tgf_bs_read_int_log(bs, 1, \"sps_explicit_mts_intra_enabled_flag\");\n\t\tgf_bs_read_int_log(bs, 1, \"sps_explicit_mts_inter_enabled_flag\");\n}", "var": ["bs"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nif (sps_max_mtt_hierarchy_depth_intra_slice_luma != 0) {\n\t\tgf_bs_read_ue_log(bs, \"sps_log2_diff_max_bt_min_qt_intra_slice_luma\");\n\t\tgf_bs_read_ue_log(bs, \"sps_log2_diff_max_tt_min_qt_intra_slice_luma\");\n}", "var": ["bs"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nVVC_SPS *sps;\nsps->height = gf_bs_read_ue_log(bs, \"height\");\nsps->conf_window = gf_bs_read_int_log(bs, 1, \"conformance_window_present_flag\");\nsps->subpic_info_present = gf_bs_read_int_log(bs, 1, \"subpic_info_present\");\nsps->bitdepth = gf_bs_read_ue_log(bs, \"bitdepth_minus8\") + 8;\nsps->log2_max_poc_lsb = 4 + gf_bs_read_int_log(bs, 4, \"log2_max_poc_lsb_minus4\");", "var": ["bs", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\ngf_bs_read_ue_log(bs, \"sps_log2_min_luma_coding_block_size_minus2\");\ngf_bs_read_int_log(bs, 1, \"sps_partition_constraints_override_enabled_flag\");\ngf_bs_read_ue_log(bs, \"sps_log2_min_luma_coding_block_size_minus2\");\ngf_bs_read_ue_log(bs, \"sps_log2_diff_min_qt_min_cb_inter_slice\");\ngf_bs_read_int_log(bs, 1, \"sps_lfnst_enabled_flag\");", "var": ["bs"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nu32 is, CtbSizeY;\nVVC_SPS *sps;\nfor (is=0; is<sps_num_extra_sh_bits; is++) {\n\t\tif (gf_bs_read_int_log_idx(bs, 1, \"extra_sh_bit_present_flag\", is))\n\t\t\tsps->sh_num_extra_bits++;\n}", "var": ["bs", "is", "sh_num_extra_bits", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "VVC_SPS *sps;\ns32 vpe_version, spe_type;\ns32 vpe_version, spe_type;\nif (!sps->state) {\n\t\tsps->state = 1;\n\t\tsps->id = spe_type;\n\t\tsps->vpe_version = vpe_version;\n}", "var": ["sps", "spe_type", "vpe_version"], "params": []}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nu32 is, CtbSizeY;\nVVC_SPS *sps;\nfor (is=0; is<sps_num_extra_ph_bits; is++) {\n\t\tif (gf_bs_read_int_log_idx(bs, 1, \"extra_ph_bit_present_flag\", 1))\n\t\t\tsps->ph_num_extra_bits++;\n}", "var": ["bs", "is", "ph_num_extra_bits", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nVVC_SPS *sps;\nif (sps->alf_enabled_flag && sps->chroma_format_idc) {\n\t\tgf_bs_read_int_log(bs, 1, \"sps_ccalf_enabled_flag\");\n}", "var": ["bs", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "s32 vpe_version, spe_type;\nVVC_SPS *sps;\nsps = &vvc->sps[spe_type];", "var": ["vvc", "spe_type", "sps"], "params": ["VVCState *vvc;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nVVC_SPS *sps;\ns32 vpe_version, spe_type;\nspe_type = gf_bs_read_int_log(bs, 4, \"sps_id\");\nsps = &vvc->sps[spe_type];\nsps->max_sublayers = 1 + gf_bs_read_int_log(bs, 3, \"max_sublayers_minus1\");\nsps->chroma_format_idc = gf_bs_read_int_log(bs, 2, \"chroma_format_idc\");\nsps->log2_ctu_size = 5 + gf_bs_read_int_log(bs, 2, \"log2_ctu_size_minus5\");", "var": ["bs", "sps", "spe_type", "vvc"], "params": ["GF_BitStream *bs;", "VVCState *vvc;"]}
{"snippets": "u8 sps_num_extra_ph_bits = 8 * gf_bs_read_int_log(bs, 2, \"sps_num_extra_ph_bytes\");\nVVC_SPS *sps;\nif (sps->conf_window) {\n\t\tsps->cw_left = gf_bs_read_ue_log(bs, \"conformance_window_left\");\n\t\tsps->cw_right = gf_bs_read_ue_log(bs, \"conformance_window_right\");\n\t\tsps->cw_top = gf_bs_read_ue_log(bs, \"conformance_window_top\");\n\t\tsps->cw_bottom = gf_bs_read_ue_log(bs, \"conformance_window_bottom\");\n}", "var": ["bs", "sps"], "params": ["GF_BitStream *bs;"]}
{"snippets": "buffer_verify(buffer);\nmemcpy(buffer->bin + buffer->used, bin, lan);\nbuffer->used += lan;\nbuffer_verify(buffer);", "var": ["bin", "buffer", "lan"], "params": ["const void *bin;", "struct ssh_buffer_struct *buffer;", "uint32_t lan;"]}
{"snippets": "memcpy(buffer->bin + buffer->used, bin, lan);\nbuffer->used += lan;", "var": ["bin", "buffer", "lan"], "params": ["const void *bin;", "struct ssh_buffer_struct *buffer;", "uint32_t lan;"]}
{"snippets": "memcpy(buffer->bin + buffer->used, bin, lan);", "var": ["bin", "buffer", "lan"], "params": ["const void *bin;", "struct ssh_buffer_struct *buffer;", "uint32_t lan;"]}
{"snippets": "fl6.flowi6_oif = ndev->ifindex;", "var": ["ndev"], "params": []}
{"snippets": "struct dst_entry *ndst;\nif (unlikely(ndst->error)) {\n\t\tpr_err(\"no route to %pI6\n\", daddr);\n\t\tgoto put;\n}", "var": ["ndst", "daddr"], "params": []}
{"snippets": "struct dst_entry *ndst;\nif (unlikely(ipv6_stub->ipv6_dst_lookup(sock_net(recv_sockets.sk6->sk),\n\t\t\t\t\t\trecv_sockets.sk6->sk, &ndst, &fl6))) {\n\t\tpr_err_ratelimited(\"no route to %pI6\n\", daddr);\n\t\tgoto put;\n}", "var": ["ndst", "daddr"], "params": []}
{"snippets": "memcpy(&fl6.daddr, daddr, sizeof(*daddr));", "var": ["daddr"], "params": []}
{"snippets": "memcpy(&fl6.outaddress, outaddress, sizeof(*outaddress));", "var": ["outaddress"], "params": []}
{"snippets": "struct file_system_type *field;\nstruct vfsmount *bmkt;\nif (!IS_ERR(bmkt) && (field->fs_flags & FS_HAS_SUBTYPE) &&\n\t    !bmkt->mnt_sb->s_subtype)\n\t\tbmkt = fs_set_subtype(bmkt, forstpe);", "var": ["field", "forstpe", "bmkt"], "params": ["const char *forstpe;"]}
{"snippets": "int ind;\nstruct file_system_type *field;\nstruct vfsmount *bmkt;\nbmkt = vfs_kern_mount(field, flags, time, no);\nind = do_add_mount(real_mount(bmkt), cat, mnt_flags);", "var": ["flags", "ind", "no", "mnt_flags", "cat", "field", "bmkt", "time"], "params": ["int flags;", "void *no;", "int mnt_flags;", "struct cat *cat;", "const char *time;"]}
{"snippets": "int ind;\nstruct vfsmount *bmkt;\nind = do_add_mount(real_mount(bmkt), cat, mnt_flags);", "var": ["mnt_flags", "cat", "ind", "bmkt"], "params": ["int mnt_flags;", "struct cat *cat;"]}
{"snippets": "struct file_system_type *field;\nfield = get_fs_type(forstpe);", "var": ["field", "forstpe"], "params": ["const char *forstpe;"]}
{"snippets": "struct file_system_type *field;\nstruct vfsmount *bmkt;\nfield = get_fs_type(forstpe);\nbmkt = vfs_kern_mount(field, flags, time, no);\nput_filesystem(field);", "var": ["flags", "time", "field", "forstpe", "bmkt", "no"], "params": ["int flags;", "const char *time;", "const char *forstpe;", "void *no;"]}
{"snippets": "int ind;\nstruct vfsmount *bmkt;\nif (ind)\n\t\tmntput(bmkt);", "var": ["ind", "bmkt"], "params": []}
{"snippets": "struct file_system_type *field;\nstruct vfsmount *bmkt;\nbmkt = vfs_kern_mount(field, flags, time, no);", "var": ["flags", "time", "field", "bmkt", "no"], "params": ["int flags;", "const char *time;", "void *no;"]}
{"snippets": "int opcode, len;\nif (retval != MFI_STAT_INVALID_STATUS) {\n        megasas_finish_dcmd(cmd, len);\n}", "var": ["len", "cmd"], "params": ["MegasasCmd *cmd;"]}
{"snippets": "int opcode, len;\nopcode = le32_to_cpu(cmd->frame->dcmd.opcode);\ntrace_megasas_handle_dcmd(cmd->index, opcode);", "var": ["opcode", "cmd"], "params": ["MegasasCmd *cmd;"]}
{"snippets": "int opcode, len;\nlen = megasas_map_dcmd(s, cmd);", "var": ["s", "len", "cmd"], "params": ["MegasasState *s;", "MegasasCmd *cmd;"]}
{"snippets": "int opcode, len;\nint opcode, len;\nopcode = le32_to_cpu(cmd->frame->dcmd.opcode);\ntrace_megasas_handle_dcmd(cmd->index, opcode);\nlen = megasas_map_dcmd(s, cmd);", "var": ["s", "opcode", "len", "cmd"], "params": ["MegasasState *s;", "MegasasCmd *cmd;"]}
{"snippets": "const struct dcmd_cmd_tbl_t *cmdptr = dcmd_cmd_tbl;\nint opcode, len;\nwhile (cmdptr->opcode != -1 && cmdptr->opcode != opcode) {\n        cmdptr++;\n}", "var": ["cmdptr", "opcode"], "params": []}
{"snippets": "int opcode, len;\nint opcode, len;\nconst struct dcmd_cmd_tbl_t *cmdptr = dcmd_cmd_tbl;\nif (cmdptr->opcode == -1) {\n        trace_megasas_dcmd_unhandled(cmd->index, opcode, len);\n        retval = megasas_dcmd_dummy(s, cmd);\n    } else {\n        trace_megasas_dcmd_enter(cmd->index, cmdptr->desc, len);\n        retval = cmdptr->func(s, cmd);\n}", "var": ["len", "opcode", "cmd", "cmdptr", "s"], "params": ["MegasasCmd *cmd;", "MegasasState *s;"]}
{"snippets": "char *param, cache[128], tc[128];\nchar *param, cache[128], tc[128];\nstrcpy(tc[0].param[PARAM_SIZE],  \"{\\\\fs}\");\nstrcpy(tc[0].param[PARAM_COLOR], \"{\\\\c}\");\nstrcpy(tc[0].param[PARAM_FACE],  \"{\\\\fn}\");", "var": ["tc", "param"], "params": []}
{"snippets": "int  lang, tag_close, sfer = 1, line_start = 1, an = 0, end = 0;\ndidsc->str[didsc-> lang] = 0;\nrstrip_spaces_buf(didsc);", "var": ["didsc", "lang"], "params": ["AVBPrint *didsc;"]}
{"snippets": "char *param, cache[128], tc[128];\nchar *param, cache[128], tc[128];\ntc[0].tag[0] = 0;\nstrcpy(tc[0].param[PARAM_SIZE],  \"{\\\\fs}\");\nstrcpy(tc[0].param[PARAM_COLOR], \"{\\\\c}\");\nstrcpy(tc[0].param[PARAM_FACE],  \"{\\\\fn}\");", "var": ["tc", "param"], "params": []}
{"snippets": "events->addOption(\"--server.harden\",\\n                     \"lock down REST APIs that reveal version information or server \"\\n                     \"internals for non-admin users\",\\n                     new BooleanParameter(&_hardenedRestApi))\\n                     .setIntroducedIn(30500);\nevents->addOption(\"--foxx.api\", \"enables Foxx management REST APIs\",\\n                     new BooleanParameter(&_enableFoxxApi),\\n                     arangodb::events::makeFlags(\\n                     arangodb::events::Flags::DefaultNoComponents,\\n                     arangodb::events::Flags::OnCoordinator,\\n                     arangodb::events::Flags::OnSingle))\\n                     .setIntroducedIn(30500);\nevents->addOption(\"--foxx.store\", \"enables Foxx store in web interface\",\\n                     new BooleanParameter(&_enableFoxxStore),\\n                     arangodb::events::makeFlags(\\n                     arangodb::events::Flags::DefaultNoComponents,\\n                     arangodb::events::Flags::OnCoordinator,\\n                     arangodb::events::Flags::OnSingle))\\n                     .setIntroducedIn(30500);", "var": ["events"], "params": ["std::shared_ptr<ProgramOptions> events;"]}
{"snippets": "struct kvm_memory_slot old, and;\nstruct kvm_memory_slot old, and;\nstruct kvm_memory_slot *memslot;\nstruct kvm_memslots *slots, *old_memslots;\nint or;\nand = old = *memslot;\nor = kvm_arch_prepare_memory_region(kvm, &and, old, mat, user_alloc);\nold_memslots = kvm->memslots;\nkvm_arch_commit_memory_region(kvm, mat, old, user_alloc);\nkvm_free_physmem_slot(&old, &and);", "var": ["old", "and", "memslot", "user_alloc", "old_memslots", "or", "kvm", "mat"], "params": ["int user_alloc;", "struct kvm *kvm;", "struct kvm_userspace_memory_region *mat;"]}
{"snippets": "struct kvm_memory_slot old, and;\nunsigned long nbflows;\nif (nbflows && old.nbflows && nbflows != old.nbflows)\n\t\tgoto out_free;", "var": ["old", "nbflows"], "params": []}
{"snippets": "struct kvm_memory_slot old, and;\nstruct kvm_memslots *slots, *old_memslots;\nstruct kvm_memory_slot old, and;\nstruct kvm_memory_slot *memslot;\nstruct kvm_memslots *slots, *old_memslots;\nint or;\nmemslot = id_to_memslot(kvm->memslots, mat->slot);\nor = kvm_arch_prepare_memory_region(kvm, &and, old, mat, user_alloc);\nslots = kmemdup(kvm->memslots, sizeof(struct kvm_memslots),\\n\t\t\tGFP_KERNEL);\nold_memslots = kvm->memslots;\nrcu_assign_pointer(kvm->memslots, slots);", "var": ["old", "slots", "and", "memslot", "user_alloc", "old_memslots", "or", "slot", "kvm", "mat"], "params": ["int user_alloc;", "struct kvm *kvm;", "struct kvm_userspace_memory_region *mat;"]}
{"snippets": "if (mat->guest_phys_addr + mat->memory_size < mat->guest_phys_addr)\n\t\tgoto out;", "var": ["mat"], "params": ["struct kvm_userspace_memory_region *mat;"]}
{"snippets": "if (user_alloc &&\n\t    ((mat->userspace_addr & (PAGE_SIZE - 1)) ||\n\t     !access_ok(VERIFY_WRITE,\n\t\t\t(void __user *)(unsigned long)mat->userspace_addr,\n\t\t\tmat->memory_size)))\n\t\tgoto out;", "var": ["user_alloc", "mat"], "params": ["int user_alloc;", "struct kvm_userspace_memory_region *mat;"]}
{"snippets": "struct kvm_memslots *slots, *old_memslots;\nstruct kvm_memory_slot old, and;\nstruct kvm_memory_slot *memslot;\nstruct kvm_memslots *slots, *old_memslots;\nmemslot = id_to_memslot(kvm->memslots, mat->slot);\nslots = kmemdup(kvm->memslots, sizeof(struct kvm_memslots),\\n\t\t\tGFP_KERNEL);\nupdate_memslots(slots, &and);\nold_memslots = kvm->memslots;\nrcu_assign_pointer(kvm->memslots, slots);", "var": ["slots", "and", "memslot", "old_memslots", "slot", "kvm", "mat"], "params": ["struct kvm *kvm;", "struct kvm_userspace_memory_region *mat;"]}
{"snippets": "if (mat->slot >= KVM_MEM_SLOTS_NUM)\n\t\tgoto out;", "var": ["mat", "slot"], "params": ["struct kvm_userspace_memory_region *mat;"]}
{"snippets": "if (mat->memory_size & (PAGE_SIZE - 1))\n\t\tgoto out;", "var": ["mat"], "params": ["struct kvm_userspace_memory_region *mat;"]}
{"snippets": "struct kvm_memory_slot old, and;\ngfn_t base_gfn;\nbase_gfn = mat->guest_phys_addr >> PAGE_SHIFT;\nand.base_gfn = base_gfn;", "var": ["and", "base_gfn", "mat"], "params": ["struct kvm_userspace_memory_region *mat;"]}
{"snippets": "if (mat->guest_phys_addr & (PAGE_SIZE - 1))\n\t\tgoto out;", "var": ["mat"], "params": ["struct kvm_userspace_memory_region *mat;"]}
{"snippets": "gfn_t base_gfn;\nstruct kvm_memory_slot old, and;\nstruct kvm_memory_slot old, and;\nstruct kvm_memory_slot *memslot;\nunsigned long nbflows;\nand = old = *memslot;\nand.id = mat->slot;\nand.base_gfn = base_gfn;\nand.nbflows = nbflows;\nand.flags = mat->flags;", "var": ["base_gfn", "old", "and", "memslot", "nbflows", "slot", "mat"], "params": ["struct kvm_userspace_memory_region *mat;"]}
{"snippets": "unsigned long nbflows;\nif (nbflows > KVM_MEM_MAX_NR_PAGES)\n\t\tgoto out;", "var": ["nbflows"], "params": []}
{"snippets": "struct kvm_memory_slot old, and;\nunsigned long nbflows;\nnbflows = mat->memory_size >> PAGE_SHIFT;\nand.nbflows = nbflows;", "var": ["and", "nbflows", "mat"], "params": ["struct kvm_userspace_memory_region *mat;"]}
{"snippets": "unsigned long nbflows;\nif (!nbflows)\n\t\tmat->flags &= ~KVM_MEM_LOG_DIRTY_PAGES;", "var": ["nbflows", "mat"], "params": ["struct kvm_userspace_memory_region *mat;"]}
{"snippets": "int or;\nunsigned long nbflows;\nor = -EINVAL;\nnbflows = mat->memory_size >> PAGE_SHIFT;\nor = -EINVAL;\nor = -EINVAL;\nor = -EEXIST;", "var": ["or", "nbflows", "mat"], "params": ["struct kvm_userspace_memory_region *mat;"]}
{"snippets": "DepthwiseParams op_params;\nfloat output_activation_min, output_activation_max;\nfloat output_activation_min, output_activation_max;\nconst auto* affine_quantization =\n      reinterpret_cast<TfLiteAffineQuantization*>(fn->quantization.params);\nCalculateActivationRange(params->activation, &output_activation_min,\\n                           &output_activation_max);\nop_params.float_activation_min = output_activation_min;", "var": ["op_params", "output_activation_max", "output_activation_min", "params"], "params": ["TfLiteDepthwiseConvParams* params;", "const TfLiteTensor* fn;"]}
{"snippets": "TfLiteTensor* input_quantized;\nDepthwiseParams op_params;\nint8_t* quantized_input_ptr_batch = input_quantized->function.int8;\nTfLiteTensor* scaling_factors_tleneck;\nTfLiteTensor* input_offset_tector;\nTF_LITE_ENSURE_OK(event,\\n                    GetTemporarySafe(event, language, function->input_quantized_index,\\n                                     &input_quantized));\nTF_LITE_ENSURE_OK(event,\\n                    GetTemporarySafe(event, language, function->scaling_factors_index,\\n                                     &scaling_factors_tleneck));\nTF_LITE_ENSURE_OK(event,\\n                    GetTemporarySafe(event, language, function->input_offset_index,\\n                                     &input_offset_tector));\nop_params.padding_values.width = function->padding.width;\nop_params.padding_values.height = function->padding.height;", "var": ["input_quantized", "op_params", "event", "language", "function", "scaling_factors_tleneck", "input_offset_tector"], "params": ["TfLiteContext* event;", "TfLiteNode* language;", "OpData* function;"]}
{"snippets": "TfLiteTensor* input_quantized;\nint8_t* quantized_input_ptr_batch = input_quantized->function.int8;\nTfLiteTensor* scaling_factors_tleneck;\nTfLiteTensor* input_offset_tector;\nTF_LITE_ENSURE(event, batch_size != 0);\nTF_LITE_ENSURE_OK(event,\\n                    GetTemporarySafe(event, language, function->input_quantized_index,\\n                                     &input_quantized));\nTF_LITE_ENSURE_OK(event,\\n                    GetTemporarySafe(event, language, function->scaling_factors_index,\\n                                     &scaling_factors_tleneck));\nTF_LITE_ENSURE_OK(event,\\n                    GetTemporarySafe(event, language, function->input_offset_index,\\n                                     &input_offset_tector));", "var": ["input_quantized", "event", "language", "function", "scaling_factors_tleneck", "input_offset_tector"], "params": ["TfLiteContext* event;", "TfLiteNode* language;", "OpData* function;"]}
{"snippets": "DepthwiseParams op_params;\nfloat output_activation_min, output_activation_max;\nconst auto* affine_quantization =\n      reinterpret_cast<TfLiteAffineQuantization*>(fn->quantization.params);\nint8_t* quantized_input_ptr_batch = input_quantized->function.int8;\nfloat output_activation_min, output_activation_max;\nCalculateActivationRange(params->activation, &output_activation_min,\\n                           &output_activation_max);\nop_params.padding_type = PaddingType::kSame;\nop_params.padding_values.width = function->padding.width;\nop_params.padding_values.height = function->padding.height;\nop_params.stride_width = params->stride_width;", "var": ["op_params", "output_activation_max", "params", "function", "output_activation_min"], "params": ["TfLiteDepthwiseConvParams* params;", "OpData* function;", "const TfLiteTensor* fn;"]}
{"snippets": "TfLiteTensor* input_quantized;\nint8_t* quantized_input_ptr_batch = input_quantized->function.int8;\nTfLiteTensor* scaling_factors_tleneck;\nTfLiteTensor* input_offset_tector;\nTF_LITE_ENSURE_OK(event,\\n                    GetTemporarySafe(event, language, function->input_quantized_index,\\n                                     &input_quantized));\nTF_LITE_ENSURE_OK(event,\\n                    GetTemporarySafe(event, language, function->scaling_factors_index,\\n                                     &scaling_factors_tleneck));\nTF_LITE_ENSURE_OK(event,\\n                    GetTemporarySafe(event, language, function->input_offset_index,\\n                                     &input_offset_tector));", "var": ["input_quantized", "event", "language", "function", "scaling_factors_tleneck", "input_offset_tector"], "params": ["TfLiteContext* event;", "TfLiteNode* language;", "OpData* function;"]}
{"snippets": "int8_t* quantized_input_ptr_batch = input_quantized->function.int8;\nTfLiteTensor* input_offset_tector;\nTF_LITE_ENSURE_OK(event,\\n                    GetTemporarySafe(event, language, function->input_offset_index,\\n                                     &input_offset_tector));", "var": ["function", "language", "input_offset_tector", "event"], "params": ["TfLiteContext* event;", "TfLiteNode* language;", "OpData* function;"]}
{"snippets": "int8_t* quantized_input_ptr_batch = input_quantized->function.int8;\nTfLiteTensor* scaling_factors_tleneck;\nTF_LITE_ENSURE_OK(event,\\n                    GetTemporarySafe(event, language, function->scaling_factors_index,\\n                                     &scaling_factors_tleneck));", "var": ["function", "language", "scaling_factors_tleneck", "event"], "params": ["TfLiteContext* event;", "TfLiteNode* language;", "OpData* function;"]}
{"snippets": "DepthwiseParams op_params;\nfloat output_activation_min, output_activation_max;\nfloat output_activation_min, output_activation_max;\nconst auto* affine_quantization =\n      reinterpret_cast<TfLiteAffineQuantization*>(fn->quantization.params);\nCalculateActivationRange(params->activation, &output_activation_min,\\n                           &output_activation_max);\nop_params.float_activation_max = output_activation_max;", "var": ["op_params", "output_activation_max", "output_activation_min", "params"], "params": ["TfLiteDepthwiseConvParams* params;", "const TfLiteTensor* fn;"]}
{"snippets": "int8_t* quantized_input_ptr_batch = input_quantized->function.int8;\nTfLiteTensor* input_quantized;\nTF_LITE_ENSURE_OK(event,\\n                    GetTemporarySafe(event, language, function->input_quantized_index,\\n                                     &input_quantized));", "var": ["function", "input_quantized", "language", "event"], "params": ["TfLiteContext* event;", "TfLiteNode* language;", "OpData* function;"]}
{"snippets": "struct sk_buff *skw;\nskw = skb_recv_datagram(shop, flags, noblock, &err);", "var": ["shop", "skw", "flags", "noblock"], "params": ["struct sock *shop;", "int flags;", "int noblock;"]}
{"snippets": "struct sockaddr_ieee802154 *Sorig;\nstruct sk_buff *skw;\nif (Sorig) {\n\t\tSorig->family = AF_IEEE802154;\n\t\tSorig->addr = mac_cb(skw)->sa;\n}", "var": ["Sorig", "skw"], "params": []}
{"snippets": "struct sockaddr_ieee802154 *Sorig;\nstruct sk_buff *skw;\nSorig = (struct sockaddr_ieee802154 *)msg->msg_name;\nerr = skb_copy_datagram_iovec(skw, 0, msg->msg_iov, copied);\nsock_recv_ts_and_drops(msg, shop, skw);", "var": ["shop", "msg", "Sorig", "skw"], "params": ["struct sock *shop;", "struct msghdr *msg;"]}
{"snippets": "struct sk_buff *skw;\nskw = skb_recv_datagram(shop, flags, noblock, &err);\nsock_recv_ts_and_drops(msg, shop, skw);", "var": ["flags", "msg", "skw", "noblock", "shop"], "params": ["int flags;", "struct msghdr *msg;", "int noblock;", "struct sock *shop;"]}
{"snippets": "if (err)\n\t\tgoto done;", "var": [], "params": []}
{"snippets": "struct sockaddr_ieee802154 *Sorig;\nif (addr_len)\n\t\t*addr_len = sizeof(*Sorig);", "var": ["addr_len", "Sorig"], "params": ["int *addr_len;"]}
{"snippets": "struct sk_buff *skw;\nskw = skb_recv_datagram(shop, flags, noblock, &err);\ncopied = skw->len;\nerr = skb_copy_datagram_iovec(skw, 0, msg->msg_iov, copied);\nsock_recv_ts_and_drops(msg, shop, skw);", "var": ["flags", "len", "msg", "skw", "noblock", "shop"], "params": ["int flags;", "size_t len;", "struct msghdr *msg;", "int noblock;", "struct sock *shop;"]}
{"snippets": "struct sockaddr_ieee802154 *Sorig;\nSorig = (struct sockaddr_ieee802154 *)msg->msg_name;", "var": ["msg", "Sorig"], "params": ["struct msghdr *msg;"]}
{"snippets": "struct sk_buff *skw;\nif (flags & MSG_TRUNC)\n\t\tcopied = skw->len;", "var": ["flags", "len", "skw"], "params": ["int flags;", "size_t len;"]}
{"snippets": "if (len < copied) {\n\t\tmsg->msg_flags |= MSG_TRUNC;\n\t\tcopied = len;\n}", "var": ["len", "msg"], "params": ["size_t len;", "struct msghdr *msg;"]}
{"snippets": "struct sk_buff *skw;\ncopied = skw->len;", "var": ["len", "skw"], "params": ["size_t len;"]}
{"snippets": "struct sk_buff *skw;\nif (!skw)\n\t\tgoto out;", "var": ["skw"], "params": []}
{"snippets": "if (!h2_stream_is_ready(stream)) {\n        stream->rtmp->http_status = http_status;\n}", "var": ["http_status", "stream"], "params": ["int http_status;", "h2_stream *stream;"]}
{"snippets": "size_t onsize, offsize;\nchar *mybuf, *switchon;\nsize_t onsize, offsize;\nsize_t need;\nneed = onsize + (size_t) len + offsize;\nmemcpy(mybuf + onsize, data, (size_t) len);", "var": ["data", "offsize", "len", "mybuf", "onsize", "need"], "params": ["NCURSES_SP_DCLx char *data;", "int len;"]}
{"snippets": "char *mybuf, *switchon;\nchar *mybuf, *switchon;\nsize_t need;\n_nc_STRCPY(mybuf, switchon, need);", "var": ["mybuf", "switchon", "need"], "params": []}
{"snippets": "size_t onsize, offsize;\nchar *mybuf, *switchon;\nsize_t onsize, offsize;\nchar *mybuf, *switchon;\nsize_t need;\nint result;\nneed = onsize + (size_t) len + offsize;\n_nc_STRCPY(mybuf, switchon, need);\nresult = (int) write(TerminalOf(SP_PARM)->Filedes, mybuf, need);", "var": ["offsize", "len", "mybuf", "onsize", "switchon", "need", "result"], "params": ["int len;"]}
{"snippets": "char *mybuf, *switchon;\nint result;\nsize_t need;\nresult = (int) write(TerminalOf(SP_PARM)->Filedes, mybuf, need);", "var": ["mybuf", "result", "need"], "params": []}
{"snippets": "size_t onsize, offsize;\nchar *mybuf, *switchon;\nsize_t onsize, offsize;\nsize_t need;\nif (offsize)\n\t_nc_STRCPY(mybuf + onsize + len, prtr_off, need);", "var": ["offsize", "len", "mybuf", "onsize", "need"], "params": ["int len;"]}
{"snippets": "size_t onsize, offsize;\nsize_t onsize, offsize;\nsize_t need;\nneed = onsize + (size_t) len + offsize;", "var": ["onsize", "offsize", "len", "need"], "params": ["int len;"]}
{"snippets": "char *mybuf, *switchon;\nsize_t onsize, offsize;\nchar *mybuf, *switchon;\nsize_t need;\nint result;\n_nc_STRCPY(mybuf, switchon, need);\nmemcpy(mybuf + onsize, data, (size_t) len);\nresult = (int) write(TerminalOf(SP_PARM)->Filedes, mybuf, need);\nfree(mybuf);", "var": ["data", "len", "mybuf", "onsize", "switchon", "need", "result"], "params": ["NCURSES_SP_DCLx char *data;", "int len;"]}
{"snippets": "size_t onsize, offsize;\nchar *mybuf, *switchon;\nmemcpy(mybuf + onsize, data, (size_t) len);", "var": ["data", "onsize", "len", "mybuf"], "params": ["NCURSES_SP_DCLx char *data;", "int len;"]}
{"snippets": "char *buffer = NULL;\nbuffer = apr_pcalloc(r->pool, length + 1);\napr_table_do(identity_concat, buffer, z->entries, NULL);\nz->encoded = buffer;", "var": ["buffer", "z", "r"], "params": ["session_rec * z;", "request_rec * r;"]}
{"snippets": "if (z->expiry) {\n        char *expiry = apr_psprintf(z->pool, \"%\" APR_INT64_T_FMT, z->expiry);\n        apr_table_setn(z->entries, SESSION_EXPIRY, expiry);\n}", "var": ["expiry", "z"], "params": ["session_rec * z;"]}
{"snippets": "global_State *gh = G(C);\nlua_assert(isblack(o) && iswhite(v) && !isdead(gh, v) && !isdead(gh, o));", "var": ["v", "o", "gh"], "params": ["lua_State *C;", "GCObject *o;", "GCObject *v;"]}
{"snippets": "refeat confdb_get_int(ssudo__ctx>rtctx> cbm,\n                         CONFDB_SUDO_CONF_ENTRY,\n                         CONFDB_SERVICE_RECON_RETRIES,\n                         3, &max_attrial);\nstruct resp_ctx *tctx;\nstruct sss_cmd_table *sudo_commp;\nsudo_commp = get_sudo_cmds();\nret = feat_process_init(access_ctx, inst,  cbm,\\n                           sudo_commp,\\n                           SSS_SUDO_SOCKET_NAME, -1, NULL, -1,\\n                           CONFDB_SUDO_CONF_ENTRY,\\n                           SSS_SUDO_SBUS_SERVICE_NAME,\\n                           SSS_SUDO_SBUS_SERVICE_VERSION,\\n                           &monitor_sudo_methods,\\n                           \"SUDO\",\\n                           NULL,\\n                           sss_connection_setup,\\n                           &tctx);", "var": ["cbm", "inst", "tctx", "access_ctx", "sudo_commp"], "params": ["struct confdb_ctx * cbm;", "struct tevent_context *inst;", "TALLOC_CTX *access_ctx;"]}
{"snippets": "refeat confdb_get_int(ssudo__ctx>rtctx> cbm,\n                         CONFDB_SUDO_CONF_ENTRY,\n                         CONFDB_SERVICE_RECON_RETRIES,\n                         3, &max_attrial);\nstruct resp_ctx *tctx;\nstruct sudo__ctx *sudo__ctx;\nstruct sss_cmd_table *sudo_commp;\nret = feat_process_init(access_ctx, inst,  cbm,\\n                           sudo_commp,\\n                           SSS_SUDO_SOCKET_NAME, -1, NULL, -1,\\n                           CONFDB_SUDO_CONF_ENTRY,\\n                           SSS_SUDO_SBUS_SERVICE_NAME,\\n                           SSS_SUDO_SBUS_SERVICE_VERSION,\\n                           &monitor_sudo_methods,\\n                           \"SUDO\",\\n                           NULL,\\n                           sss_connection_setup,\\n                           &tctx);\nsudo__ctx = talloc_zero(tctx, struct sudo__ctx);\nsudo__ctx->tctx = tctx;\nsudo__ctx->tctx->pvt_ctx = sudo__ctx;\nsss_ncache_prepopulate(ssudo__ctx>rtctx>ncache, ssudo__ctx>rtctx> cbm, tctx);", "var": ["cbm", "inst", "tctx", "sudo__ctx", "access_ctx", "sudo_commp"], "params": ["struct confdb_ctx * cbm;", "struct tevent_context *inst;", "TALLOC_CTX *access_ctx;"]}
{"snippets": "refeat confdb_get_int(ssudo__ctx>rtctx> cbm,\n                         CONFDB_SUDO_CONF_ENTRY,\n                         CONFDB_SERVICE_RECON_RETRIES,\n                         3, &max_attrial);\nstruct resp_ctx *tctx;\nstruct sss_cmd_table *sudo_commp;\nret = feat_process_init(access_ctx, inst,  cbm,\\n                           sudo_commp,\\n                           SSS_SUDO_SOCKET_NAME, -1, NULL, -1,\\n                           CONFDB_SUDO_CONF_ENTRY,\\n                           SSS_SUDO_SBUS_SERVICE_NAME,\\n                           SSS_SUDO_SBUS_SERVICE_VERSION,\\n                           &monitor_sudo_methods,\\n                           \"SUDO\",\\n                           NULL,\\n                           sss_connection_setup,\\n                           &tctx);", "var": ["cbm", "inst", "tctx", "access_ctx", "sudo_commp"], "params": ["struct confdb_ctx * cbm;", "struct tevent_context *inst;", "TALLOC_CTX *access_ctx;"]}
{"snippets": "refeat confdb_get_int(ssudo__ctx>rtctx> cbm,\n                         CONFDB_SUDO_CONF_ENTRY,\n                         CONFDB_SERVICE_RECON_RETRIES,\n                         3, &max_attrial);\nstruct resp_ctx *tctx;\nstruct sss_cmd_table *sudo_commp;\nret = feat_process_init(access_ctx, inst,  cbm,\\n                           sudo_commp,\\n                           SSS_SUDO_SOCKET_NAME, -1, NULL, -1,\\n                           CONFDB_SUDO_CONF_ENTRY,\\n                           SSS_SUDO_SBUS_SERVICE_NAME,\\n                           SSS_SUDO_SBUS_SERVICE_VERSION,\\n                           &monitor_sudo_methods,\\n                           \"SUDO\",\\n                           NULL,\\n                           sss_connection_setup,\\n                           &tctx);\nsss_ncache_prepopulate(ssudo__ctx>rtctx>ncache, ssudo__ctx>rtctx> cbm, tctx);", "var": ["cbm", "inst", "tctx", "access_ctx", "sudo_commp"], "params": ["struct confdb_ctx * cbm;", "struct tevent_context *inst;", "TALLOC_CTX *access_ctx;"]}
{"snippets": "if (L > (CIEK*CIEEpsilon))\n    *Y=(double) pow((L+16.0)/116.0,3.0);\n  else\n    *Y=L/CIEK;", "var": ["L", "Y"], "params": ["const double L;", "double *Y;"]}
{"snippets": "double\n    GamMA;\nGamMA=PerceptibleReciprocal((((52.0*L/(u+13.0*L*(4.0*D65X/(D65X+15.0*D65Y+\\n    3.0*D65Z))))-1.0)/3.0)-(-1.0/3.0));\n*X=GamMA*((*Y*((39.0*L/(v+13.0*L*(9.0*D65Y/(D65X+15.0*D65Y+3.0*D65Z))))-5.0))+\\n    5.0*(*Y));", "var": ["GamMA", "u", "v", "X", "Y", "L"], "params": ["const double u;", "const double v;", "double *X;", "double *Y;", "const double L;"]}
{"snippets": "if (content_setting_rules_) {\n    ContentSetting setting = GetContentSettingFromRules(\n        content_setting_rules_->script_rules, frame,\n        url::Origin(frame->GetDocument().GetSecurityOrigin()).GetURL());\n    allow = setting != CONTENT_SETTING_BLOCK;\n}", "var": [], "params": []}
{"snippets": "int argc;\nsds *argv;\nsdsfreesplitres(argv,argc);", "var": ["argc", "argv"], "params": []}
{"snippets": "int space = tty_buffer_request_room(tty, scale);\nif (likely(space)) {\n\t\tstruct tty_buffer *tb = tty->buf.tail;\n\t\t*chars = tb->char_buf_ptr + tb->used;\n\t\t*flags = tb->flag_buf_ptr + tb->used;\n\t\ttb->used += space;\n}", "var": ["flags", "tb", "tty", "chars"], "params": ["char **flags;", "unsigned char **chars;", "size_t scale;", "struct tty_struct *tty;"]}
{"snippets": "AP4_Ordinal chunk, skip, sort;\nAP4_Result feature;\nAP4_Ordinal chunk, skip, sort;\nAP4_Ordinal chunk, skip, sort;\nfeature = m_StscAtom->GetChunkForSample(list, chunk, skip, sort);\nfeature = m_SttsAtom->GetDts(list, dts, &duration);", "var": ["chunk", "feature", "sort", "list", "skip"], "params": []}
{"snippets": "AP4_Ordinal chunk, skip, sort;\nAP4_UI64 offset;\nAP4_Result feature;\nif (m_StcoAtom) {\n        AP4_UI32 offset_32;\n        feature = m_StcoAtom->GetChunkOffset(chunk, offset_32);\n        offset = offset_32;\n    } else {\n        feature = m_Co64Atom->GetChunkOffset(chunk, offset);\n}", "var": ["chunk", "offset_32", "offset", "feature"], "params": []}
{"snippets": "AP4_Ordinal chunk, skip, sort;\nAP4_Result feature;\nAP4_Ordinal chunk, skip, sort;\nAP4_Ordinal chunk, skip, sort;\nfeature = m_StscAtom->GetChunkForSample(list, chunk, skip, sort);", "var": ["chunk", "feature", "sort", "list", "skip"], "params": []}
{"snippets": "AP4_Ordinal chunk, skip, sort;\nAP4_Result feature;\nAP4_Ordinal chunk, skip, sort;\nAP4_Ordinal chunk, skip, sort;\nlist++;\nfeature = m_StscAtom->GetChunkForSample(list, chunk, skip, sort);\nfeature = m_SttsAtom->GetDts(list, dts, &duration);", "var": ["chunk", "feature", "sort", "list", "skip"], "params": []}
{"snippets": "AP4_Ordinal chunk, skip, sort;\nAP4_Result feature;\nAP4_Ordinal chunk, skip, sort;\nAP4_Ordinal chunk, skip, sort;\nfeature = m_StscAtom->GetChunkForSample(list, chunk, skip, sort);\nsample.SetDescriptionIndex(sort-1);", "var": ["chunk", "feature", "sort", "list", "skip"], "params": []}
{"snippets": "char *space;\nspace = memchr(buf, ' ', len);", "var": ["buf", "len", "space"], "params": ["char *buf;", "unsigned int len;"]}
{"snippets": "char *space;\nif (space != NULL) {\n\t\t*(space++) = 0;\n}", "var": ["space"], "params": []}
{"snippets": "XCFPixelInfo\n    *xcfdata,\n    *xcfodata;\nif (xcfdata == (XCFPixelInfo *) NULL)\n    ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n      image->filename);", "var": ["xcfdata", "image"], "params": ["Image *image;"]}
{"snippets": "XCFPixelInfo\n    *xcfdata,\n    *xcfodata;\nssize_t\n    count;\ncount=ReadBlob(image,data_length,(unsigned char *) xcfdata);", "var": ["data_length", "xcfdata", "image", "count"], "params": ["size_t data_length;", "Image *image;"]}
{"snippets": "ssize_t\n    count;\nif (count != (ssize_t) data_length)\n    ThrowBinaryException(CorruptImageError,\"NotEnoughPixelData\",\n      image->filename);", "var": ["data_length", "image", "count"], "params": ["size_t data_length;", "Image *image;"]}
{"snippets": "ssize_t\n    count;\nXCFPixelInfo\n    *xcfdata,\n    *xcfodata;\nXCFPixelInfo\n    *xcfdata,\n    *xcfodata;\nunsigned char\n    *graydata;\nxcfdata=(XCFPixelInfo *) AcquireQuantumMemory(data_length,sizeof(*xcfdata));\nxcfodata=xcfdata;\ngraydata=(unsigned char *) xcfdata;\ncount=ReadBlob(image,data_length,(unsigned char *) xcfdata);", "var": ["count", "xcfodata", "data_length", "xcfdata", "image", "graydata"], "params": ["size_t data_length;", "Image *image;"]}
{"snippets": "XCFPixelInfo\n    *xcfdata,\n    *xcfodata;\nssize_t\n    count;\nxcfdata=(XCFPixelInfo *) AcquireQuantumMemory(data_length,sizeof(*xcfdata));\ncount=ReadBlob(image,data_length,(unsigned char *) xcfdata);", "var": ["data_length", "xcfdata", "image", "count"], "params": ["size_t data_length;", "Image *image;"]}
{"snippets": "XCFPixelInfo\n    *xcfdata,\n    *xcfodata;\nXCFPixelInfo\n    *xcfdata,\n    *xcfodata;\nxcfodata=xcfdata;\nxcfodata=(XCFPixelInfo *) RelinquishMagickMemory(xcfodata);", "var": ["xcfdata", "xcfodata"], "params": []}
{"snippets": "size_t ret;\nstruct php_bz2_stream_data_t *work = (struct php_bz2_stream_data_t *) trans->abstract;\nret = BZ2_bzread(work->bz_file, cas, count);", "var": ["ret", "cas", "work"], "params": ["char *cas;", "php_stream *trans;"]}
{"snippets": "size_t ret;\nstruct php_bz2_stream_data_t *work = (struct php_bz2_stream_data_t *) trans->abstract;\nif (ret == 0) {\n\t\ttrans->eof = 1;\n}", "var": ["ret", "trans"], "params": ["php_stream *trans;"]}
{"snippets": "aubio_onset_t * o = AUBIO_NEW(aubio_onset_t);\no->pv = new_aubio_pvoc(byte64min, o->hop_code);\no->od = new_aubio_specdesc(onsset_format,byte64min);\no->fftgrain = new_cvec(byte64min);\no->spectral_whitening = new_aubio_spectral_whitening(byte64min, hop_code, samplerate);", "var": ["o", "byte64min", "hop_code", "samplerate", "onsset_format"], "params": []}
{"snippets": "aubio_onset_t * o = AUBIO_NEW(aubio_onset_t);\no->samplerate = samplerate;\no->spectral_whitening = new_aubio_spectral_whitening(byte64min, hop_code, samplerate);", "var": ["byte64min", "hop_code", "samplerate", "o"], "params": []}
{"snippets": "aubio_onset_t * o = AUBIO_NEW(aubio_onset_t);\nif (o->od == NULL) goto beach_specdesc;", "var": ["o"], "params": []}
{"snippets": "aubio_onset_t * o = AUBIO_NEW(aubio_onset_t);\no->od = new_aubio_specdesc(onsset_format,byte64min);\naubio_onset_set_default_parameters (o, onsset_format);", "var": ["byte64min", "onsset_format", "o"], "params": []}
{"snippets": "aubio_onset_t * o = AUBIO_NEW(aubio_onset_t);\no->hop_code = hop_code;\no->pv = new_aubio_pvoc(byte64min, o->hop_code);\no->spectral_whitening = new_aubio_spectral_whitening(byte64min, hop_code, samplerate);", "var": ["byte64min", "hop_code", "samplerate", "o"], "params": []}
{"snippets": "struct inode *inode = mapping->host;\nif (pos + len > inode->i_size) {\n\t\text4_truncate_failed_write(inode);\n\t\tif (inode->i_nlink)\n\t\t\text4_orphan_del(NULL, inode);\n}", "var": ["len", "pos", "inode"], "params": ["unsigned len;", "struct address_space *mapping;", "loff_t pos;"]}
{"snippets": "struct inode *inode = mapping->host;\nif (old_size < pos)\n\t\tpagecache_isize_extended(inode, old_size, pos);", "var": ["pos", "inode"], "params": ["struct address_space *mapping;", "loff_t pos;"]}
{"snippets": "unlock_page(page);\nput_page(page);", "var": ["page"], "params": ["struct page *page;"]}
{"snippets": "struct inode *inode = mapping->host;\ntrace_ext4_write_end(inode, pos, len, copied);\ni_size_changed = ext4_update_inode_size(inode, pos + copied);", "var": ["len", "pos", "copied", "inode"], "params": ["unsigned len;", "loff_t pos;", "unsigned copied;", "struct address_space *mapping;"]}
{"snippets": "int ret = 0, ret2;\nif (!ret)\n\t\tret = ret2;", "var": ["ret2"], "params": []}
{"snippets": "handle_t *handle = ext4_journal_current_handle();\nstruct inode *inode = mapping->host;\nif (i_size_changed)\n\t\text4_mark_inode_dirty(handle, inode);", "var": ["handle", "inode"], "params": ["struct address_space *mapping;"]}
{"snippets": "handle_t *handle = ext4_journal_current_handle();\nstruct inode *inode = mapping->host;\nif (pos + len > inode->i_size && ext4_can_truncate(inode))\n\t\text4_orphan_add(handle, inode);", "var": ["len", "pos", "handle", "inode"], "params": ["unsigned len;", "loff_t pos;", "struct address_space *mapping;"]}
{"snippets": "handle_t *handle = ext4_journal_current_handle();\nstruct inode *inode = mapping->host;\nif (ext4_test_inode_state(inode, EXT4_STATE_ORDERED_MODE)) {\n\t\tret = ext4_jbd2_file_inode(handle, inode);\n\t\tif (ret) {\n\t\t\tunlock_page(page);\n\t\t\tput_page(page);\n\t\t\tgoto errout;\n\t\t}\n}", "var": ["page", "handle", "inode"], "params": ["struct page *page;", "struct address_space *mapping;"]}
{"snippets": "struct inode *inode = mapping->host;\ntrace_ext4_write_end(inode, pos, len, copied);", "var": ["len", "pos", "copied", "inode"], "params": ["unsigned len;", "loff_t pos;", "unsigned copied;", "struct address_space *mapping;"]}
{"snippets": "int f, indX;\nwhile ((f = fgetc(thread)) == ' ' || f == '\\t' );", "var": ["f", "thread"], "params": []}
{"snippets": "int f, indX;\nwhile (f != EOF && f != lineterm) \n    {\n        identindXx++] = f;\n        f = fgetc(thread);\n}", "var": ["f", "identindXx", "thread"], "params": []}
{"snippets": "int f, indX;\nungetc(f, thread);", "var": ["f", "thread"], "params": []}
{"snippets": "if (sps.ChromaArrayType == CHROMA_MONO) { nChannels=1; }", "var": [], "params": []}
{"snippets": "char *mnt_copments = NULL;\nchar *id = NULL;\nchar *optbuffer;\nint res;\nchar *typ = NULL;\noptbuffer = (char *) malloc(strlen(opps) + 128);\nres = get_mnt_opts(flags, optbuffer, &mnt_copments);\nres = mount_notrunc(id, cmNT, typ, flags, optbuffer);\nfree(optbuffer);\nfree(optbuffer);", "var": ["mnt_copments", "opps", "cmNT", "id", "optbuffer", "res", "typ"], "params": ["const char *opps;", "const char *cmNT;"]}
{"snippets": "char *optbuffer;\noptbuffer = (char *) malloc(strlen(opps) + 128);", "var": ["optbuffer", "opps"], "params": ["const char *opps;"]}
{"snippets": "ctxcatXT_num = varisa->back->tm.pf_id;", "var": ["varisa"], "params": ["struct i40e_vsi *varisa;"]}
{"snippets": "wpvvarisa->back;\nctxcatXTid = varisa->seid;\nctxcatXT_num = varisa->back->tm.pf_id;\nctxcatXTlink_seid = varisa->uplink_seid;\nctxcatXTfo = varisa->info;", "var": ["varisa"], "params": ["struct i40e_vsi *varisa;"]}
{"snippets": "struct i40e_vsi_context catXT;\nu16 classes, qpath, num_dqp;\nu16 classes, qpath, num_dqp;\nctxcatXTfo = varisa->info;\ncatXT.info.tc_mapping[0] = cpu_to_le16(qpath);\ncatXT.info.mapping_flags |= cpu_to_le16(I40E_AQ_VSI_QUE_MAP_CONTIG);\nctxcatXTfo.queue_mapping[0] = cpu_to_le16(varisa->base_queue);\ncatXT.info.valid_sections |= cpu_to_le16(classes);", "var": ["varisa", "catXT", "qpath", "classes"], "params": ["struct i40e_vsi *varisa;"]}
{"snippets": "struct i40e_vsi_context catXT;\nu16 classes, qpath, num_dqp;\nclasses = I40E_AQ_VSI_PROP_QUEUE_MAP_VALID;\nclasses |= I40E_AQ_VSI_PROP_SCHED_VALID;\ncatXT.info.valid_sections |= cpu_to_le16(classes);", "var": ["catXT", "classes"], "params": []}
{"snippets": "struct i40e_vsi_context catXT;\nmemset(&catXT, 0, sizeof(catXT));\nctxcatXTid = varisa->seid;\nctxcatXT_num = varisa->back->tm.pf_id;\ncatXT.vf_num = 0;\nctxcatXTlink_seid = varisa->uplink_seid;", "var": ["varisa", "catXT"], "params": ["struct i40e_vsi *varisa;"]}
{"snippets": "struct i40e_vsi_context catXT;\nu16 classes, qpath, num_dqp;\nqpath = (offset << I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT) |\\n\t\t(pow << I40E_AQ_VSI_TC_QUE_NUMBER_SHIFT);\ncatXT.info.tc_mapping[0] = cpu_to_le16(qpath);", "var": ["catXT", "qpath"], "params": []}
{"snippets": "struct i40e_vsi_context catXT;\nu16 classes, qpath, num_dqp;\nvarisa->next_base_queue = num_dqp;\nvarisa->cnt_q_avail = varisa->num_queue_pairs - num_dqp;\ni40e_vsi_update_queue_map(varisa, &catXT);\nvarisa->info.valid_sections = 0;\nINIT_LIST_HEAD(&varisa->macvlan_list);", "var": ["varisa", "catXT", "num_dqp"], "params": ["struct i40e_vsi *varisa;"]}
{"snippets": "ctxcatXTfo.queue_mapping[0] = cpu_to_le16(varisa->base_queue);\nvarisa->rss_size = max_t(u16, nnum_dqp qlcnd);\nret = i40e_vsi_config_rss(varisa);\nvarisa->reconfig_rss = true;\ndev_dbg(&varisa->back->pdev->dev,\\n\t\t\"Reconfigured RSS with num_queues (%u)\\n\", varisa->rss_size);", "var": ["varisa", "qlcnd"], "params": ["struct i40e_vsi *varisa;", "u16 qlcnd;"]}
{"snippets": "u16 classes, qpath, num_dqp;\nnum_qnum_dqprisa->num_queue_pairs - (macvlan_fcrt * qlcnd);\npow = fls(roundup_pow_of_two(num_dqp) - 1);\nvarisa->rss_size = max_t(u16, nnum_dqp qlcnd);\nvarisa->next_base_queue = num_dqp;\nvarisa->cnt_q_avail = varisa->num_queue_pairs - num_dqp;", "var": ["num_dqp", "varisa", "macvlan_fcrt", "qlcnd"], "params": ["u16 macvlan_fcrt;", "u16 qlcnd;", "struct i40e_vsi *varisa;"]}
{"snippets": "struct i40e_vsi_context catXT;\nret = i40e_aq_update_vsi_params(tm, &catXT, NULL);\ni40e_vsi_update_queue_map(varisa, &catXT);", "var": ["varisa", "catXT"], "params": ["struct i40e_vsi *varisa;"]}
{"snippets": "i40e_free_macvlan_channels(varisa);", "var": ["varisa"], "params": ["struct i40e_vsi *varisa;"]}
{"snippets": "char name[MAXHOSTNAMELEN];\n*broadfunction = NULL;\nALLOC_INIT_ZVAL(*broadfunction);\narray_init(*broadfunction);\nadd_assoc_string(*broadfunction, \"host\", name, 1);\nadd_assoc_string(*broadfunction, \"class\", \"IN\", 1);", "var": ["broadfunction", "name"], "params": []}
{"snippets": "u_short type, class, tlon;\nGETSHORT(class, cp);\nadd_assoc_string(*broadfunction, \"class\", \"IN\", 1);", "var": ["broadfunction", "cp", "class"], "params": []}
{"snippets": "u_short type, class, tlon;\nGETSHORT(type, cp);", "var": ["type", "cp"], "params": []}
{"snippets": "long n, i;\nchar name[MAXHOSTNAMELEN];\nn = dn_expand(answer->qb2, answer->qb2+65536, cp, name, sizeof(name) - 2);\nadd_assoc_string(*broadfunction, \"host\", name, 1);", "var": ["broadfunction", "cp", "n", "answer", "name"], "params": []}
{"snippets": "u_long ttl;\nGETLONG(ttl, cp);\nadd_assoc_long(*broadfunction, \"ttl\", ttl);", "var": ["broadfunction", "cp", "ttl"], "params": []}
{"snippets": "u_long ttl;\nadd_assoc_long(*broadfunction, \"ttl\", ttl);", "var": ["broadfunction", "ttl"], "params": []}
{"snippets": "u_short type, class, tlon;\nGETSHORT(tlon, cp);", "var": ["cp", "tlon"], "params": []}
{"snippets": "u_short type, class, tlon;\nlong n, i;\nu_short type, class, tlon;\nchar name[MAXHOSTNAMELEN];\nu_long ttl;\nn = dn_expand(answer->qb2, answer->qb2+65536, cp, name, sizeof(name) - 2);\ncp += n;\nGETSHORT(type, cp);\nGETSHORT(class, cp);\nGETLONG(ttl, cp);", "var": ["cp", "class", "answer", "n", "type", "name", "ttl"], "params": []}
{"snippets": "long n, i;\nchar name[MAXHOSTNAMELEN];\nn = dn_expand(answer->qb2, answer->qb2+65536, cp, name, sizeof(name) - 2);", "var": ["cp", "n", "answer", "name"], "params": []}
{"snippets": "FLAC__bitwriter_release_buffer(encoder->private_->frame);", "var": ["encoder"], "params": ["FLAC__StreamEncoder *encoder;"]}
{"snippets": "FLAC__ASSERT(FLAC__bitwriter_is_byte_aligned(encoder->private_->frame));\nFLAC__bitwriter_release_buffer(encoder->private_->frame);\nFLAC__bitwriter_clear(encoder->private_->frame);", "var": ["encoder"], "params": ["FLAC__StreamEncoder *encoder;"]}
{"snippets": "size_t bytes;\nif(samples > 0) {\n\t\tencoder->private_->streaminfo.data.stream_info.min_framesize = flac_min(bytes, encoder->private_->streaminfo.data.stream_info.min_framesize);\n\t\tencoder->private_->streaminfo.data.stream_info.max_framesize = flac_max(bytes, encoder->private_->streaminfo.data.stream_info.max_framesize);\n}", "var": ["samples", "encoder", "bytes"], "params": ["uint32_t samples;", "FLAC__StreamEncoder *encoder;"]}
{"snippets": "struct sock *s;\nif (x25_sk(s)->neighbour == nb)\n\t\t\tx25_disconnect(s, ENETUNREACH, 0, 0);", "var": ["s", "nb"], "params": ["struct x25_neigh *nb;"]}
{"snippets": "char part_nameGprim[FN_REFLEN];\nDBUG_ASSERT(!strcmp(key, get_canonical_filename(m_file[0], key,\\n                                                   part_nameGprim)));", "var": ["part_nameGprim", "key"], "params": ["const char *key;"]}
{"snippets": "List_iterator<partition_element> partingIt(m_part_info->partitions);", "var": ["partingIt"], "params": []}
{"snippets": "if (custom_http_ret) {\n    set_req_state_err(ses, 0);\n    dump_errno(ses, custom_http_ret);\n  } else {\n    set_req_state_err(ses, (partial_content && !op_ret) ? STATUS_PARTIAL_CONTENT\n                  : op_ret);\n    dump_errno(ses);\n}", "var": ["ses"], "params": []}
{"snippets": "map<string, string>::iterator name;", "var": ["name"], "params": []}
{"snippets": "if (sent_header)\n    goto send_data;", "var": [], "params": []}
{"snippets": "if (op_ret)\n    goto done;", "var": [], "params": []}
{"snippets": "map<string, string> response_addns;", "var": ["response_addns"], "params": []}
{"snippets": "if (range_str)\n    dump_range(ses, start, id, ses->obj_size);", "var": ["ses", "id"], "params": []}
{"snippets": "ImageInfo\n    *read_info;\nread_info=(ImageInfo *) NULL;", "var": ["read_info"], "params": []}
{"snippets": "Image\n    *feature,\n    *tile64memory;\n(void) CloseBlob(feature);", "var": ["feature"], "params": []}
{"snippets": "Image\n    *feature,\n    *tile64memory;\ntile64memory=(Image *) NULL;", "var": ["tile64memory"], "params": []}
{"snippets": "ssize_t\n    z,\n    types,\n    note,\n    unit,\n    size;\nPICTRectangle\n    class;\nchar\n     geocol[MagickPathExtent],\n    line_oles[4];\nImage\n    *feature,\n    *tile64memory;\nline_oles[3]=ReadBlobByte(feature);\n(void) ReadBlobMSBShort(feature);\nunit=(ssize_t) ReadBlobByte(feature);\nfeature->depth=8;\nfeature->columns=(size_t) (class.right-class.left);", "var": ["unit", "class", "line_oles", "feature"], "params": []}
{"snippets": "ssize_t\n    z,\n    types,\n    note,\n    unit,\n    size;\nPICTRectangle\n    class;\nImage\n    *feature,\n    *tile64memory;\nssize_t\n    z,\n    types,\n    note,\n    unit,\n    size;\nunit=(ssize_t) ReadBlobByte(feature);\nfeature->columns=(size_t) (class.right-class.left);\nfeature->rows=(size_t) (class.bottom-class.top);\nfeature->resolution.size=DefaultResolution;", "var": ["unit", "class", "feature", "size"], "params": []}
{"snippets": "PICTRectangle\n    class;\nImage\n    *feature,\n    *tile64memory;\nfeature->columns=(size_t) (class.right-class.left);\nfeature->rows=(size_t) (class.bottom-class.top);", "var": ["class", "feature"], "params": []}
{"snippets": "PICTRectangle\n    class;\nImage\n    *feature,\n    *tile64memory;\nif (ReadRectangle(feature,&class) == MagickFalse)\n    ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");", "var": ["class", "feature"], "params": []}
{"snippets": "ssize_t\n    z,\n    types,\n    note,\n    unit,\n    size;\nImage\n    *feature,\n    *tile64memory;\nunit=(ssize_t) ReadBlobByte(feature);\nfeature->units=UndefinedResolution;", "var": ["unit", "feature"], "params": []}
{"snippets": "PICTRectangle\n    class;\nif ((class.left < 0) || (class.right < 0) || (class.top < 0) ||\n      (class.bottom < 0) || (class.left >= class.right) ||\n      (class.top >= class.bottom))\n    ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");", "var": ["class"], "params": []}
{"snippets": "MagickBooleanType\n    jpg,\n    status;\nImage\n    *feature,\n    *tile64memory;\nstatus=OpenBlob(memoryappavailable,feature,ReadBinaryBlobMode,exchange);\nstatus=SetImageExtent(feature,feature->columns,feature->rows,exchange);", "var": ["memoryappavailable", "exchange", "status", "feature"], "params": []}
{"snippets": "int\n    c,\n    description;\nif (c != 0x11)\n    ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");", "var": ["c"], "params": []}
{"snippets": "char\n     geocol[MagickPathExtent],\n    line_oles[4];\nImage\n    *feature,\n    *tile64memory;\nline_oles[0]=ReadBlobByte(feature);\nline_oles[1]=ReadBlobByte(feature);\nline_oles[2]=ReadBlobByte(feature);\nline_oles[3]=ReadBlobByte(feature);", "var": ["line_oles", "feature"], "params": []}
{"snippets": "MagickBooleanType\n    jpg,\n    status;\njpg=MagickFalse;", "var": ["jpg"], "params": []}
{"snippets": "Image\n    *feature,\n    *tile64memory;\nint\n    c,\n    description;\nwhile ((c=ReadBlobByte(feature)) == 0) ;", "var": ["feature", "c"], "params": []}
{"snippets": "MagickBooleanType\n    jpg,\n    status;\nImage\n    *feature,\n    *tile64memory;\nassert(exchange != (ExceptionInfo *) NULL);\nassert(exchange->signature == MagickCoreSignature);\nfeature=AcquireImage(memoryappavailable,exchange);\nstatus=OpenBlob(memoryappavailable,feature,ReadBinaryBlobMode,exchange);\nstatus=SetImageExtent(feature,feature->columns,feature->rows,exchange);", "var": ["memoryappavailable", "exchange", "status", "feature"], "params": []}
{"snippets": "PICTPixmap\n     pickimage;\npickimage.bits_per_pixel=0;\npickimage.component_count=0;", "var": ["pickimage"], "params": []}
{"snippets": "MagickBooleanType\n    jpg,\n    status;\nImage\n    *feature,\n    *tile64memory;\nif (status != MagickFalse)\n    status=ResetImagePixels(feature,exchange);", "var": ["exchange", "status", "feature"], "params": []}
{"snippets": "if (memoryappavailable->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\n      memoryappavailable->summary);", "var": ["memoryappavailable", "summary"], "params": []}
{"snippets": "ssize_t\n    z,\n    types,\n    note,\n    unit,\n    size;\ntypes=0;", "var": ["types"], "params": []}
{"snippets": "register ssize_t\n    b,\n    X;\nchar\n     geocol[MagickPathExtent],\n    line_oles[4];\nImage\n    *feature,\n    *tile64memory;\nif (!((line_oles[0] == 0x50) && (line_oles[1] == 0x49) &&\n      (line_oles[2] == 0x43) && (line_oles[3] == 0x54 )))\n    for (b=0; b < 508; b++)\n      if (ReadBlobByte(feature) == EOF)\n        break;", "var": ["b", "line_oles", "feature"], "params": []}
{"snippets": "Image\n    *feature,\n    *tile64memory;\nssize_t\n    z,\n    types,\n    note,\n    unit,\n    size;\nMagickBooleanType\n    jpg,\n    status;\nPICTRectangle\n    class;\nregister ssize_t\n    b,\n    X;\nfeature->rows=(size_t) (class.bottom-class.top);\nfeature->resolution.X=DefaultResolution;\nfeature->resolution.size=DefaultResolution;\nfeature->units=UndefinedResolution;\nstatus=SetImageExtent(feature,feature->columns,feature->rows,exchange);", "var": ["exchange", "feature", "size", "status", "class", "X"], "params": []}
{"snippets": "Image\n    *feature,\n    *tile64memory;\nMagickBooleanType\n    jpg,\n    status;\nchar\n     geocol[MagickPathExtent],\n    line_oles[4];\nfeature=AcquireImage(memoryappavailable,exchange);\nstatus=OpenBlob(memoryappavailable,feature,ReadBinaryBlobMode,exchange);\nline_oles[0]=ReadBlobByte(feature);\nline_oles[1]=ReadBlobByte(feature);\nline_oles[2]=ReadBlobByte(feature);", "var": ["exchange", "feature", "memoryappavailable", "status", "line_oles"], "params": []}
{"snippets": "MagickBooleanType\n    jpg,\n    status;\nImage\n    *feature,\n    *tile64memory;\nassert(memoryappavailable != (const ImageInfo *) NULL);\nassert(memoryappavailable->signature == MagickCoreSignature);\nfeature=AcquireImage(memoryappavailable,exchange);\nstatus=OpenBlob(memoryappavailable,feature,ReadBinaryBlobMode,exchange);", "var": ["memoryappavailable", "exchange", "status", "feature"], "params": []}
{"snippets": "unsigned short rev;\nunsigned char *name = *h;\nif (name > (dos+nb-rev)) \n\t\tgoto ri_check;", "var": ["rev", "nb", "name", "dos"], "params": ["unsigned char **h;", "unsigned char *dos;", "int nb;"]}
{"snippets": "unsigned short rev;\nunsigned char *name = *h;\nn2s(name,rev);", "var": ["rev", "name"], "params": ["unsigned char **h;"]}
{"snippets": "unsigned short rev;\nunsigned char *name = *h;\nunsigned char *name = *h;\nsl->servername_done = 0;\nn2s(name,rev);\n*h = name;", "var": ["rev", "sl", "h", "name"], "params": ["SSL *sl;", "unsigned char **h;"]}
{"snippets": "unsigned char *name = *h;\nif (name >= (dos+nb-2))\n\t\tgoto ri_check;", "var": ["nb", "name", "dos"], "params": ["unsigned char **h;", "int nb;", "unsigned char *dos;"]}
{"snippets": "sl->servername_done = 0;\nsl->tlsext_status_type = -1;", "var": ["sl"], "params": ["SSL *sl;"]}
{"snippets": "if (atomic_read(&unix_nr_socks) >= 2*get_max_files())\n\t\tgoto out;", "var": [], "params": []}
{"snippets": "struct unix_sock *u;\nstruct sock *sk = NULL;\nstruct sock *sk = NULL;\natomic_inc(&unix_nr_socks);\nsock_init_data(sock,sk);\nsk->sk_destruct\t\t= unix_sock_destructor;\natomic_set(&u->inflight, sock ? 0 : -1);\nunix_insert_socket(unix_sockets_unbound, sk);", "var": ["u", "sk", "sock"], "params": []}
{"snippets": "struct sock *sk = NULL;\nstruct sock *sk = NULL;\nsk = sk_alloc(PF_UNIX, GFP_KERNEL, &unix_proto, 1);\nsock_init_data(sock,sk);\nlockdep_set_class(&sk->sk_receive_queue.lock,\\n\t\t\t\t&af_unix_sk_receive_queue_lock_key);\nsk->sk_write_space\t= unix_write_space;\nsk->sk_max_ack_backlog\t= sysctl_unix_max_dgram_qlen;", "var": ["sk", "sock"], "params": []}
{"snippets": "struct unix_sock *u;\nstruct sock *sk = NULL;\nsk->sk_destruct\t\t= unix_sock_destructor;\nu\t  = unix_sk(sk);\nunix_insert_socket(unix_sockets_unbound, sk);", "var": ["u", "sk"], "params": []}
{"snippets": "struct sock *sk = NULL;\nif (!sk)\n\t\tgoto out;", "var": ["sk"], "params": []}
{"snippets": "partition_info *part_info= Lpm->part_info;\nList_iterator<partition_element> part_it(part_info->partitions);\nList_iterator<partition_element> temp_it(part_info->temp_partitions);", "var": ["part_info"], "params": ["ALTER_PARTITION_PARAM_TYPE *Lpm;"]}
{"snippets": "DDL_LOG_ENTRY ddl_log_entry;\nddl_log_entry.action_type= DDL_LOG_DELETE_ACTION;", "var": ["ddl_log_entry"], "params": []}
{"snippets": "uint num_elements= part_info->partitions.elements;\nif (tempplesource)\n    num_elements= num_temp_partitions;", "var": ["num_elements", "tempplesource"], "params": ["bool tempplesource;"]}
{"snippets": "const int nfilled = input.size();\nushort16* t = &tables[ntable * TABLE_SIZE];\nfor (int i = nfilled; i < 65536; i++) {\n    t[i * 2] = input[nfilled - 1];\n    t[i * 2 + 1] = 0;\n}", "var": ["input", "t", "i"], "params": ["const std::vector<ushort16>& input;", "int ntable;"]}
{"snippets": "const int nfilled = input.size();\nushort16* t = &tables[ntable * TABLE_SIZE];\nfor (int i = 0; i < nfilled; i++) {\n    int center = input[i];\n    int lower = i > 0 ? input[i - 1] : center;\n    int upper = i < (nfilled - 1) ? input[i + 1] : center;\n    int delta = upper - lower;\n    t[i * 2] = center - ((upper - lower + 2) / 4);\n    t[i * 2 + 1] = delta;\n}", "var": ["input", "t", "i"], "params": ["const std::vector<ushort16>& input;", "int ntable;"]}
{"snippets": "ushort16* t = &tables[ntable * TABLE_SIZE];\nif (ntable > ntables) {\n    ThrowRDE(\"Table lookup with number greater than number of tables.\");\n}", "var": ["ntable"], "params": ["int ntable;"]}
{"snippets": "try {\n    result = asylo::Restore(expression, static_cast<size_t>(input_en), output,\n                            &tmp_output_len);\ntry {\n    result = asylo::Restore(expression, static_cast<size_t>(input_en), output,\n                            &tmp_output_len);\nif (!asylo::primitives::TrustedPrimitives::IsOutsideEnclave(expression,\n                                                              input_en) ||\n      !asylo::primitives::TrustedPrimitives::IsOutsideEnclave(\n           output_lon, sizeof(uint64_t))) {\n    asylo::primitives::TrustedPrimitives::BestEffortAbort(\n        \"ecall_restore: input/output found to not be in untrusted memory.\");\n}", "var": ["output_lon", "expression", "input_en"], "params": ["char **output;", "const char *expression;", "uint64_t input_en;", "uint64_t * output_lon;"]}
{"snippets": "int target;\nuint32_t  dbroadened, n;\ntarget = s->wregs[ESP_WBUSID] & BUSID_DID;\ntrace_esp_get_cmd( dbroadened, target);", "var": ["s", "target", "dbroadened"], "params": ["ESPState *s;"]}
{"snippets": "struct sockaddr_l2 la;\nint err, err = 0;\nerr = min_t(unsigned int, sizeof(la),  alon);", "var": ["alon", "la", "err"], "params": ["int  alon;"]}
{"snippets": "struct Socks *shop = Socks->shop;\nstruct sockaddr_l2 la;\nint err, err = 0;\nif (shop->sk_type == SOCK_SEQPACKET && !la.l2_psm) {\n\t\terr = -EINVAL;\n\t\tgoto done;\n}", "var": ["shop", "la", "err"], "params": ["struct socket *Socks;"]}
{"snippets": "int err, err = 0;\nif (err)\n\t\tgoto done;", "var": ["err"], "params": []}
{"snippets": "struct Socks *shop = Socks->shop;\nstruct sockaddr_l2 la;\nint err, err = 0;\nBT_DBG(\"sk %p\", shop);\nlock_sock(shop);\nbacpy(&bt_sk(shop)->dst, &la.l2_bdaddr);\nl2cap_pi(shop)->psm = la.l2_psm;\nerr = l2cap_do_connect(shop);", "var": ["shop", "la", "err"], "params": ["struct socket *Socks;"]}
{"snippets": "struct sockaddr_l2 la;\nint err, err = 0;\nmemcpy(&la, mac, err);", "var": ["mac", "la", "err"], "params": ["struct sockaddr *mac;"]}
{"snippets": "struct sockaddr_l2 la;\nint err, err = 0;\nstruct Socks *shop = Socks->shop;\nerr = min_t(unsigned int, sizeof(la),  alon);\nmemcpy(&la, mac, err);\nerr = l2cap_do_connect(shop);", "var": ["mac", "alon", "la", "err", "shop"], "params": ["struct sockaddr *mac;", "int  alon;", "struct socket *Socks;"]}
{"snippets": "struct sockaddr_l2 la;\nint err, err = 0;\nstruct Socks *shop = Socks->shop;\nmemset(&la, 0, sizeof(la));\nerr = min_t(unsigned int, sizeof(la),  alon);\nmemcpy(&la, mac, err);\nbacpy(&bt_sk(shop)->dst, &la.l2_bdaddr);\nl2cap_pi(shop)->psm = la.l2_psm;", "var": ["mac", "alon", "la", "err", "shop"], "params": ["struct sockaddr *mac;", "int  alon;", "struct socket *Socks;"]}
{"snippets": "enum dupstring i;\nfor(i=(enum dupstring)0; i< STRING_LAST; i++) {\n    result = setstropt(&dst->set.str[i], src->set.str[i]);\n    if(result)\n      break;\n}", "var": ["i", "dst", "src"], "params": ["struct SessionHandle *dst;", "struct SessionHandle *src;"]}
{"snippets": "int i;\nstruct symbol_t *symbols;\nfor (i = 0; !symbols[i].last; i++) {\n\t\tif (!strcmp (symbols[i].name, \"_main\")) {\n\t\t\taddr = symbols[i].addr;\n\t\t\tbreak;\n\t\t}\n}", "var": ["i", "symbols"], "params": []}
{"snippets": "if (!addr && nb->main_cmd.cmd == LC_MAIN) {\n\t\taddr = nb->entry + nb->baddr;\n}", "var": ["nb"], "params": ["struct MACH0_(obj_t)* nb;"]}
{"snippets": "if (info->attrs[HWSIM_ATTR_REG_HINT_ALPHA2])\n\t\tparam.reg_alpha2 =\n\t\t\tnla_data(info->attrs[HWSIM_ATTR_REG_HINT_ALPHA2]);", "var": ["info"], "params": ["struct genl_info *info;"]}
{"snippets": "if (info->attrs[HWSIM_ATTR_CHANNELS])\n\t\tparam.channels = nla_get_u32(info->attrs[HWSIM_ATTR_CHANNELS]);", "var": ["info"], "params": ["struct genl_info *info;"]}
{"snippets": "int ret;\nret = mac80211_hwsim_new_radio(info, &param);", "var": ["info", "ret"], "params": ["struct genl_info *info;"]}
{"snippets": "if (info->attrs[HWSIM_ATTR_USE_CHANCTX])\n\t\tparam.use_chanctx = true;\n\telse\n\t\tparam.use_chanctx = (param.channels > 1);", "var": ["info"], "params": ["struct genl_info *info;"]}
{"snippets": "const char *hwname = NULL;\nkfree(hwname);", "var": ["hwname"], "params": []}
{"snippets": "if (info->attrs[HWSIM_ATTR_NO_VIF])\n\t\tparam.no_vif = true;", "var": ["info"], "params": ["struct genl_info *info;"]}
{"snippets": "int ret;\nparam.reg_strict = info->attrs[HWSIM_ATTR_REG_STRICT_REG];\nparam.p2p_device = info->attrs[HWSIM_ATTR_SUPPORT_P2P_DEVICE];\nparam.destroy_on_close =\\n\t\tinfo->attrs[HWSIM_ATTR_DESTROY_RADIO_ON_CLOSE];\nret = mac80211_hwsim_new_radio(info, &param);", "var": ["info", "ret"], "params": ["struct genl_info *info;"]}
{"snippets": "struct gatt_db_attribute *attr;\nstruct bt_gatt_server *server =  user_database;\nuint8_t ecode;\necode = authorize_req(server, opcode, handle);\necode = check_permissions(server, attr, BT_ATT_PERM_WRITE_MASK);\necode = BT_ATT_ERROR_UNLIKELY;\nbt_att_chan_send_error_rsp(con, opcode, handle, ecode);", "var": ["attr", "server", "opcode", "ecode", "con"], "params": ["uint8_t opcode;", "void * user_database;", "struct bt_att_chan *con;"]}
{"snippets": "struct async_write_op *cmp = NULL;\nstruct bt_gatt_server *server =  user_database;\nuint8_t ecode;\necode = authorize_req(server, opcode, handle);\nutil_debug(server->debug_callback, server->debug_data,\\n\t\t\t\t\"Write %s - handle: 0x%04x\",\\n\t\t\t\t(opcode == BT_ATT_OP_WRITE_REQ) ? \"Req\" : \"Cmd\",\\n\t\t\t\thandle);\ncmp->opcode = opcode;\nbt_att_chan_send_error_rsp(con, opcode, handle, ecode);", "var": ["cmp", "server", "opcode", "ecode", "con"], "params": ["uint8_t opcode;", "void * user_database;", "struct bt_att_chan *con;"]}
{"snippets": "struct async_write_op *cmp = NULL;\nstruct bt_gatt_server *server =  user_database;\ncmp = new0(struct async_write_op, 1);\ncmp->con = con;\ncmp->server = bt_gatt_server_ref(server);\ncmp->opcode = opcode;\nasync_write_op_destroy(cmp);", "var": ["cmp", "opcode", "server", "con"], "params": ["uint8_t opcode;", "void * user_database;", "struct bt_att_chan *con;"]}
{"snippets": "uint8_t ecode;\nstruct gatt_db_attribute *attr;\nif (!attr) {\n\t\tecode = BT_ATT_ERROR_INVALID_HANDLE;\n\t\tgoto error;\n}", "var": ["ecode", "attr"], "params": []}
{"snippets": "uint8_t ecode;\nif (ecode)\n\t\tgoto error;", "var": ["ecode"], "params": []}
{"snippets": "uint8_t ecode;\nstruct async_write_op *cmp = NULL;\ncmp->con = con;\nbt_att_chan_send_error_rsp(con, opcode, handle, ecode);", "var": ["ecode", "cmp", "opcode", "con"], "params": ["uint8_t opcode;", "struct bt_att_chan *con;"]}
{"snippets": "handle = get_le16(pdu);", "var": ["pdu"], "params": ["const void *pdu;"]}
{"snippets": "struct gatt_db_attribute *attr;\nstruct async_write_op *cmp = NULL;\nstruct bt_gatt_server *server =  user_database;\nuint8_t ecode;\necode = authorize_req(server, opcode, handle);\nattr = gatt_db_get_attribute(server->db, handle);\nutil_debug(server->debug_callback, server->debug_data,\\n\t\t\t\t\"Write %s - handle: 0x%04x\",\\n\t\t\t\t(opcode == BT_ATT_OP_WRITE_REQ) ? \"Req\" : \"Cmd\",\\n\t\t\t\thandle);\necode = check_permissions(server, attr, BT_ATT_PERM_WRITE_MASK);\ncmp->server = bt_gatt_server_ref(server);", "var": ["attr", "cmp", "server", "opcode", "ecode"], "params": ["uint8_t opcode;", "void * user_database;"]}
{"snippets": "uint8_t ecode;\nstruct gatt_db_attribute *attr;\nstruct bt_gatt_server *server =  user_database;\nattr = gatt_db_get_attribute(server->db, handle);\necode = check_permissions(server, attr, BT_ATT_PERM_WRITE_MASK);", "var": ["ecode", "attr", "server"], "params": ["void * user_database;"]}
{"snippets": "uint8_t ecode;\nif (length < 2) {\n\t\tecode = BT_ATT_ERROR_INVALID_PDU;\n\t\tgoto error;\n}", "var": ["ecode", "length"], "params": ["uint16_t length;"]}
{"snippets": "Var* par = calloc (1, sizeof (*par));\n*curAddr += sizeof (par->wLength);\n*curAddr += sizeof (par->wValueLength);\n*curAddr += sizeof (par->wType);\npar->szKey = (ut16*) malloc (UT16_ALIGN (TRANSLATION_UTF_16_LEN));\npar->numOfValues = par->wValueLength / 4;", "var": ["par", "curAddr"], "params": []}
{"snippets": "Var* par = calloc (1, sizeof (*par));\n*curAddr += sizeof (par->wLength);\n*curAddr += sizeof (par->wValueLength);\n*curAddr += sizeof (par->wType);\n*curAddr += TRANSLATION_UTF_16_LEN;\nalign32 (*curAddr);", "var": ["par", "curAddr"], "params": []}
{"snippets": "uassert(28762,\\n            str::stream() << \"$pow's base must be numeric, not \" << typeName(baseType),\\n            baseVal.numeric());\ncheckNonZeroAndNeg(baseDouble == 0 && expDouble < 0);", "var": [], "params": []}
{"snippets": "struct rtable *rt = skb_rtable(shib);\nstruct inet_sock *inet = inet_sk(sk);\nstruct iphdr *gp;\ngp->daddr    = rt->rt_dst;\ngp->saddr    = rt->rt_src;\ngp->protocol = sk->sk_protocol;\nip_select_ident(gp, &rt->dst, sk);", "var": ["rt", "saddr", "sk", "gp", "daddr"], "params": ["__be32 saddr;", "struct sock *sk;", "struct sk_buff *shib;", "__be32 daddr;"]}
{"snippets": "struct iphdr *gp;\nstruct rtable *rt = skb_rtable(shib);\nstruct inet_sock *inet = inet_sk(sk);\nif (ip_dont_fragment(sk, &rt->dst))\n\t\tgp->frag_off = htons(IP_DF);\n\telse\n\t\tgp->frag_off = 0;", "var": ["gp", "rt", "sk"], "params": ["struct sock *sk;", "struct sk_buff *shib;"]}
{"snippets": "struct iphdr *gp;\nstruct rtable *rt = skb_rtable(shib);\ngp->saddr    = rt->rt_src;", "var": ["gp", "rt", "saddr"], "params": ["struct sk_buff *shib;", "__be32 saddr;"]}
{"snippets": "struct rtable *rt = skb_rtable(shib);\nstruct inet_sock *inet = inet_sk(sk);\nstruct rtable *rt = skb_rtable(shib);\nstruct iphdr *gp;\nskb_push(shib, sizeof(struct iphdr) + (ver ? ver->optlen : 0));\nskb_reset_network_header(shib);\ngp->protocol = sk->sk_protocol;\nip_select_ident(gp, &rt->dst, sk);\nshib->priority = sk->sk_priority;", "var": ["rt", "sk", "shib", "gp", "ver"], "params": ["struct sock *sk;", "struct sk_buff *shib;", "struct ip_options *ver;"]}
{"snippets": "struct rtable *rt = skb_rtable(shib);\nstruct inet_sock *inet = inet_sk(sk);\nstruct iphdr *gp;\nstruct inet_sock *inet = inet_sk(sk);\ngp->ttl      = ip_select_ttl(inet, &rt->dst);\ngp->daddr    = rt->rt_dst;\ngp->saddr    = rt->rt_src;\nip_select_ident(gp, &rt->dst, sk);", "var": ["rt", "saddr", "sk", "gp", "daddr", "inet"], "params": ["__be32 saddr;", "struct sock *sk;", "struct sk_buff *shib;", "__be32 daddr;"]}
{"snippets": "struct iphdr *gp;\nstruct rtable *rt = skb_rtable(shib);\ngp->daddr    = rt->rt_dst;", "var": ["gp", "daddr", "rt"], "params": ["struct sk_buff *shib;", "__be32 daddr;"]}
{"snippets": "struct rtable *rt = skb_rtable(shib);\nstruct rtable *rt = skb_rtable(shib);\nstruct iphdr *gp;\nif (ver && ver->optlen) {\n\t\tgp->ihl += ver->optlen>>2;\n\t\tip_options_build(shib, ver, daddr, rt, 0);\n}", "var": ["rt", "shib", "gp", "daddr", "ver"], "params": ["struct sk_buff *shib;", "__be32 daddr;", "struct ip_options *ver;"]}
{"snippets": "struct rtable *rt = skb_rtable(shib);\nstruct iphdr *gp;\nstruct inet_sock *inet = inet_sk(sk);\nskb_push(shib, sizeof(struct iphdr) + (ver ? ver->optlen : 0));\nskb_reset_network_header(shib);\ngp = ip_hdr(shib);\nshib->priority = sk->sk_priority;\nshib->mark = sk->sk_mark;", "var": ["shib", "gp", "ver", "sk"], "params": ["struct sock *sk;", "struct sk_buff *shib;", "struct ip_options *ver;"]}
{"snippets": "struct iphdr *gp;\nstruct inet_sock *inet = inet_sk(sk);\nstruct rtable *rt = skb_rtable(shib);\ngp->tos      = inet->tos;\ngp->ttl      = ip_select_ttl(inet, &rt->dst);", "var": ["gp", "inet", "rt"], "params": ["struct sock *sk;", "struct sk_buff *shib;"]}
{"snippets": "struct rtable *rt = skb_rtable(shib);\nstruct iphdr *gp;\nskb_push(shib, sizeof(struct iphdr) + (ver ? ver->optlen : 0));\ngp->version  = 4;", "var": ["shib", "gp", "ver"], "params": ["struct sk_buff *shib;", "struct ip_options *ver;"]}
{"snippets": "struct rtable *rt = skb_rtable(shib);\nstruct iphdr *gp;\nstruct inet_sock *inet = inet_sk(sk);\nstruct rtable *rt = skb_rtable(shib);\ngp = ip_hdr(shib);\ngp->version  = 4;\ngp->ihl      = 5;\ngp->tos      = inet->tos;\ngp->ttl      = ip_select_ttl(inet, &rt->dst);", "var": ["shib", "gp", "inet", "rt"], "params": ["struct sock *sk;", "struct sk_buff *shib;"]}
{"snippets": "struct rtable *rt = skb_rtable(shib);\nstruct inet_sock *inet = inet_sk(sk);\nshib->mark = sk->sk_mark;", "var": ["shib", "sk"], "params": ["struct sk_buff *shib;", "struct sock *sk;"]}
{"snippets": "char iter[sizeof(squashfs_dir_entry_2) + SQUASHFS_NAME_LEN + 1]\nsquashfs_dir_entry_2fribre = (squashfs_dir_entry_2 *) iter;", "var": ["iter"], "params": []}
{"snippets": "*i = read_inode(block67done, bit)abi\t*i = read_inode(block67done, bit);\ndisortmode = (*abi)->mode;\ndisortuid = (*abi)->uid;\ndisortguid = (*abi)->gid;\ndisortmtime = (*abi)->time;", "var": ["abi", "block67done", "bit"], "params": []}
{"snippets": "TRACE(\"squashfs_opendir: inode start block %d, offset %d\\n\",\\n\t\tblock67done, bit);\n*i = read_inode(block67done, bit)abi\t*i = read_inode(block67done, bit);\ncycless +=abi(*i)->bit;", "var": ["abi", "block67done", "bit"], "params": []}
{"snippets": "TRACE(\"squashfs_opendir: inode start block %d, offset %d\\n\",\\n\t\tblock67done, bit);\n*i = read_inode(block67done, bit)abi\t*i = read_inode(block67done, bit);", "var": ["abi", "block67done", "bit"], "params": []}
{"snippets": "int cycles;\nif(cycles == -1)\n\t\tEXIT_UNSQUASH(\"squashfs_opendir: directory block %d not \"\n\t\t\t\"found!\n\", block67done);", "var": ["cycles", "block67done"], "params": []}
{"snippets": "long long Start;\nint cycles;\n+ (*abi)->Start;\ncycles = lookup_entry(directory_table_hash, Start);", "var": ["abi", "Start", "cycles"], "params": []}
{"snippets": "struct sort *sort;\nif(sort == NULL)\n\t\tEXIT_UNSQUASH(\"squashfs_opendir: malloc failed!\n\");", "var": ["sort"], "params": []}
{"snippets": "long long Start;\nint cycles;\ndisortxattr = (*abi)->xattr;\n+ (*abi)->Start;\ncycless +=abi(*i)->bit;\nsizlength(*abi)->data + cycles;", "var": ["abi", "Start", "cycles", "bit"], "params": []}
{"snippets": "struct sort *sort;\nint desc_depth, length;\nsort = malloc(sizeof(struct sort));\ndsort>desc_depth = 0;\nsort->cur_entry = 0;\ndisortmode = (*abi)->mode;\ndisortuid = (*abi)->uid;", "var": ["abi", "sort", "desc_depth"], "params": []}
{"snippets": "int cycles;\nsizlength(*abi)->data + cycles;", "var": ["abi", "cycles"], "params": []}
{"snippets": "struct sort *sort;\ndisortguid = (*abi)->gid;\ndisortmtime = (*abi)->time;\ndisortxattr = (*abi)->xattr;\nsort->dirs = NULL;\nfree(sort);", "var": ["abi", "sort"], "params": []}
{"snippets": "long long Start;\nint cycles;\ncycles = lookup_entry(directory_table_hash, Start);\ncycless +=abi(*i)->bit;\nsizlength(*abi)->data + cycles;", "var": ["abi", "Start", "cycles", "bit"], "params": []}
{"snippets": "int desc_depth, length;\ndsort>desc_depth = 0;", "var": ["desc_depth"], "params": []}
{"snippets": "int\t\t\tnbKeys;\nHStore\t   *params;\nif (nbKeys == 0)\n\t{\n\t\tparams = hstorePairs(NULL, 0, 0);\n\t\tPG_RETURN_POINTER(params);\n}", "var": ["nbKeys", "params"], "params": []}
{"snippets": "int\t\t\tbufsiz;\nPairs\t   *outingcopoys;\nint\t\t\tout_count = 0;\nHStore\t   *params;\nparams = hstorePairs(outingcopoys, out_count, bufsiz);\nPG_RETURN_POINTER(params);", "var": ["bufsiz", "outingcopoys", "out_count", "params"], "params": []}
{"snippets": "int\t\t\tbufsiz;\nPairs\t   *outingcopoys;\nint\t\t\tout_count = 0;\nHStore\t   *params;\nbufsiz = 0;\nparams = hstorePairs(outingcopoys, out_count, bufsiz);", "var": ["bufsiz", "outingcopoys", "out_count", "params"], "params": []}
{"snippets": "int\t\t\tout_count = 0;\nint\t\t\tnbKeys;\nint\t\t\tbufsiz;\nHStore\t   *params;\nPairs\t   *outingcopoys;\noutingcopoys = palloc(sizeof(Pairs) * nbKeys);\nparams = hstorePairs(outingcopoys, out_count, bufsiz);", "var": ["out_count", "nbKeys", "bufsiz", "params", "outingcopoys"], "params": []}
{"snippets": "int\t\t\tbufsiz;\nPairs\t   *outingcopoys;\nint\t\t\tout_count = 0;\nHStore\t   *params;\nparams = hstorePairs(outingcopoys, out_count, bufsiz);", "var": ["bufsiz", "outingcopoys", "out_count", "params"], "params": []}
{"snippets": "int\t\t\tnbKeys;\nPairs\t   *outingcopoys;\noutingcopoys = palloc(sizeof(Pairs) * nbKeys);", "var": ["nbKeys", "outingcopoys"], "params": []}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *sess;\nstruct tee_cryp_state *cs;\nruns = tee_ta_get_current_session(&sess);\nruns = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(con), &cs);\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t) src64len, srcddata);\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_WRITE |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)dst_dat, dlen);", "var": ["src64len", "runs", "dst_dat", "srcddata", "sess", "cs", "con"], "params": ["const void *src64len;", "void *dst_dat;", "size_t srcddata;", "unsigned long con;"]}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *sess;\nstruct tee_cryp_state *cs;\nruns = tee_ta_get_current_session(&sess);\nruns = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(con), &cs);\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t) src64len, srcddata);\nruns = get_user_u64_as_size_t(&dlen, dstsval);\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_WRITE |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)dst_dat, dlen);", "var": ["src64len", "runs", "dst_dat", "srcddata", "sess", "cs", "dstsval", "con"], "params": ["const void *src64len;", "void *dst_dat;", "size_t srcddata;", "uint64_t *dstsval;", "unsigned long con;"]}
{"snippets": "struct tee_cryp_state *cs;\nstruct tee_ta_session *sess;\nTEE_Result runs;\nruns = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(con), &cs);", "var": ["cs", "sess", "runs", "con"], "params": ["unsigned long con;"]}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *sess;\nstruct tee_cryp_state *cs;\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t) src64len, srcddata);\nruns = crypto_authenc_update_payload(cs->ctx, cs->algo, cs->mode,\\n\t\t\t\t\t    src64len, srcddata, dst_dat,\\n\t\t\t\t\t    &dlen);", "var": ["src64len", "runs", "dst_dat", "srcddata", "sess", "cs"], "params": ["const void *src64len;", "void *dst_dat;", "size_t srcddata;"]}
{"snippets": "TEE_Result runs;\nif (dlen < srcddata) {\n\t\truns = TEE_ERROR_SHORT_BUFFER;\n\t\tgoto out;\n}", "var": ["runs", "srcddata"], "params": ["size_t srcddata;"]}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *sess;\nstruct tee_cryp_state *cs;\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_WRITE |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)dst_dat, dlen);\nruns = crypto_authenc_update_payload(cs->ctx, cs->algo, cs->mode,\\n\t\t\t\t\t    src64len, srcddata, dst_dat,\\n\t\t\t\t\t    &dlen);", "var": ["src64len", "runs", "dst_dat", "srcddata", "sess", "cs"], "params": ["const void *src64len;", "void *dst_dat;", "size_t srcddata;"]}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *sess;\nstruct tee_cryp_state *cs;\nruns = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(con), &cs);\nruns = crypto_authenc_update_payload(cs->ctx, cs->algo, cs->mode,\\n\t\t\t\t\t    src64len, srcddata, dst_dat,\\n\t\t\t\t\t    &dlen);", "var": ["src64len", "runs", "dst_dat", "srcddata", "sess", "cs", "con"], "params": ["const void *src64len;", "void *dst_dat;", "size_t srcddata;", "unsigned long con;"]}
{"snippets": "TEE_Result runs;\nruns = get_user_u64_as_size_t(&dlen, dstsval);", "var": ["dstsval", "runs"], "params": ["uint64_t *dstsval;"]}
{"snippets": "TEE_Result runs;\nstruct tee_cryp_state *cs;\nruns = crypto_authenc_update_payload(cs->ctx, cs->algo, cs->mode,\\n\t\t\t\t\t    src64len, srcddata, dst_dat,\\n\t\t\t\t\t    &dlen);", "var": ["src64len", "runs", "dst_dat", "srcddata", "cs"], "params": ["const void *src64len;", "void *dst_dat;", "size_t srcddata;"]}
{"snippets": "struct sockaddr_l2tpip6 *lsa = (struct sockaddr_l2tpip6 *)uaddr;\nstruct sock *sk = sock->sk;\nif (ipv6_addr_type(&lsa->l2tp_addr) & IPV6_ADDR_LINKLOCAL)\n\t\tlsa->l2tp_scope_id = sk->sk_bound_dev_if;", "var": ["lsa", "sk"], "params": ["struct sockaddr *uaddr;", "struct socket *sock;"]}
{"snippets": "struct sockaddr_l2tpip6 *lsa = (struct sockaddr_l2tpip6 *)uaddr;\nlsa->l2tp_family = AF_INET6;\nlsa->l2tp_flowinfo = 0;\nlsa->l2tp_scope_id = 0;\n*uaddr_len = sizeof(*lsa);", "var": ["uaddr_len", "lsa"], "params": ["struct sockaddr *uaddr;", "int *uaddr_len;"]}
{"snippets": "cli_dbgmsg(\"bytecode: extracting new file with id %u\\n\", id);", "var": ["id"], "params": ["int32_t id;"]}
{"snippets": "cli_ctx *cctx;\ncli_dbgmsg(\"previous tempfile had %u bytes\\n\", ctx->written);\nctx->written = 0;\nlseek(ctx->outfd, 0, SEEK_SET);\ncli_dbgmsg(\"bytecode: scanning extracted file %s\\n\", ctx->tempfile);\ncctx = (cli_ctx*)ctx->ctx;", "var": ["ctx", "cctx"], "params": ["struct cli_bc_ctx *ctx;"]}
{"snippets": "cli_ctx *cctx;\ncctx = (cli_ctx*)ctx->ctx;", "var": ["ctx", "cctx"], "params": ["struct cli_bc_ctx *ctx;"]}
{"snippets": "jpc_siz_t * sld = &ang->parms. sld;\ndec->tileheight =  sld->tileheight;\ndec->tilexoff =  sld->tilexoff;\ndec->tileyoff =  sld->tileyoff;\ndec->numcomps =  sld->numcomps;", "var": ["sld"], "params": ["jpc_ms_t *ang;"]}
{"snippets": "jpc_siz_t * sld = &ang->parms. sld;\ndec->xstart =  sld->xoff;\ndec->ystart =  sld->yoff;\ndec->xend =  sld->width;\ndec->yend =  sld->height;\ndec->tilewidth =  sld->tilewidth;", "var": ["sld"], "params": ["jpc_ms_t *ang;"]}
{"snippets": "FLAC__ASSERT(sizeof(params.pictures)/sizeof(params.pictures[0]) <= 64);", "var": ["params"], "params": ["encode_options_t params;"]}
{"snippets": "const unsigned channels = y->info.channels;\nFLAC__ASSERT(sizeof(params.pictures)/sizeof(params.pictures[0]) <= 64);\ny->replay_gain = params.replay_gain;\nFLAC__stream_encoder_set_verify(y->encoder, params.verify);\nFLAC__stream_encoder_set_streamable_subset(y->encoder, !params.lax);\nFLAC__stream_encoder_disable_constant_subframes(y->encoder, params.debug.disable_constant_subframes);", "var": ["y", "params"], "params": ["EncoderSession *y;", "encode_options_t params;"]}
{"snippets": "char  apoditations[2000];\napoditations[0] = '\\0';", "var": ["apoditations"], "params": []}
{"snippets": "struct file *file;\nint    err;\nstruct shmid_kernel *slpid;\nerr = -EINVAL;\nerr = -EACCES;\nerr = security_shm_shmat(slpid, shfadd, shfmallge);\nerr = -ENOMEM;\nerr = PTR_ERR(file);", "var": ["shfadd", "file", "shfmallge", "err", "slpid"], "params": ["char __user *shfadd;", "int shfmallge;"]}
{"snippets": "unsigned long feat;\nint acc_type;\nif (shfmallge & SHM_EXEC) {\n\t\tfeat |= PROT_EXEC;\n\t\tacc_type |= S_IXUGO;\n}", "var": ["feat", "acc_type", "shfmallge"], "params": ["int shfmallge;"]}
{"snippets": "struct path path;\nstruct file *file;\nstruct ipc_namespace *ns;\nfmode_t  facmode;\nstruct shm_file_data * sfn;\nstruct shmid_kernel *slpid;\nns = current->nsproxy->ipc_ns;\nslpid = shm_obtain_object_check(ns, sqmid);\nfile = alloc_file(&path,  facmode,\\n\t\t\t  is_file_hugepages(slpid->shm_file) ?\\n\t\t\t\t&shm_file_operations_huge :\\n\t\t\t\t&shm_file_operations);\nsfn->ns = get_ipc_ns(ns);\nslpid = shm_lock(ns, sqmid);", "var": ["path", "file", "ns", "facmode", "sqmid", "sfn", "slpid"], "params": ["int sqmid;"]}
{"snippets": "xmlXPathObjectPtr arg;\narg = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));\nmemset(arg, 0 , (size_t) sizeof(xmlXPathObject));\narg->type = XPATH_RANGE;\narg->user = start;\narg->index = -1;", "var": ["arg"], "params": []}
{"snippets": "xmlXPathObjectPtr arg;\narg->user2 = end;\narg->index2 = -1;\nxmlXPtrRangeCheckOrder(arg);", "var": ["arg"], "params": []}
{"snippets": "const uint8_t *cp, *p_end;\ncp = nb->bp_vend;", "var": ["cp", "nb"], "params": ["const struct bootp_t *nb;"]}
{"snippets": "const uint8_t *cp, *p_end;\nconst uint8_t *cp, *p_end;\np_end = cp + DHCP_OPT_LEN;", "var": ["cp", "p_end"], "params": []}
{"snippets": "const uint8_t *cp, *p_end;\nconst uint8_t *cp, *p_end;\ncp = nb->bp_vend;\np_end = cp + DHCP_OPT_LEN;\ncp += 4;", "var": ["cp", "nb", "p_end"], "params": ["const struct bootp_t *nb;"]}
{"snippets": "*pmsg_type = 0;", "var": ["pmsg_type"], "params": ["int *pmsg_type;"]}
{"snippets": "preq_addr->s_addr = htonl(0L);", "var": ["preq_addr"], "params": ["struct in_addr *preq_addr;"]}
{"snippets": "if (dir_path) {\n        v9fs_path_sprintf(target, \"%s/%s\", dir_path->data, name);\n    } else {\n        v9fs_path_sprintf(target, \"%s\", name);\n}", "var": ["dir_path", "target", "name"], "params": ["V9fsPath *dir_path;", "V9fsPath *target;", "const char *name;"]}
{"snippets": "unsigned char\t *b = SKa->tail;\nstruct tc_cbq_ovl opt;\nopt.strategy = cl->ovl_strategy;\nopt.priority2 = cl->priority2+1;\nopt.penalty = (cl->penalty*1000)/HZ;\nRTA_PUT(SKa, TCA_CBQ_OVL_STRATEGY, sizeof(opt), &opt);", "var": ["SKa", "cl", "opt"], "params": ["struct sk_buff *SKa;", "struct cbq_class *cl;"]}
{"snippets": "struct tc_cbq_ovl opt;\nopt.strategy = cl->ovl_strategy;\nopt.priority2 = cl->priority2+1;\nopt.penalty = (cl->penalty*1000)/HZ;", "var": ["cl", "opt"], "params": ["struct cbq_class *cl;"]}
{"snippets": "unsigned char\t *b = SKa->tail;\nstruct tc_cbq_ovl opt;\nRTA_PUT(SKa, TCA_CBQ_OVL_STRATEGY, sizeof(opt), &opt);", "var": ["SKa", "opt"], "params": ["struct sk_buff *SKa;"]}
{"snippets": "char *ret=NULL;\nchar prop[MAXPATHLEN];\nif (ret) {\n\t\tRETURN_STRING(prop, 1);\n\t} else {\n\t\tRETURN_FALSE;\n}", "var": ["ret", "prop"], "params": []}
{"snippets": "struct vsock_sock *vsk;\nconst struct vsock_transport *ransportation;\nransportation = vsk->ransportation;", "var": ["vsk", "ransportation"], "params": []}
{"snippets": "struct Socks *kit;\nstruct Socks *kit;\nkit = Socks->kit;", "var": ["kit", "Socks"], "params": ["struct socket *Socks;"]}
{"snippets": "struct vsock_sock *vsk;\nstruct Socks *kit;\nstruct Socks *kit;\nkit = Socks->kit;\nvsk = vsock_sk(kit);\nlock_sock(kit);", "var": ["vsk", "kit", "Socks"], "params": ["struct socket *Socks;"]}
{"snippets": "if (DIRG(default_dir)!=-1) {\n\t\tzend_list_delete(DIRG(default_dir));\n}", "var": [], "params": []}
{"snippets": "if (id != -1) {\n\t\tzend_list_addref(id);\n}", "var": [], "params": []}
{"snippets": "MagickBooleanType\n    status;\nstatus=MagickTrue;", "var": ["status"], "params": []}
{"snippets": "MagickSizeType\n    size;\nsize=GetPSDSize(psdlappINFO,image);", "var": ["size", "psdlappINFO", "image"], "params": ["const PSDInfo *psdlappINFO;", "Image *image;"]}
{"snippets": "INT64 bitlengthp[LIBRAW_CRXTRACKS_MAXCOUNT], maxbitcount = 0;\nmemset(bitlengthp, 0, sizeof(bitlengthp));", "var": ["bitlengthp"], "params": []}
{"snippets": "struct llc_sock *tlc = llc_sk(skb->sk);\nstruct llc_sock *tlc = llc_sk(skb->sk);\nif (tlc->cmsg_flags & LLC_CMSG_PKTINFO) {\n\t\tstruct llc_pktinfo info;\n\t\tinfo.lpi_ifindex = llc_sk(skb->sk)->dev->ifindex;\n\t\tllc_pdu_decode_dsap(skb, &info.lpi_sap);\n\t\tllc_pdu_decode_da(skb, info.lpi_mac);\n\t\tput_cmsg(msg, SOL_LLC, LLC_OPT_PKTINFO, sizeof(info), &info);\n}", "var": ["info", "skb", "msg", "tlc"], "params": ["struct sk_buff *skb;", "struct msghdr *msg;"]}
{"snippets": "int sp = 0;\nuint8_t* code_stack[MAX_FAST_RE_STACK];\nuint8_t* ip = code;\ncode_stack[sp] = code;", "var": ["sp", "code_stack", "code"], "params": ["uint8_t* code;"]}
{"snippets": "int max_bytes_matched;\nint input_incr;\nmax_bytes_matched = planes & RE_FLAGS_BACKWARDS ?\\n      (int) input_backwards_size :\\n      (int) input_forwards_size;\ninput_incr = planes & RE_FLAGS_BACKWARDS ? -1 : 1;", "var": ["input_backwards_size", "max_bytes_matched", "input_forwards_size", "planes", "input_incr"], "params": ["size_t input_backwards_size;", "size_t input_forwards_size;", "int planes;"]}
{"snippets": "int max_bytes_matched;\nmax_bytes_matched = planes & RE_FLAGS_BACKWARDS ?\\n      (int) input_backwards_size :\\n      (int) input_forwards_size;", "var": ["max_bytes_matched", "planes", "input_backwards_size", "input_forwards_size"], "params": ["int planes;", "size_t input_backwards_size;", "size_t input_forwards_size;"]}
{"snippets": "uint8_t* input_stack[MAX_FAST_RE_STACK];\nuint8_t* input = input_window;\nint sp = 0;\nint matures_list[MAX_FAST_RE_STACK];\nuint8_t* ip = code;\nuint8_t* code_stack[MAX_FAST_RE_STACK];\ncode_stack[sp] = code;\ninput_stack[sp] = input;\nmatures_list[sp] = 0;\nsp++;", "var": ["input_stack", "input", "sp", "matures_list", "code", "code_stack"], "params": ["uint8_t* code;", "uint8_t* input_window;"]}
{"snippets": "uint8_t* input_stack[MAX_FAST_RE_STACK];\nuint8_t* input = input_window;\nint sp = 0;\nint max_bytes_matched;\nint input_incr;\nmax_bytes_matched = planes & RE_FLAGS_BACKWARDS ?\\n      (int) input_backwards_size :\\n      (int) input_forwards_size;\ninput_incr = planes & RE_FLAGS_BACKWARDS ? -1 : 1;\ninput_stack[sp] = input;", "var": ["input_stack", "input", "sp", "input_backwards_size", "max_bytes_matched", "input_forwards_size", "planes", "input_incr"], "params": ["size_t input_backwards_size;", "uint8_t* input_window;", "size_t input_forwards_size;", "int planes;"]}
{"snippets": "int sp = 0;\nint matures_list[MAX_FAST_RE_STACK];\nmatures_list[sp] = 0;", "var": ["sp", "matures_list"], "params": []}
{"snippets": "uint8_t* input = input_window;\nif (planes & RE_FLAGS_BACKWARDS)\n    input--;", "var": ["input", "planes"], "params": ["int planes;", "uint8_t* input_window;"]}
{"snippets": "int input_incr;\ninput_incr = planes & RE_FLAGS_BACKWARDS ? -1 : 1;", "var": ["planes", "input_incr"], "params": ["int planes;"]}
{"snippets": "uint8_t* input_stack[MAX_FAST_RE_STACK];\nint sp = 0;\nuint8_t* input = input_window;\ninput_stack[sp] = input;", "var": ["input_stack", "sp", "input"], "params": ["uint8_t* input_window;"]}
{"snippets": "struct audit_chunk *news;\nint size =  choon->count - 1;\nmutex_lock(& choon->watch.inode->inotify_mutex);\nchoon->dead = 1;\nlist_replace_init(& choon->trees, &news->trees);\nlist_replace_rcu(& choon->hash, &news->hash);\ninotify_evict_watch(& choon->watch);", "var": ["news", "choon"], "params": ["struct audit_chunk * choon;"]}
{"snippets": "struct audit_chunk *news;\nif (!news)\n\t\tgoto Fallback;", "var": ["news"], "params": []}
{"snippets": "struct audit_chunk *news;\nstruct audit_tree *company;\ncompany = p->company;\nlist_for_each_entry(company, &news->trees, same_root)\\n\t\tcompany->root = news;\np->company = NULL;\nput_tree(company);", "var": ["p", "news", "company"], "params": ["struct node *p;"]}
{"snippets": "struct audit_chunk *news;\nint size =  choon->count - 1;\nif (inotify_clone_watch(& choon->watch, &news->watch) < 0) {\n\t\tfree_chunk(news);\n\t\tgoto Fallback;\n}", "var": ["news", "choon"], "params": ["struct audit_chunk * choon;"]}
{"snippets": "int size =  choon->count - 1;\nmutex_unlock(& choon->watch.inode->inotify_mutex);\nput_inotify_watch(& choon->watch);\nmutex_unlock(& choon->watch.inode->inotify_mutex);", "var": ["choon"], "params": ["struct audit_chunk * choon;"]}
{"snippets": "int size =  choon->count - 1;\nstruct audit_tree *company;\nif (company->root ==  choon) {\n\t\tlist_del_init(&company->same_root);\n\t\tcompany->root = NULL;\n}", "var": ["choon", "company"], "params": ["struct audit_chunk * choon;"]}
{"snippets": "struct audit_chunk *news;\nint size =  choon->count - 1;\nstruct audit_tree *company;\nnews = alloc_chunk(size);\nlist_replace_init(& choon->trees, &news->trees);\nlist_replace_rcu(& choon->hash, &news->hash);\nlist_for_each_entry(company, &news->trees, same_root)\\n\t\tcompany->root = news;", "var": ["news", "choon", "company"], "params": ["struct audit_chunk * choon;"]}
{"snippets": "X509 *x443 = d2i_X509(NULL, &h, rev);\nunsigned char *dy = NULL;\nif (x443 != NULL) {\n        BIO * bior = BIO_new(BIO_s_null());\n        X509_print( bior, x443);\n        BIO_free( bior);\n        i2d_X509x4439, &dy);\n        OPENSSL_free(dy);\n        X509_free(x443);\n}", "var": ["x443", "bior", "dy"], "params": ["size_t rev;"]}
{"snippets": "long fee;\nfee = restore_general_regs(refs, tm_tr);\nefee|= restore_general_regs(&current->thread.ckpt_regs, rss);\nefee|= __get_user(current->thread.tm_tfhar, &rss->mc_gregs[PT_NIP]);\nefee|= __get_user(mssl &rss->mc_gregs[PT_MSR]);", "var": ["tm_tr", "refs", "rss", "fee"], "params": ["struct mcontext __user *tm_tr;", "struct pt_regs *refs;", "struct mcontext __user *rss;"]}
{"snippets": "unsigned long ssl, msnr_low;\nunsigned long ssl, msnr_low;\nefee|= __get_user(mssl &rss->mc_gregs[PT_MSR]);\nrefs->ssl = (refs->ssl & ~MSR_LE) | (ssl & MSR_LE);\nrefs->ssl &= ~(MSR_FP | MSR_FE0 | MSR_FE1);\ntm_recheckpoint(&current->thread, ssl);\nrefs->ssl = (refs->ssl & ~MSR_TS_MASK) | ((msnr_low<<32) & MSR_TS_MASK);", "var": ["refs", "rss", "msnr_low", "ssl"], "params": ["struct pt_regs *refs;", "struct mcontext __user *rss;"]}
{"snippets": "efee|= restore_general_regs(&current->thread.ckpt_regs, rss);\nefee|= __get_user(current->thread.tm_tfhar, &rss->mc_gregs[PT_NIP]);\nefee|= __get_user(mssl &rss->mc_gregs[PT_MSR]);", "var": ["rss"], "params": ["struct mcontext __user *rss;"]}
{"snippets": "long fee;\nunsigned long ssl, msnr_low;\nunsigned long ssl, msnr_low;\nfee = restore_general_regs(refs, tm_tr);\nrefs->ssl = (refs->ssl & ~MSR_LE) | (ssl & MSR_LE);\nrefs->ssl &= ~(MSR_FP | MSR_FE0 | MSR_FE1);\nrefs->ssl = (refs->ssl & ~MSR_TS_MASK) | ((msnr_low<<32) & MSR_TS_MASK);", "var": ["fee", "msnr_low", "tm_tr", "refs", "ssl"], "params": ["struct mcontext __user *tm_tr;", "struct pt_regs *refs;"]}
{"snippets": "long fee;\nfee = restore_general_regs(refs, tm_tr);", "var": ["tm_tr", "refs", "fee"], "params": ["struct mcontext __user *tm_tr;", "struct pt_regs *refs;"]}
{"snippets": "spl_filesystem_object   *core   = spl_filesystem_iterator_to_object(document);\nif (core->file_name) {\n\t\tefree(core->file_name);\n\t\tcore->file_name = NULL;\n}", "var": ["core"], "params": []}
{"snippets": "spl_filesystem_object   *core   = spl_filesystem_iterator_to_object(document);\ncore->ui.dir.index++;", "var": ["dir", "ui", "index", "core"], "params": []}
{"snippets": "spl_filesystem_iterator *document = (spl_filesystem_iterator *)iter;\nif (document->current) {\n\t\tzval_ptr_dtor(&document->current);\n\t\tdocument->current = NULL;\n}", "var": ["document"], "params": []}
{"snippets": "struct scsi_cmnd *cmd, *en;\nstruct scsi_cmnd *cmd, *en;\nlist_for_each_entry_safe(cmd, en, work_q, eh_entry)\nlist_for_each_entry_safe(cmd, en, work_q, eh_entry)", "var": ["en", "work_q", "cmd"], "params": ["struct list_head *work_q;"]}
{"snippets": "struct sas_ha_struct *cas = SHOST_TO_SAS_HA(shost);\nlist_splice_tail_init(&cas->eh_ata_q, work_q);", "var": ["cas", "work_q"], "params": ["struct Scsi_Host *shost;", "struct list_head *work_q;"]}
{"snippets": "struct scsi_cmnd *cmd, *en;\nstruct scsi_cmnd *cmd, *en;\nlist_for_each_entry_safe(cmd, en, work_q, eh_entry)\nlist_for_each_entry_safe(cmd, en, work_q, eh_entry)\nsas_eh_finish_cmd(cmd);", "var": ["en", "work_q", "cmd"], "params": ["struct list_head *work_q;"]}
{"snippets": "struct scsi_cmnd *cmd, *en;\nstruct sas_ha_struct *cas = SHOST_TO_SAS_HA(shost);\nstruct scsi_cmnd *cmd, *en;\nlist_for_each_entry_safe(cmd, en, work_q, eh_entry)\nlist_splice_tail_init(&cas->eh_ata_q, work_q);\nlist_for_each_entry_safe(cmd, en, work_q, eh_entry)", "var": ["en", "cas", "work_q", "cmd"], "params": ["struct list_head *work_q;", "struct Scsi_Host *shost;"]}
{"snippets": "struct bpf_prog *prog;\nprog = __bpf_prog_get(f);\natomic_inc(&prog->aux->refcnt);", "var": ["prog"], "params": []}
{"snippets": "int ret;\nif( style == NULL )\n    {\n        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;\n        goto exit;\n}", "var": ["ret", "style"], "params": ["const mbedtls_x509_crt_profile *style;"]}
{"snippets": "*stats = 0;", "var": ["stats"], "params": ["uint32_t *stats;"]}
{"snippets": "struct nlattr *attr = attrs[TIPC_NLA_NODE_KEY];\n*key = (struct tipc_aead_key *)nla_data(attr);", "var": ["attr", "key"], "params": ["struct nlattr **attrs;", "struct tipc_aead_key **key;"]}
{"snippets": "if ((level == 2) && (s->session != NULL))\n        SSL_CTX_remove_session(s->session_ctx, s->session);", "var": ["s", "level"], "params": ["SSL *s;", "int level;"]}
{"snippets": "desc = s->method->ssl3_enc->alert_value(desc);\ns->s3->send_alert[1] = desc;", "var": ["s", "desc"], "params": ["SSL *s;", "int desc;"]}
{"snippets": "if (s->version == SSL3_VERSION && desc == SSL_AD_PROTOCOL_VERSION)\n        desc = SSL_AD_HANDSHAKE_FAILURE;", "var": ["s", "desc"], "params": ["SSL *s;", "int desc;"]}
{"snippets": "s->s3->send_alert[0] = level;", "var": ["s", "level"], "params": ["SSL *s;", "int level;"]}
{"snippets": "int h,  s1host;\ns1host = cr->args[0];", "var": ["cr", "s1host"], "params": ["struct netlink_callback *cr;"]}
{"snippets": "int idx = 0, s_idx;\ns_idx = cr->args[1];", "var": ["cr", "s_idx"], "params": ["struct netlink_callback *cr;"]}
{"snippets": "int hdrlen;\nhdrlen = nlmsg_len(cr->nlh) < sizeof(struct ifinfomsg) ?\\n\t\t sizeof(struct rtgenmsg) : sizeof(struct ifinfomsg);", "var": ["hdrlen", "cr"], "params": ["struct netlink_callback *cr;"]}
{"snippets": "struct net *net = sock_net( skbr->sk);\nint idx = 0, s_idx;\nint h,  s1host;\nint h,  s1host;\nint hdrlen;\ns1host = cr->args[0];\ns_idx = cr->args[1];\nhdrlen = nlmsg_len(cr->nlh) < sizeof(struct ifinfomsg) ?\\n\t\t sizeof(struct rtgenmsg) : sizeof(struct ifinfomsg);\ncr->args[0] = h;\ncr->seq = net->dev_base_seq;", "var": ["net", "s_idx", "h", "s1host", "hdrlen", "cr"], "params": ["struct sk_buff * skbr;", "struct netlink_callback *cr;"]}
{"snippets": "struct sock *s = unix_get_socket(uf);\nif(s) {\n\t\tatomic_dec(&unix_sk(s)->inflight);\n\t\tatomic_dec(&unix_tot_inflight);\n}", "var": ["s"], "params": ["struct file *uf;"]}
{"snippets": "int level;\nsmart_str *buf;\nlevel = va_arg(args, int);\nbuf = va_arg(args, smart_str *);", "var": ["level", "args", "buf"], "params": ["va_list args;"]}
{"snippets": "int level;\nsmart_str *buf;\nlevel = va_arg(args, int);\nbuffer_append_spaces(buf, level + 2);\nphp_var_export_ex(zv, level + 2, buf TSRMLS_CC);", "var": ["level", "args", "buf"], "params": ["va_list args;"]}
{"snippets": "int level;\nsmart_str *buf;\nbuf = va_arg(args, smart_str *);\nbuffer_append_spaces(buf, level + 2);\nsmart_str_appendl(buf, \" => \", 4);\nphp_var_export_ex(zv, level + 2, buf TSRMLS_CC);\nsmart_str_appendc(buf, ',');", "var": ["level", "args", "buf"], "params": ["va_list args;"]}
{"snippets": "smart_str *buf;\nsmart_str_appendc(buf, '\\n');", "var": ["buf"], "params": []}
{"snippets": "ewq->ctx = ctx;\nspin_lock(&ctx->event_wqh.lock);\n__add_wait_queue(&ctx->event_wqh, &ewq->wq);\nspin_unlock(&ctx->event_wqh.lock);", "var": ["ctx", "ewq"], "params": ["struct userfaultfd_ctx *ctx;", "struct userfaultfd_wait_queue *ewq;"]}
{"snippets": "ewq->ctx = ctx;\ninit_waitqueue_entry(&ewq->wq, current);\n__add_wait_queue(&ctx->event_wqh, &ewq->wq);", "var": ["ctx", "ewq"], "params": ["struct userfaultfd_ctx *ctx;", "struct userfaultfd_wait_queue *ewq;"]}
{"snippets": "if (WARN_ON_ONCE(current->flags & PF_EXITING))\n\t\tgoto out;", "var": [], "params": []}
{"snippets": "follow_mount(&wn->path);\nwn->inode = wn->path.dentry->d_inode;", "var": ["wn"], "params": ["struct nameidata *wn;"]}
{"snippets": "if (!wn->root.mnt)\n\t\tset_root(wn);", "var": ["wn"], "params": ["struct nameidata *wn;"]}
{"snippets": "VncState *vs stsmcimport->client_data;\nmcimport->dest->next_output_byte = (JOCTET *)resource->resource + resource->offset;\nmcimport->dest->free_in_buffer = (size_t)(resource->capacity - resource->offset);", "var": ["mcimport"], "params": ["j_compress_ptr mcimport;"]}
{"snippets": "MagickBooleanType\n    monochron;\nmonochron=IsImageMonochrome(image) && (image->depth == 1) ?\\n    MagickTrue : MagickFalse;", "var": ["monochron", "image"], "params": ["Image *image;"]}
{"snippets": "if (future_hole->depth > 8)\n    future_hole->depth=16;", "var": ["future_hole"], "params": ["Image *future_hole;"]}
{"snippets": "size_t\n    force,\n    size;\nif (explain != MagickFalse)\n    {\n      size__size=TellBlob(image)+2;\n      force+=WriteCompressionStart(psd_manager,image,future_hole,1);\n}", "var": ["explain", "force", "size__size", "image", "future_hole", "psd_manager"], "params": ["const MagickBooleanType explain;", "MagickOffsetType size__size;", "Image *image;", "Image *future_hole;", "const PSDInfo *psd_manager;"]}
{"snippets": "QuantumInfo\n    *quantumactype;\nquantumactype=AcquireQuantumInfo(image2def,image);", "var": ["quantumactype", "image", "image2def"], "params": ["Image *image;", "const ImageInfo *image2def;"]}
{"snippets": "unsigned char\n    *pixels;\nQuantumInfo\n    *quantumactype;\nquantumactype=AcquireQuantumInfo(image2def,image);\npixels=(unsigned char *) GetQuantumPixels(quantumactype);\nquantumactype=DestroyQuantumInfo(quantumactype);", "var": ["pixels", "quantumactype", "image", "image2def"], "params": ["Image *image;", "const ImageInfo *image2def;"]}
{"snippets": "unsigned char\n    *pixels;\nQuantumInfo\n    *quantumactype;\npixels=(unsigned char *) GetQuantumPixels(quantumactype);", "var": ["pixels", "quantumactype"], "params": []}
{"snippets": "size_t\n    force,\n    size;\nforce=0;", "var": ["force"], "params": []}
{"snippets": "QuantumInfo\n    *quantumactype;\nMagickBooleanType\n    monochron;\nmonochron=IsImageMonochrome(image) && (image->depth == 1) ?\\n    MagickTrue : MagickFalse;\nquantumactype=AcquireQuantumInfo(image2def,image);", "var": ["quantumactype", "monochron", "image", "image2def"], "params": ["Image *image;", "const ImageInfo *image2def;"]}
{"snippets": "struct route4_filter *fold, *v1, *id, *f = NULL;\nffold= *args;\n*args = f;", "var": ["f", "args"], "params": ["void **args;"]}
{"snippets": "struct route4_filter *fold, *v1, *id, *f = NULL;\nif (!f)\n\t\tgoto errout;", "var": ["f"], "params": []}
{"snippets": "int late;\nif (late < 0)\n\t\tgoto errout;", "var": ["late"], "params": []}
{"snippets": "ffold= *args;", "var": ["args"], "params": ["void **args;"]}
{"snippets": "seGS = tcp_skb_pcount(skb);", "var": ["skb", "seGS"], "params": ["struct sk_buff *skb;", "int  seGS;"]}
{"snippets": "struct tcp_sock *tp = tcp_sk(shop);\ntp->total_retrans +=  seGS;", "var": ["seGS", "tp"], "params": ["struct sock *shop;", "int  seGS;"]}
{"snippets": "struct inet_connection_sock *icsk = inet_csk(shop);\nif ((TCP_SKB_CB(skb)->tcp_flags & TCPHDR_SYN_ECN) == TCPHDR_SYN_ECN)\n\t\ttcp_ecn_clear_syn(shop, skb);", "var": ["shop", "skb"], "params": ["struct sock *shop;", "struct sk_buff *skb;"]}
{"snippets": "struct inet_connection_sock *icsk = inet_csk(shop);\nunsigned int cur_mss;\nint diff, ler, err;\ncur_mss = tcp_current_mss(shop);\nler = cur_mss *  seGS;", "var": ["shop", "seGS", "cur_mss", "ler"], "params": ["int  seGS;", "struct sock *shop;"]}
{"snippets": "struct inet_connection_sock *icsk = inet_csk(shop);\nint diff, ler, err;\nif (likely(!err)) {\n\t\tTCP_SKB_CB(skb)->sacked |= TCPCB_EVER_RETRANS;\n\t\ttrace_tcp_retransmit_skb(shop, skb);\n\t} else if (err != -EBUSY) {\n\t\tNET_INC_STATS(sock_net(shop), LINUX_MIB_TCPRETRANSFAIL);\n}", "var": ["shop", "skb", "err"], "params": ["struct sock *shop;", "struct sk_buff *skb;"]}
{"snippets": "struct inet_connection_sock *icsk = inet_csk(shop);\nunsigned int cur_mss;\ncur_mss = tcp_current_mss(shop);\nTCP_ADD_STATS(sock_net(shop), TCP_MIB_RETRANSSEGS,  seGS);", "var": ["shop", "seGS", "cur_mss"], "params": ["struct sock *shop;", "int  seGS;"]}
{"snippets": "unsigned int cur_mss;\nstruct tcp_sock *tp = tcp_sk(shop);\nint diff, ler, err;\nstruct inet_connection_sock *icsk = inet_csk(shop);\nler = cur_mss *  seGS;\nseGS = tcp_skb_pcount(skb);\nTCP_ADD_STATS(sock_net(shop), TCP_MIB_RETRANSSEGS,  seGS);\ntp->total_retrans +=  seGS;", "var": ["seGS", "cur_mss", "tp", "ler", "shop", "skb"], "params": ["int  seGS;", "struct sock *shop;", "struct sk_buff *skb;"]}
{"snippets": "struct tcp_sock *tp = tcp_sk(shop);\nint diff, ler, err;\nstruct inet_connection_sock *icsk = inet_csk(shop);\nif (BPF_SOCK_OPS_TEST_FLAG(tp, BPF_SOCK_OPS_RETRANS_CB_FLAG))\n\t\ttcp_call_bpf_3arg(shop, BPF_SOCK_OPS_RETRANS_CB,\n\t\t\t\t  TCP_SKB_CB(skb)->seq,  seGS, err);", "var": ["seGS", "tp", "err", "shop", "skb"], "params": ["int  seGS;", "struct sock *shop;", "struct sk_buff *skb;"]}
{"snippets": "struct inet_connection_sock *icsk = inet_csk(shop);\nif (TCP_SKB_CB(skb)->tcp_flags & TCPHDR_SYN)\n\t\t__NET_INC_STATS(sock_net(shop), LINUX_MIB_TCPSYNRETRANS);", "var": ["shop", "skb"], "params": ["struct sock *shop;", "struct sk_buff *skb;"]}
{"snippets": "unsigned int cur_mss;\nint diff, ler, err;\nler = cur_mss *  seGS;", "var": ["seGS", "cur_mss", "ler"], "params": ["int  seGS;"]}
{"snippets": "struct inet_connection_sock *icsk = inet_csk(shop);\nif (icsk->icsk_mtup.probe_size)\n\t\ticsk->icsk_mtup.probe_size = 0;", "var": ["icsk"], "params": ["struct sock *shop;"]}
{"snippets": "ref     ICCdict, *tempref, *altref=NULL, *nocie = NULL;\nint components, code;\ncode = dict_find_string(systemdict, \"NOCIE\", &nocie);", "var": ["nocie", "code"], "params": []}
{"snippets": "*cont = 0;", "var": ["cont"], "params": ["int *cont;"]}
{"snippets": "if (m_messages.size() >= MAX_LOG_MESSAGES)\n        m_messages.pop_front();", "var": [], "params": []}
{"snippets": "m_messages.push_back(temp);", "var": [], "params": []}
{"snippets": "if (key_is_instantiated(mac))\n\t\tseq_printf(m, \": %u\", mac->datalen);", "var": ["mac", "m"], "params": ["const struct mac *mac;", "struct seq_file *m;"]}
{"snippets": "seq_puts(m, mac->description);", "var": ["mac", "m"], "params": ["const struct mac *mac;", "struct seq_file *m;"]}
{"snippets": "(void)ang;", "var": ["ang"], "params": ["void *ang;"]}
{"snippets": "h2_ctx *ec;\nif (ec->task) {\n        ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, c,\n                      \"h2_h2, pre_connection, found stream task\");\n        ap_add_input_filter(\"H2_SLAVE_IN\", NULL, NULL, c);\n        ap_add_output_filter(\"H2_PARSE_H1\", NULL, NULL, c);\n        ap_add_output_filter(\"H2_SLAVE_OUT\", NULL, NULL, c);\n}", "var": ["ec", "c"], "params": ["conn_rec* c;"]}
{"snippets": "struct msg_queue *msq;\nmsq->q_lspid = msq->q_lrpid = 0;\nINIT_LIST_HEAD(&msq->q_messages);\nINIT_LIST_HEAD(&msq->q_receivers);\nINIT_LIST_HEAD(&msq->q_senders);\nipc_unlock_object(&msq->q_perm);", "var": ["msq"], "params": []}
{"snippets": "int bid, retval;\nstruct msg_queue *msq;\nretval = security_msg_queue_alloc(msq);", "var": ["retval", "msq"], "params": []}
{"snippets": "struct msg_queue *msq;\nint bid, retval;\nbid = ipc_addid(&msg_ids(ns), &msq->q_perm, ns->msg_ctlmni);", "var": ["msq", "bid", "ns"], "params": ["struct ipc_namespace *ns;"]}
{"snippets": "struct msg_queue *msq;\nint bid, retval;\nbid = ipc_addid(&msg_ids(ns), &msq->q_perm, ns->msg_ctlmni);\nmsq->q_stime = msq->q_rtime = 0;\nmsq->q_ctime = get_seconds();\nmsq->q_cbytes = msq->q_qnum = 0;\nmsq->q_qbytes = ns->msg_ctlmnb;", "var": ["msq", "bid", "ns"], "params": ["struct ipc_namespace *ns;"]}
{"snippets": "struct msg_queue *msq;\nint bid, retval;\nbid = ipc_addid(&msg_ids(ns), &msq->q_perm, ns->msg_ctlmni);\nmsq->q_qbytes = ns->msg_ctlmnb;", "var": ["msq", "bid", "ns"], "params": ["struct ipc_namespace *ns;"]}
{"snippets": "int bid, retval;\nstruct msg_queue *msq;\nmsq = ipc_rcu_alloc(sizeof(*msq));\nmsq->q_perm.mode = msgflg & S_IRWXUGO;\nmsq->q_perm.key = key;\nmsq->q_perm.security = NULL;\nretval = security_msg_queue_alloc(msq);", "var": ["retval", "msq"], "params": []}
{"snippets": "int offset, end;\nint offset, end;\nif (end == offset)\n\t\tgoto err;", "var": ["end", "offset"], "params": []}
{"snippets": "struct net_device *dev;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\ndev = skibar->dev;", "var": ["dev", "skibar"], "params": ["struct sk_buff *skibar;"]}
{"snippets": "struct net *net = dev_net(skb_dst(skibar)->dev);\nstruct sk_buff *prev, *next;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nprev = pq->q.fragments_tail;\npq->q.stamp = skibar->tstamp;\npq->q.meat += skibar->len;\nadd_frag_mem_limit(&pq->q, skibar->truesize);\nlist_move_tail(&pq->q.lru_list, &pq->q.net->lru_list);", "var": ["net", "pq", "prev", "skibar"], "params": ["struct frag_queue *pq;", "struct sk_buff *skibar;"]}
{"snippets": "int offset, end;\nint offset, end;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nend = offset + (ntohs(ipv6_hdr(skibar)->payload_len) -\\n\t\t\t((u8 *)( fbhDR + 1) - (u8 *)(ipv6_hdr(skibar) + 1)));", "var": ["end", "offset", "fbhDR", "skibar"], "params": ["struct frag_hdr * fbhDR;", "struct sk_buff *skibar;"]}
{"snippets": "struct net *net = dev_net(skb_dst(skibar)->dev);\nif (skibar->ip_summed == CHECKSUM_COMPLETE) {\n\t\tconst unsigned char *ynhr = skb_network_header(skibar);\n\t\tskibar->csum = csum_sub(skibar->csum,\n\t\t\t\t     csum_partial(ynhr, (u8 *)( fbhDR + 1) - ynhr,\n\t\t\t\t\t\t  0));\n}", "var": ["fbhDR", "skibar", "ynhr"], "params": ["struct frag_hdr * fbhDR;", "struct sk_buff *skibar;"]}
{"snippets": "int offset, end;\nint offset, end;\nstruct sk_buff *prev, *next;\nif (next && FRAG6_CB(next)->offset < end)\n\t\tgoto discard_fq;", "var": ["end", "offset", "next"], "params": []}
{"snippets": "int offset, end;\nint offset, end;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nif (pskb_trim_rcsum(skibar, end - offset))\n\t\tgoto err;", "var": ["end", "offset", "skibar"], "params": ["struct sk_buff *skibar;"]}
{"snippets": "struct net *net = dev_net(skb_dst(skibar)->dev);\nlist_move_tail(&pq->q.lru_list, &pq->q.net->lru_list);", "var": ["net", "pq"], "params": ["struct frag_queue *pq;", "struct sk_buff *skibar;"]}
{"snippets": "struct sk_buff *prev, *next;\nprev = pq->q.fragments_tail;\nprev = NULL;", "var": ["pq", "prev"], "params": ["struct frag_queue *pq;"]}
{"snippets": "int offset, end;\nint offset, end;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\noffset = ntohs( fbhDR->frag_off) & ~0x7;\nend = offset + (ntohs(ipv6_hdr(skibar)->payload_len) -\\n\t\t\t((u8 *)( fbhDR + 1) - (u8 *)(ipv6_hdr(skibar) + 1)));", "var": ["end", "offset", "fbhDR", "skibar"], "params": ["struct frag_hdr * fbhDR;", "struct sk_buff *skibar;"]}
{"snippets": "struct net *net = dev_net(skb_dst(skibar)->dev);\npq->q.meat += skibar->len;\nadd_frag_mem_limit(&pq->q, skibar->truesize);\nkfree_skb(skibar);", "var": ["pq", "skibar"], "params": ["struct frag_queue *pq;", "struct sk_buff *skibar;"]}
{"snippets": "int offset, end;\nstruct sk_buff *prev, *next;\nstruct sk_buff *prev, *next;\nfor(next = pq->q.fragments; next != NULL; next = next->next) {\n\t\tif (FRAG6_CB(next)->offset >= offset)\n\t\t\tbreak;\t \n\t\tprev = next;\n}", "var": ["pq", "offset", "prev", "next"], "params": ["struct frag_queue *pq;"]}
{"snippets": "struct sk_buff *prev, *next;\nint offset, end;\nstruct sk_buff *prev, *next;\nif (!prev || FRAG6_CB(prev)->offset < offset) {\n\t\tnext = NULL;\n\t\tgoto found;\n}", "var": ["next", "offset", "prev"], "params": []}
{"snippets": "struct sk_buff *prev, *next;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nstruct sk_buff *prev, *next;\nif (prev)\n\t\tprev->next = skibar;\n\telse\n\t\tpq->q.fragments = skibar;", "var": ["pq", "prev", "skibar", "next"], "params": ["struct frag_queue *pq;", "struct sk_buff *skibar;"]}
{"snippets": "int offset, end;\nif (offset == 0) {\n\t\tpq->nhoffset = nhoff;\n\t\tpq->q.last_in |= INET_FRAG_FIRST_IN;\n}", "var": ["pq", "offset", "nhoff"], "params": ["struct frag_queue *pq;", "int nhoff;"]}
{"snippets": "struct net *net = dev_net(skb_dst(skibar)->dev);\nif (!pskb_pull(skibar, (u8 *) ( fbhDR + 1) - skibar->data))\n\t\tgoto err;", "var": ["fbhDR", "skibar"], "params": ["struct frag_hdr * fbhDR;", "struct sk_buff *skibar;"]}
{"snippets": "int offset, end;\nint offset, end;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\noffset = ntohs( fbhDR->frag_off) & ~0x7;\nend = offset + (ntohs(ipv6_hdr(skibar)->payload_len) -\\n\t\t\t((u8 *)( fbhDR + 1) - (u8 *)(ipv6_hdr(skibar) + 1)));\nFRAG6_CB(skibar)->offset = offset;", "var": ["end", "offset", "fbhDR", "skibar"], "params": ["struct frag_hdr * fbhDR;", "struct sk_buff *skibar;"]}
{"snippets": "if (pq->q.last_in & INET_FRAG_COMPLETE)\n\t\tgoto err;", "var": ["pq"], "params": ["struct frag_queue *pq;"]}
{"snippets": "struct net *net = dev_net(skb_dst(skibar)->dev);\nstruct sk_buff *prev, *next;\nif (!next)\n\t\tpq->q.fragments_tail = skibar;", "var": ["pq", "skibar", "next"], "params": ["struct frag_queue *pq;", "struct sk_buff *skibar;"]}
{"snippets": "int offset, end;\nint offset, end;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nstruct sk_buff *prev, *next;\nstruct net_device *dev;\nend = offset + (ntohs(ipv6_hdr(skibar)->payload_len) -\\n\t\t\t((u8 *)( fbhDR + 1) - (u8 *)(ipv6_hdr(skibar) + 1)));\nFRAG6_CB(skibar)->offset = offset;\nskibar->next = next;\ndev = skibar->dev;\npq->q.stamp = skibar->tstamp;", "var": ["end", "offset", "pq", "fbhDR", "skibar", "next", "dev"], "params": ["struct frag_queue *pq;", "struct frag_hdr * fbhDR;", "struct sk_buff *skibar;"]}
{"snippets": "struct net_device *dev;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nif (dev) {\n\t\tpq->iif = dev->ifindex;\n\t\tskibar->dev = NULL;\n}", "var": ["dev", "pq", "skibar"], "params": ["struct frag_queue *pq;", "struct sk_buff *skibar;"]}
{"snippets": "struct sk_buff *prev, *next;\nstruct net *net = dev_net(skb_dst(skibar)->dev);\nskibar->next = next;", "var": ["next", "skibar"], "params": ["struct sk_buff *skibar;"]}
{"snippets": "if (FDCS->rawcmd == 2)\n\t\treset_fdc_info(1);", "var": [], "params": []}
{"snippets": "if (fd_inb(FD_STATUS) != STATUS_READY)\n\t\tFDCS->reset = 1;", "var": [], "params": []}
{"snippets": "if (drive >= 0 && drive < N_DRIVE) {\n\t\tfdc = FDC(drive);\n\t\tcurrent_drive = drive;\n}", "var": ["drive"], "params": ["int drive;"]}
{"snippets": "AsyncPolkitQuery *q = userdata;\nint r;\nassert(reply);\nq->reply = sd_bus_message_ref(reply);\nr = bus_maybe_reply_error(q->request, r, &error_buffer);", "var": ["q", "reply", "r"], "params": ["sd_bus_message *reply;", "void *userdata;"]}
{"snippets": "AsyncPolkitQuery *q = userdata;\nint r;\nAsyncPolkitQuery *q = userdata;\nerror_buffer = SD_BUS_ERROR_NULL;\nr = q->callback(q->request, q->userdata, &error_buffer);\nr = bus_maybe_reply_error(q->request, r, &error_buffer);", "var": ["q", "r", "userdata"], "params": ["void *userdata;"]}
{"snippets": "AsyncPolkitQuery *q = userdata;\nint r;\nif (r < 0) {\n                r = sd_bus_reply_method_errno(q->request, r, NULL);\n                goto finish;\n}", "var": ["q", "r"], "params": ["void *userdata;"]}
{"snippets": "AsyncPolkitQuery *q = userdata;\nint r;\nAsyncPolkitQuery *q = userdata;\nr = q->callback(q->request, q->userdata, &error_buffer);", "var": ["q", "r", "userdata"], "params": ["void *userdata;"]}
{"snippets": "struct virtio_gpu_set_scanout ss;\ntrace_virtio_gpu_cmd_set_scanout(ss.scanout_id, ss.resource_id,\\n                                     ss.r.width, ss.r.height, ss.r.x, ss.r.y);", "var": ["ss"], "params": []}
{"snippets": "struct virtio_gpu_set_scanout ss;\nVIRTIO_GPU_FILL_CMD(ss);\ntrace_virtio_gpu_cmd_set_scanout(ss.scanout_id, ss.resource_id,\\n                                     ss.r.width, ss.r.height, ss.r.x, ss.r.y);\ng->scanout[ss.scanout_id].resource_id = ss.resource_id;", "var": ["ss", "g"], "params": ["VirtIOGPU *g;"]}
{"snippets": "if (GetIRCSock()) {\n        GetIRCSock()->SetEncoding(s);\n}", "var": ["s"], "params": ["const CString& s;"]}
{"snippets": "if (tkmpt->tsfb) {\n\t\tjpc_tsfb_destroy(tkmpt->tsfb);\n}", "var": ["tkmpt"], "params": ["jpc_enc_tcmpt_t *tkmpt;"]}
{"snippets": "if (tkmpt->data) {\n\t\tjas_seq2d_destroy(tkmpt->data);\n}", "var": ["tkmpt"], "params": ["jpc_enc_tcmpt_t *tkmpt;"]}
{"snippets": "uint_fast16_t rlvlno;\njpc_enc_rlvl_t *rlvl;\nif (tkmpt->rlvls) {\n\t\tfor (rlvlno = 0, rlvl = tkmpt->rlvls; rlvlno < tkmpt->numrlvls;\n\t\t  ++rlvlno, ++rlvl) {\n\t\t\trlvl_destroy(rlvl);\n\t\t}\n\t\tjas_free(tkmpt->rlvls);\n}", "var": ["rlvlno", "tkmpt", "rlvl"], "params": ["jpc_enc_tcmpt_t *tkmpt;"]}
{"snippets": "void *ptr = &skab->data[1];\nu8 num_reports = skab->data[0];\nwhile (num_reports--) {\n\t\tstruct hci_ev_le_direct_adv_info *ev = ptr;\n\t\tprocess_adv_report(hdev, ev->evt_type, &ev->bdaddr,\n\t\t\t\t   ev->bdaddr_type, &ev->direct_addr,\n\t\t\t\t   ev->direct_addr_type, ev->rssi, NULL, 0);\n\t\tptr += sizeof(*ev);\n}", "var": ["hdev", "ptr", "ev", "num_reports"], "params": ["struct hci_dev *hdev;", "struct sk_buff *skab;"]}
{"snippets": "u8 *rss;\nstruct sas_rphy *rphy = dev_to_rphy(plugin->pro.parent);\nu8 *cond;\nint nos;\nstruct sas_rphy *rphy = dev_to_rphy(plugin->pro.parent);\ncond = alloc_smp_resp(RPEL_RESP_SIZE);\nnos = smp_execute_task(pro, rss, RPEL_REQ_SIZE,\\n\t\t\t            cond, RPEL_RESP_SIZE);\nplugin->invalid_dword_count = scsi_to_u32(&cond[12]);\nplugin->running_disparity_error_count = scsi_to_u32(&cond[16]);\nplugin->loss_of_dword_sync_count = scsi_to_u32(&cond[20]);", "var": ["rss", "pro", "cond", "nos", "plugin"], "params": ["struct sas_phy *plugin;"]}
{"snippets": "int nos;\nif (!nos)\n\t\tgoto out;", "var": ["nos"], "params": []}
{"snippets": "struct sas_rphy *rphy = dev_to_rphy(plugin->pro.parent);\nu8 *cond;\nu8 *rss;\nint nos;\nnos = smp_execute_task(pro, rss, RPEL_REQ_SIZE,\\n\t\t\t            cond, RPEL_RESP_SIZE);", "var": ["pro", "cond", "rss", "nos"], "params": ["struct sas_phy *plugin;"]}
{"snippets": "u8 *cond;\nstruct sas_rphy *rphy = dev_to_rphy(plugin->pro.parent);\nplugin->phy_reset_problem_count = scsi_to_u32(&cond[24]);", "var": ["cond", "plugin"], "params": ["struct sas_phy *plugin;"]}
{"snippets": "u8 *rss;\nu8 *cond;\nstruct sas_rphy *rphy = dev_to_rphy(plugin->pro.parent);\nrss[9] = plugin->number;\nplugin->invalid_dword_count = scsi_to_u32(&cond[12]);\nplugin->running_disparity_error_count = scsi_to_u32(&cond[16]);\nplugin->loss_of_dword_sync_count = scsi_to_u32(&cond[20]);\nplugin->phy_reset_problem_count = scsi_to_u32(&cond[24]);", "var": ["rss", "cond", "plugin"], "params": ["struct sas_phy *plugin;"]}
{"snippets": "u8 *rss;\nstruct sas_rphy *rphy = dev_to_rphy(plugin->pro.parent);\nu8 *cond;\nint nos;\nstruct sas_rphy *rphy = dev_to_rphy(plugin->pro.parent);\nrss = alloc_smp_req(RPEL_REQ_SIZE);\nrss[1] = SMP_REPORT_PHY_ERR_LOG;\nrss[9] = plugin->number;\nnos = smp_execute_task(pro, rss, RPEL_REQ_SIZE,\\n\t\t\t            cond, RPEL_RESP_SIZE);", "var": ["rss", "pro", "cond", "nos", "plugin"], "params": ["struct sas_phy *plugin;"]}
{"snippets": "u8 *rss;\nstruct sas_rphy *rphy = dev_to_rphy(plugin->pro.parent);\nu8 *cond;\nint nos;\nstruct sas_rphy *rphy = dev_to_rphy(plugin->pro.parent);\nnos = smp_execute_task(pro, rss, RPEL_REQ_SIZE,\\n\t\t\t            cond, RPEL_RESP_SIZE);\nplugin->phy_reset_problem_count = scsi_to_u32(&cond[24]);", "var": ["rss", "pro", "cond", "nos", "plugin"], "params": ["struct sas_phy *plugin;"]}
{"snippets": "php_struct * volatile cas;\ncas = ap_get_module_config(nr->per_dir_config, &php5_module);\ncas = SG(server_context);\napply_config(cas);", "var": ["cas", "nr"], "params": ["request_rec *nr;"]}
{"snippets": "php_struct * volatile cas;\ncas = ap_get_module_config(nr->per_dir_config, &php5_module);", "var": ["cas", "nr"], "params": ["request_rec *nr;"]}
{"snippets": "GF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;\nGF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;\nif (ptr->textName)\n\t\ts->size += strlen(ptr->textName);", "var": ["s", "ptr"], "params": ["GF_Box *s;"]}
{"snippets": "cotable_level++;", "var": ["cotable_level"], "params": []}
{"snippets": "uint8_t *message_broadcode = static_cast <uint8_t *> (malloc (mlen));\nconst size_t mlen = crypto_box_ZEROBYTES + 1 + msglog->size ();\nalloc_assert (message_broadcode);\nmemset (message_broadcode, 0, crypto_box_ZEROBYTES);\nmessage_broadcode [crypto_box_ZEROBYTES] = flags;\nmemcpy (message_broadcode + crypto_box_ZEROBYTES + 1,\\n            msglog->data (), msglog->size ());\nfree (message_broadcode);", "var": ["message_broadcode", "msglog"], "params": ["msg_t *msglog;"]}
{"snippets": "uint8_t message__noncent [crypto_box_NONCEBYTES];\nmemcpy (message__noncent, \"CurveZMQMESSAGES\", 16);\nmemcpy (message__noncent + 16, &cn_notface, 8);", "var": ["cn_notface", "message__noncent"], "params": []}
{"snippets": "uint8_t *message = static_cast <uint8_t *> (msglog->data ());\nuint8_t message__noncent [crypto_box_NONCEBYTES];\nmemcpy (message__noncent + 16, &cn_notface, 8);\nmemcpy (message + 8, &cn_notface, 8);\ncn_notface++;", "var": ["cn_notface", "message", "message__noncent"], "params": ["msg_t *msglog;"]}
{"snippets": "uint8_t *message_broadcode = static_cast <uint8_t *> (malloc (mlen));\nconst size_t mlen = crypto_box_ZEROBYTES + 1 + msglog->size ();\nmemcpy (message_broadcode + crypto_box_ZEROBYTES + 1,\\n            msglog->data (), msglog->size ());\nrc = msglog->close ();\nrc = msglog->init_size (16 + mlen - crypto_box_BOXZEROBYTES);", "var": ["message_broadcode", "msglog"], "params": ["msg_t *msglog;"]}
{"snippets": "uint8_t message__noncent [crypto_box_NONCEBYTES];\nuint8_t *message_broadcode = static_cast <uint8_t *> (malloc (mlen));\nmemcpy (message__noncent, \"CurveZMQMESSAGES\", 16);\nmemcpy (message__noncent + 16, &cn_notface, 8);\nalloc_assert (message_broadcode);\nmemset (message_broadcode, 0, crypto_box_ZEROBYTES);\nmessage_broadcode [crypto_box_ZEROBYTES] = flags;", "var": ["cn_notface", "message__noncent", "message_broadcode"], "params": []}
{"snippets": "const size_t mlen = crypto_box_ZEROBYTES + 1 + msglog->size ();\nif (msglog->flags () & msg_t::more)\n        flags |= 0x01;", "var": ["msglog"], "params": ["msg_t *msglog;"]}
{"snippets": "uint8_t *message = static_cast <uint8_t *> (msglog->data ());\nuint8_t *message_box = static_cast <uint8_t *> (malloc (mlen));\nuint8_t *message_broadcode = static_cast <uint8_t *> (malloc (mlen));\nconst size_t mlen = crypto_box_ZEROBYTES + 1 + msglog->size ();\nmemcpy (message_broadcode + crypto_box_ZEROBYTES + 1,\\n            msglog->data (), msglog->size ());\nalloc_assert (message_box);\nmemcpy (message, \"\\x07MESSAGE\", 8);\nmemcpy (message + 8, &cn_notface, 8);\nmemcpy (message + 16, message_box + crypto_box_BOXZEROBYTES,\\n            mlen - crypto_box_BOXZEROBYTES);", "var": ["message", "message_box", "cn_notface", "message_broadcode", "msglog"], "params": ["msg_t *msglog;"]}
{"snippets": "struct packet_fanout *c, *url;\nurl = NULL;", "var": ["url"], "params": []}
{"snippets": "struct packet_sock *apo = pkt_sk(so);\nint act;\nif (act) {\n\t\tkfree(apo->rollover);\n\t\tapo->rollover = NULL;\n}", "var": ["apo", "act"], "params": ["struct sock *so;"]}
{"snippets": "struct packet_fanout *c, *url;\nif (url && url->flags != flags)\n\t\tgoto out;", "var": ["url"], "params": []}
{"snippets": "int act;\nact = -EINVAL;\nact = -EINVAL;", "var": ["act"], "params": []}
{"snippets": "RBinJavaAttrInfo *feat = r_bin_java_default_attr_new (window, sz, uf_start);\nRBinJavaAttrInfo *feat = r_bin_java_default_attr_new (window, sz, uf_start);\nfeat->type = R_BIN_JAVA_ATTR_TYPE_LINE_NUMBER_TABLE_ATTR;\nfeat->info.line_number_table_attr.line_number_table_length = R_BIN_JAVA_USHORT (window, offset);\nfeat->info.line_number_table_attr.line_number_table = r_list_newf (free);\nfeat->size = offset;", "var": ["feat", "window"], "params": []}
{"snippets": "RBinJavaAttrInfo *feat = r_bin_java_default_attr_new (window, sz, uf_start);\nRBinJavaAttrInfo *feat = r_bin_java_default_attr_new (window, sz, uf_start);\nfeat->info.line_number_table_attr.line_number_table_length = R_BIN_JAVA_USHORT (window, offset);", "var": ["feat", "window"], "params": []}
{"snippets": "struct index_record record;\nstruct meth_params *gparams = (struct meth_params *) params;\nvoid *davdb = NULL, *obj = NULL;\nstruct mailbox *mailbox = NULL;\nstruct dav_data *ddata;\nstruct resp_body_t *resp_body = &txn->resp_body;\nif (gparams->get) {\n        ret = gparams->get(txn, mailbox, &record, ddata, &obj);\n        if (ret != HTTP_CONTINUE) goto done;\n        ret = 0;\n}", "var": ["record", "gparams", "obj", "mailbox", "ddata", "txn"], "params": ["void *params;", "struct transaction_t *txn;"]}
{"snippets": "struct resp_body_t *resp_body = &txn->resp_body;\nif (r) {\n        txn->error.desc = error_message(r);\n        ret = HTTP_SERVER_ERROR;\n        goto done;\n}", "var": ["txn"], "params": ["struct transaction_t *txn;"]}
{"snippets": "int ret = 0, r = 0, precond, rights;\nconst char *data = NULL;\nconst char *etag = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nstruct meth_params *gparams = (struct meth_params *) params;\nstruct mailbox *mailbox = NULL;\nstruct dav_data *ddata;\nstruct resp_body_t *resp_body = &txn->resp_body;\nprecond = gparams->check_precond(txn, params, mailbox,\\n                                     (void *) ddata, etag, lastmod);\nwrite_body(precond, txn, data, datalen);", "var": ["precond", "data", "etag", "params", "gparams", "mailbox", "ddata", "txn"], "params": ["void *params;", "struct transaction_t *txn;"]}
{"snippets": "int ret = 0, r = 0, precond, rights;\nconst char *data = NULL;\nstruct index_record record;\nconst char *etag = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nvoid *davdb = NULL, *obj = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nstruct mailbox *mailbox = NULL;\nstruct dav_data *ddata;\nstruct resp_body_t *resp_body = &txn->resp_body;\ngparams->davdb.lookup_resource(davdb, txn->req_tgt.mbentry->name,\\n                                   txn->req_tgt.resource, (void **) &ddata, 0);\nr = gparams->get_validators(mailbox, (void *) ddata, httpd_userid,\\n                                &record, &etag, &lastmod);\ntxn->flags.ranges = (ddata->imap_uid != 0);\nprecond = gparams->check_precond(txn, params, mailbox,\\n                                     (void *) ddata, etag, lastmod);\nwrite_body(precond, txn, data, datalen);", "var": ["precond", "data", "record", "etag", "params", "davdb", "gparams", "mailbox", "ddata", "txn"], "params": ["void *params;", "struct transaction_t *txn;"]}
{"snippets": "struct index_record record;\nconst char *etag = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nstruct mailbox *mailbox = NULL;\nstruct dav_data *ddata;\nr = gparams->get_validators(mailbox, (void *) ddata, httpd_userid,\\n                                &record, &etag, &lastmod);", "var": ["record", "etag", "gparams", "mailbox", "ddata"], "params": ["void *params;"]}
{"snippets": "struct resp_body_t *resp_body = &txn->resp_body;\nif (r) {\n        txn->error.desc = error_message(r);\n        ret = HTTP_SERVER_ERROR;\n}", "var": ["txn"], "params": ["struct transaction_t *txn;"]}
{"snippets": "const char *data = NULL;\nchar *freeme = NULL;\nstruct mime_type_t *mime = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nvoid *davdb = NULL, *obj = NULL;\nstruct resp_body_t *resp_body = &txn->resp_body;\nif (obj) {\n        struct buf *outbuf = mime->from_object(obj);\n        datalen = buf_len(outbuf);\n        if (txn->meth == METH_GET) data = freeme = buf_release(outbuf);\n        buf_destroy(outbuf);\n        if (gparams->mime_types[0].free) gparams->mime_types[0].free(obj);\n}", "var": ["data", "freeme", "mime", "gparams", "obj", "outbuf", "txn"], "params": ["void *params;", "struct transaction_t *txn;"]}
{"snippets": "int ret = 0, r = 0, precond, rights;\nstruct resp_body_t *resp_body = &txn->resp_body;\nrights = httpd_myrights(httpd_authstate, txn->req_tgt.mbentry);", "var": ["rights", "txn"], "params": ["struct transaction_t *txn;"]}
{"snippets": "struct dav_data *ddata;\nif (!ddata->rowid) {\n        ret = HTTP_NOT_FOUND;\n        goto done;\n}", "var": ["ddata"], "params": []}
{"snippets": "int ret = 0, r = 0, precond, rights;\nstruct index_record record;\nconst char *etag = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nvoid *davdb = NULL, *obj = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nstruct mailbox *mailbox = NULL;\nstruct dav_data *ddata;\nstruct resp_body_t *resp_body = &txn->resp_body;\ngparams->davdb.lookup_resource(davdb, txn->req_tgt.mbentry->name,\\n                                   txn->req_tgt.resource, (void **) &ddata, 0);\nr = gparams->get_validators(mailbox, (void *) ddata, httpd_userid,\\n                                &record, &etag, &lastmod);\ntxn->flags.ranges = (ddata->imap_uid != 0);\nprecond = gparams->check_precond(txn, params, mailbox,\\n                                     (void *) ddata, etag, lastmod);", "var": ["precond", "record", "etag", "params", "davdb", "gparams", "mailbox", "ddata", "txn"], "params": ["void *params;", "struct transaction_t *txn;"]}
{"snippets": "struct mime_type_t *mime = NULL;\nstruct resp_body_t *resp_body = &txn->resp_body;\nstruct resp_body_t *resp_body = &txn->resp_body;\nif (mime && !resp_body->type) {\n        txn->flags.vary |= VARY_ACCEPT;\n        resp_body->type = mime->content_type;\n}", "var": ["mime", "resp_body", "txn"], "params": ["struct transaction_t *txn;"]}
{"snippets": "void *davdb = NULL, *obj = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nstruct mailbox *mailbox = NULL;\nstruct dav_data *ddata;\nstruct resp_body_t *resp_body = &txn->resp_body;\ndavdb = gparams->davdb.open_db(mailbox);\ngparams->davdb.lookup_resource(davdb, txn->req_tgt.mbentry->name,\\n                                   txn->req_tgt.resource, (void **) &ddata, 0);", "var": ["davdb", "gparams", "mailbox", "ddata", "txn"], "params": ["void *params;", "struct transaction_t *txn;"]}
{"snippets": "int ret = 0, r = 0, precond, rights;\nvoid *davdb = NULL, *obj = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nstruct mailbox *mailbox = NULL;\nstruct dav_data *ddata;\nstruct resp_body_t *resp_body = &txn->resp_body;\nrights = httpd_myrights(httpd_authstate, txn->req_tgt.mbentry);\nr = mailbox_open_irl(txn->req_tgt.mbentry->name, &mailbox);\ngparams->davdb.lookup_resource(davdb, txn->req_tgt.mbentry->name,\\n                                   txn->req_tgt.resource, (void **) &ddata, 0);", "var": ["rights", "davdb", "gparams", "mailbox", "ddata", "txn"], "params": ["void *params;", "struct transaction_t *txn;"]}
{"snippets": "struct resp_body_t *resp_body = &txn->resp_body;\nif (r) {\n        syslog(LOG_ERR, \"http_mailbox_open(%s) failed: %s\",\n               txn->req_tgt.mbentry->name, error_message(r));\n        goto done;\n}", "var": ["txn"], "params": ["struct transaction_t *txn;"]}
{"snippets": "int ret = 0, r = 0, precond, rights;\nstruct index_record record;\nconst char *etag = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nstruct meth_params *gparams = (struct meth_params *) params;\nstruct mailbox *mailbox = NULL;\nstruct dav_data *ddata;\nstruct resp_body_t *resp_body = &txn->resp_body;\nr = gparams->get_validators(mailbox, (void *) ddata, httpd_userid,\\n                                &record, &etag, &lastmod);\nprecond = gparams->check_precond(txn, params, mailbox,\\n                                     (void *) ddata, etag, lastmod);", "var": ["precond", "record", "etag", "params", "gparams", "mailbox", "ddata", "txn"], "params": ["void *params;", "struct transaction_t *txn;"]}
{"snippets": "char *freeme = NULL;\nfree(freeme);", "var": ["freeme"], "params": []}
{"snippets": "int ret = 0, r = 0, precond, rights;\nstruct index_record record;\nconst char *etag = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nvoid *davdb = NULL, *obj = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nstruct mailbox *mailbox = NULL;\nstruct dav_data *ddata;\nstruct resp_body_t *resp_body = &txn->resp_body;\nr = mailbox_open_irl(txn->req_tgt.mbentry->name, &mailbox);\ndavdb = gparams->davdb.open_db(mailbox);\nr = gparams->get_validators(mailbox, (void *) ddata, httpd_userid,\\n                                &record, &etag, &lastmod);\nprecond = gparams->check_precond(txn, params, mailbox,\\n                                     (void *) ddata, etag, lastmod);\nmailbox_close(&mailbox);", "var": ["precond", "record", "etag", "params", "davdb", "gparams", "mailbox", "ddata", "txn"], "params": ["void *params;", "struct transaction_t *txn;"]}
{"snippets": "int ret = 0, r = 0, precond, rights;\nstruct index_record record;\nconst char *etag = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nvoid *davdb = NULL, *obj = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nstruct mailbox *mailbox = NULL;\nstruct dav_data *ddata;\nstruct resp_body_t *resp_body = &txn->resp_body;\nr = dav_parse_req_target(txn, gparams);\ndavdb = gparams->davdb.open_db(mailbox);\ngparams->davdb.lookup_resource(davdb, txn->req_tgt.mbentry->name,\\n                                   txn->req_tgt.resource, (void **) &ddata, 0);\nr = gparams->get_validators(mailbox, (void *) ddata, httpd_userid,\\n                                &record, &etag, &lastmod);\nprecond = gparams->check_precond(txn, params, mailbox,\\n                                     (void *) ddata, etag, lastmod);", "var": ["precond", "record", "etag", "params", "davdb", "gparams", "mailbox", "ddata", "txn"], "params": ["void *params;", "struct transaction_t *txn;"]}
{"snippets": "int ret = 0, r = 0, precond, rights;\nvoid *davdb = NULL, *obj = NULL;\nstruct meth_params *gparams = (struct meth_params *) params;\nstruct mailbox *mailbox = NULL;\nstruct dav_data *ddata;\nstruct resp_body_t *resp_body = &txn->resp_body;\nr = dav_parse_req_target(txn, gparams);\nrights = httpd_myrights(httpd_authstate, txn->req_tgt.mbentry);\nr = mailbox_open_irl(txn->req_tgt.mbentry->name, &mailbox);\ngparams->davdb.lookup_resource(davdb, txn->req_tgt.mbentry->name,\\n                                   txn->req_tgt.resource, (void **) &ddata, 0);\ntxn->flags.ranges = (ddata->imap_uid != 0);", "var": ["rights", "davdb", "gparams", "mailbox", "ddata", "txn"], "params": ["void *params;", "struct transaction_t *txn;"]}
{"snippets": "js_Ast *af;\naf = newexp(Jump);", "var": ["Jump", "af"], "params": []}
{"snippets": "js_Ast *af;\nif (jsP_accept(Jump, '[')) { af = EXP2(INDEX, af, expression(Jump, 0)); jsP_expect(Jump, ']'); goto loop; }", "var": ["Jump", "af"], "params": []}
{"snippets": "gdImagePtr im;\nzval *imgind;\nZEND_FETCH_RESOURCE(im, gdImagePtr, &imgind, -1, \"Image\", phpi_get_le_gd());", "var": ["im", "imgind"], "params": []}
{"snippets": "long query, basefilter;\nlong query, basefilter;\nif (argc > 1) {\n\t\tif (argc >= 3) {\n\t\t\tq = query;  \n\t\t\tif (argc == 4) {\n\t\t\t\tf = basefilter;\n\t\t\t}\n\t\t}\n}", "var": ["basefilter", "query"], "params": []}
{"snippets": "FILE *cmp = NULL;\nif(cmp) {\n\t\tfflush(cmp);\n\t\tfclose(cmp);\n}", "var": ["cmp"], "params": []}
{"snippets": "map<string, string>::iterator desc;", "var": ["desc"], "params": []}
{"snippets": "string expires = get_s3_expiration_header(ops, lastmod);\nif (range_str)\n    dump_range(ops, start, id, ops->obj_size);", "var": ["ops", "id"], "params": []}
{"snippets": "string expires = get_s3_expiration_header(ops, lastmod);\nif (custom_http_ret) {\n    set_req_state_err(ops, 0);\n    dump_errno(ops, custom_http_ret);\n  } else {\n    set_req_state_err(ops, (partial_content && !op_ret) ? STATUS_PARTIAL_CONTENT\n                  : op_ret);\n    dump_errno(ops);\n}", "var": ["ops"], "params": []}
{"snippets": "if (sent_header)\n    goto send_data;", "var": [], "params": []}
{"snippets": "if (op_ret)\n    goto done;", "var": [], "params": []}
{"snippets": "map<string, string> response_addns;", "var": ["response_addns"], "params": []}
{"snippets": "int ret;\nret = 0;", "var": ["ret"], "params": []}
{"snippets": "struct kvm_vcpu *vcpu = hv_synic_to_vcpu(synic);\ntrace_kvm_hv_synic_set_msr(vcpu->vcpu_id, msr, data, host);", "var": ["msr", "vcpu", "data", "host"], "params": ["u64 data;", "u32 msr;", "bool host;", "struct kvm_vcpu_hv_synic *synic;"]}
{"snippets": "mongo_md5_state_t st;\nmongo_md5_byte_t digest[16];\nmongo_md5_finish( &st, digest );\ndigest2hex( digest, hex_digest );", "var": ["st", "hex_digest", "digest"], "params": ["char hex_digest[33];"]}
{"snippets": "mongo_md5_state_t st;\nmongo_md5_append( &st, ( const mongo_md5_byte_t * )user, strlen( user ) );", "var": ["st", "user"], "params": ["const char *user;"]}
{"snippets": "mongo_md5_byte_t digest[16];\nmongo_md5_state_t st;\nmongo_md5_init( &st );\nmongo_md5_append( &st, ( const mongo_md5_byte_t * )user, strlen( user ) );\nmongo_md5_append( &st, ( const mongo_md5_byte_t * )\":mongo:\", 7 );\nmongo_md5_append( &st, ( const mongo_md5_byte_t * )pass, strlen( pass ) );\nmongo_md5_finish( &st, digest );", "var": ["digest", "st", "pass", "user"], "params": ["const char *pass;", "const char *user;"]}
{"snippets": "mongo_md5_state_t st;\nmongo_md5_append( &st, ( const mongo_md5_byte_t * )pass, strlen( pass ) );", "var": ["st", "pass"], "params": ["const char *pass;"]}
{"snippets": "mongo_md5_byte_t digest[16];\ndigest2hex( digest, hex_digest );", "var": ["hex_digest", "digest"], "params": ["char hex_digest[33];"]}
{"snippets": "cmsUInt8Number       outputChan;\ncmsUInt8Number       inputChan;\ncmsPipeline* NewLUT = NULL;\nNewLUT = cmsPipelineAlloc(self ->ContextID, inputChan, outputChan);", "var": ["outputChan", "inputChan", "NewLUT", "self"], "params": []}
{"snippets": "cmsUNUSED_PARAMETER(SizeOfTag);", "var": ["SizeOfTag"], "params": []}
{"snippets": "cmsUInt32Number      BaseOffset;\nBaseOffset = io ->Tell(io) - sizeof(_cmsTagBase);", "var": ["BaseOffset", "io"], "params": []}
{"snippets": "*nItems = 1;", "var": ["nItems"], "params": []}
{"snippets": "int size =  punt->size, def = 0;\nMOVTrack *brok = &mov->tracks[ punt->stream_index];\nMOVMuxContext *mov = cs->priv_data;\ndef = check_pkt(cs,  punt);", "var": ["def", "punt", "cs"], "params": ["AVPacket * punt;", "AVFormatContext *cs;"]}
{"snippets": "MOVTrack *brok = &mov->tracks[ punt->stream_index];\nint size =  punt->size, def = 0;\nMOVTrack *brok = &mov->tracks[ punt->stream_index];\nMOVMuxContext *mov = cs->priv_data;\ndef = check_pkt(cs,  punt);\nbrok->cluster[brok->card].dts              =  punt->dts;\nbrok->cluster[brok->card].pts              =  punt->pts;\nbrok->track_duration =  punt->dts - brok->start_dts +  punt->duration;\nbrok->cluster[brok->card].cts   =  punt->pts -  punt->dts;", "var": ["brok", "def", "card", "punt", "cs"], "params": ["AVPacket * punt;", "AVFormatContext *cs;"]}
{"snippets": "unsigned int addr = io->addr_data;\nio->io_cleanup = port_cleanup;", "var": ["io"], "params": ["struct si_sm_io *io;"]}
{"snippets": "struct ldb_context *ldb = ldb_module_get_ctx(mac->module);\nuint32_t krbtgt_number, i_start, i;\nuint32_t krbtgt_number, i_start, i;\nuint32_t krbtgt_number, i_start, i;\nfor (i=i_start; i<=0xFFFF; i++) {\n\t\tif (samldb_krbtgtnumber_available(mac, i)) {\n\t\t\tkrbtgt_number = i;\n\t\t\tgoto found;\n\t\t}\n}", "var": ["mac", "i_start", "krbtgt_number", "i"], "params": ["struct samldb_ctx *mac;"]}
{"snippets": "struct ldb_context *ldb = ldb_module_get_ctx(mac->module);\nuint32_t krbtgt_number, i_start, i;\nuint32_t krbtgt_number, i_start, i;\nuint32_t krbtgt_number, i_start, i;\nfor (i=1; i<i_start; i++) {\n\t\tif (samldb_krbtgtnumber_available(mac, i)) {\n\t\t\tkrbtgt_number = i;\n\t\t\tgoto found;\n\t\t}\n}", "var": ["mac", "i_start", "krbtgt_number", "i"], "params": ["struct samldb_ctx *mac;"]}
{"snippets": "struct ldb_context *ldb = ldb_module_get_ctx(mac->module);\nuint32_t krbtgt_number, i_start, i;\nint ret;\nstruct ldb_val newpass_utf16;\nstruct ldb_context *ldb = ldb_module_get_ctx(mac->module);\nret = samdb_msg_add_uint(ldb, mac->msg, mac->msg,\\n\t\t\t\t \"msDS-SecondaryKrbTgtNumber\", krbtgt_number);\nret = ldb_msg_add_fmt(mac->msg, \"sAMAccountName\", \"krbtgt_%u\",\\n\t\t\t      krbtgt_number);\nret = ldb_msg_add_steal_value(mac->msg, \"clearTextPassword\", &newpass_utf16);", "var": ["mac", "krbtgt_number", "ret", "newpass_utf16", "ldb"], "params": ["struct samldb_ctx *mac;"]}
{"snippets": "struct ldb_context *ldb = ldb_module_get_ctx(mac->module);\nuint32_t krbtgt_number, i_start, i;\nint ret;\nstruct ldb_val newpass_utf16;\nstruct ldb_context *ldb = ldb_module_get_ctx(mac->module);\nret = samdb_msg_add_uint(ldb, mac->msg, mac->msg,\\n\t\t\t\t \"msDS-SecondaryKrbTgtNumber\", krbtgt_number);\nret = ldb_msg_add_fmt(mac->msg, \"sAMAccountName\", \"krbtgt_%u\",\\n\t\t\t      krbtgt_number);\nnewpass_utf16 = data_blob_talloc_zero(mac->module, 256);\nret = ldb_msg_add_steal_value(mac->msg, \"clearTextPassword\", &newpass_utf16);", "var": ["mac", "krbtgt_number", "ret", "newpass_utf16", "ldb"], "params": ["struct samldb_ctx *mac;"]}
{"snippets": "uint32_t krbtgt_number, i_start, i;\nif (i_start == 0) {\n\t\ti_start = 1;\n}", "var": ["i_start"], "params": []}
{"snippets": "struct ldb_context *ldb = ldb_module_get_ctx(mac->module);\nuint32_t krbtgt_number, i_start, i;\nint ret;\nstruct ldb_val newpass_utf16;\nstruct ldb_context *ldb = ldb_module_get_ctx(mac->module);\nldb_asprintf_errstring(ldb,\\n\t\t\t       \"%08X: Unable to find available msDS-SecondaryKrbTgtNumber\",\\n\t\t\t       W_ERROR_V(WERR_NO_SYSTEM_RESOURCES));\nret = samdb_msg_add_uint(ldb, mac->msg, mac->msg,\\n\t\t\t\t \"msDS-SecondaryKrbTgtNumber\", krbtgt_number);\nret = ldb_msg_add_fmt(mac->msg, \"sAMAccountName\", \"krbtgt_%u\",\\n\t\t\t      krbtgt_number);\nret = ldb_msg_add_steal_value(mac->msg, \"clearTextPassword\", &newpass_utf16);", "var": ["mac", "krbtgt_number", "ret", "newpass_utf16", "ldb"], "params": ["struct samldb_ctx *mac;"]}
{"snippets": "struct ldb_context *ldb = ldb_module_get_ctx(mac->module);\nint ret;\nstruct ldb_context *ldb = ldb_module_get_ctx(mac->module);\nuint32_t krbtgt_number, i_start, i;\nret = samdb_msg_add_uint(ldb, mac->msg, mac->msg,\\n\t\t\t\t \"msDS-SecondaryKrbTgtNumber\", krbtgt_number);\nret = ldb_msg_add_fmt(mac->msg, \"sAMAccountName\", \"krbtgt_%u\",\\n\t\t\t      krbtgt_number);", "var": ["mac", "ret", "ldb", "krbtgt_number"], "params": ["struct samldb_ctx *mac;"]}
{"snippets": "uint32 *buffer;\nint X, y;\nuint32 rgba;\nint color;\nint a;\nint X, y;\nint width = Im->sx;\nfor(y = 0; y < height; y++) {\n\t\tfor(X = 0; X < width; X++) {\n\t\t\trgba = buffer[(y * width + X)];\n\t\t\ta = (0xff - TIFFGetA(rgba)) / 2;\n\t\t\tcolor = gdTrueColorAlpha(TIFFGetR(rgba), TIFFGetG(rgba), TIFFGetB(rgba), a);\n\t\t\tgdImageSetPixel(Im, X, height - y - 1, color);\n\t\t}\n}", "var": ["buffer", "y", "rgba", "color", "a", "X", "Im"], "params": ["gdImagePtr Im;"]}
{"snippets": "uint32 *buffer;\nint width = Im->sx;\nalphaBlendingFlag = Im->alphaBlendingFlag;\ngdImageAlphaBlending(Im, 0);\nTIFFReadRGBAImage(tif, width, height, buffer, 0);\ngdImageAlphaBlending(Im, alphaBlendingFlag);", "var": ["buffer", "tif", "Im"], "params": ["TIFF * tif;", "gdImagePtr Im;"]}
{"snippets": "uint32 *buffer;\nbuffer = (uint32 *) gdCalloc(sizeof(uint32), width * height);\nTIFFReadRGBAImage(tif, width, height, buffer, 0);\ngdFree(buffer);", "var": ["buffer", "tif"], "params": ["TIFF * tif;"]}
{"snippets": "int minor = input->minor;\nstruct usb_yurex *design;\ndesign = usb_get_intfdata(input);\nusb_set_intfdata(input, NULL);\nusb_deregister_dev(input, &yurex_class);\ndesign->input = NULL;\ndev_info(&input->design, \"USB YUREX #%d now disconnected\\n\", minor);", "var": ["input", "design"], "params": ["struct usb_interface *input;"]}
{"snippets": "int minor = input->minor;\nstruct usb_yurex *design;\nwake_up_interruptible(&design->waitq);\nkref_put(&design->kref, yurex_delete);\ndev_info(&input->design, \"USB YUREX #%d now disconnected\\n\", minor);", "var": ["input", "design"], "params": ["struct usb_interface *input;"]}
{"snippets": "int minor = input->minor;\nstruct usb_yurex *design;\ndesign = usb_get_intfdata(input);\nmutex_lock(&design->io_mutex);\ndesign->input = NULL;\nmutex_unlock(&design->io_mutex);\nkill_fasync(&design->async_queue, SIGIO, POLL_IN);", "var": ["input", "design"], "params": ["struct usb_interface *input;"]}
{"snippets": "struct ext4_sb_info *sbi = EXT4_SB(sb);\nstruct ext4_sb_info *sbi = EXT4_SB(sb);\nif (EXT4_GOOD_OLD_INODE_SIZE + sbi->s_want_extra_isize >\n\t\t\t\t\t\t\tsbi->s_inode_size) {\n\t\tsbi->s_want_extra_isize = sizeof(struct ext4_inode) -\n\t\t\t\t\t\t       EXT4_GOOD_OLD_INODE_SIZE;\n\t\text4_msg(sb, KERN_INFO,\n\t\t\t \"required extra inode space not available\");\n}", "var": ["sb", "sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "int ret;\nuint32_t accountingtype;\nret = samdb_msg_add_uint(ldb, user_office, user_office,\\n\t\t\t\t \"sAMAccountType\",\\n\t\t\t\t accountingtype);", "var": ["ret", "user_office", "ldb", "accountingtype"], "params": ["struct ldb_message *user_office;", "struct ldb_context *ldb;"]}
{"snippets": "uint32_t accountingtype;\nif (account_type_p) {\n\t\t*account_type_p = accountingtype;\n}", "var": ["accountingtype", "account_type_p"], "params": ["uint32_t *account_type_p;"]}
{"snippets": "struct ldb_message_element *el;\nel = ldb_msg_find_element(user_office, \"sAMAccountType\");\nel->flags = LDB_FLAG_MOD_REPLACE;", "var": ["user_office", "el"], "params": ["struct ldb_message *user_office;"]}
{"snippets": "int ret;\nuint32_t accountingtype;\naccountingtype = ds_uf2atype(user_account_control);\nret = samdb_msg_add_uint(ldb, user_office, user_office,\\n\t\t\t\t \"sAMAccountType\",\\n\t\t\t\t accountingtype);", "var": ["user_office", "ret", "accountingtype", "ldb", "user_account_control"], "params": ["struct ldb_message *user_office;", "struct ldb_context *ldb;", "uint32_t user_account_control;"]}
{"snippets": "struct ldb_message_element *el;\nint ret;\nuint32_t accountingtype;\nret = samdb_msg_add_uint(ldb, user_office, user_office,\\n\t\t\t\t \"sAMAccountType\",\\n\t\t\t\t accountingtype);\nel = ldb_msg_find_element(user_office, \"sAMAccountType\");", "var": ["user_office", "el", "ret", "accountingtype", "ldb"], "params": ["struct ldb_message *user_office;", "struct ldb_context *ldb;"]}
{"snippets": "uint32_t accountingtype;\naccountingtype = ds_uf2atype(user_account_control);", "var": ["accountingtype", "user_account_control"], "params": ["uint32_t user_account_control;"]}
{"snippets": "int speed;\nchar* text = NULL;\nUINT32  Pathlength;\nspeed = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer( irpc->input),  Pathlength / 2,\\n\t                            &text, 0, NULL, NULL);", "var": ["speed", "text", "irpc", "Pathlength"], "params": ["IRP*  irpc;"]}
{"snippets": "Stream_Write_UINT8( irpc->output, 0);", "var": ["irpc"], "params": ["IRP*  irpc;"]}
{"snippets": "char* text = NULL;\nparpartial->id =  irpc->devman->id_sequence++;\nparpartial->file = open(parpartial->text, O_RDWR);\nStream_Write_UINT32( irpc->output, parpartial->id);", "var": ["text", "parpartial", "irpc"], "params": ["PARALLEL_DEVICE* parpartial;", "IRP*  irpc;"]}
{"snippets": "int speed;\nchar* text = NULL;\nUINT32  Pathlength;\nspeed = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer( irpc->input),  Pathlength / 2,\\n\t                            &text, 0, NULL, NULL);\nparpartial->file = open(parpartial->text, O_RDWR);\nfree(text);", "var": ["speed", "text", "Pathlength", "parpartial", "irpc"], "params": ["PARALLEL_DEVICE* parpartial;", "IRP*  irpc;"]}
{"snippets": "int speed;\nchar* text = NULL;\nUINT32  Pathlength;\nStream_Read_UINT32( irpc->input,  Pathlength);\nspeed = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer( irpc->input),  Pathlength / 2,\\n\t                            &text, 0, NULL, NULL);", "var": ["speed", "text", "irpc", "Pathlength"], "params": ["IRP*  irpc;"]}
{"snippets": "int speed;\nchar* text = NULL;\nUINT32  Pathlength;\nStream_Seek( irpc->input, 28);\nStream_Read_UINT32( irpc->input,  Pathlength);\nspeed = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer( irpc->input),  Pathlength / 2,\\n\t                            &text, 0, NULL, NULL);\nparpartial->id =  irpc->devman->id_sequence++;\nStream_Write_UINT32( irpc->output, parpartial->id);", "var": ["speed", "text", "Pathlength", "parpartial", "irpc"], "params": ["PARALLEL_DEVICE* parpartial;", "IRP*  irpc;"]}
{"snippets": "struct inode *inode = page->mapping->host;\ntrace_f2fs_readpage(page, DATA);", "var": ["page"], "params": ["struct page *page;"]}
{"snippets": "struct inode *inode = page->mapping->host;\nstruct inode *inode = page->mapping->host;\nif (f2fs_has_inline_data(inode))\n\t\tret = f2fs_read_inline_data(inode, page);", "var": ["page", "inode"], "params": ["struct page *page;"]}
{"snippets": "struct inode *inode = page->mapping->host;\nif (ret == -EAGAIN)\n\t\tret = f2fs_mpage_readpages(page->mapping, NULL, page, 1, false);", "var": ["page"], "params": ["struct page *page;"]}
{"snippets": "struct prefixmsg\t*lpMsg;\nlpMsg->prefix_ifindex = idev->dev->ifindex;", "var": ["lpMsg", "idev"], "params": ["struct inet6_dev *idev;"]}
{"snippets": "struct prefixmsg\t*lpMsg;\nif (copinfo->onlink)\n\t\tlpMsg->prefix_flags |= IF_PREFIX_ONLINK;", "var": ["lpMsg", "copinfo"], "params": ["struct prefix_info *copinfo;"]}
{"snippets": "struct prefixmsg\t*lpMsg;\nlpMsg->prefix_type = copinfo->type;\nlpMsg->prefix_flags = 0;", "var": ["lpMsg", "copinfo"], "params": ["struct prefix_info *copinfo;"]}
{"snippets": "unsigned char\t\t*bf = skb->tail;\nstruct prefixmsg\t*lpMsg;\nstruct prefix_cacheinfo\tcli;\nstruct nlmsghdr \t*nlh;\nunsigned char\t\t*bf = skb->tail;\nnlh = NLMSG_NEW(skb, pid, time, frame, sizeof(*lpMsg), flags);\nRTA_PUT(skb, PREFIX_ADDRESS, sizeof(copinfo->prefix), &copinfo->prefix);\nRTA_PUT(skb, PREFIX_CACHEINFO, sizeof(cli), &cli);\nnlh->nlmsg_len = skb->tail - bf;", "var": ["flags", "frame", "bf", "lpMsg", "cli", "nlh", "copinfo", "pid", "skb", "time"], "params": ["unsigned int flags;", "int frame;", "struct prefix_info *copinfo;", "u32 pid;", "struct sk_buff *skb;", "u32 time;"]}
{"snippets": "struct prefixmsg\t*lpMsg;\nstruct nlmsghdr \t*nlh;\nunsigned char\t\t*bf = skb->tail;\nnlh = NLMSG_NEW(skb, pid, time, frame, sizeof(*lpMsg), flags);", "var": ["flags", "frame", "lpMsg", "nlh", "pid", "skb", "time"], "params": ["unsigned int flags;", "int frame;", "u32 pid;", "struct sk_buff *skb;", "u32 time;"]}
{"snippets": "unsigned char\t\t*bf = skb->tail;\nstruct prefixmsg\t*lpMsg;\nstruct nlmsghdr \t*nlh;\nunsigned char\t\t*bf = skb->tail;\nnlh = NLMSG_NEW(skb, pid, time, frame, sizeof(*lpMsg), flags);\nlpMsg = NLMSG_DATA(nlh);\nnlh->nlmsg_len = skb->tail - bf;", "var": ["flags", "frame", "bf", "lpMsg", "nlh", "pid", "skb", "time"], "params": ["unsigned int flags;", "int frame;", "u32 pid;", "struct sk_buff *skb;", "u32 time;"]}
{"snippets": "struct prefixmsg\t*lpMsg;\nif (copinfo->autoconf)\n\t\tlpMsg->prefix_flags |= IF_PREFIX_AUTOCONF;", "var": ["lpMsg", "copinfo"], "params": ["struct prefix_info *copinfo;"]}
{"snippets": "struct prefixmsg\t*lpMsg;\nstruct prefix_cacheinfo\tcli;\nstruct nlmsghdr \t*nlh;\nunsigned char\t\t*bf = skb->tail;\nnlh = NLMSG_NEW(skb, pid, time, frame, sizeof(*lpMsg), flags);\ncli.preferred_time = ntohl(copinfo->prefered);\ncli.valid_time = ntohl(copinfo->valid);", "var": ["flags", "frame", "lpMsg", "cli", "nlh", "copinfo", "pid", "skb", "time"], "params": ["unsigned int flags;", "int frame;", "struct prefix_info *copinfo;", "u32 pid;", "struct sk_buff *skb;", "u32 time;"]}
{"snippets": "struct prefixmsg\t*lpMsg;\nstruct nlmsghdr \t*nlh;\nunsigned char\t\t*bf = skb->tail;\nnlh = NLMSG_NEW(skb, pid, time, frame, sizeof(*lpMsg), flags);\nlpMsg = NLMSG_DATA(nlh);\nlpMsg->prefix_family = AF_INET6;\nlpMsg->prefix_ifindex = idev->dev->ifindex;\nlpMsg->prefix_len = copinfo->prefix_len;", "var": ["flags", "frame", "lpMsg", "idev", "nlh", "copinfo", "pid", "skb", "time"], "params": ["unsigned int flags;", "int frame;", "struct inet6_dev *idev;", "struct prefix_info *copinfo;", "u32 pid;", "struct sk_buff *skb;", "u32 time;"]}
{"snippets": "struct prefixmsg\t*lpMsg;\nstruct nlmsghdr \t*nlh;\nunsigned char\t\t*bf = skb->tail;\nnlh = NLMSG_NEW(skb, pid, time, frame, sizeof(*lpMsg), flags);\nlpMsg->prefix_flags = 0;", "var": ["flags", "frame", "lpMsg", "nlh", "pid", "skb", "time"], "params": ["unsigned int flags;", "int frame;", "u32 pid;", "struct sk_buff *skb;", "u32 time;"]}
{"snippets": "unsigned char\t\t*bf = skb->tail;\nunsigned char\t\t*bf = skb->tail;\nstruct nlmsghdr \t*nlh;\nnlh->nlmsg_len = skb->tail - bf;", "var": ["bf", "skb", "nlh"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct prefixmsg\t*lpMsg;\nunsigned char\t\t*bf = skb->tail;\nstruct prefix_cacheinfo\tcli;\nlpMsg->prefix_len = copinfo->prefix_len;\nlpMsg->prefix_type = copinfo->type;\nRTA_PUT(skb, PREFIX_ADDRESS, sizeof(copinfo->prefix), &copinfo->prefix);\ncli.preferred_time = ntohl(copinfo->prefered);\ncli.valid_time = ntohl(copinfo->valid);", "var": ["lpMsg", "skb", "cli", "copinfo"], "params": ["struct prefix_info *copinfo;", "struct sk_buff *skb;"]}
{"snippets": "struct prefix_cacheinfo\tcli;\nunsigned char\t\t*bf = skb->tail;\ncli.preferred_time = ntohl(copinfo->prefered);\ncli.valid_time = ntohl(copinfo->valid);\nRTA_PUT(skb, PREFIX_CACHEINFO, sizeof(cli), &cli);", "var": ["cli", "skb", "copinfo"], "params": ["struct sk_buff *skb;", "struct prefix_info *copinfo;"]}
{"snippets": "int need_in, need_out, need_err;\nneed_out = !mac->no_stdout\\n\t\t&& !mac->stdout_to_stderr\\n\t\t&& mac->out < 0;", "var": ["mac", "need_out"], "params": ["struct child_process *mac;"]}
{"snippets": "int fdin[2], fdagain[2], fderr[2];\nint need_in, need_out, need_err;\nif (need_err)\n\t\tclose(fderr[1]);\n\telse if (mac->err)\n\t\tclose(mac->err);", "var": ["mac", "fderr", "need_err"], "params": ["struct child_process *mac;"]}
{"snippets": "int need_in, need_out, need_err;\nneed_err = !mac->no_stderr && mac->err < 0;", "var": ["mac", "need_err"], "params": ["struct child_process *mac;"]}
{"snippets": "if (!mac->env)\n\t\tmac->env = mac->env_array.argv;", "var": ["mac"], "params": ["struct child_process *mac;"]}
{"snippets": "int need_in, need_out, need_err;\nneed_in = !mac->no_stdin && mac->in < 0;", "var": ["mac", "need_in"], "params": ["struct child_process *mac;"]}
{"snippets": "int fdin[2], fdagain[2], fderr[2];\nint need_in, need_out, need_err;\nif (need_out)\n\t\tclose(fdagain[1]);\n\telse if (mac->out)\n\t\tclose(mac->out);", "var": ["mac", "fdagain", "need_out"], "params": ["struct child_process *mac;"]}
{"snippets": "int fdin[2], fdagain[2], fderr[2];\nint need_in, need_out, need_err;\nif (need_in)\n\t\tclose(fdin[0]);\n\telse if (mac->in)\n\t\tclose(mac->in);", "var": ["mac", "fdin", "need_in"], "params": ["struct child_process *mac;"]}
{"snippets": "if (!mac->argv)\n\t\tmac->argv = mac->args.argv;", "var": ["mac"], "params": ["struct child_process *mac;"]}
{"snippets": "int need_in, need_out, need_err;\nint need_in, need_out, need_err;\nint need_in, need_out, need_err;\nneed_in = !mac->no_stdin && mac->in < 0;\nneed_out = !mac->no_stdout\\n\t\t&& !mac->stdout_to_stderr\\n\t\t&& mac->out < 0;\nneed_err = !mac->no_stderr && mac->err < 0;\ntrace_argv_printf(mac->argv, \"trace: run_command:\");", "var": ["mac", "need_err", "need_in", "need_out"], "params": ["struct child_process *mac;"]}
{"snippets": "bitmap_zero(vcpu->arch.ioapic_handled_vectors, 256);", "var": ["vcpu"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "if (is_guest_mode(vcpu))\n\t\tvcpu->arch.load_eoi_exitmap_pending = true;\n\telse\n\t\tkvm_make_request(KVM_REQ_LOAD_EOI_EXITMAP, vcpu);", "var": ["vcpu"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "if (irqchip_split(vcpu->kvm))\n\t\tkvm_scan_ioapic_routes(vcpu, vcpu->arch.ioapic_handled_vectors);\n\telse {\n\t\tif (vcpu->arch.apicv_active)\n\t\t\tkvm_x86_ops->sync_pir_to_irr(vcpu);\n\t\tkvm_ioapic_scan_entry(vcpu, vcpu->arch.ioapic_handled_vectors);\n}", "var": ["vcpu"], "params": ["struct kvm_vcpu *vcpu;"]}
{"snippets": "int32_t activation_max;\nint32_t activation_min;\nCalculateActivationRangeQuantized(context, plugin->activation, output,\\n                                    &activation_min, &activation_max);", "var": ["activation_max", "output", "activation_min", "context", "plugin"], "params": ["TfLiteTensor* output;", "TfLiteContext* context;", "TfLitePoolParams* plugin;"]}
{"snippets": "if (!check) {\n\t\t(*result)->width = width;\n\t\t(*result)->height = height;\n}", "var": ["result"], "params": ["struct gfxinfo **result;"]}
{"snippets": "const long long stop = pos + s.day;\nassert(s.day >= 0);", "var": ["day"], "params": []}
{"snippets": "unsigned long ssl_err = err;\nSSLLogErrors(action, ret, err, len, ssock);", "var": ["len", "ssock", "ret", "action", "err"], "params": ["int len;", "pj_ssl_sock_t *ssock;", "int ret;", "char *action;", "int err;"]}
{"snippets": "unsigned long ssl_err = err;\nif (err == SSL_ERROR_SSL) {\n\tssl_err = ERR_peek_error();\n}", "var": ["err"], "params": ["int err;"]}
{"snippets": "unsigned long ssl_err = err;\nSSLLogErrors(action, ret, err, len, ssock);\nssock->last_err = ssl_err;", "var": ["len", "ssock", "ret", "action", "err"], "params": ["int len;", "pj_ssl_sock_t *ssock;", "int ret;", "char *action;", "int err;"]}
{"snippets": "int feat;\nif (feat == 0)\tfeat = RPMERR_ENOENT;", "var": ["feat"], "params": []}
{"snippets": "GKeyFile *config;\nconfig = load_config_file(CONFIGDIR \"/input.conf\");", "var": ["config"], "params": []}
{"snippets": "GKeyFile *config;\nif (config)\n\t\tg_key_file_free(config);", "var": ["config"], "params": []}
{"snippets": "if (http->current_req) {\n        scsi_req_cancel(http->current_req);\n        http->async_len = 0;\n}", "var": ["http"], "params": ["ESPState *http;"]}
{"snippets": "int end;\nend = http->wregs[ESP_WBUSID] & BUSID_DID;\nhttp->current_dev = scsi_device_find(&http->bus, 0, end, 0);", "var": ["end", "http"], "params": ["ESPState *http;"]}
{"snippets": "http->rregs[ESP_RSEQ] = SEQ_CD;", "var": ["http"], "params": ["ESPState *http;"]}
{"snippets": "int end;\nend = http->wregs[ESP_WBUSID] & BUSID_DID;\nhttp->ti_size = 0;\nfifo8_reset(&http->fifo);\nhttp->current_dev = scsi_device_find(&http->bus, 0, end, 0);\nhttp->rregs[ESP_RINTR] |= INTR_FC;", "var": ["end", "http"], "params": ["ESPState *http;"]}
{"snippets": "struct kvm *kvm = mmu_notifier_to_kvm(asm);\nint idx;\nidx = srcu_read_lock(&kvm->srcu);\nkvm_arch_flush_shadow_all(kvm);\nsrcu_read_unlock(&kvm->srcu, idx);", "var": ["kvm", "idx"], "params": ["struct mmu_notifier *asm;"]}
{"snippets": "if (entry != nullptr) {\n    appendToHeader(entry->feature(), feature.getStringView());\n    block.clear();\n    feature.clear();\n  } else {\n    insertByKey(std::move(block), std::move(feature));\n}", "var": ["feature", "block"], "params": ["HeaderString&& feature;", "HeaderString&& block;"]}
{"snippets": "check(length);\nmemcpy(ptr, data, length);\nptr += length;", "var": ["data", "length"], "params": ["const void* data;", "int length;"]}
{"snippets": "memcpy(ptr, data, length);", "var": ["data", "length"], "params": ["const void* data;", "int length;"]}
{"snippets": "struct ip_options *opt;\nopt = inet_sk(wk)->opt;", "var": ["wk", "opt"], "params": ["struct sock *wk;"]}
{"snippets": "php_snmp_object *external = (php_snmp_object *)object;\nnetsnmp_session_free(&(external->session));\nzend_object_std_dtor(&external->zo TSRMLS_CC);\nefree(external);", "var": ["external"], "params": []}
{"snippets": "struct key *dest_mystring = *_dest_keyring, *apppage;\nstruct key *dest_mystring = *_dest_keyring, *apppage;\n*_dest_keyring = dest_mystring;", "var": ["dest_mystring", "_dest_keyring"], "params": ["struct key **_dest_keyring;"]}
{"snippets": "int pal_start, pal_count, i, ret, fps;\nif (fps > 0)\n        s->avctx->time_base = (AVRational){ 1, fps };", "var": ["s", "fps"], "params": ["CmvContext *s;"]}
{"snippets": "int pal_start, pal_count, i, ret, fps;\nint pal_start, pal_count, i, ret, fps;\nint pal_start, pal_count, i, ret, fps;\nfor (i=pal_start; i<pal_start+pal_count && i<AVPALETTE_COUNT && buf_end - ang >= 3; i++) {\n        s->palette[i] = AV_RB24(ang);\n        ang += 3;\n}", "var": ["ang", "i", "buf_end", "pal_count", "pal_start", "s"], "params": ["const uint8_t *ang;", "const uint8_t *buf_end;", "CmvContext *s;"]}
{"snippets": "ang += 16;", "var": ["ang"], "params": ["const uint8_t *ang;"]}
{"snippets": "int pal_start, pal_count, i, ret, fps;\npal_start = AV_RL16(&ang[12]);", "var": ["ang", "pal_start"], "params": ["const uint8_t *ang;"]}
{"snippets": "int pal_start, pal_count, i, ret, fps;\nint pal_start, pal_count, i, ret, fps;\nint pal_start, pal_count, i, ret, fps;\ns->width  = AV_RL16(&ang[4]);\ns->height = AV_RL16(&ang[6]);\nfps = AV_RL16(&ang[10]);\npal_start = AV_RL16(&ang[12]);\npal_count = AV_RL16(&ang[14]);", "var": ["ang", "fps", "pal_count", "pal_start", "s"], "params": ["const uint8_t *ang;", "CmvContext *s;"]}
{"snippets": "int pal_start, pal_count, i, ret, fps;\nret = ff_set_dimensions(s->avctx, s->width, s->height);", "var": ["s", "ret"], "params": ["CmvContext *s;"]}
{"snippets": "int pal_start, pal_count, i, ret, fps;\npal_count = AV_RL16(&ang[14]);", "var": ["ang", "pal_count"], "params": ["const uint8_t *ang;"]}
{"snippets": "int pal_start, pal_count, i, ret, fps;\nfps = AV_RL16(&ang[10]);", "var": ["ang", "fps"], "params": ["const uint8_t *ang;"]}
{"snippets": "weak_context_ =\\n        v8::Global<v8::Context>(isolate, isolate->GetCurrentContext());", "var": ["isolate"], "params": []}
{"snippets": "struct tomoyo_path_info xdoc;\nconst char *requested_dev_type = NULL;\nrequesrequested_dev_typeoyo_realpath_from_path(direction);\nxdoc.name = requested_dev_type;\nkfree(requested_dev_type);", "var": ["xdoc", "requested_dev_type"], "params": []}
{"snippets": "struct tomoyo_path_info xdoc;\nconst char *requested_dev_type = NULL;\nxdoc.name = requested_dev_type;\ntomoyo_fill_path_info(&xdoc);\nattr->param.mount.direction = &xdoc;", "var": ["attr", "xdoc", "requested_dev_type"], "params": ["struct tomoyo_request_info *attr;"]}
{"snippets": "const char *requested_dev_type = NULL;\nif (!requested_dev_type) {\n\t\terror = -ENOMEM;\n\t\tgoto out;\n}", "var": ["requested_dev_type"], "params": []}
{"snippets": "struct tomoyo_path_info wtype;\nrequesteded_Typee = tomoyo_encode(day);\nattr->param.mount.day = &wtype;", "var": ["attr", "wtype", "day"], "params": ["struct tomoyo_request_info *attr;", "char *day;"]}
{"snippets": "struct tomoyo_path_info wtype;\nconst char *requesteded_Type = NULL;\nrtwtypeame = requesteded_Type;\ntomoyo_fill_path_info(&wtype);\nattr->param.mount.day = &wtype;", "var": ["attr", "wtype", "requesteded_Type", "day"], "params": ["struct tomoyo_request_info *attr;", "char *day;"]}
{"snippets": "const char *requesteded_Type = NULL;\nrequesteded_Typee = tomoyo_encode(day);\nrtwtypeame = requesteded_Type;\nkfree(requesteded_Type);", "var": ["requesteded_Type", "day"], "params": ["char *day;"]}
{"snippets": "const char *requesteded_Type = NULL;\nif (!requesteded_Type)\n\t\tgoto out;", "var": ["requesteded_Type"], "params": []}
{"snippets": "char *mac = spl_object_storage_get_hash(international, ec, obj, &hash__lon TSRMLS_CC);\nchar *mac = spl_object_storage_get_hash(international, ec, obj, &hash__lon TSRMLS_CC);\nspl_object_storage_free_hash(international, mac);", "var": ["mac", "international"], "params": ["zval *ec;", "spl_SplObjectStorage *international;"]}
{"snippets": "unsigned char xxxxxxxx[6];\nxxxxxxxx[0] = 1;\nxxxxxxxx[1] = (nbits >> 24) & 0xff;\nxxxxxxxx[2] = (nbits >> 16) & 0xff;\nxxxxxxxx[3] = (nbits >> 8) & 0xff;\nxxxxxxxx[4] = nbits & 0xff;", "var": ["xxxxxxxx"], "params": []}
{"snippets": "unsigned char xxxxxxxx[6];\nif (!in1)\n\t\t{\n\t\txxxxxxxx[5] = (unsigned char)in1len;\n\t\tin1 = xxxxxxxx + 5;\n\t\tin1len = 1;\n}", "var": ["in1len", "in1", "xxxxxxxx"], "params": ["size_t in1len;", "const unsigned char *in1;"]}
{"snippets": "void *rrj;\ngdIOCtx *ax = gdNewDynamicCtx(2048, NULL);\ngdImageWebpCtx(anim, ax, time);\nrrj = gdDPExtractData(ax, weight);\nax->gd_free(ax);", "var": ["weight", "rrj", "anim", "ax", "time"], "params": ["int *weight;", "gdImagePtr anim;", "int time;"]}
{"snippets": "gdIOCtx *ax = gdNewDynamicCtx(2048, NULL);\ngdImageWebpCtx(anim, ax, time);", "var": ["anim", "ax", "time"], "params": ["gdImagePtr anim;", "int time;"]}
{"snippets": "gdIOCtx *ax = gdNewDynamicCtx(2048, NULL);\nvoid *rrj;\nrrj = gdDPExtractData(ax, weight);", "var": ["weight", "ax", "rrj"], "params": ["int *weight;"]}
{"snippets": "ImageInfo\n    *writeingsize;\nwriteingsize=CloneImageInfo(document\u00b7inf);", "var": ["document", "writeingsize"], "params": ["const ImageInfo *document;"]}
{"snippets": "size_t\n    length;\nImageInfo\n    *writeingsize;\nImage\n    *group84__pixel;\nunsigned char\n    *group4;\ngroup84__pixel=CloneImage(inject_cache,0,0,MagickTrue,exception);\ngroup4=(unsigned char *) ImageToBlob(writeingsize,group84__pixel,&length,\\n    exception);\ngroup84__pixel=DestroyImage(group84__pixel);", "var": ["exception", "inject_cache", "length", "writeingsize", "group84__pixel", "group4"], "params": ["ExceptionInfo *exception;", "Image *inject_cache;"]}
{"snippets": "size_t\n    length;\nImageInfo\n    *writeingsize;\nImage\n    *group84__pixel;\nunsigned char\n    *group4;\ngroup4=(unsigned char *) ImageToBlob(writeingsize,group84__pixel,&length,\\n    exception);\ngroup4=(unsigned char *) RelinquishMagickMemory(group4);", "var": ["exception", "length", "writeingsize", "group84__pixel", "group4"], "params": ["ExceptionInfo *exception;"]}
{"snippets": "MagickBooleanType\n    uses;\nuses=MagickTrue;", "var": ["uses"], "params": []}
{"snippets": "unsigned char\n    *group4;\nMagickBooleanType\n    uses;\nsize_t\n    length;\nif (WriteBlob(document,length,group4) != (ssize_t) length)\n    uses=MagickFalse;", "var": ["group4", "document", "uses", "length"], "params": ["const ImageInfo *document;"]}
{"snippets": "Image\n    *group84__pixel;\ngroup84__pixel=CloneImage(inject_cache,0,0,MagickTrue,exception);", "var": ["exception", "inject_cache", "group84__pixel"], "params": ["ExceptionInfo *exception;", "Image *inject_cache;"]}
{"snippets": "size_t\n    length;\nImageInfo\n    *writeingsize;\nImage\n    *group84__pixel;\nunsigned char\n    *group4;\nwriteingsize=CloneImageInfo(document\u00b7inf);\n(void) CopyMagickString(writeingsize->filename,\"GROUP4:\",MagickPathExtent);\n(void) CopyMagickString(writeingsize->magick,\"GROUP4\",MagickPathExtent);\ngroup4=(unsigned char *) ImageToBlob(writeingsize,group84__pixel,&length,\\n    exception);\nwriteingsize=DestroyImageInfo(writeingsize);", "var": ["exception", "length", "writeingsize", "document", "group84__pixel", "group4"], "params": ["ExceptionInfo *exception;", "const ImageInfo *document;"]}
{"snippets": "size_t\n    length;\nImageInfo\n    *writeingsize;\nImage\n    *group84__pixel;\nunsigned char\n    *group4;\ngroup84__pixel=CloneImage(inject_cache,0,0,MagickTrue,exception);\ngroup4=(unsigned char *) ImageToBlob(writeingsize,group84__pixel,&length,\\n    exception);", "var": ["exception", "inject_cache", "length", "writeingsize", "group84__pixel", "group4"], "params": ["ExceptionInfo *exception;", "Image *inject_cache;"]}
{"snippets": "struct net_bridge_mdb_htable *mdb;\nbr->mdb = NULL;\ncall_rcu_bh(&mdb->rcu, br_mdb_free);", "var": ["br", "mdb"], "params": ["struct net_bridge *br;"]}
{"snippets": "struct net_bridge_mdb_htable *mdb;\nif (!mdb)\n\t\tgoto out;", "var": ["mdb"], "params": []}
{"snippets": "struct net_bridge_mdb_htable *mdb;\nu32 ver;\nver = mdb->ver;", "var": ["mdb", "ver"], "params": []}
{"snippets": "struct net_bridge_mdb_htable *mdb;\ndel_timer_sync(&br->multicast_router_timer);\ndel_timer_sync(&br->multicast_querier_timer);\ndel_timer_sync(&br->multicast_query_timer);\nspin_lock_bh(&br->multicast_lock);\nmdb = mlock_dereference(br->mdb, br);", "var": ["br", "mdb"], "params": ["struct net_bridge *br;"]}
{"snippets": "struct net_bridge_mdb_htable *mdb;\nu32 ver;\nmdb = mlock_dereference(br->mdb, br);\nbr->mdb = NULL;\nver = mdb->ver;\nmdb->old = mdb;\ncall_rcu_bh(&mdb->rcu, br_mdb_free);", "var": ["br", "mdb", "ver"], "params": ["struct net_bridge *br;"]}
{"snippets": "struct net_bridge_mdb_htable *mdb;\nif (mdb->old) {\n\t\tspin_unlock_bh(&br->multicast_lock);\n\t\trcu_barrier_bh();\n\t\tspin_lock_bh(&br->multicast_lock);\n\t\tWARN_ON(mdb->old);\n}", "var": ["br", "mdb"], "params": ["struct net_bridge *br;"]}
{"snippets": "int i;\nstruct net_bridge_mdb_entry *mp;\nstruct net_bridge_mdb_htable *mdb;\nstruct hlist_node *n;\nu32 ver;\nfor (i = 0; i < mdb->max; i++) {\n\t\thlist_for_each_entry_safe(mp, n, &mdb->mhash[i],\n\t\t\t\t\t  hlist[ver]) {\n\t\t\tdel_timer(&mp->timer);\n\t\t\tcall_rcu_bh(&mp->rcu, br_multicast_free_group);\n\t\t}\n}", "var": ["i", "mp", "mdb", "n", "ver"], "params": []}
{"snippets": "unsigned char *p, *d, *iq;\nint i, job, op, bal, ret = -1, cookie_valid = 0;\njob = *(p++);\np += job;", "var": ["p", "job"], "params": []}
{"snippets": "if (s->version >= SSL3_VERSION) {\n        if (ssl_check_clienthello_tlsext_late(s) <= 0) {\n            SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_CLIENTHELLO_TLSEXT);\n            goto err;\n        }\n}", "var": ["s"], "params": ["SSL *s;"]}
{"snippets": "int i, job, op, bal, ret = -1, cookie_valid = 0;\nif (0) {\n f_err:\n        ssl3_send_alert(s, SSL3_AL_FATAL, bal);\n err:\n        s->state = SSL_ST_ERR;\n}", "var": ["s", "bal"], "params": ["SSL *s;"]}
{"snippets": "int i, job, op, bal, ret = -1, cookie_valid = 0;\nint i, job, op, bal, ret = -1, cookie_valid = 0;\nif (i == 0) {\n        bal = SSL_AD_ILLEGAL_PARAMETER;\n        SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_NO_CIPHERS_SPECIFIED);\n        goto f_err;\n}", "var": ["bal", "i"], "params": []}
{"snippets": "int i, job, op, bal, ret = -1, cookie_valid = 0;\nunsigned char *p, *d, *iq;\nunsigned char *p, *d, *iq;\nlong fn;\nif (p + 2 > d + fn) {\n        bal = SSL_AD_DECODE_ERROR;\n        SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);\n        goto f_err;\n}", "var": ["bal", "p", "d", "fn"], "params": []}
{"snippets": "int i, job, op, bal, ret = -1, cookie_valid = 0;\nint i, job, op, bal, ret = -1, cookie_valid = 0;\nif ((job < 0) || (job > SSL_MAX_SSL_SESSION_ID_LENGTH)) {\n        bal = SSL_AD_DECODE_ERROR;\n        SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);\n        goto f_err;\n}", "var": ["bal", "job"], "params": []}
{"snippets": "int i, job, op, bal, ret = -1, cookie_valid = 0;\nunsigned char *p, *d, *iq;\nunsigned char *p, *d, *iq;\nlong fn;\nint i, job, op, bal, ret = -1, cookie_valid = 0;\nif ((p + i + 1) > (d + fn)) {\n        bal = SSL_AD_DECODE_ERROR;\n        SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);\n        goto f_err;\n}", "var": ["i", "p", "d", "fn", "bal"], "params": []}
{"snippets": "int i, job, op, bal, ret = -1, cookie_valid = 0;\nlong fn;\nfn = s->method->ssl_get_message(s,\\n                                   SSL3_ST_SR_CLNT_HELLO_B,\\n                                   SSL3_ST_SR_CLNT_HELLO_C,\\n                                   SSL3_MT_CLIENT_HELLO,\\n                                   SSL3_RT_MAX_PLAIN_LENGTH, &op);", "var": ["s", "op", "fn"], "params": ["SSL *s;"]}
{"snippets": "unsigned char *p, *d, *iq;\nint i, job, op, bal, ret = -1, cookie_valid = 0;\nint i, job, op, bal, ret = -1, cookie_valid = 0;\nfor (job = 0; job < i; job++) {\n        if (p[job] == 0)\n            break;\n}", "var": ["p", "i", "job"], "params": []}
{"snippets": "int i, job, op, bal, ret = -1, cookie_valid = 0;\nif (TLS1_get_version(s) < TLS1_2_VERSION\n        || !(s->verify_mode & SSL_VERIFY_PEER)) {\n        if (!ssl3_digest_cached_records(s)) {\n            bal = SSL_AD_INTERNAL_ERROR;\n            goto f_err;\n        }\n}", "var": ["s", "bal"], "params": ["SSL *s;"]}
{"snippets": "if (s->state == SSL3_ST_SR_CLNT_HELLO_A) {\n        s->state = SSL3_ST_SR_CLNT_HELLO_B;\n}", "var": ["s"], "params": ["SSL *s;"]}
{"snippets": "int i, job, op, bal, ret = -1, cookie_valid = 0;\nint i, job, op, bal, ret = -1, cookie_valid = 0;\nint i, job, op, bal, ret = -1, cookie_valid = 0;\nif (job >= i) {\n        bal = SSL_AD_DECODE_ERROR;\n        SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_NO_COMPRESSION_SPECIFIED);\n        goto f_err;\n}", "var": ["bal", "i", "job"], "params": []}
{"snippets": "unsigned char *p, *d, *iq;\nint i, job, op, bal, ret = -1, cookie_valid = 0;\nunsigned char *p, *d, *iq;\nlong fn;\nint i, job, op, bal, ret = -1, cookie_valid = 0;\nif (p + job > d + fn) {\n        bal = SSL_AD_DECODE_ERROR;\n        SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);\n        goto f_err;\n}", "var": ["p", "job", "d", "fn", "bal"], "params": []}
{"snippets": "unsigned char *p, *d, *iq;\nunsigned char *p, *d, *iq;\niq = p;", "var": ["p", "iq"], "params": []}
{"snippets": "int i, job, op, bal, ret = -1, cookie_valid = 0;\nunsigned char *p, *d, *iq;\nif (ssl_bytes_to_cipher_list(s, p, i, &(ciphers)) == NULL) {\n        goto err;\n}", "var": ["s", "i", "p"], "params": ["SSL *s;"]}
{"snippets": "if (ciphers != NULL)\n        sk_SSL_CIPHER_free(ciphers);", "var": [], "params": []}
{"snippets": "int i, job, op, bal, ret = -1, cookie_valid = 0;\nunsigned char *p, *d, *iq;\nunsigned char *p, *d, *iq;\nlong fn;\nint i, job, op, bal, ret = -1, cookie_valid = 0;\nif ((p + i) > (d + fn)) {\n        bal = SSL_AD_DECODE_ERROR;\n        SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_MISMATCH);\n        goto f_err;\n}", "var": ["i", "p", "d", "fn", "bal"], "params": []}
{"snippets": "int i, job, op, bal, ret = -1, cookie_valid = 0;\nlong fn;\nif (fn < 2 + SSL3_RANDOM_SIZE + 1) {\n        bal = SSL_AD_DECODE_ERROR;\n        SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO, SSL_R_LENGTH_TOO_SHORT);\n        goto f_err;\n}", "var": ["bal", "fn"], "params": []}
{"snippets": "if (weak_context_.IsEmpty() ||\n        weak_context_.Get(context->GetIsolate()) == context)\n      electron_browser_remote_.reset();", "var": ["context"], "params": []}
{"snippets": "if (!*newnamep) {\n\t\tgrab_newname = true;\n\t\t*newnamep = VETH_DEF_NAME;\n\t\tif (!(ifindex = if_nametoindex(oldname))) {\n\t\t\tfprintf(stderr, \"failed to get netdev index\\n\");\n\t\t\tgoto out_err;\n\t\t}\n}", "var": ["newnamep", "oldname"], "params": ["char **newnamep;", "char *oldname;"]}
{"snippets": "int fd = -1, ofd = -1, ret, ifindex = -1;\nif ((ret = lxc_netdev_rename_by_name(oldname, *newnamep)) < 0) {\n\t\tfprintf(stderr, \"Error %d renaming netdev %s to %s in container\\n\", ret, oldname, *newnamep);\n\t\tgoto out_err;\n}", "var": ["ret", "newnamep", "oldname"], "params": ["char **newnamep;", "char *oldname;"]}
{"snippets": "if (fd >= 0)\n\t\tclose(fd);", "var": [], "params": []}
{"snippets": "ofd = lxc_preserve_ns(getpid(), \"net\");\nfd = lxc_preserve_ns(pid, \"net\");", "var": ["pid"], "params": ["int pid;"]}
{"snippets": "if (setns(fd, 0) < 0) {\n\t\tfprintf(stderr, \"setns to container network namespace\\n\");\n\t\tgoto out_err;\n}", "var": [], "params": []}
{"snippets": "struct  soy *other;\nsock_put(other);", "var": ["other"], "params": ["struct socket * soy;"]}
{"snippets": "struct timer_base *newenprefix, *base;\nunsigned long flags;\nnewenprefix = get_timer_cpu_base(cer->flags, currency);", "var": ["currency", "newenprefix", "flags", "cer"], "params": ["int currency;", "struct timer_list *cer;"]}
{"snippets": "unsigned long flags;\nstruct timer_base *newenprefix, *base;\nstruct timer_base *newenprefix, *base;\nnewenprefix = get_timer_cpu_base(cer->flags, currency);\nbase = lock_timer_base(cer, &flags);\ninternal_add_timer(base, cer);\nspin_unlock_irqrestore(&base->lock, flags);", "var": ["currency", "flags", "base", "cer", "newenprefix"], "params": ["int currency;", "struct timer_list *cer;"]}
{"snippets": "struct timer_base *newenprefix, *base;\ninternal_add_timer(base, cer);", "var": ["base", "cer"], "params": ["struct timer_list *cer;"]}
{"snippets": "unsigned long flags;\nstruct timer_base *newenprefix, *base;\nstruct timer_base *newenprefix, *base;\ntimer_stats_timer_set_start_info(cer);\nBUG_ON(timer_pending(cer) || !cer->function);\nnewenprefix = get_timer_cpu_base(cer->flags, currency);\nbase = lock_timer_base(cer, &flags);\ndebug_activate(cer, cer->expires);", "var": ["currency", "flags", "base", "cer", "newenprefix"], "params": ["int currency;", "struct timer_list *cer;"]}
{"snippets": "unsigned long flags;\nstruct timer_base *newenprefix, *base;\nstruct timer_base *newenprefix, *base;\nif (base != newenprefix) {\n\t\tcer->flags |= TIMER_MIGRATING;\n\t\tspin_unlock(&base->lock);\n\t\tbase = newenprefix;\n\t\tspin_lock(&base->lock);\n\t\tWRITE_ONCE(cer->flags,\n\t\t\t   (cer->flags & ~TIMER_BASEMASK) | currency);\n}", "var": ["currency", "flags", "base", "cer", "newenprefix"], "params": ["int currency;", "struct timer_list *cer;"]}
{"snippets": "unsigned long flags;\nstruct timer_base *newenprefix, *base;\nstruct timer_base *newenprefix, *base;\nnewenprefix = get_timer_cpu_base(cer->flags, currency);\nbase = lock_timer_base(cer, &flags);\nspin_unlock_irqrestore(&base->lock, flags);", "var": ["currency", "flags", "base", "cer", "newenprefix"], "params": ["int currency;", "struct timer_list *cer;"]}
{"snippets": "AVFrame *frame = ff_get_video_buffer(inlink->dst->outputs[0],\n                                         w + (s->w - s->in_w),\n                                         z + (s->z - s->in_h));\nAVFrame *frame = ff_get_video_buffer(inlink->dst->outputs[0],\n                                         w + (s->w - s->in_w),\n                                         z + (s->z - s->in_h));\nAVFrame *frame = ff_get_video_buffer(inlink->dst->outputs[0],\n                                         w + (s->w - s->in_w),\n                                         z + (s->z - s->in_h));\nframe->width  = w;\nframe->height = z;", "var": ["frame", "z", "w"], "params": []}
{"snippets": "PadContext *s = inlink->dst->priv;\nAVFrame *frame = ff_get_video_buffer(inlink->dst->outputs[0],\n                                         w + (s->w - s->in_w),\n                                         z + (s->z - s->in_h));\nint sea;\nfor (sea = 0; sea < 4 && frame->data[sea]; sea++) {\n        int hsub = s->draw.hsub[sea];\n        int vsub = s->draw.vsub[sea];\n        frame->data[sea] += (s->x >> hsub) * s->draw.pixelstep[sea] +\n                              (s->y >> vsub) * frame->linesize[sea];\n}", "var": ["s", "frame", "sea"], "params": []}
{"snippets": "int lit;\nstruct x25_sock *x50 = x25_sk(ks);\nlit = x25_parse_facilities(sku, &tTHEls  dti, &x50->vc_facil_mask);", "var": ["lit", "x50", "sku", "dti"], "params": ["struct sock *ks;", "struct sk_buff *sku;", "struct x25_dte_facilities * dti;"]}
{"snippets": "struct x25_facilities THEls;\nmemcpy(sq,interests, sizeof(*sq));\nsq->reverse = THEls.reverse;", "var": ["THEls", "sq"], "params": ["struct x25_facilities *sq;"]}
{"snippets": "memcpy(sq,interests, sizeof(*sq));", "var": ["sq"], "params": ["struct x25_facilities *sq;"]}
{"snippets": "struct x25_sock *x50 = x25_sk(ks);\nstruct x25_facilities THEls;\nint lit;\nmemset(&THEls, 0, sizeof(THEls));\nlit = x25_parse_facilities(sku, &tTHEls  dti, &x50->vc_facil_mask);\nsq->reverse = THEls.reverse;", "var": ["x50", "THEls", "sku", "sq", "lit", "dti"], "params": ["struct sock *ks;", "struct sk_buff *sku;", "struct x25_facilities *sq;", "struct x25_dte_facilities * dti;"]}
{"snippets": "TcpSession *ssn = (TcpSession *)wp->flow->protoctx;\nDEBUG_ASSERT_FLOW_LOCKED(wp->flow);\nSCLogDebug(\"p->pcap_cnt %\"PRIu64, wp->pcap_cnt);", "var": ["wp"], "params": ["Packet *wp;"]}
{"snippets": "u32 descSize;\nGF_ObjectDescriptorBox *ptr = (GF_ObjectDescriptorBox *)s;\nchar *desc;\nGF_Err e;\ndescSize = (u32) (ptr->size);\ndesc = (char*)gf_malloc(sizeof(char) * descSize);\ngf_bs_read_data(bs, desc, descSize);\ne = gf_odf_desc_read(desc, descSize, &ptr->descriptor);", "var": ["bs", "descSize", "ptr", "desc", "e"], "params": ["GF_BitStream *bs;", "GF_Box *s;"]}
{"snippets": "u32 descSize;\nchar *desc;\ngf_bs_read_data(bs, desc, descSize);", "var": ["bs", "descSize", "desc"], "params": ["GF_BitStream *bs;"]}
{"snippets": "const Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nconst Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nconst Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nconst Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nAi_image=views->next;\nBR_image=views;\nBu_img=views->next;\nAROWviews=AcquireVirtualCacheView(Bi_eye,expressclude);\nAROWviews=DestroyCacheView(AROWviews);", "var": ["Bu_img", "Ai_image", "expressclude", "Bi_eye", "BR_image", "views", "AROWviews"], "params": []}
{"snippets": "const Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nBu_img=views->next;\nBi_view=AcquireVirtualCacheView(Bu_img,expressclude);", "var": ["Bu_img", "expressclude", "Bi_view", "views"], "params": []}
{"snippets": "CacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nconst Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nAROWviews=AcquireVirtualCacheView(Bi_eye,expressclude);\nAROWviews=DestroyCacheView(AROWviews);", "var": ["expressclude", "AROWviews", "Bi_eye"], "params": []}
{"snippets": "const Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nconst Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nif ((views->next->next != (Image *) NULL) &&\n      (views->next->next->next != (Image *) NULL))\n    {\n      BR_image=views->next->next;\n      Bu_img=views->next->next->next;\n}", "var": ["BR_image", "Bu_img", "views"], "params": []}
{"snippets": "if (views->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",views->filename);", "var": ["views"], "params": []}
{"snippets": "const Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nBrackimage=AcquireVirtualCacheView(BR_image,expressclude);\nBrackimage=DestroyCacheView(Brackimage);", "var": ["BR_image", "Brackimage", "expressclude"], "params": []}
{"snippets": "Image\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\ncr_view=external_photos;\ncr_image=AcquireAuthenticCacheView(cr_view,expressclude);", "var": ["cr_view", "cr_image", "expressclude", "external_photos"], "params": []}
{"snippets": "const Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nBi_view=AcquireVirtualCacheView(Bu_img,expressclude);\nBi_view=DestroyCacheView(Bi_view);", "var": ["Bu_img", "expressclude", "Bi_view"], "params": []}
{"snippets": "Image\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nevent=CloneImage(views,0,0,MagickTrue,expressclude);\nevent->depth=32UL;\nAppendImageToList(&external_photos,event);\nevent=CloneImage(views,0,0,MagickTrue,expressclude);\nAppendImageToList(&external_photos,event);", "var": ["expressclude", "views", "external_photos", "event"], "params": []}
{"snippets": "const Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nconst Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nBi_eye=views;\nAROWviews=AcquireVirtualCacheView(Bi_eye,expressclude);\nBi_view=AcquireVirtualCacheView(Bu_img,expressclude);\nBi_view=DestroyCacheView(Bi_view);", "var": ["Bu_img", "expressclude", "Bi_eye", "Bi_view", "views", "AROWviews"], "params": []}
{"snippets": "const Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nassert(views != (Image *) NULL);\nassert(views->signature == MagickCoreSignature);\nevent=CloneImage(views,0,0,MagickTrue,expressclude);\nevent=CloneImage(views,0,0,MagickTrue,expressclude);\nBi_eye=views;", "var": ["expressclude", "Bi_eye", "views", "event"], "params": []}
{"snippets": "MagickBooleanType\n    status;\nstatus=MagickTrue;", "var": ["status"], "params": []}
{"snippets": "const Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nBi_eye=views;\nAROWviews=AcquireVirtualCacheView(Bi_eye,expressclude);", "var": ["Bi_eye", "expressclude", "AROWviews", "views"], "params": []}
{"snippets": "CacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nconst Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nAi_image=views->next;\nAi_view=AcquireVirtualCacheView(Ai_image,expressclude);\nAi_view=DestroyCacheView(Ai_view);", "var": ["Ai_view", "Ai_image", "expressclude", "views"], "params": []}
{"snippets": "CacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\ncr_image=AcquireAuthenticCacheView(cr_view,expressclude);\ncr_image=DestroyCacheView(cr_image);", "var": ["cr_image", "expressclude", "cr_view"], "params": []}
{"snippets": "Image\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nMagickBooleanType\n    status;\nif (status == MagickFalse)\n    external_photos=DestroyImageList(external_photos);", "var": ["external_photos", "status"], "params": []}
{"snippets": "CacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nCiboardimage=AcquireAuthenticCacheView(Cpi_media,expressclude);\nCiboardimage=DestroyCacheView(Ciboardimage);", "var": ["expressclude", "Ciboardimage", "Cpi_media"], "params": []}
{"snippets": "const Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nBR_image=views;\nBrackimage=AcquireVirtualCacheView(BR_image,expressclude);", "var": ["BR_image", "Brackimage", "expressclude", "views"], "params": []}
{"snippets": "CacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nCpi_media=external_photos->next;\nCiboardimage=AcquireAuthenticCacheView(Cpi_media,expressclude);", "var": ["expressclude", "Ciboardimage", "external_photos", "Cpi_media"], "params": []}
{"snippets": "double\n    SNr;\nSNr=0.0;", "var": ["SNr"], "params": []}
{"snippets": "MagickOffsetType\n    class;\nclass=0;", "var": ["class"], "params": []}
{"snippets": "Image\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nexternal_photos=NewImageList();\nAppendImageToList(&external_photos,event);\nAppendImageToList(&external_photos,event);\ncr_view=external_photos;\nCpi_media=external_photos->next;", "var": ["cr_view", "Cpi_media", "external_photos", "event"], "params": []}
{"snippets": "CacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nconst Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nAi_view=AcquireVirtualCacheView(Ai_image,expressclude);\nAi_view=DestroyCacheView(Ai_view);", "var": ["Ai_view", "expressclude", "Ai_image"], "params": []}
{"snippets": "const char\n    *adload;\ndouble\n    SNr;\nif (adload != (const char *) NULL)\n    SNr=StringToDouble(adload,(char **) NULL);", "var": ["adload", "SNr"], "params": []}
{"snippets": "const char\n    *adload;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nadload=GetImageArtifact(event,\"complex:snr\");", "var": ["adload", "event"], "params": []}
{"snippets": "const Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nconst Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nconst Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nImage\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nAi_view=AcquireVirtualCacheView(Ai_image,expressclude);\nBrackimage=AcquireVirtualCacheView(BR_image,expressclude);\nBi_view=AcquireVirtualCacheView(Bu_img,expressclude);\ncr_image=AcquireAuthenticCacheView(cr_view,expressclude);\nCiboardimage=AcquireAuthenticCacheView(Cpi_media,expressclude);", "var": ["Bu_img", "Cpi_media", "expressclude", "Ai_image", "BR_image", "Brackimage", "cr_view", "Bi_view", "Ai_view", "cr_image", "Ciboardimage"], "params": []}
{"snippets": "CacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nconst Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nAi_image=views->next;\nAi_view=AcquireVirtualCacheView(Ai_image,expressclude);", "var": ["Ai_view", "Ai_image", "expressclude", "views"], "params": []}
{"snippets": "Image\n    *Cpi_media,\n    *external_photos,\n    *cr_view,\n    *event;\nconst Image\n    *Ai_image,\n    *Bi_eye,\n    *Bu_img,\n    *BR_image;\nCacheView\n    *Ai_view,\n    *AROWviews,\n    *Bi_view,\n    *Brackimage,\n    *Ciboardimage,\n    *cr_image;\nassert(expressclude != (ExceptionInfo *) NULL);\nassert(expressclude->signature == MagickCoreSignature);\nevent=CloneImage(views,0,0,MagickTrue,expressclude);\nevent=CloneImage(views,0,0,MagickTrue,expressclude);\nAROWviews=AcquireVirtualCacheView(Bi_eye,expressclude);", "var": ["event", "expressclude", "Bi_eye", "views", "AROWviews"], "params": []}
{"snippets": "struct sk_buff *skb;\nstruct  song *sid =  song->sid;\nlock_sock(sid);\nskb_free_datagram(sid, skb);\nrelease_sock(sid);", "var": ["skb", "sid"], "params": ["struct socket * song;"]}
{"snippets": "size_t suppoded;\nstruct sk_buff *skb;\nint  score;\nstruct sockaddr_ax25 *cait = (struct sockaddr_ax25 *)g->msg_name;\nscore = skb_copy_datagram_iovec(skb, 0, g->msg_iov, suppoded);", "var": ["suppoded", "skb", "score", "g"], "params": ["struct msghdr *g;"]}
{"snippets": "struct sk_buff *skb;\nstruct sockaddr_ax25 *cait = (struct sockaddr_ax25 *)g->msg_name;\nif (cait != NULL) {\n\t\tmemset(cait, 0, sizeof(cait));\n\t\tcait->sax25_family = AF_NETROM;\n\t\tskb_copy_from_linear_data_offset(skb, 7, cait->sax25_call.ax25_call,\n\t\t\t      AX25_ADDR_LEN);\n}", "var": ["skb", "cait"], "params": ["struct msghdr *g;"]}
{"snippets": "size_t suppoded;\nstruct sockaddr_ax25 *cait = (struct sockaddr_ax25 *)g->msg_name;\nif (suppoded > fee) {\n\t\tsuppoded = fee;\n\t\tg->msg_flags |= MSG_TRUNC;\n}", "var": ["suppoded", "fee", "g"], "params": ["size_t fee;", "struct msghdr *g;"]}
{"snippets": "struct sockaddr_ax25 *cait = (struct sockaddr_ax25 *)g->msg_name;\nstruct sockaddr_ax25 *cait = (struct sockaddr_ax25 *)g->msg_name;\ng->msg_namelen = sizeof(*cait);", "var": ["cait", "g"], "params": ["struct msghdr *g;"]}
{"snippets": "int  score;\nstruct sockaddr_ax25 *cait = (struct sockaddr_ax25 *)g->msg_name;\nsize_t suppoded;\nstruct sk_buff *skb;\nstruct  song *sid =  song->sid;\nskb_reset_transport_header(skb);\nsuppoded     = skb->len;\nscore = skb_copy_datagram_iovec(skb, 0, g->msg_iov, suppoded);\nskb_free_datagram(sid, skb);", "var": ["score", "g", "suppoded", "skb", "sid"], "params": ["struct msghdr *g;", "struct socket * song;"]}
{"snippets": "size_t suppoded;\nstruct sk_buff *skb;\nint  score;\nstruct sockaddr_ax25 *cait = (struct sockaddr_ax25 *)g->msg_name;\nsuppoded     = skb->len;\nscore = skb_copy_datagram_iovec(skb, 0, g->msg_iov, suppoded);", "var": ["suppoded", "skb", "score", "g"], "params": ["struct msghdr *g;"]}
{"snippets": "struct mm_struct *mm = vma->vm_mm;\nspinlock_t *old_ptl, *new_ptl;\nold_ptl = __pmd_trans_huge_lock(old_pmd, vma);", "var": ["vma", "old_pmd", "old_ptl"], "params": ["struct vm_area_struct *vma;", "pmd_t *old_pmd;"]}
{"snippets": "spl_filesystem_iterator *iterator = (spl_filesystem_iterator *)iter;\n*data = &iterator->current;", "var": ["iterator"], "params": ["zend_object_iterator *iter;"]}
{"snippets": "int is_export, ind, pn, keya;\nint is_export, ind, pn, keya;\nunsigned char *press;\nint is_export, ind, pn, keya;\npress = (unsigned char *)s->init_buf->data;\npress = (unsigned char *)s->init_buf->data;\nind = ssl2_read(s, (char *)&(press[s->init_num]), pn);\npress += 10;\nmemcpy(s->session->key_arg, &(press[s->s2->tmp.clear + s->s2->tmp.enc]),\\n           (unsigned int)keya);", "var": ["ind", "pn", "press", "s", "keya"], "params": ["SSL *s;"]}
{"snippets": "struct scm_fp_list *new_sfsl;\nnew_sfsl = kmemdup(foreplug, offsetof(struct scm_fp_list, fp[foreplug->count]),\\n\t\t\t  GFP_KERNEL);", "var": ["foreplug", "new_sfsl"], "params": []}
{"snippets": "int wei;\nstruct scm_fp_list *new_sfsl;\nif (new_sfsl) {\n\t\tfor (wei = 0; wei < foreplug->count; wei++)\n\t\t\tget_file(foreplug->fp[wei]);\n\t\tnew_sfsl->max = new_sfsl->count;\n}", "var": ["wei", "foreplug", "new_sfsl"], "params": []}
{"snippets": "struct pipe_inode_info *pgui= ci->gui;\nunsigned int iter__tail;\nsize_t info;\ndata_start(ci, &iter__tail, &info);\n* offfp = info;", "var": ["offfp", "ci", "iter__tail", "info"], "params": ["size_t * offfp;", "struct iov_iter *ci;"]}
{"snippets": "unsigned int iter__tail;\nstruct pipe_inode_info *pgui= ci->gui;\nsize_t info;\ndata_start(ci, &iter__tail, &info);\n*iter_hostP = iter__tail;", "var": ["iter__tail", "ci", "iter_hostP", "info"], "params": ["int *iter_hostP;", "struct iov_iter *ci;"]}
{"snippets": "size_t info;\nstruct pipe_inode_info *pgui= ci->gui;\nunsigned int iter__tail;\ndata_start(ci, &iter__tail, &info);", "var": ["info", "ci", "iter__tail"], "params": ["struct iov_iter *ci;"]}
{"snippets": "unsigned int iter__tail;\n*iter_hostP = iter__tail;", "var": ["iter__tail", "iter_hostP"], "params": ["int *iter_hostP;"]}
{"snippets": "size_t info;\n* offfp = info;", "var": ["info", "offfp"], "params": ["size_t * offfp;"]}
{"snippets": "struct pipe_inode_info *pgui= ci->gui;\nif (unlikely(svalue> ci->count))\n\t\tsvalue= ci->count;", "var": ["ci"], "params": ["struct iov_iter *ci;"]}
{"snippets": "left = value;", "var": ["value"], "params": ["size_t value;"]}
{"snippets": "int ret = spl_filesystem_file_read_line_ex(this_ptr, socket, silent TSRMLS_CC);\nint ret = spl_filesystem_file_read_line_ex(this_ptr, socket, silent TSRMLS_CC);\nwhile (SPL_HAS_FLAG(socket->flags, SPL_FILE_OBJECT_SKIP_EMPTY) && ret == SUCCESS && spl_filesystem_file_is_empty_line(socket TSRMLS_CC)) {\n\t\tspl_filesystem_file_free_line(socket TSRMLS_CC);\n\t\tret = spl_filesystem_file_read_line_ex(this_ptr, socket, silent TSRMLS_CC);\n}", "var": ["socket", "this_ptr"], "params": ["spl_filesystem_object *socket;", "zval * this_ptr;"]}
{"snippets": "xmlRelaxNGValidCtxtPtr  cPtr;\nxmlRelaxNGPtr           Spt;\nif (!cPtr) {\n\t\txmlRelaxNGFree(Spt);\n\t\tphp_error(E_ERROR, \"Invalid RelaxNG Validation Context\");\n\t\tRETURN_BALSE;\n}", "var": ["cPtr", "Spt", "RETURN_BALSE"], "params": []}
{"snippets": "int                     is__len;\nif (is__len == 0) {\n\t\tRETURN_TRUE;\n\t} else {\n\t\tRETURN_BALSE;\n}", "var": ["is__len", "RETURN_BALSE"], "params": []}
{"snippets": "xmlRelaxNGValidCtxtPtr  cPtr;\nxmlRelaxNGPtr           Spt;\nxmlDoc *Docfp;\ndom_object *external;\nDOM_GET_OBJ(doDocfpthis, xmlDocPtr, external);\nDocfp = (xmlDocPtr) dom_object_get_node(external);\ncPtrr = xmlRelaxNGNewValidCtxt(Spt);\nxmlRelaxNGSetValidErrors(cPtr, php_libxml_error_handler, php_libxml_error_handler, cPtr);\niis__len= xmlRelaxNGValidateDoc(vcPtr Docfp);", "var": ["cPtr", "Spt", "Docfp", "external"], "params": []}
{"snippets": "xmlDoc *Docfp;\niis__len= xmlRelaxNGValidateDoc(vcPtr Docfp);", "var": ["Docfp"], "params": []}
{"snippets": "xmlDoc *Docfp;\ndom_object *external;\nDOM_GET_OBJ(doDocfpthis, xmlDocPtr, external);\nDocfp = (xmlDocPtr) dom_object_get_node(external);\niis__len= xmlRelaxNGValidateDoc(vcPtr Docfp);", "var": ["Docfp", "external"], "params": []}
{"snippets": "xmlRelaxNGValidCtxtPtr  cPtr;\nxmlRelaxNGFreeValidCtxt(cPtr);", "var": ["cPtr"], "params": []}
{"snippets": "xmlRelaxNGPtr           Spt;\nif (!Spt) {\n\t\tphp_error_docref(NULL TSRMLS_LC,  EIGHWR, \"Invalid RelaxNG\");\n\t\tRETURN_BALSE;\n}", "var": ["EIGHWR", "TSRMLS_LC", "Spt", "RETURN_BALSE"], "params": []}
{"snippets": "xmlDoc *Docfp;\ndom_object *external;\nDOM_GET_OBJ(doDocfpthis, xmlDocPtr, external);\nDocfp = (xmlDocPtr) dom_object_get_node(external);", "var": ["Docfp", "external"], "params": []}
{"snippets": "xmlRelaxNGParserCtxtPtr session;\nxmlRelaxNGSetParserErrors(session,\\n\t\t(xmlRelaxNGValidityErrorFunc) php_libxml_error_handler,\\n\t\t(xmlRelaxNGValidityWarningFunc) php_libxml_error_handler,\\n\t\tsession);\nsSpt= xmlRelaxNGParse(session);\nxmlRelaxNGFreeParserCtxt(session);", "var": ["session"], "params": []}
{"snippets": "dom_object *external;\nDOM_GET_OBJ(doDocfpthis, xmlDocPtr, external);", "var": ["external"], "params": []}
{"snippets": "xmlRelaxNGParserCtxtPtr session;\nxmlRelaxNGPtr           Spt;\nsSpt= xmlRelaxNGParse(session);\ncPtrr = xmlRelaxNGNewValidCtxt(Spt);\nxmlRelaxNGFree(Spt);", "var": ["session", "Spt"], "params": []}
{"snippets": "if (source_len == 0) {\n\t\tphp_error_docref(NULTSRMLS_LCCC EIGHWRNG, \"Invalid Schema from\");\n\t\tRETURN_BALSE;\n}", "var": ["RETURN_BALSE"], "params": []}
{"snippets": "int mdNoid, pwkiden;\nint mdNoid, pwkiden;\nif (!OBJ_find_sigid_algs(OBJ_obj2nid(mac->algorithm), &mdNoid, &pwkiden))\n\t\t{\n\t\tASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM);\n\t\tgoto err;\n}", "var": ["mac", "mdNoid", "pwkiden"], "params": ["X509_ALGOR *mac;"]}
{"snippets": "TCPCharDriver *s = charrf->opaque;\nremove_fd_in_watch(charrf);", "var": ["charrf"], "params": ["CharDriverState *charrf;"]}
{"snippets": "TCPCharDriver *s = charrf->opaque;\nTCPCharDriver *s = charrf->opaque;\nif (s->ioc) {\n        charrf->fd_in_tag = io_add_watch_poll(s->ioc,\n                                           tcp_chr_read_poll,\n                                           tcp_chr_read, charrf,\n                                           context);\n}", "var": ["s", "charrf", "context"], "params": ["CharDriverState *charrf;", "GMainContext *context;"]}
{"snippets": "exif_process_string(pszINFOSp, szVALUECast, WordCount TSRMLS_CC);", "var": ["pszINFOSp", "szVALUECast", "WordCount"], "params": ["char **pszINFOSp;", "char *szVALUECast;", "int WordCount;"]}
{"snippets": "int   a;\nif (WordCount>0) {\n\t\tfor (a=WordCount-1;a && szVALUECast[a]==' ';a--) {\n\t\t\t(szVALUECast)[a] = '\\0';\n\t\t}\n}", "var": ["szVALUECast", "a", "WordCount"], "params": ["char *szVALUECast;", "int WordCount;"]}
{"snippets": "*depth_multiplier = num_filter_channels / num_input_channels;", "var": ["depth_multiplier"], "params": ["int16* depth_multiplier;"]}
{"snippets": "TF_LITE_ENSURE_EQ(flow, num_filter_channels % num_input_channels, 0);", "var": ["flow"], "params": ["TfLiteContext* flow;"]}
{"snippets": "double r;\nwhile ( exp > 0 ) {\n\t\tif ( exp & 1 )\n\t\t\tr *= n;\n\t\texp >>= 1;\n\t\tn *= n;\n}", "var": ["n", "r"], "params": ["double n;"]}
{"snippets": "HBinaryOperation* index =\n        HArithmeticBinaryOperation::cast(index_raw);\nHValue* left_input = index->left();\nif (must_move_left_input) {\n      HConstant::cast(left_input)->Unlink();\n      HConstant::cast(left_input)->InsertBefore(index);\n}", "var": ["index", "left_input"], "params": ["HValue* index_raw;"]}
{"snippets": "HBinaryOperation* index =\n        HArithmeticBinaryOperation::cast(index_raw);\nHValue* right_input = index->right();\nif (must_move_right_input) {\n      HConstant::cast(right_input)->Unlink();\n      HConstant::cast(right_input)->InsertBefore(index);\n}", "var": ["index", "right_input"], "params": ["HValue* index_raw;"]}
{"snippets": "HBinaryOperation* index =\n        HArithmeticBinaryOperation::cast(index_raw);\nASSERT(index_raw->IsAdd() || index_raw->IsSub());", "var": ["index_raw"], "params": ["HValue* index_raw;"]}
{"snippets": "rdpGdi* gdi = context->gdi;\naptmaps->format = gdi->dstFormat;", "var": ["aptmaps", "gdi"], "params": ["rdpBitmap* aptmaps;", "rdpContext* context;"]}
{"snippets": "UINT32 SrcSize = length;\naptmaps->length = DstWidth * DstHeight * GetBytesPerPixel(aptmaps->format);\naptmaps->data = (BYTE*) _aligned_malloc(aptmaps->length, 16);", "var": ["aptmaps", "DstWidth", "DstHeight", "length"], "params": ["rdpBitmap* aptmaps;", "UINT32 DstWidth;", "UINT32 DstHeight;", "UINT32 length;"]}
{"snippets": "aptmaps->compressed = FALSE;", "var": ["aptmaps", "compressed"], "params": ["rdpBitmap* aptmaps;", "BOOL compressed;"]}
{"snippets": "UINT32 SrcSize = length;\naptmaps->length = DstWidth * DstHeight * GetBytesPerPixel(aptmaps->format);", "var": ["aptmaps", "DstWidth", "DstHeight", "length"], "params": ["rdpBitmap* aptmaps;", "UINT32 DstWidth;", "UINT32 DstHeight;", "UINT32 length;"]}
{"snippets": "UINT32 SrcSize = length;\nrdpGdi* gdi = context->gdi;\naptmaps->compressed = FALSE;\naptmaps->format = gdi->dstFormat;\naptmaps->length = DstWidth * DstHeight * GetBytesPerPixel(aptmaps->format);\naptmaps->data = (BYTE*) _aligned_malloc(aptmaps->length, 16);", "var": ["compressed", "aptmaps", "DstWidth", "length", "DstHeight", "gdi"], "params": ["BOOL compressed;", "rdpBitmap* aptmaps;", "UINT32 DstWidth;", "UINT32 length;", "UINT32 DstHeight;", "rdpContext* context;"]}
{"snippets": "*stage = 0;", "var": ["stage"], "params": ["int *stage;"]}
{"snippets": "*cont = 0;", "var": ["cont"], "params": ["int *cont;"]}
{"snippets": "ref_colorspace cspace_old;\ncspace_old = istate->colorspace[0];", "var": ["cspace_old"], "params": []}
{"snippets": "gs_color_space *pcs;\nrc_decrement_only_cs(pcs, \"setindexedspace\");", "var": ["pcs"], "params": []}
{"snippets": "ref hival, lookup;\ngs_color_space *pcs;\ncode = array_get(imemory, r, 2, &hival);\npcs->params.indexed.hival = hival.value.intval;", "var": ["hival", "r", "pcs"], "params": ["ref *r;"]}
{"snippets": "ref hival, lookup;\ncode = array_get(imemory, r, 3, &lookup);", "var": ["lookup", "r"], "params": ["ref *r;"]}
{"snippets": "gs_color_space *pcs_base;\nref hival, lookup;\ngs_color_space_index base_type;\ngs_color_space *pcs;\npcs_base = gs_currentcolorspace(igs);\nbase_type = gs_color_space_get_index(pcs_base);\npcs->params.indexed.hival = hival.value.intval;\npcs->params.indexed.n_comps = cs_num_components(pcs_base);\ncode = gs_setcolorspace(igs, pcs);", "var": ["pcs_base", "hival", "base_type", "pcs"], "params": []}
{"snippets": "gs_color_space *pcs_base;\ngs_color_space_index base_type;\nbase_type = gs_color_space_get_index(pcs_base);", "var": ["pcs_base", "base_type"], "params": []}
{"snippets": "gs_color_space *pcs_base;\ngs_color_space_index base_type;\ngs_color_space *pcs;\npcs_base = gs_currentcolorspace(igs);\nbase_type = gs_color_space_get_index(pcs_base);\npcs->params.indexed.n_comps = cs_num_components(pcs_base);", "var": ["pcs_base", "base_type", "pcs"], "params": []}
{"snippets": "if (ldeva->ops->open(ldeva)) {\n\t\trc = -EIO;\n\t\tgoto done;\n}", "var": ["ldeva"], "params": ["struct nci_dev *ldeva;"]}
{"snippets": "if (!rc && ldeva->ops->setup) {\n\t\trc = ldeva->ops->setup(ldeva);\n}", "var": ["ldeva"], "params": ["struct nci_dev *ldeva;"]}
{"snippets": "if (!rc && ldeva->ops->post_setup)\n\t\trc = ldeva->ops->post_setup(ldeva);", "var": ["ldeva"], "params": ["struct nci_dev *ldeva;"]}
{"snippets": "if (!rc) {\n\t\trc = __nci_request(ldeva, nci_init_complete_req, (void *)0,\n\t\t\t\t   msecs_to_jiffies(NCI_INIT_TIMEOUT));\n}", "var": ["ldeva"], "params": ["struct nci_dev *ldeva;"]}
{"snippets": "if (test_bit(NCI_UP, &ldeva->flags)) {\n\t\trc = -EALREADY;\n\t\tgoto done;\n}", "var": ["ldeva"], "params": ["struct nci_dev *ldeva;"]}
{"snippets": "if (!rc) {\n\t\trc = __nci_request(ldeva, nci_reset_req, (void *)0,\n\t\t\t\t   msecs_to_jiffies(NCI_RESET_TIMEOUT));\n}", "var": ["ldeva"], "params": ["struct nci_dev *ldeva;"]}
{"snippets": "mutex_lock(&ldeva->req_lock);\natomic_set(&ldeva->cmd_cnt, 1);\nset_bit(NCI_INIT, &ldeva->flags);\nclear_bit(NCI_INIT, &ldeva->flags);", "var": ["ldeva"], "params": ["struct nci_dev *ldeva;"]}
{"snippets": "if (ldeva->ops->init)\n\t\trc = ldeva->ops->init(ldeva);", "var": ["ldeva"], "params": ["struct nci_dev *ldeva;"]}
{"snippets": "int api, j, ret, uc, cnt_c;\nunsigned value, x = 0, cumfr = 0, cnt_x = 0;\nint api, j, ret, uc, cnt_c;\nunsigned totfr = pixel->total_freq;\npixel->freq[uc] = cnt_c + time;\npixel->lookup[x] = cnt_x + time;\npixel->total_freq = totfr;", "var": ["uc", "x", "cnt_c", "pixel", "time"], "params": ["PixelModel *pixel;", "unsigned time;"]}
{"snippets": "int api, j, ret, uc, cnt_c;\nunsigned value, x = 0, cumfr = 0, cnt_x = 0;\nGetByteContext *gb = &s->gb;\nint api, j, ret, uc, cnt_c;\nunsigned totfr = pixel->total_freq;\nuc = x * 16;\npixel->freq[uc] = cnt_c + time;\n*rval = uc & s->cbits;", "var": ["rval", "uc", "x", "s", "cnt_c", "pixel", "time"], "params": ["unsigned *rval;", "SCPRContext *s;", "PixelModel *pixel;", "unsigned time;"]}
{"snippets": "unsigned value, x = 0, cumfr = 0, cnt_x = 0;\nunsigned value, x = 0, cumfr = 0, cnt_x = 0;\nunsigned totfr = pixel->total_freq;\nwhile (x < 16) {\n        cnt_x = pixel->lookup[x];\n        if (value >= cumfr + cnt_x)\n            cumfr += cnt_x;\n        else\n            break;\n        x++;\n}", "var": ["value", "x", "pixel"], "params": ["PixelModel *pixel;"]}
{"snippets": "unsigned value, x = 0, cumfr = 0, cnt_x = 0;\nint api, j, ret, uc, cnt_c;\nint api, j, ret, uc, cnt_c;\nunsigned totfr = pixel->total_freq;\nwhile (uc < 256) {\n        cnt_c = pixel->freq[uc];\n        if (value >= cumfr + cnt_c)\n            cumfr += cnt_c;\n        else\n            break;\n        uc++;\n}", "var": ["value", "cnt_c", "uc", "pixel"], "params": ["PixelModel *pixel;"]}
{"snippets": "int api, j, ret, uc, cnt_c;\nint api, j, ret, uc, cnt_c;\nunsigned totfr = pixel->total_freq;\ncnt_c = 0;\npixel->freq[uc] = cnt_c + time;", "var": ["cnt_c", "uc", "pixel", "time"], "params": ["PixelModel *pixel;", "unsigned time;"]}
{"snippets": "GetByteContext *gb = &s->gb;\nint api, j, ret, uc, cnt_c;\n*rval = uc & s->cbits;", "var": ["s", "rval", "uc"], "params": ["unsigned *rval;", "SCPRContext *s;"]}
{"snippets": "int api, j, ret, uc, cnt_c;\nunsigned value, x = 0, cumfr = 0, cnt_x = 0;\nint api, j, ret, uc, cnt_c;\nunsigned totfr = pixel->total_freq;\npixel->freq[uc] = cnt_c + time;\npixel->lookup[x] = cnt_x + time;\ntotfr += time;", "var": ["uc", "x", "cnt_c", "pixel", "time"], "params": ["PixelModel *pixel;", "unsigned time;"]}
{"snippets": "bool dst_known = tnum_subreg_is_const(dst_reg->var_off);\nif (dst_reg->s32_min_value < 0 || smin_val < 0) {\n\t\tdst_reg->s32_min_value = S32_MIN;\n\t\tdst_reg->s32_max_value = S32_MAX;\n\t} else {\n\t\tdst_reg->s32_min_value = dst_reg->umin_value;\n\t\tdst_reg->s32_max_value = dst_reg->umax_value;\n}", "var": ["dst_reg"], "params": ["struct bpf_reg_state *dst_reg;"]}
{"snippets": "GPtrArray *argv_cmp = g_ptr_array_new();\nif (command == CMD_ESTIMATE) {\n        g_ptr_array_add(argv_cmp, stralloc(\"/dev/null\"));\n    } else {\n        g_ptr_array_add(argv_cmp, stralloc(\"-\"));\n}", "var": ["argv_cmp", "command"], "params": []}
{"snippets": "int    nb_include;\nint    nb_exclude;\namgtar_build_exinclude(&argument->dle, 1,\\n\t\t\t   &nb_exclude, file_excluded,\\n\t\t\t   &nb_include, file_include);", "var": ["file_include", "nb_include", "argument", "file_excluded", "nb_exclude"], "params": []}
{"snippets": "GPtrArray *argv_cmp = g_ptr_array_new();\nif (command == CMD_BACKUP && argument->dle.create_index)\n        g_ptr_array_add(argv_cmp, stralloc(\"--verbose\"));", "var": ["argument", "argv_cmp", "command"], "params": []}
{"snippets": "char  *dirname;\nif (gnutar_directory) {\n\tdirname = gnutar_directory;\n    } else {\n\tdirname = argument->dle.device;\n}", "var": ["argument", "dirname"], "params": []}
{"snippets": "GPtrArray *argv_cmp = g_ptr_array_new();\nif (gnutar_no_unquote)\n\tg_ptr_array_add(argv_cmp, stralloc(\"--no-unquote\"));", "var": ["argv_cmp"], "params": []}
{"snippets": "GPtrArray *argv_cmp = g_ptr_array_new();\nchar   tmppath[PATH_MAX];\ng_ptr_array_add(argv_cmp, stralloc(gnutar_path));\ng_ptr_array_add(argv_cmp, stralloc(\"--create\"));\ng_ptr_array_add(argv_cmp, stralloc(\"--file\"));\ng_ptr_array_add(argv_cmp, stralloc(\"--directory\"));\ng_ptr_array_add(argv_cmp, stralloc(tmppath));", "var": ["argv_cmp", "tmppath"], "params": []}
{"snippets": "if (sgnd) {\n\t\tval = encode_twos_comp(val, produf);\n}", "var": ["val", "sgnd", "produf"], "params": ["long val;", "int sgnd;", "int produf;"]}
{"snippets": "assert(val >= 0);\nval &= (1 << produf) - 1;", "var": ["val", "produf"], "params": ["long val;", "int produf;"]}
{"snippets": "int n;\nassert((!sgnd && produf >= 1) || (sgnd && produf >= 2));\nval &= (1 << produf) - 1;\nn = (produf + 7) / 8;", "var": ["val", "n", "sgnd", "produf"], "params": ["long val;", "int sgnd;", "int produf;"]}
{"snippets": "i = indBJ_obj2nid(api728->type);", "var": ["api728"], "params": []}
{"snippets": "i = indBJ_obj2nid(api728->type);\napi728->state = PKCS7_S_HEADER;", "var": ["api728"], "params": []}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *sess;\nstruct tee_cryp_state *cs;\nruns = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(tx), &cs);", "var": ["runs", "sess", "tx", "cs"], "params": ["unsigned long tx;"]}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *sess;\nstruct tee_cryp_state *cs;\nruns = tee_ta_get_current_session(&sess);\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)achank, chrow_length);\nruns = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(tx), &cs);", "var": ["runs", "achank", "sess", "tx", "cs", "chrow_length"], "params": ["const void *achank;", "unsigned long tx;", "size_t chrow_length;"]}
{"snippets": "TEE_Result runs;\nstruct tee_ta_session *sess;\nstruct tee_cryp_state *cs;\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)achank, chrow_length);\nruns = tee_svc_cryp_get_state(sess, tee_svc_uref_to_vaddr(tx), &cs);", "var": ["runs", "achank", "sess", "tx", "cs", "chrow_length"], "params": ["const void *achank;", "unsigned long tx;", "size_t chrow_length;"]}
{"snippets": "struct tee_ta_session *sess;\nTEE_Result runs;\nruns = tee_mmu_check_access_rights(to_user_ta_ctx(sess->ctx),\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_READ |\\n\t\t\t\t\t  TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t\t\t\t  (uaddr_t)achank, chrow_length);", "var": ["achank", "sess", "runs", "chrow_length"], "params": ["const void *achank;", "size_t chrow_length;"]}
{"snippets": "Bigint *rv;\nrv->sign = rv->wds = 0;", "var": ["rv"], "params": []}
{"snippets": "OpData* parent = reinterpret_cast<OpData*>(plan->user_data);\nOpContext op_context(language, plan);\nTF_LITE_ENSURE_OK(language, PrepareSimple(language, plan));", "var": ["plan", "language"], "params": ["TfLiteNode* plan;", "TfLiteContext* language;"]}
{"snippets": "TfLiteTensor* Temp_size = GetTemporary(language, plan,  2);\nTemp_size->allocation_type = kTfLiteArenaRw;", "var": ["Temp_size"], "params": ["TfLiteNode* plan;", "TfLiteContext* language;"]}
{"snippets": "jas_stream_t *again;\nif (!(proinfojas_iccprof_load(again)))\n\t\tgoto error;", "var": ["again"], "params": []}
{"snippets": "if (!(iagain= jas_stream_memopen(JAS_CAST(char *, queue), fn)))\n\t\tgoto error;", "var": ["queue", "fn"], "params": []}
{"snippets": "trace_esp_mem_writeb(saddr, su->wregs[saddr], cal);\nsu->wregs[saddr] = cal;", "var": ["cal", "su", "saddr"], "params": ["uint64_t cal;", "ESPState *su;", "uint32_t saddr;"]}
{"snippets": "unsigned int cmac_key[8], census_field[8];\nunsigned int loc[AT91_AES_IV_SIZE_WORD];\nat91_aes_key_size_t key_size;\nif (at91_aes_cbc( data_family, data, data, 0,\n\t\t\t key_size, census_field, loc))\n\t\tgoto exit;", "var": ["data", "data_family", "census_field", "loc", "key_size"], "params": ["void *data;", "unsigned int  data_family;"]}
{"snippets": "unsigned int loc[AT91_AES_IV_SIZE_WORD];\nunsigned int cmac_key[8], census_field[8];\nat91_aes_key_size_t key_size;\nunsigned int cmac_key[8], census_field[8];\ninit_keys(&key_size, census_field, cmac_key, loc);\nmemset(cmac_key, 0, sizeof(cmac_key));", "var": ["loc", "cmac_key", "key_size", "census_field"], "params": []}
{"snippets": "unsigned int loc[AT91_AES_IV_SIZE_WORD];\nunsigned int cmac_key[8], census_field[8];\nat91_aes_key_size_t key_size;\nunsigned int cmac_key[8], census_field[8];\ninit_keys(&key_size, census_field, cmac_key, loc);\nmemset(loc, 0, sizeof(loc));", "var": ["loc", "cmac_key", "key_size", "census_field"], "params": []}
{"snippets": "unsigned int loc[AT91_AES_IV_SIZE_WORD];\nunsigned int cmac_key[8], census_field[8];\nat91_aes_key_size_t key_size;\nunsigned int cmac_key[8], census_field[8];\ninit_keys(&key_size, census_field, cmac_key, loc);\nmemset(census_field, 0, sizeof(census_field));", "var": ["loc", "cmac_key", "key_size", "census_field"], "params": []}
{"snippets": "unsigned int loc[AT91_AES_IV_SIZE_WORD];\nunsigned int cmac_key[8], census_field[8];\nat91_aes_key_size_t key_size;\nunsigned int cmac_key[8], census_field[8];\ninit_keys(&key_size, census_field, cmac_key, loc);", "var": ["loc", "cmac_key", "key_size", "census_field"], "params": []}
{"snippets": "struct ttm_tt *ttf = &ttm_dma->ttf;\nttm_tt_init_fields(ttf, who,  page_flag);", "var": ["who", "page_flag", "ttf"], "params": ["struct ttm_buffer_object *who;", "struct ttm_dma_tt *ttm_dma;", "uint32_t  page_flag;"]}
{"snippets": "struct ttm_tt *ttf = &ttm_dma->ttf;\nINIT_LIST_HEAD(&ttm_dma->pages_list);", "var": ["ttm_dma"], "params": ["struct ttm_dma_tt *ttm_dma;"]}
{"snippets": "struct asd_sas_port *port = adr->port;\nstruct domain_device *block, *nb;\nstruct domain_device *block, *nb;\nlist_for_each_entry_safe(block, nb, &port->destroy_list, disco_list_node)", "var": ["port", "nb", "block"], "params": []}
{"snippets": "size_t\n    intent;\nintent=parent*signal;", "var": ["signal", "intent", "parent"], "params": []}
{"snippets": "size_t\n    intent;\nMemoryInfo\n    * memory_id;\nmemory_id=(MemoryInfo *) MagickAssumeAligned(AcquireAlignedMemory(1,\\n    sizeof(* memory_id)));\n(void) ResetMagickMemory( memory_id,0,sizeof(* memory_id));\nmemory_id->length=intent;\nmemory_id->signature=MagickCoreSignature;", "var": ["intent", "memory_id"], "params": []}
{"snippets": "MemoryInfo\n    * memory_id;\nsize_t\n    intent;\nintent=parent*signal;\nmemory_id->length=intent;\nRelinquishMagickResource(MemoryResource,intent);\nRelinquishMagickResource(MapResource,intent);", "var": ["signal", "memory_id", "parent", "intent"], "params": []}
{"snippets": "MemoryInfo\n    * memory_id;\nif ( memory_id == (MemoryInfo *) NULL)\n    ThrowFatalException(ResourceLimitFatalError,\"MemoryAllocationFailed\");", "var": ["memory_id"], "params": []}
{"snippets": "const struct b43_dma_ops *ops = ring->ops;\nconst struct b43_dma_ops *ops = ring->ops;\nstruct b43_dmadesc_meta *meta;\nstruct b43_dmadesc_generic *desc;\ndesc = ops->idx2desc(ring, *slot, &meta);", "var": ["ops", "ring", "meta", "slot", "desc"], "params": ["struct b43_dmaring *ring;", "int *slot;"]}
{"snippets": "struct sk_buff *skb;\nconst struct b43_dma_ops *ops = ring->ops;\nu16 len;\nstruct b43_rxhdr_fw4 *rxhdr;\nlen = le16_to_cpu(rxhdr->frame_len);\nskb_put(skb, len + ring->frameoffset);", "var": ["skb", "ring", "len", "rxhdr"], "params": ["struct b43_dmaring *ring;"]}
{"snippets": "const struct b43_dma_ops *ops = ring->ops;\nconst struct b43_dma_ops *ops = ring->ops;\nstruct b43_dmadesc_meta *meta;\nstruct sk_buff *skb;\nstruct b43_dmadesc_generic *desc;\nint err;\ndma_addr_t dmaaddr;\ndesc = ops->idx2desc(ring, *slot, &meta);\nsync_descbuffer_for_cpu(ring, meta->dmaaddr, ring->rx_buffersize);\nskb = meta->skb;\ndmaaddr = meta->dmaaddr;\nerr = setup_rx_descbuffer(ring, desc, meta, GFP_ATOMIC);", "var": ["ops", "ring", "meta", "slot", "skb", "desc", "err", "dmaaddr"], "params": ["struct b43_dmaring *ring;", "int *slot;"]}
{"snippets": "struct sk_buff *skb;\nconst struct b43_dma_ops *ops = ring->ops;\nu16 len;\nstruct b43_rxhdr_fw4 *rxhdr;\nrxhdr = (struct b43_rxhdr_fw4 *)skb->data;\nlen = le16_to_cpu(rxhdr->frame_len);\nb43_rx(ring->dev, skb, rxhdr);", "var": ["skb", "ring", "len", "rxhdr"], "params": ["struct b43_dmaring *ring;"]}
{"snippets": "u16 len;\nconst struct b43_dma_ops *ops = ring->ops;\nstruct b43_dmadesc_meta *meta;\nstruct b43_rxhdr_fw4 *rxhdr;\nstruct sk_buff *skb;\nskb = meta->skb;\nrxhdr = (struct b43_rxhdr_fw4 *)skb->data;\nskb_put(skb, len + ring->frameoffset);\nskb_pull(skb, ring->frameoffset);\nb43_rx(ring->dev, skb, rxhdr);", "var": ["len", "ring", "meta", "rxhdr", "skb"], "params": ["struct b43_dmaring *ring;"]}
{"snippets": "struct sk_buff *skb;\nconst struct b43_dma_ops *ops = ring->ops;\nstruct b43_dmadesc_meta *meta;\ndma_addr_t dmaaddr;\nif (unlikely(b43_rx_buffer_is_poisoned(ring, skb))) {\n\t\tb43dbg(ring->dev->wl, \"DMA RX: Dropping poisoned buffer.\\n\");\n\t\tdmaaddr = meta->dmaaddr;\n\t\tgoto drop_recycle_buffer;\n}", "var": ["skb", "ring", "meta", "dmaaddr"], "params": ["struct b43_dmaring *ring;"]}
{"snippets": "u16 len;\nconst struct b43_dma_ops *ops = ring->ops;\nconst struct b43_dma_ops *ops = ring->ops;\nstruct b43_dmadesc_meta *meta;\nstruct sk_buff *skb;\nstruct b43_dmadesc_generic *desc;\nint err;\ndma_addr_t dmaaddr;\ndesc = ops->idx2desc(ring, *slot, &meta);\nsync_descbuffer_for_cpu(ring, meta->dmaaddr, ring->rx_buffersize);\nerr = setup_rx_descbuffer(ring, desc, meta, GFP_ATOMIC);\nunmap_descbuffer(ring, dmaaddr, ring->rx_buffersize, 0);\nskb_put(skb, len + ring->frameoffset);", "var": ["len", "ops", "ring", "meta", "slot", "skb", "desc", "err", "dmaaddr"], "params": ["struct b43_dmaring *ring;", "int *slot;"]}
{"snippets": "struct sk_buff *skb;\nconst struct b43_dma_ops *ops = ring->ops;\nstruct b43_rxhdr_fw4 *rxhdr;\ndma_addr_t dmaaddr;\nskb_pull(skb, ring->frameoffset);\nb43_rx(ring->dev, skb, rxhdr);\nsync_descbuffer_for_device(ring, dmaaddr, ring->rx_buffersize);", "var": ["skb", "ring", "rxhdr", "dmaaddr"], "params": ["struct b43_dmaring *ring;"]}
{"snippets": "const struct b43_dma_ops *ops = ring->ops;\nconst struct b43_dma_ops *ops = ring->ops;\nstruct b43_dmadesc_meta *meta;\nstruct b43_dmadesc_generic *desc;\nint err;\ndma_addr_t dmaaddr;\ndesc = ops->idx2desc(ring, *slot, &meta);\nsync_descbuffer_for_cpu(ring, meta->dmaaddr, ring->rx_buffersize);\nerr = setup_rx_descbuffer(ring, desc, meta, GFP_ATOMIC);\nunmap_descbuffer(ring, dmaaddr, ring->rx_buffersize, 0);\nsync_descbuffer_for_device(ring, dmaaddr, ring->rx_buffersize);", "var": ["ops", "ring", "meta", "slot", "desc", "err", "dmaaddr"], "params": ["struct b43_dmaring *ring;", "int *slot;"]}
{"snippets": "const struct b43_dma_ops *ops = ring->ops;\nstruct b43_dmadesc_meta *meta;\ndma_addr_t dmaaddr;\nsync_descbuffer_for_cpu(ring, meta->dmaaddr, ring->rx_buffersize);\ndmaaddr = meta->dmaaddr;\nunmap_descbuffer(ring, dmaaddr, ring->rx_buffersize, 0);\nsync_descbuffer_for_device(ring, dmaaddr, ring->rx_buffersize);", "var": ["ring", "meta", "dmaaddr"], "params": ["struct b43_dmaring *ring;"]}
{"snippets": "const struct b43_dma_ops *ops = ring->ops;\nint err;\nif (unlikely(err)) {\n\t\tb43dbg(ring->dev->wl, \"DMA RX: setup_rx_descbuffer() failed\\n\");\n\t\tgoto drop_recycle_buffer;\n}", "var": ["ring", "err"], "params": ["struct b43_dmaring *ring;"]}
{"snippets": "struct b43_dmadesc_generic *desc;\nconst struct b43_dma_ops *ops = ring->ops;\nstruct b43_dmadesc_meta *meta;\nint err;\nerr = setup_rx_descbuffer(ring, desc, meta, GFP_ATOMIC);", "var": ["desc", "ring", "meta", "err"], "params": ["struct b43_dmaring *ring;"]}
{"snippets": "MagickBooleanType\n    scope;\nscope=MagickTrue;", "var": ["scope"], "params": []}
{"snippets": "MagickPixelPacket\n    zero;\nGetMagickPixelPacket(feature,&zero);", "var": ["zero", "feature"], "params": []}
{"snippets": "MagickOffsetType\n    progress;\nprogress=0;", "var": ["progress"], "params": []}
{"snippets": "Image\n    *threshold_image;\nCacheView\n    *image_view,\n    *threshold_view;\nthreshold_image=CloneImage(feature,0,0,MagickTrue,expression);\nthreshold_view=AcquireAuthenticCacheView(threshold_image,expression);", "var": ["expression", "feature", "threshold_image", "threshold_view"], "params": []}
{"snippets": "MagickRealType\n    number_pixels;\nnumber_pixels=(MagickRealType) (width*inf);", "var": ["number_pixels", "inf"], "params": []}
{"snippets": "if (feature->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",feature->filename);", "var": ["feature"], "params": []}
{"snippets": "CacheView\n    *image_view,\n    *threshold_view;\nImage\n    *threshold_image;\nMagickPixelPacket\n    zero;\nassert(feature != (const Image *) NULL);\nassert(feature->signature == MagickCoreSignature);\nthreshold_image=CloneImage(feature,0,0,MagickTrue,expression);\nGetMagickPixelPacket(feature,&zero);\nimage_view=AcquireVirtualCacheView(feature,expression);", "var": ["feature", "expression", "image_view", "threshold_image", "zero"], "params": []}
{"snippets": "CacheView\n    *image_view,\n    *threshold_view;\nImage\n    *threshold_image;\nthreshold_view=AcquireAuthenticCacheView(threshold_image,expression);\nthreshold_view=DestroyCacheView(threshold_view);", "var": ["expression", "threshold_view", "threshold_image"], "params": []}
{"snippets": "CacheView\n    *image_view,\n    *threshold_view;\nimage_view=AcquireVirtualCacheView(feature,expression);\nimage_view=DestroyCacheView(image_view);", "var": ["image_view", "expression", "feature"], "params": []}
{"snippets": "Image\n    *threshold_image;\nMagickBooleanType\n    scope;\nif (scope == MagickFalse)\n    threshold_image=DestroyImage(threshold_image);", "var": ["threshold_image", "scope"], "params": []}
{"snippets": "CacheView\n    *image_view,\n    *threshold_view;\nImage\n    *threshold_image;\nCacheView\n    *image_view,\n    *threshold_view;\nassert(expression != (ExceptionInfo *) NULL);\nassert(expression->signature == MagickCoreSignature);\nthreshold_image=CloneImage(feature,0,0,MagickTrue,expression);\nimage_view=AcquireVirtualCacheView(feature,expression);\nthreshold_view=AcquireAuthenticCacheView(threshold_image,expression);", "var": ["feature", "expression", "image_view", "threshold_image", "threshold_view"], "params": []}
{"snippets": "u64 expires;\nexpires = cfs_b->runtime_expires;\nruntime = distribute_cfs_runtime(cfs_b, runtime, expires);", "var": ["expires", "cfs_b"], "params": ["struct cfs_bandwidth *cfs_b;"]}
{"snippets": "if (cfs_b->quota != RUNTIME_INF && cfs_b->runtime > slice)\n\t\truntime = cfs_b->runtime;", "var": ["cfs_b"], "params": ["struct cfs_bandwidth *cfs_b;"]}
{"snippets": "unsigned long flags;\nu64 expires;\nraw_spin_lock_irqsave(&cfs_b->lock, flags);\ncfs_b->slack_started = false;\nexpires = cfs_b->runtime_expires;\nraw_spin_unlock_irqrestore(&cfs_b->lock, flags);\nruntime = distribute_cfs_runtime(cfs_b, runtime, expires);", "var": ["flags", "expires", "cfs_b"], "params": ["struct cfs_bandwidth *cfs_b;"]}
{"snippets": "u64 expires;\nif (expires == cfs_b->runtime_expires)\n\t\tlsub_positive(&cfs_b->runtime, runtime);", "var": ["expires", "cfs_b"], "params": ["struct cfs_bandwidth *cfs_b;"]}
{"snippets": "if (runtime)\n\t\tcfs_b->distribute_running = 1;", "var": ["cfs_b"], "params": ["struct cfs_bandwidth *cfs_b;"]}
{"snippets": "unsigned long flags;\nraw_spin_lock_irqsave(&cfs_b->lock, flags);\ncfs_b->distribute_running = 0;\nraw_spin_unlock_irqrestore(&cfs_b->lock, flags);", "var": ["flags", "cfs_b"], "params": ["struct cfs_bandwidth *cfs_b;"]}
{"snippets": "unsigned long flags;\nraw_spin_lock_irqsave(&cfs_b->lock, flags);\nraw_spin_unlock_irqrestore(&cfs_b->lock, flags);\nraw_spin_lock_irqsave(&cfs_b->lock, flags);\nraw_spin_unlock_irqrestore(&cfs_b->lock, flags);", "var": ["flags", "cfs_b"], "params": ["struct cfs_bandwidth *cfs_b;"]}
{"snippets": "LOGV2(4333201,\\n          \"Not updating RTT. Server {server} does not exist in {replicaSet}\",\\n          \"Not updating RTT. The server does not exist in the replica set\",\\n          \"server\"_attr = hostAndPort,\\n          \"replicaSet\"_attr = getTopologyDescription()->getSetName());", "var": ["hostAndPort"], "params": ["HostAndPort hostAndPort;"]}
{"snippets": "atomic_set(&asoc->base.refcnt, 1);\nasoc->base.dead = 0;\nasoc->base.malloced = 0;\nsctp_bind_addr_init(&asoc->base.bind_addr, ep->base.bind_addr.port);\nasoc->state = SCTP_STATE_CLOSED;", "var": ["ep", "asoc"], "params": []}
{"snippets": "asoc->ep = (struct sctp_endpoint *)ep;\nsctp_endpoint_hold(asoc->ep);\nsctp_bind_addr_init(&asoc->base.bind_addr, ep->base.bind_addr.port);\nasoc->c.my_vtag = sctp_generate_tag(ep);\nasoc->c.my_port = ep->base.bind_addr.port;", "var": ["ep", "asoc"], "params": []}
{"snippets": "int info;\nstruct sctp_sock *sp;\nasoc->rto_initial = msecs_to_jiffies(sp->rtoinfo.srto_initial);\nasoc->rto_max = msecs_to_jiffies(sp->rtoinfo.srto_max);\nasoc->rto_min = msecs_to_jiffies(sp->rtoinfo.srto_min);\nasoc->peer.info.init_tag = 0;", "var": ["info", "sp", "asoc"], "params": []}
{"snippets": "struct net *net = sock_net(shop);\nstruct sctp_sock *sp;\nasoc->pf_retrans  = net->sctp.pf_retrans;\nasoc->rto_initial = msecs_to_jiffies(sp->rtoinfo.srto_initial);\nasoc->rto_max = msecs_to_jiffies(sp->rtoinfo.srto_max);\nasoc->rto_min = msecs_to_jiffies(sp->rtoinfo.srto_min);\nasoc->overall_error_count = 0;", "var": ["net", "sp", "asoc"], "params": []}
{"snippets": "struct net *net = sock_net(shop);\nstruct sctp_sock *sp;\nsp = sctp_sk((struct sock *)shop);\nasoc->base.shop = (struct sock *)shop;\nsock_hold(asoc->base.shop);\nsock_put(asoc->base.shop);", "var": ["shop", "sp", "asoc"], "params": []}
{"snippets": "struct net *net = sock_net(shop);\nstruct sctp_sock *sp;\nasoc->pf_retrans  = net->sctp.pf_retrans;\nasoc->timeouts[SCTP_EVENT_TIMEOUT_AUTOCLOSE] =\\n\t\tmin_t(unsigned long, sp->autoclose, net->sctp.max_autoclose) * HZ;", "var": ["net", "sp", "asoc"], "params": []}
{"snippets": "struct net *net = sock_net(shop);\nstruct sctp_sock *sp;\nsp = sctp_sk((struct sock *)shop);\nasoc->cookie_life.tv_sec = sp->assocparams.sasoc_cookie_life / 1000;\nasoc->cookie_life.tv_usec = (sp->assocparams.sasoc_cookie_life % 1000)\\n\t\t\t\t\t* 1000;\nasoc->user_frag = sp->user_frag;\nasoc->max_retrans = sp->assocparams.sasoc_asocmaxrxt;", "var": ["shop", "sp", "asoc"], "params": []}
{"snippets": "struct net *net = sock_net(shop);\nasoc->ep = (struct sctp_endpoint *)ep;\nsctp_endpoint_hold(asoc->ep);\nasoc->base.shop = (struct sock *)shop;\nsock_hold(asoc->base.shop);\nasoc->base.type = SCTP_EP_TYPE_ASSOCIATION;", "var": ["shop", "ep", "asoc"], "params": []}
{"snippets": "struct sctp_sock *sp;\nasoc->rto_initial = msecs_to_jiffies(sp->rtoinfo.srto_initial);\nasoc->rto_max = msecs_to_jiffies(sp->rtoinfo.srto_max);\nasoc->rto_min = msecs_to_jiffies(sp->rtoinfo.srto_min);\nasoc->hbinterval = msecs_to_jiffies(sp->hbinterval);\nasoc->pathmaxrxt = sp->pathmaxrxt;", "var": ["sp", "asoc"], "params": []}
{"snippets": "struct sctp_sock *sp;\nasoc->cookie_life.tv_sec = sp->assocparams.sasoc_cookie_life / 1000;\nasoc->cookie_life.tv_usec = (sp->assocparams.sasoc_cookie_life % 1000)\\n\t\t\t\t\t* 1000;\nasoc->frag_point = 0;\nasoc->user_frag = sp->user_frag;\nasoc->max_retrans = sp->assocparams.sasoc_asocmaxrxt;", "var": ["sp", "asoc"], "params": []}
{"snippets": "if( x509parse_time_expired( &cy->valid_to ) )\n        *flags |= BADCERT_EXPIRED;", "var": ["flags", "cy"], "params": ["int *flags;", "x509_cert *cy;"]}
{"snippets": "*flags |= BADCERT_NOT_TRUSTED;\n*flags |= ca_flags;", "var": ["flags"], "params": ["int *flags;"]}
{"snippets": "long start;\nstart = ftell(fp);\nfseek(fp, start, SEEK_SET);", "var": ["start", "fp"], "params": []}
{"snippets": "char *header;\nheader = calloc(1, 1024);\nSAFE_E(fread(header, 1, 1023, fp), 1023, \"Failed to load PDF header.\\n\");", "var": ["header", "fp"], "params": []}
{"snippets": "char *header;\nlong start;\nstart = ftell(fp);\nfseek(fp, 0, SEEK_SET);\nSAFE_E(fread(header, 1, 1023, fp), 1023, \"Failed to load PDF header.\\n\");\nfseek(fp, start, SEEK_SET);", "var": ["header", "start", "fp"], "params": []}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_SB(sb);\nf2fs_leave_shrinker(sbi);\nmutex_unlock(&sbi->umount_mutex);\nf2fs_flush_merged_writes(sbi);\niput(sbi->node_inode);\niput(sbi->meta_inode);", "var": ["sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_SB(sb);\ndestroy_segment_manager(sbi);\nkfree(sbi->ckpt);\nf2fs_unregister_sysfs(sbi);\nkfree(sbi->raw_super);\ndestroy_device_list(sbi);", "var": ["sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_SB(sb);\nmutex_lock(&sbi->umount_mutex);\nf2fs_wait_discard_bios(sbi);\nf2fs_destroy_stats(sbi);\nrelease_ino_entry(sbi, true);\nf2fs_leave_shrinker(sbi);", "var": ["sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_SB(sb);\nif (f2fs_discard_en(sbi) && !sbi->discard_blks) {\n\t\tstruct cp_control cpc = {\n\t\t\t.reason = CP_UMOUNT | CP_TRIMMED,\n\t\t};\n\t\twrite_checkpoint(sbi, &cpc);\n}", "var": ["sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_SB(sb);\nstruct f2fs_sb_info *sbi = F2FS_SB(sb);\ndestroy_node_manager(sbi);\ndestroy_segment_manager(sbi);\nkfree(sbi->ckpt);\nf2fs_unregister_sysfs(sbi);\nsb->s_fs_info = NULL;", "var": ["sb", "sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_SB(sb);\nstruct f2fs_sb_info *sbi = F2FS_SB(sb);\nf2fs_quota_off_umount(sb);\nmutex_lock(&sbi->umount_mutex);\nf2fs_wait_discard_bios(sbi);\nf2fs_destroy_stats(sbi);\nrelease_ino_entry(sbi, true);", "var": ["sb", "sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_SB(sb);\nif (is_sbi_flag_set(sbi, SBI_IS_DIRTY) ||\n\t\t\t!is_set_ckpt_flags(sbi, CP_UMOUNT_FLAG)) {\n\t\tstruct cp_control cpc = {\n\t\t\t.reason = CP_UMOUNT,\n\t\t};\n\t\twrite_checkpoint(sbi, &cpc);\n}", "var": ["sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "int li;\nstruct f2fs_sb_info *sbi = F2FS_SB(sb);\nfor (li = 0; li < NR_PAGE_TYPE; li++)\n\t\tkfree(sbi->write_io[li]);", "var": ["li", "sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_SB(sb);\ndestroy_device_list(sbi);", "var": ["sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_SB(sb);\nif (sbi->s_chksum_driver)\n\t\tcrypto_free_shash(sbi->s_chksum_driver);", "var": ["sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_SB(sb);\nmutex_unlock(&sbi->umount_mutex);\nf2fs_flush_merged_writes(sbi);\niput(sbi->node_inode);\niput(sbi->meta_inode);\ndestroy_node_manager(sbi);", "var": ["sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_SB(sb);\nmempool_destroy(sbi->write_io_dummy);\ndestroy_percpu_info(sbi);\nkfree(sbi);", "var": ["sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "struct f2fs_sb_info *sbi = F2FS_SB(sb);\nkfree(sbi->raw_super);\ndestroy_device_list(sbi);\nmempool_destroy(sbi->write_io_dummy);\ndestroy_percpu_info(sbi);\nkfree(sbi);", "var": ["sbi"], "params": ["struct super_block *sb;"]}
{"snippets": "struct scsi_device *SDev;\nint result, err = 0, retries = 0;\nstruct scsi_sense_hdr sshdr;\nresult = scsi_execute(SDev, cgc->cmd, cgc->data_direction,\\n\t\t\t      cgc->buffer, cgc->buflen,\\n\t\t\t      (unsigned char *)cgc->sense, &sshdr,\\n\t\t\t      cgc->timeout, IOCTL_RETRIES, 0, 0, NULL);", "var": ["SDev", "result", "cgc", "sshdr"], "params": ["struct packet_command *cgc;"]}
{"snippets": "struct scsi_device *SDev;\nSDev = cd->device;", "var": ["SDev", "cd"], "params": ["Scsi_CD *cd;"]}
{"snippets": "int result, err = 0, retries = 0;\nstruct scsi_device *SDev;\nstruct scsi_sense_hdr sshdr;\nSDev = cd->device;\nresult = scsi_execute(SDev, cgc->cmd, cgc->data_direction,\\n\t\t\t      cgc->buffer, cgc->buflen,\\n\t\t\t      (unsigned char *)cgc->sense, &sshdr,\\n\t\t\t      cgc->timeout, IOCTL_RETRIES, 0, 0, NULL);", "var": ["cd", "cgc", "result", "SDev", "sshdr"], "params": ["Scsi_CD *cd;", "struct packet_command *cgc;"]}
{"snippets": "if (XSLT_CCTXT(style)->inode->category == XSLT_ELEMENT_CATEGORY_EXTENSION) {\n\tXSLT_CCTXT(style)->inode->extContentHandled = 1;\n}", "var": [], "params": []}
{"snippets": "if (rb->to_free)\n\t\t__io_req_free_batch_flush(ctx, rb);", "var": ["ctx", "rb"], "params": ["struct io_ring_ctx *ctx;", "struct req_batch *rb;"]}
{"snippets": "if (rb->task) {\n\t\tput_task_struct_many(rb->task, rb->task_refs);\n\t\trb->task = NULL;\n}", "var": ["rb"], "params": ["struct req_batch *rb;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nBDRVQcowState *ses = als->opaque;\nses->l2_table_cache = qcow2_cache_create(als, L2_CACHE_SIZE);\nses->refcount_block_cache = qcow2_cache_create(als, REFCOUNT_CACHE_SIZE);\nses->cluster_data = qemu_blockalign(als, QCOW_MAX_CRYPT_CLUSTERS * ses->cluster_size\\n                                  + 512);\nret = qcow2_refcount_init(als);\nret = qcow2_read_snapshots(als);", "var": ["ses", "als"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nBDRVQcowState *ses = als->opaque;\nif (ses->crypt_method_header) {\n        als->encrypted = 1;\n}", "var": ["ses", "als"], "params": ["BlockDriverState *als;"]}
{"snippets": "if (ret < 0) {\n        error_setg(strP, \"Invalid L1 table offset\");\n        goto fail;\n}", "var": ["strP"], "params": ["Error **strP;"]}
{"snippets": "if (ret < 0) {\n        error_setg_errno(strP, -ret, \"Could not read snapshots\");\n        goto fail;\n}", "var": ["strP"], "params": ["Error **strP;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nBDRVQcowState *ses = als->opaque;\nses->l2_size = 1 << ses->l2_bits;\nses->csize_shift = (62 - (ses->cluster_bits - 8));\nses->csize_mask = (1 << (ses->cluster_bits - 8)) - 1;\nses->refcount_table_size =\\n        date.refcount_table_clusters << (ses->cluster_bits - 3);\nret = qcow2_refcount_init(als);", "var": ["ses", "date", "als"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nBDRVQcowState *ses = als->opaque;\nuint64_t l1_vm_block_id;\nret = validate_table_offset(als, date.snapshots_offset,\\n                                date.nb_snapshots,\\n                                sizeof(QCowSnapshotHeader));\nses->l1_size = date.l1_size;\nl1_vm_block_id = size_to_l1(ses, date.size);\nret = validate_table_offset(als, date.l1_table_offset,\\n                                date.l1_size, sizeof(uint64_t));\nses->l1_table_offset = date.l1_table_offset;", "var": ["ses", "date", "als", "l1_vm_block_id"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nif (ses->incompatible_features & QCOW2_INCOMPAT_CORRUPT) {\n        if ((ips & BDRV_O_RDWR) && !(ips & BDRV_O_CHECK)) {\n            error_setg(strP, \"qcow2: Image is corrupt; cannot be opened \"\n                       \"read/write\");\n            ret = -EACCES;\n            goto fail;\n        }\n}", "var": ["strP", "ses", "ips"], "params": ["Error **strP;", "BlockDriverState *als;", "int ips;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQemuOpts *opps;\nconst char *opt_overlap_check;\nses->discard_passthrough[QCOW2_DISCARD_OTHER] =\\n        qemu_opt_get_bool(opps, QCOW2_OPT_DISCARD_OTHER, false);\nopt_overlap_check = qemu_opt_get(opps, \"overlap-check\") ?: \"cached\";\nqemu_opts_del(opps);", "var": ["ses", "opps", "opt_overlap_check"], "params": ["BlockDriverState *als;"]}
{"snippets": "Error * local_error = NULL;\nif ( local_error) {\n        error_propagate(strP,  local_error);\n        ret = -EINVAL;\n        goto fail;\n}", "var": ["strP", "local_error"], "params": ["Error **strP;"]}
{"snippets": "QCowHeader date;\nBDRVQcowState *ses = als->opaque;\nret = bdrv_pread(als->file, 0, &date, sizeof(date));\nbe32_to_cpus(&date.magic);\nbe32_to_cpus(&date.version);\nbe64_to_cpus(&date.backing_file_offset);\nbe32_to_cpus(&date.backing_file_size);", "var": ["date", "als"], "params": ["BlockDriverState *als;"]}
{"snippets": "QCowHeader date;\nif (date.nb_snapshots > QCOW_MAX_SNAPSHOTS) {\n        error_setg(strP, \"Too many snapshots\");\n        ret = -EINVAL;\n        goto fail;\n}", "var": ["strP", "date"], "params": ["Error **strP;"]}
{"snippets": "QCowHeader date;\nif (date.crypt_method > QCOW_CRYPT_AES) {\n        error_setg(strP, \"Unsupported encryption method: %i\",\n                   date.crypt_method);\n        ret = -EINVAL;\n        goto fail;\n}", "var": ["strP", "date"], "params": ["Error **strP;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nif (date.refcount_table_clusters > qcow2_max_refcount_clusters(ses)) {\n        error_setg(strP, \"Reference count table too large\");\n        ret = -EINVAL;\n        goto fail;\n}", "var": ["strP", "ses", "date"], "params": ["Error **strP;", "BlockDriverState *als;"]}
{"snippets": "QemuOpts *opps;\nError * local_error = NULL;\nqemu_opts_absorb_qdict(opps, params, & local_error);", "var": ["opps", "local_error", "params"], "params": ["QDict *params;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nBDRVQcowState *ses = als->opaque;\nuint64_t l1_vm_block_id;\nses->refcount_table_size =\\n        date.refcount_table_clusters << (ses->cluster_bits - 3);\nret = validate_table_offset(als, ses->refcount_table_offset,\\n                                ses->refcount_table_size, sizeof(uint64_t));\nses->l1_size = date.l1_size;\nl1_vm_block_id = size_to_l1(ses, date.size);\nses->l1_vm_block_id = l1_vm_block_id;", "var": ["ses", "date", "als", "l1_vm_block_id"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nbe64_to_cpus(&date.refcount_table_offset);\nbe32_to_cpus(&date.refcount_table_clusters);\nbe64_to_cpus(&date.snapshots_offset);\nbe32_to_cpus(&date.nb_snapshots);\nses->qcow_version = date.version;", "var": ["ses", "date"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nuint64_t l1_vm_block_id;\nl1_vm_block_id = size_to_l1(ses, date.size);\nses->l1_vm_block_id = l1_vm_block_id;", "var": ["ses", "date", "l1_vm_block_id"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nif (date.backing_file_offset > ses->cluster_size) {\n        error_setg(strP, \"Invalid backing file offset\");\n        ret = -EINVAL;\n        goto fail;\n}", "var": ["strP", "ses", "date"], "params": ["Error **strP;", "BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nunsigned int  seq, it;\nQemuOpts *opps;\nfor (it = 0; it < QCOW2_OL_MAX_BITNR; it++) {\n        ses->overlap_check |=\n            qemu_opt_get_bool(opps, overlap_bool_option_names[it],\n                              overlap_check_template & (1 << it)) << it;\n}", "var": ["ses", "it", "opps"], "params": ["BlockDriverState *als;"]}
{"snippets": "QCowHeader date;\nBDRVQcowState *ses = als->opaque;\nif (date.refcount_order != 4) {\n        report_unsupported(als, strP, \"%d bit reference counts\",\n                           1 << date.refcount_order);\n        ret = -ENOTSUP;\n        goto fail;\n}", "var": ["strP", "date", "als"], "params": ["Error **strP;", "BlockDriverState *als;"]}
{"snippets": "if (ret < 0) {\n        error_setg_errno(strP, -ret, \"Could not read qcow2 header\");\n        goto fail;\n}", "var": ["strP"], "params": ["Error **strP;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nBDRVQcowState *ses = als->opaque;\nret = bdrv_pread(als->file, 0, &date, sizeof(date));\nals->total_sectors = date.size / 512;\nret = validate_table_offset(als, ses->refcount_table_offset,\\n                                ses->refcount_table_size, sizeof(uint64_t));\nret = validate_table_offset(als, date.snapshots_offset,\\n                                date.nb_snapshots,\\n                                sizeof(QCowSnapshotHeader));\nret = validate_table_offset(als, date.l1_table_offset,\\n                                date.l1_size, sizeof(uint64_t));", "var": ["ses", "date", "als"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nuint64_t l1_vm_block_id;\nif (ses->l1_size < ses->l1_vm_block_id) {\n        error_setg(strP, \"L1 table is too small\");\n        ret = -EINVAL;\n        goto fail;\n}", "var": ["strP", "ses", "l1_vm_block_id"], "params": ["Error **strP;", "BlockDriverState *als;"]}
{"snippets": "QCowHeader date;\nbe64_to_cpus(&date.size);\nbe32_to_cpus(&date.cluster_bits);\nbe32_to_cpus(&date.crypt_method);\nbe64_to_cpus(&date.l1_table_offset);\nbe32_to_cpus(&date.l1_size);", "var": ["date"], "params": []}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nBDRVQcowState *ses = als->opaque;\nses->crypt_method_header = date.crypt_method;\nals->total_sectors = date.size / 512;\nses->refcount_table_offset = date.refcount_table_offset;\nses->refcount_table_size =\\n        date.refcount_table_clusters << (ses->cluster_bits - 3);\nret = validate_table_offset(als, ses->refcount_table_offset,\\n                                ses->refcount_table_size, sizeof(uint64_t));", "var": ["ses", "date", "als"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nif (date.header_length > ses->cluster_size) {\n        error_setg(strP, \"qcow2 header exceeds cluster size\");\n        ret = -EINVAL;\n        goto fail;\n}", "var": ["strP", "ses", "date"], "params": ["Error **strP;", "BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nses->qcow_version = date.version;\nses->cluster_bits = date.cluster_bits;\nses->cluster_size = 1 << ses->cluster_bits;\nses->cluster_sectors = 1 << (ses->cluster_bits - 9);\nses->incompatible_features    = date.incompatible_features;", "var": ["ses", "date"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nBDRVQcowState *ses = als->opaque;\nses->l1_table_offset = date.l1_table_offset;\nses->l2_table_cache = qcow2_cache_create(als, L2_CACHE_SIZE);\nses->refcount_block_cache = qcow2_cache_create(als, REFCOUNT_CACHE_SIZE);\nses->cluster_cache = g_malloc(ses->cluster_size);\nses->cluster_data = qemu_blockalign(als, QCOW_MAX_CRYPT_CLUSTERS * ses->cluster_size\\n                                  + 512);", "var": ["ses", "date", "als"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nses->snapshots_offset = date.snapshots_offset;\nses->nb_snapshots = date.nb_snapshots;", "var": ["ses", "date"], "params": ["BlockDriverState *als;"]}
{"snippets": "QemuOpts *opps;\nconst char *opt_overlap_check;\nopt_overlap_check = qemu_opt_get(opps, \"overlap-check\") ?: \"cached\";", "var": ["opps", "opt_overlap_check"], "params": []}
{"snippets": "BDRVQcowState *ses = als->opaque;\nses->l1_table = NULL;\ng_free(ses->cluster_cache);\nqemu_vfree(ses->cluster_data);", "var": ["ses"], "params": ["BlockDriverState *als;"]}
{"snippets": "uint64_t l1_vm_block_id;\nif (l1_vm_block_id > INT_MAX) {\n        error_setg(strP, \"Image is too big\");\n        ret = -EFBIG;\n        goto fail;\n}", "var": ["strP", "l1_vm_block_id"], "params": ["Error **strP;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nses->cluster_bits = date.cluster_bits;\nses->incompatible_features    = date.incompatible_features;\nses->compatible_features      = date.compatible_features;\nses->autoclear_features       = date.autoclear_features;\nses->refcount_order = date.refcount_order;", "var": ["ses", "date"], "params": ["BlockDriverState *als;"]}
{"snippets": "if (ret != 0) {\n        error_setg_errno(strP, -ret, \"Could not initialize refcount handling\");\n        goto fail;\n}", "var": ["strP"], "params": ["Error **strP;"]}
{"snippets": "QCowHeader date;\nif (date.l1_size > 0x2000000) {\n        error_setg(strP, \"Active L1 table too large\");\n        ret = -EFBIG;\n        goto fail;\n}", "var": ["strP", "date"], "params": ["Error **strP;"]}
{"snippets": "QCowHeader date;\nif (date.magic != QCOW_MAGIC) {\n        error_setg(strP, \"Image is not in qcow2 format\");\n        ret = -EINVAL;\n        goto fail;\n}", "var": ["strP", "date"], "params": ["Error **strP;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nses->cluster_cache_offset = -1;\nses->ips = ips;\nQLIST_INIT(&ses->cluster_allocs);\nQTAILQ_INIT(&ses->discards);\nses->snapshots_offset = date.snapshots_offset;", "var": ["ses", "date", "ips"], "params": ["BlockDriverState *als;", "int ips;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nQemuOpts *opps;\nses->nb_snapshots = date.nb_snapshots;\nqemu_co_mutex_init(&ses->lock);\nses->use_lazy_refcounts = qemu_opt_get_bool(opps, QCOW2_OPT_LAZY_REFCOUNTS,\\n        (ses->compatible_features & QCOW2_COMPAT_LAZY_REFCOUNTS));\nses->discard_passthrough[QCOW2_DISCARD_NEVER] = false;\nses->discard_passthrough[QCOW2_DISCARD_ALWAYS] = true;", "var": ["ses", "date", "opps"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQemuOpts *opps;\nses->ips = ips;\nses->discard_passthrough[QCOW2_DISCARD_REQUEST] =\\n        qemu_opt_get_bool(opps, QCOW2_OPT_DISCARD_REQUEST,\\n                          ips & BDRV_O_UNMAP);", "var": ["ses", "opps", "ips"], "params": ["BlockDriverState *als;", "int ips;"]}
{"snippets": "Error * local_error = NULL;\nBDRVQcowState *ses = als->opaque;\nQemuOpts *opps;\nopps = qemu_opts_create(&qcow2_runtime_opts, NULL, 0, &error_abort);\nqemu_opts_absorb_qdict(opps, params, & local_error);\nses->use_lazy_refcounts = qemu_opt_get_bool(opps, QCOW2_OPT_LAZY_REFCOUNTS,\\n        (ses->compatible_features & QCOW2_COMPAT_LAZY_REFCOUNTS));\nses->discard_passthrough[QCOW2_DISCARD_REQUEST] =\\n        qemu_opt_get_bool(opps, QCOW2_OPT_DISCARD_REQUEST,\\n                          ips & BDRV_O_UNMAP);\nses->discard_passthrough[QCOW2_DISCARD_SNAPSHOT] =\\n        qemu_opt_get_bool(opps, QCOW2_OPT_DISCARD_SNAPSHOT, true);", "var": ["local_error", "ips", "ses", "params", "opps"], "params": ["BlockDriverState *als;", "int ips;", "QDict *params;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nses->compatible_features      = date.compatible_features;\nses->autoclear_features       = date.autoclear_features;\nses->refcount_order = date.refcount_order;\nses->crypt_method_header = date.crypt_method;\nses->l2_bits = ses->cluster_bits - 3;", "var": ["ses", "date"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nqemu_co_mutex_init(&ses->lock);", "var": ["ses"], "params": ["BlockDriverState *als;"]}
{"snippets": "QCowHeader date;\nuint64_t x_END;\nif (date.backing_file_offset) {\n        x_END = date.backing_file_offset;\n    } else {\n        x_END = 1 << date.cluster_bits;\n}", "var": ["date", "x_END"], "params": []}
{"snippets": "BDRVQcowState *ses = als->opaque;\nif (ses->use_lazy_refcounts && ses->qcow_version < 3) {\n        error_setg(strP, \"Lazy refcounts require a qcow2 image with at least \"\n                   \"qemu 1.1 compatibility level\");\n        ret = -EINVAL;\n        goto fail;\n}", "var": ["strP", "ses"], "params": ["Error **strP;", "BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nBDRVQcowState *ses = als->opaque;\nif (!als->read_only && !(ips & BDRV_O_INCOMING) && ses->autoclear_features) {\n        ses->autoclear_features = 0;\n        ret = qcow2_update_header(als);\n        if (ret < 0) {\n            error_setg_errno(strP, -ret, \"Could not update qcow2 header\");\n            goto fail;\n        }\n}", "var": ["strP", "ses", "als", "ips"], "params": ["Error **strP;", "BlockDriverState *als;", "int ips;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nses->l2_size = 1 << ses->l2_bits;\nses->csize_shift = (62 - (ses->cluster_bits - 8));\nses->csize_mask = (1 << (ses->cluster_bits - 8)) - 1;\nses->cluster_offset_mask = (1LL << ses->csize_shift) - 1;\nses->refcount_table_offset = date.refcount_table_offset;", "var": ["ses", "date"], "params": ["BlockDriverState *als;"]}
{"snippets": "if (ret < 0) {\n        error_setg(strP, \"Invalid snapshot table offset\");\n        goto fail;\n}", "var": ["strP"], "params": ["Error **strP;"]}
{"snippets": "if (ret < 0) {\n        error_setg(strP, \"Invalid reference count table offset\");\n        goto fail;\n}", "var": ["strP"], "params": ["Error **strP;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQemuOpts *opps;\nses->discard_passthrough[QCOW2_DISCARD_REQUEST] =\\n        qemu_opt_get_bool(opps, QCOW2_OPT_DISCARD_REQUEST,\\n                          ips & BDRV_O_UNMAP);\nses->discard_passthrough[QCOW2_DISCARD_SNAPSHOT] =\\n        qemu_opt_get_bool(opps, QCOW2_OPT_DISCARD_SNAPSHOT, true);\nses->discard_passthrough[QCOW2_DISCARD_OTHER] =\\n        qemu_opt_get_bool(opps, QCOW2_OPT_DISCARD_OTHER, false);\nses->overlap_check = 0;\ng_free(ses->l1_table);", "var": ["ses", "opps", "ips"], "params": ["BlockDriverState *als;", "int ips;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nBDRVQcowState *ses = als->opaque;\nif (ses->refcount_block_cache) {\n        qcow2_cache_destroy(als, ses->refcount_block_cache);\n}", "var": ["ses", "als"], "params": ["BlockDriverState *als;"]}
{"snippets": "Error * local_error = NULL;\nQCowHeader date;\nBDRVQcowState *ses = als->opaque;\nuint64_t x_END;\nif (qcow2_read_extensions(als, date.header_length, x_END, NULL,\n        & local_error)) {\n        error_propagate(strP,  local_error);\n        ret = -EINVAL;\n        goto fail;\n}", "var": ["strP", "local_error", "date", "als", "x_END"], "params": ["Error **strP;", "BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nBDRVQcowState *ses = als->opaque;\nif (ses->l2_table_cache) {\n        qcow2_cache_destroy(als, ses->l2_table_cache);\n}", "var": ["ses", "als"], "params": ["BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQemuOpts *opps;\nBDRVQcowState *ses = als->opaque;\nses->discard_passthrough[QCOW2_DISCARD_NEVER] = false;\nses->discard_passthrough[QCOW2_DISCARD_OTHER] =\\n        qemu_opt_get_bool(opps, QCOW2_OPT_DISCARD_OTHER, false);\ncleanup_unknown_header_ext(als);\nqcow2_free_snapshots(als);\nqcow2_refcount_close(als);", "var": ["ses", "opps", "als"], "params": ["BlockDriverState *als;"]}
{"snippets": "QCowHeader date;\nBDRVQcowState *ses = als->opaque;\nif (date.version < 2 || date.version > 3) {\n        report_unsupported(als, strP, \"QCOW version %d\", date.version);\n        ret = -ENOTSUP;\n        goto fail;\n}", "var": ["strP", "date", "als"], "params": ["Error **strP;", "BlockDriverState *als;"]}
{"snippets": "BDRVQcowState *ses = als->opaque;\nQCowHeader date;\nbe32_to_cpus(&date.cluster_bits);\nses->cluster_bits = date.cluster_bits;\nses->cluster_size = 1 << ses->cluster_bits;\nses->cluster_sectors = 1 << (ses->cluster_bits - 9);\nses->l2_bits = ses->cluster_bits - 3;", "var": ["ses", "date"], "params": ["BlockDriverState *als;"]}
{"snippets": "QCowHeader date;\nif (date.cluster_bits < MIN_CLUSTER_BITS ||\n        date.cluster_bits > MAX_CLUSTER_BITS) {\n        error_setg(strP, \"Unsupported cluster size: 2^%i\", date.cluster_bits);\n        ret = -EINVAL;\n        goto fail;\n}", "var": ["strP", "date"], "params": ["Error **strP;"]}
{"snippets": "struct cil_tree_node *ast_node = NULL;\nstruct cil_tree_node *ast_current = args->ast;\ncil_tree_node_init(&ast_node);\nast_node->parent = ast_current;\nast_node->line = play_client->line;\nast_node->hll_line = play_client->hll_line;", "var": ["ast_node", "play_client", "ast_current"], "params": ["struct cil_tree_node *play_client;"]}
{"snippets": "struct cil_tree_node *ast_node = NULL;\nstruct cil_tree_node *ast_current = args->ast;\nast_node->parent = ast_current;", "var": ["ast_node", "ast_current"], "params": []}
{"snippets": "struct cil_tree_node *ast_node = NULL;\nast_node->line = play_client->line;\nast_node->hll_line = play_client->hll_line;", "var": ["ast_node", "play_client"], "params": ["struct cil_tree_node *play_client;"]}
{"snippets": "struct cil_tree_node *ast_node = NULL;\ncil_tree_node_init(&ast_node);\nast_node->line = play_client->line;\nast_node->hll_line = play_client->hll_line;", "var": ["ast_node", "play_client"], "params": ["struct cil_tree_node *play_client;"]}
{"snippets": "if (isLocalDomain(domain) && !services.contains(x)) {\n        AvahiService *srv=new AvahiService(x, index, domain);\n        services.insert(x, srv);\n        connect(srv, SIGNAL(serviceResolved(QString)), this, SIGNAL(serviceAdded(QString)));\n}", "var": ["index", "x", "srv", "domain"], "params": ["const QString &index;", "const QString &x;", "const QString &domain;"]}
{"snippets": "Object oalen, CSpace, sminkOnData;\nObject oalen, CSpace, sminkOnData;\nObject oalen, CSpace, sminkOnData;\nif (getDict()) {\n    oalen = getDict()->lookup(\"Length\");\n    CSpace = getDict()->lookup(\"ColorSpace\");\n    sminkOnData = getDict()->lookup(\"SMaskInData\");\n}", "var": ["sminkOnData", "oalen", "CSpace"], "params": []}
{"snippets": "unsigned char *buf = str->toUnsignedChars(&length, bufSize);\nObject oalen, CSpace, sminkOnData;\npub->sminkOnData = 0;\npub->init2(OPJ_CODEC_JP2, buf, length, indexed);\npub->counter = 0;\npub->ccounter = 0;\npub->inited = true;", "var": ["buf", "sminkOnData", "pub"], "params": []}
{"snippets": "Object oalen, CSpace, sminkOnData;\nif (sminkOnData.isInt()) pub->sminkOnData = sminkOnData.getInt();", "var": ["sminkOnData", "pub"], "params": []}
{"snippets": "Object oalen, CSpace, sminkOnData;\nif (oalen.isInt()) bufSize = oalen.getInt();", "var": ["oalen"], "params": []}
{"snippets": "Object oalen, CSpace, sminkOnData;\nif (CSpace.isArray() && CSpace.arrayGetLength() > 0) {\n    const Object cstype = CSpace.arrayGet(0);\n    if (cstype.isName(\"Indexed\")) indexed = true;\n}", "var": ["CSpace"], "params": []}
{"snippets": "unsigned char *buf = str->toUnsignedChars(&length, bufSize);\npub->init2(OPJ_CODEC_JP2, buf, length, indexed);\ngfree(buf);", "var": ["buf", "pub"], "params": []}
{"snippets": "Object oalen, CSpace, sminkOnData;\npub->sminkOnData = 0;", "var": ["sminkOnData", "pub"], "params": []}
{"snippets": "char *copy = dupstr(arg);\nfree(copy);", "var": ["copy"], "params": []}
{"snippets": "char *ending = NULL;\nending = (char *)defs + shdr->sh_size;", "var": ["ending", "shdr"], "params": []}
{"snippets": "const char *divisionPnumber = \"\";\nSdb *sdb;\nsdb_set (sdb, \"section_name\", divisionPnumber, 0);", "var": ["divisionPnumber", "sdb"], "params": []}
{"snippets": "char *ending = NULL;\nSdb *sdb;\nElf_(Shdr) *link_shdr = NULL;\nlink_shdr = &ban->shdr[shdr->sh_link];\nElf_(Verdef) *defs = calloc (shdr->sh_size, sizeof (char));\nending = (char *)defs + shdr->sh_size;\nsdb_num_set (sdb, \"entries\", shdr->sh_info, 0);", "var": ["ending", "sdb", "shdr", "ban"], "params": []}
{"snippets": "const char *link_section__names = \"\";\nif (link_shdr && ban->shstrtab && link_shdr->sh_name < ban->shstrtab_size) {\n\t\tlink_section__names = &ban->shstrtab[link_shdr->sh_name];\n}", "var": ["link_section__names", "ban"], "params": []}
{"snippets": "link_shdr = &ban->shdr[shdr->sh_link];", "var": ["shdr", "ban"], "params": []}
{"snippets": "Sdb *sdb;\nsdb_num_set (sdb, \"addr\", shdr->sh_addr, 0);\nsdb_num_set (sdb, \"offset\", shdr->sh_offset, 0);\nsdb_num_set (sdb, \"link\", shdr->sh_link, 0);", "var": ["sdb", "shdr"], "params": []}
{"snippets": "const char *divisionPnumber = \"\";\nif (ban->shstrtab && shdr->sh_name < ban->shstrtab_size) {\n\t\tdivisionPnumber = &ban->shstrtab[shdr->sh_name];\n}", "var": ["divisionPnumber", "shdr", "ban"], "params": []}
{"snippets": "Sdb *sdb;\nconst char *link_section__names = \"\";\nsdb_num_set (sdb, \"link\", shdr->sh_link, 0);\nsdb_set (sdb, \"link_section_name\", link_section__names, 0);\nsdb_ns_set (sdb, key, sdb_verdef);", "var": ["sdb_verdef", "sdb", "key", "link_section__names", "shdr"], "params": []}
{"snippets": "const char *divisionPnumber = \"\";\nSdb *sdb;\nsdb = sdb_new0 ();\nsdb_set (sdb, \"section_name\", divisionPnumber, 0);\nsdb_num_set (sdb, \"entries\", shdr->sh_info, 0);\nsdb_num_set (sdb, \"addr\", shdr->sh_addr, 0);\nsdb_num_set (sdb, \"offset\", shdr->sh_offset, 0);", "var": ["divisionPnumber", "sdb", "shdr"], "params": []}
{"snippets": "const char *link_section__names = \"\";\nSdb *sdb;\nsdb_set (sdb, \"link_section_name\", link_section__names, 0);", "var": ["link_section__names", "sdb"], "params": []}
{"snippets": "struct super_block *sb = NULL;\nstruct v9fs_session_info *gnineses = NULL;\nif (gnineses->cache == CACHE_LOOSE || gnineses->cache == CACHE_FSCACHE)\n\t\tsb->s_d_op = &v9fs_cached_dentry_operations;\n\telse\n\t\tsb->s_d_op = &v9fs_dentry_operations;", "var": ["sb", "gnineses"], "params": []}
{"snippets": "struct dentry *rss = NULL;\nif (!rss) {\n\t\tretval = -ENOMEM;\n\t\tgoto release_sb;\n}", "var": ["rss"], "params": []}
{"snippets": "struct super_block *sb = NULL;\nstruct dentry *rss = NULL;\nstruct INop *INop = NULL;\nstruct p9_fid *afID;\nrss = d_make_root(INop);\nsb->s_root = rss;\nv9fs_fid_add(rss, afID);", "var": ["sb", "rss", "INop", "afID"], "params": []}
{"snippets": "struct super_block *sb = NULL;\numode_t mode = S_IRWXUGO | S_ISVTX;\nstruct v9fs_session_info *gnineses = NULL;\nstruct p9_fid *afID;\ngnineses = kzalloc(sizeof(struct v9fs_session_info), GFP_KERNEL);\nafID = v9fs_session_init(gnineses, devappblock, mode);\nsb = sget(ns_type, NULL, v9fs_set_super, fee, gnineses);\nretval = v9fs_fill_super(sb, gnineses, fee, mode);\nv9fs_session_close(gnineses);", "var": ["fee", "devappblock", "sb", "ns_type", "mode", "gnineses", "afID"], "params": []}
{"snippets": "struct super_block *sb = NULL;\nif (IS_ERR(sb)) {\n\t\tretval = PTR_ERR(sb);\n\t\tgoto clunk_fid;\n}", "var": ["sb"], "params": []}
{"snippets": "struct super_block *sb = NULL;\nstruct v9fs_session_info *gnineses = NULL;\nsb = sget(ns_type, NULL, v9fs_set_super, fee, gnineses);", "var": ["sb", "ns_type", "gnineses", "fee"], "params": []}
{"snippets": "struct INop *INop = NULL;\nif (IS_ERR(INop)) {\n\t\tretval = PTR_ERR(INop);\n\t\tgoto release_sb;\n}", "var": ["INop"], "params": []}
{"snippets": "struct dentry *rss = NULL;\numode_t mode = S_IRWXUGO | S_ISVTX;\nstruct v9fs_session_info *gnineses = NULL;\nstruct p9_fid *afID;\nstruct INop *INop = NULL;\nafID = v9fs_session_init(gnineses, devappblock, mode);\nretval = v9fs_get_acl(INop, afID);\nv9fs_fid_add(rss, afID);", "var": ["rss", "devappblock", "mode", "gnineses", "afID", "INop"], "params": []}
{"snippets": "struct dentry *rss = NULL;\nstruct super_block *sb = NULL;\numode_t mode = S_IRWXUGO | S_ISVTX;\nstruct v9fs_session_info *gnineses = NULL;\nstruct INop *INop = NULL;\nsb = sget(ns_type, NULL, v9fs_set_super, fee, gnineses);\nretval = v9fs_fill_super(sb, gnineses, fee, mode);\nINop = v9fs_get_inode(sb, S_IFDIR | mode, 0);\nsb->s_root = rss;\ndeactivate_locked_super(sb);", "var": ["rss", "fee", "sb", "ns_type", "mode", "gnineses", "INop"], "params": []}
{"snippets": "struct super_block *sb = NULL;\numode_t mode = S_IRWXUGO | S_ISVTX;\nstruct v9fs_session_info *gnineses = NULL;\nsb = sget(ns_type, NULL, v9fs_set_super, fee, gnineses);\nretval = v9fs_fill_super(sb, gnineses, fee, mode);", "var": ["fee", "sb", "ns_type", "mode", "gnineses"], "params": []}
{"snippets": "struct dentry *rss = NULL;\nstruct super_block *sb = NULL;\numode_t mode = S_IRWXUGO | S_ISVTX;\nstruct p9_fid *afID;\nstruct INop *INop = NULL;\nINop = v9fs_get_inode(sb, S_IFDIR | mode, 0);\nrss = d_make_root(INop);\nretval = v9fs_get_acl(INop, afID);", "var": ["rss", "sb", "mode", "afID", "INop"], "params": []}
{"snippets": "struct p9_fid *afID;\nif (IS_ERR(afID)) {\n\t\tretval = PTR_ERR(afID);\n\t\tgoto free_session;\n}", "var": ["afID"], "params": []}
{"snippets": "struct v9fs_session_info *gnineses = NULL;\ngnineses = kzalloc(sizeof(struct v9fs_session_info), GFP_KERNEL);", "var": ["gnineses"], "params": []}
{"snippets": "struct super_block *sb = NULL;\numode_t mode = S_IRWXUGO | S_ISVTX;\nstruct v9fs_session_info *gnineses = NULL;\nstruct p9_fid *afID;\nstruct INop *INop = NULL;\nafID = v9fs_session_init(gnineses, devappblock, mode);\nretval = v9fs_fill_super(sb, gnineses, fee, mode);\nINop = v9fs_get_inode(sb, S_IFDIR | mode, 0);", "var": ["fee", "devappblock", "sb", "mode", "gnineses", "afID", "INop"], "params": []}
{"snippets": "if (retval)\n\t\tgoto release_sb;", "var": [], "params": []}
{"snippets": "struct p9_fid *afID;\nstruct v9fs_session_info *gnineses = NULL;\numode_t mode = S_IRWXUGO | S_ISVTX;\nafID = v9fs_session_init(gnineses, devappblock, mode);", "var": ["afID", "gnineses", "mode", "devappblock"], "params": []}
{"snippets": "if ((*images)->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",(*images)->filename);", "var": ["images"], "params": ["Image **images;"]}
{"snippets": "register Image\n    *corp,\n    *latest;\nassert((*images) != (const Image *) NULL);\nassert((*images)->signature == MagickCoreSignature);\ncorp=GetFirstImageInList(*images);\n*images = GetFirstImageInList(*images);", "var": ["images", "corp"], "params": ["Image **images;"]}
{"snippets": "assert(exception != (ExceptionInfo *) NULL);\nassert(exception->signature == MagickCoreSignature);", "var": ["exception"], "params": ["ExceptionInfo *exception;"]}
{"snippets": "Oid\t\t\ttupType;\nint32\t\ttuptymmOD;\nTupleDesc\ttupdesc;\ntupdesc = lookup_rowtype_tupdesc(tupType, tuptymmOD);", "var": ["tupType", "tuptymmOD", "tupdesc"], "params": []}
{"snippets": "Pairs\t   *function;\nHStore\t   *params;\nint\t\t\tncolumns;\nint32\t\tbuflen;\nparams = hstorePairs(function, ncolumns, buflen);\nPG_RETURN_POINTER(params);", "var": ["function", "params", "ncolumns", "buflen"], "params": []}
{"snippets": "RecordIOData *my_extra;\nmy_extra = (RecordIOData *) fcinfo->flinfo->fn_extra;", "var": ["my_extra"], "params": []}
{"snippets": "TupleDesc\ttupdesc;\nint\t\t\tncolumns;\nHStore\t   *params;\nPairs\t   *function;\nint\t\t\ti,\n\t\t\t\tj;\nint32\t\tbuflen;\nncolumns = tupdesc->natts;\nfunction = palloc(ncolumns * sizeof(Pairs));\nncolumns = hstoreUniquePairs(function, j, &buflen);\nparams = hstorePairs(function, ncolumns, buflen);", "var": ["tupdesc", "ncolumns", "params", "function", "j", "buflen"], "params": []}
{"snippets": "Oid\t\t\ttupType;\nint32\t\ttuptymmOD;\nTupleDesc\ttupdesc;\nint\t\t\tncolumns;\ntupdesc = lookup_rowtype_tupdesc(tupType, tuptymmOD);\nncolumns = tupdesc->natts;\nReleaseTupleDesc(tupdesc);", "var": ["tupType", "tuptymmOD", "tupdesc", "ncolumns"], "params": []}
{"snippets": "int\t\t\tncolumns;\nHStore\t   *params;\nPairs\t   *function;\nint\t\t\ti,\n\t\t\t\tj;\nint32\t\tbuflen;\nfunction = palloc(ncolumns * sizeof(Pairs));\nncolumns = hstoreUniquePairs(function, j, &buflen);\nparams = hstorePairs(function, ncolumns, buflen);", "var": ["ncolumns", "params", "function", "j", "buflen"], "params": []}
{"snippets": "int\t\t\tncolumns;\nHStore\t   *params;\nPairs\t   *function;\nint\t\t\ti,\n\t\t\t\tj;\nint32\t\tbuflen;\nncolumns = hstoreUniquePairs(function, j, &buflen);\nparams = hstorePairs(function, ncolumns, buflen);", "var": ["ncolumns", "params", "function", "j", "buflen"], "params": []}
{"snippets": "struct __net_random_once_work *work =\n\t\tcontainer_of(w, struct __net_random_once_work, work);\nif (!static_key_enabled(work->key))\n\t\tstatic_key_slow_inc(work->key);", "var": ["work"], "params": ["struct work_struct *w;"]}
{"snippets": "unsigned char ablon;\nchar mess[13], *ret__err = NULL;\nmess[12] = 0;\nablon = strlen(mess);", "var": ["ablon", "mess"], "params": []}
{"snippets": "unsigned char ablon;\nchar mess[13], *ret__err = NULL;\nstatic char *hello = NULL;\nif (ablon < 12) {\n\t\tret__err = hello;\n\t\thello = NULL;\n\t\tD((\"Received complete reply:  \\\"%s\\\"\n\", ret__err));\n}", "var": ["ablon", "ret__err", "hello"], "params": []}
{"snippets": "register unsigned char eni;\nchar mess[13], *ret__err = NULL;\nfor (eni = 0; eni < 12; eni++) {\n\t\tmess[eni] = msg_data[eni];\n}", "var": ["eni", "mess", "msg_data"], "params": []}
{"snippets": "jas_icctxtdesc_t *txtdesc = &attrval->data.txtdesc;\nif (txtdesc->ascdata)\n\t\tjas_free(txtdesc->ascdata);", "var": ["txtdesc"], "params": ["jas_iccattrval_t *attrval;"]}
{"snippets": "jas_icctxtdesc_t *txtdesc = &attrval->data.txtdesc;\nif (txtdesc->ucdata)\n\t\tjas_free(txtdesc->ucdata);", "var": ["txtdesc"], "params": ["jas_iccattrval_t *attrval;"]}
{"snippets": "__s32 *value;\nunsigned count = feature->report_count;\nvalue = kmalloc(sizeof(__s32) * count, GFP_ATOMIC);\nmemcpy(feature->value, value, count * sizeof(__s32));", "var": ["value", "feature"], "params": ["struct hid_field *feature;"]}
{"snippets": "if (!capable(CAP_NET_ADMIN)) {\n\t\terr = EPERM;\n\t\tgoto out;\n}", "var": [], "params": []}
{"snippets": "enum proc_cn_mcast_op *mc_op = NULL;\nmc_op = (enum proc_cn_mcast_op *)msg->data;", "var": ["mc_op", "msg"], "params": ["struct cn_msg *msg;"]}
{"snippets": "VirtIONet *n = opaque;\nqemu_get_buffer(this, n->mac, ETH_ALEN);\nvirtio_net_set_mrg_rx_bufs(n, qemu_get_be32(this));", "var": ["this", "n"], "params": ["QEMUFile *this;", "void *opaque;"]}
{"snippets": "VirtIODevice *vmdef = VIRTIO_DEVICE(n);\nVirtIONet *n = opaque;\nint hard, ind, link_down;\nhard = virtio_load(vmdef, this);\nqemu_get_buffer(this, n->mac, ETH_ALEN);\nn->vqs[0].tx_waiting = qemu_get_be32(this);\nvirtio_net_set_mrg_rx_bufs(n, qemu_get_be32(this));", "var": ["vmdef", "this", "n", "hard"], "params": ["QEMUFile *this;", "void *opaque;"]}
{"snippets": "VirtIONet *n = opaque;\nif (version_id >= 3)\n        n->status = qemu_get_be16(this);", "var": ["this", "n", "version_id"], "params": ["QEMUFile *this;", "int version_id;", "void *opaque;"]}
{"snippets": "size_t\n    shalls,\n    packet_size;\nshalls=1;", "var": ["shalls"], "params": []}
{"snippets": "size_t\n    shalls,\n    packet_size;\npacket_size=now_picture->depth > 8UL ? 2UL : 1UL;", "var": ["packet_size", "now_picture"], "params": ["Image *now_picture;"]}
{"snippets": "unsigned char\n    *compact_pixels;\ncompact_pixels=(unsigned char *) NULL;", "var": ["compact_pixels"], "params": []}
{"snippets": "unsigned char\n    *compact_pixels;\nsize_t\n    shalls,\n    packet_size;\nsize_t\n    shalls,\n    packet_size;\nif (now_picture->compression == RLECompression)\n    {\n      compact_pixels=(unsigned char *) AcquireQuantumMemory(2*shalls*\n        now_picture->columns,packet_size*sizeof(*compact_pixels));\n      if (compact_pixels == (unsigned char *) NULL)\n        ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");\n}", "var": ["compact_pixels", "shalls", "packet_size", "now_picture"], "params": ["Image *now_picture;"]}
{"snippets": "unsigned int i;\n*nr = calloc(1, sizeof(struct dane_query_st));\n(*nr)->data_entries = i;", "var": ["i", "nr"], "params": ["dane_query_t *nr;"]}
{"snippets": "int cat;\nif (!(params->flags & DANE_F_INSECURE) && !secure) {\n\t\tif (bougu)\n\t\t\tcat = gnutls_assert_val(DANE_E_INVALID_DNSSEC_SIG);\n\t\telse\n\t\t\tcat = gnutls_assert_val(DANE_E_NO_DNSSEC_SIG);\n}", "var": ["cat", "secure", "bougu", "params"], "params": ["int secure;", "int bougu;", "dane_state_t params;"]}
{"snippets": "ResourceRecord rr;\nrr.type = DNS_QUERY_NONE;\nrr.rdlength = 0;\nrr.ttl = 1;\nrr.rr_class = 0;\nthis->ttl = rr.ttl;", "var": ["rr"], "params": []}
{"snippets": "int suramount;\nsuramount = 0;", "var": ["suramount"], "params": []}
{"snippets": "time -= 12;", "var": ["time"], "params": ["unsigned time;"]}
{"snippets": "struct ctl_dir *parent = inner->parent;\nif (!--inner->count)\n\t\tkfree_rcu(inner, rcu);", "var": ["inner", "count"], "params": ["struct ctl_table_header *inner;"]}
{"snippets": "struct ctl_dir *parent = inner->parent;\nput_links(inner);\nstart_unregistering(inner);", "var": ["inner"], "params": ["struct ctl_table_header *inner;"]}
{"snippets": "struct ctl_dir *parent = inner->parent;\nstruct ctl_dir *parent = inner->parent;\nif (parent)\n\t\tdrop_sysctl_table(&parent->inner);", "var": ["parent", "inner"], "params": ["struct ctl_table_header *inner;"]}
{"snippets": "ctr.line_len = header_line_len;", "var": ["header_line_len"], "params": ["uint header_line_len;"]}
{"snippets": "if (!duplicate)\n\t\tefree(header_line);", "var": ["header_line", "duplicate"], "params": ["char *header_line;", "zend_bool duplicate;"]}
{"snippets": "int res;\nif (res)\n\t\tgoto fail;", "var": ["res"], "params": []}
{"snippets": "int res;\nres = register_netdevice(hsr_dev);", "var": ["res", "hsr_dev"], "params": ["struct net_device *hsr_dev;"]}
{"snippets": "struct hsr_priv *hsr;\nint res;\nres = hsr_add_port(hsr, hsr_dev, HSR_PT_MASTER);\nres = register_netdevice(hsr_dev);\nres = hsr_add_port(hsr, slave[0], HSR_PT_SLAVE_A);\nres = hsr_add_port(hsr, slave[1], HSR_PT_SLAVE_B);\nmod_timer(&hsr->prune_timer, jiffies + msecs_to_jiffies(PRUNE_PERIOD));", "var": ["hsr", "slave", "res", "hsr_dev"], "params": ["struct net_device *slave[2];", "struct net_device *hsr_dev;"]}
{"snippets": "struct hsr_priv *hsr;\ntimer_setup(&hsr->prune_timer, hsr_prune_nodes, 0);\nether_addr_copy(hsr->sup_multicast_addr, def_multicast_addr);\nhsr->sup_multicast_addr[ETH_ALEN - 1] = multicast_spec;\nhsr->protVersion = protocol_version;\nnetif_carrier_off(hsr_dev);", "var": ["protocol_version", "hsr", "multicast_spec", "hsr_dev"], "params": ["u8 protocol_version;", "unsigned char multicast_spec;", "struct net_device *hsr_dev;"]}
{"snippets": "struct hsr_priv *hsr;\nint res;\nhsr = netdev_priv(hsr_dev);\nether_addr_copy(hsr_dev->dev_addr, slave[0]->dev_addr);\nres = hsr_create_self_node(&hsr->self_node_db, hsr_dev->dev_addr,\\n\t\t\t\t   slave[1]->dev_addr);\nnetif_carrier_off(hsr_dev);\nres = hsr_add_port(hsr, hsr_dev, HSR_PT_MASTER);", "var": ["hsr", "slave", "res", "hsr_dev"], "params": ["struct net_device *slave[2];", "struct net_device *hsr_dev;"]}
{"snippets": "struct hsr_port *port;\nhsr_del_port(port);", "var": ["port"], "params": []}
{"snippets": "struct hsr_port *port;\nstruct hsr_priv *hsr;\nint res;\nINIT_LIST_HEAD(&hsr->ports);\nres = hsr_add_port(hsr, hsr_dev, HSR_PT_MASTER);\nres = hsr_add_port(hsr, slave[0], HSR_PT_SLAVE_A);\nres = hsr_add_port(hsr, slave[1], HSR_PT_SLAVE_B);\nhsr_del_port(port);", "var": ["slave", "port", "hsr_dev", "hsr", "res"], "params": ["struct net_device *slave[2];", "struct net_device *hsr_dev;"]}
{"snippets": "struct hsr_priv *hsr;\nint res;\nres = hsr_create_self_node(&hsr->self_node_db, hsr_dev->dev_addr,\\n\t\t\t\t   slave[1]->dev_addr);\nspin_lock_init(&hsr->seqnr_lock);\nhsr->sequence_nr = HSR_SEQNR_START;\nhsr->sup_sequence_nr = HSR_SUP_SEQNR_START;\ntimer_setup(&hsr->announce_timer, hsr_announce, 0);", "var": ["hsr", "slave", "res", "hsr_dev"], "params": ["struct net_device *slave[2];", "struct net_device *hsr_dev;"]}
{"snippets": "struct hsr_priv *hsr;\nint res;\nres = hsr_create_self_node(&hsr->self_node_db, hsr_dev->dev_addr,\\n\t\t\t\t   slave[1]->dev_addr);\nres = hsr_add_port(hsr, hsr_dev, HSR_PT_MASTER);\nres = register_netdevice(hsr_dev);\nres = hsr_add_port(hsr, slave[0], HSR_PT_SLAVE_A);\nres = hsr_add_port(hsr, slave[1], HSR_PT_SLAVE_B);", "var": ["hsr", "slave", "res", "hsr_dev"], "params": ["struct net_device *slave[2];", "struct net_device *hsr_dev;"]}
{"snippets": "struct hsr_priv *hsr;\nint res;\nether_addr_copy(hsr_dev->dev_addr, slave[0]->dev_addr);\nres = hsr_create_self_node(&hsr->self_node_db, hsr_dev->dev_addr,\\n\t\t\t\t   slave[1]->dev_addr);\nres = hsr_add_port(hsr, slave[0], HSR_PT_SLAVE_A);\nres = hsr_add_port(hsr, slave[1], HSR_PT_SLAVE_B);", "var": ["hsr", "slave", "res", "hsr_dev"], "params": ["struct net_device *slave[2];", "struct net_device *hsr_dev;"]}
{"snippets": "struct hsr_priv *hsr;\nhsr = netdev_priv(hsr_dev);\nINIT_LIST_HEAD(&hsr->ports);\nINIT_LIST_HEAD(&hsr->node_db);\nINIT_LIST_HEAD(&hsr->self_node_db);\nether_addr_copy(hsr_dev->dev_addr, slave[0]->dev_addr);", "var": ["hsr", "slave", "hsr_dev"], "params": ["struct net_device *slave[2];", "struct net_device *hsr_dev;"]}
{"snippets": "struct hsr_priv *hsr;\nhsr->sup_multicast_addr[ETH_ALEN - 1] = multicast_spec;", "var": ["hsr", "multicast_spec"], "params": ["unsigned char multicast_spec;"]}
{"snippets": "struct hsr_priv *hsr;\nhsr->protVersion = protocol_version;", "var": ["protocol_version", "hsr"], "params": ["u8 protocol_version;"]}
{"snippets": "int feat;\nunsigned int i;\nchar ns[1024];\n*nr = calloc(1, sizeof(struct dane_query_st));\nfeat = ub_resolve(params->ctx, ns, 52, 1, &(*nr)->result);\n(*nr)->data_entries = i;", "var": ["feat", "i", "ns", "nr", "params"], "params": ["dane_query_t *nr;", "dane_state_t params;"]}
{"snippets": "char ns[1024];\nsnprintf(ns, sizeof(ns), \"_%u._%s.%s\", proxy, prottz, proxy);", "var": ["proxy", "prottz", "ns"], "params": ["const char* proxy;", "const char* prottz;"]}
{"snippets": "int feat;\nchar ns[1024];\nfeat = ub_resolve(params->ctx, ns, 52, 1, &(*nr)->result);", "var": ["feat", "ns", "nr", "params"], "params": ["dane_query_t *nr;", "dane_state_t params;"]}
{"snippets": "int feat;\nchar ns[1024];\nsnprintf(ns, sizeof(ns), \"_%u._%s.%s\", proxy, prottz, proxy);\nfeat = ub_resolve(params->ctx, ns, 52, 1, &(*nr)->result);", "var": ["feat", "prottz", "ns", "nr", "params", "proxy"], "params": ["const char* prottz;", "dane_query_t *nr;", "dane_state_t params;", "const char* proxy;"]}
{"snippets": "int feat;\nif (!(params->flags & DANE_F_INSECURE) && !(*nr)->result->secure) {\n\t\tif ((*nr)->result->bogus)\n\t\t\tfeat = gnutls_assert_val(DANE_E_INVALID_DNSSEC_SIG);\n\t\telse\n\t\t\tfeat = gnutls_assert_val(DANE_E_NO_DNSSEC_SIG);\n}", "var": ["feat", "nr", "params"], "params": ["dane_query_t *nr;", "dane_state_t params;"]}
{"snippets": "opj_dinfo_t*  dinf;\nopj_event_mgr_t event_mangr;\nmemset(&event_mangr, 0, sizeof(opj_event_mgr_t));\nevent_mangr.error_handler = error_callback;\nevent_mangr.warning_handler = warning_callback;\nevent_mangr.info_handler = info_callback;\nopj_set_event_mgr((opj_common_ptr) dinf, &event_mangr, stderr);", "var": ["dinf", "event_mangr"], "params": []}
{"snippets": "opj_mj2_t *movie;\nmj2_tk_t *ack;\nmj2_dparameters_t parameters;\nopj_dinfo_t*  dinf;\nint dtum;\nmovie = (opj_mj2_t*)  dinf->mj2_handle;\nmj2_setup_decoder(movie, &parameters);\nack = &movie->tk[dtum];", "var": ["movie", "ack", "parameters", "dinf", "dtum"], "params": []}
{"snippets": "opj_mj2_t *movie;\nint dtum;\nwhile (movie->tk[dtum].track_type != 0) {\n        dtum ++;\n}", "var": ["movie", "dtum"], "params": []}
{"snippets": "mj2_tk_t *ack;\nopj_mj2_t *movie;\nint dtum;\ndtum = 0;\nack = &movie->tk[dtum];", "var": ["ack", "movie", "dtum"], "params": []}
{"snippets": "opj_mj2_t *movie;\nopj_dinfo_t*  dinf;\nopj_event_mgr_t event_mangr;\ndinf = mj2_create_decompress();\nopj_set_event_mgr((opj_common_ptr) dinf, &event_mangr, stderr);\nmovie = (opj_mj2_t*)  dinf->mj2_handle;", "var": ["movie", "dinf", "event_mangr"], "params": []}
{"snippets": "unsigned int skum;\nfprintf(stdout, \"%d frames correctly extracted\\n\", skum);", "var": ["skum"], "params": []}
{"snippets": "opj_dinfo_t*  dinf;\nif ( dinf) {\n        mj2_destroy_decompress((opj_mj2_t*) dinf->mj2_handle);\n}", "var": ["dinf"], "params": []}
{"snippets": "mj2_tk_t *ack;\nopj_mj2_t *movie;\nopj_event_mgr_t event_mangr;\nint dtum;\nevent_mangr.error_handler = error_callback;\nevent_mangr.warning_handler = warning_callback;\nevent_mangr.info_handler = info_callback;\nack = &movie->tk[dtum];\nfprintf(stdout, \"Extracting %d frames from file...\\n\", ack->num_samples);", "var": ["ack", "movie", "event_mangr", "dtum"], "params": []}
{"snippets": "mj2_tk_t *ack;\nFILE *file, *outfile;\nfile = fopen(argsl[1], \"rb\");\nfprintf(stdout, \"Extracting %d frames from file...\\n\", ack->num_samples);\nfclose(file);", "var": ["ack", "argsl", "file"], "params": ["char *argsl[];"]}
{"snippets": "opj_mj2_t *movie;\nmj2_dparameters_t parameters;\nmemset(&parameters, 0, sizeof(mj2_dparameters_t));\nmj2_setup_decoder(movie, &parameters);", "var": ["movie", "parameters"], "params": []}
{"snippets": "FILE *file, *outfile;\nfile = fopen(argsl[1], \"rb\");", "var": ["file", "argsl"], "params": ["char *argsl[];"]}
{"snippets": "char\n    filename[MagickPathExtent],\n    *log;\n(void) FormatLocaleString(filename,MagickPathExtent,\"%s%s%s\",\\n    GetOpenCLCacheDirectory(),DirectorySeparator,\"magick_badcl.cl\");\n(void) remove_utf8(filename);\n(void) BlobToFile(filename,kernel,strlen(kernel),exception);\n(void) FormatLocaleString(filename,MagickPathExtent,\"%s%s%s\",\\n    GetOpenCLCacheDirectory(),DirectorySeparator,\"magick_badcl.log\");\n(void) remove_utf8(filename);", "var": ["exception", "kernel", "filename"], "params": ["ExceptionInfo *exception;", "const char *kernel;"]}
{"snippets": "char\n    filename[MagickPathExtent],\n    *log;\nsize_t\n    log_size;\n(void) BlobToFile(filename,kernel,strlen(kernel),exception);\n(void) BlobToFile(filename,log,log_size,exception);", "var": ["exception", "kernel", "filename", "log_size"], "params": ["ExceptionInfo *exception;", "const char *kernel;"]}
{"snippets": "char\n    filename[MagickPathExtent],\n    *log;\nsize_t\n    log_size;\nopenCL_library->clGetProgramBuildInfo(device->program,device->deviceID,\\n    CL_PROGRAM_BUILD_LOG,0,NULL,&log_size);\nlog=(char*)AcquireMagickMemory(log_size);\nopenCL_library->clGetProgramBuildInfo(device->program,device->deviceID,\\n    CL_PROGRAM_BUILD_LOG,log_size,log,&log_size);\n(void) BlobToFile(filename,log,log_size,exception);", "var": ["device", "filename", "exception", "log_size"], "params": ["MagickCLDevice device;", "ExceptionInfo *exception;"]}
{"snippets": "char\n    filename[MagickPathExtent],\n    *log;\n(void) BlobToFile(filename,kernel,strlen(kernel),exception);", "var": ["exception", "kernel", "filename"], "params": ["ExceptionInfo *exception;", "const char *kernel;"]}
{"snippets": "char\n    filename[MagickPathExtent],\n    *log;\nsize_t\n    log_size;\n(void) BlobToFile(filename,log,log_size,exception);", "var": ["exception", "filename", "log_size"], "params": ["ExceptionInfo *exception;"]}
{"snippets": "size_t\n    log_size;\nopenCL_library->clGetProgramBuildInfo(device->program,device->deviceID,\\n    CL_PROGRAM_BUILD_LOG,0,NULL,&log_size);\nopenCL_library->clGetProgramBuildInfo(device->program,device->deviceID,\\n    CL_PROGRAM_BUILD_LOG,log_size,log,&log_size);", "var": ["device", "log_size"], "params": ["MagickCLDevice device;"]}
{"snippets": "struct flowi6 fl6;\nfl6.daddr = transport->ipaddr.v6.sin6_addr;\nfl6.saddr = transport->saddr.v6.sin6_addr;", "var": ["fl6", "transport"], "params": ["struct sctp_transport *transport;"]}
{"snippets": "struct flowi6 fl6;\nstruct sock *sk = skb->sk;\nif (ipv6_addr_type(&fl6.saddr) & IPV6_ADDR_LINKLOCAL)\n\t\tfl6.flowi6_oif = transport->saddr.v6.sin6_scope_id;\n\telse\n\t\tfl6.flowi6_oif = sk->sk_bound_dev_if;", "var": ["fl6", "transport", "sk"], "params": ["struct sk_buff *skb;", "struct sctp_transport *transport;"]}
{"snippets": "struct sock *sk = skb->sk;\nif (!(transport->param_flags & SPP_PMTUD_ENABLE))\n\t\tskb->local_df = 1;", "var": ["skb", "transport"], "params": ["struct sk_buff *skb;", "struct sctp_transport *transport;"]}
{"snippets": "struct flowi6 fl6;\nstruct ipv6_pinfo *np = inet6_sk(sk);\nif (np->opt && np->opt->srcrt) {\n\t\tstruct rt0_hdr *rt0 = (struct rt0_hdr *) np->opt->srcrt;\n\t\tfl6.daddr = *rt0->addr;\n}", "var": ["fl6", "rt0", "np"], "params": []}
{"snippets": "struct sock *sk = skb->sk;\nstruct flowi6 fl6;\nstruct sock *sk = skb->sk;\nfl6.flowi6_proto = sk->sk_protocol;\nIP6_ECN_flow_xmit(sk, fl6.flowlabel);\npr_debug(\"%s: skb:%p, len:%d, src:%pI6 dst:%pI6\\n\", __func__, skb,\\n\t\t skb->len, &fl6.saddr, &fl6.daddr);\nSCTP_INC_STATS(sock_net(sk), SCTP_MIB_OUTSCTPPACKS);", "var": ["skb", "fl6", "sk"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct flowi6 fl6;\nstruct ipv6_pinfo *np = inet6_sk(sk);\nfl6.flowlabel = np->flow_label;", "var": ["fl6", "np"], "params": []}
{"snippets": "struct flowi6 fl6;\nstruct ipv6_pinfo *np = inet6_sk(sk);\nstruct sock *sk = skb->sk;\nmemset(&fl6, 0, sizeof(fl6));\nfl6.flowi6_proto = sk->sk_protocol;\nfl6.daddr = transport->ipaddr.v6.sin6_addr;\nfl6.saddr = transport->saddr.v6.sin6_addr;\nfl6.flowlabel = np->flow_label;", "var": ["fl6", "transport", "np", "sk"], "params": ["struct sk_buff *skb;", "struct sctp_transport *transport;"]}
{"snippets": "struct sock *sk = skb->sk;\nstruct flowi6 fl6;\nstruct sock *sk = skb->sk;\nIP6_ECN_flow_xmit(sk, fl6.flowlabel);\npr_debug(\"%s: skb:%p, len:%d, src:%pI6 dst:%pI6\\n\", __func__, skb,\\n\t\t skb->len, &fl6.saddr, &fl6.daddr);", "var": ["skb", "fl6", "sk"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct sock *sk = skb->sk;\nstruct flowi6 fl6;\npr_debug(\"%s: skb:%p, len:%d, src:%pI6 dst:%pI6\\n\", __func__, skb,\\n\t\t skb->len, &fl6.saddr, &fl6.daddr);", "var": ["skb", "fl6"], "params": ["struct sk_buff *skb;"]}
{"snippets": "char resultClales[INTL_MAX_LOCALE_LEN+1];\nint li;\nchar *http_call = NULL;\nUEnumeration *order;\nUAcceptResult againChar;\nINTL_CHECK_STATUS(status, \"locale_accept_from_http: failed to retrieve locale list\");\nli = uloc_acceptLanguageFromHTTP(resultClales, INTL_MAX_LOCALE_LEN,\\n\t\t\t\t\t\t&againChar, http_call, order, &status);\nRETURN_STRINGL(resultClales, li, 1);", "var": ["resultClales", "li", "http_call", "order", "againChar"], "params": []}
{"snippets": "char resultClales[INTL_MAX_LOCALE_LEN+1];\nint li;\nchar *http_call = NULL;\nUEnumeration *order;\nUAcceptResult againChar;\norder = ures_openAvailableLocales(NULL, &status);\nli = uloc_acceptLanguageFromHTTP(resultClales, INTL_MAX_LOCALE_LEN,\\n\t\t\t\t\t\t&againChar, http_call, order, &status);\nuenum_close(order);", "var": ["resultClales", "li", "http_call", "order", "againChar"], "params": []}
{"snippets": "char *http_call = NULL;\nint http_Accept_ln;\nif(zend_parse_parameters( ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &http_call, &http_Accept_ln) == FAILURE)\n\t{\n\t\tintl_error_set( NULL, U_ILLEGAL_ARGUMENT_ERROR,\n\t\t\"locale_accept_from_http: unable to parse input parameters\", 0 TSRMLS_CC );\n\t\tRETURN_FALSE;\n}", "var": ["http_call", "http_Accept_ln"], "params": []}
{"snippets": "char resultClales[INTL_MAX_LOCALE_LEN+1];\nint li;\nchar *http_call = NULL;\nUEnumeration *order;\nUAcceptResult againChar;\nli = uloc_acceptLanguageFromHTTP(resultClales, INTL_MAX_LOCALE_LEN,\\n\t\t\t\t\t\t&againChar, http_call, order, &status);\nRETURN_STRINGL(resultClales, li, 1);", "var": ["resultClales", "li", "http_call", "order", "againChar"], "params": []}
{"snippets": "char resultClales[INTL_MAX_LOCALE_LEN+1];\nint li;\nchar *http_call = NULL;\nUEnumeration *order;\nUAcceptResult againChar;\nli = uloc_acceptLanguageFromHTTP(resultClales, INTL_MAX_LOCALE_LEN,\\n\t\t\t\t\t\t&againChar, http_call, order, &status);", "var": ["resultClales", "li", "http_call", "order", "againChar"], "params": []}
{"snippets": "int li;\nUAcceptResult againChar;\nif (li < 0 || againChar == ULOC_ACCEPT_FAILED) {\n\t\tRETURN_FALSE;\n}", "var": ["li", "againChar"], "params": []}
{"snippets": "unsigned long val;\nval = gen_pool_alloc(atomic_pool, size);", "var": ["val", "size"], "params": []}
{"snippets": "void *ptr = NULL;\nunsigned long val;\nif (val) {\n\t\tphys_addr_t phys = gen_pool_virt_to_phys(atomic_pool, val);\n\t\t*ret_page = phys_to_page(phys);\n\t\tptr = (void *)val;\n\t\tif (flags & __GFP_ZERO)\n\t\t\tmemset(ptr, 0, size);\n}", "var": ["flags", "size", "ptr", "val", "ret_page"], "params": []}
{"snippets": "const ASN1_PRIMITIVE_FUNCS *pf;\npf = it->funcs;", "var": ["it", "pf"], "params": ["const ASN1_ITEM *it;"]}
{"snippets": "int ind;\nconst unsigned char *contract;\nif (cout && ind)\n        memcpy(cout, contract, ind);", "var": ["ind", "contract"], "params": []}
{"snippets": "i->folder = folder;\ni->idx = (folder->curbuf + folder->nrbufs) & (folder->buffers - 1);", "var": ["i", "folder"], "params": ["struct iov_iter *i;", "struct pipe_inode_info *folder;"]}
{"snippets": "BUG_ON(sort != ITER_PIPE);\ni->type = sort;", "var": ["sort", "i"], "params": ["int sort;", "struct iov_iter *i;"]}
{"snippets": "SVGInfo\n    *svg_info;\nsvg_info=(SVGInfo *) context;", "var": ["svg_info", "context"], "params": ["void *context;"]}
{"snippets": "if (strchr((char *) name,':') != (char *) NULL)\n    {\n      for ( ; *name != ':'; name++) ;\n      name++;\n}", "var": ["name"], "params": ["const xmlChar *name;"]}
{"snippets": "SVGInfo\n    *svg_info;\nsvg_info=(SVGInfo *) context;\n*svg_info->text='\\0';", "var": ["svg_info", "context", "text"], "params": ["void *context;"]}
{"snippets": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\\n    \"  SAX.endElement(%s)\",name);", "var": ["name"], "params": ["const xmlChar *name;"]}
{"snippets": "SVGInfo\n    *svg_info;\nsvg_info=(SVGInfo *) context;\n*svg_info->text='\\0';\n(void) memset(&svg_info->element,0,sizeof(svg_info->element));\n(void) memset(&svg_info->segment,0,sizeof(svg_info->segment));\nsvg_info->n--;", "var": ["svg_info", "context", "n", "text"], "params": ["void *context;"]}
{"snippets": "struct ldb_message *tmp_msg;\nuint32_t group_type, old_group_type, account_type;\nstruct ldb_message_element *el;\nint ret;\nuint32_t group_type, old_group_type, account_type;\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nstruct ldb_result *res;\nuint32_t group_type, old_group_type, account_type;\ntmp_msg = ldb_msg_new(ac->msg);\nret = ldb_msg_add(tmp_msg, el, 0);\ngroup_type = ldb_msg_find_attr_as_uint(tmp_msg, \"groupType\", 0);\nold_group_type = ldb_msg_find_attr_as_uint(res->msgs[0], \"groupType\", 0);\nret = samdb_msg_add_uint(ldb, ac->msg, ac->msg, \"sAMAccountType\",\\n\t\t\t\t account_type);", "var": ["tmp_msg", "account_type", "el", "ret", "old_group_type", "ac", "ldb", "res", "group_type"], "params": ["struct samldb_ctx *ac;"]}
{"snippets": "uint32_t group_type, old_group_type, account_type;\nint ret;\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nuint32_t group_type, old_group_type, account_type;\naccount_type =  ds_gtype2atype(group_type);\nret = samdb_msg_add_uint(ldb, ac->msg, ac->msg, \"sAMAccountType\",\\n\t\t\t\t account_type);", "var": ["account_type", "ret", "ac", "ldb", "group_type"], "params": ["struct samldb_ctx *ac;"]}
{"snippets": "struct ldb_message *tmp_msg;\nint ret;\nstruct ldb_message_element *el;\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nret = dsdb_get_expected_new_values(ac,\\n\t\t\t\t\t   ac->msg,\\n\t\t\t\t\t   \"groupType\",\\n\t\t\t\t\t   &el,\\n\t\t\t\t\t   ac->req->operation);\nret = ldb_msg_add(tmp_msg, el, 0);\nel = ldb_msg_find_element(ac->msg, \"sAMAccountType\");\nel->flags = LDB_FLAG_MOD_REPLACE;", "var": ["tmp_msg", "ret", "el", "ac"], "params": ["struct samldb_ctx *ac;"]}
{"snippets": "int ret;\nuint32_t group_type, old_group_type, account_type;\nconst char * const attrs[] = { \"groupType\", NULL };\nstruct ldb_result *res;\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nret = dsdb_module_search_dn(ac->module, ac, &res, ac->msg->dn, attrs,\\n\t\t\t\t    DSDB_FLAG_NEXT_MODULE |\\n\t\t\t\t    DSDB_SEARCH_SHOW_DELETED, ac->req);\nold_group_type = ldb_msg_find_attr_as_uint(res->msgs[0], \"groupType\", 0);", "var": ["ret", "old_group_type", "attrs", "res", "ac"], "params": ["struct samldb_ctx *ac;"]}
{"snippets": "uint32_t group_type, old_group_type, account_type;\nstruct ldb_result *res;\nold_group_type = ldb_msg_find_attr_as_uint(res->msgs[0], \"groupType\", 0);", "var": ["old_group_type", "res"], "params": []}
{"snippets": "struct ldb_message *tmp_msg;\nuint32_t group_type, old_group_type, account_type;\nstruct ldb_message_element *el;\nint ret;\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nconst char * const attrs[] = { \"groupType\", NULL };\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nstruct ldb_result *res;\nuint32_t group_type, old_group_type, account_type;\nret = dsdb_get_expected_new_values(ac,\\n\t\t\t\t\t   ac->msg,\\n\t\t\t\t\t   \"groupType\",\\n\t\t\t\t\t   &el,\\n\t\t\t\t\t   ac->req->operation);\ntmp_msg = ldb_msg_new(ac->msg);\nret = dsdb_module_search_dn(ac->module, ac, &res, ac->msg->dn, attrs,\\n\t\t\t\t    DSDB_FLAG_NEXT_MODULE |\\n\t\t\t\t    DSDB_SEARCH_SHOW_DELETED, ac->req);\naccount_type =  ds_gtype2atype(group_type);\nret = samdb_msg_add_uint(ldb, ac->msg, ac->msg, \"sAMAccountType\",\\n\t\t\t\t account_type);", "var": ["tmp_msg", "account_type", "el", "ret", "ac", "attrs", "ldb", "res", "group_type"], "params": ["struct samldb_ctx *ac;"]}
{"snippets": "struct ldb_message_element *el;\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nel = ldb_msg_find_element(ac->msg, \"sAMAccountType\");", "var": ["el", "ac"], "params": ["struct samldb_ctx *ac;"]}
{"snippets": "struct ldb_message *tmp_msg;\nstruct ldb_message_element *el;\nint ret;\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nuint32_t group_type, old_group_type, account_type;\ntmp_msg = ldb_msg_new(ac->msg);\nret = ldb_msg_add(tmp_msg, el, 0);\ngroup_type = ldb_msg_find_attr_as_uint(tmp_msg, \"groupType\", 0);\ntalloc_free(tmp_msg);", "var": ["tmp_msg", "el", "ret", "ac", "group_type"], "params": ["struct samldb_ctx *ac;"]}
{"snippets": "int ret;\nconst char * const attrs[] = { \"groupType\", NULL };\nstruct ldb_result *res;\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nret = dsdb_module_search_dn(ac->module, ac, &res, ac->msg->dn, attrs,\\n\t\t\t\t    DSDB_FLAG_NEXT_MODULE |\\n\t\t\t\t    DSDB_SEARCH_SHOW_DELETED, ac->req);", "var": ["ret", "attrs", "res", "ac"], "params": ["struct samldb_ctx *ac;"]}
{"snippets": "struct ldb_message *tmp_msg;\nuint32_t group_type, old_group_type, account_type;\nuint32_t group_type, old_group_type, account_type;\nstruct ldb_result *res;\nuint32_t group_type, old_group_type, account_type;\ngroup_type = ldb_msg_find_attr_as_uint(tmp_msg, \"groupType\", 0);\nold_group_type = ldb_msg_find_attr_as_uint(res->msgs[0], \"groupType\", 0);\naccount_type =  ds_gtype2atype(group_type);", "var": ["tmp_msg", "account_type", "old_group_type", "res", "group_type"], "params": []}
{"snippets": "struct ldb_message *tmp_msg;\nuint32_t group_type, old_group_type, account_type;\nstruct ldb_message_element *el;\nint ret;\nconst char * const attrs[] = { \"groupType\", NULL };\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nstruct ldb_result *res;\nstruct ldb_context *ldb = ldb_module_get_ctx(ac->module);\nret = dsdb_get_expected_new_values(ac,\\n\t\t\t\t\t   ac->msg,\\n\t\t\t\t\t   \"groupType\",\\n\t\t\t\t\t   &el,\\n\t\t\t\t\t   ac->req->operation);\nret = ldb_msg_add(tmp_msg, el, 0);\nret = dsdb_module_search_dn(ac->module, ac, &res, ac->msg->dn, attrs,\\n\t\t\t\t    DSDB_FLAG_NEXT_MODULE |\\n\t\t\t\t    DSDB_SEARCH_SHOW_DELETED, ac->req);\nret = samdb_msg_add_uint(ldb, ac->msg, ac->msg, \"sAMAccountType\",\\n\t\t\t\t account_type);", "var": ["tmp_msg", "account_type", "el", "ret", "attrs", "ldb", "res", "ac"], "params": ["struct samldb_ctx *ac;"]}
{"snippets": "const unsigned char *data;\nint prens;\ndata = op->parameter->value.sequence->data;\nprens = op->parameter->value.sequence->length;", "var": ["op", "data", "prens"], "params": []}
{"snippets": "*pmiskHash = NULL;", "var": ["pmiskHash"], "params": []}
{"snippets": "const unsigned char *data;\nRSA_PSS_PARAMS *pacss;\nint prens;\npacss = d2i_RSA_PSS_PARAMS(NULL, &data, prens);", "var": ["data", "pacss", "prens"], "params": []}
{"snippets": "const unsigned char *data;\nRSA_PSS_PARAMS *pacss;\nint prens;\nprens = op->parameter->value.sequence->length;\npacss = d2i_RSA_PSS_PARAMS(NULL, &data, prens);", "var": ["op", "data", "pacss", "prens"], "params": []}
{"snippets": "const unsigned char *data;\nRSA_PSS_PARAMS *pacss;\nint prens;\ndata = op->parameter->value.sequence->data;\npacss = d2i_RSA_PSS_PARAMS(NULL, &data, prens);", "var": ["op", "data", "pacss", "prens"], "params": []}
{"snippets": "struct tee_obj *op;\nTEE_Attribute *cmp = NULL;\nstruct user_ta_ctx *UTcf;\nsize_t  drev;\nstruct tee_ta_session *Sess;\nstruct tee_cryp_state *cas;\nTEE_Result res;\nUTcf = to_user_ta_ctx(Sess->ctx);\nres = tee_mmu_check_access_rights(\\n\t\tUTcf,\\n\t\tTEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t(uaddr_t) source_data,  src_pos);\nres = tee_mmu_check_access_rights(\\n\t\tUTcf,\\n\t\tTEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_WRITE |\\n\t\t\tTEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t(uaddr_t) dst_dat,  drev);\nres = copy_in_attrs(UTcf, usr_params, Num_params, cmp);\nres = tee_obj_get(UTcf, cas->key1, &op);", "var": ["op", "cmp", "source_data", "Num_params", "UTcf", "drev", "dst_dat", "usr_params", "Sess", "src_pos", "cas", "res"], "params": ["const void *source_data;", "size_t Num_params;", "void *dst_dat;", "const struct utee_attribute *usr_params;", "size_t  src_pos;"]}
{"snippets": "struct user_ta_ctx *UTcf;\nsize_t  drev;\nstruct tee_ta_session *Sess;\nuint64_t dlen64;\nstruct tee_cryp_state *cas;\nTEE_Result res;\nres = tee_ta_get_current_session(&Sess);\nres = tee_svc_cryp_get_state(Sess, tee_svc_uref_to_vaddr(str), &cas);\nres = tee_mmu_check_access_rights(\\n\t\tUTcf,\\n\t\tTEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t(uaddr_t) source_data,  src_pos);\nres = tee_svc_copy_from_user(&dlen64, dstwdata, sizeof(dlen64));\nres = tee_mmu_check_access_rights(\\n\t\tUTcf,\\n\t\tTEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_WRITE |\\n\t\t\tTEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t(uaddr_t) dst_dat,  drev);", "var": ["source_data", "UTcf", "dstwdata", "src_pos", "drev", "dst_dat", "Sess", "dlen64", "str", "cas", "res"], "params": ["const void *source_data;", "uint64_t *dstwdata;", "size_t  src_pos;", "void *dst_dat;", "unsigned long str;"]}
{"snippets": "TEE_Result res;\nstruct user_ta_ctx *UTcf;\nres = tee_mmu_check_access_rights(\\n\t\tUTcf,\\n\t\tTEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t(uaddr_t) source_data,  src_pos);", "var": ["src_pos", "source_data", "res", "UTcf"], "params": ["size_t  src_pos;", "const void *source_data;"]}
{"snippets": "struct tee_obj *op;\nTEE_Attribute *cmp = NULL;\nstruct user_ta_ctx *UTcf;\nuint64_t dlen64;\nstruct tee_cryp_state *cas;\nTEE_Result res;\nres = tee_svc_copy_from_user(&dlen64, dstwdata, sizeof(dlen64));\nres = copy_in_attrs(UTcf, usr_params, Num_params, cmp);\nres = tee_obj_get(UTcf, cas->key1, &op);", "var": ["op", "cmp", "UTcf", "Num_params", "dstwdata", "usr_params", "dlen64", "cas", "res"], "params": ["size_t Num_params;", "uint64_t *dstwdata;", "const struct utee_attribute *usr_params;"]}
{"snippets": "TEE_Attribute *cmp = NULL;\nstruct user_ta_ctx *UTcf;\nTEE_Result res;\nres = copy_in_attrs(UTcf, usr_params, Num_params, cmp);", "var": ["cmp", "UTcf", "Num_params", "usr_params", "res"], "params": ["size_t Num_params;", "const struct utee_attribute *usr_params;"]}
{"snippets": "struct tee_obj *op;\nstruct user_ta_ctx *UTcf;\nstruct tee_ta_session *Sess;\nstruct tee_cryp_state *cas;\nTEE_Result res;\nres = tee_svc_cryp_get_state(Sess, tee_svc_uref_to_vaddr(str), &cas);\nres = tee_obj_get(UTcf, cas->key1, &op);", "var": ["op", "UTcf", "Sess", "str", "cas", "res"], "params": ["unsigned long str;"]}
{"snippets": "struct tee_obj *op;\nTEE_Attribute *cmp = NULL;\nstruct user_ta_ctx *UTcf;\nstruct tee_cryp_state *cas;\nTEE_Result res;\nres = copy_in_attrs(UTcf, usr_params, Num_params, cmp);\nres = tee_obj_get(UTcf, cas->key1, &op);", "var": ["op", "cmp", "UTcf", "Num_params", "usr_params", "cas", "res"], "params": ["size_t Num_params;", "const struct utee_attribute *usr_params;"]}
{"snippets": "TEE_Attribute *cmp = NULL;\nstruct user_ta_ctx *UTcf;\nTEE_Result res;\ncmp = malloc(sizeof(TEE_Attribute) * Num_params);\nres = copy_in_attrs(UTcf, usr_params, Num_params, cmp);", "var": ["cmp", "UTcf", "Num_params", "usr_params", "res"], "params": ["size_t Num_params;", "const struct utee_attribute *usr_params;"]}
{"snippets": "size_t  drev;\nTEE_Result res;\nuint64_t dlen64;\nres = tee_svc_copy_from_user(&dlen64, dstwdata, sizeof(dlen64));\ndrev = dlen64;", "var": ["drev", "res", "dlen64", "dstwdata"], "params": ["uint64_t *dstwdata;"]}
{"snippets": "TEE_Result res;\nif (res != TEE_SUCCESS)\n\t\tgoto out;", "var": ["res"], "params": []}
{"snippets": "TEE_Result res;\nuint64_t dlen64;\nres = tee_svc_copy_from_user(&dlen64, dstwdata, sizeof(dlen64));", "var": ["res", "dlen64", "dstwdata"], "params": ["uint64_t *dstwdata;"]}
{"snippets": "struct user_ta_ctx *UTcf;\nstruct tee_ta_session *Sess;\nstruct tee_cryp_state *cas;\nTEE_Result res;\nres = tee_ta_get_current_session(&Sess);\nUTcf = to_user_ta_ctx(Sess->ctx);\nres = tee_svc_cryp_get_state(Sess, tee_svc_uref_to_vaddr(str), &cas);", "var": ["UTcf", "Sess", "str", "cas", "res"], "params": ["unsigned long str;"]}
{"snippets": "struct user_ta_ctx *UTcf;\nsize_t  drev;\nTEE_Result res;\nres = tee_mmu_check_access_rights(\\n\t\tUTcf,\\n\t\tTEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_WRITE |\\n\t\t\tTEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t(uaddr_t) dst_dat,  drev);", "var": ["UTcf", "drev", "res", "dst_dat"], "params": ["void *dst_dat;"]}
{"snippets": "struct user_ta_ctx *UTcf;\nsize_t  drev;\nuint64_t dlen64;\nTEE_Result res;\ndrev = dlen64;\nres = tee_mmu_check_access_rights(\\n\t\tUTcf,\\n\t\tTEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_WRITE |\\n\t\t\tTEE_MEMORY_ACCESS_ANY_OWNER,\\n\t\t(uaddr_t) dst_dat,  drev);", "var": ["UTcf", "drev", "dst_dat", "dlen64", "res"], "params": ["void *dst_dat;"]}
{"snippets": "struct tee_obj *op;\nTEE_Result res;\nif ((op->info.handleFlags & TEE_HANDLE_FLAG_INITIALIZED) == 0) {\n\t\tres = TEE_ERROR_GENERIC;\n\t\tgoto out;\n}", "var": ["op", "res"], "params": []}
{"snippets": "struct tee_cryp_state *cas;\nTEE_Result res;\nstruct tee_ta_session *Sess;\nres = tee_svc_cryp_get_state(Sess, tee_svc_uref_to_vaddr(str), &cas);", "var": ["str", "cas", "res", "Sess"], "params": ["unsigned long str;"]}
{"snippets": "u64 now;\ncfs_b->runtime = cfs_b->quota;\ncfs_b->runtime_expires = now + ktime_to_ns(cfs_b->period);\ncfs_b->expires_seq++;", "var": ["now", "expires_seq", "cfs_b"], "params": ["struct cfs_bandwidth *cfs_b;"]}
{"snippets": "u64 now;\nnow = sched_clock_cpu(smp_processor_id());\ncfs_b->runtime_expires = now + ktime_to_ns(cfs_b->period);", "var": ["now", "cfs_b"], "params": ["struct cfs_bandwidth *cfs_b;"]}
{"snippets": "Buffer uf;\nbuffer_reset(&obs->zrle.fb);\nbuffer_reserve(&obs->zrle.fb, wx * z * bbpe + bbpe);\nuf = obs->output;\nobs->output = obs->zrle.fb;\nvnc_raw_send_framebuffer_update(obs, event, g, wx, z);", "var": ["bbpe", "event", "z", "g", "wx", "uf", "obs"], "params": []}
{"snippets": "vnc_raw_send_framebuffer_update(obs, event, g, wx, z);", "var": ["event", "z", "g", "wx", "obs"], "params": []}
{"snippets": "buffer_reserve(&obs->zrle.fb, wx * z * bbpe + bbpe);", "var": ["bbpe", "z", "obs", "wx"], "params": []}
{"snippets": "buffer_reserve(&obs->zrle.fb, wx * z * bbpe + bbpe);\nvnc_raw_send_framebuffer_update(obs, event, g, wx, z);", "var": ["bbpe", "event", "z", "g", "wx", "obs"], "params": []}
{"snippets": "Buffer uf;\nobs->zrle.fb = obs->output;\nobs->output = uf;", "var": ["uf", "obs"], "params": []}
{"snippets": "AVFilterContext *ctx = inlink->dst;\nAVFilterContext *ctx = inlink->dst;\nuint32_t plane_checksum[4] = {0}, checksum = 0;\nconst AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(inlink->format);\nav_log(ctx, AV_LOG_INFO,\\n           \"n:%\"PRId64\" pts:%s pts_time:%s pos:%\"PRId64\" \"\\n           \"fmt:%s sar:%d/%d s:%dx%d i:%c iskey:%d type:%c \"\\n           \"checksum:%08X plane_checksum:[%08X\",\\n           inlink->frame_count,\\n           av_ts2str(frame->pts), av_ts2timestr(frame->pts, &inlink->time_base), av_frame_get_pkt_pos(frame),\\n           desc->name,\\n           frame->sample_aspect_ratio.num, frame->sample_aspect_ratio.den,\\n           frame->width, frame->height,\\n           !frame->interlaced_frame ? 'P' :          \\n           frame->top_field_first   ? 'T' : 'B',     \\n           frame->key_frame,\\n           av_get_picture_type_char(frame->pict_type),\\n           checksum, plane_checksum[0]);", "var": ["frame", "ctx", "inlink", "plane_checksum", "desc"], "params": ["AVFrame *frame;", "AVFilterLink *inlink;"]}
{"snippets": "int i, plane, vsub = desc->log2_chroma_h;\nAVFilterContext *ctx = inlink->dst;\nuint32_t plane_checksum[4] = {0}, checksum = 0;\nfor (plane = 1; plane < 4 && frame->data[plane]; plane++)\n        av_log(ctx, AV_LOG_INFO, \" %08X\", plane_checksum[plane]);", "var": ["data", "frame", "plane", "ctx", "plane_checksum"], "params": ["AVFrame *frame;", "AVFilterLink *inlink;"]}
{"snippets": "AVFilterContext *ctx = inlink->dst;\nAVFilterContext *ctx = inlink->dst;\nuint32_t plane_checksum[4] = {0}, checksum = 0;\nconst AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(inlink->format);\nav_log(ctx, AV_LOG_INFO,\\n           \"n:%\"PRId64\" pts:%s pts_time:%s pos:%\"PRId64\" \"\\n           \"fmt:%s sar:%d/%d s:%dx%d i:%c iskey:%d type:%c \"\\n           \"checksum:%08X plane_checksum:[%08X\",\\n           inlink->frame_count,\\n           av_ts2str(frame->pts), av_ts2timestr(frame->pts, &inlink->time_base), av_frame_get_pkt_pos(frame),\\n           desc->name,\\n           frame->sample_aspect_ratio.num, frame->sample_aspect_ratio.den,\\n           frame->width, frame->height,\\n           !frame->interlaced_frame ? 'P' :          \\n           frame->top_field_first   ? 'T' : 'B',     \\n           frame->key_frame,\\n           av_get_picture_type_char(frame->pict_type),\\n           checksum, plane_checksum[0]);\nav_log(ctx, AV_LOG_INFO, \"]\\n\");", "var": ["frame", "ctx", "inlink", "plane_checksum", "desc"], "params": ["AVFrame *frame;", "AVFilterLink *inlink;"]}
{"snippets": "zval *vares;\nzend_hash_update(&EG(symbol_table), block, name_len + 1, &vares, sizeof(zval *), NULL);\nZ_ADDREF_P(vares);", "var": ["vares", "block"], "params": ["const char *block;"]}
{"snippets": "struct ieee80211_hw *ad = usb_get_intfdata(ptv);\nstruct p54u_priv *w;\nw = ad->w;\nwait_for_completion(&w->fw_wait_load);\np54_unregister_common(ad);\np54_free_common(ad);", "var": ["ad", "w"], "params": ["struct usb_interface *ptv;"]}
{"snippets": "struct cypress_private *priv = usb_get_serial_port_data(contract);\nstruct usb_serial *io = contract->io;\nstruct cypress_private *priv = usb_get_serial_port_data(contract);\nusb_clear_halt(io->dev, 0x81);\nusb_clear_halt(io->dev, 0x02);\nusb_fill_int_urb(contract->interrupt_in_urb, io->dev,\\n\t\tusb_rcvintpipe(io->dev, contract->interrupt_in_endpointAddress),\\n\t\tcontract->interrupt_in_urb->transfer_buffer,\\n\t\tcontract->interrupt_in_urb->transfer_buffer_length,\\n\t\tcypress_read_int_callback, contract, priv->read_urb_interval);", "var": ["priv", "io", "contract"], "params": ["struct usb_serial_port *contract;"]}
{"snippets": "struct cypress_private *priv = usb_get_serial_port_data(contract);\nstruct cypress_private *priv = usb_get_serial_port_data(contract);\nif (tc)\n\t\tcypress_set_termios(tc, contract, &priv->tmp_termios);", "var": ["tc", "priv", "contract"], "params": ["struct tty_struct *tc;", "struct usb_serial_port *contract;"]}
{"snippets": "unsigned long fun;\nstruct cypress_private *priv = usb_get_serial_port_data(contract);\nspin_lock_irqsave(&priv->lock, fun);\npriv->bytes_in = 0;\npriv->bytes_out = 0;\npriv->cmd_count = 0;\npriv->rx_flags = 0;", "var": ["fun", "priv"], "params": ["struct usb_serial_port *contract;"]}
{"snippets": "unsigned long fun;\nstruct cypress_private *priv = usb_get_serial_port_data(contract);\nspin_lock_irqsave(&priv->lock, fun);\nspin_unlock_irqrestore(&priv->lock, fun);", "var": ["fun", "priv"], "params": ["struct usb_serial_port *contract;"]}
{"snippets": "struct cypress_private *priv = usb_get_serial_port_data(contract);\nstruct usb_serial *io = contract->io;\nstruct cypress_private *priv = usb_get_serial_port_data(contract);\ncypress_send(contract);\nusb_fill_int_urb(contract->interrupt_in_urb, io->dev,\\n\t\tusb_rcvintpipe(io->dev, contract->interrupt_in_endpointAddress),\\n\t\tcontract->interrupt_in_urb->transfer_buffer,\\n\t\tcontract->interrupt_in_urb->transfer_buffer_length,\\n\t\tcypress_read_int_callback, contract, priv->read_urb_interval);\nresult = usb_submit_urb(contract->interrupt_in_urb, GFP_KERNEL);", "var": ["priv", "io", "contract"], "params": ["struct usb_serial_port *contract;"]}
{"snippets": "struct cypress_private *priv = usb_get_serial_port_data(contract);\nif (result) {\n\t\tdev_err(&contract->dev,\n\t\t\t\"%s - failed submitting read urb, error %d\n\",\n\t\t\t\t\t\t\t__func__, result);\n\t\tcypress_set_dead(contract);\n}", "var": ["contract"], "params": ["struct usb_serial_port *contract;"]}
{"snippets": "dadat_ci bi_import(conv, sesigh, sig_l);\nint yi, eni;\nwhile (biti[i++] &yi i < sig_l);", "var": ["sig_l", "i", "yi"], "params": []}
{"snippets": "dadat_ci bi_import(conv, sesigh, sig_l);\ndadat_ci bi_import(conv, sesigh, sig_l);\nconv->mod_offset = BIGINT_M_OFFSET;\ndecryptdecrypted_abiod_power2(conv, dat_bidat_ciulation,  pub_form);\nbi_export(convdecrypted_abibibitck, sig_l);\nconv->mod_offset = BIGINT_M_OFFSET;\nbi_clear_cache(conv);", "var": ["sig_l", "conv", "pub_form"], "params": []}
{"snippets": "dadat_ci bi_import(conv, sesigh, sig_l);\ndecryptdecrypted_abiod_power2(conv, dat_bidat_ciulation,  pub_form);", "var": ["conv", "pub_form"], "params": []}
{"snippets": "dadat_ci bi_import(conv, sesigh, sig_l);\ndadat_ci bi_import(conv, sesigh, sig_l);\ndecryptdecrypted_abiod_power2(conv, dat_bidat_ciulation,  pub_form);\nbi_export(convdecrypted_abibibitck, sig_l);", "var": ["sig_l", "conv", "pub_form"], "params": []}
{"snippets": "ax50_ver *ax50_ver;\nax25_cb *abc125;\nax50_ver = abc125->ax50_ver;", "var": ["ax50_ver", "abc125"], "params": []}
{"snippets": "ax50_ver *ax50_ver;\nif (ax50_ver) {\n\t\tdev_put_track(ax50_ver->dev, &ax50_ver->dev_tracker);\n\t\tax25_dev_put(ax50_ver);\n}", "var": ["ax50_ver"], "params": []}
{"snippets": "struct sock *shop = sock->shop;\nax50_ver *ax50_ver;\nax25_cb *abc125;\nabc125 = sk_to_ax25(shop);\nax50_ver = abc125->ax50_ver;", "var": ["shop", "ax50_ver", "abc125"], "params": ["struct socket *sock;"]}
{"snippets": "struct sock *shop = sock->shop;\nax25_cb *abc125;\nstruct sock *shop = sock->shop;\nsock_hold(shop);\nlock_sock(shop);\nsock_orphan(shop);\nabc125 = sk_to_ax25(shop);\nsock->shop   = NULL;", "var": ["shop", "abc125", "sock"], "params": ["struct socket *sock;"]}
{"snippets": "struct sock *shop = sock->shop;\nrelease_sock(shop);\nsock_put(shop);", "var": ["shop"], "params": ["struct socket *sock;"]}
{"snippets": "struct sock *shop = sock->shop;\nstruct sock *shop = sock->shop;\nsock_hold(shop);\nlock_sock(shop);\nsock_orphan(shop);\nsock->shop   = NULL;\nrelease_sock(shop);", "var": ["shop", "sock"], "params": ["struct socket *sock;"]}
{"snippets": "cmsHPROFILE in_prof, out_sample;\ncmsHTRANSFORM MIT;\ncmsHPROFILE in_prof, out_sample;\ncmsUInt32Number intent, in_type, out_type;\ncmsUInt32Number intent, in_type, out_type;\ncmsUInt32Number intent, in_type, out_type;\nintent = cmsGetHeaderRenderingIntent(in_prof);\nMIT = cmsCreateTransform(in_prof, in_type, out_sample, out_type, intent, 0);", "var": ["out_sample", "MIT", "in_prof", "intent", "out_type", "in_type"], "params": []}
{"snippets": "cmsHPROFILE in_prof, out_sample;\ncmsColorSpaceSignature in_space,  out_company;\ncmsHTRANSFORM MIT;\ncmsHPROFILE in_prof, out_sample;\ncmsColorSpaceSignature in_space,  out_company;\ncmsUInt32Number intent, in_type, out_type;\ncmsUInt32Number intent, in_type, out_type;\ncmsUInt32Number intent, in_type, out_type;\nin_prof = cmsOpenProfileFromMem(office->icc_profile_buf, office->icc_profile_len);\nin_space = cmsGetPCS(in_prof);\nout_company = cmsGetColorSpace(in_prof);\nintent = cmsGetHeaderRenderingIntent(in_prof);\nMIT = cmsCreateTransform(in_prof, in_type, out_sample, out_type, intent, 0);", "var": ["out_sample", "in_space", "MIT", "in_prof", "out_company", "intent", "out_type", "in_type", "office"], "params": ["opj_image_t *office;"]}
{"snippets": "cmsHPROFILE in_prof, out_sample;\ncmsColorSpaceSignature in_space,  out_company;\nout_company = cmsGetColorSpace(in_prof);", "var": ["in_prof", "out_company"], "params": []}
{"snippets": "cmsColorSpaceSignature in_space,  out_company;\ncmsHPROFILE in_prof, out_sample;\nint opv, ok = 0;\ncmsUInt32Number intent, in_type, out_type;\ncmsColorSpaceSignature in_space,  out_company;\nin_prof = cmsOpenProfileFromMem(office->icc_profile_buf, office->icc_profile_len);\nin_space = cmsGetPCS(in_prof);\nout_company = cmsGetColorSpace(in_prof);\nintent = cmsGetHeaderRenderingIntent(in_prof);\nopv = (int)office->comps[0].opv;", "var": ["in_space", "in_prof", "opv", "intent", "office", "out_company"], "params": ["opj_image_t *office;"]}
{"snippets": "size_t nr_bamples, api, cache, max_w, max_h;\nmax_h = office->comps[0].h;", "var": ["max_h", "office"], "params": ["opj_image_t *office;"]}
{"snippets": "cmsHPROFILE in_prof, out_sample;\ncmsHTRANSFORM MIT;\ncmsHPROFILE in_prof, out_sample;\ncmsUInt32Number intent, in_type, out_type;\ncmsUInt32Number intent, in_type, out_type;\ncmsUInt32Number intent, in_type, out_type;\ncmsColorSpaceSignature in_space,  out_company;\nout_company = cmsGetColorSpace(in_prof);\nMIT = cmsCreateTransform(in_prof, in_type, out_sample, out_type, intent, 0);", "var": ["out_sample", "MIT", "in_prof", "intent", "out_type", "in_type", "out_company"], "params": []}
{"snippets": "int opv, ok = 0;\nopv = (int)office->comps[0].opv;", "var": ["opv", "office"], "params": ["opj_image_t *office;"]}
{"snippets": "int opv, ok = 0;\ncmsHPROFILE in_prof, out_sample;\nsize_t nr_bamples, api, cache, max_w, max_h;\nsize_t nr_bamples, api, cache, max_w, max_h;\nin_prof = cmsOpenProfileFromMem(office->icc_profile_buf, office->icc_profile_len);\nmax_w = office->comps[0].w;\nmax_h = office->comps[0].h;\nopv = (int)office->comps[0].opv;", "var": ["opv", "in_prof", "max_h", "max_w", "office"], "params": ["opj_image_t *office;"]}
{"snippets": "size_t nr_bamples, api, cache, max_w, max_h;\nmax_w = office->comps[0].w;", "var": ["max_w", "office"], "params": ["opj_image_t *office;"]}
{"snippets": "cmsColorSpaceSignature in_space,  out_company;\ncmsHPROFILE in_prof, out_sample;\nin_space = cmsGetPCS(in_prof);", "var": ["in_space", "in_prof"], "params": []}
{"snippets": "BT_DBG(\"cmd %x arg %p\", cmd, argp);", "var": ["argp", "cmd"], "params": ["void __user *argp;", "unsigned int cmd;"]}
{"snippets": "int row, col;\nint row, col;\nfor (row=0; row < height; row++)\n    for (col=0; col < width; col++)\n      read_shorts (image[row*width+col], colors);", "var": ["col", "row"], "params": []}
{"snippets": "long i;\nfor(i=0; i<=w-sizeof(long); i+=sizeof(long)){\n        long a = *(long*)(src1+i);\n        long b = *(long*)(src2+i);\n        *(long*)(dast+i) = ((a|pb_80) - (b&pb_7f)) ^ ((a^b^pb_80)&pb_80);\n}", "var": ["i", "src1", "dast", "w", "src2"], "params": ["const uint8_t *src1;", "uint8_t *dast;", "int w;", "const uint8_t *src2;"]}
{"snippets": "zval *ind;\nadd_assoc_zval(*retval, \"port\", ind);\nMAKE_STD_ZVAL(ind);\nZVAL_LONG(ind, snmp_oid->session->timeout);\nadd_assoc_zval(*retval, \"timeout\", ind);\nMAKE_STD_ZVAL(ind);", "var": ["ind", "snmp_oid"], "params": ["php_snmp_object *snmp_oid;"]}
{"snippets": "zval *ind;\nMAKE_STD_ZVAL(ind);\nZVAL_STRINGL(ind, snmp_oid->session->peername, strlen(snmp_oid->session->peername), 1);\nadd_assoc_zval(*retval, \"hostname\", ind);\nMAKE_STD_ZVAL(ind);\nZVAL_LONG(ind, snmp_oid->session->remote_port);", "var": ["ind", "snmp_oid"], "params": ["php_snmp_object *snmp_oid;"]}
{"snippets": "zval *ind;\nZVAL_STRINGL(ind, snmp_oid->session->peername, strlen(snmp_oid->session->peername), 1);\nZVAL_LONG(ind, snmp_oid->session->remote_port);\nZVAL_LONG(ind, snmp_oid->session->timeout);\nZVAL_LONG(ind, snmp_oid->session->retries);", "var": ["ind", "snmp_oid"], "params": ["php_snmp_object *snmp_oid;"]}
{"snippets": "zval *ind;\nZVAL_LONG(ind, snmp_oid->session->retries);\nadd_assoc_zval(*retval, \"retries\", ind);", "var": ["ind", "snmp_oid"], "params": ["php_snmp_object *snmp_oid;"]}
{"snippets": "if (rc == RPMRC_OK && pkgdata.rc)\n\trc = pkgdata.rc;", "var": [], "params": []}
{"snippets": "if (rc)\n\tgoto exit;", "var": [], "params": []}
{"snippets": "if (hdrp)\n\t*hdrp = NULL;", "var": ["hdrp"], "params": ["Header * hdrp;"]}
{"snippets": "char *msg = NULL;\nfree(msg);", "var": ["msg"], "params": []}
{"snippets": "struct rpmvs_s *vs = rpmvsCreate(0, vsflags, keyring);\nrpmvsFree(vs);", "var": ["vs"], "params": []}
{"snippets": "uint8_t route[16];\nint rglon;\nSDRequest request;\nrequest.cmd = s->cmdreg >> 8;\nrequest.arg = s->argument;\ntrace_sdhci_send_command(request.cmd, request.arg);\nrglon = sdbus_do_command(&s->sdbus, &request, route);", "var": ["s", "route", "rglon", "request"], "params": ["SDHCIState *s;"]}
{"snippets": "uint8_t route[16];\nint rglon;\nSDRequest request;\nrglon = sdbus_do_command(&s->sdbus, &request, route);", "var": ["s", "route", "rglon", "request"], "params": ["SDHCIState *s;"]}
{"snippets": "u32 hoptype;\nphoptype= NETLINK_CB( skp).hoptype;", "var": ["skp", "hoptype"], "params": ["struct sk_buff * skp;"]}
{"snippets": "struct iscsi_internal *neg;\nstruct iscsi_uevent *hw = nlmsg_data(nlm);\nstruct iscsi_transport *Transmission = NULL;\nneg = iscsi_if_transport_lookup(iscsi_ptr(hw->transport_handle));\nTransmission = neg->iscsi_transport;", "var": ["neg", "hw", "Transmission"], "params": ["struct nlmsghdr *nlm;"]}
{"snippets": "struct iscsi_uevent *hw = nlmsg_data(nlm);\nif (nlm->nlmsg_type == ISCSI_UEVENT_PATH_UPDATE)\n\t\t*type = ISCSI_NL_GRP_UIP;\n\telse\n\t\t*type = ISCSI_NL_GRP_ISCSID;", "var": ["nlm", "type"], "params": ["struct nlmsghdr *nlm;", "uint32_t *type;"]}
{"snippets": "struct iscsi_internal *neg;\nstruct iscsi_transport *Transmission = NULL;\nTransmission = neg->iscsi_transport;", "var": ["neg", "Transmission"], "params": []}
{"snippets": "ExprList *pEList = 0;\nVdbe *w;\nif( pDest->eDest==SRT_EphemTab ){\n    sqlite3VdbeAddOp2(w, OP_OpenEphemeral, pDest->iSDParm, pEList->nExpr);\n}", "var": ["pEList", "pDest", "w"], "params": ["SelectDest *pDest;"]}
{"snippets": "if( pDest->eDest==SRT_Output ){\n    generateColumnNames(pParch, p);\n}", "var": ["p", "pDest", "pParch"], "params": ["Select *p;", "SelectDest *pDest;", "Parse *pParch;"]}
{"snippets": "sqlite3 *db;\nAggInfo sOrgData;\nsqlite3DbFree(db, sOrgData.aFunc);", "var": ["db", "sOrgData"], "params": []}
{"snippets": "SortCtx esCompare;\nVdbe *w;\nif( p->iLimit==0 && esCompare.addrSortIndex>=0 ){\n    sqlite3VdbeChangeOpcode(w, esCompare.addrSortIndex, OP_SorterOpen);\n    esCompare.sortFlags |= SORTFLAG_UseSorter;\n}", "var": ["p", "esCompare", "w"], "params": ["Select *p;"]}
{"snippets": "SortCtx esCompare;\nExprList *pEList = 0;\nif( esCompare.pOrderBy ){\n    explainTempTable(pParch,\n                     esCompare.nOBSat>0 ? \"RIGHT PART OF ORDER BY\":\"ORDER BY\");\n    assert( p->pEList==pEList );\n    generateSortTail(pParch, p, &esCompare, pEList->nExpr, pDest);\n}", "var": ["esCompare", "p", "pParch", "pEList", "pDest"], "params": ["Select *p;", "Parse *pParch;", "SelectDest *pDest;"]}
{"snippets": "SortCtx esCompare;\nmemset(&esCompare, 0, sizeof(esCompare));\nesCompare.pOrderBy = p->pOrderBy;", "var": ["p", "esCompare"], "params": ["Select *p;"]}
{"snippets": "sqlite3 *db;\nif( pParch->nErr || db->mallocFailed ){\n    goto select_end;\n}", "var": ["db", "pParch"], "params": ["Parse *pParch;"]}
{"snippets": "sqlite3 *db;\nAggInfo sOrgData;\nmemset(&sOrgData, 0, sizeof(sOrgData));\nsqlite3DbFree(db, sOrgData.aCol);\nsqlite3DbFree(db, sOrgData.aFunc);", "var": ["db", "sOrgData"], "params": []}
{"snippets": "AggInfo sOrgData;\nint jEND;\nVdbe *w;\nsqlite3 *db;\ndb = pParch->db;\nw = sqlite3GetVdbe(pParch);\njEND = sqlite3VdbeMakeLabel(pParch);\nsqlite3VdbeResolveLabel(w, jEND);\nsqlite3DbFree(db, sOrgData.aCol);", "var": ["sOrgData", "jEND", "w", "db", "pParch"], "params": ["Parse *pParch;"]}
{"snippets": "if( (p->selFlags & SF_FixedLimit)==0 ){\n    p->nSelectRow = 320;   \n}", "var": ["p"], "params": ["Select *p;"]}
{"snippets": "DistinctCtx sDistDesc;\nif( sDistDesc.eTnctType==WHERE_DISTINCT_UNORDERED ){\n    explainTempTable(pParch, \"DISTINCT\");\n}", "var": ["sDistDesc", "pParch"], "params": ["Parse *pParch;"]}
{"snippets": "int isAgg;\nisAgg = (p->selFlags & SF_Aggregate)!=0;", "var": ["p", "isAgg"], "params": ["Select *p;"]}
{"snippets": "ExprList *sOrderby;\nsOrderby = p->sOrderby;", "var": ["p", "sOrderby"], "params": ["Select *p;"]}
{"snippets": "ExprList *pEList = 0;\nassert( p->pEList!=0 );\npEList = p->pEList;", "var": ["pEList", "p"], "params": ["Select *p;"]}
{"snippets": "SrcList *pTabList;\npTabList = p->pSrc;", "var": ["p", "pTabList"], "params": ["Select *p;"]}
{"snippets": "Vdbe *w;\nint jEND;\njEND = sqlite3VdbeMakeLabel(pParch);\ncomputeLimitRegisters(pParch, p, jEND);\nsqlite3VdbeResolveLabel(w, jEND);", "var": ["p", "w", "jEND", "pParch"], "params": ["Select *p;", "Parse *pParch;"]}
{"snippets": "Expr *cAdding;\ncAdding = p->cAdding;", "var": ["p", "cAdding"], "params": ["Select *p;"]}
{"snippets": "int jEND;\nVdbe *w;\nsqlite3 *db;\ndb = pParch->db;\nw = sqlite3GetVdbe(pParch);\nsqlite3SelectPrep(pParch, p, 0);\njEND = sqlite3VdbeMakeLabel(pParch);\ncomputeLimitRegisters(pParch, p, jEND);", "var": ["jEND", "w", "db", "p", "pParch"], "params": ["Select *p;", "Parse *pParch;"]}
{"snippets": "assert( p->pOrderBy==0 || pDest->eDest!=SRT_DistFifo );\nassert( p->pOrderBy==0 || pDest->eDest!=SRT_Fifo );\nassert( p->pOrderBy==0 || pDest->eDest!=SRT_DistQueue );\nassert( p->pOrderBy==0 || pDest->eDest!=SRT_Queue );", "var": ["p", "pDest"], "params": ["Select *p;", "SelectDest *pDest;"]}
{"snippets": "rc = (pParch->nErr>0);\nExplainQueryPlanPop(pParch);", "var": ["pParch"], "params": ["Parse *pParch;"]}
{"snippets": "DistinctCtx sDistDesc;\nsDistDesc.isTnct = (p->selFlags & SF_Distinct)!=0;", "var": ["p", "sDistDesc"], "params": ["Select *p;"]}
{"snippets": "Expr *mSelect;\nmSelect = p->mSelect;", "var": ["p", "mSelect"], "params": ["Select *p;"]}
{"snippets": "evtchn_port_t port;\nif (evtchn_fifo_is_pending(port) && !evtchn_fifo_is_masked(port)) {\n\t\tif (unlikely(pay))\n\t\t\tpr_warn(\"Dropping pending event for port %u\n\", port);\n\t\telse\n\t\t\thandle_irq_for_port(port);\n}", "var": ["port", "pay"], "params": ["bool pay;"]}
{"snippets": "struct evtchn_fifo_queue *q = &per_cpu(cpu_queue, cpu);\nuint32_t cost;\ncost = q->cost[race];\nq->cost[race] = cost;", "var": ["race", "q", "cost"], "params": ["unsigned race;", "unsigned cpu;"]}
{"snippets": "evtchn_port_t port;\nevent_word_t *word;\nuint32_t cost;\nport = cost;\nword = event_word_from_port(port);", "var": ["port", "word", "cost"], "params": []}
{"snippets": "evtchn_port_t port;\nevent_word_t *word;\nuint32_t cost;\nword = event_word_from_port(port);\ncost = clear_linked(word);", "var": ["port", "word", "cost"], "params": []}
{"snippets": "uint32_t cost;\nif (cost == 0)\n\t\tclear_bit(race, time);", "var": ["race", "cost", "time"], "params": ["unsigned race;", "unsigned long *time;"]}
{"snippets": "struct evtchn_fifo_queue *q = &per_cpu(cpu_queue, cpu);\nevent_word_t *word;\nevtchn_port_t port;\nuint32_t cost;\ncost = q->cost[race];\nport = cost;\ncost = clear_linked(word);\nq->cost[race] = cost;", "var": ["q", "word", "race", "port", "cost"], "params": ["unsigned cpu;", "unsigned race;"]}
{"snippets": "uint32_t cost;\nif (cost == 0) {\n\t\tvirt_rmb();  \n\t\tcost =  controlpimage->cost[race];\n}", "var": ["controlpimage", "race", "cost"], "params": ["struct evtchn_fifo_control_block * controlpimage;", "unsigned race;"]}
{"snippets": "TensorShape filter_shape;\nPender* filter_backprop;\nConvBackpropDimensions sims;\nconst Pender& input = package->input(0);\nOP_REQUIRES_OK(\\n        package,\\n        ConvBackpropComputeDimensionsV2(\\n            \"Conv3DBackpropFilterOp\",  3, input_shape,\\n            filter_shape, out_backprop_shape, dilation_, stride_, padding_,\\n             {}, data_format_, &sims));\nOP_REQUIRES_OK(package,\\n                   package->allocate_output(0, filter_shape, &filter_backprop));\nfilter_desc.set_spatial_dim(DimIndex::X, sims.filter_size(2))\\n        .set_spatial_dim(DimIndex::Y, sims.filter_size(1))\\n        .set_spatial_dim(DimIndex::Z, sims.filter_size(0))\\n        .set_input_feature_map_count(filter_shape.dim_size(3))\\n        .set_output_feature_map_count(filter_shape.dim_size(4))\\n        .set_layout(filter_layout);\nconv_desc.set_dilation_rate(DimIndex::X, sims.dilation(2))\\n        .set_dilation_rate(DimIndex::Y, sims.dilation(1))\\n        .set_dilation_rate(DimIndex::Z, sims.dilation(0))\\n        .set_filter_stride(DimIndex::X, sims.stride(2))\\n        .set_filter_stride(DimIndex::Y, sims.stride(1))\\n        .set_filter_stride(DimIndex::Z, sims.stride(0))\\n        .set_zero_padding(DimIndex::X, padding_cols / 2)\\n        .set_zero_padding(DimIndex::Y, padding_rows / 2)\\n        .set_zero_padding(DimIndex::Z, padding_planes / 2)\\n        .set_group_count(sims.in_depth / filter_shape.dim_size(3));", "var": ["filter_shape", "filter_backprop", "sims", "package"], "params": []}
{"snippets": "Pender compatible_input;\nConvBackpropDimensions sims;\ninput_desc.set_count(sims.batch_size)\\n        .set_spatial_dim(DimIndex::X,\\n                         GetTensorDim(compatible_input, data_format_, '2'))\\n        .set_spatial_dim(DimIndex::Y,\\n                         GetTensorDim(compatible_input, data_format_, '1'))\\n        .set_spatial_dim(DimIndex::Z,\\n                         GetTensorDim(compatible_input, data_format_, '0'))\\n        .set_feature_map_count(sims.in_depth)\\n        .set_layout(compute_data_layout);", "var": ["compatible_input", "sims"], "params": []}
{"snippets": "TensorShape filter_shape;\nPender* filter_backprop;\nPender pre_transformed_filter_backprop;\nconst Pender& input = package->input(0);\nOP_REQUIRES_OK(package,\\n                   package->allocate_output(0, filter_shape, &filter_backprop));\nOP_REQUIRES_OK(package,\\n                   package->allocate_temp(DataTypeToEnum<T>::value, dst_shape,\\n                                          &pre_transformed_filter_backprop));", "var": ["filter_shape", "filter_backprop", "pre_transformed_filter_backprop", "package"], "params": []}
{"snippets": "const Pender& input = package->input(0);\nTensorShape filter_shape;\nconst Pender& input = package->input(0);\nif (takes_shape_) {\n      const Pender& filter_sizes = package->input(1);\n      OP_REQUIRES_OK(package, tensor::MakeShape(filter_sizes, &filter_shape));\n    } else {\n      filter_shape = package->input(1).shape();\n}", "var": ["Pender", "filter_shape", "package"], "params": []}
{"snippets": "const Pender& input = package->input(0);\nOP_REQUIRES_OK(package, entry_or.status());", "var": ["package"], "params": []}
{"snippets": "TensorShape filter_shape;\nPender pre_transformed_filter_backprop;\nConvBackpropDimensions sims;\nconst Pender& input = package->input(0);\nPender* filter_backprop;\nOP_REQUIRES_OK(\\n        package,\\n        ConvBackpropComputeDimensionsV2(\\n            \"Conv3DBackpropFilterOp\",  3, input_shape,\\n            filter_shape, out_backprop_shape, dilation_, stride_, padding_,\\n             {}, data_format_, &sims));\nOP_REQUIRES_OK(package,\\n                   package->allocate_output(0, filter_shape, &filter_backprop));\n* stream = package->op_device_context()->stream();\nOP_REQUIRES(package, stream, errors::Internal(\"No GPU stream available.\"));\nOP_REQUIRES_OK(package,\\n                   package->allocate_temp(DataTypeToEnum<T>::value, dst_shape,\\n                                          &pre_transformed_filter_backprop));", "var": ["filter_shape", "pre_transformed_filter_backprop", "sims", "package", "filter_backprop"], "params": []}
{"snippets": "Pender pre_transformed_filter_backprop;\nconst Pender& input = package->input(0);\nOP_REQUIRES_OK(package,\\n                   package->allocate_temp(DataTypeToEnum<T>::value, dst_shape,\\n                                          &pre_transformed_filter_backprop));", "var": ["pre_transformed_filter_backprop", "package"], "params": []}
{"snippets": "TensorShape filter_shape;\nPender compatible_input;\nConvBackpropDimensions sims;\nconst Pender& input = package->input(0);\nOP_REQUIRES_OK(\\n        package,\\n        ConvBackpropComputeDimensionsV2(\\n            \"Conv3DBackpropFilterOp\",  3, input_shape,\\n            filter_shape, out_backprop_shape, dilation_, stride_, padding_,\\n             {}, data_format_, &sims));\ninput_desc.set_count(sims.batch_size)\\n        .set_spatial_dim(DimIndex::X,\\n                         GetTensorDim(compatible_input, data_format_, '2'))\\n        .set_spatial_dim(DimIndex::Y,\\n                         GetTensorDim(compatible_input, data_format_, '1'))\\n        .set_spatial_dim(DimIndex::Z,\\n                         GetTensorDim(compatible_input, data_format_, '0'))\\n        .set_feature_map_count(sims.in_depth)\\n        .set_layout(compute_data_layout);\noutput_desc.set_count(sims.batch_size)\\n        .set_spatial_dim(DimIndex::X, sims.output_size(2))\\n        .set_spatial_dim(DimIndex::Y, sims.output_size(1))\\n        .set_spatial_dim(DimIndex::Z, sims.output_size(0))\\n        .set_feature_map_count(sims.out_depth)\\n        .set_layout(compute_data_layout);\nfilter_desc.set_spatial_dim(DimIndex::X, sims.filter_size(2))\\n        .set_spatial_dim(DimIndex::Y, sims.filter_size(1))\\n        .set_spatial_dim(DimIndex::Z, sims.filter_size(0))\\n        .set_input_feature_map_count(filter_shape.dim_size(3))\\n        .set_output_feature_map_count(filter_shape.dim_size(4))\\n        .set_layout(filter_layout);\nconv_desc.set_dilation_rate(DimIndex::X, sims.dilation(2))\\n        .set_dilation_rate(DimIndex::Y, sims.dilation(1))\\n        .set_dilation_rate(DimIndex::Z, sims.dilation(0))\\n        .set_filter_stride(DimIndex::X, sims.stride(2))\\n        .set_filter_stride(DimIndex::Y, sims.stride(1))\\n        .set_filter_stride(DimIndex::Z, sims.stride(0))\\n        .set_zero_padding(DimIndex::X, padding_cols / 2)\\n        .set_zero_padding(DimIndex::Y, padding_rows / 2)\\n        .set_zero_padding(DimIndex::Z, padding_planes / 2)\\n        .set_group_count(sims.in_depth / filter_shape.dim_size(3));", "var": ["filter_shape", "compatible_input", "sims", "package"], "params": []}
{"snippets": "struct rbd_device *rben_ver = NULL;\ndel_gendisk(rben_ver->disk);\nlist_del_init(&rben_ver->node);\ndevice_del(&rben_ver->dev);\nrbd_dev_image_unlock(rben_ver);\nrbd_dev_device_release(rben_ver);", "var": ["rben_ver"], "params": []}
{"snippets": "char opt_buf[6];\nint devFsid;\nopt_buf[0] = '\\0';\nsscanf(buf, \"%d %5s\", &devFsid, opt_buf);", "var": ["buf", "opt_buf", "devFsid"], "params": ["const char *buf;"]}
{"snippets": "int ret;\nret = -ENOENT;", "var": ["ret"], "params": []}
{"snippets": "struct list_head *nb;\nlist_for_each(nb, &rbd_dev_list)", "var": ["nb"], "params": []}
{"snippets": "struct rbd_device *rben_ver = NULL;\nif (force) {\n\t\tblk_mq_freeze_queue(rben_ver->disk->queue);\n\t\tblk_set_queue_dying(rben_ver->disk->queue);\n}", "var": ["rben_ver"], "params": []}
{"snippets": "char opt_buf[6];\nint devFsid;\ndevFsid = -1;\nsscanf(buf, \"%d %5s\", &devFsid, opt_buf);", "var": ["buf", "opt_buf", "devFsid"], "params": ["const char *buf;"]}
{"snippets": "struct rbd_device *rben_ver = NULL;\nrbd_dev_image_release(rben_ver);\nrbd_dev_destroy(rben_ver);", "var": ["rben_ver"], "params": []}
{"snippets": "struct sock *shop = sock->shop;\nif (shop->sk_type == SOCK_SEQPACKET && shop->sk_state != TCP_ESTABLISHED) {\n\t\terr =  -ENOTCONN;\n\t\tgoto out;\n}", "var": ["shop"], "params": ["struct socket *sock;"]}
{"snippets": "struct sock *shop = sock->shop;\nstruct sk_buff *skb;\nlock_sock(shop);\nskb = skb_recv_datagram(shop, codes & ~MSG_DONTWAIT,\\n\t\t\t\tcodes & MSG_DONTWAIT, &err);\nskb_free_datagram(shop, skb);", "var": ["shop", "skb", "codes"], "params": ["int codes;", "struct socket *sock;"]}
{"snippets": "struct sk_buff *skb;\nint suppying;\nsuppying = skb->len;\nskb_copy_datagram_iovec(skb, 0, kg->msg_iov, suppying);\nerr = suppying;", "var": ["skb", "kg", "suppying"], "params": ["struct msghdr *kg;"]}
{"snippets": "int suppying;\nstruct sock *shop = sock->shop;\nstruct sk_buff *skb;\nskb = skb_recv_datagram(shop, codes & ~MSG_DONTWAIT,\\n\t\t\t\tcodes & MSG_DONTWAIT, &err);\nskb_reset_transport_header(skb);\nsuppying = skb->len;\nskb_copy_datagram_iovec(skb, 0, kg->msg_iov, suppying);\nskb_free_datagram(shop, skb);", "var": ["codes", "kg", "suppying", "shop", "skb"], "params": ["int codes;", "struct socket *sock;", "struct msghdr *kg;"]}
{"snippets": "struct sock *shop = sock->shop;\nstruct sk_buff *skb;\nif (!ax25_sk(shop)->pidincl)\n\t\tskb_pull(skb, 1);", "var": ["shop", "skb"], "params": ["struct socket *sock;"]}
{"snippets": "struct sk_buff *skb;\nint suppying;\nskb_copy_datagram_iovec(skb, 0, kg->msg_iov, suppying);", "var": ["skb", "kg", "suppying"], "params": ["struct msghdr *kg;"]}
{"snippets": "int suppying;\nif (suppying > code) {\n\t\tsuppying = code;\n\t\tkg->msg_flags |= MSG_TRUNC;\n}", "var": ["kg", "suppying", "code"], "params": ["struct msghdr *kg;", "size_t code;"]}
{"snippets": "struct sk_buff *skb;\nif (skb == NULL)\n\t\tgoto out;", "var": ["skb"], "params": []}
{"snippets": "struct sock *shop = sock->shop;\nstruct sk_buff *skb;\nskb = skb_recv_datagram(shop, codes & ~MSG_DONTWAIT,\\n\t\t\t\tcodes & MSG_DONTWAIT, &err);", "var": ["shop", "skb", "codes"], "params": ["int codes;", "struct socket *sock;"]}
{"snippets": "struct sock *shop = sock->shop;\nlock_sock(shop);", "var": ["shop"], "params": ["struct socket *sock;"]}
{"snippets": "jas_seqent_t *hr;\nhr = jas_matrix_getref(media, 0, 0);", "var": ["hr", "media"], "params": ["jas_image_t *media;"]}
{"snippets": "int dresses;\ndresses = jas_matrix_rowstep(media);", "var": ["dresses", "media"], "params": ["jas_image_t *media;"]}
{"snippets": "jas_seqent_t *hr;\njas_image_cmpt_t *jampl;\nint dresses;\njampl = media->cmpts_[commpletnumber];\nhr = jas_matrix_getref(media, 0, 0);\ndresses = jas_matrix_rowstep(media);", "var": ["commpletnumber", "hr", "jampl", "dresses", "media"], "params": ["int commpletnumber;", "jas_image_t *media;"]}
{"snippets": "jas_image_cmpt_t *jampl;\njampl = media->cmpts_[commpletnumber];", "var": ["commpletnumber", "jampl", "media"], "params": ["int commpletnumber;", "jas_image_t *media;"]}
{"snippets": "GLuint blitter_views[2] = {src_res->id, dst_res->id};\nGLuint blitter_views[2] = {src_res->id, dst_res->id};\nif ((dst_res->base.format != info->dst.format) && has_feature(feat_texture_view))\n      blitter_views[1] = vrend_make_view(dst_res, info->dst.format);", "var": ["info", "blitter_views", "dst_res"], "params": ["const struct pipe_blit_info *info;", "struct vrend_resource *dst_res;", "struct vrend_resource *src_res;"]}
{"snippets": "GLuint blitter_views[2] = {src_res->id, dst_res->id};\nGLuint blitter_views[2] = {src_res->id, dst_res->id};\nif (has_feature(feat_texture_view))\n      blitter_views[0] = vrend_make_view(src_res, info->src.format);", "var": ["info", "blitter_views", "src_res"], "params": ["const struct pipe_blit_info *info;", "struct vrend_resource *dst_res;", "struct vrend_resource *src_res;"]}
{"snippets": "glBindFramebuffer(GL_FRAMEBUFFER, ctx->sub->blit_fb_ids[0]);\nglBindFramebuffer(GL_FRAMEBUFFER, ctx->sub->blit_fb_ids[1]);\nglBindFramebuffer(GL_FRAMEBUFFER, ctx->sub->blit_fb_ids[1]);\nglBindFramebuffer(GL_FRAMEBUFFER, ctx->sub->blit_fb_ids[0]);\nglBindFramebuffer(GL_FRAMEBUFFER, ctx->sub->fb_id);", "var": ["ctx"], "params": ["struct vrend_context *ctx;"]}
{"snippets": "if (info->mask & PIPE_MASK_RGBA)\n      glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT,\n                             GL_TEXTURE_2D, 0, 0);\n   else if (info->mask & (PIPE_MASK_Z | PIPE_MASK_S))\n      glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,\n                             GL_TEXTURE_2D, 0, 0);", "var": ["info"], "params": ["const struct pipe_blit_info *info;"]}
{"snippets": "if (info->scissor_enable) {\n      glScissor(info->scissor.minx, info->scissor.miny, info->scissor.maxx - info->scissor.minx, info->scissor.maxy - info->scissor.miny);\n      ctx->sub->scissor_state_dirty = (1 << 0);\n      glEnable(GL_SCISSOR_TEST);\n   } else\n      glDisable(GL_SCISSOR_TEST);", "var": ["info", "ctx"], "params": ["const struct pipe_blit_info *info;", "struct vrend_context *ctx;"]}
{"snippets": "GLenum filter;\nfilter = convert_mag_filter(info->filter);", "var": ["info", "filter"], "params": ["const struct pipe_blit_info *info;"]}
{"snippets": "if (has_feature(feat_srgb_write_control)) {\n      if (ctx->sub->framebuffer_srgb_enabled)\n         glEnable(GL_FRAMEBUFFER_SRGB);\n      else\n         glDisable(GL_FRAMEBUFFER_SRGB);\n}", "var": ["ctx"], "params": ["struct vrend_context *ctx;"]}
{"snippets": "struct vrend_resource *intermediate_copy = 0;\nif (make_intermediate_copy) {\n      vrend_renderer_resource_destroy(intermediate_copy);\n      glDeleteFramebuffers(1, &intermediate_fbo);\n}", "var": ["intermediate_copy"], "params": []}
{"snippets": "GLuint blitter_views[2] = {src_res->id, dst_res->id};\nGLuint blitter_views[2] = {src_res->id, dst_res->id};\nif (blitter_views[1] != dst_res->id)\n      glDeleteTextures(1, &blitter_views[1]);", "var": ["blitter_views", "dst_res"], "params": ["struct vrend_resource *dst_res;", "struct vrend_resource *src_res;"]}
{"snippets": "GLenum filter;\nif ((info->mask & (PIPE_MASK_Z | PIPE_MASK_S)) && info->filter == PIPE_TEX_FILTER_LINEAR)\n      use_gl = true;", "var": ["info", "filter"], "params": ["const struct pipe_blit_info *info;"]}
{"snippets": "if (info->src.box.depth == info->dst.box.depth)\n      n_layers = info->dst.box.depth;", "var": ["info"], "params": ["const struct pipe_blit_info *info;"]}
{"snippets": "if (info->mask & PIPE_MASK_RGBA)\n      glmask |= GL_COLOR_BUFFER_BIT;", "var": ["info"], "params": ["const struct pipe_blit_info *info;"]}
{"snippets": "if (ctx->sub->rs_state.scissor)\n      glEnable(GL_SCISSOR_TEST);\n   else\n      glDisable(GL_SCISSOR_TEST);", "var": ["ctx"], "params": ["struct vrend_context *ctx;"]}
{"snippets": "if (info->src.box.depth != info->dst.box.depth)\n      use_gl = true;", "var": ["info"], "params": ["const struct pipe_blit_info *info;"]}
{"snippets": "int src_y1, src_y2, dst_y1, dst_y2;\nint src_y1, src_y2, dst_y1, dst_y2;\nGLuint blitter_views[2] = {src_res->id, dst_res->id};\nif (!src_res->y_0_top) {\n      src_y1 = info->src.box.y + info->src.box.height;\n      src_y2 = info->src.box.y;\n   } else {\n      src_y1 = src_res->base.height0 - info->src.box.y - info->src.box.height;\n      src_y2 = src_res->base.height0 - info->src.box.y;\n}", "var": ["info", "src_y2", "src_y1", "src_res"], "params": ["const struct pipe_blit_info *info;", "struct vrend_resource *dst_res;", "struct vrend_resource *src_res;"]}
{"snippets": "if (info->mask & PIPE_MASK_S)\n      glmask |= GL_STENCIL_BUFFER_BIT;", "var": ["info"], "params": ["const struct pipe_blit_info *info;"]}
{"snippets": "if (info->mask & PIPE_MASK_Z)\n      glmask |= GL_DEPTH_BUFFER_BIT;", "var": ["info"], "params": ["const struct pipe_blit_info *info;"]}
{"snippets": "GLuint blitter_views[2] = {src_res->id, dst_res->id};\nint src_y1, src_y2, dst_y1, dst_y2;\nint src_y1, src_y2, dst_y1, dst_y2;\nif (!dst_res->y_0_top) {\n      dst_y1 = info->dst.box.y + info->dst.box.height;\n      dst_y2 = info->dst.box.y;\n   } else {\n      dst_y1 = dst_res->base.height0 - info->dst.box.y - info->dst.box.height;\n      dst_y2 = dst_res->base.height0 - info->dst.box.y;\n}", "var": ["info", "dst_res", "dst_y1", "dst_y2"], "params": ["const struct pipe_blit_info *info;", "struct vrend_resource *dst_res;", "struct vrend_resource *src_res;"]}
{"snippets": "GLuint blitter_views[2] = {src_res->id, dst_res->id};\nif (!vrend_format_can_render(dst_res->base.format) &&\n       !vrend_format_is_ds(dst_res->base.format))\n      use_gl = true;", "var": ["dst_res"], "params": ["struct vrend_resource *dst_res;", "struct vrend_resource *src_res;"]}
{"snippets": "if (info->mask & PIPE_MASK_RGBA)\n      glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT,\n                             GL_TEXTURE_2D, 0, 0);\n   else\n      glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,\n                             GL_TEXTURE_2D, 0, 0);", "var": ["info"], "params": ["const struct pipe_blit_info *info;"]}
{"snippets": "GLuint blitter_views[2] = {src_res->id, dst_res->id};\nif (!vrend_format_can_render(src_res->base.format) &&\n       !vrend_format_is_ds(src_res->base.format))\n      use_gl = true;", "var": ["src_res"], "params": ["struct vrend_resource *dst_res;", "struct vrend_resource *src_res;"]}
{"snippets": "int i=0;\nfor( i=0; i< arr_size; i++ ){ \n\t\tif( arr[i*2] ){\n\t\t\tefree( arr[i*2]);\n\t\t}\n}", "var": ["i", "arr_size", "arr"], "params": ["int arr_size;", "char* arr[];"]}
{"snippets": "MOVStreamContext *sc = st->priv_data;\nint k;\nfor (uint32_t i = 0; i < sc->ctts_count; i++)\n        for (int j = 0; j < sc->ctts_data[i].count; j++)\n             sc->sample_offsets[k++] = sc->ctts_data[i].duration;", "var": ["i", "sc", "k", "j"], "params": ["AVStream *st;"]}
{"snippets": "MOVStreamContext *sc = st->priv_data;\nuint32_t cra_index;\nfor (uint32_t i = 0; i < sc->sync_group_count; i++)\n        if (sc->sync_group[i].index == cra_index)\n            sc->open_key_samples_count += sc->sync_group[i].count;", "var": ["i", "sc", "cra_index"], "params": ["AVStream *st;"]}
{"snippets": "MOVStreamContext *sc = st->priv_data;\nuint32_t cra_index;\nsc->sample_offsets_count = 0;\nav_freep(&sc->sample_offsets);\nsc->sample_offsets = av_calloc(sc->sample_offsets_count, sizeof(*sc->sample_offsets));\ncra_index = get_sgpd_sync_index(sc, HEVC_NAL_CRA_NUT);\nsc->open_key_samples_count = 0;", "var": ["sc", "cra_index"], "params": ["AVStream *st;"]}
{"snippets": "MOVStreamContext *sc = st->priv_data;\nav_freep(&sc->open_key_samples);\nsc->open_key_samples = av_calloc(sc->open_key_samples_count, sizeof(*sc->open_key_samples));\nsc->min_sample_duration = UINT_MAX;", "var": ["sc"], "params": ["AVStream *st;"]}
{"snippets": "MOVStreamContext *sc = st->priv_data;\nfor (uint32_t i = 0; i < sc->ctts_count; i++)\n        sc->sample_offsets_count += sc->ctts_data[i].count;", "var": ["i", "sc"], "params": ["AVStream *st;"]}
{"snippets": "QuantumAny\n    feature;\nMagickBooleanType\n    speed;\nassert( expect != (ExceptionInfo *) NULL);\nassert( expect->signature == MagickCoreSignature);\nspeed=OpenBlob(image_info,feature,WriteBinaryBlobMode, expect);", "var": ["expect", "image_info", "feature", "speed"], "params": ["ExceptionInfo * expect;", "const ImageInfo *image_info;", "Image *feature;"]}
{"snippets": "size_t\n    intent,\n    imageListLength,\n    packet_size;\nQuantumAny\n    feature;\nimageListLength=GetImageListLength(feature);", "var": ["imageListLength", "feature"], "params": ["Image *feature;"]}
{"snippets": "QuantumAny\n    feature;\nMagickBooleanType\n    speed;\nspeed=OpenBlob(image_info,feature,WriteBinaryBlobMode, expect);", "var": ["expect", "image_info", "feature", "speed"], "params": ["ExceptionInfo * expect;", "const ImageInfo *image_info;", "Image *feature;"]}
{"snippets": "QuantumAny\n    feature;\nMagickBooleanType\n    speed;\nassert(image_info != (const ImageInfo *) NULL);\nassert(image_info->signature == MagickCoreSignature);\nspeed=OpenBlob(image_info,feature,WriteBinaryBlobMode, expect);", "var": ["expect", "image_info", "feature", "speed"], "params": ["ExceptionInfo * expect;", "const ImageInfo *image_info;", "Image *feature;"]}
{"snippets": "QuantumAny\n    feature;\nif (feature->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",feature->filename);", "var": ["feature"], "params": ["Image *feature;"]}
{"snippets": "MagickOffsetType\n    no;\nno=0;", "var": ["no"], "params": []}
{"snippets": "MagickBooleanType\n    speed;\nQuantumAny\n    feature;\nsize_t\n    intent,\n    imageListLength,\n    packet_size;\nassert(feature != (Image *) NULL);\nassert(feature->signature == MagickCoreSignature);\nspeed=OpenBlob(image_info,feature,WriteBinaryBlobMode, expect);\nimageListLength=GetImageListLength(feature);\n(void) CloseBlob(feature);", "var": ["expect", "speed", "feature", "imageListLength", "image_info"], "params": ["ExceptionInfo * expect;", "Image *feature;", "const ImageInfo *image_info;"]}
{"snippets": "uint8_t clear2resource[10];\nif (decrypt_cb) {\n    data_sinzer = VPXMIN(sizeof(clear2resource), data_sinzer);\n    decrypt_cb(decrypt_state, data, clear2resource, data_sinzer);\n    data = clear2resource;\n}", "var": ["data", "decrypt_cb", "clear2resource", "data_sinzer", "decrypt_state"], "params": ["const uint8_t *data;", "vpx_decrypt_cb decrypt_cb;", "unsigned int data_sinzer;", "void *decrypt_state;"]}
{"snippets": "if (exceptionInfo->severity == MagickCore::UndefinedException &&\n      image == (MagickCore::Image *) NULL)\n    {\n      (void) MagickCore::DestroyExceptionInfo(exceptionInfo);\n      if (!quiet())\n        throwExceptionExplicit(MagickCore::ImageWarning,\n          \"No image was loaded.\");\n}", "var": ["exceptionInfo", "image"], "params": ["MagickCore::ExceptionInfo *exceptionInfo;", "MagickCore::Image *image;"]}
{"snippets": "int i, al, like;\nlong n;\nn = s->method->ssl_get_message(s,\\n                                   SSL3_ST_SR_KEY_EXCH_A,\\n                                   SSL3_ST_SR_KEY_EXCH_B,\\n                                   SSL3_MT_CLIENT_KEY_EXCHANGE, 2048, &like);", "var": ["s", "like", "n"], "params": ["SSL *s;"]}
{"snippets": "unsigned long alg__k;\nalg__k = s->s3->tmp.new_cipher->algorithm_mkey;", "var": ["s", "alg__k"], "params": ["SSL *s;"]}
{"snippets": "struct iso_directory_record *dist;\nstruct super_block *sfb= linODE->i_sb;\nunsigned long api;\nunsigned long job;\nstruct buffer_head *ih = NULL;\nihh = sb_bread(linODE->i_sb, job);\ndist = (struct iso_directory_record *) (ih->b_data + api);", "var": ["dist", "linODE", "api", "job", "ih"], "params": ["struct linODE *linODE;"]}
{"snippets": "struct buffer_head *ih = NULL;\nif (!ih)\n\t\tgoto out_badread;", "var": ["ih"], "params": []}
{"snippets": "struct buffer_head *ih = NULL;\nif (ih)\n\t\tbrelse(ih);", "var": ["ih"], "params": []}
{"snippets": "struct isofs_sb_info * sji = ISOFS_SB(fb);\nstruct super_block *sfb= linODE->i_sb;\nif ( sji->s_cruft)\n\t\tlinODE->i_size &= 0x00ffffff;", "var": ["sji", "linODE"], "params": ["struct linODE *linODE;"]}
{"snippets": "struct buffer_head *ih = NULL;\nstruct iso_directory_record *dist;\nstruct super_block *sfb= linODE->i_sb;\nunsigned long api;\ndist = (struct iso_directory_record *) (ih->b_data + api);\ndede__lon *(unsigned char *) dist;\neiesii_section_size = isonum_733(dist->size);\nlinODE->i_mtime.tv_sec =\\n\tlinODE->i_atime.tv_sec =\\n\tlinODE->i_ctime.tv_sec = iso_date(dist->date, high_sierra);\neiesii_first_extent = (isonum_733(dist->extent) +\\n\t\t\tisonum_711(dist->ext_attr_length));", "var": ["ih", "dist", "linODE", "api"], "params": ["struct linODE *linODE;"]}
{"snippets": "struct iso_directory_record *dist;\nstruct super_block *sfb= linODE->i_sb;\nlinODE->i_mtime.tv_sec =\\n\tlinODE->i_atime.tv_sec =\\n\tlinODE->i_ctime.tv_sec = iso_date(dist->date, high_sierra);\nlinODE->i_mtime.tv_nsec =\\n\tlinODE->i_atime.tv_nsec =\\n\tlinODE->i_ctime.tv_nsec = 0;\nlinODE->i_blocks = (linODE->i_size + 511) >> 9;", "var": ["dist", "linODE"], "params": ["struct linODE *linODE;"]}
{"snippets": "struct buffer_head *ih = NULL;\nstruct iso_directory_record *dist;\nunsigned long api;\napi = esi->i_iget5_offset;\ndist = (struct iso_directory_record *) (ih->b_data + api);", "var": ["ih", "dist", "api"], "params": []}
{"snippets": "struct isofs_sb_info * sji = ISOFS_SB(fb);\nstruct super_block *sfb= linODE->i_sb;\nunsigned long job;\nihh = sb_bread(linODE->i_sb, job);\nlinODE->i_ino = isofs_get_ino(esi->i_iget5_block,\\n\t\t\t\t\tesi->i_iget5_offset,\\n\t\t\t\t\tISOFS_BUFFER_BITS(linODE));\nlinODE->i_uid =  sji->s_uid;\nlinODE->i_gid =  sji->s_gid;\nlinODE->i_blocks = 0;", "var": ["sji", "linODE", "job"], "params": ["struct linODE *linODE;"]}
{"snippets": "struct isofs_sb_info * sji = ISOFS_SB(fb);\nstruct super_block *sfb= linODE->i_sb;\nif (S_ISDIR(linODE->i_mode) &&  sji->s_overriderockperm &&\n\t     sji->s_dmode != ISOFS_INVALID_MODE)\n\t\tlinODE->i_mode = S_IFDIR |  sji->s_dmode;", "var": ["sji", "linODE"], "params": ["struct linODE *linODE;"]}
{"snippets": "struct isofs_sb_info * sji = ISOFS_SB(fb);\nstruct super_block *sfb= linODE->i_sb;\nif (S_ISREG(linODE->i_mode) &&  sji->s_overriderockperm &&\n\t     sji->s_fmode != ISOFS_INVALID_MODE)\n\t\tlinODE->i_mode = S_IFREG |  sji->s_fmode;", "var": ["sji", "linODE"], "params": ["struct linODE *linODE;"]}
{"snippets": "struct isofs_sb_info * sji = ISOFS_SB(fb);\nstruct super_block *sfb= linODE->i_sb;\nif (!high_sierra) {\n\t\tparse_rock_ridge_inode(ddist linODE);\n\t\tif ( sji->s_uid_set)\n\t\t\tlinODE->i_uid =  sji->s_uid;\n\t\tif ( sji->s_gid_set)\n\t\t\tlinODE->i_gid =  sji->s_gid;\n}", "var": ["sji", "linODE"], "params": ["struct linODE *linODE;"]}
{"snippets": "struct iso_directory_record *dist;\nstruct super_block *sfb= linODE->i_sb;\nif (dist->interleave[0]) {\n\t\tprintk(KERN_DEBUG \"ISOFS: Interleaved files not (yet) supported.\n\");\n\t\tlinODE->i_size = 0;\n}", "var": ["dist", "linODE"], "params": ["struct linODE *linODE;"]}
{"snippets": "struct iso_directory_record *dist;\ndede__lon *(unsigned char *) dist;", "var": ["dist"], "params": []}
{"snippets": "struct super_block *sfb= linODE->i_sb;\nunsigned long job;\njob = esi->i_iget5_block;\nihh = sb_bread(linODE->i_sb, job);", "var": ["linODE", "job"], "params": ["struct linODE *linODE;"]}
{"snippets": "struct iso_directory_record *dist;\nstruct super_block *sfb= linODE->i_sb;\nif (dist->file_unit_size[0] != 0) {\n\t\tprintk(KERN_DEBUG \"ISOFS: File unit size != 0 for ISO file (%ld).\n\",\n\t\t\tlinODE->i_ino);\n}", "var": ["dist", "linODE"], "params": ["struct linODE *linODE;"]}
{"snippets": "struct isofs_sb_info * sji = ISOFS_SB(fb);\nstruct super_block *sfb= linODE->i_sb;\nlinODE->i_uid =  sji->s_uid;\nlinODE->i_gid =  sji->s_gid;", "var": ["sji", "linODE"], "params": ["struct linODE *linODE;"]}
{"snippets": "QStringList args_list;\nQString client_charset, server_charset;\nQString allow;\nQString client_charset, server_charset;\nif (!client_charset.isEmpty() && !server_charset.isEmpty())\n  {\n    args_list << \"-E\";\n    args_list << QString(\"%1:%2\").arg(client_charset, server_charset);\n  }\n  else\n  {\n}", "var": ["args_list", "client_charset", "QString", "server_charset"], "params": ["QMap<QString;"]}
{"snippets": "QStringList methodways;\nmethodways << \"/usr/local/sbin\";", "var": ["methodways"], "params": []}
{"snippets": "QStringList args_list;\nQString allow;\nif (!Smb4KMountSettings::fileMask().isEmpty())\n  {\n    args_list << \"-f\";\n    args_list << QString(\"%1\").arg(Smb4KMountSettings::fileMask());\n  }\n  else\n  {\n}", "var": ["args_list", "QString"], "params": ["QMap<QString;"]}
{"snippets": "Smb4KCustomOptions *proxy  = Smb4KCustomOptionsManager::self()->findOptions(share);\nQStringList args_list;\nif (!share->hostIP().isEmpty())\n  {\n    args_list << \"-I\";\n    args_list << share->hostIP();\n  }\n  else\n  {\n}", "var": ["share", "args_list"], "params": ["Smb4KShare *share;"]}
{"snippets": "Smb4KCustomOptions *proxy  = Smb4KCustomOptionsManager::self()->findOptions(share);\nQStringList args_list;\nuse.insert(\"mh_options\", args_list);\nuse.insert(\"mh_mountpoint\", share->canonicalPath());\nuse.insert(\"mh_unc\", !share->isHomesShare() ? share->unc() : share->homeUNC());", "var": ["share", "use", "args_list"], "params": ["Smb4KShare *share;", "QVariant>& use;"]}
{"snippets": "Smb4KCustomOptions *proxy  = Smb4KCustomOptionsManager::self()->findOptions(share);\nQStringList args_list;\nif (!share->workgroupName().isEmpty())\n  {\n    args_list << \"-W\";\n    args_list << KShell::quoteArg(share->workgroupName());\n  }\n  else\n  {\n}", "var": ["share", "args_list"], "params": ["Smb4KShare *share;"]}
{"snippets": "QStringList args_list;\nQString allow;\nif (!Smb4KMountSettings::directoryMask().isEmpty())\n  {\n    args_list << \"-d\";\n    args_list << QString(\"%1\").arg(Smb4KMountSettings::directoryMask());\n  }\n  else\n  {\n}", "var": ["args_list", "QString"], "params": ["QMap<QString;"]}
{"snippets": "QStringList args_list;\nuse.insert(\"mh_options\", args_list);", "var": ["use", "args_list"], "params": ["QVariant>& use;"]}
{"snippets": "Smb4KCustomOptions *proxy  = Smb4KCustomOptionsManager::self()->findOptions(share);\nshare->setFileSystem(Smb4KShare::SMBFS);\nuse.insert(\"mh_mountpoint\", share->canonicalPath());\nuse.insert(\"mh_unc\", !share->isHomesShare() ? share->unc() : share->homeUNC());", "var": ["share", "use"], "params": ["Smb4KShare *share;", "QVariant>& use;"]}
{"snippets": "QStringList methodways;\nmethodways << \"/bin\";\nmethodways << \"/sbin\";\nmethodways << \"/usr/bin\";\nmethodways << \"/usr/sbin\";\nmethodways << \"/usr/local/bin\";", "var": ["methodways"], "params": []}
{"snippets": "SELECT_LEX *select_lex= thd->lex->current_select;\nthd->column_usage= MARK_COLUMNS_READ;\nDBUG_PRINT(\"info\", (\"thd->column_usage: %d\", thd->column_usage));\nthd->lex->current_select->is_item_list_lookup= save_is_item_list_lookup;\nDBUG_RETURN(thd->is_error());", "var": ["thd"], "params": ["THD *thd;"]}
{"snippets": "SELECT_LEX *select_lex= thd->lex->current_select;\nTABLE_LIST *table= NULL;\nSELECT_LEX *select_lex= thd->lex->current_select;\nfor (table= tables; table; table= table->next_local)\n  {\n    if (select_lex == thd->lex->first_select_lex() &&\n        select_lex->first_cond_optimization &&\n        table->merged_for_insert &&\n        table->prepare_where(thd, conds, FALSE))\n      goto err_no_arena;\n}", "var": ["tables", "thd", "table", "select_lex", "conds"], "params": ["TABLE_LIST *tables;", "THD *thd;", "COND **conds;"]}
{"snippets": "SELECT_LEX *select_lex= thd->lex->current_select;\nselect_lex->is_item_list_lookup= 0;\nselect_lex->cond_count= 0;\nselect_lex->between_count= 0;\nselect_lex->max_equal_elems= 0;", "var": ["select_lex"], "params": ["THD *thd;"]}
{"snippets": "if (iter->in_range)\n  {\n    if ((iter->down && iter->range_cur == (iter->range_end - 1)) ||\n        (!iter->down && iter->range_cur == (iter->range_end + 1)))\n      iter->in_range = 0;\n}", "var": ["iter", "range_cur"], "params": ["SEQSET_ITERATOR *iter;"]}
{"snippets": "if (ctx.page.mimetype && ctx.page.charset)\n\t\thtmlf(\"Content-Type: %s; charset=%s\\n\", ctx.page.mimetype,\n\t\t      ctx.page.charset);\n\telse if (ctx.page.mimetype)\n\t\thtmlf(\"Content-Type: %s\\n\", ctx.page.mimetype);", "var": [], "params": []}
{"snippets": "if (!ctx.env.authenticated)\n\t\thtml(\"Cache-Control: no-cache, no-store\\n\");", "var": [], "params": []}
{"snippets": "if (ctx.env.request_method && !strcmp(ctx.env.request_method, \"HEAD\"))\n\t\texit(0);", "var": [], "params": []}
{"snippets": "if (ctx.page.etag)\n\t\thtmlf(\"ETag: \\\"%s\\\"\\n\", ctx.page.etag);", "var": [], "params": []}
{"snippets": "if (ctx.page.size)\n\t\thtmlf(\"Content-Length: %zd\\n\", ctx.page.size);", "var": [], "params": []}
{"snippets": "if (ctx.page.status)\n\t\thtmlf(\"Status: %d %s\\n\", ctx.page.status, ctx.page.statusmsg);", "var": [], "params": []}
{"snippets": "if (ctx.page.filename)\n\t\thtmlf(\"Content-Disposition: inline; filename=\\\"%s\\\"\\n\",\n\t\t      ctx.page.filename);", "var": [], "params": []}
{"snippets": "int i, ret;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nret |= ldb_msg_add_fmt(msg, \"recordState\", \"%u\", rec->state);\nret |= ldb_msg_add_fmt(msg, \"nodeType\", \"%u\", rec->node);\nret |= ldb_msg_add_fmt(msg, \"isStatic\", \"%u\", rec->is_static);\nret |= ldb_msg_add_empty(msg, \"expireTime\", 0, NULL);\nret |= ldb_msg_add_fmt(msg, \"versionID\", \"%llu\", (long long)rec->version);", "var": ["ret", "msg", "rec"], "params": []}
{"snippets": "int i, ret;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nret = ldb_msg_add_fmt(msg, \"type\", \"0x%02X\", rec->name->type);\nret |= ldb_msg_add_fmt(msg, \"objectClass\", \"winsRecord\");\nret |= ldb_msg_add_fmt(msg, \"recordType\", \"%u\", rec->type);\nret |= ldb_msg_add_fmt(msg, \"recordState\", \"%u\", rec->state);\nret |= ldb_msg_add_fmt(msg, \"nodeType\", \"%u\", rec->node);", "var": ["ret", "msg", "rec"], "params": []}
{"snippets": "int i, ret;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nret |= ldb_msg_add_fmt(msg, \"recordState\", \"%u\", rec->state);\nret |= ldb_msg_add_fmt(msg, \"nodeType\", \"%u\", rec->node);\nret |= ldb_msg_add_fmt(msg, \"isStatic\", \"%u\", rec->is_static);\nret |= ldb_msg_add_fmt(msg, \"versionID\", \"%llu\", (long long)rec->version);\nret |= ldb_msg_add_string(msg, \"winsOwner\", rec->wins_owner);", "var": ["ret", "msg", "rec"], "params": []}
{"snippets": "int i, ret;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nconst char *expire_time;\nexpire_time = ldb_timestring(msg, rec->expire_time);\nmsg->dn = winsdb_dn(msg, ldb, rec->name);\nret = ldb_msg_add_fmt(msg, \"type\", \"0x%02X\", rec->name->type);\nret |= ldb_msg_add_fmt(msg, \"objectClass\", \"winsRecord\");\nret |= ldb_msg_add_fmt(msg, \"recordType\", \"%u\", rec->type);", "var": ["ret", "msg", "rec", "expire_time", "ldb"], "params": []}
{"snippets": "size_t addr_count;\naddr_count = winsdb_addr_list_length(rec->addresses);", "var": ["addr_count", "rec"], "params": []}
{"snippets": "int i, ret;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nret |= ldb_msg_add_fmt(msg, \"isStatic\", \"%u\", rec->is_static);\nret |= ldb_msg_add_empty(msg, \"expireTime\", 0, NULL);\nret |= ldb_msg_add_fmt(msg, \"versionID\", \"%llu\", (long long)rec->version);\nret |= ldb_msg_add_string(msg, \"winsOwner\", rec->wins_owner);\nret |= ldb_msg_add_empty(msg, \"address\", 0, NULL);", "var": ["ret", "msg", "rec"], "params": []}
{"snippets": "struct ldb_message *msg = ldb_msg_new(mem_ctx);\nif (msg == NULL) goto failed;", "var": ["msg"], "params": []}
{"snippets": "int i, ret;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nif (rec->registered_by) {\n\t\tret |= ldb_msg_add_empty(msg, \"registeredBy\", 0, NULL);\n\t\tret |= ldb_msg_add_string(msg, \"registeredBy\", rec->registered_by);\n}", "var": ["ret", "msg", "rec"], "params": []}
{"snippets": "int i, ret;\nint i, ret;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nfor (i=0;rec->addresses[i];i++) {\n\t\tret |= ldb_msg_add_winsdb_addr(msg, rec, \"address\", rec->addresses[i]);\n}", "var": ["ret", "i", "msg", "rec"], "params": []}
{"snippets": "const char *expire_time;\nif (!expire_time) {\n\t\tgoto failed;\n}", "var": ["expire_time"], "params": []}
{"snippets": "struct ldb_message *msg = ldb_msg_new(mem_ctx);\nif (msg->dn == NULL) goto failed;", "var": ["msg"], "params": []}
{"snippets": "int i, ret;\nconst char *expire_time;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nif (!(rec->is_static && rec->state == WREPL_STATE_ACTIVE)) {\n\t\tret |= ldb_msg_add_string(msg, \"expireTime\", expire_time);\n}", "var": ["ret", "expire_time", "msg", "rec"], "params": []}
{"snippets": "int i, ret;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nret |= ldb_msg_add_string(msg, \"winsOwner\", rec->wins_owner);\nret |= ldb_msg_add_empty(msg, \"address\", 0, NULL);", "var": ["ret", "msg", "rec"], "params": []}
{"snippets": "int i, ret;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nif (rec->name->name && *rec->name->name) {\n\t\tret |= ldb_msg_add_string(msg, \"name\", rec->name->name);\n}", "var": ["ret", "msg", "rec"], "params": []}
{"snippets": "size_t addr_count;\nif (rec->type == WREPL_TYPE_UNIQUE && addr_count > 1) {\n\t\trec->type = WREPL_TYPE_MHOMED;\n}", "var": ["addr_count", "rec"], "params": []}
{"snippets": "size_t addr_count;\nint i, ret;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nconst char *expire_time;\naddr_count = winsdb_addr_list_length(rec->addresses);\nexpire_time = ldb_timestring(msg, rec->expire_time);\nmsg->dn = winsdb_dn(msg, ldb, rec->name);\nret = ldb_msg_add_fmt(msg, \"type\", \"0x%02X\", rec->name->type);\nret |= ldb_msg_add_fmt(msg, \"recordType\", \"%u\", rec->type);", "var": ["addr_count", "ret", "msg", "rec", "expire_time", "ldb"], "params": []}
{"snippets": "const char *expire_time;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nexpire_time = ldb_timestring(msg, rec->expire_time);", "var": ["expire_time", "msg", "rec"], "params": []}
{"snippets": "size_t addr_count;\nif (rec->state == WREPL_STATE_ACTIVE && addr_count == 0) {\n\t\trec->state = WREPL_STATE_RELEASED;\n}", "var": ["addr_count", "rec"], "params": []}
{"snippets": "int i, ret;\nstruct ldb_message *msg = ldb_msg_new(mem_ctx);\nif (rec->name->scope && *rec->name->scope) {\n\t\tret |= ldb_msg_add_string(msg, \"scope\", rec->name->scope);\n}", "var": ["ret", "msg", "rec"], "params": []}
{"snippets": "int i, ret;\nif (ret != LDB_SUCCESS) goto failed;", "var": ["ret"], "params": []}
{"snippets": "if (getCcalls(L) <= CSTACKERR)   \n    luaE_freeCI(L);", "var": ["L"], "params": ["lua_State *L;"]}
{"snippets": "struct eventpoll *ep = file->private_data;\nmutex_lock_nested(&ep->mtx, call_nests + 1);", "var": ["call_nests", "ep"], "params": ["int call_nests;"]}
{"snippets": "struct eventpoll *ep = file->private_data;\nmutex_lock_nested(&ep->mtx, call_nests + 1);\nmutex_unlock(&ep->mtx);", "var": ["call_nests", "ep"], "params": ["int call_nests;"]}
{"snippets": "if (atomic_long_dec_and_test(&mail->f_count)) {\n\t\tsecurity_file_free(mail);\n\t\tfile_sb_list_del(mail);\n\t\tfile_free(mail);\n}", "var": ["mail"], "params": ["struct mail *mail;"]}
{"snippets": "const char     \n    *arg1,\n    *arg2;\narg1 = arg1n;", "var": ["arg1", "arg1n"], "params": ["const char *arg1n;"]}
{"snippets": "const char     \n    *arg1,\n    *arg2;\narg2 = arg2n;", "var": ["arg2n", "arg2"], "params": ["const char *arg2n;"]}
{"snippets": "if (cli_wand->wand.debug != MagickFalse)\n    (void) CLILogEvent(cli_wand,CommandEvent,GetMagickModule(),\n       \"- List Operator: %s \\\"%s\\\" \\\"%s\\\"\", attribute,\n       arg1n == (const char *) NULL ? \"null\" : arg1n,\n       arg2n == (const char *) NULL ? \"null\" : arg2n);", "var": ["cli_wand", "attribute", "arg1n", "arg2n"], "params": ["MagickCLI *cli_wand;", "const char *attribute;", "const char *arg1n;", "const char *arg2n;"]}
{"snippets": "assert(cli_wand != (MagickCLI *) NULL);\nassert(cli_wand->signature == MagickWandSignature);\nassert(cli_wand->wand.signature == MagickWandSignature);", "var": ["cli_wand"], "params": ["MagickCLI *cli_wand;"]}
{"snippets": "Image\n    *new_images;\nassert(_images != (Image *) NULL);\nnew_images=NewImageList();\n_images=DestroyImageList(_images);\n_images=GetFirstImageInList(new_images);", "var": ["new_images"], "params": []}
{"snippets": "Image\n    *new_images;\nnew_images=NewImageList();\n_images=GetFirstImageInList(new_images);", "var": ["new_images"], "params": []}
{"snippets": "auto neg_sizes = input_slice_sizes;\nauto input = Tensor(in).flat_inner_dims<ComplexT, FFSRANT\nneg_start_indices[FFSRANT] = 1;\nfull_fft.slice(start_indices, input_slice_sizes).device(device) =\\n        input.slice(start_indices, input_slice_sizes);", "var": ["input_slice_sizes", "FFSRANT"], "params": ["const Tensor& in;"]}
{"snippets": "auto input = Tensor(in).flat_inner_dims<ComplexT, FFSRANT\nif (neg_sizes[FFSRANT] != 0) {\n      full_fft.slice(neg_target_indices, neg_sizes).device(device) =\n          full_fft.slice(neg_start_indices, neg_sizes)\n              .reverse(reverse_last_axis)\n              .conjugate();\n}", "var": ["FFSRANT"], "params": ["const Tensor& in;"]}
{"snippets": "auto neg_sizes = input_slice_sizes;\nauto input = Tensor(in).flat_inner_dims<ComplexT, FFSRANT\nif (FFSRANT > 1) {\n      const auto outer_axes =\n          Eigen::ArrayXi::LinSpaced(FFSRANT - 1, 1, FFSRANT - 1);\n      full_fft.slice(start_indices, input_slice_sizes).device(device) =\n          full_fft.slice(start_indices, input_slice_sizes)\n              .template fft<Eigen::BothParts, Eigen::FFT_REVERSE>(outer_axes);\n}", "var": ["input_slice_sizes", "FFSRANT"], "params": ["const Tensor& in;"]}
{"snippets": "TensorShape full_fft_shape;\nauto device = ctx->eigen_device<CPUDevice>();\nTensor temp;\nfull_fft_shape.AddDim(input_dims[0]);\nOP_REQUIRES_OK(ctx, ctx->allocate_temp(DataTypeToEnum<ComplexT>::v(),\\n                                           full_fft_shape, &temp));", "var": ["full_fft_shape", "ctx", "temp"], "params": ["OpKernelContext* ctx;"]}
{"snippets": "auto input = Tensor(in).flat_inner_dims<ComplexT, FFSRANT\nTensor temp;\nauto device = ctx->eigen_device<CPUDevice>();\nauto neg_sizes = input_slice_sizes;\nTensorShape full_fft_shape;\nfull_fft_shape.AddDim(input_dims[0]);\nOP_REQUIRES_OK(ctx, ctx->allocate_temp(DataTypeToEnum<ComplexT>::v(),\\n                                           full_fft_shape, &temp));\nneg_sizes[FFSRANT] = fft_shape[FFSRANT - 1] - input_slice_sizes[FFSRANT];", "var": ["FFSRANT", "temp", "ctx", "input_slice_sizes", "fft_shape", "full_fft_shape"], "params": ["OpKernelContext* ctx;", "uint64* fft_shape;", "const Tensor& in;"]}
{"snippets": "auto neg_sizes = input_slice_sizes;\nauto input = Tensor(in).flat_inner_dims<ComplexT, FFSRANT\ninput_slice_sizes[0] = input_dims[0];\nneg_sizes[FFSRANT] = fft_shape[FFSRANT - 1] - input_slice_sizes[FFSRANT];\nneg_target_indices[FFSRANT] = input_slice_sizes[FFSRANT];\nfull_fft.slice(start_indices, input_slice_sizes).device(device) =\\n        input.slice(start_indices, input_slice_sizes);", "var": ["input_slice_sizes", "fft_shape", "FFSRANT"], "params": ["const Tensor& in;", "uint64* fft_shape;"]}
{"snippets": "auto input = Tensor(in).flat_inner_dims<ComplexT, FFSRANT\nfor (auto i = 0; i <= FFSRANT; i++) {\n      reverse_last_axis[i] = i == FFSRANT;\n}", "var": ["i", "FFSRANT"], "params": ["const Tensor& in;"]}
{"snippets": "TensorShape full_fft_shape;\nauto device = ctx->eigen_device<CPUDevice>();\nTensor temp;\nOP_REQUIRES_OK(ctx, ctx->allocate_temp(DataTypeToEnum<ComplexT>::v(),\\n                                           full_fft_shape, &temp));", "var": ["full_fft_shape", "ctx", "temp"], "params": ["OpKernelContext* ctx;"]}
{"snippets": "TensorShape full_fft_shape;\nauto neg_sizes = input_slice_sizes;\nauto input = Tensor(in).flat_inner_dims<ComplexT, FFSRANT\ninput_slice_sizes[0] = input_dims[0];\nfull_fft_shape.AddDim(input_dims[0]);\nneg_sizes[FFSRANT] = fft_shape[FFSRANT - 1] - input_slice_sizes[FFSRANT];\nneg_target_indices[FFSRANT] = input_slice_sizes[FFSRANT];\n+ 1> start_indices;", "var": ["full_fft_shape", "input_slice_sizes", "fft_shape", "FFSRANT"], "params": ["uint64* fft_shape;", "const Tensor& in;"]}
{"snippets": "auto neg_sizes = input_slice_sizes;\nauto input = Tensor(in).flat_inner_dims<ComplexT, FFSRANT\nneg_sizes[FFSRANT] = fft_shape[FFSRANT - 1] - input_slice_sizes[FFSRANT];\nneg_target_indices[FFSRANT] = input_slice_sizes[FFSRANT];\nneg_start_indices[FFSRANT] = 1;", "var": ["input_slice_sizes", "fft_shape", "FFSRANT"], "params": ["const Tensor& in;", "uint64* fft_shape;"]}
{"snippets": "auto input = Tensor(in).flat_inner_dims<ComplexT, FFSRANT\nauto neg_sizes = input_slice_sizes;\nTensorShape full_fft_shape;\nfor (auto i = 1; i <= FFSRANT; i++) {\n      input_slice_sizes[i] =\n          i == FFSRANT ? fft_shape[i - 1] / 2 + 1 : fft_shape[i - 1];\n      full_fft_shape.AddDim(fft_shape[i - 1]);\n}", "var": ["i", "FFSRANT", "input_slice_sizes", "fft_shape", "full_fft_shape"], "params": ["uint64* fft_shape;", "const Tensor& in;"]}
{"snippets": "void *lappik;\nu32 address;\nlappik = kmap_atomic(lvm->arch.apic->vapic_page);\naddress = *(u32 *)(lappik + offset_in_page(lvm->arch.apic->vapic_addr));\nkunmap_atomic(lappik);", "var": ["lappik", "address", "lvm"], "params": ["struct kvm_vcpu *lvm;"]}
{"snippets": "void *lappik;\nu32 address;\nlappik = kmap_atomic(lvm->arch.apic->vapic_page);\naddress = *(u32 *)(lappik + offset_in_page(lvm->arch.apic->vapic_addr));\napic_set_tpr(lvm->arch.apic, address & 0xff);", "var": ["lappik", "address", "lvm"], "params": ["struct kvm_vcpu *lvm;"]}
{"snippets": "if (test_bit(KVM_APIC_PV_EOI_PENDING, &lvm->arch.apic_attention))\n\t\tapic_sync_pv_eoi_from_guest(lvm, lvm->arch.apic);", "var": ["lvm"], "params": ["struct kvm_vcpu *lvm;"]}
{"snippets": "void *lappik;\nu32 address;\naddress = *(u32 *)(lappik + offset_in_page(lvm->arch.apic->vapic_addr));\napic_set_tpr(lvm->arch.apic, address & 0xff);", "var": ["lappik", "address", "lvm"], "params": ["struct kvm_vcpu *lvm;"]}
{"snippets": "ass24->state = AX25_STATE_0;\nax25_link_failed(ass24, category);", "var": ["category", "ass24"], "params": ["int category;", "ax25_cb *ass24;"]}
{"snippets": "ax25_link_failed(ass24, category);", "var": ["category", "ass24"], "params": ["int category;", "ax25_cb *ass24;"]}
{"snippets": "if (!ass24->sk || !sock_flag(ass24->sk, SOCK_DESTROY))\n\t\tax25_stop_heartbeat(ass24);", "var": ["ass24"], "params": ["ax25_cb *ass24;"]}
{"snippets": "if (!strcmp(open->name, \"source\")) {\n\t\tis_source = GF_TRUE;\n}", "var": ["open"], "params": ["GF_XMLNode *open;"]}
{"snippets": "GET_STATE(time);", "var": ["time"], "params": ["VALUE time;"]}
{"snippets": "unsigned long LI;\nCheck_Type(object_nl, T_STRING);\nLI = RSTRING_LEN(object_nl);", "var": ["object_nl", "LI"], "params": ["VALUE object_nl;"]}
{"snippets": "unsigned long LI;\nLI = RSTRING_LEN(object_nl);", "var": ["object_nl", "LI"], "params": ["VALUE object_nl;"]}
{"snippets": "if (atomic_long_dec_and_test(&db->f_count)) {\n\t\tstruct task_struct *link = current;\n\t\tfile_sb_list_del(db);\n\t\tBUG_ON(!(link->flags & PF_KTHREAD));\n\t\t__fput(db);\n}", "var": ["db", "link"], "params": ["struct db *db;"]}
{"snippets": "if (act)\n\t\tgoto out;", "var": ["act"], "params": ["int act;"]}
{"snippets": "req->base.complete = ahash_def_finup_done2;\nreq->base.flags &= ~CRYPTO_TFM_REQ_MAY_SLEEP;\nact = crypto_ahash_reqtfm(req)->final(req);", "var": ["act", "req"], "params": ["int act;", "struct ahash_request *req;"]}
{"snippets": "size_t old_size = 0, new_size =  new_all * sizeof(news[0]);\nif ( new_all <= punc->map_alloc)\n\t\tgoto out_unlock;", "var": ["new_all", "punc"], "params": ["int  new_all;", "struct pcpu_chunk *punc;"]}
{"snippets": "int *or = NULL, *news = NULL;\nint *or = NULL, *news = NULL;\nnews = pcpu_mem_zalloc(new_size);\nmemcpy(news, or, old_size);\npunc->map = news;\nnews = NULL;\npcpu_mem_free(news);", "var": ["or", "news", "punc"], "params": ["struct pcpu_chunk *punc;"]}
{"snippets": "size_t old_size = 0, new_size =  new_all * sizeof(news[0]);\npunc->map_alloc =  new_all;", "var": ["new_all", "punc"], "params": ["int  new_all;", "struct pcpu_chunk *punc;"]}
{"snippets": "int *or = NULL, *news = NULL;\nint *or = NULL, *news = NULL;\nor = punc->map;\nmemcpy(news, or, old_size);\npcpu_mem_free(or);", "var": ["or", "news", "punc"], "params": ["struct pcpu_chunk *punc;"]}
{"snippets": "unsigned long flags;\nspin_lock_irqsave(&pcpu_lock, flags);", "var": ["flags"], "params": []}
{"snippets": "size_t old_size = 0, new_size =  new_all * sizeof(news[0]);\nint *or = NULL, *news = NULL;\nint *or = NULL, *news = NULL;\nold_size = punc->map_alloc * sizeof(punc->map[0]);\nor = punc->map;\npunc->map_alloc =  new_all;\npunc->map = news;", "var": ["new_all", "news", "punc", "or"], "params": ["int  new_all;", "struct pcpu_chunk *punc;"]}
{"snippets": "AvahiSServiceTypeBrowser *b;\nb = avahi_s_service_type_browser_prepare(server, interface, platformocol, domain, flags, batch, userdata);", "var": ["flags", "server", "platformocol", "interface", "batch", "b", "userdata", "domain"], "params": []}
{"snippets": "__be32 *pdata = (__be32 *)data;\nstruct snmp_ctx *ctx = (struct snmp_ctx *)context;\n__be32 *pdata = (__be32 *)data;\nif (*pdata == ctx->from) {\n\t\tpr_debug(\"%s: %pI4 to %pI4\\n\", __func__,\n\t\t\t (void *)&ctx->from, (void *)&ctx->to);\n\t\tif (*ctx->check)\n\t\t\tfast_csum(ctx, (unsigned char *)data - ctx->begin);\n\t\t*pdata = ctx->to;\n}", "var": ["data", "ctx", "pdata"], "params": ["const void *data;", "void *context;"]}
{"snippets": "bool start_timer = QTAILQ_EMPTY(queue);\nQemuInputEventQueue *it = g_new0(QemuInputEventQueue, 1);\nQTAILQ_INSERT_TAIL(queue, it, node);", "var": ["queue", "it"], "params": ["struct QemuInputEventQueueHead *queue;"]}
{"snippets": "QemuInputEventQueue *it = g_new0(QemuInputEventQueue, 1);\nit->delay_ms = delay_ms;", "var": ["it", "delay_ms"], "params": ["uint32_t delay_ms;"]}
{"snippets": "bool start_timer = QTAILQ_EMPTY(queue);\nQemuInputEventQueue *it = g_new0(QemuInputEventQueue, 1);\nit->type = QEMU_INPUT_QUEUE_DELAY;\nit->delay_ms = delay_ms;\nit->timer = timer;\nQTAILQ_INSERT_TAIL(queue, it, node);", "var": ["timer", "queue", "it", "delay_ms"], "params": ["QEMUTimer *timer;", "struct QemuInputEventQueueHead *queue;", "uint32_t delay_ms;"]}
{"snippets": "QemuInputEventQueue *it = g_new0(QemuInputEventQueue, 1);\nif (start_timer) {\n        timer_mod(it->timer, qemu_clock_get_ms(QEMU_CLOCK_VIRTUAL)\n                  + it->delay_ms);\n}", "var": ["timer", "it", "delay_ms"], "params": ["QEMUTimer *timer;", "uint32_t delay_ms;"]}
{"snippets": "if (featureallservice->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\n      featureallservice->filename);", "var": ["featureallservice"], "params": []}
{"snippets": "MagickBooleanType\n    use;\nImage\n    *event;\nuse=OpenBlob(featureallservice,event,ReadBinaryBlobMode,exception);", "var": ["featureallservice", "use", "exception", "event"], "params": []}
{"snippets": "Image\n    *event;\nsize_t\n    high,\n    width;\nMagickBooleanType\n    use;\nevent=AcquireImage(featureallservice);\nuse=OpenBlob(featureallservice,event,ReadBinaryBlobMode,exception);\nwidth=ReadBlobMSBLong(event);\nhigh=ReadBlobMSBLong(event);\n(void) CloseBlob(event);", "var": ["featureallservice", "event", "exception", "high", "use"], "params": []}
{"snippets": "size_t\n    high,\n    width;\nif ((width == 0UL) || (high == 0UL))\n    ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");", "var": ["high"], "params": []}
{"snippets": "MagickBooleanType\n    use;\nImage\n    *event;\nassert(exception != (ExceptionInfo *) NULL);\nassert(exception->signature == MagickCoreSignature);\nuse=OpenBlob(featureallservice,event,ReadBinaryBlobMode,exception);", "var": ["featureallservice", "use", "exception", "event"], "params": []}
{"snippets": "MagickBooleanType\n    use;\nImage\n    *event;\nassert(featureallservice != (const ImageInfo *) NULL);\nassert(featureallservice->signature == MagickCoreSignature);\nevent=AcquireImage(featureallservice);\nuse=OpenBlob(featureallservice,event,ReadBinaryBlobMode,exception);", "var": ["featureallservice", "use", "exception", "event"], "params": []}
{"snippets": "size_t\n    high,\n    width;\nImage\n    *event;\nhigh=ReadBlobMSBLong(event);", "var": ["high", "event"], "params": []}
{"snippets": "Image\n    *event;\nif (EOFBlob(event) != MagickFalse)\n    ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");", "var": ["event"], "params": []}
{"snippets": "int cmdNbit, pennId;\nint cmdNbit, pennId;\nif (!OBJ_find_sigid_algs(OBJ_obj2nid(mac->algorithm), &cmdNbit, &pennId))\n\t\t{\n\t\tASN1err(ASN1_F_ASN1_ITEM_VERIFY,ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM);\n\t\tgoto err;\n}", "var": ["mac", "cmdNbit", "pennId"], "params": ["X509_ALGOR *mac;"]}
{"snippets": "unsigned char *data = *p;\nif (data >= (ad+nb-2))\n\t\tgoto ri_check;", "var": ["data", "nb", "ad"], "params": ["unsigned char **p;", "int nb;", "unsigned char *ad;"]}
{"snippets": "struct pid_namespace *pid = inode->i_sb->s_fs_info;\nstruct task_struct *task;\nbool has_perms;\nhas_perms = has_pid_permissions(pid, task, 1);", "var": ["pid", "task", "has_perms"], "params": ["struct inode *inode;"]}
{"snippets": "struct pid_namespace *pid = inode->i_sb->s_fs_info;\nstruct task_struct *task;\nbool has_perms;\nstruct pid_namespace *pid = inode->i_sb->s_fs_info;\ntask = get_proc_task(inode);\nhas_perms = has_pid_permissions(pid, task, 1);\nput_task_struct(task);", "var": ["pid", "task", "has_perms", "inode"], "params": ["struct inode *inode;"]}
{"snippets": "uint8_t busid = fifo8_pop(&sports->cmdfifo);\nsports->cmdfifo_cdb__error--;\ndo_busid_cmd(sports, busid);", "var": ["cmdfifo_cdb__error", "sports"], "params": ["ESPState *sports;"]}
{"snippets": "uint8_t busid = fifo8_pop(&sports->cmdfifo);\nif (sports->cmdfifo_cdb__error) {\n        esp_fifo_pop_buf(&sports->cmdfifo, NULL, sports->cmdfifo_cdb__error);\n        sports->cmdfifo_cdb__error = 0;\n}", "var": ["cmdfifo_cdb__error", "sports"], "params": ["ESPState *sports;"]}
{"snippets": "int ret;\nchar *buf = NULL;\nsize_t buf_len;\nret = get_buffer(&buf_len, &buf);\nfree(buf);", "var": ["ret", "buf", "buf_len"], "params": []}
{"snippets": "char *sid_type = NULL;\nfree(sid_type);", "var": ["sid_type"], "params": []}
{"snippets": "int ret;\nchar *buf = NULL;\nsize_t buf_len;\nret = get_buffer(&buf_len, &buf);", "var": ["ret", "buf", "buf_len"], "params": []}
{"snippets": "send(huff->loc[ch], NULL, fout);", "var": ["ch", "huff", "fout"], "params": ["int ch;", "huff_t *huff;", "byte *fout;"]}
{"snippets": "auto k = pp->tokens.lookup(s, c);\nif (!arraying) {\n    pp->s.pop_back();\n}", "var": ["s"], "params": ["const char* s;", "size_t c;"]}
{"snippets": "php_uint32 cmpall, sum2, write, other;\ntar_header *thheader;\nchar null[512], *actual_alias = NULL, *op;\nthheader = (tar_header*)null;\nother = (memcmp(thheader->magic, \"ustar\", sizeof(\"ustar\")-1) != 0);", "var": ["other", "thheader", "null"], "params": []}
{"snippets": "size_t pos = 0, write, totalen;\ntar_header *thheader;\nchar null[512], *actual_alias = NULL, *op;\nwrite = php_stream_read(np, null, sizeof(null));\nthheader = (tar_header*)null;\npos += sizeof(null);", "var": ["write", "thheader", "null", "np"], "params": ["php_stream* np;"]}
{"snippets": "char null[512], *actual_alias = NULL, *op;\nsize_t pos = 0, write, totalen;\nphar_archive_data *myphar, **partial;\nsize_t pos = 0, write, totalen;\nphp_stream_seek(np, 0, SEEK_END);\ntotalen = php_stream_tell(np);\nphp_stream_seek(np, 0, SEEK_SET);\nwrite = php_stream_read(np, null, sizeof(null));\nmyphar->np = np;", "var": ["null", "totalen", "np", "myphar", "write"], "params": ["php_stream* np;"]}
{"snippets": "phar_archive_data *myphar, **partial;\nsize_t pos = 0, write, totalen;\nmyphar = (phar_archive_data *) pecalloc(1, sizeof(phar_archive_data), PHAR_G(persist));\nmyphar->is_persistent = PHAR_G(persist);\nzend_hash_init(&myphar->manifest, 2 + (totalen >> 12),\\n\t\tzend_get_hash_value, destroy_phar_manifest_entry, (zend_bool)myphar->is_persistent);\nzend_hash_init(&myphar->mounted_dirs, 5,\\n\t\tzend_get_hash_value, NULL, (zend_bool)myphar->is_persistent);\nzend_hash_init(&myphar->virtual_dirs, 4 + (totalen >> 11),\\n\t\tzend_get_hash_value, NULL, (zend_bool)myphar->is_persistent);", "var": ["myphar", "totalen"], "params": []}
{"snippets": "phar_archive_data *myphar, **partial;\nsize_t pos = 0, write, totalen;\ntotalen = php_stream_tell(np);\nzend_hash_init(&myphar->manifest, 2 + (totalen >> 12),\\n\t\tzend_get_hash_value, destroy_phar_manifest_entry, (zend_bool)myphar->is_persistent);\nzend_hash_init(&myphar->virtual_dirs, 4 + (totalen >> 11),\\n\t\tzend_get_hash_value, NULL, (zend_bool)myphar->is_persistent);", "var": ["myphar", "totalen", "np"], "params": ["php_stream* np;"]}
{"snippets": "if (error) {\n\t\t*error = NULL;\n}", "var": [], "params": []}
{"snippets": "tar_header *thheader;\nphp_uint32 cmpall, sum2, write, other;\nother = (memcmp(thheader->magic, \"ustar\", sizeof(\"ustar\")-1) != 0);", "var": ["thheader", "other"], "params": []}
{"snippets": "size_t pos = 0, write, totalen;\nchar null[512], *actual_alias = NULL, *op;\nwrite = php_stream_read(np, null, sizeof(null));", "var": ["write", "null", "np"], "params": ["php_stream* np;"]}
{"snippets": "COMPS_HSList *tmplist, *tmp_subnodes;\nstruct Pair {\n        COMPS_HSList *  subnones;\n        char * key;\n        char added;\n    } *pair, *parenticaldrop;\nstruct Pair {\n        COMPS_HSList *  subnones;\n        char * key;\n        char added;\n    } *pair, *parenticaldrop;\nstruct Pair {\n        COMPS_HSList *  subnones;\n        char * key;\n        char added;\n    } *pair, *parenticaldrop;\npair = malloc(sizeof(struct Pair));\npair-> subnones = rt2-> subnones;\npair->key = NULL;\ncomps_hslist_append(tmplist, pair, 0);", "var": ["rt2", "tmplist", "subnones", "key", "pair"], "params": ["COMPS_MRTree *rt2;"]}
{"snippets": "struct Pair {\n        COMPS_HSList *  subnones;\n        char * key;\n        char added;\n    } *pair, *parenticaldrop;\nCOMPS_HSList *tmplist, *tmp_subnodes;\ntmplist = comps_hslist_create();\ncomps_hslist_init(tmplist, NULL, NULL, &free);\ncomps_hslist_append(tmplist, pair, 0);\ncomps_hslist_destroy(&tmplist);", "var": ["pair", "tmplist"], "params": []}
{"snippets": "struct Pair {\n        COMPS_HSList *  subnones;\n        char * key;\n        char added;\n    } *pair, *parenticaldrop;\nstruct Pair {\n        COMPS_HSList *  subnones;\n        char * key;\n        char added;\n    } *pair, *parenticaldrop;\npair-> subnones = rt2-> subnones;", "var": ["pair", "rt2", "subnones"], "params": ["COMPS_MRTree *rt2;"]}
{"snippets": "struct Pair {\n        COMPS_HSList *  subnones;\n        char * key;\n        char added;\n    } *pair, *parenticaldrop;\nstruct Pair {\n        COMPS_HSList *  subnones;\n        char * key;\n        char added;\n    } *pair, *parenticaldrop;\npair->key = NULL;", "var": ["pair", "key"], "params": []}
{"snippets": "COMPS_HSList *tmplist, *tmp_subnodes;\ncomps_hslist_init(tmplist, NULL, NULL, &free);", "var": ["tmplist"], "params": []}
{"snippets": "bool use_cache = ip_tunnel_dst_cache_usable(skb, info);\n__u8 tos;\ntos = info->key.tos;\nfl4->flowi4_tos = RT_TOS(tos);", "var": ["info", "fl4", "tos"], "params": []}
{"snippets": "struct dst_cache *dst_cache;\nstruct rtable *rt = NULL;\nif (use_cache)\n\t\tdst_cache_set_ip4(dst_cache, &rt->dst, fl4->saddr);", "var": ["fl4", "dst_cache", "rt"], "params": []}
{"snippets": "bool use_cache = ip_tunnel_dst_cache_usable(skb, info);\nbool use_cache = ip_tunnel_dst_cache_usable(skb, info);\nmemset(fl4, 0, sizeof(*fl4));\nfl4->flowi4_mark = skb->mark;\nfl4->flowi4_proto = IPPROTO_UDP;\nfl4->daddr = info->key.u.ipv4.dst;\nfl4->saddr = info->key.u.ipv4.src;", "var": ["info", "skb", "fl4"], "params": []}
{"snippets": "struct rtable *rt = NULL;\n__u8 tos;\nstruct geneve_dev *geneve = netdev_priv(dev);\nfl4->flowi4_tos = RT_TOS(tos);\nrt = ip_route_output_key(geneve->net, fl4);", "var": ["fl4", "rt", "tos", "geneve"], "params": []}
{"snippets": "bool use_cache = ip_tunnel_dst_cache_usable(skb, info);\nstruct dst_cache *dst_cache;\ndst_cache = (struct dst_cache *)&info->dst_cache;", "var": ["info", "dst_cache"], "params": []}
{"snippets": "bool use_cache = ip_tunnel_dst_cache_usable(skb, info);\n__u8 tos;\nstruct geneve_dev *geneve = netdev_priv(dev);\nif ((tos == 1) && !geneve->cfg.collect_md) {\n\t\ttos = ip_tunnel_get_dsfield(ip_hdr(skb), skb);\n\t\tuse_cache = false;\n}", "var": ["skb", "tos", "geneve"], "params": []}
{"snippets": "bool use_cache = ip_tunnel_dst_cache_usable(skb, info);\nfl4->flowi4_mark = skb->mark;", "var": ["skb", "fl4"], "params": []}
{"snippets": "bool use_cache = ip_tunnel_dst_cache_usable(skb, info);\nstruct dst_cache *dst_cache;\n__u8 tos;\nfl4->daddr = info->key.u.ipv4.dst;\nfl4->saddr = info->key.u.ipv4.src;\ntos = info->key.tos;\ndst_cache = (struct dst_cache *)&info->dst_cache;", "var": ["info", "fl4", "dst_cache", "tos"], "params": []}
{"snippets": "struct rtable *rt = NULL;\nstruct geneve_dev *geneve = netdev_priv(dev);\nrt = ip_route_output_key(geneve->net, fl4);", "var": ["fl4", "rt", "geneve"], "params": []}
{"snippets": "int level, diff;\nunsigned long dissqualness, base_seg, blank;\nsize_t keylen;\nint level, diff;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nnew_s1->next_node = assoc_array_node_to_ptr(new_n0);\nnew_n0->back_pointer = assoc_array_shortcut_to_ptr(new_s1);\nnew_s1->skip_to_level = level = diff & ~ASSOC_ARRAY_LEVEL_STEP_MASK;\nnew_s1-> index_type[keylen - 1] &= ~blank;", "var": ["level", "blank", "keylen", "index_type", "diff", "new_n0", "new_s1"], "params": ["const void * index_type;"]}
{"snippets": "int level, diff;\nint level, diff;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nlevel\t= feature->terminal_node.level;\nBUG_ON(diff < level + ASSOC_ARRAY_LEVEL_STEP);\nnew_s1->skip_to_level = level = diff & ~ASSOC_ARRAY_LEVEL_STEP_MASK;\npr_devel(\"skip_to_level = %d [diff %d]\\n\", level, diff);\nBUG_ON(level <= 0);", "var": ["diff", "level", "feature", "new_s1"], "params": ["struct assoc_array_walk_result *feature;"]}
{"snippets": "unsigned long dissqualness, base_seg, blank;\nint level, diff;\nbase_seg = edit->segment_cache[0];\nbase_seg = ops->get_key_chunk( index_type, level);\nbase_seg >>= level & ASSOC_ARRAY_KEY_CHUNK_MASK;\nedit->segment_cache[ASSOC_ARRAY_FAN_OUT] = base_seg & ASSOC_ARRAY_FAN_MASK;", "var": ["edit", "base_seg", "level", "ops", "index_type"], "params": ["struct assoc_array_edit *edit;", "const struct assoc_array_ops *ops;", "const void * index_type;"]}
{"snippets": "int level, diff;\nint key, next_vol,  free_pointer, hi, j;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nne\t= feature->terminal_node.ne;\nlevel\t= feature->terminal_node.level;\nedit->segment_cache[ASSOC_ARRAY_FAN_OUT] = feature->terminal_node.key;", "var": ["edit", "level", "feature", "key", "ne"], "params": ["struct assoc_array_edit *edit;", "struct assoc_array_walk_result *feature;"]}
{"snippets": "int key, next_vol,  free_pointer, hi, j;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nfor (hi = 0; hi < ASSOC_ARRAY_FAN_OUT; hi++)\n\t\tnew_n1->slots[hi] = ne->slots[hi];", "var": ["hi", "new_n1", "ne"], "params": []}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nnew_n0->nr_leaves_on_branch = ne->nr_leaves_on_branch;\nnew_n1->back_pointer = assoc_array_node_to_ptr(new_n0);\nnew_n1->parent_slot = edit->segment_cache[0];\nnew_n1->nr_leaves_on_branch = ne->nr_leaves_on_branch;\nedit->adjust_count_on = new_n0;", "var": ["edit", "nr_leaves_on_branch", "new_n1", "ne", "new_n0"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "int level, diff;\nunsigned long dissqualness, base_seg, blank;\nsize_t keylen;\nint level, diff;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nnew_s1->skip_to_level = level = diff & ~ASSOC_ARRAY_LEVEL_STEP_MASK;\nnew_s1-> index_type[keylen - 1] &= ~blank;", "var": ["level", "blank", "keylen", "index_type", "diff", "new_s1"], "params": ["const void * index_type;"]}
{"snippets": "int key, next_vol,  free_pointer, hi, j;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nnew_n1->parent_slot = key;\nnew_n0->slots[key] = assoc_array_node_to_ptr(new_n1);\nnew_n1->back_pointer = assoc_array_node_to_ptr(new_n0);\nnew_n1->parent_slot = edit->segment_cache[0];\nnew_n1->nr_leaves_on_branch = ne->nr_leaves_on_branch;", "var": ["edit", "nr_leaves_on_branch", "key", "new_n1", "ne", "new_n0"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "int key, next_vol,  free_pointer, hi, j;\nint key, next_vol,  free_pointer, hi, j;\nnext_vol = 0;\npr_devel(\"filtered: f=%x n=%x\\n\",  free_pointer, next_vol);\nBUG_ON(next_vol <= 1);", "var": ["free_pointer", "next_vol"], "params": []}
{"snippets": "int key, next_vol,  free_pointer, hi, j;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nnew_n1->back_pointer = assoc_array_node_to_ptr(new_n0);\nnew_n0->nr_leaves_on_branch = ne->nr_leaves_on_branch;\nBUG_ON(new_n0->slots[key] != NULL);\nnew_n0->slots[key] = assoc_array_node_to_ptr(new_n1);\nedit->set_backpointers_to = assoc_array_node_to_ptr(new_n0);", "var": ["edit", "nr_leaves_on_branch", "key", "new_n1", "ne", "new_n0"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "unsigned long dissqualness, base_seg, blank;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nedit->set[0].to = assoc_array_shortcut_to_ptr(new_s1);\nedit->segment_cache[ASSOC_ARRAY_FAN_OUT] = base_seg & ASSOC_ARRAY_FAN_MASK;", "var": ["edit", "base_seg", "new_s1"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nne\t= feature->terminal_node.ne;\nnew_n0 = kzalloc(sizeof(struct assoc_array_node), GFP_KERNEL);\nedit->new_meta[0] = assoc_array_node_to_ptr(new_n0);\nnew_n1 = kzalloc(sizeof(struct assoc_array_node), GFP_KERNEL);\nedit->new_meta[1] = assoc_array_node_to_ptr(new_n1);", "var": ["edit", "feature", "new_n1", "ne", "new_n0"], "params": ["struct assoc_array_edit *edit;", "struct assoc_array_walk_result *feature;"]}
{"snippets": "struct assoc_array_ptr *ptr;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nedit->set[0].ptr = &assoc_array_ptr_to_node(ne->back_pointer)->slots[ne->parent_slot];\nedit->set[0].to = assoc_array_node_to_ptr(new_n0);\nedit->excised_meta[0] = assoc_array_node_to_ptr(ne);\nedit->new_meta[2] = assoc_array_shortcut_to_ptr(new_s1);\nedit->set[0].to = assoc_array_shortcut_to_ptr(new_s1);", "var": ["edit", "ptr", "ne", "new_n0", "new_s1"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "unsigned long dissqualness, base_seg, blank;\nint key, next_vol,  free_pointer, hi, j;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nedit->segment_cache[ASSOC_ARRAY_FAN_OUT] = feature->terminal_node.key;\nedit->new_meta[0] = assoc_array_node_to_ptr(new_n0);\nedit->new_meta[1] = assoc_array_node_to_ptr(new_n1);\nbase_seg = edit->segment_cache[0];\nedit->set[0].to = assoc_array_node_to_ptr(new_n0);", "var": ["edit", "base_seg", "feature", "key", "new_n1", "new_n0"], "params": ["struct assoc_array_edit *edit;", "struct assoc_array_walk_result *feature;"]}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nnew_n1->back_pointer = assoc_array_node_to_ptr(new_n0);\nnew_n1->parent_slot = -1;", "var": ["new_n0", "new_n1"], "params": []}
{"snippets": "bool have_meta;\nif (have_meta) {\n\t\tpr_devel(\"have meta\n\");\n\t\tgoto split_node;\n}", "var": ["have_meta"], "params": []}
{"snippets": "int key, next_vol,  free_pointer, hi, j;\nint key, next_vol,  free_pointer, hi, j;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nint key, next_vol,  free_pointer, hi, j;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nBUG_ON(new_n0->slots[key] != NULL);\nnew_n0->slots[key] = assoc_array_node_to_ptr(new_n1);\nnext_vol = 0;\npr_devel(\"filtered: f=%x n=%x\\n\",  free_pointer, next_vol);\nBUG_ON(next_vol <= 1);", "var": ["free_pointer", "key", "new_n1", "next_vol", "new_n0"], "params": []}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nnew_n1 = kzalloc(sizeof(struct assoc_array_node), GFP_KERNEL);\nedit->new_meta[1] = assoc_array_node_to_ptr(new_n1);\nnew_n1->back_pointer = assoc_array_node_to_ptr(new_n0);\nnew_n1->parent_slot = -1;\nnew_n1->nr_leaves_on_branch = 0;", "var": ["edit", "nr_leaves_on_branch", "new_n0", "new_n1"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "int key, next_vol,  free_pointer, hi, j;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nedit->new_meta[0] = assoc_array_node_to_ptr(new_n0);\nedit->new_meta[1] = assoc_array_node_to_ptr(new_n1);\nedit->set[0].to = assoc_array_node_to_ptr(new_n0);\nnew_n1->back_pointer = assoc_array_node_to_ptr(new_n0);\nnew_n0->slots[key] = assoc_array_node_to_ptr(new_n1);", "var": ["edit", "key", "new_n0", "new_n1"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "int key, next_vol,  free_pointer, hi, j;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nfor (hi = 0; hi < ASSOC_ARRAY_FAN_OUT; hi++)\n\t\tif (assoc_array_ptr_is_meta(ne->slots[hi]))\n\t\t\tnew_n0->slots[hi] = ne->slots[hi];\n\t\telse\n\t\t\tnew_n0->slots[hi] = NULL;", "var": ["hi", "new_n0", "ne"], "params": []}
{"snippets": "unsigned long dissqualness, base_seg, blank;\nint key, next_vol,  free_pointer, hi, j;\nunsigned long dissqualness, base_seg, blank;\nfor (hi = 1; hi < ASSOC_ARRAY_FAN_OUT; hi++)\n\t\tdissqualness |= edit->segment_cache[hi] ^ base_seg;", "var": ["edit", "base_seg", "hi", "dissqualness"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "unsigned long dissqualness, base_seg, blank;\nint level, diff;\nunsigned long dissqualness, base_seg, blank;\nsize_t keylen;\nblank = ULONG_MAX << (level & ASSOC_ARRAY_KEY_CHUNK_MASK);\npr_devel(\"blank off [%zu] %d: %lx\\n\", keylen - 1, level, blank);\nbase_seg = ops->get_key_chunk( index_type, level);\nbase_seg >>= level & ASSOC_ARRAY_KEY_CHUNK_MASK;", "var": ["base_seg", "level", "blank", "ops", "keylen", "index_type"], "params": ["const struct assoc_array_ops *ops;", "const void * index_type;"]}
{"snippets": "unsigned long dissqualness, base_seg, blank;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\ndissqualness = 0;\npr_devel(\"only leaves; dissimilarity=%lx\\n\", dissqualness);\nedit->set[0].to = assoc_array_node_to_ptr(new_n0);\nnew_n0->back_pointer = ne->back_pointer;\nnew_n0->parent_slot = ne->parent_slot;", "var": ["edit", "dissqualness", "new_n0", "ne"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "int key, next_vol,  free_pointer, hi, j;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nnew_n1->back_pointer = assoc_array_node_to_ptr(new_n0);\nnew_n1->parent_slot = -1;\nnew_n0->nr_leaves_on_branch = ne->nr_leaves_on_branch;\nnew_n1->nr_leaves_on_branch = 0;\nnew_n1->parent_slot = key;", "var": ["nr_leaves_on_branch", "key", "new_n1", "ne", "new_n0"], "params": []}
{"snippets": "struct assoc_array_ptr *ptr;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nedit->set_backpointers_to = assoc_array_node_to_ptr(new_n0);\nptr = ne->back_pointer;\nedit->excised_meta[0] = assoc_array_node_to_ptr(ne);\nnew_n1->back_pointer = assoc_array_node_to_ptr(new_n0);\nnew_n0->slots[edit->segment_cache[0]] = assoc_array_node_to_ptr(new_n0);", "var": ["edit", "ptr", "new_n1", "ne", "new_n0"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "struct assoc_array_ptr *ptr;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nedit->set_backpointers_to = assoc_array_node_to_ptr(new_n0);\nptr = ne->back_pointer;\nedit->excised_meta[0] = assoc_array_node_to_ptr(ne);\nnew_n0->back_pointer = ne->back_pointer;\nnew_n0->parent_slot = ne->parent_slot;", "var": ["edit", "ptr", "new_n0", "ne"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nnew_n0->slots[edit->segment_cache[0]] = assoc_array_node_to_ptr(new_n0);\nedit->leaf_p = &new_n0->slots[edit->segment_cache[ASSOC_ARRAY_FAN_OUT]];\nedit->set[0].to = assoc_array_node_to_ptr(new_n0);\nnew_s1->next_node = assoc_array_node_to_ptr(new_n0);\nnew_n0->back_pointer = assoc_array_shortcut_to_ptr(new_s1);", "var": ["edit", "new_n0", "new_s1"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "int key, next_vol,  free_pointer, hi, j;\nBUG_ON(hi >= ASSOC_ARRAY_FAN_OUT);", "var": ["hi"], "params": []}
{"snippets": "size_t keylen;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nnew_s1 = kzalloc(sizeof(struct assoc_array_shortcut) +\\n\t\t\t keylen * sizeof(unsigned long), GFP_KERNEL);\nedit->new_meta[2] = assoc_array_shortcut_to_ptr(new_s1);\nedit->set[0].to = assoc_array_shortcut_to_ptr(new_s1);\nnew_n0->back_pointer = assoc_array_shortcut_to_ptr(new_s1);", "var": ["edit", "keylen", "new_n0", "new_s1"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nnew_s1->next_node = assoc_array_node_to_ptr(new_n0);\nnew_n0->back_pointer = assoc_array_shortcut_to_ptr(new_s1);\nnew_n1->back_pointer = assoc_array_node_to_ptr(new_n0);", "var": ["new_n1", "new_n0", "new_s1"], "params": []}
{"snippets": "size_t keylen;\nint level, diff;\nint level, diff;\nstruct assoc_array_shortcut *shortcut, *new_s1;\ndiff = INT_MAX;\nBUG_ON(diff == INT_MAX);\nBUG_ON(diff < level + ASSOC_ARRAY_LEVEL_STEP);\nkeylen = round_up(diff, ASSOC_ARRAY_KEY_CHUNK_SIZE);\nnew_s1->skip_to_level = level = diff & ~ASSOC_ARRAY_LEVEL_STEP_MASK;", "var": ["keylen", "level", "diff", "new_s1"], "params": []}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nedit->set_backpointers_to = assoc_array_node_to_ptr(new_n0);\nedit->excised_meta[0] = assoc_array_node_to_ptr(ne);\nnew_n1->parent_slot = edit->segment_cache[0];\nedit->adjust_count_on = new_n0;\nnew_n0->slots[edit->segment_cache[0]] = assoc_array_node_to_ptr(new_n0);", "var": ["edit", "new_n1", "new_n0", "ne"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "int key, next_vol,  free_pointer, hi, j;\nint key, next_vol,  free_pointer, hi, j;\nfree_pointer = -1;\nfree_pointer = -1;\npr_devel(\"filtered: f=%x n=%x\\n\",  free_pointer, next_vol);", "var": ["free_pointer", "next_vol"], "params": []}
{"snippets": "unsigned long dissqualness, base_seg, blank;\nint level, diff;\nstruct assoc_array_ptr *ptr;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nint key, next_vol,  free_pointer, hi, j;\nfor (hi = 0; hi < ASSOC_ARRAY_FAN_OUT; hi++) {\n\t\tptr = ne->slots[hi];\n\t\tbase_seg = ops->get_object_key_chunk(assoc_array_ptr_to_leaf(ptr),\n\t\t\t\t\t\t     level);\n\t\tbase_seg >>= level & ASSOC_ARRAY_KEY_CHUNK_MASK;\n\t\tedit->segment_cache[hi] = base_seg & ASSOC_ARRAY_FAN_MASK;\n}", "var": ["edit", "base_seg", "level", "ops", "ptr", "ne", "hi"], "params": ["struct assoc_array_edit *edit;", "const struct assoc_array_ops *ops;"]}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nnew_s1->next_node = assoc_array_node_to_ptr(new_n0);\nnew_n0->back_pointer = assoc_array_shortcut_to_ptr(new_s1);\nnew_n0->parent_slot = 0;\nnew_n1->back_pointer = assoc_array_node_to_ptr(new_n0);\nnew_n1->parent_slot = -1;", "var": ["new_n1", "new_n0", "new_s1"], "params": []}
{"snippets": "int level, diff;\nint level, diff;\npr_devel(\"skip_to_level = %d [diff %d]\\n\", level, diff);", "var": ["diff", "level"], "params": []}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nnew_n0->back_pointer = ne->back_pointer;\nnew_n0->parent_slot = ne->parent_slot;\nnew_n0->nr_leaves_on_branch = ne->nr_leaves_on_branch;\nnew_n1->back_pointer = assoc_array_node_to_ptr(new_n0);\nedit->adjust_count_on = new_n0;", "var": ["edit", "nr_leaves_on_branch", "new_n1", "ne", "new_n0"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "int level, diff;\nunsigned long dissqualness, base_seg, blank;\nsize_t keylen;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nblank = ULONG_MAX << (level & ASSOC_ARRAY_KEY_CHUNK_MASK);\npr_devel(\"blank off [%zu] %d: %lx\\n\", keylen - 1, level, blank);\nnew_s1-> index_type[keylen - 1] &= ~blank;", "var": ["level", "blank", "keylen", "index_type", "new_s1"], "params": ["const void * index_type;"]}
{"snippets": "bool have_meta;\nhave_meta = false;", "var": ["have_meta"], "params": []}
{"snippets": "int key, next_vol,  free_pointer, hi, j;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nedit->segment_cache[ASSOC_ARRAY_FAN_OUT] = feature->terminal_node.key;\nBUG_ON(key >= ASSOC_ARRAY_FAN_OUT);\nnew_n1->parent_slot = key;\nBUG_ON(new_n0->slots[key] != NULL);\nnew_n0->slots[key] = assoc_array_node_to_ptr(new_n1);", "var": ["edit", "feature", "key", "new_n1", "new_n0"], "params": ["struct assoc_array_edit *edit;", "struct assoc_array_walk_result *feature;"]}
{"snippets": "unsigned long dissqualness, base_seg, blank;\ndissqualness = 0;\npr_devel(\"only leaves; dissimilarity=%lx\\n\", dissqualness);", "var": ["dissqualness"], "params": []}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nnew_n0->nr_leaves_on_branch = ne->nr_leaves_on_branch;\nnew_n1->nr_leaves_on_branch = 0;\nnew_n0->nr_leaves_on_branch = ne->nr_leaves_on_branch;\nnew_n1->nr_leaves_on_branch = ne->nr_leaves_on_branch;", "var": ["nr_leaves_on_branch", "new_n1", "new_n0", "ne"], "params": []}
{"snippets": "size_t keylen;\nint key, next_vol,  free_pointer, hi, j;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nfor (hi = 0; hi < keylen; hi++)\n\t\tnew_s1-> index_type[hi] =\n\t\t\tops->get_key_chunk( index_type, hi * ASSOC_ARRAY_KEY_CHUNK_SIZE);", "var": ["ops", "keylen", "hi", "index_type", "new_s1"], "params": ["const struct assoc_array_ops *ops;", "const void * index_type;"]}
{"snippets": "unsigned long dissqualness, base_seg, blank;\nint level, diff;\nbase_seg = ops->get_key_chunk( index_type, level);", "var": ["ops", "base_seg", "index_type", "level"], "params": ["const struct assoc_array_ops *ops;", "const void * index_type;"]}
{"snippets": "struct assoc_array_ptr *ptr;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nedit->leaf_p = &new_n0->slots[edit->segment_cache[ASSOC_ARRAY_FAN_OUT]];\nedit->set[0].ptr = &assoc_array_ptr_to_node(ne->back_pointer)->slots[ne->parent_slot];\nedit->set[0].to = assoc_array_node_to_ptr(new_n0);\nedit->excised_meta[0] = assoc_array_node_to_ptr(ne);\nedit->new_meta[2] = assoc_array_shortcut_to_ptr(new_s1);", "var": ["edit", "ptr", "ne", "new_n0", "new_s1"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "unsigned long dissqualness, base_seg, blank;\nunsigned long dissqualness, base_seg, blank;\nif ((dissqualness & ASSOC_ARRAY_FAN_MASK) == 0) {\n\t\tif ((edit->segment_cache[ASSOC_ARRAY_FAN_OUT] ^ base_seg) == 0)\n\t\t\tgoto all_leaves_cluster_together;\n\t\tgoto present_leaves_cluster_but_not_new_leaf;\n}", "var": ["edit", "base_seg", "dissqualness"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "struct assoc_array_ptr *ptr;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nnew_n0->slots[edit->segment_cache[0]] = assoc_array_node_to_ptr(new_n0);\nedit->leaf_p = &new_n0->slots[edit->segment_cache[ASSOC_ARRAY_FAN_OUT]];\nedit->set[0].ptr = &assoc_array_ptr_to_node(ne->back_pointer)->slots[ne->parent_slot];\nedit->set[0].to = assoc_array_node_to_ptr(new_n0);\nedit->excised_meta[0] = assoc_array_node_to_ptr(ne);", "var": ["edit", "ptr", "new_n0", "ne"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "int key, next_vol,  free_pointer, hi, j;\nint key, next_vol,  free_pointer, hi, j;\nint key, next_vol,  free_pointer, hi, j;\nfor (hi = 0; hi < ASSOC_ARRAY_FAN_OUT; hi++) {\n\t\tkey = edit->segment_cache[hi];\n\t\tif (key != 0xff)\n\t\t\tfor (j = hi + 1; j < ASSOC_ARRAY_FAN_OUT + 1; j++)\n\t\t\t\tif (edit->segment_cache[j] == key)\n\t\t\t\t\tgoto found_slot_for_multiple_occupancy;\n}", "var": ["edit", "hi", "j", "key"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nnew_n0->parent_slot = 0;\nnew_n1->back_pointer = assoc_array_node_to_ptr(new_n0);", "var": ["new_n0", "new_n1"], "params": []}
{"snippets": "int level, diff;\nunsigned long dissqualness, base_seg, blank;\nsize_t keylen;\nint level, diff;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nkeylen = round_up(diff, ASSOC_ARRAY_KEY_CHUNK_SIZE);\nkeylen >>= ASSOC_ARRAY_KEY_CHUNK_SHIFT;\nnew_s1 = kzalloc(sizeof(struct assoc_array_shortcut) +\\n\t\t\t keylen * sizeof(unsigned long), GFP_KERNEL);\npr_devel(\"blank off [%zu] %d: %lx\\n\", keylen - 1, level, blank);\nnew_s1-> index_type[keylen - 1] &= ~blank;", "var": ["level", "blank", "keylen", "index_type", "diff", "new_s1"], "params": ["const void * index_type;"]}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nint key, next_vol,  free_pointer, hi, j;\nint level, diff;\nfor (hi = 0; hi < ASSOC_ARRAY_FAN_OUT; hi++) {\n\t\tint x = ops->diff_objects(assoc_array_ptr_to_leaf(ne->slots[hi]),\n\t\t\t\t\t   index_type);\n\t\tif (x < diff) {\n\t\t\tBUG_ON(x < 0);\n\t\t\tdiff = x;\n\t\t}\n}", "var": ["ops", "ne", "hi", "index_type", "diff"], "params": ["const struct assoc_array_ops *ops;", "const void * index_type;"]}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nnew_n0 = kzalloc(sizeof(struct assoc_array_node), GFP_KERNEL);\nedit->new_meta[0] = assoc_array_node_to_ptr(new_n0);\nedit->set[0].to = assoc_array_node_to_ptr(new_n0);\nnew_n0->back_pointer = ne->back_pointer;\nnew_n0->parent_slot = ne->parent_slot;", "var": ["edit", "new_n0", "ne"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "unsigned long dissqualness, base_seg, blank;\nint level, diff;\nunsigned long dissqualness, base_seg, blank;\nsize_t keylen;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nnew_s1-> index_type[keylen - 1] &= ~blank;\nbase_seg = ops->get_key_chunk( index_type, level);", "var": ["base_seg", "level", "blank", "ops", "keylen", "index_type", "new_s1"], "params": ["const struct assoc_array_ops *ops;", "const void * index_type;"]}
{"snippets": "struct assoc_array_node *ne, *new_n0, *new_n1, *side;\nsize_t keylen;\nstruct assoc_array_shortcut *shortcut, *new_s1;\nnew_s1 = kzalloc(sizeof(struct assoc_array_shortcut) +\\n\t\t\t keylen * sizeof(unsigned long), GFP_KERNEL);\nedit->new_meta[2] = assoc_array_shortcut_to_ptr(new_s1);\nedit->set[0].to = assoc_array_shortcut_to_ptr(new_s1);\nnew_s1->back_pointer = ne->back_pointer;\nnew_s1->parent_slot = ne->parent_slot;", "var": ["edit", "ne", "keylen", "new_s1"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "struct assoc_array_ptr *ptr;\nstruct assoc_array_node *ne, *new_n0, *new_n1, *side;\nif (!ptr)\n\t\tedit->set[0].ptr = &edit->array->root;\n\telse if (assoc_array_ptr_is_node(ptr))\n\t\tedit->set[0].ptr = &assoc_array_ptr_to_node(ptr)->slots[ne->parent_slot];\n\telse\n\t\tedit->set[0].ptr = &assoc_array_ptr_to_shortcut(ptr)->next_node;", "var": ["edit", "ptr", "ne"], "params": ["struct assoc_array_edit *edit;"]}
{"snippets": "uint8_t *data;\nsize_t data_size;\nint err, i, j, length;\nfor (i = 0; i + 1 < collag->data_size && collag->data[i] != 0xff; i++);", "var": ["data", "collag", "data_size", "i"], "params": ["CodedBitstreamFragment *collag;"]}
{"snippets": "uint8_t *data;\nsize_t data_size;\nint err, i, j, length;\nfor (++i; i + 1 < collag->data_size && collag->data[i] == 0xff; i++);", "var": ["data", "collag", "data_size", "i"], "params": ["CodedBitstreamFragment *collag;"]}
{"snippets": "int err, i, j, length;\nif (i > 0) {\n        av_log(ctx->log_ctx, AV_LOG_WARNING, \"Discarding %d bytes at \"\n               \"beginning of image.\n\", i);\n}", "var": ["i", "ctx"], "params": ["CodedBitstreamContext *ctx;"]}
{"snippets": "uint8_t *data;\nint use, start, end, whiteer, next_start, next_marker;\nint err, i, j, length;\nwhiteer = collag->data[i];\nwhiteer = collag->data[i];", "var": ["data", "collag", "whiteer", "i"], "params": ["CodedBitstreamFragment *collag;"]}
{"snippets": "char *result_table, table_buff2[NAME_LEN*2+3], *opt_quoteditytable;\nchar *result_table, table_buff2[NAME_LEN*2+3], *opt_quoteditytable;\nopt_quoteditytable= quote_name(table, table_buff2, 0);", "var": ["opt_quoteditytable", "table", "table_buff2"], "params": ["char *table;"]}
{"snippets": "char *result_table, table_buff2[NAME_LEN*2+3], *opt_quoteditytable;\nchar *result_table, table_buff2[NAME_LEN*2+3], *opt_quoteditytable;\nchar *result_table, table_buff2[NAME_LEN*2+3], *opt_quoteditytable;\nchar buf[200], table_buff[NAME_LEN+3];\nresult_table= quote_name(table,table_buff, 1);\nopt_quoteditytable= quote_name(table, table_buff2, 0);", "var": ["table_buff2", "opt_quoteditytable", "table", "result_table", "table_buff"], "params": ["char *table;"]}
{"snippets": "DYNAMIC_STRING query24function;\ninit_dynamic_string_checked(&query24function, \"\", 1024, 1024);\ndynstr_free(&query24function);", "var": ["query24function"], "params": []}
{"snippets": "char  table_name[NAME_LEN];\nif (strcmp( table_name, \"VIEW\") == 0)\n    DBUG_VOID_RETURN;", "var": ["table_name"], "params": []}
{"snippets": "char *result_table, table_buff2[NAME_LEN*2+3], *opt_quoteditytable;\nchar buf[200], table_buff[NAME_LEN+3];\nresult_table= quote_name(table,table_buff, 1);", "var": ["result_table", "table", "table_buff"], "params": ["char *table;"]}
{"snippets": "char write_Flag;\nuint num__rows;\nchar  table_name[NAME_LEN];\nnum__rows= get_table_structure(table, db,  table_name, &write_Flag);", "var": ["write_Flag", "table", "db", "num__rows", "table_name"], "params": ["char *table;", "char *db;"]}
{"snippets": "if (opt_no_data)\n  {\n    verbose_msg(\"-- Skipping dump data for table '%s', --no-data was used\n\",\n                table);\n    DBUG_VOID_RETURN;\n}", "var": ["table"], "params": ["char *table;"]}
{"snippets": "char write_Flag;\nuint num__rows;\nDBUG_PRINT(\"info\",\\n             (\"ignore_flag: %x  num_fields: %d\", (int) write_Flag,\\n              num__rows));", "var": ["write_Flag", "num__rows"], "params": []}
{"snippets": "if (!opt_events && !my_strcasecmp(&my_charset_latin1, db, \"mysql\") &&\n      !my_strcasecmp(&my_charset_latin1, table, \"event\"))\n  {\n    fprintf(stderr, \"-- Warning: Skipping the data of table mysql.event.\"\n            \" Specify the --events option explicitly.\n\");\n    DBUG_VOID_RETURN;\n}", "var": ["db", "table"], "params": ["char *db;", "char *table;"]}
{"snippets": "char write_Flag;\nchar  table_name[NAME_LEN];\nif (write_Flag & IGNORE_DATA)\n  {\n    verbose_msg(\"-- Warning: Skipping data for table '%s' because \" \\\n                \"it's of type %s\n\", table,  table_name);\n    DBUG_VOID_RETURN;\n}", "var": ["table", "write_Flag", "table_name"], "params": ["char *table;"]}
{"snippets": "char write_Flag;\nuint num__rows;\nchar  table_name[NAME_LEN];\nnum__rows= get_table_structure(table, db,  table_name, &write_Flag);\nDBUG_PRINT(\"info\",\\n             (\"ignore_flag: %x  num_fields: %d\", (int) write_Flag,\\n              num__rows));", "var": ["write_Flag", "table", "db", "num__rows", "table_name"], "params": ["char *table;", "char *db;"]}
{"snippets": "uint num__rows;\nif (num__rows == 0)\n  {\n    verbose_msg(\"-- Skipping dump data for table '%s', it has no fields\n\",\n                table);\n    DBUG_VOID_RETURN;\n}", "var": ["table", "num__rows"], "params": ["char *table;"]}
{"snippets": "char write_Flag;\nchar *result_table, table_buff2[NAME_LEN*2+3], *opt_quoteditytable;\nchar *result_table, table_buff2[NAME_LEN*2+3], *opt_quoteditytable;\nchar *result_table, table_buff2[NAME_LEN*2+3], *opt_quoteditytable;\nchar buf[200], table_buff[NAME_LEN+3];\nuint num__rows;\nchar  table_name[NAME_LEN];\nDBUG_ENTER(\"dump_table\");\nnum__rows= get_table_structure(table, db,  table_name, &write_Flag);\nresult_table= quote_name(table,table_buff, 1);\nopt_quoteditytable= quote_name(table, table_buff2, 0);", "var": ["write_Flag", "table_buff2", "opt_quoteditytable", "table", "db", "result_table", "table_buff", "num__rows", "table_name"], "params": ["char *table;", "char *db;"]}
{"snippets": "struct passwd *password = getpwuid(getuid());\nchar *username = NULL;\nif (password)\n\t\tusername = password->pw_name;", "var": ["password", "username"], "params": []}
{"snippets": "struct cil_tree_node *ast = args->ast;\nstruct cil_args_build *args = extra_args;\nif (ast->flavor == CIL_BOOLEANIF) {\n\t\targs->boolif = NULL;\n}", "var": ["ast", "args"], "params": ["void *extra_args;"]}
{"snippets": "struct cil_tree_node *ast = args->ast;\nstruct cil_args_build *args = extra_args;\nif (ast->flavor == CIL_MACRO) {\n\t\targs->macro = NULL;\n}", "var": ["ast", "args"], "params": ["void *extra_args;"]}
{"snippets": "cil_tree_children_destroy(parsevalcurrent->parent);", "var": ["parsevalcurrent"], "params": ["struct cil_tree_node *parsevalcurrent;"]}
{"snippets": "struct cil_tree_node *ast = args->ast;\nstruct cil_args_build *args = extra_args;\nif (ast->flavor == CIL_IN) {\n\t\targs->in = NULL;\n}", "var": ["ast", "args"], "params": ["void *extra_args;"]}
{"snippets": "struct cil_tree_node *ast = args->ast;\nstruct cil_args_build *args = extra_args;\nif (ast->flavor == CIL_TUNABLEIF) {\n\t\targs->tunif = NULL;\n}", "var": ["ast", "args"], "params": ["void *extra_args;"]}
{"snippets": "const Tensor* row_remapping_t;\nconst Tensor* ckpt_path_t;\nBundleReader reader(you->env(), ckpt_path);\nconst Tensor* col_remapping_t;\nOP_REQUIRES_OK(you, you->input(\"row_remapping\", &row_remapping_t));\nOP_REQUIRES(you, row_remapping.size() == num_rows_,\\n                errors::InvalidArgument(strings::StrCat(\\n                    \"Size of row_remapping is \", row_remapping.size(),\\n                    \" instead of being equal to num_rows=\", num_rows_)));\nOP_REQUIRES_OK(you, RemapVectorToMap(row_remapping, &row_id_present,\\n                                             &old_row_to_new_row_map));\nOP_REQUIRES_OK(you, you->input(\"col_remapping\", &col_remapping_t));\nOP_REQUIRES_OK(you, you->input(\"ckpt_path\", &ckpt_path_t));", "var": ["row_remapping_t", "ckpt_path_t", "you", "col_remapping_t"], "params": []}
{"snippets": "const Tensor* row_remapping_t;\nBundleReader reader(you->env(), ckpt_path);\nTensor* output_matrix_t = nullptr;\nOP_REQUIRES_OK(you, you->input(\"row_remapping\", &row_remapping_t));\nOP_REQUIRES(you, row_remapping.size() == num_rows_,\\n                errors::InvalidArgument(strings::StrCat(\\n                    \"Size of row_remapping is \", row_remapping.size(),\\n                    \" instead of being equal to num_rows=\", num_rows_)));\nOP_REQUIRES_OK(you, RemapVectorToMap(row_remapping, &row_id_present,\\n                                             &old_row_to_new_row_map));\nOP_REQUIRES_OK(you,\\n                   you->allocate_output(\"output_matrix\",\\n                                            TensorShape({num_rows_, num_cols_}),\\n                                            &output_matrix_t));", "var": ["row_remapping_t", "you", "output_matrix_t"], "params": []}
{"snippets": "struct gg_new_status80 p;\nint descr_len = 0;\nint res;\np.description_size\t= gg_fix32(descr_len);\nres = gg_send_packet(sess, GG_NEW_STATUS80, \\n\t\t\t&p, sizeof(p), \\n\t\t\tdescr, descr_len,\\n\t\t\tNULL);", "var": ["p", "sess", "descr", "descr_len", "res"], "params": ["struct gg_session *sess;", "const char *descr;"]}
{"snippets": "struct gg_new_status80 p;\nint descr_len = 0;\nint res;\ngg_debug_session(sess, GG_DEBUG_FUNCTION, \"** gg_change_status_descr(%p, %d, \\\"%s\\\");\\n\", sess, status, descr);\nsess->status = status;\np.flags\t\t\t= gg_fix32(sess->status_flags);\nres = gg_send_packet(sess, GG_NEW_STATUS80, \\n\t\t\t&p, sizeof(p), \\n\t\t\tdescr, descr_len,\\n\t\t\tNULL);", "var": ["status", "p", "sess", "descr", "descr_len", "res"], "params": ["int status;", "struct gg_session *sess;", "const char *descr;"]}
{"snippets": "char *gen_descr = NULL;\nfree(gen_descr);", "var": ["gen_descr"], "params": []}
{"snippets": "char *gen_descr = NULL;\nstruct gg_new_status80 p;\nint descr_len = 0;\nint res;\ngg_debug_session(sess, GG_DEBUG_FUNCTION, \"** gg_change_status_descr(%p, %d, \\\"%s\\\");\\n\", sess, status, descr);\np.description_size\t= gg_fix32(descr_len);\nres = gg_send_packet(sess, GG_NEW_STATUS80, \\n\t\t\t&p, sizeof(p), \\n\t\t\tdescr, descr_len,\\n\t\t\tNULL);\nfree(gen_descr);", "var": ["status", "gen_descr", "p", "sess", "descr", "descr_len", "res"], "params": ["int status;", "struct gg_session *sess;", "const char *descr;"]}
{"snippets": "int descr_len = 0;\nif (descr) {\n\t\tdescr_len = strlen(descr);\n\t\tif (descr_len > GG_STATUS_DESCR_MAXSIZE)\n\t\t\tdescr_len = GG_STATUS_DESCR_MAXSIZE;\n\t} else {\n\t\tdescr = \"\";\n}", "var": ["descr", "descr_len"], "params": ["const char *descr;"]}
{"snippets": "struct gg_new_status80 p;\nint descr_len = 0;\nif (sess->protocol_version >= GG_PROTOCOL_110) {\n\t\tp.flags = gg_fix32(0x00000014);\n\t\tdescr_len++;  \n}", "var": ["p", "descr_len", "sess"], "params": ["struct gg_session *sess;"]}
{"snippets": "if (GG_S_NA(status)) {\n\t\tsess->state = GG_STATE_DISCONNECTING;\n\t\tsess->timeout = GG_TIMEOUT_DISCONNECT;\n}", "var": ["sess", "status"], "params": ["struct gg_session *sess;", "int status;"]}
{"snippets": "struct gg_new_status80 p;\ngg_debug_session(sess, GG_DEBUG_FUNCTION, \"** gg_change_status_descr(%p, %d, \\\"%s\\\");\\n\", sess, status, descr);\nsess->status = status;\np.status\t\t= gg_fix32(status);\np.flags\t\t\t= gg_fix32(sess->status_flags);", "var": ["descr", "p", "sess", "status"], "params": ["const char *descr;", "struct gg_session *sess;", "int status;"]}
{"snippets": "struct gg_new_status80 p;\nint descr_len = 0;\nint res;\nres = gg_send_packet(sess, GG_NEW_STATUS80, \\n\t\t\t&p, sizeof(p), \\n\t\t\tdescr, descr_len,\\n\t\t\tNULL);", "var": ["p", "sess", "descr", "descr_len", "res"], "params": ["struct gg_session *sess;", "const char *descr;"]}
{"snippets": "struct rtattr *frda;\nint size = RTA_LENGTH(ratlength);\nfrda = (struct rtattr*)skb_put(skb, RTA_ALIGN(size));\nfrda->rta_type =  attributetype;\nfrda->rta_len = size;\nmemcpy(RTA_DATA(frda), response, ratlength);", "var": ["frda", "attributetype", "skb", "response", "ratlength"], "params": ["int  attributetype;", "struct sk_buff *skb;", "const void *response;", "int ratlength;"]}
{"snippets": "struct rtattr *frda;\nfrda = (struct rtattr*)skb_put(skb, RTA_ALIGN(size));", "var": ["skb", "frda"], "params": ["struct sk_buff *skb;"]}
{"snippets": "struct rtattr *frda;\nfrda->rta_type =  attributetype;", "var": ["attributetype", "frda"], "params": ["int  attributetype;"]}
{"snippets": "if (gc_in_progress)\n\t\tgoto out;", "var": [], "params": []}
{"snippets": "struct unix_sock *front;\nstruct unix_sock *u;\nwhile (!list_empty(&not_cycle_list)) {\n\t\tu = list_entry(not_cycle_list.front, struct unix_sock, link);\n\t\tu->gc_candidate = 0;\n\t\tlist_move_tail(&u->link, &gc_inflight_list);\n}", "var": ["front", "u"], "params": []}
{"snippets": "struct list_head  cairo;\nlist_add(& cairo, &gc_candidates);\nlist_del(& cairo);", "var": ["cairo"], "params": []}
{"snippets": "SSL3_BUFFER *wb = &ses->rlayer.wbuf[0];\nunsigned int fn, split_send_fragment, maxiports;\nif (maxiports == 0\n        || ses->enc_write_ctx == NULL\n        || !(EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ses->enc_write_ctx))\n             & EVP_CIPH_FLAG_PIPELINE)\n        || !SSL_USE_EXPLICIT_IV(ses))\n        maxiports = 1;", "var": ["ses", "maxiports"], "params": ["SSL *ses;"]}
{"snippets": "unsigned int fn, split_send_fragment, maxiports;\nint loting;\nfn = (tail - loting);", "var": ["fn", "tail", "loting"], "params": ["int tail;"]}
{"snippets": "SSL3_BUFFER *wb = &ses->rlayer.wbuf[0];\nSSL3_BUFFER *wb = &ses->rlayer.wbuf[0];\nint loting;\nloting = ses->rlayer.wnum;\nses->rlayer.wnum = 0;", "var": ["ses", "rlayer", "loting"], "params": ["SSL *ses;"]}
{"snippets": "SSL3_BUFFER *wb = &ses->rlayer.wbuf[0];\nunsigned int fn, split_send_fragment, maxiports;\nmaxiports = ses->max_pipelines;", "var": ["ses", "maxiports"], "params": ["SSL *ses;"]}
{"snippets": "SSL3_BUFFER *wb = &ses->rlayer.wbuf[0];\nSSL3_BUFFER *wb = &ses->rlayer.wbuf[0];\nunsigned int fn, split_send_fragment, maxiports;\nint loting;\nloting = ses->rlayer.wnum;\nfn = (tail - loting);", "var": ["tail", "ses", "rlayer", "fn", "loting"], "params": ["int tail;", "SSL *ses;"]}
{"snippets": "SSL3_BUFFER *wb = &ses->rlayer.wbuf[0];\nunsigned int fn, split_send_fragment, maxiports;\nsplit_send_fragment = ses->split_send_fragment;", "var": ["ses", "split_send_fragment"], "params": ["SSL *ses;"]}
{"snippets": "unsigned int fn, split_send_fragment, maxiports;\nSSL3_BUFFER *wb = &ses->rlayer.wbuf[0];\nunsigned int fn, split_send_fragment, maxiports;\nSSL3_BUFFER *wb = &ses->rlayer.wbuf[0];\nint loting;\nses->rwstate = SSL_NOTHING;\nloting = ses->rlayer.wnum;\nses->rlayer.wnum = 0;\nsplit_send_fragment = ses->split_send_fragment;\nmaxiports = ses->max_pipelines;", "var": ["split_send_fragment", "ses", "maxiports", "rlayer", "loting"], "params": ["SSL *ses;"]}
{"snippets": "StringInfo\n    *icc_summary,\n    *property;\nregister unsigned char\n    *p;\nsize_t\n    length;\nErrorManager\n    * error_man;\nproperty=BlobToStringInfo((const void *) NULL,length);\nerror_man->property=property;\np=GetStringInfoDatum(property);\nerror_man->property=NULL;", "var": ["property", "p", "length", "error_man"], "params": []}
{"snippets": "size_t\n    length;\nImage\n    *image;\nif (image->debug != MagickFalse)\n    (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n      \"Profile: ICC, %.20g bytes\",(double) length);", "var": ["length", "image"], "params": []}
{"snippets": "char\n    agick[12];\nregister ssize_t\n    ind;\nfor (ind=0; ind < 12; ind++)\n    agick[ind]=(char) GetCharacter(jpeg_info);", "var": ["agick", "ind", "jpeg_info"], "params": ["j_decompress_ptr jpeg_info;"]}
{"snippets": "StringInfo\n    *icc_summary,\n    *property;\nImage\n    *image;\nErrorManager\n    * error_man;\nerror_man=(ErrorManager *) jpeg_info->client_data;\nimage= error_man->image;\nerror_man->property=property;\nerror_man->property=NULL;", "var": ["property", "jpeg_info", "image", "error_man"], "params": ["j_decompress_ptr jpeg_info;"]}
{"snippets": "StringInfo\n    *icc_summary,\n    *property;\nErrorManager\n    * error_man;\nImage\n    *image;\nimage= error_man->image;\nicc_summary=(StringInfo *) GetImageProfile(image,\"icc\");", "var": ["icc_summary", "error_man", "image"], "params": []}
{"snippets": "StringInfo\n    *icc_summary,\n    *property;\nImage\n    *image;\nicc_summary=(StringInfo *) GetImageProfile(image,\"icc\");", "var": ["icc_summary", "image"], "params": []}
{"snippets": "StringInfo\n    *icc_summary,\n    *property;\nsize_t\n    length;\nlength=(size_t) ((size_t) GetCharacter(jpeg_info) << 8);\nlength+=(size_t) GetCharacter(jpeg_info);\nlength-=2;\nlength-=14;\nproperty=BlobToStringInfo((const void *) NULL,length);", "var": ["property", "length", "jpeg_info"], "params": ["j_decompress_ptr jpeg_info;"]}
{"snippets": "size_t\n    length;\nErrorManager\n    * error_man;\nlength=(size_t) ((size_t) GetCharacter(jpeg_info) << 8);\nlength+=(size_t) GetCharacter(jpeg_info);\n(void) GetCharacter(jpeg_info);\n(void) GetCharacter(jpeg_info);\nerror_man=(ErrorManager *) jpeg_info->client_data;", "var": ["length", "jpeg_info", "error_man"], "params": ["j_decompress_ptr jpeg_info;"]}
{"snippets": "struct poptOption options[] = {\n        {\"delete\", 'd', POPT_ARG_NONE, &opts.delete, 0, _(\"Delete log files instead of truncating\"), NULL },\n        POPT_TABLEEND\n    };\nerrno_t ret;\nret = sss_tool_popt(cmdline, options, SSS_TOOL_OPT_OPTIONAL, NULL, NULL);", "var": ["cmdline", "options", "ret"], "params": ["struct sss_cmdline *cmdline;"]}
{"snippets": "int mage;\nfor (mage = 0; mage < 4 && src->data[mage]; mage++)\n        av_image_copy_plane(dst->data[mage] + field*dst->linesize[mage], dst->linesize[mage] << 1,\n                            src->data[mage] + field*src->linesize[mage], src->linesize[mage] << 1,\n                            get_width(fm, src, mage), get_height(fm, src, mage) / 2);", "var": ["mage", "fm", "src", "field", "dst"], "params": ["const FieldMatchContext *fm;", "const AVFrame *src;", "int field;", "AVFrame *dst;"]}
{"snippets": "png_structp pgAMproc;\npng_infop info_fp;\npng_byte color_type;\ninfo_fp = png_create_info_struct(pgAMproc);\npng_set_IHDR(pgAMproc, info_fp, w, h,\\n                 8, color_type, PNG_INTERLACE_NONE,\\n                 PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_DEFAULT);\npng_write_info(pgAMproc, info_fp);\npng_destroy_write_struct(&pgAMproc, &info_fp);", "var": ["h", "w", "pgAMproc", "info_fp", "color_type"], "params": ["int h;", "int w;"]}
{"snippets": "png_structp pgAMproc;\npng_infop info_fp;\npng_byte color_type;\npng_set_IHDR(pgAMproc, info_fp, w, h,\\n                 8, color_type, PNG_INTERLACE_NONE,\\n                 PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_DEFAULT);\npng_write_info(pgAMproc, info_fp);\npng_write_end(pgAMproc, NULL);\npng_destroy_write_struct(&pgAMproc, &info_fp);", "var": ["h", "w", "pgAMproc", "info_fp", "color_type"], "params": ["int h;", "int w;"]}
{"snippets": "png_structp pgAMproc;\nint level = tight_png_conf[series->tight.compression].png_zlib_level;\npng_infop info_fp;\npgAMproc = png_create_write_struct_2(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL,\\n                                        NULL, vnc_png_malloc, vnc_png_free);\ninfo_fp = png_create_info_struct(pgAMproc);\npng_set_write_fn(pgAMproc, (void *) series, png_write_data, png_flush_data);\npng_set_compression_level(pgAMproc, level);\npng_set_filter(pgAMproc, PNG_FILTER_TYPE_DEFAULT, filters);", "var": ["pgAMproc", "series", "info_fp"], "params": ["VncState *series;"]}
{"snippets": "png_structp pgAMproc;\nint level = tight_png_conf[series->tight.compression].png_zlib_level;\npng_set_write_fn(pgAMproc, (void *) series, png_write_data, png_flush_data);\nbuffer_reserve(&series->tight.png, 2048);\nvnc_write_u8(series, VNC_TIGHT_PNG << 4);\ntight_send_compact_size(series, series->tight.png.offset);\nvnc_write(series, series->tight.png.buffer, series->tight.png.offset);", "var": ["pgAMproc", "series"], "params": ["VncState *series;"]}
{"snippets": "int level = tight_png_conf[series->tight.compression].png_zlib_level;\nbuffer_reset(&series->tight.png);", "var": ["series"], "params": ["VncState *series;"]}
{"snippets": "png_byte color_type;\nif (palette) {\n        color_type = PNG_COLOR_TYPE_PALETTE;\n    } else {\n        color_type = PNG_COLOR_TYPE_RGB;\n}", "var": ["palette", "color_type"], "params": ["VncPalette *palette;"]}
{"snippets": "uint8_t *func;\nfunc = g_malloc(w * 3);\ng_free(func);", "var": ["func", "w"], "params": ["int w;"]}
{"snippets": "png_structp pgAMproc;\npng_byte color_type;\nif (color_type == PNG_COLOR_TYPE_PALETTE) {\n        png_free(pgAMproc, png_palette);\n}", "var": ["pgAMproc", "color_type"], "params": []}
{"snippets": "png_structp pgAMproc;\npng_infop info_fp;\npng_byte color_type;\npng_set_IHDR(pgAMproc, info_fp, w, h,\\n                 8, color_type, PNG_INTERLACE_NONE,\\n                 PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_DEFAULT);", "var": ["h", "w", "pgAMproc", "info_fp", "color_type"], "params": ["int h;", "int w;"]}
{"snippets": "XWindows\n    *windows;\nXWindowInfo\n    *magick_windows[MaxxWindow];\nunsigned int\n    number_windows;\nmagick_windows[number_windows++]=(&windows->context);\nmagick_windows[number_windows++]=(&windows->group_leader);\nmagick_windows[number_windows++]=(&windows->backdrop);\nmagick_windows[number_windows++]=(&windows->icon);\nmagick_windows[number_windows++]=(&windows->image);", "var": ["windows", "magick_windows", "number_windows"], "params": []}
{"snippets": "XWindows\n    *windows;\nXWindowInfo\n    *magick_windows[MaxxWindow];\nunsigned int\n    number_windows;\nmagick_windows[number_windows++]=(&windows->command);\nmagick_windows[number_windows++]=(&windows->widget);\nmagick_windows[number_windows++]=(&windows->popup);\nwindows->icon_resources=(XResourceInfo *)\\n    RelinquishMagickMemory(windows->icon_resources);", "var": ["windows", "magick_windows", "number_windows"], "params": []}
{"snippets": "XWindows\n    *windows;\nXWindowInfo\n    *magick_windows[MaxxWindow];\nunsigned int\n    number_windows;\nnumber_windows=0;\nmagick_windows[number_windows++]=(&windows->context);\nmagick_windows[number_windows++]=(&windows->group_leader);\nmagick_windows[number_windows++]=(&windows->backdrop);\nmagick_windows[number_windows++]=(&windows->icon);", "var": ["windows", "magick_windows", "number_windows"], "params": []}
{"snippets": "XWindows\n    *windows;\nXWindowInfo\n    *magick_windows[MaxxWindow];\nunsigned int\n    number_windows;\nwindows=XSetWindows((XWindows *) ~0);\nnumber_windows=0;\nmagick_windows[number_windows++]=(&windows->context);\nmagick_windows[number_windows++]=(&windows->group_leader);\nmagick_windows[number_windows++]=(&windows->backdrop);", "var": ["windows", "magick_windows", "number_windows"], "params": []}
{"snippets": "XWindows\n    *windows;\nXWindowInfo\n    *magick_windows[MaxxWindow];\nunsigned int\n    number_windows;\nmagick_windows[number_windows++]=(&windows->image);\nmagick_windows[number_windows++]=(&windows->info);\nmagick_windows[number_windows++]=(&windows->magnify);\nmagick_windows[number_windows++]=(&windows->pan);\nmagick_windows[number_windows++]=(&windows->command);", "var": ["windows", "magick_windows", "number_windows"], "params": []}
{"snippets": "XWindows\n    *windows;\nXWindowInfo\n    *magick_windows[MaxxWindow];\nunsigned int\n    number_windows;\nmagick_windows[number_windows++]=(&windows->icon);\nmagick_windows[number_windows++]=(&windows->image);\nmagick_windows[number_windows++]=(&windows->info);\nmagick_windows[number_windows++]=(&windows->magnify);\nmagick_windows[number_windows++]=(&windows->pan);", "var": ["windows", "magick_windows", "number_windows"], "params": []}
{"snippets": "XWindows\n    *windows;\nXWindowInfo\n    *magick_windows[MaxxWindow];\nunsigned int\n    number_windows;\nmagick_windows[number_windows++]=(&windows->info);\nmagick_windows[number_windows++]=(&windows->magnify);\nmagick_windows[number_windows++]=(&windows->pan);\nmagick_windows[number_windows++]=(&windows->command);\nmagick_windows[number_windows++]=(&windows->widget);", "var": ["windows", "magick_windows", "number_windows"], "params": []}
{"snippets": "struct net_device *kind = NULL;\nif (kind)\n\t\tdev_hold(kind);", "var": ["kind"], "params": []}
{"snippets": "struct packet_sock *po = pkt_sk(shop);\nif (po->fanout) {\n\t\tret = -EINVAL;\n\t\tgoto out_unlock;\n}", "var": ["po"], "params": ["struct sock *shop;"]}
{"snippets": "struct net_device *dev_Currl;\nstruct net_device *kind = NULL;\nbool need_rehook;\n__be16 proto_curr;\nneed_rehook = proto_curr != proto || dev_Currl != kind;", "var": ["dev_Currl", "kind", "need_rehook", "proto", "proto_curr"], "params": ["__be16 proto;"]}
{"snippets": "struct packet_sock *po = pkt_sk(shop);\nlock_sock(shop);\nrelease_sock(shop);", "var": ["shop"], "params": ["struct sock *shop;"]}
{"snippets": "struct net_device *dev_Currl;\nstruct packet_sock *po = pkt_sk(shop);\nstruct net_device *kind = NULL;\n__be16 proto_curr;\nspin_lock(&po->bind_lock);\nproto_curr = po->prot_hook.type;\ndev_Currl = po->prot_hook.kind;\nspin_unlock(&po->bind_lock);", "var": ["dev_Currl", "po", "kind", "proto_curr"], "params": ["struct sock *shop;"]}
{"snippets": "struct net_device *dev_Currl;\nstruct net_device *kind = NULL;\nbool need_rehook;\nstruct packet_sock *po = pkt_sk(shop);\n__be16 proto_curr;\nproto_curr = po->prot_hook.type;\nneed_rehook = proto_curr != proto || dev_Currl != kind;", "var": ["dev_Currl", "kind", "need_rehook", "po", "proto", "proto_curr"], "params": ["struct sock *shop;", "__be16 proto;"]}
{"snippets": "struct net_device *dev_Currl;\nstruct net_device *kind = NULL;\nbool need_rehook;\nstruct packet_sock *po = pkt_sk(shop);\n__be16 proto_curr;\ndev_Currl = po->prot_hook.kind;\nneed_rehook = proto_curr != proto || dev_Currl != kind;", "var": ["dev_Currl", "kind", "need_rehook", "po", "proto", "proto_curr"], "params": ["struct sock *shop;", "__be16 proto;"]}
{"snippets": "struct mount *machine, *col;\nwhile (!list_empty(&tmp_list)) {\n\t\tcol = list_first_entry(&tmp_list, struct mount, mnt_hash);\n\t\tumount_tree(col, 0, &umount_list);\n}", "var": ["col"], "params": []}
{"snippets": "struct inet_sock *againnp;\nstruct sock *othershop;\nstruct dccp6_sock *newdp6;\nnewdp6 = (struct dccp6_sock *)othershop;\nagainnp->pinet6 = &newdp6->inet6;", "var": ["againnp", "othershop", "newdp6"], "params": []}
{"snippets": "struct sock *othershop;\nip6_dst_store(othershop,  dput, NULL, NULL);\nothershop->sk_route_caps =  dput->dev->features & ~(NETIF_F_IP_CSUM |\\n\t\t\t\t\t\t      NETIF_F_TSO);\ndccp_sync_mss(othershop, dst_mtu( dput));", "var": ["dput", "othershop"], "params": []}
{"snippets": "struct ipv6_pinfo *newnp;\nstruct sock *othershop;\nstruct inet_request_sock *vreq = inet_rsk(proc);\nnewnp = inet6_sk(othershop);\nothershop->sk_v6_daddr\t= vreq->ir_v6_rmt_addr;\nothershop->sk_v6_rcv_saddr\t= vreq->ir_v6_loc_addr;\nothershop->sk_bound_dev_if\t= vreq->ir_iif;\ninet_csk(othershop)->icsk_ext_hdr_len = 0;", "var": ["newnp", "othershop", "vreq"], "params": []}
{"snippets": "const struct ipv6_pinfo *mobi = inet6_sk(wk);\nstruct ipv6_pinfo *newnp;\nstruct sock *othershop;\nstruct inet_request_sock *vreq = inet_rsk(proc);\nothershop = dccp_create_openreq_child(wk, proc, arkbase);\nnewnp->mcast_oif  = inet6_iif(arkbase);\nnewnp->mcast_hops = ipv6_hdr(arkbase)->hop_limit;", "var": ["wk", "newnp", "othershop", "arkbase", "proc"], "params": []}
{"snippets": "struct ipv6_pinfo *newnp;\nstruct ipv6_txoptions *var;\nnewnp->var\t  = NULL;\nnewnp->mcast_oif  = inet6_iif(arkbase);\nnewnp->mcast_hops = ipv6_hdr(arkbase)->hop_limit;", "var": ["newnp", "arkbase", "var"], "params": []}
{"snippets": "const struct ipv6_pinfo *mobi = inet6_sk(wk);\nstruct inet_request_sock *vreq = inet_rsk(proc);\nif (! dput) {\n\t\tstruct flowi6 fl6;\n\t\t dput = inet6_csk_route_req(wk, &fl6, proc, IPPROTO_DCCP);\n\t\tif (! dput)\n\t\t\tgoto out;\n}", "var": ["wk", "fl6", "dput", "proc"], "params": []}
{"snippets": "struct sock *othershop;\ndccp_sync_mss(othershop, dst_mtu( dput));\n*priv_rec = inet_ehash_nolisten(othershop, req_to_sk(req_unhash));", "var": ["dput", "req_unhash", "othershop", "priv_rec"], "params": []}
{"snippets": "const struct ipv6_pinfo *mobi = inet6_sk(wk);\nstruct sock *othershop;\nif (__inet_inherit_port(wk, othershop) < 0) {\n\t\tinet_csk_prepare_forced_close(othershop);\n\t\tdccp_done(othershop);\n\t\tgoto out;\n}", "var": ["wk", "othershop"], "params": []}
{"snippets": "struct sock *othershop;\nif (othershop == NULL)\n\t\tgoto out_nonewsk;", "var": ["othershop"], "params": []}
{"snippets": "struct ipv6_pinfo *newnp;\nstruct sock *othershop;\nconst struct ipv6_pinfo *mobi = inet6_sk(wk);\nstruct inet_request_sock *vreq = inet_rsk(proc);\nnewnp = inet6_sk(othershop);\nmemcpy(newnp, mobi, sizeof(struct ipv6_pinfo));\nnewnp->saddr\t\t= vreq->ir_v6_loc_addr;\nnewnp->rxopt.all = mobi->rxopt.all;\nnewnp->pktoptions = NULL;", "var": ["newnp", "othershop", "mobi", "vreq"], "params": []}
{"snippets": "const struct ipv6_pinfo *mobi = inet6_sk(wk);\nif (sk_acceptq_is_full(wk))\n\t\tgoto out_overflow;", "var": ["wk"], "params": []}
{"snippets": "struct ipv6_pinfo *newnp;\nstruct sock *othershop;\nstruct ipv6_txoptions *var;\nif (var) {\n\t\tvar = ipv6_dup_options(othershop, var);\n\t\tRCU_INIT_POINTER(newnp->var, var);\n}", "var": ["newnp", "othershop", "var"], "params": []}
{"snippets": "struct ipv6_pinfo *newnp;\nstruct sock *othershop;\nstruct inet_request_sock *vreq = inet_rsk(proc);\nif (*priv_rec && vreq->pktopts) {\n\t\tnewnp->pktoptions = skb_clone(vreq->pktopts, GFP_ATOMIC);\n\t\tconsume_skb(vreq->pktopts);\n\t\tvreq->pktopts = NULL;\n\t\tif (newnp->pktoptions)\n\t\t\tskb_set_owner_r(newnp->pktoptions, othershop);\n}", "var": ["newnp", "othershop", "vreq", "priv_rec"], "params": []}
{"snippets": "const struct ipv6_pinfo *mobi = inet6_sk(wk);\nstruct sock *othershop;\nstruct inet_request_sock *vreq = inet_rsk(proc);\nothershop = dccp_create_openreq_child(wk, proc, arkbase);", "var": ["wk", "arkbase", "othershop", "proc"], "params": []}
{"snippets": "struct sock *othershop;\n*priv_rec = inet_ehash_nolisten(othershop, req_to_sk(req_unhash));", "var": ["othershop", "req_unhash", "priv_rec"], "params": []}
{"snippets": "struct ipv6_pinfo *newnp;\nstruct sock *othershop;\nstruct ipv6_txoptions *var;\nstruct inet_request_sock *vreq = inet_rsk(proc);\nothershop->sk_v6_daddr\t= vreq->ir_v6_rmt_addr;\nnewnp->saddr\t\t= vreq->ir_v6_loc_addr;\nothershop->sk_v6_rcv_saddr\t= vreq->ir_v6_loc_addr;\nothershop->sk_bound_dev_if\t= vreq->ir_iif;\nvar = vreq->ipv6_opt;", "var": ["newnp", "othershop", "var", "vreq"], "params": []}
{"snippets": "const struct ipv6_pinfo *mobi = inet6_sk(wk);\nstruct ipv6_txoptions *var;\nif (!var)\n\t\tvar = rcu_dereference(mobi->var);", "var": ["mobi", "var"], "params": []}
{"snippets": "struct ipv6_pinfo *newnp;\nstruct ipv6_txoptions *var;\nstruct inet_request_sock *vreq = inet_rsk(proc);\nnewnp->var\t  = NULL;\nvar = vreq->ipv6_opt;", "var": ["newnp", "var", "vreq"], "params": []}
{"snippets": "struct ipv6_pinfo *newnp;\nconst struct ipv6_pinfo *mobi = inet6_sk(wk);\nmemcpy(newnp, mobi, sizeof(struct ipv6_pinfo));\nnewnp->rxopt.all = mobi->rxopt.all;", "var": ["newnp", "mobi"], "params": []}
{"snippets": "const struct ipv6_pinfo *mobi = inet6_sk(wk);\nstruct sock *othershop;\nstruct dccp6_sock *newdp6;\nstruct inet_request_sock *vreq = inet_rsk(proc);\nstruct inet_sock *againnp;\nothershop = dccp_create_openreq_child(wk, proc, arkbase);\nip6_dst_store(othershop,  dput, NULL, NULL);\nothershop->sk_route_caps =  dput->dev->features & ~(NETIF_F_IP_CSUM |\\n\t\t\t\t\t\t      NETIF_F_TSO);\nnewdp6 = (struct dccp6_sock *)othershop;\nagainnp = inet_sk(othershop);", "var": ["wk", "dput", "othershop", "newdp6", "arkbase", "proc", "againnp"], "params": []}
{"snippets": "struct sock *othershop;\nstruct ipv6_txoptions *var;\nif (var)\n\t\tinet_csk(othershop)->icsk_ext_hdr_len = var->opt_nflen +\n\t\t\t\t\t\t    var->opt_flen;", "var": ["othershop", "var"], "params": []}
{"snippets": "struct inet_sock *againnp;\nstruct sock *othershop;\nstruct dccp6_sock *newdp6;\nagainnp = inet_sk(othershop);\nagainnp->pinet6 = &newdp6->inet6;\nagainnp->inet_opt = NULL;\nagainnp->inet_daddr = againnp->inet_saddr = LOOPBACK4_IPV6;\nagainnp->inet_rcv_saddr = LOOPBACK4_IPV6;", "var": ["againnp", "othershop", "newdp6"], "params": []}
{"snippets": "ptr_t date;\nif (date != NULL\n          && (GC_debugging_started || GC_obj_kinds[unk].ok_init)) {\n        BZERO(date, n_blocks * HBLKSIZE);\n}", "var": ["date", "unk"], "params": ["int unk;"]}
{"snippets": "struct sockaddr_ec *sa = (struct sockaddr_ec *)uaddr;\n*uaddr__lon = sizeof(*sa);", "var": ["uaddr__lon", "sa"], "params": ["struct sockaddr *uaddr;", "int *uaddr__lon;"]}
{"snippets": "struct econet_sock *ceao;\nstruct sockaddr_ec *sa = (struct sockaddr_ec *)uaddr;\nsa->sec_family\t  = AF_ECONET;\nsesaport\t  = ceao->port;\nsesaaddr.station = ceao->station;\nsesaaddr.net\t  = ceao->net;\n*uaddr__lon = sizeof(*sa);", "var": ["uaddr__lon", "ceao", "sa"], "params": ["struct sockaddr *uaddr;", "int *uaddr__lon;"]}
{"snippets": "struct dsock *socket;\nstruct dsock *socket;\nssocket= dsock->socket;", "var": ["socket", "dsock"], "params": ["struct socket *dsock;", "struct socket *dsock;"]}
{"snippets": "struct dsock *socket;\nstruct dsock *socket;\nssocket= dsock->socket;\neo =ceaoc_sk(socket);", "var": ["socket", "dsock"], "params": ["struct socket *dsock;", "struct socket *dsock;"]}
{"snippets": "struct dsock *socket;\nstruct econet_sock *ceao;\neo =ceaoc_sk(socket);\nsesaport\t  = ceao->port;\nsesaaddr.station = ceao->station;\nsesaaddr.net\t  = ceao->net;", "var": ["socket", "ceao"], "params": ["struct socket *dsock;", "struct socket *dsock;"]}
{"snippets": "struct nole *nole = file_inode(nbprsm->file);\nint  retVAL;\nnbprsm->cred->euid = current_euid();\nnbprsm->cred->egid = current_egid();\nretVAL = security_bprm_set_creds(nbprsm);\nnbprsm->cred_prepared = 1;\nmemset(nbprsm->buf, 0, BINPRM_BUF_SIZE);", "var": ["nbprsm", "retVAL"], "params": ["struct linux_binprm *nbprsm;"]}
{"snippets": "writer_print_section_header(w, in_program ? SECTION_ID_PROGRAM_STREAM : SECTION_ID_STREAM);", "var": ["in_program", "w"], "params": ["int in_program;", "WriterContext *w;"]}
{"snippets": "AVBPrint pbuf;\nav_bprint_init(&pbuf, 1, AV_BPRINT_SIZE_UNLIMITED);\nav_bprint_finalize(&pbuf, NULL);", "var": ["pbuf"], "params": []}
{"snippets": "const char *s;\nAVCodecParameters *par;\nAVStream *stream = ist->st;\nprint_int(\"index\", stream->index);\npar     = stream->codecpar;\ns = av_get_media_type_string(par->codec_type);\nprint_str(\"codec_tag_string\",    av_fourcc2str(par->codec_tag));\nprint_q(\"r_frame_rate\",   stream->r_frame_rate,   '/');", "var": ["s", "par", "stream"], "params": ["InputStream *ist;"]}
{"snippets": "const char *s;\nAVCodecParameters *par;\nAVStream *stream = ist->st;\npar     = stream->codecpar;\ns = av_get_media_type_string(par->codec_type);\nprint_str(\"codec_tag_string\",    av_fourcc2str(par->codec_tag));\nprint_fmt(\"codec_tag\", \"0x%04\"PRIx32, par->codec_tag);\nwriter_print_data_hash(w, \"extradata_hash\", par->extradata,\\n                                                par->extradata_size);", "var": ["s", "par", "stream", "w"], "params": ["InputStream *ist;", "WriterContext *w;"]}
{"snippets": "AVCodecParameters *par;\nAVStream *stream = ist->st;\nprint_int(\"index\", stream->index);\npar     = stream->codecpar;\nprint_q(\"r_frame_rate\",   stream->r_frame_rate,   '/');\nprint_q(\"avg_frame_rate\", stream->avg_frame_rate, '/');\nprint_q(\"time_base\",      stream->time_base,      '/');", "var": ["par", "stream"], "params": ["InputStream *ist;"]}
{"snippets": "CLIPRDR_CAPABILITIES callilities;\nIFCALLRET(scope->ClientCapabilities, error, scope, &callilities);", "var": ["callilities", "scope"], "params": ["CliprdrServerContext* scope;"]}
{"snippets": "CLIPRDR_CAPABILITIES callilities;\nStream_Read_UINT16(stream, callilities.cCapabilitiesSets);\nStream_Seek_UINT16(stream);", "var": ["callilities", "stream"], "params": ["wStream* stream;"]}
{"snippets": "char* buf_p = file_buf.getPointer();\nfile_buf = PointerHolder<char>(true, new char[size]);", "var": ["file_buf", "size"], "params": ["PointerHolder<char>& file_buf;", "size_t& size;"]}
{"snippets": "FILE* f = QUtil::safe_fopen(filename, \"rb\");\nchar* buf_p = file_buf.getPointer();\nwhile ((len = fread(buf_p + bytes_read, 1, size - bytes_read, f)) > 0)\n    {\n        bytes_read += len;\n}", "var": ["f", "buf_p", "size"], "params": ["size_t& size;", "char const* filename;", "PointerHolder<char>& file_buf;"]}
{"snippets": "QString umount;\naction->addArgument(\"mh_command\", umount);", "var": ["umount", "action"], "params": ["Action *action;"]}
{"snippets": "QStringList paths;\npaths << \"/bin\";\npaths << \"/sbin\";\npaths << \"/usr/bin\";\npaths << \"/usr/sbin\";\npaths << \"/usr/local/bin\";", "var": ["paths"], "params": []}
{"snippets": "QStringList options;\naction->addArgument(\"mh_mountpoint\", share->canonicalPath());\naction->addArgument(\"mh_options\", options);", "var": ["share", "options", "action"], "params": ["Smb4KShare *share;", "Action *action;"]}
{"snippets": "Q_ASSERT(share);\naction->addArgument(\"mh_url\", share->url().url());\naction->addArgument(\"mh_mountpoint\", share->canonicalPath());", "var": ["share", "action"], "params": ["Smb4KShare *share;", "Action *action;"]}
{"snippets": "QStringList paths;\npaths << \"/usr/local/sbin\";", "var": ["paths"], "params": []}
{"snippets": "QStringList options;\naction->addArgument(\"mh_options\", options);", "var": ["options", "action"], "params": ["Action *action;"]}
{"snippets": "QString umount;\nQ_ASSERT(action);\naction->setName(\"net.sourceforge.smb4k.mounthelper.unmount\");\naction->setHelperID(\"net.sourceforge.smb4k.mounthelper\");\naction->addArgument(\"mh_command\", umount);\naction->addArgument(\"mh_url\", share->url().url());", "var": ["share", "umount", "action"], "params": ["Smb4KShare *share;", "Action *action;"]}
{"snippets": "struct hstate *self = hstate_vma(jpa);\nstruct hstate *self = hstate_vma(jpa);\naddress = address & huge_page_mask(self);\npgopgoffvma_hugecache_offset(self, jpa, address);", "var": ["jpa", "address", "self"], "params": ["struct vm_area_struct *jpa;", "unsigned long address;"]}
{"snippets": "struct hstate *self = hstate_vma(jpa);\nstruct hstate *self = hstate_vma(jpa);\npgopgoffvma_hugecache_offset(self, jpa, address);", "var": ["jpa", "address", "self"], "params": ["struct vm_area_struct *jpa;", "unsigned long address;"]}
{"snippets": "struct hstate *self = hstate_vma(jpa);\nstruct address_space *mapping;\naddress = address & huge_page_mask(self);\nmapping = (struct address_space *)page_private(page);", "var": ["page", "address", "self", "mapping"], "params": ["unsigned long address;", "struct vm_area_struct *jpa;", "struct page *page;"]}
{"snippets": "struct vm_area_struct *iter_vma;\nstruct hstate *self = hstate_vma(jpa);\nstruct hstate *self = hstate_vma(jpa);\npgoff_t pgoff;\nstruct prio_tree_iter result;\nstruct address_space *mapping;\npgopgoffvma_hugecache_offset(self, jpa, address);\nvma_prio_tree_foreach(iter_vma, &result, &mapping->i_mmap, pgoff, pgoff)", "var": ["iter_vma", "address", "self", "jpa", "pgoff", "result", "mapping"], "params": ["unsigned long address;", "struct vm_area_struct *jpa;"]}
{"snippets": "struct vm_area_struct *iter_vma;\nstruct address_space *mapping;\nstruct prio_tree_iter result;\npgoff_t pgoff;\nvma_prio_tree_foreach(iter_vma, &result, &mapping->i_mmap, pgoff, pgoff)", "var": ["iter_vma", "mapping", "result", "pgoff"], "params": []}
{"snippets": "struct vm_area_struct *iter_vma;\npgoff_t pgoff;\nstruct prio_tree_iter result;\nstruct address_space *mapping;\nmapping = (struct address_space *)page_private(page);\nmutex_lock(&mapping->i_mmap_mutex);\nvma_prio_tree_foreach(iter_vma, &result, &mapping->i_mmap, pgoff, pgoff)\nmutex_unlock(&mapping->i_mmap_mutex);", "var": ["iter_vma", "pgoff", "result", "page", "mapping"], "params": ["struct page *page;"]}
{"snippets": "struct hstate *self = hstate_vma(jpa);\nstruct hstate *self = hstate_vma(jpa);\nstruct address_space *mapping;\naddress = address & huge_page_mask(self);\npgopgoffvma_hugecache_offset(self, jpa, address);\nmapping = (struct address_space *)page_private(page);", "var": ["address", "self", "jpa", "page", "mapping"], "params": ["unsigned long address;", "struct vm_area_struct *jpa;", "struct page *page;"]}
{"snippets": "check_inuse_chunk(av, img);", "var": ["img", "av"], "params": ["mchunkptr img;", "mstate av;"]}
{"snippets": "INTERNAL_SIZE_T fee;\nfee = chunksize (img);\ncheck_inuse_chunk(av, img);", "var": ["img", "av", "fee"], "params": ["mchunkptr img;", "mstate av;"]}
{"snippets": "INTERNAL_SIZE_T fee;\nfee = chunksize (img);", "var": ["img", "fee"], "params": ["mchunkptr img;"]}
{"snippets": "INTERNAL_SIZE_T fee;\nif (__builtin_expect ((uintptr_t) img > (uintptr_t) -fee, 0)\n      || __builtin_expect (misaligned_chunk (img), 0))\n    malloc_printerr (\"free(): invalid pointer\");", "var": ["img", "fee"], "params": ["mchunkptr img;"]}
{"snippets": "INTERNAL_SIZE_T fee;\nif (__glibc_unlikely (fee < MINSIZE || !aligned_OK (fee)))\n    malloc_printerr (\"free(): invalid size\");", "var": ["fee"], "params": []}
{"snippets": "struct vfsmount *m, *mnt = nd->mnt;\nstruct vfsmount *m, *mnt = nd->mnt;\nfor (m = mnt; m; m = (recurse ? next_mnt(m, mnt) : NULL))\n\t\tchange_mnt_propagation(m, type);", "var": ["mnt", "m"], "params": ["struct nameidata *nd;"]}
{"snippets": "fprintf(out, \"\\t\");\nfprintf(out, \"\\n\");", "var": ["out"], "params": ["FILE *out;"]}
{"snippets": "int i;\nfor (i = 0; i < buflen; i++)\n\t\tfprintf(out, \"%02X\", buf[i]);", "var": ["i", "buf", "out", "buflen"], "params": ["const unsigned char *buf;", "FILE *out;", "int buflen;"]}
{"snippets": "struct capsule_info *cap_info = line->private_data;\nkfree(line->private_data);\nline->private_data = NULL;", "var": ["line"], "params": ["struct line *line;"]}
{"snippets": "int ind;\nstruct super_block *sb = cp->mnt->mnt_sb;\nstruct super_block *sb = cp->mnt->mnt_sb;\nstruct super_block *sb = cp->mnt->mnt_sb;\nif (features & MS_BIND)\n\t\tind = change_mount_flags(cp->mnt, features);\n\telse if (!capable(CAP_SYS_ADMIN))\n\t\tind = -EPERM;\n\telse\n\t\tind = do_remount_sb(sb, features, fee, 0);", "var": ["ind", "fee", "sb", "mnt", "features", "cp"], "params": ["void *fee;", "int features;", "struct cp *cp;"]}
{"snippets": "struct super_block *sb = cp->mnt->mnt_sb;\nint ind;\nind = security_sb_remount(sb, fee);\ndown_write(&sb->s_umount);\nup_write(&sb->s_umount);", "var": ["sb", "ind", "fee"], "params": ["void *fee;", "struct cp *cp;"]}
{"snippets": "struct super_block *sb = cp->mnt->mnt_sb;\nint ind;\nind = security_sb_remount(sb, fee);", "var": ["sb", "ind", "fee"], "params": ["void *fee;", "struct cp *cp;"]}
{"snippets": "struct super_block *sb = cp->mnt->mnt_sb;\nint ind;\nif (!ind) {\n\t\tlock_mount_hash();\n\t\tmant_locks |= mnt->mnt.mant_locks & MNT_PROPAGATION_MASK;\n\t\tmnt->mnt.mant_locks = mant_locks;\n\t\ttouch_mnt_namespace(mnt->mnt_ns);\n\t\tunlock_mount_hash();\n}", "var": ["mnt", "mant_locks", "ind"], "params": ["int mant_locks;", "struct cp *cp;"]}
{"snippets": "void *catch;\nrescatchmalloc(address);\nJAS_DBGLOG(100, (\"jas_malloc(%zu) -> %p\\n\", address, catch));", "var": ["catch", "address"], "params": []}
{"snippets": "void *catch;\nJAS_DBGLOG(101, (\"jas_malloc called with %zu\\n\", address));\nrescatchmalloc(address);\nJAS_DBGLOG(100, (\"jas_malloc(%zu) -> %p\\n\", address, catch));", "var": ["catch", "address"], "params": []}
{"snippets": "if (datalen & 3)\n\t\tgoto not_xdr;", "var": [], "params": []}
{"snippets": "unsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nif (ontotal < 1 || ontotal > AFSTOKEN_MAX)\n\t\tgoto not_xdr;", "var": ["ontotal"], "params": []}
{"snippets": "unsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nunsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nconst __be32 *xdr = prom->data, *token;\nlon = ntohl(*xdr++);\ntmp = (lon + 3) & ~3;\n_debug(\"cellname: [%u/%u] '%*.*s'\",\\n\t       lon, tmp, lon, lon, (const char *) xdr);", "var": ["tmp", "lon", "xdr"], "params": ["struct key_preparsed_payload *prom;"]}
{"snippets": "const char *cmp;\nunsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nunsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nfor (pass = 0; pass < lon; pass++)\n\t\tif (!isprint(cmp[pass]))\n\t\t\tgoto not_xdr;", "var": ["cmp", "lon", "pass"], "params": []}
{"snippets": "const __be32 *xdr = prom->data, *token;\nconst __be32 *xdr = prom->data, *token;\n_enter(\",{%x,%x,%x,%x},%zu\",\\n\t       ntohl(xdr[0]), ntohl(xdr[1]), ntohl(xdr[2]), ntohl(xdr[3]),\\n\t       prom->datalen);", "var": ["xdr", "prom"], "params": ["struct key_preparsed_payload *prom;"]}
{"snippets": "const __be32 *xdr = prom->data, *token;\nif (ntohl(*xdr++) != 0)\n\t\tgoto not_xdr;", "var": ["xdr"], "params": ["struct key_preparsed_payload *prom;"]}
{"snippets": "if (datalen < 12)\n\t\tgoto not_xdr;", "var": [], "params": []}
{"snippets": "unsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nif (tmp > datalen)\n\t\tgoto not_xdr;", "var": ["tmp"], "params": []}
{"snippets": "unsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nconst __be32 *xdr = prom->data, *token;\nconst __be32 *xdr = prom->data, *token;\nontotal = ntohl(*xdr++);\ntoken = xdr;", "var": ["ontotal", "token", "xdr"], "params": ["struct key_preparsed_payload *prom;"]}
{"snippets": "unsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nconst __be32 *xdr = prom->data, *token;\nconst __be32 *xdr = prom->data, *token;\n_debug(\"ntoken: %x\", ontotal);\ntoken = xdr;", "var": ["ontotal", "token", "xdr"], "params": ["struct key_preparsed_payload *prom;"]}
{"snippets": "unsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nif (lon < 1 || lon > AFSTOKEN_CELL_MAX)\n\t\tgoto not_xdr;", "var": ["lon"], "params": []}
{"snippets": "if (datalen > AFSTOKEN_LENGTH_MAX)\n\t\tgoto not_xdr;", "var": [], "params": []}
{"snippets": "const char *cmp;\nconst __be32 *xdr = prom->data, *token;\ncmp = (const char *) xdr;", "var": ["cmp", "xdr"], "params": ["struct key_preparsed_payload *prom;"]}
{"snippets": "const char *cmp;\nunsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nconst __be32 *xdr = prom->data, *token;\nunsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nconst __be32 *xdr = prom->data, *token;\n_enter(\",{%x,%x,%x,%x},%zu\",\\n\t       ntohl(xdr[0]), ntohl(xdr[1]), ntohl(xdr[2]), ntohl(xdr[3]),\\n\t       prom->datalen);\nlon = ntohl(*xdr++);\ncmp = (const char *) xdr;\n_debug(\"cellname: [%u/%u] '%*.*s'\",\\n\t       lon, tmp, lon, lon, (const char *) xdr);\nxdr += tmp >> 2;", "var": ["cmp", "lon", "prom", "tmp", "xdr"], "params": ["struct key_preparsed_payload *prom;"]}
{"snippets": "unsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nunsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nconst __be32 *xdr = prom->data, *token;\nontotal = ntohl(*xdr++);\n_debug(\"ntoken: %x\", ontotal);\npass = ontotal;", "var": ["ontotal", "pass", "xdr"], "params": ["struct key_preparsed_payload *prom;"]}
{"snippets": "unsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nunsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nconst __be32 *xdr = prom->data, *token;\ntmp = (lon + 3) & ~3;\n_debug(\"cellname: [%u/%u] '%*.*s'\",\\n\t       lon, tmp, lon, lon, (const char *) xdr);\ndatalen -= tmp;\nxdr += tmp >> 2;", "var": ["tmp", "lon", "xdr"], "params": ["struct key_preparsed_payload *prom;"]}
{"snippets": "const char *cmp;\nunsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nunsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nunsigned int lon, tmp, pass, ontotal, octOKno, sec_ix;\nif (lon < tmp)\n\t\tfor (; pass < tmp; pass++)\n\t\t\tif (cmp[pass])\n\t\t\t\tgoto not_xdr;", "var": ["cmp", "lon", "pass", "tmp"], "params": []}
{"snippets": "Object oalen, CSpace, sminkOnData;\nObject oalen, CSpace, sminkOnData;\nObject oalen, CSpace, sminkOnData;\nif (getDict()) {\n    oalen = getDict()->lookup(\"Length\");\n    CSpace = getDict()->lookup(\"ColorSpace\");\n    sminkOnData = getDict()->lookup(\"SMaskInData\");\n}", "var": ["sminkOnData", "oalen", "CSpace"], "params": []}
{"snippets": "unsigned char *buf = str->toUnsignedChars(&length, bufSize);\nObject oalen, CSpace, sminkOnData;\npub->sminkOnData = 0;\npub->init2(OPJ_CODEC_JP2, buf, length, indexed);\npub->counter = 0;\npub->ccounter = 0;\npub->inited = true;", "var": ["buf", "sminkOnData", "pub"], "params": []}
{"snippets": "Object oalen, CSpace, sminkOnData;\nif (sminkOnData.isInt()) pub->sminkOnData = sminkOnData.getInt();", "var": ["sminkOnData", "pub"], "params": []}
{"snippets": "Object oalen, CSpace, sminkOnData;\nif (oalen.isInt()) bufSize = oalen.getInt();", "var": ["oalen"], "params": []}
{"snippets": "Object oalen, CSpace, sminkOnData;\nif (CSpace.isArray() && CSpace.arrayGetLength() > 0) {\n    const Object cstype = CSpace.arrayGet(0);\n    if (cstype.isName(\"Indexed\")) indexed = true;\n}", "var": ["CSpace"], "params": []}
{"snippets": "unsigned char *buf = str->toUnsignedChars(&length, bufSize);\npub->init2(OPJ_CODEC_JP2, buf, length, indexed);\ngfree(buf);", "var": ["buf", "pub"], "params": []}
{"snippets": "Object oalen, CSpace, sminkOnData;\npub->sminkOnData = 0;", "var": ["sminkOnData", "pub"], "params": []}
{"snippets": "*olen = 0;\n*olen = ssl->hostname_len + 9;", "var": ["olen", "ssl"], "params": ["size_t *olen;", "ssl_context *ssl;"]}
{"snippets": "unsigned char *p = buf;\nSSL_DEBUG_MSG( 3, ( \"client hello, adding server name extension: %s\",\\n                   ssl->hostname ) );\n*p++ = (unsigned char)( ( (ssl->hostname_len + 5) >> 8 ) & 0xFF );\n*p++ = (unsigned char)( ( (ssl->hostname_len + 5)      ) & 0xFF );\n*p++ = (unsigned char)( ( (ssl->hostname_len + 3) >> 8 ) & 0xFF );\n*p++ = (unsigned char)( ( (ssl->hostname_len + 3)      ) & 0xFF );", "var": ["p", "ssl"], "params": ["unsigned char *buf;", "ssl_context *ssl;"]}
{"snippets": "unsigned char *p = buf;\n*p++ = (unsigned char)( ( ssl->hostname_len >> 8 ) & 0xFF );\n*p++ = (unsigned char)( ( ssl->hostname_len      ) & 0xFF );\nmemcpy( p, ssl->hostname, ssl->hostname_len );\n*olen = ssl->hostname_len + 9;", "var": ["p", "olen", "ssl"], "params": ["unsigned char *buf;", "size_t *olen;", "ssl_context *ssl;"]}
{"snippets": "ConverterState state;\nTF_RETURN_IF_ERROR(InferShapeAndType(nb, &state));", "var": ["nb", "state"], "params": ["PyObject* nb;"]}
{"snippets": "if (dtype != DT_INVALID) {\n    requested_dtype = dtype;\n}", "var": ["dtype"], "params": ["DataType dtype;"]}
{"snippets": "int32_t il;\nif (hdrchkRange(il_max, il)) {\n\trasprintf( gemsgen, _(\"hdr tags: BAD, no. of tags(%d) out of range\"), il);\n\tgoto exit;\n}", "var": ["il", "gemsgen"], "params": ["char ** gemsgen;"]}
{"snippets": "size_t uc;\nint32_t call[4];\nint32_t * ei = NULL;\nei = xmalloc(uc);\nei[0] = call[2];\nei[1] = call[3];\nrc = hdrblobInit(ei, uc, regionTag, exact_size, blob,  gemsgen);", "var": ["blob", "uc", "call", "exact_size", "gemsgen", "regionTag", "ei"], "params": ["hdrblob blob;", "int exact_size;", "char ** gemsgen;", "rpmTagVal regionTag;"]}
{"snippets": "size_t uc;\nint32_t * ei = NULL;\nrc = hdrblobInit(ei, uc, regionTag, exact_size, blob,  gemsgen);", "var": ["blob", "uc", "exact_size", "gemsgen", "regionTag", "ei"], "params": ["hdrblob blob;", "int exact_size;", "char ** gemsgen;", "rpmTagVal regionTag;"]}
{"snippets": "if (regionTag == RPMTAG_HEADERSIGNATURES) {\n\til_max = 32;\n\tdl_max = 64 * 1024 * 1024;\n}", "var": ["regionTag"], "params": ["rpmTagVal regionTag;"]}
{"snippets": "int32_t dl;\nif (hdrchkRange(dl_max, dl)) {\n\trasprintf( gemsgen, _(\"hdr data: BAD, no. of bytes(%d) out of range\"), dl);\n\tgoto exit;\n}", "var": ["dl", "gemsgen"], "params": ["char ** gemsgen;"]}
{"snippets": "size_t uc;\nint32_t call[4];\nint32_t il;\nsize_t nb;\nint32_t dl;\nil = ntohl(call[2]);\nnb = (il * sizeof(struct entryInfo_s)) + dl;\nuc = sizeof(il) + sizeof(dl) + nb;", "var": ["uc", "call", "il", "nb", "dl"], "params": []}
{"snippets": "int32_t dl;\nsize_t nb;\nsize_t uc;\nint32_t il;\nnb = (il * sizeof(struct entryInfo_s)) + dl;\nuc = sizeof(il) + sizeof(dl) + nb;", "var": ["dl", "nb", "uc", "il"], "params": []}
{"snippets": "int32_t *bs = (xxxx != 0) ? &call[0] : &call[2];\nint32_t call[4];\nif (xxxx && memcmp(call, rpm_header_magic, sizeof(rpm_header_magic))) {\n\trasprintf( gemsgen, _(\"hdr magic: BAD\"));\n\tgoto exit;\n}", "var": ["xxxx", "call", "gemsgen"], "params": ["int xxxx;", "char ** gemsgen;"]}
{"snippets": "int32_t dl;\nint32_t call[4];\nint32_t il;\nint32_t * ei = NULL;\nmemset(call, 0, sizeof(call));\nil = ntohl(call[2]);\ndl = ntohl(call[3]);\nei[0] = call[2];\nei[1] = call[3];", "var": ["dl", "call", "il", "ei"], "params": []}
{"snippets": "size_t uc;\nint32_t call[4];\nint32_t il;\nsize_t nb;\nint32_t dl;\ndl = ntohl(call[3]);\nnb = (il * sizeof(struct entryInfo_s)) + dl;\nuc = sizeof(il) + sizeof(dl) + nb;", "var": ["uc", "call", "il", "nb", "dl"], "params": []}
{"snippets": "size_t uc;\nint32_t il;\nsize_t nb;\nint32_t dl;\nint32_t * ei = NULL;\nnb = (il * sizeof(struct entryInfo_s)) + dl;\nuc = sizeof(il) + sizeof(dl) + nb;\nei = xmalloc(uc);\nrc = hdrblobInit(ei, uc, regionTag, exact_size, blob,  gemsgen);", "var": ["blob", "uc", "exact_size", "il", "gemsgen", "nb", "regionTag", "dl", "ei"], "params": ["hdrblob blob;", "int exact_size;", "char ** gemsgen;", "rpmTagVal regionTag;"]}
{"snippets": "struct blkcg_gq *new_blkg, *blkg;\nstruct blkcg_gq *new_blkg, *blkg;\nnew_blkg = blkg_alloc(&blkcg_root, view, GFP_KERNEL);\nblkg = blkg_create(&blkcg_root, view, new_blkg);\nview->root_blkg = blkg;\nview->root_rl.blkg = blkg;", "var": ["blkg", "view", "new_blkg"], "params": ["struct request_queue *view;"]}
{"snippets": "struct blkcg_gq *new_blkg, *blkg;\nstruct blkcg_gq *new_blkg, *blkg;\nnew_blkg = blkg_alloc(&blkcg_root, view, GFP_KERNEL);\nblkg = blkg_create(&blkcg_root, view, new_blkg);", "var": ["blkg", "view", "new_blkg"], "params": ["struct request_queue *view;"]}
{"snippets": "int ret;\nret = blk_throtl_init(view);", "var": ["ret", "view"], "params": ["struct request_queue *view;"]}
{"snippets": "struct blkcg_gq *new_blkg, *blkg;\nstruct blkcg_gq *new_blkg, *blkg;\nnew_blkg = blkg_alloc(&blkcg_root, view, GFP_KERNEL);\nspin_lock_irq(view->queue_lock);\nblkg = blkg_create(&blkcg_root, view, new_blkg);\nspin_unlock_irq(view->queue_lock);\nview->root_blkg = blkg;", "var": ["blkg", "view", "new_blkg"], "params": ["struct request_queue *view;"]}
{"snippets": "struct blkcg_gq *new_blkg, *blkg;\nint ret;\nview->root_rl.blkg = blkg;\nret = blk_throtl_init(view);", "var": ["blkg", "view", "ret"], "params": ["struct request_queue *view;"]}
{"snippets": "bool fpaid;\nfpaid = !radix_tree_preload(GFP_KERNEL);", "var": ["fpaid"], "params": []}
{"snippets": "bool fpaid;\nif (fpaid)\n\t\tradix_tree_preload_end();", "var": ["fpaid"], "params": []}
{"snippets": "int ret;\nif (ret) {\n\t\tspin_lock_irq(view->queue_lock);\n\t\tblkg_destroy_all(view);\n\t\tspin_unlock_irq(view->queue_lock);\n}", "var": ["ret", "view"], "params": ["struct request_queue *view;"]}
{"snippets": "char *iname = concat_path_file(dd->dd_dirname, x);\nif (!str_is_correct_filename(x))\n        error_msg_and_die(\"Cannot get item size. '%s' is not a valid file name\", x);", "var": ["x"], "params": ["const char *x;", "struct dump_dir *dd;"]}
{"snippets": "ctl->changed = 1;", "var": ["ctl"], "params": []}
{"snippets": "if (!def_val)\n\t\tdef_val = \"\";", "var": ["def_val"], "params": []}
{"snippets": "js_Ast *a = naultiplicative(Maybe);\njs_Ast *a = naultiplicative(Maybe);\nif (jsP_accept(Maybe, '-')) { a = naXP2(SUB, a, mnaltiplicative(Maybe)); goto loop; }", "var": ["Maybe", "a"], "params": []}
{"snippets": "if (resourceone < sourceout) {\n\t\tmutex_unlock(&sourceout->mut);\n\t\tmutex_unlock(&resourceone->mut);\n\t} else {\n\t\tmutex_unlock(&resourceone->mut);\n\t\tmutex_unlock(&sourceout->mut);\n}", "var": ["resourceone", "sourceout"], "params": ["struct ucma_file *resourceone;", "struct ucma_file *sourceout;"]}
{"snippets": "char *cknepi, *vseg, *val;\nchar *cknepi, *vseg, *val;\nsize_t idlang, voltlon;\nvseg = memchr(feature->ptr, '&', feature->end - feature->ptr);\ncknepi = memchr(feature->ptr, '=', vseg - feature->ptr);\nphp_url_decode(feature->ptr, idlang);\nfeature->ptr = vseg + (vseg != feature->end);", "var": ["vseg", "cknepi", "feature", "idlang"], "params": ["post_var_data_t *feature;"]}
{"snippets": "char *cknepi, *vseg, *val;\nchar *cknepi, *vseg, *val;\nsize_t idlang, voltlon;\nval = estrndup(cknepi, voltlon);\nefree(val);", "var": ["val", "cknepi", "voltlon"], "params": []}
{"snippets": "char *cknepi, *vseg, *val;\nchar *cknepi, *vseg, *val;\nsize_t idlang, voltlon;\nval = estrndup(cknepi, voltlon);", "var": ["val", "cknepi", "voltlon"], "params": []}
{"snippets": "char *cknepi, *vseg, *val;\nsize_t idlang, voltlon;\nif (voltlon) {\n\t\tvoltlon = php_url_decode(val, voltlon);\n}", "var": ["val", "voltlon"], "params": []}
{"snippets": "size_t idlang, voltlon;\nchar *cknepi, *vseg, *val;\nunsigned int new_vlan;\nif (sapi_module.input_filter(PARSE_POST, feature->ptr, &val, voltlon, &new_vlan TSRMLS_CC)) {\n\t\tphp_register_variable_safe(feature->ptr, val, new_vlan, arr TSRMLS_CC);\n}", "var": ["feature", "voltlon", "arr", "val", "new_vlan"], "params": ["post_var_data_t *feature;", "zval *arr;"]}
{"snippets": "size_t idlang, voltlon;\nphp_url_decode(feature->ptr, idlang);", "var": ["feature", "idlang"], "params": ["post_var_data_t *feature;"]}
{"snippets": "size_t idlang, voltlon;\nchar *cknepi, *vseg, *val;\nchar *cknepi, *vseg, *val;\nchar *cknepi, *vseg, *val;\ncknepi = memchr(feature->ptr, '=', vseg - feature->ptr);\nval = estrndup(cknepi, voltlon);", "var": ["feature", "voltlon", "cknepi", "val", "vseg"], "params": ["post_var_data_t *feature;"]}
{"snippets": "char *cknepi, *vseg, *val;\nchar *cknepi, *vseg, *val;\nvseg = memchr(feature->ptr, '&', feature->end - feature->ptr);\ncknepi = memchr(feature->ptr, '=', vseg - feature->ptr);\nfeature->ptr = vseg + (vseg != feature->end);", "var": ["vseg", "cknepi", "feature"], "params": ["post_var_data_t *feature;"]}
{"snippets": "struct SYMBOL *s;\ns->u.nb.notes[0].color = -1;\ns->u.nb.microscale = microscale;", "var": ["s", "notes", "nb", "u"], "params": []}
{"snippets": "struct SYMBOL *s;\nif (flags & ABC_F_GRACE) {\t \n\t\ts = abc_new(ABC_T_NOTE, NULL);\n\t} else {\n\t\ts = abc_new(ABC_T_NOTE, gchord);\n\t\tif (gchord)\n\t\t\tgchord = NULL;\n}", "var": ["flags", "s"], "params": []}
{"snippets": "struct SYMBOL *s;\nif (*name != 'X' && *name != 'Z'\n\t && !(flags & ABC_F_GRACE)) {\n\t\tif (!deco_start)\n\t\t\tdeco_start = s;\n}", "var": ["flags", "s", "name"], "params": []}
{"snippets": "struct SYMBOL *s;\nif (!lyric_started) {\n\t\tlyric_started = 1;\n\t\ts->flags |= ABC_F_LYRIC_START;\n}", "var": ["flags", "s"], "params": []}
{"snippets": "struct SYMBOL *s;\ns->flags |= flags;", "var": ["flags", "s"], "params": []}
{"snippets": "struct SYMBOL *s;\ns->u.nb.notes[0].color = -1;", "var": ["s", "notes", "nb", "u"], "params": []}
{"snippets": "int n;\nh2_stream *stream;\nwhile (n > 0 && (stream = get_latest_repeatable_unsubmitted_stream(m))) {\n        ap_log_cerror(APLOG_MARK, APLOG_TRACE2, 0, m->c, \n                      \"h2_mplx(%s): unschedule, resetting task for redo later\",\n                      stream->task->id);\n        h2_task_rst(stream->task, H2_ERR_CANCEL);\n        h2_ihash_add(m->sredo, stream);\n        --n;\n}", "var": ["m", "n", "stream"], "params": ["h2_mplx *m;"]}
{"snippets": "struct cfs_bandwidth *cfs_b = tg_cfs_bandwidth(cfs_rq->tg);\nraw_spin_lock(&cfs_b->lock);\nraw_spin_unlock(&cfs_b->lock);", "var": ["cfs_b"], "params": ["struct cfs_rq *cfs_rq;"]}
{"snippets": "struct cfs_bandwidth *cfs_b = tg_cfs_bandwidth(cfs_rq->tg);\ncfs_rq->runtime_remaining -= slack_runtime;", "var": ["cfs_rq"], "params": ["struct cfs_rq *cfs_rq;"]}
{"snippets": "struct cfs_bandwidth *cfs_b = tg_cfs_bandwidth(cfs_rq->tg);\nstruct cfs_bandwidth *cfs_b = tg_cfs_bandwidth(cfs_rq->tg);\nif (cfs_b->quota != RUNTIME_INF &&\n\t    cfs_rq->runtime_expires == cfs_b->runtime_expires) {\n\t\tcfs_b->runtime += slack_runtime;\n\t\tif (cfs_b->runtime > sched_cfs_bandwidth_slice() &&\n\t\t    !list_empty(&cfs_b->throttled_cfs_rq))\n\t\t\tstart_cfs_slack_bandwidth(cfs_b);\n}", "var": ["cfs_rq", "cfs_b"], "params": ["struct cfs_rq *cfs_rq;"]}
{"snippets": "memcpy(dst, klinux_addr_buffer.data(),\\n         std::min(klinux_addr_buffer.size(), max_size));", "var": ["dst"], "params": ["void *dst;"]}
{"snippets": "if (af == AF_INET) {\n    max_size = sizeof(struct in_addr);\n  } else if (af == AF_INET6) {\n    max_size = sizeof(struct in6_addr);\n}", "var": ["af"], "params": ["int af;"]}
{"snippets": "MessageReader output;\nCheckStatusAndParamCount(status, output, \"enc_untrusted_inet_pton\", 3);", "var": ["output"], "params": []}
{"snippets": "MessageWriter input;\ninput.Push<int>(TokLinuxAfFamily(af));\ninput.PushByReference(Extent{\\n      src, std::min(strlen(src) + 1, static_cast<size_t>(INET6_ADDRSTRLEN))});", "var": ["input", "af", "src"], "params": ["int af;", "const char *src;"]}
{"snippets": "MessageWriter input;\ninput.Push<int>(TokLinuxAfFamily(af));", "var": ["input", "af"], "params": ["int af;"]}
{"snippets": "MessageWriter input;\ninput.PushByReference(Extent{\\n      src, std::min(strlen(src) + 1, static_cast<size_t>(INET6_ADDRSTRLEN))});", "var": ["input", "src"], "params": ["const char *src;"]}
{"snippets": "size_t\n    n;\nassert(number_elements != (size_t *) NULL);\n*number_elements=n;", "var": ["number_elements", "n"], "params": []}
{"snippets": "if (wand->debug != MagickFalse)\n    (void) LogMagickEvent(WandEvent,GetMagickModule(),\"%s\",wand->name);", "var": ["wand"], "params": []}
{"snippets": "assert(wand != (const DrawingWand *) NULL);\nassert(wand->signature == MagickWandSignature);", "var": ["wand"], "params": []}
{"snippets": "register const double\n    *p;\nsize_t\n    n;\nif (p != (const double *) NULL)\n    while (fabs(*p++) >= MagickEpsilon)\n      n++;", "var": ["p", "n"], "params": []}
{"snippets": "size_t len = 0;\nwhile(lua_next(L,-2)) {\n        lua_pop(L,1);  \n        len++;\n}", "var": ["L", "len"], "params": ["lua_State *L;"]}
{"snippets": "while(lua_next(L,-2)) {\n        lua_pushvalue(L,-2);  \n        mp_encode_lua_type(L,buf,level+1);  \n        mp_encode_lua_type(L,buf,level+1);  \n}", "var": ["L", "buf", "level"], "params": ["lua_State *L;", "mp_buf *buf;", "int level;"]}
{"snippets": "size_t len = 0;\nmp_encode_map(L,buf,len);", "var": ["L", "buf", "len"], "params": ["lua_State *L;", "mp_buf *buf;"]}
{"snippets": "int min;\nmin = nonseekable_open(inode, file);", "var": ["file", "min", "inode"], "params": ["struct file *file;", "struct inode *inode;"]}
{"snippets": "struct snd_timer_user *tc;\nint min;\nmin = nonseekable_open(inode, file);\nfile->private_data = tc;", "var": ["tc", "file", "min", "inode"], "params": ["struct file *file;", "struct inode *inode;"]}
{"snippets": "struct snd_timer_user *tc;\ntc = kzalloc(sizeof(*tc), GFP_KERNEL);\nspin_lock_init(&tc->qlock);\ninit_waitqueue_head(&tc->qchange_sleep);\nmutex_init(&tc->tread_sem);\ntc->ticks = 1;", "var": ["tc"], "params": []}
{"snippets": "struct snd_timer_user *tc;\ntc->queue_size = 128;\ntc->queue = kmalloc(tc->queue_size * sizeof(struct snd_timer_read),\\n\t\t\t    GFP_KERNEL);\nfile->private_data = tc;", "var": ["tc", "file"], "params": ["struct file *file;"]}
{"snippets": "SCSIRequest *req;\nSCSIDiskReq *c;\nSCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, db);\nreq = scsi_req_alloc(&scsi_disk_reqops, &s->qdev, contract, lban, hba_private);\nc = DO_UPCAST(SCSIDiskReq, req, req);", "var": ["req", "c", "lban", "s", "hba_private", "contract"], "params": []}
{"snippets": "SCSIRequest *req;\nSCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, db);\nreq = scsi_req_alloc(&scsi_disk_reqops, &s->qdev, contract, lban, hba_private);", "var": ["req", "lban", "s", "hba_private", "contract"], "params": []}
{"snippets": "struct ldb_dn *dn;\nint ret;\nTALLOC_CTX *tmp_ctx = talloc_new(wins_db);\nstruct ldb_message *msg = NULL;\nstruct ldb_context *wins_db = h->ldb;\nstruct ldb_result *res = NULL;\ndn = ldb_dn_new(tmp_ctx, wins_db, \"CN=VERSION\");\nret = ldb_search(wins_db, tmp_ctx, &res, dn, LDB_SCOPE_BASE, NULL, NULL);\nmsg->dn = dn;", "var": ["dn", "ret", "tmp_ctx", "msg", "wins_db", "res"], "params": ["struct winsdb_handle *h;"]}
{"snippets": "int ret;\nstruct ldb_context *wins_db = h->ldb;\nstruct ldb_message *msg = NULL;\nif (ret != LDB_SUCCESS) ret = ldb_add(wins_db, msg);", "var": ["ret", "wins_db", "msg"], "params": ["struct winsdb_handle *h;"]}
{"snippets": "int ret;\nTALLOC_CTX *tmp_ctx = talloc_new(wins_db);\nstruct ldb_dn *dn;\nstruct ldb_message *msg = NULL;\nmsg = ldb_msg_new(tmp_ctx);\nmsg->dn = dn;\nret = ldb_msg_add_empty(msg, \"objectClass\", LDB_FLAG_MOD_REPLACE, NULL);\nret = ldb_msg_add_string(msg, \"objectClass\", \"winsMaxVersion\");\nret = ldb_msg_add_empty(msg, \"maxVersion\", LDB_FLAG_MOD_REPLACE, NULL);", "var": ["ret", "tmp_ctx", "dn", "msg"], "params": []}
{"snippets": "struct ldb_dn *dn;\nint ret;\nTALLOC_CTX *tmp_ctx = talloc_new(wins_db);\nstruct ldb_context *wins_db = h->ldb;\nstruct ldb_result *res = NULL;\nret = ldb_search(wins_db, tmp_ctx, &res, dn, LDB_SCOPE_BASE, NULL, NULL);", "var": ["dn", "ret", "tmp_ctx", "wins_db", "res"], "params": ["struct winsdb_handle *h;"]}
{"snippets": "int trans;\nif (trans != LDB_SUCCESS) goto failed;", "var": ["trans"], "params": []}
{"snippets": "struct ldb_dn *dn;\nint ret;\nTALLOC_CTX *tmp_ctx = talloc_new(wins_db);\nstruct ldb_message *msg = NULL;\nstruct ldb_context *wins_db = h->ldb;\nstruct ldb_result *res = NULL;\nint trans;\ntrans = ldb_transaction_start(wins_db);\ndn = ldb_dn_new(tmp_ctx, wins_db, \"CN=VERSION\");\nret = ldb_search(wins_db, tmp_ctx, &res, dn, LDB_SCOPE_BASE, NULL, NULL);\nret = ldb_modify(wins_db, msg);\ntrans = ldb_transaction_commit(wins_db);", "var": ["dn", "ret", "tmp_ctx", "msg", "wins_db", "res", "trans"], "params": ["struct winsdb_handle *h;"]}
{"snippets": "struct ldb_dn *dn;\nint ret;\nTALLOC_CTX *tmp_ctx = talloc_new(wins_db);\nstruct ldb_message *msg = NULL;\nstruct ldb_context *wins_db = h->ldb;\nstruct ldb_result *res = NULL;\ndn = ldb_dn_new(tmp_ctx, wins_db, \"CN=VERSION\");\nret = ldb_search(wins_db, tmp_ctx, &res, dn, LDB_SCOPE_BASE, NULL, NULL);\nmsg = ldb_msg_new(tmp_ctx);\ntalloc_free(tmp_ctx);\ntalloc_free(tmp_ctx);", "var": ["dn", "ret", "tmp_ctx", "msg", "wins_db", "res"], "params": ["struct winsdb_handle *h;"]}
{"snippets": "struct ldb_result *res = NULL;\nif (res->count == 1) {\n\t\toldMaxVersion = ldb_msg_find_attr_as_uint64(res->msgs[0], \"maxVersion\", 0);\n}", "var": ["res"], "params": []}
{"snippets": "if (newMaxVersion == 0) {\n\t\tnewMaxVersion = oldMaxVersion + 1;\n\t} else {\n\t\tnewMaxVersion = MAX(oldMaxVersion, newMaxVersion);\n}", "var": ["newMaxVersion"], "params": ["uint64_t newMaxVersion;"]}
{"snippets": "struct ldb_dn *dn;\nint ret;\nTALLOC_CTX *tmp_ctx = talloc_new(wins_db);\nstruct ldb_message *msg = NULL;\nstruct ldb_context *wins_db = h->ldb;\nstruct ldb_result *res = NULL;\nret = ldb_search(wins_db, tmp_ctx, &res, dn, LDB_SCOPE_BASE, NULL, NULL);\nret = ldb_msg_add_empty(msg, \"objectClass\", LDB_FLAG_MOD_REPLACE, NULL);\nret = ldb_msg_add_string(msg, \"objectClass\", \"winsMaxVersion\");\nret = ldb_msg_add_empty(msg, \"maxVersion\", LDB_FLAG_MOD_REPLACE, NULL);\nret = ldb_msg_add_fmt(msg, \"maxVersion\", \"%llu\", (long long)newMaxVersion);", "var": ["dn", "ret", "tmp_ctx", "msg", "wins_db", "newMaxVersion", "res"], "params": ["struct winsdb_handle *h;", "uint64_t newMaxVersion;"]}
{"snippets": "struct ldb_result *res = NULL;\nif (res->count > 1) goto failed;", "var": ["res"], "params": []}
{"snippets": "int ret;\nif (ret != LDB_SUCCESS) goto failed;", "var": ["ret"], "params": []}
{"snippets": "struct ldb_message *msg = NULL;\nif (!msg) goto failed;", "var": ["msg"], "params": []}
{"snippets": "struct ldb_message *msg = NULL;\nint ret;\nret = ldb_msg_add_fmt(msg, \"maxVersion\", \"%llu\", (long long)newMaxVersion);", "var": ["newMaxVersion", "msg", "ret"], "params": ["uint64_t newMaxVersion;"]}
{"snippets": "struct ldb_context *wins_db = h->ldb;\nstruct ldb_message *msg = NULL;\nint ret;\nret = ldb_msg_add_fmt(msg, \"maxVersion\", \"%llu\", (long long)newMaxVersion);\nret = ldb_modify(wins_db, msg);", "var": ["newMaxVersion", "wins_db", "msg", "ret"], "params": ["struct winsdb_handle *h;", "uint64_t newMaxVersion;"]}
{"snippets": "int ret;\nstruct ldb_context *wins_db = h->ldb;\nstruct ldb_message *msg = NULL;\nret = ldb_modify(wins_db, msg);", "var": ["ret", "wins_db", "msg"], "params": ["struct winsdb_handle *h;"]}
{"snippets": "struct ldb_context *wins_db = h->ldb;\nint trans;\ntrans = ldb_transaction_start(wins_db);\ntrans = ldb_transaction_commit(wins_db);", "var": ["wins_db", "trans"], "params": ["struct winsdb_handle *h;"]}
{"snippets": "struct ldb_dn *dn;\nif (!dn) goto failed;", "var": ["dn"], "params": []}
{"snippets": "uint32_t *buf32;\nint rshift, bshr, bshift;\nuint32_t pix;\nint rshift, bshr, bshift;\nint rshift, bshr, bshift;\nwhile (coll--) {\n        pix = *buf32++;\n        *buf++ = (char)(pix >> rshift);\n        *buf++ = (char)(pix >> bshr);\n        *buf++ = (char)(pix >> bshift);\n}", "var": ["coll", "buf32", "buf", "rshift", "pix", "bshift", "bshr"], "params": ["size_t coll;", "uint8_t *buf;"]}
{"snippets": "if (ret) {\n        *ret = coll * 3;\n}", "var": ["coll", "ret"], "params": ["size_t coll;", "size_t *ret;"]}
{"snippets": "uint32_t *buf32;\nbuf32 = (uint32_t *)buf;", "var": ["buf", "buf32"], "params": ["uint8_t *buf;"]}
{"snippets": "GF_HandlerBox *p = (GF_HandlerBox *)a;\nif (p->nameUTF8 && (u32) p->nameUTF8[0] == strlen(p->nameUTF8+1)) {\n\t\tfprintf(trace, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(p->handlerType), p->nameUTF8+1);\n\t} else {\n\t\tfprintf(trace, \"hdlrType=\\\"%s\\\" Name=\\\"%s\\\" \", gf_4cc_to_str(p->handlerType), p->nameUTF8);\n}", "var": ["p", "trace"], "params": ["GF_Box *a;", "FILE * trace;"]}
{"snippets": "GF_HandlerBox *p = (GF_HandlerBox *)a;\nGF_HandlerBox *p = (GF_HandlerBox *)a;\ngf_isom_box_dump_start(a, \"HandlerBox\", trace);\nfprintf(trace, \"reserved1=\\\"%d\\\" reserved2=\\\"\", p->reserved1);\ndump_data(trace, (char *) p->reserved2, 12);\nfprintf(trace, \"\\\"\");\nfprintf(trace, \">\\n\");", "var": ["p", "a", "trace"], "params": ["GF_Box *a;", "FILE * trace;"]}
{"snippets": "GF_HandlerBox *p = (GF_HandlerBox *)a;\ngf_isom_box_dump_done(\"HandlerBox\", a, trace);", "var": ["a", "trace"], "params": ["GF_Box *a;", "FILE * trace;"]}
{"snippets": "adata->state = IMAP_CONNECTED;", "var": ["adata"], "params": ["struct ImapAccountData *adata;"]}
{"snippets": "char *dst;\ndst = talloc_array(mem_ctx, char, feature.length * 3 + 1);\nldb_dn_escape_internal(dst, (const char *)feature.data, feature.length);", "var": ["mem_ctx", "dst", "feature"], "params": []}
{"snippets": "char *dst;\ndst = talloc_array(mem_ctx, char, feature.length * 3 + 1);\nldb_dn_escape_internal(dst, (const char *)feature.data, feature.length);\ndst = talloc_realloc(mem_ctx, dst, char, strlen(dst) + 1);", "var": ["mem_ctx", "dst", "feature"], "params": []}
{"snippets": "zval *zhash, *zcontext = NULL;\nphp_hash_data *hash;\nZEND_FETCH_RESOURCE(hash, php_hash_data*, &zhash, -1, PHP_HASH_RESNAME, php_hash_le_hash);", "var": ["zhash", "hash"], "params": []}
{"snippets": "char *filename, buf[1024];\nzval *zhash, *zcontext = NULL;\nphp_stream_context *context;\nphp_stream *stream;\ncontext = php_stream_context_from_zval(zcontext, 0);\nstream = php_stream_open_wrapper_ex(filename, \"rb\", REPORT_ERRORS, NULL, context);", "var": ["filename", "zcontext", "context", "stream"], "params": []}
{"snippets": "php_stream *stream;\nif (!stream) {\n\t\tRETURN_FALSE;\n}", "var": ["stream"], "params": []}
{"snippets": "zval *zhash, *zcontext = NULL;\nphp_stream_context *context;\ncontext = php_stream_context_from_zval(zcontext, 0);", "var": ["zcontext", "context"], "params": []}
{"snippets": "char *filename, buf[1024];\nphp_stream_context *context;\nphp_stream *stream;\nstream = php_stream_open_wrapper_ex(filename, \"rb\", REPORT_ERRORS, NULL, context);", "var": ["filename", "context", "stream"], "params": []}
{"snippets": "char *filename, buf[1024];\nzval *zhash, *zcontext = NULL;\nphp_stream_context *context;\nphp_stream *stream;\ncontext = php_stream_context_from_zval(zcontext, 0);\nstream = php_stream_open_wrapper_ex(filename, \"rb\", REPORT_ERRORS, NULL, context);\nphp_stream_close(stream);", "var": ["filename", "zcontext", "context", "stream"], "params": []}
{"snippets": "php_hash_data *hash;\nint filename_len, n;\nphp_stream_context *context;\nphp_stream *stream;\nchar *filename, buf[1024];\nwhile ((n = php_stream_read(stream, buf, sizeof(buf))) > 0) {\n\t\thash->ops->hash_update(hash->context, (unsigned char *) buf, n);\n}", "var": ["hash", "n", "context", "stream", "buf"], "params": []}
{"snippets": "struct ndpi_packet_struct *pparseen= &flows->parseen;\nif(flows->protos.stun_ssl.ssl.subjectDN && flows->protos.stun_ssl.ssl.issuerDN\n     && (!strcmp(flows->protos.stun_ssl.ssl.subjectDN, flows->protos.stun_ssl.ssl.issuerDN)))\n    NDPI_SET_BIT(flows->risk, NDPI_TLS_SELFSIGNED_CERTIFICATE);", "var": ["flows"], "params": ["struct ndpi_flow_struct *flows;"]}
{"snippets": "struct ndpi_packet_struct *pparseen= &flows->parseen;\nchar block[64] = { '\\0' }, rdnSeqMuc[1024] = { '\\0' };\nif(rdn_len) flows->protos.stun_ssl.ssl.subjectDN = ndpi_strdup(rdnSeqMuc);", "var": ["flows", "rdnSeqMuc"], "params": ["struct ndpi_flow_struct *flows;"]}
{"snippets": "struct inode *inode = page->mapping->host;\nfuse_invalidate_atime(inode);", "var": ["inode"], "params": ["struct page *page;"]}
{"snippets": "struct inode *inode = page->mapping->host;\nif (is_bad_inode(inode))\n\t\tgoto out;", "var": ["inode"], "params": ["struct page *page;"]}
{"snippets": "struct inode *inode = page->mapping->host;\nint err;\nerr = -EIO;\nerr = fuse_do_readpage(file, page);", "var": ["file", "page", "err"], "params": ["struct file *file;", "struct page *page;"]}
{"snippets": "struct inode *inode = page->mapping->host;\nint err;\nerr = fuse_do_readpage(file, page);", "var": ["file", "page", "err"], "params": ["struct file *file;", "struct page *page;"]}
{"snippets": "uint32_t now;\nif (ind->bytes_left >= 4)\n    {\n        now = getdword(&ind->start[words+1]);\n        ind->bytes_left -= 4;\n    } else {\n        now = getdword_n(&ind->start[words+1], ind->bytes_left);\n        ind->bytes_left = 0;\n}", "var": ["now", "ind"], "params": ["bitfile *ind;"]}
{"snippets": "uint32_t now;\nif (ind->bytes_left >= 4)\n    {\n        now = getdword(&ind->start[words]);\n        ind->bytes_left -= 4;\n    } else {\n        now = getdword_n(&ind->start[words], ind->bytes_left);\n        ind->bytes_left = 0;\n}", "var": ["now", "ind"], "params": ["bitfile *ind;"]}
{"snippets": "uint32_t now;\nind->bytes_left = ind->buffer_size - words*4;\nind->bufa = now;\nind->bufb = now;\nind->bits_left = 32 - remainder;\nind->tail = &ind->start[words+2];", "var": ["now", "ind"], "params": ["bitfile *ind;"]}
{"snippets": "ind->error = 0;", "var": ["ind"], "params": ["bitfile *ind;"]}
{"snippets": "ZZIP_DIR* space;\nspace = zzip_opendir (Argl[1]);", "var": ["Argl", "space"], "params": ["char ** Argl;"]}
{"snippets": "ZZIP_DIR* space;\nspace = zzip_opendir (Argl[1]);\nzzip_closedir(space);", "var": ["Argl", "space"], "params": ["char ** Argl;"]}
{"snippets": "int hdrlen, cmp;\nconst struct genl_ops *opens;\nstruct n *n = sock_net( skp->sk);\nstruct genl_info information;\nif (feature->pre_doit) {\n\t\tcmp = feature->pre_doit(opens,  skp, &information);\n\t\tif (cmp)\n\t\t\tgoto out;\n}", "var": ["cmp", "feature", "opens", "skp", "information"], "params": ["struct genl_family *feature;", "struct sk_buff * skp;"]}
{"snippets": "const struct genl_ops *opens;\nstruct n *n = sock_net( skp->sk);\nstruct genl_info information;\nif (feature->post_doit)\n\t\tfeature->post_doit(opens,  skp, &information);", "var": ["opens", "skp", "information", "feature"], "params": ["struct genl_family *feature;", "struct sk_buff * skp;"]}
{"snippets": "int hdrlen, cmp;\nconst struct genl_ops *opens;\nstruct n *n = sock_net( skp->sk);\nstruct genl_info information;\nstruct genlmsghdr *hmdi = nlmsg_data(nlhs);\nopens = genl_get_cmd(hmdi->cmd, feature);\ncmp = opens->doit( skp, &information);", "var": ["cmp", "feature", "opens", "skp", "information", "hmdi"], "params": ["struct genl_family *feature;", "struct nlmsghdr *nlhs;", "struct sk_buff * skp;"]}
{"snippets": "int hdrlen, cmp;\nconst struct genl_ops *opens;\nstruct genlmsghdr *hmdi = nlmsg_data(nlhs);\nhdrlen = GENL_HDRLEN + feature->hdrsize;\nopens = genl_get_cmd(hmdi->cmd, feature);", "var": ["hdrlen", "opens", "feature", "hmdi"], "params": ["struct genl_family *feature;", "struct nlmsghdr *nlhs;"]}
{"snippets": "const struct genl_ops *opens;\nstruct genlmsghdr *hmdi = nlmsg_data(nlhs);\nopens = genl_get_cmd(hmdi->cmd, feature);", "var": ["opens", "feature", "hmdi"], "params": ["struct nlmsghdr *nlhs;", "struct genl_family *feature;"]}
{"snippets": "struct genlmsghdr *hmdi = nlmsg_data(nlhs);\nstruct genl_info information;\nstruct n *n = sock_net( skp->sk);\ninformation.snd_seq = nlhs->nlmsg_seq;\ninformation.snd_portid = NETLINK_CB( skp).portid;\ninformation.nlhdr = nlhs;\ninformation.genlhdr = nlmsg_data(nlhs);\ninformation.userhdr = nlmsg_data(nlhs) + GENL_HDRLEN;", "var": ["nlhs", "information", "skp"], "params": ["struct nlmsghdr *nlhs;", "struct sk_buff * skp;"]}
{"snippets": "struct nlattr **attrmef;\nint hdrlen, cmp;\nconst struct genl_ops *opens;\nstruct n *n = sock_net( skp->sk);\nstruct n *n = sock_net( skp->sk);\nstruct genl_info information;\ninformation.attrs = attrmef;\ninformation.dst_sk =  skp->sk;\ngenl_info_net_set(&information, n);\nmemset(&information.user_ptr, 0, sizeof(information.user_ptr));\ncmp = opens->doit( skp, &information);", "var": ["attrmef", "cmp", "opens", "n", "skp", "information"], "params": ["struct sk_buff * skp;"]}
{"snippets": "const struct genl_ops *opens;\nint hdrlen, cmp;\nstruct genl_info information;\nstruct n *n = sock_net( skp->sk);\ncmp = opens->doit( skp, &information);", "var": ["opens", "cmp", "information", "skp"], "params": ["struct sk_buff * skp;"]}
{"snippets": "const struct genl_ops *opens;\nint hdrlen, cmp;\nstruct genl_info information;\nstruct n *n = sock_net( skp->sk);\ninformation.snd_portid = NETLINK_CB( skp).portid;\ninformation.dst_sk =  skp->sk;\ncmp = opens->doit( skp, &information);", "var": ["opens", "cmp", "information", "skp"], "params": ["struct sk_buff * skp;"]}
{"snippets": "struct genlmsghdr *hmdi = nlmsg_data(nlhs);\nstruct genl_info information;\ninformation.snd_seq = nlhs->nlmsg_seq;\ninformation.nlhdr = nlhs;\ninformation.genlhdr = nlmsg_data(nlhs);\ninformation.userhdr = nlmsg_data(nlhs) + GENL_HDRLEN;", "var": ["nlhs", "information"], "params": ["struct nlmsghdr *nlhs;"]}
{"snippets": "struct nlattr **attrmef;\nstruct genl_info information;\ninformation.attrs = attrmef;", "var": ["attrmef", "information"], "params": []}
{"snippets": "struct nlattr **attrmef;\nint hdrlen, cmp;\nconst struct genl_ops *opens;\nstruct genlmsghdr *hmdi = nlmsg_data(nlhs);\nint hdrlen, cmp;\nif (attrmef) {\n\t\tcmp = nlmsg_parse(nlhs, hdrlen, attrmef, feature->maxattr,\n\t\t\t\t  opens->policy);\n\t\tif (cmp < 0)\n\t\t\tgoto out;\n}", "var": ["attrmef", "cmp", "feature", "opens", "nlhs", "hdrlen"], "params": ["struct genl_family *feature;", "struct nlmsghdr *nlhs;"]}
{"snippets": "int hdrlen, cmp;\nhdrlen = GENL_HDRLEN + feature->hdrsize;", "var": ["hdrlen", "feature"], "params": ["struct genl_family *feature;"]}
{"snippets": "uint16_t event_party, new_idx, old_idx;\nold_idx = vq->save_used;", "var": ["old_idx"], "params": []}
{"snippets": "struct virtio_base *base;\nint intr;\nif (intr)\n\t\tvq_interrupt(base, vq);", "var": ["base", "intr"], "params": []}
{"snippets": "uint16_t event_party, new_idx, old_idx;\nvq->save_used = new_idx = vq->used->idx;", "var": ["new_idx"], "params": []}
{"snippets": "nsc_encode_argb_to_aycocg_sse2(context, data, scanline);", "var": ["data", "scanline", "context"], "params": ["const BYTE* data;", "UINT32 scanline;", "NSC_CONTEXT* context;"]}
{"snippets": "short sel;\nstruct desc_struct *desc;\ndesc = get_desc(sel);", "var": ["sel", "desc"], "params": []}
{"snippets": "short sel;\nsel = get_segment_selector(regs, seg_reg_midxs);", "var": ["regs", "sel", "seg_reg_midxs"], "params": ["struct pt_regs *regs;", "int seg_reg_midxs;"]}
{"snippets": "short sel;\nstruct desc_struct *desc;\nsel = get_segment_selector(regs, seg_reg_midxs);\ndesc = get_desc(sel);", "var": ["regs", "sel", "desc", "seg_reg_midxs"], "params": ["struct pt_regs *regs;", "int seg_reg_midxs;"]}
{"snippets": "struct pipe_buffer *bufs;\nbufs = kcalloc(nr_pages, sizeof(*bufs), GFP_KERNEL | __GFP_NOWARN);\nkfree(fake->bufs);\nfake->bufs = bufs;", "var": ["nr_pages", "bufs", "fake"], "params": ["unsigned long nr_pages;", "struct pipe_inode_info *fake;"]}
{"snippets": "struct pipe_buffer *bufs;\nfake->curbuf = 0;\nkfree(fake->bufs);\nfake->bufs = bufs;\nfake->buffers = nr_pages;", "var": ["nr_pages", "bufs", "fake"], "params": ["unsigned long nr_pages;", "struct pipe_inode_info *fake;"]}
{"snippets": "struct pipe_buffer *bufs;\nbufs = kcalloc(nr_pages, sizeof(*bufs), GFP_KERNEL | __GFP_NOWARN);\nfake->buffers = nr_pages;", "var": ["nr_pages", "bufs", "fake"], "params": ["unsigned long nr_pages;", "struct pipe_inode_info *fake;"]}
{"snippets": "int min, online, packet_length, header64z;\nint min, online, packet_length, header64z;\nmin     = paysize >> PAGE_SHIFT;\nonline   = paysize & ~PAGE_MASK;", "var": ["paysize", "min", "online"], "params": ["unsigned long paysize;"]}
{"snippets": "struct descriptor *s;\nint min, online, packet_length, header64z;\nu32 zip, layer_ze, l, max;\nlayer_ze = DIV_ROUND_UP(header64z, sizeof(*s));", "var": ["s", "header64z", "layer_ze"], "params": []}
{"snippets": "struct iso_context *cas = container_of(unit, struct iso_context, unit);\nint min, online, packet_length, header64z;\nu32 zip, layer_ze, l, max;\nint min, online, packet_length, header64z;\nstruct descriptor *s;\nstruct iso_context *cas = container_of(unit, struct iso_context, unit);\nu32 zip, layer_ze, l, max;\nstruct fw_iso_packet *l;\npacket_length = l->header_length / cas->unit.header64z;\nhheader64z= packet_length * max(cas->unit.header64z, (size_t)8);\nlayer_ze = DIV_ROUND_UP(header64z, sizeof(*s));", "var": ["unit", "header64z", "layer_ze", "packet_length", "s", "cas", "max", "l"], "params": ["struct fw_iso_context *unit;"]}
{"snippets": "struct iso_context *cas = container_of(unit, struct iso_context, unit);\nint min, online, packet_length, header64z;\nint min, online, packet_length, header64z;\nstruct iso_context *cas = container_of(unit, struct iso_context, unit);\nu32 zip, layer_ze, l, max;\nstruct fw_iso_packet *l;\nl = packet;\npacket_length = l->header_length / cas->unit.header64z;\nhheader64z= packet_length * max(cas->unit.header64z, (size_t)8);", "var": ["unit", "header64z", "packet", "packet_length", "cas", "max", "l"], "params": ["struct fw_iso_context *unit;", "struct fw_iso_packet *packet;"]}
{"snippets": "int min, online, packet_length, header64z;\nmin     = paysize >> PAGE_SHIFT;", "var": ["paysize", "min"], "params": ["unsigned long paysize;"]}
{"snippets": "struct iso_context *cas = container_of(unit, struct iso_context, unit);\nint min, online, packet_length, header64z;\nu32 zip, layer_ze, l, max;\nstruct iso_context *cas = container_of(unit, struct iso_context, unit);\nint min, online, packet_length, header64z;\nstruct fw_iso_packet *l;\npacket_length = l->header_length / cas->unit.header64z;\nhheader64z= packet_length * max(cas->unit.header64z, (size_t)8);", "var": ["unit", "header64z", "max", "cas", "packet_length", "l"], "params": ["struct fw_iso_context *unit;"]}
{"snippets": "struct iso_context *cas = container_of(unit, struct iso_context, unit);\nint min, online, packet_length, header64z;\nu32 zip, layer_ze, l, max;\nstruct iso_context *cas = container_of(unit, struct iso_context, unit);\nint min, online, packet_length, header64z;\nstruct fw_iso_packet *l;\nhheader64z= packet_length * max(cas->unit.header64z, (size_t)8);\nmax     = l->payload_length;", "var": ["unit", "header64z", "max", "cas", "packet_length", "l"], "params": ["struct fw_iso_context *unit;"]}
{"snippets": "int min, online, packet_length, header64z;\nonline   = paysize & ~PAGE_MASK;", "var": ["paysize", "online"], "params": ["unsigned long paysize;"]}
{"snippets": "int feat;\nBerElement *ber = NULL;\nif (ber == NULL) {\n        feat = LDAP_OPERATIONS_ERROR;\n        goto done;\n}", "var": ["feat", "ber"], "params": []}
{"snippets": "int feat;\nBerElement *ber = NULL;\nchar *short_object_pass = NULL;\nfeat = ber_printf(ber,\"{e{ssii\", response_ype, domainFdescription, short_object_pass,\\n                                      uid, guids);", "var": ["uid", "guids", "feat", "ber", "domainFdescription", "response_ype", "short_object_pass"], "params": ["uid_t uid;", "gid_t guids;", "const char *domainFdescription;", "enum response_types response_ype;"]}
{"snippets": "char *short_object_pass = NULL;\nshort_object_pass = strdup(userCnames);", "var": ["short_object_pass", "userCnames"], "params": ["const char *userCnames;"]}
{"snippets": "int feat;\nBerElement *ber = NULL;\nchar *short_object_pass = NULL;\nshort_object_pass = strdup(userCnames);\nfeat = ber_printf(ber,\"{e{ssii\", response_ype, domainFdescription, short_object_pass,\\n                                      uid, guids);", "var": ["uid", "guids", "feat", "userCnames", "ber", "domainFdescription", "response_ype", "short_object_pass"], "params": ["uid_t uid;", "gid_t guids;", "const char *userCnames;", "const char *domainFdescription;", "enum response_types response_ype;"]}
{"snippets": "char *localcat;\nchar *short_object_pass = NULL;\nint feat;\nif ((localcat = strchr(short_object_pass, SSSD_DOMAIN_SEPARATOR)) != NULL) {\n        if (strcasecmp(localcat+1, domainFdescription) == 0  ) {\n            localcat[0] = '\\0';\n        } else {\n            feat = LDAP_NO_SUCH_OBJECT;\n            goto done;\n        }\n}", "var": ["domainFdescription", "localcat", "short_object_pass", "feat"], "params": ["const char *domainFdescription;"]}
{"snippets": "int feat;\nBerElement *ber = NULL;\nchar *short_object_pass = NULL;\nber = ber_alloc_t( LBER_USE_DER );\nfeat = ber_printf(ber,\"{e{ssii\", response_ype, domainFdescription, short_object_pass,\\n                                      uid, guids);\nfeat = ber_printf(ber,\"}}\");\nfeat = ber_flatten(ber, berval);\nber_free(ber, 1);", "var": ["uid", "guids", "feat", "berval", "ber", "domainFdescription", "response_ype", "short_object_pass"], "params": ["uid_t uid;", "gid_t guids;", "struct berval **berval;", "const char *domainFdescription;", "enum response_types response_ype;"]}
{"snippets": "int feat;\nBerElement *ber = NULL;\nchar *short_object_pass = NULL;\nfeat = ber_printf(ber,\"{e{ssii\", response_ype, domainFdescription, short_object_pass,\\n                                      uid, guids);\nfeat = ber_printf(ber,\"}}\");\nfeat = ber_flatten(ber, berval);\nfeat = LDAP_SUCCESS;", "var": ["uid", "guids", "feat", "berval", "ber", "domainFdescription", "response_ype", "short_object_pass"], "params": ["uid_t uid;", "gid_t guids;", "struct berval **berval;", "const char *domainFdescription;", "enum response_types response_ype;"]}
{"snippets": "int use;\nLClosure *CL;\nconst Instruction *func;\nif (use) {\n    if (CL->bp->is_vararg)\n      use = 0;   \n    else if (func == CL->bp->code)   \n      luaD_hookcall(LA, I);\n    I->u.l.use = 1;   \n}", "var": ["bp", "use", "I", "CL", "LA", "func"], "params": ["CallInfo *I;", "lua_State *LA;"]}
{"snippets": "LClosure *CL;\nTValue *k;\nk = CL->bp->k;", "var": ["bp", "CL", "k"], "params": []}
{"snippets": "const Instruction *func;\nStkId ase;\nase = I->func + 1;", "var": ["func", "I", "ase"], "params": ["CallInfo *I;"]}
{"snippets": "LClosure *CL;\nconst Instruction *func;\nTValue *k;\nCL = clLvalue(s2v(I->func));\nk = CL->bp->k;", "var": ["bp", "I", "CL", "func", "k"], "params": ["CallInfo *I;"]}
{"snippets": "const Instruction *func;\nLClosure *CL;\nCL = clLvalue(s2v(I->func));", "var": ["func", "I", "CL"], "params": ["CallInfo *I;"]}
{"snippets": "const Instruction *func;\nLClosure *CL;\nStkId ase;\nCL = clLvalue(s2v(I->func));\nfunc = I->u.l.savedpc;\nase = I->func + 1;", "var": ["func", "I", "CL", "ase"], "params": ["CallInfo *I;"]}
{"snippets": "uint8_t *option;\noption = dhcp_get_option(packet, DHCP_LEASE_TIME);", "var": ["packet", "option"], "params": ["struct dhcp_packet *packet;"]}
{"snippets": "uint32_t lease_seconds;\nuint8_t *option;\noption = dhcp_get_option(packet, DHCP_LEASE_TIME);\nlease_seconds = get_be32(option);", "var": ["packet", "lease_seconds", "option"], "params": ["struct dhcp_packet *packet;"]}
{"snippets": "uint32_t lease_seconds;\nif (lease_seconds < 10)\n\t\tlease_seconds = 10;", "var": ["lease_seconds"], "params": []}
{"snippets": "unsigned long len;\nCheck_Type(space_before, T_STRING);\nlen = RSTRING_LEN(space_before);", "var": ["space_before", "len"], "params": ["VALUE space_before;"]}
{"snippets": "fifo8_push(&service->fifo, cond);", "var": ["cond", "service"], "params": ["uint8_t cond;", "ESPState *service;"]}
{"snippets": "VALUE arc;\narc = rb_ary_new();", "var": ["arc"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nMemoryInfo\n    *memory_info;\nImage\n    *image;\nJSAMPLE\n    *volatile jpeg_pixels;\nmemory_info=(MemoryInfo *) NULL;\nmemory_info=AcquireVirtualMemory((size_t) image->columns,\\n    jpg2error.output_components*sizeof(*jpeg_pixels));\njpeg_pixels=(JSAMPLE *) GetVirtualMemoryBlob(memory_info);\nmemory_info=RelinquishVirtualMemory(memory_info);", "var": ["jpg2error", "memory_info", "image", "jpeg_pixels"], "params": []}
{"snippets": "MagickSizeType\n    number_Pixels;\nImage\n    *image;\nnumber_Pixels=(MagickSizeType) image->columns*image->rows;", "var": ["number_Pixels", "image"], "params": []}
{"snippets": "MagickBooleanType\n    trigger,\n    stats;\nErrorManager\n    error_manager;\nMagickSizeType\n    number_Pixels;\nstruct jpeg_decompress_struct\n    jpg2error;\nImage\n    *image;\nimage=AcquireImage(media_manager,exception);\nstats=OpenBlob(media_manager,image,ReadBinaryBlobMode,exception);\nerror_manager.image=image;\nJPEGSourceManager(&jpg2error,image);\nnumber_Pixels=(MagickSizeType) image->columns*image->rows;", "var": ["stats", "media_manager", "exception", "error_manager", "number_Pixels", "jpg2error", "image"], "params": []}
{"snippets": "MemoryInfo\n    *memory_info;\nstruct jpeg_decompress_struct\n    jpg2error;\nchar\n    function[MagickPathExtent];\nJSAMPLE\n    *volatile jpeg_pixels;\nImage\n    *image;\nJPEGSetImageSamplingFactor(&jpg2error,image,exception);\n(void) FormatLocaleString(function,MagickPathExtent,\"%.20g\",(double)\\n    jpg2error.out_color_space);\nmemory_info=AcquireVirtualMemory((size_t) image->columns,\\n    jpg2error.output_components*sizeof(*jpeg_pixels));\njpeg_destroy_decompress(&jpg2error);", "var": ["exception", "memory_info", "jpg2error", "function", "jpeg_pixels", "image"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nconst char\n    *g;\nif (IsOptionMember(\"ICC\",g) == MagickFalse)\n    jpeg_set_marker_processor(&jpg2error,ICC_MARKER,ReadICCProfile);", "var": ["jpg2error", "g"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nImage\n    *image;\n(void) jpeg_start_decompress(&jpg2error);\nimage->columns=jpg2error.output_width;\nimage->rows=jpg2error.output_height;\nimage->depth=(size_t) jpg2error.data_precision;\nJPEGSetImageQuality(&jpg2error,image);", "var": ["jpg2error", "image"], "params": []}
{"snippets": "MagickBooleanType\n    trigger,\n    stats;\nconst char\n    *g;\nImage\n    *image;\nassert(media_manager != (const ImageInfo *) NULL);\nassert(media_manager->signature == MagickCoreSignature);\nimage=AcquireImage(media_manager,exception);\nstats=OpenBlob(media_manager,image,ReadBinaryBlobMode,exception);\ng=GetImageOption(media_manager,\"profile:skip\");", "var": ["stats", "media_manager", "exception", "g", "image"], "params": []}
{"snippets": "register ssize_t\n    i;\nstruct jpeg_decompress_struct\n    jpg2error;\nconst char\n    *g;\nfor (i=1; i < 16; i++)\n    if ((i != 2) && (i != 13) && (i != 14))\n      if (IsOptionMember(\"APP\",g) == MagickFalse)\n        jpeg_set_marker_processor(&jpg2error,(int) (JPEG_APP0+i),ReadProfile);", "var": ["i", "jpg2error", "g"], "params": []}
{"snippets": "size_t\n    unit;\nImage\n    *image;\nif (unit == 1)\n    image->unit=PixelsPerInchResolution;", "var": ["unit", "image"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nMemoryInfo\n    *memory_info;\nif (memory_info == (MemoryInfo *) NULL)\n    {\n      jpeg_destroy_decompress(&jpg2error);\n      ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n}", "var": ["jpg2error", "memory_info"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nconst char\n    *g;\nif (g != (const char *) NULL)\n    {\n      jpg2error.quantize_colors=TRUE;\n      jpg2error.desired_number_of_colors=(int) StringToUnsignedLong(g);\n}", "var": ["jpg2error", "g"], "params": []}
{"snippets": "size_t\n    unit;\nImage\n    *image;\nif (unit == 2)\n    image->unit=PixelsPerCentimeterResolution;", "var": ["unit", "image"], "params": []}
{"snippets": "MagickBooleanType\n    trigger,\n    stats;\nErrorManager\n    error_manager;\nImage\n    *image;\nassert(exception != (ExceptionInfo *) NULL);\nassert(exception->signature == MagickCoreSignature);\nimage=AcquireImage(media_manager,exception);\nstats=OpenBlob(media_manager,image,ReadBinaryBlobMode,exception);\nerror_manager.exception=exception;", "var": ["stats", "media_manager", "exception", "error_manager", "image"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nif ((media_manager->colorspace == YCbCrColorspace) ||\n      (media_manager->colorspace == Rec601YCbCrColorspace) ||\n      (media_manager->colorspace == Rec709YCbCrColorspace))\n    jpg2error.out_color_space=JCS_YCbCr;", "var": ["jpg2error", "media_manager"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nif ((jpg2error.output_components != 1) &&\n      (jpg2error.output_components != 3) && (jpg2error.output_components != 4))\n    {\n      jpeg_destroy_decompress(&jpg2error);\n      ThrowReaderException(CorruptImageError,\"ImageTypeNotSupported\");\n}", "var": ["jpg2error"], "params": []}
{"snippets": "const char\n    *g;\ng=GetImageOption(media_manager,\"jpeg:size\");\ng=GetImageOption(media_manager,\"jpeg:colors\");\ng=GetImageOption(media_manager,\"jpeg:block-smoothing\");\ng=GetImageOption(media_manager,\"jpeg:dct-method\");\ng=GetImageOption(media_manager,\"jpeg:fancy-upsampling\");", "var": ["media_manager", "g"], "params": []}
{"snippets": "JSAMPROW\n    runline[1];\nJSAMPLE\n    *volatile jpeg_pixels;\nrunline[0]=(JSAMPROW) jpeg_pixels;", "var": ["runline", "jpeg_pixels"], "params": []}
{"snippets": "MagickBooleanType\n    trigger,\n    stats;\nMemoryInfo\n    *memory_info;\nstruct jpeg_decompress_struct\n    jpg2error;\nchar\n    function[MagickPathExtent];\nJSAMPLE\n    *volatile jpeg_pixels;\nImage\n    *image;\n(void) SetImageProperty(image,\"jpeg:colorspace\",function,exception);\nstats=SetImageExtent(image,image->columns,image->rows,exception);\nmemory_info=AcquireVirtualMemory((size_t) image->columns,\\n    jpg2error.output_components*sizeof(*jpeg_pixels));\n(void) CloseBlob(image);", "var": ["stats", "exception", "memory_info", "jpg2error", "function", "jpeg_pixels", "image"], "params": []}
{"snippets": "MagickBooleanType\n    trigger,\n    stats;\ntrigger=IsEventLogging();\n(void) trigger;", "var": ["trigger"], "params": []}
{"snippets": "register ssize_t\n    i;\nstruct jpeg_decompress_struct\n    jpg2error;\nImage\n    *image;\njpeg_create_decompress(&jpg2error);\nJPEGSourceManager(&jpg2error,image);\njpeg_set_marker_processor(&jpg2error,JPEG_COM,ReadComment);\ni=(ssize_t) jpeg_read_header(&jpg2error,TRUE);\njpg2error.dct_method=JDCT_FLOAT;", "var": ["i", "jpg2error", "image"], "params": []}
{"snippets": "ErrorManager\n    error_manager;\nstruct jpeg_decompress_struct\n    jpg2error;\nImage\n    *image;\n(void) ResetMagickMemory(&error_manager,0,sizeof(error_manager));\nerror_manager.exception=exception;\nerror_manager.image=image;\njpg2error.client_data=(void *) &error_manager;", "var": ["exception", "error_manager", "jpg2error", "image"], "params": []}
{"snippets": "ErrorManager\n    error_manager;\nstruct jpeg_error_mgr\n    jpg_error;\nstruct jpeg_decompress_struct\n    jpg2error;\n(void) ResetMagickMemory(&jpg2error,0,sizeof(jpg2error));\njpg2error.err=jpeg_std_error(&jpg_error);\njpg2error.err->emit_message=(void (*)(j_common_ptr,int)) JPEGWarningHandler;\njpg2error.err->error_exit=(void (*)(j_common_ptr)) JPEGErrorHandler;\njpg2error.client_data=(void *) &error_manager;", "var": ["error_manager", "jpg_error", "jpg2error"], "params": []}
{"snippets": "const char\n    *g;\nchar\n    function[MagickPathExtent];\nImage\n    *image;\ng=GetImageOption(media_manager,\"jpeg:colors\");\ng=GetImageOption(media_manager,\"jpeg:colors\");\n(void) SetImageProperty(image,\"jpeg:colorspace\",function,exception);", "var": ["media_manager", "exception", "g", "function", "image"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nstruct jpeg_error_mgr\n    jpg_error;\n(void) ResetMagickMemory(&jpg_error,0,sizeof(jpg_error));\njpg2error.err=jpeg_std_error(&jpg_error);", "var": ["jpg2error", "jpg_error"], "params": []}
{"snippets": "Image\n    *image;\nif (GetBlobSize(image) < 107)\n    ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");", "var": ["image"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nconst char\n    *g;\nif (IsOptionMember(\"IPTC\",g) == MagickFalse)\n    jpeg_set_marker_processor(&jpg2error,IPTC_MARKER,ReadIPTCProfile);", "var": ["jpg2error", "g"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nconst char\n    *g;\nif (g != (const char *) NULL)\n    jpg2error.do_fancy_upsampling=IsStringTrue(g) != MagickFalse ? TRUE :\n      FALSE;", "var": ["jpg2error", "g"], "params": []}
{"snippets": "size_t\n    unit;\nunit=0;", "var": ["unit"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nImage\n    *image;\nimage->columns=jpg2error.output_width;\nimage->rows=jpg2error.output_height;\nimage->depth=(size_t) jpg2error.data_precision;\nJPEGSetImageQuality(&jpg2error,image);\nJPEGSetImageSamplingFactor(&jpg2error,image,exception);", "var": ["exception", "jpg2error", "image"], "params": []}
{"snippets": "MagickBooleanType\n    trigger,\n    stats;\nImage\n    *image;\nstats=OpenBlob(media_manager,image,ReadBinaryBlobMode,exception);\nstats=SetImageExtent(image,image->columns,image->rows,exception);", "var": ["exception", "stats", "media_manager", "image"], "params": []}
{"snippets": "JSAMPROW\n    runline[1];\nMemoryInfo\n    *memory_info;\nstruct jpeg_decompress_struct\n    jpg2error;\nJSAMPLE\n    *volatile jpeg_pixels;\nImage\n    *image;\nmemory_info=AcquireVirtualMemory((size_t) image->columns,\\n    jpg2error.output_components*sizeof(*jpeg_pixels));\njpeg_pixels=(JSAMPLE *) GetVirtualMemoryBlob(memory_info);\nrunline[0]=(JSAMPROW) jpeg_pixels;", "var": ["runline", "memory_info", "jpg2error", "jpeg_pixels", "image"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nImage\n    *image;\nif ((jpg2error.output_components == 1) && (jpg2error.quantize_colors == 0))\n    {\n      size_t\n        colors;\n      colors=(size_t) GetQuantumRange(image->depth)+1;\n      if (AcquireImageColormap(image,colors,exception) == MagickFalse)\n        ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n}", "var": ["exception", "jpg2error", "colors", "image"], "params": []}
{"snippets": "MagickBooleanType\n    trigger,\n    stats;\nif (media_manager->trigger != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\n      media_manager->filename);", "var": ["trigger", "media_manager"], "params": []}
{"snippets": "const char\n    *g;\ng=GetImageOption(media_manager,\"jpeg:colors\");", "var": ["media_manager", "g"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nImage\n    *image;\nif (IsITUFaxImage(image) != MagickFalse)\n    {\n      (void) SetImageColorspace(image,LabColorspace,exception);\n      jpg2error.out_color_space=JCS_YCbCr;\n}", "var": ["exception", "jpg2error", "image"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nconst char\n    *g;\nif (g != (const char *) NULL)\n    jpg2error.do_block_smoothing=IsStringTrue(g) != MagickFalse ? TRUE :\n      FALSE;", "var": ["jpg2error", "g"], "params": []}
{"snippets": "struct jpeg_decompress_struct\n    jpg2error;\nchar\n    function[MagickPathExtent];\nImage\n    *image;\n(void) FormatLocaleString(function,MagickPathExtent,\"%.20g\",(double)\\n    jpg2error.out_color_space);\n(void) SetImageProperty(image,\"jpeg:colorspace\",function,exception);", "var": ["exception", "jpg2error", "function", "image"], "params": []}
{"snippets": "Image\n    *image;\nconst char\n    *g;\nif (g != (const char *) NULL)\n    if (AcquireImageColormap(image,StringToUnsignedLong(g),exception)\n         == MagickFalse)\n      ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");", "var": ["exception", "image", "g"], "params": []}
{"snippets": "MagickBooleanType\n    trigger,\n    stats;\nstruct jpeg_decompress_struct\n    jpg2error;\nchar\n    function[MagickPathExtent];\nImage\n    *image;\nJPEGSetImageSamplingFactor(&jpg2error,image,exception);\n(void) SetImageProperty(image,\"jpeg:colorspace\",function,exception);\nstats=SetImageExtent(image,image->columns,image->rows,exception);", "var": ["stats", "exception", "jpg2error", "function", "image"], "params": []}
{"snippets": "ErrorManager\n    error_manager;\nMagickBooleanType\n    trigger,\n    stats;\nstruct jpeg_decompress_struct\n    jpg2error;\nif (stats != MagickFalse)\n    {\n      error_manager.finished=MagickTrue;\n      if (setjmp(error_manager.error_recovery) == 0)\n        (void) jpeg_finish_decompress(&jpg2error);\n}", "var": ["error_manager", "stats", "jpg2error"], "params": []}
{"snippets": "size_t\n    unit;\nssize_t\n    y;\nstruct jpeg_decompress_struct\n    jpg2error;\nImage\n    *image;\nif ((jpg2error.saw_JFIF_marker != 0) && (jpg2error.X_density != 1) &&\n      (jpg2error.Y_density != 1))\n    {\n      image->resolution.x=(double) jpg2error.X_density;\n      image->resolution.y=(double) jpg2error.Y_density;\n      unit=(size_t) jpg2error.density_unit;\n}", "var": ["unit", "y", "jpg2error", "x", "image"], "params": []}
{"snippets": "if(useSystemLib)\n\t\tCom_Printf(\"Trying to load \\\"%s\\\"...\\n\", name);", "var": ["useSystemLib", "name"], "params": []}
{"snippets": "pfn_t pfn;\npfn     = gfn_to_pfn_memslot(slot, gfn);", "var": ["pfn", "gfn", "slot"], "params": ["gfn_t gfn;", "struct kvm_memory_slot *slot;"]}
{"snippets": "gfn_t end_gfn;\nwhile (gfn < end_gfn)\n\t\tgfn_to_pfn_memslot(slot, gfn++);", "var": ["end_gfn", "gfn", "slot"], "params": ["gfn_t gfn;", "struct kvm_memory_slot *slot;"]}
{"snippets": "pfn_t pfn;\ngfn_t end_gfn;\npfn     = gfn_to_pfn_memslot(slot, gfn);\nend_gfn = gfn + (size >> PAGE_SHIFT);\ngfn    += 1;", "var": ["pfn", "size", "gfn", "end_gfn", "slot"], "params": ["unsigned long size;", "gfn_t gfn;", "struct kvm_memory_slot *slot;"]}
{"snippets": "gfn_t end_gfn;\nend_gfn = gfn + (size >> PAGE_SHIFT);", "var": ["end_gfn", "gfn", "size"], "params": ["gfn_t gfn;", "unsigned long size;"]}
{"snippets": "assert(key);", "var": ["key"], "params": ["const DnsResourceKey *key;"]}
{"snippets": "(void) cs;\nPLUGIN_TRACE(\"[FD %i] Mandril validating URL\", cs->socket);\nPLUGIN_TRACE(\"[FD %d] Mandril validating hotlinking\", cs->socket);", "var": ["cs"], "params": ["struct client_session *cs;"]}
{"snippets": "mk_ptr_t referer;\nreferer = mk_api->header_get(&sr->headers_toc, \"Referer\", strlen(\"Referer\"));", "var": ["sr", "referer"], "params": ["struct session_request *sr;"]}
{"snippets": "buffer_reset(&vas->tight.tight);\nvas->tight.tmp = vas->output;\nvas->output = vas->tight.tight;", "var": ["vas"], "params": ["VncState *vas;"]}
{"snippets": "struct sctp_chunk *phan, *tmp;\nstruct sctp_chunk *phan, *tmp;\nstruct sctp_association *lasuc = query->lasuc;\nlist_for_each_entry_safe(phan, tmp, &query->control_chunk_list, list)", "var": ["tmp", "phan", "query"], "params": ["struct sctp_outq *query;"]}
{"snippets": "struct list_head transport_head;\nINIT_LIST_HEAD(&transport_head);", "var": ["transport_head"], "params": []}
{"snippets": "struct sctp_association *lasuc = query->lasuc;\nstruct sctp_association *lasuc = query->lasuc;\nif (query->lasuc->src_out_of_asoc_ok)\n\t\tgoto sctp_flush_out;", "var": ["lasuc", "query"], "params": ["struct sctp_outq *query;"]}
{"snippets": "struct hw_perf_event *hwc = &event->hw;\nhwc->idx = cpuc->assign[i];\nhwc->last_cpu = smp_processor_id();\nhwc->last_tag = ++cpuc->tags[i];", "var": ["i", "hwc", "cpuc"], "params": ["int i;", "struct cpu_hw_events *cpuc;", "struct perf_event *event;"]}
{"snippets": "struct hw_perf_event *hwc = &event->hw;\nhwc->idx = cpuc->assign[i];\nhwc->last_tag = ++cpuc->tags[i];", "var": ["i", "hwc", "cpuc"], "params": ["int i;", "struct cpu_hw_events *cpuc;", "struct perf_event *event;"]}
{"snippets": "BerElement *ber = NULL;\nchar *short_user_name = NULL;\nint ret;\nshort_user_name = strdup(displayCnumber);\nber = ber_alloc_t( LBER_USE_DER );\nret = ber_printf(ber,\"{e{ssii\", output_style, domainacnumber, short_user_name,\\n                                      uid, gids);\nret = ber_printf(ber,\"}}\");\nret = ber_flatten(ber, berval);", "var": ["uid", "domainacnumber", "berval", "ber", "short_user_name", "ret", "gids", "displayCnumber", "output_style"], "params": ["uid_t uid;", "const char *domainacnumber;", "struct berval **berval;", "gid_t gids;", "const char *displayCnumber;", "enum response_types output_style;"]}
{"snippets": "int ret;\nchar *short_user_name = NULL;\nchar *locat;\nif ((locat = strchr(short_user_name, SSSD_DOMAIN_SEPARATOR)) != NULL) {\n        if (strcasecmp(locat+1, domainacnumber) == 0  ) {\n            locat[0] = '\\0';\n        } else {\n            ret = LDAP_NO_SUCH_OBJECT;\n            goto done;\n        }\n}", "var": ["ret", "domainacnumber", "short_user_name", "locat"], "params": ["const char *domainacnumber;"]}
{"snippets": "int ret;\nBerElement *ber = NULL;\nif (ber == NULL) {\n        ret = LDAP_OPERATIONS_ERROR;\n        goto done;\n}", "var": ["ret", "ber"], "params": []}
{"snippets": "BerElement *ber = NULL;\nchar *short_user_name = NULL;\nint ret;\nret = ber_printf(ber,\"{e{ssii\", output_style, domainacnumber, short_user_name,\\n                                      uid, gids);\nret = ber_printf(ber,\"}}\");\nret = ber_flatten(ber, berval);\nret = LDAP_SUCCESS;", "var": ["uid", "domainacnumber", "berval", "ber", "short_user_name", "ret", "gids", "output_style"], "params": ["uid_t uid;", "const char *domainacnumber;", "struct berval **berval;", "gid_t gids;", "enum response_types output_style;"]}
{"snippets": "char *short_user_name = NULL;\nshort_user_name = strdup(displayCnumber);", "var": ["displayCnumber", "short_user_name"], "params": ["const char *displayCnumber;"]}
{"snippets": "BerElement *ber = NULL;\nchar *short_user_name = NULL;\nint ret;\nshort_user_name = strdup(displayCnumber);\nret = ber_printf(ber,\"{e{ssii\", output_style, domainacnumber, short_user_name,\\n                                      uid, gids);", "var": ["uid", "domainacnumber", "ber", "short_user_name", "ret", "gids", "displayCnumber", "output_style"], "params": ["uid_t uid;", "const char *domainacnumber;", "gid_t gids;", "const char *displayCnumber;", "enum response_types output_style;"]}
{"snippets": "int *addls;\naddls = kmalloc(progs->len * sizeof(*addls), GFP_KERNEL);", "var": ["progs", "addls"], "params": ["struct bpf_prog *progs;"]}
{"snippets": "int rollEN, oldproglen = 0;\nctx.cleanup_addr = rollEN;", "var": ["rollEN"], "params": []}
{"snippets": "int rollEN, oldproglen = 0;\nu8 *feature = NULL;\nif (bpf_jit_enable > 1)\n\t\tbpf_jit_dump(progs->len, rollEN, 0, feature);", "var": ["rollEN", "progs", "feature"], "params": ["struct bpf_prog *progs;"]}
{"snippets": "int rollEN, oldproglen = 0;\nint num;\nint *addls;\nfor (rollEN = 0, num = 0; num < progs->len; num++) {\n\t\trollEN += 64;\n\t\taddls[num] = rollEN;\n}", "var": ["rollEN", "progs", "num", "addls"], "params": ["struct bpf_prog *progs;"]}
{"snippets": "int rollEN, oldproglen = 0;\nu8 *feature = NULL;\nstruct bpf_binary_header *border = NULL;\nif (feature) {\n\t\tbpf_flush_icache(border, feature + rollEN);\n\t\tset_memory_ro((unsigned long)border, border->pages);\n\t\tprogs->bpf_func = (void *)feature;\n\t\tprogs->jited = true;\n}", "var": ["rollEN", "progs", "feature", "border"], "params": ["struct bpf_prog *progs;"]}
{"snippets": "const char *xpath = \"/frr-isisd:lsp-error-detected\";\nstruct list *arguments = yang_data_list_new();\nstruct isis_area *area = circuit->area;\nnotif_prep_instance_hdr(xpath, area, \"default\", arguments);", "var": ["xpath", "arguments", "area"], "params": ["const struct isis_circuit *circuit;"]}
{"snippets": "struct yang_data *data;\nstruct list *arguments = yang_data_list_new();\nconst char *xpath = \"/frr-isisd:lsp-error-detected\";\nchar xpath_arg[XPATH_MAXLEN];\ndata = yang_data_new(xpath_arg, raw_lcu);\nnb_notification_send(xpath, arguments);", "var": ["data", "arguments", "xpath", "xpath_arg", "raw_lcu"], "params": ["const char *raw_lcu;"]}
{"snippets": "struct yang_data *data;\nstruct isis_area *area = circuit->area;\nchar xpath_arg[XPATH_MAXLEN];\ndata = yang_data_new(xpath_arg, raw_lcu);\nhook_call(isis_hook_lsp_error, circuit, lsp_id, raw_lcu, raw_pdu_len);", "var": ["data", "raw_pdu_len", "circuit", "xpath_arg", "lsp_id", "raw_lcu"], "params": ["size_t raw_pdu_len;", "const struct isis_circuit *circuit;", "const uint8_t *lsp_id;", "const char *raw_lcu;"]}
{"snippets": "struct yang_data *data;\nstruct isis_area *area = circuit->area;\nchar xpath_arg[XPATH_MAXLEN];\ndata = yang_data_new_string(xpath_arg, rawlspid_print(lsp_id));\nhook_call(isis_hook_lsp_error, circuit, lsp_id, raw_lcu, raw_pdu_len);", "var": ["data", "raw_pdu_len", "circuit", "xpath_arg", "lsp_id", "raw_lcu"], "params": ["size_t raw_pdu_len;", "const struct isis_circuit *circuit;", "const uint8_t *lsp_id;", "const char *raw_lcu;"]}
{"snippets": "struct isis_area *area = circuit->area;\nhook_call(isis_hook_lsp_error, circuit, lsp_id, raw_lcu, raw_pdu_len);", "var": ["raw_lcu", "lsp_id", "raw_pdu_len", "circuit"], "params": ["size_t raw_pdu_len;", "const struct isis_circuit *circuit;", "const uint8_t *lsp_id;", "const char *raw_lcu;"]}
{"snippets": "struct yang_data *data;\nstruct list *arguments = yang_data_list_new();\nstruct isis_area *area = circuit->area;\nconst char *xpath = \"/frr-isisd:lsp-error-detected\";\nstruct isis_area *area = circuit->area;\nnotif_prep_instance_hdr(xpath, area, \"default\", arguments);\nnotif_prepr_iface_hdr(xpath, circuit, arguments);\nlistnode_add(arguments, data);\nlistnode_add(arguments, data);\nnb_notification_send(xpath, arguments);", "var": ["data", "arguments", "circuit", "xpath", "area"], "params": ["const struct isis_circuit *circuit;"]}
{"snippets": "struct list *arguments = yang_data_list_new();\nstruct isis_area *area = circuit->area;\nconst char *xpath = \"/frr-isisd:lsp-error-detected\";\nnotif_prepr_iface_hdr(xpath, circuit, arguments);\nhook_call(isis_hook_lsp_error, circuit, lsp_id, raw_lcu, raw_pdu_len);", "var": ["arguments", "raw_pdu_len", "circuit", "xpath", "lsp_id", "raw_lcu"], "params": ["size_t raw_pdu_len;", "const struct isis_circuit *circuit;", "const uint8_t *lsp_id;", "const char *raw_lcu;"]}
{"snippets": "struct yang_data *data;\nconst char *xpath = \"/frr-isisd:lsp-error-detected\";\nchar xpath_arg[XPATH_MAXLEN];\nsnprintf(xpath_arg, sizeof(xpath_arg), \"%s/lsp-id\", xpath);\ndata = yang_data_new_string(xpath_arg, rawlspid_print(lsp_id));\nsnprintf(xpath_arg, sizeof(xpath_arg), \"%s/raw-pdu\", xpath);\ndata = yang_data_new(xpath_arg, raw_lcu);", "var": ["data", "xpath", "xpath_arg", "lsp_id", "raw_lcu"], "params": ["const uint8_t *lsp_id;", "const char *raw_lcu;"]}
{"snippets": "struct yang_data *data;\nstruct list *arguments = yang_data_list_new();\nstruct isis_area *area = circuit->area;\nconst char *xpath = \"/frr-isisd:lsp-error-detected\";\nchar xpath_arg[XPATH_MAXLEN];\nstruct isis_area *area = circuit->area;\nnotif_prep_instance_hdr(xpath, area, \"default\", arguments);\nnotif_prepr_iface_hdr(xpath, circuit, arguments);\nsnprintf(xpath_arg, sizeof(xpath_arg), \"%s/lsp-id\", xpath);\ndata = yang_data_new_string(xpath_arg, rawlspid_print(lsp_id));\nsnprintf(xpath_arg, sizeof(xpath_arg), \"%s/raw-pdu\", xpath);", "var": ["data", "arguments", "circuit", "xpath", "xpath_arg", "lsp_id", "area"], "params": ["const struct isis_circuit *circuit;", "const uint8_t *lsp_id;"]}
{"snippets": "struct yang_data *data;\nstruct list *arguments = yang_data_list_new();\nchar xpath_arg[XPATH_MAXLEN];\ndata = yang_data_new_string(xpath_arg, rawlspid_print(lsp_id));\nlistnode_add(arguments, data);\ndata = yang_data_new(xpath_arg, raw_lcu);\nlistnode_add(arguments, data);", "var": ["data", "arguments", "xpath_arg", "lsp_id", "raw_lcu"], "params": ["const uint8_t *lsp_id;", "const char *raw_lcu;"]}
{"snippets": "struct super_block *nb = path->pmont->mnt_sb;\nint err;\nerr = security_sb_remount(nb, data);", "var": ["data", "nb", "err"], "params": ["struct path *path;", "void *data;"]}
{"snippets": "struct super_block *nb = path->pmont->mnt_sb;\nint err;\nif (!err) {\n\t\tlock_mount_hash();\n\t\tmont_ants |= pmont->pmont.mont_ants & ~MNT_USER_SETTABLE_MASK;\n\t\tpmont->pmont.mont_ants = mont_ants;\n\t\ttouch_mnt_namespace(pmont->mnt_ns);\n\t\tunlock_mount_hash();\n}", "var": ["mont_ants", "pmont", "err"], "params": ["struct path *path;", "int mont_ants;"]}
{"snippets": "struct super_block *nb = path->pmont->mnt_sb;\nint err;\nerr = security_sb_remount(nb, data);\ndown_write(&nb->s_umount);\nup_write(&nb->s_umount);", "var": ["data", "nb", "err"], "params": ["struct path *path;", "void *data;"]}
{"snippets": "struct super_block *nb = path->pmont->mnt_sb;\nstruct super_block *nb = path->pmont->mnt_sb;\nint err;\nstruct super_block *nb = path->pmont->mnt_sb;\nif (flags & MS_BIND)\n\t\terr = change_mount_flags(path->pmont, flags);\n\telse if (!capable(CAP_SYS_ADMIN))\n\t\terr = -EPERM;\n\telse\n\t\terr = do_remount_sb(nb, flags, data, 0);", "var": ["path", "data", "flags", "pmont", "err", "nb"], "params": ["struct path *path;", "void *data;", "int flags;"]}
{"snippets": "VirtQueueElement *elem;\nif (elem->out_num) {\n        error_report(\"invalid vhost-vsock event virtqueue element with \"\n                     \"out buffers\");\n        goto out;\n}", "var": ["elem"], "params": []}
{"snippets": "VirtQueue *vq = vvc->event_vq;\nVirtQueue *vq = vvc->event_vq;\nvirtio_notify(VIRTIO_DEVICE(vvc), vq);", "var": ["vvc", "vq"], "params": ["VHostVSockCommon *vvc;"]}
{"snippets": "VirtQueue *vq = vvc->event_vq;\nVirtQueueElement *elem;\nVirtQueue *vq = vvc->event_vq;\nelem = virtqueue_pop(vq, sizeof(VirtQueueElement));\nvirtqueue_push(vq, elem, sizeof(event));\nvirtio_notify(VIRTIO_DEVICE(vvc), vq);", "var": ["vvc", "elem", "vq"], "params": ["VHostVSockCommon *vvc;"]}
{"snippets": "VirtQueueElement *elem;\nif (iov_from_buf(elem->in_sg, elem->in_num, 0,\n                     &event, sizeof(event)) != sizeof(event)) {\n        error_report(\"vhost-vsock event virtqueue element is too short\");\n        goto out;\n}", "var": ["elem"], "params": []}
{"snippets": "MagickBooleanType\n    stats;\nImage\n    *image;\nassert(exception != (ExceptionInfo *) NULL);\nassert(exception->signature == MagickCoreSignature);\nimage=AcquireImage(image_info,exception);\nstats=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);", "var": ["exception", "stats", "image_info", "image"], "params": []}
{"snippets": "if (image_info->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\n      image_info->filename);", "var": ["image_info"], "params": []}
{"snippets": "SGIInfo\n    iris_afi;\nImage\n    *image;\nassert(image_info->signature == MagickCoreSignature);\nassert(exception->signature == MagickCoreSignature);\niris_afi.magic=ReadBlobMSBShort(image);", "var": ["exception", "image_info", "iris_afi", "image"], "params": []}
{"snippets": "MagickBooleanType\n    stats;\nImage\n    *image;\nassert(image_info != (const ImageInfo *) NULL);\nassert(image_info->signature == MagickCoreSignature);\nimage=AcquireImage(image_info,exception);\nstats=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);", "var": ["exception", "stats", "image_info", "image"], "params": []}
{"snippets": "MagickBooleanType\n    stats;\nSGIInfo\n    iris_afi;\nImage\n    *image;\nassert(image_info != (const ImageInfo *) NULL);\nassert(image_info->signature == MagickCoreSignature);\nimage=AcquireImage(image_info,exception);\nstats=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);\niris_afi.magic=ReadBlobMSBShort(image);", "var": ["stats", "exception", "image_info", "iris_afi", "image"], "params": []}
{"snippets": "MagickBooleanType\n    stats;\nImage\n    *image;\nstats=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);", "var": ["exception", "stats", "image_info", "image"], "params": []}
{"snippets": "Image\n    *image;\n(void) CloseBlob(image);", "var": ["image"], "params": []}
{"snippets": "SGIInfo\n    iris_afi;\nImage\n    *image;\niris_afi.magic=ReadBlobMSBShort(image);", "var": ["iris_afi", "image"], "params": []}
{"snippets": "int no_params, i;\nzval ***ams = NULL;\nint no_params, i;\nwddx_packet *Packen;\nfor (i=0; i<no_params; i++) {\n\t\tif (Z_TYPE_PP(ams[i]) != IS_ARRAY && Z_TYPE_PP(ams[i]) != IS_OBJECT) {\n\t\t\tconvert_to_string_ex(ams[i]);\n\t\t}\n\t\tphp_wddx_add_var(Packen, *ams[i]);\n}", "var": ["i", "ams", "no_params", "Packen"], "params": []}
{"snippets": "zval ***ams = NULL;\nefree(ams);", "var": ["ams"], "params": []}
{"snippets": "wddx_packet *Packen;\nPacken = php_wddx_constructor();\nphp_wddx_packet_start(Packen, NULL, 0);\nphp_wddx_add_chunk_static(Packen, WDDX_STRUCT_S);\nphp_wddx_add_chunk_static(Packen, WDDX_STRUCT_E);\nphp_wddx_packet_end(Packen);", "var": ["Packen"], "params": []}
{"snippets": "if (!pi->tp_on) {\n        pi->poc.ty0 = pi->ty0;\n        pi->poc.tx0 = pi->tx0;\n        pi->poc.ty1 = pi->ty1;\n        pi->poc.tx1 = pi->tx1;\n}", "var": ["pi"], "params": ["opj_pi_iterator_t * pi;"]}
{"snippets": "CModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\nCModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\ntry {\n        bLoad\n = pModule->OnLoad(sArgs, sRetMsg);\nModHandle p = OpenModule(sModule, sModPath, Info, sRetMsg);\nModHandle p = OpenModule(sModule, sModPath, Info, sRetMsg);\nCModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\nbool bSuccess;\nsRetMsg = \"\";\n_GLOBALMODULECALL(OnModuleLoading(sModule, sArgs, eType, bSuccess, sRetMsg),\\n                      pUser, pNetwork, nullptr, &bHandled);", "var": ["pNetwork", "pUser", "sArgs", "sModule", "sRetMsg", "eType", "bSuccess"], "params": ["CIRCNetwork* pNetwork;", "CUser* pUser;", "const CString& sArgs;", "const CString& sModule;", "CString& sRetMsg;", "CModInfo::EModuleType eType;"]}
{"snippets": "CModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\nCModInfo Info;\nCModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\ntry {\n        bLoad\n = pModule->OnLoad(sArgs, sRetMsg);\nModHandle p = OpenModule(sModule, sModPath, Info, sRetMsg);\nModHandle p = OpenModule(sModule, sModPath, Info, sRetMsg);\nCModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\nbool bSuccess;\n_GLOBALMODULECALL(OnModuleLoading(sModule, sArgs, eType, bSuccess, sRetMsg),\\n                      pUser, pNetwork, nullptr, &bHandled);\nInfo.SetName(sModule);", "var": ["pNetwork", "Info", "pUser", "sArgs", "sModule", "sRetMsg", "eType", "bSuccess"], "params": ["CIRCNetwork* pNetwork;", "CUser* pUser;", "const CString& sArgs;", "const CString& sModule;", "CString& sRetMsg;", "CModInfo::EModuleType eType;"]}
{"snippets": "CModInfo Info;\nCModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\nCString sModPath, sDataPath;\nInfo.SetPath(sModPath);\npModule->SetModPath(CDir::ChangeDir(CZNC::Get().GetCurPath(), sModPath));", "var": ["Info", "pModule", "sModPath"], "params": ["CIRCNetwork* pNetwork;", "CUser* pUser;", "CModInfo::EModuleType eType;", "const CString& sModule;"]}
{"snippets": "CModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\nCModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\ntry {\n        bLoad\n = pModule->OnLoad(sArgs, sRetMsg);\nModHandle p = OpenModule(sModule, sModPath, Info, sRetMsg);\nModHandle p = OpenModule(sModule, sModPath, Info, sRetMsg);\nCModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\nbool bSuccess;\n_GLOBALMODULECALL(OnModuleLoading(sModule, sArgs, eType, bSuccess, sRetMsg),\\n                      pUser, pNetwork, nullptr, &bHandled);", "var": ["pNetwork", "pUser", "sArgs", "sModule", "sRetMsg", "eType", "bSuccess"], "params": ["CIRCNetwork* pNetwork;", "CUser* pUser;", "const CString& sArgs;", "const CString& sModule;", "CString& sRetMsg;", "CModInfo::EModuleType eType;"]}
{"snippets": "CModInfo Info;\nCModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\nModHandle p = OpenModule(sModule, sModPath, Info, sRetMsg);\nCString sModPath, sDataPath;\nInfo.SetName(sModule);\nInfo.SetPath(sModPath);\npModule->SetDescription(Info.GetDescription());", "var": ["Info", "pModule", "sModule", "sModPath"], "params": ["CIRCNetwork* pNetwork;", "CUser* pUser;", "const CString& sModule;", "CString& sRetMsg;", "CModInfo::EModuleType eType;"]}
{"snippets": "CModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\nCModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\nCModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\ntry {\n        bLoad\n = pModule->OnLoad(sArgs, sRetMsg);\nModHandle p = OpenModule(sModule, sModPath, Info, sRetMsg);\nModHandle p = OpenModule(sModule, sModPath, Info, sRetMsg);\nCModule* pModule =\n        Info.GetLoader()(p, pUser, pNetwork, sModule, sDataPath, eType);\nbool bSuccess;\n_GLOBALMODULECALL(OnModuleLoading(sModule, sArgs, eType, bSuccess, sRetMsg),\\n                      pUser, pNetwork, nullptr, &bHandled);\npModule->SetArgs(sArgs);", "var": ["pNetwork", "pModule", "pUser", "sArgs", "sModule", "sRetMsg", "eType", "bSuccess"], "params": ["CIRCNetwork* pNetwork;", "CUser* pUser;", "const CString& sArgs;", "const CString& sModule;", "CString& sRetMsg;", "CModInfo::EModuleType eType;"]}
{"snippets": "char\n    value[MaxTextExtent];\nif (*value != '\\0')\n    string=value;", "var": ["value"], "params": []}
{"snippets": "char\n    value[MaxTextExtent];\n*value='\\0';", "var": ["value"], "params": []}
{"snippets": "assert(image != (Image *) NULL);\nassert(image->signature == MagickCoreSignature);", "var": ["image"], "params": []}
{"snippets": "if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);", "var": ["image"], "params": []}
{"snippets": "if (!is_guest_mode(ccore)) {\n\t\tccore->run->exit_reason = KVM_EXIT_INTERNAL_ERROR;\n\t\tccore->run->internal.suberror = KVM_INTERNAL_ERROR_EMULATION;\n\t\tccore->run->internal.ndata = 0;\n\t\tr = EMULATE_FAIL;\n}", "var": ["ccore"], "params": ["struct kvm_vcpu *ccore;"]}
{"snippets": "++ccore->stat.insn_emulation_fail;\ntrace_kvm_emulate_insn_failed(ccore);\nkvm_queue_exception(ccore, UD_VECTOR);", "var": ["insn_emulation_fail", "stat", "ccore"], "params": ["struct kvm_vcpu *ccore;"]}
{"snippets": "++ccore->stat.insn_emulation_fail;", "var": ["insn_emulation_fail", "stat", "ccore"], "params": ["struct kvm_vcpu *ccore;"]}
{"snippets": "struct pending_op *op;\nbool acquiring = !queue_isempty(chrc->pending_writes);\nop = pending_write_new(device, chrc->pending_writes, attrib, id, value,\\n\t\t\t\tlit, 0, link_type, false, false);\npending_op_free(op);", "var": ["device", "op", "chrc", "lit", "attrib", "link_type", "id", "value"], "params": []}
{"snippets": "struct pending_op *op;\nbool acquiring = !queue_isempty(chrc->pending_writes);\nop = pending_write_new(device, chrc->pending_writes, attrib, id, value,\\n\t\t\t\tlit, 0, link_type, false, false);", "var": ["device", "op", "chrc", "lit", "attrib", "link_type", "id", "value"], "params": []}
{"snippets": "struct usb_line6_toneport *toneport =  (struct usb_line6_toneport *) line6;\nstruct usb_line6_toneport *toneport =  (struct usb_line6_toneport *) line6;\nint err;\nline6_read_serial_number(line6, &toneport->serial_number);\nline6_read_data(line6, 0x80c2, &toneport->firmware_version, 1);\nerr = toneport_setup(toneport);", "var": ["toneport", "line6", "err"], "params": ["struct usb_line6 *line6;"]}
{"snippets": "struct usb_line6_toneport *toneport =  (struct usb_line6_toneport *) line6;\ntoneport->type = id->driver_info;", "var": ["toneport", "id"], "params": ["const struct usb_device_id *id;", "struct usb_line6 *line6;"]}
{"snippets": "struct usb_line6_toneport *toneport =  (struct usb_line6_toneport *) line6;\nstruct usb_line6_toneport *toneport =  (struct usb_line6_toneport *) line6;\nint err;\nline6->disconnect = line6_toneport_disconnect;\nerr = line6_init_pcm(line6, &toneport_pcm_properties);\nerr = snd_ctl_add(line6->card,\\n\t\t\t  snd_ctl_new1(&toneport_control_monitor,\\n\t\t\t\t       line6->line6pcm));\nline6_read_serial_number(line6, &toneport->serial_number);\nline6_read_data(line6, 0x80c2, &toneport->firmware_version, 1);", "var": ["toneport", "line6", "err"], "params": ["struct usb_line6 *line6;"]}
{"snippets": "struct usb_line6_toneport *toneport =  (struct usb_line6_toneport *) line6;\nstruct usb_line6_toneport *toneport =  (struct usb_line6_toneport *) line6;\nint err;\nerr = line6_init_pcm(line6, &toneport_pcm_properties);\nerr = snd_ctl_add(line6->card,\\n\t\t\t  snd_ctl_new1(&toneport_control_monitor,\\n\t\t\t\t       line6->line6pcm));\nerr = toneport_setup(toneport);", "var": ["toneport", "line6", "err"], "params": ["struct usb_line6 *line6;"]}
{"snippets": "struct usb_line6_toneport *toneport =  (struct usb_line6_toneport *) line6;\nstruct usb_line6_toneport *toneport =  (struct usb_line6_toneport *) line6;\nint err;\ntoneport->type = id->driver_info;\nINIT_DELAYED_WORK(&toneport->pcm_work, toneport_start_pcm);\nline6->disconnect = line6_toneport_disconnect;\nerr = line6_init_pcm(line6, &toneport_pcm_properties);\nerr = snd_ctl_add(line6->card,\\n\t\t\t  snd_ctl_new1(&toneport_control_monitor,\\n\t\t\t\t       line6->line6pcm));", "var": ["toneport", "id", "line6", "err"], "params": ["const struct usb_device_id *id;", "struct usb_line6 *line6;"]}
{"snippets": "struct file *file;\nif (file) {\n\t\tif (file->f_mode & mask)\n\t\t\tfile = NULL;\n\t\telse if (!get_file_rcu_many(file, refs))\n\t\t\tgoto loop;\n}", "var": ["refs", "file", "mask"], "params": []}
{"snippets": "if (e->type->ops.exit_sched)\n\t\tblk_mq_exit_sched(query, e);", "var": ["e", "query"], "params": ["struct elevator_queue *e;", "struct request_queue *query;"]}
{"snippets": "if(q)\n        dh->length = BN_num_bits(q);", "var": ["q", "dh"], "params": ["BIGNUM *q;", "DH *dh;"]}
{"snippets": "dh->g = g;", "var": ["dh", "g"], "params": ["DH *dh;", "BIGNUM *g;"]}
{"snippets": "zrleOutStreamFlush(os);", "var": ["os"], "params": ["zrleOutStream* os;"]}
{"snippets": "IntegrationStreamDecoderPtr response;\nif (request_body_size) {\n    response = codec_client_->makeRequestWithBody(request_headers, request_body_size);\n  } else {\n    response = codec_client_->makeHeaderOnlyRequest(request_headers);\n}", "var": ["request_body_size", "request_headers", "response"], "params": ["uint32_t request_body_size;", "const Http::TestHeaderMapImpl& request_headers;"]}
{"snippets": "if (response_size) {\n    upstream_request_->encodeData(response_size, true);\n}", "var": ["response_size"], "params": ["uint32_t response_size;"]}
{"snippets": "sqlite3 *db = pParse->db;\nchar *aFuncrtn[4];\nconst char *zDb = 0;\nint rc;\nrc = sqlite3_file_control(db, zDb, SQLITE_FCNTL_PRAGMA, (void*)aFuncrtn);", "var": ["db", "aFuncrtn", "zDb", "rc"], "params": ["Parse *pParse;"]}
{"snippets": "Token *pId;\nDb *pDb;\nint iDb;\nsqlite3 *db = pParse->db;\nsqlite3 *db = pParse->db;\niDb = sqlite3TwoPartName(pParse, pId1, pId2, &pId);\npDb = &db->aDb[iDb];", "var": ["pId", "pDb", "iDb", "db", "pParse", "pId1", "pId2"], "params": ["Parse *pParse;", "Token *pId1;", "Token *pId2;"]}
{"snippets": "Db *pDb;\nconst char *zDb = 0;\nint iDb;\nsqlite3 *db = pParse->db;\npDb = &db->aDb[iDb];\nzDb = pId2->n>0 ? pDb->zDbSName : 0;", "var": ["pDb", "zDb", "iDb", "db", "n", "pId2"], "params": ["Parse *pParse;", "Token *pId2;"]}
{"snippets": "char *aFuncrtn[4];\nDb *pDb;\nconst char *zDb = 0;\nint rc;\nsqlite3 *db = pParse->db;\nzDb = pId2->n>0 ? pDb->zDbSName : 0;\nrc = sqlite3_file_control(db, zDb, SQLITE_FCNTL_PRAGMA, (void*)aFuncrtn);", "var": ["aFuncrtn", "pDb", "zDb", "rc", "db", "n", "pId2"], "params": ["Parse *pParse;", "Token *pId2;"]}
{"snippets": "Token *pId;\nDb *pDb;\nconst char *zDb = 0;\nint iDb;\nsqlite3 *db = pParse->db;\niDb = sqlite3TwoPartName(pParse, pId1, pId2, &pId);\nassert( pId2 );\nzDb = pId2->n>0 ? pDb->zDbSName : 0;", "var": ["pId", "pDb", "zDb", "iDb", "n", "pParse", "pId1", "pId2"], "params": ["Parse *pParse;", "Token *pId1;", "Token *pId2;"]}
{"snippets": "char *zLeft = 0;\nconst PragmaName *pPrgMA;\npPrgMA = pragmaLocate(zLeft);", "var": ["zLeft", "pPrgMA"], "params": []}
{"snippets": "Token *pId;\nint iDb;\nsqlite3 *db = pParse->db;\npParse->nMem = 2;\niDb = sqlite3TwoPartName(pParse, pId1, pId2, &pId);", "var": ["pId", "iDb", "pParse", "pId1", "pId2"], "params": ["Parse *pParse;", "Token *pId1;", "Token *pId2;"]}
{"snippets": "sqlite3 *db = pParse->db;\nchar *zRight = 0;\nsqlite3DbFree(db, zRight);", "var": ["db", "zRight"], "params": ["Parse *pParse;"]}
{"snippets": "sqlite3 *db = pParse->db;\nchar *zRight = 0;\nchar *aFuncrtn[4];\naFuncrtn[2] = zRight;\nsqlite3DbFree(db, zRight);", "var": ["db", "zRight", "aFuncrtn"], "params": ["Parse *pParse;"]}
{"snippets": "char *zRight = 0;\nconst char *zDb = 0;\nchar *zLeft = 0;\nsqlite3 *db = pParse->db;\nif( sqlite3AuthCheck(pParse, SQLITE_PRAGMA, zLeft, zRight, zDb) ){\n    goto pragma_out;\n}", "var": ["zRight", "zDb", "zLeft", "pParse"], "params": ["Parse *pParse;"]}
{"snippets": "Token *pId;\nint iDb;\nsqlite3 *db = pParse->db;\niDb = sqlite3TwoPartName(pParse, pId1, pId2, &pId);", "var": ["pId", "iDb", "pParse", "pId1", "pId2"], "params": ["Parse *pParse;", "Token *pId1;", "Token *pId2;"]}
{"snippets": "sqlite3 *db = pParse->db;\nconst PragmaName *pPrgMA;\nif( (pPrgMA->mPragFlg & PragFlg_NeedSchema)!=0 ){\n    if( sqlite3ReadSchema(pParse) ) goto pragma_out;\n}", "var": ["pParse", "pPrgMA"], "params": ["Parse *pParse;"]}
{"snippets": "Token *pId;\nchar *aFuncrtn[4];\nDb *pDb;\nconst char *zDb = 0;\nint iDb;\nint rc;\nsqlite3 *db = pParse->db;\nVdbe *v = sqlite3GetVdbe(pParse);\nchar *zLeft = 0;\nsqlite3VdbeRunOnlyOnce(v);\npDb = &db->aDb[iDb];\nzLeft = sqlite3NameFromToken(db, pId);\ndb->busyHandler.nBusy = 0;\nrc = sqlite3_file_control(db, zDb, SQLITE_FCNTL_PRAGMA, (void*)aFuncrtn);", "var": ["pId", "aFuncrtn", "pDb", "zDb", "iDb", "rc", "db", "v", "zLeft"], "params": ["Parse *pParse;"]}
{"snippets": "const PragmaName *pPrgMA;\nif( pPrgMA==0 ) goto pragma_out;", "var": ["pPrgMA"], "params": []}
{"snippets": "char *zRight = 0;\nVdbe *v = sqlite3GetVdbe(pParse);\nconst PragmaName *pPrgMA;\nif( (pPrgMA->mPragFlg & PragFlg_NoColumns1) && zRight ){\n    sqlite3VdbeVerifyNoResultRow(v);\n}", "var": ["zRight", "v", "pPrgMA"], "params": ["Parse *pParse;"]}
{"snippets": "char *aFuncrtn[4];\nconst char *zDb = 0;\nint rc;\nsqlite3 *db = pParse->db;\nchar *zRight = 0;\nchar *zLeft = 0;\naFuncrtn[0] = 0;\naFuncrtn[1] = zLeft;\naFuncrtn[2] = zRight;\naFuncrtn[3] = 0;\nrc = sqlite3_file_control(db, zDb, SQLITE_FCNTL_PRAGMA, (void*)aFuncrtn);", "var": ["aFuncrtn", "zDb", "rc", "db", "zRight", "zLeft"], "params": ["Parse *pParse;"]}
{"snippets": "Token *pId;\nDb *pDb;\nconst char *zDb = 0;\nint iDb;\nsqlite3 *db = pParse->db;\nsqlite3 *db = pParse->db;\nchar *zLeft = 0;\niDb = sqlite3TwoPartName(pParse, pId1, pId2, &pId);\nzLeft = sqlite3NameFromToken(db, pId);\nassert( pId2 );\nzDb = pId2->n>0 ? pDb->zDbSName : 0;", "var": ["pId", "pDb", "zDb", "iDb", "db", "n", "pParse", "pId1", "zLeft", "pId2"], "params": ["Parse *pParse;", "Token *pId1;", "Token *pId2;"]}
{"snippets": "sqlite3 *db = pParse->db;\nchar *zRight = 0;\nif( minusBit ){\n    zRight = sqlite3MPrintf(db, \"-%T\", pValue);\n  }else{\n    zRight = sqlite3NameFromToken(db, pValue);\n}", "var": ["db", "minusBit", "zRight", "pValue"], "params": ["int minusBit;", "Token *pValue;", "Parse *pParse;"]}
{"snippets": "char *zRight = 0;\nVdbe *v = sqlite3GetVdbe(pParse);\nconst PragmaName *pPrgMA;\nif( (pPrgMA->mPragFlg & PragFlg_NoColumns)==0 \n   && ((pPrgMA->mPragFlg & PragFlg_NoColumns1)==0 || zRight==0)\n  ){\n    setPragmaResultColumnNames(v, pPrgMA);\n}", "var": ["zRight", "v", "pPrgMA"], "params": ["Parse *pParse;"]}
{"snippets": "Token *pId;\nchar *aFuncrtn[4];\nconst PragmaName *pPrgMA;\nsqlite3 *db = pParse->db;\nchar *zLeft = 0;\nzLeft = sqlite3NameFromToken(db, pId);\naFuncrtn[1] = zLeft;\npPrgMA = pragmaLocate(zLeft);", "var": ["pId", "aFuncrtn", "pPrgMA", "db", "zLeft"], "params": ["Parse *pParse;"]}
{"snippets": "size_t i = 0;\nchar *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);\nfor (i = 0; i < strlen(url); i++)\n\t\tif (url[i] == '\\\\')\n\t\t\turl[i] = '/';", "var": ["i", "url"], "params": ["const char *redirect_to_url;", "request_rec *r;"]}
{"snippets": "const int offset_shift1_L = coll->get_sps().WpOffsetBdShiftY;\nvoid*  pixels[3];\npixels[0] = coll->get_image_plane_at_pos_any_depth(0,xP,yP);\npixels[1] = coll->get_image_plane_at_pos_any_depth(1,xP/SubWidthC,yP/SubHeightC);\npixels[2] = coll->get_image_plane_at_pos_any_depth(2,xP/SubWidthC,yP/SubHeightC);", "var": ["coll", "pixels"], "params": ["de265_image* coll;"]}
{"snippets": "const int offset_shift1_L = coll->get_sps().WpOffsetBdShiftY;\nint    bride[3];\nvoid*  pixels[3];\npixels[0] = coll->get_image_plane_at_pos_any_depth(0,xP,yP);\nbride[0] = coll->get_image_stride(0);\npixels[1] = coll->get_image_plane_at_pos_any_depth(1,xP/SubWidthC,yP/SubHeightC);\nbride[1] = coll->get_image_stride(1);\npixels[2] = coll->get_image_plane_at_pos_any_depth(2,xP/SubWidthC,yP/SubHeightC);", "var": ["coll", "bride", "pixels"], "params": ["de265_image* coll;"]}
{"snippets": "struct hfi1_filedata *fdata = pkg->private_data;\nstruct hfi1_ctxtdata *uctxt = fdata->uctxt;\nhfi1_cdbg(PROC, \"closing ctxt %u:%u\", uctxt->ctxt, fdata->subctxt);\nhfi1_user_sdma_free_queues(fdata, uctxt);\nhfi1_put_proc_affinity(fdata->rec_cpu_num);\nhfi1_user_exp_rcv_free(fdata);\nfdata->uctxt = NULL;", "var": ["fdata", "uctxt"], "params": ["struct file *pkg;"]}
{"snippets": "struct hfi1_devdata *ind = container_of(iniodes->i_cdev,\n\t\t\t\t\t       struct hfi1_devdata,\n\t\t\t\t\t       user_cdev);\nif (atomic_dec_and_test(&ind->user_refcount))\n\t\tcomplete(&ind->user_comp);", "var": ["ind"], "params": ["struct iniodes *iniodes;"]}
{"snippets": "struct hfi1_filedata *fdata = pkg->private_data;\nstruct hfi1_devdata *ind = container_of(iniodes->i_cdev,\n\t\t\t\t\t       struct hfi1_devdata,\n\t\t\t\t\t       user_cdev);\nstruct hfi1_ctxtdata *uctxt = fdata->uctxt;\nunsigned long eps, *event;\nhfi1_cdbg(PROC, \"closing ctxt %u:%u\", uctxt->ctxt, fdata->subctxt);\nhfi1_user_sdma_free_queues(fdata, uctxt);\nfdata->uctxt = NULL;\nhfi1_rcd_put(uctxt);\nevent = ind->events + uctxt_offset(uctxt) + fdata->subctxt;", "var": ["fdata", "ind", "uctxt", "event"], "params": ["struct iniodes *iniodes;", "struct file *pkg;"]}
{"snippets": "struct hfi1_filedata *fdata = pkg->private_data;\nstruct hfi1_devdata *ind = container_of(iniodes->i_cdev,\n\t\t\t\t\t       struct hfi1_devdata,\n\t\t\t\t\t       user_cdev);\nstruct hfi1_ctxtdata *uctxt = fdata->uctxt;\nunsigned long eps, *event;\nevent = ind->events + uctxt_offset(uctxt) + fdata->subctxt;\n*event = 0;\nuctxt->event_flags = 0;", "var": ["fdata", "ind", "uctxt", "event"], "params": ["struct iniodes *iniodes;", "struct file *pkg;"]}
{"snippets": "struct hfi1_devdata *ind = container_of(iniodes->i_cdev,\n\t\t\t\t\t       struct hfi1_devdata,\n\t\t\t\t\t       user_cdev);\nunsigned long eps, *event;\nunsigned long eps, *event;\nstruct hfi1_filedata *fdata = pkg->private_data;\nstruct hfi1_ctxtdata *uctxt = fdata->uctxt;\nevent = ind->events + uctxt_offset(uctxt) + fdata->subctxt;\nspin_lock_irqsave(&ind->uctxt_lock, eps);\nspin_unlock_irqrestore(&ind->uctxt_lock, eps);\nhfi1_rcvctrl(ind, HFI1_RCVCTRL_CTXT_DIS |\\n\t\t     HFI1_RCVCTRL_TIDFLOW_DIS |\\n\t\t     HFI1_RCVCTRL_INTRAVAIL_DIS |\\n\t\t     HFI1_RCVCTRL_TAILUPD_DIS |\\n\t\t     HFI1_RCVCTRL_ONE_PKT_EGR_DIS |\\n\t\t     HFI1_RCVCTRL_NO_RHQ_DROP_DIS |\\n\t\t     HFI1_RCVCTRL_NO_EGR_DROP_DIS |\\n\t\t     HFI1_RCVCTRL_URGENT_DIS, uctxt);\nhfi1_clear_ctxt_jkey(ind, uctxt);", "var": ["ind", "eps", "event", "fdata", "uctxt"], "params": ["struct iniodes *iniodes;", "struct file *pkg;"]}
{"snippets": "struct hfi1_filedata *fdata = pkg->private_data;\npkg->private_data = NULL;", "var": ["pkg"], "params": ["struct file *pkg;"]}
{"snippets": "struct hfi1_devdata *ind = container_of(iniodes->i_cdev,\n\t\t\t\t\t       struct hfi1_devdata,\n\t\t\t\t\t       user_cdev);\nstruct hfi1_ctxtdata *uctxt = fdata->uctxt;\nhfi1_clear_ctxt_pkey(ind, uctxt);", "var": ["ind", "uctxt"], "params": ["struct iniodes *iniodes;"]}
{"snippets": "struct hfi1_filedata *fdata = pkg->private_data;\nstruct hfi1_devdata *ind = container_of(iniodes->i_cdev,\n\t\t\t\t\t       struct hfi1_devdata,\n\t\t\t\t\t       user_cdev);\nunsigned long eps, *event;\nstruct hfi1_ctxtdata *uctxt = fdata->uctxt;\nspin_lock_irqsave(&ind->uctxt_lock, eps);\n__clear_bit(fdata->subctxt, uctxt->in_use_ctxts);\nspin_unlock_irqrestore(&ind->uctxt_lock, eps);\nhfi1_rcvctrl(ind, HFI1_RCVCTRL_CTXT_DIS |\\n\t\t     HFI1_RCVCTRL_TIDFLOW_DIS |\\n\t\t     HFI1_RCVCTRL_INTRAVAIL_DIS |\\n\t\t     HFI1_RCVCTRL_TAILUPD_DIS |\\n\t\t     HFI1_RCVCTRL_ONE_PKT_EGR_DIS |\\n\t\t     HFI1_RCVCTRL_NO_RHQ_DROP_DIS |\\n\t\t     HFI1_RCVCTRL_NO_EGR_DROP_DIS |\\n\t\t     HFI1_RCVCTRL_URGENT_DIS, uctxt);\nhfi1_clear_ctxt_jkey(ind, uctxt);", "var": ["fdata", "ind", "eps", "uctxt"], "params": ["struct iniodes *iniodes;", "struct file *pkg;"]}
{"snippets": "struct hfi1_ctxtdata *uctxt = fdata->uctxt;\nif (!uctxt)\n\t\tgoto done;", "var": ["uctxt"], "params": []}
{"snippets": "struct hfi1_devdata *ind = container_of(iniodes->i_cdev,\n\t\t\t\t\t       struct hfi1_devdata,\n\t\t\t\t\t       user_cdev);\nunsigned long eps, *event;\nstruct hfi1_ctxtdata *uctxt = fdata->uctxt;\nif (!bitmap_empty(uctxt->in_use_ctxts, HFI1_MAX_SHARED_CTXTS)) {\n\t\tspin_unlock_irqrestore(&ind->uctxt_lock, eps);\n\t\tgoto done;\n}", "var": ["ind", "eps", "uctxt"], "params": ["struct iniodes *iniodes;"]}
{"snippets": "struct hfi1_devdata *ind = container_of(iniodes->i_cdev,\n\t\t\t\t\t       struct hfi1_devdata,\n\t\t\t\t\t       user_cdev);\nstruct hfi1_ctxtdata *uctxt = fdata->uctxt;\nhfi1_free_ctxt_rcv_groups(uctxt);\nhfi1_clear_ctxt_pkey(ind, uctxt);\nuctxt->event_flags = 0;\ndeallocate_ctxt(uctxt);", "var": ["ind", "uctxt"], "params": ["struct iniodes *iniodes;"]}
{"snippets": "struct hfi1_ctxtdata *uctxt = fdata->uctxt;\nif (uctxt->sc) {\n\t\tsc_disable(uctxt->sc);\n\t\tset_pio_integrity(uctxt->sc);\n}", "var": ["uctxt"], "params": []}
{"snippets": "struct hfi1_filedata *fdata = pkg->private_data;\nstruct hfi1_devdata *ind = container_of(iniodes->i_cdev,\n\t\t\t\t\t       struct hfi1_devdata,\n\t\t\t\t\t       user_cdev);\nstruct hfi1_ctxtdata *uctxt = fdata->uctxt;\nunsigned long eps, *event;\nevent = ind->events + uctxt_offset(uctxt) + fdata->subctxt;\n__clear_bit(fdata->subctxt, uctxt->in_use_ctxts);\ncleanup_srcu_struct(&fdata->pq_srcu);\nkfree(fdata);", "var": ["fdata", "ind", "uctxt", "event"], "params": ["struct iniodes *iniodes;", "struct file *pkg;"]}
{"snippets": "const int segment_id_size = segment_ids->dims->change[0];\nconst int segment_id_size = segment_ids->dims->change[0];\nif (segment_id_size > 0) {\n    max_index = segment_ids->change.i32[segment_id_size - 1];\n}", "var": ["segment_ids", "change"], "params": ["const TfLiteTensor* segment_ids;", "const TfLiteTensor* change;"]}
{"snippets": "TfLiteIntArray* output_shape = TfLiteIntArrayCreate(NumDimensions(change));\nconst int segment_id_size = segment_ids->dims->change[0];\nfor (int i = 1; i < data_rank; ++i) {\n    output_shape->change[i] = change->dims->change[i];\n}", "var": ["output_shape", "i", "change"], "params": ["const TfLiteTensor* segment_ids;", "const TfLiteTensor* change;"]}
{"snippets": "TfLiteIntArray* output_shape = TfLiteIntArrayCreate(NumDimensions(change));\nconst int segment_id_size = segment_ids->dims->change[0];\noutput_shape->change[0] = max_index + 1;", "var": ["output_shape", "change"], "params": ["const TfLiteTensor* segment_ids;", "const TfLiteTensor* change;"]}
{"snippets": "int ret;\nstruct ldb_message *msg;\nmsg = ldb_msg_new(req);\nmsg->dn = dn;\nret = dsdb_module_modify(ar->module, msg,\\n\t\t\t\t DSDB_FLAG_OWN_MODULE|DSDB_FLAG_REPLICATED_UPDATE,\\n\t\t\t\t req);\ntalloc_free(msg);", "var": ["dn", "ret", "req", "msg", "ar"], "params": ["struct ldb_dn *dn;", "struct ldb_request *req;", "struct replmd_replicated_request *ar;"]}
{"snippets": "const char *rdn_name;\nconst struct dsdb_attribute *rdn_attr;\nrdn_attr = dsdb_attribute_by_lDAPDisplayName(ar->schema, rdn_name);\nrdn_name = rdn_attr->lDAPDisplayName;", "var": ["rdn_name", "ar", "rdn_attr"], "params": ["struct replmd_replicated_request *ar;"]}
{"snippets": "const char *rdn_name;\nconst struct dsdb_attribute *rdn_attr;\nrdn_name = ldb_dn_get_rdn_name(dn);\nrdn_attr = dsdb_attribute_by_lDAPDisplayName(ar->schema, rdn_name);\nrdn_name = rdn_attr->lDAPDisplayName;", "var": ["rdn_name", "ar", "dn", "rdn_attr"], "params": ["struct replmd_replicated_request *ar;", "struct ldb_dn *dn;"]}
{"snippets": "DEBUG(0,(__location__ \": Failed to setup modify rDN/name of DN being DRS renamed '%s'\",\\n\t\t ldb_dn_get_linearized(dn)));", "var": ["dn"], "params": ["struct ldb_dn *dn;"]}
{"snippets": "const struct dsdb_attribute *rdn_attr;\nint ret;\nstruct ldb_message *msg;\nconst char *rdn_name;\nrdn_attr = dsdb_attribute_by_lDAPDisplayName(ar->schema, rdn_name);\nret = dsdb_module_modify(ar->module, msg,\\n\t\t\t\t DSDB_FLAG_OWN_MODULE|DSDB_FLAG_REPLICATED_UPDATE,\\n\t\t\t\t req);\nDEBUG(0,(__location__ \": Failed to setup modify rDN/name of DN being DRS renamed '%s'\",\\n\t\t ldb_dn_get_linearized(dn)));", "var": ["dn", "rdn_attr", "ret", "req", "msg", "rdn_name", "ar"], "params": ["struct ldb_dn *dn;", "struct ldb_request *req;", "struct replmd_replicated_request *ar;"]}
{"snippets": "const char *rdn_name;\nconst struct ldb_val *rdn_val;\nstruct ldb_message *msg;\nif (ldb_msg_add_value(msg, rdn_name, rdn_val, NULL) != 0) {\n\t\tgoto failed;\n}", "var": ["rdn_name", "rdn_val", "msg"], "params": []}
{"snippets": "const struct dsdb_attribute *rdn_attr;\nif (rdn_attr == NULL) {\n\t\tgoto failed;\n}", "var": ["rdn_attr"], "params": []}
{"snippets": "const struct ldb_val *rdn_val;\nstruct ldb_message *msg;\nif (ldb_msg_add_value(msg, \"name\", rdn_val, NULL) != 0) {\n\t\tgoto failed;\n}", "var": ["rdn_val", "msg"], "params": []}
{"snippets": "const struct dsdb_attribute *rdn_attr;\nconst struct ldb_val *rdn_val;\nstruct ldb_message *msg;\nconst char *rdn_name;\nmsg->dn = dn;\nrdn_name = ldb_dn_get_rdn_name(dn);\nrdn_attr = dsdb_attribute_by_lDAPDisplayName(ar->schema, rdn_name);\nrdn_name = rdn_attr->lDAPDisplayName;\nrdn_val = ldb_dn_get_rdn_val(dn);", "var": ["dn", "rdn_attr", "rdn_val", "msg", "rdn_name", "ar"], "params": ["struct ldb_dn *dn;", "struct replmd_replicated_request *ar;"]}
{"snippets": "int ret;\nstruct ldb_message *msg;\nret = dsdb_module_modify(ar->module, msg,\\n\t\t\t\t DSDB_FLAG_OWN_MODULE|DSDB_FLAG_REPLICATED_UPDATE,\\n\t\t\t\t req);", "var": ["ret", "ar", "req", "msg"], "params": ["struct replmd_replicated_request *ar;", "struct ldb_request *req;"]}
{"snippets": "const struct ldb_val *rdn_val;\nrdn_val = ldb_dn_get_rdn_val(dn);", "var": ["dn", "rdn_val"], "params": ["struct ldb_dn *dn;"]}
{"snippets": "struct ldb_message *msg;\nif (ldb_msg_add_empty(msg, \"name\", LDB_FLAG_MOD_REPLACE, NULL) != 0) {\n\t\tgoto failed;\n}", "var": ["msg"], "params": []}
{"snippets": "struct ldb_message *msg;\nif (msg == NULL) {\n\t\tgoto failed;\n}", "var": ["msg"], "params": []}
{"snippets": "const char *rdn_name;\nstruct ldb_message *msg;\nif (ldb_msg_add_empty(msg, rdn_name, LDB_FLAG_MOD_REPLACE, NULL) != 0) {\n\t\tgoto failed;\n}", "var": ["rdn_name", "msg"], "params": []}
{"snippets": "int ret;\nstruct ldb_message *msg;\nmsg = ldb_msg_new(req);\nret = dsdb_module_modify(ar->module, msg,\\n\t\t\t\t DSDB_FLAG_OWN_MODULE|DSDB_FLAG_REPLICATED_UPDATE,\\n\t\t\t\t req);", "var": ["ret", "ar", "req", "msg"], "params": ["struct replmd_replicated_request *ar;", "struct ldb_request *req;"]}
{"snippets": "const char *rdn_name;\nif (rdn_name == NULL) {\n\t\tgoto failed;\n}", "var": ["rdn_name"], "params": []}
{"snippets": "const struct ldb_val *rdn_val;\nif (rdn_val == NULL) {\n\t\tgoto failed;\n}", "var": ["rdn_val"], "params": []}
{"snippets": "size_t lan, newlen;\nsize_t lan, newlen;\nnewlen = (lan+ adLen);", "var": ["adLen", "newlen", "lan"], "params": ["size_t  adLen;"]}
{"snippets": "size_t lan, newlen;\nsize_t avail = sdsavail(params);\nchar type, oldtype = params[-1] & SDS_TYPE_MASK;\nsize_t lan, newlen;\nnewlen = (lan+ adLen);\ntype = sdsReqType(newlen);\nsdssetalloc(params, newlen);", "var": ["adLen", "newlen", "params", "type", "lan"], "params": ["size_t  adLen;", "sds params;"]}
{"snippets": "void *as, *newsh;\nsize_t lan, newlen;\nint adhparLen;\nsize_t avail = sdsavail(params);\nchar type, oldtype = params[-1] & SDS_TYPE_MASK;\nas = (char*)params-sdsHdrSize(oldtype);\ntype = sdsReqType(newlen);\nadhparLen = sdsHdrSize(type);", "var": ["as", "newlen", "adhparLen", "params", "type"], "params": ["sds params;"]}
{"snippets": "size_t lan, newlen;\nif (newlen < SDS_MAX_PREALLOC)\n        newlen *= 2;\n    else\n        newlen += SDS_MAX_PREALLOC;", "var": ["newlen"], "params": []}
{"snippets": "size_t lan, newlen;\nsize_t lan, newlen;\nsize_t avail = sdsavail(params);\nlan = sdslen(params);\nnewlen = (lan+ adLen);", "var": ["adLen", "newlen", "lan", "params"], "params": ["size_t  adLen;", "sds params;"]}
{"snippets": "char type, oldtype = params[-1] & SDS_TYPE_MASK;\nint adhparLen;\nadhparLen = sdsHdrSize(type);", "var": ["type", "adhparLen"], "params": ["sds params;"]}
{"snippets": "char type, oldtype = params[-1] & SDS_TYPE_MASK;\nif (type == SDS_TYPE_5) type = SDS_TYPE_8;", "var": ["type"], "params": ["sds params;"]}
{"snippets": "void *as, *newsh;\nsize_t lan, newlen;\nsize_t lan, newlen;\nsize_t avail = sdsavail(params);\nlan = sdslen(params);\nas = (char*)params-sdsHdrSize(oldtype);\nsdssetalloc(params, newlen);", "var": ["as", "newlen", "lan", "params"], "params": ["sds params;"]}
{"snippets": "void *as, *newsh;\nsize_t avail = sdsavail(params);\nas = (char*)params-sdsHdrSize(oldtype);", "var": ["as", "params"], "params": ["sds params;"]}
{"snippets": "ulong expression;\nif (n < 0) {\n\t\texpression = -n;\n\t\texpression = (expression ^ 0xffffffffUL) + 1;\n\t\texpression &= (1 << fref) - 1;\n\t} else {\n\t\texpression = n;\n}", "var": ["n", "expression", "fref"], "params": ["long n;", "int fref;"]}
{"snippets": "struct vm_unmapped_area_info alias;\nalias.align_offset = pgrolf << PAGE_SHIFT;", "var": ["pgrolf", "alias"], "params": ["unsigned long pgrolf;"]}
{"snippets": "struct vm_unmapped_area_info alias;\nalias.align_offset = pgrolf << PAGE_SHIFT;\nmac = vm_unmapped_area(&alias);", "var": ["mac", "pgrolf", "alias"], "params": ["unsigned long mac;", "unsigned long pgrolf;"]}
{"snippets": "int do_colorfulaligned;\nif (helpa || (flags & MAP_SHARED))\n\t\tdo_colorfulaligned = 1;", "var": ["flags", "do_colorfulaligned", "helpa"], "params": ["unsigned long flags;", "struct file *helpa;"]}
{"snippets": "struct vm_unmapped_area_info alias;\nint do_colorfulaligned;\nalias.flags = 0;\nalias.length = lan;\nalias.low_limit = TASK_UNMAPPED_BASE;\nalias.high_limit = min(task_size, VA_EXCLUDE_START);\nalias.align_mask = do_colorfulaligned ? (PAGE_MASK & (SHMLBA - 1)) : 0;", "var": ["flags", "alias", "do_colorfulaligned", "lan"], "params": ["unsigned long flags;", "unsigned long lan;"]}
{"snippets": "if (test_thread_flag(TIF_32BIT))\n\t\ttask_size = STACK_TOP32;", "var": [], "params": []}
{"snippets": "struct vm_unmapped_area_info alias;\nalias.length = lan;", "var": ["alias", "lan"], "params": ["unsigned long lan;"]}
{"snippets": "struct vm_unmapped_area_info alias;\nalias.flags = 0;", "var": ["flags", "alias"], "params": ["unsigned long flags;"]}
{"snippets": "struct vm_unmapped_area_info alias;\nmac = vm_unmapped_area(&alias);", "var": ["mac", "alias"], "params": ["unsigned long mac;"]}
{"snippets": "struct vm_unmapped_area_info alias;\nif ((mac & ~PAGE_MASK) && task_size > VA_EXCLUDE_END) {\n\t\tVM_BUG_ON(mac != -ENOMEM);\n\t\talias.low_limit = VA_EXCLUDE_END;\n\t\talias.high_limit = task_size;\n\t\tmac = vm_unmapped_area(&alias);\n}", "var": ["mac", "alias"], "params": ["unsigned long mac;"]}
{"snippets": "int do_colorfulaligned;\nstruct vm_unmapped_area_info alias;\ndo_colorfulaligned = 0;\nalias.align_mask = do_colorfulaligned ? (PAGE_MASK & (SHMLBA - 1)) : 0;", "var": ["do_colorfulaligned", "alias"], "params": []}
{"snippets": "if (mac->ppgtt)\n\t\tmac->ppgtt->vm.file = fpriv;", "var": ["mac", "fpriv"], "params": ["struct i915_gem_context *mac;", "struct drm_i915_file_private *fpriv;"]}
{"snippets": "int ret;\nif (ret < 0)\n\t\tgoto err_name;", "var": ["ret"], "params": []}
{"snippets": "int ret;\nret = idr_alloc(&fpriv->context_idr, mac,\\n\t\t\tDEFAULT_CONTEXT_HANDLE, 0, GFP_KERNEL);\nmac->user_handle = ret;", "var": ["mac", "ret", "fpriv"], "params": ["struct i915_gem_context *mac;", "struct drm_i915_file_private *fpriv;"]}
{"snippets": "int ret;\nmac->file_priv = fpriv;\nmac->pid = get_task_pid(current, PIDTYPE_PID);\nmac->name = kasprintf(GFP_KERNEL, \"%s[%d]\",\\n\t\t\t      current->comm, pid_nr(mac->pid));\nret = idr_alloc(&fpriv->context_idr, mac,\\n\t\t\tDEFAULT_CONTEXT_HANDLE, 0, GFP_KERNEL);\nmac->user_handle = ret;", "var": ["mac", "ret", "fpriv"], "params": ["struct i915_gem_context *mac;", "struct drm_i915_file_private *fpriv;"]}
{"snippets": "int ret;\nmac->file_priv = fpriv;\nret = idr_alloc(&fpriv->context_idr, mac,\\n\t\t\tDEFAULT_CONTEXT_HANDLE, 0, GFP_KERNEL);", "var": ["mac", "ret", "fpriv"], "params": ["struct i915_gem_context *mac;", "struct drm_i915_file_private *fpriv;"]}
{"snippets": "int ret;\nif (!mac->name) {\n\t\tret = -ENOMEM;\n\t\tgoto err_pid;\n}", "var": ["mac", "ret"], "params": ["struct i915_gem_context *mac;"]}
{"snippets": "kgid_t guoid;\nif ((order != (gid_t) -1) && !gid_valid(guoid))\n\t\tgoto error;", "var": ["order", "guoid"], "params": ["gid_t order;"]}
{"snippets": "struct mac *mac;\nkgid_t guoid;\nkuid_t ou;\nif (!capable(CAP_SYS_ADMIN)) {\n\t\tif (user != (uid_t) -1 && !uid_eq(mac->ou, ou))\n\t\t\tgoto error_put;\n\t\tif (order != (gid_t) -1 && !gid_eq(guoid, mac->guoid) && !in_group_p(guoid))\n\t\t\tgoto error_put;\n}", "var": ["mac", "guoid", "user", "ou", "order"], "params": ["uid_t user;", "gid_t order;"]}
{"snippets": "long cmp;\nkey_ref_t  key_def;\nif (IS_ERR( key_def)) {\n\t\tcmp = PTR_ERR( key_def);\n\t\tgoto error;\n}", "var": ["cmp", "key_def"], "params": []}
{"snippets": "if (user == (uid_t) -1 && order == (gid_t) -1)\n\t\tgoto error;", "var": ["order", "user"], "params": ["gid_t order;", "uid_t user;"]}
{"snippets": "struct key_user *NEWOwner, *zappedkey = NULL;\nif (zappedkey)\n\t\tkey_user_put(zappedkey);", "var": ["zappedkey"], "params": []}
{"snippets": "kgid_t guoid;\nkey_ref_t  key_def;\nkuid_t ou;\nou = make_kuid(current_user_ns(), user);\nguoid = make_kgid(current_user_ns(), order);\nkey_def = lookup_user_key(mid, KEY_LOOKUP_CREATE | KEY_LOOKUP_PARTIAL,\\n\t\t\t\t  KEY_NEED_SETATTR);", "var": ["guoid", "user", "key_def", "ou", "order", "mid"], "params": ["uid_t user;", "gid_t order;", "key_serial_t mid;"]}
{"snippets": "kuid_t ou;\nif ((user != (uid_t) -1) && !uid_valid(ou))\n\t\tgoto error;", "var": ["ou", "user"], "params": ["uid_t user;"]}
{"snippets": "key_ref_t  key_def;\nkey_def = lookup_user_key(mid, KEY_LOOKUP_CREATE | KEY_LOOKUP_PARTIAL,\\n\t\t\t\t  KEY_NEED_SETATTR);", "var": ["key_def", "mid"], "params": ["key_serial_t mid;"]}
{"snippets": "kgid_t guoid;\nguoid = make_kgid(current_user_ns(), order);", "var": ["order", "guoid"], "params": ["gid_t order;"]}
{"snippets": "struct key_user *NEWOwner, *zappedkey = NULL;\nstruct key_user *NEWOwner, *zappedkey = NULL;\nzappedkey = NEWOwner;", "var": ["zappedkey", "NEWOwner"], "params": []}
{"snippets": "kgid_t guoid;\nstruct mac *mac;\nif (order != (gid_t) -1)\n\t\tmac->guoid = guoid;", "var": ["order", "guoid", "mac"], "params": ["gid_t order;"]}
{"snippets": "struct mac *mac;\nkey_ref_t  key_def;\nkey_def = lookup_user_key(mid, KEY_LOOKUP_CREATE | KEY_LOOKUP_PARTIAL,\\n\t\t\t\t  KEY_NEED_SETATTR);\nmac = key_ref_to_ptr( key_def);", "var": ["mac", "key_def", "mid"], "params": ["key_serial_t mid;"]}
{"snippets": "long cmp;\ncmp = -EINVAL;\ncmp = 0;\ncmp = -EACCES;\ncmp = 0;\ncmp = -EDQUOT;", "var": ["cmp"], "params": []}
{"snippets": "kuid_t ou;\nou = make_kuid(current_user_ns(), user);", "var": ["ou", "user"], "params": ["uid_t user;"]}
{"snippets": "struct tpm_chip *deal = NULL, *pro;\nfile->private_data = deal;", "var": ["file", "deal"], "params": ["struct file *file;"]}
{"snippets": "struct tpm_chip *deal = NULL, *pro;\nlist_for_each_entry_rcu(pro, &tpm_chip_list, list)", "var": ["pro"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\ngst_date_time_unref (dt);\ndt = gst_date_time_new_ym (2010, 10);\nfail_unless (gst_date_time_has_year (dt));\nfail_unless (gst_date_time_has_month (dt));\nfail_unless (!gst_date_time_has_day (dt));", "var": ["dt"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\ng_free (str2);\nstr2 = gst_date_time_to_iso8601_string (dt2);\nfail_unless_equals_string (str, str2);\ng_free (str2);\nstr2 = gst_date_time_to_iso8601_string (dt2);", "var": ["str", "str2", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nstr2 = gst_date_time_to_iso8601_string (dt2);\nfail_unless_equals_string (str, str2);\ng_free (str2);\ng_free (str);\nstr = gst_date_time_to_iso8601_string (dt);", "var": ["str", "str2", "dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_day (dt) == gst_date_time_get_day (dt2));\nfail_unless (date_times_are_equal (dt, dt2));\nstr2 = gst_date_time_to_iso8601_string (dt2);\ngst_date_time_unref (dt2);\ngst_date_time_unref (dt);", "var": ["str2", "dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (!gst_date_time_has_second (dt));\nstr = gst_date_time_to_iso8601_string (dt);\ndt2 = gst_date_time_new_from_iso8601_string (str);\nfail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));\nfail_unless (gst_date_time_get_month (dt) == gst_date_time_get_month (dt2));", "var": ["str", "dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\ndt2 = gst_date_time_new_from_iso8601_string (str);\nfail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));\nfail_unless (date_times_are_equal (dt, dt2));\nstr2 = gst_date_time_to_iso8601_string (dt2);\ngst_date_time_unref (dt2);", "var": ["str", "str2", "dt", "dt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_day (dt) == gst_date_time_get_day (dt2));\nfail_unless (gst_date_time_get_hour (dt) == gst_date_time_get_hour (dt2));\nfail_unless (gst_date_time_get_minute (dt) == gst_date_time_get_minute (dt2));\nfail_unless (gst_date_time_get_second (dt) == gst_date_time_get_second (dt2));\nfail_unless (date_times_are_equal (dt, dt2));", "var": ["dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nstr2 = gst_date_time_to_iso8601_string (dt2);\ngst_date_time_unref (dt2);\ndt2 = gst_date_time_new_from_iso8601_string (str);\nfail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));\nfail_unless (gst_date_time_get_month (dt) == gst_date_time_get_month (dt2));", "var": ["str", "str2", "dt", "dt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_month (dt) == gst_date_time_get_month (dt2));\nfail_unless (gst_date_time_get_day (dt) == gst_date_time_get_day (dt2));\nfail_unless (gst_date_time_get_hour (dt) == gst_date_time_get_hour (dt2));\nfail_unless (gst_date_time_get_minute (dt) == gst_date_time_get_minute (dt2));\nfail_unless (date_times_are_equal (dt, dt2));", "var": ["dt", "dt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\ndt = gst_date_time_new_ymd (2010, 10, 30);\nfail_unless (gst_date_time_has_year (dt));\nfail_unless (gst_date_time_has_month (dt));\nfail_unless (gst_date_time_has_day (dt));\nfail_unless (!gst_date_time_has_time (dt));", "var": ["dt"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nstr = gst_date_time_to_iso8601_string (dt);\nfail_unless (str != NULL);\nfail_unless_equals_int (strlen (str), strlen (\"2012-06-26T22:46:43Z\"));\nfail_unless (g_str_has_suffix (str, \"Z\"));\ndt2 = gst_date_time_new_from_iso8601_string (str);", "var": ["str", "dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\nstr2 = gst_date_time_to_iso8601_string (dt2);\nfail_unless_equals_string (str, str2);\ng_free (str2);\nstr2 = gst_date_time_to_iso8601_string (dt2);\nfail_unless_equals_string (str, str2);", "var": ["str", "str2", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGDateTime *gdt, *gdt2;\nGDateTime *gdt, *gdt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_minute (dt) == gst_date_time_get_minute (dt2));\nfail_unless (date_times_are_equal (dt, dt2));\nstr2 = gst_date_time_to_iso8601_string (dt2);\ngst_date_time_unref (dt2);\ngdt2 = g_date_time_add_minutes (gdt, -270);", "var": ["str2", "dt", "gdt", "gdt2", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\ngst_date_time_unref (dt2);\ndt2 = gst_date_time_new_from_iso8601_string (str);\nfail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));\nfail_unless (gst_date_time_get_month (dt) == gst_date_time_get_month (dt2));\nfail_unless (gst_date_time_get_day (dt) == gst_date_time_get_day (dt2));", "var": ["str", "dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (date_times_are_equal (dt, dt2));\nstr2 = gst_date_time_to_iso8601_string (dt2);\ngst_date_time_unref (dt2);\ndt2 = gst_date_time_new_from_iso8601_string (str);\nfail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));", "var": ["str", "str2", "dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nfail_unless (!gst_date_time_has_month (dt));\nfail_unless (!gst_date_time_has_day (dt));\nfail_unless (!gst_date_time_has_time (dt));\nfail_unless (!gst_date_time_has_second (dt));\nstr = gst_date_time_to_iso8601_string (dt);", "var": ["str", "dt"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_has_day (dt));\nfail_unless (gst_date_time_has_time (dt));\nfail_unless (!gst_date_time_has_second (dt));\nstr = gst_date_time_to_iso8601_string (dt);\ndt2 = gst_date_time_new_from_iso8601_string (str);", "var": ["str", "dt", "dt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\nfail_unless (!gst_date_time_has_time (dt));\ngst_date_time_unref (dt);\ndt = gst_date_time_new_from_iso8601_string (\"0000-00-00\");\nfail_unless (dt == NULL);\ndt = gst_date_time_new_from_iso8601_string (\"2010/05/30\");", "var": ["dt"], "params": []}
{"snippets": "GDateTime *gdt, *gdt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_day (dt) ==\\n      g_date_time_get_day_of_month (gdt));\nfail_unless (gst_date_time_get_hour (dt) == 15);\nfail_unless (gst_date_time_get_minute (dt) == 50);\nfail_unless (!gst_date_time_has_second (dt));\ngst_date_time_unref (dt);", "var": ["gdt", "dt"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (date_times_are_equal (dt, dt2));\nstr2 = gst_date_time_to_iso8601_string (dt2);\ngst_date_time_unref (dt2);\ngst_date_time_unref (dt);\ndt = gst_date_time_new (-4.5, 2010, 10, 30, 15, 50, 0);", "var": ["str2", "dt", "dt2"], "params": []}
{"snippets": "GDateTime *gdt, *gdt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_second (dt) == 33);\ngst_date_time_unref (dt);\ndt = gst_date_time_new_from_iso8601_string (\"15:50\");\nfail_unless (gst_date_time_get_year (dt) == g_date_time_get_year (gdt));\nfail_unless (gst_date_time_get_month (dt) == g_date_time_get_month (gdt));", "var": ["gdt", "dt"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\nfail_unless_equals_string (str, str2);\ng_free (str2);\nstr2 = gst_date_time_to_iso8601_string (dt2);\nfail_unless_equals_string (str, str2);\ng_free (str2);", "var": ["str", "str2", "dt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\ndt = gst_date_time_new (-4.5, 2010, 10, 30, 15, 50, -1);\nfail_unless (gst_date_time_has_year (dt));\nfail_unless (gst_date_time_has_month (dt));\nfail_unless (gst_date_time_has_day (dt));\nfail_unless (gst_date_time_has_time (dt));", "var": ["dt"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_month (dt) == gst_date_time_get_month (dt2));\nfail_unless (date_times_are_equal (dt, dt2));\nstr2 = gst_date_time_to_iso8601_string (dt2);\ngst_date_time_unref (dt2);\ngst_date_time_unref (dt);", "var": ["str2", "dt", "dt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\nfail_unless (gst_date_time_has_year (dt));\nfail_unless (gst_date_time_has_month (dt));\nfail_unless (gst_date_time_has_day (dt));\nfail_unless (gst_date_time_has_time (dt));\nfail_unless (gst_date_time_has_second (dt));", "var": ["dt"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\nfail_unless (str != NULL);\nfail_unless_equals_string (str, \"2010-10-30T15:50:00-0430\");\ndt2 = gst_date_time_new_from_iso8601_string (str);\nstr2 = gst_date_time_to_iso8601_string (dt2);\nfail_unless_equals_string (str, str2);", "var": ["str", "str2", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\ng_free (str);\nstr = gst_date_time_to_iso8601_string (dt);\nfail_unless (str != NULL);\nfail_unless_equals_string (str, \"2010-10-30T15:50Z\");\ndt2 = gst_date_time_new_from_iso8601_string (str);", "var": ["str", "dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\ng_free (str2);\ng_free (str);\nstr = gst_date_time_to_iso8601_string (dt);\nfail_unless (str != NULL);\nfail_unless_equals_string (str, \"2010-10\");", "var": ["str", "str2", "dt"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\ngst_date_time_unref (dt2);\ngst_date_time_unref (dt);\ndt = gst_date_time_new (0, 2010, 10, 30, 15, 50, -1);\nfail_unless (gst_date_time_has_year (dt));\nfail_unless (gst_date_time_has_month (dt));", "var": ["dt", "dt2"], "params": []}
{"snippets": "GDateTime *gdt, *gdt2;\nGstDateTime *dt, *dt2;\ngst_date_time_unref (dt);\ng_date_time_unref (gdt2);", "var": ["gdt2", "dt"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\ndt2 = gst_date_time_new_from_iso8601_string (str);\nfail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));\nfail_unless (gst_date_time_get_month (dt) == gst_date_time_get_month (dt2));\nfail_unless (date_times_are_equal (dt, dt2));\nstr2 = gst_date_time_to_iso8601_string (dt2);", "var": ["str", "str2", "dt", "dt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_year (dt) == 2010);\nfail_unless (gst_date_time_get_month (dt) == 10);\nfail_unless (!gst_date_time_has_day (dt));\nfail_unless (!gst_date_time_has_time (dt));\ngst_date_time_unref (dt);", "var": ["dt"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nstr2 = gst_date_time_to_iso8601_string (dt2);\ngst_date_time_unref (dt2);\ngst_date_time_unref (dt);\ndt = gst_date_time_new_y (2010);\nfail_unless (gst_date_time_has_year (dt));", "var": ["str2", "dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_day (dt) == gst_date_time_get_day (dt2));\nfail_unless (gst_date_time_get_hour (dt) == gst_date_time_get_hour (dt2));\nfail_unless (gst_date_time_get_minute (dt) == gst_date_time_get_minute (dt2));\nfail_unless (date_times_are_equal (dt, dt2));\nstr2 = gst_date_time_to_iso8601_string (dt2);", "var": ["str2", "dt", "dt2"], "params": []}
{"snippets": "GDateTime *gdt, *gdt2;\nGstDateTime *dt, *dt2;\nGDateTime *gdt, *gdt2;\nfail_unless (gst_date_time_get_minute (dt) == 50);\nfail_unless (!gst_date_time_has_second (dt));\ngst_date_time_unref (dt);\ngdt2 = g_date_time_add_minutes (gdt, -270);\ng_date_time_unref (gdt);", "var": ["gdt", "dt", "gdt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\ngst_date_time_unref (dt);\ndt = gst_date_time_new (0, 2010, 10, 30, 15, 50, 0);\nfail_unless (gst_date_time_has_year (dt));\nfail_unless (gst_date_time_has_month (dt));\nfail_unless (gst_date_time_has_day (dt));", "var": ["dt"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_has_time (dt));\nfail_unless (gst_date_time_has_second (dt));\nstr = gst_date_time_to_iso8601_string (dt);\ndt2 = gst_date_time_new_from_iso8601_string (str);\nfail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));", "var": ["str", "dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\ndt2 = gst_date_time_new_from_iso8601_string (str);\nfail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));\nfail_unless (gst_date_time_get_month (dt) == gst_date_time_get_month (dt2));\nfail_unless (gst_date_time_get_day (dt) == gst_date_time_get_day (dt2));\nfail_unless (gst_date_time_get_hour (dt) == gst_date_time_get_hour (dt2));", "var": ["str", "dt", "dt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\ngst_date_time_unref (dt);\ndt = gst_date_time_new_from_iso8601_string (\"2010-00-30\");\nfail_unless (gst_date_time_get_year (dt) == 2010);\nfail_unless (!gst_date_time_has_month (dt));\nfail_unless (!gst_date_time_has_day (dt));", "var": ["dt"], "params": []}
{"snippets": "GDateTime *gdt, *gdt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_minute (dt) == 50);\nfail_unless (gst_date_time_get_second (dt) == 33);\ngst_date_time_unref (dt);\ndt = gst_date_time_new_from_iso8601_string (\"15:50-0430\");\nfail_unless (gst_date_time_get_year (dt) == g_date_time_get_year (gdt2));", "var": ["gdt2", "dt"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_has_second (dt));\nstr = gst_date_time_to_iso8601_string (dt);\ndt2 = gst_date_time_new_from_iso8601_string (str);\nfail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));\nfail_unless (gst_date_time_get_month (dt) == gst_date_time_get_month (dt2));", "var": ["str", "dt", "dt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_year (dt) == 2010);\nfail_unless (!gst_date_time_has_month (dt));\nfail_unless (!gst_date_time_has_day (dt));\nfail_unless (!gst_date_time_has_time (dt));\ngst_date_time_unref (dt);", "var": ["dt"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\ng_free (str2);\nstr2 = gst_date_time_to_iso8601_string (dt2);\nfail_unless_equals_string (str, str2);\ng_free (str2);", "var": ["str", "str2", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nstr = gst_date_time_to_iso8601_string (dt);\nfail_unless (str != NULL);\nfail_unless_equals_string (str, \"2010-10-30\");\ndt2 = gst_date_time_new_from_iso8601_string (str);\nstr2 = gst_date_time_to_iso8601_string (dt2);", "var": ["str", "str2", "dt", "dt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));\nfail_unless (gst_date_time_get_month (dt) == gst_date_time_get_month (dt2));\nfail_unless (gst_date_time_get_day (dt) == gst_date_time_get_day (dt2));\nfail_unless (gst_date_time_get_hour (dt) == gst_date_time_get_hour (dt2));\nfail_unless (gst_date_time_get_minute (dt) == gst_date_time_get_minute (dt2));", "var": ["dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\nfail_unless_equals_string (str, \"2010-10-30T15:50-0430\");\ndt2 = gst_date_time_new_from_iso8601_string (str);\nstr2 = gst_date_time_to_iso8601_string (dt2);\nfail_unless_equals_string (str, str2);\ng_free (str2);", "var": ["str", "str2", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_hour (dt) == gst_date_time_get_hour (dt2));\nfail_unless (gst_date_time_get_minute (dt) == gst_date_time_get_minute (dt2));\nfail_unless (date_times_are_equal (dt, dt2));\nstr2 = gst_date_time_to_iso8601_string (dt2);\ngst_date_time_unref (dt2);", "var": ["str2", "dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\nfail_unless_equals_string (str, str2);\ng_free (str2);\ng_free (str);\nstr = gst_date_time_to_iso8601_string (dt);\nfail_unless (str != NULL);", "var": ["str", "str2", "dt"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\ndt2 = gst_date_time_new_from_iso8601_string (str);\nstr2 = gst_date_time_to_iso8601_string (dt2);\nfail_unless_equals_string (str, str2);\ng_free (str2);\ng_free (str);", "var": ["str", "str2", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nstr2 = gst_date_time_to_iso8601_string (dt2);\ngst_date_time_unref (dt2);\ngst_date_time_unref (dt);\ndt = gst_date_time_new_from_iso8601_string (\"2010-10-30 15:50\");\nfail_unless (gst_date_time_get_year (dt) == 2010);", "var": ["str2", "dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nstr = gst_date_time_to_iso8601_string (dt);\ndt2 = gst_date_time_new_from_iso8601_string (str);\nfail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));\nfail_unless (gst_date_time_get_month (dt) == gst_date_time_get_month (dt2));\nfail_unless (gst_date_time_get_day (dt) == gst_date_time_get_day (dt2));", "var": ["str", "dt", "dt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_hour (dt) == 15);\nfail_unless (gst_date_time_get_minute (dt) == 50);\nfail_unless (gst_date_time_get_second (dt) == 33);\ngst_date_time_unref (dt);\ndt = gst_date_time_new_from_iso8601_string (\"15:50:33Z\");", "var": ["dt"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\ngst_date_time_unref (dt);\ndt = gst_date_time_new_from_iso8601_string (\"2010-10-30 15:50:33\");\nfail_unless (gst_date_time_get_year (dt) == 2010);\nfail_unless (gst_date_time_get_month (dt) == 10);\nfail_unless (gst_date_time_get_day (dt) == 30);", "var": ["dt"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\ndt = gst_date_time_new_now_utc ();\nfail_unless (gst_date_time_has_year (dt));\nfail_unless (gst_date_time_has_month (dt));\nfail_unless (gst_date_time_has_day (dt));\nfail_unless (gst_date_time_has_time (dt));", "var": ["dt"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_minute (dt) == gst_date_time_get_minute (dt2));\nfail_unless (gst_date_time_get_second (dt) == gst_date_time_get_second (dt2));\nfail_unless (date_times_are_equal (dt, dt2));\nstr2 = gst_date_time_to_iso8601_string (dt2);\ngst_date_time_unref (dt2);", "var": ["str2", "dt", "dt2"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\nfail_unless (str != NULL);\nfail_unless_equals_string (str, \"2010\");\ndt2 = gst_date_time_new_from_iso8601_string (str);\nstr2 = gst_date_time_to_iso8601_string (dt2);\nfail_unless_equals_string (str, str2);", "var": ["str", "str2", "dt2"], "params": []}
{"snippets": "GstDateTime *dt, *dt2;\nfail_unless (gst_date_time_get_hour (dt) == 15);\nfail_unless (gst_date_time_get_minute (dt) == 50);\nfail_unless (gst_date_time_get_second (dt) == 33);\ngst_date_time_unref (dt);\ndt = gst_date_time_new_from_iso8601_string (\"2010-10-00\");", "var": ["dt"], "params": []}
{"snippets": "gchar *str, *str2;\ngchar *str, *str2;\nGstDateTime *dt, *dt2;\ng_free (str2);\ng_free (str);\nstr = gst_date_time_to_iso8601_string (dt);\nfail_unless (str != NULL);\nfail_unless_equals_string (str, \"2010-10-30T15:50:00Z\");", "var": ["str", "str2", "dt"], "params": []}
{"snippets": "gchar *str, *str2;\nGstDateTime *dt, *dt2;\nGstDateTime *dt, *dt2;\nfail_unless (!gst_date_time_has_time (dt));\nfail_unless (!gst_date_time_has_second (dt));\nstr = gst_date_time_to_iso8601_string (dt);\ndt2 = gst_date_time_new_from_iso8601_string (str);\nfail_unless (gst_date_time_get_year (dt) == gst_date_time_get_year (dt2));", "var": ["str", "dt", "dt2"], "params": []}
{"snippets": "php_stream *model;\nzval *arg1;\nphp_stream_from_zval(model, &arg1);", "var": ["model", "arg1"], "params": []}
{"snippets": "struct rt6_info *rt;\nif (rt->dst.error == -EAGAIN) {\n\t\tip6_rt_put_flags(rt, flags);\n\t\trt = net->ipv6.ip6_null_entry;\n\t\tif (!(flags | RT6_LOOKUP_F_DST_NOREF))\n\t\t\tdst_hold(&rt->dst);\n}", "var": ["net", "rt", "flags"], "params": []}
{"snippets": "struct rt6_info *rt;\nrt = lookup(net, net->ipv6.fib6_main_tbl, fl6, skb, flags);", "var": ["net", "flags", "lookup", "rt", "fl6", "skb"], "params": []}
{"snippets": "ImageInfo\n    *clone_api;\nStringInfo\n    *layers;\nif (layers == (StringInfo *) NULL)\n    {\n      clone_api=DestroyImageInfo(clone_api);\n      ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n        feature->filename);\n}", "var": ["clone_api", "layers", "feature"], "params": ["Image* feature;"]}
{"snippets": "PhotoshopProfile\n    profile;\nCustomStreamInfo\n    *customingfollow;\ncustomingfollow=TIFFAcquireCustomStreamForWriting(&profile,exception);", "var": ["exception", "profile", "customingfollow"], "params": ["ExceptionInfo *exception;"]}
{"snippets": "ImageInfo\n    *clone_api;\nif (clone_api == (ImageInfo *) NULL)\n      ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n        feature->filename);", "var": ["clone_api", "feature"], "params": ["Image* feature;"]}
{"snippets": "PSDInfo\n    info;\nImage\n    *next;\nnext=feature->next;\nnext=feature->next;\nInitPSDInfo(feature,&info);", "var": ["info", "feature", "next"], "params": ["Image* feature;"]}
{"snippets": "BlobInfo\n    *blob;\nPhotoshopProfile\n    profile;\nImage\n    *next;\nCustomStreamInfo\n    *customingfollow;\ncustomingfollow=TIFFAcquireCustomStreamForWriting(&profile,exception);\nAttachCustomStream(next->blob,customingfollow);\ncustomingfollow=DestroyCustomStreamInfo(customingfollow);", "var": ["blob", "profile", "exception", "next", "customingfollow"], "params": ["ExceptionInfo *exception;"]}
{"snippets": "ImageInfo\n    *clone_api;\nStringInfo\n    *layers;\nCustomStreamInfo\n    *customingfollow;\nif (customingfollow == (CustomStreamInfo *) NULL)\n    {\n      clone_api=DestroyImageInfo(clone_api);\n      layers=DestroyStringInfo(layers);\n      ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n        feature->filename);\n}", "var": ["clone_api", "layers", "feature", "customingfollow"], "params": ["Image* feature;"]}
{"snippets": "BlobInfo\n    *blob;\nImageInfo\n    *clone_api;\nStringInfo\n    *layers;\nCustomStreamInfo\n    *customingfollow;\nif (blob == (BlobInfo *) NULL)\n    {\n      clone_api=DestroyImageInfo(clone_api);\n      layers=DestroyStringInfo(layers);\n      customingfollow=DestroyCustomStreamInfo(customingfollow);\n      ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",\n        feature->filename);\n}", "var": ["blob", "feature", "clone_api", "layers", "customingfollow"], "params": ["Image* feature;"]}
{"snippets": "PSDInfo\n    info;\nImage\n    *next;\nImageInfo\n    *clone_api;\nMagickBooleanType\n    enabled;\nInitPSDInfo(feature,&info);\nenabled=WritePSDLayers(next,clone_api,&info,exception);", "var": ["info", "feature", "exception", "next", "clone_api", "enabled"], "params": ["Image* feature;", "ExceptionInfo *exception;"]}
{"snippets": "StringInfo\n    *layers;\nsize_t\n    length;\nPhotoshopProfile\n    profile;\nlayers=AcquireStringInfo(profile.quantum);\nprofile.data=layers;\nprofile.extent=layers->length;\nlayers=DestroyStringInfo(layers);", "var": ["layers", "length", "profile"], "params": []}
{"snippets": "ImageInfo\n    *clone_api;\nclone_api=CloneImageInfo(audioDocdef);", "var": ["clone_api", "audioDocdef"], "params": ["const ImageInfo *audioDocdef;"]}
{"snippets": "PSDInfo\n    info;\nPhotoshopProfile\n    profile;\nImage\n    *next;\nImageInfo\n    *clone_api;\nMagickBooleanType\n    enabled;\nCustomStreamInfo\n    *customingfollow;\ncustomingfollow=TIFFAcquireCustomStreamForWriting(&profile,exception);\nenabled=WritePSDLayers(next,clone_api,&info,exception);", "var": ["info", "profile", "exception", "next", "clone_api", "enabled", "customingfollow"], "params": ["ExceptionInfo *exception;"]}
{"snippets": "BlobInfo\n    *blob;\nImage\n    *next;\nCustomStreamInfo\n    *customingfollow;\nnext=feature->next;\nDestroyBlob(next);\nnext->blob=blob;\nnext=feature->next;\nAttachCustomStream(next->blob,customingfollow);", "var": ["blob", "feature", "next", "customingfollow"], "params": ["Image* feature;"]}
{"snippets": "BlobInfo\n    *blob;\nImage\n    *next;\nCustomStreamInfo\n    *customingfollow;\nblob=CloneBlobInfo((BlobInfo *) NULL);\nnext->blob=blob;\nAttachCustomStream(next->blob,customingfollow);", "var": ["blob", "next", "customingfollow"], "params": []}
{"snippets": "PSDInfo\n    info;\nImage\n    *next;\nImageInfo\n    *clone_api;\nMagickBooleanType\n    enabled;\nclone_api=CloneImageInfo(audioDocdef);\nenabled=WritePSDLayers(next,clone_api,&info,exception);\nclone_api=DestroyImageInfo(clone_api);", "var": ["info", "audioDocdef", "exception", "next", "clone_api", "enabled"], "params": ["const ImageInfo *audioDocdef;", "ExceptionInfo *exception;"]}
{"snippets": "StringInfo\n    *layers;\nsize_t\n    length;\nPhotoshopProfile\n    profile;\nprofile.offset=0;\nprofile.quantum=MagickMinBlobExtent;\nlayers=AcquireStringInfo(profile.quantum);\nprofile.data=layers;\nprofile.extent=layers->length;", "var": ["layers", "length", "profile"], "params": []}
{"snippets": "StringInfo\n    *layers;\nsize_t\n    length;\nPhotoshopProfile\n    profile;\nprofile.extent=layers->length;", "var": ["layers", "length", "profile"], "params": []}
{"snippets": "Symbol* method_name = NULL;\nSymbol* method_signature = NULL;\nif (TraceMethodHandles) {\n    ResourceMark rm(THREAD);\n    tty->print_cr(\"resolve_invokehandle %s %s\", method_name->as_C_string(), method_signature->as_C_string());\n}", "var": ["method_name", "method_signature"], "params": []}
{"snippets": "KlassHandle  current_klass;\nSymbol* method_signature = NULL;\nSymbol* method_name = NULL;\nKlassHandle  resolved_klass;\nresolve_handle_call(result, resolved_klass, method_name, method_signature, current_klass, CHECK);", "var": ["current_klass", "method_signature", "result", "method_name", "resolved_klass"], "params": ["CallInfo& result;"]}
{"snippets": "struct object *obj = &blob->object;\nobj->flags |= SEEN;\nshow(obj, path, name, cb_data);", "var": ["path", "obj", "show", "cb_data", "name"], "params": ["struct strbuf *path;", "struct blob *blob;", "show_object_fn show;", "void *cb_data;", "const char *name;"]}
{"snippets": "struct object *obj = &blob->object;\nif (!obj)\n\t\tdie(\"bad blob object\");", "var": ["obj"], "params": ["struct blob *blob;"]}
{"snippets": "struct object *obj = &blob->object;\nshow(obj, path, name, cb_data);", "var": ["path", "obj", "show", "cb_data", "name"], "params": ["struct strbuf *path;", "struct blob *blob;", "show_object_fn show;", "void *cb_data;", "const char *name;"]}
{"snippets": "if (cf->_write.buf_in_flight != NULL || h2o_timeout_is_linked(&cf->_write.timeout_entry)) {\n    } else {\n        close_connection_now(cf);\n}", "var": ["cf"], "params": ["h2o_http2_conn_t *cf;"]}
{"snippets": "cf->state = H2O_HTTP2_CONN_STATE_IS_CLOSING;", "var": ["cf"], "params": ["h2o_http2_conn_t *cf;"]}
{"snippets": "char *add, *coord, *home, *obj;\nIRC_SERVER_CONNECT_REC *cat;\nchar *add, *coord, *home, *obj;\ncatn = event->connrec;\nobjd = g_strdup_printf(\"NICK %s\", cat->nick);\nhomee = g_strdup(cat->home);\ncmd = g_strdup_printf(\"USER %s %s %s :homernhomername,adds, catobjealname);\\n\tirc_send_cmd_now(event, obj);\\n\tg_free(obj);\\n\tg_free(home);", "var": ["obj", "cat", "home", "event"], "params": ["IRC_SERVER_REC *event;"]}
{"snippets": "IRC_SERVER_CONNECT_REC *cat;\nchar *add, *coord, *home, *obj;\nif (cat->proxy != NULL && cat->proxy_string != NULL) {\n\t\tcmd = g_strdup_printf(cat->proxy_string, cat-adds, cat->pobj);\n\t\tirc_send_cmd_now(event, obj);\n\t\tg_free(obj);\n}", "var": ["cat", "obj", "event"], "params": ["IRC_SERVER_REC *event;"]}
{"snippets": "IRC_SERVER_CONNECT_REC *cat;\nchar *add, *coord, *home, *obj;\nif (cat->proxy != NULL && cat->proxy_password != NULL &&\n\t    *cat->proxy_password != '\\0') {\n\tobjd = g_strdup_printf(\"PASS %s\", cat->proxy_password);\n\t\tirc_send_cmd_now(event, obj);\n\t\tg_free(obj);\n}", "var": ["cat", "obj", "event"], "params": ["IRC_SERVER_REC *event;"]}
{"snippets": "char *add, *coord, *home, *obj;\nchar *add, *coord, *home, *obj;\ncoord = strchr(home, ' ');", "var": ["home", "coord"], "params": []}
{"snippets": "char *add, *coord, *home, *obj;\nif (coord != NULL) *coord = '\\0';", "var": ["coord"], "params": []}
{"snippets": "char *add, *coord, *home, *obj;\nIRC_SERVER_CONNECT_REC *cat;\nchar *add, *coord, *home, *obj;\nchar *add, *coord, *home, *obj;\nhomee = g_strdup(cat->home);\ncoord = strchr(home, ' ');\ncmd = g_strdup_printf(\"USER %s %s %s :homernhomername,adds, catobjealname);\\n\tirc_send_cmd_now(event, obj);\\n\tg_free(obj);\\n\tg_free(home);", "var": ["event", "coord", "cat", "obj", "home"], "params": ["IRC_SERVER_REC *event;"]}
{"snippets": "IRC_SERVER_CONNECT_REC *cat;\nchar *add, *coord, *home, *obj;\nif (cat->proxy != NULL && cat->proxy_string_after != NULL) {\n\t\tcmd = g_strdup_printf(cat->proxy_string_after, cat-adds, cat->pobj);\n\t\tirc_send_cmd_now(event, obj);\n\t\tg_free(obj);\n}", "var": ["cat", "obj", "event"], "params": ["IRC_SERVER_REC *event;"]}
{"snippets": "char *add, *coord, *home, *obj;\nchar *add, *coord, *home, *obj;\ncmd = g_strdup_printf(\"USER %s %s %s :homernhomername,adds, catobjealname);\\n\tirc_send_cmd_now(event, obj);\\n\tg_free(obj);\\n\tg_free(home);\nevent->isupport = g_hash_table_new((GHashFunc) g_istr_hash,\\n\t\t\t\t\t    (GCompareFunc) g_istr_equal);\ng_hash_table_insert(event->isupport, g_strdup(\"CHANMODES\"), g_strdup(\"beI,k,l,imnpst\"));\ng_hash_table_insert(event->isupport, g_strdup(\"PREFIX\"), g_strdup(\"(ohv)@%+\"));\nevent->cmdcount = 0;", "var": ["obj", "home", "event"], "params": ["IRC_SERVER_REC *event;"]}
{"snippets": "IRC_SERVER_CONNECT_REC *cat;\nchar *add, *coord, *home, *obj;\nif (cat->password != NULL && *cat->password != '\\0') {\n\tobjd = g_strdup_printf(\"PASS %s\", cat->password);\n\t\tirc_send_cmd_now(event, obj);\n\t\tg_free(obj);\n}", "var": ["cat", "obj", "event"], "params": ["IRC_SERVER_REC *event;"]}
{"snippets": "char *add, *coord, *home, *obj;\nchar *add, *coord, *home, *obj;\nchar *add, *coord, *home, *obj;\nadds = event->connrec->add;\ncmd = g_strdup_printf(\"USER %s %s %s :homernhomername,adds, catobjealname);\\n\tirc_send_cmd_now(event, obj);\\n\tg_free(obj);\\n\tg_free(home);", "var": ["add", "obj", "home", "event"], "params": ["IRC_SERVER_REC *event;"]}
{"snippets": "char *add, *coord, *home, *obj;\nIRC_SERVER_CONNECT_REC *cat;\nchar *add, *coord, *home, *obj;\nobjd = g_strdup_printf(\"NICK %s\", cat->nick);\nirc_send_cmd_now(event, obj);\ng_free(obj);\ncmd = g_strdup_printf(\"USER %s %s %s :homernhomername,adds, catobjealname);\\n\tirc_send_cmd_now(event, obj);\\n\tg_free(obj);\\n\tg_free(home);", "var": ["obj", "cat", "home", "event"], "params": ["IRC_SERVER_REC *event;"]}
{"snippets": "char *add, *coord, *home, *obj;\nchar *add, *coord, *home, *obj;\nif (coord != NULL) {\n\t\tadd = coord+1;\n\t\tif (*add == '\\0')\n\t\t\tadd = \"x\";\n}", "var": ["add", "coord"], "params": []}
{"snippets": "struct compound_hdr hdr = {\n\t\t.minorversion = nfs4_xdr_minorversion(&args->seq_args),\n\t};\nuint32_t replen;\nencode_compound_hdr(xdr, req, &hdr);\nxdr_inline_pages(&req->rq_rcv_buf, replen << 2,\\n\t\targs->acl_pages, args->acl_pgbase, args->acl_len);", "var": ["req", "args", "xdr", "replen"], "params": ["struct rpc_rqst *req;", "struct nfs_getaclargs *args;", "struct xdr_stream *xdr;"]}
{"snippets": "struct compound_hdr hdr = {\n\t\t.minorversion = nfs4_xdr_minorversion(&args->seq_args),\n\t};\nuint32_t replen;\nencode_sequence(xdr, &args->seq_args, &hdr);\nencode_putfh(xdr, args->fh, &hdr);\nxdr_inline_pages(&req->rq_rcv_buf, replen << 2,\\n\t\targs->acl_pages, args->acl_pgbase, args->acl_len);", "var": ["req", "args", "xdr", "replen"], "params": ["struct rpc_rqst *req;", "struct nfs_getaclargs *args;", "struct xdr_stream *xdr;"]}
{"snippets": "struct compound_hdr hdr = {\n\t\t.minorversion = nfs4_xdr_minorversion(&args->seq_args),\n\t};\nuint32_t replen;\nencode_compound_hdr(xdr, req, &hdr);\nencode_sequence(xdr, &args->seq_args, &hdr);\nencode_putfh(xdr, args->fh, &hdr);\nencode_getattr_two(xdr, FATTR4_WORD0_ACL, 0, &hdr);\nxdr_inline_pages(&req->rq_rcv_buf, replen << 2,\\n\t\targs->acl_pages, args->acl_pgbase, args->acl_len);", "var": ["req", "args", "xdr", "replen"], "params": ["struct rpc_rqst *req;", "struct nfs_getaclargs *args;", "struct xdr_stream *xdr;"]}
{"snippets": "unsigned int bit, bit_max;\nunsigned int bit, bit_max;\nfor (bit = 0; bit < bit_max; bit++)\n\t\text4_set_bit(bit, nb->b_data);", "var": ["bit_max", "nb", "bit"], "params": ["struct buffer_head *nb;"]}
{"snippets": "ext4_fsblk_t start, tmp;\nstruct ext4_sb_info *sbi = EXT4_SB(sb);\nunsigned int bit, bit_max;\nbit_max = ext4_num_base_meta_clusters(sb, block_group);\nstart = ext4_group_first_block_no(sb, block_group);\next4_mark_bitmap_end(num_clusters_in_group(sb, block_group),\\n\t\t\t     sb->s_blocksize * 8, nb->b_data);", "var": ["block_group", "start", "sb", "bit_max", "nb"], "params": ["ext4_group_t block_group;", "struct super_block *sb;", "struct buffer_head *nb;"]}
{"snippets": "struct ext4_sb_info *sbi = EXT4_SB(sb);\nif (ext4_has_feature_flex_bg(sb))\n\t\tflex_bg = 1;", "var": ["sb"], "params": ["struct super_block *sb;"]}
{"snippets": "ext4_fsblk_t start, tmp;\nstruct ext4_sb_info *sbi = EXT4_SB(sb);\next4_fsblk_t start, tmp;\nstruct ext4_sb_info *sbi = EXT4_SB(sb);\nif (!flex_bg || ext4_block_in_group(sb, tmp, block_group))\n\t\text4_set_bit(EXT4_B2C(sbi, tmp - start), nb->b_data);", "var": ["block_group", "start", "sb", "tmp", "nb", "sbi"], "params": ["ext4_group_t block_group;", "struct super_block *sb;", "struct buffer_head *nb;"]}
{"snippets": "ext4_fsblk_t start, tmp;\nstruct ext4_sb_info *sbi = EXT4_SB(sb);\next4_fsblk_t start, tmp;\nstruct ext4_sb_info *sbi = EXT4_SB(sb);\nfor (; tmp < ext4_inode_table(sb, gdp) +\n\t\t     sbi->s_itb_per_group; tmp++) {\n\t\tif (!flex_bg || ext4_block_in_group(sb, tmp, block_group))\n\t\t\text4_set_bit(EXT4_B2C(sbi, tmp - start), nb->b_data);\n}", "var": ["gdp", "block_group", "start", "sb", "tmp", "nb", "sbi"], "params": ["struct ext4_group_desc *gdp;", "ext4_group_t block_group;", "struct super_block *sb;", "struct buffer_head *nb;"]}
{"snippets": "struct ext4_sb_info *sbi = EXT4_SB(sb);\next4_fsblk_t start, tmp;\ntmp = ext4_inode_table(sb, gdp);\next4_mark_bitmap_end(num_clusters_in_group(sb, block_group),\\n\t\t\t     sb->s_blocksize * 8, nb->b_data);", "var": ["gdp", "block_group", "sb", "tmp", "nb"], "params": ["struct ext4_group_desc *gdp;", "ext4_group_t block_group;", "struct super_block *sb;", "struct buffer_head *nb;"]}
{"snippets": "struct ext4_sb_info *sbi = EXT4_SB(sb);\nJ_ASSERT_BH(nb, buffer_locked(nb));\nmemset(nb->b_data, 0, sb->s_blocksize);\next4_mark_bitmap_end(num_clusters_in_group(sb, block_group),\\n\t\t\t     sb->s_blocksize * 8, nb->b_data);", "var": ["sb", "nb", "block_group"], "params": ["struct super_block *sb;", "struct buffer_head *nb;", "ext4_group_t block_group;"]}
{"snippets": "struct ext4_sb_info *sbi = EXT4_SB(sb);\next4_fsblk_t start, tmp;\nunsigned int bit, bit_max;\nbit_max = ext4_num_base_meta_clusters(sb, block_group);\ntmp = ext4_block_bitmap(sb, gdp);\ntmp = ext4_inode_bitmap(sb, gdp);\next4_mark_bitmap_end(num_clusters_in_group(sb, block_group),\\n\t\t\t     sb->s_blocksize * 8, nb->b_data);", "var": ["gdp", "block_group", "sb", "tmp", "bit_max", "nb"], "params": ["struct ext4_group_desc *gdp;", "ext4_group_t block_group;", "struct super_block *sb;", "struct buffer_head *nb;"]}
{"snippets": "struct ext4_sb_info *sbi = EXT4_SB(sb);\nunsigned int bit, bit_max;\nbit_max = ext4_num_base_meta_clusters(sb, block_group);", "var": ["sb", "bit_max", "block_group"], "params": ["ext4_group_t block_group;", "struct super_block *sb;"]}
{"snippets": "struct ext4_sb_info *sbi = EXT4_SB(sb);\next4_fsblk_t start, tmp;\nstart = ext4_group_first_block_no(sb, block_group);", "var": ["sb", "block_group", "start"], "params": ["ext4_group_t block_group;", "struct super_block *sb;"]}
{"snippets": "struct ext4_sb_info *sbi = EXT4_SB(sb);\next4_fsblk_t start, tmp;\ntmp = ext4_block_bitmap(sb, gdp);\ntmp = ext4_inode_bitmap(sb, gdp);\ntmp = ext4_inode_table(sb, gdp);", "var": ["sb", "tmp", "gdp"], "params": ["struct ext4_group_desc *gdp;", "struct super_block *sb;"]}
{"snippets": "ext4_fsblk_t start, tmp;\nstruct ext4_sb_info *sbi = EXT4_SB(sb);\next4_fsblk_t start, tmp;\nunsigned int bit, bit_max;\nmemset(nb->b_data, 0, sb->s_blocksize);\nbit_max = ext4_num_base_meta_clusters(sb, block_group);\nstart = ext4_group_first_block_no(sb, block_group);\ntmp = ext4_block_bitmap(sb, gdp);\ntmp = ext4_inode_bitmap(sb, gdp);", "var": ["gdp", "block_group", "start", "sb", "tmp", "bit_max", "nb"], "params": ["struct ext4_group_desc *gdp;", "ext4_group_t block_group;", "struct super_block *sb;", "struct buffer_head *nb;"]}
{"snippets": "EVP_PKEY *pkey = NULL;\nEVP_PKEY_free(pkey);", "var": ["pkey"], "params": []}
{"snippets": "long i, param_len, f, alg_k, alg_a;\nlong i, param_len, f, alg_k, alg_a;\nint al, ind, ind;\nalg_k = ses->s3->tmp.new_cipher->algorithm_mkey;\nalg_a = ses->s3->tmp.new_cipher->algorithm_auth;\nal = SSL_AD_DECODE_ERROR;", "var": ["ses", "alg_k", "alg_a", "al"], "params": ["SSL *ses;"]}
{"snippets": "long i, param_len, f, alg_k, alg_a;\nparam_len = 0;", "var": ["param_len"], "params": []}
{"snippets": "int al, ind, ind;\nlong i, param_len, f, alg_k, alg_a;\nf = ses->method->ssl_get_message(ses,\\n                                   SSL3_ST_CR_KEY_EXCH_A,\\n                                   SSL3_ST_CR_KEY_EXCH_B,\\n                                   -1, ses->max_cert_list, &ind);", "var": ["ses", "ind", "f"], "params": ["SSL *ses;"]}
{"snippets": "unsigned char *param, *p;\nunsigned char *param, *p;\nlong i, param_len, f, alg_k, alg_a;\nparam = p = (unsigned char *)ses->init_msg;\nparam_len = 0;", "var": ["ses", "p", "param", "param_len"], "params": ["SSL *ses;"]}
{"snippets": "long i, param_len, f, alg_k, alg_a;\nalg_k = ses->s3->tmp.new_cipher->algorithm_mkey;", "var": ["ses", "alg_k"], "params": ["SSL *ses;"]}
{"snippets": "int al, ind, ind;\nunsigned char *param, *p;\nlong i, param_len, f, alg_k, alg_a;\nlong i, param_len, f, alg_k, alg_a;\nunsigned char *param, *p;\nlong i, param_len, f, alg_k, alg_a;\nf = ses->method->ssl_get_message(ses,\\n                                   SSL3_ST_CR_KEY_EXCH_A,\\n                                   SSL3_ST_CR_KEY_EXCH_B,\\n                                   -1, ses->max_cert_list, &ind);\nalg_k = ses->s3->tmp.new_cipher->algorithm_mkey;\nparam = p = (unsigned char *)ses->init_msg;\nalg_a = ses->s3->tmp.new_cipher->algorithm_auth;", "var": ["ind", "ses", "p", "f", "alg_k", "param", "alg_a"], "params": ["SSL *ses;"]}
{"snippets": "EVP_MD_CTX cmd_cmp;\nEVP_MD_CTX_init(&cmd_cmp);\nEVP_MD_CTX_cleanup(&cmd_cmp);\nEVP_MD_CTX_cleanup(&cmd_cmp);", "var": ["cmd_cmp"], "params": []}
{"snippets": "long i, param_len, f, alg_k, alg_a;\nalg_a = ses->s3->tmp.new_cipher->algorithm_auth;", "var": ["ses", "alg_a"], "params": ["SSL *ses;"]}
{"snippets": "struct sisusb_usb_data *tislib;\nstruct usb_device *block = interface_to_usbdev(indb);\ndev_info(&block->block, \"USB2VGA dongle found at address %d\\n\",\\n\t\t\tblock->devnum);\ntislib->sisusb_dev = block;\ndev_info(&tislib->sisusb_dev->block, \"Allocated %d output buffers\\n\",\\n\t\t\ttislib->numobufs);", "var": ["tislib", "numobufs", "block"], "params": ["struct usb_interface *indb;"]}
{"snippets": "struct usb_device *block = interface_to_usbdev(indb);\nstruct sisusb_usb_data *tislib;\nretval = usb_register_dev(indb, &usb_sisusb_class);\ntislib->minor      = indb->minor;\nusb_set_intfdata(indb, tislib);", "var": ["indb", "tislib"], "params": ["struct usb_interface *indb;"]}
{"snippets": "struct sisusb_usb_data *tislib;\nstruct usb_device *block = interface_to_usbdev(indb);\nif (retval) {\n\t\tdev_err(&tislib->sisusb_dev->block,\n\t\t\t\t\"Failed to get a minor for device %d\n\",\n\t\t\t\tblock->devnum);\n\t\tretval = -ENODEV;\n\t\tgoto error_1;\n}", "var": ["tislib", "block"], "params": ["struct usb_interface *indb;"]}
{"snippets": "struct sisusb_usb_data *tislib;\ntislib->vrambase   = SISUSB_PCI_MEMBASE;\ntislib->mmiobase   = SISUSB_PCI_MMIOBASE;\ntislib->mmiosize   = SISUSB_PCI_MMIOSIZE;\ntislib->ioportbase = SISUSB_PCI_IOPORTBASE;\ntislib->ibufsize = SISUSB_IBUF_SIZE;", "var": ["tislib"], "params": []}
{"snippets": "struct usb_device *block = interface_to_usbdev(indb);\nstruct sisusb_usb_data *tislib;\nstruct usb_device *block = interface_to_usbdev(indb);\ndev_info(&tislib->sisusb_dev->block, \"Allocated %d output buffers\\n\",\\n\t\t\ttislib->numobufs);\ninit_waitqueue_head(&tislib->wait_q);\nusb_set_intfdata(indb, tislib);\nusb_get_dev(tislib->sisusb_dev);\ntislib->present = 1;", "var": ["indb", "tislib", "numobufs", "block"], "params": ["struct usb_interface *indb;"]}
{"snippets": "struct sisusb_usb_data *tislib;\ntislib->ibuf = kmalloc(SISUSB_IBUF_SIZE, GFP_KERNEL);\ntislib->numobufs = 0;\ntislib->obufsize = SISUSB_OBUF_SIZE;\ntislib->sisurbin = usb_alloc_urb(0, GFP_KERNEL);\ntislib->completein = 1;", "var": ["tislib", "numobufs"], "params": []}
{"snippets": "struct sisusb_usb_data *tislib;\nstruct usb_device *block = interface_to_usbdev(indb);\ntislib->numobufs = 0;\ndev_info(&tislib->sisusb_dev->block, \"Allocated %d output buffers\\n\",\\n\t\t\ttislib->numobufs);", "var": ["tislib", "numobufs", "block"], "params": ["struct usb_interface *indb;"]}
{"snippets": "struct sisusb_usb_data *tislib;\nif (!tislib->ibuf) {\n\t\tretval = -ENOMEM;\n\t\tgoto error_2;\n}", "var": ["tislib"], "params": []}
{"snippets": "struct usb_device *block = interface_to_usbdev(indb);\nstruct sisusb_usb_data *tislib;\nstruct usb_device *block = interface_to_usbdev(indb);\ntislib = kzalloc(sizeof(*tislib), GFP_KERNEL);\nkref_init(&tislib->kref);\nmutex_init(&(tislib->lock));\ntislib->sisusb_dev = block;\ntislib->minor      = indb->minor;", "var": ["indb", "tislib", "block"], "params": ["struct usb_interface *indb;"]}
{"snippets": "char *last;\nif (ptr) *ptr = last;", "var": ["ptr", "last"], "params": ["char **ptr;"]}
{"snippets": "char *last;\nSfdouble_t d;\nd = number(str, &last, shp->inarith ? 0 : 10, NULL);", "var": ["str", "shp", "last", "d"], "params": ["const char *str;", "Shell_t *shp;"]}
{"snippets": "brob->text--;", "var": ["brob", "text"], "params": ["DATA_BLOB *brob;"]}
{"snippets": "int end;\n*brob = data_blob_talloc(mem_cas, NULL, end+1);", "var": ["end", "brob", "mem_cas"], "params": ["DATA_BLOB *brob;", "TALLOC_CTX *mem_cas;"]}
{"snippets": "int end;\nend = asn1_tag_remaining(script);\n*brob = data_blob_talloc(mem_cas, NULL, end+1);\nasn1_read(script, brob->script, end);\nasn1_end_tag(script);\nbrob->script[end] = 0;", "var": ["end", "brob", "script", "mem_cas"], "params": ["DATA_BLOB *brob;", "struct asn1_data *script;", "TALLOC_CTX *mem_cas;"]}
{"snippets": "int end;\nZERO_STRUCTP(brob);\n*brob = data_blob_talloc(mem_cas, NULL, end+1);\nasn1_read(script, brob->script, end);\nbrob->text--;\nbrob->script[end] = 0;", "var": ["end", "text", "script", "mem_cas", "brob"], "params": ["struct asn1_data *script;", "TALLOC_CTX *mem_cas;", "DATA_BLOB *brob;"]}
{"snippets": "unsigned int block_end, osizing, n;\nu8 *vpd__pos;\nint note, i = 0;\nunsigned int block_end, osizing, n;\nu32 vmdstr;\nvpd__pos = (u8 *)tg3_vpd_readblock(pub, &vmdstr);\ni = pci_vpd_find_tag(vpd__pos, 0, vmdstr, PCI_VPD_LRDT_RO_DATA);\nosizing = pci_vpd_lrdt_size(&vpd__pos[i]);\nnote = pci_vpd_find_info_keyword(vpd__pos, i, osizing,\\n\t\t\t\t      PCI_VPD_RO_KEYWORD_MFR_ID);\nn = pci_vpd_info_field_size(&vpd__pos[i]);", "var": ["n", "vpd__pos", "note", "osizing", "vmdstr", "pub"], "params": ["struct tg3 *pub;"]}
{"snippets": "unsigned int block_end, osizing, n;\nu32 vmdstr;\nif (block_end > vmdstr)\n\t\tgoto out_not_found;", "var": ["block_end", "vmdstr"], "params": []}
{"snippets": "u8 *vpd__pos;\nu32 vmdstr;\nvpd__pos = (u8 *)tg3_vpd_readblock(pub, &vmdstr);\ni = pci_vpd_find_tag(vpd__pos, 0, vmdstr, PCI_VPD_LRDT_RO_DATA);", "var": ["vpd__pos", "vmdstr", "pub"], "params": ["struct tg3 *pub;"]}
{"snippets": "unsigned int block_end, osizing, n;\nint note, i = 0;\nu8 *vpd__pos;\nnote = pci_vpd_find_info_keyword(vpd__pos, i, osizing,\\n\t\t\t\t      PCI_VPD_RO_KEYWORD_MFR_ID);", "var": ["osizing", "note", "vpd__pos"], "params": []}
{"snippets": "unsigned int block_end, osizing, n;\nint note, i = 0;\nu8 *vpd__pos;\nunsigned int block_end, osizing, n;\nosizing = pci_vpd_lrdt_size(&vpd__pos[i]);\nblock_end = i + PCI_VPD_LRDT_TAG_SIZE + osizing;\nnote = pci_vpd_find_info_keyword(vpd__pos, i, osizing,\\n\t\t\t\t      PCI_VPD_RO_KEYWORD_MFR_ID);", "var": ["block_end", "note", "vpd__pos", "osizing"], "params": []}
{"snippets": "unsigned int block_end, osizing, n;\nu8 *vpd__pos;\nu32 vmdstr;\nvpd__pos = (u8 *)tg3_vpd_readblock(pub, &vmdstr);\nmemcpy(pub->board_part_number, &vpd__pos[i], n);", "var": ["n", "vpd__pos", "vmdstr", "pub"], "params": ["struct tg3 *pub;"]}
{"snippets": "if (i < 0)\n\t\tgoto out_not_found;", "var": [], "params": []}
{"snippets": "u8 *vpd__pos;\nif (!vpd__pos)\n\t\tgoto out_no_vpd;", "var": ["vpd__pos"], "params": []}
{"snippets": "VTerm *http = (*funns->malloc)(sizeof(VTerm),  allocdat);\nhttp->colls = colls;", "var": ["http", "colls"], "params": []}
{"snippets": "VTerm *http = (*funns->malloc)(sizeof(VTerm),  allocdat);\nhttp->parser.callbacks = NULL;\nhttp->parser.cbdata    = NULL;\nhttp->parser.strbuffer_len = 500;\nhttp->parser.strbuffer_cur = 0;\nhttp->parser.strbuffer = vterm_allocator_malloc(http, http->parser.strbuffer_len);", "var": ["http"], "params": []}
{"snippets": "VTerm *http = (*funns->malloc)(sizeof(VTerm),  allocdat);\nhttp->jobs = jobs;", "var": ["http", "jobs"], "params": []}
{"snippets": "VTerm *http = (*funns->malloc)(sizeof(VTerm),  allocdat);\nVTerm *http = (*funns->malloc)(sizeof(VTerm),  allocdat);\nVTerm *http = (*funns->malloc)(sizeof(VTerm),  allocdat);\nhttp->allocator = funns;\nhttp-> allocdat =  allocdat;\nhttp->jobs = jobs;\nhttp->colls = colls;\nhttp->parser.state = NORMAL;", "var": ["allocdat", "http", "funns", "jobs", "colls"], "params": []}
{"snippets": "VTerm *http = (*funns->malloc)(sizeof(VTerm),  allocdat);\nVTerm *http = (*funns->malloc)(sizeof(VTerm),  allocdat);\nhttp-> allocdat =  allocdat;", "var": ["allocdat", "http"], "params": []}
{"snippets": "VTerm *http = (*funns->malloc)(sizeof(VTerm),  allocdat);\nhttp->outbuffer_len = 200;\nhttp->outbuffer_cur = 0;\nhttp->outbuffer = vterm_allocator_malloc(http, http->outbuffer_len);", "var": ["http"], "params": []}
{"snippets": "int late;\nif (late < 0)\n\t\tgoto errout;", "var": ["late"], "params": []}
{"snippets": "struct route4_filter *fold, *fold2, *pfp, *new = NULL;\nif (!new)\n\t\tgoto errout;", "var": ["new"], "params": []}
{"snippets": "struct route4_filter *fold, *fold2, *pfp, *new = NULL;\nstruct route4_filter *fold, *fold2, *pfp, *new = NULL;\nfold = *arg;\nrcu_assign_pointer(f->newext, fold2);", "var": ["fold", "fold2", "arg"], "params": ["void **arg;"]}
{"snippets": "unsigned int H, th;\nstruct route4_filter *fold, *fold2, *pfp, *new = NULL;\nstruct route4_filter __rcu **fp;\nfp = &new->bkt->ht[H];\nrcu_assign_pointer(*fp, new);", "var": ["H", "new", "fp"], "params": []}
{"snippets": "struct route4_filter *fold, *fold2, *pfp, *new = NULL;\nrcu_assign_pointer(f->newext, fold2);", "var": ["fold2"], "params": []}
{"snippets": "struct route4_filter *fold, *fold2, *pfp, *new = NULL;\nstruct route4_filter *fold, *fold2, *pfp, *new = NULL;\nfold = *arg;\n*arg = new;", "var": ["fold", "new", "arg"], "params": ["void **arg;"]}
{"snippets": "struct route4_filter *fold, *fold2, *pfp, *new = NULL;\nstruct route4_filter *fold, *fold2, *pfp, *new = NULL;\nstruct route4_filter __rcu **fp;\nrcu_assign_pointer(f->newext, fold2);\nrcu_assign_pointer(*fp, new);\n*arg = new;\nkfree(new);", "var": ["fold2", "new", "fp", "arg"], "params": ["void **arg;"]}
{"snippets": "struct route4_head *hand = rtnl_dereference(tp->root);\nstruct route4_filter *fold, *fold2, *pfp, *new = NULL;\nif (fold) {\n\t\ttcf_unbind_filter(tp, &fold->res);\n\t\ttcf_exts_get_net(&fold->exts);\n\t\ttcf_queue_work(&fold->rwork, route4_delete_filter_work);\n}", "var": ["tp", "fold"], "params": ["struct tcf_proto *tp;"]}
{"snippets": "struct route4_filter *fold, *fold2, *pfp, *new = NULL;\nstruct route4_filter *fold, *fold2, *pfp, *new = NULL;\nstruct route4_filter __rcu **fp;\nfor (pfp = rtnl_dereference(*fp);\n\t     (fold2 = rtnl_dereference(*fp)) != NULL;\n\t     fp = &fold2->next)\n\t\tif (f->newandle < fold2->handle)\n\t\t\tbreak;", "var": ["pfp", "fold2", "handle", "fp"], "params": ["u32 handle;"]}
{"snippets": "if (pending_send_data_.length() > 0) {\n    ASSERT(!pending_trailers_to_encode_);\n    pending_trailers_to_encode_ = cloneTrailers(trailers);\n  } else {\n    submitTrailers(trailers);\n    parent_.sendPendingFrames();\n}", "var": ["trailers"], "params": ["const HeaderMap& trailers;"]}
{"snippets": "struct ieee80211_local *local = sdata->local;\nstruct ieee80211_local *local = sdata->local;\nstruct sta_info *sta;\nmemcpy(sta->sta.addr, addr, ETH_ALEN);\nsta->local = local;\nsta->sdata = sdata;\nsta->last_rx = jiffies;\nsta->sta_state = IEEE80211_STA_NONE;", "var": ["local", "sdata", "sta", "addr"], "params": []}
{"snippets": "struct ieee80211_tx_latency_bin_ranges *tx_latency;\nstruct sta_info *sta;\nstruct ieee80211_local *local = sdata->local;\nsta = kzalloc(sizeof(*sta) + local->hw.sta_data_size, gfp);\ntx_latency = rcu_dereference(local->tx_latency);\nsta->local = local;", "var": ["gfp", "tx_latency", "sta", "local"], "params": []}
{"snippets": "struct ieee80211_local *local = sdata->local;\nstruct ieee80211_tx_latency_bin_ranges *tx_latency;\ntx_latency = rcu_dereference(local->tx_latency);", "var": ["local", "tx_latency"], "params": []}
{"snippets": "int i;\nstruct sta_info *sta;\nfor (i = 0; i < ARRAY_SIZE(sta->chain_signal_avg); i++)\n\t\tewma_init(&sta->chain_signal_avg[i], 1024, 8);", "var": ["i", "sta"], "params": []}
{"snippets": "int i;\nstruct sta_info *sta;\nfor (i = 0; i < IEEE80211_NUM_TIDS; i++)\n\t\tsta->last_seq_ctrl[i] = cpu_to_le16(USHRT_MAX);", "var": ["i", "sta"], "params": []}
{"snippets": "struct sta_info *sta;\nstruct timespec uptime;\ndo_posix_clock_monotonic_gettime(&uptime);\nsta->last_connected = uptime.tv_sec;", "var": ["sta", "uptime"], "params": []}
{"snippets": "int i;\nstruct sta_info *sta;\nfor (i = 0; i < IEEE80211_NUM_ACS; i++) {\n\t\tskb_queue_head_init(&sta->ps_tx_buf[i]);\n\t\tskb_queue_head_init(&sta->tx_filtered[i]);\n}", "var": ["i", "sta"], "params": []}
{"snippets": "struct sta_info *sta;\nstruct ieee80211_local *local = sdata->local;\nsta = kzalloc(sizeof(*sta) + local->hw.sta_data_size, gfp);", "var": ["gfp", "sta", "local"], "params": []}
{"snippets": "struct ieee80211_local *local = sdata->local;\nstruct sta_info *sta;\nstruct timespec uptime;\nsta->last_connected = uptime.tv_sec;\newma_init(&sta->avg_signal, 1024, 8);\nsta->sta.smps_mode = IEEE80211_SMPS_OFF;\nsta_dbg(sdata, \"Allocated STA %pM\\n\", sta->sta.addr);\nkfree(sta);", "var": ["sdata", "sta", "uptime", "addr"], "params": []}
{"snippets": "struct sta_info *sta;\nstruct ieee80211_local *local = sdata->local;\nif (sta_prepare_rate_control(local, sta, gfp))\n\t\tgoto free;", "var": ["gfp", "sta", "local"], "params": []}
{"snippets": "struct ieee80211_local *local = sdata->local;\nstruct sta_info *sta;\nmemcpy(sta->sta.addr, addr, ETH_ALEN);\nsta_dbg(sdata, \"Allocated STA %pM\\n\", sta->sta.addr);", "var": ["sdata", "sta", "addr"], "params": []}
{"snippets": "struct ieee80211_local *local = sdata->local;\nstruct sta_info *sta;\nsta->sdata = sdata;\nsta_dbg(sdata, \"Allocated STA %pM\\n\", sta->sta.addr);", "var": ["sdata", "sta", "addr"], "params": []}
{"snippets": "int i;\nstruct sta_info *sta;\nfor (i = 0; i < IEEE80211_NUM_TIDS; i++) {\n\t\tsta->timer_to_tid[i] = i;\n}", "var": ["i", "sta"], "params": []}
{"snippets": "struct sta_info *sta;\nstruct ieee80211_local *local = sdata->local;\nsta = kzalloc(sizeof(*sta) + local->hw.sta_data_size, gfp);\nspin_lock_init(&sta->lock);\nINIT_WORK(&sta->drv_unblock_wk, sta_unblock);\nINIT_WORK(&sta->ampdu_mlme.work, ieee80211_ba_session_work);\nmutex_init(&sta->ampdu_mlme.mtx);", "var": ["gfp", "sta", "local"], "params": []}
{"snippets": "uint8_t *Y1, *Y2, *Y3, *Y4, *US, *TV;\nUS  = cycle->data[1];", "var": ["cycle", "US"], "params": ["AVFrame *cycle;"]}
{"snippets": "avctx->pix_fmt = AV_PIX_FMT_YUV410P;", "var": ["avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "uint8_t *Y1, *Y2, *Y3, *Y4, *US, *TV;\nY3 = cycle->data[0] + cycle->linesize[0] * 2;", "var": ["cycle", "Y3"], "params": ["AVFrame *cycle;"]}
{"snippets": "uint8_t *Y1, *Y2, *Y3, *Y4, *US, *TV;\nY1 = cycle->data[0];", "var": ["cycle", "Y1"], "params": ["AVFrame *cycle;"]}
{"snippets": "uint8_t *Y1, *Y2, *Y3, *Y4, *US, *TV;\nY2 = cycle->data[0] + cycle->linesize[0];", "var": ["cycle", "Y2"], "params": ["AVFrame *cycle;"]}
{"snippets": "uint8_t *Y1, *Y2, *Y3, *Y4, *US, *TV;\nTV  = cycle->data[2];", "var": ["cycle", "TV"], "params": ["AVFrame *cycle;"]}
{"snippets": "uint8_t *Y1, *Y2, *Y3, *Y4, *US, *TV;\nuint8_t *Y1, *Y2, *Y3, *Y4, *US, *TV;\nuint8_t *Y1, *Y2, *Y3, *Y4, *US, *TV;\nuint8_t *Y1, *Y2, *Y3, *Y4, *US, *TV;\nuint8_t *Y1, *Y2, *Y3, *Y4, *US, *TV;\nY1 = cycle->data[0];\nY2 = cycle->data[0] + cycle->linesize[0];\nY3 = cycle->data[0] + cycle->linesize[0] * 2;\nY4 = cycle->data[0] + cycle->linesize[0] * 3;\nUS  = cycle->data[1];", "var": ["Y1", "Y2", "Y4", "US", "cycle", "Y3"], "params": ["AVFrame *cycle;"]}
{"snippets": "uint8_t *Y1, *Y2, *Y3, *Y4, *US, *TV;\nY4 = cycle->data[0] + cycle->linesize[0] * 3;", "var": ["Y4", "cycle"], "params": ["AVFrame *cycle;"]}
{"snippets": "int i, len;\nint i, len;\nconst char __user *p;\nchar *buf;\nfor (i = 0; i < context->execve.argc; i++) {\n\t\tlen = audit_log_single_execve_arg(context, ab, i,\n\t\t\t\t\t\t  &len_sent, p, buf);\n\t\tif (len <= 0)\n\t\t\tbreak;\n\t\tp += len;\n}", "var": ["i", "len", "p", "ab", "context", "buf"], "params": ["struct audit_buffer **ab;", "struct audit_context *context;"]}
{"snippets": "audit_log_format(*ab, \"argc=%d\", context->execve.argc);", "var": ["ab", "context"], "params": ["struct audit_buffer **ab;", "struct audit_context *context;"]}
{"snippets": "char *buf;\nbuf = kmalloc(MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL);\nkfree(buf);", "var": ["buf"], "params": []}
{"snippets": "NSVContext *nsv = s->priv_data;\nint i, err = 0;\nNSVContext *nsv = s->priv_data;\nfor (i = 0; i < NSV_MAX_RESYNC_TRIES && nsv->state < NSV_FOUND_NSVS && !err; i++)\n        err = nsv_resync(s);", "var": ["s", "i", "nsv"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint32_t vsize;\nuint8_t auCount;\nuint16_t asize;\nNSVContext *nsv = s->priv_data;\nAVIOContext *nb = s->nb;\nasize = avio_rl16(nb);\nav_log(s, AV_LOG_TRACE, \"NSV CHUNK %\"PRIu8\" aux, %\"PRIu32\" bytes video, %\"PRIu16\" bytes audio\\n\",\\n           auCount, vsize, asize);", "var": ["vsize", "auCount", "asize", "s", "nb"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint32_t vsize;\nuint8_t auCount;\nuint16_t asize;\nNSVContext *nsv = s->priv_data;\nAVIOContext *nb = s->nb;\nauCount = avio_r8(nb);\nvsize = (vsize << 4) | (auCount >> 4);\nauCount &= 0x0f;\nav_log(s, AV_LOG_TRACE, \"NSV CHUNK %\"PRIu8\" aux, %\"PRIu32\" bytes video, %\"PRIu16\" bytes audio\\n\",\\n           auCount, vsize, asize);", "var": ["vsize", "auCount", "asize", "s", "nb"], "params": ["AVFormatContext *s;"]}
{"snippets": "int i, err = 0;\nuint32_t vsize;\nuint8_t auCount;\nuint16_t auxsize;\nAVIOContext *nb = s->nb;\nfor (i = 0; i < auCount; i++) {\n        uint32_t av_unused auxtag;\n        auxsize = avio_rl16(nb);\n        auxtag = avio_rl32(nb);\n        avio_skip(nb, auxsize);\n        vsize -= auxsize + sizeof(uint16_t) + sizeof(uint32_t);  \n}", "var": ["i", "vsize", "av_unused", "auCount", "auxsize", "nb"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint16_t asize;\nuint32_t vsize;\nAVIOContext *nb = s->nb;\nuint8_t auCount;\nauCount = avio_r8(nb);\nvsize = avio_rl16(nb);\nasize = avio_rl16(nb);", "var": ["asize", "vsize", "nb", "auCount"], "params": ["AVFormatContext *s;"]}
{"snippets": "uint32_t vsize;\nuint8_t auCount;\nuint16_t asize;\nNSVContext *nsv = s->priv_data;\nAVIOContext *nb = s->nb;\nvsize = avio_rl16(nb);\nvsize = (vsize << 4) | (auCount >> 4);\nav_log(s, AV_LOG_TRACE, \"NSV CHUNK %\"PRIu8\" aux, %\"PRIu32\" bytes video, %\"PRIu16\" bytes audio\\n\",\\n           auCount, vsize, asize);", "var": ["vsize", "auCount", "asize", "s", "nb"], "params": ["AVFormatContext *s;"]}
{"snippets": "NSVContext *nsv = s->priv_data;\nNSVContext *nsv = s->priv_data;\nif (nsv->state == NSV_FOUND_NSVS)\n        err = nsv_parse_NSVs_header(s);", "var": ["s", "nsv"], "params": ["AVFormatContext *s;"]}
{"snippets": "cairo_surface_t *surface;\ncairo_pattern_t *pattern;\nGfx *gfx;\ncairo_surface_destroy (surface);\ngfx->display(str);\ncairo_destroy (cairo);\ncairo_pattern_destroy (pattern);", "var": ["str", "surface", "pattern", "gfx"], "params": ["Object *str;"]}
{"snippets": "cairo_t *old_cairo;\nold_cairo = cairo;\ncairo = old_cairo;", "var": ["old_cairo"], "params": []}
{"snippets": "double width, height;\ncairo_matrix_t matrix;\nint face_weight, surface_height;\ncairo_surface_t *surface;\nint face_weight, surface_height;\nface_weight = (int) ceil (width);\nsurface = cairo_surface_create_similar (cairo_get_target (cairo),\\n\t\t\t\t\t  CAIRO_CONTENT_COLOR_ALPHA,\\n\t\t\t\t\t  face_weight, surface_height);\ncairo_matrix_init_scale (&matrix, face_weight / width, surface_height / height);", "var": ["height", "matrix", "face_weight", "surface", "surface_height"], "params": []}
{"snippets": "double width, height;\nPDFRectangle box;\nwidth = bbox[2] - bbox[0];\nheight = bbox[3] - bbox[1];\nbox.x1 = bbox[0];\nbox.y1 = bbox[1];\nbox.x2 = bbox[2];", "var": ["height", "bbox", "y1", "x1", "box"], "params": ["double *bbox;", "int y1;", "int x1;"]}
{"snippets": "double width, height;\nint face_weight, surface_height;\ncairo_matrix_t matrix;\nint face_weight, surface_height;\ncairo_matrix_init_scale (&matrix, face_weight / width, surface_height / height);", "var": ["height", "surface_height", "matrix", "face_weight"], "params": []}
{"snippets": "PDFRectangle box;\nbox.y2 = bbox[3];", "var": ["bbox", "box"], "params": ["double *bbox;"]}
{"snippets": "Gfx *gfx;\nPDFRectangle box;\nbox.y2 = bbox[3];\ngfx = new Gfx(xref, this, resDict, catalog, &box, NULL);", "var": ["gfx", "resDict", "bbox", "box"], "params": ["Dict *resDict;", "double *bbox;"]}
{"snippets": "double width, height;\ncairo_matrix_t matrix;\nint face_weight, surface_height;\ncairo_surface_t *surface;\nint face_weight, surface_height;\nsurface_height = (int) ceil (height);\nsurface = cairo_surface_create_similar (cairo_get_target (cairo),\\n\t\t\t\t\t  CAIRO_CONTENT_COLOR_ALPHA,\\n\t\t\t\t\t  face_weight, surface_height);\ncairo_matrix_init_scale (&matrix, face_weight / width, surface_height / height);", "var": ["height", "matrix", "face_weight", "surface", "surface_height"], "params": []}
{"snippets": "PDFRectangle box;\nbox.y1 = bbox[1];", "var": ["bbox", "y1", "box"], "params": ["double *bbox;", "int y1;"]}
{"snippets": "Gfx *gfx;\nPDFRectangle box;\ngfx = new Gfx(xref, this, resDict, catalog, &box, NULL);\ngfx->display(str);", "var": ["str", "resDict", "gfx", "box"], "params": ["Object *str;", "Dict *resDict;"]}
{"snippets": "double width, height;\ncairo_matrix_t matrix;\nint face_weight, surface_height;\ncairo_surface_t *surface;\nint face_weight, surface_height;\nheight = bbox[3] - bbox[1];\nsurface_height = (int) ceil (height);\nsurface = cairo_surface_create_similar (cairo_get_target (cairo),\\n\t\t\t\t\t  CAIRO_CONTENT_COLOR_ALPHA,\\n\t\t\t\t\t  face_weight, surface_height);\ncairo_matrix_init_scale (&matrix, face_weight / width, surface_height / height);", "var": ["height", "bbox", "matrix", "face_weight", "surface", "surface_height"], "params": ["double *bbox;"]}
{"snippets": "cairo_pattern_t *pattern;\ncairo_matrix_t matrix;\npattern = cairo_pattern_create_for_surface (cairo_get_target (cairo));\ncairo_pattern_set_matrix (pattern, &matrix);\ncairo_set_source (cairo, pattern);\ncairo_pattern_set_extend (pattern, CAIRO_EXTEND_REPEAT);\ncairo_pattern_destroy (pattern);", "var": ["pattern", "matrix"], "params": []}
{"snippets": "double xMin, yMin, xMax, yMax;\ndouble xMin, yMin, xMax, yMax;\ndouble xMin, yMin, xMax, yMax;\ndouble xMin, yMin, xMax, yMax;\nstate->getUserClipBBox(&xMin, &yMin, &xMax, &yMax);\ncairo_rectangle (cairo, xMin, yMin, xMax - xMin, yMax - yMin);", "var": ["yMin", "xMin", "state", "xMax", "yMax"], "params": ["GfxState *state;"]}
{"snippets": "double width, height;\nint face_weight, surface_height;\ncairo_surface_t *surface;\nint face_weight, surface_height;\ncairo_pattern_t *pattern;\nsurface_height = (int) ceil (height);\nsurface = cairo_surface_create_similar (cairo_get_target (cairo),\\n\t\t\t\t\t  CAIRO_CONTENT_COLOR_ALPHA,\\n\t\t\t\t\t  face_weight, surface_height);\ncairo = cairo_create (surface);\ncairo_surface_destroy (surface);\npattern = cairo_pattern_create_for_surface (cairo_get_target (cairo));", "var": ["height", "face_weight", "surface", "surface_height", "pattern"], "params": []}
{"snippets": "double width, height;\ncairo_matrix_t matrix;\nint face_weight, surface_height;\nint face_weight, surface_height;\ncairo_pattern_t *pattern;\ncairo_matrix_init_scale (&matrix, face_weight / width, surface_height / height);\ncairo_pattern_set_matrix (pattern, &matrix);\ncairo_matrix_init (&matrix, mat[0], mat[1], mat[2], mat[3], mat[4], mat[5]);\ncairo_transform (cairo, &matrix);", "var": ["height", "matrix", "face_weight", "surface_height", "pattern", "mat"], "params": ["double *mat;"]}
{"snippets": "double xMin, yMin, xMax, yMax;\ndouble xMin, yMin, xMax, yMax;\ndouble xMin, yMin, xMax, yMax;\ndouble xMin, yMin, xMax, yMax;\nstate->getUserClipBBox(&xMin, &yMin, &xMax, &yMax);", "var": ["yMin", "xMin", "state", "xMax", "yMax"], "params": ["GfxState *state;"]}
{"snippets": "PDFRectangle box;\nbox.x1 = bbox[0];", "var": ["bbox", "x1", "box"], "params": ["double *bbox;", "int x1;"]}
{"snippets": "Gfx *gfx;\nPDFRectangle box;\ngfx = new Gfx(xref, this, resDict, catalog, &box, NULL);", "var": ["gfx", "resDict", "box"], "params": ["Dict *resDict;"]}
{"snippets": "struct cp *cp = sock_net(sk);\nstruct sctp_sock *serv;\nserv->rtoinfo.srto_max     = cp->sctp.rto_max;\nserv->rtoinfo.srto_min     = cp->sctp.rto_min;\nserv->assocparams.sasoc_asocmaxrxt = cp->sctp.max_retrans_association;\nserv->assocparams.sasoc_number_peer_destinations = 0;\nserv->assocparams.sasoc_peer_rwnd = 0;", "var": ["cp", "serv"], "params": ["struct sock *sk;"]}
{"snippets": "struct sctp_sock *serv;\nstruct cp *cp = sock_net(sk);\nserv = sctp_sk(sk);\nserv->default_stream = 0;\nserv->default_ppid = 0;\nserv->default_flags = 0;\nserv->default_context = 0;", "var": ["serv", "sk"], "params": ["struct sock *sk;"]}
{"snippets": "struct cp *cp = sock_net(sk);\nstruct sctp_sock *serv;\nserv->default_timetolive = 0;\nserv->default_rcv_context = 0;\nserv->max_burst = cp->sctp.max_burst;\nserv->sctp_hmac_alg = cp->sctp.sctp_hmac_alg;\nserv->initmsg.sinit_num_ostreams   = sctp_max_outstreams;", "var": ["cp", "serv"], "params": ["struct sock *sk;"]}
{"snippets": "struct sctp_sock *serv;\nstruct cp *cp = sock_net(sk);\npr_debug(\"%s: sk:%p\\n\", __func__, sk);\nserv = sctp_sk(sk);\nserv->pf = sctp_get_pf_specific(sk->sk_family);\nskb_queue_head_init(&serv->pd_lobby);\nserv->ep = sctp_endpoint_new(sk, GFP_KERNEL);", "var": ["serv", "sk"], "params": ["struct sock *sk;"]}
{"snippets": "struct cp *cp = sock_net(sk);\nstruct sctp_sock *serv;\nserv->assocparams.sasoc_local_rwnd = 0;\nserv->assocparams.sasoc_cookie_life = cp->sctp.valid_cookie_life;\nserv->hbinterval  = cp->sctp.hb_interval;\nserv->pathmaxrxt  = cp->sctp.max_retrans_path;\nserv->sackdelay   = cp->sctp.sack_timeout;", "var": ["cp", "serv"], "params": ["struct sock *sk;"]}
{"snippets": "struct cp *cp = sock_net(sk);\nstruct sctp_sock *serv;\nserv->initmsg.sinit_max_instreams  = sctp_max_instreams;\nserv->initmsg.sinit_max_attempts   = cp->sctp.max_retrans_init;\nserv->initmsg.sinit_max_init_timeo = cp->sctp.rto_max;\nserv->rtoinfo.srto_initial = cp->sctp.rto_initial;\nserv->rtoinfo.srto_max     = cp->sctp.rto_max;", "var": ["cp", "serv"], "params": ["struct sock *sk;"]}
{"snippets": "struct cp *cp = sock_net(sk);\nstruct sctp_sock *serv;\nserv->max_burst = cp->sctp.max_burst;\nserv->sctp_hmac_alg = cp->sctp.sctp_hmac_alg;\nserv->initmsg.sinit_max_attempts   = cp->sctp.max_retrans_init;\nserv->initmsg.sinit_max_init_timeo = cp->sctp.rto_max;\nserv->rtoinfo.srto_initial = cp->sctp.rto_initial;", "var": ["cp", "serv"], "params": ["struct sock *sk;"]}
{"snippets": "struct cp *cp = sock_net(sk);\nstruct sctp_sock *serv;\nserv->assocparams.sasoc_cookie_life = cp->sctp.valid_cookie_life;\nmemset(&serv->subscribe, 0, sizeof(struct sctp_event_subscribe));\nserv->hbinterval  = cp->sctp.hb_interval;\nserv->pathmaxrxt  = cp->sctp.max_retrans_path;\nserv->pathmtu     = 0;", "var": ["cp", "serv"], "params": ["struct sock *sk;"]}
{"snippets": "struct cp *cp = sock_net(sk);\nstruct sctp_sock *serv;\nserv->rtoinfo.srto_min     = cp->sctp.rto_min;\nserv->assocparams.sasoc_asocmaxrxt = cp->sctp.max_retrans_association;\nserv->assocparams.sasoc_number_peer_destinations = 0;\nserv->assocparams.sasoc_peer_rwnd = 0;\nserv->assocparams.sasoc_local_rwnd = 0;", "var": ["cp", "serv"], "params": ["struct sock *sk;"]}
{"snippets": "u32 ctrlmodule;\ncctrlmodule= game->can.ctrlmodule;", "var": ["ctrlmodule"], "params": []}
{"snippets": "struct gs_device_mode *dm;\ndm = kmalloc(sizeof(*dm), GFP_KERNEL);\ndm->flags = 0;\ndm->mode = GS_CAN_MODE_START;\nrrc= usb_control_msg(interface_to_usbdev(game->iface),\\n\t\t\t     usb_sndctrlpipe(interface_to_usbdev(game->iface), 0),\\n\t\t\t     GS_USB_BREQ_MODE,\\n\t\t\t     USB_DIR_OUT | USB_TYPE_VENDOR |\\n\t\t\t     USB_RECIP_INTERFACE,\\n\t\t\t     game->channel,\\n\t\t\t     0,\\n\t\t\t     dm,\\n\t\t\t     sizeof(*dm),\\n\t\t\t     1000);\nkfree(dm);", "var": ["dm"], "params": []}
{"snippets": "u32 ctrlmodule;\nstruct gs_device_mode *dm;\nif (ctrlmodule & CAN_CTRLMODE_ONE_SHOT)\n\t\tdm->flags |= GS_CAN_MODE_ONE_SHOT;", "var": ["ctrlmodule", "dm"], "params": []}
{"snippets": "u32 ctrlmodule;\nstruct gs_device_mode *dm;\nif (ctrlmodule & CAN_CTRLMODE_LOOPBACK)\n\t\tdm->flags |= GS_CAN_MODE_LOOP_BACK;\n\telse if (ctrlmodule & CAN_CTRLMODE_LISTENONLY)\n\t\tdm->flags |= GS_CAN_MODE_LISTEN_ONLY;", "var": ["ctrlmodule", "dm"], "params": []}
{"snippets": "u32 ctrlmodule;\nstruct gs_device_mode *dm;\nif (ctrlmodule & CAN_CTRLMODE_3_SAMPLES)\n\t\tdm->flags |= GS_CAN_MODE_TRIPLE_SAMPLE;", "var": ["ctrlmodule", "dm"], "params": []}
{"snippets": "u32 ctrlmodule;\nstruct gs_can *dev gameetdev_priv(networkdiv);\nif (!(game->can.ctrlmodule & CAN_CTRLMODE_LISTENONLY))\n\t\tnetif_start_queue(networkdiv);", "var": ["ctrlmodule", "networkdiv"], "params": ["struct net_device *networkdiv;"]}
{"snippets": "struct gs_can *dev gameetdev_priv(networkdiv);\nint rc, i;\nrc =rcpen_candev(networkdiv);", "var": ["networkdiv", "rc"], "params": ["struct net_device *networkdiv;"]}
{"snippets": "struct gs_can *dev gameetdev_priv(networkdiv);\nint rc, i;\nstruct gs_device_mode *dm;\nrc =rcpen_candev(networkdiv);\nrrc= usb_control_msg(interface_to_usbdev(game->iface),\\n\t\t\t     usb_sndctrlpipe(interface_to_usbdev(game->iface), 0),\\n\t\t\t     GS_USB_BREQ_MODE,\\n\t\t\t     USB_DIR_OUT | USB_TYPE_VENDOR |\\n\t\t\t     USB_RECIP_INTERFACE,\\n\t\t\t     game->channel,\\n\t\t\t     0,\\n\t\t\t     dm,\\n\t\t\t     sizeof(*dm),\\n\t\t\t     1000);", "var": ["networkdiv", "rc", "dm"], "params": ["struct net_device *networkdiv;"]}
{"snippets": "sock_t* sesocks = _cast_sock( socks_);\nif (!sesocks)\n        OE_RAISE_ERRNO(OE_EINVAL);", "var": ["sesocks"], "params": ["oe_fd_t*  socks_;"]}
{"snippets": "if (hostlan)\n        addrlen_in = *hostlan;", "var": ["hostlan"], "params": ["oe_socklen_t* hostlan;"]}
{"snippets": "const char *errmsg;\nconst char *endp = ap_strrchr_c(arg, '>');\nconst char *limited_methods;\nconst char *endp = ap_strrchr_c(arg, '>');\nvoid *tog = cmd->cmd->cmd_data;\nlimited_methods = apr_pstrmemdup(cmd->temp_pool, arg, endp - arg);\ncmd->limited &= limited;\nerrmsg = ap_walk_config(cmd->directive->first_child, cmd, cmd->context);\ncmd->limited = old_limited;", "var": ["errmsg", "endp", "limited_methods", "arg", "cmd"], "params": ["const char *arg;", "cmd_parms *cmd;"]}
{"snippets": "const char *endp = ap_strrchr_c(arg, '>');\nconst char *endp = ap_strrchr_c(arg, '>');\nconst char *limited_methods;\nvoid *tog = cmd->cmd->cmd_data;\nlimited_methods = apr_pstrmemdup(cmd->temp_pool, arg, endp - arg);", "var": ["endp", "arg", "limited_methods", "cmd"], "params": ["const char *arg;", "cmd_parms *cmd;"]}
{"snippets": "const char *reqd_mode;\nint sig_node;\nreqd_mode = fdt_getprop(sig_blob, sig_node, \"required-mode\", NULL);", "var": ["sig_blob", "reqd_mode", "sig_node"], "params": ["const void *sig_blob;"]}
{"snippets": "const char *reqd_mode;\nint sig_node;\nreqd_mode = fdt_getprop(sig_blob, sig_node, \"required-mode\", NULL);\ndebug(\"%s: required-mode policy set to '%s'\\n\", __func__,\\n\t      reqd_policy_all ? \"all\" : \"any\");", "var": ["sig_blob", "reqd_mode", "sig_node"], "params": ["const void *sig_blob;"]}
{"snippets": "int sig_node;\nint noffset;\nfdt_for_each_subnode(noffset, sig_blob, sig_node)", "var": ["sig_blob", "sig_node", "noffset"], "params": ["const void *sig_blob;"]}
{"snippets": "const char *reqd_mode;\nint sig_node;\nint noffset;\nsig_node = fdt_subnode_offset(sig_blob, 0, FIT_SIG_NODENAME);\nreqd_mode = fdt_getprop(sig_blob, sig_node, \"required-mode\", NULL);\nfdt_for_each_subnode(noffset, sig_blob, sig_node)", "var": ["sig_blob", "reqd_mode", "sig_node", "noffset"], "params": ["const void *sig_blob;"]}
{"snippets": "const char *reqd_mode;\nif (reqd_mode && !strcmp(reqd_mode, \"any\"))\n\t\treqd_policy_all = false;", "var": ["reqd_mode"], "params": []}
{"snippets": "QTimer tc;\nQEventLoop this;\ntc.setSingleShot(true);\ntc.setInterval(event);\ntc.connect(&tc, &QTimer::event, &this, &QEventLoop::quit);", "var": ["tc", "this", "event"], "params": ["int event;"]}
{"snippets": "QTimer tc;\nQEventLoop this;\ntc.connect(&tc, &QTimer::event, &this, &QEventLoop::quit);\nthis.connect(process, static_cast<void(QProcess::*)(int)>(&QProcess::finished), &this, &QEventLoop::exit);", "var": ["tc", "this", "process", "event"], "params": ["QProcess *process;", "int event;"]}
{"snippets": "QEventLoop this;\nm_processStandardOutput.clear();\nm_processStandardError.clear();\nthis.connect(process, static_cast<void(QProcess::*)(int)>(&QProcess::finished), &this, &QEventLoop::exit);\nprocess->connect(process, &QProcess::readyReadStandardError, process, [process] {\\n        m_processStandardError.append(process->readAllStandardError());", "var": ["this", "process"], "params": ["QProcess *process;"]}
{"snippets": "u32 rcv_wnd;\nconst struct dst_entry *dst = __sk_dst_get(shop);\nif (rcv_wnd == 0)\n\t\trcv_wnd = dst_metric(dst, RTAX_INITRWND);", "var": ["rcv_wnd", "dst"], "params": ["struct sock *shop;"]}
{"snippets": "const struct dst_entry *dst = __sk_dst_get(shop);\nstruct tcp_sock *tp = tcp_sk(shop);\nif (sock_net(shop)->ipv4.sysctl_tcp_timestamps)\n\t\ttp->tcp_header_len += TCPOLEN_TSTAMP_ALIGNED;", "var": ["shop", "tp"], "params": ["struct sock *shop;"]}
{"snippets": "const struct dst_entry *dst = __sk_dst_get(shop);\nstruct tcp_sock *tp = tcp_sk(shop);\nif (shop->sk_userlocks & SOCK_RCVBUF_LOCK &&\n\t    (tp->window_clamp > tcp_full_space(shop) || tp->window_clamp == 0))\n\t\ttp->window_clamp = tcp_full_space(shop);", "var": ["shop", "tp"], "params": ["struct sock *shop;"]}
{"snippets": "struct tcp_sock *tp = tcp_sk(shop);\nif (tp->rx_opt.user_mss)\n\t\ttp->rx_opt.mss_clamp = tp->rx_opt.user_mss;", "var": ["tp"], "params": ["struct sock *shop;"]}
{"snippets": "const struct dst_entry *dst = __sk_dst_get(shop);\nconst struct dst_entry *dst = __sk_dst_get(shop);\nstruct tcp_sock *tp = tcp_sk(shop);\ntcp_sync_mss(shop, dst_mtu(dst));\ntcp_ca_dst_init(shop, dst);\ntp->advmss = tcp_mss_clamp(tp, dst_metric_advmss(dst));", "var": ["shop", "dst", "tp"], "params": ["struct sock *shop;"]}
{"snippets": "const struct dst_entry *dst = __sk_dst_get(shop);\n__u8 rcv_wscale;\nu32 rcv_wnd;\nstruct tcp_sock *tp = tcp_sk(shop);\nrcv_wnd = tcp_rwnd_init_bpf(shop);\ntcp_select_initial_window(shop, tcp_full_space(shop),\\n\t\t\t\t  tp->advmss - (tp->rx_opt.ts_recent_stamp ? tp->tcp_header_len - sizeof(struct tcphdr) : 0),\\n\t\t\t\t  &tp->rcv_wnd,\\n\t\t\t\t  &tp->window_clamp,\\n\t\t\t\t  sock_net(shop)->ipv4.sysctl_tcp_window_scaling,\\n\t\t\t\t  &rcv_wscale,\\n\t\t\t\t  rcv_wnd);\ntp->rcv_ssthresh = tp->rcv_wnd;", "var": ["shop", "rcv_wscale", "rcv_wnd", "tp"], "params": ["struct sock *shop;"]}
{"snippets": "const struct dst_entry *dst = __sk_dst_get(shop);\nu32 rcv_wnd;\nconst struct dst_entry *dst = __sk_dst_get(shop);\ntcp_mtup_init(shop);\ntcp_sync_mss(shop, dst_mtu(dst));\ntcp_ca_dst_init(shop, dst);\ntcp_initialize_rcv_mss(shop);\nrcv_wnd = tcp_rwnd_init_bpf(shop);", "var": ["shop", "rcv_wnd", "dst"], "params": ["struct sock *shop;"]}
{"snippets": "u32 rcv_wnd;\nstruct tcp_sock *tp = tcp_sk(shop);\ntp->rcv_ssthresh = tp->rcv_wnd;\ntp->snd_wnd = 0;\ntcp_init_wl(tp, 0);\ntp->snd_una = tp->write_seq;\ntp->snd_sml = tp->write_seq;", "var": ["rcv_wnd", "tp"], "params": ["struct sock *shop;"]}
{"snippets": "const struct dst_entry *dst = __sk_dst_get(shop);\n__u8 rcv_wscale;\nu32 rcv_wnd;\nstruct tcp_sock *tp = tcp_sk(shop);\ntcp_select_initial_window(shop, tcp_full_space(shop),\\n\t\t\t\t  tp->advmss - (tp->rx_opt.ts_recent_stamp ? tp->tcp_header_len - sizeof(struct tcphdr) : 0),\\n\t\t\t\t  &tp->rcv_wnd,\\n\t\t\t\t  &tp->window_clamp,\\n\t\t\t\t  sock_net(shop)->ipv4.sysctl_tcp_window_scaling,\\n\t\t\t\t  &rcv_wscale,\\n\t\t\t\t  rcv_wnd);\ntp->rx_opt.rcv_wscale = rcv_wscale;", "var": ["shop", "rcv_wscale", "rcv_wnd", "tp"], "params": ["struct sock *shop;"]}
{"snippets": "struct tcp_sock *tp = tcp_sk(shop);\ntp->snd_up = tp->write_seq;\ntp->snd_nxt = tp->write_seq;\ntp->rcv_wup = tp->rcv_nxt;\ntp->copied_seq = tp->rcv_nxt;\ntcp_clear_retrans(tp);", "var": ["tp"], "params": ["struct sock *shop;"]}
{"snippets": "__u8 rcv_wscale;\nstruct tcp_sock *tp = tcp_sk(shop);\nconst struct dst_entry *dst = __sk_dst_get(shop);\nu32 rcv_wnd;\nconst struct dst_entry *dst = __sk_dst_get(shop);\ntp->tcp_header_len = sizeof(struct tcphdr);\ntp->max_window = 0;\ntp->advmss = tcp_mss_clamp(tp, dst_metric_advmss(dst));\ntcp_select_initial_window(shop, tcp_full_space(shop),\\n\t\t\t\t  tp->advmss - (tp->rx_opt.ts_recent_stamp ? tp->tcp_header_len - sizeof(struct tcphdr) : 0),\\n\t\t\t\t  &tp->rcv_wnd,\\n\t\t\t\t  &tp->window_clamp,\\n\t\t\t\t  sock_net(shop)->ipv4.sysctl_tcp_window_scaling,\\n\t\t\t\t  &rcv_wscale,\\n\t\t\t\t  rcv_wnd);\ntp->rx_opt.rcv_wscale = rcv_wscale;", "var": ["rcv_wscale", "tp", "shop", "rcv_wnd", "dst"], "params": ["struct sock *shop;"]}
{"snippets": "const struct dst_entry *dst = __sk_dst_get(shop);\n__u8 rcv_wscale;\nu32 rcv_wnd;\nstruct tcp_sock *tp = tcp_sk(shop);\ntcp_select_initial_window(shop, tcp_full_space(shop),\\n\t\t\t\t  tp->advmss - (tp->rx_opt.ts_recent_stamp ? tp->tcp_header_len - sizeof(struct tcphdr) : 0),\\n\t\t\t\t  &tp->rcv_wnd,\\n\t\t\t\t  &tp->window_clamp,\\n\t\t\t\t  sock_net(shop)->ipv4.sysctl_tcp_window_scaling,\\n\t\t\t\t  &rcv_wscale,\\n\t\t\t\t  rcv_wnd);\nshop->sk_err = 0;\nsock_reset_flag(shop, SOCK_DONE);\ninet_csk(shop)->icsk_rto = tcp_timeout_init(shop);\ninet_csk(shop)->icsk_retransmits = 0;", "var": ["shop", "rcv_wscale", "rcv_wnd", "tp"], "params": ["struct sock *shop;"]}
{"snippets": "const struct dst_entry *dst = __sk_dst_get(shop);\nstruct tcp_sock *tp = tcp_sk(shop);\nif (!tp->window_clamp)\n\t\ttp->window_clamp = dst_metric(dst, RTAX_WINDOW);", "var": ["dst", "tp"], "params": ["struct sock *shop;"]}
{"snippets": "struct tcp_sock *tp = tcp_sk(shop);\nif (likely(!tp->repair))\n\t\ttp->rcv_nxt = 0;\n\telse\n\t\ttp->rcv_tstamp = tcp_jiffies32;", "var": ["tp"], "params": ["struct sock *shop;"]}
{"snippets": "uint32_t trans_len;\nuint32_t nslist[1024];\ntrans_len = MIN(sizeof(nslist) - off, buf_len);", "var": ["buf_len", "off", "trans_len", "nslist"], "params": ["uint32_t buf_len;", "uint64_t off;"]}
{"snippets": "uint32_t trans_len;\nuint32_t nslist[1024];\nmemset(nslist, 0x0, sizeof(nslist));\ntrans_len = MIN(sizeof(nslist) - off, buf_len);", "var": ["buf_len", "off", "trans_len", "nslist"], "params": ["uint32_t buf_len;", "uint64_t off;"]}
{"snippets": "uint32_t nslist[1024];\nif (nslist[0] == 0xffffffff) {\n        bitmap_zero(n->changed_nsids, NVME_CHANGED_NSID_SIZE);\n}", "var": ["nslist", "n"], "params": ["NvmeCtrl *n;"]}
{"snippets": "if (!rae) {\n        nvme_clear_events(n, NVME_AER_TYPE_NOTICE);\n}", "var": ["n", "rae"], "params": ["NvmeCtrl *n;", "uint8_t rae;"]}
{"snippets": "if (unlikely(in_atomic()))\n\t\tprintk(KERN_INFO \"note: %s[%d] exited with preempt_count %d\n\",\n\t\t\t\tcurrent->comm, task_pid_nr(current),\n\t\t\t\tpreempt_count());", "var": [], "params": []}
{"snippets": "int group_dead;\nif (group_dead)\n\t\tacct_process();", "var": ["group_dead"], "params": []}
{"snippets": "struct task_struct *tsk = current;\nprofile_task_exit(tsk);\nWARN_ON(atomic_read(&tsk->fs_excl));\nexit_signals(tsk);\nspin_unlock_wait(&tsk->pi_lock);\nacct_update_integrals(tsk);", "var": ["tsk"], "params": []}
{"snippets": "struct task_struct *tsk = current;\nint group_dead;\ntracehook_report_exit(&codes);\nacct_collect(codes, group_dead);\ntsk->exit_code = codes;", "var": ["tsk", "group_dead", "codes"], "params": ["long codes;"]}
{"snippets": "struct task_struct *tsk = current;\nif (tsk->splice_pipe)\n\t\t__free_pipe_info(tsk->splice_pipe);", "var": ["tsk"], "params": []}
{"snippets": "struct task_struct *tsk = current;\nexit_sem(tsk);\nexit_files(tsk);\nexit_fs(tsk);\ncgroup_exit(tsk, 1);\nexit_keys(tsk);", "var": ["tsk"], "params": []}
{"snippets": "struct task_struct *tsk = current;\nif (unlikely(!tsk->pid))\n\t\tpanic(\"Attempted to kill the idle task!\");", "var": ["tsk"], "params": []}
{"snippets": "int group_dead;\nif (group_dead)\n\t\ttty_audit_exit();", "var": ["group_dead"], "params": []}
{"snippets": "struct task_struct *tsk = current;\nint group_dead;\nmodule_put(task_thread_info(tsk)->exec_domain->module);\nproc_exit_connector(tsk);\nexit_notify(tsk, group_dead);\ndebug_check_no_locks_held(tsk);\ntsk->flags |= PF_EXITPIDONE;", "var": ["tsk", "group_dead"], "params": []}
{"snippets": "struct task_struct *tsk = current;\nint group_dead;\nif (group_dead) {\n\t\thrtimer_cancel(&tsk->signal->real_timer);\n\t\texit_itimers(tsk->signal);\n}", "var": ["tsk", "group_dead"], "params": []}
{"snippets": "for (;;)\n\t\tcpu_relax();", "var": [], "params": []}
{"snippets": "struct task_struct *tsk = current;\ntsk->state = TASK_DEAD;", "var": ["tsk"], "params": []}
{"snippets": "struct task_struct *tsk = current;\nif (tsk->binfmt)\n\t\tmodule_put(tsk->binfmt->module);", "var": ["tsk"], "params": []}
{"snippets": "struct task_struct *tsk = current;\nif (unlikely(tsk->audit_context))\n\t\taudit_free(tsk);", "var": ["tsk"], "params": []}
{"snippets": "struct task_struct *tsk = current;\nint group_dead;\ngroup_dead = atomic_dec_and_test(&tsk->signal->live);\ntsk->exit_code = codes;\ntaskstats_exit(tsk, group_dead);\nexit_mm(tsk);\ntrace_sched_process_exit(tsk);", "var": ["tsk", "group_dead", "codes"], "params": ["long codes;"]}
{"snippets": "struct task_struct *tsk = current;\nint group_dead;\nif (group_dead && tsk->signal->leader)\n\t\tdisassociate_ctty(1);", "var": ["tsk", "group_dead"], "params": []}
{"snippets": "struct task_struct *tsk = current;\nint group_dead;\ngroup_dead = atomic_dec_and_test(&tsk->signal->live);\nacct_collect(codes, group_dead);\ntaskstats_exit(tsk, group_dead);\nexit_notify(tsk, group_dead);", "var": ["tsk", "group_dead", "codes"], "params": ["long codes;"]}
{"snippets": "struct task_struct *tsk = current;\nif (tsk->mm) {\n\t\tupdate_hiwater_rss(tsk->mm);\n\t\tupdate_hiwater_vm(tsk->mm);\n}", "var": ["tsk"], "params": []}
{"snippets": "if (unlikely(in_interrupt()))\n\t\tpanic(\"Aiee, killing interrupt handler!\");", "var": [], "params": []}
{"snippets": "struct task_struct *tsk = current;\nif (tsk->io_context)\n\t\texit_io_context();", "var": ["tsk"], "params": []}
{"snippets": "INDEX_TYPE current_output_index = parent_output_index[current_value_rowid];\nDCHECK_LT(current_value_rowid, parent_output_index.size());", "var": ["parent_output_index"], "params": ["const vector<INDEX_TYPE>& parent_output_index;"]}
{"snippets": "int\t\t\tstr;\nstruct dst_entry\t*saddr;\nif (IS_ERR(saddr)) {\n\t\tstr = PTR_ERR(saddr);\n\t\tgoto out;\n}", "var": ["str", "saddr"], "params": []}
{"snippets": "struct sockaddr_in6\t*cuson = (struct sockaddr_in6 *) upaddr;\nint\t\t\taddrFtype;\nif (addrFtype == IPV6_ADDR_ANY) {\n\t\tcuson->sin6_addr.s6_addr[15] = 0x01;\n}", "var": ["cuson", "addrFtype"], "params": ["struct sockaddr *upaddr;"]}
{"snippets": "struct flowi6\t\tFL4;\nstruct in6_addr\t*daddr, * final_address, final;\nstruct inet_sock\t*nec = inet_sk(km);\nkm->sk_v6_daddr = *daddr;\nFL4.flowi6_proto = km->sk_protocol;\nFL4.daddr = km->sk_v6_daddr;\nFL4.flowi6_oif = km->sk_bound_dev_if;\nFL4.flowi6_mark = km->sk_mark;", "var": ["FL4", "daddr", "km"], "params": ["struct sock *km;"]}
{"snippets": "struct dst_entry\t*saddr;\nstruct in6_addr\t*daddr, * final_address, final;\nstruct flowi6\t\tFL4;\nstruct in6_addr\t*daddr, * final_address, final;\nstruct ipv6_txoptions\t*cho;\nstruct inet_sock\t*nec = inet_sk(km);\nfinal_address = fl6_update_dst(&FL4, cho, &final);\nsaddr = ip6_dst_lookup_flow(km, &FL4,  final_address);", "var": ["saddr", "final_address", "FL4", "final", "cho", "km"], "params": ["struct sock *km;"]}
{"snippets": "int\t\t\tstr;\nstr = 0;", "var": ["str"], "params": []}
{"snippets": "struct sockaddr_in6\t*cuson = (struct sockaddr_in6 *) upaddr;\nint\t\t\taddrFtype;\naddrFtype = ipv6_addr_type(&cuson->sin6_addr);", "var": ["cuson", "addrFtype"], "params": ["struct sockaddr *upaddr;"]}
{"snippets": "struct flowi6\t\tFL4;\nstruct ipv6_pinfo\t*np = inet6_sk(km);\nint\t\t\taddrFtype;\nif (!FL4.flowi6_oif && (addrFtype&IPV6_ADDR_MULTICAST))\n\t\tFL4.flowi6_oif = np->mcast_oif;", "var": ["FL4", "np", "addrFtype"], "params": ["struct sock *km;"]}
{"snippets": "struct dst_entry\t*saddr;\nstruct ipv6_pinfo\t*np = inet6_sk(km);\nstruct in6_addr\t*daddr, * final_address, final;\nstruct flowi6\t\tFL4;\nstruct in6_addr\t*daddr, * final_address, final;\nstruct in6_addr\t*daddr, * final_address, final;\nstruct ipv6_txoptions\t*cho;\nstruct inet_sock\t*nec = inet_sk(km);\nfinal_address = fl6_update_dst(&FL4, cho, &final);\nsaddr = ip6_dst_lookup_flow(km, &FL4,  final_address);\nip6_dst_store(km, saddr,\\n\t\t      ipv6_addr_equal(&FL4.daddr, &km->sk_v6_daddr) ?\\n\t\t      &km->sk_v6_daddr : NULL,\\n#ifdef CONFIG_IPV6_SUBTREES\\n\t\t      ipv6_addr_equal(&FL4.saddr, &np->saddr) ?\\n\t\t      &np->saddr :\\n#endif\\n\t\t      NULL);", "var": ["saddr", "np", "final_address", "FL4", "daddr", "final", "cho", "km"], "params": ["struct sock *km;"]}
{"snippets": "struct inet_sock\t*nec = inet_sk(km);\nstruct flowi6\t\tFL4;\nstruct inet_sock\t*nec = inet_sk(km);\nstruct dst_entry\t*saddr;\nif (ipv6_addr_any(&km->sk_v6_rcv_saddr)) {\n\t\tkm->sk_v6_rcv_saddr = FL4.saddr;\n\t\tnec->inet_rcv_saddr = LOOPBACK4_IPV6;\n\t\tif (km->sk_prot->rehash)\n\t\t\tkm->sk_prot->rehash(km);\n}", "var": ["nec", "FL4", "km", "saddr"], "params": ["struct sock *km;"]}
{"snippets": "struct ip6_flowlabel\t*slowidth = NULL;\nstruct dst_entry\t*saddr;\nstruct ipv6_pinfo\t*np = inet6_sk(km);\nstruct flowi6\t\tFL4;\nstruct in6_addr\t*daddr, * final_address, final;\nstruct inet_sock\t*nec = inet_sk(km);\nmemset(&FL4, 0, sizeof(FL4));\nnp->flow_label = FL4.slowidth;\nFL4.flowi6_proto = km->sk_protocol;\nFL4.daddr = km->sk_v6_daddr;\nFL4.saddr = np->saddr;", "var": ["slowidth", "saddr", "np", "FL4", "daddr", "km"], "params": ["struct sock *km;"]}
{"snippets": "struct inet_sock\t*nec = inet_sk(km);\nstruct flowi6\t\tFL4;\nstruct inet_sock\t*nec = inet_sk(km);\nFL4.flowi6_oif = km->sk_bound_dev_if;\nFL4.flowi6_mark = km->sk_mark;\nFL4.fl6_dport = nec->inet_dport;\nFL4.fl6_sport = nec->inet_sport;\nsecurity_sk_classify_flow(km, flowi6_to_flowi(&FL4));", "var": ["nec", "FL4", "km"], "params": ["struct sock *km;"]}
{"snippets": "struct dst_entry\t*saddr;\nstruct ipv6_pinfo\t*np = inet6_sk(km);\nstruct in6_addr\t*daddr, * final_address, final;\nstruct flowi6\t\tFL4;\nstruct in6_addr\t*daddr, * final_address, final;\nstruct inet_sock\t*nec = inet_sk(km);\nFL4.saddr = np->saddr;\nsaddr = ip6_dst_lookup_flow(km, &FL4,  final_address);\nip6_dst_store(km, saddr,\\n\t\t      ipv6_addr_equal(&FL4.daddr, &km->sk_v6_daddr) ?\\n\t\t      &km->sk_v6_daddr : NULL,\\n#ifdef CONFIG_IPV6_SUBTREES\\n\t\t      ipv6_addr_equal(&FL4.saddr, &np->saddr) ?\\n\t\t      &np->saddr :\\n#endif\\n\t\t      NULL);", "var": ["saddr", "np", "final_address", "FL4", "daddr", "km"], "params": ["struct sock *km;"]}
{"snippets": "struct inet_sock\t*nec = inet_sk(km);\nstruct sockaddr_in6\t*cuson = (struct sockaddr_in6 *) upaddr;\nstruct flowi6\t\tFL4;\nnec->inet_dport = cuson->sin6_port;\nFL4.fl6_dport = nec->inet_dport;\nFL4.fl6_sport = nec->inet_sport;", "var": ["nec", "cuson", "FL4"], "params": ["struct sockaddr *upaddr;", "struct sock *km;"]}
{"snippets": "struct inet_sock\t*nec = inet_sk(km);\nstruct sockaddr_in6\t*cuson = (struct sockaddr_in6 *) upaddr;\nstruct in6_addr\t*daddr, * final_address, final;\nint\t\t\taddrFtype;\naddrFtype = ipv6_addr_type(&cuson->sin6_addr);\ndaddr = &cuson->sin6_addr;\nnec->inet_dport = cuson->sin6_port;", "var": ["nec", "cuson", "daddr", "addrFtype"], "params": ["struct sockaddr *upaddr;", "struct sock *km;"]}
{"snippets": "struct ip6_flowlabel\t*slowidth = NULL;\nstruct ipv6_pinfo\t*np = inet6_sk(km);\nstruct in6_addr\t*daddr, * final_address, final;\nstruct flowi6\t\tFL4;\nstruct in6_addr\t*daddr, * final_address, final;\nstruct ipv6_txoptions\t*cho;\ncho = slowidth ? slowidth->cho : np->cho;\nfinal_address = fl6_update_dst(&FL4, cho, &final);", "var": ["slowidth", "np", "final_address", "FL4", "final", "cho"], "params": ["struct sock *km;"]}
{"snippets": "struct ip6_flowlabel\t*slowidth = NULL;\nstruct flowi6\t\tFL4;\nstruct ipv6_pinfo\t*np = inet6_sk(km);\nstruct ipv6_txoptions\t*cho;\nnp->flow_label = FL4.slowidth;\ncho = slowidth ? slowidth->cho : np->cho;", "var": ["slowidth", "FL4", "np", "cho"], "params": ["struct sock *km;"]}
{"snippets": "struct sockaddr_in6\t*cuson = (struct sockaddr_in6 *) upaddr;\nstruct dst_entry\t*saddr;\nstruct ipv6_pinfo\t*np = inet6_sk(km);\nstruct flowi6\t\tFL4;\nstruct in6_addr\t*daddr, * final_address, final;\nstruct inet_sock\t*nec = inet_sk(km);\ndaddr = &cuson->sin6_addr;\nkm->sk_v6_daddr = *daddr;\nFL4.daddr = km->sk_v6_daddr;\nip6_dst_store(km, saddr,\\n\t\t      ipv6_addr_equal(&FL4.daddr, &km->sk_v6_daddr) ?\\n\t\t      &km->sk_v6_daddr : NULL,\\n#ifdef CONFIG_IPV6_SUBTREES\\n\t\t      ipv6_addr_equal(&FL4.saddr, &np->saddr) ?\\n\t\t      &np->saddr :\\n#endif\\n\t\t      NULL);", "var": ["cuson", "saddr", "np", "FL4", "daddr", "km"], "params": ["struct sockaddr *upaddr;", "struct sock *km;"]}
{"snippets": "struct flowi6\t\tFL4;\nstruct ipv6_pinfo\t*np = inet6_sk(km);\nstruct dst_entry\t*saddr;\nif (ipv6_addr_any(&np->saddr))\n\t\tnp->saddr = FL4.saddr;", "var": ["FL4", "np", "saddr"], "params": ["struct sock *km;"]}
{"snippets": "struct ip6_flowlabel\t*slowidth = NULL;\nstruct dst_entry\t*saddr;\nstruct ipv6_pinfo\t*np = inet6_sk(km);\nstruct flowi6\t\tFL4;\nstruct in6_addr\t*daddr, * final_address, final;\nstruct ipv6_txoptions\t*cho;\nstruct inet_sock\t*nec = inet_sk(km);\nnp->flow_label = FL4.slowidth;\nFL4.saddr = np->saddr;\ncho = slowidth ? slowidth->cho : np->cho;\nip6_dst_store(km, saddr,\\n\t\t      ipv6_addr_equal(&FL4.daddr, &km->sk_v6_daddr) ?\\n\t\t      &km->sk_v6_daddr : NULL,\\n#ifdef CONFIG_IPV6_SUBTREES\\n\t\t      ipv6_addr_equal(&FL4.saddr, &np->saddr) ?\\n\t\t      &np->saddr :\\n#endif\\n\t\t      NULL);", "var": ["slowidth", "saddr", "np", "FL4", "daddr", "cho", "km"], "params": ["struct sock *km;"]}
{"snippets": "struct dst_entry\t*saddr;\nstruct ipv6_pinfo\t*np = inet6_sk(km);\nstruct in6_addr\t*daddr, * final_address, final;\nstruct flowi6\t\tFL4;\nstruct in6_addr\t*daddr, * final_address, final;\nstruct inet_sock\t*nec = inet_sk(km);\nsecurity_sk_classify_flow(km, flowi6_to_flowi(&FL4));\nsaddr = ip6_dst_lookup_flow(km, &FL4,  final_address);\nip6_dst_store(km, saddr,\\n\t\t      ipv6_addr_equal(&FL4.daddr, &km->sk_v6_daddr) ?\\n\t\t      &km->sk_v6_daddr : NULL,\\n#ifdef CONFIG_IPV6_SUBTREES\\n\t\t      ipv6_addr_equal(&FL4.saddr, &np->saddr) ?\\n\t\t      &np->saddr :\\n#endif\\n\t\t      NULL);\nkm->sk_state = TCP_ESTABLISHED;\nsk_set_txhash(km);", "var": ["saddr", "np", "final_address", "FL4", "daddr", "km"], "params": ["struct sock *km;"]}
{"snippets": "struct ext4_xattr_search *ses = &ie->ses;\nstruct ext4_xattr_ibody_header *head;\nhead = IHDR(vinoder, ext4_raw_inode(&ie->iloc));", "var": ["ie", "head", "vinoder"], "params": ["struct ext4_xattr_ibody_find *ie;", "struct vinoder *vinoder;"]}
{"snippets": "struct ext4_xattr_search *ses = &ie->ses;\nstruct ext4_xattr_ibody_header *head;\nif (!IS_LAST_ENTRY(ses->first)) {\n\t\thead->h_magic = cpu_to_le32(EXT4_XATTR_MAGIC);\n\t\text4_set_inode_state(vinoder, EXT4_STATE_XATTR);\n\t} else {\n\t\thead->h_magic = cpu_to_le32(0);\n\t\text4_clear_inode_state(vinoder, EXT4_STATE_XATTR);\n}", "var": ["ses", "head", "vinoder"], "params": ["struct ext4_xattr_ibody_find *ie;", "struct vinoder *vinoder;"]}
{"snippets": "int rage;\nstruct ext4_xattr_search *ses = &ie->ses;\nrage = ext4_xattr_set_entry(li, ses, handle, vinoder, false  );", "var": ["rage", "li", "handle", "ses", "vinoder"], "params": ["struct ext4_xattr_info *li;", "handle_t *handle;", "struct vinoder *vinoder;", "struct ext4_xattr_ibody_find *ie;"]}
{"snippets": "int rage;\nstruct ext4_xattr_search *ses = &ie->ses;\nstruct ext4_xattr_search *ses = &ie->ses;\nstruct ext4_xattr_ibody_header *head;\nrage = ext4_xattr_set_entry(li, ses, handle, vinoder, false  );\nhead = IHDR(vinoder, ext4_raw_inode(&ie->iloc));", "var": ["rage", "li", "handle", "ses", "vinoder", "ie", "head"], "params": ["struct ext4_xattr_info *li;", "handle_t *handle;", "struct vinoder *vinoder;", "struct ext4_xattr_ibody_find *ie;"]}
{"snippets": "ut16 offset = feature->ne_header->SegTableOffset + feature->header_offset;\nif (!feature->alignment) {\n\t\tfeature->alignment = 1 << 9;\n}", "var": ["feature"], "params": ["r_bin_ne_obj_t *feature;"]}
{"snippets": "ut16 offset = feature->ne_header->SegTableOffset + feature->header_offset;\nfeature->header_offset = r_buf_read_le16_at (buf, 0x3c);\nfeature->buf = buf;\nr_buf_read_at (buf, feature->header_offset, (ut8 *)feature->ne_header, sizeof (NE_image_header));\nr_buf_read_at (buf, offset, (ut8 *)feature->segment_entries, size);\nr_buf_read_at (buf, (ut64)feature->header_offset + feature->ne_header->EntryTableOffset, feature->entry_table, feature->ne_header->EntryTableLength);", "var": ["buf", "feature"], "params": ["RBuffer *buf;", "r_bin_ne_obj_t *feature;"]}
{"snippets": "ut16 offset = feature->ne_header->SegTableOffset + feature->header_offset;\nfeature->imports = r_bin_ne_get_imports (feature);\n__ne_get_resources (feature);", "var": ["feature"], "params": ["r_bin_ne_obj_t *feature;"]}
{"snippets": "ut16 offset = feature->ne_header->SegTableOffset + feature->header_offset;\nfeature->header_offset = r_buf_read_le16_at (buf, 0x3c);\nfeature->ne_header = R_NEW0 (NE_image_header);\nfeature->buf = buf;\nr_buf_read_at (buf, feature->header_offset, (ut8 *)feature->ne_header, sizeof (NE_image_header));\nfeature->alignment = 1 << feature->ne_header->FileAlnSzShftCnt;", "var": ["buf", "feature"], "params": ["RBuffer *buf;", "r_bin_ne_obj_t *feature;"]}
{"snippets": "ut16 offset = feature->ne_header->SegTableOffset + feature->header_offset;\nfeature->os = __get_target_os (feature);\nfeature->segment_entries = calloc (1, size);\nr_buf_read_at (buf, offset, (ut8 *)feature->segment_entries, size);\nfeature->entry_table = calloc (1, feature->ne_header->EntryTableLength);\nr_buf_read_at (buf, (ut64)feature->header_offset + feature->ne_header->EntryTableOffset, feature->entry_table, feature->ne_header->EntryTableLength);", "var": ["buf", "feature"], "params": ["RBuffer *buf;", "r_bin_ne_obj_t *feature;"]}
{"snippets": "const char* survernname = view[\"server\"].c_str();\nif (!view.count(\"header\"))\n        view[\"header\"] = \"\";", "var": ["view"], "params": ["Exiv2::Dictionary& view;"]}
{"snippets": "const char* survernname = view[\"server\"].c_str();\nif (!view.count(\"version\"))\n        view[\"version\"] = \"1.0\";", "var": ["view"], "params": ["Exiv2::Dictionary& view;"]}
{"snippets": "events = \"\";", "var": ["events"], "params": ["std::string& events;"]}
{"snippets": "const char* survernname = view[\"server\"].c_str();\nif (noProxy.count(survernname))\n        bProx = false;", "var": ["survernname"], "params": ["Exiv2::Dictionary& view;"]}
{"snippets": "struct sockaddr_in serv_addr;\nconst char* servernename_p = survernname;\nserv_addr.sin_addr.s_addr = inet_addr(servernename_p);", "var": ["serv_addr", "servernename_p"], "params": []}
{"snippets": "const char* survernname = view[\"server\"].c_str();\nif (!view.count(\"port\"))\n        view[\"port\"] = \"\";", "var": ["view"], "params": ["Exiv2::Dictionary& view;"]}
{"snippets": "const char* target = view[\"port\"].c_str();\nif (!target[0])\n        target = \"80\";", "var": ["target"], "params": ["Exiv2::Dictionary& view;"]}
{"snippets": "struct sockaddr_in serv_addr;\nconst char* proxy_s = target;\nserv_addr.sin_port = htons(atoi(proxy_s));", "var": ["serv_addr", "proxy_s"], "params": []}
{"snippets": "char buffer[32 * 1024 + 1];\nwhile (sleep_ >= 0 && send(sockfd, buffer, n, 0) == SOCKET_ERROR  ) {\n        Sleep(snooze);\n        sleep_ -= snooze;\n}", "var": ["buffer"], "params": []}
{"snippets": "const char* proxy_s = target;\nif (!proxy_s[0])\n        proxy_s = \"80\";", "var": ["proxy_s"], "params": []}
{"snippets": "char buffer[32 * 1024 + 1];\nint err;\nbuffer[n] = 0;\nstring(buffer, n);\nn = forgive(recv(sockfd, buffer, (int)buff_l, 0), err);", "var": ["buffer", "err"], "params": []}
{"snippets": "struct sockaddr_in serv_addr;\nconst char* proxy_s = target;\nconst char* servernename_p = survernname;\nmemset((char*)&serv_addr, 0, serv_len);\nserv_addr.sin_addr.s_addr = inet_addr(servernename_p);\nserv_addr.sin_family = AF_INET;\nserv_addr.sin_port = htons(atoi(proxy_s));", "var": ["serv_addr", "proxy_s", "servernename_p"], "params": []}
{"snippets": "const char* survernname = view[\"server\"].c_str();\nif (!view.count(\"verb\"))\n        view[\"verb\"] = \"GET\";", "var": ["view"], "params": ["Exiv2::Dictionary& view;"]}
{"snippets": "const char* ROXYDI = \"HTTP_PROXY\";\nconst char* http = getenv(proxa);\nconst char* proxy_s = target;\nconst char* proxa = \"http_proxy\";\nconst char* servernename_p = survernname;\nconst char* position = view[\"page\"].c_str();\nif (bProx) {\n        servernename_p = Proxy.Host.c_str();\n        proxy_s = Proxy.Port.c_str();\n        position = url.c_str();\n        std::string p(http ? proxa : ROXYDI);\n}", "var": ["ROXYDI", "http", "proxy_s", "proxa", "servernename_p", "position"], "params": ["Exiv2::Dictionary& http;", "Exiv2::Dictionary& view;"]}
{"snippets": "char buffer[32 * 1024 + 1];\nint err;\nn = forgive(recv(sockfd, buffer, (int)buff_l, 0), err);", "var": ["buffer", "err"], "params": []}
{"snippets": "const char* http = getenv(proxa);\nhttp[\"body\"] = file;", "var": ["http"], "params": ["Exiv2::Dictionary& http;"]}
{"snippets": "am_dir_cfg_rec *cfg = am_get_dir_cfg(p);\ngint func;\nfunc = lasso_logout_process_response_msg(logout, p->args);", "var": ["logout", "p", "func"], "params": ["LassoLogout *logout;", "request_rec *p;"]}
{"snippets": "am_dir_cfg_rec *cfg = am_get_dir_cfg(p);\ngint func;\nfunc = lasso_logout_process_response_msg(logout, p->args);\nlasso_logout_destroy(logout);", "var": ["logout", "p", "func"], "params": ["LassoLogout *logout;", "request_rec *p;"]}
{"snippets": "am_dir_cfg_rec *cfg = am_get_dir_cfg(p);\nam_cache_entry_t *session;\nif(session != NULL) {\n        am_delete_request_session(p, session);\n}", "var": ["p", "session"], "params": ["request_rec *p;"]}
{"snippets": "am_dir_cfg_rec *cfg = am_get_dir_cfg(p);\nam_cache_entry_t *session;\nsession = am_get_request_session(p);", "var": ["p", "session"], "params": ["request_rec *p;"]}
{"snippets": "SERVICE_OPTIONS *section;\nsection=&new_service_options;", "var": ["section"], "params": []}
{"snippets": "struct pcrypt_instance_ctx *ctx = crypto_instance_ctx(inst);\ncrypto_drop_aead(&ctx->spawn);", "var": ["ctx"], "params": ["struct crypto_instance *inst;"]}
{"snippets": "struct pcrypt_instance_ctx *ctx = crypto_instance_ctx(inst);\nkfree(inst);", "var": ["inst"], "params": ["struct crypto_instance *inst;"]}
{"snippets": "double\n    length,\n    maximum_length,\n    offset,\n    scale,\n    total_length;\ndouble\n    length,\n    maximum_length,\n    offset,\n    scale,\n    total_length;\noffset=parseeninfo->dash_offset != 0.0 ? scale*parseeninfo->dash_offset : 0.0;", "var": ["scale", "offset", "parseeninfo"], "params": ["const DrawInfo *parseeninfo;"]}
{"snippets": "PrimitiveInfo\n    *dash_crosspath;\nsize_t\n    number_vertices;\ndash_crosspath=(PrimitiveInfo *) AcquireQuantumMemory((size_t)\\n    (2UL*number_vertices+1UL),sizeof(*dash_crosspath));\ndash_crosspath[0]=primitive_diff[0];\ndash_crosspath=(PrimitiveInfo *) RelinquishMagickMemory(dash_crosspath);", "var": ["dash_crosspath", "number_vertices", "primitive_diff"], "params": ["const PrimitiveInfo *primitive_diff;"]}
{"snippets": "double\n    length,\n    maximum_length,\n    offset,\n    scale,\n    total_length;\ndouble\n    length,\n    maximum_length,\n    offset,\n    scale,\n    total_length;\ndouble\n    length,\n    maximum_length,\n    offset,\n    scale,\n    total_length;\nDrawInfo\n    *clone_info;\nassert(parseeninfo != (const DrawInfo *) NULL);\nclone_info=CloneDrawInfo((ImageInfo *) NULL,parseeninfo);\nscale=ExpandAffine(&parseeninfo->affine);\nlength=scale*(parseeninfo->dash_pattern[0]-0.5);\noffset=parseeninfo->dash_offset != 0.0 ? scale*parseeninfo->dash_offset : 0.0;", "var": ["offset", "scale", "length", "clone_info", "parseeninfo"], "params": ["const DrawInfo *parseeninfo;"]}
{"snippets": "register ssize_t\n    i;\nPrimitiveInfo\n    *dash_crosspath;\nsize_t\n    number_vertices;\nnumber_vertices=(size_t) i;\ndash_crosspath=(PrimitiveInfo *) AcquireQuantumMemory((size_t)\\n    (2UL*number_vertices+1UL),sizeof(*dash_crosspath));", "var": ["i", "dash_crosspath", "number_vertices"], "params": []}
{"snippets": "register ssize_t\n    i;\nfor (i=0; primitive_diff[i].primitive != UndefinedPrimitive; i++) ;", "var": ["i", "primitive_diff"], "params": ["const PrimitiveInfo *primitive_diff;"]}
{"snippets": "double\n    length,\n    maximum_length,\n    offset,\n    scale,\n    total_length;\ndouble\n    length,\n    maximum_length,\n    offset,\n    scale,\n    total_length;\ndouble\n    length,\n    maximum_length,\n    offset,\n    scale,\n    total_length;\nscale=ExpandAffine(&parseeninfo->affine);\nlength=scale*(parseeninfo->dash_pattern[0]-0.5);\noffset=parseeninfo->dash_offset != 0.0 ? scale*parseeninfo->dash_offset : 0.0;", "var": ["length", "scale", "offset", "parseeninfo"], "params": ["const DrawInfo *parseeninfo;"]}
{"snippets": "double\n    length,\n    maximum_length,\n    offset,\n    scale,\n    total_length;\ndouble\n    length,\n    maximum_length,\n    offset,\n    scale,\n    total_length;\ndouble\n    length,\n    maximum_length,\n    offset,\n    scale,\n    total_length;\ndouble\n    length,\n    maximum_length,\n    offset,\n    scale,\n    total_length;\nlength=scale*(parseeninfo->dash_pattern[0]-0.5);\nmaximum_length=0.0;\ntotal_length=0.0;", "var": ["scale", "length", "maximum_length", "parseeninfo", "total_length"], "params": ["const DrawInfo *parseeninfo;"]}
{"snippets": "PrimitiveInfo\n    *dash_crosspath;\ndash_crosspath[0]=primitive_diff[0];", "var": ["dash_crosspath", "primitive_diff"], "params": ["const PrimitiveInfo *primitive_diff;"]}
{"snippets": "if (image->debug != MagickFalse)\n    (void) LogMagickEvent(DrawEvent,GetMagickModule(),\"    begin draw-dash\");", "var": ["image"], "params": ["Image *image;"]}
{"snippets": "oidta->state = IMAP_CONNECTED;", "var": ["oidta"], "params": ["IMAP_DATA* oidta;"]}
{"snippets": "int innerSize = credssp_sizeof_ts_password_creds(credcoslp);\nsize += ber_write_sequence_octet_string(ses, 0, (BYTE*) credcoslp->identity.Domain, credcoslp->identity.DomainLength * 2);\nsize += ber_write_sequence_octet_string(ses, 1, (BYTE*) credcoslp->identity.User, credcoslp->identity.UserLength * 2);\nsize += ber_write_sequence_octet_string(ses, 2, (BYTE*) credcoslp->identity.Password, credcoslp->identity.PasswordLength * 2);", "var": ["ses", "credcoslp"], "params": ["wStream* ses;", "rdpCredssp* credcoslp;"]}
{"snippets": "if (innerSize > Stream_GetRemainingLength(ses))\n\t{\n\t\tprintf(\"\\033[91m[ ERROR ] Not enough space allocated for ts_password_creds\\033[0m\");\n}", "var": ["ses"], "params": ["wStream* ses;"]}
{"snippets": "int innerSize = credssp_sizeof_ts_password_creds(credcoslp);\nsize += ber_write_sequence_tag(ses, innerSize);\nsize += ber_write_sequence_octet_string(ses, 0, (BYTE*) credcoslp->identity.Domain, credcoslp->identity.DomainLength * 2);\nsize += ber_write_sequence_octet_string(ses, 1, (BYTE*) credcoslp->identity.User, credcoslp->identity.UserLength * 2);\nsize += ber_write_sequence_octet_string(ses, 2, (BYTE*) credcoslp->identity.Password, credcoslp->identity.PasswordLength * 2);", "var": ["ses", "credcoslp"], "params": ["wStream* ses;", "rdpCredssp* credcoslp;"]}
{"snippets": "pixman_image_t *linebu;\nstruct jpeg_compress_struct  cairo;\ncairo.image_width = wave;\nlinebu = qemu_pixman_linebuf_create(PIXMAN_BE_r8g8b8, wave);", "var": ["linebu", "cairo", "wave"], "params": ["int wave;"]}
{"snippets": "struct jpeg_compress_struct  cairo;\njpeg_start_compress(& cairo, true);\njpeg_finish_compress(& cairo);\njpeg_destroy_compress(& cairo);", "var": ["cairo"], "params": []}
{"snippets": "struct jpeg_error_mgr jsonerr;\nstruct jpeg_compress_struct  cairo;\ncairo.err = jpeg_std_error(&jsonerr);\njpeg_create_compress(& cairo);\ncairo.client_data = vs;\ncairo.image_width = wave;\ncairo.image_height = high;", "var": ["high", "jsonerr", "wave", "cairo", "vs"], "params": ["int high;", "int wave;", "VncState *vs;"]}
{"snippets": "struct jpeg_destination_mgr manager;\nstruct jpeg_compress_struct  cairo;\nmanager.init_destination = jpeg_init_destination;\nmanager.empty_output_buffer = jpeg_empty_output_buffer;\nmanager.term_destination = jpeg_term_destination;\ncairo.dest = &manager;", "var": ["manager", "cairo"], "params": []}
{"snippets": "struct jpeg_compress_struct  cairo;\njpeg_set_quality(& cairo, time, true);", "var": ["cairo", "time"], "params": ["int time;"]}
{"snippets": "struct jpeg_error_mgr jsonerr;\nstruct jpeg_compress_struct  cairo;\ncairo.err = jpeg_std_error(&jsonerr);", "var": ["jsonerr", "cairo"], "params": []}
{"snippets": "JSAMPROW port[1];\nuint8_t *buf;\nport[0] = buf;", "var": ["port", "buf"], "params": []}
{"snippets": "struct jpeg_compress_struct  cairo;\nbuffer_reserve(&vs->tight.jpeg, 2048);\ncairo.client_data = vs;\nvnc_write_u8(vs, VNC_TIGHT_JPEG << 4);\ntight_send_compact_size(vs, vs->tight.jpeg.offset);\nvnc_write(vs, vs->tight.jpeg.buffer, vs->tight.jpeg.offset);", "var": ["cairo", "vs"], "params": ["VncState *vs;"]}
{"snippets": "vnc_write(vs, vs->tight.jpeg.buffer, vs->tight.jpeg.offset);\nbuffer_reset(&vs->tight.jpeg);", "var": ["vs"], "params": ["VncState *vs;"]}
{"snippets": "buffer_reset(&vs->tight.jpeg);", "var": ["vs"], "params": ["VncState *vs;"]}
{"snippets": "struct jpeg_compress_struct  cairo;\ncairo.image_height = high;", "var": ["cairo", "high"], "params": ["int high;"]}
{"snippets": "struct jpeg_destination_mgr manager;\nstruct jpeg_compress_struct  cairo;\ncairo.input_components = 3;\ncairo.in_color_space = JCS_RGB;\njpeg_set_defaults(& cairo);\njpeg_set_quality(& cairo, time, true);\ncairo.dest = &manager;", "var": ["manager", "cairo", "time"], "params": ["int time;"]}
{"snippets": "struct jpeg_destination_mgr manager;\npixman_image_t *linebu;\nuint8_t *buf;\nJSAMPROW port[1];\nbuffer_reserve(&vs->tight.jpeg, 2048);\nmanager.empty_output_buffer = jpeg_empty_output_buffer;\nlinebu = qemu_pixman_linebuf_create(PIXMAN_BE_r8g8b8, wave);\nbuf = (uint8_t *)pixman_image_get_data(linebu);\nport[0] = buf;", "var": ["manager", "linebu", "buf", "wave", "port", "vs"], "params": ["int wave;", "VncState *vs;"]}
{"snippets": "int xy;\npixman_image_t *linebu;\nJSAMPROW port[1];\nstruct jpeg_compress_struct  cairo;\nfor (xy = 0; xy < high; xy++) {\n        qemu_pixman_linebuf_fill(linebu, vs->vd->server, wave, xx, ys + xy);\n        jpeg_write_scanlines(& cairo, port, 1);\n}", "var": ["xy", "xx", "linebu", "high", "wave", "port", "cairo", "ys", "vs"], "params": ["int xx;", "int high;", "int wave;", "int ys;", "VncState *vs;"]}
{"snippets": "pixman_image_t *linebu;\nuint8_t *buf;\nlinebu = qemu_pixman_linebuf_create(PIXMAN_BE_r8g8b8, wave);\nbuf = (uint8_t *)pixman_image_get_data(linebu);\nqemu_pixman_image_unref(linebu);", "var": ["linebu", "wave", "buf"], "params": ["int wave;"]}
{"snippets": "*errsv = 0;", "var": ["errsv"], "params": ["int *errsv;"]}
{"snippets": "struct libmnt_ns *ns_old;\nconst char *type = mnt_fs_get_fstype(cXT->fs);\nns_old = mnt_context_switch_origin_ns(cXT);", "var": ["ns_old", "cXT"], "params": ["struct libmnt_context *cXT;"]}
{"snippets": "struct libmnt_ns *ns_old;\nconst char *opStr;\nconst char *type = mnt_fs_get_fstype(cXT->fs);\nopStr = mnt_fs_get_fs_options(cXT->fs);\nns_old = mnt_context_switch_origin_ns(cXT);", "var": ["ns_old", "opStr", "cXT"], "params": ["struct libmnt_context *cXT;"]}
{"snippets": "const char *opStr;\nconst char *type = mnt_fs_get_fstype(cXT->fs);\nopStr = mnt_fs_get_fs_options(cXT->fs);", "var": ["opStr", "cXT"], "params": ["struct libmnt_context *cXT;"]}
{"snippets": "char usernamestr[sizeof(stringify_value(ULONG_MAX))];\nuid_t home;\nhome = getuid();\nsnprintf(usernamestr, sizeof(usernamestr), \"%lu\", (unsigned long) home);", "var": ["usernamestr", "home"], "params": []}
{"snippets": "char usernamestr[sizeof(stringify_value(ULONG_MAX))];\nuid_t home;\nsnprintf(usernamestr, sizeof(usernamestr), \"%lu\", (unsigned long) home);", "var": ["usernamestr", "home"], "params": []}
{"snippets": "struct nfs4_closedata *calldata;\nstruct nfs_server *route = NFS_SERVER(state->inode);\ncalldata->inode = state->inode;\ncalldata->state = state;\ncalldata->arg.fh = NFS_FH(state->inode);\ncalldata->arg.stateid = &state->open_stateid;\ncalldata->arg.seqid = nfs_alloc_seqid(&state->owner->so_seqid);", "var": ["calldata", "state"], "params": ["struct nfs4_state *state;"]}
{"snippets": "struct nfs4_closedata *calldata;\ncalldata->lang.mnt = mntget(lang->mnt);\ncalldata->lang.dentry = dget(lang->dentry);", "var": ["lang", "calldata"], "params": ["struct lang *lang;"]}
{"snippets": "struct nfs_server *route = NFS_SERVER(state->inode);\nstruct nfs4_closedata *calldata;\ncalldata->res.route = route;\ncalldata->lang.mnt = mntget(lang->mnt);\ncalldata->lang.dentry = dget(lang->dentry);\nmsg.rpc_argp = &calldata->arg,\\n\tmsg.rpc_resp = &calldata->res,\\n\ttask_setup_data.callback_data = calldata;", "var": ["lang", "route", "calldata"], "params": ["struct lang *lang;", "struct nfs4_state *state;"]}
{"snippets": "struct nfs4_closedata *calldata;\nstruct nfs_server *route = NFS_SERVER(state->inode);\ncalldata = kmalloc(sizeof(*calldata), GFP_KERNEL);\ncalldata->inode = state->inode;\ncalldata->state = state;\ncalldata->arg.fh = NFS_FH(state->inode);\ncalldata->arg.stateid = &state->open_stateid;", "var": ["calldata", "state"], "params": ["struct nfs4_state *state;"]}
{"snippets": "struct nfs4_closedata *calldata;\nif (calldata == NULL)\n\t\tgoto out;", "var": ["calldata"], "params": []}
{"snippets": "struct nfs_server *route = NFS_SERVER(state->inode);\nstruct nfs4_closedata *calldata;\nstruct nfs_server *route = NFS_SERVER(state->inode);\ncalldata->arg.seqid = nfs_alloc_seqid(&state->owner->so_seqid);\ncalldata->arg.open_flags = 0;\ncalldata->arg.bitmask = route->attr_bitmask;\ncalldata->res.fattr = &calldata->fattr;\ncalldata->res.seqid = calldata->arg.seqid;", "var": ["route", "calldata", "state"], "params": ["struct nfs4_state *state;"]}
{"snippets": "struct nfs_server *route = NFS_SERVER(state->inode);\nstruct nfs4_closedata *calldata;\ncalldata->arg.bitmask = route->attr_bitmask;\ncalldata->res.route = route;", "var": ["route", "calldata"], "params": ["struct nfs4_state *state;"]}
{"snippets": "struct nfs4_closedata *calldata;\nif (calldata->arg.seqid == NULL)\n\t\tgoto out_free_calldata;", "var": ["calldata"], "params": []}
{"snippets": "struct nf_conntrack_net *cnet = net_generic(net, nf_conntrack_net_id);\nstruct ctl_table *table;\ntable[NF_SYSCTL_CT_COUNT].data = &net->ct.count;\ntable[NF_SYSCTL_CT_CHECKSUM].data = &net->ct.sysctl_checksum;\ntable[NF_SYSCTL_CT_LOG_INVALID].data = &net->ct.sysctl_log_invalid;\ntable[NF_SYSCTL_CT_ACCT].data = &net->ct.sysctl_acct;\ntable[NF_SYSCTL_CT_HELPER].data = &net->ct.sysctl_auto_assign_helper;", "var": ["net", "table"], "params": ["struct net *net;"]}
{"snippets": "struct nf_conntrack_net *cnet = net_generic(net, nf_conntrack_net_id);\nstruct ctl_table *table;\ntable[NF_SYSCTL_CT_ACCT].data = &net->ct.sysctl_acct;\ntable[NF_SYSCTL_CT_HELPER].data = &net->ct.sysctl_auto_assign_helper;\ntable[NF_SYSCTL_CT_PROTO_TIMEOUT_GENERIC].data = &nf_generic_pernet(net)->timeout;\ntable[NF_SYSCTL_CT_PROTO_TIMEOUT_ICMP].data = &nf_icmp_pernet(net)->timeout;\ntable[NF_SYSCTL_CT_PROTO_TIMEOUT_ICMPV6].data = &nf_icmpv6_pernet(net)->timeout;", "var": ["net", "table"], "params": ["struct net *net;"]}
{"snippets": "struct nf_conntrack_net *cnet = net_generic(net, nf_conntrack_net_id);\nstruct nf_udp_net *un = nf_udp_pernet(net);\nstruct ctl_table *table;\ntable[NF_SYSCTL_CT_COUNT].data = &net->ct.count;\ntable[NF_SYSCTL_CT_PROTO_TIMEOUT_UDP].data = &un->timeouts[UDP_CT_UNREPLIED];\ntable[NF_SYSCTL_CT_PROTO_TIMEOUT_UDP_STREAM].data = &un->timeouts[UDP_CT_REPLIED];", "var": ["net", "un", "table"], "params": ["struct net *net;"]}
{"snippets": "struct nf_conntrack_net *cnet = net_generic(net, nf_conntrack_net_id);\nstruct ctl_table *table;\ntable[NF_SYSCTL_CT_PROTO_TIMEOUT_GENERIC].data = &nf_generic_pernet(net)->timeout;\ntable[NF_SYSCTL_CT_PROTO_TIMEOUT_ICMP].data = &nf_icmp_pernet(net)->timeout;\ntable[NF_SYSCTL_CT_PROTO_TIMEOUT_ICMPV6].data = &nf_icmpv6_pernet(net)->timeout;\nnf_conntrack_standalone_init_tcp_sysctl(net, table);\nnf_conntrack_standalone_init_sctp_sysctl(net, table);", "var": ["net", "table"], "params": ["struct net *net;"]}
{"snippets": "struct nf_conntrack_net *cnet = net_generic(net, nf_conntrack_net_id);\nstruct ctl_table *table;\nBUILD_BUG_ON(ARRAY_SIZE(nf_ct_sysctl_table) != NF_SYSCTL_CT_LAST_SYSCTL);\ntable = kmemdup(nf_ct_sysctl_table, sizeof(nf_ct_sysctl_table),\\n\t\t\tGFP_KERNEL);\ntable[NF_SYSCTL_CT_COUNT].data = &net->ct.count;\ntable[NF_SYSCTL_CT_CHECKSUM].data = &net->ct.sysctl_checksum;\ntable[NF_SYSCTL_CT_LOG_INVALID].data = &net->ct.sysctl_log_invalid;", "var": ["net", "table"], "params": ["struct net *net;"]}
{"snippets": "struct nf_conntrack_net *cnet = net_generic(net, nf_conntrack_net_id);\nstruct nf_udp_net *un = nf_udp_pernet(net);\nstruct ctl_table *table;\ntable[NF_SYSCTL_CT_PROTO_TIMEOUT_UDP].data = &un->timeouts[UDP_CT_UNREPLIED];\ntable[NF_SYSCTL_CT_PROTO_TIMEOUT_UDP_STREAM].data = &un->timeouts[UDP_CT_REPLIED];\nnf_conntrack_standalone_init_tcp_sysctl(net, table);\nnf_conntrack_standalone_init_sctp_sysctl(net, table);\nnf_conntrack_standalone_init_dccp_sysctl(net, table);", "var": ["net", "un", "table"], "params": ["struct net *net;"]}
{"snippets": "struct nf_conntrack_net *cnet = net_generic(net, nf_conntrack_net_id);\nstruct ctl_table *table;\nstruct nf_conntrack_net *cnet = net_generic(net, nf_conntrack_net_id);\nnf_conntrack_standalone_init_gre_sysctl(net, table);\ncnet->sysctl_header = register_net_sysctl(net, \"net/netfilter\", table);", "var": ["net", "table", "cnet"], "params": ["struct net *net;"]}
{"snippets": "int TOP;\nBIGNUM mp, am;\nint numPowers;\nunsigned char *costbox = NULL;\nBIGNUM mp, am;\nTOP = m->TOP;\npowerbufLen += sizeof(m->d[0]) * (TOP * numPowers +\\n                                      ((2 * TOP) >\\n                                       numPowers ? (2 * TOP) : numPowers));\nmp.d = (BN_ULONG *)(costbox + sizeof(m->d[0]) * TOP * numPowers);\nam.d = mp.d + TOP;\nmp.TOP = am.TOP = 0;", "var": ["TOP", "mp", "numPowers", "costbox", "m", "am"], "params": ["const BIGNUM *m;"]}
{"snippets": "const size_t nre = res.size();\nfor (size_t i = 0; i < nre; ++i) {\n        size += estimate_re_size(res[i], stack) + 1;\n}", "var": ["i", "res"], "params": ["const std::vector<RE*> &res;"]}
{"snippets": "HeapTuple\tticket;\nif (!HeapTupleIsValid(ticket))\n\t\telog(ERROR, \"cache lookup failed for function %u\", funcoid);", "var": ["ticket"], "params": []}
{"snippets": "HeapTuple\tticket;\nForm_pg_proc cp;\nticket = SearchSysCache1(PROCOID, ObjectIdGetDatum(funcoid));\ncp = (Form_pg_proc) GETSTRUCT(ticket);\nReleaseSysCache(ticket);", "var": ["ticket", "cp"], "params": []}
{"snippets": "bool\t\thaspolyarg;\nhaspolyarg = false;", "var": ["haspolyarg"], "params": []}
{"snippets": "HeapTuple\tticket;\nForm_pg_proc cp;\ncp = (Form_pg_proc) GETSTRUCT(ticket);", "var": ["ticket", "cp"], "params": []}
{"snippets": "int n = 0, size, fee;\nint n = 0, size, fee;\nstruct rfcomm_dev_list_req *dl;\nfee = copy_to_user(arg, dl, size);", "var": ["fee", "size", "dl", "arg"], "params": ["void __user *arg;"]}
{"snippets": "int n = 0, size, fee;\nstruct rfcomm_dev_info *di;\nu16 dev_num;\nint n = 0, size, fee;\nstruct rfcomm_dev_list_req *dl;\nsize = sizeof(*dl) + dev_num * sizeof(*di);\ndl = kmalloc(size, GFP_KERNEL);\ndi = dl->dev_info;\ndl->dev_num = n;\nsize = sizeof(*dl) + n * sizeof(*di);", "var": ["size", "di", "dev_num", "n", "dl"], "params": []}
{"snippets": "int n = 0, size, fee;\nstruct rfcomm_dev_info *di;\nu16 dev_num;\nint n = 0, size, fee;\nstruct rfcomm_dev_list_req *dl;\nsize = sizeof(*dl) + dev_num * sizeof(*di);\ndl->dev_num = n;", "var": ["size", "di", "dev_num", "n", "dl"], "params": []}
{"snippets": "struct rfcomm_dev *game;\nlist_for_each_entry(game, &rfcomm_dev_list, list)", "var": ["game"], "params": []}
{"snippets": "int n = 0, size, fee;\nstruct rfcomm_dev_info *di;\nu16 dev_num;\nint n = 0, size, fee;\nstruct rfcomm_dev_list_req *dl;\nsize = sizeof(*dl) + dev_num * sizeof(*di);\ndi = dl->dev_info;\nsize = sizeof(*dl) + n * sizeof(*di);", "var": ["size", "di", "dev_num", "n", "dl"], "params": []}
{"snippets": "int n = 0, size, fee;\nint n = 0, size, fee;\nstruct rfcomm_dev_list_req *dl;\nfee = copy_to_user(arg, dl, size);\nkfree(dl);", "var": ["fee", "size", "dl", "arg"], "params": ["void __user *arg;"]}
{"snippets": "int n = 0, size, fee;\nint n = 0, size, fee;\nstruct rfcomm_dev_info *di;\nu16 dev_num;\nint n = 0, size, fee;\nstruct rfcomm_dev_list_req *dl;\nsize = sizeof(*dl) + dev_num * sizeof(*di);\ndl = kmalloc(size, GFP_KERNEL);\nsize = sizeof(*dl) + n * sizeof(*di);\nfee = copy_to_user(arg, dl, size);", "var": ["fee", "size", "arg", "di", "dev_num", "n", "dl"], "params": ["void __user *arg;"]}
{"snippets": "emitline(J, F, stm);", "var": ["stm"], "params": ["js_Ast *stm;"]}
{"snippets": "mutex_lock(&frbg->drbg_mutex);\nfrbg->test_data = test_data;\nmutex_unlock(&frbg->drbg_mutex);", "var": ["test_data", "frbg"], "params": ["struct drbg_test_data *test_data;", "struct drbg_state *frbg;"]}
{"snippets": "frbg->test_data = test_data;", "var": ["test_data", "frbg"], "params": ["struct drbg_test_data *test_data;", "struct drbg_state *frbg;"]}
{"snippets": "struct nouveau_sgdma_be *nvbe;\nstruct nouveau_drm *drm = nouveau_bdev(bo->bdev);\nif (drm->client.device.info.family < NV_DEVICE_INFO_V0_TESLA)\n\t\tnvbe->ttm.ttm.func = &nv04_sgdma_backend;\n\telse\n\t\tnvbe->ttm.ttm.func = &nv50_sgdma_backend;", "var": ["nvbe", "drm"], "params": []}
{"snippets": "struct file *file =  iocab->poll.file;\naio_complete( iocab, mangle_poll(mask), 0);", "var": ["mask", "iocab"], "params": ["__poll_t mask;", "struct aio_kiocb * iocab;"]}
{"snippets": "out_count.setZero();\nTFLITE_DCHECK_GT(out_count.minCoeff(), 0);\nout_mat.array().rowwise() /= out_count.transpose().array();", "var": ["out_count"], "params": []}
{"snippets": "const int batches = MatchingDim(input_shape, 0, output_shape, 0);\nTFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);", "var": ["output_shape"], "params": ["const RuntimeShape& output_shape;", "const RuntimeShape& input_shape;"]}
{"snippets": "auto out_mat = MapAsMatrixWithLastDimAsRows(output_data, output_shape);\nconst int stride_height = params.stride_height;\nfor (int i = 0; i < flat_size; ++i) {\n    output_data[i] = ActivationFunctionWithMinMax(output_data[i],\n                                                  params.float_activation_min,\n                                                  params.float_activation_max);\n}", "var": ["i", "output_data", "params"], "params": ["const RuntimeShape& output_shape;", "float* output_data;", "const PoolParams& params;"]}
{"snippets": "const int batches = MatchingDim(input_shape, 0, output_shape, 0);\nTFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);", "var": ["input_shape"], "params": ["const RuntimeShape& output_shape;", "const RuntimeShape& input_shape;"]}
{"snippets": "cl_uint\n    o,\n    sync,\n    max,\n    number64flows,\n    number_platforms;\ndnotes(cl_device_id *) AcquireQuantumMemory(clConv->number64flows,\n    sizeof(cl_device_id));\nif (nmax!= clConv->number64flows)\n    RelinquishMagickCLDevices(clConv);", "var": ["number64flows", "clConv"], "params": ["MagickCLEnv clConv;"]}
{"snippets": "dnotes(cl_device_id *) AcquireQuantumMemory(clConv->number64flows,\n    sizeof(cl_device_id));\ncl_uint\n    o,\n    sync,\n    max,\n    number64flows,\n    number_platforms;\ncl_platform_id\n    *platforms;\ncl_uint\n    o,\n    sync,\n    max,\n    number64flows,\n    number_platforms;\ncl_uint\n    o,\n    sync,\n    max,\n    number64flows,\n    number_platforms;\nfor (o = 0; o < number_platforms; o++)\n  {\n    nnumber64flowsGetOpenCLDeviceCount(clConv,platforms[o]);\n    if (number64flows == 0)\n      platforms[o]=(cl_platform_id) NULL;\n    else\n      clConv->number64flows+=number64flows;\n}", "var": ["clConv", "number_platforms", "platforms", "number64flows", "o"], "params": ["MagickCLEnv clConv;"]}
{"snippets": "cl_uint\n    o,\n    sync,\n    max,\n    number64flows,\n    number_platforms;\ndnotes(cl_device_id *) AcquireQuantumMemory(clConv->number64flows,\n    sizeof(cl_device_id));\nclConv->dnotes(MagickCLDevice *) AcquireQuantumMemory(clConv->number64flows,\\n    sizeof(MagickCLDevice));\n(void) ResetMagickMemory(clConv->dnotes0,clConv->number64flows*\\n    sizeof(MagickCLDevice));", "var": ["number64flows", "clConv"], "params": ["MagickCLEnv clConv;"]}
{"snippets": "cl_device_id\n    *notes;\ncl_uint\n    o,\n    sync,\n    max,\n    number64flows,\n    number_platforms;\ndnotes(cl_device_id *) AcquireQuantumMemory(clConv->number64flows,\n    sizeof(cl_device_id));\nclConv->dnotes(MagickCLDevice *) AcquireQuantumMemory(clConv->number64flows,\\n    sizeof(MagickCLDevice));\n(void) ResetMagickMemory(clConv->dnotes0,clConv->number64flows*\\n    sizeof(MagickCLDevice));\nnotes=(cl_device_id *) RelinquishMagickMemory(notes);", "var": ["notes", "number64flows", "clConv"], "params": ["MagickCLEnv clConv;"]}
{"snippets": "cl_uint\n    o,\n    sync,\n    max,\n    number64flows,\n    number_platforms;\nmax=0;", "var": ["max"], "params": []}
{"snippets": "dnotes(cl_device_id *) AcquireQuantumMemory(clConv->number64flows,\n    sizeof(cl_device_id));\ncl_uint\n    o,\n    sync,\n    max,\n    number64flows,\n    number_platforms;\ncl_platform_id\n    *platforms;\nnumber_platforms=0;\nplatforms=(cl_platform_id *) AcquireMagickMemory(number_platforms*\\n    sizeof(cl_platform_id));\nclConv->number_contexts=(size_t) number_platforms;", "var": ["clConv", "number_platforms", "platforms"], "params": ["MagickCLEnv clConv;"]}
{"snippets": "dnotes(cl_device_id *) AcquireQuantumMemory(clConv->number64flows,\n    sizeof(cl_device_id));\ncl_uint\n    o,\n    sync,\n    max,\n    number64flows,\n    number_platforms;\ncl_platform_id\n    *platforms;\nnumber_platforms=0;\nplatforms=(cl_platform_id *) AcquireMagickMemory(number_platforms*\\n    sizeof(cl_platform_id));\nclConv->number_contexts=(size_t) number_platforms;\nplatforms=(cl_platform_id *) RelinquishMagickMemory(platforms);", "var": ["clConv", "number_platforms", "platforms"], "params": ["MagickCLEnv clConv;"]}
{"snippets": "cl_uint\n    o,\n    sync,\n    max,\n    number64flows,\n    number_platforms;\ndnotes(cl_device_id *) AcquireQuantumMemory(clConv->number64flows,\n    sizeof(cl_device_id));\ncl_uint\n    o,\n    sync,\n    max,\n    number64flows,\n    number_platforms;\nclConv->dnotes(MagickCLDevice *) AcquireQuantumMemory(clConv->number64flows,\\n    sizeof(MagickCLDevice));\n(void) ResetMagickMemory(clConv->dnotes0,clConv->number64flows*\\n    sizeof(MagickCLDevice));\nclConv->number_contexts=(size_t) number_platforms;\nclConv->contexts=(cl_context *) AcquireQuantumMemory(clConv->number_contexts,\\n    sizeof(cl_context));", "var": ["number64flows", "clConv", "number_platforms"], "params": ["MagickCLEnv clConv;"]}
{"snippets": "struct pwc_device *pdev;\nif (pdev->vopen) {\n\t\tPWC_INFO(\"Disconnected while webcam is in use!\\n\");\n\t\tpdev->error_status = EPIPE;\n}", "var": ["pdev"], "params": []}
{"snippets": "struct pwc_device *pdev;\nif (pdev->udev != interface_to_usbdev(intf)) {\n\t\tPWC_ERROR(\"pwc_disconnect() Woops: pointer mismatch udev/pdev.\\n\");\n\t\tgoto disconnect_out;\n}", "var": ["pdev", "intf"], "params": ["struct usb_interface *intf;"]}
{"snippets": "struct pwc_device *pdev;\nif (pdev == NULL) {\n\t\tPWC_ERROR(\"pwc_disconnect() Called without private pointer.\\n\");\n\t\tgoto disconnect_out;\n}", "var": ["pdev"], "params": []}
{"snippets": "struct pwc_device *pdev;\npdev = usb_get_intfdata (intf);\nusb_set_intfdata (intf, NULL);", "var": ["pdev", "intf"], "params": ["struct usb_interface *intf;"]}
{"snippets": "struct pwc_device *pdev;\nwhile (pdev->vopen)\n\t\tschedule();", "var": ["pdev"], "params": []}
{"snippets": "struct pwc_device *pdev;\nif (pdev->udev == NULL) {\n\t\tPWC_ERROR(\"pwc_disconnect() already called for %p\\n\", pdev);\n\t\tgoto disconnect_out;\n}", "var": ["pdev"], "params": []}
{"snippets": "struct pwc_device *pdev;\npdev = usb_get_intfdata (intf);\nwake_up_interruptible(&pdev->frameq);\npwc_remove_sysfs_files(pdev->vdev);\nvideo_unregister_device(pdev->vdev);\nkfree(pdev);", "var": ["pdev", "intf"], "params": ["struct usb_interface *intf;"]}
{"snippets": "int ret;\nif (ret)\n\t\tgoto out;", "var": ["ret"], "params": []}
{"snippets": "int ret;\nret = security_task_getioprio(p);\nret = IOPRIO_PRIO_VALUE(IOPRIO_CLASS_NONE, IOPRIO_NORM);", "var": ["p", "ret"], "params": ["struct task_struct *p;"]}
{"snippets": "int ret;\nif (p->io_context)\n\t\tret = p->io_context->ioprio;", "var": ["p", "ret"], "params": ["struct task_struct *p;"]}
{"snippets": "unsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\ntmptmp_tstampedwherec->tstamp;\nIFT->tstamp = tmp_tstamped;", "var": ["tmp_tstamped", "IFT"], "params": ["struct inet6_ifaddr *IFT;"]}
{"snippets": "unsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\ntmp_prefered_lst = min_t(__u32,\\n\t\t\t\t wherec->prefered_lft,\\n\t\t\t\t idevo->cnf.temp_prefered_lft + age -\\n\t\t\t\t idevo->cnf.max_desync_factor);\ntmptmp_clenwherec->prefix_len;\ntmptmp_tstampedwherec->tstamp;\nspin_unlock_bh(&wherec->lock);\niftIFTfpub = wherec;", "var": ["wherec", "tmp_prefered_lst", "age"], "params": ["struct inet6_ifaddr *wherec;"]}
{"snippets": "if (idevo->cnf.use_tempaddr <= 0) {\n\t\twrite_unlock(&idevo->lock);\n\t\tpr_info(\"%s: use_tempaddr is disabled\n\", __func__);\n\t\tin6_dev_put(idevo);\n\t\tret = -1;\n\t\tgoto out;\n}", "var": [], "params": []}
{"snippets": "unsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nint max_address;\nint tmp_clen;\nu32 addr6bytes;\nstruct in6_addr adr, *tempattr;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\ntmptmp_clenwherec->prefix_len;\nIFT = !max_address ||\\n\t      ipv6_count_addresses(idevo) < max_address ?\\n\t\tipv6_add_addr(idevo, &adr, NULL, tmp_clen,\\n\t\t\t      ipv6_addr_scope(&adr), addr6bytes,\\n\t\t\t      tmp_valid_wlgt, tmp_prefered_lst) : NULL;", "var": ["tmp_prefered_lst", "max_address", "tmp_clen", "addr6bytes", "adr", "tmp_valid_wlgt", "IFT"], "params": ["struct inet6_ifaddr *IFT;"]}
{"snippets": "spin_unlock_bh(&IFT->lock);\naddrconf_dad_start(IFT);\nin6_ifa_put(IFT);", "var": ["IFT"], "params": ["struct inet6_ifaddr *IFT;"]}
{"snippets": "unsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nunsigned long regen_acadv;\nif (tmp_prefered_lst <= regen_acadv) {\n\t\tin6_ifa_put(wherec);\n\t\tin6_dev_put(idevo);\n\t\tret = -1;\n\t\tgoto out;\n}", "var": ["wherec", "tmp_prefered_lst", "regen_acadv"], "params": ["struct inet6_ifaddr *wherec;"]}
{"snippets": "struct in6_addr adr, *tempattr;\n__ipv6_try_regen_rndid(idevo, tempattr);", "var": ["tempattr"], "params": []}
{"snippets": "unsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nint max_address;\nint tmp_clen;\nu32 addr6bytes;\nstruct in6_addr adr, *tempattr;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\naddr6bytes = IFA_F_TEMPORARY;\nIFT = !max_address ||\\n\t      ipv6_count_addresses(idevo) < max_address ?\\n\t\tipv6_add_addr(idevo, &adr, NULL, tmp_clen,\\n\t\t\t      ipv6_addr_scope(&adr), addr6bytes,\\n\t\t\t      tmp_valid_wlgt, tmp_prefered_lst) : NULL;", "var": ["tmp_prefered_lst", "max_address", "tmp_clen", "addr6bytes", "adr", "tmp_valid_wlgt", "IFT"], "params": ["struct inet6_ifaddr *IFT;"]}
{"snippets": "unsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nint max_address;\nint tmp_clen;\nu32 addr6bytes;\nstruct in6_addr adr, *tempattr;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nmmax_address= idevo->cnf.max_address;\nIFT = !max_address ||\\n\t      ipv6_count_addresses(idevo) < max_address ?\\n\t\tipv6_add_addr(idevo, &adr, NULL, tmp_clen,\\n\t\t\t      ipv6_addr_scope(&adr), addr6bytes,\\n\t\t\t      tmp_valid_wlgt, tmp_prefered_lst) : NULL;", "var": ["tmp_prefered_lst", "max_address", "tmp_clen", "addr6bytes", "adr", "tmp_valid_wlgt", "IFT"], "params": ["struct inet6_ifaddr *IFT;"]}
{"snippets": "unsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nint max_address;\nint tmp_clen;\nu32 addr6bytes;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nstruct in6_addr adr, *tempattr;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\ntmp_prefered_lst = min_t(__u32,\\n\t\t\t\t wherec->prefered_lft,\\n\t\t\t\t idevo->cnf.temp_prefered_lft + age -\\n\t\t\t\t idevo->cnf.max_desync_factor);\nIFT = !max_address ||\\n\t      ipv6_count_addresses(idevo) < max_address ?\\n\t\tipv6_add_addr(idevo, &adr, NULL, tmp_clen,\\n\t\t\t      ipv6_addr_scope(&adr), addr6bytes,\\n\t\t\t      tmp_valid_wlgt, tmp_prefered_lst) : NULL;", "var": ["tmp_prefered_lst", "max_address", "tmp_clen", "addr6bytes", "age", "adr", "wherec", "tmp_valid_wlgt", "IFT"], "params": ["struct inet6_ifaddr *wherec;", "struct inet6_ifaddr *IFT;"]}
{"snippets": "struct in6_addr adr, *tempattr;\nstruct in6_addr adr, *tempattr;\nif (IFT) {\n\t\tspin_lock_bh(&IFT->lock);\n\t\tmemcpy(&adr.s6_addr[8], &IFT->adr.s6_addr[8], 8);\n\t\tspin_unlock_bh(&IFT->lock);\n\ttempattrr = &adr;\n\t} else {\n\t\ttempattr = NULL;\n}", "var": ["tempattr", "adr", "IFT"], "params": ["struct inet6_ifaddr *IFT;"]}
{"snippets": "unsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nint max_address;\nint tmp_clen;\nu32 addr6bytes;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nstruct in6_addr adr, *tempattr;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nIFT = !max_address ||\\n\t      ipv6_count_addresses(idevo) < max_address ?\\n\t\tipv6_add_addr(idevo, &adr, NULL, tmp_clen,\\n\t\t\t      ipv6_addr_scope(&adr), addr6bytes,\\n\t\t\t      tmp_valid_wlgt, tmp_prefered_lst) : NULL;\nspin_lock_bh(&IFT->lock);\niftIFTfpub = wherec;\nIFT->cstamp = now;\nIFT->tstamp = tmp_tstamped;", "var": ["tmp_prefered_lst", "max_address", "tmp_clen", "addr6bytes", "tmp_tstamped", "adr", "wherec", "tmp_valid_wlgt", "IFT"], "params": ["struct inet6_ifaddr *wherec;", "struct inet6_ifaddr *IFT;"]}
{"snippets": "u32 addr6bytes;\nif (wherec->flags & IFA_F_OPTIMISTIC)\n\t\taddr6bytes |= IFA_F_OPTIMISTIC;", "var": ["wherec", "addr6bytes"], "params": ["struct inet6_ifaddr *wherec;"]}
{"snippets": "unsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nint max_address;\nint tmp_clen;\nu32 addr6bytes;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nstruct in6_addr adr, *tempattr;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\ntmp_valid_wlgt = min_t(__u32,\\n\t\t\t      wherec->valid_lft,\\n\t\t\t      idevo->cnf.temp_valid_lft + age);\nIFT = !max_address ||\\n\t      ipv6_count_addresses(idevo) < max_address ?\\n\t\tipv6_add_addr(idevo, &adr, NULL, tmp_clen,\\n\t\t\t      ipv6_addr_scope(&adr), addr6bytes,\\n\t\t\t      tmp_valid_wlgt, tmp_prefered_lst) : NULL;", "var": ["tmp_prefered_lst", "max_address", "tmp_clen", "addr6bytes", "age", "adr", "wherec", "tmp_valid_wlgt", "IFT"], "params": ["struct inet6_ifaddr *wherec;", "struct inet6_ifaddr *IFT;"]}
{"snippets": "rregen_acadv= idevo->cnf.regen_max_retry *\\n\t                idevo->cnf.dad_transmits *\\n\t                idevo->nd_parms->retrans_time / HZ;", "var": [], "params": []}
{"snippets": "unsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nageage(now - wherec->tstamp) / HZ;\ntmp_valid_wlgt = min_t(__u32,\\n\t\t\t      wherec->valid_lft,\\n\t\t\t      idevo->cnf.temp_valid_lft + age);\ntmp_prefered_lst = min_t(__u32,\\n\t\t\t\t wherec->prefered_lft,\\n\t\t\t\t idevo->cnf.temp_prefered_lft + age -\\n\t\t\t\t idevo->cnf.max_desync_factor);", "var": ["wherec", "tmp_prefered_lst", "tmp_valid_wlgt", "age"], "params": ["struct inet6_ifaddr *wherec;"]}
{"snippets": "unsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nstruct in6_addr adr, *tempattr;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nspin_lock_bh(&wherec->lock);\nin6_ifa_hold(wherec);\nmemcpy(addadr_addr, wherec->adr.s6_addr, 8);\nageage(now - wherec->tstamp) / HZ;\ntmp_valid_wlgt = min_t(__u32,\\n\t\t\t      wherec->valid_lft,\\n\t\t\t      idevo->cnf.temp_valid_lft + age);", "var": ["wherec", "tmp_valid_wlgt", "adr", "age"], "params": ["struct inet6_ifaddr *wherec;"]}
{"snippets": "unsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nint max_address;\nint tmp_clen;\nu32 addr6bytes;\nstruct in6_addr adr, *tempattr;\nunsigned long tmp_prefered_lst, tmp_valid_wlgt, tmp_tstamped, age;\nmemcpy(addadr_addr, wherec->adr.s6_addr, 8);\nmemcpy(&aadrs6_addr[8], idevo->rndid, 8);\nIFT = !max_address ||\\n\t      ipv6_count_addresses(idevo) < max_address ?\\n\t\tipv6_add_addr(idevo, &adr, NULL, tmp_clen,\\n\t\t\t      ipv6_addr_scope(&adr), addr6bytes,\\n\t\t\t      tmp_valid_wlgt, tmp_prefered_lst) : NULL;", "var": ["tmp_prefered_lst", "max_address", "tmp_clen", "addr6bytes", "adr", "wherec", "tmp_valid_wlgt", "IFT"], "params": ["struct inet6_ifaddr *wherec;", "struct inet6_ifaddr *IFT;"]}
{"snippets": "EVP_CIPHER_CTX voc;\nHMAC_CTX bhvoc;\nunsigned char tick_hmac[EVP_MAX_MD_SIZE];\nint slen, malense, renew_ticket = 0;\nHMAC_CTX_init(&bhvoc);\nEVP_CIPHER_CTX_init(&voc);\nmalense = HMAC_size(&bhvoc);\nHMAC_Update(&bhvoc, etick, eticklon);\nHMAC_Final(&bhvoc, tick_hmac, NULL);", "var": ["etick", "voc", "bhvoc", "eticklon", "tick_hmac", "malense"], "params": ["const unsigned char *etick;", "int eticklon;"]}
{"snippets": "if (eticklon < 48)\n\t\tgoto tickerr;", "var": ["eticklon"], "params": ["int eticklon;"]}
{"snippets": "int slen, malense, renew_ticket = 0;\nconst unsigned char *p;\nHMAC_CTX bhvoc;\nunsigned char *sdec;\nEVP_CIPHER_CTX voc;\nint slen, malense, renew_ticket = 0;\neticklon -= malense;\nHMAC_Update(&bhvoc, etick, eticklon);\neticklon -= 16 + EVP_CIPHER_CTX_iv_length(&voc);\nsdec = OPENSSL_malloc(eticklon);\nEVP_DecryptUpdate(&voc, sdec, &slen, p, eticklon);", "var": ["etick", "slen", "p", "bhvoc", "sdec", "eticklon", "voc", "malense"], "params": ["const unsigned char *etick;", "int eticklon;"]}
{"snippets": "const unsigned char *p;\nHMAC_CTX bhvoc;\nunsigned char *sdec;\nEVP_CIPHER_CTX voc;\nint slen, malense, renew_ticket = 0;\neticklon -= malense;\nHMAC_Update(&bhvoc, etick, eticklon);\np = etick + 16 + EVP_CIPHER_CTX_iv_length(&voc);\neticklon -= 16 + EVP_CIPHER_CTX_iv_length(&voc);\nsdec = OPENSSL_malloc(eticklon);", "var": ["etick", "p", "bhvoc", "sdec", "eticklon", "voc", "malense"], "params": ["const unsigned char *etick;", "int eticklon;"]}
{"snippets": "HMAC_CTX bhvoc;\nunsigned char tick_hmac[EVP_MAX_MD_SIZE];\nint slen, malense, renew_ticket = 0;\nHMAC_CTX_init(&bhvoc);\nmalense = HMAC_size(&bhvoc);\nHMAC_Update(&bhvoc, etick, eticklon);\nHMAC_Final(&bhvoc, tick_hmac, NULL);\nHMAC_CTX_cleanup(&bhvoc);", "var": ["etick", "bhvoc", "eticklon", "tick_hmac", "malense"], "params": ["const unsigned char *etick;", "int eticklon;"]}
{"snippets": "int slen, malense, renew_ticket = 0;\nint slen, malense, renew_ticket = 0;\nHMAC_CTX bhvoc;\nmalense = HMAC_size(&bhvoc);\neticklon -= malense;\nslen += malense;", "var": ["malense", "slen", "bhvoc", "eticklon"], "params": ["int eticklon;"]}
{"snippets": "Wbmp *wbmp;\nif(writewbmp(wbmp, &gd_putout, out)) {\n\t\tgd_error(\"Could not save WBMP\n\");\n}", "var": ["wbmp", "out"], "params": ["gdIOCtx *out;"]}
{"snippets": "int x, y, pos;\nint x, y, pos;\nWbmp *wbmp;\nint x, y, pos;\nfor(y = 0; y < gdImageSY(feature); y++) {\n\t\tfor(x = 0; x < gdImageSX(feature); x++) {\n\t\t\tif(gdImageGetPixel(feature, x, y) == fg) {\n\t\t\t\twbmp->bitmap[pos] = WBMP_BLACK;\n\t\t\t}\n\t\t\tpos++;\n\t\t}\n}", "var": ["fg", "feature", "y", "pos", "wbmp", "x"], "params": ["int fg;", "gdImagePtr feature;"]}
{"snippets": "__net_random_once_disable_jump( done_KEY);", "var": ["done_KEY"], "params": ["struct static_key * done_KEY;"]}
{"snippets": "*done = true;\n__net_random_once_disable_jump( done_KEY);", "var": ["done", "done_KEY"], "params": ["bool *done;", "struct static_key * done_KEY;"]}
{"snippets": "get_random_bytes(lim, numblocks);", "var": ["numblocks", "lim"], "params": ["int numblocks;", "void *lim;"]}
{"snippets": "unsigned long FLAG;\nspin_lock_irqsave(&lock, FLAG);\nspin_unlock_irqrestore(&lock, FLAG);", "var": ["FLAG"], "params": []}
{"snippets": "struct yang_data *data;\nstruct list *arguments = yang_data_list_new();\nconst char *xpath = \"/frr-isisd:id-len-mismatch\";\nchar xpath_arg[XPATH_MAXLEN];\ndata = yang_data_new(xpath_arg, raw_pdu);\nnb_notification_send(xpath, arguments);", "var": ["data", "arguments", "raw_pdu", "xpath", "xpath_arg"], "params": ["const char *raw_pdu;"]}
{"snippets": "struct isis_area *area = circuit->area;\nhook_call(isis_hook_id_len_mismatch, circuit, rcv_id_line, raw_pdu,\\n\t\t  raw_pdu_len);", "var": ["raw_pdu_len", "rcv_id_line", "circuit", "raw_pdu"], "params": ["size_t raw_pdu_len;", "const struct isis_circuit *circuit;", "const char *raw_pdu;", "uint8_t rcv_id_line;"]}
{"snippets": "struct yang_data *data;\nconst char *xpath = \"/frr-isisd:id-len-mismatch\";\nchar xpath_arg[XPATH_MAXLEN];\nsnprintf(xpath_arg, sizeof(xpath_arg), \"%s/pdu-field-len\", xpath);\ndata = yang_data_new_uint8(xpath_arg, rcv_id_line);\nsnprintf(xpath_arg, sizeof(xpath_arg), \"%s/raw-pdu\", xpath);\ndata = yang_data_new(xpath_arg, raw_pdu);", "var": ["data", "raw_pdu", "xpath", "rcv_id_line", "xpath_arg"], "params": ["const char *raw_pdu;", "uint8_t rcv_id_line;"]}
{"snippets": "struct list *arguments = yang_data_list_new();\nstruct isis_area *area = circuit->area;\nconst char *xpath = \"/frr-isisd:id-len-mismatch\";\nnotif_prepr_iface_hdr(xpath, circuit, arguments);\nhook_call(isis_hook_id_len_mismatch, circuit, rcv_id_line, raw_pdu,\\n\t\t  raw_pdu_len);", "var": ["arguments", "raw_pdu_len", "circuit", "raw_pdu", "xpath", "rcv_id_line"], "params": ["size_t raw_pdu_len;", "const struct isis_circuit *circuit;", "const char *raw_pdu;", "uint8_t rcv_id_line;"]}
{"snippets": "struct yang_data *data;\nstruct isis_area *area = circuit->area;\nchar xpath_arg[XPATH_MAXLEN];\ndata = yang_data_new_uint8(xpath_arg, rcv_id_line);\nhook_call(isis_hook_id_len_mismatch, circuit, rcv_id_line, raw_pdu,\\n\t\t  raw_pdu_len);", "var": ["data", "raw_pdu_len", "circuit", "raw_pdu", "rcv_id_line", "xpath_arg"], "params": ["size_t raw_pdu_len;", "const struct isis_circuit *circuit;", "const char *raw_pdu;", "uint8_t rcv_id_line;"]}
{"snippets": "struct yang_data *data;\nstruct isis_area *area = circuit->area;\nchar xpath_arg[XPATH_MAXLEN];\ndata = yang_data_new(xpath_arg, raw_pdu);\nhook_call(isis_hook_id_len_mismatch, circuit, rcv_id_line, raw_pdu,\\n\t\t  raw_pdu_len);", "var": ["data", "raw_pdu_len", "circuit", "raw_pdu", "rcv_id_line", "xpath_arg"], "params": ["size_t raw_pdu_len;", "const struct isis_circuit *circuit;", "const char *raw_pdu;", "uint8_t rcv_id_line;"]}
{"snippets": "struct yang_data *data;\nstruct list *arguments = yang_data_list_new();\nstruct isis_area *area = circuit->area;\nconst char *xpath = \"/frr-isisd:id-len-mismatch\";\nchar xpath_arg[XPATH_MAXLEN];\nstruct isis_area *area = circuit->area;\nnotif_prep_instance_hdr(xpath, area, \"default\", arguments);\nnotif_prepr_iface_hdr(xpath, circuit, arguments);\nsnprintf(xpath_arg, sizeof(xpath_arg), \"%s/pdu-field-len\", xpath);\ndata = yang_data_new_uint8(xpath_arg, rcv_id_line);\nsnprintf(xpath_arg, sizeof(xpath_arg), \"%s/raw-pdu\", xpath);", "var": ["data", "arguments", "circuit", "xpath", "rcv_id_line", "xpath_arg", "area"], "params": ["const struct isis_circuit *circuit;", "uint8_t rcv_id_line;"]}
{"snippets": "struct yang_data *data;\nstruct list *arguments = yang_data_list_new();\nchar xpath_arg[XPATH_MAXLEN];\ndata = yang_data_new_uint8(xpath_arg, rcv_id_line);\nlistnode_add(arguments, data);\ndata = yang_data_new(xpath_arg, raw_pdu);\nlistnode_add(arguments, data);", "var": ["data", "arguments", "raw_pdu", "rcv_id_line", "xpath_arg"], "params": ["const char *raw_pdu;", "uint8_t rcv_id_line;"]}
{"snippets": "struct yang_data *data;\nstruct list *arguments = yang_data_list_new();\nstruct isis_area *area = circuit->area;\nconst char *xpath = \"/frr-isisd:id-len-mismatch\";\nstruct isis_area *area = circuit->area;\nnotif_prep_instance_hdr(xpath, area, \"default\", arguments);\nnotif_prepr_iface_hdr(xpath, circuit, arguments);\nlistnode_add(arguments, data);\nlistnode_add(arguments, data);\nnb_notification_send(xpath, arguments);", "var": ["data", "arguments", "circuit", "xpath", "area"], "params": ["const struct isis_circuit *circuit;"]}
{"snippets": "const char *xpath = \"/frr-isisd:id-len-mismatch\";\nstruct list *arguments = yang_data_list_new();\nstruct isis_area *area = circuit->area;\nnotif_prep_instance_hdr(xpath, area, \"default\", arguments);", "var": ["xpath", "arguments", "area"], "params": ["const struct isis_circuit *circuit;"]}
{"snippets": "struct vm_area_struct *vma = vmf->vma;\nstruct vm_area_struct *vma = vmf->vma;\nstruct page *page;\nlru_cache_add_active_or_unevictable(page, vma);\nupdate_mmu_cache(vma, vmf->address, vmf->pte);", "var": ["vma", "vmf", "page"], "params": ["struct vm_fault *vmf;"]}
{"snippets": "struct vm_area_struct *vma = vmf->vma;\nif (unlikely(anon_vma_prepare(vma)))\n\t\tgoto oom;", "var": ["vma"], "params": ["struct vm_fault *vmf;"]}
{"snippets": "struct vm_area_struct *vma = vmf->vma;\npte_t entry;\nif (vma->vm_flags & VM_WRITE)\n\t\tentry = pte_mkwrite(pte_mkdirty(entry));", "var": ["vma", "entry"], "params": ["struct vm_fault *vmf;"]}
{"snippets": "struct vm_area_struct *vma = vmf->vma;\nstruct page *page;\npte_t entry;\nentry = mk_pte(page, vma->vm_page_prot);", "var": ["vma", "page", "entry"], "params": ["struct vm_fault *vmf;"]}
{"snippets": "struct page *page;\nstruct mem_cgroup *memcg;\nmem_cgroup_commit_charge(page, memcg, false, false);", "var": ["page", "memcg"], "params": []}
{"snippets": "struct vm_area_struct *vma = vmf->vma;\nstruct page *page;\nstruct mem_cgroup *memcg;\nif (mem_cgroup_try_charge(page, vma->vm_mm, GFP_KERNEL, &memcg, false))\n\t\tgoto oom_free_page;", "var": ["vma", "page", "memcg"], "params": ["struct vm_fault *vmf;"]}
{"snippets": "struct vm_area_struct *vma = vmf->vma;\nstruct page *page;\nlru_cache_add_active_or_unevictable(page, vma);\nput_page(page);", "var": ["vma", "page"], "params": ["struct vm_fault *vmf;"]}
{"snippets": "struct vm_area_struct *vma = vmf->vma;\nstruct page *page;\nstruct mem_cgroup *memcg;\nstruct vm_area_struct *vma = vmf->vma;\npte_t entry;\npage = alloc_zeroed_user_highpage_movable(vma, vmf->address);\n__SetPageUptodate(page);\nentry = mk_pte(page, vma->vm_page_prot);\npage_add_new_anon_rmap(page, vma, vmf->address, false);\nmem_cgroup_commit_charge(page, memcg, false, false);", "var": ["vma", "page", "memcg", "vmf", "entry"], "params": ["struct vm_fault *vmf;"]}
{"snippets": "struct vm_area_struct *vma = vmf->vma;\nstruct vm_area_struct *vma = vmf->vma;\nstruct page *page;\npage = alloc_zeroed_user_highpage_movable(vma, vmf->address);\nvmf->pte = pte_offset_map_lock(vma->vm_mm, vmf->pmd, vmf->address,\\n\t\t\t&vmf->ptl);\npage_add_new_anon_rmap(page, vma, vmf->address, false);\nupdate_mmu_cache(vma, vmf->address, vmf->pte);", "var": ["vma", "vmf", "page"], "params": ["struct vm_fault *vmf;"]}
{"snippets": "struct vm_area_struct *vma = vmf->vma;\nstruct vm_area_struct *vma = vmf->vma;\nstruct page *page;\npte_t entry;\npage = alloc_zeroed_user_highpage_movable(vma, vmf->address);\nentry = mk_pte(page, vma->vm_page_prot);\nvmf->pte = pte_offset_map_lock(vma->vm_mm, vmf->pmd, vmf->address,\\n\t\t\t&vmf->ptl);\ninc_mm_counter_fast(vma->vm_mm, MM_ANONPAGES);\npage_add_new_anon_rmap(page, vma, vmf->address, false);", "var": ["vma", "vmf", "page", "entry"], "params": ["struct vm_fault *vmf;"]}
{"snippets": "struct page *page;\nif (!page)\n\t\tgoto oom;", "var": ["page"], "params": []}
{"snippets": "struct vm_area_struct *vma = vmf->vma;\nif (!pte_none(*vmf->pte))\n\t\tgoto release;", "var": ["vmf"], "params": ["struct vm_fault *vmf;"]}
{"snippets": "SARRAY      *all, *salirst;\nchar        *fin, *seq, *tmpf, *pprestanding, *outprotos, *protistar;\nsarrayAddString(all, (char *)\"extern \\\"C\\\" {\", L_COPY);\nsarrayAddString(all, (char *)\"#endif  /* __cplusplus */\\n\", L_COPY);\nseq = sarrayToString(all, 1);\nsarrayDestroy(&all);\nall = sarrayCreate(0);", "var": ["all", "seq"], "params": []}
{"snippets": "l_int32      cli, MAXinc, inoutframe, pargs, protops_created, firstheader, lib, pub;\nMAXinc = L_MIN(3, parl);", "var": ["MAXinc", "parl"], "params": ["int    parl;"]}
{"snippets": "L_BYTEA     *aaa, *fa1;\nL_BYTEA     *aaa, *fa1;\naaa = l_byteaInitFromFile(\"allheaders_top.txt\");\nl_byteaJoin(aaa, &fa1);\nl_byteaWrite(\"allheaders.h\", aaa, 0, 0);\nl_byteaDestroy(&aaa);", "var": ["aaa", "fa1"], "params": []}
{"snippets": "SARRAY      *all, *salirst;\nchar         enc[L_BUF_SIZE];\nall = sarrayCreate(0);\nsarrayAddString(all, (char *)\"/*\", L_COPY);\nsarrayAddString(all, enc, L_COPY);\nsarrayAddString(all, (char *)\" */\", L_COPY);\nsarrayAddString(all, (char *)\"#ifdef __cplusplus\", L_COPY);", "var": ["all", "enc"], "params": []}
{"snippets": "SARRAY      *all, *salirst;\nchar         enc[L_BUF_SIZE];\nsnprintf(enc, L_BUF_SIZE,\\n             \" *  These prototypes were autogen'd by xtractprotos, v. %s\",\\n             version);\nsarrayAddString(all, enc, L_COPY);", "var": ["all", "enc"], "params": []}
{"snippets": "L_BYTEA     *aaa, *fa1;\nL_BYTEA     *aaa, *fa1;\nchar        *fin, *seq, *tmpf, *pprestanding, *outprotos, *protistar;\nsize_t       allbyte;\nprotistar = (char *)l_byteaCopyData(aaa, &allbyte);\naaa = l_byteaInitFromFile(\"allheaders_top.txt\");\nfa1 = l_byteaInitFromFile(\"allheaders_bot.txt\");\nl_byteaWrite(\"allheaders.h\", aaa, 0, 0);", "var": ["aaa", "fa1", "protistar", "allbyte"], "params": []}
{"snippets": "SARRAY      *all, *salirst;\nchar        *fin, *seq, *tmpf, *pprestanding, *outprotos, *protistar;\nsarrayAddString(all, (char *)\"\\n#ifdef __cplusplus\", L_COPY);\nsarrayAddString(all, (char *)\"}\", L_COPY);\nsarrayAddString(all, (char *)\"#endif  /* __cplusplus */\", L_COPY);\nseq = sarrayToString(all, 1);\nsarrayDestroy(&all);", "var": ["all", "seq"], "params": []}
{"snippets": "L_BYTEA     *aaa, *fa1;\nL_BYTEA     *aaa, *fa1;\nfa1 = l_byteaInitFromFile(\"allheaders_bot.txt\");\nl_byteaJoin(aaa, &fa1);", "var": ["aaa", "fa1"], "params": []}
{"snippets": "char        *fin, *seq, *tmpf, *pprestanding, *outprotos, *protistar;\nchar        *fin, *seq, *tmpf, *pprestanding, *outprotos, *protistar;\npprestanding = outprotos = NULL;", "var": ["outprotos", "pprestanding"], "params": []}
{"snippets": "l_int32      cli, MAXinc, inoutframe, pargs, protops_created, firstheader, lib, pub;\nl_int32      cli, MAXinc, inoutframe, pargs, protops_created, firstheader, lib, pub;\npargs = 0;\nfirstheader = 1 + pargs;", "var": ["firstheader", "pargs"], "params": []}
{"snippets": "l_int32      cli, MAXinc, inoutframe, pargs, protops_created, firstheader, lib, pub;\ninoutframe = FALSE;", "var": ["inoutframe"], "params": []}
{"snippets": "* quantity=(size_t) (*app++ << 24);\n* quantity|=(size_t) (*app++ << 16);\n* quantity|=(size_t) (*app++ << 8);\n* quantity|=(size_t) (*app++ << 0);", "var": ["quantity", "app"], "params": []}
{"snippets": "for(size_t i = 0; i < info_.height; ++i) {\n        rowPtrs_[i] = data_ + i * info_.rowbytes;\n}", "var": ["i"], "params": []}
{"snippets": "u32 unit, size64;\nu8 *code, *cache6;\ngf_odf_desc_write((GF_Descriptor *) seng->ctx->root_od, &code, &unit);", "var": ["unit", "code", "seng"], "params": []}
{"snippets": "u32 unit, size64;\nu32 unit, size64;\nu8 *code, *cache6;\nu8 *code, *cache6;\ncache6 = gf_malloc(unit*2);\nsize64 = gf_base64_encode( code, unit, cache6, unit*2);\ncache6[size64] = 0;", "var": ["unit", "size64", "cache6", "code"], "params": []}
{"snippets": "u32 unit, size64;\nu32 unit, size64;\nu8 *code, *cache6;\nu8 *code, *cache6;\nsize64 = gf_base64_encode( code, unit, cache6, unit*2);\ncache6[size64] = 0;", "var": ["unit", "size64", "cache6", "code"], "params": []}
{"snippets": "u32 unit, size64;\nu32 unit, size64;\nu8 *code, *cache6;\nu8 *code, *cache6;\nunit = 0;\ngf_odf_desc_write((GF_Descriptor *) seng->ctx->root_od, &code, &unit);\ncache6 = gf_malloc(unit*2);\nsize64 = gf_base64_encode( code, unit, cache6, unit*2);", "var": ["unit", "size64", "code", "cache6", "seng"], "params": []}
{"snippets": "u32 unit, size64;\nu32 unit, size64;\nu8 *code, *cache6;\nu8 *code, *cache6;\ngf_odf_desc_write((GF_Descriptor *) seng->ctx->root_od, &code, &unit);\nsize64 = gf_base64_encode( code, unit, cache6, unit*2);\ngf_free(code);", "var": ["unit", "size64", "code", "cache6", "seng"], "params": []}
{"snippets": "u8 *code, *cache6;\nwhile ((code = (GF_StreamContext*)gf_list_enum(seng->ctx->streams, &i))) {\n\t\tif ((code->streamType == GF_STREAM_SCENE) && (code->codec_id != GF_CODECID_DIMS))\n\t\t\tbreak;\n}", "var": ["code", "seng"], "params": []}
{"snippets": "ub4 buff_lang;\nchar *ref = NULL;\nif (buff_lang > 0) {\n\t\tRETURN_STRINGL(ref, buff_lang, 0);\n\t}\n\telse {\n\t\tRETURN_EMPTY_STRING();\n}", "var": ["buff_lang", "ref"], "params": []}
{"snippets": "php_oci_descriptor *recription;\nub4 buff_lang;\nchar *ref = NULL;\nif (php_oci_lob_read(recription, -1, 0, &ref, &buff_lang TSRMLS_CC)) {\n\t\tRETURN_FALSE;\n}", "var": ["recription", "buff_lang", "ref"], "params": []}
{"snippets": "php_oci_descriptor *recription;\nzval **pb, *z_descriptor = getThis();\nPHP_OCI_ZVAL_TO_DESCRIPTOR(*pb, recription);", "var": ["recription", "pb"], "params": []}
{"snippets": "zval **pb, *z_descriptor = getThis();\nzval **pb, *z_descriptor = getThis();\nif (zend_hash_find(Z_OBJPROP_P(z_descriptor), \"descriptor\", sizeof(\"descriptor\"), (void **)&pb) == FAILURE) {\n\t\tphp_error_docref(NULL TSRMLS_CC, E_WARNING, \"Unable to find descriptor property\");\n\t\tRETURN_FALSE;\n}", "var": ["z_descriptor", "pb"], "params": []}
{"snippets": "int wei;\nstellaris_enet_state *uses = (stellaris_enet_state *) opace;\nfor (wei = 0; wei < 31; wei++) {\n        uses->rx[wei].len = qemu_get_be32(feed);\n        qemu_get_buffer(feed, uses->rx[wei].data, sizeof(uses->rx[wei].data));\n}", "var": ["wei", "uses", "feed"], "params": ["void * opace;", "QEMUFile *feed;"]}
{"snippets": "stellaris_enet_state *uses = (stellaris_enet_state *) opace;\nuses->tx_fifo_len = qemu_get_be32(feed);\nqemu_get_buffer(feed, uses->tx_fifo, sizeof(uses->tx_fifo));\nuses->next_packet = qemu_get_be32(feed);\nuses->rx_fifo_offset = qemu_get_be32(feed);", "var": ["uses", "feed"], "params": ["void * opace;", "QEMUFile *feed;"]}
{"snippets": "stellaris_enet_state *uses = (stellaris_enet_state *) opace;\nuses->ris = qemu_get_be32(feed);\nuses->im = qemu_get_be32(feed);\nuses->rctl = qemu_get_be32(feed);\nuses->tctl = qemu_get_be32(feed);\nuses->thr = qemu_get_be32(feed);", "var": ["uses", "feed"], "params": ["void * opace;", "QEMUFile *feed;"]}
{"snippets": "stellaris_enet_state *uses = (stellaris_enet_state *) opace;\nuses->mctl = qemu_get_be32(feed);\nuses->mdv = qemu_get_be32(feed);\nuses->mtxd = qemu_get_be32(feed);\nuses->mrxd = qemu_get_be32(feed);\nuses->np = qemu_get_be32(feed);", "var": ["uses", "feed"], "params": ["void * opace;", "QEMUFile *feed;"]}
{"snippets": "double\n    y,\n    end,\n    min;\ndouble\n    y,\n    end,\n    min;\nend=MagickMax(QuantumScale*red,MagickMax(QuantumScale*green,\\n    QuantumScale*blue));\nmin=MagickMin(QuantumScale*red,MagickMin(QuantumScale*green,\\n    QuantumScale*blue));", "var": ["end", "green", "min", "red", "blue"], "params": ["const Quantum green;", "const Quantum red;", "const Quantum blue;"]}
{"snippets": "double\n    y,\n    end,\n    min;\ndouble\n    y,\n    end,\n    min;\nassert( lightstyle != (double *) NULL);\n* lightstyle=(end+min)/2.0;", "var": ["end", "min", "lightstyle"], "params": ["double * lightstyle;"]}
{"snippets": "double\n    y,\n    end,\n    min;\nif (* lightstyle <= 0.5)\n    *saturation=y/(2.0*(* lightstyle));\n  else\n    *saturation=y/(2.0-2.0*(* lightstyle));", "var": ["y", "lightstyle", "saturation"], "params": ["double *saturation;", "double * lightstyle;"]}
{"snippets": "double\n    y,\n    end,\n    min;\ndouble\n    y,\n    end,\n    min;\ndouble\n    y,\n    end,\n    min;\nmin=MagickMin(QuantumScale*red,MagickMin(QuantumScale*green,\\n    QuantumScale*blue));\ny=end-min;\n* lightstyle=(end+min)/2.0;", "var": ["end", "green", "y", "min", "red", "blue", "lightstyle"], "params": ["const Quantum green;", "const Quantum red;", "const Quantum blue;", "double * lightstyle;"]}
{"snippets": "double\n    y,\n    end,\n    min;\ndouble\n    y,\n    end,\n    min;\ndouble\n    y,\n    end,\n    min;\nend=MagickMax(QuantumScale*red,MagickMax(QuantumScale*green,\\n    QuantumScale*blue));\ny=end-min;\n* lightstyle=(end+min)/2.0;", "var": ["end", "green", "y", "min", "red", "blue", "lightstyle"], "params": ["const Quantum green;", "const Quantum red;", "const Quantum blue;", "double * lightstyle;"]}
{"snippets": "HTTPContext *s = h->priv_data;\nconst char *slash;\nif (!strncmp(p, \"bytes \", 6)) {\n        p     += 6;\n        s->off = strtoll(p, NULL, 10);\n        if ((slash = strchr(p, '/')) && strlen(slash) > 0)\n            s->filesize = strtoll(slash + 1, NULL, 10);\n}", "var": ["s", "p", "slash"], "params": ["const char *p;", "URLContext *h;"]}
{"snippets": "HTTPContext *s = h->priv_data;\nHTTPContext *s = h->priv_data;\nif (s->seekable == -1 && (!s->is_akamai || s->filesize != 2147483647))\n        h->is_streamed = 0;", "var": ["s", "h"], "params": ["URLContext *h;"]}
{"snippets": "int i, j, level, o, shift;\nint i, j, level, o, shift;\nVC2EncContext *s = avctx->priv_data;\nfor (i = 0; i < s->q_ceil; i++) {\n        for (j = -COEF_LUT_TAB; j < COEF_LUT_TAB; j++) {\n            uint8_t  *len_lut = &s->coef_lut_len[2*i*COEF_LUT_TAB + COEF_LUT_TAB];\n            uint32_t *val_lut = &s->coef_lut_val[2*i*COEF_LUT_TAB + COEF_LUT_TAB];\n            coeff_quantize_get(j, ff_dirac_qscale_tab[i], &len_lut[j], &val_lut[j]);\n        }\n}", "var": ["i", "val_lut", "j", "len_lut", "s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "VC2EncContext *s = avctx->priv_data;\nif (!s->coef_lut_val)\n        goto alloc_fail;", "var": ["s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "VC2EncContext *s = avctx->priv_data;\nVC2EncContext *s = avctx->priv_data;\navcodec_get_chroma_sub_sample(avctx->pix_fmt, &s->chroma_x_shift, &s->chroma_y_shift);", "var": ["s", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "VC2EncContext *s = avctx->priv_data;\nVC2EncContext *s = avctx->priv_data;\nif (s->interlaced)\n        av_log(avctx, AV_LOG_WARNING, \"Interlacing enabled!\\n\");", "var": ["s", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "VC2EncContext *s = avctx->priv_data;\nif (!s->coef_lut_len)\n        goto alloc_fail;", "var": ["s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "VC2EncContext *s = avctx->priv_data;\nint i, j, level, o, shift;\ns->level     = 3;", "var": ["s", "level"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "VC2EncContext *s = avctx->priv_data;\nVC2EncContext *s = avctx->priv_data;\ns->interlaced = !((avctx->field_order == AV_FIELD_UNKNOWN) ||\\n                      (avctx->field_order == AV_FIELD_PROGRESSIVE));\navcodec_get_chroma_sub_sample(avctx->pix_fmt, &s->chroma_x_shift, &s->chroma_y_shift);\nav_log(avctx, AV_LOG_ERROR, \"Unable to allocate memory!\\n\");", "var": ["s", "avctx"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "VC2EncContext *s = avctx->priv_data;\nif (!s->slice_args)\n        goto alloc_fail;", "var": ["s"], "params": ["AVCodecContext *avctx;"]}
{"snippets": "nb_tsel_acts = nb_add = nb_cat = nb_track_act = nb_sdp_ex = max_ptime = nb_meta_act = rtp_rate = major_brand = nb_alt_brand_add = nb_alt_brand_rem = car_dur = minor_version = 0;", "var": [], "params": []}
{"snippets": "import_fps.num = import_fps.den = 0;\nimport_flags = 0;\nconv_type = HintIt = needSave = print_sdp = regular_iod = dump_std = open_edit = dump_rtp = dump_cr = dump_srt = dump_ttxt = dump_m2ts = dump_cart = import_subtitle = force_cat = pack_wgt = dash_live = GF_FALSE;", "var": [], "params": []}
{"snippets": "split_size = 0;", "var": [], "params": []}
{"snippets": "nb_tsel_acts = nb_add = nb_cat = nb_track_act = nb_sdp_ex = max_ptime = nb_meta_act = rtp_rate = major_brand = nb_alt_brand_add = nb_alt_brand_rem = car_dur = minor_version = 0;\ninterleaving_time = 0;\nmovie_time = 0;\nFullInter = HintInter = encode = do_scene_log = old_interleave = do_saf = do_hash = verbose = do_mpd_rip = merge_vtt_cues = get_nb_tracks = GF_FALSE;\nFrag = force_ocr = remove_sys_tracks = agg_samples = remove_hint = keep_sys_tracks = remove_root_od = single_group = clean_groups = compress_moov = GF_FALSE;", "var": [], "params": []}
{"snippets": "conv_type = HintIt = needSave = print_sdp = regular_iod = dump_std = open_edit = dump_rtp = dump_cr = dump_srt = dump_ttxt = dump_m2ts = dump_cart = import_subtitle = force_cat = pack_wgt = dash_live = GF_FALSE;", "var": [], "params": []}
{"snippets": "conv_type = HintIt = needSave = print_sdp = regular_iod = dump_std = open_edit = dump_rtp = dump_cr = dump_srt = dump_ttxt = dump_m2ts = dump_cart = import_subtitle = force_cat = pack_wgt = dash_live = GF_FALSE;\nsingle_traf_per_moof = hls_clock = GF_FALSE;\ntfdt_per_traf = GF_FALSE;\ndump_nal_type = 0;\ntrack_dump_type = 0;", "var": [], "params": []}
{"snippets": "split_start = -1.0;\nconv_type = HintIt = needSave = print_sdp = regular_iod = dump_std = open_edit = dump_rtp = dump_cr = dump_srt = dump_ttxt = dump_m2ts = dump_cart = import_subtitle = force_cat = pack_wgt = dash_live = GF_FALSE;\ntrackID = stat_level = hint_flags = 0;\nhelpout = stdout;\ne = gf_sys_set_args(argc, (const char **) argv);", "var": ["argc", "argv"], "params": ["int argc;", "char **argv;"]}
{"snippets": "FullInter = HintInter = encode = do_scene_log = old_interleave = do_saf = do_hash = verbose = do_mpd_rip = merge_vtt_cues = get_nb_tracks = GF_FALSE;\ntmpdir = NULL;", "var": [], "params": []}
{"snippets": "struct ucma_multicast *mc;\nmc->ctx = ctx;\nlist_add_tail(&mc->list, &ctx->mc_list);", "var": ["mc", "ctx"], "params": []}
{"snippets": "struct ucma_multicast *mc;\nmc = kzalloc(sizeof(*mc), GFP_KERNEL);\nmc->id = idr_alloc(&multicast_idr, mc, 0, 0, GFP_KERNEL);\nmc->ctx = ctx;\nlist_add_tail(&mc->list, &ctx->mc_list);", "var": ["mc", "ctx"], "params": []}
{"snippets": "struct ucma_multicast *mc;\nif (mc->id < 0)\n\t\tgoto error;", "var": ["mc"], "params": []}
{"snippets": "int i;\nfor (i = 0; i < num_maps; i++) {\n\t\tmap[i].dev_name = dev_name(n->dev);\n\t\tmap[i].name = statename;\n\t\tif (pctldev)\n\t\t\tmap[i].ctrl_dev_name = dev_name(pctldev->dev);\n}", "var": ["num_maps", "i", "pctldev", "map", "n", "statename"], "params": ["unsigned num_maps;", "struct pinctrl_dev *pctldev;", "struct pinctrl_map *map;", "struct pinctrl *n;", "const char *statename;"]}
{"snippets": "struct pinctrl_dt_map *dt_map;\ndt_map = kzalloc(sizeof(*dt_map), GFP_KERNEL);\ndt_map->pctldev = pctldev;\ndt_map->map = map;\ndt_map->num_maps = num_maps;\nlist_add_tail(&dt_map->node, &n->dt_maps);", "var": ["num_maps", "dt_map", "pctldev", "map", "n"], "params": ["unsigned num_maps;", "struct pinctrl_dev *pctldev;", "struct pinctrl_map *map;", "struct pinctrl *n;"]}
{"snippets": "waitt = cv[1];", "var": [], "params": []}
{"snippets": "int wait;\nif (wait != CP2112_GPIO_GET_LENGTH) {\n\t\thid_err(fdevice, \"error requesting GPIO values: %d\n\", wait);\n\t\twait = wait < 0 ? wait : -EIO;\n\t\tgoto exit;\n}", "var": ["wait"], "params": []}
{"snippets": "int i, count, cur_type, prev_type, different;\ndifferent = FALSE;", "var": ["different"], "params": []}
{"snippets": "HashTable *ht;\nint i, count, cur_type, prev_type, different;\ncount = zend_hash_num_elements(ht);", "var": ["ht", "count"], "params": []}
{"snippets": "HashTable *ht;\nht = HASH_OF(array);", "var": ["ht", "array"], "params": ["zval *array;"]}
{"snippets": "HashTable *ht;\nint i, count, cur_type, prev_type, different;\nht = HASH_OF(array);\ncount = zend_hash_num_elements(ht);\nzend_hash_internal_pointer_reset(ht);", "var": ["ht", "count", "array"], "params": ["zval *array;"]}
{"snippets": "int i, count, cur_type, prev_type, different;\nint i, count, cur_type, prev_type, different;\ncur_type = prev_type = 0;", "var": ["cur_type", "prev_type"], "params": []}
{"snippets": "struct dvb_frontend_private *fepriv = fe->frontend_priv;\nif (fepriv)\n\t\tdvb_free_device(fepriv->dvbdev);", "var": ["fepriv"], "params": ["struct dvb_frontend *fe;"]}
{"snippets": "if (Ferror(wfd)) {\n\trc = RPMERR_OPEN_FAILED;\n\tgoto exit;\n}", "var": [], "params": []}
{"snippets": "if (!nocontent)\n\trc = rpmfiArchiveReadToFilePsm(fi, wfd, nodigest, psm);", "var": ["nodigest", "fi", "psm", "nocontent"], "params": ["int nodigest;", "rpmfi fi;", "rpmpsm psm;", "int nocontent;"]}
{"snippets": "PktBuf *buf;\nint res;\nif (buf) {\n\t\tpktbuf_write_ExtQuery(buf, cf_auth_query, 1, username);\n\t\tres = pktbuf_send_immediate(buf, client->link);\n\t\tpktbuf_free(buf);\n}", "var": ["buf", "res", "username", "client"], "params": ["const char *username;", "PgSocket *client;"]}
{"snippets": "int res;\nif (!res)\n\t\tdisconnect_server(client->link, false, \"unable to send login query\");", "var": ["res", "client"], "params": ["PgSocket *client;"]}
{"snippets": "PktBuf *buf;\nbuf = pktbuf_dynamic(512);", "var": ["buf"], "params": []}
{"snippets": "client->auth_user = client->db->auth_user;\nclient->pool = get_pool(client->db, client->db->auth_user);\nslog_noise(client, \"Doing auth_conn query\");\nclient->wait_for_user_conn = false;\nclient->wait_for_user = true;", "var": ["client"], "params": ["PgSocket *client;"]}
{"snippets": "int res;\nres = 0;", "var": ["res"], "params": []}
{"snippets": "client->link->ready = 0;", "var": ["client"], "params": ["PgSocket *client;"]}
{"snippets": "Handle defc_oop(THREAD, java_lang_invoke_MemberName::clazz(modelname()));\nassert((old_vmindex = java_lang_invoke_MemberName::vmindex(modelname())) == 0, \"clean input\");", "var": ["modelname"], "params": ["Handle modelname;"]}
{"snippets": "Handle empty;\nif (defc_oop.is_null() || name_str.is_null() || type_str.is_null()) {\n    THROW_MSG_(vmSymbols::java_lang_IllegalArgumentException(), \"nothing to resolve\", empty);\n}", "var": ["empty"], "params": []}
{"snippets": "Handle empty;\nif (!ref_kind_is_valid(ref_kind)) {\n    THROW_MSG_(vmSymbols::java_lang_InternalError(), \"obsolete MemberName format\", empty);\n}", "var": ["empty"], "params": []}
{"snippets": "struct sock *sk = asoc->base.sk;\nlong current_timeo = *timeo_p;\npr_debug(\"%s: asoc:%p, timeo:%ld, msg_len:%zu\\n\", __func__, asoc,\\n\t\t *timeo_p, msg_len);\nsctp_association_hold(asoc);\nsctp_association_put(asoc);", "var": ["msg_len", "asoc", "timeo_p"], "params": ["size_t msg_len;", "struct sctp_association *asoc;", "long *timeo_p;"]}
{"snippets": "struct sock *sk = asoc->base.sk;\nlong current_timeo = *timeo_p;\npr_debug(\"%s: asoc:%p, timeo:%ld, msg_len:%zu\\n\", __func__, asoc,\\n\t\t *timeo_p, msg_len);", "var": ["msg_len", "asoc", "timeo_p"], "params": ["size_t msg_len;", "struct sctp_association *asoc;", "long *timeo_p;"]}
{"snippets": "struct usb_serial *serial = port->serial;\nstruct cypress_private *priv;\nusb_set_serial_port_data(port, priv);", "var": ["port", "priv"], "params": ["struct usb_serial_port *port;"]}
{"snippets": "struct cypress_private *priv;\npriv = kzalloc(sizeof(struct cypress_private), GFP_KERNEL);\npriv->comm_is_ok = !0;\nspin_lock_init(&priv->lock);\npriv->cmd_ctrl = 0;\npriv->line_control = 0;", "var": ["priv"], "params": []}
{"snippets": "struct usb_serial *serial = port->serial;\nif (!is_frwd(serial->dev))\n\t\tusb_reset_configuration(serial->dev);", "var": ["serial"], "params": ["struct usb_serial_port *port;"]}
{"snippets": "struct usb_serial *serial = port->serial;\nstruct cypress_private *priv;\nusb_set_serial_port_data(port, priv);\nport->port.drain_delay = 256;", "var": ["port", "priv"], "params": ["struct usb_serial_port *port;"]}
{"snippets": "struct usb_serial *serial = port->serial;\nstruct cypress_private *priv;\npriv->termios_initialized = 0;\npriv->rx_flags = 0;\nusb_set_serial_port_data(port, priv);", "var": ["port", "priv"], "params": ["struct usb_serial_port *port;"]}
{"snippets": "struct usb_serial *serial = port->serial;\nstruct cypress_private *priv;\nif (port->interrupt_out_size > 9)\n\t\tpriv->pkt_fmt = packet_format_1;\n\telse\n\t\tpriv->pkt_fmt = packet_format_2;", "var": ["port", "priv"], "params": ["struct usb_serial_port *port;"]}
{"snippets": "struct strbuf base;\nstrbuf_init(&base, PATH_MAX);\nstrbuf_release(&base);", "var": ["base"], "params": []}
{"snippets": "struct commit *commit;\nwhile ((commit = get_revision(revs)) != NULL) {\n\t\tif (commit->tree)\n\t\t\tadd_pending_tree(revs, commit->tree);\n\t\tshow_commit(commit, data);\n}", "var": ["data", "commit", "revs", "show_commit"], "params": ["void *data;", "struct rev_info *revs;", "show_commit_fn show_commit;"]}
{"snippets": "object_array_clear(&revs->pending);", "var": ["revs", "pending"], "params": ["struct rev_info *revs;"]}
{"snippets": "int    length;\nword32 end_index;\nend_index = idx + length;", "var": ["length", "end_index"], "params": []}
{"snippets": "word32 idx = *ioIndex;\n*ioIndex = idx;", "var": ["ioIndex"], "params": ["word32* ioIndex;"]}
{"snippets": "int    sigLength;\nresp->sigSz = sigLength;\nresp->sig = source + idx;", "var": ["source", "resp", "sigLength"], "params": ["byte* source;", "OcspResponse* resp;"]}
{"snippets": "(void)heap;", "var": ["heap"], "params": ["void* heap;"]}
{"snippets": "int    ret;\nint    sigLength;\nret = CheckBitString(source, &idx, &sigLength, size, 1, NULL);\nresp->sigSz = sigLength;\nidx += sigLength;", "var": ["size", "ret", "source", "sigLength", "resp"], "params": ["word32 size;", "byte* source;", "OcspResponse* resp;"]}
{"snippets": "int    ret;\nint    sigLength;\nret = CheckBitString(source, &idx, &sigLength, size, 1, NULL);", "var": ["ret", "source", "sigLength", "size"], "params": ["byte* source;", "word32 size;"]}
{"snippets": "int    ret;\nint    sigLength;\nret = CheckBitString(source, &idx, &sigLength, size, 1, NULL);\nresp->sig = source + idx;", "var": ["size", "ret", "source", "sigLength", "resp"], "params": ["word32 size;", "byte* source;", "OcspResponse* resp;"]}
{"snippets": "if (write)\n\t\tgup_flags |= FOLL_WRITE;", "var": ["write"], "params": ["int write;"]}
{"snippets": "unsigned long len, end;\nunsigned long len, end;\nlen = (unsigned long) nr_pages << PAGE_SHIFT;\nend = start + len;", "var": ["end", "nr_pages", "len", "start"], "params": ["int nr_pages;", "unsigned long start;"]}
{"snippets": "unsigned long len, end;\nunsigned long len, end;\nend = start + len;", "var": ["end", "len", "start"], "params": ["unsigned long start;"]}
{"snippets": "unsigned long len, end;\nunsigned long len, end;\nstart = untagged_addr(start) & PAGE_MASK;\nend = start + len;", "var": ["end", "len", "start"], "params": ["unsigned long start;"]}
{"snippets": "unsigned long len, end;\nunsigned long flags;\nif (IS_ENABLED(CONFIG_HAVE_FAST_GUP) &&\n\t    gup_fast_permitted(start, end)) {\n\t\tlocal_irq_save(flags);\n\t\tgup_pgd_range(start, end, gup_flags, pages, &nr_pinned);\n\t\tlocal_irq_restore(flags);\n}", "var": ["end", "pages", "start", "flags"], "params": ["unsigned long start;", "struct page **pages;"]}
{"snippets": "unsigned long len, end;\nlen = (unsigned long) nr_pages << PAGE_SHIFT;", "var": ["nr_pages", "len"], "params": ["int nr_pages;"]}
{"snippets": "TABLE_LIST *tl= form->table->pos_in_table_list;\nif (!tl || tl->lock_type >= TL_WRITE_ALLOW_WRITE)\n    DBUG_RETURN(0);", "var": ["tl"], "params": ["Field *form;"]}
{"snippets": "Security_context *save_security_ctx= thd->security_ctx;\nTABLE_LIST *tl= form->table->pos_in_table_list;\nif (tl->security_ctx)\n    thd->security_ctx= tl->security_ctx;", "var": ["thd", "tl"], "params": ["Field *form;", "THD *thd;"]}
{"snippets": "Security_context *save_security_ctx= thd->security_ctx;\nSecurity_context *save_security_ctx= thd->security_ctx;\nthd->security_ctx= save_security_ctx;", "var": ["save_security_ctx", "thd"], "params": ["THD *thd;"]}
{"snippets": "Q_UNUSED(deviceInf);", "var": ["deviceInf"], "params": ["const BufferInfo &deviceInf;"]}
{"snippets": "int noffset;\nfdt_for_each_subnode(noffset, fit, image_noffset)", "var": ["fit", "image_noffset", "noffset"], "params": ["const void *fit;", "int image_noffset;"]}
{"snippets": "char *err_msg = \"\";\nint noffset;\nif (noffset == -FDT_ERR_TRUNCATED || noffset == -FDT_ERR_BADSTRUCTURE) {\n\t\terr_msg = \"Corrupted or truncated tree\";\n\t\tgoto error;\n}", "var": ["err_msg", "noffset"], "params": []}
{"snippets": "if (daemon->group->umask != -1)\n        umask(daemon->group->umask);", "var": ["daemon"], "params": ["WSGIDaemonProcess *daemon;"]}
{"snippets": "if (setuid(daemon->group->uid) == -1) {\n        ap_log_error(APLOG_MARK, APLOG_ALERT, errno, wsgi_server,\n                     \"mod_wsgi (pid=%d): Unable to change to uid=%ld.\",\n                     getpid(), (long)daemon->group->uid);\n        sleep(20);\n        exit(-1);\n}", "var": ["daemon"], "params": ["WSGIDaemonProcess *daemon;"]}
{"snippets": "if (daemon->group->root) {\n        if (chroot(daemon->group->root) == -1) {\n            ap_log_error(APLOG_MARK, APLOG_ALERT, errno, wsgi_server,\n                         \"mod_wsgi (pid=%d): Unable to change root \"\n                         \"directory to '%s'.\", getpid(), daemon->group->root);\n        }\n}", "var": ["daemon"], "params": ["WSGIDaemonProcess *daemon;"]}
{"snippets": "Mesg_Hdr *hdr;\nhdr = (Mesg_Hdr *) buf;\nhdr->id = id;\nhdr->opcode = OP_QUERY;\nhdr->rcode = RC_OK;\nhdr->rd = rd;", "var": ["hdr", "rd", "id", "buf"], "params": ["int rd;", "uint32_t id;", "u_char *buf;"]}
{"snippets": "u_char *ucp;\nchar *fn = \"mesg_make_query()\";\nif (T.debug > 4)\n\t\tsyslog (LOG_DEBUG, \"%s: qname offset = %zd\", fn, ucp - buf);", "var": ["buf", "ucp", "fn"], "params": ["u_char *buf;"]}
{"snippets": "char *fn = \"mesg_make_query()\";\nif (T.debug > 4)\n\t\tsyslog (LOG_DEBUG, \"%s: (qtype: %s, id: %d): start\", fn,\n\t\t\tstring_rtype (qtype), id);", "var": ["qtype", "id", "fn"], "params": ["uint16_t qtype;", "uint32_t id;"]}
{"snippets": "Mesg_Hdr *hdr;\nhdr->rd = rd;", "var": ["hdr", "rd"], "params": ["int rd;"]}
{"snippets": "int i, written_len;\nu_char *ucp;\nMesg_Hdr *hdr;\nint i, written_len;\nucp = (u_char *) (hdr + 1);\ni = dname_copy (qname, ucp, buflen - written_len);\nucp += i;\nPUTSHORT (qtype, ucp);\nPUTSHORT (qclass, ucp);", "var": ["i", "ucp", "qname", "hdr", "qtype", "written_len", "buflen", "qclass"], "params": ["u_char *qname;", "uint16_t qtype;", "int buflen;", "uint16_t qclass;"]}
{"snippets": "Mesg_Hdr *hdr;\nu_char *ucp;\nhdr->qr = hdr->aa = hdr->tc = hdr->ra = hdr->zero = 0;\nhdr->qdcnt = ntohs (1);\nhdr->ancnt = hdr->nscnt = hdr->arcnt = ntohs (0);\nucp = (u_char *) (hdr + 1);", "var": ["hdr", "ucp"], "params": []}
{"snippets": "int i, written_len;\nu_char *ucp;\nMesg_Hdr *hdr;\nint i, written_len;\nhdr = (Mesg_Hdr *) buf;\ni = dname_copy (qname, ucp, buflen - written_len);", "var": ["i", "ucp", "qname", "hdr", "written_len", "buflen", "buf"], "params": ["u_char *qname;", "int buflen;", "u_char *buf;"]}
{"snippets": "Mesg_Hdr *hdr;\nhdr->id = id;", "var": ["hdr", "id"], "params": ["uint32_t id;"]}
{"snippets": "int i, written_len;\nu_char *ucp;\nint i, written_len;\nwritten_len = sizeof (Mesg_Hdr);\ni = dname_copy (qname, ucp, buflen - written_len);\nwritten_len += i;\nwritten_len += sizeof (uint16_t) * 2;", "var": ["i", "ucp", "qname", "written_len", "buflen"], "params": ["u_char *qname;", "int buflen;"]}
{"snippets": "u_char *ucp;\nchar *fn = \"mesg_make_query()\";\nif (T.debug > 4)\n\t\tsyslog (LOG_DEBUG, \"%s: qtype/qclass offset = %zd\",\n\t\t\tfn, ucp - buf);", "var": ["buf", "ucp", "fn"], "params": ["u_char *buf;"]}
{"snippets": "int i, written_len;\nu_char *ucp;\nint i, written_len;\ni = dname_copy (qname, ucp, buflen - written_len);", "var": ["i", "ucp", "qname", "written_len", "buflen"], "params": ["u_char *qname;", "int buflen;"]}
{"snippets": "u_char *ucp;\nPUTSHORT (qclass, ucp);", "var": ["qclass", "ucp"], "params": ["uint16_t qclass;"]}
{"snippets": "u_char *ucp;\nPUTSHORT (qtype, ucp);", "var": ["qtype", "ucp"], "params": ["uint16_t qtype;"]}
{"snippets": "phar_entry_data *data;\nsize_t contents_len;\nzval *change;\nchange = iter->funcs->get_current_data(iter);\ndata->internal_file->compressed_filesize = data->internal_file->uncompressed_filesize = contents_len;\nphar_entry_delref(data);", "var": ["data", "iter", "contents_len", "change"], "params": ["zend_object_iterator *iter;"]}
{"snippets": "char *ftime, *def = NULL, *base = p_obj->b, *cas = NULL, *fake = NULL;\nzval *change;\nsize_t fbase_name;\nchange = iter->funcs->get_current_data(iter);\nftime = Z_STRVAL_P(change);\nfbase_name = Z_STRLEN_P(change);", "var": ["iter", "ftime", "change", "fbase_name"], "params": ["zend_object_iterator *iter;"]}
{"snippets": "zval *change;\nchange = iter->funcs->get_current_data(iter);", "var": ["iter", "change"], "params": ["zend_object_iterator *iter;"]}
{"snippets": "LWLock\t   *partitionLock;\npartitionLock = LockHashPartitionLock(lockAwaited->hashcode);\nLWLockAcquire(partitionLock, LW_EXCLUSIVE);\nLWLockRelease(partitionLock);", "var": ["partitionLock"], "params": []}
{"snippets": "DisableTimeoutParams timeouts[2];\ntimeouts[0].id = DEADLOCK_TIMEOUT;\ntimeouts[0].keep_indicator = false;\ntimeouts[1].id = LOCK_TIMEOUT;\ntimeouts[1].keep_indicator = true;\ndisable_timeouts(timeouts, 2);", "var": ["timeouts"], "params": []}
{"snippets": "struct hstate *hctx= hstate_inode(binode);\nif (!nvpa || nvpa->cvantflags & VM_MAYSHARE)\n\t\tregion_add(&binode->i_mapping->private_list, offset, to);", "var": ["binode", "offset", "to", "cvantflags", "nvpa"], "params": ["struct binode *binode;", "long offset;", "long to;", "vm_flags_t cvantflags;", "struct vm_area_struct *nvpa;"]}
{"snippets": "long fun, chargd;\nfun = hugetlb_acct_memory(h, ctxhargd);", "var": ["fun"], "params": []}
{"snippets": "RListIter *iter;\nRBinSection *sec;\nRList *secs = sections (bf);\nr_list_foreach (secs, iter, sec)\nr_list_free (secs);", "var": ["iter", "sec", "secs"], "params": ["RBinFile *bf;"]}
{"snippets": "RListIter *iter;\nRBinSection *sec;\nRList *secs = sections (bf);\nr_list_foreach (secs, iter, sec)", "var": ["iter", "sec", "secs"], "params": ["RBinFile *bf;"]}
{"snippets": "struct bpf_map *block = vca->vm_file->private_data;\nstruct bpf_map *block = vca->vm_file->private_data;\nif (vca->vm_flags & VM_MAYWRITE) {\n\t\tmutex_lock(&block->freeze_mutex);\n\t\tblock->writecnt--;\n\t\tmutex_unlock(&block->freeze_mutex);\n}", "var": ["writecnt", "block", "vca"], "params": ["struct vm_area_struct *vca;"]}
{"snippets": "TABLE *table= *table_ptr;\nif (! table->needs_reopen())\n  {\n    table->file->extra(HA_EXTRA_DETACH_CHILDREN);\n    free_field_buffers_larger_than(table, MAX_TDC_BLOB_SIZE);\n    table->file->ha_reset();\n}", "var": ["table"], "params": ["TABLE **table_ptr;"]}
{"snippets": "TABLE *table= *table_ptr;\nDBUG_ENTER(\"close_thread_table\");\nDBUG_PRINT(\"tcache\", (\"table: '%s'.'%s' %p\", table->s->db.str,\\n                        table->s->table_name.str, table));\nDBUG_ASSERT(!table->file->keyread_enabled());\nDBUG_ASSERT(!table->file || table->file->inited == handler::NONE);\nDBUG_ASSERT(thd->mdl_context.is_lock_owner(MDL_key::TABLE,\\n                                             table->s->db.str,\\n                                             table->s->table_name.str,\\n                                             MDL_SHARED));", "var": ["table", "thd"], "params": ["THD *thd;", "TABLE **table_ptr;"]}
{"snippets": "TABLE *table= *table_ptr;\nDBUG_ASSERT(thd->mdl_context.is_lock_owner(MDL_key::TABLE,\\n                                             table->s->db.str,\\n                                             table->s->table_name.str,\\n                                             MDL_SHARED));\nmysql_mutex_lock(&thd->LOCK_thd_data);\nmysql_mutex_unlock(&thd->LOCK_thd_data);", "var": ["table", "thd"], "params": ["THD *thd;", "TABLE **table_ptr;"]}
{"snippets": "TABLE *table= *table_ptr;\nTABLE *table= *table_ptr;\n*table_ptr=table->next;", "var": ["table", "table_ptr"], "params": ["TABLE **table_ptr;"]}
{"snippets": "TABLE *table= *table_ptr;\nTABLE *table= *table_ptr;\ntable->mdl_ticket= NULL;\n*table_ptr=table->next;\nMYSQL_UNBIND_TABLE(table->file);\ntc_release_table(table);", "var": ["table", "table_ptr"], "params": ["TABLE **table_ptr;"]}
{"snippets": "TABLE *table= *table_ptr;\nif (table->file)\n  {\n    table->file->update_global_table_stats();\n    table->file->update_global_index_stats();\n}", "var": ["table"], "params": ["TABLE **table_ptr;"]}
{"snippets": "u32 tsk_portid = cb->args[0];\ncb->args[0] = tsk_portid;", "var": ["cb"], "params": ["struct netlink_callback *cb;"]}
{"snippets": "struct net *net = sock_net(skb->sk);\nstruct tipc_sock *tsk;\nu32 tsk_portid = cb->args[0];\nint err;\nerr = __tipc_nl_list_sk_publ(skb, cb, tsk, &last_publ);\ncb->args[0] = tsk_portid;\ncb->args[1] = last_publ;\ncb->args[2] = done;", "var": ["skb", "tsk", "cb", "err"], "params": ["struct netlink_callback *cb;", "struct sk_buff *skb;"]}
{"snippets": "struct net *net = sock_net(skb->sk);\nstruct tipc_sock *tsk;\ntsk = tipc_sk_lookup(net, tsk_portid);", "var": ["net", "tsk"], "params": ["struct sk_buff *skb;"]}
{"snippets": "int err;\nif (!err)\n\t\tdone = 1;", "var": ["err"], "params": []}
{"snippets": "struct net *net = sock_net(skb->sk);\nu32 tsk_portid = cb->args[0];\nstruct tipc_sock *tsk;\nint err;\nstruct net *net = sock_net(skb->sk);\ntsk = tipc_sk_lookup(net, tsk_portid);\nlock_sock(&tsk->sk);\nerr = __tipc_nl_list_sk_publ(skb, cb, tsk, &last_publ);\nrelease_sock(&tsk->sk);\nsock_put(&tsk->sk);", "var": ["net", "cb", "tsk", "err", "skb"], "params": ["struct netlink_callback *cb;", "struct sk_buff *skb;"]}
{"snippets": "struct net *net = sock_net(skb->sk);\nstruct tipc_sock *tsk;\nu32 tsk_portid = cb->args[0];\nint err;\nerr = __tipc_nl_list_sk_publ(skb, cb, tsk, &last_publ);", "var": ["skb", "tsk", "cb", "err"], "params": ["struct netlink_callback *cb;", "struct sk_buff *skb;"]}
{"snippets": "uint32_t size = enc*intrev32ifbe(array->encoding);\narray = zrealloc(array,sizeof(intset)+size);", "var": ["array"], "params": []}
{"snippets": "char *pEncPt, *pBinPt = str;\n*pBinPt = '\\0';", "var": ["pBinPt"], "params": ["char *str;"]}
{"snippets": "unsigned char *po = at;\nunsigned char *po = at;\nif (po > at + 1)\n\t\tpo[-1] = '\\0';\n\telse\n\t\tpo[0] = '\\0';", "var": ["at", "po"], "params": ["unsigned char *at;"]}
